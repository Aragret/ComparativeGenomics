%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCAUCACAGGGGGGGGGGACAAUUAUCAAUAUAAAACCCCCUGCCAUAACCCAAUACCAAACGCCCCUxxxxxxxxxxCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCCCCCCCCCCCUUUCCUCACA\
) } def
/len { sequence length } bind def

/coor [
[82.61924744 379.30667114]
[70.06102753 370.95550537]
[59.97480392 359.74307251]
[52.99460983 346.37417603]
[49.55922699 331.68917847]
[49.88460159 316.61120605]
[53.95028687 302.08810425]
[61.50070572 289.03274536]
[72.06123352 278.26583862]
[84.96803284 270.46423340]
[99.40975952 266.11825562]
[98.78578186 251.13125610]
[98.16180420 236.14424133]
[97.53782654 221.15722656]
[96.91384888 206.17019653]
[96.28987122 191.18318176]
[95.66589355 176.19616699]
[95.04191589 161.20915222]
[94.41793823 146.22213745]
[93.79396057 131.23512268]
[88.68680573 129.76843262]
[83.89460754 127.47296906]
[79.55079651 124.41265869]
[75.77629089 120.67268372]
[72.67618561 116.35717010]
[58.35359192 120.81398773]
[44.03099442 125.27080536]
[29.70839691 129.72761536]
[18.98756218 142.13711548]
[2.93320870 138.79200745]
[-1.93932307 123.13345337]
[9.38241005 111.26963043]
[25.25158119 115.40502167]
[39.57417679 110.94820404]
[53.89677429 106.49139404]
[68.21937561 102.03457642]
[68.32688904 92.81368256]
[71.10547638 83.83161163]
[76.42339325 75.86009216]
[83.92679596 69.61373901]
[93.06203461 65.68647003]
[103.11602020 64.49612427]
[113.27176666 66.24238586]
[113.58382416 51.24563599]
[113.89588165 36.24888229]
[114.20793915 21.25212860]
[114.51998901 6.25537395]
[114.83204651 -8.74137974]
[99.94523621 -10.70250988]
[85.36452484 -14.28943825]
[71.26691437 -19.45862198]
[57.82352829 -26.14731216]
[45.19755936 -34.27431488]
[33.54228210 -43.74097824]
[22.99917412 -54.43238068]
[13.69622231 -66.21874237]
[5.74635458 -78.95697784]
[-0.75392455 -92.49246979]
[-5.72570801 -106.66091156]
[-9.10864258 -121.29029083]
[-10.86166191 -136.20304871]
[-10.96348763 -151.21812439]
[-9.41288185 -166.15328979]
[-6.22866917 -180.82720947]
[-1.44950163 -195.06176758]
[4.86660528 -208.68417358]
[12.64298058 -221.52906799]
[21.78522491 -233.44050598]
[32.18236160 -244.27392578]
[43.70817566 -253.89778137]
[56.22275925 -262.19528198]
[69.57419586 -269.06567383]
[83.60040283 -274.42559814]
[98.13112640 -278.20993042]
[112.98996735 -280.37277222]
[127.99656677 -280.88787842]
[142.96873474 -279.74899292]
[157.72474670 -276.96990967]
[172.08547974 -272.58438110]
[185.87658691 -266.64562988]
[198.93066406 -259.22576904]
[211.08924866 -250.41487122]
[222.20474243 -240.31988525]
[232.14222717 -229.06335449]
[240.78106689 -216.78190613]
[248.01637268 -203.62464905]
[253.76034546 -189.75129700]
[257.94323730 -175.33024597]
[260.51428223 -160.53657532]
[261.44226074 -145.54985046]
[260.71591187 -130.55198669]
[258.34408569 -115.72507477]
[254.35551453 -101.24906921]
[248.79864502 -87.29972076]
[241.74093628 -74.04634857]
[233.26805115 -61.64983368]
[223.48286438 -50.26066589]
[212.50413513 -40.01709366]
[200.46514893 -31.04346848]
[187.51203918 -23.44872093]
[173.80204773 -17.32504463]
[159.50160217 -12.74677467]
[144.78430176 -9.76948738]
[129.82879639 -8.42932320]
[129.51673889 6.56743050]
[129.20469666 21.56418419]
[128.89263916 36.56093597]
[128.58058167 51.55768967]
[128.26852417 66.55444336]
[137.89704895 78.05625153]
[152.71479797 80.38735199]
[167.53256226 82.71846008]
[176.56256104 80.95468140]
[182.63302612 85.25527954]
[197.39909363 87.89414215]
[212.62988281 81.81509399]
[225.34065247 92.17696381]
[222.45564270 108.32034302]
[206.94270325 113.63831329]
[194.76022339 102.66019440]
[179.99417114 100.02133179]
[165.20146179 97.53621674]
[150.38369751 95.20510864]
[135.56594849 92.87400818]
[135.21025085 103.53618622]
[131.80612183 113.36994171]
[125.80274963 121.54737091]
[117.86045837 127.42862701]
[108.78097534 130.61114502]
[109.40495300 145.59815979]
[110.02893066 160.58517456]
[110.65290833 175.57218933]
[111.27688599 190.55920410]
[111.90086365 205.54621887]
[112.52484131 220.53324890]
[113.14881897 235.52026367]
[113.77279663 250.50727844]
[114.39677429 265.49429321]
[129.14978027 268.62472534]
[142.66041565 275.32647705]
[154.07939148 285.17828369]
[162.68890381 297.56082153]
[167.94775391 311.69570923]
[169.52536011 326.69442749]
[167.32255554 341.61416626]
[161.47781372 355.51702881]
[152.35853577 367.52911377]
[140.53796387 376.89526367]
[126.75914764 383.02676392]
[111.88824463 385.53814697]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[25 36]
[26 35]
[27 34]
[28 33]
[43 109]
[44 108]
[45 107]
[46 106]
[47 105]
[48 104]
[110 124]
[111 123]
[112 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
