%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAAUCUACGGGGGGGGGGUCCACCUCAAUCACACUACUCCCCAUAUCUAACAACGUAAAAAUAAAAUGxxxxxxxxxxAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCCCCCCCCCCCUAUUCUAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 379.01727295]
[71.19830322 373.00125122]
[59.48964310 363.47183228]
[50.78712082 351.13616943]
[45.73651886 336.90963745]
[44.71262741 321.84796143]
[47.79142761 307.06878662]
[54.74444962 293.66888428]
[65.05573273 282.64254761]
[77.96011353 274.80804443]
[92.50000000 270.74670410]
[92.50000000 255.74671936]
[92.50000000 240.74671936]
[92.50000000 225.74671936]
[92.50000000 210.74671936]
[92.50000000 195.74671936]
[92.50000000 180.74671936]
[92.50000000 165.74671936]
[92.50000000 150.74671936]
[92.50000000 135.74671936]
[78.79994965 129.74282837]
[68.65536499 118.75077057]
[63.76757812 104.61402893]
[64.95632935 89.70346069]
[72.02224731 76.51972961]
[62.75729752 64.72309113]
[53.49234772 52.92645264]
[44.22739792 41.12981033]
[34.96244812 29.33317184]
[22.27834892 37.36464691]
[8.84678650 44.07167053]
[-5.19440889 49.38541412]
[-19.70115089 53.25134659]
[-34.52457809 55.62980270]
[-49.51257324 56.49637222]
[-64.51134491 55.84216309]
[-79.36696625 53.67388916]
[-93.92700958 50.01380157]
[-108.04205322 44.89945984]
[-121.56726074 38.38333893]
[-134.36383057 30.53231430]
[-146.30047607 21.42694283]
[-157.25466919 11.16066360]
[-167.11402893 -0.16117476]
[-175.77737427 -12.42239189]
[-183.15580750 -25.49716759]
[-189.17361450 -39.25133133]
[-193.76904297 -53.54374695]
[-196.89492798 -68.22774506]
[-198.51919556 -83.15264893]
[-198.62518311 -98.16530609]
[-197.21179199 -113.11165619]
[-194.29354858 -127.83832550]
[-189.90037537 -142.19419861]
[-184.07736206 -156.03195190]
[-176.88427734 -169.20960999]
[-168.39489746 -181.59191895]
[-158.69638062 -193.05183411]
[-147.88821411 -203.47174072]
[-136.08132935 -212.74473572]
[-123.39688110 -220.77566528]
[-109.96501923 -227.48208618]
[-95.92359161 -232.79521179]
[-81.41667938 -236.66050720]
[-66.59314728 -239.03831482]
[-51.60511398 -239.90422058]
[-36.60637665 -239.24935913]
[-21.75084496 -237.08042908]
[-7.19096613 -233.41970825]
[6.92385387 -228.30473328]
[20.44877434 -221.78802490]
[33.24500656 -213.93643188]
[45.18124008 -204.83053589]
[56.13498688 -194.56378174]
[65.99385071 -183.24150085]
[74.65665436 -170.97990417]
[82.03451538 -157.90480042]
[88.05171204 -144.15037537]
[92.64650726 -129.85775757]
[95.77174377 -115.17362213]
[97.39535522 -100.24864197]
[97.50067902 -85.23598480]
[96.08663940 -70.28970337]
[93.16773987 -55.56315613]
[88.77394104 -41.20747757]
[82.95032501 -27.36997604]
[75.75664520 -14.19264507]
[67.26673889 -1.81070626]
[57.56770706 9.64878082]
[46.75908661 20.06822205]
[56.02403641 31.86486244]
[65.28898621 43.66150284]
[74.55393982 55.45814133]
[83.81888580 67.25478363]
[94.66945648 63.86603928]
[106.03634644 63.97722626]
[116.81855774 67.57756805]
[125.97171783 74.31834412]
[132.60926819 83.54663849]
[136.08830261 94.36860657]
[151.06800842 95.14844513]
[156.60125732 83.07274628]
[165.90081787 73.63308716]
[177.83457947 67.94748688]
[190.96032715 66.67883301]
[203.70001221 69.95767975]
[214.52952576 77.36917114]
[222.16096497 88.00540924]
[225.69586182 100.57660675]
[240.63015747 101.97891235]
[255.56446838 103.38121796]
[270.49877930 104.78351593]
[285.43307495 106.18582153]
[300.10586548 98.86175537]
[313.63397217 108.13117981]
[312.10086060 124.45851135]
[297.08364868 131.04757690]
[284.03079224 121.12013245]
[269.09646606 119.71782684]
[254.16217041 118.31552124]
[239.22785950 116.91322327]
[224.29354858 115.51091766]
[216.03839111 130.18977356]
[202.17045593 139.84147644]
[185.42930603 142.50093079]
[169.14761353 137.59014893]
[156.58776855 126.04303741]
[150.28816223 110.12816620]
[135.30845642 109.34832001]
[125.14676666 126.48995972]
[107.50000000 135.74671936]
[107.50000000 150.74671936]
[107.50000000 165.74671936]
[107.50000000 180.74671936]
[107.50000000 195.74671936]
[107.50000000 210.74671936]
[107.50000000 225.74671936]
[107.50000000 240.74671936]
[107.50000000 255.74671936]
[107.50000000 270.74670410]
[122.03988647 274.80804443]
[134.94427490 282.64254761]
[145.25555420 293.66888428]
[152.20857239 307.06878662]
[155.28736877 321.84796143]
[154.26348877 336.90963745]
[149.21287537 351.13616943]
[140.51036072 363.47183228]
[128.80169678 373.00125122]
[114.95575714 379.01727295]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 94]
[26 93]
[27 92]
[28 91]
[29 90]
[100 129]
[101 128]
[109 122]
[110 121]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
