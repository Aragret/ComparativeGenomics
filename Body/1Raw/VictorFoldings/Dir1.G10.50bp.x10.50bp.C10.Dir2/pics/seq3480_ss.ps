%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCGCCACAGGGGGGGGGGUCUACCAUCACCCUCUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCxxxxxxxxxxAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUAGGCCUCCCCCCCCCCACCCGCCGCA\
) } def
/len { sequence length } bind def

/coor [
[44.37835693 436.29034424]
[30.53241920 430.27432251]
[18.82375717 420.74490356]
[10.12123299 408.40924072]
[5.07063150 394.18270874]
[4.04674006 379.12103271]
[7.12553930 364.34188843]
[14.07856083 350.94195557]
[24.38984489 339.91561890]
[37.29422760 332.08111572]
[51.83411407 328.01980591]
[51.83411407 313.01980591]
[51.83411407 298.01980591]
[51.83411407 283.01980591]
[51.83411407 268.01980591]
[51.83411407 253.01980591]
[51.83411407 238.01980591]
[51.83411407 223.01980591]
[51.83411407 208.01980591]
[51.83411407 193.01980591]
[44.05462265 205.84475708]
[33.15591812 216.15098572]
[19.91657829 223.20220947]
[5.28239632 226.49473572]
[-9.70119572 225.79333496]
[-23.96380424 221.14813232]
[-36.48653793 212.89094543]
[-46.37480164 201.61166382]
[-52.92219925 188.11604309]
[-55.66099930 173.36819458]
[-54.39554977 158.42167664]
[-49.21624756 144.34420776]
[-40.49309540 132.14147949]
[-28.84925079 122.68522644]
[-15.11652660 116.65096283]
[-0.27595997 114.46977234]
[14.61227322 116.29747772]
[28.48459053 122.00351715]
[40.34998322 131.18025208]
[49.36081314 143.17211914]
[54.87337112 157.12245178]
[56.49398804 172.02917480]
[52.65737152 160.51449585]
[57.88640594 149.11817932]
[69.86049652 144.21153259]
[76.48899078 130.75556946]
[83.11749268 117.29960632]
[73.79802704 98.28092957]
[83.02361298 77.30181885]
[106.66895294 70.30925751]
[108.53656006 55.42597198]
[99.04830170 67.04375458]
[87.45204163 76.55831146]
[74.20479584 83.59468079]
[59.82862854 87.87554932]
[44.89010620 89.23222351]
[29.97795105 87.61122894]
[15.67984581 83.07644653]
[2.55927825 75.80660248]
[-8.86667538 66.08818817]
[-18.14772034 54.30420303]
[-24.91809273 40.91905975]
[-28.91097450 26.46026230]
[-29.96900749 11.49762249]
[-28.05049324 -3.37918162]
[-23.23104095 -17.58386040]
[-15.70058441 -30.55660820]
[-5.75589657 -41.78617477]
[6.21110487 -50.83000565]
[19.72880363 -57.33168793]
[34.26446915 -61.03498459]
[49.24525452 -61.79395294]
[64.08077240 -59.57868576]
[78.18635559 -54.47648621]
[91.00611115 -46.68842316]
[102.03481293 -36.52143097]
[110.83782196 -24.37618256]
[117.06821442 -10.73132133]
[120.48045349 3.87541151]
[120.94005585 18.86836815]
[118.42948151 33.65462112]
[128.41221619 22.45885277]
[138.39494324 11.26308727]
[148.37767029 0.06732180]
[158.36039734 -11.12844372]
[168.22612000 -22.42744827]
[177.97377014 -33.82846832]
[187.72142029 -45.22949219]
[197.46907043 -56.63051224]
[195.98756409 -72.36521149]
[206.13029480 -84.48545837]
[221.87977600 -85.80052948]
[233.89210510 -75.53021240]
[235.04060364 -59.76770782]
[224.64385986 -47.86462784]
[208.87008667 -46.88285828]
[199.12243652 -35.48183823]
[189.37478638 -24.08081818]
[179.62713623 -12.67979717]
[177.65820312 -5.50560951]
[169.55615234 -1.14571762]
[159.57342529 10.05004787]
[149.59069824 21.24581337]
[139.60797119 32.44158173]
[129.62524414 43.63734436]
[123.41984558 57.29358673]
[121.55223083 72.17686462]
[131.18075562 83.67867279]
[146.16047668 84.45851898]
[161.14018250 85.23835754]
[176.11990356 86.01820374]
[187.69186401 75.25413513]
[203.48257446 75.90888214]
[214.12370300 87.59399414]
[213.30204773 103.37691498]
[201.50508118 113.89390564]
[185.73173523 112.90541840]
[175.34005737 100.99791718]
[160.36033630 100.21807861]
[145.38063049 99.43823242]
[130.40090942 98.65838623]
[127.81170654 108.82687378]
[122.08362579 117.09505463]
[114.18364716 122.59220123]
[105.27976227 124.86959839]
[96.57345581 123.92810822]
[89.94496155 137.38407898]
[83.31645966 150.84004211]
[84.97972107 169.14888000]
[70.08493805 178.37629700]
[66.83411407 193.01980591]
[66.83411407 208.01980591]
[66.83411407 223.01980591]
[66.83411407 238.01980591]
[66.83411407 253.01980591]
[66.83411407 268.01980591]
[66.83411407 283.01980591]
[66.83411407 298.01980591]
[66.83411407 313.01980591]
[66.83411407 328.01980591]
[81.37400055 332.08111572]
[94.27838135 339.91561890]
[104.58966827 350.94195557]
[111.54268646 364.34188843]
[114.62148285 379.12103271]
[113.59759521 394.18270874]
[108.54698944 408.40924072]
[99.84446716 420.74490356]
[88.13580322 430.27432251]
[74.28987122 436.29034424]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[42 130]
[45 128]
[46 127]
[47 126]
[50 107]
[51 106]
[81 105]
[82 104]
[83 103]
[84 102]
[85 101]
[86 99]
[87 98]
[88 97]
[89 96]
[108 121]
[109 120]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
