%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUACUUAAGGGGGGGGGGUUUCUGUAACAGCUAAGGACUGCAAAACCCCACUCUGCAUCAACUGAACGxxxxxxxxxxCCUCCCCCAAAAUUCAGAAUAAUAACACACCCGACCACACCGCUAACAAUCCCCCCCCCCCAAUACUAAA\
) } def
/len { sequence length } bind def

/coor [
[122.00405121 433.95553589]
[108.15811157 427.93951416]
[96.44944763 418.41009521]
[87.74692535 406.07443237]
[82.69632721 391.84790039]
[81.67243195 376.78622437]
[84.75123596 362.00704956]
[91.70425415 348.60711670]
[102.01554108 337.58078003]
[114.91992188 329.74627686]
[129.45980835 325.68496704]
[129.45980835 310.68496704]
[129.45980835 295.68496704]
[129.45980835 280.68496704]
[129.45980835 265.68496704]
[129.45980835 250.68496704]
[129.45980835 235.68496704]
[129.45980835 220.68496704]
[129.45980835 205.68496704]
[129.45980835 190.68496704]
[129.30377197 175.68577576]
[128.99171448 160.68902588]
[124.23789978 146.46224976]
[115.47169495 134.29040527]
[106.70548248 122.11857605]
[97.93927765 109.94673920]
[91.00225830 105.73226929]
[89.12042236 97.42925262]
[80.60933685 85.07768250]
[69.10752869 75.44915771]
[55.45129013 69.24374390]
[41.79504776 63.03834152]
[32.96060562 69.21840668]
[22.43137550 71.12455750]
[12.14813042 68.47436523]
[3.97759461 61.81892776]
[-0.62639326 52.42996597]
[-0.88135624 42.05718994]
[-14.12394142 35.01205444]
[-23.23458099 33.72826767]
[-27.56649590 27.68011475]
[-40.65964890 20.36100960]
[-53.75280380 13.04190350]
[-66.84595490 5.72279739]
[-79.63237762 14.13505840]
[-94.86469269 15.63006020]
[-109.04264069 9.86426353]
[-118.90822601 -1.83739519]
[-122.19441223 -16.78595924]
[-118.14605713 -31.54635811]
[-107.69343567 -42.72676086]
[-93.23850250 -47.75799179]
[-78.10287476 -45.48391342]
[-65.76461792 -36.42708969]
[-59.05897522 -22.66871262]
[-59.52685165 -7.37035704]
[-46.43369675 -0.05125127]
[-33.34054565 7.26785421]
[-20.24738884 14.58695984]
[-7.07880688 21.76946831]
[6.16377878 28.81460381]
[24.24956131 21.72411156]
[42.03619766 30.25948906]
[48.00045776 49.38209915]
[61.65669632 55.58750534]
[75.31294250 61.79291534]
[66.91322327 49.36533356]
[61.43033981 35.40331268]
[59.12898254 20.58090591]
[60.12025833 5.61369610]
[64.35631561 -8.77573872]
[71.63263702 -21.89271545]
[81.59795380 -33.10398102]
[93.77115631 -41.86828995]
[107.56456757 -47.76251602]
[122.31226349 -50.50210953]
[137.30227661 -49.95480728]
[151.81092834 -46.14702988]
[165.13777161 -39.26260757]
[176.63941956 -29.63390541]
[185.76062012 -17.72576714]
[192.06101990 -4.11308670]
[195.23643494 10.54695034]
[195.13359070 25.54659843]
[191.75743103 40.16171265]
[185.27096558 53.68671417]
[175.98733521 65.46865845]
[164.35472107 74.93873596]
[150.93472290 81.63976288]
[136.37522888 85.24822235]
[121.37911987 85.58992004]
[106.67037201 82.64835358]
[92.96090698 76.56658936]
[101.47200012 88.91815948]
[110.11111450 101.18053436]
[118.87731934 113.35237122]
[127.64353180 125.52420807]
[136.40972900 137.69604492]
[135.44819641 122.72689056]
[137.46258545 107.86277008]
[142.37351990 93.68946075]
[149.98747253 80.76553345]
[160.00434875 69.60031128]
[172.02941895 60.63382721]
[185.58874512 54.21944046]
[200.14799500 50.60993576]
[215.13336182 49.94757080]
[229.95428467 52.25844193]
[244.02667236 57.45148468]
[256.79595947 65.32203674]
[267.75888062 75.55992889]
[276.48339844 87.76168060]
[282.62567139 101.44642639]
[285.94366455 116.07485962]
[286.30661011 131.07046509]
[283.70016479 145.84228516]
[278.22708130 159.80815125]
[270.10305786 172.41767883]
[259.64825439 183.17391968]
[247.27468872 191.65299988]
[233.46998596 197.52073669]
[218.77819824 200.54588318]
[203.77833557 200.60923767]
[189.06152344 197.70828247]
[175.20776367 191.95735168]
[162.76301575 183.58309937]
[152.21771240 172.91554260]
[143.98846436 160.37696838]
[144.30052185 175.37371826]
[147.62538147 183.95260620]
[144.45980835 190.68496704]
[144.45980835 205.68496704]
[144.45980835 220.68496704]
[144.45980835 235.68496704]
[144.45980835 250.68496704]
[144.45980835 265.68496704]
[144.45980835 280.68496704]
[144.45980835 295.68496704]
[144.45980835 310.68496704]
[144.45980835 325.68496704]
[158.99969482 329.74627686]
[171.90406799 337.58078003]
[182.21536255 348.60711670]
[189.16838074 362.00704956]
[192.24717712 376.78622437]
[191.22328186 391.84790039]
[186.17268372 406.07443237]
[177.47016907 418.41009521]
[165.76150513 427.93951416]
[151.91555786 433.95553589]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 129]
[22 128]
[23 98]
[24 97]
[25 96]
[26 95]
[28 94]
[29 93]
[30 66]
[31 65]
[32 64]
[38 61]
[39 60]
[41 59]
[42 58]
[43 57]
[44 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
