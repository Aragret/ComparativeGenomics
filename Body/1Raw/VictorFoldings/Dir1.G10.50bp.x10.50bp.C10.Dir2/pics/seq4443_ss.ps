%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUCUCCAGCAGGGGGGGGGGUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGxxxxxxxxxxACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCCCCCCCCCCCAAUCUCCAACA\
) } def
/len { sequence length } bind def

/coor [
[86.46935272 384.17047119]
[72.30874634 379.01544189]
[59.71900177 370.73324585]
[49.37906647 359.77047729]
[41.84655380 346.71835327]
[37.52768707 332.28076172]
[36.65538025 317.23629761]
[39.27666855 302.39630127]
[45.25019836 288.56106567]
[54.25381470 276.47671509]
[65.80197144 266.79492188]
[79.27188873 260.03784180]
[93.93714905 256.56988525]
[93.93714905 241.56988525]
[93.93714905 226.56988525]
[93.93714905 211.56988525]
[93.93714905 196.56988525]
[93.93714905 181.56988525]
[93.93714905 166.56988525]
[93.93714905 151.56988525]
[93.93714905 136.56988525]
[93.93714905 121.56987762]
[82.07551575 112.38829041]
[67.55435181 116.14807892]
[53.03319931 119.90786743]
[50.95653534 134.96627808]
[43.27102661 148.08120728]
[31.14866066 157.25273132]
[16.43800735 161.08222961]
[1.38233614 158.98576355]
[-11.72247410 151.28300476]
[-20.87803268 139.14859009]
[-24.68818665 124.43290710]
[-22.57191277 109.38001251]
[-14.85192680 96.28534698]
[-2.70547271 87.14575195]
[12.01520443 83.35496521]
[27.06530762 85.49103546]
[40.14980698 93.22824097]
[49.27341080 105.38670349]
[63.79456711 101.62692261]
[78.31572723 97.86713409]
[79.53054047 82.91573334]
[80.74526215 67.96566772]
[67.02154541 61.91094589]
[53.29783630 55.85622025]
[37.88024139 60.29213715]
[24.88333702 50.88681793]
[24.27723503 34.85521698]
[36.52688599 24.49540901]
[52.23540497 27.75455093]
[59.35255814 42.13250732]
[73.07627106 48.18723297]
[86.79998779 54.24195862]
[95.98157501 42.38032150]
[86.68025208 30.61234093]
[77.37892914 18.84436035]
[68.07760620 7.07637882]
[52.37469864 3.79029441]
[45.28221893 -10.59985065]
[52.24090576 -25.05516815]
[67.91265106 -28.48677635]
[80.27543640 -18.26223946]
[79.84558105 -2.22494507]
[89.14691162 9.54303551]
[98.44823456 21.31101608]
[107.74955750 33.07899857]
[118.27967834 50.61149979]
[121.23403931 68.53765869]
[117.20349884 84.35729980]
[107.50556183 95.91217804]
[119.90321350 87.46836090]
[104.94180298 86.39317322]
[92.44775391 78.09264374]
[85.65805817 64.71729279]
[86.33181000 49.73242950]
[94.29444122 37.02037048]
[107.48298645 29.87458229]
[122.48052216 30.14640808]
[135.40145874 37.76542664]
[142.89820862 50.75768280]
[143.02850342 65.75711823]
[135.75999451 78.87616730]
[149.60359192 73.10082245]
[163.44720459 67.32547760]
[177.29080200 61.55013657]
[191.13441467 55.77479553]
[204.97801208 49.99945068]
[205.09130859 38.87467575]
[210.34248352 28.33239555]
[220.18173218 20.73569298]
[232.98655701 18.04715538]
[246.32073975 21.35284996]
[259.05038452 13.41838932]
[271.78005981 5.48392916]
[284.50973511 -2.45053124]
[297.23937988 -10.38499165]
[302.90878296 -17.62371635]
[310.30844116 -18.34823418]
[323.19628906 -26.02307320]
[336.08413696 -33.69791412]
[346.59933472 -46.99705505]
[362.28961182 -40.57437515]
[360.46145630 -23.71928406]
[343.75897217 -20.81005669]
[330.87112427 -13.13521671]
[317.98327637 -5.46037769]
[305.17385864 2.34467244]
[292.44418335 10.27913284]
[279.71450806 18.21359253]
[266.98486328 26.14805222]
[254.25518799 34.08251190]
[257.86764526 48.64102554]
[272.82989502 49.70421982]
[287.79217529 50.76741791]
[302.75445557 51.83061218]
[318.98229980 46.92215347]
[328.19125366 61.15702438]
[317.06198120 73.94669342]
[301.69125366 66.79288483]
[286.72897339 65.72969055]
[271.76669312 64.66649628]
[256.80444336 63.60329819]
[231.91049194 75.89502716]
[210.75335693 63.84305573]
[196.90975952 69.61840057]
[183.06614685 75.39374542]
[169.22254944 81.16909027]
[155.37893677 86.94442749]
[141.53532410 92.71977234]
[128.34703064 99.86602020]
[115.94937897 108.30983734]
[108.93714905 121.56987762]
[108.93714905 136.56988525]
[108.93714905 151.56988525]
[108.93714905 166.56988525]
[108.93714905 181.56988525]
[108.93714905 196.56988525]
[108.93714905 211.56988525]
[108.93714905 226.56988525]
[108.93714905 241.56988525]
[108.93714905 256.56988525]
[123.60240936 260.03784180]
[137.07232666 266.79492188]
[148.62048340 276.47671509]
[157.62409973 288.56106567]
[163.59762573 302.39630127]
[166.21891785 317.23629761]
[165.34660339 332.28076172]
[161.02774048 346.71835327]
[153.49522400 359.77047729]
[143.15528870 370.73324585]
[130.56555176 379.01544189]
[116.40494537 384.17047119]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 42]
[24 41]
[25 40]
[44 54]
[45 53]
[46 52]
[55 67]
[56 66]
[57 65]
[58 64]
[71 132]
[72 131]
[83 130]
[84 129]
[85 128]
[86 127]
[87 126]
[88 125]
[93 112]
[94 111]
[95 110]
[96 109]
[97 108]
[99 107]
[100 106]
[101 105]
[113 123]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
