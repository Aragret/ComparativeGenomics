%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCUCAACAGGGGGGGGGGCCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAUACCAACACxxxxxxxxxxCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACCCCCCCCCCCAACCUUAACA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 372.81594849]
[71.01555634 367.26293945]
[58.81560135 358.39660645]
[49.20452881 346.77429199]
[42.78650284 333.12658691]
[39.96496582 318.31140137]
[40.91728210 303.26000977]
[45.58358765 288.91860962]
[53.67055511 276.18862915]
[64.66983032 265.87036133]
[77.88998413 258.61239624]
[92.50000000 254.87095642]
[92.50000000 239.87095642]
[92.50000000 224.87095642]
[92.50000000 209.87095642]
[92.50000000 194.87095642]
[92.50000000 179.87095642]
[92.50000000 164.87095642]
[92.50000000 149.87095642]
[92.50000000 134.87095642]
[92.50000000 119.87095642]
[88.99069214 118.16314697]
[85.85311890 115.84205627]
[83.19322968 112.98603821]
[81.10082245 109.69154358]
[66.19638062 111.38194275]
[51.29193115 113.07234192]
[36.38748169 114.76273346]
[21.48303413 116.45313263]
[11.64857101 128.53291321]
[-3.49073839 130.03489685]
[-14.94635582 120.58480072]
[-29.85080338 122.27519226]
[-42.70956802 132.45281982]
[-57.85118866 126.15493774]
[-59.69926071 109.86025238]
[-46.35264587 100.33135223]
[-31.54120064 107.37075043]
[-16.63675308 105.68035126]
[-7.58845854 93.90478516]
[7.50269032 91.97816467]
[19.79263687 101.54869080]
[34.69708633 99.85829163]
[49.60153198 98.16789246]
[64.50598145 96.47749329]
[79.41043091 94.78709412]
[88.26819611 82.29492950]
[103.22492981 79.00703430]
[110.59117126 65.94033813]
[117.95741272 52.87364197]
[124.64348602 39.44619370]
[130.63179016 25.69336510]
[136.62008667 11.94053555]
[142.60838318 -1.81229317]
[148.59667969 -15.56512165]
[138.04502869 -32.29211044]
[142.68446350 -53.08094788]
[161.90287781 -65.39367676]
[161.90287781 -80.39367676]
[147.09179688 -83.00199127]
[132.95874023 -88.14278412]
[119.93317413 -95.65981293]
[108.41094208 -105.32465363]
[98.74217987 -116.84360504]
[91.22071838 -129.86660767]
[86.07511902 -143.99792480]
[83.46176147 -158.80810547]
[83.46005249 -173.84709167]
[86.07005310 -188.65786743]
[91.21244812 -202.79034424]
[98.73094940 -215.81504822]
[108.39710236 -227.33619690]
[119.91714478 -237.00364685]
[132.94100952 -244.52363586]
[147.07290649 -249.66763306]
[161.88337708 -252.27931213]
[176.92236328 -252.27931213]
[191.73284912 -249.66763306]
[205.86474609 -244.52363586]
[218.88859558 -237.00364685]
[230.40864563 -227.33619690]
[240.07479858 -215.81504822]
[247.59330750 -202.79034424]
[252.73568726 -188.65786743]
[255.34568787 -173.84709167]
[255.34397888 -158.80810547]
[252.73062134 -143.99792480]
[247.58503723 -129.86660767]
[240.06356812 -116.84360504]
[230.39480591 -105.32465363]
[218.87257385 -95.65981293]
[205.84700012 -88.14278412]
[191.71394348 -83.00199127]
[176.90287781 -80.39367676]
[176.90287781 -65.39367676]
[189.32118225 -56.98026276]
[203.25190735 -62.54220200]
[217.18261719 -68.10414124]
[231.05549622 -73.80879974]
[244.86907959 -79.65558624]
[258.68267822 -85.50238037]
[272.49624634 -91.34916687]
[279.82971191 -105.61800385]
[295.58566284 -108.63955688]
[307.67745972 -98.09593964]
[306.82934570 -82.07532501]
[293.69189453 -72.86734772]
[278.34304810 -77.53558350]
[264.52944946 -71.68879700]
[250.71586609 -65.84200287]
[236.90228271 -59.99522018]
[231.93775940 -54.45755768]
[222.74455261 -54.17341995]
[208.81384277 -48.61148453]
[194.88311768 -43.04954529]
[192.07905579 -23.88275909]
[179.04911804 -11.34642124]
[162.34950256 -9.57682514]
[156.36120605 4.17600346]
[150.37290955 17.92883301]
[144.38461304 31.68166161]
[138.39631653 45.43449020]
[153.16432190 42.80656052]
[164.56452942 52.55517197]
[164.26104736 67.55210114]
[152.47579956 76.83153534]
[137.82618713 73.60830688]
[131.02410889 60.23988342]
[123.65786743 73.30657959]
[116.29162598 86.37327576]
[120.54346466 105.39173126]
[107.50000000 119.87095642]
[107.50000000 134.87095642]
[107.50000000 149.87095642]
[107.50000000 164.87095642]
[107.50000000 179.87095642]
[107.50000000 194.87095642]
[107.50000000 209.87095642]
[107.50000000 224.87095642]
[107.50000000 239.87095642]
[107.50000000 254.87095642]
[122.11001587 258.61239624]
[135.33016968 265.87036133]
[146.32945251 276.18862915]
[154.41641235 288.91860962]
[159.08271790 303.26000977]
[160.03503418 318.31140137]
[157.21350098 333.12658691]
[150.79547119 346.77429199]
[141.18440247 358.39660645]
[128.98443604 367.26293945]
[114.96250153 372.81594849]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[32 39]
[33 38]
[48 130]
[49 129]
[50 128]
[51 122]
[52 121]
[53 120]
[54 119]
[55 118]
[58 95]
[59 94]
[96 115]
[97 114]
[98 113]
[99 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
