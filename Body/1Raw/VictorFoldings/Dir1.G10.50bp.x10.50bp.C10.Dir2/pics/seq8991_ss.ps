%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUAUUUAUGGGGGGGGGGUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUxxxxxxxxxxAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCAAAGCCCCCCCCCCCCAUACUAUUUAU\
) } def
/len { sequence length } bind def

/coor [
[62.50764084 339.94488525]
[51.34036255 329.84609985]
[42.51708984 317.64596558]
[36.42354584 303.87780762]
[33.32610321 289.14349365]
[33.36017990 274.08718872]
[36.52428055 259.36706543]
[42.68008423 245.62661743]
[51.55848312 233.46652222]
[62.77135849 223.41838074]
[75.82852936 215.92144775]
[90.15918732 211.30345154]
[88.62189484 196.38244629]
[87.08460236 181.46142578]
[85.54730988 166.54040527]
[84.01001740 151.61940002]
[82.47272491 136.69837952]
[80.93543243 121.77735901]
[83.48279572 87.59511566]
[77.49449921 73.84228516]
[71.50620270 60.08945847]
[65.51790619 46.33662796]
[59.52961349 32.58379745]
[53.54131699 18.83097076]
[41.64408875 19.46068382]
[30.05104446 15.58450985]
[20.44948578 7.52786922]
[14.32236958 -3.76048493]
[12.72183037 -16.81686211]
[-2.21418190 -15.43283653]
[-17.15019417 -14.04881096]
[-32.08620834 -12.66478539]
[-40.84034729 0.29280189]
[-55.88951111 4.54211044]
[-70.12794495 -1.92325366]
[-76.83270264 -16.05054283]
[-72.83798981 -31.16928291]
[-60.02999878 -40.14086914]
[-44.45626450 -38.72918701]
[-33.47023392 -27.60079765]
[-18.53421974 -28.98482323]
[-3.59820724 -30.36884880]
[11.33780575 -31.75287437]
[20.62119102 -43.53501129]
[18.47261238 -58.38033295]
[16.32403183 -73.22565460]
[14.17545319 -88.07097626]
[12.02687454 -102.91630554]
[9.87829494 -117.76162720]
[-5.14080858 -117.52745056]
[-20.06654549 -119.21585083]
[-34.65382004 -122.79911041]
[-48.66310120 -128.21836853]
[-61.86433411 -135.38465881]
[-74.04074860 -144.18029785]
[-84.99240112 -154.46084595]
[-94.53945160 -166.05749512]
[-102.52512360 -178.77981567]
[-108.81829071 -192.41888428]
[-113.31561279 -206.75076294]
[-115.94323730 -221.54006958]
[-116.65802002 -236.54399109]
[-115.44821930 -251.51611328]
[-112.33370972 -266.21060181]
[-107.36562347 -280.38616943]
[-100.62554932 -293.81002808]
[-92.22415924 -306.26171875]
[-82.29941559 -317.53683472]
[-71.01428986 -327.45016479]
[-58.55409622 -335.83895874]
[-45.12343979 -342.56546021]
[-30.94286537 -347.51919556]
[-16.24523163 -350.61886597]
[-1.27188420 -351.81350708]
[13.73129845 -351.08355713]
[28.51795197 -348.44097900]
[42.84526443 -343.92916870]
[56.47797012 -337.62222290]
[69.19220734 -329.62368774]
[80.77919006 -320.06491089]
[91.04866791 -309.10287476]
[99.83198547 -296.91757202]
[106.98492432 -283.70910645]
[112.39002228 -269.69433594]
[115.95852661 -255.10345459]
[117.63183594 -240.17602539]
[117.38247681 -225.15716553]
[115.21453857 -210.29350281]
[111.16362762 -195.82911682]
[105.29625702 -182.00152588]
[97.70877838 -169.03779602]
[88.52577972 -157.15078735]
[77.89806366 -146.53570557]
[66.00013733 -137.36686707]
[53.02737808 -129.79481506]
[39.19281387 -123.94390106]
[24.72361755 -119.91020203]
[26.87219810 -105.06488037]
[29.02077675 -90.21955872]
[31.16935539 -75.37423706]
[33.31793594 -60.52891159]
[35.46651459 -45.68358994]
[49.73202515 -47.38826370]
[63.26931381 -43.35503006]
[73.90529633 -34.43132782]
[80.01261902 -22.23273849]
[80.75733948 -8.85306168]
[76.20822906 3.49434066]
[67.29414368 12.84267330]
[73.28244019 26.59550285]
[79.27073669 40.34833145]
[85.25903320 54.10116196]
[91.24732971 67.85398865]
[97.23562622 81.60681915]
[103.55117035 68.00115967]
[118.30040741 65.26988220]
[129.06912231 75.71186829]
[126.79341125 90.53823090]
[113.38864899 97.26982880]
[127.31935883 102.83177185]
[141.25007629 108.39370728]
[156.49984741 103.41131592]
[169.82357788 112.34761047]
[171.00047302 128.34744263]
[159.12768555 139.13710022]
[143.31303406 136.43968201]
[135.68814087 122.32442474]
[121.75742340 116.76248932]
[107.82670593 111.20054626]
[95.85645294 120.24006653]
[97.39374542 135.16108704]
[98.93103790 150.08210754]
[100.46833038 165.00311279]
[102.00562286 179.92413330]
[103.54291534 194.84515381]
[105.08020782 209.76615906]
[120.05139923 211.36523438]
[134.36285400 216.04240417]
[147.38893127 223.59324646]
[158.56018066 233.68763733]
[167.38824463 245.88430786]
[173.48721313 259.65008545]
[176.59043884 274.38314819]
[176.56230164 289.43948364]
[173.40399170 304.16085815]
[167.25358582 317.90371704]
[158.37997437 330.06729126]
[147.17105103 340.11984253]
[134.11683655 347.62191772]
[119.78798676 352.24554443]
[104.81092072 353.78860474]
[89.84035492 352.18365479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 114]
[20 113]
[21 112]
[22 111]
[23 110]
[24 109]
[29 43]
[30 42]
[31 41]
[32 40]
[44 102]
[45 101]
[46 100]
[47 99]
[48 98]
[49 97]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
