%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCUCCUAGGGGGGGGGGGACCUAACCUGACUAGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCAxxxxxxxxxxUCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCCCCCCCCCCCACUCAUCCUA\
) } def
/len { sequence length } bind def

/coor [
[82.75420380 387.69860840]
[70.19598389 379.34744263]
[60.10976028 368.13500977]
[53.12956619 354.76611328]
[49.69418335 340.08111572]
[50.01955795 325.00314331]
[54.08524323 310.48004150]
[61.63566208 297.42468262]
[72.19618988 286.65777588]
[85.10298920 278.85614014]
[99.54471588 274.51019287]
[98.92073822 259.52319336]
[98.29676056 244.53617859]
[97.67278290 229.54914856]
[97.04880524 214.56213379]
[96.42482758 199.57511902]
[95.80084991 184.58810425]
[95.17687225 169.60108948]
[94.55289459 154.61407471]
[93.92891693 139.62705994]
[93.30493927 124.64004517]
[92.68096161 109.65302277]
[84.45849609 122.19858551]
[71.66945648 130.03698730]
[56.75859451 131.66983032]
[42.57626724 126.78498840]
[31.83357048 116.31625366]
[26.58407402 102.26481628]
[27.83127213 87.31675720]
[35.33675003 74.32954407]
[47.66576004 65.78580475]
[62.46149445 63.31875992]
[76.89559937 67.40001678]
[88.20884705 77.24939728]
[94.23832703 90.98264313]
[97.33664703 76.30611420]
[100.43497467 61.62958908]
[103.53329468 46.95306396]
[106.32561493 32.21525574]
[108.81073761 17.42255020]
[111.29585266 2.62984300]
[96.74304962 -1.03922975]
[82.53266907 -5.86742735]
[68.75688171 -11.82343674]
[55.50503159 -18.86863136]
[42.86306000 -26.95731735]
[30.91295624 -36.03703690]
[19.73222160 -46.04890442]
[9.39336872 -56.92798996]
[-0.03654864 -68.60372925]
[-8.49637318 -81.00041199]
[-15.93124008 -94.03762817]
[-22.29293060 -107.63083649]
[-27.54018402 -121.69187164]
[-31.63897133 -136.12953186]
[-34.56270981 -150.85020447]
[-36.29243851 -165.75840759]
[-36.81693649 -180.75744629]
[-36.13280487 -195.75004578]
[-34.24448013 -210.63899231]
[-31.16420746 -225.32769775]
[-26.91196442 -239.72091675]
[-21.51533127 -253.72529602]
[-15.00930405 -267.25003052]
[-7.43607903 -280.20736694]
[1.15522766 -292.51327515]
[10.70889759 -304.08798218]
[21.16296959 -314.85638428]
[32.44964600 -324.74868774]
[44.49572754 -333.70068359]
[57.22308350 -341.65432739]
[70.54917908 -348.55807495]
[84.38758850 -354.36709595]
[98.64855194 -359.04376221]
[113.23959351 -362.55770874]
[128.06607056 -364.88616943]
[143.03184509 -366.01403809]
[158.03984070 -365.93399048]
[172.99272156 -364.64654541]
[187.79353333 -362.16006470]
[202.34625244 -358.49066162]
[216.55653381 -353.66217041]
[230.33218384 -347.70584106]
[243.58387756 -340.66036987]
[256.22567749 -332.57138062]
[268.17556763 -323.49139404]
[279.35607910 -313.47930908]
[289.69470215 -302.59997559]
[299.12435913 -290.92404175]
[307.58392334 -278.52716064]
[315.01849365 -265.48977661]
[321.37988281 -251.89643860]
[326.62683105 -237.83528137]
[330.72531128 -223.39753723]
[333.64871216 -208.67680359]
[335.37811279 -193.76855469]
[335.90228271 -178.76951599]
[335.21783447 -163.77691650]
[333.32916260 -148.88801575]
[330.24856567 -134.19937134]
[325.99600220 -119.80625153]
[320.59906006 -105.80198669]
[314.09274292 -92.27741241]
[306.51922607 -79.32024384]
[297.92764282 -67.01451111]
[288.37371826 -55.44001770]
[277.91943359 -44.67183685]
[266.63253784 -34.77980423]
[254.58624268 -25.82806969]
[241.85871887 -17.87469482]
[228.53247070 -10.97125816]
[214.69392395 -5.16253233]
[200.43286133 -0.48618984]
[185.84173584 3.02744102]
[171.01521301 5.35557270]
[156.04940796 6.48310614]
[141.04142761 6.40272856]
[126.08856201 5.11496162]
[123.60344696 19.90766907]
[121.11832428 34.70037460]
[123.14991760 39.08764648]
[122.40110016 44.80346680]
[118.20981598 50.05138397]
[115.11149597 64.72791290]
[112.01317596 79.40443420]
[108.91485596 94.08096313]
[107.66797638 109.02904510]
[108.29195404 124.01606750]
[108.91593170 139.00308228]
[109.53990936 153.99009705]
[110.16388702 168.97711182]
[110.78786469 183.96412659]
[111.41184235 198.95114136]
[112.03582001 213.93815613]
[112.65979767 228.92517090]
[113.28377533 243.91220093]
[113.90775299 258.89920044]
[114.53173065 273.88623047]
[129.28472900 277.01666260]
[142.79536438 283.71841431]
[154.21435547 293.57022095]
[162.82386780 305.95275879]
[168.08271790 320.08764648]
[169.66032410 335.08636475]
[167.45751953 350.00610352]
[161.61276245 363.90896606]
[152.49348450 375.92102051]
[140.67291260 385.28720093]
[126.89410400 391.41870117]
[112.02320099 393.93008423]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[35 126]
[36 125]
[37 124]
[38 123]
[39 120]
[40 119]
[41 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
