%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCACCUGAGGGGGGGGGGGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAAGUGGCUUUAAxxxxxxxxxxCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCACUCCCCCCCCCCACUCACCAGA\
) } def
/len { sequence length } bind def

/coor [
[86.82910919 370.32604980]
[72.33942413 366.11758423]
[59.43318939 358.30145264]
[48.99039078 347.41061401]
[41.72302628 334.18762207]
[38.12659836 319.53402710]
[38.44631958 304.44891357]
[42.66039276 289.96084595]
[50.48148727 277.05764771]
[61.37635803 266.61904907]
[74.60216522 259.35678101]
[89.25715637 255.76602173]
[89.56921387 240.76927185]
[89.88127136 225.77252197]
[90.19332886 210.77575684]
[90.50538635 195.77900696]
[90.81743622 180.78225708]
[91.12949371 165.78550720]
[91.44155121 150.78874207]
[91.75360870 135.79199219]
[92.06566620 120.79524231]
[80.76666260 110.92951965]
[65.94889832 113.26062012]
[51.13114166 115.59172821]
[36.31338501 117.92282867]
[30.95350838 130.66139221]
[20.07515335 139.00851440]
[6.59828043 140.85902405]
[-5.92601204 135.83374023]
[-14.25117111 125.35100555]
[-29.11421776 127.37333679]
[-43.97726440 129.39567566]
[-56.60588074 139.85751343]
[-71.88417053 133.89883423]
[-74.09514618 117.64941406]
[-60.96433640 107.82526398]
[-45.99959946 114.53262329]
[-31.13655281 112.51029205]
[-16.27350616 110.48795319]
[-8.99596500 95.80658722]
[5.73523855 88.25955963]
[22.22946930 90.98387146]
[33.98228073 103.10507202]
[48.80003738 100.77397156]
[63.61779785 98.44286346]
[78.43555450 96.11176300]
[89.52687073 86.01310730]
[93.23303223 71.47817230]
[96.93919373 56.94323730]
[100.64535522 42.40830231]
[104.35151672 27.87336540]
[100.49435425 13.37776947]
[90.05454254 2.60696101]
[79.61473083 -8.16384792]
[63.66062546 -9.85086060]
[55.15418243 -23.45306587]
[60.62082291 -38.53601837]
[75.86700439 -43.52936554]
[89.19715881 -34.60263824]
[90.38553619 -18.60366058]
[100.82535553 -7.83285141]
[111.26516724 2.93795705]
[124.92140198 -3.26745009]
[123.67453003 -18.21553612]
[122.42765808 -33.16362381]
[107.79529572 -37.12213135]
[95.40104675 -45.84901428]
[86.74158478 -58.29045486]
[82.86257172 -72.94409180]
[84.23242188 -88.04042816]
[90.68572235 -101.75650024]
[101.44319916 -112.43603516]
[115.20584106 -118.78942871]
[130.31173706 -120.04946136]
[144.93678284 -116.06399536]
[157.31492615 -107.31428528]
[165.95144653 -94.85691071]
[169.80345154 -80.19615173]
[168.40577698 -65.10236359]
[161.92721558 -51.39820480]
[151.15007019 -40.73851395]
[137.37574768 -34.41049957]
[138.62261963 -19.46241188]
[139.86949158 -4.51432467]
[146.66496277 -1.34075987]
[160.25592041 5.00636959]
[167.05139160 8.17993450]
[179.31376648 -0.45918170]
[191.57612610 -9.09829807]
[203.83850098 -17.73741341]
[199.84896851 -32.36135101]
[201.10481262 -47.46759415]
[207.45439148 -61.23199844]
[218.13093567 -71.99243927]
[231.84521484 -78.44954681]
[246.94117737 -79.82358551]
[261.59588623 -75.94863892]
[274.03973389 -67.29262543]
[282.77005005 -54.90080643]
[286.73263550 -40.26954269]
[285.44894409 -25.16563606]
[279.07400513 -11.41295815]
[268.37765503 -0.67220992]
[254.65148926 5.75961018]
[239.55303955 7.10582924]
[224.90548706 3.20388412]
[212.47761536 -5.47504568]
[200.21524048 3.16407037]
[187.95288086 11.80318642]
[175.69050598 20.44230270]
[144.40582275 40.11804581]
[118.88645172 31.57952690]
[115.18029022 46.11446381]
[111.47412872 60.64939880]
[107.76796722 75.18433380]
[104.06180573 89.71926880]
[109.14184570 85.86743927]
[115.77257538 83.80124664]
[123.41531372 83.95231628]
[131.42832947 86.60383606]
[139.10530090 91.86825562]
[152.62948608 98.35642242]
[169.52555847 99.75608826]
[172.85787964 116.37932587]
[157.80677795 124.18319702]
[146.14132690 111.88060760]
[132.61712646 105.39244843]
[126.22845459 109.32115936]
[126.64453888 124.31538391]
[113.45109558 117.17858124]
[107.06241608 121.10729980]
[106.75035858 136.10404968]
[106.43830872 151.10079956]
[106.12625122 166.09756470]
[105.81419373 181.09431458]
[105.50213623 196.09106445]
[105.19007874 211.08781433]
[104.87802124 226.08457947]
[104.56597137 241.08132935]
[104.25391388 256.07809448]
[118.74684906 260.27536011]
[131.65910339 268.08151245]
[142.11032104 278.96429443]
[149.38789368 292.18167114]
[152.99563599 306.83248901]
[152.68756104 321.91784668]
[148.48468018 336.40914917]
[140.67355347 349.31838989]
[129.78674316 359.76541138]
[116.56654358 367.03787231]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 46]
[23 45]
[24 44]
[25 43]
[30 39]
[31 38]
[32 37]
[47 116]
[48 115]
[49 114]
[50 113]
[51 112]
[52 62]
[53 61]
[54 60]
[63 84]
[64 83]
[65 82]
[87 110]
[88 109]
[89 108]
[90 107]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
