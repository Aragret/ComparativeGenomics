%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAAAUAAAGGGGGGGGGGCAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCUCGUUCCAxxxxxxxxxxACUAAAAAUAUUAAACACAAACUACCACCUACCUCCCUCACCAAAGCCCACCCCCCCCCCUAAAAAUAAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 365.93508911]
[71.19830322 359.91906738]
[59.48964310 350.38964844]
[50.78712082 338.05398560]
[45.73651886 323.82748413]
[44.71262741 308.76577759]
[47.79142761 293.98663330]
[54.74444962 280.58670044]
[65.05573273 269.56036377]
[77.96011353 261.72586060]
[92.50000000 257.66455078]
[92.50000000 242.66455078]
[92.50000000 227.66455078]
[92.50000000 212.66455078]
[92.50000000 197.66455078]
[92.50000000 182.66455078]
[92.50000000 167.66455078]
[92.50000000 152.66455078]
[92.50000000 137.66455078]
[92.50000000 122.66454315]
[80.64824677 113.98002625]
[76.12675476 100.00000000]
[80.64824677 86.01997375]
[92.50000000 77.33545685]
[92.50000000 62.33545303]
[92.50000000 47.33545303]
[77.52462006 46.39343643]
[62.63793564 44.51296234]
[47.89870453 41.70145416]
[33.36509705 37.97000504]
[19.09446907 33.33334732]
[5.14313841 27.80977249]
[-8.43383217 21.42108345]
[-21.58286095 14.19249344]
[-34.25205612 6.15253019]
[-46.39141464 -2.66707516]
[-57.95302963 -12.23151684]
[-68.89127350 -22.50304604]
[-79.16297150 -33.44112778]
[-88.72759247 -45.00259399]
[-97.54739380 -57.14181519]
[-105.58755493 -69.81088257]
[-112.81634521 -82.95980072]
[-119.20524597 -96.53666687]
[-124.72904205 -110.48791504]
[-129.36592102 -124.75846863]
[-133.09759521 -139.29202271]
[-135.90933228 -154.03120422]
[-137.79003906 -168.91786194]
[-138.73229980 -183.89321899]
[-138.73237610 -198.89820862]
[-137.79028320 -213.87358093]
[-135.90972900 -228.76025391]
[-133.09814453 -243.49946594]
[-129.36662292 -258.03305054]
[-124.72988129 -272.30364990]
[-119.20623779 -286.25497437]
[-112.81748199 -299.83190918]
[-105.58882141 -312.98089600]
[-97.54878998 -325.65005493]
[-88.72911835 -337.78936768]
[-79.16461945 -349.35092163]
[-68.89303589 -360.28912354]
[-57.95489883 -370.56076050]
[-46.39338303 -380.12530518]
[-34.25411606 -388.94503784]
[-21.58500671 -396.98513794]
[-8.43605232 -404.21386719]
[5.14085150 -410.60269165]
[19.09212303 -416.12643433]
[33.36270523 -420.76324463]
[47.89627457 -424.49484253]
[62.63547516 -427.30648804]
[77.52213287 -429.18713379]
[92.49751282 -430.12930298]
[107.50248718 -430.12930298]
[122.47786713 -429.18713379]
[137.36453247 -427.30648804]
[152.10372925 -424.49484253]
[166.63729858 -420.76324463]
[180.90788269 -416.12643433]
[194.85914612 -410.60269165]
[208.43605042 -404.21386719]
[221.58500671 -396.98513794]
[234.25411987 -388.94503784]
[246.39338684 -380.12530518]
[257.95489502 -370.56076050]
[268.89303589 -360.28912354]
[279.16461182 -349.35092163]
[288.72912598 -337.78936768]
[297.54879761 -325.65005493]
[305.58880615 -312.98089600]
[312.81747437 -299.83190918]
[319.20623779 -286.25497437]
[324.72988892 -272.30364990]
[329.36660767 -258.03305054]
[333.09814453 -243.49946594]
[335.90972900 -228.76025391]
[337.79028320 -213.87358093]
[338.73236084 -198.89820862]
[338.73229980 -183.89321899]
[337.79003906 -168.91786194]
[335.90933228 -154.03120422]
[333.09759521 -139.29202271]
[329.36593628 -124.75846863]
[324.72903442 -110.48791504]
[319.20526123 -96.53666687]
[312.81634521 -82.95980072]
[305.58755493 -69.81088257]
[297.54739380 -57.14181519]
[288.72760010 -45.00259399]
[279.16296387 -33.44112778]
[268.89126587 -22.50304604]
[257.95303345 -12.23151684]
[246.39141846 -2.66707516]
[234.25205994 6.15253019]
[221.58285522 14.19249344]
[208.43383789 21.42108345]
[194.85685730 27.80977249]
[180.90553284 33.33334732]
[166.63490295 37.97000504]
[152.10128784 41.70145416]
[137.36206055 44.51296234]
[122.47537994 46.39343643]
[107.50000000 47.33545303]
[107.50000000 62.33545303]
[107.50000000 77.33545685]
[119.35175323 86.01997375]
[123.87324524 100.00000000]
[119.35175323 113.98002625]
[107.50000000 122.66454315]
[107.50000000 137.66455078]
[107.50000000 152.66455078]
[107.50000000 167.66455078]
[107.50000000 182.66455078]
[107.50000000 197.66455078]
[107.50000000 212.66455078]
[107.50000000 227.66455078]
[107.50000000 242.66455078]
[107.50000000 257.66455078]
[122.03988647 261.72586060]
[134.94427490 269.56036377]
[145.25555420 280.58670044]
[152.20857239 293.98663330]
[155.28736877 308.76577759]
[154.26348877 323.82748413]
[149.21287537 338.05398560]
[140.51036072 350.38964844]
[128.80169678 359.91906738]
[114.95575714 365.93508911]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 127]
[25 126]
[26 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
