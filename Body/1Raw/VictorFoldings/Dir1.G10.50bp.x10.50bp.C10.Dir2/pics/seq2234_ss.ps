%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCUAAAUCCCCUUGGGGGGGGGGGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAAxxxxxxxxxxCUAGCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCCCCCCCCCCCGCUAAAUCCCCUAG\
) } def
/len { sequence length } bind def

/coor [
[79.78529358 604.28424072]
[65.55802155 599.41021729]
[52.39335251 592.13958740]
[40.69133759 582.69317627]
[30.80759239 571.35815430]
[23.04247093 558.47900391]
[17.63194847 544.44696045]
[14.74044228 529.68853760]
[14.45582294 514.65228271]
[16.78674126 499.79501343]
[21.66235924 485.56829834]
[28.93451691 472.40444946]
[38.38221741 460.70352173]
[49.71836090 450.82104492]
[62.59844971 443.05740356]
[76.63107300 437.64846802]
[91.38980103 434.75863647]
[91.10421753 419.76135254]
[90.81863403 404.76406860]
[90.53305817 389.76678467]
[90.24747467 374.76950073]
[89.96189117 359.77221680]
[89.67630768 344.77493286]
[89.39072418 329.77764893]
[89.10514832 314.78039551]
[88.81956482 299.78311157]
[88.53398132 284.78582764]
[88.24839783 269.78854370]
[76.57745361 265.88519287]
[66.65757751 258.56079102]
[59.46321869 248.51600647]
[55.70686722 236.71971130]
[55.76852036 224.31541443]
[59.65728378 212.51048279]
[67.00902557 202.45855713]
[77.12042236 195.14691162]
[89.01620483 191.29939270]
[89.58726501 176.31027222]
[90.15832520 161.32115173]
[90.72938538 146.33201599]
[91.30044556 131.34289551]
[71.37713623 115.45285797]
[69.02239990 90.07792664]
[56.17716217 82.33197021]
[43.33192825 74.58600616]
[30.48669243 66.84004211]
[17.64145660 59.09408188]
[4.79622126 51.34812164]
[-8.04901409 43.60215759]
[-20.89424896 35.85619736]
[-33.73948669 28.11023521]
[-46.58472061 20.36427307]
[-61.86342621 24.40614700]
[-75.48294067 16.38839722]
[-79.36305237 1.06781423]
[-71.20175934 -12.46617317]
[-55.84101105 -16.18408966]
[-42.39406586 -7.88016176]
[-38.83875656 7.51903772]
[-25.99352264 15.26499939]
[-13.14828777 23.01096153]
[-0.30305210 30.75692368]
[12.54218292 38.50288391]
[25.38741875 46.24884796]
[38.23265457 53.99480820]
[51.07788849 61.74077225]
[63.92312622 69.48673248]
[76.76836395 77.23269653]
[82.93830109 72.30599976]
[90.11351013 69.01102448]
[88.97221375 54.05450821]
[87.83091736 39.09798813]
[86.68962860 24.14146996]
[72.23304749 19.44299507]
[60.67818069 9.56607628]
[53.78706741 -3.98312926]
[52.61054611 -19.13846588]
[57.32803345 -33.58885574]
[67.22014618 -45.13071823]
[80.77840424 -52.00400162]
[95.93527222 -53.16058350]
[110.37944794 -48.42409134]
[121.90828705 -38.51680756]
[128.76373291 -24.94951820]
[129.90037537 -9.79113865]
[125.14488220 4.64678907]
[115.22244263 16.16258621]
[101.64614868 23.00017738]
[102.78743744 37.95669556]
[103.92873383 52.91321564]
[105.07002258 67.86973572]
[108.81095886 68.68824005]
[112.42976379 69.94071960]
[115.87630463 71.60982513]
[126.01892853 60.55870438]
[136.16154480 49.50758743]
[146.30416870 38.45647049]
[142.28289795 23.56241608]
[146.97407532 8.86560440]
[158.88079834 -0.94426608]
[174.20365906 -2.73690152]
[188.05319214 4.05972195]
[196.01005554 17.27682686]
[195.53524780 32.69688034]
[186.78028870 45.39940262]
[172.53883362 51.33106613]
[157.35528564 48.59909439]
[147.21266174 59.65021133]
[137.07003784 70.70132446]
[126.92742157 81.75244141]
[128.01380920 83.46865082]
[128.99098206 85.24932098]
[143.56814575 81.71293640]
[158.14532471 78.17655182]
[172.72250366 74.64016724]
[184.21125793 62.93801880]
[200.02021790 67.29794312]
[203.88645935 83.23482513]
[191.83273315 94.35416412]
[176.25888062 89.21733856]
[161.68170166 92.75372314]
[147.10453796 96.29010773]
[132.52735901 99.82649231]
[129.21589661 114.30003357]
[119.81721497 125.79413605]
[106.28957367 131.91395569]
[105.71851349 146.90307617]
[105.14745331 161.89221191]
[104.57639313 176.88133240]
[104.00533295 191.87045288]
[120.06632996 199.78736877]
[131.04058838 213.86978149]
[134.77125549 231.27528381]
[130.55770874 248.51600647]
[119.28659058 262.15750122]
[103.24568176 269.50296021]
[103.53126526 284.50024414]
[103.81684113 299.49752808]
[104.10242462 314.49481201]
[104.38800812 329.49206543]
[104.67359161 344.48934937]
[104.95917511 359.48663330]
[105.24475098 374.48391724]
[105.53033447 389.48120117]
[105.81591797 404.47848511]
[106.10150146 419.47576904]
[106.38708496 434.47305298]
[121.24512482 436.79891968]
[135.47349548 441.66967773]
[148.63981628 448.93737793]
[160.34397888 458.38107300]
[170.23028564 469.71386719]
[177.99833679 482.59130859]
[183.41204834 496.62210083]
[186.30690002 511.37985229]
[186.59492493 526.41607666]
[184.26737976 541.27386475]
[179.39498901 555.50164795]
[172.12580872 568.66717529]
[162.68077087 580.37023926]
[151.34686279 590.25531006]
[138.46853638 598.02185059]
[124.43714142 603.43395996]
[109.67906952 606.32714844]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 147]
[18 146]
[19 145]
[20 144]
[21 143]
[22 142]
[23 141]
[24 140]
[25 139]
[26 138]
[27 137]
[28 136]
[37 130]
[38 129]
[39 128]
[40 127]
[41 126]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[70 91]
[71 90]
[72 89]
[73 88]
[94 110]
[95 109]
[96 108]
[97 107]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
