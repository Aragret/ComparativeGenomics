%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACUCACCGGGGGGGGGGUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAAGUGGCUUxxxxxxxxxxUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCACUAACCCCCCCCCCAACACUCACC\
) } def
/len { sequence length } bind def

/coor [
[77.87561798 392.11337280]
[64.02967834 386.09735107]
[52.32101440 376.56793213]
[43.61849213 364.23226929]
[38.56789017 350.00576782]
[37.54399872 334.94406128]
[40.62279510 320.16491699]
[47.57581711 306.76498413]
[57.88710403 295.73864746]
[70.79148102 287.90414429]
[85.33136749 283.84283447]
[85.33136749 268.84283447]
[85.33136749 253.84283447]
[85.33136749 238.84283447]
[85.33136749 223.84283447]
[85.33136749 208.84283447]
[85.33136749 193.84283447]
[85.33136749 178.84283447]
[85.33136749 163.84283447]
[85.33136749 148.84283447]
[85.33136749 133.84283447]
[73.06900024 125.20371246]
[58.94419861 130.25247192]
[44.81939697 135.30122375]
[30.69459343 140.34997559]
[16.56978989 145.39874268]
[10.03532696 159.78887939]
[-4.78976536 165.26539612]
[-19.11002159 158.57916260]
[-24.42948914 143.69699097]
[-17.59222031 129.44822693]
[-2.65464735 124.28640747]
[11.52103424 131.27394104]
[25.64583778 126.22518158]
[39.77064133 121.17642212]
[53.89544296 116.12767029]
[68.02024841 111.07891083]
[69.46900177 102.80862427]
[72.83325958 95.89340210]
[59.17702103 89.68799591]
[45.52077866 83.48258972]
[34.15412521 93.61763000]
[19.64590073 98.24703217]
[4.50974703 96.56871796]
[-8.63190746 88.87347412]
[-17.50218964 76.49453735]
[-20.56427383 61.57664490]
[-17.28763008 46.70440674]
[-8.23995972 34.45452499]
[5.01117373 26.94937134]
[20.16993141 25.48925591]
[34.60996628 30.32715225]
[45.82946014 40.62486649]
[51.88455963 54.59825516]
[51.72618866 69.82634735]
[65.38243103 76.03175354]
[79.03867340 82.23715973]
[83.80078888 77.80808258]
[89.47049713 74.62234497]
[95.73014069 72.85844421]
[102.22901154 72.61520386]
[108.60299683 73.90624237]
[114.49497986 76.65924072]
[125.58629608 66.56058502]
[136.67761230 56.46193695]
[147.76893616 46.36328888]
[158.86024475 36.26464081]
[150.01055908 24.13490677]
[142.52424622 11.11944771]
[136.48904419 -2.62913966]
[131.97573853 -16.94965935]
[129.03723145 -31.67421341]
[127.70799255 -46.63016129]
[128.00358582 -61.64215088]
[129.92056274 -76.53417969]
[133.43644714 -91.13163757]
[138.50999451 -105.26338196]
[145.08175659 -118.76373291]
[153.07464600 -131.47439575]
[162.39497375 -143.24633789]
[172.93344116 -153.94155884]
[184.56652832 -163.43464661]
[197.15780640 -171.61430359]
[210.55966187 -178.38464355]
[224.61497498 -183.66625977]
[239.15895081 -187.39724731]
[254.02105713 -189.53384399]
[269.02703857 -190.05102539]
[284.00097656 -188.94271851]
[298.76730347 -186.22189331]
[313.15289307 -181.92048645]
[326.98907471 -176.08891296]
[340.11364746 -168.79554749]
[352.37268066 -160.12588501]
[363.62249756 -150.18159485]
[373.73117065 -139.07926941]
[382.58020020 -126.94905853]
[390.06582642 -113.93319702]
[396.10028076 -100.18428040]
[400.61282349 -85.86351776]
[403.55053711 -71.13880920]
[404.87896729 -56.18278885]
[404.58258057 -41.17081451]
[402.66479492 -26.27889252]
[399.14813232 -11.68162060]
[394.07382202 2.44985366]
[387.50134277 15.94984627]
[379.50775146 28.66007614]
[370.18679810 40.43152618]
[359.64773560 51.12617493]
[348.01416016 60.61863708]
[335.42242432 68.79762268]
[322.02020264 75.56723022]
[307.96463013 80.84809113]
[293.42044067 84.57829285]
[278.55822754 86.71410370]
[263.55221558 87.23047638]
[248.57832336 86.12135315]
[233.81214905 83.39974213]
[219.42678833 79.09755707]
[205.59092712 73.26523590]
[192.46676636 65.97116089]
[180.20817566 57.30084991]
[168.95889282 47.35595322]
[157.86758423 57.45460510]
[146.77626038 67.55325317]
[135.68495178 77.65190125]
[124.59363556 87.75054932]
[126.14714050 116.01116180]
[100.33136749 133.84283447]
[100.33136749 148.84283447]
[100.33136749 163.84283447]
[100.33136749 178.84283447]
[100.33136749 193.84283447]
[100.33136749 208.84283447]
[100.33136749 223.84283447]
[100.33136749 238.84283447]
[100.33136749 253.84283447]
[100.33136749 268.84283447]
[100.33136749 283.84283447]
[114.87125397 287.90414429]
[127.77563477 295.73864746]
[138.08692932 306.76498413]
[145.03994751 320.16491699]
[148.11874390 334.94406128]
[147.09484863 350.00576782]
[142.04425049 364.23226929]
[133.34172058 376.56793213]
[121.63306427 386.09735107]
[107.78712463 392.11337280]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 37]
[23 36]
[24 35]
[25 34]
[26 33]
[39 57]
[40 56]
[41 55]
[63 128]
[64 127]
[65 126]
[66 125]
[67 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
