%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCCCCCAUGGGGGGGGGGCGCUGGGUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGxxxxxxxxxxAGGCUUACGACCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUCCCCCCCCCCCAUGCCCCCAU\
) } def
/len { sequence length } bind def

/coor [
[83.83898163 386.52661133]
[70.61878204 379.25415039]
[59.73197937 368.80712891]
[51.92084885 355.89788818]
[47.71796799 341.40658569]
[47.40989685 326.32122803]
[51.01763535 311.67041016]
[58.29520798 298.45303345]
[68.74641418 287.57025146]
[81.65867615 279.76409912]
[96.15161896 275.56683350]
[95.83956146 260.57006836]
[95.52750397 245.57331848]
[95.21544647 230.57656860]
[94.90338898 215.57981873]
[94.59133148 200.58305359]
[94.27928162 185.58630371]
[93.96722412 170.58955383]
[93.65516663 155.59280396]
[93.34310913 140.59603882]
[85.34270477 128.03248596]
[92.79123688 114.07434082]
[89.23648071 99.50164032]
[82.60797882 86.04566956]
[69.56882477 77.08514404]
[70.88550568 62.24884796]
[64.25700378 48.79288101]
[57.62850571 35.33691788]
[44.58935547 26.37638664]
[45.90603256 11.54009151]
[39.27753067 -1.91587400]
[32.64903259 -15.37183952]
[26.02053452 -28.82780457]
[16.03780937 -40.02357101]
[3.42668056 -48.14511108]
[-9.18444729 -56.26665497]
[-14.52828789 -56.51756668]
[-18.78703690 -58.61886215]
[-21.43036461 -61.83047867]
[-22.30682755 -65.30888367]
[-34.38681412 -74.20123291]
[-46.46680450 -83.09358215]
[-58.54679108 -91.98593140]
[-70.62677765 -100.87828064]
[-82.88915253 -109.51740265]
[-95.32859039 -117.89954376]
[-107.76802826 -126.28168488]
[-121.89633179 -120.08535004]
[-137.12820435 -122.53356171]
[-148.60319519 -132.84510803]
[-152.65969849 -147.72959900]
[-148.00329590 -162.43746948]
[-136.11981201 -172.27548218]
[-120.80123138 -174.10435486]
[-106.93566132 -167.34051514]
[-98.94755554 -154.14225769]
[-99.38588715 -138.72113037]
[-86.94644928 -130.33898926]
[-74.50700378 -121.95684052]
[-69.67230988 -121.99144745]
[-64.77831268 -118.94511414]
[-61.73443222 -112.95827484]
[-49.65444183 -104.06592560]
[-37.57445526 -95.17357635]
[-25.49446678 -86.28121948]
[-13.41447830 -77.38887024]
[-1.06290531 -68.87778473]
[11.54822254 -60.75624084]
[24.15935135 -52.63470078]
[17.65207863 -66.14970398]
[14.25343895 -80.75960541]
[14.12751102 -95.75907898]
[17.28037262 -110.42398834]
[23.55981255 -124.04634094]
[32.66267776 -135.96850586]
[44.14950180 -145.61489868]
[57.46573639 -152.51980591]
[71.96850586 -156.34989929]
[86.95765686 -156.92027283]
[101.70955658 -154.20338440]
[115.51201630 -148.33038330]
[127.69869232 -139.58480835]
[137.68124390 -128.38890076]
[144.97775269 -115.28312683]
[149.23593140 -100.90023041]
[150.25024414 -85.93456268]
[147.97169495 -71.10863495]
[142.51029968 -57.13819504]
[134.12971497 -44.69770432]
[123.23454285 -34.38775253]
[110.35075378 -26.70608139]
[96.10035706 -22.02353859]
[81.17132568 -20.56618500]
[66.28437805 -22.40437698]
[52.15823364 -27.44937515]
[39.47650146 -35.45630264]
[46.10499954 -22.00033760]
[52.73349762 -8.54437256]
[59.36199570 4.91159296]
[71.92703247 12.90966225]
[71.08447266 28.70841789]
[77.71296692 42.16438293]
[84.34146881 55.62034988]
[96.90650177 63.61841965]
[96.06394196 79.41717529]
[102.69244385 92.87313843]
[109.80000305 84.90200043]
[120.16572571 80.02949524]
[132.71710205 79.21308136]
[147.53486633 81.54418182]
[162.35261536 83.87528992]
[171.43389893 71.55501556]
[185.20555115 64.87667084]
[200.50294495 65.37488556]
[213.81085205 72.93517303]
[222.07122803 85.82023621]
[223.38589478 101.06917572]
[217.45274353 115.17790985]
[205.63516235 124.90434265]
[190.64875793 128.01341248]
[175.93730164 123.79068756]
[164.88136292 113.20650482]
[160.02151489 98.69304657]
[145.20376587 96.36193848]
[130.38600159 94.03083801]
[124.73649597 98.96369934]
[113.43749237 108.82942200]
[107.78799438 113.76228333]
[115.81071472 127.39850616]
[108.33986664 140.28398132]
[108.65191650 155.28074646]
[108.96397400 170.27749634]
[109.27603149 185.27424622]
[109.58808899 200.27099609]
[109.90014648 215.26776123]
[110.21220398 230.26451111]
[110.52425385 245.26126099]
[110.83631134 260.25802612]
[111.14836884 275.25476074]
[125.80335999 278.84555054]
[139.02917480 286.10778809]
[149.92404175 296.54638672]
[157.74513245 309.44961548]
[161.95921326 323.93765259]
[162.27893066 339.02276611]
[158.68249512 353.67636108]
[151.41513062 366.89938354]
[140.97233582 377.79022217]
[128.06610107 385.60632324]
[113.57641602 389.81478882]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 128]
[23 106]
[24 105]
[26 103]
[27 102]
[28 101]
[30 99]
[31 98]
[32 97]
[33 96]
[34 69]
[35 68]
[36 67]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
[45 59]
[46 58]
[47 57]
[109 125]
[110 124]
[111 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
