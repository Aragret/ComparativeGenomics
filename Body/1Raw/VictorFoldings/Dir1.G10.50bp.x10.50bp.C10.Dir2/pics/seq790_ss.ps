%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAACCCCAGGGGGGGGGGAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGxxxxxxxxxxAAAGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCCCCCCCCCCCAAAACCCCA\
) } def
/len { sequence length } bind def

/coor [
[83.41239166 431.24429321]
[69.56645203 425.22827148]
[57.85779190 415.69885254]
[49.15526581 403.36318970]
[44.10466385 389.13665771]
[43.08077240 374.07498169]
[46.15957260 359.29583740]
[53.11259460 345.89590454]
[63.42387772 334.86956787]
[76.32826233 327.03506470]
[90.86814880 322.97375488]
[90.86814880 307.97375488]
[90.86814880 292.97375488]
[90.86814880 277.97375488]
[90.86814880 262.97375488]
[90.86814880 247.97375488]
[90.86814880 232.97375488]
[90.86814880 217.97375488]
[90.86814880 202.97375488]
[90.86814880 187.97375488]
[82.35913849 200.32675171]
[69.62076569 208.24722290]
[54.77806091 210.41381836]
[40.30712891 206.46513367]
[28.62204361 197.05987549]
[21.67214203 183.76705933]
[20.61682129 168.80422974]
[25.63213348 154.66752625]
[35.88140869 143.71525574]
[49.65484619 137.77450562]
[64.65471649 137.83631897]
[78.37871552 143.89041138]
[88.53736115 154.92678833]
[93.43579102 169.10296631]
[97.44353485 154.64826965]
[101.45127106 140.19358826]
[105.45901489 125.73889160]
[91.20024109 125.84224701]
[78.46326447 118.33969116]
[71.13778687 104.90085602]
[71.77376556 89.08452606]
[60.07413864 79.69736481]
[48.37451553 70.31020355]
[36.67489243 60.92304230]
[24.78251266 51.78130722]
[12.70252419 42.88895798]
[0.62253618 33.99660873]
[-11.45745182 25.10425949]
[-25.83128357 30.70751762]
[-40.94812775 27.62780380]
[-51.98424911 16.84784317]
[-55.41806412 1.80748320]
[-50.15385818 -12.69395351]
[-37.87141418 -22.02910995]
[-22.49002075 -23.21917343]
[-8.91782188 -15.88439655]
[-1.48565638 -2.36528182]
[-2.56510258 13.02427101]
[9.51488590 21.91662025]
[21.59487343 30.80897141]
[33.67486191 39.70132065]
[38.50681686 39.86786270]
[43.26985168 43.11513519]
[46.06205368 49.22341919]
[57.76167679 58.61058044]
[69.46130371 67.99774170]
[81.16092682 77.38490295]
[94.75187683 71.03777313]
[95.06393433 56.04101944]
[81.26558685 49.59698486]
[71.28610229 38.09352112]
[66.85447693 23.52366638]
[68.73852539 8.41174221]
[76.61182404 -4.62402058]
[89.11026764 -13.32509804]
[104.06842804 -16.18397522]
[118.89472198 -12.70533562]
[131.02040100 -3.49187326]
[138.34460449 9.86012363]
[139.59838867 25.03734016]
[134.56452942 39.41023254]
[124.11515045 50.48860931]
[110.06068420 56.35307693]
[109.74862671 71.34983063]
[124.37047577 85.63840485]
[125.89669800 104.65322876]
[140.21929932 100.19641113]
[154.54190063 95.73960114]
[165.41993713 84.25139618]
[179.87135315 87.85773468]
[194.19395447 83.40091705]
[208.51654053 78.94410706]
[215.22442627 67.87802124]
[227.29492188 64.48358154]
[238.07345581 70.06304169]
[252.48567200 65.90515900]
[266.89788818 61.74726868]
[281.31008911 57.58938217]
[295.72232056 53.43149567]
[310.13452148 49.27360916]
[312.63479614 34.21666718]
[321.42745972 21.74060440]
[334.76669312 14.32254887]
[350.00399780 13.43535995]
[364.11401367 19.25518990]
[374.29516602 30.62650871]
[378.52597046 45.29153442]
[375.96643066 60.33850861]
[367.12472534 72.77985382]
[353.75637817 80.14531708]
[338.51568604 80.97249603]
[324.42871094 75.09714508]
[314.29241943 63.68582535]
[299.88021851 67.84371185]
[285.46798706 72.00160217]
[271.05578613 76.15948486]
[256.64355469 80.31737518]
[242.23133850 84.47525787]
[230.80126953 97.75507355]
[212.97335815 93.26670074]
[198.65077209 97.72351837]
[184.32817078 102.18033600]
[174.47457886 113.34975433]
[158.99870300 110.06219482]
[144.67611694 114.51901245]
[130.35351562 118.97583008]
[119.91370392 129.74662781]
[115.90596008 144.20132446]
[111.89822388 158.65600586]
[107.89048004 173.11070251]
[105.86814880 187.97375488]
[105.86814880 202.97375488]
[105.86814880 217.97375488]
[105.86814880 232.97375488]
[105.86814880 247.97375488]
[105.86814880 262.97375488]
[105.86814880 277.97375488]
[105.86814880 292.97375488]
[105.86814880 307.97375488]
[105.86814880 322.97375488]
[120.40803528 327.03506470]
[133.31240845 334.86956787]
[143.62370300 345.89590454]
[150.57672119 359.29583740]
[153.65551758 374.07498169]
[152.63162231 389.13665771]
[147.58102417 403.36318970]
[138.87849426 415.69885254]
[127.16983795 425.22827148]
[113.32389832 431.24429321]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[34 130]
[35 129]
[36 128]
[37 127]
[41 67]
[42 66]
[43 65]
[44 64]
[45 61]
[46 60]
[47 59]
[48 58]
[68 84]
[69 83]
[86 126]
[87 125]
[88 124]
[90 122]
[91 121]
[92 120]
[95 118]
[96 117]
[97 116]
[98 115]
[99 114]
[100 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
