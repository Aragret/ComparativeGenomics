%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCCAUCAACGGGGGGGGGGAACCGCUAUGUAUUUCGUACAUUACUGCCAGCCACCAUGAAUAUUGUACGxxxxxxxxxxAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUACCCCCCCCCCUCACACAUCAAC\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 388.50082397]
[70.87159729 383.34582520]
[58.28185654 375.06359863]
[47.94191742 364.10083008]
[40.40940475 351.04870605]
[36.09054184 336.61111450]
[35.21823120 321.56665039]
[37.83952332 306.72665405]
[43.81304932 292.89141846]
[52.81666565 280.80706787]
[64.36482239 271.12530518]
[77.83473969 264.36822510]
[92.50000000 260.90023804]
[92.50000000 245.90023804]
[92.50000000 230.90023804]
[92.50000000 215.90023804]
[92.50000000 200.90023804]
[92.50000000 185.90023804]
[92.50000000 170.90023804]
[92.50000000 155.90023804]
[92.50000000 140.90023804]
[92.50000000 125.90023804]
[82.37659454 120.40803528]
[75.46841431 111.19258118]
[73.03579712 99.93513489]
[75.52254486 88.68952942]
[82.47498322 79.50740814]
[76.28149414 65.84576416]
[70.08800507 52.18410873]
[63.65675735 45.61293793]
[63.91056061 38.18224335]
[57.99522400 24.39787865]
[52.07988739 10.61351109]
[46.16454697 -3.17085648]
[38.23008728 -15.90052032]
[28.45950127 -27.28189278]
[18.68891335 -38.66326523]
[7.81702137 -48.99776840]
[-4.04461479 -58.17935944]
[-15.90625095 -67.36094666]
[-27.76788712 -76.54253387]
[-39.62952423 -85.72412872]
[-51.49115753 -94.90571594]
[-63.39267349 -85.64263153]
[-77.22424316 -79.63109589]
[-92.11640167 -77.24901581]
[-107.13302612 -78.64611816]
[-121.33014679 -83.73458862]
[-133.81532288 -92.19455719]
[-143.80374146 -103.49422455]
[-150.66749573 -116.92328644]
[-153.97514343 -131.63757324]
[-153.51875305 -146.71214294]
[-149.32702637 -161.19938660]
[-141.66345215 -174.18862915]
[-131.00976562 -184.86334229]
[-118.03565979 -192.55252075]
[-103.55670929 -196.77282715]
[-88.48307800 -197.25894165]
[-73.76229095 -193.98031616]
[-60.31972122 -187.14305115]
[-49.00037766 -177.17695618]
[-40.51580048 -164.70848083]
[-35.39934158 -150.52142334]
[-33.97262192 -135.50758362]
[-36.32532883 -120.61074829]
[-42.30957031 -106.76734924]
[-30.44793320 -97.58576202]
[-18.58629608 -88.40417480]
[-6.72466087 -79.22257996]
[5.13697529 -70.04099274]
[16.99861145 -60.85940552]
[13.39784336 -75.42080688]
[17.43124199 -89.86835480]
[28.05382919 -100.45895386]
[42.51347733 -104.44875336]
[57.06395340 -100.80407715]
[67.93548584 -90.46920013]
[72.31146240 -76.12169647]
[69.05813599 -61.47875214]
[59.01838684 -50.33408737]
[44.79333878 -45.57509232]
[30.07028580 -48.43385315]
[39.84087372 -37.05247879]
[49.61145782 -25.67110825]
[47.54121017 -40.52755737]
[50.88142014 -55.15092850]
[59.19670868 -67.63515472]
[71.40322876 -76.35300446]
[85.90994263 -80.16814423]
[100.82598114 -78.58330536]
[114.20713806 -71.80505371]
[124.30925751 -60.71689987]
[129.81559753 -46.76411438]
[130.00842285 -31.76535416]
[124.86262512 -17.67561531]
[115.04891205 -6.33140993]
[101.84644318 0.78861523]
[86.97607422 2.75640941]
[72.37607574 -0.68451732]
[59.94891357 -9.08619404]
[65.86425018 4.69817257]
[71.77959442 18.48254013]
[77.69493103 32.26690674]
[83.74965668 45.99061966]
[89.94314575 59.65227127]
[96.13663483 73.31391907]
[116.28806305 78.51113129]
[126.73727417 96.50850677]
[141.56430054 98.77992249]
[156.39132690 101.05133820]
[163.40110779 87.62964630]
[174.39080811 77.21306610]
[188.16833496 70.93149567]
[203.23924255 69.46632385]
[217.96871948 72.97647858]
[230.75903320 81.08120728]
[240.22277832 92.90136719]
[245.33341980 107.15479279]
[245.53657532 122.29537964]
[240.81019592 136.68080139]
[231.66699219 148.75061035]
[219.09873962 157.19558716]
[204.46873474 161.09968567]
[189.36395264 160.03939819]
[175.42283630 154.12974548]
[164.15760803 144.01177979]
[156.79025269 130.78298950]
[154.11990356 115.87836456]
[139.29287720 113.60694122]
[124.46585846 111.33552551]
[117.56378937 120.45936584]
[107.50000000 125.90023804]
[107.50000000 140.90023804]
[107.50000000 155.90023804]
[107.50000000 170.90023804]
[107.50000000 185.90023804]
[107.50000000 200.90023804]
[107.50000000 215.90023804]
[107.50000000 230.90023804]
[107.50000000 245.90023804]
[107.50000000 260.90023804]
[122.16526031 264.36822510]
[135.63517761 271.12530518]
[147.18333435 280.80706787]
[156.18695068 292.89141846]
[162.16047668 306.72665405]
[164.78176880 321.56665039]
[163.90945435 336.61111450]
[159.59059143 351.04870605]
[152.05809021 364.10083008]
[141.71813965 375.06359863]
[129.12840271 383.34582520]
[114.96779633 388.50082397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[27 107]
[28 106]
[29 105]
[31 104]
[32 103]
[33 102]
[34 101]
[35 85]
[36 84]
[37 83]
[38 72]
[39 71]
[40 70]
[41 69]
[42 68]
[43 67]
[109 131]
[110 130]
[111 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
