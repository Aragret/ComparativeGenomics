%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUCCUCAGGGGGGGGGGAGUAUACUUCAAAGGACAUUUAACUAAAACCCCUACGCAUUUAUAUAGAGxxxxxxxxxxUUACCGUACAUAGCACAUUACAGUCAAAUCCCUUCUCGUCCCCAUGGAUGCCCCCCCCCCACCCCCCUCA\
) } def
/len { sequence length } bind def

/coor [
[94.80892181 383.93118286]
[80.96298218 377.91516113]
[69.25432587 368.38574219]
[60.55179977 356.05007935]
[55.50119781 341.82354736]
[54.47730637 326.76187134]
[57.55610657 311.98272705]
[64.50912476 298.58279419]
[74.82041168 287.55645752]
[87.72479248 279.72195435]
[102.26467896 275.66064453]
[102.26467896 260.66064453]
[102.26467896 245.66064453]
[102.26467896 230.66064453]
[102.26467896 215.66064453]
[102.26467896 200.66064453]
[102.26467896 185.66064453]
[102.26467896 170.66064453]
[102.26467896 155.66064453]
[102.26467896 140.66064453]
[92.61647034 139.59848022]
[83.59832764 136.30526733]
[75.71205139 131.01782227]
[69.38354492 124.08232880]
[64.93995667 115.93193054]
[62.59292984 107.05997467]
[62.42894745 97.99016571]
[64.40714264 89.24570465]
[68.36450195 81.31907654]
[74.02806854 74.64437866]
[81.03323364 69.57353973]
[88.94689941 66.35794830]
[87.38932037 51.43903351]
[85.83174133 36.52012253]
[84.27415466 21.60121155]
[74.74071503 12.85093403]
[73.78259277 0.34889513]
[81.36996460 -9.12417984]
[80.12308502 -24.07226753]
[78.87621307 -39.02035522]
[77.62934113 -53.96844101]
[68.77167511 -67.07769012]
[75.42424774 -80.40407562]
[74.17736816 -95.35216522]
[72.93049622 -110.30025482]
[57.92031097 -110.67645264]
[43.03879166 -112.67336273]
[28.46042061 -116.26757050]
[14.35611916 -121.41693115]
[0.89125437 -128.06108093]
[-11.77630520 -136.12210083]
[-23.49803925 -145.50550842]
[-34.13651657 -156.10125732]
[-43.56700516 -167.78514099]
[-51.67893982 -180.42016602]
[-58.37720871 -193.85818481]
[-63.58328247 -207.94165039]
[-67.23612213 -222.50544739]
[-69.29289246 -237.37881470]
[-69.72949219 -252.38735962]
[-68.54078674 -267.35513306]
[-65.74072266 -282.10662842]
[-61.36213303 -296.46893311]
[-55.45634842 -310.27359009]
[-48.09260941 -323.35879517]
[-39.35725403 -335.57110596]
[-29.35270309 -346.76736450]
[-18.19625092 -356.81628418]
[-6.01870346 -365.60006714]
[7.03716516 -373.01568604]
[20.81828117 -378.97622681]
[35.16306686 -383.41180420]
[49.90333939 -386.27041626]
[64.86627960 -387.51852417]
[79.87644196 -387.14151001]
[94.75785065 -385.14379883]
[109.33602905 -381.54882812]
[123.44005585 -376.39868164]
[136.90455627 -369.75381470]
[149.57168579 -361.69210815]
[161.29292297 -352.30807495]
[171.93083191 -341.71176147]
[181.36068726 -330.02737427]
[189.47193909 -317.39190674]
[196.16947937 -303.95352173]
[201.37480164 -289.86978149]
[205.02685547 -275.30578613]
[207.08282471 -260.43231201]
[207.51861572 -245.42373657]
[206.32911682 -230.45603943]
[203.52825928 -215.70468140]
[199.14889526 -201.34263611]
[193.24235535 -187.53828430]
[185.87791443 -174.45347595]
[177.14190674 -162.24162292]
[167.13674927 -151.04589844]
[155.97976685 -140.99757385]
[143.80174255 -132.21446228]
[130.74546814 -124.79953766]
[116.96403503 -118.83973694]
[102.61901093 -114.40493774]
[87.87858582 -111.54712677]
[89.12545776 -96.59903717]
[90.37232971 -81.65095520]
[99.14080811 -69.61089325]
[92.57742310 -55.21531677]
[93.82430267 -40.26722717]
[95.07117462 -25.31914139]
[96.31804657 -10.37105465]
[107.09484100 3.44417691]
[99.19306946 20.04363060]
[100.75064850 34.96254349]
[102.30823517 49.88145447]
[103.86581421 64.80036926]
[125.54102325 72.97847748]
[138.41929626 93.57481384]
[136.08120728 118.88285065]
[149.73745728 125.08826447]
[163.39369202 131.29367065]
[177.04994202 137.49906921]
[190.70617676 143.70448303]
[206.96675110 141.57710266]
[216.72325134 154.75825500]
[209.93902588 169.68829346]
[193.59310913 171.00848389]
[184.50077820 157.36071777]
[170.84452820 151.15531921]
[157.18829346 144.94990540]
[143.53204346 138.74450684]
[129.87580872 132.53909302]
[117.26467896 140.66064453]
[117.26467896 155.66064453]
[117.26467896 170.66064453]
[117.26467896 185.66064453]
[117.26467896 200.66064453]
[117.26467896 215.66064453]
[117.26467896 230.66064453]
[117.26467896 245.66064453]
[117.26467896 260.66064453]
[117.26467896 275.66064453]
[131.80456543 279.72195435]
[144.70895386 287.55645752]
[155.02023315 298.58279419]
[161.97325134 311.98272705]
[165.05204773 326.76187134]
[164.02816772 341.82354736]
[158.97755432 356.05007935]
[150.27503967 368.38574219]
[138.56637573 377.91516113]
[124.72043610 383.93118286]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[32 114]
[33 113]
[34 112]
[35 111]
[38 109]
[39 108]
[40 107]
[41 106]
[43 104]
[44 103]
[45 102]
[117 130]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
