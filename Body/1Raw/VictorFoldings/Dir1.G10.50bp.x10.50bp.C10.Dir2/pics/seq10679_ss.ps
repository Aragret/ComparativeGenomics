%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCACCUUUAGGGGGGGGGGUUAUCAGUCUCUUCCCCACAACAAUAUUCAUGUGCCUAGACCAAGAAGUUxxxxxxxxxxGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUCCCCCCCCCCUCCACCCUUA\
) } def
/len { sequence length } bind def

/coor [
[97.89358521 436.37731934]
[84.04764557 430.36126709]
[72.33898163 420.83184814]
[63.63645935 408.49618530]
[58.58585739 394.26968384]
[57.56196594 379.20797729]
[60.64076614 364.42883301]
[67.59378815 351.02890015]
[77.90506744 340.00256348]
[90.80944824 332.16806030]
[105.34933472 328.10675049]
[105.34933472 313.10675049]
[105.34933472 298.10675049]
[105.34933472 283.10675049]
[105.34933472 268.10675049]
[105.34933472 253.10675049]
[105.34933472 238.10675049]
[105.34933472 223.10675049]
[105.34933472 208.10675049]
[105.34933472 193.10675049]
[104.10246277 178.15866089]
[101.61734772 163.36595154]
[99.13222504 148.57324219]
[96.64710999 133.78053284]
[94.16198730 118.98783112]
[81.88717651 108.19580078]
[81.85444641 91.83850861]
[72.10679626 80.43748474]
[57.05060959 83.13164520]
[42.76174927 77.96199799]
[33.04359436 66.41107178]
[30.42946243 51.64549637]
[35.52281189 37.64823151]
[25.77515984 26.24720955]
[16.02750778 14.84618950]
[6.27985525 3.44516850]
[-6.15958500 -4.93697453]
[-20.38636398 -9.69078922]
[-34.61314392 -14.44460392]
[-48.83992386 -19.19841957]
[-60.28558731 -8.95672226]
[-75.32195282 -5.82569408]
[-89.90430450 -10.64756489]
[-100.11007690 -22.12527466]
[-103.19395447 -37.17137909]
[-98.32640076 -51.73855209]
[-86.81675720 -61.90829086]
[-71.76106262 -64.94499969]
[-57.20922089 -60.03180313]
[-47.07560349 -48.49034119]
[-44.08610916 -33.42519760]
[-29.85932922 -28.67138290]
[-15.63254929 -23.91756821]
[-1.40577006 -19.16375351]
[-11.05054188 -30.65193748]
[-17.95358658 -43.96914291]
[-21.78164101 -58.47245407]
[-22.34989738 -73.46168518]
[-19.63092422 -88.21320343]
[-13.75598431 -102.01483154]
[-5.00870419 -114.20027924]
[6.18862104 -124.18125916]
[19.29541397 -131.47590637]
[33.67891312 -135.73207092]
[48.64472198 -136.74427795]
[63.47033310 -134.46363831]
[77.44000244 -129.00027466]
[89.87931061 -120.61794281]
[100.18772888 -109.72131348]
[107.86758423 -96.83644867]
[112.54812622 -82.58539581]
[114.00337219 -67.65615082]
[112.16308594 -52.76946640]
[107.11610413 -38.64403152]
[99.10607147 -25.96178246]
[88.51970673 -15.33498287]
[75.86808777 -7.27666759]
[61.76199341 -2.17587042]
[46.88243484 -0.27884451]
[31.94775391 -1.67717302]
[17.68087578 -6.30248356]
[27.42852783 5.09853745]
[37.17618179 16.49955750]
[46.92383194 27.90057945]
[61.54257965 25.04438400]
[75.72251129 29.92142868]
[85.62282562 41.31660461]
[88.50907898 56.23526382]
[83.50781250 70.68983459]
[93.25547028 82.09085083]
[85.42019653 69.29989624]
[85.35387421 54.30004501]
[93.07572937 41.44030380]
[106.34690857 34.44918442]
[121.31961823 35.35366821]
[133.65270996 43.89151764]
[139.77037048 57.58729172]
[137.89886475 72.47007751]
[128.58081055 84.22482300]
[114.52030182 89.44317627]
[129.22827148 86.49769592]
[143.93623352 83.55221558]
[158.64419556 80.60673523]
[173.35215759 77.66124725]
[179.70758057 63.50539780]
[193.18655396 55.81793213]
[208.60610962 57.55483627]
[220.03712463 68.04823303]
[223.08413696 83.26320648]
[216.57551575 97.34928131]
[203.01396179 104.89007568]
[187.61415100 102.98600006]
[176.29763794 92.36920929]
[161.58967590 95.31469727]
[146.88171387 98.26017761]
[132.17375183 101.20565796]
[117.46578979 104.15113831]
[108.95469666 116.50271606]
[111.43981171 131.29542542]
[113.92493439 146.08813477]
[116.41004944 160.88082886]
[118.89517212 175.67353821]
[127.21459198 163.19206238]
[141.22505188 157.83415222]
[155.74993896 161.57945251]
[165.42263794 173.04414368]
[166.66925049 187.99224854]
[159.02917480 200.90075684]
[145.32528687 207.00021362]
[130.62088013 204.03698730]
[120.34933472 193.10675049]
[120.34933472 208.10675049]
[120.34933472 223.10675049]
[120.34933472 238.10675049]
[120.34933472 253.10675049]
[120.34933472 268.10675049]
[120.34933472 283.10675049]
[120.34933472 298.10675049]
[120.34933472 313.10675049]
[120.34933472 328.10675049]
[134.88922119 332.16806030]
[147.79360962 340.00256348]
[158.10488892 351.02890015]
[165.05790710 364.42883301]
[168.13671875 379.20797729]
[167.11282349 394.26968384]
[162.06222534 408.49618530]
[153.35969543 420.83184814]
[141.65103149 430.36126709]
[127.80509186 436.37731934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 122]
[22 121]
[23 120]
[24 119]
[25 118]
[27 90]
[28 89]
[33 84]
[34 83]
[35 82]
[36 81]
[37 54]
[38 53]
[39 52]
[40 51]
[100 117]
[101 116]
[102 115]
[103 114]
[104 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
