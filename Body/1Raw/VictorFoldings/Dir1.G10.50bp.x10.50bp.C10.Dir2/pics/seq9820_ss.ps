%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACAACAACCGGGGGGGGGGUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCxxxxxxxxxxGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCACCCAAGUAUUGACUCACCCCCCCCCCCCCAUCAACAACC\
) } def
/len { sequence length } bind def

/coor [
[83.33836365 404.00201416]
[70.41920471 396.24365234]
[59.63790894 385.71463013]
[51.57589340 372.98275757]
[46.66793442 358.73464966]
[45.17871094 343.73867798]
[47.18853378 328.80358887]
[52.58901978 314.73477173]
[61.08892059 302.29095459]
[72.22985840 292.14324951]
[85.41100311 284.83886719]
[99.92152405 280.77172852]
[99.30569458 265.78436279]
[98.68987274 250.79701233]
[98.07404327 235.80966187]
[97.45822144 220.82231140]
[96.84239197 205.83496094]
[96.22657013 190.84761047]
[95.61074066 175.86024475]
[94.99491882 160.87289429]
[94.37909698 145.88554382]
[93.76326752 130.89819336]
[81.04550934 125.18576050]
[72.03575134 114.54633331]
[68.49652863 101.06125641]
[71.12020874 87.36857605]
[79.39353943 76.14693451]
[66.22539520 67.37706757]
[67.32607269 52.52318573]
[60.50249481 39.16508865]
[53.67891693 25.80698776]
[46.71856308 12.51964569]
[39.62215805 -0.69553679]
[32.52575684 -13.91071987]
[25.42935181 -27.12590218]
[18.33294868 -40.34108734]
[11.23654556 -53.55626678]
[4.14014196 -66.77145386]
[-9.82517433 -61.24999619]
[-24.33707428 -57.38718796]
[-39.19929886 -55.23526001]
[-54.21085739 -54.82332230]
[-69.16873169 -56.15694046]
[-83.87062836 -59.21808243]
[-98.11773682 -63.96534729]
[-111.71736908 -70.33453369]
[-124.48561096 -78.23950958]
[-136.24977112 -87.57335663]
[-146.85078430 -98.20986176]
[-156.14524841 -110.00517273]
[-164.00749207 -122.79976654]
[-170.33117676 -136.42060852]
[-175.03079224 -150.68351746]
[-178.04277039 -165.39556885]
[-179.32637024 -180.35781860]
[-178.86424255 -195.36790466]
[-176.66264343 -210.22285461]
[-172.75134277 -224.72175598]
[-167.18324280 -238.66854858]
[-160.03361511 -251.87458801]
[-151.39918518 -264.16128540]
[-141.39671326 -275.36248779]
[-130.16146851 -285.32672119]
[-117.84539032 -293.91918945]
[-104.61504364 -301.02374268]
[-90.64936066 -306.54428101]
[-76.13720703 -310.40609741]
[-61.27483749 -312.55703735]
[-46.26325226 -312.96798706]
[-31.30546761 -311.63336182]
[-16.60376930 -308.57122803]
[-2.35698080 -303.82302856]
[11.24222565 -297.45294189]
[24.00993729 -289.54711914]
[35.77348328 -280.21246338]
[46.37377930 -269.57525635]
[55.66746521 -257.77932739]
[63.52885437 -244.98420715]
[69.85163116 -231.36293030]
[74.55028534 -217.09973145]
[77.56127930 -202.38746643]
[78.84388733 -187.42514038]
[78.38076019 -172.41506958]
[76.17816925 -157.56027222]
[72.26589966 -143.06163025]
[66.69686127 -129.11521912]
[59.54636002 -115.90966034]
[50.91110992 -103.62352753]
[40.90788651 -92.42298889]
[29.67197418 -82.45951843]
[17.35532570 -73.86785126]
[24.45172882 -60.65267181]
[31.54813194 -47.43748856]
[38.64453506 -34.22230530]
[45.74094009 -21.00712395]
[52.83734131 -7.79194021]
[59.93374634 5.42324257]
[65.90585327 9.85563850]
[67.03701782 18.98341179]
[73.86059570 32.34151077]
[80.68416595 45.69961166]
[93.36424255 53.51401901]
[92.75163269 69.32335663]
[113.78878784 67.82581329]
[133.22685242 80.57673645]
[148.04933167 78.27585602]
[162.87181091 75.97498322]
[177.69430542 73.67411041]
[192.51678467 71.37322998]
[207.24101257 62.96885681]
[219.39300537 74.79109192]
[211.39678955 89.74090576]
[194.81765747 86.19571686]
[179.99517822 88.49658966]
[165.17268372 90.79746246]
[150.35020447 93.09834290]
[135.52772522 95.39921570]
[134.29711914 110.34864807]
[148.54380798 115.04244995]
[162.79049683 119.73625183]
[178.72608948 115.86467743]
[189.84945679 127.91468811]
[184.71783447 143.49026489]
[168.61019897 146.56858826]
[158.09669495 133.98294067]
[143.85000610 129.28913879]
[129.60331726 124.59534454]
[119.16629791 129.29100037]
[108.75061798 130.28236389]
[109.36644745 145.26971436]
[109.98226929 160.25706482]
[110.59809875 175.24443054]
[111.21392059 190.23178101]
[111.82975006 205.21913147]
[112.44557190 220.20648193]
[113.06140137 235.19383240]
[113.67722321 250.18119812]
[114.29305267 265.16854858]
[114.90887451 280.15588379]
[129.70414734 283.01885986]
[143.44012451 289.21722412]
[155.37602234 298.41674805]
[164.86817932 310.12127686]
[171.40467834 323.69958496]
[174.63301086 338.41946411]
[174.37908936 353.48706055]
[170.65660095 368.08978271]
[163.66629028 381.44015503]
[153.78515625 392.81817627]
[141.54605103 401.61029053]
[127.60902405 407.34231567]
[112.72568512 409.70510864]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[27 103]
[29 101]
[30 100]
[31 99]
[32 97]
[33 96]
[34 95]
[35 94]
[36 93]
[37 92]
[38 91]
[105 117]
[106 116]
[107 115]
[108 114]
[109 113]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
