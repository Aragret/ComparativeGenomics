%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUGCCCUGGGGGGGGGGAGCCCACUUCUUACCACAAGGCACACCUACACCCCUUAUCCCCAUACUAGxxxxxxxxxxCUCCAUAAAAUUCUUCUUAGUAGCUAUUACCUUCUUAUUAUUUGAUCUAGCCCCCCCCCCAAAUUGCCCU\
) } def
/len { sequence length } bind def

/coor [
[87.44906616 341.24386597]
[72.95937347 337.03540039]
[60.05314636 329.21929932]
[49.61034393 318.32846069]
[42.34297943 305.10543823]
[38.74655533 290.45184326]
[39.06627655 275.36672974]
[43.28034592 260.87869263]
[51.10144424 247.97546387]
[61.99631119 237.53688049]
[75.22212219 230.27461243]
[89.87711334 226.68385315]
[90.18917084 211.68708801]
[90.50122833 196.69033813]
[90.81328583 181.69358826]
[91.12533569 166.69683838]
[91.43739319 151.70007324]
[91.74945068 136.70332336]
[92.06150818 121.70657349]
[92.37356567 106.70981598]
[89.36363983 99.17162323]
[92.85134125 91.40519714]
[93.47531891 76.41818237]
[78.54568481 74.92353821]
[63.72820663 72.56333923]
[49.07303619 69.34557343]
[34.62975693 65.28112793]
[20.44724083 60.38375473]
[6.57347631 54.67002106]
[-6.94459105 48.15926743]
[-20.06122017 40.87351990]
[-32.73202896 32.83743286]
[-44.91413879 24.07819939]
[-56.56633759 14.62545395]
[-67.64919281 4.51118565]
[-78.12519836 -6.23038340]
[-87.95891571 -17.56290627]
[-97.11706543 -29.44803810]
[-105.56865692 -41.84556198]
[-113.28510284 -54.71352768]
[-120.24028015 -68.00839996]
[-126.41066742 -81.68518066]
[-131.77537537 -95.69760895]
[-136.31625366 -109.99825287]
[-140.01792908 -124.53873444]
[-142.86790466 -139.26985168]
[-144.85650635 -154.14175415]
[-145.97702026 -169.10412598]
[-146.22564697 -184.10632324]
[-145.60156250 -199.09761047]
[-144.10685730 -214.02725220]
[-141.74659729 -228.84471130]
[-138.52876282 -243.49986267]
[-134.46426392 -257.94311523]
[-129.56681824 -272.12564087]
[-123.85303497 -285.99935913]
[-117.34222412 -299.51739502]
[-110.05642700 -312.63400269]
[-102.02028656 -325.30477905]
[-93.26100159 -337.48684692]
[-83.80820465 -349.13900757]
[-73.69389343 -360.22183228]
[-62.95228195 -370.69778442]
[-51.61971664 -380.53146362]
[-39.73454666 -389.68957520]
[-27.33698845 -398.14111328]
[-14.46898937 -405.85748291]
[-1.17409122 -412.81262207]
[12.50271893 -418.98294067]
[26.51516342 -424.34759521]
[40.81583023 -428.88839722]
[55.35632706 -432.59002686]
[70.08745575 -435.43994141]
[84.95936584 -437.42849731]
[99.92173767 -438.54895020]
[114.92395020 -438.79751587]
[129.91522217 -438.17333984]
[144.84484863 -436.67858887]
[159.66230774 -434.31826782]
[174.31745911 -431.10037231]
[188.76069641 -427.03579712]
[202.94317627 -422.13830566]
[216.81689453 -416.42446899]
[230.33489990 -409.91360474]
[243.45147705 -402.62774658]
[256.12222290 -394.59155273]
[268.30426025 -385.83221436]
[279.95635986 -376.37936401]
[291.03915405 -366.26501465]
[301.51507568 -355.52337646]
[311.34869385 -344.19076538]
[320.50674438 -332.30554199]
[328.95822144 -319.90795898]
[336.67456055 -307.03991699]
[343.62963867 -293.74499512]
[349.79989624 -280.06817627]
[355.16448975 -266.05569458]
[359.70526123 -251.75502014]
[363.40682983 -237.21450806]
[366.25665283 -222.48336792]
[368.24514771 -207.61143494]
[369.36553955 -192.64906311]
[369.61404419 -177.64685059]
[368.98983765 -162.65557861]
[367.49499512 -147.72595215]
[365.13461304 -132.90850830]
[361.91665649 -118.25337982]
[357.85205078 -103.81015015]
[352.95449829 -89.62769318]
[347.24057007 -75.75399780]
[340.72967529 -62.23601532]
[333.44375610 -49.11947632]
[325.40750122 -36.44876862]
[316.64813232 -24.26676369]
[307.19522095 -12.61468506]
[297.08084106 -1.53195739]
[286.33914185 8.94391823]
[275.00646973 18.77749443]
[263.12124634 27.93549728]
[250.72360229 36.38693619]
[237.85554504 44.10322189]
[224.56059265 51.05823517]
[210.88372803 57.22844696]
[196.87124634 62.59297943]
[182.57054138 67.13368225]
[168.03001404 70.83518219]
[153.29885864 73.68496704]
[138.42692566 75.67338562]
[123.46454620 76.79371643]
[108.46233368 77.04216003]
[107.83835602 92.02917480]
[107.37031555 107.02187347]
[107.05825806 122.01863098]
[106.74620819 137.01538086]
[106.43415070 152.01213074]
[106.12209320 167.00889587]
[105.81003571 182.00564575]
[105.49797821 197.00239563]
[105.18592072 211.99914551]
[104.87387085 226.99591064]
[119.36680603 231.19319153]
[132.27906799 238.99932861]
[142.73027039 249.88211060]
[150.00784302 263.09948730]
[153.61558533 277.75030518]
[153.30751038 292.83566284]
[149.10462952 307.32696533]
[141.29350281 320.23620605]
[130.40669250 330.68322754]
[117.18650055 337.95568848]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[22 131]
[23 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
