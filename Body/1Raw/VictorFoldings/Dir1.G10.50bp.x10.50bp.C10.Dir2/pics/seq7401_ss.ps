%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCAUGACGGGGGGGGGGUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAxxxxxxxxxxAAACAUAUCAUACACAAACGCCUGAGCCCUAUCUAUUACUCUCAUCGCUACCCCCCCCCCCCUCCCUGAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 379.84570312]
[71.19830322 373.82965088]
[59.48964310 364.30023193]
[50.78712082 351.96456909]
[45.73651886 337.73806763]
[44.71262741 322.67636108]
[47.79142761 307.89721680]
[54.74444962 294.49728394]
[65.05573273 283.47094727]
[77.96011353 275.63644409]
[92.50000000 271.57513428]
[92.50000000 256.57513428]
[92.50000000 241.57513428]
[92.50000000 226.57513428]
[92.50000000 211.57513428]
[92.50000000 196.57513428]
[92.50000000 181.57513428]
[92.50000000 166.57513428]
[92.50000000 151.57513428]
[92.50000000 136.57513428]
[92.50000000 121.57513428]
[73.35083008 102.07011414]
[85.60137177 72.97959137]
[71.10577393 69.12243652]
[56.61017990 65.26527405]
[41.28446579 69.19376373]
[30.97477150 58.44390106]
[15.64905548 62.37239075]
[5.33936262 51.62253189]
[-9.15623379 47.76536942]
[-23.65183067 43.90821075]
[-38.14742661 40.05105209]
[-53.47314453 43.97954178]
[-63.78283691 33.22967911]
[-78.27843475 29.37252045]
[-92.77403259 25.51536179]
[-99.34851074 26.88784218]
[-104.78728485 24.97707558]
[-107.78590393 21.18447495]
[-122.10849762 16.72765923]
[-136.43109131 12.27084351]
[-150.75369263 7.81402779]
[-165.56768799 13.97235775]
[-179.54873657 6.10407829]
[-181.97177124 -9.75494003]
[-170.97805786 -21.43901443]
[-155.00102234 -19.98512459]
[-146.29687500 -6.50856972]
[-131.97427368 -2.05175400]
[-117.65167999 2.40506172]
[-103.32908630 6.86187744]
[-88.91687012 11.01976490]
[-74.42127228 14.87692451]
[-59.92567825 18.73408318]
[-45.63678360 14.52970600]
[-34.29026794 25.55545616]
[-19.79467201 29.41261482]
[-5.29907465 33.26977539]
[9.19652176 37.12693405]
[23.48541451 32.92255783]
[34.83193207 43.94830704]
[49.12082291 39.74392700]
[60.46733856 50.76968002]
[74.96293640 54.62683868]
[89.45853424 58.48399734]
[102.55168915 51.16489029]
[106.85926819 36.79670715]
[111.16685486 22.42852402]
[97.95616150 15.20555592]
[86.53614807 5.39346981]
[77.40605927 -6.57879162]
[70.96500397 -20.18785286]
[67.49457550 -34.83878326]
[67.14647675 -49.89110947]
[69.93592834 -64.68680573]
[75.74098206 -78.57907104]
[84.30787659 -90.96059418]
[95.26209259 -101.29010010]
[108.12476349 -109.11604309]
[122.33359528 -114.09629059]
[137.26742554 -116.01313782]
[152.27342224 -114.78279114]
[166.69558716 -110.45902252]
[179.90342712 -103.23085785]
[191.31958008 -93.41427612]
[200.44496155 -81.43842316]
[206.88066101 -67.82682800]
[210.34533691 -53.17453766]
[210.68751526 -38.12207413]
[207.89224243 -23.32747650]
[202.08171082 -9.43749619]
[193.50994873 2.94065332]
[182.55168152 13.26585388]
[169.68592834 21.08673286]
[155.47514343 26.06139183]
[140.54055786 27.97236443]
[125.53504181 26.73610878]
[121.22745514 41.10429382]
[116.91986847 55.47247696]
[125.68608093 67.64431000]
[140.67877197 68.11235809]
[156.65934753 59.02384567]
[171.22203064 68.76696777]
[186.22122192 68.92300415]
[201.22039795 69.07904053]
[216.21958923 69.23507690]
[222.15031433 55.23882675]
[232.98921204 44.58112717]
[247.08346558 38.88720322]
[262.28375244 39.02533340]
[276.27221680 44.97445679]
[286.91561890 55.82737350]
[292.59100342 69.92909241]
[292.43289185 85.12920380]
[286.46536255 99.10980988]
[275.59844971 109.73895264]
[261.48928833 115.39577484]
[246.28939819 115.21765137]
[232.31665039 109.23175049]
[221.70181274 98.35086823]
[216.06355286 84.23426056]
[201.06436157 84.07822418]
[186.06518555 83.92218781]
[171.06599426 83.76615143]
[162.17002869 92.02262115]
[149.63142395 91.97660828]
[140.21073914 83.10504913]
[125.21803284 82.63700867]
[125.40071869 108.32270813]
[107.50000000 121.57513428]
[107.50000000 136.57513428]
[107.50000000 151.57513428]
[107.50000000 166.57513428]
[107.50000000 181.57513428]
[107.50000000 196.57513428]
[107.50000000 211.57513428]
[107.50000000 226.57513428]
[107.50000000 241.57513428]
[107.50000000 256.57513428]
[107.50000000 271.57513428]
[122.03988647 275.63644409]
[134.94427490 283.47094727]
[145.25555420 294.49728394]
[152.20857239 307.89721680]
[155.28736877 322.67636108]
[154.26348877 337.73806763]
[149.21287537 351.96456909]
[140.51036072 364.30023193]
[128.80169678 373.82965088]
[114.95575714 379.84570312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 65]
[24 64]
[25 63]
[27 61]
[29 59]
[30 58]
[31 57]
[32 56]
[34 54]
[35 53]
[36 52]
[39 51]
[40 50]
[41 49]
[42 48]
[66 99]
[67 98]
[68 97]
[100 128]
[101 127]
[103 124]
[104 123]
[105 122]
[106 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
