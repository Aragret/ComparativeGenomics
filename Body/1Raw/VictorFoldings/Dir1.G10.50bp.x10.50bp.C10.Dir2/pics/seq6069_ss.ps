%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUUAAGCUGGGGGGGGGGAAGCCCUUACUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAxxxxxxxxxxUUCACAGCACCAAAUCUCCACCUCCAUCAUCACCUCAACCCAAAAAGGCACCCCCCCCCCUAAUUAAACU\
) } def
/len { sequence length } bind def

/coor [
[83.78128815 418.40347290]
[69.93535614 412.38745117]
[58.22669220 402.85803223]
[49.52416611 390.52236938]
[44.47356415 376.29583740]
[43.44967270 361.23416138]
[46.52847290 346.45498657]
[53.48149490 333.05505371]
[63.79277802 322.02874756]
[76.69715881 314.19421387]
[91.23704529 310.13290405]
[91.23704529 295.13290405]
[91.23704529 280.13290405]
[91.23704529 265.13290405]
[91.23704529 250.13291931]
[91.23704529 235.13291931]
[91.23704529 220.13291931]
[91.23704529 205.13291931]
[91.23704529 190.13291931]
[91.23704529 175.13291931]
[82.88848877 166.32331848]
[82.80406189 153.78491211]
[91.57714081 144.27244568]
[91.88919830 129.27569580]
[92.20125580 114.27893829]
[83.73101807 99.83075714]
[92.50000000 85.56190491]
[92.50000000 70.56190491]
[83.14408112 82.28652954]
[69.23013306 87.89028931]
[54.35974503 85.92266846]
[42.38206863 76.89297485]
[36.39748764 63.13853073]
[37.95509720 48.21962357]
[46.65171051 35.99796295]
[60.23623657 29.63709641]
[75.19235992 30.78351212]
[87.64874268 39.14046097]
[94.38105774 52.54467392]
[97.47937775 37.86814880]
[100.57769775 23.19162178]
[103.67601776 8.51509666]
[89.28843689 4.24382448]
[75.29120636 -1.17132401]
[61.77510452 -7.69523001]
[48.82779312 -15.28558254]
[36.53324127 -23.89315414]
[24.97118378 -33.46212006]
[14.21660519 -43.93042374]
[4.33925581 -55.23017120]
[-4.59680557 -67.28807831]
[-12.53362465 -80.02594757]
[-19.41972733 -93.36116028]
[-25.21045303 -107.20723724]
[-29.86824799 -121.47437286]
[-33.36290359 -136.07005310]
[-35.67175293 -150.89959717]
[-36.77982330 -165.86685181]
[-36.67993164 -180.87472534]
[-35.37272263 -195.82589722]
[-32.86667252 -210.62339783]
[-29.17803955 -225.17124939]
[-24.33074188 -239.37512207]
[-18.35621834 -253.14289856]
[-11.29321480 -266.38525391]
[-3.18753934 -279.01635742]
[5.90823841 -290.95422363]
[15.93512821 -302.12149048]
[26.82810211 -312.44570923]
[38.51651382 -321.85992432]
[50.92455673 -330.30307007]
[63.97175598 -337.72042847]
[77.57350159 -344.06381226]
[91.64157867 -349.29217529]
[106.08473969 -353.37155151]
[120.80932617 -356.27548218]
[135.71983337 -357.98516846]
[150.71957397 -358.48950195]
[165.71124268 -357.78521729]
[180.59764099 -355.87689209]
[195.28219604 -352.77685547]
[209.66967773 -348.50527954]
[223.66679382 -343.08981323]
[237.18275452 -336.56561279]
[250.12989807 -328.97497559]
[262.42425537 -320.36712646]
[273.98611450 -310.79791260]
[284.74044800 -300.32937622]
[294.61755371 -289.02938843]
[303.55334473 -276.97128296]
[311.48989868 -264.23324585]
[318.37570190 -250.89788818]
[324.16610718 -237.05168152]
[328.82360840 -222.78443909]
[332.31793213 -208.18869019]
[334.62646484 -193.35910034]
[335.73419189 -178.39183044]
[335.63397217 -163.38394165]
[334.32641602 -148.43280029]
[331.82006836 -133.63536072]
[328.13110352 -119.08757782]
[323.28347778 -104.88381195]
[317.30865479 -91.11618042]
[310.24536133 -77.87397003]
[302.13940430 -65.24305725]
[293.04336548 -53.30537033]
[283.01623535 -42.13832855]
[272.12304688 -31.81435204]
[260.43441772 -22.40039825]
[248.02618408 -13.95751953]
[234.97882080 -6.54047489]
[221.37693787 -0.19736537]
[207.30874634 5.03067017]
[192.86549377 9.10972595]
[178.14083862 12.01334667]
[163.23030090 13.72270203]
[148.23054504 14.22670460]
[133.23889160 13.52208710]
[118.35254669 11.61341858]
[115.25422668 26.28994370]
[112.15589905 40.96646881]
[109.05757904 55.64299393]
[107.50000000 70.56190491]
[107.50000000 85.56190491]
[115.24423218 94.31477356]
[115.12266541 106.00113678]
[107.19801331 114.59099579]
[106.88595581 129.58775330]
[106.57389832 144.58450317]
[115.82815552 160.46966553]
[106.23704529 175.13291931]
[106.23704529 190.13291931]
[106.23704529 205.13291931]
[106.23704529 220.13291931]
[106.23704529 235.13291931]
[106.23704529 250.13291931]
[106.23704529 265.13290405]
[106.23704529 280.13290405]
[106.23704529 295.13290405]
[106.23704529 310.13290405]
[120.77693176 314.19421387]
[133.68132019 322.02874756]
[143.99259949 333.05505371]
[150.94561768 346.45498657]
[154.02441406 361.23416138]
[153.00053406 376.29583740]
[147.94992065 390.52236938]
[139.24740601 402.85803223]
[127.53874207 412.38745117]
[113.69280243 418.40347290]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 129]
[24 128]
[25 127]
[27 124]
[28 123]
[39 122]
[40 121]
[41 120]
[42 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
