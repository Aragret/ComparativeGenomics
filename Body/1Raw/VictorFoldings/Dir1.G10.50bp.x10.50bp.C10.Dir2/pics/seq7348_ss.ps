%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACCACACGGGGGGGGGGAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCGAxxxxxxxxxxUUCUCCACUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCCCCCCCCCCCAACCACAC\
) } def
/len { sequence length } bind def

/coor [
[76.65291595 449.79617310]
[62.80697250 443.78015137]
[51.09831238 434.25073242]
[42.39578629 421.91506958]
[37.34518433 407.68853760]
[36.32129288 392.62686157]
[39.40009308 377.84771729]
[46.35311508 364.44778442]
[56.66439819 353.42144775]
[69.56877899 345.58694458]
[84.10866547 341.52563477]
[84.10866547 326.52563477]
[84.10866547 311.52563477]
[84.10866547 296.52563477]
[84.10866547 281.52563477]
[84.10866547 266.52563477]
[84.10866547 251.52563477]
[84.10866547 236.52563477]
[84.10866547 221.52563477]
[84.10866547 206.52563477]
[80.94309235 199.79325867]
[84.26795197 191.21438599]
[84.58000946 176.21763611]
[84.11196136 161.22492981]
[82.86508942 146.27684021]
[81.61821747 131.32876587]
[70.52690125 121.23011017]
[55.52770996 121.38614655]
[40.52852249 121.54218292]
[35.51594162 135.84777832]
[25.91045570 147.57424927]
[12.87197304 155.30560303]
[-2.02504373 158.10823059]
[-16.98170853 155.64369202]
[-30.19193268 148.20959473]
[-40.06051636 136.70364380]
[-45.39577866 122.51523590]
[-45.55346298 107.35769653]
[-40.51452637 93.06137085]
[-30.88744545 81.35261536]
[-17.83473778 73.64530182]
[-2.93258166 70.87014008]
[12.01951694 73.36223602]
[25.21601868 80.82067108]
[35.06338120 92.34478760]
[40.37248611 106.54299927]
[55.37167358 106.38696289]
[70.37086487 106.23091888]
[75.57010651 81.46915436]
[97.96338654 69.01833344]
[96.40580750 54.09942245]
[94.84822845 39.18051147]
[81.07469177 28.44612122]
[79.32803345 11.40988827]
[90.20066071 -1.38245332]
[88.33304596 -16.26573372]
[76.13710785 -25.95577240]
[74.45510101 -41.07614136]
[83.76823425 -52.64338684]
[81.90061951 -67.52666473]
[80.03300476 -82.40994263]
[76.29245758 -87.98810577]
[76.02136993 -93.74638367]
[78.41061401 -97.94960022]
[77.16374207 -112.89768219]
[75.91687012 -127.84577179]
[61.42747116 -132.44204712]
[49.80315018 -142.23713684]
[42.81653595 -155.73733521]
[41.53303146 -170.88398743]
[46.14836502 -185.36732483]
[55.95873260 -196.97875977]
[69.46811676 -203.94760132]
[84.61644745 -205.21118164]
[99.09370422 -200.57679749]
[110.69221497 -190.75117493]
[117.64328766 -177.23262024]
[118.88693237 -162.08265686]
[114.23351288 -147.61149597]
[104.39263153 -136.02592468]
[90.86495209 -129.09265137]
[92.11183167 -114.14456177]
[93.35870361 -99.19647217]
[94.91628265 -84.27755737]
[96.78389740 -69.39427948]
[98.65151215 -54.51099777]
[110.53390503 -45.60345078]
[112.63994598 -30.53629494]
[103.21632385 -18.13334656]
[105.08393860 -3.25006652]
[116.29283905 3.18089628]
[121.81525421 15.07952213]
[119.42100525 28.17515182]
[109.76713562 37.62292862]
[111.32472229 52.54184341]
[112.88230133 67.46075439]
[125.32173920 75.84289551]
[139.73396301 71.68501282]
[154.14617920 67.52712250]
[168.55839539 63.36923599]
[182.97061157 59.21134949]
[186.58419800 44.28360748]
[197.18914795 33.17367554]
[211.93278503 28.87006950]
[226.84912109 32.53043747]
[237.92576599 43.17016220]
[242.18313599 57.92720795]
[238.47602844 72.83200073]
[227.80163574 83.87523651]
[213.03131104 88.08632660]
[198.13821411 84.33251953]
[187.12849426 73.62356567]
[172.71627808 77.78144836]
[158.30406189 81.93933868]
[143.89184570 86.09722900]
[129.47962952 90.25511169]
[130.79176331 102.51464844]
[127.23455811 114.25576782]
[119.41770172 123.63134766]
[108.61699677 129.18600464]
[96.56629944 130.08187866]
[97.81317902 145.02996826]
[99.06005096 159.97805786]
[110.82808685 150.67680359]
[125.48423004 153.87017822]
[132.31600952 167.22409058]
[126.32996368 180.97789001]
[111.90139771 185.07868958]
[99.57675934 176.52969360]
[99.26470184 191.52644348]
[99.10866547 206.52563477]
[99.10866547 221.52563477]
[99.10866547 236.52563477]
[99.10866547 251.52563477]
[99.10866547 266.52563477]
[99.10866547 281.52563477]
[99.10866547 296.52563477]
[99.10866547 311.52563477]
[99.10866547 326.52563477]
[99.10866547 341.52563477]
[113.64855194 345.58694458]
[126.55293274 353.42144775]
[136.86421204 364.44778442]
[143.81724548 377.84771729]
[146.89604187 392.62686157]
[145.87214661 407.68853760]
[140.82154846 421.91506958]
[132.11901855 434.25073242]
[120.41036224 443.78015137]
[106.56442261 449.79617310]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[24 123]
[25 122]
[26 121]
[27 48]
[28 47]
[29 46]
[50 96]
[51 95]
[52 94]
[55 90]
[56 89]
[59 86]
[60 85]
[61 84]
[64 83]
[65 82]
[66 81]
[97 116]
[98 115]
[99 114]
[100 113]
[101 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
