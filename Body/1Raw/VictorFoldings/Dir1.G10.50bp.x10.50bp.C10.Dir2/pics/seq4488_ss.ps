%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAUAGGAGGGGGGGGGGGCUUAAACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAxxxxxxxxxxAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACAAUGAACAAGAUAUUCGCCCCCCCCCCAAAAAUAGGAG\
) } def
/len { sequence length } bind def

/coor [
[103.57384491 397.96966553]
[89.55189514 392.41665649]
[77.35194397 383.55032349]
[67.74086761 371.92803955]
[61.32284546 358.28033447]
[58.50130844 343.46514893]
[59.45362473 328.41375732]
[64.11992645 314.07232666]
[72.20689392 301.34237671]
[83.20616913 291.02410889]
[96.42633057 283.76614380]
[111.03633881 280.02468872]
[111.03633881 265.02468872]
[111.03633881 250.02470398]
[111.03633881 235.02470398]
[111.03633881 220.02470398]
[111.03633881 205.02470398]
[111.03633881 190.02470398]
[111.03633881 175.02470398]
[111.03633881 160.02470398]
[111.03633881 145.02470398]
[111.03633881 130.02470398]
[104.91486359 125.69139099]
[91.28789520 131.96083069]
[92.67191315 117.02478790]
[86.55043793 112.69148254]
[72.40311432 117.67680359]
[64.20515442 131.46711731]
[48.29308319 133.51300049]
[36.87328720 122.24499512]
[38.70605087 106.30697632]
[52.38544083 97.92521667]
[67.41779327 103.52948761]
[81.56510925 98.54416656]
[91.44081879 87.25388336]
[94.49921417 72.56898499]
[89.73820496 57.48113251]
[99.90797424 46.59880066]
[102.96636963 31.91390419]
[106.02476501 17.22900581]
[94.46454620 -2.39542842]
[104.31248474 -22.30361176]
[99.76519012 -36.59774017]
[95.21790314 -50.89187241]
[87.81796265 -48.32843018]
[78.74620056 -49.17632675]
[69.53527832 -54.13838577]
[57.94623184 -63.66172409]
[46.35718155 -73.18505859]
[32.28248596 -67.17161560]
[17.02630043 -68.39937592]
[4.09438562 -76.58620453]
[-3.54159808 -89.85083008]
[-4.12695837 -105.14514160]
[2.47281694 -118.95462036]
[14.74114704 -128.10594177]
[29.85886002 -130.49620056]
[44.35201645 -125.57613373]
[54.89019394 -114.47634125]
[59.05179596 -99.74746704]
[55.88051987 -84.77410889]
[67.46956635 -75.25077057]
[79.05861664 -65.72743225]
[92.87220001 -71.57421875]
[94.10281372 -86.52365875]
[95.33342743 -101.47309113]
[88.75438690 -115.86151886]
[97.50975800 -127.91110992]
[98.74037170 -142.86054993]
[99.97098541 -157.80998230]
[86.18978119 -164.12300110]
[75.40104675 -174.77096558]
[68.90757751 -188.46806335]
[67.49349213 -203.56031799]
[71.32953644 -218.22526550]
[79.95250702 -230.69203186]
[92.32112122 -239.45520020]
[106.94181824 -243.45657349]
[122.04907990 -242.21296692]
[135.81861877 -235.87455750]
[146.58770752 -225.20674133]
[153.05592346 -211.49768066]
[154.44219971 -196.40284729]
[150.57913208 -181.74501038]
[141.93321228 -169.29414368]
[129.54846191 -160.55378723]
[114.92041779 -156.57936096]
[113.68980408 -141.62992859]
[112.45919037 -126.68049622]
[119.12625122 -113.36135864]
[110.28285980 -100.24247742]
[109.05224609 -85.29304504]
[107.82163239 -70.34361267]
[109.51203156 -55.43916321]
[114.05931854 -41.14503098]
[118.60661316 -26.85090065]
[129.17953491 -24.00155067]
[137.24450684 -16.59466553]
[151.75312805 -20.40252495]
[166.26174927 -24.21038246]
[180.77037048 -28.01824188]
[182.79716492 -43.08345413]
[190.43919373 -56.22376633]
[202.53111267 -65.43537903]
[217.22900391 -69.31358337]
[232.29153442 -67.26698303]
[245.42178345 -59.60767365]
[254.61747742 -47.50364304]
[258.47634888 -32.80066299]
[256.40994263 -17.74083519]
[248.73336792 -4.62067461]
[236.61724854 4.55909157]
[221.90919495 8.39861488]
[206.85211182 6.31239557]
[193.74205017 -1.38143241]
[184.57823181 -13.50961685]
[170.06961060 -9.70175743]
[155.56098938 -5.89389896]
[141.05235291 -2.08604026]
[139.37113953 5.74356031]
[135.07200623 12.62098598]
[128.60881042 17.68874359]
[120.70966339 20.28740120]
[117.65126801 34.97229767]
[114.59287262 49.65719604]
[119.57263184 63.69469070]
[109.18411255 75.62738037]
[106.12571716 90.31227875]
[119.35284424 92.13914490]
[129.47955322 107.06735992]
[126.03633881 130.02470398]
[126.03633881 145.02470398]
[126.03633881 160.02470398]
[126.03633881 175.02470398]
[126.03633881 190.02470398]
[126.03633881 205.02470398]
[126.03633881 220.02470398]
[126.03633881 235.02470398]
[126.03633881 250.02470398]
[126.03633881 265.02468872]
[126.03633881 280.02468872]
[140.64634705 283.76614380]
[153.86651611 291.02410889]
[164.86578369 301.34237671]
[172.95275879 314.07232666]
[177.61906433 328.41375732]
[178.57138062 343.46514893]
[175.74983215 358.28033447]
[169.33181763 371.92803955]
[159.72074890 383.55032349]
[147.52078247 392.41665649]
[133.49884033 397.96966553]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[26 34]
[27 33]
[35 128]
[36 127]
[38 125]
[39 124]
[40 123]
[42 96]
[43 95]
[44 94]
[47 63]
[48 62]
[49 61]
[64 93]
[65 92]
[66 91]
[68 89]
[69 88]
[70 87]
[98 119]
[99 118]
[100 117]
[101 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
