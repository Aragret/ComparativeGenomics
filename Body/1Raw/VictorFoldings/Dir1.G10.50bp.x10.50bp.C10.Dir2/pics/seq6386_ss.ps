%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUCAUAAUCGGGGGGGGGGGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUxxxxxxxxxxAGACGCUACUUCCCCUAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCCCCCCCCCCCUCAUAAUC\
) } def
/len { sequence length } bind def

/coor [
[35.16177368 381.91030884]
[21.13982773 376.35729980]
[8.93987083 367.49096680]
[-0.67120022 355.86865234]
[-7.08922529 342.22094727]
[-9.91076279 327.40576172]
[-8.95844650 312.35440063]
[-4.29214144 298.01296997]
[3.79482532 285.28302002]
[14.79409981 274.96475220]
[28.01425934 267.70675659]
[42.62427139 263.96533203]
[42.62427139 248.96533203]
[42.62427139 233.96533203]
[42.62427139 218.96533203]
[42.62427139 203.96533203]
[42.62427139 188.96533203]
[42.62427139 173.96533203]
[42.62427139 158.96533203]
[42.62427139 143.96533203]
[42.62427139 128.96533203]
[34.88697052 116.23806000]
[42.62427139 102.43788910]
[31.74895668 92.10698700]
[16.76871681 92.87664795]
[1.78847539 93.64630127]
[-1.87815869 96.22612000]
[-5.78417444 97.35155487]
[-9.43082428 97.13090515]
[-12.40890217 95.82695770]
[-14.44231987 93.81294250]
[-29.43520546 93.35102081]
[-38.17117310 96.22827911]
[-44.73029327 92.72254944]
[-59.71053314 91.95288849]
[-74.69077301 91.18322754]
[-89.67101288 90.41356659]
[-104.02101898 98.35141754]
[-117.92892456 89.66222382]
[-117.08747101 73.28467560]
[-102.36227417 66.06659698]
[-88.90135956 75.43332672]
[-73.92111206 76.20298767]
[-58.94087601 76.97264862]
[-43.96063232 77.74230957]
[-28.97327995 78.35813141]
[-13.98039436 78.82006073]
[1.01881540 78.66606140]
[15.99905682 77.89640045]
[30.97929764 77.12673950]
[34.32233429 70.41301727]
[20.89499664 63.72671890]
[27.58151817 50.29949188]
[41.00841141 56.98556900]
[44.35144806 50.27184296]
[35.93803787 37.85353088]
[27.52462769 25.43521690]
[19.11121750 13.01690197]
[10.69780731 0.59858739]
[-4.72187805 -3.83005261]
[-10.74012184 -18.70151138]
[-2.74024320 -32.60767746]
[13.14093685 -34.88093185]
[24.72073555 -23.77742767]
[23.11612129 -7.81482267]
[31.52953148 4.60349131]
[39.94294357 17.02180672]
[48.35635376 29.44012070]
[56.76976395 41.85843277]
[64.19242096 42.93272400]
[62.76261902 28.00102425]
[61.33281326 13.06932449]
[59.90300751 -1.86237538]
[53.35540771 -15.35789013]
[54.70117188 -30.29739952]
[63.55516815 -42.40552902]
[77.38356781 -48.21718216]
[92.22897339 -46.06918716]
[103.84294128 -36.57625961]
[108.90180206 -22.45506859]
[105.95780182 -7.74680948]
[95.85159302 3.34050083]
[90.24697876 17.25410080]
[84.64236450 31.16770172]
[79.03775024 45.08130264]
[86.46041107 46.15559387]
[98.04945374 36.63225555]
[109.63850403 27.10891724]
[114.31961060 19.19165421]
[121.56466675 17.51197243]
[133.34680176 8.22858620]
[145.12893677 -1.05479920]
[156.91107178 -10.33818436]
[154.63171387 -25.52699852]
[160.26705933 -39.81470108]
[172.30123901 -49.35796738]
[187.49713135 -51.58971405]
[201.76708984 -45.90960693]
[211.27259827 -33.84556961]
[213.45669556 -18.64276505]
[207.73188782 -4.39067316]
[195.63812256 5.07696676]
[180.42854309 7.21340561]
[166.19445801 1.44395244]
[154.41232300 10.72733784]
[142.63018799 20.01072311]
[130.84805298 29.29410934]
[119.16184235 38.69796753]
[107.57279205 48.22130203]
[95.98374176 57.74464035]
[116.72863007 65.33921814]
[128.94296265 81.17331696]
[130.55221558 99.01329041]
[145.20494080 102.22228241]
[159.85766602 105.43128204]
[174.51039124 108.64027405]
[186.78071594 98.94628906]
[202.40988159 99.45913696]
[214.01829529 109.93667603]
[216.12480164 125.43172455]
[207.73480225 138.62800598]
[192.80975342 143.29461670]
[178.39685059 137.22814941]
[171.30139160 123.29299927]
[156.64866638 120.08400726]
[141.99595642 116.87500763]
[127.34322357 113.66600800]
[107.99798584 133.58825684]
[77.02272034 130.87493896]
[57.62427139 102.43788910]
[65.36157227 116.23806000]
[57.62427139 128.96533203]
[57.62427139 143.96533203]
[57.62427139 158.96533203]
[57.62427139 173.96533203]
[57.62427139 188.96533203]
[57.62427139 203.96533203]
[57.62427139 218.96533203]
[57.62427139 233.96533203]
[57.62427139 248.96533203]
[57.62427139 263.96533203]
[72.23428345 267.70675659]
[85.45444489 274.96475220]
[96.45372009 285.28302002]
[104.54068756 298.01296997]
[109.20699310 312.35440063]
[110.15930176 327.40576172]
[107.33776855 342.22094727]
[100.91974640 355.86865234]
[91.30867004 367.49096680]
[79.10871124 376.35729980]
[65.08676910 381.91030884]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 130]
[24 50]
[25 49]
[26 48]
[31 47]
[32 46]
[34 45]
[35 44]
[36 43]
[37 42]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
[86 110]
[87 109]
[88 108]
[90 107]
[91 106]
[92 105]
[93 104]
[113 127]
[114 126]
[115 125]
[116 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
