%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAUAUCUACGGGGGGGGGGAAUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUxxxxxxxxxxGAAUUCUCACUGUGAUAUAUAAACUCAGACCCAAACAUUAAUCAGUUCUUCCCCCCCCCCCAAAUAUCUAC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 397.38253784]
[71.01555634 391.82952881]
[58.81560135 382.96322632]
[49.20452881 371.34091187]
[42.78650284 357.69320679]
[39.96496582 342.87802124]
[40.91728210 327.82662964]
[45.58358765 313.48519897]
[53.67055511 300.75524902]
[64.66983032 290.43698120]
[77.88998413 283.17901611]
[92.50000000 279.43756104]
[92.50000000 264.43756104]
[92.50000000 249.43757629]
[92.50000000 234.43757629]
[92.50000000 219.43757629]
[92.50000000 204.43757629]
[92.50000000 189.43757629]
[92.50000000 174.43757629]
[92.50000000 159.43757629]
[92.50000000 144.43757629]
[92.50000000 129.43757629]
[92.50000000 114.43756866]
[84.75668335 105.68637085]
[84.87664795 94.00185394]
[92.79801178 85.41148376]
[93.10598755 70.41464233]
[93.41396332 55.41780853]
[78.46177673 54.15902328]
[63.61952591 51.95444489]
[48.94698334 48.81294632]
[34.50323105 44.74717712]
[20.34642220 39.77351379]
[6.53356743 33.91197968]
[-6.87971449 27.18618011]
[-19.83941269 19.62319565]
[-32.29334259 11.25347900]
[-44.19135666 2.11073422]
[-55.48554611 -7.76822424]
[-66.13043213 -18.34361649]
[-76.08315277 -29.57286072]
[-85.30362701 -41.41073990]
[-93.75473022 -53.80958557]
[-101.40243530 -66.71946716]
[-108.21594238 -80.08841705]
[-114.16781616 -93.86257935]
[-119.23409271 -107.98651123]
[-123.39437866 -122.40332794]
[-126.63190460 -137.05497742]
[-128.93365479 -151.88247681]
[-130.29032898 -166.82609558]
[-130.69650269 -181.82568359]
[-130.15052795 -196.82083130]
[-128.65458679 -211.75115967]
[-126.21471405 -226.55654907]
[-122.84073639 -241.17738342]
[-118.54624176 -255.55477905]
[-113.34851837 -269.63085938]
[-107.26849365 -283.34896851]
[-100.33065033 -296.65380859]
[-92.56292725 -309.49182129]
[-83.99660492 -321.81134033]
[-74.66617584 -333.56277466]
[-64.60920715 -344.69873047]
[-53.86619568 -355.17443848]
[-42.48040390 -364.94766235]
[-30.49767494 -373.97909546]
[-17.96626091 -382.23236084]
[-4.93662071 -389.67419434]
[8.53877831 -396.27465820]
[22.40567589 -402.00717163]
[36.60823441 -406.84866333]
[51.08926392 -410.77960205]
[65.79045868 -413.78417969]
[80.65261078 -415.85028076]
[95.61588287 -416.96963501]
[110.62002563 -417.13769531]
[125.60462189 -416.35379028]
[140.50932312 -414.62106323]
[155.27412415 -411.94650269]
[169.83956909 -408.34091187]
[184.14700317 -403.81875610]
[198.13882446 -398.39828491]
[211.75868225 -392.10131836]
[224.95173645 -384.95318604]
[237.66487122 -376.98266602]
[249.84687805 -368.22189331]
[261.44873047 -358.70614624]
[272.42367554 -348.47369385]
[282.72753906 -337.56576538]
[292.31884766 -326.02630615]
[301.15896606 -313.90173340]
[309.21228027 -301.24090576]
[316.44638062 -288.09478760]
[322.83215332 -274.51632690]
[328.34384155 -260.56021118]
[332.95928955 -246.28259277]
[336.65991211 -231.74099731]
[339.43078613 -216.99397278]
[341.26074219 -202.10089111]
[342.14245605 -187.12173462]
[342.07235718 -172.11682129]
[341.05072021 -157.14656067]
[339.08166504 -142.27122498]
[336.17312622 -127.55073547]
[332.33679199 -113.04434967]
[327.58813477 -98.81049347]
[321.94628906 -84.90647125]
[315.43392944 -71.38826752]
[308.07730103 -58.31032562]
[299.90603638 -45.72529984]
[290.95300293 -33.68386841]
[281.25430298 -22.23451805]
[270.84896851 -11.42335033]
[259.77886963 -1.29389977]
[248.08863831 8.11304665]
[235.82530212 16.75960922]
[223.03825378 24.61097145]
[209.77897644 31.63551903]
[196.10087585 37.80496597]
[182.05902100 43.09447098]
[167.70996094 47.48273468]
[153.11146545 50.95208359]
[138.32231140 53.48855209]
[123.40206909 55.08192444]
[108.41080475 55.72578430]
[108.10282898 70.72262573]
[107.79484558 85.71945953]
[116.26854706 100.16703033]
[107.50000000 114.43756866]
[107.50000000 129.43757629]
[107.50000000 144.43757629]
[107.50000000 159.43757629]
[107.50000000 174.43757629]
[107.50000000 189.43757629]
[107.50000000 204.43757629]
[107.50000000 219.43757629]
[107.50000000 234.43757629]
[107.50000000 249.43757629]
[107.50000000 264.43756104]
[107.50000000 279.43756104]
[122.11001587 283.17901611]
[135.33016968 290.43698120]
[146.32945251 300.75524902]
[154.41641235 313.48519897]
[159.08271790 327.82662964]
[160.03503418 342.87802124]
[157.21350098 357.69320679]
[150.79547119 371.34091187]
[141.18440247 382.96322632]
[128.98443604 391.82952881]
[114.96250153 397.38253784]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[26 128]
[27 127]
[28 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
