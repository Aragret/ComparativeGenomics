%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUAACCAAAAAAGGGGGGGGGGAUAAACCCUCGUUCCACAGAAGCUGCCAUCAAGUAUUUCCUCACGCAAGCxxxxxxxxxxCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGCCCCCCCCCCUUUAACCAAAACA\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 406.43524170]
[70.75619507 401.62579346]
[57.85220718 393.86041260]
[46.91955185 383.50225830]
[38.46956635 371.03585815]
[32.89747238 357.04421997]
[30.46388245 342.18179321]
[31.28262329 327.14370728]
[35.31539917 312.63333130]
[42.37359238 299.32934570]
[52.12707901 287.85400391]
[64.11966705 278.74401855]
[77.79044342 272.42547607]
[92.50000000 269.19390869]
[92.50000000 254.19392395]
[92.50000000 239.19392395]
[92.50000000 224.19392395]
[92.50000000 209.19392395]
[92.50000000 194.19392395]
[92.50000000 179.19392395]
[92.50000000 164.19392395]
[92.50000000 149.19392395]
[92.50000000 134.19392395]
[84.76270294 121.46664429]
[92.50000000 107.66647339]
[90.25730133 92.83507538]
[85.82231903 78.50570679]
[81.38732910 64.17633057]
[76.95234680 49.84696198]
[72.51736450 35.51758957]
[68.08238220 21.18821526]
[62.23830414 7.37348604]
[55.04358292 -5.78842831]
[47.84886169 -18.95034218]
[34.04332352 -13.05435371]
[19.73318672 -8.51833344]
[5.05206203 -5.38463306]
[-9.86297417 -3.68251228]
[-24.87265968 -3.42786431]
[-39.83684921 -4.62306595]
[-54.61582565 -7.25695848]
[-69.07159424 -11.30494881]
[-83.06919098 -16.72924042]
[-96.47790527 -23.47918892]
[-109.17255402 -31.49176788]
[-121.03459930 -40.69216537]
[-131.95329285 -50.99448013]
[-141.82669067 -62.30251312]
[-150.56259155 -74.51068878]
[-158.07943726 -87.50502014]
[-164.30703735 -101.16416931]
[-169.18725586 -115.36061859]
[-172.67451477 -129.96179199]
[-174.73626709 -144.83139038]
[-175.35324097 -159.83055115]
[-174.51969910 -174.81922913]
[-172.24340820 -189.65750122]
[-168.54563904 -204.20678711]
[-163.46089172 -218.33126831]
[-157.03666687 -231.89906311]
[-149.33294678 -244.78346252]
[-140.42163086 -256.86419678]
[-130.38595581 -268.02847290]
[-119.31961060 -278.17199707]
[-107.32592010 -287.20013428]
[-94.51687622 -295.02853394]
[-81.01206970 -301.58410645]
[-66.93759918 -306.80569458]
[-52.42486954 -310.64447021]
[-37.60939407 -313.06463623]
[-22.62950325 -314.04360962]
[-7.62506151 -313.57220459]
[7.26383638 -311.65484619]
[21.89817238 -308.30944824]
[36.14130402 -303.56723022]
[49.86024857 -297.47247314]
[62.92691040 -290.08206177]
[75.21928406 -281.46505737]
[86.62259674 -271.70184326]
[97.03038025 -260.88363647]
[106.34545898 -249.11143494]
[114.48085022 -236.49514771]
[121.36060333 -223.15255737]
[126.92047119 -209.20826721]
[131.10855103 -194.79246521]
[133.88574219 -180.03973389]
[135.22610474 -165.08784485]
[135.11711121 -150.07640076]
[133.55981445 -135.14555359]
[130.56872559 -120.43470764]
[126.17179108 -106.08122253]
[120.41004944 -92.21912384]
[113.33730316 -78.97782898]
[105.01959229 -66.48097992]
[95.53458405 -54.84526062]
[84.97082520 -44.17930222]
[73.42696381 -34.58270264]
[61.01077652 -26.14506340]
[68.20549774 -12.98314953]
[75.40021515 0.17876479]
[77.90155792 -14.61120892]
[87.36028290 -26.25304794]
[101.32486725 -31.72939301]
[116.17593384 -29.62087250]
[128.06434631 -20.47397423]
[133.90882874 -6.65941763]
[132.19461060 8.24230766]
[123.36596680 20.36893654]
[109.71113586 26.57745743]
[94.76921844 25.25873184]
[82.41175079 16.75323296]
[86.84674072 31.08260536]
[91.28172302 45.41197586]
[95.71670532 59.74134827]
[100.15168762 74.07072449]
[104.58666992 88.40009308]
[108.56201935 73.93646240]
[117.41531372 61.82782364]
[129.99206543 53.65316010]
[144.65226746 50.47846222]
[159.48417664 52.71771622]
[172.55371094 60.07891846]
[182.15657043 71.60215759]
[187.04054260 85.78479004]
[186.56872559 100.77736664]
[180.80265808 114.62483215]
[170.49423218 125.52146912]
[156.98771667 132.04632568]
[142.04434204 133.34855652]
[127.61277771 129.25833130]
[115.57490540 120.30905151]
[107.50000000 107.66647339]
[115.23729706 121.46664429]
[107.50000000 134.19392395]
[107.50000000 149.19392395]
[107.50000000 164.19392395]
[107.50000000 179.19392395]
[107.50000000 194.19392395]
[107.50000000 209.19392395]
[107.50000000 224.19392395]
[107.50000000 239.19392395]
[107.50000000 254.19392395]
[107.50000000 269.19390869]
[122.20955658 272.42547607]
[135.88034058 278.74401855]
[147.87292480 287.85400391]
[157.62640381 299.32934570]
[164.68460083 312.63333130]
[168.71737671 327.14370728]
[169.53611755 342.18179321]
[167.10252380 357.04421997]
[161.53042603 371.03585815]
[153.08044434 383.50225830]
[142.14779663 393.86041260]
[129.24380493 401.62579346]
[114.97203827 406.43524170]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[25 132]
[26 116]
[27 115]
[28 114]
[29 113]
[30 112]
[31 111]
[32 100]
[33 99]
[34 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
