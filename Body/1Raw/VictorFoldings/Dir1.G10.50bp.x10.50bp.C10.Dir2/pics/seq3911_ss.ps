%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUUAUCACGGGGGGGGGGAACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAAxxxxxxxxxxUAAGAUUAAAAAUGCCCUAGCCCACUUCUUACCACAAGGCACACCUACACCCCCCCCCCCCCCUUAUCCC\
) } def
/len { sequence length } bind def

/coor [
[88.43737030 367.14077759]
[75.21717072 359.86828613]
[64.33036804 349.42129517]
[56.51923752 336.51205444]
[52.31635666 322.02072144]
[52.00828552 306.93539429]
[55.61602402 292.28457642]
[62.89359665 279.06716919]
[73.34480286 268.18441772]
[86.25706482 260.37826538]
[100.75000763 256.18096924]
[100.43795013 241.18421936]
[100.12589264 226.18746948]
[99.81383514 211.19071960]
[99.50177765 196.19396973]
[99.18972015 181.19720459]
[98.87767029 166.20045471]
[98.56561279 151.20370483]
[98.25355530 136.20695496]
[97.94149780 121.21019745]
[89.85185242 133.84181213]
[74.86917877 134.56268311]
[65.60420227 122.76605988]
[69.85511780 108.38101196]
[84.04407501 103.51523590]
[69.54847717 99.65807343]
[55.05288315 95.80091858]
[40.55728531 91.94375610]
[25.62179375 100.99188232]
[9.08034134 96.55741882]
[0.99831915 81.84216309]
[-13.57438374 78.28739929]
[-17.83281517 79.71121216]
[-21.90335274 79.66902924]
[-25.33747864 78.40860748]
[-27.81746101 76.30060577]
[-29.18565178 73.78359222]
[-43.41243362 69.02977753]
[-57.63920975 64.27596283]
[-71.86598969 59.52214432]
[-83.31165314 69.76383972]
[-98.34801483 72.89486694]
[-112.93037415 68.07299805]
[-123.13614655 56.59528732]
[-126.22002411 41.54918671]
[-121.35247040 26.98201370]
[-109.84282684 16.81227112]
[-94.78713226 13.77556705]
[-80.23529053 18.68875885]
[-70.10166931 30.23022461]
[-67.11217499 45.29536438]
[-52.88539505 50.04917908]
[-38.65861511 54.80299377]
[-24.43183708 59.55681229]
[-10.01962185 63.71469879]
[4.55308104 67.26946259]
[14.55397797 59.08539963]
[27.63915443 58.16210556]
[39.02374268 65.06276703]
[44.41444397 77.44815826]
[58.91004181 81.30532074]
[73.40563965 85.16248322]
[87.90123749 89.01963806]
[102.17669678 84.41407776]
[111.68505096 72.81273651]
[121.19341278 61.21139145]
[110.78496552 50.38547134]
[101.73001862 38.40447235]
[94.15570068 25.43658829]
[88.16832733 11.66386986]
[83.85196686 -2.72033572]
[81.26720428 -17.51409721]
[80.45033264 -32.50973129]
[81.41281128 -47.49672699]
[84.14112854 -62.26468658]
[88.59700012 -76.60629272]
[94.71784973 -90.32020569]
[102.41776276 -103.21391296]
[111.58864594 -115.10639954]
[122.10174561 -125.83072662]
[133.80947876 -135.23632812]
[146.54750061 -143.19116211]
[160.13696289 -149.58355713]
[174.38710022 -154.32379150]
[189.09788513 -157.34529114]
[204.06275940 -158.60565186]
[219.07168579 -158.08718872]
[233.91392517 -155.79718018]
[248.38113403 -151.76776123]
[262.27020264 -146.05551147]
[275.38616943 -138.74060059]
[287.54489136 -129.92573547]
[298.57568359 -119.73467255]
[308.32369995 -108.31045532]
[316.65209961 -95.81347656]
[323.44390869 -82.41917419]
[328.60385132 -68.31558228]
[332.05944824 -53.70068359]
[333.76220703 -38.77965927]
[333.68823242 -23.76197243]
[331.83853149 -8.85845089]
[328.23907471 5.72168446]
[322.94042969 19.77375221]
[316.01693726 33.10048294]
[307.56582642 45.51478958]
[297.70571899 56.84239578]
[286.57504272 66.92427826]
[274.33004761 75.61890411]
[261.14263916 82.80420685]
[247.19795227 88.37933350]
[232.69174194 92.26599884]
[217.82765198 94.40966034]
[202.81434631 94.78020477]
[187.86260986 93.37243652]
[173.18232727 90.20612335]
[158.97958374 85.32571411]
[145.45376587 78.79971313]
[132.79475403 70.71974945]
[123.28639221 82.32109070]
[113.77803802 93.92243195]
[124.40200043 83.33322144]
[138.92218018 79.56968689]
[153.35229492 83.66503906]
[163.73075867 94.49497223]
[167.20834351 109.08628845]
[162.83030701 123.43315887]
[151.79859924 133.59687805]
[137.14178467 136.78715515]
[122.88367462 132.12812805]
[112.93825531 120.89813995]
[113.25030518 135.89489746]
[113.56236267 150.89164734]
[113.87442017 165.88839722]
[114.18647766 180.88516235]
[114.49853516 195.88191223]
[114.81059265 210.87866211]
[115.12264252 225.87541199]
[115.43470001 240.87217712]
[115.74675751 255.86892700]
[130.40174866 259.45968628]
[143.62756348 266.72195435]
[154.52243042 277.16055298]
[162.34352112 290.06375122]
[166.55760193 304.55181885]
[166.87731934 319.63693237]
[163.28088379 334.29052734]
[156.01351929 347.51351929]
[145.57072449 358.40435791]
[132.66448975 366.22048950]
[118.17480469 370.42895508]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[25 63]
[26 62]
[27 61]
[28 60]
[31 56]
[32 55]
[37 54]
[38 53]
[39 52]
[40 51]
[64 120]
[65 119]
[66 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
