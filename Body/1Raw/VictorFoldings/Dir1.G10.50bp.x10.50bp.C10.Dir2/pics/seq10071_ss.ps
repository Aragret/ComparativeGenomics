%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUCUACACGGGGGGGGGGCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACAxxxxxxxxxxCUAUACAACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGAUUCCCCCCCCCCUAUCCUACAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 357.54431152]
[71.19830322 351.52828979]
[59.48964310 341.99887085]
[50.78712082 329.66320801]
[45.73651886 315.43667603]
[44.71262741 300.37500000]
[47.79142761 285.59585571]
[54.74444962 272.19592285]
[65.05573273 261.16958618]
[77.96011353 253.33506775]
[92.50000000 249.27375793]
[92.50000000 234.27375793]
[92.50000000 219.27375793]
[92.50000000 204.27375793]
[92.50000000 189.27375793]
[92.50000000 174.27375793]
[92.50000000 159.27375793]
[92.50000000 144.27375793]
[92.50000000 129.27375793]
[92.50000000 114.27375793]
[88.79383850 99.73882294]
[81.61132812 86.57024384]
[64.14075470 84.02117920]
[52.28324127 71.41412354]
[37.46548462 73.74522400]
[22.64772606 76.07633209]
[7.82996702 78.40743256]
[-6.98779106 80.73854065]
[-21.80554962 83.06964111]
[-27.93372345 97.22764587]
[-40.75618744 105.80599213]
[-56.18133545 106.06735992]
[-69.28706360 97.92834473]
[-75.89138031 83.98609161]
[-73.88686371 68.68950653]
[-63.91316223 56.91968155]
[-49.15283966 52.43232346]
[-34.31586075 56.65933228]
[-24.13665199 68.25188446]
[-9.31889439 65.92078400]
[5.49886322 63.58967590]
[20.31662178 61.25857162]
[35.13438034 58.92746735]
[49.95213699 56.59636688]
[55.26833344 44.05862427]
[66.18906403 35.92262268]
[64.94219208 20.97453690]
[63.69531250 6.02644968]
[62.44844055 -8.92163754]
[61.20156479 -23.86972427]
[54.26125717 -10.57189941]
[44.90355682 1.15129960]
[33.47462082 10.86620712]
[20.39723206 18.21344566]
[6.15515327 22.92122841]
[-8.72476959 24.81539917]
[-23.69209671 23.82589340]
[-38.19315338 19.98931122]
[-51.69151306 13.44757748]
[-63.68784332 4.44268608]
[-73.73837280 -6.69225311]
[-81.47130585 -19.54533386]
[-86.60059357 -33.64109421]
[-88.93648529 -48.45809555]
[-88.39257812 -63.44823074]
[-84.98898315 -78.05698395]
[-78.85160828 -91.74393463]
[-70.20749664 -104.00277710]
[-59.37640762 -114.38003540]
[-46.75900650 -122.49182892]
[-32.82203674 -128.03808594]
[-18.08106232 -130.81362915]
[-3.08138108 -130.71578979]
[11.62213421 -127.74819946]
[25.48557091 -122.02062225]
[37.99608612 -113.74493408]
[48.69089127 -103.22727203]
[57.17436218 -90.85671234]
[63.13267517 -77.09086609]
[66.34542084 -62.43896484]
[66.69422913 -47.44957733]
[67.16785431 -63.26369095]
[80.35424042 -70.18961334]
[88.07833099 -83.04801178]
[95.80241394 -95.90641785]
[103.52649689 -108.76481628]
[103.26964569 -125.16195679]
[117.47859192 -133.34963989]
[131.53637695 -124.90507507]
[130.98156738 -108.51531219]
[116.38490295 -101.04073334]
[108.66081238 -88.18233490]
[100.93672943 -75.32392883]
[93.21264648 -62.46552658]
[93.29149628 -47.57113266]
[79.55262756 -39.72549057]
[76.14965057 -25.11659813]
[77.39653015 -10.16851139]
[78.64340210 4.77957535]
[79.89027405 19.72766304]
[81.13715363 34.67575073]
[93.60110474 40.84848404]
[101.21383667 52.65672684]
[101.70074463 66.83862305]
[94.77991486 79.38773346]
[101.96241760 92.55631256]
[109.11517334 84.26789093]
[120.41333008 79.87449646]
[134.15007019 80.85593414]
[148.79357910 84.10675812]
[163.43707275 87.35758972]
[178.08058167 90.60841370]
[182.30847168 89.09632111]
[186.37899780 89.05381012]
[189.83860779 90.24251556]
[192.36190796 92.29846191]
[193.78216553 94.78647614]
[208.10476685 99.24329376]
[223.97393799 95.10790253]
[235.29566956 106.97172546]
[230.42312622 122.63028717]
[214.36877441 125.97539520]
[203.64794922 113.56588745]
[189.32534790 109.10907745]
[174.82975769 105.25191498]
[160.18624878 102.00109100]
[145.54275513 98.75025940]
[130.89924622 95.49943542]
[125.04943848 100.19301605]
[113.34981537 109.58017731]
[107.50000000 114.27375793]
[107.50000000 129.27375793]
[107.50000000 144.27375793]
[107.50000000 159.27375793]
[107.50000000 174.27375793]
[107.50000000 189.27375793]
[107.50000000 204.27375793]
[107.50000000 219.27375793]
[107.50000000 234.27375793]
[107.50000000 249.27375793]
[122.03988647 253.33506775]
[134.94427490 261.16958618]
[145.25555420 272.19592285]
[152.20857239 285.59585571]
[155.28736877 300.37500000]
[154.26348877 315.43667603]
[149.21287537 329.66320801]
[140.51036072 341.99887085]
[128.80169678 351.52828979]
[114.95575714 357.54431152]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 106]
[22 105]
[24 44]
[25 43]
[26 42]
[27 41]
[28 40]
[29 39]
[46 101]
[47 100]
[48 99]
[49 98]
[50 97]
[81 96]
[83 94]
[84 93]
[85 92]
[86 91]
[109 128]
[110 127]
[111 126]
[112 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
