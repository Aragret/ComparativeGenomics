%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCACUCACGGGGGGGGGGGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUGCACGCGAUxxxxxxxxxxAUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCACUACCCCCCCCCCAAACACUCAC\
) } def
/len { sequence length } bind def

/coor [
[36.44974518 483.08636475]
[21.57884598 480.57495117]
[7.80003643 474.44348145]
[-4.02053452 465.07730103]
[-13.13981628 453.06524658]
[-18.98456192 439.16238403]
[-21.18736649 424.24264526]
[-19.60976219 409.24392700]
[-14.35091400 395.10900879]
[-5.74140024 382.72650146]
[5.67757845 372.87469482]
[19.18821526 366.17294312]
[33.94121933 363.04251099]
[34.56519699 348.05548096]
[35.18917465 333.06848145]
[35.81315231 318.08145142]
[36.43712997 303.09445190]
[37.06110764 288.10742188]
[37.68508530 273.12042236]
[38.30905914 258.13339233]
[38.93303680 243.14637756]
[39.55701447 228.15936279]
[32.35584641 215.12124634]
[40.66051865 201.65487671]
[41.28449631 186.66786194]
[32.91994095 199.11914062]
[22.03804970 209.44311523]
[9.16416836 217.14137268]
[-5.08018541 221.84225464]
[-20.00733185 223.31884766]
[-34.89662933 221.49981689]
[-49.02926254 216.47302246]
[-61.72294235 208.48112488]
[-72.36486053 197.90995789]
[-80.44123840 185.26985168]
[-85.56218719 171.17106628]
[-87.48046875 156.29423523]
[-86.10347748 141.35757446]
[-81.49769592 127.08217621]
[-73.88546753 114.15724182]
[-63.63430405 103.20673370]
[-51.23909378 94.75932312]
[-37.29824829 89.22282410]
[-22.48479462 86.86451721]
[-7.51388550 87.79827118]
[6.89172220 91.97899628]
[20.03656578 99.20485687]
[31.28604507 109.12701416]
[40.09706879 121.26644897]
[46.04426193 135.03710938]
[48.84050751 149.77416992]
[48.35111237 164.76408386]
[56.60340118 152.23812866]
[64.85569000 139.71215820]
[73.10797882 127.18620300]
[81.36026764 114.66024017]
[73.06017303 96.21871948]
[82.03028870 75.11650085]
[73.77799988 62.59054184]
[58.88303757 55.72963333]
[57.64691925 39.37714005]
[71.34125519 30.35510445]
[85.87849426 37.94462585]
[86.30396271 54.33825302]
[94.55625153 66.86421204]
[109.52704620 67.79984283]
[119.27469635 56.39882278]
[129.02235413 44.99780273]
[138.77000427 33.59677887]
[148.51765442 22.19575882]
[138.53317261 10.96972752]
[130.17034912 -1.51133859]
[123.58498383 -15.01492310]
[118.89977264 -29.28946304]
[116.20197296 -44.06903076]
[115.54186249 -59.07829666]
[116.93173218 -74.03764343]
[120.34568787 -88.66838837]
[125.72013092 -102.69796753]
[132.95494080 -115.86502075]
[141.91532898 -127.92425537]
[152.43438721 -138.65101624]
[164.31613159 -147.84545898]
[177.33921814 -155.33630371]
[191.26104736 -160.98400879]
[205.82225037 -164.68334961]
[220.75155640 -166.36541748]
[235.77085876 -165.99888611]
[250.60035706 -163.59054565]
[264.96377563 -159.18530273]
[278.59350586 -152.86520386]
[291.23568726 -144.74800110]
[302.65478516 -134.98489380]
[312.63806152 -123.75778961]
[320.99951172 -111.27581787]
[327.58343506 -97.77152252]
[332.26708984 -83.49647522]
[334.96328735 -68.71661377]
[335.62176514 -53.70727539]
[334.23028564 -38.74808121]
[330.81475830 -24.11770630]
[325.43878174 -10.08870792]
[318.20254517 3.07756233]
[309.24084473 15.13582516]
[298.72064209 25.86144257]
[286.83789062 35.05460358]
[273.81399536 42.54404449]
[259.89157104 48.19024277]
[245.32995605 51.88801193]
[230.40046692 53.56846237]
[215.38119507 53.20029449]
[200.55197144 50.79035950]
[186.18904114 46.38356018]
[172.55996704 40.06198883]
[159.91867065 31.94341087]
[150.17102051 43.34443283]
[140.42337036 54.74545288]
[130.67572021 66.14647675]
[120.92806244 77.54749298]
[128.59042358 95.45923615]
[123.80139923 113.17367554]
[109.96726990 123.42682648]
[93.88623047 122.91252899]
[85.63394165 135.43849182]
[77.38165283 147.96444702]
[69.12936401 160.49041748]
[60.87707520 173.01637268]
[56.27151108 187.29183960]
[55.64753342 202.27885437]
[62.80406952 216.38894653]
[54.54403305 228.78334045]
[53.92005539 243.77035522]
[53.29607773 258.75735474]
[52.67210007 273.74438477]
[52.04812241 288.73141479]
[51.42414474 303.71841431]
[50.80016708 318.70544434]
[50.17618942 333.69244385]
[49.55221176 348.67947388]
[48.92823410 363.66647339]
[63.36996460 368.01242065]
[76.27675629 375.81405640]
[86.83728790 386.58096313]
[94.38771057 399.63629150]
[98.45339203 414.15942383]
[98.77877045 429.23739624]
[95.34338379 443.92236328]
[88.36318970 457.29129028]
[78.27696991 468.50372314]
[65.71874237 476.85488892]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[24 129]
[25 128]
[52 127]
[53 126]
[54 125]
[55 124]
[56 123]
[58 65]
[59 64]
[66 119]
[67 118]
[68 117]
[69 116]
[70 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
