%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAACCCCCGGGGGGGGGGCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAxxxxxxxxxxAUCAUGACCCUUGGCCAUAAUAUGAUUUAUCUCCACACUAGCAGAGACCACCCCCCCCCCACCGAACCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.79243469 362.41543579]
[70.77048492 356.86242676]
[58.57052994 347.99609375]
[48.95945740 336.37380981]
[42.54143524 322.72610474]
[39.71989822 307.91091919]
[40.67221451 292.85952759]
[45.33851624 278.51809692]
[53.42548370 265.78814697]
[64.42475891 255.46987915]
[77.64492035 248.21189880]
[92.25492859 244.47047424]
[92.25492859 229.47047424]
[92.25492859 214.47047424]
[92.25492859 199.47047424]
[92.25492859 184.47047424]
[92.25492859 169.47047424]
[92.25492859 154.47047424]
[92.25492859 139.47047424]
[92.25492859 124.47046661]
[92.25492859 109.47046661]
[83.77552795 121.84381866]
[71.05536652 129.79348755]
[56.21745300 131.99267578]
[41.73827744 128.07432556]
[30.03444672 118.69240570]
[23.05935287 105.41279602]
[21.97715569 90.45188141]
[26.96847534 76.30667877]
[37.20024872 65.33805084]
[50.96477509 59.37668991]
[65.96472168 59.41755295]
[79.69655609 65.45381927]
[89.86842346 76.47802734]
[94.78221893 90.64726257]
[98.73883057 76.17848969]
[102.69544220 61.70972443]
[91.75319672 71.96971130]
[78.21281433 78.42401123]
[63.35211182 80.46352386]
[48.57352448 77.89579010]
[35.27172089 70.96311188]
[24.70200920 60.31974411]
[17.86187172 46.97011948]
[15.39681816 32.17405701]
[17.53948212 17.32787704]
[24.08765411 3.83264041]
[34.42337799 -7.03809261]
[47.57125473 -14.25843525]
[62.29050064 -17.14699364]
[77.19203949 -15.43117237]
[90.86959839 -9.27289391]
[102.03240204 0.74667645]
[109.62700653 13.68197727]
[112.93669128 28.31228828]
[111.64965057 43.25479889]
[120.56579590 31.19236755]
[129.48194885 19.12993622]
[138.39810181 7.06750441]
[147.31425476 -4.99492693]
[156.23040771 -17.05735779]
[165.14654541 -29.11978912]
[154.05442810 -39.23753357]
[144.06141663 -50.44216919]
[135.27346802 -62.61492157]
[127.78372955 -75.62675476]
[121.67159271 -89.33973694]
[117.00186157 -103.60849762]
[113.82402802 -118.28179169]
[112.17178345 -133.20405579]
[112.06263733 -148.21711731]
[113.49775696 -163.16183472]
[116.46192169 -177.87977600]
[120.92370605 -192.21492004]
[126.83582306 -206.01531982]
[134.13558960 -219.13467407]
[142.74563599 -231.43391418]
[152.57467651 -242.78265381]
[163.51853943 -253.06059265]
[175.46119690 -262.15878296]
[188.27604675 -269.98077393]
[201.82725525 -276.44366455]
[215.97116089 -281.47891235]
[230.55784607 -285.03317261]
[245.43267822 -287.06872559]
[260.43795776 -287.56405640]
[275.41464233 -286.51385498]
[290.20397949 -283.92932129]
[304.64913940 -279.83776855]
[318.59707642 -274.28262329]
[331.89987183 -267.32278442]
[344.41653442 -259.03198242]
[356.01437378 -249.49813843]
[366.57043457 -238.82231140]
[375.97283936 -227.11766052]
[384.12191772 -214.50827026]
[390.93127441 -201.12780762]
[396.32870483 -187.11810303]
[400.25701904 -172.62768555]
[402.67459106 -157.81015015]
[403.55575562 -142.82257080]
[402.89120483 -127.82382202]
[400.68795776 -112.97290039]
[396.96936035 -98.42724609]
[391.77487183 -84.34103394]
[385.15954590 -70.86359406]
[377.19348145 -58.13779449]
[367.96115112 -46.29853439]
[357.56042480 -35.47132111]
[346.10153198 -25.77092171]
[333.70593262 -17.30017090]
[320.50506592 -10.14886093]
[306.63885498 -4.39280224]
[292.25430298 -0.09301000]
[277.50384521 2.70493460]
[262.54391479 3.97137189]
[247.53302002 3.69287682]
[232.63034058 1.87240195]
[217.99383545 -1.47075498]
[203.77865601 -6.30115461]
[190.13549805 -12.56759167]
[177.20898438 -20.20363808]
[168.29283142 -8.14120770]
[159.37667847 3.92122412]
[150.46052551 15.98365593]
[141.54438782 28.04608727]
[132.62823486 40.10851669]
[123.71208191 52.17094803]
[117.16420746 65.66633606]
[113.20759583 80.13510132]
[109.25098419 94.60386658]
[107.25492859 109.47046661]
[107.25492859 124.47046661]
[107.25492859 139.47047424]
[107.25492859 154.47047424]
[107.25492859 169.47047424]
[107.25492859 184.47047424]
[107.25492859 199.47047424]
[107.25492859 214.47047424]
[107.25492859 229.47047424]
[107.25492859 244.47047424]
[121.86494446 248.21189880]
[135.08509827 255.46987915]
[146.08438110 265.78814697]
[154.17134094 278.51809692]
[158.83764648 292.85952759]
[159.78996277 307.91091919]
[156.96842957 322.72610474]
[150.55039978 336.37380981]
[140.93933105 347.99609375]
[128.73937988 356.86242676]
[114.71743011 362.41543579]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[35 131]
[36 130]
[37 129]
[56 128]
[57 127]
[58 126]
[59 125]
[60 124]
[61 123]
[62 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
