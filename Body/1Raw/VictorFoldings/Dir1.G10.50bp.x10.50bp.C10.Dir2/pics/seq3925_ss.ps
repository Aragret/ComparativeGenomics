%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACAACACAAGGGGGGGGGGGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAAUAUGAUUxxxxxxxxxxAAUCAUUUUCCUUAUCUGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACCCCCCCCCCCUCACAACAAAA\
) } def
/len { sequence length } bind def

/coor [
[87.68148804 394.76339722]
[73.65953827 389.21038818]
[61.45958328 380.34405518]
[51.84851074 368.72174072]
[45.43048477 355.07403564]
[42.60895157 340.25885010]
[43.56126404 325.20745850]
[48.22756958 310.86605835]
[56.31453705 298.13607788]
[67.31381226 287.81781006]
[80.53397369 280.55984497]
[95.14398193 276.81842041]
[95.14398193 261.81842041]
[95.14398193 246.81840515]
[95.14398193 231.81840515]
[95.14398193 216.81840515]
[95.14398193 201.81840515]
[95.14398193 186.81840515]
[95.14398193 171.81840515]
[95.14398193 156.81840515]
[95.14398193 141.81840515]
[95.14398193 126.81840515]
[77.82299805 106.35136414]
[87.30975342 86.01744080]
[82.46993256 71.81968689]
[77.63011932 57.62193680]
[59.81653976 52.81719589]
[49.07318497 36.81622314]
[51.56991196 16.87586975]
[67.15032959 2.91659355]
[53.80490112 -5.58105946]
[54.60036850 -20.45440865]
[47.50396347 -33.66959000]
[40.40755844 -46.88477325]
[28.17240715 -44.66892242]
[15.82135773 -45.90010452]
[4.30513525 -50.47143173]
[-5.49313307 -58.01938248]
[-12.82563400 -67.95266724]
[-17.13693619 -79.49855042]
[-18.10605240 -91.76296234]
[-15.67031002 -103.79969788]
[-28.81194115 -111.03140259]
[-41.95357513 -118.26309967]
[-55.09520340 -125.49480438]
[-68.19419861 -117.47534180]
[-83.54840851 -117.09581757]
[-97.02761078 -124.45833588]
[-105.00597382 -137.58239746]
[-105.33736420 -152.93771362]
[-97.93264008 -166.39378357]
[-84.78362274 -174.33097839]
[-69.42734528 -174.61422729]
[-55.99456024 -167.16735840]
[-48.09862518 -153.99353027]
[-47.86350250 -138.63644409]
[-34.72187042 -131.40473938]
[-21.58023834 -124.17303467]
[-8.43860817 -116.94132996]
[-2.88888526 -122.72891235]
[3.61518025 -127.41854858]
[10.85951042 -130.85588074]
[18.60565948 -132.92776489]
[18.60565948 -147.92776489]
[10.86836052 -161.72793579]
[18.60565948 -174.45521545]
[18.60565948 -189.45521545]
[18.60565948 -204.45521545]
[18.60565948 -219.45521545]
[18.60565948 -234.45521545]
[18.60565948 -249.45521545]
[5.26453209 -257.06506348]
[-2.47043705 -270.33404541]
[-2.51857972 -285.69287109]
[5.13305426 -299.01007080]
[18.42621422 -306.70339966]
[33.78510666 -306.70339966]
[47.07826614 -299.01007080]
[54.72990036 -285.69287109]
[54.68175888 -270.33404541]
[46.94678879 -257.06506348]
[33.60565948 -249.45521545]
[33.60565948 -234.45521545]
[33.60565948 -219.45521545]
[33.60565948 -204.45521545]
[33.60565948 -189.45521545]
[33.60565948 -174.45521545]
[41.34296036 -161.72793579]
[33.60565948 -147.92776489]
[33.60565948 -132.92776489]
[52.31018448 -125.11935425]
[65.61029816 -109.74774170]
[70.67765808 -90.00292969]
[66.39955139 -70.01303864]
[53.62274170 -53.98117828]
[60.71914673 -40.76599503]
[67.81555176 -27.55081177]
[80.65339661 -19.99839592]
[80.36550903 -4.17980957]
[94.65964508 0.36748031]
[108.08708954 -6.31859493]
[116.68942261 -20.28039742]
[133.07189941 -19.54105377]
[140.38162231 -4.86113930]
[131.09898376 8.65790939]
[114.77317047 7.10885429]
[101.34571838 13.79492950]
[105.25918579 24.92796516]
[104.56554413 36.24648285]
[99.72826385 45.99074173]
[91.82787323 52.78211975]
[96.66768646 66.97987366]
[101.50750732 81.17762756]
[117.99725342 85.56885529]
[126.99111938 103.77986908]
[141.23780823 108.47367096]
[151.79364014 97.44928741]
[166.09043884 92.10470581]
[181.28953552 93.50109863]
[194.37316895 101.36121368]
[202.74356079 114.12441254]
[204.73875427 129.25656128]
[199.96263123 143.75315857]
[189.36346436 154.73588562]
[175.04573059 160.02412415]
[159.85224915 158.56790161]
[146.79966736 150.65632629]
[138.47959900 137.86026001]
[136.54400635 122.72036743]
[122.29731750 118.02656555]
[110.14398193 126.81840515]
[110.14398193 141.81840515]
[110.14398193 156.81840515]
[110.14398193 171.81840515]
[110.14398193 186.81840515]
[110.14398193 201.81840515]
[110.14398193 216.81840515]
[110.14398193 231.81840515]
[110.14398193 246.81840515]
[110.14398193 261.81842041]
[110.14398193 276.81842041]
[124.75399780 280.55984497]
[137.97415161 287.81781006]
[148.97343445 298.13607788]
[157.06039429 310.86605835]
[161.72669983 325.20745850]
[162.67901611 340.25885010]
[159.85748291 355.07403564]
[153.43945312 368.72174072]
[143.82838440 380.34405518]
[131.62843323 389.21038818]
[117.60648346 394.76339722]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[24 113]
[25 112]
[26 111]
[30 99]
[32 97]
[33 96]
[34 95]
[42 59]
[43 58]
[44 57]
[45 56]
[63 90]
[64 89]
[66 87]
[67 86]
[68 85]
[69 84]
[70 83]
[71 82]
[100 107]
[101 106]
[115 130]
[116 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
