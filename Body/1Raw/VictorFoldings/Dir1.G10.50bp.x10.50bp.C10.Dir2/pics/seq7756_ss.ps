%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCAACUCCGGGGGGGGGGUACAUACUUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGAxxxxxxxxxxCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCACACAUCAACCCCCCCCCCCUGCAACUCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 449.30245972]
[71.19830322 443.28643799]
[59.48964310 433.75701904]
[50.78712082 421.42135620]
[45.73651886 407.19485474]
[44.71262741 392.13314819]
[47.79142761 377.35400391]
[54.74444962 363.95407104]
[65.05573273 352.92773438]
[77.96011353 345.09323120]
[92.50000000 341.03192139]
[92.50000000 326.03192139]
[92.50000000 311.03192139]
[92.50000000 296.03192139]
[92.50000000 281.03192139]
[92.50000000 266.03192139]
[92.50000000 251.03192139]
[92.50000000 236.03192139]
[92.50000000 221.03192139]
[92.50000000 206.03192139]
[92.50000000 191.03192139]
[81.81912994 180.71423340]
[81.60544586 165.50210571]
[92.50000000 154.36897278]
[92.50000000 139.36897278]
[77.94034576 133.45950317]
[66.77178192 122.40651703]
[60.71117020 107.90912628]
[45.71198273 108.06516266]
[30.71279335 108.22119904]
[25.07453346 122.33780670]
[14.45969296 133.21868896]
[0.48695582 139.20458984]
[-14.71293640 139.38270569]
[-28.82210922 133.72589111]
[-39.68901825 123.09674072]
[-45.65653992 109.11614227]
[-45.81466675 93.91603088]
[-40.13928604 79.81430817]
[-29.49585533 68.96139526]
[-15.50741768 63.01227188]
[-0.30710986 62.87413788]
[13.78713226 68.56806183]
[24.62603951 79.22576141]
[30.55675697 93.22201538]
[45.55594635 93.06597900]
[60.55513382 92.90994263]
[61.99312973 87.28605652]
[64.22847748 81.92890167]
[67.21427917 76.95085907]
[56.77446747 66.18004608]
[41.61392212 61.65584564]
[38.31169510 47.13191605]
[27.87188530 36.36110687]
[11.91777706 34.67409134]
[3.41133595 21.07188606]
[8.87797451 5.98893547]
[24.12415695 0.99558872]
[37.45431519 9.92231464]
[38.64269257 25.92129326]
[49.08250427 36.69210052]
[63.49632645 40.44590378]
[67.54527283 55.74023819]
[77.98508453 66.51104736]
[88.91025543 61.48787308]
[100.83375549 59.93166733]
[112.68218994 61.98252487]
[123.38894653 67.45581818]
[134.26777649 57.12861633]
[145.14659119 46.80141068]
[136.78414917 33.34180450]
[131.37397766 18.45392036]
[129.14579773 2.77648926]
[130.19290161 -13.01837635]
[134.46815491 -28.25399208]
[141.78622437 -42.27809906]
[151.83149719 -54.49078369]
[164.17182922 -64.37014008]
[178.27697754 -71.49456787]
[193.54154968 -75.56079102]
[209.31082153 -76.39672089]
[224.90896606 -73.96878052]
[239.66792297 -68.38322449]
[252.95603943 -59.88150024]
[263.39584351 -70.65230560]
[273.83566284 -81.42311859]
[284.27548218 -92.19392395]
[294.60269165 -103.07275391]
[304.81616211 -114.05841827]
[315.02963257 -125.04408264]
[314.20394897 -140.82678223]
[324.84210205 -152.51461792]
[340.63265991 -153.17340088]
[352.20736694 -142.41227722]
[352.69915771 -126.61564636]
[341.81625366 -115.15535736]
[326.01531982 -114.83059692]
[315.80181885 -103.84493256]
[305.58834839 -92.85926819]
[303.32269287 -85.77320099]
[295.04629517 -81.75411224]
[284.60647583 -70.98330688]
[274.16665649 -60.21249390]
[263.72686768 -49.44168854]
[271.87158203 -37.80555344]
[277.71725464 -24.85617256]
[281.05932617 -11.04274750]
[281.78012085 3.15522742]
[279.85305786 17.24460030]
[275.34347534 30.73570061]
[268.40655518 43.15934753]
[259.28182983 54.08317184]
[248.28512573 63.12667084]
[235.79743958 69.97444153]
[222.25180054 74.38720703]
[208.11830139 76.21014404]
[193.88772583 75.37835693]
[180.05451965 71.91915131]
[167.09963989 65.95114899]
[155.47380066 57.68023682]
[144.59497070 68.00743866]
[133.71615601 78.33464813]
[139.93997192 96.68861389]
[136.82377625 115.81696320]
[125.09628296 131.24649048]
[107.50000000 139.36897278]
[107.50000000 154.36897278]
[118.39455414 165.50210571]
[118.18087006 180.71423340]
[107.50000000 191.03192139]
[107.50000000 206.03192139]
[107.50000000 221.03192139]
[107.50000000 236.03192139]
[107.50000000 251.03192139]
[107.50000000 266.03192139]
[107.50000000 281.03192139]
[107.50000000 296.03192139]
[107.50000000 311.03192139]
[107.50000000 326.03192139]
[107.50000000 341.03192139]
[122.03988647 345.09323120]
[134.94427490 352.92773438]
[145.25555420 363.95407104]
[152.20857239 377.35400391]
[155.28736877 392.13314819]
[154.26348877 407.19485474]
[149.21287537 421.42135620]
[140.51036072 433.75701904]
[128.80169678 443.28643799]
[114.95575714 449.30245972]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 127]
[25 126]
[28 47]
[29 46]
[30 45]
[50 64]
[51 63]
[53 61]
[54 60]
[68 122]
[69 121]
[70 120]
[84 104]
[85 103]
[86 102]
[87 101]
[88 99]
[89 98]
[90 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
