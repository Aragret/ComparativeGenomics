%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACAACAUAUGGGGGGGGGGGACGCACUCUCCCCUGAACUCUACACAACAUAUUUUGUCACCAAGACCCUxxxxxxxxxxAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACAAUCCCCCCCCCCGAACAAGAUAU\
) } def
/len { sequence length } bind def

/coor [
[95.11943817 405.70724487]
[80.55957794 401.79907227]
[67.35843658 394.51940918]
[56.28350449 384.29153442]
[47.97866440 371.71008301]
[42.92675400 357.50650024]
[41.42147827 342.50659180]
[43.55035400 327.58239746]
[49.18961334 313.60162354]
[58.01139450 301.37707520]
[69.50281525 291.61947632]
[82.99577332 284.89611816]
[97.70580292 281.59790039]
[98.01378632 266.60107422]
[98.32176208 251.60421753]
[98.62973785 236.60739136]
[98.93771362 221.61054993]
[99.24569702 206.61370850]
[99.55367279 191.61686707]
[99.86164856 176.62004089]
[100.16962433 161.62319946]
[100.47760773 146.62635803]
[100.78558350 131.62951660]
[75.45063019 112.02420807]
[82.15910339 85.43281555]
[74.26262665 72.67955780]
[66.36614227 59.92630005]
[58.46965790 47.17304611]
[45.05974579 53.91632843]
[31.10633278 59.44804382]
[16.71862411 63.72489929]
[2.00922656 66.71341705]
[-12.90673733 68.39020538]
[-27.91252899 68.74215698]
[-42.89070129 67.76649475]
[-57.72403336 65.47087097]
[-72.29643250 61.87324524]
[-86.49383545 57.00177383]
[-100.20514679 50.89458847]
[-113.32303619 43.59948349]
[-125.74484253 35.17355347]
[-137.37335205 25.68274879]
[-148.11755371 15.20134354]
[-157.89334106 3.81137204]
[-166.62423706 -8.39802074]
[-174.24186707 -21.33127975]
[-180.68664551 -34.88718033]
[-185.90812683 -48.95962906]
[-189.86543274 -63.43848801]
[-192.52758789 -78.21044159]
[-193.87377930 -93.15986633]
[-193.89346313 -108.16976929]
[-192.58647156 -123.12268066]
[-189.96304321 -137.90155029]
[-186.04371643 -152.39074707]
[-180.85914612 -166.47683716]
[-174.44993591 -180.04957581]
[-166.86622620 -193.00276184]
[-158.16738892 -205.23501587]
[-148.42147827 -216.65057373]
[-137.70480347 -227.16011047]
[-126.10121918 -236.68136597]
[-113.70153809 -245.13983154]
[-100.60282135 -252.46931458]
[-86.90756989 -258.61242676]
[-72.72298431 -263.52108765]
[-58.16007233 -267.15692139]
[-43.33280945 -269.49142456]
[-28.35724449 -270.50634766]
[-13.35058212 -270.19375610]
[1.56972742 -268.55606079]
[16.28690910 -265.60610962]
[30.68578148 -261.36700439]
[44.65364838 -255.87188721]
[58.08119583 -249.16378784]
[70.86332703 -241.29519653]
[82.90000153 -232.32769775]
[94.09702301 -222.33148193]
[104.36675262 -211.38478088]
[113.62881470 -199.57325745]
[121.81071472 -186.98937988]
[128.84843445 -173.73161316]
[134.68685913 -159.90373230]
[139.28033447 -145.61396790]
[142.59288025 -130.97413635]
[144.59858704 -116.09882355]
[145.28175354 -101.10446167]
[144.63702393 -86.10839844]
[142.66944885 -71.22799683]
[139.39443970 -56.57972336]
[134.83761597 -42.27822113]
[129.03463745 -28.43542099]
[122.03093719 -15.15966320]
[113.88131714 -2.55485034]
[104.64956665 9.28036594]
[94.40792847 20.25335693]
[83.23656464 30.27824211]
[71.22291565 39.27656174]
[79.11940002 52.02981949]
[87.01587677 64.78307343]
[94.91236115 77.53633118]
[103.52772522 75.49873352]
[112.89509583 76.87736511]
[121.63211823 81.91409302]
[128.29756165 90.28759766]
[131.61978149 101.11026764]
[146.61900330 100.95626831]
[161.61820984 100.80226898]
[168.05241394 86.96161652]
[179.86010742 77.28995514]
[194.69686890 73.70761108]
[209.61685181 76.92584229]
[221.65766907 86.30568695]
[228.42861938 99.98476410]
[228.58531189 115.24707794]
[222.09664917 129.06228638]
[210.25096130 138.68737793]
[195.40020752 142.21127319]
[180.49301147 138.93429565]
[168.48922729 129.50711060]
[161.77220154 115.80148315]
[146.77299500 115.95547485]
[131.77378845 116.10947418]
[146.75053406 116.94418335]
[158.08258057 126.77194214]
[161.02763367 141.47999573]
[154.35324097 154.91325378]
[140.85252380 161.45011902]
[126.17531586 158.35502625]
[116.46379089 146.92321777]
[115.78241730 131.93750000]
[115.47444153 146.93434143]
[115.16646576 161.93116760]
[114.85848999 176.92800903]
[114.55051422 191.92485046]
[114.24253082 206.92169189]
[113.93455505 221.91851807]
[113.62657928 236.91535950]
[113.31860352 251.91220093]
[113.01062012 266.90902710]
[112.70264435 281.90588379]
[127.26486969 285.80523682]
[140.47042847 293.07687378]
[151.55155945 303.29803467]
[159.86401367 315.87445068]
[164.92454529 330.07498169]
[166.43891907 345.07397461]
[164.31907654 359.99945068]
[158.68830872 373.98364258]
[149.87393188 386.21353149]
[138.38842773 395.97808838]
[124.89955139 402.70962524]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[25 101]
[26 100]
[27 99]
[28 98]
[106 123]
[107 122]
[108 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
