%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAACCUAGCGGGGGGGGGGCCCAAACCCACUCCACCUUACUACCAGACAACCUUAGCCAAACCAUUUACxxxxxxxxxxAGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCCUCCCCCCCCCCUACACCUAGC\
) } def
/len { sequence length } bind def

/coor [
[75.80504608 399.79895020]
[61.95910645 393.78292847]
[50.25044632 384.25350952]
[41.54792404 371.91784668]
[36.49732208 357.69131470]
[35.47343063 342.62963867]
[38.55222702 327.85046387]
[45.50524902 314.45053101]
[55.81653214 303.42422485]
[68.72091675 295.58969116]
[83.26080322 291.52838135]
[83.26080322 276.52838135]
[83.26080322 261.52838135]
[83.26080322 246.52839661]
[83.26080322 231.52839661]
[83.26080322 216.52839661]
[83.26080322 201.52839661]
[83.26080322 186.52839661]
[83.26080322 171.52839661]
[83.26080322 156.52839661]
[77.85472107 95.90453339]
[65.59235382 87.26541901]
[53.32998657 78.62630463]
[43.44779968 89.92940521]
[32.43823624 100.13759613]
[20.42192268 109.13903809]
[7.53051615 116.83509827]
[-6.09473705 123.14146423]
[-20.30455208 127.98902893]
[-34.94323730 131.32467651]
[-49.85040283 133.11187744]
[-64.86272430 133.33103943]
[-79.81570435 131.97976685]
[-94.54552460 129.07284546]
[-108.89079285 124.64215088]
[-122.69432831 118.73621368]
[-135.80490112 111.41974640]
[-148.07885742 102.77291870]
[-159.38171387 92.89045715]
[-169.58964539 81.88064575]
[-178.59078979 69.86411285]
[-186.28654480 56.97251892]
[-192.59257507 43.34711456]
[-197.43978882 29.13718033]
[-200.77508545 14.49841404]
[-202.56192017 -0.40879649]
[-202.78071594 -15.42111969]
[-201.42907715 -30.37407112]
[-198.52180481 -45.10382080]
[-194.09075928 -59.44897842]
[-188.18449402 -73.25237274]
[-180.86770630 -86.36276245]
[-172.22058105 -98.63650513]
[-162.33784485 -109.93913269]
[-151.32777405 -120.14678955]
[-139.31103516 -129.14764404]
[-126.41925049 -136.84307861]
[-112.79368591 -143.14877319]
[-98.58364105 -147.99565125]
[-83.94479370 -151.33059692]
[-69.03753662 -153.11706543]
[-54.02521133 -153.33551025]
[-39.07228851 -151.98350525]
[-24.34261322 -149.07586670]
[-9.99756241 -144.64447021]
[3.80568767 -138.73786926]
[16.91590118 -131.42076111]
[29.18943596 -122.77333832]
[40.49181747 -112.89032745]
[50.69921112 -101.88002014]
[59.69977570 -89.86305237]
[67.39489746 -76.97108459]
[73.70026398 -63.34537125]
[78.54679108 -49.13520432]
[81.88138580 -34.49627304]
[83.66749573 -19.58897781]
[83.88555908 -4.57664394]
[82.53319550 10.37624264]
[79.62520599 25.10585022]
[75.19346619 39.45079041]
[69.28652191 53.25389862]
[61.96910095 66.36393738]
[74.23146820 75.00305176]
[86.49383545 83.64216614]
[78.68978119 70.83214569]
[82.88380432 56.43039703]
[96.34535217 49.81325912]
[110.31024170 55.28884125]
[115.68655396 69.29224396]
[108.97436523 82.70619965]
[120.47616577 73.07767487]
[131.97796631 63.44915009]
[143.47976685 53.82062149]
[144.62557983 38.05792236]
[156.63615417 27.78556442]
[172.38586426 29.09795570]
[182.53067017 41.21647644]
[181.05183411 56.95142746]
[168.82673645 66.96753693]
[153.10829163 65.32242584]
[141.60649109 74.95095062]
[130.10469055 84.57947540]
[118.60289001 94.20800781]
[120.30437469 101.51245117]
[134.91326904 98.10947418]
[147.75558472 90.35867310]
[159.09552002 100.17733002]
[153.26162720 113.99636841]
[138.31625366 112.71836853]
[123.70735168 116.12134552]
[125.40884399 123.42578888]
[139.98155212 126.98055267]
[154.55424500 130.53530884]
[164.62821960 119.01256561]
[178.90733337 113.50209808]
[194.11038208 115.27018738]
[206.74378967 123.91052246]
[213.90451050 137.43763733]
[213.94705200 152.74308777]
[206.86163330 166.30979919]
[194.27645874 175.02023315]
[179.08348083 176.87280273]
[164.77394104 171.44178772]
[154.63607788 159.97521973]
[150.99948120 145.10801697]
[136.42678833 141.55325317]
[121.85408020 137.99848938]
[115.95576477 142.63096619]
[118.08115387 157.47962952]
[104.15911865 151.89591980]
[98.26080322 156.52839661]
[98.26080322 171.52839661]
[98.26080322 186.52839661]
[98.26080322 201.52839661]
[98.26080322 216.52839661]
[98.26080322 231.52839661]
[98.26080322 246.52839661]
[98.26080322 261.52838135]
[98.26080322 276.52838135]
[98.26080322 291.52838135]
[112.80068970 295.58969116]
[125.70507050 303.42422485]
[136.01635742 314.45053101]
[142.96937561 327.85046387]
[146.04817200 342.62963867]
[145.02427673 357.69131470]
[139.97367859 371.91784668]
[131.27116394 384.25350952]
[119.56249237 393.78292847]
[105.71656036 399.79895020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 84]
[22 83]
[23 82]
[90 103]
[91 102]
[92 101]
[93 100]
[111 127]
[112 126]
[113 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
