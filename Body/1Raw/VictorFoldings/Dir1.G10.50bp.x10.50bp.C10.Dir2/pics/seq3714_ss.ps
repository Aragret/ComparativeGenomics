%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUUCUAGCGGGGGGGGGGCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAxxxxxxxxxxCACAAACCCCAUUACUAAACCCACACUCAACAGAAACAAAGCAUACAUCACCCCCCCCCCUUAUUCUCGC\
) } def
/len { sequence length } bind def

/coor [
[79.15538788 575.78588867]
[65.30944824 569.76983643]
[53.60078430 560.24041748]
[44.89826202 547.90478516]
[39.84766006 533.67822266]
[38.82376862 518.61657715]
[41.90256500 503.83740234]
[48.85558701 490.43746948]
[59.16687393 479.41113281]
[72.07125092 471.57662964]
[86.61113739 467.51531982]
[86.61113739 452.51531982]
[86.61113739 437.51531982]
[86.61113739 422.51531982]
[86.61113739 407.51531982]
[86.61113739 392.51531982]
[86.61113739 377.51531982]
[86.61113739 362.51531982]
[86.61113739 347.51531982]
[86.61113739 332.51531982]
[72.37439728 327.94625854]
[60.23051453 319.18862915]
[51.37612915 307.08987427]
[46.68854141 292.82742310]
[46.63877106 277.79412842]
[51.24427795 263.46218872]
[60.06601334 251.23904419]
[72.25023651 242.32908630]
[86.61113739 237.61508179]
[86.61113739 222.61508179]
[76.41558075 217.82643127]
[68.73097229 209.52033997]
[64.71162415 198.88745117]
[64.98263550 187.47192383]
[69.54301453 176.94717407]
[77.76013184 168.87057495]
[88.45724487 164.45306396]
[89.39287567 149.48228455]
[90.32850647 134.51148987]
[91.26413727 119.54069519]
[76.31524658 107.72327423]
[75.33619690 85.87970734]
[62.24304199 78.56060028]
[49.59906769 81.31446075]
[38.82693863 74.89727783]
[35.45265961 63.23874283]
[22.51460457 55.64883423]
[9.57654953 48.05892563]
[-6.81702757 48.48632812]
[-15.15207100 34.36333084]
[-6.85420227 20.21845818]
[9.54044151 20.60274506]
[17.16645813 35.12086868]
[30.10451317 42.71077728]
[43.04256821 50.30068588]
[60.54319763 49.44750977]
[69.56214905 65.46744537]
[82.65530396 72.78655243]
[96.83186340 67.88500214]
[95.00549316 52.16956711]
[107.04718018 43.40332413]
[112.82344818 29.56010437]
[118.59972382 15.71688747]
[124.37599182 1.87366939]
[111.49700928 -5.86904383]
[99.88268280 -15.40451241]
[89.78056335 -26.52948761]
[81.40598297 -39.00683975]
[74.93745422 -52.57061386]
[70.51284790 -66.93169403]
[68.22647095 -81.78398132]
[68.12705994 -96.81089020]
[70.21674347 -111.69212341]
[74.45096588 -126.11048889]
[80.73948669 -139.75865173]
[88.94824982 -152.34570312]
[98.90230560 -163.60336304]
[110.38946533 -173.29165649]
[123.16488647 -181.20407104]
[136.95625305 -187.17198181]
[151.46961975 -191.06816101]
[166.39561462 -192.80955505]
[181.41610718 -192.35906982]
[196.21090698 -189.72628784]
[210.46469116 -184.96733093]
[223.87361145 -178.18363953]
[236.15188599 -169.51980591]
[247.03778076 -159.16050720]
[256.29928589 -147.32653809]
[263.73895264 -134.27015686]
[269.19824219 -120.26966095]
[272.56076050 -105.62345886]
[273.75485229 -90.64373779]
[272.75506592 -75.64979553]
[269.58270264 -60.96122742]
[264.30538940 -46.89112473]
[257.03561401 -33.73938751]
[247.92832947 -21.78634834]
[237.17764282 -11.28678513]
[225.01274109 -2.46449971]
[211.69288635 4.49246264]
[197.50199890 9.43581295]
[182.74256897 12.26018333]
[167.72918701 12.90537262]
[152.78186035 11.35762882]
[138.21920776 7.64994192]
[132.44294739 21.49316025]
[126.66667175 35.33637619]
[120.89039612 49.17959595]
[123.12992859 63.90487289]
[110.67507935 73.66127777]
[124.35939789 90.68021393]
[121.32837677 110.43209839]
[106.23492432 120.47632599]
[105.29929352 135.44711304]
[104.36367035 150.41790771]
[103.42803955 165.38870239]
[118.66088867 176.86270142]
[123.93422699 195.03489685]
[117.31455231 212.60205078]
[101.61113739 222.61508179]
[101.61113739 237.61508179]
[115.97204590 242.32908630]
[128.15626526 251.23904419]
[136.97799683 263.46218872]
[141.58351135 277.79412842]
[141.53373718 292.82742310]
[136.84614563 307.08987427]
[127.99176788 319.18862915]
[115.84787750 327.94625854]
[101.61113739 332.51531982]
[101.61113739 347.51531982]
[101.61113739 362.51531982]
[101.61113739 377.51531982]
[101.61113739 392.51531982]
[101.61113739 407.51531982]
[101.61113739 422.51531982]
[101.61113739 437.51531982]
[101.61113739 452.51531982]
[101.61113739 467.51531982]
[116.15102386 471.57662964]
[129.05540466 479.41113281]
[139.36669922 490.43746948]
[146.31971741 503.83740234]
[149.39851379 518.61657715]
[148.37461853 533.67822266]
[143.32402039 547.90478516]
[134.62149048 560.24041748]
[122.91283417 569.76983643]
[109.06689453 575.78588867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 122]
[30 121]
[37 117]
[38 116]
[39 115]
[40 114]
[42 58]
[43 57]
[46 55]
[47 54]
[48 53]
[59 111]
[61 109]
[62 108]
[63 107]
[64 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
