%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUCAUUUUUAGGGGGGGGGGUUGCCACAACUAACCUCCUCGGACUCCUGCCUCACUCAUUUACACCAACCxxxxxxxxxxUUGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGACCCCCCCCCCUAAUCAUAUUUA\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 407.33322144]
[70.87159729 402.17822266]
[58.28185654 393.89602661]
[47.94191742 382.93325806]
[40.40940475 369.88113403]
[36.09054184 355.44351196]
[35.21823120 340.39907837]
[37.83952332 325.55908203]
[43.81304932 311.72384644]
[52.81666565 299.63949585]
[64.36482239 289.95770264]
[77.83473969 283.20062256]
[92.50000000 279.73266602]
[92.50000000 264.73266602]
[92.50000000 249.73265076]
[92.50000000 234.73265076]
[92.50000000 219.73265076]
[92.50000000 204.73265076]
[92.50000000 189.73265076]
[92.50000000 174.73265076]
[92.50000000 159.73265076]
[92.50000000 144.73265076]
[92.50000000 129.73265076]
[92.50000000 114.73265076]
[86.16838074 101.13446808]
[74.68857574 91.47972107]
[63.20877457 81.82497406]
[51.72897339 72.17022705]
[40.85934830 82.52949524]
[28.91606903 91.63011932]
[16.04412079 99.36161804]
[2.39975452 105.63014984]
[-11.85139847 110.35961151]
[-26.53634262 113.49259949]
[-41.47681808 114.99107361]
[-56.49145508 114.83685303]
[-71.39799500 113.03179932]
[-86.01548767 109.59783173]
[-100.16648865 104.57663727]
[-113.67921448 98.02915955]
[-126.38963318 90.03488922]
[-138.14346313 80.69086456]
[-148.79800415 70.11051178]
[-158.22393799 58.42226410]
[-166.30682373 45.76801682]
[-172.94856262 32.30137253]
[-178.06851196 18.18580246]
[-181.60453796 3.59266353]
[-183.51370239 -11.30090141]
[-183.77284241 -26.31409645]
[-182.37879944 -41.26467514]
[-179.34851074 -55.97115326]
[-174.71873474 -70.25500488]
[-168.54570007 -83.94284058]
[-160.90432739 -96.86849976]
[-151.88739014 -108.87507629]
[-141.60432434 -119.81682587]
[-130.17997742 -129.56091309]
[-117.75301361 -137.98907471]
[-104.47428894 -144.99897766]
[-90.50500488 -150.50555420]
[-76.01473236 -154.44194031]
[-61.17936325 -156.76034546]
[-46.17898941 -157.43264771]
[-31.19570351 -156.45066833]
[-16.41138458 -153.82633972]
[-2.00550246 -149.59150696]
[11.84706783 -143.79759216]
[24.97816849 -136.51490784]
[37.22840118 -127.83188629]
[48.44905853 -117.85390472]
[58.50393295 -106.70210266]
[67.27096558 -94.51184845]
[74.64373779 -81.43112183]
[80.53274536 -67.61870575]
[84.86650085 -53.24227524]
[87.59239960 -38.47634888]
[88.67735291 -23.50016403]
[88.10818481 -8.49552345]
[85.89180756 6.35543156]
[82.05513000 20.87242508]
[76.64471436 34.87923050]
[69.72624969 48.20582199]
[61.38372040 60.69042587]
[72.86352539 70.34517670]
[84.34332275 79.99992371]
[95.82312775 89.65467072]
[100.30727386 86.76634979]
[106.38773346 86.07772827]
[112.92179871 88.34986115]
[127.44295502 84.59007263]
[141.96411133 80.83028412]
[156.48527527 77.07049561]
[171.00642395 73.31070709]
[185.52758789 69.55091858]
[200.04873657 65.79113007]
[214.56990051 62.03134537]
[229.09104919 58.27155685]
[231.31378174 44.28288651]
[238.68739319 32.24020386]
[250.06594849 23.95158195]
[263.70523071 20.64658928]
[277.53002930 22.79397774]
[289.44998169 30.03550911]
[297.67547607 41.24522018]
[312.26983643 37.78050232]
[326.86422729 34.31578827]
[341.45858765 30.85107231]
[353.00469971 19.20551491]
[368.79205322 23.64306641]
[372.57995605 39.59875107]
[360.47174072 50.65872955]
[344.92330933 45.44544601]
[330.32891846 48.91016006]
[315.73455811 52.37487793]
[301.14016724 55.83959198]
[298.03253174 71.48661041]
[288.38854980 84.26691437]
[274.09121704 91.60121155]
[257.96887207 91.98181152]
[243.23567200 85.28227997]
[232.85084534 72.79271698]
[218.32968140 76.55250549]
[203.80853271 80.31228638]
[189.28736877 84.07207489]
[174.76622009 87.83186340]
[160.24505615 91.59165192]
[145.72390747 95.35144043]
[131.20274353 99.11122894]
[116.68158722 102.87101746]
[107.50000000 114.73265076]
[107.50000000 129.73265076]
[107.50000000 144.73265076]
[107.50000000 159.73265076]
[107.50000000 174.73265076]
[107.50000000 189.73265076]
[107.50000000 204.73265076]
[107.50000000 219.73265076]
[107.50000000 234.73265076]
[107.50000000 249.73265076]
[107.50000000 264.73266602]
[107.50000000 279.73266602]
[122.16526031 283.20062256]
[135.63517761 289.95770264]
[147.18333435 299.63949585]
[156.18695068 311.72384644]
[162.16047668 325.55908203]
[164.78176880 340.39907837]
[163.90945435 355.44351196]
[159.59059143 369.88113403]
[152.05809021 382.93325806]
[141.71813965 393.89602661]
[129.12840271 402.17822266]
[114.96779633 407.33322144]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 87]
[26 86]
[27 85]
[28 84]
[90 130]
[91 129]
[92 128]
[93 127]
[94 126]
[95 125]
[96 124]
[97 123]
[98 122]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
