%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAUAUCUCGGGGGGGGGGAUCAACAACCGACUAAUCACCACCCAACAAUGACUAAUCAAACUAACCUCxxxxxxxxxxUAUUAACCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCCCCCCCCCCCAAAUAUCAC\
) } def
/len { sequence length } bind def

/coor [
[83.08905792 420.04183960]
[69.24311829 414.02581787]
[57.53445816 404.49639893]
[48.83193588 392.16073608]
[43.78133392 377.93420410]
[42.75744247 362.87252808]
[45.83623886 348.09335327]
[52.78926086 334.69345093]
[63.10054779 323.66711426]
[76.00492859 315.83261108]
[90.54481506 311.77127075]
[90.54481506 296.77127075]
[90.54481506 281.77127075]
[90.54481506 266.77127075]
[90.54481506 251.77128601]
[90.54481506 236.77128601]
[90.54481506 221.77128601]
[90.54481506 206.77128601]
[90.54481506 191.77128601]
[90.54481506 176.77128601]
[90.54481506 161.77128601]
[90.54481506 146.77128601]
[90.54481506 131.77128601]
[90.54481506 116.77128601]
[84.36077118 105.00942230]
[87.68900299 94.24222565]
[78.42405701 82.44558716]
[65.79076385 90.55389404]
[52.44392014 97.42459869]
[38.50440979 102.99547577]
[24.09846306 107.21607971]
[9.35655212 110.04818726]
[-5.58781624 111.46614075]
[-20.59930038 111.45710754]
[-35.54195023 110.02117157]
[-50.28044510 107.17132568]
[-64.68129730 102.93338776]
[-78.61409760 97.34573364]
[-91.95265961 90.45896912]
[-104.57618713 82.33546448]
[-116.37035370 73.04878998]
[-127.22835541 62.68304443]
[-137.05184937 51.33211136]
[-145.75186157 39.09878159]
[-153.24963379 26.09384537]
[-159.47723389 12.43508339]
[-164.37826538 -1.75380695]
[-167.90835571 -16.34432602]
[-170.03552246 -31.20433617]
[-170.74050903 -46.19926071]
[-170.01692200 -61.19329834]
[-167.87133789 -76.05065918]
[-164.32316589 -90.63678741]
[-159.40454102 -104.81959534]
[-153.16000366 -118.47061920]
[-145.64611816 -131.46624756]
[-136.93093872 -143.68878174]
[-127.09337616 -155.02752686]
[-116.22253418 -165.37980652]
[-104.41686249 -174.65184021]
[-91.78327179 -182.75968933]
[-78.43618011 -189.62991333]
[-64.49646759 -195.20028687]
[-50.09036636 -199.42036438]
[-35.34835434 -202.25193787]
[-20.40393257 -203.66934204]
[-5.39244795 -203.65975952]
[9.55015087 -202.22328186]
[24.28853798 -199.37289429]
[38.68923950 -195.13442993]
[52.62183380 -189.54626465]
[65.96014404 -182.65902710]
[78.58337402 -174.53506470]
[90.37720490 -165.24795532]
[101.23482513 -154.88180542]
[111.05790710 -143.53051758]
[119.75748444 -131.29687500]
[127.25476837 -118.29166412]
[133.48187256 -104.63267517]
[138.38238525 -90.44360352]
[141.91194153 -75.85295868]
[144.03857422 -60.99287033]
[144.74301147 -45.99792099]
[144.01889038 -31.00390816]
[141.87275696 -16.14662552]
[138.32403564 -1.56062388]
[133.40490723 12.62199879]
[127.15987396 26.27280045]
[119.64551544 39.26815414]
[110.92988586 51.49037170]
[101.09191895 62.82875824]
[90.22069550 73.18063354]
[99.48564911 84.97727203]
[113.38819885 90.60923004]
[128.25125122 88.58689880]
[143.11430359 86.56455994]
[157.97734070 84.54222870]
[172.84039307 82.51989746]
[187.70343018 80.49755859]
[202.56648254 78.47522736]
[192.66600037 67.20667267]
[195.09307861 52.40433121]
[208.07374573 44.88751984]
[222.12016296 50.15041733]
[226.96554565 64.34626770]
[219.06886292 77.09870148]
[234.06155396 76.63066101]
[249.05426025 76.16262054]
[257.66711426 63.25532913]
[272.23342896 57.90721893]
[287.15213013 62.17474747]
[296.68670654 74.41696167]
[297.17086792 89.92648315]
[288.41848755 102.73957825]
[273.79501343 107.92935944]
[258.92349243 103.50023651]
[249.52229309 91.15531158]
[234.52960205 91.62335205]
[219.53691101 92.09140015]
[204.58882141 93.33827209]
[189.72576904 95.36060333]
[174.86273193 97.38294220]
[159.99967957 99.40527344]
[145.13662720 101.42761230]
[130.27359009 103.44994354]
[115.41053772 105.47228241]
[105.54481506 116.77128601]
[105.54481506 131.77128601]
[105.54481506 146.77128601]
[105.54481506 161.77128601]
[105.54481506 176.77128601]
[105.54481506 191.77128601]
[105.54481506 206.77128601]
[105.54481506 221.77128601]
[105.54481506 236.77128601]
[105.54481506 251.77128601]
[105.54481506 266.77127075]
[105.54481506 281.77127075]
[105.54481506 296.77127075]
[105.54481506 311.77127075]
[120.08470154 315.83261108]
[132.98907471 323.66711426]
[143.30036926 334.69345093]
[150.25338745 348.09335327]
[153.33218384 362.87252808]
[152.30828857 377.93420410]
[147.25769043 392.16073608]
[138.55517578 404.49639893]
[126.84650421 414.02581787]
[113.00057220 420.04183960]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[24 127]
[26 93]
[27 92]
[94 126]
[95 125]
[96 124]
[97 123]
[98 122]
[99 121]
[100 120]
[106 119]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
