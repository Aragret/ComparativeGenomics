%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAACCCCAAAGACAGGGGGGGGGGCCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGxxxxxxxxxxCCAUUUUACCUCACCCCCACUGAUGUUCGCCGACCGUUGACUAUUCUCUACCCCCCCCCCCAAACCACAAAGACA\
) } def
/len { sequence length } bind def

/coor [
[85.02166748 559.57476807]
[70.58479309 555.33526611]
[57.21125412 548.44000244]
[45.38450623 539.13812256]
[35.53207397 527.76599121]
[28.01011658 514.73461914]
[23.09054756 500.51507568]
[20.95120811 485.62149048]
[21.66943169 470.59216309]
[25.21925735 455.97039795]
[31.47235870 442.28482056]
[40.20269394 430.03012085]
[51.09466171 419.64929199]
[63.75452805 411.51760864]
[77.72463989 405.92901611]
[92.50000000 403.08554077]
[92.50000000 388.08554077]
[92.50000000 373.08554077]
[92.50000000 358.08554077]
[92.50000000 343.08554077]
[92.50000000 328.08554077]
[92.50000000 313.08554077]
[92.50000000 298.08554077]
[92.50000000 283.08554077]
[92.50000000 268.08554077]
[78.26325989 263.51651001]
[66.11937714 254.75886536]
[57.26499176 242.66011047]
[52.57740021 228.39765930]
[52.52762985 213.36436462]
[57.13313675 199.03242493]
[65.95487213 186.80928040]
[78.13909912 177.89932251]
[92.50000000 173.18531799]
[92.50000000 158.18531799]
[92.50000000 143.18531799]
[75.13972473 136.09970093]
[62.32889938 122.40780640]
[56.41191864 104.61526489]
[58.47159576 85.97812653]
[45.29050064 78.81859589]
[32.10940933 71.65907288]
[18.92831612 64.49954987]
[5.61003876 57.59857559]
[-7.84035444 50.95877457]
[-21.29074669 44.31897736]
[-34.74113846 37.67917633]
[-47.91179657 45.71269226]
[-63.33435059 45.32747650]
[-76.08751678 36.64645004]
[-82.10181427 22.43969727]
[-79.45809937 7.24054289]
[-68.99996948 -4.10101938]
[-54.06457520 -7.96593857]
[-39.41775131 -3.12093258]
[-29.73324203 8.88797474]
[-28.10134125 24.22878456]
[-14.65094852 30.86858368]
[-1.20055556 37.50838089]
[12.24983788 44.14818192]
[17.02402115 43.47146606]
[22.26799774 45.82223129]
[26.08784103 51.31845856]
[39.26893616 58.47798157]
[52.45002747 65.63750458]
[65.63111877 72.79702759]
[71.61821747 65.01139832]
[79.38359833 58.57320786]
[88.61695099 53.89024734]
[98.91445160 51.29730225]
[99.20712280 36.30015945]
[99.49980164 21.30301285]
[99.79248047 6.30586910]
[100.08515167 -8.69127560]
[100.37783051 -23.68841934]
[86.93621826 -31.00836945]
[78.44566345 -43.74292755]
[76.85722351 -58.96578979]
[82.53591156 -73.17884827]
[94.17681885 -83.11604309]
[109.10493469 -86.49389648]
[123.88990021 -82.53617859]
[135.13423157 -72.15236664]
[140.25405884 -57.72856903]
[138.07289124 -42.57927322]
[129.09194946 -30.18568039]
[115.37497711 -23.39574432]
[115.08229828 -8.39859867]
[114.78961945 6.59854507]
[114.49694824 21.59568977]
[114.20426941 36.59283447]
[113.91159058 51.58997726]
[127.55053711 57.83330154]
[138.71075439 47.81085205]
[143.80851746 32.83341980]
[158.44757080 30.08618927]
[169.60778809 20.06373978]
[180.76800537 10.04128933]
[180.06179810 -5.58033943]
[189.60321045 -17.96966743]
[204.88708496 -21.27683258]
[218.69683838 -13.94029427]
[224.51191711 0.57586056]
[219.58663940 15.41754627]
[206.24656677 23.57697296]
[190.79045105 21.20150948]
[179.63023376 31.22395897]
[168.47001648 41.24641037]
[164.17051697 55.50696945]
[148.73321533 58.97107315]
[137.57298279 68.99352264]
[140.51684570 77.64826965]
[141.62998962 86.28264618]
[156.46963501 84.09526062]
[167.15386963 72.12752533]
[183.16348267 73.16286469]
[192.21726990 86.40705109]
[187.36993408 101.70028687]
[172.33995056 107.31089783]
[158.65702820 98.93491364]
[143.81736755 101.12229919]
[140.88269043 115.80592346]
[133.17668152 128.64488220]
[121.59870911 138.14076233]
[107.50000000 143.18531799]
[107.50000000 158.18531799]
[107.50000000 173.18531799]
[121.86090088 177.89932251]
[134.04513550 186.80928040]
[142.86686707 199.03242493]
[147.47236633 213.36436462]
[147.42259216 228.39765930]
[142.73501587 242.66011047]
[133.88063049 254.75886536]
[121.73674011 263.51651001]
[107.50000000 268.08554077]
[107.50000000 283.08554077]
[107.50000000 298.08554077]
[107.50000000 313.08554077]
[107.50000000 328.08554077]
[107.50000000 343.08554077]
[107.50000000 358.08554077]
[107.50000000 373.08554077]
[107.50000000 388.08554077]
[107.50000000 403.08554077]
[122.27536011 405.92901611]
[136.24546814 411.51760864]
[148.90533447 419.64929199]
[159.79730225 430.03012085]
[168.52763367 442.28482056]
[174.78074646 455.97039795]
[178.33056641 470.59216309]
[179.04879761 485.62149048]
[176.90945435 500.51507568]
[171.98988342 514.73461914]
[164.46792603 527.76599121]
[154.61549377 539.13812256]
[142.78874207 548.44000244]
[129.41520691 555.33526611]
[114.97833252 559.57476807]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 145]
[17 144]
[18 143]
[19 142]
[20 141]
[21 140]
[22 139]
[23 138]
[24 137]
[25 136]
[34 127]
[35 126]
[36 125]
[40 66]
[41 65]
[42 64]
[43 63]
[44 60]
[45 59]
[46 58]
[47 57]
[70 92]
[71 91]
[72 90]
[73 89]
[74 88]
[75 87]
[93 111]
[94 110]
[96 108]
[97 107]
[98 106]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
