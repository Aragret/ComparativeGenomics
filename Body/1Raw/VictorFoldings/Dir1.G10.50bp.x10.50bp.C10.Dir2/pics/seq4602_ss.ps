%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCAUCCUAGGGGGGGGGGAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGUUGGxxxxxxxxxxCCUAACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUACCCCCCCCCCACCCCACCCUA\
) } def
/len { sequence length } bind def

/coor [
[130.11233521 515.47021484]
[116.09039307 509.91720581]
[103.89043427 501.05087280]
[94.27935791 489.42855835]
[87.86133575 475.78085327]
[85.03980255 460.96566772]
[85.99211884 445.91430664]
[90.65841675 431.57287598]
[98.74538422 418.84292603]
[109.74465942 408.52465820]
[122.96482086 401.26666260]
[137.57482910 397.52523804]
[137.57482910 382.52523804]
[137.57482910 367.52523804]
[137.57482910 352.52523804]
[137.57482910 337.52523804]
[137.57482910 322.52523804]
[137.57482910 307.52523804]
[137.57482910 292.52523804]
[137.57482910 277.52523804]
[137.57482910 262.52523804]
[122.55030060 244.96807861]
[131.21475220 222.86169434]
[126.66746521 208.56755066]
[122.12017059 194.27342224]
[117.57288361 179.97929382]
[113.02558899 165.68516541]
[108.47830200 151.39103699]
[103.93101501 137.09690857]
[86.08264160 134.61128235]
[71.48194122 124.04898071]
[63.53602600 107.87477112]
[48.53681564 108.02877045]
[33.53760910 108.18276215]
[18.53839874 108.33676147]
[6.32937908 118.74442291]
[-9.39177227 115.54677582]
[-16.56513405 101.19677734]
[-9.68791580 86.70252228]
[5.96426725 83.18276215]
[18.38440132 93.33755493]
[33.38360977 93.18355560]
[48.38282013 93.02955627]
[63.38203049 92.87556458]
[64.56885529 88.32664490]
[66.31837463 83.96311188]
[54.34812164 74.92359161]
[42.37786102 65.88407135]
[30.40760231 56.84455490]
[18.43734550 47.80503464]
[3.23848796 51.48318100]
[-10.74572086 44.48490143]
[-16.91236496 30.11456680]
[-12.34974384 15.15741158]
[0.78781140 6.67574596]
[16.29714966 8.67435360]
[26.85523605 20.20955467]
[27.47686386 35.83477783]
[39.44712067 44.87429810]
[51.41738129 53.91381454]
[63.38763809 62.95333481]
[75.35789490 71.99285126]
[79.44219208 67.20680237]
[84.44387817 63.03615189]
[90.26614380 59.65411377]
[96.77994537 57.21791077]
[97.08792877 42.22107315]
[97.39590454 27.22423363]
[97.70388031 12.22739601]
[97.85787964 -2.77181387]
[97.85787964 -17.77181435]
[84.51674652 -25.38166809]
[76.78178406 -38.65064621]
[76.73363495 -54.00946426]
[84.38526917 -67.32667542]
[97.67842865 -75.02001190]
[113.03732300 -75.02001190]
[126.33048248 -67.32667542]
[133.98211670 -54.00946426]
[133.93397522 -38.65064621]
[126.19900513 -25.38166809]
[112.85787964 -17.77181435]
[112.85787964 -2.77181387]
[116.02243805 3.95854616]
[112.70072174 12.53537369]
[112.39273834 27.53221130]
[112.08476257 42.52904892]
[111.77678680 57.52588654]
[125.33868408 63.93486404]
[136.72975159 54.17558670]
[131.97689819 39.73679352]
[133.11630249 24.57862091]
[139.97422791 11.01258183]
[151.50486755 1.10739851]
[165.94990540 -3.62646079]
[181.10656738 -2.46711636]
[194.66357422 4.40863991]
[204.55357361 15.95230484]
[209.26843262 30.40355301]
[208.08914185 45.55867767]
[201.19555664 59.10662460]
[189.63890076 68.98143768]
[175.18145752 73.67727661]
[160.02789307 72.47806549]
[146.48902893 65.56666565]
[135.09796143 75.32593536]
[140.97479248 97.74259186]
[134.32539368 118.87106323]
[118.22514343 132.54962158]
[122.77243042 146.84375000]
[127.31972504 161.13787842]
[131.86701965 175.43200684]
[136.41430664 189.72613525]
[140.96159363 204.02026367]
[145.50888062 218.31439209]
[154.48936462 220.62759399]
[161.74989319 226.19668579]
[166.19023132 234.05630493]
[167.18551636 242.90447998]
[180.99909973 248.75128174]
[194.81268311 254.59806824]
[209.36410522 248.43109131]
[223.98268127 254.43716431]
[229.99545288 269.05297852]
[223.83517456 283.60723877]
[209.15660095 289.46514893]
[194.66828918 283.15133667]
[188.96588135 268.41165161]
[175.15231323 262.56484985]
[161.33872986 256.71807861]
[157.30641174 260.14929199]
[152.57482910 262.52523804]
[152.57482910 277.52523804]
[152.57482910 292.52523804]
[152.57482910 307.52523804]
[152.57482910 322.52523804]
[152.57482910 337.52523804]
[152.57482910 352.52523804]
[152.57482910 367.52523804]
[152.57482910 382.52523804]
[152.57482910 397.52523804]
[167.18484497 401.26666260]
[180.40499878 408.52465820]
[191.40428162 418.84292603]
[199.49124146 431.57287598]
[204.15754700 445.91430664]
[205.10986328 460.96566772]
[202.28833008 475.78085327]
[195.87030029 489.42855835]
[186.25923157 501.05087280]
[174.05928040 509.91720581]
[160.03733826 515.47021484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 115]
[24 114]
[25 113]
[26 112]
[27 111]
[28 110]
[29 109]
[32 44]
[33 43]
[34 42]
[35 41]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[66 88]
[67 87]
[68 86]
[69 85]
[70 83]
[71 82]
[89 106]
[90 105]
[119 130]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
