%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGAGCCCUAGGGGGGGGGGGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCxxxxxxxxxxAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGCCCCCCCCCCUCUCAGCCCUA\
) } def
/len { sequence length } bind def

/coor [
[75.04500580 387.89996338]
[61.02305984 382.34695435]
[48.82310104 373.48062134]
[39.21202850 361.85830688]
[32.79400635 348.21060181]
[29.97246742 333.39541626]
[30.92478371 318.34405518]
[35.59108734 304.00262451]
[43.67805481 291.27267456]
[54.67733002 280.95440674]
[67.89749146 273.69641113]
[82.50749969 269.95498657]
[82.50749969 254.95498657]
[82.50749969 239.95498657]
[82.50749969 224.95498657]
[82.50749969 209.95498657]
[82.50749969 194.95498657]
[82.50749969 179.95498657]
[82.50749969 164.95498657]
[82.50749969 149.95498657]
[82.50749969 134.95498657]
[70.63067627 125.79305267]
[56.12205124 129.60090637]
[55.02329636 144.70294189]
[49.07815170 158.62896729]
[38.93151474 169.86837769]
[25.68400764 177.20201111]
[10.77262306 179.83438110]
[-4.18516111 177.47994995]
[-17.56683922 170.39408875]
[-27.92086411 159.34542847]
[-34.12411118 145.53244019]
[-35.50369644 130.45346069]
[-31.90997505 115.74415588]
[-23.73276711 103.00006104]
[-11.85907173 93.60356903]
[2.42313910 88.57393646]
[17.56463814 88.45674133]
[31.92298889 93.26470184]
[43.94070435 102.47628784]
[52.31419373 115.09228516]
[66.82282257 111.28442383]
[66.98753357 93.83792877]
[75.36850739 79.38245392]
[89.15644073 71.32108307]
[104.38945007 71.13246155]
[110.37774658 57.37963104]
[116.36604309 43.62680054]
[122.35433960 29.87397194]
[128.34263611 16.12114334]
[114.25104523 21.26185417]
[100.09387207 16.30459595]
[92.28736115 3.49606752]
[94.36953735 -11.35871410]
[105.39672852 -21.52734184]
[120.37125397 -22.40124512]
[132.50642395 -13.58435535]
[136.30256653 0.92561549]
[144.19905090 -11.82764149]
[152.09553528 -24.58089828]
[152.78199768 -40.38720703]
[166.06044006 -47.13498688]
[173.95690918 -59.88824463]
[174.64338684 -75.69454956]
[187.92181396 -82.44232941]
[195.81829834 -95.19558716]
[203.71478271 -107.94884491]
[201.52821350 -120.70120239]
[208.41761780 -131.17533875]
[220.21275330 -134.02789307]
[228.36941528 -146.61633301]
[217.59469604 -157.11857605]
[209.07873535 -169.51721191]
[203.14732361 -183.33464050]
[200.02667236 -198.03906250]
[199.83488464 -213.06495667]
[202.57749939 -227.83480835]
[208.14723206 -241.78128052]
[216.32827759 -254.36906433]
[226.80465698 -265.11538696]
[239.17236328 -273.60852051]
[252.95501709 -279.52359009]
[267.62216187 -282.63500977]
[282.60968018 -282.82498169]
[297.34152222 -280.08810425]
[311.25186157 -274.53140259]
[319.40850830 -287.11984253]
[327.56518555 -299.70828247]
[327.86581421 -316.10467529]
[342.34481812 -323.80468750]
[356.10748291 -314.88717651]
[354.99591064 -298.52575684]
[340.15362549 -291.55163574]
[331.99694824 -278.96319580]
[323.84030151 -266.37475586]
[334.59585571 -255.94920349]
[343.11343384 -243.62162781]
[349.06411743 -229.86477661]
[352.21746826 -215.20660400]
[352.45046997 -200.21008301]
[349.75231934 -185.45156860]
[344.22482300 -171.49862671]
[336.07873535 -158.88819885]
[325.62551880 -148.10597229]
[313.26562500 -139.56764221]
[299.47299194 -133.60292053]
[284.77700806 -130.44276428]
[269.74206543 -130.21046448]
[254.94602966 -132.91682434]
[240.95785522 -138.45967102]
[232.80119324 -125.87123108]
[232.87539673 -108.34870148]
[216.46803284 -100.05236053]
[208.57154846 -87.29910278]
[200.67507935 -74.54584503]
[200.55340576 -59.65174103]
[186.71017456 -51.99176025]
[178.81369019 -39.23850250]
[178.69203186 -24.34439468]
[164.84878540 -16.68441582]
[156.95230103 -3.93115902]
[149.05583191 8.82209778]
[142.09547424 22.10943985]
[136.10717773 35.86226654]
[130.11888123 49.61509705]
[124.13057709 63.36792755]
[118.14228058 77.12075806]
[128.06591797 88.40114594]
[131.32305908 103.66809845]
[126.52251434 119.13733673]
[114.34533691 130.68740845]
[97.50749969 134.95498657]
[97.50749969 149.95498657]
[97.50749969 164.95498657]
[97.50749969 179.95498657]
[97.50749969 194.95498657]
[97.50749969 209.95498657]
[97.50749969 224.95498657]
[97.50749969 239.95498657]
[97.50749969 254.95498657]
[97.50749969 269.95498657]
[112.11751556 273.69641113]
[125.33767700 280.95440674]
[136.33694458 291.27267456]
[144.42391968 304.00262451]
[149.09022522 318.34405518]
[150.04254150 333.39541626]
[147.22099304 348.21060181]
[140.80297852 361.85830688]
[131.19189453 373.48062134]
[118.99194336 382.34695435]
[104.97000122 387.89996338]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 42]
[23 41]
[46 127]
[47 126]
[48 125]
[49 124]
[50 123]
[58 122]
[59 121]
[60 120]
[62 118]
[63 117]
[65 115]
[66 114]
[67 113]
[70 111]
[71 110]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
