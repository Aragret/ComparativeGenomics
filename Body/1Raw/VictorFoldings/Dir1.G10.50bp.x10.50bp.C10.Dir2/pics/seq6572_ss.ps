%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUCCUUACACGGGGGGGGGGCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUxxxxxxxxxxUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCACCCCCCCCCCUACUCCUUACAC\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 416.64862061]
[70.87159729 411.49362183]
[58.28185654 403.21139526]
[47.94191742 392.24862671]
[40.40940475 379.19650269]
[36.09054184 364.75891113]
[35.21823120 349.71444702]
[37.83952332 334.87445068]
[43.81304932 321.03921509]
[52.81666565 308.95486450]
[64.36482239 299.27307129]
[77.83473969 292.51599121]
[92.50000000 289.04803467]
[92.50000000 274.04803467]
[92.50000000 259.04803467]
[92.50000000 244.04803467]
[92.50000000 229.04803467]
[92.50000000 214.04803467]
[92.50000000 199.04803467]
[92.50000000 184.04803467]
[92.50000000 169.04803467]
[92.50000000 154.04803467]
[66.59987640 143.14939880]
[49.55723190 120.80785370]
[35.03607559 124.56764221]
[20.51491928 128.32742310]
[12.93851757 133.53697205]
[5.66133451 132.01307678]
[-8.93303871 135.47779846]
[-23.52741241 138.94252014]
[-33.13471985 151.79083252]
[-49.17383194 152.14630127]
[-59.34091949 139.73622131]
[-55.83666229 124.08055878]
[-41.34922409 117.18899536]
[-26.99212837 124.34814453]
[-12.39775467 120.88343048]
[2.19661856 117.41870880]
[16.75513077 113.80627441]
[31.27628899 110.04648590]
[45.79744339 106.28669739]
[45.66445541 94.99118042]
[47.86016846 83.91033173]
[52.29047394 73.51905060]
[58.76550293 64.26268768]
[67.00775146 56.53793716]
[76.66397095 50.67587662]
[72.17352295 36.36378860]
[67.68307495 22.05169868]
[63.19262695 7.73960972]
[58.70218277 -6.57247925]
[49.28326035 5.10159302]
[34.28376007 5.22403049]
[24.67552376 -6.29472685]
[27.48678970 -21.02893066]
[40.66117096 -28.20079803]
[54.56153107 -22.56460571]
[51.54205322 -37.25755310]
[48.52257919 -51.95050430]
[45.50310135 -66.64345551]
[42.48362350 -81.33640289]
[39.46414566 -96.02935028]
[24.40938568 -97.26665497]
[10.31353474 -102.69654083]
[-1.68071914 -111.87883759]
[-10.60105705 -124.06917572]
[-15.72434711 -138.27932739]
[-16.63526726 -153.35736084]
[-13.25997162 -168.08094788]
[-5.87208223 -181.25651550]
[4.92949867 -191.81599426]
[18.26913452 -198.90336609]
[33.06544113 -201.94407654]
[48.11894989 -200.69165039]
[62.20933914 -195.24760437]
[74.19435883 -186.05326843]
[83.10244751 -173.85397339]
[88.21146393 -159.63868713]
[89.10723114 -144.55975342]
[85.71714783 -129.83955383]
[78.31602478 -116.67140961]
[67.50384521 -106.12279510]
[54.15709305 -99.04882812]
[57.17657089 -84.35588074]
[60.19604874 -69.66293335]
[63.21552658 -54.96998215]
[66.23500061 -40.27703094]
[69.25447845 -25.58408356]
[73.01426697 -11.06292629]
[77.50471497 3.24916291]
[81.99516296 17.56125259]
[86.48561096 31.87334061]
[90.97605896 46.18542862]
[103.90657043 45.57410431]
[116.61722565 48.02589798]
[128.39265442 53.40282059]
[138.57011414 61.40226364]
[146.57684326 71.57400513]
[151.96218872 83.34558105]
[166.74014282 80.77413177]
[181.51808167 78.20268250]
[169.45622253 69.28576660]
[165.78236389 54.74263382]
[172.16223145 41.16701889]
[185.70323181 34.71400452]
[200.26597595 38.30934143]
[209.24783325 50.32292557]
[208.57649231 65.30789948]
[198.55661011 76.47003174]
[213.54966736 76.01406860]
[228.54273987 75.55809784]
[243.53581238 75.10212708]
[258.52886963 74.64616394]
[272.18289185 65.56320953]
[286.75378418 73.08789062]
[287.25228882 89.47946167]
[273.16555786 97.87567902]
[258.98483276 89.63922882]
[243.99177551 90.09519958]
[228.99870300 90.55116272]
[214.00564575 91.00713348]
[199.01257324 91.46310425]
[184.08953857 92.98062897]
[169.31158447 95.55207825]
[154.53364563 98.12351990]
[153.96118164 108.10121155]
[151.57853699 117.80713654]
[147.46562195 126.91570282]
[141.76039124 135.12133789]
[134.65428162 142.14878845]
[126.38563538 147.76231384]
[117.23184967 151.77357483]
[107.50000000 154.04803467]
[107.50000000 169.04803467]
[107.50000000 184.04803467]
[107.50000000 199.04803467]
[107.50000000 214.04803467]
[107.50000000 229.04803467]
[107.50000000 244.04803467]
[107.50000000 259.04803467]
[107.50000000 274.04803467]
[107.50000000 289.04803467]
[122.16526031 292.51599121]
[135.63517761 299.27307129]
[147.18333435 308.95486450]
[156.18695068 321.03921509]
[162.16047668 334.87445068]
[164.78176880 349.71444702]
[163.90945435 364.75891113]
[159.59059143 379.19650269]
[152.05809021 392.24862671]
[141.71813965 403.21139526]
[129.12840271 411.49362183]
[114.96779633 416.64862061]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[24 41]
[25 40]
[26 39]
[28 38]
[29 37]
[30 36]
[47 93]
[48 92]
[49 91]
[50 90]
[51 89]
[57 88]
[58 87]
[59 86]
[60 85]
[61 84]
[62 83]
[99 125]
[100 124]
[101 123]
[109 122]
[110 121]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
