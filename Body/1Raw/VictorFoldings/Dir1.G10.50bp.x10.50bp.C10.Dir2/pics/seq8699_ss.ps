%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAACCAUUAGGGGGGGGGGACCUUCCCUCUACACUUAUCAUCUUCACAAUUCUAAUUCUACUGACUAUCxxxxxxxxxxCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACCCCCCCCCCCUCCACCAUUA\
) } def
/len { sequence length } bind def

/coor [
[82.35214233 357.60452271]
[69.13194275 350.33206177]
[58.24514008 339.88504028]
[50.43400955 326.97579956]
[46.23112869 312.48449707]
[45.92305374 297.39913940]
[49.53079605 282.74832153]
[56.80836868 269.53094482]
[67.25957489 258.64816284]
[80.17183685 250.84202576]
[94.66477203 246.64472961]
[94.35272217 231.64797974]
[94.04066467 216.65122986]
[93.72860718 201.65447998]
[93.41654968 186.65771484]
[93.10449219 171.66096497]
[92.79243469 156.66421509]
[92.48038483 141.66746521]
[92.16832733 126.67070770]
[91.85626984 111.67395020]
[89.84534454 126.53854370]
[83.44471741 140.10438538]
[73.25052643 151.10795593]
[60.21225739 158.52438354]
[45.54428101 161.66293335]
[30.61276054 160.23127747]
[16.80840111 154.36274719]
[5.41693068 144.60392761]
[-2.50066066 131.86376953]
[-6.20693541 117.32885742]
[-5.35669422 102.35297394]
[-0.02912791 88.33095551]
[9.27955818 76.56880188]
[21.70236206 68.16201782]
[36.08223724 63.89361954]
[51.07984924 64.16114807]
[65.29833984 68.93969727]
[77.41341400 77.78419495]
[86.29702759 89.87154388]
[79.39002991 76.55638885]
[72.48303223 63.24123383]
[65.57603455 49.92607880]
[58.66903305 36.61092377]
[51.76203537 23.29576874]
[37.52086639 28.10092735]
[22.71307564 30.67575836]
[7.68577671 30.95990181]
[-7.20876741 28.94669724]
[-21.62140846 24.68333817]
[-35.21429062 18.26976204]
[-47.66878128 9.85631371]
[-58.69292831 -0.35978386]
[-68.02830505 -12.13905048]
[-75.45608521 -25.20536423]
[-80.80214691 -39.25242996]
[-83.94116211 -53.95096588]
[-84.79956818 -68.95642090]
[-83.35722351 -83.91703796]
[-79.64794922 -98.48212433]
[-73.75868988 -112.31024933]
[-65.82749939 -125.07726288]
[-56.04030228 -136.48388672]
[-44.62652206 -146.26274109]
[-31.85370827 -154.18460083]
[-18.02127838 -160.06373596]
[-3.45348430 -163.76235962]
[11.50818443 -165.19377136]
[26.51300430 -164.32438660]
[41.20923996 -161.17462158]
[55.25239563 -155.81829834]
[68.31327057 -148.38096619]
[80.08570862 -139.03697205]
[90.29373932 -128.00535583]
[98.69808197 -115.54471588]
[105.10171509 -101.94715118]
[109.35453033 -87.53139496]
[111.35684204 -72.63538361]
[111.06171417 -57.60829544]
[108.47605133 -42.80239105]
[103.66048431 -28.56474113]
[96.72788239 -15.22909451]
[87.84075928 -3.10806012]
[77.20744324 7.51422882]
[65.07719421 16.38876915]
[71.98419189 29.70392609]
[78.89118958 43.01908112]
[85.79818726 56.33423615]
[92.70518494 69.64939117]
[99.61218262 82.96454620]
[113.13637543 89.45271301]
[127.84433746 86.50723267]
[142.55229187 83.56174469]
[156.05433655 71.08477020]
[172.44767761 77.27008820]
[187.09117126 74.01926422]
[201.73468018 70.76844025]
[216.37817383 67.51761627]
[231.02168274 64.26678467]
[245.66519165 61.01596069]
[260.30868530 57.76513672]
[262.56497192 42.75601959]
[270.09423828 29.57744598]
[281.87817383 20.01170540]
[296.32308960 15.35248947]
[311.47549438 16.22991562]
[325.28607178 22.52532196]
[335.88708496 33.38730240]
[341.84484863 47.34687042]
[342.35363770 62.51610184]
[337.34457397 76.84348297]
[327.49517822 88.39135742]
[314.13742065 95.59796906]
[299.07788086 97.48868561]
[284.35324097 93.80779266]
[271.95483398 85.05311584]
[263.55950928 72.40863800]
[248.91601562 75.65946198]
[234.27250671 78.91028595]
[219.62901306 82.16111755]
[204.98550415 85.41194153]
[190.34201050 88.66276550]
[175.69850159 91.91358948]
[168.90760803 101.97296143]
[156.68547058 104.77272797]
[145.49777222 98.26970673]
[130.78981018 101.21519470]
[116.08185577 104.16067505]
[113.51393127 107.58513641]
[110.32801056 110.00995636]
[106.85301971 111.36189270]
[107.16507721 126.35865021]
[107.47713470 141.35540771]
[107.78919220 156.35215759]
[108.10124969 171.34890747]
[108.41330719 186.34565735]
[108.72535706 201.34242249]
[109.03741455 216.33917236]
[109.34947205 231.33592224]
[109.66152954 246.33267212]
[124.31652069 249.92344666]
[137.54232788 257.18569946]
[148.43719482 267.62429810]
[156.25830078 280.52749634]
[160.47236633 295.01556396]
[160.79208374 310.10067749]
[157.19566345 324.75427246]
[149.92829895 337.97729492]
[139.48550415 348.86813354]
[126.57926941 356.68423462]
[112.08957672 360.89270020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[39 89]
[40 88]
[41 87]
[42 86]
[43 85]
[44 84]
[90 127]
[91 126]
[92 125]
[94 122]
[95 121]
[96 120]
[97 119]
[98 118]
[99 117]
[100 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
