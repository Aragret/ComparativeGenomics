%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUUGUACUAUGGGGGGGGGGCCCUAUGAGGCAUAAUUAUAACAAGCUCCAUCUGCCUACGACAAACAGACxxxxxxxxxxCUAAUACCAACUAUCUCCCUAAUUGAAAACAAAAUACUCAAAUGGGCCUGCCCCCCCCCCUCCUUGUAGUAU\
) } def
/len { sequence length } bind def

/coor [
[92.14376068 463.81036377]
[77.98315430 458.65536499]
[65.39340973 450.37316895]
[55.05347061 439.41036987]
[47.52096176 426.35824585]
[43.20209503 411.92065430]
[42.32978821 396.87619019]
[44.95107651 382.03619385]
[50.92460632 368.20095825]
[59.92822266 356.11660767]
[71.47637939 346.43484497]
[84.94629669 339.67776489]
[99.61155701 336.20977783]
[99.61155701 321.20977783]
[99.61155701 306.20977783]
[99.61155701 291.20977783]
[99.61155701 276.20977783]
[99.61155701 261.20977783]
[99.61155701 246.20979309]
[99.61155701 231.20979309]
[99.61155701 216.20979309]
[99.61155701 201.20979309]
[99.61155701 186.20979309]
[88.01528168 195.72433472]
[73.07045746 194.43898010]
[63.26909637 183.08409119]
[64.18058014 168.11181641]
[75.28698730 158.02975464]
[90.27736664 158.56680298]
[100.63385010 169.41784668]
[102.45350647 154.52864075]
[104.27316284 139.63941956]
[106.09281921 124.75019836]
[91.64675903 122.69986725]
[81.42893219 113.37638092]
[78.42400360 100.65238190]
[82.85418701 89.16057587]
[74.03740692 77.02532196]
[65.22062683 64.89006042]
[56.40385056 52.75481033]
[42.54582214 58.65065384]
[27.73035622 61.31342316]
[12.70105362 60.61273193]
[-1.78847730 56.58693695]
[-15.01241112 49.44104385]
[-26.30906296 39.53625870]
[-35.11399841 27.37175369]
[-40.98822784 13.55949497]
[-43.64011002 -1.20653939]
[-42.93980789 -16.18522644]
[-38.92565918 -30.62549782]
[-31.80207634 -43.80400085]
[-21.92915726 -55.06132507]
[-30.74593544 -67.19657898]
[-39.56271362 -79.33183289]
[-48.37949371 -91.46708679]
[-63.51504517 -89.19252014]
[-77.97014618 -94.22328186]
[-88.42312622 -105.40334320]
[-92.47196198 -120.16361237]
[-89.18626404 -135.11228943]
[-79.32106018 -146.81425476]
[-65.14329529 -152.58052063]
[-49.91093063 -151.08601379]
[-37.12424088 -142.67416382]
[-29.72151566 -129.27796936]
[-29.40385056 -113.97575378]
[-36.24423981 -100.28386688]
[-27.42745972 -88.14861298]
[-18.61068153 -76.01335907]
[-9.79390240 -63.87810516]
[3.96335006 -69.78910065]
[18.69815826 -72.49165344]
[33.67211151 -71.84704590]
[48.13409805 -67.88440704]
[61.35795212 -60.79935837]
[72.67895508 -50.94440842]
[81.52721405 -38.81138229]
[87.45635986 -25.00687981]
[90.16609192 -10.22196865]
[89.51734161 4.80243301]
[85.53942871 19.31267357]
[78.42875671 32.58017731]
[68.53910828 43.93803024]
[77.35588074 56.07328415]
[86.17266083 68.20854187]
[94.98944092 80.34379578]
[114.29982758 82.13027191]
[125.47871399 100.72776031]
[139.64768982 95.80433655]
[153.81666565 90.88090515]
[152.33386230 77.36045074]
[153.72828674 63.83725739]
[157.93472290 50.91647720]
[164.76220703 39.17569733]
[173.90266418 29.13914680]
[184.94482422 21.25427628]
[197.39270020 15.87181568]
[210.68788147 13.23017502]
[224.23464966 13.44488049]
[237.42652893 16.50352859]
[249.67355347 22.26646805]
[260.42864990 30.47316551]
[269.21197510 40.75399399]
[275.63244629 52.64687347]
[290.07443237 48.59355927]
[304.51641846 44.54024124]
[315.58111572 32.43634033]
[331.53530884 36.23045349]
[335.96670532 52.01952744]
[324.31665039 63.56111145]
[308.56973267 58.98221588]
[294.12774658 63.03553391]
[279.68576050 67.08884430]
[280.16262817 83.56434631]
[276.40576172 99.62344360]
[268.66015625 114.19580841]
[257.43676758 126.30879974]
[243.47901917 135.15240479]
[227.71328735 140.13340759]
[211.18759155 140.91517639]
[195.00192261 137.44039917]
[180.23492432 129.93525696]
[167.87213135 118.89472198]
[158.74009705 105.04988098]
[144.57112122 109.97330475]
[130.40214539 114.89673615]
[120.98204041 126.56985474]
[119.16238403 141.45907593]
[117.34272766 156.34829712]
[115.52307129 171.23750305]
[114.61155701 186.20979309]
[114.61155701 201.20979309]
[114.61155701 216.20979309]
[114.61155701 231.20979309]
[114.61155701 246.20979309]
[114.61155701 261.20977783]
[114.61155701 276.20977783]
[114.61155701 291.20977783]
[114.61155701 306.20977783]
[114.61155701 321.20977783]
[114.61155701 336.20977783]
[129.27680969 339.67776489]
[142.74673462 346.43484497]
[154.29489136 356.11660767]
[163.29850769 368.20095825]
[169.27203369 382.03619385]
[171.89332581 396.87619019]
[171.02101135 411.92065430]
[166.70214844 426.35824585]
[159.16963196 439.41036987]
[148.82969666 450.37316895]
[136.23995972 458.65536499]
[122.07935333 463.81036377]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[30 131]
[31 130]
[32 129]
[33 128]
[37 87]
[38 86]
[39 85]
[40 84]
[53 71]
[54 70]
[55 69]
[56 68]
[89 127]
[90 126]
[91 125]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
