%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAGACCCUGGGGGGGGGGACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCxxxxxxxxxxUAUCUCCCCUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGCCCCCCCCCCACCAAGAGCCU\
) } def
/len { sequence length } bind def

/coor [
[89.68307495 511.45602417]
[75.66113281 505.90301514]
[63.46117401 497.03668213]
[53.85010147 485.41436768]
[47.43207550 471.76666260]
[44.61053848 456.95147705]
[45.56285477 441.90011597]
[50.22916031 427.55868530]
[58.31612778 414.82873535]
[69.31539917 404.51046753]
[82.53556061 397.25247192]
[97.14557648 393.51104736]
[97.14557648 378.51104736]
[97.14557648 363.51104736]
[97.14557648 348.51104736]
[97.14557648 333.51104736]
[97.14557648 318.51104736]
[97.14557648 303.51104736]
[97.14557648 288.51104736]
[97.14557648 273.51104736]
[97.14557648 258.51104736]
[93.98101044 251.78068542]
[97.30273438 243.20385742]
[97.61071014 228.20701599]
[97.30273438 213.21017456]
[93.72984314 206.68739319]
[96.51726532 197.92234802]
[95.90144348 182.93499756]
[95.28561401 167.94764709]
[94.66979218 152.96029663]
[94.05397034 137.97293091]
[93.43814087 122.98558044]
[79.52846527 116.56480408]
[71.30225372 101.95130157]
[73.31736755 83.84117126]
[58.97730637 79.44087219]
[44.63724518 75.04057312]
[30.29718590 70.64027405]
[15.95712376 66.23997498]
[1.61706245 61.83967209]
[-9.57165337 72.36146545]
[-24.52593040 75.86363220]
[-39.22314453 71.40409851]
[-49.70981979 60.18245316]
[-53.16509247 45.21726990]
[-48.65950775 30.53410721]
[-37.40505219 20.08265877]
[-22.42911148 16.67431450]
[-7.76014328 21.22589874]
[2.65597630 32.51306152]
[6.01736259 47.49961090]
[20.35742378 51.89990997]
[34.69748688 56.30020905]
[49.03754807 60.70051193]
[63.37760925 65.10081482]
[77.71766663 69.50111389]
[63.40545654 65.01106262]
[53.01758957 54.19014359]
[49.11550903 39.70657730]
[52.66138840 25.13170815]
[62.78088379 14.05940819]
[76.97872925 9.21987915]
[91.75403595 11.80644894]
[103.46350861 21.18132401]
[109.21983337 35.03284836]
[107.60360718 49.94552231]
[99.01429749 62.24138641]
[107.68090820 49.99843216]
[116.34751129 37.75547791]
[102.35784912 43.16744232]
[87.35990143 42.91931534]
[73.55692291 37.04754257]
[62.97661591 26.41471291]
[57.17326355 12.58282471]
[56.99940491 -2.41616797]
[62.48057938 -16.37885857]
[72.81157684 -27.25407982]
[86.47474670 -33.44422150]
[101.46291351 -34.03993225]
[115.57426453 -28.95369530]
[126.73578644 -18.93270302]
[133.30783081 -5.44906950]
[134.32490540 9.51640892]
[129.63798523 23.76463699]
[141.42012024 14.48125076]
[153.20225525 5.19786501]
[149.15054321 -9.42606544]
[151.00143433 -24.44662666]
[158.44197083 -37.57872772]
[170.31123352 -46.83660126]
[184.78138733 -50.83404541]
[199.63911438 -48.99192047]
[212.62414551 -41.62185287]
[224.40628052 -50.90523911]
[236.18843079 -60.18862534]
[247.97056580 -69.47200775]
[253.54547119 -84.89447021]
[269.73455811 -87.51093292]
[279.88385010 -74.62979889]
[273.55264282 -59.50207901]
[257.25393677 -57.68987274]
[245.47181702 -48.40648651]
[233.68966675 -39.12310028]
[221.90753174 -29.83971596]
[226.03530884 -15.49082088]
[224.35043335 -0.61444402]
[217.07870483 12.51898193]
[205.30097961 21.89304352]
[190.79263306 26.05491638]
[175.75588989 24.34046555]
[162.48564148 16.98000145]
[150.70350647 26.26338768]
[138.92137146 35.54677200]
[128.59046936 46.42208862]
[119.92385864 58.66503906]
[111.25724792 70.90799713]
[126.52098846 88.86422729]
[124.18772125 110.41299438]
[108.42549133 122.36975861]
[109.04132080 137.35711670]
[109.65714264 152.34446716]
[110.27297211 167.33181763]
[110.88879395 182.31916809]
[111.50462341 197.30651855]
[112.27428436 212.28675842]
[114.89160919 215.92672729]
[116.05708313 219.82098389]
[115.87388611 223.46969604]
[114.60057831 226.46101379]
[112.60754395 228.51499939]
[112.29956818 243.51182556]
[112.14557648 258.51104736]
[112.14557648 273.51104736]
[112.14557648 288.51104736]
[112.14557648 303.51104736]
[112.14557648 318.51104736]
[112.14557648 333.51104736]
[112.14557648 348.51104736]
[112.14557648 363.51104736]
[112.14557648 378.51104736]
[112.14557648 393.51104736]
[126.75558472 397.25247192]
[139.97573853 404.51046753]
[150.97502136 414.82873535]
[159.06198120 427.55868530]
[163.72828674 441.90011597]
[164.68060303 456.95147705]
[161.85906982 471.76666260]
[155.44104004 485.41436768]
[145.82997131 497.03668213]
[133.63002014 505.90301514]
[119.60807037 511.45602417]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 131]
[24 130]
[25 125]
[27 124]
[28 123]
[29 122]
[30 121]
[31 120]
[32 119]
[35 56]
[36 55]
[37 54]
[38 53]
[39 52]
[40 51]
[67 116]
[68 115]
[69 114]
[84 113]
[85 112]
[86 111]
[93 104]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
