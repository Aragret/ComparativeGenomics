%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAAAAUUGGGGGGGGGGAUAACCAAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUxxxxxxxxxxAAUGCAAACAGUACCUAACAAACCCACAGGUCCUAAACUACCAAACCUGCCCCCCCCCCCAUUAAAAAUU\
) } def
/len { sequence length } bind def

/coor [
[113.63036346 388.49548340]
[100.41017151 381.22302246]
[89.52336121 370.77600098]
[81.71223450 357.86676025]
[77.50935364 343.37545776]
[77.20127869 328.29010010]
[80.80902100 313.63928223]
[88.08659363 300.42190552]
[98.53780365 289.53912354]
[111.45006561 281.73297119]
[125.94300079 277.53570557]
[125.63094330 262.53894043]
[125.31888580 247.54219055]
[125.00683594 232.54542542]
[124.69477844 217.54867554]
[124.38272095 202.55192566]
[124.07066345 187.55517578]
[123.75860596 172.55841064]
[123.44654846 157.56166077]
[123.13449860 142.56491089]
[115.87919617 140.66474915]
[112.61370087 155.30499268]
[102.33110046 166.22598267]
[87.91384125 170.36634827]
[73.40339661 166.56542969]
[62.86737061 155.88871765]
[59.25925064 141.32913208]
[63.58920288 126.97006989]
[56.33390045 125.06991577]
[41.47085571 127.09225464]
[34.24482346 140.82411194]
[20.31259727 147.65585327]
[5.03140450 144.96054077]
[-5.72282648 133.77456665]
[-7.81487417 118.39916229]
[-0.44030347 104.74649048]
[13.56521320 98.06628418]
[28.81626892 100.92722321]
[39.44852066 112.22920227]
[54.31156540 110.20687103]
[57.40988922 95.53034210]
[44.63253021 87.67292023]
[31.85517502 79.81549072]
[19.07781601 71.95806885]
[6.53772020 80.59900665]
[-8.43400478 83.38600159]
[-23.24341774 79.83618164]
[-35.32469559 70.56458282]
[-42.58468628 57.17755508]
[-43.76555252 41.99449158]
[-38.66269684 27.64594650]
[-28.16022873 16.61788940]
[-14.07775879 10.82100105]
[1.14483964 11.25962639]
[14.87015820 17.85777092]
[24.72020340 29.47226524]
[28.98839569 44.09083176]
[26.93524170 59.18070984]
[39.71260071 67.03813934]
[52.48995590 74.89556122]
[65.26731110 82.75299072]
[71.73634338 78.95803070]
[91.14342499 67.57317352]
[90.51944733 52.58615494]
[89.89546967 37.59914017]
[89.27149200 22.61212158]
[88.64751434 7.62510586]
[74.36186218 2.43007016]
[63.15506363 -7.84008837]
[56.73608398 -21.61924362]
[56.08376694 -36.80617905]
[61.29759216 -51.08498764]
[71.58248138 -62.27826691]
[85.37007141 -68.67911530]
[100.55784607 -69.31144714]
[114.82978821 -64.07884979]
[126.00952911 -53.77923965]
[132.39222717 -39.98324585]
[133.00459290 -24.79464722]
[127.75321960 -10.52960205]
[117.43891144 0.63657707]
[103.63453674 7.00112867]
[104.25850677 21.98814392]
[104.88248444 36.97516251]
[105.50646210 51.96217728]
[106.13043976 66.94919586]
[113.08171844 69.76517487]
[118.71389008 55.86270142]
[132.61627197 61.49509048]
[126.98427582 75.39712524]
[133.93556213 78.21310425]
[144.81437683 67.88590240]
[146.66726685 51.95020676]
[160.35722351 43.58572006]
[175.38249207 49.20896530]
[180.21696472 64.50626373]
[171.15205383 77.74284363]
[155.14158630 78.76472473]
[144.26275635 89.09193420]
[146.34170532 96.29804230]
[160.75392151 92.14015198]
[173.17599487 83.73229980]
[185.01086426 92.94837952]
[179.90284729 107.05186462]
[164.91180420 106.55236816]
[150.49958801 110.71025848]
[152.57853699 117.91636658]
[167.28649902 120.86184692]
[181.99446106 123.80732727]
[196.70242310 126.75280762]
[211.41038513 129.69828796]
[220.18138123 117.24881744]
[233.26106262 109.44870758]
[248.38331604 107.64939880]
[262.92810059 112.16261292]
[274.37545776 122.20642090]
[280.74203491 136.04066467]
[280.92483521 151.26849365]
[274.89212036 165.25157166]
[263.68917847 175.56726074]
[249.25691223 180.42829895]
[234.09582520 178.99247742]
[220.83267212 171.50857544]
[211.76538086 159.27322388]
[208.46490479 144.40625000]
[193.75694275 141.46076965]
[179.04898071 138.51528931]
[164.34101868 135.56980896]
[149.63305664 132.62432861]
[138.13125610 142.25285339]
[138.44329834 157.24960327]
[138.75535583 172.24635315]
[139.06741333 187.24311829]
[139.37947083 202.23986816]
[139.69152832 217.23661804]
[140.00358582 232.23336792]
[140.31564331 247.23013306]
[140.62770081 262.22686768]
[140.93975830 277.22363281]
[155.59474182 280.81439209]
[168.82055664 288.07666016]
[179.71542358 298.51525879]
[187.53651428 311.41845703]
[191.75059509 325.90652466]
[192.07031250 340.99163818]
[188.47389221 355.64523315]
[181.20652771 368.86822510]
[170.76371765 379.75906372]
[157.85749817 387.57519531]
[143.36779785 391.78366089]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[29 40]
[30 39]
[41 61]
[42 60]
[43 59]
[44 58]
[63 86]
[64 85]
[65 84]
[66 83]
[67 82]
[91 99]
[92 98]
[107 129]
[108 128]
[109 127]
[110 126]
[111 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
