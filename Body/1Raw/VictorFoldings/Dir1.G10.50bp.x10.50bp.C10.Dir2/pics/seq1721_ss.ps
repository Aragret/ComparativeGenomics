%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAAAGGACAGGGGGGGGGGUUUAACUAAAACCCCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGxxxxxxxxxxUGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGAAAACCUUUCCCCCCCCCCUUCCAAGGACA\
) } def
/len { sequence length } bind def

/coor [
[80.41807556 332.93090820]
[67.49891663 325.17254639]
[56.71762085 314.64352417]
[48.65560532 301.91165161]
[43.74764633 287.66354370]
[42.25842285 272.66757202]
[44.26824570 257.73248291]
[49.66872787 243.66366577]
[58.16863251 231.21984863]
[69.30957031 221.07212830]
[82.49071503 213.76774597]
[97.00123596 209.70060730]
[96.38540649 194.71325684]
[95.76958466 179.72590637]
[95.15375519 164.73855591]
[94.53793335 149.75120544]
[93.92210388 134.76383972]
[93.30628204 119.77648926]
[80.39358521 112.14352417]
[66.96613312 118.82959747]
[53.53868484 125.51567078]
[40.11123657 132.20175171]
[26.68378448 138.88781738]
[13.25633621 145.57389832]
[6.81517696 160.26713562]
[-8.72487450 164.25289917]
[-21.44281960 154.47366333]
[-21.58254242 138.43121338]
[-9.03685570 128.43196106]
[6.57026052 132.14645386]
[19.99770927 125.46037292]
[33.42515945 118.77429962]
[46.85260773 112.08822632]
[60.28005981 105.40214539]
[73.70750427 98.71607208]
[81.86417389 86.12763214]
[82.47999573 71.14028168]
[75.31578827 57.03408813]
[83.56908417 44.63520050]
[84.18490601 29.64784813]
[76.01770782 19.61288643]
[76.87549591 7.10546684]
[85.74954224 -1.17181921]
[86.67295837 -16.14336967]
[87.59636688 -31.11491966]
[88.51978302 -46.08646774]
[89.44319916 -61.05801773]
[77.27199554 -52.29092407]
[62.43709564 -54.51032639]
[53.36460876 -66.45561981]
[55.20764160 -81.34195709]
[66.91936493 -90.71402740]
[81.84760284 -89.24854279]
[91.51347351 -77.77715302]
[94.26971436 -92.52175140]
[97.02596283 -107.26634979]
[99.78220367 -122.01094818]
[102.53844452 -136.75553894]
[93.87509918 -149.70097351]
[96.88036346 -164.61482239]
[109.27524567 -172.79421997]
[112.03148651 -187.53881836]
[110.52829742 -196.61274719]
[114.99865723 -202.55650330]
[118.05705261 -217.24139404]
[121.11544800 -231.92628479]
[122.34606171 -246.87573242]
[121.73023224 -261.86306763]
[121.11441040 -276.85043335]
[107.08217621 -282.85537720]
[97.05148315 -294.35961914]
[93.01393890 -309.07904053]
[95.77118683 -324.09103394]
[104.77578735 -336.41500854]
[118.23986053 -343.60397339]
[133.49011230 -344.23062134]
[147.49858093 -338.17047119]
[157.48388672 -326.62680054]
[161.46343994 -311.89160156]
[158.64709473 -296.89056396]
[149.59403992 -284.60217285]
[136.10176086 -277.46624756]
[136.71759033 -262.47891235]
[137.33341980 -247.49154663]
[151.88037109 -243.83283997]
[159.51333618 -256.74554443]
[167.14630127 -269.65823364]
[166.77351379 -286.05316162]
[180.92420959 -294.34109497]
[195.04135132 -285.99615479]
[194.60244751 -269.60287476]
[180.05900574 -262.02526855]
[172.42604065 -249.11257935]
[164.79306030 -236.19987488]
[154.88429260 -228.58616638]
[144.44078064 -226.39181519]
[135.80033875 -228.86788940]
[132.74194336 -214.18299866]
[129.68354797 -199.49810791]
[126.77608490 -184.78257751]
[124.01983643 -170.03797913]
[132.62298584 -157.93338013]
[130.03779602 -142.94099426]
[117.28304291 -133.99929810]
[114.52680206 -119.25469971]
[111.77055359 -104.51010895]
[109.01431274 -89.76551056]
[106.25807190 -75.02091217]
[104.41474915 -60.13460541]
[103.49133301 -45.16305542]
[102.56791687 -30.19150543]
[101.64450836 -15.21995544]
[100.72109222 -0.24840559]
[109.39073944 14.97925758]
[99.17226410 30.26367378]
[98.55643463 45.25102615]
[105.76469421 58.28522110]
[97.46735382 71.75610352]
[96.85152435 86.74346161]
[106.28517914 82.56797791]
[118.72006989 85.90073395]
[128.27859497 98.12255096]
[141.42022705 105.35425568]
[154.56185913 112.58596039]
[167.70349121 119.81765747]
[184.49531555 122.15666962]
[186.89614868 138.93975830]
[171.43356323 145.89280701]
[160.47178650 132.95928955]
[147.33015442 125.72758484]
[134.18852234 118.49588776]
[121.04689026 111.26418304]
[108.29363251 119.16066742]
[108.90946198 134.14802551]
[109.52528381 149.13537598]
[110.14111328 164.12272644]
[110.75693512 179.11007690]
[111.37276459 194.09742737]
[111.98858643 209.08479309]
[126.78385925 211.94775391]
[140.51983643 218.14611816]
[152.45573425 227.34562683]
[161.94789124 239.05015564]
[168.48439026 252.62847900]
[171.71272278 267.34835815]
[171.45880127 282.41592407]
[167.73631287 297.01867676]
[160.74600220 310.36904907]
[150.86486816 321.74707031]
[138.62576294 330.53918457]
[124.68873596 336.27117920]
[109.80539703 338.63400269]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[36 119]
[37 118]
[39 116]
[40 115]
[43 113]
[44 112]
[45 111]
[46 110]
[47 109]
[54 108]
[55 107]
[56 106]
[57 105]
[58 104]
[61 101]
[62 100]
[64 99]
[65 98]
[66 97]
[67 84]
[68 83]
[69 82]
[85 94]
[86 93]
[87 92]
[122 132]
[123 131]
[124 130]
[125 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
