%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCCAUAAGGGGGGGGGGACCUGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACACAUUCGAAGAAxxxxxxxxxxAACCAACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCCCCCCCCCCCACCAUAA\
) } def
/len { sequence length } bind def

/coor [
[98.62842560 458.83642578]
[84.78248596 452.82037354]
[73.07382202 443.29095459]
[64.37129974 430.95529175]
[59.32069778 416.72879028]
[58.29680634 401.66708374]
[61.37560654 386.88793945]
[68.32862854 373.48800659]
[78.63991547 362.46166992]
[91.54429626 354.62716675]
[106.08418274 350.56585693]
[106.08418274 335.56585693]
[106.08418274 320.56585693]
[106.08418274 305.56585693]
[106.08418274 290.56585693]
[106.08418274 275.56585693]
[106.08418274 260.56585693]
[106.08418274 245.56585693]
[106.08418274 230.56585693]
[106.08418274 215.56585693]
[102.91860199 208.83349609]
[106.24346161 200.25460815]
[106.55551910 185.25785828]
[110.04282379 151.99838257]
[105.14127350 137.82182312]
[100.23972321 123.64526367]
[84.26290894 117.64936066]
[76.48200226 102.46164703]
[61.83849716 99.21081543]
[47.19499588 95.95999146]
[38.43347168 108.34996033]
[25.63033295 116.41982269]
[10.75318146 118.96620178]
[-3.92568445 115.63176727]
[-16.17633629 106.95499420]
[-24.14996338 94.28350067]
[-26.65786743 79.56481171]
[-41.30136871 76.31398773]
[-55.94487000 73.06316376]
[-68.24281311 82.72207642]
[-83.87046051 82.16459656]
[-95.44890594 71.65395355]
[-97.51116180 56.15294647]
[-89.08350372 42.98068237]
[-74.14520264 38.35670090]
[-59.74967194 44.46430206]
[-52.69404221 58.41966248]
[-38.05054092 61.67048645]
[-23.40704155 64.92131042]
[-14.90662861 52.64645004]
[-2.32017684 44.53925323]
[12.45119667 41.86131287]
[27.16212082 45.05134583]
[39.56428146 53.65367126]
[47.75004196 66.38302612]
[50.44582367 81.31649017]
[65.08932495 84.56731415]
[79.73282623 87.81814575]
[88.24784088 79.48067474]
[99.74776459 76.35486603]
[104.35332489 62.07940292]
[108.95889282 47.80394363]
[113.56445312 33.52848434]
[118.02127075 19.20588684]
[122.32885742 4.83770180]
[125.88362122 -9.73500061]
[128.67594910 -24.47280693]
[131.46826172 -39.21061325]
[134.26058960 -53.94841766]
[120.73088837 -60.64541245]
[109.51050568 -70.74519348]
[101.43206787 -83.49828339]
[97.09503937 -97.95832825]
[96.82127380 -113.05228424]
[100.63107300 -127.66009521]
[108.24172974 -140.69775391]
[119.08848572 -151.19776917]
[132.36642456 -158.38099670]
[147.09025574 -161.71437073]
[162.16737366 -160.95054626]
[176.47892761 -156.14619446]
[188.96293640 -147.65783691]
[198.69297791 -136.11537170]
[204.94705200 -122.37530518]
[207.26103210 -107.45726013]
[205.46321106 -92.46824646]
[199.68701172 -78.52056122]
[190.36106873 -66.64919281]
[178.17741394 -57.73509598]
[164.04016113 -52.43974686]
[148.99839783 -51.15609360]
[146.20606995 -36.41828918]
[143.41374207 -21.68048286]
[140.62142944 -6.94267654]
[154.44677734 -12.76157379]
[167.71688843 -5.76842642]
[170.73237610 8.92534161]
[161.28916931 20.57977486]
[146.28948975 20.67642403]
[136.69703674 9.14528656]
[132.38945007 23.51347160]
[133.48834229 30.87133026]
[127.83992004 38.13404846]
[123.23435211 52.40950775]
[118.62878418 66.68496704]
[114.02322388 80.96042633]
[122.45405579 92.58573151]
[122.60343933 106.94554138]
[114.41628265 118.74371338]
[119.31783295 132.92027283]
[124.21938324 147.09683228]
[128.73591614 132.79295349]
[142.34274292 126.47992706]
[156.18107605 132.26788330]
[161.24140930 146.38853455]
[154.22918701 159.64857483]
[139.71018982 163.41506958]
[153.61274719 169.04702759]
[167.51530457 174.67898560]
[181.41786194 180.31094360]
[197.57586670 177.50898743]
[207.87223816 190.27287292]
[201.71495056 205.47219849]
[185.43809509 207.47122192]
[175.78590393 194.21350098]
[161.88334656 188.58154297]
[147.98078918 182.94958496]
[134.07823181 177.31762695]
[121.55227661 185.56991577]
[121.24021912 200.56666565]
[121.08418274 215.56585693]
[121.08418274 230.56585693]
[121.08418274 245.56585693]
[121.08418274 260.56585693]
[121.08418274 275.56585693]
[121.08418274 290.56585693]
[121.08418274 305.56585693]
[121.08418274 320.56585693]
[121.08418274 335.56585693]
[121.08418274 350.56585693]
[135.62406921 354.62716675]
[148.52844238 362.46166992]
[158.83973694 373.48800659]
[165.79275513 386.88793945]
[168.87155151 401.66708374]
[167.84765625 416.72879028]
[162.79705811 430.95529175]
[154.09452820 443.29095459]
[142.38587952 452.82037354]
[128.53993225 458.83642578]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[24 111]
[25 110]
[26 109]
[28 58]
[29 57]
[30 56]
[37 49]
[38 48]
[39 47]
[60 106]
[61 105]
[62 104]
[63 103]
[64 101]
[65 100]
[66 94]
[67 93]
[68 92]
[69 91]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
