%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUAGUCCUGGGGGGGGGGCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGxxxxxxxxxxUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACACCCCCCCCCCAUCCUAGGCCU\
) } def
/len { sequence length } bind def

/coor [
[55.64150238 407.38751221]
[44.47422409 397.28872681]
[35.65095139 385.08856201]
[29.55740547 371.32040405]
[26.45996666 356.58612061]
[26.49404144 341.52978516]
[29.65814018 326.80966187]
[35.81394196 313.06921387]
[44.69234467 300.90914917]
[55.90522003 290.86099243]
[68.96238708 283.36407471]
[83.29305267 278.74606323]
[81.75576019 263.82507324]
[80.21846771 248.90403748]
[78.68117523 233.98303223]
[77.14388275 219.06201172]
[75.14781952 204.19540405]
[72.69489288 189.39733887]
[70.24196625 174.59925842]
[67.78903961 159.80117798]
[65.33611298 145.00309753]
[62.88318253 130.20501709]
[60.43025589 115.40693665]
[50.09934998 104.53162384]
[35.44662857 101.32262421]
[20.79390144 98.11363220]
[15.07739162 112.02379608]
[7.03209305 124.72986603]
[-3.09750605 135.84573364]
[-15.00357819 145.03356934]
[-28.32431221 152.01420593]
[-42.65490341 156.57548523]
[-57.55986404 158.57879639]
[-72.58625031 157.96325684]
[-87.27742004 154.74758911]
[-101.18693542 149.02949524]
[-113.89209747 140.98275757]
[-125.00681305 130.85189819]
[-134.19331360 118.94478607]
[-141.17242432 105.62326050]
[-145.73207092 91.29215240]
[-147.73370361 76.38696289]
[-147.11645508 61.36064911]
[-143.89912415 46.66983795]
[-138.17945862 32.76097488]
[-130.13127136 20.05672646]
[-119.99916077 8.94316387]
[-108.09100342 -0.24198453]
[-94.76868439 -7.21959209]
[-80.43705750 -11.77761745]
[-65.53164673 -13.77754784]
[-50.50540161 -13.15860653]
[-35.81495667 -9.93960381]
[-21.90673828 -4.21836090]
[-9.20340347 3.83125997]
[1.90900934 13.96464062]
[11.09280682 25.87383842]
[18.06890297 39.19694519]
[22.62530327 53.52908707]
[24.62354279 68.43473053]
[24.00289917 83.46090698]
[38.65562439 86.66989899]
[53.30834961 89.87889862]
[64.99456024 80.47504425]
[64.99456024 65.47504425]
[64.99456024 50.47504044]
[50.49703598 46.23256302]
[37.78276062 38.07635117]
[27.88241005 26.66759300]
[21.59856796 12.93114376]
[19.44063568 -2.01944137]
[21.58354759 -16.97218704]
[27.85358620 -30.71494102]
[37.74246979 -42.13364029]
[50.44854736 -50.30261993]
[64.94179535 -54.55966187]
[80.04731750 -54.55966187]
[94.54056549 -50.30261993]
[107.24664307 -42.13364029]
[117.13552856 -30.71494102]
[123.40556335 -16.97218704]
[125.54847717 -2.01944137]
[123.39054871 12.93114376]
[117.10670471 26.66759300]
[107.20635223 38.07635117]
[94.49207306 46.23256302]
[79.99456024 50.47504044]
[79.99456024 65.47504425]
[79.99456024 80.47504425]
[93.41725159 74.66217041]
[106.95938873 76.60971832]
[116.73727417 84.77156067]
[130.55085754 78.92477417]
[144.36444092 73.07798767]
[158.17802429 67.23119354]
[171.99160767 61.38440704]
[185.80519104 55.53762054]
[199.55801392 49.54932404]
[213.24864197 43.42015076]
[226.93927002 37.29097748]
[240.62989807 31.16180229]
[246.02845764 16.30814743]
[260.38409424 9.69818592]
[275.17984009 15.25349045]
[281.63763428 29.67819786]
[275.92620850 44.41438293]
[261.43405151 50.71933365]
[246.75906372 44.85242844]
[233.06843567 50.98160172]
[219.37782288 57.11077499]
[205.68719482 63.23994827]
[200.83741760 68.87837219]
[191.65197754 69.35120392]
[177.83839417 75.19799042]
[164.02481079 81.04477692]
[150.21122742 86.89157104]
[136.39764404 92.73835754]
[122.58406067 98.58514404]
[119.52796173 113.88278961]
[106.79953003 124.36014557]
[89.42733765 124.43341827]
[75.22833252 112.95401001]
[77.68125916 127.75209045]
[80.13418579 142.55017090]
[82.58712006 157.34825134]
[85.04004669 172.14633179]
[87.49297333 186.94439697]
[89.94589996 201.74247742]
[93.34503174 205.86573792]
[94.64870453 210.42709351]
[94.04823303 214.53915405]
[92.06489563 217.52471924]
[93.60218811 232.44573975]
[95.13948059 247.36674500]
[96.67677307 262.28778076]
[98.21406555 277.20877075]
[113.18526459 278.80783081]
[127.49671173 283.48501587]
[140.52278137 291.03585815]
[151.69403076 301.13024902]
[160.52210999 313.32693481]
[166.62107849 327.09271240]
[169.72430420 341.82577515]
[169.69615173 356.88211060]
[166.53784180 371.60348511]
[160.38745117 385.34634399]
[151.51383972 397.50991821]
[140.30491638 407.56246948]
[127.25069427 415.06454468]
[112.92185211 419.68817139]
[97.94477844 421.23123169]
[82.97421265 419.62628174]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 128]
[18 127]
[19 126]
[20 125]
[21 124]
[22 123]
[23 122]
[24 63]
[25 62]
[26 61]
[64 89]
[65 88]
[66 87]
[92 118]
[93 117]
[94 116]
[95 115]
[96 114]
[97 113]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
