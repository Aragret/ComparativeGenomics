%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAUUUAACGGGGGGGGGGUAAAACCCCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUxxxxxxxxxxUGAAAACAUUCUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUCCCCCCCCCCGACAAUUAAC\
) } def
/len { sequence length } bind def

/coor [
[75.24899292 380.11831665]
[61.40305710 374.10226440]
[49.69439316 364.57284546]
[40.99187088 352.23718262]
[35.94126892 338.01068115]
[34.91737747 322.94897461]
[37.99617386 308.16983032]
[44.94919586 294.76989746]
[55.26048279 283.74356079]
[68.16486359 275.90905762]
[82.70475006 271.84774780]
[82.70475006 256.84774780]
[82.70475006 241.84774780]
[82.70475006 226.84774780]
[82.70475006 211.84774780]
[82.70475006 196.84774780]
[82.70475006 181.84774780]
[82.70475006 166.84774780]
[82.70475006 151.84774780]
[82.70475006 136.84774780]
[70.53291321 128.08154297]
[56.30613327 132.83535767]
[42.07935333 137.58917236]
[27.85257530 142.34298706]
[25.46440887 157.46102905]
[16.31478691 169.73062134]
[2.50622797 176.33230591]
[-12.78816319 175.74906921]
[-26.05384827 168.11492920]
[-34.24246979 155.18414307]
[-35.47233963 139.92813110]
[-29.46084785 125.85260010]
[-17.58938599 116.19200897]
[-2.58593321 113.16629028]
[12.10182953 117.47073364]
[23.09876060 128.11619568]
[37.32553864 123.36238861]
[51.55231857 118.60857391]
[65.77909851 113.85475922]
[62.10651779 97.92470551]
[65.68122864 81.51297760]
[76.19216156 67.84123993]
[91.93138123 59.75730896]
[110.06369781 59.14656830]
[106.66071320 44.53767776]
[103.25773621 29.92878532]
[99.85475922 15.31989288]
[96.45178223 0.71100003]
[93.04880524 -13.89789295]
[89.64582825 -28.50678444]
[82.60069275 -41.74937057]
[72.38721466 -52.73503494]
[57.32406616 -57.57365417]
[54.32471085 -72.16313934]
[44.11122894 -83.14880371]
[28.28542900 -87.44718933]
[24.35720253 -103.36890411]
[36.36756897 -114.53505707]
[51.96129990 -109.45886993]
[55.09689713 -93.36228943]
[65.31037903 -82.37662506]
[79.64298248 -78.32376862]
[83.37287903 -62.94851685]
[93.58635712 -51.96284866]
[90.58580780 -66.65967560]
[90.98968506 -81.65423584]
[94.77703094 -96.16822815]
[101.75125885 -109.44829559]
[111.55036926 -120.80512238]
[123.66572571 -129.64923096]
[137.46847534 -135.52154541]
[152.24217224 -138.11726379]
[167.21998596 -137.30166626]
[181.62446594 -133.11708069]
[194.70796204 -125.78070831]
[205.79133606 -115.67335510]
[214.29931641 -103.31964111]
[219.79028320 -89.36079407]
[221.97923279 -74.52136993]
[220.75253296 -59.57161713]
[216.17385864 -45.28750610]
[208.48088074 -32.41047287]
[198.07289124 -21.60890198]
[185.49014282 -13.44346333]
[171.38574219 -8.33798695]
[156.49179077 -6.55747795]
[141.58137512 -8.19435406]
[127.42842102 -13.16365242]
[114.76755524 -21.20743752]
[104.25472260 -31.90976334]
[107.65769958 -17.30087090]
[111.06067657 -2.69197798]
[114.46365356 11.91691494]
[117.86663055 26.52580643]
[121.26960754 41.13470078]
[124.67258453 55.74359131]
[138.05886841 62.51170731]
[151.84124756 56.59174347]
[165.62364197 50.67177963]
[179.40602112 44.75181580]
[185.03016663 29.98210335]
[199.48478699 23.59153557]
[214.19421387 29.37152672]
[220.43161011 43.89291000]
[214.49642944 58.54040527]
[199.90991211 64.62391663]
[185.32597351 58.53419876]
[171.54359436 64.45416260]
[157.76121521 70.37412262]
[143.97883606 76.29409027]
[145.22570801 91.24217224]
[159.79841614 94.79693604]
[174.37110901 98.35169983]
[188.94381714 101.90646362]
[200.05142212 91.20017242]
[215.18843079 88.22111511]
[229.52465820 93.91989899]
[238.48547363 106.47805023]
[239.21151733 121.88832092]
[231.47111511 135.23333740]
[217.73419189 142.25477600]
[202.38415527 140.71209717]
[190.31913757 131.09756470]
[185.38905334 116.47916412]
[170.81636047 112.92440033]
[156.24365234 109.36963654]
[141.67094421 105.81488037]
[135.55096436 119.99028778]
[124.98770905 130.58793640]
[111.70589447 136.37068176]
[97.70475006 136.84774780]
[97.70475006 151.84774780]
[97.70475006 166.84774780]
[97.70475006 181.84774780]
[97.70475006 196.84774780]
[97.70475006 211.84774780]
[97.70475006 226.84774780]
[97.70475006 241.84774780]
[97.70475006 256.84774780]
[97.70475006 271.84774780]
[112.24463654 275.90905762]
[125.14901733 283.74356079]
[135.46029663 294.76989746]
[142.41333008 308.16983032]
[145.49212646 322.94897461]
[144.46823120 338.01068115]
[139.41763306 352.23718262]
[130.71510315 364.57284546]
[119.00644684 374.10226440]
[105.16050720 380.11831665]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 39]
[22 38]
[23 37]
[24 36]
[44 96]
[45 95]
[46 94]
[47 93]
[48 92]
[49 91]
[50 90]
[51 64]
[52 63]
[54 61]
[55 60]
[97 110]
[98 109]
[99 108]
[100 107]
[111 127]
[112 126]
[113 125]
[114 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
