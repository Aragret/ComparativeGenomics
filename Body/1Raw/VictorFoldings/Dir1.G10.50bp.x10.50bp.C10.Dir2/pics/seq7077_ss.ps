%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCCCCUAGGGGGGGGGGUUCUCAGGCUACACCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUxxxxxxxxxxCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCCCCCCCCCCCAUUCCCCCUA\
) } def
/len { sequence length } bind def

/coor [
[86.00615692 490.67639160]
[72.78595734 483.40393066]
[61.89915466 472.95690918]
[54.08802414 460.04766846]
[49.88514328 445.55636597]
[49.57706833 430.47100830]
[53.18481064 415.82019043]
[60.46238327 402.60281372]
[70.91358948 391.72003174]
[83.82585144 383.91387939]
[98.31878662 379.71661377]
[98.00673676 364.71984863]
[97.69467926 349.72308350]
[97.38262177 334.72634888]
[97.07056427 319.72958374]
[96.75850677 304.73281860]
[96.44644928 289.73608398]
[96.13439941 274.73931885]
[95.82234192 259.74258423]
[95.51028442 244.74581909]
[81.57062531 239.39649963]
[70.71158600 229.08987427]
[64.60934448 215.37391663]
[64.22225189 200.32606506]
[69.64041138 186.23857117]
[80.06725311 175.26934814]
[93.93646240 169.11135864]
[85.93606567 156.54780579]
[93.38459015 142.58966064]
[93.07254028 127.59291077]
[80.02716827 121.65859985]
[71.13927460 109.78620148]
[68.97727203 94.60971832]
[74.54549408 79.79263306]
[86.92293549 69.14362335]
[77.65798950 57.34698105]
[68.39303589 45.55034256]
[55.42495728 53.13603210]
[41.54471970 58.88518143]
[27.01090240 62.69069290]
[12.09426212 64.48166656]
[-2.92731404 64.22473907]
[-17.77398300 61.92469406]
[-32.16915894 57.62438583]
[-45.84466934 51.40392685]
[-58.54574966 43.37919235]
[-70.03578186 33.69968414]
[-80.10072327 22.54572678]
[-88.55305481 10.12510777]
[-95.23532867 -3.33078289]
[-100.02305603 -17.57126999]
[-102.82703400 -32.33106232]
[-103.59503937 -47.33518982]
[-102.31275940 -62.30414200]
[-99.00407410 -76.95905304]
[-93.73063660 -91.02690887]
[-86.59068298 -104.24563599]
[-77.71721649 -116.36898041]
[-67.27555847 -127.17108917]
[-55.46022034 -136.45071411]
[-42.49132156 -144.03500366]
[-28.61046028 -149.78265381]
[-14.07623100 -153.58659363]
[0.84060311 -155.37594604]
[15.86215115 -155.11740112]
[30.70857048 -152.81575012]
[45.10328293 -148.51388550]
[58.77811813 -142.29193115]
[71.47833252 -134.26582336]
[82.96731567 -124.58507538]
[93.03104401 -113.43003082]
[101.48204041 -101.00849915]
[108.16285706 -87.55187988]
[112.94903564 -73.31088257]
[115.75141907 -58.55078506]
[116.51779938 -43.54656982]
[115.23389435 -28.57775879]
[111.92362976 -13.92320633]
[106.64866638 0.14407991]
[99.50727844 13.36203480]
[90.63250732 25.48441696]
[80.18967438 36.28539276]
[89.45462799 48.08203125]
[98.71957397 59.87867355]
[113.53733063 62.20977402]
[125.97677612 53.82763290]
[138.41621399 45.44548798]
[150.85565186 37.06334686]
[163.29508972 28.68120384]
[149.43414307 22.94761086]
[145.07025146 8.59642982]
[153.39305115 -3.88278723]
[168.31927490 -5.36874247]
[178.93904114 5.22467661]
[177.49050903 20.15397263]
[190.73309326 13.10883808]
[203.97567749 6.06370306]
[217.21826172 -0.98143190]
[230.46084595 -8.02656651]
[238.68418884 -22.21489334]
[255.08062744 -21.91685486]
[262.78292847 -7.43904638]
[253.86758423 6.32500219]
[237.50598145 5.21601868]
[224.26339722 12.26115417]
[211.02081299 19.30628777]
[197.77822876 26.35142326]
[184.53564453 33.39655685]
[171.67723083 41.12064362]
[159.23779297 49.50278473]
[146.79835510 57.88492966]
[134.35891724 66.26707458]
[121.91947937 74.64921570]
[127.91977692 82.80558777]
[131.09989929 92.18711090]
[131.28692627 101.87135315]
[128.59568787 110.94699097]
[123.40573883 118.59957886]
[116.31412506 124.18453217]
[108.06929016 127.28085327]
[108.38134766 142.27760315]
[116.40406799 155.91383362]
[108.93321991 168.79931641]
[123.04658508 174.37503052]
[133.92070007 184.90101624]
[139.92019653 198.75091553]
[140.15939331 213.80184937]
[134.63301086 227.75978088]
[124.21210480 238.50920105]
[110.50703430 244.43376160]
[110.81909180 259.43051147]
[111.13114929 274.42727661]
[111.44320679 289.42401123]
[111.75526428 304.42077637]
[112.06732178 319.41754150]
[112.37937164 334.41427612]
[112.69142914 349.41104126]
[113.00348663 364.40777588]
[113.31554413 379.40454102]
[127.97053528 382.99530029]
[141.19635010 390.25756836]
[152.09121704 400.69616699]
[159.91230774 413.59936523]
[164.12637329 428.08743286]
[164.44610596 443.17254639]
[160.84967041 457.82614136]
[153.58230591 471.04913330]
[143.13951111 481.93997192]
[130.23327637 489.75610352]
[115.74359131 493.96456909]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[27 123]
[29 121]
[30 120]
[35 84]
[36 83]
[37 82]
[85 113]
[86 112]
[87 111]
[88 110]
[89 109]
[95 108]
[96 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
