%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUUCCUAGGGGGGGGGGCCACUCACCCUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUxxxxxxxxxxUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCAUACACCACAUGCCCCCCCCCCAAACAUCCUA\
) } def
/len { sequence length } bind def

/coor [
[86.61877441 538.18682861]
[72.77284241 532.17083740]
[61.06417847 522.64141846]
[52.36165237 510.30572510]
[47.31105042 496.07922363]
[46.28715897 481.01754761]
[49.36595917 466.23837280]
[56.31898117 452.83843994]
[66.63026428 441.81210327]
[79.53464508 433.97760010]
[94.07453156 429.91629028]
[94.07453156 414.91629028]
[94.07453156 399.91629028]
[94.07453156 384.91629028]
[94.07453156 369.91629028]
[94.07453156 354.91629028]
[94.07453156 339.91629028]
[94.07453156 324.91629028]
[94.07453156 309.91629028]
[94.07453156 294.91629028]
[94.07453156 279.91629028]
[79.53214264 276.36563110]
[66.25418854 269.43338013]
[55.01450729 259.51867676]
[46.46932602 247.19456482]
[41.11892700 233.17497253]
[39.27837372 218.27326965]
[41.05897141 203.35514832]
[46.36152267 189.28829956]
[54.88186264 176.89192200]
[66.12829590 166.88908386]
[79.44996643 159.86445618]
[94.07453156 156.23020935]
[94.07453156 141.23020935]
[94.07453156 126.23021698]
[94.07453156 111.23021698]
[86.88314819 124.39395142]
[76.88291168 135.57408142]
[62.07667160 137.97726440]
[49.05368805 130.53401184]
[43.60960388 116.55682373]
[48.16721725 102.26598358]
[60.69837952 94.02133942]
[75.46620941 96.65025330]
[63.76658630 87.26309204]
[52.06696320 77.87593079]
[33.83280182 75.53173828]
[28.05270386 58.99116898]
[16.16032410 49.84943390]
[4.26794386 40.70769882]
[-7.62443590 31.56596565]
[-23.94366455 29.94892120]
[-30.45542908 14.89804268]
[-20.46098709 1.89638376]
[-4.24176073 4.31893635]
[1.51729846 19.67358589]
[13.40967846 28.81532097]
[25.30205727 37.95705414]
[37.19443893 47.09878922]
[49.26692581 45.84883499]
[59.25914764 53.42342377]
[61.45412445 66.17630768]
[73.15374756 75.56346893]
[84.85337067 84.95063019]
[79.08643341 71.10352325]
[73.31948853 57.25641251]
[62.56137848 46.80351639]
[55.94691086 33.34064865]
[54.24718475 18.43726158]
[57.66034698 3.83074498]
[65.78849792 -8.77612305]
[77.68408966 -17.91367531]
[91.96038055 -22.51668739]
[106.95307159 -22.04855347]
[120.91437531 -16.56384850]
[132.21672058 -6.70196104]
[139.54254150 6.38744307]
[142.03778076 21.17844391]
[139.41159058 35.94675827]
[131.97009277 48.97074127]
[120.58126831 58.73183060]
[113.96184540 72.19226074]
[107.34241486 85.65269470]
[119.60478210 77.01357269]
[131.86715698 68.37445831]
[128.60438538 53.55453873]
[131.25698853 38.65464783]
[139.39009094 25.93983841]
[151.73808289 17.33086395]
[166.40155029 14.11405373]
[181.13929749 16.74918175]
[193.71102905 24.80404091]
[205.97340393 16.16492653]
[218.23577881 7.52580976]
[230.49813843 -1.11330652]
[232.95025635 -16.72620773]
[245.77316284 -25.96463585]
[261.35925293 -23.34759331]
[270.46160889 -10.42772579]
[267.67993164 5.12983847]
[254.66453552 14.09507179]
[239.13725281 11.14906120]
[226.87489319 19.78817749]
[214.61251831 28.42729378]
[202.35015869 37.06641006]
[205.70359802 51.61576462]
[203.22448730 66.38056946]
[195.25988770 79.10573578]
[182.99707031 87.83563232]
[168.28666687 91.21459961]
[153.36331177 88.69736481]
[140.50627136 80.63682556]
[128.24389648 89.27593994]
[115.98152924 97.91506195]
[109.07453156 111.23021698]
[109.07453156 126.23021698]
[109.07453156 141.23020935]
[109.07453156 156.23020935]
[123.69909668 159.86445618]
[137.02076721 166.88908386]
[148.26719666 176.89192200]
[156.78753662 189.28829956]
[162.09008789 203.35514832]
[163.87069702 218.27326965]
[162.03013611 233.17497253]
[156.67973328 247.19456482]
[148.13455200 259.51867676]
[136.89488220 269.43338013]
[123.61692810 276.36563110]
[109.07453156 279.91629028]
[109.07453156 294.91629028]
[109.07453156 309.91629028]
[109.07453156 324.91629028]
[109.07453156 339.91629028]
[109.07453156 354.91629028]
[109.07453156 369.91629028]
[109.07453156 384.91629028]
[109.07453156 399.91629028]
[109.07453156 414.91629028]
[109.07453156 429.91629028]
[123.61441803 433.97760010]
[136.51879883 441.81210327]
[146.83007812 452.83843994]
[153.78311157 466.23837280]
[156.86190796 481.01754761]
[155.83801270 496.07922363]
[150.78741455 510.30572510]
[142.08488464 522.64141846]
[130.37622070 532.17083740]
[116.53028870 538.18682861]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[33 118]
[34 117]
[35 116]
[36 115]
[44 64]
[45 63]
[46 62]
[48 59]
[49 58]
[50 57]
[51 56]
[83 114]
[84 113]
[85 112]
[92 105]
[93 104]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
