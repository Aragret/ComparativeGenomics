%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAUCACAGGGGGGGGGGUGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAACAGGGGCCCUCUxxxxxxxxxxCUUCUCCACUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCACCCCCCCCCCACCAACCACA\
) } def
/len { sequence length } bind def

/coor [
[71.49574280 475.44119263]
[57.64980698 469.42517090]
[45.94114304 459.89575195]
[37.23862076 447.56008911]
[32.18801880 433.33355713]
[31.16412735 418.27188110]
[34.24292374 403.49273682]
[41.19594574 390.09280396]
[51.50723267 379.06646729]
[64.41161346 371.23196411]
[78.95149994 367.17065430]
[78.95149994 352.17065430]
[78.95149994 337.17065430]
[78.95149994 322.17065430]
[78.95149994 307.17065430]
[78.95149994 292.17065430]
[78.95149994 277.17065430]
[78.95149994 262.17065430]
[78.95149994 247.17063904]
[78.95149994 232.17063904]
[78.95149994 217.17063904]
[78.95149994 202.17063904]
[66.30701447 195.39479065]
[59.88915634 180.41033936]
[45.87244415 185.75184631]
[31.85573196 191.09336853]
[17.83901787 196.43487549]
[5.19128656 207.72518921]
[-9.15903950 198.69720459]
[-4.45643902 182.40850830]
[12.49750614 182.41816711]
[26.51421928 177.07664490]
[40.53093338 171.73513794]
[54.54764557 166.39363098]
[39.59741974 167.61459351]
[26.18134117 160.90573120]
[18.18922234 148.21218872]
[17.93827248 133.21429443]
[25.50125313 120.26047516]
[38.68537521 113.10652924]
[53.66807938 113.82664490]
[66.10533142 122.21204376]
[72.39110565 135.83148193]
[70.70385742 150.73390198]
[76.48013306 136.89068604]
[82.25640106 123.04747009]
[71.71673584 106.78809357]
[73.72877502 87.51625061]
[87.39960480 73.78452301]
[84.60728455 59.04671478]
[81.81495667 44.30890656]
[75.18646240 30.85294342]
[65.20373535 19.65717697]
[55.22100830 8.46141052]
[45.23828125 -2.73435497]
[35.25555420 -13.93012047]
[20.20147896 -21.72827148]
[23.52749252 -38.35277176]
[40.42303085 -39.75885773]
[46.45132065 -23.91284752]
[56.43404770 -12.71708107]
[66.41677094 -1.52131546]
[76.39949799 9.67444992]
[86.38222504 20.87021637]
[83.72249603 6.10790491]
[84.35092163 -8.87892532]
[88.23717499 -23.36675072]
[95.19362640 -36.65613556]
[104.88443756 -48.10550690]
[116.84177399 -57.16212082]
[130.48835754 -63.38874054]
[145.16535950 -66.48477173]
[160.16423035 -66.30074310]
[174.76086426 -62.84553146]
[188.25054932 -56.28595352]
[199.98207092 -46.93868256]
[209.38905334 -35.25498581]
[216.01734924 -21.79891968]
[219.54695129 -7.22010422]
[219.80747986 7.77763319]
[216.78634644 22.47024155]
[210.62939453 36.14839935]
[201.63389587 48.15176773]
[190.23408508 57.90084839]
[176.98036194 64.92498779]
[162.51254272 68.88507080]
[147.52911377 69.58992767]
[132.75343323 67.00551605]
[118.89881897 61.25661850]
[106.63415527 52.62076569]
[96.55276489 41.51658249]
[99.34509277 56.25439072]
[102.13741302 70.99219513]
[115.49321747 75.38330841]
[125.22927856 85.52571869]
[139.72486877 81.66855621]
[147.27142334 76.40534973]
[154.56221008 77.88529205]
[169.13490295 74.33052826]
[183.70761108 70.77576447]
[198.28031921 67.22100830]
[212.85301208 63.66624451]
[217.08445740 48.90174484]
[228.14237976 38.24257660]
[243.05227661 34.55601120]
[257.80343628 38.83370972]
[268.42788696 49.92499542]
[272.06771851 64.84636688]
[267.74380493 79.58405304]
[256.61926270 90.17368317]
[241.68655396 93.76670837]
[226.96249390 89.39662170]
[216.40777588 78.23894501]
[201.83508301 81.79370880]
[187.26237488 85.34847260]
[172.68966675 88.90322876]
[158.11697388 92.45799255]
[143.58203125 96.16415405]
[129.08644104 100.02131653]
[127.40538025 109.74507141]
[122.56995392 118.34716797]
[115.13671875 124.83749390]
[105.96124268 128.46900940]
[96.09961700 128.82374573]
[90.32334900 142.66696167]
[84.54707336 156.51017761]
[105.33865356 167.35391235]
[108.28855133 188.70857239]
[93.95149994 202.17063904]
[93.95149994 217.17063904]
[93.95149994 232.17063904]
[93.95149994 247.17063904]
[93.95149994 262.17065430]
[93.95149994 277.17065430]
[93.95149994 292.17065430]
[93.95149994 307.17065430]
[93.95149994 322.17065430]
[93.95149994 337.17065430]
[93.95149994 352.17065430]
[93.95149994 367.17065430]
[108.49138641 371.23196411]
[121.39576721 379.06646729]
[131.70704651 390.09280396]
[138.66007996 403.49273682]
[141.73887634 418.27188110]
[140.71498108 433.33355713]
[135.66438293 447.56008911]
[126.96185303 459.89575195]
[115.25319672 469.42517090]
[101.40725708 475.44119263]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 34]
[25 33]
[26 32]
[27 31]
[44 126]
[45 125]
[46 124]
[49 93]
[50 92]
[51 91]
[52 64]
[53 63]
[54 62]
[55 61]
[56 60]
[95 119]
[96 118]
[98 117]
[99 116]
[100 115]
[101 114]
[102 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
