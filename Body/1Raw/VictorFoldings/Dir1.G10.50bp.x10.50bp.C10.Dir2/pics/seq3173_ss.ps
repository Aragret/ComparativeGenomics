%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCACCCAGGGGGGGGGGAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAACUUAAxxxxxxxxxxAGUCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCCCCCCCCCCCACUCACCCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 393.79660034]
[71.19830322 387.78057861]
[59.48964310 378.25115967]
[50.78712082 365.91549683]
[45.73651886 351.68896484]
[44.71262741 336.62728882]
[47.79142761 321.84814453]
[54.74444962 308.44821167]
[65.05573273 297.42187500]
[77.96011353 289.58737183]
[92.50000000 285.52606201]
[92.50000000 270.52606201]
[92.50000000 255.52604675]
[92.50000000 240.52604675]
[92.50000000 225.52604675]
[92.50000000 210.52604675]
[92.50000000 195.52604675]
[92.50000000 180.52604675]
[92.50000000 165.52604675]
[92.50000000 150.52604675]
[92.50000000 135.52604675]
[92.50000000 120.52605438]
[80.14842987 112.01496124]
[66.13171387 117.35647583]
[52.11500168 122.69799042]
[38.09828949 128.03950500]
[30.25170326 142.03273010]
[14.39646244 144.48036194]
[2.69534993 133.50477600]
[4.12445831 117.52550507]
[17.58749771 108.80047607]
[32.75677490 114.02278900]
[46.77348709 108.68127441]
[60.79020309 103.33975983]
[74.80691528 97.99825287]
[82.66433716 85.22089386]
[81.10675812 70.30197906]
[71.97829437 57.37984085]
[78.35218048 43.91793823]
[76.79460144 28.99902725]
[75.23702240 14.08011532]
[65.70358276 5.32983828]
[64.74546051 -7.17220020]
[72.33282471 -16.64527512]
[71.08595276 -31.59336281]
[69.83908081 -46.54145050]
[68.59220123 -61.48953629]
[53.58320618 -61.98606491]
[38.73334503 -64.22171021]
[24.24344254 -68.16624451]
[10.30946445 -73.76631165]
[-2.88015223 -80.94617462]
[-15.14703178 -89.60874939]
[-26.32527924 -99.63687897]
[-36.26372147 -110.89493561]
[-44.82794952 -123.23067474]
[-51.90214920 -136.47726440]
[-57.39064026 -150.45558167]
[-61.21920776 -164.97654724]
[-63.33606339 -179.84381104]
[-63.71258926 -194.85629272]
[-62.34368896 -209.81097412]
[-59.24787140 -224.50561523]
[-54.46701050 -238.74148560]
[-48.06575775 -252.32604980]
[-40.13068771 -265.07562256]
[-30.76910782 -276.81771851]
[-20.10762405 -287.39361572]
[-8.29042149 -296.66021729]
[4.52268505 -304.49227905]
[18.15841293 -310.78381348]
[32.43235779 -315.44973755]
[47.15147400 -318.42700195]
[62.11671066 -319.67532349]
[77.12567139 -319.17779541]
[91.97538757 -316.94116211]
[106.46502686 -312.99566650]
[120.39862823 -307.39465332]
[133.58776855 -300.21389771]
[145.85406494 -291.55050659]
[157.03164673 -281.52163696]
[166.96932983 -270.26290894]
[175.53274536 -257.92660522]
[182.60604858 -244.67953491]
[188.09361267 -230.70086670]
[191.92121887 -216.17964172]
[194.03707886 -201.31224060]
[194.41259766 -186.29972839]
[193.04269409 -171.34513855]
[189.94590759 -156.65069580]
[185.16409302 -142.41516113]
[178.76193237 -128.83100891]
[170.82601929 -116.08198547]
[161.46365356 -104.34049225]
[150.80145264 -93.76531982]
[138.98364258 -84.49948883]
[126.17001343 -76.66830444]
[112.53385925 -70.37768555]
[98.25960541 -65.71268463]
[83.54029083 -62.73641205]
[84.78716278 -47.78832245]
[86.03404236 -32.84023666]
[87.28091431 -17.89215088]
[98.05770874 -4.07691860]
[90.15593719 12.52253437]
[91.71351624 27.44144630]
[93.27109528 42.36035919]
[102.28815460 54.21539688]
[96.02567291 68.74440002]
[97.58325195 83.66331482]
[107.22537231 82.34974670]
[117.26024628 86.96499634]
[124.03680420 97.31110382]
[138.35940552 101.76792145]
[153.83526611 98.48036194]
[163.68885803 109.64978027]
[178.01145935 114.10659790]
[191.88420105 106.53543091]
[207.02355957 111.07140350]
[214.44764709 125.02341461]
[209.75186157 140.11398315]
[195.72213745 147.39013672]
[180.68205261 142.53506470]
[173.55464172 128.42919922]
[159.23204041 123.97238159]
[144.78062439 127.57872009]
[133.90258789 116.09052277]
[119.57998657 111.63370514]
[107.50000000 120.52605438]
[107.50000000 135.52604675]
[107.50000000 150.52604675]
[107.50000000 165.52604675]
[107.50000000 180.52604675]
[107.50000000 195.52604675]
[107.50000000 210.52604675]
[107.50000000 225.52604675]
[107.50000000 240.52604675]
[107.50000000 255.52604675]
[107.50000000 270.52606201]
[107.50000000 285.52606201]
[122.03988647 289.58737183]
[134.94427490 297.42187500]
[145.25555420 308.44821167]
[152.20857239 321.84814453]
[155.28736877 336.62728882]
[154.26348877 351.68896484]
[149.21287537 365.91549683]
[140.51036072 378.25115967]
[128.80169678 387.78057861]
[114.95575714 393.79660034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 35]
[24 34]
[25 33]
[26 32]
[36 110]
[37 109]
[39 107]
[40 106]
[41 105]
[44 103]
[45 102]
[46 101]
[47 100]
[113 128]
[114 127]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
