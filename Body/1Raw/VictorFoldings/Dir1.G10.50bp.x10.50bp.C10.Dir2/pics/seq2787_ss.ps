%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCUUACUUGGGGGGGGGGUUAACCAGUGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAGCAAxxxxxxxxxxCACCUCCAUCAUCACCUCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCCCCCCCCCCCUCUCUUUCUU\
) } def
/len { sequence length } bind def

/coor [
[90.62844086 571.67565918]
[78.07022095 563.32452393]
[67.98399353 552.11206055]
[61.00380325 538.74316406]
[57.56842041 524.05816650]
[57.89379501 508.98022461]
[61.95948029 494.45709229]
[69.50990295 481.40176392]
[80.07042694 470.63485718]
[92.97722626 462.83322144]
[107.41895294 458.48727417]
[106.79497528 443.50024414]
[106.17099762 428.51324463]
[105.54701996 413.52621460]
[104.92304230 398.53921509]
[104.29906464 383.55218506]
[103.67508698 368.56518555]
[103.05110931 353.57815552]
[102.42713165 338.59115601]
[101.80315399 323.60412598]
[87.75522614 318.54595947]
[76.68412018 308.46746826]
[70.29785919 294.88143921]
[69.59779358 279.84487915]
[74.72171021 265.64773560]
[84.91809845 254.46397400]
[98.65619659 248.01878357]
[98.03221893 233.03176880]
[97.40824127 218.04475403]
[86.30741119 208.18031311]
[85.46111298 192.99023438]
[95.88311768 181.41354370]
[95.25914001 166.42652893]
[94.63516235 151.43951416]
[94.01118469 136.45249939]
[93.38720703 121.46548462]
[83.15410614 117.94419861]
[74.97003937 109.47736359]
[71.20934296 97.31356812]
[73.48255920 83.81350708]
[60.23997498 76.76837158]
[46.99739075 69.72323608]
[33.75480652 62.67810440]
[20.51222038 55.63296890]
[7.26963425 48.58783340]
[-5.97295141 41.54269791]
[-21.01261330 46.39904785]
[-35.04295349 39.12408829]
[-39.74002457 24.03392410]
[-32.31713486 10.08128166]
[-17.17815399 5.54401541]
[-3.30477047 13.11400604]
[1.07218337 28.30011177]
[14.31476879 35.34524536]
[27.55735397 42.39038086]
[40.79994202 49.43551636]
[54.04252625 56.48065186]
[67.28511047 63.52578735]
[80.52769470 70.57092285]
[67.94696045 62.40238571]
[62.99883270 48.24201584]
[67.75403595 34.01569748]
[80.22257996 25.67691803]
[95.18659973 26.71531677]
[106.38388062 36.69634247]
[109.12854767 51.44309998]
[102.27109528 64.78517914]
[110.26100922 52.09025192]
[98.84277344 42.32081985]
[88.96873474 30.99292755]
[80.84934998 18.34803009]
[74.65768433 4.65565395]
[70.52571869 -9.79234600]
[68.54151917 -24.68801117]
[68.74739075 -39.71383667]
[71.13893127 -54.54954910]
[75.66517639 -68.87892151]
[82.22963715 -82.39653015]
[90.69240570 -94.81423950]
[100.87308502 -105.86736298]
[112.55468750 -115.32030487]
[125.48820496 -122.97158051]
[139.39796448 -128.65809631]
[153.98747253 -132.25865173]
[168.94577026 -133.69648743]
[183.95399475 -132.94096375]
[198.69227600 -130.00817871]
[212.84643555 -124.96066284]
[226.11479187 -117.90598297]
[238.21453857 -108.99452209]
[248.88775635 -98.41622162]
[257.90692139 -86.39656830]
[265.07986450 -73.19174957]
[270.25360107 -59.08324051]
[273.31790161 -44.37175369]
[274.20745850 -29.37086678]
[272.90328979 -14.40032959]
[269.43322754 0.22076392]
[263.87118530 14.18076229]
[256.33572388 27.18210793]
[246.98751831 38.94767761]
[236.02577209 49.22668457]
[223.68414307 57.80003357]
[210.22572327 64.48498535]
[195.93734741 69.13904572]
[181.12359619 71.66300964]
[166.10020447 72.00308990]
[151.18740845 70.15202332]
[136.70307922 66.14927673]
[122.95594025 60.08016968]
[114.96601868 72.77510071]
[126.71553040 101.61243439]
[108.37422180 120.84150696]
[108.99819946 135.82852173]
[109.62217712 150.81553650]
[110.24615479 165.80255127]
[110.87013245 180.78956604]
[122.21837616 191.45986938]
[122.63768005 206.66772461]
[112.39525604 217.42077637]
[113.01923370 232.40779114]
[113.64321136 247.39480591]
[127.86952209 252.67570496]
[138.96026611 262.97320557]
[145.24658203 276.69528198]
[145.79885864 291.73797607]
[140.56404114 305.80786133]
[130.36901855 316.77175903]
[116.79016876 322.98016357]
[117.41414642 337.96716309]
[118.03812408 352.95419312]
[118.66210175 367.94119263]
[119.28607941 382.92822266]
[119.91005707 397.91522217]
[120.53403473 412.90225220]
[121.15801239 427.88925171]
[121.78199005 442.87628174]
[122.40596771 457.86328125]
[137.15896606 460.99374390]
[150.66960144 467.69549561]
[162.08859253 477.54727173]
[170.69810486 489.92980957]
[175.95695496 504.06472778]
[177.53456116 519.06341553]
[175.33175659 533.98315430]
[169.48699951 547.88604736]
[160.36772156 559.89813232]
[148.54714966 569.26428223]
[134.76834106 575.39575195]
[119.89743805 577.90716553]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[27 122]
[28 121]
[29 120]
[32 117]
[33 116]
[34 115]
[35 114]
[36 113]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[67 111]
[68 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
