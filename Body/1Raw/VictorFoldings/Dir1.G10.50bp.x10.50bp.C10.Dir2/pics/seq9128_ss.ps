%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUUACAAUUUGGGGGGGGGGUACUGGGUCUCUAUUUUACCCUCCUACAAGCCUCAGAGUACUUCGAGUCUxxxxxxxxxxCUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUUACUACUAAUAACCCCCCCCCCUUAUUACAUUUU\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 396.90359497]
[70.87159729 391.74859619]
[58.28185654 383.46640015]
[47.94191742 372.50363159]
[40.40940475 359.45147705]
[36.09054184 345.01388550]
[35.21823120 329.96942139]
[37.83952332 315.12942505]
[43.81304932 301.29418945]
[52.81666565 289.20983887]
[64.36482239 279.52807617]
[77.83473969 272.77099609]
[92.50000000 269.30300903]
[92.50000000 254.30302429]
[92.50000000 239.30302429]
[92.50000000 224.30302429]
[92.50000000 209.30302429]
[92.50000000 194.30302429]
[92.50000000 179.30302429]
[92.50000000 164.30302429]
[92.50000000 149.30302429]
[92.50000000 134.30302429]
[92.50000000 119.30302429]
[78.14651489 107.64647675]
[77.87708282 87.12559509]
[62.97018814 85.45691681]
[48.06329346 83.78823853]
[33.14025116 82.27071381]
[18.20260048 80.90449524]
[9.31181049 83.24864960]
[2.97710061 79.35621643]
[-11.92979431 77.68753815]
[-18.15949631 91.47325897]
[-28.34581566 102.65780640]
[-41.49079895 110.14543152]
[-56.30663681 113.20258331]
[-71.34181976 111.52974701]
[-85.12335968 105.29080963]
[-96.30107880 95.09700012]
[-103.77989960 81.94699860]
[-106.82711792 67.12911987]
[-105.14421082 52.09505844]
[-98.89604187 38.31769943]
[-88.69474030 27.14681435]
[-75.53973389 19.67680740]
[-60.71981430 16.63951492]
[-45.68688202 18.33250046]
[-31.91371727 24.58990288]
[-20.74966812 34.79868317]
[-13.28847885 47.95869064]
[-10.26111698 62.78064346]
[4.64577770 64.44931793]
[19.56881714 65.96684265]
[34.50646973 67.33306122]
[41.49504852 64.79547119]
[49.73196793 68.88134766]
[64.63886261 70.55001831]
[79.54576111 72.21869659]
[93.26947021 66.16397095]
[102.08625031 54.02871704]
[110.90303040 41.89346313]
[119.71981049 29.75820923]
[108.51290131 19.76902199]
[98.35630035 8.71361351]
[89.35095215 -3.29814219]
[81.58634949 -16.14686203]
[75.13967133 -29.70484734]
[70.07498932 -43.83734894]
[66.44263458 -58.40390396]
[64.27870941 -73.25975037]
[63.60472107 -88.25722504]
[64.42736816 -103.24728394]
[66.73847198 -118.08094025]
[70.51507568 -132.61076355]
[75.71962738 -146.69236755]
[82.30040741 -160.18576050]
[90.19201660 -172.95686340]
[99.31601715 -184.87875366]
[109.58172607 -195.83291626]
[120.88712311 -205.71049500]
[133.11984253 -214.41333008]
[146.15829468 -221.85491943]
[159.87292480 -227.96128845]
[174.12739563 -232.67175293]
[188.78005981 -235.93951416]
[203.68527222 -237.73208618]
[218.69488525 -238.03164673]
[233.65975952 -236.83522034]
[248.43112183 -234.15470886]
[262.86221313 -230.01673889]
[276.80953979 -224.46244812]
[290.13455200 -217.54701233]
[302.70477295 -209.33920288]
[314.39526367 -199.92057800]
[325.08987427 -189.38473511]
[334.68228149 -177.83639526]
[343.07717896 -165.39031982]
[350.19110107 -152.17024231]
[355.95336914 -138.30752563]
[360.30670166 -123.93995667]
[363.20782471 -109.21031952]
[364.62792969 -94.26502228]
[364.55288696 -79.25259399]
[362.98342896 -64.32224274]
[359.93515015 -49.62235641]
[355.43838501 -35.29902649]
[349.53781128 -21.49461746]
[342.29205322 -8.34632111]
[333.77316284 4.01518154]
[324.06573486 15.46703529]
[313.26632690 25.89542198]
[301.48223877 35.19669724]
[288.83059692 43.27841949]
[275.43710327 50.06026840]
[261.43493652 55.47483444]
[246.96321106 59.46831131]
[232.16577148 62.00100327]
[217.18969727 63.04774094]
[202.18380737 62.59812164]
[187.29727173 60.65661621]
[172.67800903 57.24251556]
[158.47134399 52.38975143]
[144.81846619 46.14656067]
[131.85505676 38.57498932]
[123.03828430 50.71024323]
[114.22150421 62.84549713]
[105.40472412 74.98075104]
[116.31465149 81.56306458]
[122.32914734 92.23320007]
[122.31013489 103.98853302]
[116.74540710 113.78003693]
[107.50000000 119.30302429]
[107.50000000 134.30302429]
[107.50000000 149.30302429]
[107.50000000 164.30302429]
[107.50000000 179.30302429]
[107.50000000 194.30302429]
[107.50000000 209.30302429]
[107.50000000 224.30302429]
[107.50000000 239.30302429]
[107.50000000 254.30302429]
[107.50000000 269.30300903]
[122.16526031 272.77099609]
[135.63517761 279.52807617]
[147.18333435 289.20983887]
[156.18695068 301.29418945]
[162.16047668 315.12942505]
[164.78176880 329.96942139]
[163.90945435 345.01388550]
[159.59059143 359.45147705]
[152.05809021 372.50363159]
[141.71813965 383.46640015]
[129.12840271 391.74859619]
[114.96779633 396.90359497]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[25 58]
[26 57]
[27 56]
[28 54]
[29 53]
[31 52]
[32 51]
[59 127]
[60 126]
[61 125]
[62 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
