%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAACCAAAGGGGGGGGGGCCCAGCUACGCAAAAUCUUAGCAUACUCCUCAAUUACCCACAUAGGAUGAxxxxxxxxxxCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGCCCCCCCCCCUUUAACCAAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 389.44247437]
[71.19830322 383.42645264]
[59.48964310 373.89703369]
[50.78712082 361.56137085]
[45.73651886 347.33483887]
[44.71262741 332.27316284]
[47.79142761 317.49401855]
[54.74444962 304.09408569]
[65.05573273 293.06774902]
[77.96011353 285.23324585]
[92.50000000 281.17193604]
[92.50000000 266.17193604]
[92.50000000 251.17193604]
[92.50000000 236.17193604]
[92.50000000 221.17193604]
[92.50000000 206.17193604]
[92.50000000 191.17193604]
[92.50000000 176.17193604]
[92.50000000 161.17193604]
[92.50000000 146.17193604]
[92.50000000 131.17193604]
[85.57865143 128.63500977]
[79.41967010 124.58432770]
[74.34865570 119.23402405]
[70.63366699 112.86692810]
[55.86761475 115.50579071]
[41.10155869 118.14465332]
[26.33550262 120.78352356]
[21.19136238 135.25534058]
[9.49009991 145.20399475]
[-5.62070704 147.95338440]
[-20.07632637 142.76390076]
[-29.98826790 131.03150940]
[-32.69026947 115.91216278]
[-27.45550728 101.47288513]
[-15.69210529 91.59777069]
[-0.56435961 88.94316864]
[13.85844231 94.22316742]
[23.69663811 106.01746368]
[38.46269226 103.37860107]
[53.22874832 100.73973846]
[67.99480438 98.10086823]
[79.16504669 75.63108826]
[103.09777069 68.08851624]
[107.99932861 53.91195679]
[112.90087891 39.73539734]
[100.62395477 30.95147896]
[91.32900238 19.07603645]
[85.76256561 5.07675600]
[84.36782837 -9.90866947]
[87.24930573 -24.66499138]
[94.16509247 -37.99795914]
[104.54711914 -48.83097458]
[117.54784393 -56.29201126]
[132.10939026 -59.78382492]
[147.04965210 -59.03174210]
[151.95120239 -73.20829773]
[156.85275269 -87.38485718]
[161.75430298 -101.56141663]
[150.44575500 -111.68032074]
[143.89051819 -125.32114410]
[143.05944824 -140.39173889]
[148.04811096 -154.59388733]
[158.06690979 -165.77371216]
[171.56594849 -172.24836731]
[186.47473145 -173.05931091]
[191.37628174 -187.23587036]
[196.27783203 -201.41241455]
[201.17938232 -215.58897400]
[188.28059387 -223.35523987]
[177.27862549 -233.63388062]
[168.65446472 -245.97558594]
[162.78511047 -259.84078979]
[159.92713928 -274.62341309]
[160.20549011 -289.67718506]
[163.60800171 -304.34405518]
[169.98593140 -317.98281860]
[179.06047058 -329.99725342]
[190.43489075 -339.86212158]
[203.61198425 -347.14624023]
[218.01568604 -351.53109741]
[233.01632690 -352.82507324]
[247.95814514 -350.97155762]
[262.18795776 -346.05157471]
[275.08370972 -338.28024292]
[286.08160400 -327.99728394]
[294.70092773 -315.65219116]
[300.56481934 -301.78466797]
[303.41699219 -287.00091553]
[303.13272095 -271.94726562]
[299.72442627 -257.28173828]
[293.34112549 -243.64549255]
[284.26187134 -231.63462830]
[272.88357544 -221.77421570]
[259.70361328 -214.49530029]
[245.29818726 -210.11610413]
[230.29704285 -208.82803345]
[215.35594177 -210.68742371]
[210.45439148 -196.51086426]
[205.55284119 -182.33432007]
[200.65129089 -168.15776062]
[211.87530518 -158.31140137]
[218.49237061 -144.88159180]
[219.46621704 -129.90104675]
[214.61735535 -115.65056610]
[204.65522766 -104.31172180]
[191.07447815 -97.63292694]
[175.93086243 -96.65986633]
[171.02931213 -82.48330688]
[166.12776184 -68.30674744]
[161.22621155 -54.13019180]
[173.44041443 -45.49360657]
[182.73545837 -33.75336075]
[188.35137939 -19.85561752]
[189.82508850 -4.92347479]
[187.02867126 9.83376694]
[180.18035889 23.21855164]
[169.82752991 34.14225006]
[156.80300903 41.71369934]
[142.15803528 45.31190109]
[127.07743073 44.63694763]
[122.17588043 58.81350708]
[117.27433014 72.99006653]
[125.16994476 80.14016724]
[130.28727722 89.48240662]
[132.06149292 99.98558807]
[130.29672241 110.49035645]
[125.18778992 119.83719635]
[117.29861450 126.99439240]
[107.50000000 131.17193604]
[107.50000000 146.17193604]
[107.50000000 161.17193604]
[107.50000000 176.17193604]
[107.50000000 191.17193604]
[107.50000000 206.17193604]
[107.50000000 221.17193604]
[107.50000000 236.17193604]
[107.50000000 251.17193604]
[107.50000000 266.17193604]
[107.50000000 281.17193604]
[122.03988647 285.23324585]
[134.94427490 293.06774902]
[145.25555420 304.09408569]
[152.20857239 317.49401855]
[155.28736877 332.27316284]
[154.26348877 347.33483887]
[149.21287537 361.56137085]
[140.51036072 373.89703369]
[128.80169678 383.42645264]
[114.95575714 389.44247437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 42]
[26 41]
[27 40]
[28 39]
[44 123]
[45 122]
[46 121]
[56 111]
[57 110]
[58 109]
[59 108]
[66 101]
[67 100]
[68 99]
[69 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
