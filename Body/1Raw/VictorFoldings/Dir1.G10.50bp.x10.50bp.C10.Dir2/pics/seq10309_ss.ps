%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUACAUCCUCGGGGGGGGGGAUUACUAUUCUGCCUAGCAAACUCAAACUACGAACGCACUCACAGUCGCAxxxxxxxxxxCAAAUCUCCACCUCCAUCAUCACCUCAACCCAAAAAGGCAUAAUUAAACUCCCCCCCCCCUUACUUCCUC\
) } def
/len { sequence length } bind def

/coor [
[86.92929840 409.41445923]
[73.08335876 403.39843750]
[61.37469482 393.86901855]
[52.67217255 381.53332520]
[47.62157059 367.30682373]
[46.59767914 352.24514771]
[49.67647552 337.46597290]
[56.62949753 324.06604004]
[66.94078064 313.03970337]
[79.84516144 305.20520020]
[94.38504791 301.14389038]
[94.38504791 286.14389038]
[94.38504791 271.14389038]
[94.38504791 256.14389038]
[94.38504791 241.14389038]
[94.38504791 226.14389038]
[94.38504791 211.14389038]
[94.38504791 196.14389038]
[94.38504791 181.14389038]
[94.38504791 166.14389038]
[94.38504791 151.14389038]
[94.07299805 136.14714050]
[93.44902039 121.16011810]
[92.82504272 106.17310333]
[89.82456970 101.78563690]
[89.53304291 96.02371216]
[92.50000000 90.55237579]
[92.50000000 75.55237579]
[92.50000000 60.55237579]
[84.76270294 46.75220108]
[92.50000000 34.02492905]
[92.50000000 19.02492905]
[92.50000000 4.02492952]
[92.50000000 -10.97507000]
[92.50000000 -25.97507095]
[77.53659058 -27.12360001]
[62.70500565 -29.41420555]
[48.09228897 -32.83344269]
[33.78418732 -37.36124802]
[19.86467171 -42.97104645]
[6.41542816 -49.62992096]
[-6.48461723 -57.29878998]
[-18.75976181 -65.93265533]
[-30.33796692 -75.48084259]
[-41.15128708 -85.88732147]
[-51.13626862 -97.09102631]
[-60.23431015 -109.02619934]
[-68.39202118 -121.62280273]
[-75.56153107 -134.80691528]
[-81.70075989 -148.50117493]
[-86.77368927 -162.62519836]
[-90.75053406 -177.09611511]
[-93.60797119 -191.82899475]
[-95.32922363 -206.73738098]
[-95.90419769 -221.73379517]
[-95.32951355 -236.73020935]
[-93.60853577 -251.63862610]
[-90.75138092 -266.37155151]
[-86.77480316 -280.84255981]
[-81.70214844 -294.96667480]
[-75.56317902 -308.66104126]
[-68.39392090 -321.84530640]
[-60.23644638 -334.44207764]
[-51.13862991 -346.37741089]
[-41.15386581 -357.58129883]
[-30.34074020 -367.98797607]
[-18.76271439 -377.53640747]
[-6.48773527 -386.17050171]
[6.41216469 -393.83959961]
[19.86128235 -400.49874878]
[33.78068924 -406.10879517]
[48.08870697 -410.63687134]
[62.70135880 -414.05639648]
[77.53289795 -416.34725952]
[92.49629211 -417.49609375]
[107.50370789 -417.49609375]
[122.46710205 -416.34725952]
[137.29864502 -414.05639648]
[151.91130066 -410.63687134]
[166.21931458 -406.10879517]
[180.13871765 -400.49874878]
[193.58782959 -393.83959961]
[206.48773193 -386.17050171]
[218.76271057 -377.53640747]
[230.34074402 -367.98797607]
[241.15386963 -357.58129883]
[251.13862610 -346.37741089]
[260.23645020 -334.44207764]
[268.39392090 -321.84530640]
[275.56317139 -308.66104126]
[281.70214844 -294.96667480]
[286.77481079 -280.84255981]
[290.75137329 -266.37155151]
[293.60855103 -251.63862610]
[295.32949829 -236.73020935]
[295.90420532 -221.73379517]
[295.32922363 -206.73738098]
[293.60797119 -191.82899475]
[290.75054932 -177.09611511]
[286.77368164 -162.62519836]
[281.70077515 -148.50117493]
[275.56152344 -134.80691528]
[268.39202881 -121.62280273]
[260.23431396 -109.02619934]
[251.13626099 -97.09102631]
[241.15129089 -85.88732147]
[230.33796692 -75.48084259]
[218.75976562 -65.93265533]
[206.48461914 -57.29878998]
[193.58457947 -49.62992096]
[180.13533020 -42.97104645]
[166.21582031 -37.36124802]
[151.90771484 -32.83344269]
[137.29499817 -29.41420555]
[122.46340942 -27.12360001]
[107.50000000 -25.97507095]
[107.50000000 -10.97507000]
[107.50000000 4.02492952]
[107.50000000 19.02492905]
[107.50000000 34.02492905]
[115.23729706 46.75220108]
[107.50000000 60.55237579]
[107.50000000 75.55237579]
[107.50000000 90.55237579]
[107.81205750 105.54912567]
[108.43603516 120.53614044]
[109.06001282 135.52316284]
[112.32392883 141.39294434]
[112.11542511 147.15383911]
[109.38504791 151.14389038]
[109.38504791 166.14389038]
[109.38504791 181.14389038]
[109.38504791 196.14389038]
[109.38504791 211.14389038]
[109.38504791 226.14389038]
[109.38504791 241.14389038]
[109.38504791 256.14389038]
[109.38504791 271.14389038]
[109.38504791 286.14389038]
[109.38504791 301.14389038]
[123.92493439 305.20520020]
[136.82931519 313.03970337]
[147.14060974 324.06604004]
[154.09362793 337.46597290]
[157.17242432 352.24514771]
[156.14852905 367.30682373]
[151.09793091 381.53332520]
[142.39540100 393.86901855]
[130.68675232 403.39843750]
[116.84080505 409.41445923]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 127]
[23 126]
[24 125]
[27 124]
[28 123]
[29 122]
[31 120]
[32 119]
[33 118]
[34 117]
[35 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
