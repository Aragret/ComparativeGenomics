%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAAUAAAAGUAAUGGGGGGGGGGAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUAAUUCCCCxxxxxxxxxxUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCCCCCCCCCCCUAAUAAAAUUAAU\
) } def
/len { sequence length } bind def

/coor [
[68.29920197 179.88349915]
[54.90964890 173.16539001]
[42.89004135 164.22434998]
[32.60556793 153.33203125]
[24.36869240 140.81935120]
[18.42966652 127.06649017]
[14.96893597 112.49129486]
[14.09164238 97.53657532]
[15.82444191 82.65670776]
[20.11468697 68.30376434]
[26.83203125 54.91382980]
[35.77238464 42.89371490]
[46.66412354 32.60861588]
[59.17632294 24.37102509]
[72.92884064 18.43121529]
[87.50384521 14.96965027]
[86.62626648 -0.00465630]
[85.74868011 -14.97896290]
[84.87109375 -29.95326805]
[83.99351501 -44.92757416]
[83.11592865 -59.90188217]
[82.23834229 -74.87619019]
[81.36076355 -89.85049438]
[80.48317719 -104.82479858]
[79.60559845 -119.79910278]
[64.60140991 -119.78556061]
[49.62136841 -120.63645172]
[34.71522903 -122.34896851]
[19.93250847 -124.91741943]
[5.32231617 -128.33325195]
[-9.06681538 -132.58515930]
[-23.18708611 -137.65898132]
[-36.99159241 -143.53787231]
[-50.43447113 -150.20230103]
[-63.47106934 -157.63014221]
[-76.05808258 -165.79670715]
[-88.15369415 -174.67488098]
[-99.71772766 -184.23515320]
[-110.71176910 -194.44577026]
[-121.09928894 -205.27282715]
[-130.84577942 -216.68034363]
[-139.91888428 -228.63043213]
[-148.28843689 -241.08338928]
[-155.92665100 -253.99786377]
[-162.80815125 -267.33093262]
[-168.91007996 -281.03829956]
[-174.21215820 -295.07446289]
[-178.69676208 -309.39276123]
[-182.34902954 -323.94567871]
[-185.15679932 -338.68481445]
[-187.11074829 -353.56121826]
[-188.20439148 -368.52551270]
[-188.43409729 -383.52792358]
[-187.79910278 -398.51867676]
[-186.30151367 -413.44793701]
[-183.94628906 -428.26614380]
[-180.74128723 -442.92401123]
[-176.69712830 -457.37292480]
[-171.82725525 -471.56481934]
[-166.14785767 -485.45257568]
[-159.67778015 -498.99008179]
[-152.43852234 -512.13232422]
[-144.45413208 -524.83569336]
[-135.75114441 -537.05792236]
[-126.35845947 -548.75848389]
[-116.30728149 -559.89849854]
[-105.63099670 -570.44091797]
[-94.36507416 -580.35076904]
[-82.54693604 -589.59509277]
[-70.21584320 -598.14318848]
[-57.41276169 -605.96661377]
[-44.18021393 -613.03948975]
[-30.56216431 -619.33825684]
[-16.60384750 -624.84197998]
[-2.35163355 -629.53240967]
[12.14713383 -633.39398193]
[26.84428978 -636.41381836]
[41.69101334 -638.58184814]
[56.63798523 -639.89099121]
[71.63555145 -640.33679199]
[86.63388824 -639.91778564]
[101.58317566 -638.63543701]
[116.43376160 -636.49395752]
[131.13629150 -633.50048828]
[145.64195251 -629.66485596]
[159.90254211 -625.00000000]
[173.87068176 -619.52124023]
[187.49998474 -613.24682617]
[200.74517822 -606.19769287]
[213.56224060 -598.39715576]
[225.90861511 -589.87115479]
[237.74327087 -580.64794922]
[249.02691650 -570.75830078]
[259.72204590 -560.23504639]
[269.79315186 -549.11303711]
[279.20675659 -537.42932129]
[287.93161011 -525.22265625]
[295.93872070 -512.53363037]
[303.20150757 -499.40432739]
[309.69580078 -485.87841797]
[315.40005493 -472.00085449]
[320.29531860 -457.81768799]
[324.36532593 -443.37606812]
[327.59655762 -428.72393799]
[329.97830200 -413.90997314]
[331.50262451 -398.98342896]
[332.16442871 -383.99383545]
[331.96157837 -368.99102783]
[330.89474487 -354.02481079]
[328.96740723 -339.14492798]
[326.18603516 -324.40078735]
[322.55981445 -309.84136963]
[318.10083008 -295.51504517]
[312.82388306 -281.46942139]
[306.74652100 -267.75115967]
[299.88888550 -254.40579224]
[292.27380371 -241.47767639]
[283.92654419 -229.00975037]
[274.87484741 -217.04344177]
[265.14880371 -205.61849976]
[254.78067017 -194.77287292]
[243.80493164 -184.54258728]
[232.25802612 -174.96162415]
[220.17831421 -166.06182861]
[207.60594177 -157.87274170]
[194.58265686 -150.42158508]
[181.15173340 -143.73309326]
[167.35777283 -137.82949829]
[153.24659729 -132.73042297]
[138.86511230 -128.45277405]
[124.26104736 -125.01078033]
[109.48294830 -122.41588593]
[94.57990265 -120.67668915]
[95.45748138 -105.70238495]
[96.33506775 -90.72808075]
[97.21265411 -75.75376892]
[98.09023285 -60.77946472]
[98.96781921 -45.80515671]
[99.84540558 -30.83085251]
[100.72298431 -15.85654640]
[101.60057068 -0.88223976]
[102.47814941 14.09206676]
[117.35772705 15.82741737]
[131.70993042 20.12012482]
[145.09870911 26.83976364]
[157.11729431 35.78218079]
[167.40052795 46.67567825]
[175.63597107 59.18929291]
[181.57342529 72.94283295]
[185.03248596 87.51842499]
[185.90808105 102.47324371]
[184.17356873 117.35291290]
[179.88168335 131.70536804]
[173.16281128 145.09452820]
[164.22108459 157.11363220]
[153.32817078 167.39747620]
[140.81503296 175.63363647]
[127.06182861 181.57188416]
[112.48643494 185.03178406]
[97.53166962 185.90821838]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[25 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
