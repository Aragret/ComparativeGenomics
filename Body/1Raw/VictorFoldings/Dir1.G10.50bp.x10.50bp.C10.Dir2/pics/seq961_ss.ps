%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUAUUAGCGGGGGGGGGGUCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUUCCAGUGAGUUCACCCUxxxxxxxxxxCUGAGCCCUAGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCACCCCCCCCCCUUGUAUUAGC\
) } def
/len { sequence length } bind def

/coor [
[99.44625854 402.46060181]
[85.60031891 396.44458008]
[73.89165497 386.91516113]
[65.18913269 374.57949829]
[60.13853073 360.35296631]
[59.11463928 345.29129028]
[62.19343567 330.51214600]
[69.14646149 317.11221313]
[79.45774078 306.08587646]
[92.36212158 298.25137329]
[106.90200806 294.19006348]
[106.90200806 279.19006348]
[106.90200806 264.19006348]
[106.90200806 249.19004822]
[106.90200806 234.19004822]
[106.90200806 219.19004822]
[106.90200806 204.19004822]
[106.90200806 189.19004822]
[106.90200806 174.19004822]
[106.90200806 159.19004822]
[106.90200806 144.19004822]
[80.31723785 136.47302246]
[65.24866486 115.77520752]
[65.98544312 92.26243591]
[79.70573425 75.77445984]
[73.07723236 62.31849670]
[60.03808212 53.35796356]
[61.35475922 38.52167130]
[54.72626114 25.06570625]
[48.09776306 11.60974026]
[41.46926498 -1.84622550]
[34.84076691 -15.30219078]
[20.80509758 -9.97820759]
[6.32690430 -6.01252270]
[-8.46269608 -3.44105101]
[-23.42976379 -2.28708053]
[-38.43875122 -2.56106210]
[-53.35372925 -4.26051426]
[-68.03962708 -7.37004662]
[-82.36344147 -11.86149788]
[-96.19544983 -17.69419098]
[-109.41038513 -24.81530380]
[-121.88856506 -33.16034698]
[-133.51698303 -42.65373993]
[-144.19033813 -53.20951080]
[-153.81196594 -64.73206329]
[-162.29470825 -77.11704254]
[-169.56176758 -90.25228119]
[-175.54731750 -104.01883698]
[-180.19715881 -118.29201508]
[-183.46917725 -132.94256592]
[-185.33374023 -147.83781433]
[-185.77397156 -162.84283447]
[-184.78585815 -177.82177734]
[-182.37837219 -192.63894653]
[-178.57330322 -207.16018677]
[-173.40512085 -221.25396729]
[-166.92062378 -234.79264832]
[-159.17854309 -247.65364075]
[-150.24899292 -259.72042847]
[-140.21282959 -270.88378906]
[-129.16098022 -281.04257202]
[-117.19348907 -290.10482788]
[-104.41876221 -297.98843384]
[-90.95249176 -304.62197876]
[-76.91663361 -309.94546509]
[-62.43829346 -313.91061401]
[-47.64859772 -316.48156738]
[-32.68148804 -317.63497925]
[-17.67251205 -317.36044312]
[-2.75759530 -315.66046143]
[11.92818832 -312.55038452]
[26.25183678 -308.05841064]
[40.08363342 -302.22521973]
[53.29830933 -295.10360718]
[65.77618408 -286.75811768]
[77.40426636 -277.26431274]
[88.07723236 -266.70816040]
[97.69843292 -255.18524170]
[106.18073273 -242.79995728]
[113.44731140 -229.66444397]
[119.43236542 -215.89767456]
[124.08168030 -201.62432861]
[127.35316467 -186.97366333]
[129.21717834 -172.07835388]
[129.65686035 -157.07330322]
[128.66819763 -142.09440613]
[126.26017761 -127.27732086]
[122.45458221 -112.75622559]
[117.28588104 -98.66263580]
[110.80089569 -85.12418365]
[103.05834198 -72.26348114]
[94.12834930 -60.19699478]
[84.09178925 -49.03401184]
[73.03955841 -38.87562180]
[61.07174301 -29.81382561]
[48.29673004 -21.93068886]
[54.92522812 -8.47472382]
[61.55372620 4.98124123]
[68.18222809 18.43720627]
[74.81072235 31.89317131]
[87.37576294 39.89124298]
[86.53320312 55.68999863]
[93.16169739 69.14596558]
[106.58865356 65.74435425]
[121.49063873 68.46169281]
[135.01448059 77.82618713]
[144.17990112 93.03325653]
[159.17907715 92.87722015]
[174.17826843 92.72118378]
[189.17745972 92.56514740]
[204.95283508 86.35437012]
[215.28796387 99.79393005]
[205.23466492 113.44557953]
[189.33349609 107.56433868]
[174.33430481 107.72037506]
[159.33511353 107.87641144]
[144.33593750 108.03244781]
[141.08509827 122.67594910]
[154.60929871 129.16410828]
[168.13348389 135.65228271]
[183.68437195 131.70898438]
[196.37554932 141.52293396]
[196.47143555 157.56570435]
[183.89846802 167.53065491]
[168.30155945 163.77352905]
[161.64532471 149.17646790]
[148.12112427 142.68830872]
[134.59693909 136.20013428]
[121.90200806 144.19004822]
[121.90200806 159.19004822]
[121.90200806 174.19004822]
[121.90200806 189.19004822]
[121.90200806 204.19004822]
[121.90200806 219.19004822]
[121.90200806 234.19004822]
[121.90200806 249.19004822]
[121.90200806 264.19006348]
[121.90200806 279.19006348]
[121.90200806 294.19006348]
[136.44189453 298.25137329]
[149.34628296 306.08587646]
[159.65756226 317.11221313]
[166.61058044 330.51214600]
[169.68937683 345.29129028]
[168.66549683 360.35296631]
[163.61488342 374.57949829]
[154.91236877 386.91516113]
[143.20370483 396.44458008]
[129.35777283 402.46060181]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 104]
[26 103]
[28 101]
[29 100]
[30 99]
[31 98]
[32 97]
[108 118]
[109 117]
[110 116]
[111 115]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
