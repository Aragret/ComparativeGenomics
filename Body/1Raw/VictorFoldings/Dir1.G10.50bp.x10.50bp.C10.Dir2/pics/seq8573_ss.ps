%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUACUAGUUAGGGGGGGGGGUUAUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACGCxxxxxxxxxxGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACCCCCCCCCCCAUACUAGUCA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 419.08090210]
[71.01555634 413.52789307]
[58.81560135 404.66156006]
[49.20452881 393.03924561]
[42.78650284 379.39154053]
[39.96496582 364.57635498]
[40.91728210 349.52496338]
[45.58358765 335.18356323]
[53.67055511 322.45361328]
[64.66983032 312.13531494]
[77.88998413 304.87734985]
[92.50000000 301.13592529]
[92.50000000 286.13592529]
[92.50000000 271.13592529]
[92.50000000 256.13592529]
[92.50000000 241.13591003]
[92.50000000 226.13591003]
[92.50000000 211.13591003]
[92.50000000 196.13591003]
[92.50000000 181.13591003]
[92.50000000 166.13591003]
[92.50000000 151.13591003]
[92.50000000 136.13591003]
[76.28376007 128.27709961]
[65.72171021 113.67672729]
[63.33195114 95.81569672]
[49.08525848 91.12189484]
[56.86192322 103.94857025]
[56.61563492 118.94654846]
[48.42201614 131.51097107]
[34.79677200 137.78413391]
[19.92329597 135.84001160]
[8.36822128 126.27547455]
[3.67933297 112.02716827]
[7.29627037 97.46977234]
[18.10851669 87.07288361]
[32.79452896 84.02853394]
[19.65289688 76.79683685]
[6.51126575 69.56513214]
[-3.92888999 80.45850372]
[-16.83322144 88.27775574]
[-31.32188988 92.48974609]
[-46.40703201 92.80731201]
[-61.06012344 89.20878601]
[-74.28208923 81.93952179]
[-85.17142487 71.49516296]
[-92.98569489 58.58781433]
[-97.19209290 44.09751892]
[-97.50382996 29.01225471]
[-93.89964294 14.36055660]
[-86.62528229 1.14140129]
[-76.17671967 -9.74390602]
[-63.26634979 -17.55318642]
[-48.77443314 -21.75399208]
[-33.68904877 -22.05990410]
[-19.03874397 -18.45006371]
[-5.82239866 -11.17059708]
[5.05887318 -0.71783012]
[12.86316872 12.19554996]
[17.05837822 26.68908691]
[17.35846519 41.77458954]
[13.74296856 56.42350006]
[26.88459969 63.65520477]
[40.02622986 70.88690186]
[53.77906036 76.87519836]
[68.02574921 81.56900024]
[80.25036621 68.82299042]
[96.99752808 63.21631622]
[98.84085083 48.33000946]
[100.68417358 33.44370270]
[86.97244263 27.05281067]
[75.90808105 16.73606873]
[68.57507324 3.50420690]
[65.69182587 -11.34645271]
[67.54081726 -26.36099243]
[73.94089508 -40.06844330]
[84.26504517 -51.12588501]
[97.50181580 -58.45002747]
[112.35440826 -61.32332230]
[127.36770630 -59.46427155]
[141.07086182 -53.05501175]
[152.12138367 -42.72344971]
[159.43666077 -29.48177338]
[162.30000305 -14.62726307]
[160.43089294 0.38478571]
[154.01245117 14.08364677]
[143.67347717 25.12724495]
[130.42691040 32.43363953]
[115.57048035 35.28702545]
[113.72715759 50.17333221]
[111.88383484 65.05963898]
[121.10971069 69.72733307]
[128.67874146 76.77105713]
[133.99685669 85.63796234]
[148.71237183 82.73049164]
[163.42790222 79.82301331]
[178.14341736 76.91554260]
[192.85894775 74.00807190]
[193.69754028 58.94993210]
[198.25538635 44.57366943]
[206.24597168 31.78299332]
[217.16699219 21.38193130]
[230.33193970 14.02430344]
[244.91328430 10.17261791]
[259.99438477 10.06899452]
[274.62728882 13.71994591]
[287.89212036 20.89597130]
[298.95501709 31.14598083]
[307.12060547 43.82564926]
[311.87557983 58.13792038]
[312.92102051 73.18311310]
[310.19122314 88.01548004]
[303.85778809 101.70263672]
[294.31881714 113.38420105]
[282.17395020 122.32585907]
[268.18664551 127.96553802]
[253.23612976 129.94871521]
[238.26222229 128.15072632]
[224.20617676 122.68459320]
[211.95158386 113.89392853]
[202.26876831 102.33131409]
[195.76641846 88.72359467]
[181.05088806 91.63106537]
[166.33537292 94.53853607]
[151.61984253 97.44601440]
[136.90432739 100.35348511]
[134.68466187 112.61066437]
[128.51370239 123.43122864]
[119.09447479 131.58251953]
[107.50000000 136.13591003]
[107.50000000 151.13591003]
[107.50000000 166.13591003]
[107.50000000 181.13591003]
[107.50000000 196.13591003]
[107.50000000 211.13591003]
[107.50000000 226.13591003]
[107.50000000 241.13591003]
[107.50000000 256.13592529]
[107.50000000 271.13592529]
[107.50000000 286.13592529]
[107.50000000 301.13592529]
[122.11001587 304.87734985]
[135.33016968 312.13531494]
[146.32945251 322.45361328]
[154.41641235 335.18356323]
[159.08271790 349.52496338]
[160.03503418 364.57635498]
[157.21350098 379.39154053]
[150.79547119 393.03924561]
[141.18440247 404.66156006]
[128.98443604 413.52789307]
[114.96250153 419.08090210]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[26 66]
[27 65]
[37 64]
[38 63]
[39 62]
[68 91]
[69 90]
[70 89]
[94 126]
[95 125]
[96 124]
[97 123]
[98 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
