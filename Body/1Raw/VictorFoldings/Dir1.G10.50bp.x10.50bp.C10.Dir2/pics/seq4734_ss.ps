%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAGGCCUAGGGGGGGGGGGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCxxxxxxxxxxAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCACCCCCCCCCCAGUAGGUCUA\
) } def
/len { sequence length } bind def

/coor [
[77.86222839 395.15191650]
[64.01628876 389.13589478]
[52.30762863 379.60647583]
[43.60510635 367.27081299]
[38.55450439 353.04428101]
[37.53061295 337.98260498]
[40.60941315 323.20343018]
[47.56243134 309.80349731]
[57.87371826 298.77716064]
[70.77809906 290.94265747]
[85.31798553 286.88134766]
[85.31798553 271.88134766]
[85.31798553 256.88134766]
[85.31798553 241.88134766]
[85.31798553 226.88134766]
[85.31798553 211.88134766]
[85.31798553 196.88134766]
[85.31798553 181.88134766]
[85.31798553 166.88134766]
[85.31798553 151.88134766]
[74.33232117 141.66787720]
[59.37207031 142.75918579]
[44.41182327 143.85049438]
[29.52854347 145.71810913]
[14.76248741 148.35696411]
[-0.00356778 150.99583435]
[-14.76962376 153.63470459]
[-29.53567886 156.27355957]
[-34.67981720 170.74537659]
[-46.38108063 180.69404602]
[-61.49188995 183.44342041]
[-75.94750977 178.25395203]
[-85.85945129 166.52156067]
[-88.56145477 151.40220642]
[-83.32669067 136.96292114]
[-71.56328583 127.08780670]
[-56.43554306 124.43321228]
[-42.01274109 129.71321106]
[-32.17454147 141.50750732]
[-17.40848732 138.86863708]
[-2.64243197 136.22978210]
[12.12362385 133.59091187]
[26.88967896 130.95205688]
[16.52900505 120.10509491]
[18.33823586 105.21460724]
[30.99497223 97.16432190]
[45.24816132 101.83835602]
[50.67987823 115.82035828]
[43.32051086 128.89024353]
[58.28076172 127.79893494]
[73.24101257 126.70761871]
[64.74119568 105.37364197]
[70.29357147 84.46067047]
[86.18942261 71.81739807]
[105.16497040 71.21583557]
[111.51210022 57.62488556]
[117.85923004 44.03393555]
[105.36425781 52.33308029]
[91.31510162 57.58866501]
[76.44098663 59.52789307]
[61.51395798 58.05010223]
[47.30881882 53.23200226]
[34.56290054 45.32368088]
[23.93778801 34.73562241]
[15.98498249 22.01741219]
[11.11728382 7.82919598]
[9.58735085 -7.09257698]
[11.47459793 -21.97337914]
[16.68106651 -36.04081345]
[24.93650818 -48.56469727]
[35.81241989 -58.89496994]
[48.74427795 -66.49542999]
[63.06084824 -70.97157288]
[78.01901245 -72.09105682]
[92.84236908 -69.79577637]
[106.76148224 -64.20487213]
[119.05387878 -55.60853577]
[129.08151245 -44.45297623]
[136.32389832 -31.31722832]
[140.40510559 -16.88311005]
[141.11329651 -1.89983702]
[138.41171265 12.85487270]
[132.43959045 26.61689186]
[144.70195007 17.97777557]
[156.96432495 9.33866024]
[169.22668457 0.69954389]
[181.39852905 -8.06666374]
[193.47851562 -16.95901299]
[205.46534729 -25.97654343]
[217.35772705 -35.11827850]
[229.25010681 -44.26000977]
[241.14248657 -53.40174484]
[253.03486633 -62.54347992]
[264.92724609 -71.68521118]
[266.72775269 -87.38660431]
[279.15527344 -97.15045166]
[294.83676147 -95.18402863]
[304.46865845 -82.65399170]
[302.33654785 -66.99417877]
[289.70538330 -57.49528503]
[274.06896973 -59.79283524]
[262.17660522 -50.65110016]
[250.28422546 -41.50936508]
[238.39184570 -32.36763000]
[226.49946594 -23.22589684]
[214.60708618 -14.08416271]
[211.19874573 -7.47137833]
[202.37086487 -4.87902451]
[190.29087830 4.01332521]
[186.74571228 10.55377197]
[177.86581421 12.96191216]
[165.60343933 21.60102844]
[153.34106445 30.24014473]
[141.07870483 38.87926102]
[131.45018005 50.38106537]
[125.10305023 63.97201538]
[118.75592041 77.56296539]
[127.12574768 85.08374023]
[132.38906860 95.73265839]
[133.38981628 108.19812775]
[129.53205872 120.75185394]
[120.92420197 131.48838806]
[133.86225891 139.07829285]
[146.80030823 146.66819763]
[163.52156067 149.46751404]
[165.46055603 166.31021118]
[149.81283569 172.83595276]
[139.21040344 159.60626221]
[126.27235413 152.01634216]
[113.33429718 144.42643738]
[100.31798553 151.88134766]
[100.31798553 166.88134766]
[100.31798553 181.88134766]
[100.31798553 196.88134766]
[100.31798553 211.88134766]
[100.31798553 226.88134766]
[100.31798553 241.88134766]
[100.31798553 256.88134766]
[100.31798553 271.88134766]
[100.31798553 286.88134766]
[114.85787201 290.94265747]
[127.76225281 298.77716064]
[138.07353210 309.80349731]
[145.02656555 323.20343018]
[148.10536194 337.98260498]
[147.08146667 353.04428101]
[142.03086853 367.27081299]
[133.32833862 379.60647583]
[121.61968231 389.13589478]
[107.77374268 395.15191650]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 51]
[22 50]
[23 49]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[55 117]
[56 116]
[57 115]
[83 114]
[84 113]
[85 112]
[86 111]
[87 109]
[88 108]
[89 106]
[90 105]
[91 104]
[92 103]
[93 102]
[94 101]
[122 130]
[123 129]
[124 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
