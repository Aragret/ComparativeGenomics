%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGACAAUUAGGGGGGGGGGACAGCCCAAUAUCUACAAUCAACCAACAAGUCAUUAUUACCCUCACUGUCxxxxxxxxxxUCUCUCCUUAAUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCCCCCCCCCCCAGACAAUUA\
) } def
/len { sequence length } bind def

/coor [
[81.83942413 360.57647705]
[69.28120422 352.22531128]
[59.19498062 341.01287842]
[52.21478653 327.64395142]
[48.77940369 312.95898438]
[49.10477829 297.88101196]
[53.17046356 283.35787964]
[60.72088242 270.30255127]
[71.28141022 259.53564453]
[84.18820953 251.73402405]
[98.62993622 247.38807678]
[98.00595856 232.40104675]
[97.38198090 217.41403198]
[96.75800323 202.42701721]
[96.13402557 187.44000244]
[95.51004791 172.45298767]
[94.88607025 157.46597290]
[94.26209259 142.47895813]
[93.63811493 127.49194336]
[93.01413727 112.50492859]
[85.68845367 100.59585571]
[91.99884796 88.11904907]
[88.49623108 79.61119843]
[91.52106476 72.81443787]
[91.20900726 57.81768036]
[90.89694977 42.82092667]
[75.90551758 42.18114471]
[60.98483658 40.59183121]
[46.19500351 38.05938339]
[31.59556198 34.59400558]
[17.24530220 30.20964432]
[3.20201087 24.92395973]
[-10.47776699 18.75823212]
[-23.73894691 11.73729038]
[-36.52813339 3.88940525]
[-48.79382324 -4.75382233]
[-60.48662567 -14.15758896]
[-71.55946350 -24.28402901]
[-81.96775055 -35.09236526]
[-91.66957092 -46.53907776]
[-100.62585449 -58.57807541]
[-108.80055237 -71.16087341]
[-116.16073608 -84.23681641]
[-122.67676544 -97.75324249]
[-128.32241821 -111.65573883]
[-133.07493591 -125.88830566]
[-136.91520691 -140.39364624]
[-139.82775879 -155.11334229]
[-141.80085754 -169.98812866]
[-142.82656860 -184.95811462]
[-142.90074158 -199.96301270]
[-142.02311707 -214.94241333]
[-140.19718933 -229.83598328]
[-137.43032837 -244.58377075]
[-133.73365784 -259.12637329]
[-129.12210083 -273.40524292]
[-123.61418915 -287.36285400]
[-117.23212433 -300.94305420]
[-110.00159454 -314.09112549]
[-101.95171356 -326.75415039]
[-93.11490631 -338.88113403]
[-83.52674103 -350.42318726]
[-73.22583771 -361.33392334]
[-62.25366592 -371.56936646]
[-50.65441132 -381.08828735]
[-38.47478485 -389.85235596]
[-25.76382256 -397.82632446]
[-12.57271194 -404.97802734]
[1.04543233 -411.27871704]
[15.03577423 -416.70300293]
[29.34197998 -421.22903442]
[43.90644073 -424.83862305]
[58.67051697 -427.51718140]
[73.57474518 -429.25393677]
[88.55912781 -430.04193115]
[103.56331635 -429.87796021]
[118.52689362 -428.76266479]
[133.38960266 -426.70059204]
[148.09161377 -423.70001221]
[162.57371521 -419.77301025]
[176.77758789 -414.93539429]
[190.64604187 -409.20666504]
[204.12324524 -402.60986328]
[217.15490723 -395.17156982]
[229.68856812 -386.92172241]
[241.67375183 -377.89355469]
[253.06219482 -368.12341309]
[263.80804443 -357.65063477]
[273.86804199 -346.51739502]
[283.20169067 -334.76852417]
[291.77136230 -322.45132446]
[299.54257202 -309.61541748]
[306.48400879 -296.31246948]
[312.56777954 -282.59603882]
[317.76931763 -268.52136230]
[322.06774902 -254.14511108]
[325.44567871 -239.52520752]
[327.88958740 -224.72047424]
[329.38958740 -209.79055786]
[329.93963623 -194.79556274]
[329.53756714 -179.79586792]
[328.18493652 -164.85186768]
[325.88723755 -150.02375793]
[322.65368652 -135.37121582]
[318.49731445 -120.95326996]
[313.43487549 -106.82796478]
[307.48675537 -93.05217743]
[300.67687988 -79.68138885]
[293.03268433 -66.76941681]
[284.58496094 -54.36827469]
[275.36770630 -42.52789307]
[265.41802979 -31.29594040]
[254.77603149 -20.71765327]
[243.48452759 -10.83562374]
[231.58900452 -1.68964350]
[219.13734436 6.68345928]
[206.17970276 14.24996853]
[192.76824951 20.97941589]
[178.95700073 26.84470749]
[164.80154419 31.82221985]
[150.35888672 35.89191437]
[135.68719482 39.03740311]
[120.84555054 41.24602127]
[105.89370728 42.50887299]
[106.20576477 57.50562668]
[106.51782227 72.50238037]
[106.98586273 87.49507141]
[114.31154633 99.40414429]
[108.00115204 111.88095093]
[108.62512970 126.86796570]
[109.24910736 141.85498047]
[109.87308502 156.84199524]
[110.49706268 171.82901001]
[111.12104034 186.81602478]
[111.74501801 201.80303955]
[112.36899567 216.79005432]
[112.99297333 231.77706909]
[113.61695099 246.76409912]
[128.36994934 249.89453125]
[141.88059998 256.59628296]
[153.29957581 266.44808960]
[161.90908813 278.83059692]
[167.16793823 292.96551514]
[168.74554443 307.96423340]
[166.54273987 322.88397217]
[160.69798279 336.78683472]
[151.57870483 348.79888916]
[139.75813293 358.16506958]
[125.97932434 364.29653931]
[111.10842133 366.80795288]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[22 127]
[24 126]
[25 125]
[26 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
