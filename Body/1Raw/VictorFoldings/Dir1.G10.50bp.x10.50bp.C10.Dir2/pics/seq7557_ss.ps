%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACACUCACAACAGGGGGGGGGGAAACUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGxxxxxxxxxxUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUCCCCCCCCCCUUACACUCACAACA\
) } def
/len { sequence length } bind def

/coor [
[85.02451324 427.80838013]
[70.66226196 423.30163574]
[57.50136948 415.99575806]
[46.08077240 406.18991089]
[36.86813354 394.28561401]
[30.24070549 380.77035522]
[26.46987534 366.19760132]
[25.71005821 351.16403198]
[27.99236870 336.28533936]
[33.22334671 322.17074585]
[41.18878555 309.39825439]
[51.56250763 298.49087524]
[63.91971207 289.89526367]
[77.75438690 283.96343994]
[92.50000000 280.93826294]
[92.50000000 265.93826294]
[92.50000000 250.93824768]
[92.50000000 235.93824768]
[92.50000000 220.93824768]
[92.50000000 205.93824768]
[92.50000000 190.93824768]
[92.50000000 175.93824768]
[92.50000000 160.93824768]
[92.50000000 145.93824768]
[92.50000000 130.93824768]
[82.38368225 126.51586151]
[74.38630676 118.90407562]
[69.46980286 109.01846313]
[54.48809814 109.75910187]
[50.54701614 124.36468506]
[42.28375244 137.03645325]
[30.50786018 146.53294373]
[16.37301636 151.92381287]
[1.26401222 152.68089294]
[-13.33892727 148.73002625]
[-26.00515366 140.45826721]
[-35.49375916 128.67602539]
[-40.87514877 114.53756714]
[-41.62210846 99.42806244]
[-37.66145706 84.82777405]
[-29.38121986 72.16709137]
[-17.59260941 62.68637848]
[-3.45055366 57.31446457]
[11.65945148 56.57763290]
[26.25708389 60.54806519]
[38.91221237 68.83678436]
[48.38502121 80.63174438]
[53.74745941 94.77739716]
[68.72916412 94.03675842]
[81.44123077 74.13500977]
[104.36596680 68.46646118]
[109.86578369 54.51110458]
[98.57923889 40.63125229]
[97.57820129 21.97910118]
[108.16989136 5.64382172]
[127.07987976 -1.62322521]
[126.48728180 -16.61151505]
[125.89468384 -31.59980392]
[113.15746307 -40.26406860]
[108.02436066 -54.59950256]
[112.26657104 -69.03791046]
[124.05612946 -78.10125732]
[123.46353149 -93.08955383]
[122.87093353 -108.07784271]
[122.27833557 -123.06613159]
[121.68573761 -138.05441284]
[106.91574097 -141.07281494]
[93.29759216 -147.53883362]
[81.62301636 -157.07653809]
[72.57077026 -169.13142395]
[66.66714478 -183.00263977]
[64.25534821 -197.88372803]
[65.47561646 -212.90951538]
[70.25700378 -227.20643616]
[78.32151794 -239.94326782]
[89.20030212 -250.37951660]
[102.26088715 -257.90844727]
[116.74393463 -262.09231567]
[131.80741882 -262.68789673]
[146.57557678 -259.66055298]
[160.18981934 -253.18626404]
[171.85859680 -243.64147949]
[180.90353394 -231.58111572]
[186.79875183 -217.70632935]
[189.20152283 -202.82377625]
[187.97215271 -187.79873657]
[183.18209839 -173.50471497]
[175.10986328 -160.77276611]
[164.22474670 -150.34310913]
[151.15960693 -142.82211304]
[136.67402649 -138.64701843]
[137.26661682 -123.65872955]
[137.85922241 -108.67044067]
[138.45182800 -93.68215179]
[139.04441833 -78.69386292]
[151.51274109 -70.58960724]
[156.88165283 -56.53119659]
[152.89637756 -41.83524704]
[140.88296509 -32.19240189]
[141.47557068 -17.20411301]
[142.06817627 -2.21582437]
[154.25547791 6.52886772]
[168.64407349 2.28995538]
[183.03265381 -1.94895732]
[197.42124939 -6.18787003]
[211.80984497 -10.42678261]
[226.19844055 -14.66569519]
[230.43275452 -29.50059128]
[242.03030396 -39.67409515]
[257.29037476 -41.93987274]
[271.34353638 -35.57492828]
[279.70544434 -22.61029053]
[279.70788574 -7.18292618]
[271.35003662 5.78434610]
[257.29888916 12.15371799]
[242.03811646 9.89274597]
[230.43734741 -0.27710176]
[216.04875183 3.96181083]
[201.66017151 8.20072365]
[187.27157593 12.43963623]
[172.88298035 16.67854881]
[158.49438477 20.91746140]
[158.57919312 37.29328537]
[151.02494812 51.10094833]
[138.26264954 59.17572021]
[123.82114410 60.01092148]
[118.32132721 73.96627808]
[125.71668243 81.23626709]
[130.38301086 90.49744415]
[131.82510376 100.76702118]
[129.88995361 110.95520782]
[124.78289032 119.98083496]
[117.04589844 126.88611603]
[107.50000000 130.93824768]
[107.50000000 145.93824768]
[107.50000000 160.93824768]
[107.50000000 175.93824768]
[107.50000000 190.93824768]
[107.50000000 205.93824768]
[107.50000000 220.93824768]
[107.50000000 235.93824768]
[107.50000000 250.93824768]
[107.50000000 265.93826294]
[107.50000000 280.93826294]
[122.24561310 283.96343994]
[136.08029175 289.89526367]
[148.43750000 298.49087524]
[158.81121826 309.39825439]
[166.77665710 322.17074585]
[172.00762939 336.28533936]
[174.28994751 351.16403198]
[173.53012085 366.19760132]
[169.75929260 380.77035522]
[163.13186646 394.28561401]
[153.91921997 406.18991089]
[142.49862671 415.99575806]
[129.33773804 423.30163574]
[114.97548676 427.80838013]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[28 49]
[29 48]
[51 127]
[52 126]
[56 101]
[57 100]
[58 99]
[62 95]
[63 94]
[64 93]
[65 92]
[66 91]
[102 122]
[103 121]
[104 120]
[105 119]
[106 118]
[107 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
