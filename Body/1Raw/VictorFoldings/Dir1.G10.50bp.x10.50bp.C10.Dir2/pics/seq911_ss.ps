%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUAAACAGGGGGGGGGGAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGxxxxxxxxxxAUUCAGAAUAAUAACACACCCGACCACACCGCUAACAAUCAAUACUAAACCCCCCCCCCCCCCCAUAAAUA\
) } def
/len { sequence length } bind def

/coor [
[74.90958405 385.58743286]
[61.42070770 378.85589600]
[49.93520737 369.09130859]
[41.12083817 356.86141968]
[35.49005508 342.87722778]
[33.37022781 327.95175171]
[34.88459396 312.95275879]
[39.94511795 298.75222778]
[48.25758362 286.17581177]
[59.33871460 275.95465088]
[72.54427338 268.68301392]
[87.10649109 264.78366089]
[86.79851532 249.78681946]
[86.49053955 234.78997803]
[86.18256378 219.79315186]
[85.87458038 204.79631042]
[85.56660461 189.79946899]
[85.25862885 174.80262756]
[84.95065308 159.80578613]
[84.64266968 144.80895996]
[84.33469391 129.81211853]
[72.94361877 120.05284119]
[58.07702255 122.04889679]
[43.21042633 124.04496002]
[28.34382629 126.04101562]
[13.47722721 128.03706360]
[7.83214998 140.64999390]
[-3.22986102 148.74932861]
[-16.74321365 150.29681396]
[-29.15038490 144.99311829]
[-37.23845673 134.32846069]
[-52.14290237 136.01884460]
[-67.04734802 137.70924377]
[-79.90612030 147.88688660]
[-95.04773712 141.58898926]
[-96.89580536 125.29430389]
[-83.54919434 115.76540375]
[-68.73774719 122.80480194]
[-53.83330154 121.11440277]
[-38.92885208 119.42400360]
[-31.32453918 104.90765381]
[-16.42670441 97.69195557]
[0.00352894 100.78645325]
[11.48116970 113.17047119]
[26.34776878 111.17441559]
[41.21436691 109.17835999]
[56.08096695 107.18230438]
[70.94756317 105.18624115]
[71.96968842 95.43351746]
[76.04783630 86.92607880]
[82.48530579 80.54687500]
[90.35820770 76.86448669]
[98.64218140 76.08614349]
[106.34342957 78.05804443]
[115.01004028 65.81508636]
[123.67664337 53.57213211]
[132.34326172 41.32918167]
[141.00985718 29.08622742]
[149.67646790 16.84327316]
[150.92124939 -1.50015008]
[167.08677673 -8.26185036]
[175.50018311 -20.68016434]
[183.91358948 -33.09848022]
[192.32699585 -45.51679230]
[180.93551636 -55.30105591]
[170.73362732 -66.32009888]
[161.85433960 -78.43025970]
[154.41342163 -91.47367096]
[148.50787354 -105.28026581]
[144.21467590 -119.67006683]
[141.58981323 -134.45545959]
[140.66751099 -149.44369507]
[141.45977783 -164.43936157]
[143.95629883 -179.24696350]
[148.12451172 -193.67346191]
[153.91007996 -207.53076172]
[161.23759460 -220.63822937]
[170.01150513 -232.82495117]
[180.11743164 -243.93206787]
[191.42361450 -253.81477356]
[203.78266907 -262.34420776]
[217.03347778 -269.40921021]
[231.00326538 -274.91763306]
[245.50990295 -278.79769897]
[260.36428833 -280.99880981]
[275.37277222 -281.49224854]
[290.33966064 -280.27160645]
[305.06985474 -277.35278320]
[319.37127686 -272.77383423]
[333.05752563 -266.59448242]
[345.95013428 -258.89523315]
[357.88107300 -249.77653503]
[368.69473267 -239.35720825]
[378.25015259 -227.77310181]
[386.42279053 -215.17526245]
[393.10607910 -201.72790527]
[398.21289062 -187.60633850]
[401.67666626 -172.99470520]
[403.45220947 -158.08345032]
[403.51635742 -143.06701660]
[401.86834717 -128.14112854]
[398.52963257 -113.50041199]
[393.54370117 -99.33573151]
[386.97558594 -85.83173370]
[378.91094971 -73.16449738]
[369.45486450 -61.49914169]
[358.73065186 -50.98776627]
[346.87811279 -41.76740265]
[334.05175781 -33.95825195]
[320.41885376 -27.66213036]
[306.15707397 -22.96111679]
[291.45236206 -19.91650009]
[276.49645996 -18.56797218]
[261.48431396 -18.93311310]
[246.61166382 -21.00716400]
[232.07237244 -24.76308441]
[218.05601501 -30.15190887]
[204.74531555 -37.10338211]
[196.33190918 -24.68506813]
[187.91850281 -12.26675415]
[179.50508118 0.15155976]
[181.47572327 12.12564850]
[174.51542664 22.55280876]
[161.91941833 25.50988007]
[153.25282288 37.75283432]
[144.58621216 49.99578857]
[135.91960144 62.23874283]
[127.25299072 74.48169708]
[118.58638763 86.72464752]
[123.13765717 112.24081421]
[99.33153534 129.50413513]
[99.63951111 144.50097656]
[99.94748688 159.49781799]
[100.25547028 174.49465942]
[100.56344604 189.49148560]
[100.87142181 204.48832703]
[101.17939758 219.48516846]
[101.48737335 234.48200989]
[101.79535675 249.47885132]
[102.10333252 264.47567749]
[116.81336975 267.77389526]
[130.30632019 274.49725342]
[141.79774475 284.25485229]
[150.61952209 296.47940063]
[156.25878906 310.46020508]
[158.38766479 325.38436890]
[156.88238525 340.38430786]
[151.83047485 354.58786011]
[143.52563477 367.16934204]
[132.45069885 377.39718628]
[119.24955750 384.67684937]
[104.68969727 388.58505249]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 48]
[23 47]
[24 46]
[25 45]
[26 44]
[31 40]
[32 39]
[33 38]
[54 129]
[55 128]
[56 127]
[57 126]
[58 125]
[59 124]
[61 121]
[62 120]
[63 119]
[64 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
