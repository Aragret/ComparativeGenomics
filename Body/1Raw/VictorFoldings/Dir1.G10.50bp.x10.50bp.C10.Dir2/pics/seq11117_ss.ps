%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAACCCCACGGGGGGGGGGCCUACUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUxxxxxxxxxxACCGCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGCCCCCCCCCCAAAACCCCAC\
) } def
/len { sequence length } bind def

/coor [
[63.84576035 517.69714355]
[49.99982071 511.68109131]
[38.29115677 502.15167236]
[29.58863449 489.81600952]
[24.53803253 475.58947754]
[23.51414108 460.52780151]
[26.59293938 445.74865723]
[33.54596329 432.34872437]
[43.85724640 421.32238770]
[56.76162720 413.48788452]
[71.30151367 409.42657471]
[71.30151367 394.42657471]
[71.30151367 379.42657471]
[71.30151367 364.42657471]
[71.30151367 349.42657471]
[71.30151367 334.42657471]
[71.30151367 319.42657471]
[71.30151367 304.42657471]
[71.30151367 289.42657471]
[71.30151367 274.42657471]
[71.30151367 259.42657471]
[60.98053360 251.65003967]
[56.98256302 239.15643311]
[60.98868179 226.46080017]
[71.74375153 218.28851318]
[72.05580902 203.29176331]
[72.36785889 188.29501343]
[72.67991638 173.29826355]
[63.69092941 185.30650330]
[50.43787003 192.33192444]
[35.45419312 193.03152466]
[21.60417938 187.27156067]
[11.53538990 176.15313721]
[7.17257643 161.80162048]
[9.34973431 146.96046448]
[17.65067673 134.46669006]
[30.48859978 126.70861816]
[45.40940475 125.16926575]
[59.56083298 130.14289856]
[70.23770142 140.67877197]
[75.39881897 154.76136780]
[79.40656281 140.30667114]
[83.41429901 125.85198975]
[87.42204285 111.39730072]
[82.08052826 97.38058472]
[69.46939850 89.25904846]
[56.85827255 81.13750458]
[42.44243622 86.87886810]
[27.41343117 83.01769257]
[17.55022049 71.03868103]
[16.64540863 55.54800797]
[25.04691315 42.50215149]
[39.52418518 36.91751480]
[54.51041794 40.94149780]
[64.24310303 53.02679825]
[64.97981262 68.52637482]
[77.59094238 76.64791870]
[90.20207214 84.76946259]
[96.71022797 81.04200745]
[109.72653198 73.58709717]
[116.23468781 69.85964203]
[115.61071014 54.87262344]
[107.30604553 41.40625763]
[114.50720978 28.36814117]
[113.88323212 13.38112450]
[110.38061523 4.87327290]
[113.40545654 -1.92349243]
[113.09339905 -16.92024612]
[99.03893280 -22.78471375]
[88.58956146 -33.86309052]
[83.55568695 -48.23598480]
[84.80947113 -63.41320038]
[92.13368225 -76.76519775]
[104.25936127 -85.97866058]
[119.08565521 -89.45729828]
[134.04382324 -86.59841919]
[146.54226685 -77.89734650]
[154.41555786 -64.86157990]
[156.29960632 -49.74965668]
[151.86798096 -35.17980194]
[141.88848877 -23.67633820]
[128.09014893 -17.23230171]
[128.40220642 -2.23554873]
[128.87025452 12.75714779]
[129.49423218 27.74416351]
[137.75427246 40.13855743]
[130.59773254 54.24864578]
[131.22171021 69.23566437]
[137.39749146 73.49120331]
[150.94409180 67.04994965]
[149.74906921 82.00229645]
[155.92485046 86.25784302]
[170.15162659 81.50402832]
[174.88667297 76.74095154]
[180.47961426 75.34440613]
[185.07015991 76.86177826]
[196.18484497 65.60236359]
[210.55810547 69.50856781]
[224.97032166 65.35067749]
[239.38253784 61.19279099]
[241.88281250 46.13585281]
[250.67544556 33.65979004]
[264.01467896 26.24173164]
[279.25198364 25.35454369]
[293.36199951 31.17437363]
[303.54315186 42.54569244]
[307.77398682 57.21071625]
[305.21444702 72.25769043]
[296.37274170 84.69903564]
[283.00439453 92.06450653]
[267.76370239 92.89168549]
[253.67671204 87.01633453]
[243.54042053 75.60501099]
[229.12820435 79.76289368]
[214.71598816 83.92078400]
[204.63217163 94.88279724]
[189.22804260 91.27399445]
[174.90544128 95.73080444]
[160.67866516 100.48461914]
[101.87673187 115.40504456]
[97.86898804 129.85972595]
[93.86125183 144.31442261]
[89.85350800 158.76910400]
[87.67667389 173.61030579]
[87.36461639 188.60707092]
[87.05255890 203.60382080]
[86.74050140 218.60057068]
[99.07035065 230.96633911]
[98.68227386 248.08747864]
[86.30151367 259.42657471]
[86.30151367 274.42657471]
[86.30151367 289.42657471]
[86.30151367 304.42657471]
[86.30151367 319.42657471]
[86.30151367 334.42657471]
[86.30151367 349.42657471]
[86.30151367 364.42657471]
[86.30151367 379.42657471]
[86.30151367 394.42657471]
[86.30151367 409.42657471]
[100.84140015 413.48788452]
[113.74578094 421.32238770]
[124.05706787 432.34872437]
[131.01008606 445.74865723]
[134.08888245 460.52780151]
[133.06500244 475.58947754]
[128.01438904 489.81600952]
[119.31186676 502.15167236]
[107.60321045 511.68109131]
[93.75727081 517.69714355]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 127]
[26 126]
[27 125]
[28 124]
[41 123]
[42 122]
[43 121]
[44 120]
[45 58]
[46 57]
[47 56]
[61 88]
[62 87]
[64 85]
[65 84]
[67 83]
[68 82]
[92 119]
[93 118]
[96 117]
[98 115]
[99 114]
[100 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
