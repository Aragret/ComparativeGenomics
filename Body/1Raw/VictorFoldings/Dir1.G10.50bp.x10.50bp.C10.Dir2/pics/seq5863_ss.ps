%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUCGCCCUGGGGGGGGGGUACCACGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUAAUCUUAUAGAxxxxxxxxxxCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCAUCCUAGUCCCCCCCCCCCCUCAUCGCCCU\
) } def
/len { sequence length } bind def

/coor [
[96.52087402 390.18908691]
[83.03199768 383.45755005]
[71.54649353 373.69299316]
[62.73212433 361.46310425]
[57.10134506 347.47888184]
[54.98151398 332.55340576]
[56.49588394 317.55441284]
[61.55640793 303.35391235]
[69.86887360 290.77749634]
[80.95000458 280.55633545]
[94.15555573 273.28469849]
[108.71778107 269.38531494]
[108.40980530 254.38848877]
[108.10182953 239.39164734]
[107.79384613 224.39480591]
[107.48587036 209.39797974]
[107.17789459 194.40113831]
[106.86991882 179.40429688]
[106.56193542 164.40745544]
[106.25395966 149.41061401]
[105.94598389 134.41378784]
[89.06935120 132.01177979]
[75.86614227 122.10809326]
[69.28564453 107.56465149]
[70.48067474 92.18988800]
[78.63771820 79.74558258]
[70.74123383 66.99232483]
[62.84475327 54.23906708]
[54.43134308 41.82075500]
[45.51519394 29.75832176]
[36.59904099 17.69589043]
[19.56635284 10.77359486]
[18.20274353 -6.69595289]
[9.04080868 -18.57277679]
[-0.12112697 -30.44960022]
[-9.28306198 -42.32642365]
[-22.23123741 -34.71406555]
[-36.03141403 -28.78461456]
[-50.46594238 -24.63158989]
[-65.30716705 -22.32048798]
[-80.32102966 -21.88776016]
[-95.27072906 -23.34022903]
[-109.92049408 -26.65498924]
[-124.03927612 -31.77976227]
[-137.40440369 -38.63372040]
[-149.80506897 -47.10877228]
[-161.04573059 -57.07124710]
[-170.94908142 -68.36402893]
[-179.35893250 -80.80900574]
[-186.14266968 -94.20991516]
[-191.19326782 -108.35539246]
[-194.43110657 -123.02234650]
[-195.80511475 -137.97946167]
[-195.29359436 -152.99084473]
[-192.90464783 -167.81974792]
[-188.67593384 -182.23228455]
[-182.67414856 -196.00114441]
[-174.99394226 -208.90919495]
[-165.75645447 -220.75285339]
[-155.10736084 -231.34530640]
[-143.21463013 -240.51951599]
[-130.26580811 -248.13078308]
[-116.46513367 -254.05906677]
[-102.03025818 -258.21087646]
[-87.18883514 -260.52072144]
[-72.17494202 -260.95220947]
[-57.22536087 -259.49847412]
[-42.57587814 -256.18246460]
[-28.45752716 -251.05651855]
[-15.09298325 -244.20143127]
[-2.69302058 -235.72534180]
[8.54679489 -225.76191711]
[18.44919586 -214.46830750]
[26.85800552 -202.02261353]
[33.64060593 -188.62113953]
[38.69002533 -174.47523499]
[41.92662811 -159.80799866]
[43.29936600 -144.85076904]
[42.78659439 -129.83943176]
[40.39639282 -115.01074219]
[36.16646194 -100.59855652]
[30.16351509 -86.83019257]
[22.48222733 -73.92279053]
[13.24374008 -62.07992172]
[2.59376144 -51.48835754]
[11.75569630 -39.61153412]
[20.91763115 -27.73471260]
[30.07956696 -15.85788822]
[42.06896210 -13.98262691]
[49.79445267 -4.10901642]
[48.66147232 8.77973938]
[57.57762527 20.84217072]
[66.49377441 32.90460205]
[69.30722046 33.42954254]
[72.07479095 35.13535309]
[74.33245087 38.00758362]
[75.63119507 41.85944366]
[75.59801483 46.34258652]
[83.49449158 59.09584045]
[91.39097595 71.84909821]
[103.94110107 69.72036743]
[116.68566895 73.12651825]
[127.21546173 81.81953430]
[133.37965393 94.51985931]
[133.71835327 109.09592438]
[148.62280273 110.78632355]
[163.52725220 112.47671509]
[178.43170166 114.16711426]
[184.68147278 100.39048767]
[194.88407898 89.22079468]
[208.03996277 81.75233459]
[222.86024475 78.71677399]
[237.89297485 80.41152191]
[251.66540527 86.67053223]
[262.82824707 96.88062286]
[270.28790283 110.04150391]
[273.31353760 124.86380768]
[271.60870361 139.89540100]
[265.34048462 153.66363525]
[255.12290955 164.81964111]
[241.95703125 172.27047729]
[227.13270569 175.28616333]
[212.10224915 173.57127380]
[198.33822632 167.29382324]
[187.18905640 157.06877136]
[179.74705505 143.89790344]
[176.74130249 129.07156372]
[161.83685303 127.38116455]
[146.93240356 125.69076538]
[132.02795410 124.00036621]
[120.94282532 134.10580444]
[121.25080109 149.10264587]
[121.55877686 164.09948730]
[121.86675262 179.09631348]
[122.17473602 194.09315491]
[122.48271179 209.08999634]
[122.79068756 224.08683777]
[123.09866333 239.08366394]
[123.40663910 254.08050537]
[123.71462250 269.07733154]
[138.42465210 272.37557983]
[151.91761780 279.09893799]
[163.40902710 288.85653687]
[172.23081970 301.08108521]
[177.87007141 315.06185913]
[179.99894714 329.98605347]
[178.49366760 344.98596191]
[173.44175720 359.18954468]
[165.13691711 371.77099609]
[154.06199646 381.99887085]
[140.86083984 389.27850342]
[126.30098724 393.18670654]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[26 100]
[27 99]
[28 98]
[29 93]
[30 92]
[31 91]
[33 88]
[34 87]
[35 86]
[36 85]
[105 130]
[106 129]
[107 128]
[108 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
