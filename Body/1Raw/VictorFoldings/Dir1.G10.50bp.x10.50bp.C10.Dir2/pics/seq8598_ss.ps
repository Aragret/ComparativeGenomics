%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGAAACCAUGGGGGGGGGGCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAxxxxxxxxxxCAUCCACAACCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACCCCCCCCCCCUCAAAACCAU\
) } def
/len { sequence length } bind def

/coor [
[84.03388214 395.89324951]
[70.81368256 388.62078857]
[59.92688370 378.17376709]
[52.11575317 365.26452637]
[47.91287231 350.77322388]
[47.60479736 335.68786621]
[51.21253967 321.03704834]
[58.49011230 307.81967163]
[68.94132233 296.93688965]
[81.85358429 289.13073730]
[96.34651947 284.93347168]
[96.03446198 269.93670654]
[95.72240448 254.93995667]
[95.41034698 239.94320679]
[95.09829712 224.94644165]
[94.78623962 209.94969177]
[94.47418213 194.95294189]
[94.16212463 179.95619202]
[93.85006714 164.95942688]
[93.53800964 149.96267700]
[85.53761292 137.39912415]
[92.98614502 123.44097137]
[92.67408752 108.44422150]
[92.20604706 93.45152283]
[91.58206940 78.46450806]
[90.95809174 63.47749329]
[82.65341949 50.01112366]
[89.85458374 36.97301102]
[89.23061371 21.98599434]
[74.23005676 21.58580589]
[59.29178238 20.16287231]
[44.48543930 17.72382927]
[29.88006020 14.28004646]
[15.54374409 9.84758091]
[1.54333138 4.44709969]
[-12.05589962 -1.89621758]
[-25.19054222 -9.15279484]
[-37.79935455 -17.28879929]
[-49.82355118 -26.26629639]
[-61.20706558 -36.04342651]
[-71.89682770 -46.57460785]
[-81.84299469 -57.81073761]
[-90.99918365 -69.69942474]
[-99.32271576 -82.18523407]
[-106.77478027 -95.20996857]
[-113.32062531 -108.71287537]
[-118.92973328 -122.63101959]
[-123.57595825 -136.89949036]
[-127.23763275 -151.45176697]
[-129.89767456 -166.22001648]
[-131.54370117 -181.13534546]
[-132.16802979 -196.12825012]
[-131.76773071 -211.12879944]
[-130.34471130 -226.06706238]
[-127.90556335 -240.87338257]
[-124.46167755 -255.47874451]
[-120.02912140 -269.81503296]
[-114.62854004 -283.81539917]
[-108.28513336 -297.41461182]
[-101.02847290 -310.54919434]
[-92.89237976 -323.15795898]
[-83.91480255 -335.18209839]
[-74.13759613 -346.56555176]
[-63.60634232 -357.25521851]
[-52.37014771 -367.20132446]
[-40.48139954 -376.35742188]
[-27.99552917 -384.68087769]
[-14.97075272 -392.13284302]
[-1.46779609 -398.67861938]
[12.45038128 -404.28762817]
[26.71888733 -408.93374634]
[41.27119446 -412.59533691]
[56.03944778 -415.25527954]
[70.95480347 -416.90118408]
[85.94770050 -417.52542114]
[100.94824982 -417.12503052]
[115.88650513 -415.70190430]
[130.69281006 -413.26266479]
[145.29814148 -409.81866455]
[159.63439941 -405.38601685]
[173.63475037 -399.98535156]
[187.23388672 -393.64184570]
[200.36843872 -386.38510132]
[212.97714233 -378.24893188]
[225.00122070 -369.27127075]
[236.38459778 -359.49398804]
[247.07421875 -348.96264648]
[257.02023315 -337.72640991]
[266.17626953 -325.83758545]
[274.49963379 -313.35165405]
[281.95150757 -300.32684326]
[288.49719238 -286.82382202]
[294.10610962 -272.90560913]
[298.75213623 -258.63708496]
[302.41360474 -244.08474731]
[305.07345581 -229.31648254]
[306.71929932 -214.40112305]
[307.34341431 -199.40820312]
[306.94293213 -184.40766907]
[305.51968384 -169.46942139]
[303.08035278 -154.66313171]
[299.63626099 -140.05781555]
[295.20352173 -125.72158813]
[289.80276489 -111.72128296]
[283.45916748 -98.12218475]
[276.20233154 -84.98768616]
[268.06607056 -72.37903595]
[259.08831787 -60.35501862]
[249.31095886 -48.97169876]
[238.77957153 -38.28215027]
[227.54324341 -28.33621407]
[215.65437317 -19.18025970]
[203.16838074 -10.85697937]
[190.14350891 -3.40518022]
[176.64047241 3.14039445]
[162.72221375 8.74922562]
[148.45364380 13.39516163]
[133.90129089 17.05654144]
[119.13299561 19.71629333]
[104.21762848 21.36201668]
[104.84160614 36.34903336]
[113.10163879 48.74342728]
[105.94510651 62.85351562]
[106.56908417 77.84053040]
[107.19306183 92.82754517]
[110.66732025 100.16332245]
[107.67083740 108.13216400]
[107.98289490 123.12892151]
[116.00561523 136.76513672]
[108.53476715 149.65061951]
[108.84682465 164.64736938]
[109.15888214 179.64413452]
[109.47093201 194.64088440]
[109.78298950 209.63763428]
[110.09504700 224.63438416]
[110.40710449 239.63114929]
[110.71916199 254.62789917]
[111.03121948 269.62466431]
[111.34326935 284.62139893]
[125.99826813 288.21215820]
[139.22407532 295.47442627]
[150.11894226 305.91302490]
[157.94003296 318.81622314]
[162.15411377 333.30429077]
[162.47383118 348.38940430]
[158.87741089 363.04299927]
[151.61004639 376.26602173]
[141.16723633 387.15686035]
[128.26101685 394.97296143]
[113.77131653 399.18142700]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 128]
[23 127]
[24 125]
[25 124]
[26 123]
[28 121]
[29 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
