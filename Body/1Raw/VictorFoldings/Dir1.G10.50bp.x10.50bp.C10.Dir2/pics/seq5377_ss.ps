%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACUACUCGGGGGGGGGGAACUUAAACUCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAxxxxxxxxxxCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCCCCCCCCCCCUACUAGUC\
) } def
/len { sequence length } bind def

/coor [
[60.58087158 491.72119141]
[47.36067581 484.44873047]
[36.47387314 474.00170898]
[28.66274071 461.09246826]
[24.45985985 446.60116577]
[24.15178680 431.51580811]
[27.75952911 416.86499023]
[35.03710175 403.64761353]
[45.48830795 392.76483154]
[58.40056992 384.95867920]
[72.89350891 380.76141357]
[72.58145142 365.76464844]
[72.26939392 350.76788330]
[71.95733643 335.77114868]
[71.64528656 320.77438354]
[71.33322906 305.77764893]
[71.02117157 290.78088379]
[70.70911407 275.78411865]
[70.39705658 260.78738403]
[70.08499908 245.79061890]
[60.04230881 256.93261719]
[45.40262222 260.20059204]
[31.57501221 254.38705444]
[23.66850662 241.63999939]
[24.60440063 226.66923523]
[34.03689957 215.00613403]
[48.48088837 210.95999146]
[62.59959412 216.02577209]
[71.17617798 228.33093262]
[73.35301208 213.48973083]
[64.26984406 204.29772949]
[62.12730026 191.35618591]
[67.93343353 179.37632751]
[79.76062775 172.85136414]
[82.24574280 158.05865479]
[80.23929596 150.89486694]
[84.93950653 142.98539734]
[87.73183441 128.24758911]
[90.52415466 113.50978088]
[79.25484467 101.61315155]
[82.57373047 81.91598511]
[78.86756897 67.38104248]
[75.16140747 52.84611130]
[60.27756119 54.84305191]
[45.26252747 55.09854507]
[30.31936455 53.60913467]
[15.65015697 50.39496613]
[1.45329285 45.49950027]
[-12.07923222 38.98894882]
[-24.76440811 30.95135880]
[-36.43067932 21.49542809]
[-46.92027283 10.74903774]
[-56.09133148 -1.14248061]
[-63.81982803 -14.01830673]
[-70.00123596 -27.70430946]
[-74.55197144 -42.01539993]
[-77.41047668 -56.75804138]
[-78.53810883 -71.73285675]
[-77.91960144 -86.73731995]
[-75.56333160 -101.56851959]
[-71.50115967 -116.02587891]
[-65.78802490 -129.91387939]
[-58.50118637 -143.04470825]
[-49.73919296 -155.24076843]
[-39.62054062 -166.33714294]
[-28.28207588 -176.18374634]
[-15.87713432 -184.64743042]
[-2.57347870 -191.61372375]
[11.44897270 -196.98843384]
[26.00058365 -200.69883728]
[40.88455963 -202.69479370]
[55.89960861 -202.94927979]
[70.84267426 -201.45887756]
[85.51166534 -198.24372864]
[99.70820618 -193.34732056]
[113.24029541 -186.83586121]
[125.92493439 -178.79742432]
[137.59057617 -169.34071350]
[148.07945251 -158.59362793]
[157.24971008 -146.70149231]
[164.97735596 -133.82514954]
[171.15785217 -120.13873291]
[175.70762634 -105.82733917]
[178.56515503 -91.08450317]
[179.69177246 -76.10961914]
[179.07226562 -61.10519409]
[176.71501160 -46.27415085]
[172.65187073 -31.81706238]
[166.93780518 -17.92944145]
[159.65010071 -4.79910469]
[150.88729858 7.39637613]
[140.76789856 18.49207115]
[129.42877197 28.33792305]
[117.02326965 36.80077744]
[103.71915436 43.76618576]
[89.69634247 49.13994980]
[93.40250397 63.67488480]
[97.10866547 78.20982361]
[101.37992859 63.83079910]
[115.57566833 58.98509216]
[127.74752808 67.75126648]
[127.65061188 82.75095367]
[115.36641693 91.35913086]
[130.32666016 90.26782227]
[145.28691101 89.17651367]
[160.24716187 88.08519745]
[168.64158630 84.31882477]
[175.52941895 87.13010406]
[190.50914001 86.35025787]
[205.48884583 85.57041931]
[220.99221802 78.70877838]
[231.87745667 91.70677948]
[222.40075684 105.76482391]
[206.26869202 100.55013275]
[191.28898621 101.32997894]
[176.30926514 102.10981750]
[161.33847046 103.04544830]
[146.37821960 104.13675690]
[131.41798401 105.22807312]
[116.45772552 106.31938171]
[105.26196289 116.30210876]
[102.46963501 131.03991699]
[99.67731476 145.77772522]
[97.03845215 160.54377747]
[94.55332947 175.33648682]
[104.95809937 189.36068726]
[102.08946991 206.24426270]
[88.19422150 215.66656494]
[86.01738739 230.50776672]
[85.08175659 245.47856140]
[85.39381409 260.47531128]
[85.70587158 275.47207642]
[86.01792145 290.46881104]
[86.32997894 305.46557617]
[86.64203644 320.46234131]
[86.95409393 335.45907593]
[87.26615143 350.45584106]
[87.57820892 365.45260620]
[87.89025879 380.44934082]
[102.54525757 384.04010010]
[115.77106476 391.30236816]
[126.66593170 401.74096680]
[134.48703003 414.64416504]
[138.70109558 429.13223267]
[139.02081299 444.21734619]
[135.42439270 458.87094116]
[128.15702820 472.09396362]
[117.71422577 482.98477173]
[104.80799866 490.80090332]
[90.31830597 495.00936890]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[29 129]
[30 128]
[34 125]
[35 124]
[37 123]
[38 122]
[39 121]
[41 98]
[42 97]
[43 96]
[103 120]
[104 119]
[105 118]
[106 117]
[108 116]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
