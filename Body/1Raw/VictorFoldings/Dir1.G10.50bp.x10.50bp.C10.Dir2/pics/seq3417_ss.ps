%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUACAACCGGGGGGGGGGCUUCGCUGACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCAxxxxxxxxxxCCUGACCCCUCUCCUUCAUAAAUUAUUCAGCUUCCUACACUAUUAAAGUUCCCCCCCCCCUACCACAACC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 382.24255371]
[71.19830322 376.22653198]
[59.48964310 366.69711304]
[50.78712082 354.36145020]
[45.73651886 340.13491821]
[44.71262741 325.07324219]
[47.79142761 310.29409790]
[54.74444962 296.89416504]
[65.05573273 285.86782837]
[77.96011353 278.03332520]
[92.50000000 273.97201538]
[92.50000000 258.97201538]
[92.50000000 243.97200012]
[92.50000000 228.97200012]
[92.50000000 213.97200012]
[92.50000000 198.97200012]
[92.50000000 183.97200012]
[92.50000000 168.97200012]
[92.50000000 153.97200012]
[92.50000000 138.97200012]
[75.04576874 130.86022949]
[63.46069717 115.49021149]
[60.46956635 96.47694397]
[66.77587128 78.29228973]
[80.89640045 65.21322632]
[76.29083252 50.93776703]
[71.68527222 36.66230392]
[67.07970428 22.38684464]
[62.47414017 8.11138439]
[59.03061676 5.22978354]
[56.93428421 1.74030733]
[56.20904922 -1.84520769]
[56.70560837 -5.06194639]
[58.13296890 -7.54589033]
[54.72998810 -22.15478325]
[51.32701111 -36.76367569]
[47.92403412 -51.37256622]
[31.21317291 -53.98862839]
[17.61763000 -67.08405304]
[13.54524517 -87.52779388]
[-0.35731068 -93.15975189]
[-14.25986671 -98.79170227]
[-28.16242218 -104.42366028]
[-42.06497955 -110.05561829]
[-57.33961868 -105.15001678]
[-70.61823273 -114.15323639]
[-71.71459961 -130.15878296]
[-59.78768539 -140.88856506]
[-43.98679733 -138.11161804]
[-36.43302155 -123.95817566]
[-22.53046608 -118.32621765]
[-8.62790966 -112.69425964]
[5.27464581 -107.06230164]
[19.17720222 -101.43035126]
[25.72377968 -105.08989716]
[18.40487671 -118.18316650]
[31.49825668 -125.50186920]
[38.81693268 -112.40900421]
[45.36351013 -116.06855774]
[47.84862900 -130.86126709]
[38.05917740 -119.49611664]
[25.70337296 -110.99117279]
[11.59213734 -105.90461731]
[-3.34839725 -104.57028961]
[-18.13767052 -107.07575989]
[-31.80505180 -113.25659943]
[-43.45353699 -122.70713806]
[-52.31862640 -134.80714417]
[-57.81850052 -148.76248169]
[-59.59219360 -163.65724182]
[-57.52330017 -178.51388550]
[-51.74760056 -192.35734558]
[-42.64416122 -204.27906799]
[-30.81044579 -213.49661255]
[-17.02311134 -219.40502930]
[-2.18703532 -221.61654663]
[12.72408104 -219.98602295]
[26.73160934 -214.62046814]
[38.91622162 -205.87203979]
[48.47823334 -194.31488037]
[54.79007721 -180.70750427]
[57.43751144 -165.94297791]
[56.24577332 -150.98556519]
[65.01197815 -163.15740967]
[73.77818298 -175.32923889]
[67.39975739 -189.30104065]
[68.87774658 -204.58865356]
[77.81458282 -217.07978821]
[91.80630493 -223.41439819]
[107.08921051 -221.88850403]
[119.55227661 -212.91255188]
[125.84299469 -198.90104675]
[124.26919556 -183.62298584]
[115.25422668 -171.18812561]
[101.22306061 -164.94136047]
[85.95001984 -166.56303406]
[77.18381500 -154.39120483]
[68.41761017 -142.21936035]
[62.64133835 -128.37614441]
[60.15621948 -113.58344269]
[78.94579315 -94.18551636]
[78.42915344 -69.76564026]
[62.53292465 -54.77554703]
[65.93590546 -40.16665268]
[69.33888245 -25.55776024]
[72.74185944 -10.94886875]
[76.74960327 3.50582004]
[81.35516357 17.78128052]
[85.96073151 32.05673981]
[90.56629181 46.33220291]
[95.17185974 60.60766220]
[104.82138824 60.60683441]
[114.18589783 62.93482208]
[122.71177673 67.45399475]
[129.89498901 73.89719391]
[135.31091309 81.88351440]
[138.63934326 90.94083405]
[139.68353271 100.53370667]
[138.38172913 110.09502411]
[151.90592957 116.58319092]
[165.43011475 123.07135773]
[180.98100281 119.12806702]
[193.67218018 128.94201660]
[193.76806641 144.98477173]
[181.19509888 154.94972229]
[165.59819031 151.19259644]
[158.94195557 136.59555054]
[145.41775513 130.10737610]
[131.89356995 123.61921692]
[121.13978577 133.58834839]
[107.50000000 138.97200012]
[107.50000000 153.97200012]
[107.50000000 168.97200012]
[107.50000000 183.97200012]
[107.50000000 198.97200012]
[107.50000000 213.97200012]
[107.50000000 228.97200012]
[107.50000000 243.97200012]
[107.50000000 258.97201538]
[107.50000000 273.97201538]
[122.03988647 278.03332520]
[134.94427490 285.86782837]
[145.25555420 296.89416504]
[152.20857239 310.29409790]
[155.28736877 325.07324219]
[154.26348877 340.13491821]
[149.21287537 354.36145020]
[140.51036072 366.69711304]
[128.80169678 376.22653198]
[114.95575714 382.24255371]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 111]
[26 110]
[27 109]
[28 108]
[29 107]
[34 106]
[35 105]
[36 104]
[37 103]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[59 100]
[60 99]
[83 98]
[84 97]
[85 96]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
