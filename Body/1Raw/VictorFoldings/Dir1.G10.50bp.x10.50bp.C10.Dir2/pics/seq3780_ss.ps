%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAAACAAUGGGGGGGGGGCUCAUAUGAAGUCACCCUAGCCAUCAUUCUACUAUCAACAUUACUAAUAAxxxxxxxxxxCUUCUCUCCUUAAUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCCCCCCCCCCCAGACAAU\
) } def
/len { sequence length } bind def

/coor [
[84.86396027 352.45587158]
[71.01802063 346.43984985]
[59.30935669 336.91043091]
[50.60683441 324.57476807]
[45.55623245 310.34823608]
[44.53234100 295.28656006]
[47.61113739 280.50741577]
[54.56415939 267.10748291]
[64.87544250 256.08114624]
[77.77982330 248.24662781]
[92.31970978 244.18531799]
[92.31970978 229.18531799]
[92.31970978 214.18531799]
[92.31970978 199.18531799]
[92.31970978 184.18531799]
[92.31970978 169.18531799]
[92.31970978 154.18531799]
[92.31970978 139.18531799]
[92.31970978 124.18531799]
[92.31970978 109.18531799]
[83.30369568 121.17329407]
[69.80486298 127.71404266]
[54.80902100 127.36081696]
[41.63311768 120.19174194]
[33.19154358 107.79255676]
[31.35149002 92.90584564]
[36.51996613 78.82440948]
[47.55375290 68.66293335]
[62.01227188 64.66904449]
[76.69744110 67.72615051]
[88.36102295 77.15805054]
[94.42350769 90.88043976]
[97.82648468 76.27154541]
[91.67572021 64.88638306]
[94.85549164 52.75757217]
[105.12185669 46.28385925]
[108.82801819 31.74892235]
[112.53417969 17.21398544]
[116.24034119 2.67905021]
[119.94650269 -11.85588646]
[105.72238922 -16.63989067]
[91.89555359 -22.47349358]
[78.54333496 -29.32407188]
[65.74039459 -37.15331268]
[53.55834198 -45.91743088]
[42.06529617 -55.56740952]
[31.32553864 -66.04929352]
[21.39912796 -77.30445099]
[12.34157658 -89.26994324]
[4.20354033 -101.87884521]
[-2.96947050 -115.06066132]
[-9.13734055 -128.74165344]
[-14.26557541 -142.84532166]
[-18.32549667 -157.29278564]
[-21.29439926 -172.00325012]
[-23.15567970 -186.89445496]
[-23.89892769 -201.88310242]
[-23.51998711 -216.88539124]
[-22.02097893 -231.81741333]
[-19.41028404 -246.59565735]
[-15.70250320 -261.13748169]
[-10.91837311 -275.36154175]
[-5.08464766 -289.18832397]
[1.76604724 -302.54049683]
[9.59539986 -315.34335327]
[18.35962486 -327.52532959]
[28.00970840 -339.01831055]
[38.49168396 -349.75796509]
[49.74692917 -359.68426514]
[61.71249771 -368.74172974]
[74.32147980 -376.87963867]
[87.50335693 -384.05255127]
[101.18440247 -390.22030640]
[115.28811646 -395.34838867]
[129.73561096 -399.40820312]
[144.44610596 -402.37698364]
[159.33732605 -404.23812866]
[174.32598877 -404.98123169]
[189.32827759 -404.60217285]
[204.26026917 -403.10302734]
[219.03849792 -400.49218750]
[233.58029175 -396.78430176]
[247.80432129 -392.00003052]
[261.63104248 -386.16619873]
[274.98315430 -379.31536865]
[287.78594971 -371.48590088]
[299.96783447 -362.72158813]
[311.46072388 -353.07138062]
[322.20028687 -342.58932495]
[332.12649536 -331.33398438]
[341.18383789 -319.36834717]
[349.32165527 -306.75927734]
[356.49444580 -293.57736206]
[362.66207886 -279.89624023]
[367.79006958 -265.79248047]
[371.84973145 -251.34495544]
[374.81835938 -236.63442993]
[376.67938232 -221.74319458]
[377.42236328 -206.75453186]
[377.04315186 -191.75224304]
[375.54388428 -176.82025146]
[372.93292236 -162.04205322]
[369.22488403 -147.50030518]
[364.44052124 -133.27630615]
[358.60653687 -119.44963837]
[351.75561523 -106.09759521]
[343.92602539 -93.29486847]
[335.16159058 -81.11304474]
[325.51132202 -69.62025452]
[315.02914429 -58.88077164]
[303.77374268 -48.95465851]
[291.80798340 -39.89742279]
[279.19888306 -31.75972176]
[266.01687622 -24.58705902]
[252.33570862 -18.41955185]
[238.23191833 -13.29168892]
[223.78434753 -9.23215008]
[209.07379150 -6.26363659]
[194.18254089 -4.40275049]
[179.19387817 -3.65989852]
[164.19158936 -4.03923512]
[149.25961304 -5.53863907]
[134.48144531 -8.14972496]
[130.77528381 6.38521147]
[127.06911469 20.92014694]
[123.36295319 35.45508194]
[119.65679169 49.99002075]
[125.32758331 66.56838226]
[112.43537903 79.67453003]
[109.03240204 94.28341675]
[107.31970978 109.18531799]
[107.31970978 124.18531799]
[107.31970978 139.18531799]
[107.31970978 154.18531799]
[107.31970978 169.18531799]
[107.31970978 184.18531799]
[107.31970978 199.18531799]
[107.31970978 214.18531799]
[107.31970978 229.18531799]
[107.31970978 244.18531799]
[121.85959625 248.24662781]
[134.76397705 256.08114624]
[145.07527161 267.10748291]
[152.02828979 280.50741577]
[155.10708618 295.28656006]
[154.08319092 310.34823608]
[149.03259277 324.57476807]
[140.33006287 336.91043091]
[128.62139893 346.43984985]
[114.77546692 352.45587158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[32 130]
[33 129]
[36 127]
[37 126]
[38 125]
[39 124]
[40 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
