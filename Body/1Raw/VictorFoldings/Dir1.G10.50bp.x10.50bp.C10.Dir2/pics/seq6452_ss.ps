%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUGACUCGGGGGGGGGGUUACCUCCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGxxxxxxxxxxCUAGCUUACACAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCCACCCCCCCCCCCUUAUGACUC\
) } def
/len { sequence length } bind def

/coor [
[36.58979416 449.32812500]
[22.74385643 443.31210327]
[11.03519440 433.78268433]
[2.33267021 421.44702148]
[-2.71793151 407.22048950]
[-3.74182296 392.15881348]
[-0.66302395 377.37963867]
[6.28999805 363.97973633]
[16.60128212 352.95339966]
[29.50566292 345.11889648]
[44.04555130 341.05755615]
[44.04555130 326.05755615]
[44.04555130 311.05755615]
[44.04555130 296.05755615]
[44.04555130 281.05755615]
[44.04555130 266.05755615]
[44.04555130 251.05757141]
[44.04555130 236.05757141]
[44.04555130 221.05757141]
[44.04555130 206.05757141]
[44.04555130 191.05757141]
[36.20619202 203.84602356]
[25.76317978 214.61372375]
[13.22067833 222.84085083]
[-0.81579548 228.13021851]
[-15.66859818 230.22647095]
[-30.62067604 229.02839661]
[-44.95018387 224.59385681]
[-57.96532822 217.13690186]
[-69.03777313 207.01757812]
[-77.63297272 194.72438049]
[-83.33597565 180.85081482]
[-85.87145233 166.06666565]
[-85.11699677 151.08564758]
[-81.10903168 136.63101196]
[-74.04105377 123.40061188]
[-64.25428772 112.03314972]
[-52.22120667 103.07743073]
[-38.52273941 96.96580505]
[-23.82020950 93.99332428]
[-8.82341671 94.30349731]
[5.74363375 97.88135529]
[19.17768288 104.55416107]
[30.83017349 113.99976349]
[40.13854980 125.76216888]
[46.65343475 139.27351379]
[50.06029892 153.88150024]
[50.19488907 168.87879944]
[45.42070007 152.78329468]
[53.90437698 137.90676880]
[70.84146881 133.65560913]
[78.29637909 120.63930511]
[85.75128937 107.62299347]
[81.11300659 76.63136292]
[81.11300659 61.63136673]
[81.11300659 46.63136673]
[81.11300659 31.63136673]
[81.11300659 16.63136673]
[73.37570953 2.83119369]
[81.11300659 -9.89607811]
[81.11300659 -24.89607811]
[81.11300659 -39.89608002]
[73.37570953 -53.69625092]
[81.11300659 -66.42352295]
[81.11300659 -81.42352295]
[81.11300659 -96.42352295]
[81.11300659 -111.42352295]
[66.86033630 -116.58464813]
[55.23440933 -126.31159973]
[47.63910675 -139.42979431]
[44.99160385 -154.35516357]
[47.61159515 -169.28538513]
[55.18270874 -182.41755676]
[66.79069519 -192.16592407]
[81.03382874 -197.35330200]
[96.19218445 -197.35330200]
[110.43531799 -192.16592407]
[122.04330444 -182.41755676]
[129.61442566 -169.28538513]
[132.23440552 -154.35516357]
[129.58691406 -139.42979431]
[121.99160767 -126.31159973]
[110.36567688 -116.58464813]
[96.11300659 -111.42352295]
[96.11300659 -96.42352295]
[96.11300659 -81.42352295]
[96.11300659 -66.42352295]
[103.85031128 -53.69625092]
[96.11300659 -39.89608002]
[96.11300659 -24.89607811]
[96.11300659 -9.89607811]
[103.85031128 2.83119369]
[96.11300659 16.63136673]
[96.11300659 31.63136673]
[96.11300659 46.63136673]
[96.11300659 61.63136673]
[96.11300659 76.63136292]
[96.94873810 61.65466690]
[106.77726746 50.32329178]
[121.48551178 47.37924194]
[134.91831970 54.05455017]
[141.45426941 67.55570984]
[138.35816956 82.23270416]
[126.92570496 91.94345093]
[111.93994141 92.62380219]
[126.93913269 92.77983856]
[141.93832397 92.93587494]
[156.93751526 93.09191132]
[171.93669128 93.24795532]
[186.93588257 93.40399170]
[201.93507385 93.56002808]
[215.94824219 85.04163361]
[230.20005798 93.15445709]
[230.02946472 109.55271149]
[215.61196899 117.36728668]
[201.77903748 108.55921173]
[186.77984619 108.40317535]
[171.78065491 108.24713898]
[156.78147888 108.09110260]
[141.78228760 107.93506622]
[126.78309631 107.77902985]
[111.78390503 107.62299347]
[98.76760101 115.07790375]
[91.31269073 128.09420776]
[83.85778046 141.11051941]
[88.86907959 153.65422058]
[85.76576233 166.60015869]
[75.90514374 175.25132751]
[63.05329132 176.60289001]
[59.04555130 191.05757141]
[59.04555130 206.05757141]
[59.04555130 221.05757141]
[59.04555130 236.05757141]
[59.04555130 251.05757141]
[59.04555130 266.05755615]
[59.04555130 281.05755615]
[59.04555130 296.05755615]
[59.04555130 311.05755615]
[59.04555130 326.05755615]
[59.04555130 341.05755615]
[73.58543396 345.11889648]
[86.48981476 352.95339966]
[96.80110168 363.97973633]
[103.75412750 377.37963867]
[106.83292389 392.15881348]
[105.80902863 407.22048950]
[100.75843048 421.44702148]
[92.05590820 433.78268433]
[80.34724426 443.31210327]
[66.50130463 449.32812500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[48 129]
[51 125]
[52 124]
[53 123]
[54 97]
[55 96]
[56 95]
[57 94]
[58 93]
[60 91]
[61 90]
[62 89]
[64 87]
[65 86]
[66 85]
[67 84]
[105 122]
[106 121]
[107 120]
[108 119]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
