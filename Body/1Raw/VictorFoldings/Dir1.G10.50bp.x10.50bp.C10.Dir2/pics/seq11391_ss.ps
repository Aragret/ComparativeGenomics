%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUAGUAUAUGGGGGGGGGGCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUAAACCxxxxxxxxxxUUACUGCCAGCCACCAUGAAUAUUGUACGGUACCAUAAAUACUUGACCACCCCCCCCCCCCUGUAGUACAU\
) } def
/len { sequence length } bind def

/coor [
[83.75909424 389.16912842]
[70.27021027 382.43759155]
[58.78470993 372.67303467]
[49.97034073 360.44314575]
[44.33955765 346.45892334]
[42.21973038 331.53344727]
[43.73410034 316.53445435]
[48.79462433 302.33395386]
[57.10709000 289.75753784]
[68.18821716 279.53637695]
[81.39377594 272.26473999]
[95.95600128 268.36535645]
[95.64801788 253.36853027]
[95.34004211 238.37168884]
[95.03206635 223.37484741]
[94.72409058 208.37800598]
[94.41610718 193.38117981]
[94.10813141 178.38433838]
[93.80015564 163.38749695]
[93.49217987 148.39065552]
[93.18419647 133.39382935]
[82.56839752 129.28723145]
[73.89682770 121.91407776]
[68.13667297 112.09674072]
[65.93040466 100.93019104]
[67.52408600 89.65989685]
[72.73997498 79.54288483]
[80.99631500 71.70755768]
[75.57769012 57.72047043]
[70.15906525 43.73338699]
[64.74044037 29.74630356]
[49.88256073 25.67817116]
[40.38015366 13.78037167]
[39.71356201 -1.25357866]
[47.92905045 -13.64889050]
[42.51042557 -27.63597298]
[37.09180069 -41.62305832]
[31.67317581 -55.61014175]
[17.18306732 -51.67892456]
[2.36140871 -49.28389359]
[-12.62940502 -48.45129776]
[-27.62512589 -49.19025040]
[-42.46145248 -51.49266052]
[-56.97583389 -55.33329773]
[-71.00923920 -60.67008591]
[-84.40790558 -67.44454956]
[-97.02503967 -75.58246613]
[-108.72239685 -84.99466705]
[-119.37181091 -95.57803345]
[-128.85661316 -107.21660614]
[-137.07286072 -119.78285980]
[-143.93055725 -133.13912964]
[-149.35455322 -147.13905334]
[-153.28541565 -161.62925720]
[-155.68008423 -176.45097351]
[-156.51231384 -191.44180298]
[-155.77299500 -206.43751526]
[-153.47023010 -221.27378845]
[-149.62924194 -235.78807068]
[-144.29211426 -249.82135010]
[-137.51731873 -263.21984863]
[-129.37910461 -275.83679199]
[-119.96661377 -287.53390503]
[-109.38298798 -298.18307495]
[-97.74418640 -307.66757202]
[-85.17772675 -315.88354492]
[-71.82129669 -322.74090576]
[-57.82123566 -328.16455078]
[-43.33093643 -332.09506226]
[-28.50916100 -334.48937988]
[-13.51830673 -335.32125854]
[1.47737825 -334.58157349]
[16.31359482 -332.27844238]
[30.82778740 -328.43710327]
[44.86093140 -323.09960938]
[58.25927353 -316.32452393]
[70.87600708 -308.18597412]
[82.57290649 -298.77322388]
[93.22180939 -288.18933105]
[102.70603943 -276.55029297]
[110.92168427 -263.98364258]
[117.77873230 -250.62704468]
[123.20204163 -236.62684631]
[127.13220215 -222.13644409]
[129.52615356 -207.31462097]
[130.35765076 -192.32374573]
[129.61761475 -177.32807922]
[127.31411743 -162.49191284]
[123.47242737 -147.97781372]
[118.13461304 -133.94480896]
[111.35917664 -120.54662323]
[103.22033691 -107.93008423]
[93.80728149 -96.23341370]
[83.22314453 -85.58477020]
[71.58387756 -76.10082245]
[59.01702118 -67.88548279]
[45.66025925 -61.02876663]
[51.07888412 -47.04168320]
[56.49750900 -33.05459976]
[61.91613388 -19.06751442]
[76.33811951 -15.44200802]
[85.97380829 -3.88270473]
[86.96694183 11.31160641]
[78.72752380 24.32767868]
[84.14614868 38.31476212]
[89.56477356 52.30184555]
[94.98339844 66.28893280]
[113.77838898 68.82695770]
[128.30686951 81.01779938]
[134.07005310 99.08652496]
[148.78556824 101.99399567]
[163.50109863 104.90146637]
[171.90090942 92.23215485]
[184.51245117 83.74584961]
[199.41256714 80.73666382]
[214.32907104 83.66345978]
[226.98733521 92.07994080]
[235.45703125 104.70263672]
[238.44662476 119.60668945]
[235.50019836 134.51933289]
[227.06707764 147.16650391]
[214.43324280 155.61959839]
[199.52528381 158.58958435]
[184.61651611 155.62355042]
[171.98045349 147.17379761]
[163.54399109 134.52885437]
[160.59361267 119.61698914]
[145.87809753 116.70951843]
[131.16258240 113.80204773]
[121.90767670 126.10855103]
[108.18103790 133.08584595]
[108.48901367 148.08268738]
[108.79698944 163.07952881]
[109.10497284 178.07635498]
[109.41294861 193.07319641]
[109.72092438 208.07003784]
[110.02890015 223.06687927]
[110.33688354 238.06370544]
[110.64485931 253.06054688]
[110.95283508 268.05737305]
[125.66287231 271.35562134]
[139.15583801 278.07897949]
[150.64724731 287.83657837]
[159.46902466 300.06112671]
[165.10829163 314.04190063]
[167.23716736 328.96609497]
[165.73188782 343.96600342]
[160.67997742 358.16958618]
[152.37513733 370.75103760]
[141.30020142 380.97891235]
[128.09906006 388.25854492]
[113.53920746 392.16674805]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[28 107]
[29 106]
[30 105]
[31 104]
[35 100]
[36 99]
[37 98]
[38 97]
[110 129]
[111 128]
[112 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
