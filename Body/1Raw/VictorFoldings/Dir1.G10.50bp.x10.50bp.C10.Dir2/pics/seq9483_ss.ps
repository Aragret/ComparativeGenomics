%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAUCAUCCGGGGGGGGGGUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCxxxxxxxxxxCCAAAAAACACAUAAUUUGAAUCAACACAACCACCCACAGCCUAAUUAUUCCCCCCCCCCAGCAUCAUCC\
) } def
/len { sequence length } bind def

/coor [
[106.20001221 361.47796631]
[92.35407257 355.46194458]
[80.64541626 345.93252563]
[71.94288635 333.59686279]
[66.89228821 319.37033081]
[65.86839294 304.30865479]
[68.94719696 289.52947998]
[75.90021515 276.12954712]
[86.21150208 265.10324097]
[99.11588287 257.26870728]
[113.65576935 253.20739746]
[113.65576935 238.20739746]
[113.65576935 223.20739746]
[113.65576935 208.20739746]
[113.65576935 193.20739746]
[113.65576935 178.20739746]
[113.65576935 163.20739746]
[113.65576935 148.20739746]
[113.65576935 133.20739746]
[113.65576935 118.20740509]
[106.36919403 126.00798035]
[94.99753571 130.38459778]
[81.31721497 129.37249756]
[67.19241333 134.42124939]
[53.06761169 139.47000122]
[48.83378983 154.39831543]
[36.61314392 163.96049500]
[21.10475540 164.47970581]
[8.27192211 155.75628662]
[3.04912639 141.14457703]
[7.44464111 126.26308441]
[19.76830101 116.83403015]
[35.28140640 116.48308563]
[48.01885223 125.34520721]
[62.14365768 120.29644775]
[76.26846313 115.24768829]
[76.19044495 107.74810028]
[63.12273026 100.38365936]
[76.03440857 92.74890900]
[75.95639038 85.24931335]
[61.72960663 80.49549866]
[49.17928314 89.62068176]
[33.66223145 89.59254456]
[21.14508057 80.42191315]
[16.44092560 65.63507843]
[21.35861206 50.91787720]
[34.00719070 41.92937851]
[49.52302170 42.12583923]
[61.93995285 51.43172073]
[66.48342133 66.26872253]
[80.71020508 71.02253723]
[101.59480286 69.24768066]
[117.06380463 79.36488342]
[122.10317993 94.57424164]
[131.61154175 82.97290039]
[134.37513733 67.39493561]
[148.42703247 62.45597076]
[157.93539429 50.85462952]
[167.44375610 39.25328827]
[176.95211792 27.65194893]
[186.46047974 16.05060768]
[195.96882629 4.44926596]
[198.73242188 -11.12870312]
[212.78433228 -16.06766319]
[222.29267883 -27.66900444]
[231.80104065 -39.27034378]
[221.39259338 -50.09626770]
[212.33764648 -62.07726669]
[204.76333618 -75.04515076]
[198.77595520 -88.81787109]
[194.45959473 -103.20207214]
[191.87483215 -117.99583435]
[191.05796814 -132.99147034]
[192.02044678 -147.97846985]
[194.74876404 -162.74642944]
[199.20463562 -177.08802795]
[205.32548523 -190.80194092]
[213.02539062 -203.69564819]
[222.19627380 -215.58813477]
[232.70938110 -226.31246948]
[244.41711426 -235.71806335]
[257.15512085 -243.67289734]
[270.74459839 -250.06529236]
[284.99475098 -254.80552673]
[299.70550537 -257.82702637]
[314.67041016 -259.08740234]
[329.67932129 -258.56893921]
[344.52154541 -256.27893066]
[358.98876953 -252.24949646]
[372.87783813 -246.53724670]
[385.99380493 -239.22233582]
[398.15252686 -230.40748596]
[409.18331909 -220.21641541]
[418.93133545 -208.79219055]
[427.25970459 -196.29521179]
[434.05154419 -182.90090942]
[439.21148682 -168.79731750]
[442.66708374 -154.18241882]
[444.36984253 -139.26139832]
[444.29586792 -124.24371338]
[442.44616699 -109.34018707]
[438.84671021 -94.76005554]
[433.54806519 -80.70798492]
[426.62457275 -67.38125610]
[418.17346191 -54.96694946]
[408.31335449 -43.63934326]
[397.18267822 -33.55746078]
[384.93768311 -24.86283684]
[371.75027466 -17.67752838]
[357.80557251 -12.10240650]
[343.29937744 -8.21573639]
[328.43527222 -6.07208204]
[313.42199707 -5.70153666]
[298.47024536 -7.10930157]
[283.78994751 -10.27561474]
[269.58721924 -15.15602589]
[256.06140137 -21.68202209]
[243.40238953 -29.76198769]
[233.89402771 -18.16064644]
[224.38566589 -6.55930424]
[222.30216980 8.18885899]
[207.57017517 13.95762444]
[198.06181335 25.55896568]
[188.55345154 37.16030502]
[179.04508972 48.76164627]
[169.53674316 60.36298752]
[160.02838135 71.96433258]
[157.94488525 86.71249390]
[143.21287537 92.48126221]
[133.70452881 104.08260345]
[128.65576172 118.20740509]
[128.65576172 133.20739746]
[128.65576172 148.20739746]
[128.65576172 163.20739746]
[128.65576172 178.20739746]
[128.65576172 193.20739746]
[128.65576172 208.20739746]
[128.65576172 223.20739746]
[128.65576172 238.20739746]
[128.65576172 253.20739746]
[143.19564819 257.26870728]
[156.10003662 265.10324097]
[166.41131592 276.12954712]
[173.36434937 289.52947998]
[176.44314575 304.30865479]
[175.41925049 319.37033081]
[170.36865234 333.59686279]
[161.66612244 345.93252563]
[149.95745850 355.46194458]
[136.11152649 361.47796631]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 36]
[24 35]
[25 34]
[40 51]
[41 50]
[54 130]
[55 129]
[57 127]
[58 126]
[59 125]
[60 124]
[61 123]
[62 122]
[64 120]
[65 119]
[66 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
