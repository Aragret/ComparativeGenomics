%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUACCCAUCGGGGGGGGGGAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCxxxxxxxxxxCAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAACCCCCCCCCCUAAUCCCCAUC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 375.94839478]
[71.01555634 370.39538574]
[58.81560135 361.52905273]
[49.20452881 349.90673828]
[42.78650284 336.25903320]
[39.96496582 321.44384766]
[40.91728210 306.39245605]
[45.58358765 292.05105591]
[53.67055511 279.32107544]
[64.66983032 269.00280762]
[77.88998413 261.74484253]
[92.50000000 258.00338745]
[92.50000000 243.00340271]
[92.50000000 228.00340271]
[92.50000000 213.00340271]
[92.50000000 198.00340271]
[92.50000000 183.00340271]
[92.50000000 168.00340271]
[92.50000000 153.00340271]
[92.50000000 138.00340271]
[92.50000000 123.00340271]
[87.94567108 120.97855377]
[83.90287018 118.06346893]
[80.54315948 114.38185883]
[78.00910187 110.08994293]
[76.40824127 105.36985779]
[75.80850220 100.42190552]
[61.46844101 96.02160645]
[47.12837982 91.62130737]
[32.58142853 87.96260071]
[17.86590385 85.05513000]
[3.15038228 82.14765167]
[-1.03476131 83.75521088]
[-5.09731102 83.89392090]
[-8.58000183 82.79046631]
[-11.15008163 80.79950714]
[-12.63083935 78.35034943]
[-27.05822372 74.24540710]
[-36.23214340 74.90494537]
[-41.73806000 69.90523529]
[-56.07812119 65.50493622]
[-70.41818237 61.10463333]
[-84.75824738 56.70433426]
[-100.61098480 60.90227509]
[-111.97941589 49.08318710]
[-107.16867065 33.40553284]
[-91.12763214 29.99714279]
[-80.35794067 42.36427307]
[-66.01788330 46.76457214]
[-51.67782211 51.16487122]
[-37.33776093 55.56517410]
[-22.95327950 59.81801987]
[-8.52589512 63.92296600]
[6.05785465 67.43212891]
[20.77337646 70.33960724]
[35.48889923 73.24707794]
[29.76244545 59.38317871]
[36.84647751 46.16135788]
[51.56112671 43.24946976]
[63.14698029 52.77669525]
[63.13241577 67.77668762]
[51.52868271 77.28124237]
[65.86874390 81.68154144]
[80.20880127 86.08184814]
[95.31021118 76.26368713]
[113.01083374 79.60086823]
[124.59988403 70.07752991]
[136.18893433 60.55419159]
[121.32995605 62.60621643]
[106.54920959 60.05091858]
[93.24156952 53.12944031]
[82.66290283 42.49497604]
[75.81153107 29.15111542]
[73.33402252 14.35713100]
[75.46418762 -0.49084556]
[82.00099945 -13.99159050]
[92.32756805 -24.87101936]
[105.46936035 -32.10242844]
[120.18617249 -35.00337601]
[135.08915710 -33.30009842]
[148.77189636 -27.15333748]
[159.94313049 -17.14316750]
[167.54861450 -4.21426344]
[170.87062073 10.41325474]
[169.59562683 25.35897064]
[163.84397888 39.21243668]
[154.16009521 50.66484451]
[168.40678406 45.97104263]
[182.65348816 41.27724457]
[196.90017700 36.58344269]
[211.14686584 31.88964081]
[224.21356201 24.52340126]
[235.60462952 14.76412773]
[246.99571228 5.00485325]
[258.38677979 -4.75442123]
[263.32382202 -20.39276123]
[279.39184570 -23.67165756]
[290.06143188 -11.21806526]
[284.35662842 4.15682983]
[268.14605713 6.63665247]
[256.75497437 16.39592743]
[245.36390686 26.15520096]
[233.97283936 35.91447449]
[248.77642822 33.49505997]
[263.64651489 35.46496582]
[277.30950928 41.65547562]
[288.59524536 51.53639221]
[296.53707886 64.26144409]
[300.45486450 78.74077606]
[300.01306152 93.73426819]
[295.24945068 107.95777130]
[286.57208252 120.19309998]
[274.72412109 129.39231873]
[260.72030640 134.76754761]
[245.76000977 135.85841370]
[231.12457275 132.57150269]
[218.06744385 125.18830872]
[207.70695496 114.34118652]
[200.93041992 100.95915985]
[198.31825256 86.18835449]
[200.09416199 71.29385376]
[206.10604858 57.55132675]
[215.84066772 46.13633347]
[201.59397888 50.83013535]
[187.34729004 55.52393341]
[173.10058594 60.21773529]
[158.85389709 64.91153717]
[145.71226501 72.14324188]
[134.12321472 81.66657257]
[122.53417206 91.18991089]
[121.87549591 110.33775330]
[107.50000000 123.00340271]
[107.50000000 138.00340271]
[107.50000000 153.00340271]
[107.50000000 168.00340271]
[107.50000000 183.00340271]
[107.50000000 198.00340271]
[107.50000000 213.00340271]
[107.50000000 228.00340271]
[107.50000000 243.00340271]
[107.50000000 258.00338745]
[122.11001587 261.74484253]
[135.33016968 269.00280762]
[146.32945251 279.32107544]
[154.41641235 292.05105591]
[159.08271790 306.39245605]
[160.03503418 321.44384766]
[157.21350098 336.25903320]
[150.79547119 349.90673828]
[141.18440247 361.52905273]
[128.98443604 370.39538574]
[114.96250153 375.94839478]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[27 64]
[28 63]
[29 62]
[30 56]
[31 55]
[32 54]
[37 53]
[38 52]
[40 51]
[41 50]
[42 49]
[43 48]
[66 130]
[67 129]
[68 128]
[87 127]
[88 126]
[89 125]
[90 124]
[91 123]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
