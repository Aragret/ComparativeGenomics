%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAGGCCUCGGGGGGGGGGCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUxxxxxxxxxxCUUACACAAAAUGACAUCAAAAAAAUCGUAGCCUUCUCCACUUCAAGUCACCCCCCCCCCACUAGGACUC\
) } def
/len { sequence length } bind def

/coor [
[86.96183777 354.05511475]
[73.11589813 348.03909302]
[61.40723419 338.50967407]
[52.70471191 326.17398071]
[47.65410995 311.94747925]
[46.63021851 296.88580322]
[49.70901489 282.10662842]
[56.66203690 268.70669556]
[66.97332001 257.68035889]
[79.87770081 249.84585571]
[94.41758728 245.78454590]
[94.41758728 230.78454590]
[94.41758728 215.78454590]
[94.41758728 200.78454590]
[94.41758728 185.78454590]
[94.41758728 170.78454590]
[94.41758728 155.78454590]
[94.41758728 140.78454590]
[94.41758728 125.78454590]
[94.41758728 110.78454590]
[91.23112488 110.38479614]
[87.99054718 109.05381012]
[84.96123505 106.75936890]
[69.98152161 105.97952271]
[55.00180435 105.19967651]
[40.02209091 104.41983032]
[25.13881111 106.28744507]
[10.81621361 110.74426270]
[0.09538057 123.15376282]
[-15.95897388 119.80865479]
[-20.83150482 104.15009308]
[-9.50977230 92.28627014]
[6.35939837 96.42166138]
[20.68199539 91.96484375]
[19.59062958 77.00393677]
[18.49937439 62.04434967]
[3.68161631 59.71324539]
[-11.13614178 57.38214111]
[-23.76327324 66.88640594]
[-39.40064240 64.59551239]
[-48.77087784 51.86860275]
[-46.31478119 36.25632477]
[-33.48951340 27.02117157]
[-17.90407944 29.64219284]
[-8.80503750 42.56438446]
[6.01272011 44.89548874]
[20.83047867 47.22659302]
[32.07003021 54.01609039]
[39.73249054 62.92729568]
[43.56463242 72.63763428]
[43.73585510 81.85470581]
[40.80193710 89.44011688]
[55.78165054 90.21996307]
[70.76136780 90.99980927]
[85.74108124 91.77965546]
[71.60605621 86.75958252]
[61.62848282 75.55921936]
[58.26863098 60.94034958]
[62.35496902 46.50768661]
[72.87989044 35.82002640]
[87.24816132 31.51273155]
[101.91686249 34.64789200]
[113.26898193 44.45244217]
[118.50533295 58.50878143]
[116.33473206 73.35089874]
[107.29335785 85.31827545]
[119.37334442 76.42592621]
[131.45333862 67.53357697]
[143.53332520 58.64122772]
[155.61331177 49.74887466]
[148.09539795 36.75102615]
[142.05299377 23.00502014]
[137.55947876 8.67772102]
[134.66938782 -6.05695105]
[133.41780090 -21.02013016]
[133.81991577 -36.03017807]
[135.87083435 -50.90488434]
[139.54568481 -65.46368408]
[144.79985046 -79.52984619]
[151.56954956 -92.93262482]
[159.77259827 -105.50931549]
[169.30941772 -117.10726166]
[180.06423950 -127.58565521]
[191.90652466 -136.81732178]
[204.69250488 -144.69017029]
[218.26698303 -151.10865784]
[232.46516418 -155.99484253]
[247.11470032 -159.28944397]
[262.03775024 -160.95243835]
[277.05319214 -160.96365356]
[291.97869873 -159.32295227]
[306.63314819 -156.05024719]
[320.83859253 -151.18525696]
[334.42263794 -144.78706360]
[347.22036743 -136.93331909]
[359.07644653 -127.71936798]
[369.84692383 -117.25704193]
[379.40106201 -105.67336273]
[387.62286377 -93.10894012]
[394.41256714 -79.71628571]
[399.68774414 -65.65798950]
[403.38433838 -51.10469437]
[405.45748901 -36.23306656]
[405.88201904 -21.22363853]
[404.65280151 -6.25860691]
[401.78469849 8.48036575]
[397.31259155 22.81436157]
[391.29074097 36.56937790]
[383.79226685 49.57844543]
[374.90814209 61.68363953]
[364.74627686 72.73802185]
[353.42996216 82.60739899]
[341.09661865 91.17195892]
[327.89593506 98.32774353]
[313.98818970 103.98789215]
[299.54214478 108.08368683]
[284.73321533 110.56541443]
[269.74118042 111.40293884]
[254.74797058 110.58610535]
[239.93563843 108.12483215]
[225.48397827 104.04898071]
[211.56840515 98.40803528]
[198.35786438 91.27047729]
[186.01271057 82.72295380]
[174.68278503 72.86920929]
[164.50566101 61.82886505]
[152.42567444 70.72121429]
[140.34568787 79.61356354]
[128.26568604 88.50591278]
[116.18570709 97.39826202]
[109.41758728 110.78454590]
[109.41758728 125.78454590]
[109.41758728 140.78454590]
[109.41758728 155.78454590]
[109.41758728 170.78454590]
[109.41758728 185.78454590]
[109.41758728 200.78454590]
[109.41758728 215.78454590]
[109.41758728 230.78454590]
[109.41758728 245.78454590]
[123.95747375 249.84585571]
[136.86186218 257.68035889]
[147.17314148 268.70669556]
[154.12615967 282.10662842]
[157.20495605 296.88580322]
[156.18107605 311.94747925]
[151.13046265 326.17398071]
[142.42794800 338.50967407]
[130.71928406 348.03909302]
[116.87334442 354.05511475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 55]
[24 54]
[25 53]
[26 52]
[27 34]
[28 33]
[36 47]
[37 46]
[38 45]
[66 130]
[67 129]
[68 128]
[69 127]
[70 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
