%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUAUAAUAGGGGGGGGGGAACACCCUCACCACUACAAUCUUCCUAGGAACAACAUAUGACGCACUCUCxxxxxxxxxxUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAACCCCCCCCCCUAUUAUACUA\
) } def
/len { sequence length } bind def

/coor [
[86.07599640 377.00427246]
[72.23006439 370.98825073]
[60.52140045 361.45883179]
[51.81887436 349.12316895]
[46.76827240 334.89663696]
[45.74438095 319.83496094]
[48.82318115 305.05581665]
[55.77620316 291.65588379]
[66.08748627 280.62954712]
[78.99186707 272.79504395]
[93.53175354 268.73373413]
[93.53175354 253.73373413]
[93.53175354 238.73373413]
[93.53175354 223.73373413]
[93.53175354 208.73373413]
[93.53175354 193.73373413]
[93.53175354 178.73373413]
[93.53175354 163.73373413]
[93.53175354 148.73373413]
[93.53175354 133.73373413]
[76.30691528 96.35372162]
[64.22692108 87.46137238]
[54.16798401 98.60571289]
[43.04939651 108.69311523]
[30.98166847 117.62331390]
[18.08473587 125.30757141]
[4.48677778 131.66949463]
[-9.67705917 136.64587402]
[-24.26600456 140.18724060]
[-39.13506317 142.25840759]
[-54.13645554 142.83877563]
[-69.12108612 141.92257690]
[-83.94003296 139.51893616]
[-98.44600677 135.65171814]
[-112.49484253 130.35937500]
[-125.94690704 123.69450378]
[-138.66850281 115.72333527]
[-150.53320312 106.52510071]
[-161.42308044 96.19122314]
[-171.22991943 84.82439423]
[-179.85623169 72.53759766]
[-187.21627808 59.45294189]
[-193.23693848 45.70047760]
[-197.85835266 31.41687965]
[-201.03459167 16.74411201]
[-202.73408508 1.82800257]
[-202.93995667 -13.18320084]
[-201.65016174 -28.14030647]
[-198.87750244 -42.89466095]
[-194.64953613 -57.29962158]
[-189.00830078 -71.21202850]
[-182.00984192 -84.49360657]
[-173.72372437 -97.01234436]
[-164.23231506 -108.64383698]
[-153.62991333 -119.27247620]
[-142.02192688 -128.79263306]
[-129.52371216 -137.10968018]
[-116.25949097 -144.14094543]
[-102.36107635 -149.81657410]
[-87.96661377 -154.08013916]
[-73.21916199 -156.88928223]
[-58.26528931 -158.21606445]
[-43.25362396 -158.04731750]
[-28.33335876 -156.38470459]
[-13.65278149 -153.24475098]
[0.64220029 -148.65867615]
[14.40951347 -142.67205811]
[27.51232719 -135.34437561]
[39.82041931 -126.74847412]
[51.21146011 -116.96978760]
[61.57223892 -106.10549164]
[70.79978180 -94.26357269]
[78.80238342 -81.56172180]
[85.50050354 -68.12617493]
[90.82756805 -54.09047318]
[94.73063660 -39.59410858]
[97.17092133 -24.78115463]
[98.12416840 -9.79883289]
[97.58090210 5.20394897]
[95.54651642 20.07808304]
[92.04123688 34.67574310]
[87.09989929 48.85184097]
[80.77161407 62.46548843]
[73.11927032 75.38138580]
[85.19926453 84.27373505]
[79.67697144 70.32725525]
[87.84809875 57.74819565]
[102.83511353 57.12417984]
[112.02365112 68.98043060]
[107.67978668 83.33776855]
[118.97879028 73.47204590]
[130.27780151 63.60632324]
[141.57679749 53.74060059]
[152.87580872 43.87487411]
[160.83013916 28.90273476]
[177.41912842 32.40150452]
[178.64938354 49.31075668]
[162.74153137 55.17388153]
[151.44252014 65.03960419]
[140.14352417 74.90532684]
[128.84451294 84.77104950]
[117.54550934 94.63677216]
[121.85309601 109.00495911]
[136.71614075 111.02729034]
[151.57919312 113.04962921]
[166.44223022 115.07196045]
[180.13494873 104.23466492]
[197.09980774 106.57508087]
[206.95109558 120.16956329]
[221.85301208 121.88225555]
[236.75491333 123.59494019]
[251.65681458 125.30763245]
[266.55871582 127.02032471]
[279.96737671 118.21193695]
[295.16876221 123.34004211]
[300.50167847 138.47079468]
[291.87515259 151.99716187]
[275.90673828 153.54289246]
[264.84600830 141.92222595]
[249.94412231 140.20953369]
[235.04222107 138.49684143]
[220.14031982 136.78414917]
[205.23841858 135.07147217]
[196.33432007 144.43702698]
[183.46591187 146.98234558]
[171.31072998 141.55284119]
[164.41990662 129.93501282]
[149.55685425 127.91267395]
[134.69380188 125.89033508]
[119.83075714 123.86800385]
[108.53175354 133.73373413]
[108.53175354 148.73373413]
[108.53175354 163.73373413]
[108.53175354 178.73373413]
[108.53175354 193.73373413]
[108.53175354 208.73373413]
[108.53175354 223.73373413]
[108.53175354 238.73373413]
[108.53175354 253.73373413]
[108.53175354 268.73373413]
[123.07164001 272.79504395]
[135.97602844 280.62954712]
[146.28730774 291.65588379]
[153.24032593 305.05581665]
[156.31912231 319.83496094]
[155.29524231 334.89663696]
[150.24462891 349.12316895]
[141.54211426 361.45883179]
[129.83345032 370.98825073]
[115.98751068 377.00427246]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 85]
[22 84]
[90 102]
[91 101]
[92 100]
[93 99]
[94 98]
[103 130]
[104 129]
[105 128]
[106 127]
[109 123]
[110 122]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
