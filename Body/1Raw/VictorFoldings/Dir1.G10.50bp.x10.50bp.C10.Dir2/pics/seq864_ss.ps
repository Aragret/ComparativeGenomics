%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAAAGCAAUGGGGGGGGGGACACUGAAAAUGUUUAGACGGGCUCACAUCACCCCAUAAACAAAUAGGUUxxxxxxxxxxCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUCCCUCCCUUACCACCCCCCCCCCUCAAAUCAAU\
) } def
/len { sequence length } bind def

/coor [
[137.39935303 461.37585449]
[123.55342102 455.35983276]
[111.84475708 445.83041382]
[103.14223480 433.49475098]
[98.09163666 419.26821899]
[97.06774139 404.20654297]
[100.14653778 389.42736816]
[107.09956360 376.02743530]
[117.41085052 365.00112915]
[130.31523132 357.16659546]
[144.85511780 353.10528564]
[144.85511780 338.10528564]
[144.85511780 323.10528564]
[144.85511780 308.10528564]
[144.85511780 293.10528564]
[144.85511780 278.10528564]
[144.85511780 263.10528564]
[144.85511780 248.10528564]
[144.85511780 233.10528564]
[144.85511780 218.10528564]
[123.85619354 210.19239807]
[111.95962524 192.74586487]
[112.24253082 172.95420837]
[123.09555054 158.00698853]
[115.91304779 144.83840942]
[108.73053741 131.66981506]
[93.30757141 133.23365784]
[78.39427948 127.47229004]
[67.37783051 115.22496796]
[62.96814346 98.84978485]
[66.54205322 81.77568054]
[52.52533722 76.43416595]
[38.50862503 71.09265900]
[24.49191093 65.75114441]
[10.47519779 60.40962982]
[-3.54151535 55.06811905]
[-15.15402699 61.96791840]
[-28.42495918 60.91418839]
[-38.50341415 52.51781845]
[-41.83582306 40.03215408]
[-55.73838043 34.40019608]
[-69.64093781 28.76823997]
[-82.18467712 37.74922180]
[-97.59376526 38.50002289]
[-110.95120239 30.78106499]
[-117.99468994 17.05543709]
[-116.47666931 1.70294082]
[-106.88154602 -10.37750053]
[-92.27107239 -15.33106136]
[-77.30741119 -11.57707882]
[-66.76541138 -0.31343380]
[-64.00897980 14.86568451]
[-50.10642242 20.49764061]
[-36.20386505 26.12959862]
[-21.04586220 18.91205978]
[-5.03164673 24.98074913]
[1.79999721 41.05140686]
[15.81671047 46.39291763]
[29.83342361 51.73443222]
[43.85013580 57.07594299]
[57.86684799 62.41745377]
[71.88356018 67.75896454]
[84.74196625 60.03488159]
[86.60958099 45.15160370]
[84.56490326 36.18103027]
[88.67398834 29.97933197]
[90.85082245 15.13812733]
[93.02766418 0.29692143]
[79.23108673 -5.83146191]
[67.60028076 -15.45574760]
[58.99831772 -27.86175156]
[54.06353378 -42.12886429]
[53.16211700 -57.19836807]
[56.36095810 -71.95201111]
[63.42267990 -85.29497528]
[73.82325745 -96.23712158]
[86.79090118 -103.96646881]
[101.36332703 -107.90944672]
[116.45915222 -107.77346802]
[130.95817566 -103.56861877]
[143.78448486 -95.60691833]
[153.98626709 -84.47919464]
[160.80647278 -71.01118469]
[163.73902893 -56.20231247]
[162.56628418 -41.15148926]
[157.37528992 -26.97558784]
[148.55123901 -14.72655582]
[136.74894714 -5.31335115]
[122.84421539 0.56550360]
[107.86886597 2.47375846]
[105.69203186 17.31496429]
[103.51519012 32.15616989]
[101.49285889 47.01921463]
[99.62524414 61.90249634]
[112.31927490 64.74054718]
[123.07339478 71.58927917]
[130.69850159 81.48423767]
[134.42311096 93.13796997]
[133.96900940 105.10621643]
[129.56504822 115.96651459]
[121.89911652 124.48731232]
[129.08163452 137.65589905]
[136.26412964 150.82447815]
[155.62890625 149.35606384]
[173.57069397 160.71911621]
[181.86477661 182.23297119]
[196.85746765 182.70101929]
[211.85017395 183.16905212]
[226.84286499 183.63710022]
[235.49949646 170.86735535]
[249.69473267 164.82592773]
[264.89892578 167.44059753]
[276.26043701 177.87702942]
[280.15390015 192.80500793]
[275.33688354 207.46107483]
[263.34649658 217.16850281]
[248.00885010 218.82972717]
[234.21809387 211.91462708]
[226.37481689 198.62979126]
[211.38212585 198.16175842]
[196.38943481 197.69371033]
[181.39672852 197.22566223]
[176.01132202 202.44557190]
[188.94425964 210.04420471]
[202.26422119 216.94195557]
[204.44595337 231.78244019]
[193.67478943 242.22187805]
[178.90979004 239.57714844]
[172.43190002 226.04911804]
[165.24052429 212.88539124]
[159.85511780 218.10528564]
[159.85511780 233.10528564]
[159.85511780 248.10528564]
[159.85511780 263.10528564]
[159.85511780 278.10528564]
[159.85511780 293.10528564]
[159.85511780 308.10528564]
[159.85511780 323.10528564]
[159.85511780 338.10528564]
[159.85511780 353.10528564]
[174.39500427 357.16659546]
[187.29937744 365.00112915]
[197.61067200 376.02743530]
[204.56369019 389.42736816]
[207.64248657 404.20654297]
[206.61859131 419.26821899]
[201.56799316 433.49475098]
[192.86546326 445.83041382]
[181.15681458 455.35983276]
[167.31086731 461.37585449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 103]
[25 102]
[26 101]
[31 62]
[32 61]
[33 60]
[34 59]
[35 58]
[36 57]
[40 54]
[41 53]
[42 52]
[63 94]
[64 93]
[66 92]
[67 91]
[68 90]
[106 122]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
