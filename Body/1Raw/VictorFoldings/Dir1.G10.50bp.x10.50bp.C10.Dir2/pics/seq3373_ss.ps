%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCUAGGCUGGGGGGGGGGAUAUACAACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUACUAxxxxxxxxxxAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGCCCCCCCCCCAUUAUAGGCU\
) } def
/len { sequence length } bind def

/coor [
[66.76730347 306.10797119]
[53.54710388 298.83547974]
[42.66029739 288.38848877]
[34.84916687 275.47924805]
[30.64628792 260.98791504]
[30.33821487 245.90258789]
[33.94595718 231.25175476]
[41.22352982 218.03437805]
[51.67473602 207.15159607]
[64.58699799 199.34545898]
[79.07993317 195.14816284]
[78.76787567 180.15141296]
[78.45582581 165.15466309]
[78.14376831 150.15791321]
[77.83171082 135.16114807]
[77.51965332 120.16439819]
[85.30104828 89.75695801]
[78.67255402 76.30099487]
[72.04405212 62.84503174]
[65.41555023 49.38906479]
[58.78705597 35.93309784]
[52.15855789 22.47713470]
[45.16441345 24.37298584]
[36.98713684 23.15002632]
[21.98794937 22.99398994]
[6.98876047 22.83795357]
[-8.01042747 22.68191719]
[-23.00961685 22.52588081]
[-38.00880432 22.36984444]
[-43.05411530 36.64652252]
[-52.46364212 48.50989151]
[-65.21670532 56.67310333]
[-79.92996216 60.25066757]
[-95.00740814 58.85452652]
[-108.81356812 52.63611603]
[-119.85085297 42.26996231]
[-126.92201996 28.88051224]
[-129.26002502 13.92015076]
[-126.61128998 -0.98833263]
[-119.26310730 -14.22777843]
[-108.01255798 -24.36207008]
[-94.08001709 -30.29191589]
[-78.97678375 -31.37409019]
[-64.34114838 -27.49120522]
[-51.76066589 -19.06445122]
[-42.59997940 -7.00789547]
[-37.85276794 7.37065506]
[-22.85358047 7.52669144]
[-7.85439110 7.68272829]
[7.14479733 7.83876467]
[22.14398575 7.99480152]
[37.14317322 8.15083790]
[48.64497757 -1.47768831]
[51.13009644 -16.27039528]
[53.61521530 -31.06310272]
[56.10033417 -45.85580826]
[54.22185516 -50.86489105]
[54.47180176 -55.60724640]
[56.37949371 -59.30351257]
[59.22962952 -61.48163223]
[53.07886505 -72.86679840]
[56.25863266 -84.99560547]
[66.52500153 -91.46932220]
[70.23116302 -106.00425720]
[73.93732452 -120.53919220]
[77.64348602 -135.07412720]
[81.34964752 -149.60906982]
[67.84992218 -156.27622986]
[56.03162766 -165.60476685]
[46.41140747 -177.18687439]
[39.40981674 -190.51622009]
[35.33293152 -205.01010132]
[34.35898209 -220.03491211]
[36.53053665 -234.93385315]
[41.75267410 -249.05557251]
[49.79709625 -261.78274536]
[60.31214142 -272.55899048]
[72.83813477 -280.91320801]
[86.82749176 -286.48022461]
[101.66865540 -289.01663208]
[116.71284485 -288.41159058]
[131.30238342 -284.69149780]
[144.79948425 -278.01901245]
[156.61410522 -268.68582153]
[166.22976685 -257.09994507]
[173.22612000 -243.76785278]
[177.29730225 -229.27235413]
[178.26533508 -214.24716187]
[176.08792114 -199.34909058]
[170.86022949 -185.22943115]
[162.81080627 -172.50541687]
[152.29151917 -161.73330688]
[139.76223755 -153.38400269]
[125.77069855 -147.82249451]
[110.92852783 -145.29193115]
[95.88458252 -145.90290833]
[92.17842102 -131.36796570]
[88.47225952 -116.83303070]
[84.76609802 -102.29809570]
[81.05993652 -87.76316071]
[86.73072815 -71.18479919]
[73.83852386 -58.07865143]
[70.89304352 -43.37069321]
[68.40792084 -28.57798386]
[65.92280579 -13.78527737]
[63.43768311 1.00743020]
[65.61452484 15.84863567]
[72.24301910 29.30460167]
[78.87152100 42.76056671]
[85.50001526 56.21653366]
[92.12851715 69.67250061]
[98.75701141 83.12846375]
[99.15806580 68.13382721]
[107.91511536 55.95539856]
[122.00196838 50.80171204]
[136.55059814 54.45373535]
[146.53340149 65.64942932]
[148.50059509 80.51987457]
[141.77236938 93.92625427]
[128.67381287 101.23568726]
[113.73110199 99.92211151]
[126.34223175 108.04365540]
[138.95335388 116.16519928]
[151.56448364 124.28673553]
[164.17561340 132.40827942]
[180.76594543 135.90074158]
[182.00262451 152.80952454]
[166.09698486 158.67869568]
[156.05407715 145.01940918]
[143.44294739 136.89787292]
[130.83181763 128.77632141]
[118.22068787 120.65478516]
[105.60956573 112.53324127]
[92.51641083 119.85234833]
[92.82846069 134.84910583]
[93.14051819 149.84585571]
[93.45257568 164.84260559]
[93.76463318 179.83935547]
[94.07669067 194.83612061]
[108.73168182 198.42687988]
[121.95748901 205.68913269]
[132.85235596 216.12773132]
[140.67346191 229.03094482]
[144.88752747 243.51901245]
[145.20724487 258.60409546]
[141.61082458 273.25772095]
[134.34346008 286.48071289]
[123.90065765 297.37155151]
[110.99442291 305.18768311]
[96.50473785 309.39614868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 112]
[18 111]
[19 110]
[20 109]
[21 108]
[22 107]
[24 52]
[25 51]
[26 50]
[27 49]
[28 48]
[29 47]
[53 106]
[54 105]
[55 104]
[56 103]
[60 102]
[63 100]
[64 99]
[65 98]
[66 97]
[67 96]
[121 133]
[122 132]
[123 131]
[124 130]
[125 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
