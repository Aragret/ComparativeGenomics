%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUAUCCGGGGGGGGGGGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCAUACACCACAUGAAACxxxxxxxxxxCCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUACCCCCCCCCCGGCCUACCCG\
) } def
/len { sequence length } bind def

/coor [
[183.18742371 553.34429932]
[169.34147644 547.32830811]
[157.63281250 537.79888916]
[148.93029785 525.46319580]
[143.87968445 511.23666382]
[142.85580444 496.17498779]
[145.93460083 481.39584351]
[152.88761902 467.99591064]
[163.19889832 456.96957397]
[176.10328674 449.13507080]
[190.64317322 445.07376099]
[190.64317322 430.07376099]
[190.64317322 415.07376099]
[190.64317322 400.07376099]
[190.64317322 385.07376099]
[190.64317322 370.07376099]
[190.64317322 355.07376099]
[190.64317322 340.07376099]
[190.64317322 325.07376099]
[190.64317322 310.07376099]
[208.12893677 272.79898071]
[202.64190674 258.83859253]
[197.15487671 244.87820435]
[191.66784668 230.91781616]
[186.18080139 216.95742798]
[171.74124146 213.40257263]
[162.04908752 201.89057922]
[160.98158264 186.70130920]
[169.15718079 173.64505005]
[163.67015076 159.68466187]
[158.18312073 145.72427368]
[151.41500854 132.33798218]
[143.42509460 119.64305878]
[135.43518066 106.94812775]
[127.44525909 94.25320435]
[123.79465485 119.38448334]
[99.90524292 133.34159851]
[71.96655273 122.57378387]
[57.55433655 118.41589355]
[43.14212036 114.25800323]
[28.72990608 110.10012054]
[15.01767635 117.95825958]
[-0.21277988 113.73821259]
[-7.92550421 99.94367218]
[-3.54467392 84.75868225]
[10.33064175 77.19223785]
[25.46846581 81.73336792]
[32.88779449 95.68790436]
[47.30001068 99.84578705]
[61.71222687 104.00367737]
[76.12444305 108.16156769]
[83.44355011 95.06841278]
[72.35223389 84.96975708]
[56.22389984 82.00177765]
[50.98577499 66.46170044]
[62.02639008 54.33582306]
[77.98810577 58.09821320]
[82.45088196 73.87844849]
[93.54219818 83.97709656]
[100.40222168 80.94558716]
[102.01149750 66.03216553]
[114.12227631 74.88257599]
[120.98229980 71.85106659]
[120.98229980 56.85106659]
[120.98229980 41.85106659]
[106.48478699 37.60858917]
[93.77050781 29.45237923]
[83.87015533 18.04361916]
[77.58631134 4.30717182]
[75.42838287 -10.64341354]
[77.57129669 -25.59615898]
[83.84133148 -39.33891296]
[93.73021698 -50.75761414]
[106.43629456 -58.92659378]
[120.92954254 -63.18363190]
[136.03506470 -63.18363190]
[150.52830505 -58.92659378]
[163.23439026 -50.75761414]
[173.12327576 -39.33891296]
[179.39331055 -25.59615898]
[181.53622437 -10.64341354]
[179.37829590 4.30717182]
[173.09445190 18.04361916]
[163.19410706 29.45237923]
[150.47982788 37.60858917]
[135.98229980 41.85106659]
[135.98229980 56.85106659]
[135.98229980 71.85106659]
[140.14019775 86.26328278]
[148.13011169 98.95821381]
[156.12002563 111.65314484]
[164.10993958 124.34807587]
[166.31510925 109.51105499]
[176.07965088 98.12448883]
[190.40693665 93.68277740]
[204.90011597 97.54901886]
[215.11141968 108.53672028]
[217.90710449 123.27388763]
[212.42924500 137.23786926]
[200.35890198 146.14331055]
[185.40031433 147.25723267]
[172.14350891 140.23724365]
[177.63053894 154.19763184]
[183.11758423 168.15802002]
[197.99519348 172.15336609]
[207.55572510 184.00451660]
[208.29591370 199.03501892]
[200.14120483 211.47039795]
[205.62823486 225.43078613]
[211.11526489 239.39117432]
[216.60229492 253.35156250]
[222.08932495 267.31195068]
[233.28509521 277.29467773]
[247.78068542 281.15185547]
[262.27627563 285.00900269]
[276.77188110 288.86614990]
[290.31765747 280.72445679]
[305.63262939 284.62673950]
[313.63064575 298.25784302]
[309.56668091 313.53067017]
[295.85177612 321.38415527]
[280.62274170 317.15893555]
[272.91473389 303.36175537]
[258.41912842 299.50460815]
[243.92352295 295.64743042]
[229.42793274 291.79028320]
[223.48173523 296.36114502]
[232.62327576 308.25369263]
[220.73059082 317.39501953]
[211.58935547 305.50289917]
[205.64317322 310.07376099]
[205.64317322 325.07376099]
[205.64317322 340.07376099]
[205.64317322 355.07376099]
[205.64317322 370.07376099]
[205.64317322 385.07376099]
[205.64317322 400.07376099]
[205.64317322 415.07376099]
[205.64317322 430.07376099]
[205.64317322 445.07376099]
[220.18305969 449.13507080]
[233.08743286 456.96957397]
[243.39872742 467.99591064]
[250.35174561 481.39584351]
[253.43054199 496.17498779]
[252.40664673 511.23666382]
[247.35604858 525.46319580]
[238.65353394 537.79888916]
[226.94487000 547.32830811]
[213.09892273 553.34429932]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 112]
[22 111]
[23 110]
[24 109]
[25 108]
[29 104]
[30 103]
[31 102]
[32 92]
[33 91]
[34 90]
[35 89]
[38 51]
[39 50]
[40 49]
[41 48]
[52 59]
[53 58]
[63 88]
[64 87]
[65 86]
[113 126]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
