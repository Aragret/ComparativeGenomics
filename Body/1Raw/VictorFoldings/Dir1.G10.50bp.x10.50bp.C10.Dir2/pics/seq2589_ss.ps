%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUCUACAAUGGGGGGGGGGCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUxxxxxxxxxxAACGGAACAAGUUACCCUAGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCCCCCCCCCCCAUAUCAACAAU\
) } def
/len { sequence length } bind def

/coor [
[79.31467438 375.95864868]
[66.39551544 368.20028687]
[55.61421967 357.67126465]
[47.55220413 344.93939209]
[42.64424133 330.69128418]
[41.15501785 315.69531250]
[43.16484070 300.76022339]
[48.56532669 286.69140625]
[57.06523132 274.24758911]
[68.20616150 264.09988403]
[81.38731384 256.79550171]
[95.89782715 252.72834778]
[95.28200531 237.74099731]
[94.66618347 222.75364685]
[94.05035400 207.76629639]
[93.43453217 192.77894592]
[92.81870270 177.79159546]
[92.20288086 162.80422974]
[91.58705139 147.81687927]
[90.97122955 132.82952881]
[90.35540009 117.84217834]
[84.70254517 105.82886505]
[88.28452301 95.76152039]
[78.17908478 84.67639160]
[68.07365417 73.59125519]
[56.09505463 82.63768005]
[43.33284760 90.54026031]
[29.89591789 97.23155975]
[15.89890671 102.65451050]
[1.46123457 106.76282501]
[-13.29391956 109.52146149]
[-28.24066734 110.90687561]
[-43.25148392 110.90725708]
[-58.19830322 109.52259827]
[-72.95359802 106.76471710]
[-87.39147949 102.65713501]
[-101.38876343 97.23490906]
[-114.82603455 90.54428864]
[-127.58864594 82.64235687]
[-139.56770325 73.59654236]
[-150.66101074 63.48401642]
[-160.77392578 52.39105988]
[-169.82014465 40.41230774]
[-177.72250366 27.64997101]
[-184.41358948 14.21292973]
[-189.83630371 0.21582836]
[-193.94438171 -14.22191238]
[-196.70277405 -28.97711182]
[-198.08793640 -43.92388153]
[-198.08807373 -58.93470001]
[-196.70317078 -73.88149261]
[-193.94503784 -88.63674164]
[-189.83721924 -103.07455444]
[-184.41474915 -117.07175446]
[-177.72390747 -130.50891113]
[-169.82176208 -143.27139282]
[-160.77575684 -155.25030518]
[-150.66304016 -166.34344482]
[-139.56991577 -176.45616150]
[-127.59101105 -185.50218201]
[-114.82854462 -193.40434265]
[-101.39138794 -200.09519958]
[-87.39419556 -205.51766968]
[-72.95639038 -209.62550354]
[-58.20114136 -212.38365173]
[-43.25434875 -213.76856995]
[-28.24353027 -213.76846313]
[-13.29675865 -212.38330078]
[1.45844424 -209.62492371]
[15.89618969 -205.51686096]
[29.89329529 -200.09416199]
[43.33034515 -193.40310669]
[56.09268951 -185.50074768]
[68.07144928 -176.45452881]
[79.16441345 -166.34164429]
[89.27695465 -155.24833679]
[98.32278442 -143.26928711]
[106.22472382 -130.50668335]
[112.91535187 -117.06942749]
[118.33760071 -103.07214355]
[122.44519043 -88.63426208]
[125.20309448 -73.87897491]
[126.58776093 -58.93215561]
[126.58739471 -43.92133713]
[125.20198822 -28.97458839]
[122.44337463 -14.21943188]
[118.33506775 0.21824428]
[112.91213989 14.21526051]
[106.22084808 27.65219688]
[98.31828308 40.41440964]
[89.27186584 52.39301682]
[79.15878296 63.48582077]
[89.26422119 74.57095337]
[99.36965942 85.65608978]
[113.41162872 90.93083191]
[128.31608582 89.24043274]
[141.15640259 79.99723053]
[154.67454529 86.25096893]
[169.57899475 84.56056976]
[184.48342896 82.87017059]
[199.38787842 81.17977905]
[214.21035767 78.87889862]
[228.92588806 75.97142792]
[243.64140320 73.06395721]
[258.35693359 70.15648651]
[263.92803955 55.77016068]
[276.40603638 46.69805527]
[291.80923462 45.83504486]
[305.22256470 53.45651245]
[312.36581421 67.13047028]
[310.95965576 82.49362183]
[301.45278931 94.64362335]
[286.87878418 99.70346832]
[271.88815308 96.05857086]
[261.26440430 84.87200928]
[246.54888916 87.77947998]
[231.83335876 90.68695068]
[217.11784363 93.59442139]
[215.44114685 95.91384888]
[212.71638489 97.68724060]
[209.15490723 98.50125122]
[205.11743164 98.02971649]
[201.07827759 96.08422089]
[186.17382812 97.77462006]
[171.26937866 99.46501923]
[156.36494446 101.15541840]
[144.59068298 110.27770233]
[130.00648499 104.14488220]
[115.10202789 105.83527374]
[105.34275818 117.22634888]
[105.95858002 132.21369934]
[106.57440948 147.20104980]
[107.19023132 162.18841553]
[107.80606079 177.17576599]
[108.42188263 192.16311646]
[109.03770447 207.15046692]
[109.65353394 222.13781738]
[110.26935577 237.12518311]
[110.88518524 252.11253357]
[125.68045807 254.97549438]
[139.41642761 261.17385864]
[151.35234070 270.37338257]
[160.84448242 282.07788086]
[167.38098145 295.65621948]
[170.60931396 310.37609863]
[170.35539246 325.44366455]
[166.63290405 340.04641724]
[159.64260864 353.39678955]
[149.76145935 364.77481079]
[137.52235413 373.56692505]
[123.58532715 379.29895020]
[108.70198822 381.66174316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 94]
[24 93]
[25 92]
[95 129]
[96 128]
[98 126]
[99 125]
[100 124]
[101 123]
[102 118]
[103 117]
[104 116]
[105 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
