%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAACCAGUGAAGGGGGGGGGGAUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAGCAAGACGAGAAGACCxxxxxxxxxxUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACCCCCCCCCCCUUAUCCAGUGAA\
) } def
/len { sequence length } bind def

/coor [
[81.51036835 365.74246216]
[68.30229187 358.50640869]
[56.95884705 348.59982300]
[48.01059341 336.48608398]
[41.87605667 322.73175049]
[38.84215546 307.98016357]
[39.05079651 292.92126465]
[42.49222183 278.25936890]
[49.00546646 264.68026733]
[58.28589249 252.81909180]
[69.89943695 243.23057556]
[83.30292511 236.36322021]
[97.86943817 232.53819275]
[97.26155090 217.55052185]
[96.65367126 202.56283569]
[96.04578400 187.57516479]
[95.43790436 172.58749390]
[94.83001709 157.59980774]
[94.22213745 142.61213684]
[93.61425018 127.62445831]
[93.00637054 112.63677979]
[89.83815002 97.97518158]
[84.20339203 84.07376099]
[78.56863403 70.17234039]
[72.93387604 56.27091599]
[67.29912567 42.36949539]
[56.01758575 41.98399734]
[45.51187515 36.11701965]
[38.43053436 25.48000908]
[36.89107132 12.04305458]
[21.89800453 11.58708668]
[6.90493584 11.13111973]
[-8.08813286 10.67515182]
[-23.08120155 10.21918488]
[-38.07426834 9.76321697]
[-53.06733704 9.30725002]
[-64.40399933 20.31886673]
[-80.20517731 20.00549316]
[-91.09632111 8.55304718]
[-90.61590576 -7.24393797]
[-79.04895020 -18.01339149]
[-63.25792694 -17.36598587]
[-52.61137009 -5.68581820]
[-37.61830139 -5.22985077]
[-22.62523270 -4.77388334]
[-7.63216496 -4.31791592]
[7.36090279 -3.86194849]
[22.35397148 -3.40598130]
[37.34703827 -2.95001388]
[24.40798569 -10.53822231]
[9.48574257 -12.06355572]
[-3.61399341 -19.37087440]
[-12.75143051 -31.26655579]
[-16.43400383 -45.80748749]
[-14.06017685 -60.61846161]
[-6.01770687 -73.28015900]
[6.37969923 -81.72434998]
[21.10697365 -84.57170105]
[35.75847244 -81.35710907]
[47.94092560 -72.60565948]
[55.66438293 -59.74688339]
[57.66724014 -44.88119888]
[53.62133026 -30.43489838]
[55.94352722 -15.61574268]
[61.01028824 -29.73409653]
[66.07705688 -43.85244751]
[52.87020874 -51.02738190]
[40.91345596 -60.13433456]
[30.48708534 -70.95982361]
[21.83550262 -83.25008392]
[15.16151047 -96.71701813]
[10.62156105 -111.04493713]
[8.32207489 -125.89797974]
[8.31695557 -140.92796326]
[10.60632420 -155.78256226]
[15.13651371 -170.11357117]
[21.80133057 -183.58505249]
[30.44454193 -195.88119507]
[40.86353683 -206.71379089]
[52.81408310 -215.82888794]
[66.01603699 -223.01280212]
[80.15992737 -228.09716797]
[94.91420746 -230.96278381]
[109.93300629 -231.54246521]
[124.86427307 -229.82263184]
[139.35798645 -225.84359741]
[153.07440186 -219.69863892]
[165.69197083 -211.53179932]
[176.91494751 -201.53453064]
[186.48022461 -189.94117737]
[194.16357422 -177.02349854]
[199.78491211 -163.08430481]
[203.21246338 -148.45036316]
[204.36585999 -133.46470642]
[203.21807861 -118.47860718]
[199.79602051 -103.84337616]
[194.17990112 -89.90207672]
[186.50138855 -76.98152161]
[176.94046021 -65.38458252]
[165.72123718 -55.38310623]
[153.10671997 -47.21154404]
[139.39260864 -41.06144714]
[124.90039062 -37.07698441]
[109.96977234 -35.35155487]
[94.95075989 -35.92560577]
[80.19540405 -38.78568649]
[75.12864685 -24.66733170]
[70.06188202 -10.54897881]
[91.47177124 11.51350498]
[81.20054626 36.73474121]
[86.83530426 50.63616180]
[92.47005463 64.53758240]
[98.10481262 78.43900299]
[103.73957062 92.34042358]
[112.55210114 87.57596588]
[124.20085907 88.49044037]
[138.55772400 92.83562469]
[152.91458130 97.18080139]
[167.27143860 101.52597809]
[179.55577087 92.04575348]
[195.06729126 91.63029480]
[207.84147644 100.43936157]
[212.96641541 115.08567810]
[208.47145081 129.93743896]
[196.08499146 139.28384399]
[180.56988525 139.53100586]
[167.89201355 130.58389282]
[162.92625427 115.88283539]
[148.56939697 111.53765869]
[134.21253967 107.19248199]
[119.85568237 102.84730530]
[107.99404144 112.02889252]
[108.60192871 127.01657104]
[109.20981598 142.00424194]
[109.81769562 156.99192810]
[110.42558289 171.97959900]
[111.03346252 186.96728516]
[111.64134979 201.95495605]
[112.24922943 216.94264221]
[112.85711670 231.93031311]
[127.68554688 234.56311035]
[141.60115051 240.32243347]
[153.95307922 248.93893433]
[164.16360474 260.00958252]
[171.75514221 273.01660156]
[176.37265015 287.35162354]
[177.80014038 302.34417725]
[175.97087097 317.29299927]
[170.97036743 331.49896240]
[163.03253174 344.29757690]
[152.52862549 355.09027100]
[139.94993591 363.37222290]
[125.88479614 368.75607300]
[110.99105835 370.99002075]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 114]
[23 113]
[24 112]
[25 111]
[26 110]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[64 108]
[65 107]
[66 106]
[116 131]
[117 130]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
