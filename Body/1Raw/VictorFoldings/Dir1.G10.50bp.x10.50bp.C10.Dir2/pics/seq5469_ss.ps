%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAACACCCUGGGGGGGGGGUAAUUCCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCxxxxxxxxxxACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAACCCCCCCCCCACUAACCCCCU\
) } def
/len { sequence length } bind def

/coor [
[73.82698822 397.44137573]
[59.80504227 391.88836670]
[47.60508728 383.02203369]
[37.99401474 371.39971924]
[31.57598877 357.75201416]
[28.75445175 342.93682861]
[29.70676804 327.88546753]
[34.37307358 313.54403687]
[42.46004105 300.81408691]
[53.45931244 290.49581909]
[66.67947388 283.23782349]
[81.28948212 279.49639893]
[81.28948212 264.49639893]
[81.28948212 249.49639893]
[81.28948212 234.49639893]
[81.28948212 219.49639893]
[81.28948212 204.49639893]
[81.28948212 189.49639893]
[81.28948212 174.49639893]
[81.28948212 159.49639893]
[81.28948212 144.49639893]
[81.28948212 129.49639893]
[74.09810638 142.66012573]
[72.39952850 157.56364441]
[64.13413239 170.08096313]
[51.09521484 177.49626160]
[36.11176300 178.20066833]
[22.43466759 172.04136658]
[13.03138065 160.35469055]
[9.94208813 145.67626953]
[13.83705902 131.19078064]
[23.87122154 120.04109192]
[37.86750793 114.64628601]
[52.78625107 116.17581177]
[67.18370056 111.96707916]
[52.53097534 108.75808716]
[37.87825012 105.54908752]
[23.22552490 102.34008789]
[8.57280064 99.13109589]
[-6.07992363 95.92209625]
[-19.25040627 104.65788269]
[-34.72368240 101.44023895]
[-43.31973267 88.17813110]
[-39.93867493 72.73973846]
[-26.58642578 64.28438568]
[-11.18464184 67.82847595]
[-2.87092733 81.26937103]
[11.78179741 84.47837067]
[26.43452263 87.68737030]
[41.08724594 90.89636230]
[55.73997116 94.10536194]
[70.39269257 97.31435394]
[78.98983765 83.12680054]
[92.67424774 76.97238159]
[105.87143707 79.43912506]
[114.78759003 67.37669373]
[123.70374298 55.31426239]
[118.15990448 52.03535843]
[113.48741150 46.47970581]
[110.48258972 38.93819427]
[103.65901947 25.58009529]
[96.83544159 12.22199535]
[82.07685852 5.93202353]
[77.93175507 -9.56628895]
[87.57990265 -22.38396263]
[103.62007141 -22.68837738]
[113.74761200 -10.24600887]
[110.19354248 5.39841986]
[117.01711273 18.75651932]
[123.84069061 32.11462021]
[124.25665283 17.12038803]
[124.67261505 2.12615609]
[125.08857727 -12.86807537]
[120.46760559 -27.13855553]
[120.70929718 -42.13660812]
[125.78767395 -56.25078964]
[135.15710449 -67.96462250]
[147.81089783 -76.01952362]
[162.38948059 -79.55005646]
[177.32650757 -78.17687988]
[191.01704407 -72.04753113]
[201.99017334 -61.82057953]
[209.06687927 -48.59483719]
[211.48681641 -33.79132843]
[208.98999023 -19.00059128]
[201.84465027 -5.81180143]
[190.81852722 4.35799408]
[177.09742737 10.41583157]
[166.19049072 20.71334839]
[155.28355408 31.01086426]
[144.37663269 41.30838013]
[158.88525391 37.50052261]
[173.39387512 33.69266129]
[187.90251160 29.88480377]
[202.41113281 26.07694435]
[216.75119019 21.67664528]
[230.89851379 16.69132233]
[245.04582214 11.70600033]
[245.17662048 -3.45179296]
[250.48669434 -17.64963913]
[260.33486938 -29.17307854]
[273.53186035 -36.63059998]
[288.48413086 -39.12166977]
[303.38610840 -36.34548187]
[316.43829346 -28.63727570]
[326.06454468 -16.92785072]
[331.10250854 -2.63117838]
[330.94378662 12.52634811]
[325.60754395 26.71438408]
[315.73815918 38.21965408]
[302.52743530 45.65284348]
[287.57058716 48.11635590]
[272.67376709 45.31270981]
[259.63583374 37.58046341]
[250.03114319 25.85331726]
[235.88383484 30.83863831]
[221.73651123 35.82395935]
[220.40933228 38.35963058]
[217.96669006 40.50503159]
[214.55854797 41.82078934]
[210.49516296 41.93243790]
[206.21899414 40.58557129]
[191.71035767 44.39342880]
[177.20173645 48.20128632]
[162.69311523 52.00914764]
[148.18449402 55.81700516]
[135.76617432 64.23041534]
[126.85002136 76.29284668]
[117.93386841 88.35527802]
[121.65201569 113.57534790]
[96.28948212 129.49639893]
[96.28948212 144.49639893]
[96.28948212 159.49639893]
[96.28948212 174.49639893]
[96.28948212 189.49639893]
[96.28948212 204.49639893]
[96.28948212 219.49639893]
[96.28948212 234.49639893]
[96.28948212 249.49639893]
[96.28948212 264.49639893]
[96.28948212 279.49639893]
[110.89949799 283.23782349]
[124.11965942 290.49581909]
[135.11892700 300.81408691]
[143.20590210 313.54403687]
[147.87220764 327.88546753]
[148.82452393 342.93682861]
[146.00297546 357.75201416]
[139.58496094 371.39971924]
[129.97389221 383.02203369]
[117.77392578 391.88836670]
[103.75198364 397.44137573]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[55 129]
[56 128]
[57 127]
[60 70]
[61 69]
[62 68]
[91 126]
[92 125]
[93 124]
[94 123]
[95 122]
[96 117]
[97 116]
[98 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
