%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUUGCAAUGGGGGGGGGGACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCCCACUCUGCAUCAACxxxxxxxxxxCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUCUUCGCCCCCCCCCCAAUUUGCAAU\
) } def
/len { sequence length } bind def

/coor [
[68.67484283 389.91354370]
[56.11662292 381.56237793]
[46.03039932 370.34994507]
[39.05020523 356.98101807]
[35.61482239 342.29602051]
[35.94019699 327.21807861]
[40.00588226 312.69494629]
[47.55630112 299.63961792]
[58.11683273 288.87271118]
[71.02362823 281.07107544]
[85.46535492 276.72512817]
[84.84137726 261.73809814]
[84.21739960 246.75109863]
[83.59342194 231.76408386]
[82.96944427 216.77706909]
[82.34546661 201.79005432]
[81.72148895 186.80303955]
[81.09751129 171.81600952]
[72.83747101 159.42161560]
[79.99401093 145.31153870]
[79.37003326 130.32452393]
[73.45007324 116.54213715]
[63.01025772 105.77133179]
[52.57044601 95.00051880]
[39.66821671 94.00738525]
[31.19265747 84.76704407]
[31.30851555 72.63057709]
[21.09503746 61.64491272]
[10.88155651 50.65924835]
[0.66807687 39.67358398]
[-13.41664314 48.34673309]
[-28.96802521 53.96709824]
[-45.33318329 56.30094147]
[-61.82552338 55.25244141]
[-77.75353241 50.86764526]
[-92.44979095 43.33243942]
[-105.29892731 32.96468353]
[-115.76340485 20.20078659]
[-123.40596771 5.57734537]
[-127.90795898 -10.29141331]
[-129.08258057 -26.73943329]
[-126.88264465 -43.07678604]
[-121.40247345 -58.61861038]
[-112.87384796 -72.71381378]
[-123.96516418 -82.81246948]
[-132.47613525 -86.30747986]
[-135.17938232 -93.23843384]
[-146.05821228 -103.56564331]
[-156.93702698 -113.89284515]
[-167.81585693 -124.22004700]
[-182.28431702 -119.22784424]
[-197.41375732 -121.54275513]
[-209.72752380 -130.63282776]
[-216.39602661 -144.40925598]
[-215.88687134 -159.70629883]
[-208.31706238 -173.00880432]
[-195.42610168 -181.25996399]
[-180.17622375 -182.56370544]
[-166.07173157 -176.62046814]
[-156.35375977 -164.79594421]
[-153.25540161 -149.80731201]
[-157.48864746 -135.09887695]
[-146.60983276 -124.77166748]
[-135.73100281 -114.44446564]
[-124.85218048 -104.11726379]
[-113.86650848 -93.90377808]
[-102.77519989 -83.80513000]
[-92.02585602 -92.07657623]
[-80.03678131 -98.42605591]
[-67.14827728 -102.67211151]
[-53.72638321 -104.69298553]
[-40.15248108 -104.43015289]
[-26.81245804 -101.88998413]
[-14.08573914 -97.14360809]
[-2.33449268 -90.32492065]
[8.10667610 -81.62681580]
[16.94025230 -71.29570770]
[23.91428947 -59.62456894]
[28.82958984 -46.94460678]
[31.54540443 -33.61588287]
[31.98345184 -20.01707649]
[30.13018608 -6.53472567]
[26.03719711 6.44775391]
[19.81979370 18.56097794]
[11.65374184 29.46010208]
[21.86722183 40.44576645]
[32.08069992 51.43143082]
[42.29418182 62.41709518]
[59.30267334 66.62555695]
[63.34125519 84.56070709]
[73.78106689 95.33151245]
[84.22087860 106.10232544]
[80.46754456 83.57029724]
[106.67626953 66.53026581]
[119.61432648 58.94035721]
[132.55238342 51.35044861]
[145.49043274 43.76054001]
[149.23188782 28.40550613]
[162.77836609 20.26495552]
[178.09298706 24.16853523]
[186.08985901 37.80031967]
[182.02458191 53.07281494]
[168.30900574 60.92511749]
[153.08035278 56.69859695]
[140.14228821 64.28850555]
[127.20423126 71.87841034]
[114.26617432 79.46832275]
[117.51700592 94.11182404]
[132.45130920 95.51412964]
[147.38562012 96.91642761]
[162.31993103 98.31873322]
[176.78300476 91.90545654]
[188.73120117 100.79870605]
[203.40396118 93.47463989]
[216.93206787 102.74406433]
[215.39897156 119.07138824]
[200.38177490 125.66046143]
[187.32888794 115.73300934]
[173.93402100 122.24658966]
[160.91761780 113.25304413]
[145.98332214 111.85073853]
[131.04901123 110.44843292]
[116.11470032 109.04612732]
[110.67528534 114.20973206]
[121.00231171 125.08872986]
[110.12314606 135.41557312]
[99.79646301 124.53694153]
[94.35704803 129.70054626]
[94.98102570 144.68756104]
[103.28569794 158.15393066]
[96.08452606 171.19203186]
[96.70850372 186.17906189]
[97.33248138 201.16607666]
[97.95645905 216.15309143]
[98.58043671 231.14010620]
[99.20441437 246.12712097]
[99.82839203 261.11413574]
[100.45236969 276.10116577]
[115.20537567 279.23159790]
[128.71601868 285.93334961]
[140.13499451 295.78512573]
[148.74450684 308.16766357]
[154.00335693 322.30258179]
[155.58096313 337.30130005]
[153.37815857 352.22103882]
[147.53340149 366.12390137]
[138.41412354 378.13595581]
[126.59355164 387.50210571]
[112.81474304 393.63360596]
[97.94384003 396.14501953]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[20 129]
[21 128]
[22 92]
[23 91]
[24 90]
[27 88]
[28 87]
[29 86]
[30 85]
[44 67]
[45 66]
[47 65]
[48 64]
[49 63]
[50 62]
[94 107]
[95 106]
[96 105]
[97 104]
[108 123]
[109 122]
[110 121]
[111 120]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
