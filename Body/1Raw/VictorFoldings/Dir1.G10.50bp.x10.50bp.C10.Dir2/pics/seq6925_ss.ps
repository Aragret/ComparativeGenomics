%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUCAUCGCGGGGGGGGGGUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGAAxxxxxxxxxxGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCCCCCCCCCCCUACUCAUCGC\
) } def
/len { sequence length } bind def

/coor [
[74.78971863 481.41989136]
[63.57428360 471.35455322]
[54.98288345 458.97372437]
[49.47883987 444.94512939]
[47.35897827 430.02523804]
[48.73762512 415.01870728]
[53.54042435 400.73480225]
[61.50836945 387.94384766]
[72.21176147 377.33563232]
[85.07337952 369.48226929]
[99.39961243 364.80722046]
[98.15273285 349.85916138]
[96.90586090 334.91107178]
[95.65898895 319.96298218]
[94.41210938 305.01489258]
[93.16523743 290.06680298]
[91.91836548 275.11871338]
[90.67148590 260.17062378]
[89.42461395 245.22253418]
[88.17774200 230.27445984]
[74.38137054 226.95915222]
[62.26992035 219.52581787]
[53.03945923 208.69293213]
[47.60635376 195.51544189]
[46.51632690 181.28202820]
[49.88965225 167.38912964]
[57.40806961 155.20387268]
[68.34474182 145.92958069]
[81.63450623 140.48698425]
[80.69888306 125.51618195]
[71.19052124 113.91484070]
[56.69492340 110.05768585]
[42.19932938 106.20052338]
[27.70373154 102.34336853]
[13.13102818 98.78860474]
[-1.51247287 95.53778076]
[-16.15597343 92.28694916]
[-25.98804474 104.01678467]
[-40.14944077 109.82311249]
[-55.38597488 108.37169647]
[-68.19640350 99.99604797]
[-75.63698578 86.62083435]
[-75.99792480 71.31958008]
[-69.19628906 57.60840607]
[-56.79503632 48.63803482]
[-41.64388657 46.46979523]
[-27.22446251 51.60193253]
[-16.85024452 62.85511780]
[-12.90514851 77.64344788]
[1.73835289 80.89427948]
[16.38185501 84.14510345]
[20.86881447 82.34435272]
[26.53797340 83.38931274]
[31.56089020 87.84777069]
[46.05648804 91.70492554]
[60.55208588 95.56208801]
[75.04768372 99.41925049]
[80.76218414 87.48643494]
[91.06829834 81.06033325]
[102.13034058 81.18968964]
[109.58525085 68.17338562]
[117.04016113 55.15707397]
[121.04789734 40.70238495]
[121.35995483 25.70563126]
[112.10569763 9.82046223]
[121.69680786 -4.84277773]
[121.69680786 -19.84277725]
[107.44413757 -25.00390053]
[95.81820679 -34.73085022]
[88.22290802 -47.84905243]
[85.57540131 -62.77441788]
[88.19539642 -77.70463562]
[95.76651001 -90.83681488]
[107.37449646 -100.58517456]
[121.61763000 -105.77255249]
[136.77598572 -105.77255249]
[151.01911926 -100.58517456]
[162.62710571 -90.83681488]
[170.19821167 -77.70463562]
[172.81820679 -62.77441788]
[170.17071533 -47.84905243]
[162.57540894 -34.73085022]
[150.94947815 -25.00390053]
[136.69680786 -19.84277725]
[136.69680786 -4.84277773]
[145.04536438 3.96681261]
[145.12979126 16.50522614]
[136.35670471 26.01768684]
[136.04464722 41.01444244]
[144.09725952 28.35918236]
[154.89726257 17.94957161]
[167.84028625 10.36813641]
[182.20202637 6.03913927]
[197.17880249 5.20483303]
[211.93251038 7.91190577]
[225.63751221 14.00886726]
[237.52687073 23.15452957]
[246.93525696 34.83709717]
[253.33616638 48.40280151]
[256.37139893 63.09250641]
[255.87109375 78.08415985]
[251.86326599 92.53882599]
[244.57218933 105.64760590]
[234.40588379 116.67693329]
[221.93324280 125.00959778]
[207.85226440 130.17930603]
[192.95089722 131.89674377]
[178.06306458 130.06581116]
[164.02188110 124.78895569]
[151.61309814 116.36149597]
[141.53112793 105.25502014]
[134.34014893 92.09105682]
[130.44258118 77.60626984]
[130.05647278 62.61198425]
[122.60156250 75.62829590]
[115.14665222 88.64459991]
[118.69776917 111.48775482]
[95.66967010 124.58055878]
[96.60530090 139.55134583]
[111.88388062 143.96118164]
[124.71401978 153.31095886]
[133.56166077 166.46012878]
[137.37667847 181.81521606]
[135.71749878 197.52297974]
[128.80206299 211.69403076]
[117.47949982 222.63009644]
[103.12582397 229.02757263]
[104.37270355 243.97566223]
[105.61957550 258.92373657]
[106.86644745 273.87182617]
[108.11332703 288.81991577]
[109.36019897 303.76800537]
[110.60707092 318.71609497]
[111.85395050 333.66418457]
[113.10082245 348.61227417]
[114.34769440 363.56036377]
[129.25047302 365.79727173]
[143.23545837 371.41128540]
[155.54844666 380.09960938]
[165.52542114 391.39370728]
[172.62832642 404.68453979]
[176.47412109 419.25527954]
[176.85539246 434.32015991]
[173.75160217 449.06680298]
[167.33012390 462.69989014]
[157.93724060 474.48425293]
[146.07952881 483.78430176]
[132.39643860 490.09857178]
[117.62590027 493.08651733]
[102.56445312 492.58697510]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[29 119]
[30 118]
[31 57]
[32 56]
[33 55]
[34 54]
[35 51]
[36 50]
[37 49]
[60 116]
[61 115]
[62 114]
[63 89]
[64 88]
[66 85]
[67 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
