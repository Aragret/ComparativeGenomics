%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACACUCAGGGGGGGGGGUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUAAUCxxxxxxxxxxUUGGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCCCCCCCCCCCACCCUCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 362.83981323]
[71.19830322 356.82379150]
[59.48964310 347.29437256]
[50.78712082 334.95870972]
[45.73651886 320.73217773]
[44.71262741 305.67050171]
[47.79142761 290.89135742]
[54.74444962 277.49142456]
[65.05573273 266.46508789]
[77.96011353 258.63058472]
[92.50000000 254.56925964]
[92.50000000 239.56925964]
[92.50000000 224.56925964]
[92.50000000 209.56925964]
[92.50000000 194.56925964]
[92.50000000 179.56925964]
[92.50000000 164.56925964]
[92.50000000 149.56925964]
[92.50000000 134.56925964]
[92.50000000 119.56925964]
[80.41045380 112.49214935]
[74.55137634 98.22956848]
[60.76899338 104.14953613]
[58.32894135 119.38271332]
[48.02354431 130.86323547]
[33.14121628 134.92770386]
[18.43085861 130.27915955]
[8.58648872 118.40095520]
[6.74941015 103.08335876]
[13.50582886 89.21417236]
[26.69979477 81.21900177]
[42.12116241 81.64907074]
[54.84902954 90.36715698]
[68.63140869 84.44718933]
[78.01856995 72.74756622]
[80.81089783 58.00976181]
[83.60321808 43.27195358]
[86.39554596 28.53414917]
[89.18787384 13.79634285]
[91.05548096 -1.08693707]
[91.99111176 -16.05772781]
[92.92674255 -31.02852058]
[90.32650757 -39.85408783]
[94.04075623 -46.30001450]
[95.28762817 -61.24810028]
[96.53450775 -76.19618988]
[90.24917603 -79.12874603]
[85.01206970 -84.37470245]
[81.67607880 -91.52552795]
[80.92530823 -99.86152649]
[76.31974792 -114.13698578]
[71.71417999 -128.41244507]
[67.10861206 -142.68791199]
[52.14640808 -141.03950500]
[37.15868759 -142.43705750]
[22.75919533 -146.82334900]
[9.53757763 -154.01873779]
[-1.96474695 -163.72859192]
[-11.27676582 -175.55531311]
[-18.01715660 -189.01458740]
[-21.90990639 -203.55526733]
[-22.79560852 -218.58192444]
[-20.63799286 -233.47923279]
[-15.52541447 -247.63713074]
[-7.66722870 -260.47589111]
[2.61477542 -271.46975708]
[14.89955711 -280.16857910]
[28.68406296 -286.21606445]
[43.40382385 -289.36465454]
[58.45607758 -289.48535156]
[73.22444153 -286.57324219]
[87.10415649 -280.74758911]
[99.52687073 -272.24694824]
[109.98387146 -261.41937256]
[118.04694366 -248.70829773]
[123.38592529 -234.63420105]
[125.78218079 -219.77342224]
[125.13758850 -204.73449707]
[121.47853851 -190.13325500]
[114.95486450 -176.56761169]
[105.83371735 -164.59307861]
[94.48859406 -154.69998169]
[81.38407898 -147.29347229]
[85.98963928 -133.01802063]
[90.59520721 -118.74255371]
[95.20076752 -104.46709442]
[109.52336884 -100.01027679]
[121.41574860 -109.15200806]
[133.30812073 -118.29374695]
[145.20050049 -127.43547821]
[131.00891113 -132.29331970]
[125.75835419 -146.34436035]
[133.28656006 -159.31842041]
[148.09101868 -161.73251343]
[159.35087585 -151.82212830]
[158.83638000 -136.83154297]
[171.61373901 -144.68898010]
[184.39109802 -152.54640198]
[194.71600342 -165.99380493]
[210.49609375 -159.79501343]
[208.90792847 -142.91561890]
[192.24851990 -139.76904297]
[179.47117615 -131.91162109]
[166.69381714 -124.05419159]
[154.34223938 -115.54309845]
[142.44985962 -106.40136719]
[130.55747986 -97.25962830]
[118.66510010 -88.11789703]
[111.48258972 -74.94931793]
[110.23571777 -60.00122833]
[108.98884583 -45.05313873]
[107.89752960 -30.09289169]
[106.96190643 -15.12209988]
[106.02627563 -0.15130863]
[118.21607971 -8.89251232]
[133.04661560 -6.64412069]
[142.09777832 5.31733274]
[140.23074341 20.20068550]
[128.50552368 29.55585289]
[113.57915497 28.07140160]
[103.92567444 16.58866692]
[101.13335419 31.32647324]
[98.34102631 46.06427765]
[95.54870605 60.80208588]
[92.75637817 75.53989410]
[105.46604919 75.85977936]
[116.05808258 82.17366028]
[122.00291443 92.53836823]
[122.09698486 104.10404968]
[116.68990326 113.89367676]
[107.50000000 119.56925964]
[107.50000000 134.56925964]
[107.50000000 149.56925964]
[107.50000000 164.56925964]
[107.50000000 179.56925964]
[107.50000000 194.56925964]
[107.50000000 209.56925964]
[107.50000000 224.56925964]
[107.50000000 239.56925964]
[107.50000000 254.56925964]
[122.03988647 258.63058472]
[134.94427490 266.46508789]
[145.25555420 277.49142456]
[152.20857239 290.89135742]
[155.28736877 305.67050171]
[154.26348877 320.73217773]
[149.21287537 334.95870972]
[140.51036072 347.29437256]
[128.80169678 356.82379150]
[114.95575714 362.83981323]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 34]
[23 33]
[35 125]
[36 124]
[37 123]
[38 122]
[39 121]
[40 114]
[41 113]
[42 112]
[44 111]
[45 110]
[46 109]
[50 86]
[51 85]
[52 84]
[53 83]
[87 108]
[88 107]
[89 106]
[90 105]
[96 104]
[97 103]
[98 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
