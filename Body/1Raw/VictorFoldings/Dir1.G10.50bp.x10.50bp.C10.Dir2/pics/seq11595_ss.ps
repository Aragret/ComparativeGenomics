%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUAAAAACCCGGGGGGGGGGAAUCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAxxxxxxxxxxGUACGGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCCCCCCCCCCCACAUCAAAACCC\
) } def
/len { sequence length } bind def

/coor [
[70.83920288 305.04522705]
[63.09106827 292.20132446]
[56.85047913 278.56112671]
[52.19805908 264.30084229]
[49.19391251 249.60476685]
[47.87685013 234.66270447]
[48.26388168 219.66769409]
[50.35001373 204.81346130]
[54.10829163 190.29191589]
[59.49016190 176.29064941]
[66.42610168 162.99055481]
[74.83303833 150.55485535]
[84.44840240 139.04205322]
[70.49058533 144.53562927]
[56.53277969 150.02922058]
[42.57496643 155.52281189]
[28.61715698 161.01640320]
[14.65934658 166.50999451]
[0.70153576 172.00358582]
[-13.25627518 177.49717712]
[-27.21408463 182.99076843]
[-41.17189407 188.48435974]
[-41.40647888 203.68347168]
[-47.44424820 217.63388062]
[-58.36448288 228.20823669]
[-72.50193024 233.79400635]
[-87.70073700 233.53944397]
[-101.64318848 227.48332214]
[-112.20316315 216.54917908]
[-117.77033997 202.40440369]
[-117.49577332 187.20594788]
[-111.42132568 173.27146912]
[-100.47330475 162.72589111]
[-86.32120514 157.17732239]
[-71.12312317 157.47187805]
[-57.19665527 163.56466675]
[-46.66548538 174.52653503]
[-32.70767593 169.03295898]
[-18.74986458 163.53936768]
[-4.79205370 158.04577637]
[9.16575718 152.55218506]
[23.12356758 147.05859375]
[37.08137894 141.56500244]
[51.03918839 136.07141113]
[64.99700165 130.57781982]
[78.95481110 125.08423615]
[81.97441101 110.39063263]
[84.99376678 95.69834137]
[74.33355713 85.14561462]
[63.67334366 74.59289551]
[53.01313400 64.04017639]
[42.24653244 53.59602737]
[31.37463951 43.26152420]
[20.50274849 32.92701721]
[4.71186733 33.57788467]
[-6.85744810 22.81097031]
[-7.34132862 7.01409054]
[3.54730344 -4.44074440]
[19.34841537 -4.75758362]
[30.68748856 6.25154734]
[30.83725166 22.05512619]
[41.70914459 32.38962936]
[52.58103561 42.72413254]
[59.63733292 45.06684875]
[63.56585693 53.37996674]
[74.22606659 63.93268585]
[84.88627625 74.48540497]
[95.54648590 85.03813171]
[91.25051880 70.66646576]
[86.95454407 56.29480743]
[82.65857697 41.92314529]
[72.31990051 31.05521965]
[64.60654449 18.19037819]
[59.89149094 3.95070577]
[58.40273666 -10.97523212]
[60.21227264 -25.86568451]
[65.23259735 -40.00061798]
[73.22094727 -52.69653320]
[83.79104614 -63.33951187]
[96.43177795 -71.41490936]
[110.53188324 -76.53223419]
[125.40954590 -78.44403839]
[140.34536743 -77.05786896]
[154.61709595 -72.44077301]
[167.53463745 -64.81599426]
[178.47334290 -54.55223465]
[186.90426636 -42.14580536]
[192.41973877 -28.19663048]
[194.75305176 -13.37921906]
[193.79138184 1.58992159]
[189.58122253 15.98695374]
[182.32615662 29.11570358]
[172.37701416 40.34132385]
[160.21488953 49.12099457]
[146.43200684 55.02891922]
[136.81663513 66.54172516]
[127.20127106 78.05453491]
[117.58590698 89.56734467]
[131.54371643 84.07375336]
[145.50152588 78.58016968]
[159.45933533 73.08657837]
[163.93165588 68.08879852]
[169.43537903 66.39923096]
[174.09577942 67.66583252]
[188.26475525 62.74240494]
[196.52293396 48.98805618]
[212.44378662 47.01176834]
[223.81422424 58.32957840]
[221.91180420 74.25943756]
[208.19589233 82.58131409]
[193.18818665 76.91138458]
[179.01921082 81.83480835]
[164.95292664 87.04438782]
[150.99511719 92.53797913]
[137.03730774 98.03156281]
[123.07949829 103.52515411]
[137.96240234 105.39580536]
[152.43643188 101.45848846]
[167.26376343 99.18907928]
[182.25283813 98.61689758]
[197.21003723 99.74934387]
[211.94210815 102.57177734]
[226.25872803 107.04773712]
[239.97496033 113.11940765]
[252.91358948 120.70833588]
[264.90747070 129.71649170]
[275.80163574 140.02749634]
[285.45538330 151.50814819]
[293.74395752 164.01011658]
[300.56033325 177.37190247]
[305.81637573 191.42088318]
[309.44424438 205.97555542]
[311.39706421 220.84790039]
[311.64956665 235.84577942]
[310.19851685 250.77543640]
[307.06265259 265.44396973]
[302.28250122 279.66192627]
[295.91979980 293.24560547]
[288.05676270 306.01950073]
[278.79498291 317.81863403]
[268.25405884 328.49050903]
[256.57022095 337.89730835]
[243.89440918 345.91751099]
[230.39033508 352.44744873]
[216.23249817 357.40283203]
[201.60379028 360.71957397]
[186.69320679 362.35488892]
[171.69335938 362.28759766]
[156.79803467 360.51861572]
[142.19966125 357.07077026]
[128.08685303 351.98858643]
[114.64190674 345.33776855]
[102.03852844 337.20419312]
[90.43953705 327.69299316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 46]
[14 45]
[15 44]
[16 43]
[17 42]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[48 68]
[49 67]
[50 66]
[51 65]
[52 63]
[53 62]
[54 61]
[98 116]
[99 115]
[100 114]
[101 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
