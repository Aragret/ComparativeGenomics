%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAACAAAUGGGGGGGGGGGAUAACCAUACACAACACUAAAGGACGAACCUGAUCUCUUAUACUAGUAUxxxxxxxxxxACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACCCCCCCCCCCAAAACACAU\
) } def
/len { sequence length } bind def

/coor [
[80.14883423 365.18841553]
[66.30289459 359.17239380]
[54.59423065 349.64297485]
[45.89170837 337.30731201]
[40.84110641 323.08078003]
[39.81721497 308.01910400]
[42.89601135 293.23992920]
[49.84903336 279.84002686]
[60.16032028 268.81369019]
[73.06469727 260.97918701]
[87.60458374 256.91784668]
[87.60458374 241.91786194]
[87.60458374 226.91786194]
[87.60458374 211.91786194]
[87.60458374 196.91786194]
[87.60458374 181.91786194]
[87.60458374 166.91786194]
[87.60458374 151.91786194]
[87.60458374 136.91786194]
[87.60458374 121.91786194]
[80.42208099 108.74927521]
[70.53912354 119.03983307]
[58.92166519 127.31512451]
[45.97421265 133.28898621]
[32.14721680 136.75532532]
[17.92141533 137.59527588]
[3.79109550 135.78123474]
[-9.75306702 131.37780762]
[-22.24104500 124.53947449]
[-33.23977661 115.50519562]
[-42.36818695 104.59005737]
[-49.31037140 92.17425537]
[-53.82656097 78.68989563]
[-55.76137161 64.60591125]
[-55.04916382 50.41179657]
[-51.71627426 36.60056686]
[-45.88003159 23.65164566]
[-58.14239883 15.01253033]
[-70.40476990 6.37341404]
[-82.66713715 -2.26570201]
[-95.27826691 -10.38724422]
[-108.21631622 -17.97715187]
[-121.15437317 -25.56706047]
[-134.17068481 -33.02197266]
[-147.26383972 -40.34107590]
[-160.82817078 -32.99176788]
[-176.21083069 -34.16535568]
[-188.50326538 -43.48735428]
[-193.78300476 -57.98314667]
[-190.36529541 -73.02717590]
[-179.34072876 -83.81894684]
[-164.22718811 -86.91484833]
[-149.84736633 -81.32698822]
[-140.78979492 -68.83843231]
[-139.94473267 -53.43423080]
[-126.85157776 -46.11512375]
[-119.43043518 -45.59329224]
[-113.56446838 -38.50511551]
[-100.62641144 -30.91520882]
[-87.68835449 -23.32530022]
[-84.89248657 -23.95016861]
[-81.67347717 -23.46854210]
[-78.46537018 -21.71072769]
[-75.75634003 -18.67226791]
[-74.02802277 -14.52807045]
[-61.76565170 -5.88895416]
[-49.50328445 2.75016212]
[-37.24091339 11.38927841]
[-25.76770592 0.56251180]
[-12.30650997 -7.67286253]
[2.56701469 -12.96203613]
[18.21626854 -15.07624722]
[33.97095871 -13.92267799]
[49.15581512 -9.54852390]
[63.11952209 -2.13906932]
[75.26266479 7.99016190]
[85.06346893 20.40683937]
[92.10018158 34.58028412]
[96.06926727 49.90414047]
[96.79848480 65.72232056]
[94.25432587 81.35710144]
[88.54361725 96.13814545]
[85.40596771 77.50483704]
[103.92609406 58.64670181]
[115.01741028 48.54805374]
[126.10872650 38.44940186]
[137.20004272 28.35075378]
[148.29135132 18.25210381]
[143.10485840 3.96334529]
[143.78620911 -11.22231197]
[150.23153687 -24.98916626]
[161.45796204 -35.23786926]
[175.75352478 -40.40557480]
[190.93827820 -39.70423889]
[204.69664001 -33.24081039]
[214.93055725 -22.00091934]
[220.07945251 -7.69856501]
[219.35815430 7.48524714]
[212.87663269 21.23509598]
[201.62329102 31.45422935]
[187.31416321 36.58430481]
[172.13131714 35.84302139]
[158.39001465 29.34341812]
[147.29869080 39.44207001]
[136.20738220 49.54071808]
[125.11605835 59.63936615]
[114.02474976 69.73801422]
[115.49748993 77.09199524]
[128.57539368 69.74568939]
[139.60343933 79.91340637]
[133.34118652 93.54367828]
[118.44297028 91.79995728]
[119.91571045 99.15393829]
[134.04051208 104.20269775]
[148.16531372 109.25144958]
[158.99365234 98.49460602]
[173.41967773 93.50936890]
[188.57910156 95.28558350]
[201.46199036 103.47055817]
[209.51045227 116.43917847]
[211.12644958 131.61651611]
[205.98912048 145.98907471]
[195.11851501 156.70320129]
[180.67295837 161.63159180]
[165.52066040 159.79570007]
[152.67010498 151.56004333]
[144.67277527 138.55982971]
[143.11656189 123.37625885]
[128.99176025 118.32749939]
[114.86695862 113.27873993]
[102.60458374 121.91786194]
[102.60458374 136.91786194]
[102.60458374 151.91786194]
[102.60458374 166.91786194]
[102.60458374 181.91786194]
[102.60458374 196.91786194]
[102.60458374 211.91786194]
[102.60458374 226.91786194]
[102.60458374 241.91786194]
[102.60458374 256.91784668]
[117.14447021 260.97918701]
[130.04885864 268.81369019]
[140.36013794 279.84002686]
[147.31315613 293.23992920]
[150.39195251 308.01910400]
[149.36807251 323.08078003]
[144.31745911 337.30731201]
[135.61494446 349.64297485]
[123.90628052 359.17239380]
[110.06034088 365.18841553]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 82]
[37 68]
[38 67]
[39 66]
[40 65]
[41 60]
[42 59]
[43 58]
[44 56]
[45 55]
[84 107]
[85 106]
[86 105]
[87 104]
[88 103]
[113 130]
[114 129]
[115 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
