%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCUACACGGGGGGGGGGUUAUCAUCUUCACAAUUCUAAUUCUACUGACUAUCCUAGAAAUCGCUGUCxxxxxxxxxxAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCCCCCCCCCCCUCAACAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 424.64355469]
[71.19830322 418.62753296]
[59.48964310 409.09811401]
[50.78712082 396.76245117]
[45.73651886 382.53594971]
[44.71262741 367.47424316]
[47.79142761 352.69509888]
[54.74444962 339.29516602]
[65.05573273 328.26882935]
[77.96011353 320.43432617]
[92.50000000 316.37301636]
[92.50000000 301.37301636]
[92.50000000 286.37301636]
[92.50000000 271.37301636]
[92.50000000 256.37301636]
[92.50000000 241.37301636]
[92.50000000 226.37301636]
[92.50000000 211.37301636]
[92.50000000 196.37301636]
[92.50000000 181.37301636]
[92.50000000 166.37301636]
[92.50000000 151.37301636]
[92.50000000 136.37301636]
[92.50000000 121.37301636]
[74.79368591 106.30777740]
[78.40798187 80.16979218]
[105.20793152 67.76877594]
[96.19039917 55.78194427]
[87.17286682 43.79510880]
[83.58820343 58.36048508]
[70.85488129 66.28907776]
[56.20230865 63.07940292]
[47.94953537 50.55376053]
[50.78210831 35.82363892]
[63.09181976 27.25212097]
[77.89110565 29.70652962]
[70.43619537 16.69021988]
[62.98128510 3.67391014]
[55.52637482 -9.34239960]
[48.07146454 -22.35870934]
[26.87087059 -22.49729538]
[11.39667034 -44.51097107]
[-1.21445775 -52.63251114]
[-13.82558632 -60.75405502]
[-26.43671417 -68.87559509]
[-39.04784393 -76.99713898]
[-52.66913223 -69.90093994]
[-68.01290894 -70.58213806]
[-80.95178223 -78.85747528]
[-88.00524139 -92.50094604]
[-87.27596283 -107.84251404]
[-78.96009827 -120.75537872]
[-65.29458618 -127.76604462]
[-49.95538330 -126.98867035]
[-37.06864929 -118.63237762]
[-30.10085297 -104.94496155]
[-30.92630005 -89.60826874]
[-18.31517220 -81.48672485]
[-5.70404387 -73.36518097]
[6.90708447 -65.24363708]
[19.51821327 -57.12209702]
[26.02636719 -60.84955215]
[26.07835007 -75.84946442]
[39.04267502 -68.30446625]
[45.55083084 -72.03192139]
[44.92685318 -87.01893616]
[30.47182655 -91.58270264]
[18.45133209 -100.81761169]
[10.31690884 -113.60850525]
[7.05082417 -128.41081238]
[9.04747486 -143.43710327]
[16.06575584 -156.87286377]
[27.25817490 -167.09565735]
[41.27319336 -172.87103271]
[56.41843033 -173.50160217]
[70.86502838 -168.91120911]
[82.86847687 -159.65415955]
[90.97931671 -146.84829712]
[94.21811676 -132.03999329]
[92.19377899 -117.01741028]
[85.15074921 -103.59461212]
[73.93950653 -93.39245605]
[59.91387177 -87.64291382]
[60.53784943 -72.65589905]
[71.69561005 -48.17004013]
[61.08777237 -29.81361961]
[68.54268646 -16.79730988]
[75.99759674 -3.78100038]
[83.45250702 9.23530960]
[90.90741730 22.25161934]
[99.15970612 34.77758026]
[108.17723083 46.76441193]
[117.19476318 58.75124741]
[131.56294250 63.05883026]
[145.68774414 58.01007462]
[159.81254578 52.96131897]
[173.93736267 47.91255951]
[188.06216431 42.86380386]
[202.07887268 37.52229309]
[215.98143005 31.89033508]
[220.62750244 16.95889282]
[233.81221008 8.55072308]
[249.31015015 10.63590908]
[259.80364990 22.22988892]
[260.33801270 37.85834122]
[250.66093445 50.14198303]
[235.34161377 53.28086472]
[221.61338806 45.79289246]
[207.71083069 51.42484665]
[205.03785706 55.45358276]
[199.77673340 57.80983353]
[193.11091614 56.98860931]
[178.98611450 62.03736496]
[164.86131287 67.08612061]
[150.73651123 72.13488007]
[136.61170959 77.18363190]
[136.76774597 92.18282318]
[150.99452209 96.93663788]
[165.93342590 91.08782959]
[179.74775696 99.24526215]
[181.84034729 115.15125275]
[170.60592651 126.60408783]
[154.66259766 124.81813049]
[146.24070740 111.16341400]
[132.01393127 106.40959930]
[120.87006378 118.13733673]
[107.50000000 121.37301636]
[107.50000000 136.37301636]
[107.50000000 151.37301636]
[107.50000000 166.37301636]
[107.50000000 181.37301636]
[107.50000000 196.37301636]
[107.50000000 211.37301636]
[107.50000000 226.37301636]
[107.50000000 241.37301636]
[107.50000000 256.37301636]
[107.50000000 271.37301636]
[107.50000000 286.37301636]
[107.50000000 301.37301636]
[107.50000000 316.37301636]
[122.03988647 320.43432617]
[134.94427490 328.26882935]
[145.25555420 339.29516602]
[152.20857239 352.69509888]
[155.28736877 367.47424316]
[154.26348877 382.53594971]
[149.21287537 396.76245117]
[140.51036072 409.09811401]
[128.80169678 418.62753296]
[114.95575714 424.64355469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[24 127]
[27 93]
[28 92]
[29 91]
[36 90]
[37 89]
[38 88]
[39 87]
[40 86]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
[65 84]
[66 83]
[94 116]
[95 115]
[96 114]
[97 113]
[98 112]
[99 109]
[100 108]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
