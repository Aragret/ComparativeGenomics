%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCCUAUUGGGGGGGGGGAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAxxxxxxxxxxGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUACGCCGCAGGCCCCUCCCCCCCCCCUCGCCCUAUU\
) } def
/len { sequence length } bind def

/coor [
[70.83833313 391.44070435]
[56.99238968 385.42468262]
[45.28372955 375.89526367]
[36.58120346 363.55960083]
[31.53060341 349.33306885]
[30.50671196 334.27139282]
[33.58551025 319.49224854]
[40.53853226 306.09231567]
[50.84981537 295.06597900]
[63.75419617 287.23147583]
[78.29408264 283.17016602]
[78.29408264 268.17016602]
[78.29408264 253.17016602]
[78.29408264 238.17016602]
[78.29408264 223.17016602]
[78.29408264 208.17016602]
[78.29408264 193.17016602]
[78.29408264 178.17016602]
[78.29408264 163.17016602]
[78.29408264 148.17016602]
[78.29408264 133.17016602]
[67.52327728 122.73034668]
[52.53057861 123.19838715]
[37.53788376 123.66643524]
[22.54518890 124.13447571]
[7.75248098 126.61959076]
[-6.57011652 131.07641602]
[-20.89271355 135.53321838]
[-31.61354637 147.94273376]
[-47.66790009 144.59762573]
[-52.54043198 128.93905640]
[-41.21870041 117.07523346]
[-25.34952927 121.21062469]
[-11.02693176 116.75381470]
[3.29566503 112.29699707]
[-11.02768421 107.84259796]
[-22.37529755 98.03282166]
[-28.85413742 84.50416565]
[-29.38339043 69.51350403]
[-23.87476158 55.56161880]
[-13.24721813 44.97600174]
[0.72633058 39.52256775]
[15.71478176 40.11107254]
[29.21772575 46.64334106]
[38.98256683 58.02964020]
[43.38031387 72.37048340]
[41.67732239 87.27349854]
[34.15768814 100.25252533]
[22.07714653 109.14177704]
[37.06984329 108.67373657]
[52.06253815 108.20569611]
[67.05523682 107.73765564]
[67.05677795 97.03836823]
[70.36705780 87.12036133]
[76.50032043 78.95477295]
[84.70312500 73.28945160]
[94.04418945 70.58132935]
[103.51893616 70.96209717]
[112.15725708 74.23941803]
[121.90491486 62.83839798]
[131.65255737 51.43737793]
[141.40022278 40.03635788]
[151.14787292 28.63533592]
[154.23493958 13.11823177]
[168.38655090 8.47267342]
[178.13420105 -2.92834759]
[181.22128296 -18.44545174]
[195.37289429 -23.09101105]
[205.12054443 -34.49203110]
[214.86819458 -45.89305115]
[206.25192261 -57.64857483]
[200.48341370 -71.02532196]
[197.85130310 -85.34543610]
[198.48541260 -99.88407898]
[202.35028076 -113.90613556]
[209.24723816 -126.70333862]
[218.82449341 -137.63008118]
[230.59516907 -146.13595581]
[243.96197510 -151.79354858]
[258.24761963 -154.31979370]
[272.72900391 -153.59025574]
[286.67395020 -149.64520264]
[299.37808228 -142.68739319]
[309.36080933 -153.88316345]
[312.76712036 -162.43002319]
[319.66958618 -165.20523071]
[329.88305664 -176.19088745]
[339.98168945 -187.28221130]
[349.96441650 -198.47796631]
[347.53405762 -213.92553711]
[355.64602661 -227.29452515]
[370.47012329 -232.27252197]
[385.00683594 -226.50904846]
[392.39239502 -212.72546387]
[389.13958740 -197.42993164]
[376.78424072 -187.84455872]
[361.16018677 -188.49523926]
[351.17745972 -177.29948425]
[349.05972290 -170.16780090]
[340.86871338 -165.97741699]
[330.65524292 -154.99174500]
[320.55657959 -143.90043640]
[310.57385254 -132.70466614]
[319.40597534 -120.01023865]
[324.96078491 -105.56835938]
[326.91424561 -90.21005249]
[325.14962769 -74.82013702]
[319.76449585 -60.28625870]
[311.06539917 -47.44766998]
[299.55041504 -37.04679871]
[285.88049316 -29.68629265]
[270.84167480 -25.79410744]
[255.29991150 -25.59863281]
[240.15101624 -29.11528969]
[226.26921082 -36.14540100]
[216.52156067 -24.74437904]
[206.77391052 -13.34335899]
[204.38404846 1.35826826]
[189.53523254 6.81930447]
[179.78758240 18.22032547]
[177.39772034 32.92195129]
[162.54888916 38.38298798]
[152.80123901 49.78400803]
[143.05358887 61.18503189]
[133.30593872 72.58605194]
[123.55828094 83.98707581]
[129.82380676 99.84587097]
[125.95278168 117.25106049]
[112.42715454 130.03265381]
[93.29408264 133.17016602]
[93.29408264 148.17016602]
[93.29408264 163.17016602]
[93.29408264 178.17016602]
[93.29408264 193.17016602]
[93.29408264 208.17016602]
[93.29408264 223.17016602]
[93.29408264 238.17016602]
[93.29408264 253.17016602]
[93.29408264 268.17016602]
[93.29408264 283.17016602]
[107.83396912 287.23147583]
[120.73834991 295.06597900]
[131.04963684 306.09231567]
[138.00265503 319.49224854]
[141.08145142 334.27139282]
[140.05757141 349.33306885]
[135.00695801 363.55960083]
[126.30444336 375.89526367]
[114.59577942 385.42468262]
[100.74983978 391.44070435]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 52]
[23 51]
[24 50]
[25 49]
[26 35]
[27 34]
[28 33]
[59 126]
[60 125]
[61 124]
[62 123]
[63 122]
[65 120]
[66 119]
[68 117]
[69 116]
[70 115]
[83 103]
[84 102]
[86 101]
[87 100]
[88 98]
[89 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
