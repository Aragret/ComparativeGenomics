%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCGAGCAGGGGGGGGGGGUACAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAUACUCAAUUGAUxxxxxxxxxxCUUUCUUCUUCCCACUCAUCCUAACCCUACUCCUAAUCACAUAACCUAUUCCCCCCCCCCCCCCCGAGCA\
) } def
/len { sequence length } bind def

/coor [
[76.34387970 369.41796875]
[62.49794006 363.40194702]
[50.78927994 353.87252808]
[42.08675385 341.53686523]
[37.03615189 327.31033325]
[36.01226044 312.24865723]
[39.09106064 297.46948242]
[46.04408264 284.06958008]
[56.35536575 273.04324341]
[69.25975037 265.20874023]
[83.79963684 261.14739990]
[83.79963684 246.14741516]
[83.79963684 231.14741516]
[83.79963684 216.14741516]
[83.79963684 201.14741516]
[83.79963684 186.14741516]
[83.79963684 171.14741516]
[83.79963684 156.14741516]
[83.79963684 141.14741516]
[83.79963684 126.14741516]
[73.35982513 115.37660217]
[58.36712646 114.90856171]
[43.37443161 114.44052124]
[30.88106918 126.64106750]
[13.76489067 126.07491302]
[2.55521822 113.57686615]
[-12.44397068 113.42082977]
[-27.44315910 113.26479340]
[-42.44234848 113.10875702]
[-53.68819809 123.88690948]
[-68.89728546 123.51499176]
[-79.10330200 112.72737122]
[-94.10249329 112.57133484]
[-109.10167694 112.41529846]
[-124.10086823 112.25926208]
[-136.52238464 122.41236115]
[-152.17408752 118.89047241]
[-159.04933167 104.39528656]
[-151.87402344 90.04626465]
[-136.15243530 86.85075378]
[-123.94483185 97.26007080]
[-108.94564056 97.41610718]
[-93.94645691 97.57214355]
[-78.94726562 97.72817993]
[-68.51903534 87.15522003]
[-53.30550385 87.09979248]
[-42.28631210 98.10956573]
[-27.28712273 98.26560211]
[-12.28793335 98.42163849]
[2.71125460 98.57767487]
[10.59471130 88.33815002]
[23.12924385 84.47035980]
[35.78251266 88.60832977]
[43.84247208 99.44782257]
[58.83516693 99.91586304]
[73.82786560 100.38391113]
[86.85011292 81.59795380]
[106.43827820 82.06010437]
[116.65175629 71.07444000]
[126.86523438 60.08877563]
[116.86124420 48.89749527]
[107.93254089 36.83089066]
[100.15530396 23.99191856]
[93.59588623 10.49011612]
[88.31025696 -3.55932307]
[84.34350586 -18.03652954]
[81.72947693 -32.81798935]
[80.49047089 -47.77758408]
[80.63706970 -62.78768539]
[82.16801453 -77.72023010]
[85.07024384 -92.44781494]
[89.31899261 -106.84477997]
[94.87802124 -120.78830719]
[101.69989014 -134.15942383]
[109.72640228 -146.84405518]
[118.88908386 -158.73396301]
[129.10974121 -169.72772217]
[140.30119324 -179.73152161]
[152.36793518 -188.66003418]
[165.20704651 -196.43705750]
[178.70895386 -202.99624634]
[192.75848389 -208.28164673]
[207.23576355 -212.24815369]
[222.01725769 -214.86193848]
[236.97688293 -216.10067749]
[251.98696899 -215.95384216]
[266.91949463 -214.42263794]
[281.64703369 -211.52017212]
[296.04391479 -207.27117920]
[309.98736572 -201.71191406]
[323.35836792 -194.88983154]
[336.04284668 -186.86309814]
[347.93261719 -177.70022583]
[358.92620850 -167.47938538]
[368.92980957 -156.28776550]
[377.85812378 -144.22087097]
[385.63491821 -131.38163757]
[392.19390869 -117.87961578]
[397.47906494 -103.83000183]
[401.44534302 -89.35266113]
[404.05886841 -74.57111359]
[405.29736328 -59.61147690]
[405.15026855 -44.60137939]
[403.61883545 -29.66888809]
[400.71612549 -14.94140053]
[396.46688843 -0.54457200]
[390.90737915 13.39876747]
[384.08508301 26.76965523]
[376.05813599 39.45401382]
[366.89508057 51.34362030]
[356.67404175 62.33703613]
[345.48226929 72.34046936]
[333.41519165 81.26856995]
[320.57583618 89.04516602]
[307.07369995 95.60390472]
[293.02401733 100.88883972]
[278.54660034 104.85486603]
[263.76501465 107.46815491]
[248.80535889 108.70640564]
[233.79525757 108.55905914]
[218.86279297 107.02737427]
[204.13536072 104.12440491]
[189.73860168 99.87493896]
[175.79534912 94.31521606]
[162.42457581 87.49267578]
[149.74035645 79.46552277]
[137.85090637 70.30225372]
[127.63742065 81.28791809]
[117.42394257 92.27359009]
[118.67163086 112.76420593]
[98.79963684 126.14741516]
[98.79963684 141.14741516]
[98.79963684 156.14741516]
[98.79963684 171.14741516]
[98.79963684 186.14741516]
[98.79963684 201.14741516]
[98.79963684 216.14741516]
[98.79963684 231.14741516]
[98.79963684 246.14741516]
[98.79963684 261.14739990]
[113.33952332 265.20874023]
[126.24390411 273.04324341]
[136.55519104 284.06958008]
[143.50820923 297.46948242]
[146.58700562 312.24865723]
[145.56311035 327.31033325]
[140.51251221 341.53686523]
[131.80999756 353.87252808]
[120.10132599 363.40194702]
[106.25538635 369.41796875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 56]
[22 55]
[23 54]
[26 50]
[27 49]
[28 48]
[29 47]
[32 44]
[33 43]
[34 42]
[35 41]
[58 129]
[59 128]
[60 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
