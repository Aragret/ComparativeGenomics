%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACACAAACGGGGGGGGGGAUUAUUAUAAUAAACACCCUCACCACUACAAUCUUCCUAGGAACAACAUAxxxxxxxxxxAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCAACUAAAAAUAUUCCCCCCCCCCAAACACAAAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 370.47406006]
[71.19830322 364.45803833]
[59.48964310 354.92861938]
[50.78712082 342.59295654]
[45.73651886 328.36642456]
[44.71262741 313.30474854]
[47.79142761 298.52557373]
[54.74444962 285.12564087]
[65.05573273 274.09933472]
[77.96011353 266.26480103]
[92.50000000 262.20349121]
[92.50000000 247.20350647]
[92.50000000 232.20350647]
[92.50000000 217.20350647]
[92.50000000 202.20350647]
[92.50000000 187.20350647]
[92.50000000 172.20350647]
[92.50000000 157.20350647]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[92.50000000 42.79650116]
[77.52462006 41.85448456]
[62.63793564 39.97401047]
[47.89870453 37.16250229]
[33.36509705 33.43105316]
[19.09446907 28.79439354]
[5.14313841 23.27081871]
[-8.43383217 16.88212967]
[-21.58286095 9.65354061]
[-34.25205612 1.61357725]
[-46.39141464 -7.20602846]
[-57.95302963 -16.77046967]
[-68.89127350 -27.04199982]
[-79.16297150 -37.98007965]
[-88.72759247 -49.54154587]
[-97.54739380 -61.68076706]
[-105.58755493 -74.34983826]
[-112.81634521 -87.49874878]
[-119.20524597 -101.07562256]
[-124.72904205 -115.02686310]
[-129.36592102 -129.29742432]
[-133.09759521 -143.83097839]
[-135.90933228 -158.57015991]
[-137.79003906 -173.45681763]
[-138.73229980 -188.43217468]
[-138.73237610 -203.43716431]
[-137.79028320 -218.41253662]
[-135.90972900 -233.29920959]
[-133.09814453 -248.03842163]
[-129.36662292 -262.57202148]
[-124.72988129 -276.84262085]
[-119.20623779 -290.79391479]
[-112.81748199 -304.37084961]
[-105.58882141 -317.51983643]
[-97.54878998 -330.18899536]
[-88.72911835 -342.32830811]
[-79.16461945 -353.88989258]
[-68.89303589 -364.82806396]
[-57.95489883 -375.09970093]
[-46.39338303 -384.66427612]
[-34.25411606 -393.48400879]
[-21.58500671 -401.52410889]
[-8.43605232 -408.75283813]
[5.14085150 -415.14166260]
[19.09212303 -420.66537476]
[33.36270523 -425.30218506]
[47.89627457 -429.03378296]
[62.63547516 -431.84545898]
[77.52213287 -433.72607422]
[92.49751282 -434.66824341]
[107.50248718 -434.66824341]
[122.47786713 -433.72607422]
[137.36453247 -431.84545898]
[152.10372925 -429.03378296]
[166.63729858 -425.30218506]
[180.90788269 -420.66537476]
[194.85914612 -415.14166260]
[208.43605042 -408.75283813]
[221.58500671 -401.52410889]
[234.25411987 -393.48400879]
[246.39338684 -384.66427612]
[257.95489502 -375.09970093]
[268.89303589 -364.82806396]
[279.16461182 -353.88989258]
[288.72912598 -342.32830811]
[297.54879761 -330.18899536]
[305.58880615 -317.51983643]
[312.81747437 -304.37084961]
[319.20623779 -290.79391479]
[324.72988892 -276.84262085]
[329.36660767 -262.57202148]
[333.09814453 -248.03842163]
[335.90972900 -233.29920959]
[337.79028320 -218.41253662]
[338.73236084 -203.43716431]
[338.73229980 -188.43217468]
[337.79003906 -173.45681763]
[335.90933228 -158.57015991]
[333.09759521 -143.83097839]
[329.36593628 -129.29742432]
[324.72903442 -115.02686310]
[319.20526123 -101.07562256]
[312.81634521 -87.49874878]
[305.58755493 -74.34983826]
[297.54739380 -61.68076706]
[288.72760010 -49.54154587]
[279.16296387 -37.98007965]
[268.89126587 -27.04199982]
[257.95303345 -16.77046967]
[246.39141846 -7.20602846]
[234.25205994 1.61357725]
[221.58285522 9.65354061]
[208.43383789 16.88212967]
[194.85685730 23.27081871]
[180.90553284 28.79439354]
[166.63490295 33.43105316]
[152.10128784 37.16250229]
[137.36206055 39.97401047]
[122.47537994 41.85448456]
[107.50000000 42.79650116]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[107.50000000 157.20350647]
[107.50000000 172.20350647]
[107.50000000 187.20350647]
[107.50000000 202.20350647]
[107.50000000 217.20350647]
[107.50000000 232.20350647]
[107.50000000 247.20350647]
[107.50000000 262.20349121]
[122.03988647 266.26480103]
[134.94427490 274.09933472]
[145.25555420 285.12564087]
[152.20857239 298.52557373]
[155.28736877 313.30474854]
[154.26348877 328.36642456]
[149.21287537 342.59295654]
[140.51036072 354.92861938]
[128.80169678 364.45803833]
[114.95575714 370.47406006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[24 127]
[25 126]
[26 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
