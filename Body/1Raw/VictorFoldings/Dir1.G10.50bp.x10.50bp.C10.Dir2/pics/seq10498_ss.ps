%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCUAUCCGGGGGGGGGGCCCAUUCUCCUCCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCxxxxxxxxxxACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUAAAGGAUACCCCCCCCCCACAGCUAUCC\
) } def
/len { sequence length } bind def

/coor [
[72.82485962 451.21844482]
[58.97891998 445.20242310]
[47.27025604 435.67300415]
[38.56773376 423.33734131]
[33.51713181 409.11080933]
[32.49324036 394.04913330]
[35.57203674 379.26995850]
[42.52505875 365.87002563]
[52.83634567 354.84368896]
[65.74072266 347.00918579]
[80.28060913 342.94787598]
[80.28060913 327.94787598]
[80.28060913 312.94787598]
[80.28060913 297.94787598]
[80.28060913 282.94787598]
[80.28060913 267.94787598]
[80.28060913 252.94787598]
[80.28060913 237.94787598]
[80.28060913 222.94787598]
[80.28060913 207.94787598]
[71.77160645 220.30088806]
[59.03322601 228.22134399]
[44.19052505 230.38795471]
[29.71959305 226.43927002]
[18.03450966 217.03401184]
[11.08460808 203.74119568]
[10.02928734 188.77836609]
[15.04459858 174.64166260]
[25.29387665 163.68937683]
[39.06731033 157.74862671]
[54.06718063 157.81045532]
[67.79117584 163.86453247]
[77.94982910 174.90092468]
[82.84825897 189.07708740]
[86.85599518 174.62240601]
[90.86373901 160.16770935]
[94.87147522 145.71302795]
[98.87921906 131.25833130]
[78.58329773 120.24593353]
[72.34103394 99.43713379]
[81.94759369 81.48680878]
[75.04059601 68.17165375]
[65.29294586 56.77063370]
[53.21295547 47.87828445]
[41.13296890 38.98593521]
[29.05298042 30.09358597]
[15.83800602 37.66222763]
[0.68642676 39.19504929]
[-13.77665329 34.42648697]
[-25.04541779 24.18271637]
[-31.16748619 10.23853493]
[-31.08217239 -4.99014235]
[-24.80425835 -18.86485672]
[-13.42142963 -28.98172760]
[1.09416902 -33.58794785]
[16.22762299 -31.88546371]
[29.35696983 -24.16923714]
[38.20746994 -11.77615452]
[41.24572372 3.14661074]
[37.94533157 18.01359749]
[50.02531815 26.90594673]
[62.10530853 35.79829788]
[74.18529510 44.69064713]
[68.45989227 30.82631111]
[66.44495392 15.96226025]
[68.27271271 1.07403350]
[73.82321930 -12.86124229]
[82.73218536 -24.92898178]
[94.41490173 -34.33717346]
[108.10463715 -40.46834564]
[122.90290833 -42.92010498]
[137.83850098 -41.53153992]
[151.93116760 -36.39378738]
[164.25601196 -27.84403801]
[174.00413513 -16.44342041]
[180.53576660 -2.94016647]
[183.42222595 11.77949333]
[182.47406006 26.74949646]
[177.75350952 40.98735046]
[169.57038879 53.55860901]
[158.46176147 63.63821030]
[145.15669250 70.56462860]
[130.52841187 73.88327026]
[115.53698730 73.37632751]
[101.16630554 69.07707977]
[88.35575104 61.26465607]
[95.26274872 74.57981110]
[100.98005676 74.16075134]
[106.64918518 75.01168823]
[111.99150848 77.09080505]
[116.74444580 80.29591370]
[129.35557556 72.17437744]
[141.96670532 64.05283356]
[154.57783508 55.93128967]
[167.18896484 47.80974579]
[179.80009460 39.68820572]
[182.89955139 24.19082260]
[196.09565735 15.49380493]
[211.55941772 18.75694084]
[220.11642456 32.04426956]
[216.68997192 47.47265244]
[203.31292725 55.88870621]
[187.92163086 52.29933167]
[175.31050110 60.42087555]
[162.69937134 68.54241943]
[150.08824158 76.66396332]
[137.47711182 84.78549957]
[124.86598969 92.90704346]
[128.50440979 101.90700531]
[128.66769409 112.51010895]
[143.43376160 115.14897156]
[158.19981384 117.78783417]
[168.03800964 105.99353790]
[182.46081543 100.71353912]
[197.58856201 103.36814117]
[209.35195923 113.24325562]
[214.58671570 127.68253326]
[211.88471985 142.80187988]
[201.97277832 154.53427124]
[187.51715088 159.72375488]
[172.40635681 156.97438049]
[160.70509338 147.02571106]
[155.56094360 132.55389404]
[140.79489136 129.91502380]
[126.02883911 127.27616119]
[113.33390808 135.26608276]
[109.32616425 149.72076416]
[105.31842804 164.17546082]
[101.31068420 178.63014221]
[97.30294800 193.08483887]
[95.28060913 207.94787598]
[95.28060913 222.94787598]
[95.28060913 237.94787598]
[95.28060913 252.94787598]
[95.28060913 267.94787598]
[95.28060913 282.94787598]
[95.28060913 297.94787598]
[95.28060913 312.94787598]
[95.28060913 327.94787598]
[95.28060913 342.94787598]
[109.82049561 347.00918579]
[122.72487640 354.84368896]
[133.03616333 365.87002563]
[139.98918152 379.26995850]
[143.06797791 394.04913330]
[142.04409790 409.11080933]
[136.99348450 423.33734131]
[128.29096985 435.67300415]
[116.58230591 445.20242310]
[102.73636627 451.21844482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[34 130]
[35 129]
[36 128]
[37 127]
[38 126]
[41 87]
[42 86]
[43 63]
[44 62]
[45 61]
[46 60]
[91 108]
[92 107]
[93 106]
[94 105]
[95 104]
[96 103]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
