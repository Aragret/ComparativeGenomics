%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUACCAGGGGGGGGGGCACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUxxxxxxxxxxCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCCCCCCCCCCCACCCUAACA\
) } def
/len { sequence length } bind def

/coor [
[63.89548111 373.63430786]
[50.04954147 367.61828613]
[38.34088135 358.08886719]
[29.63835716 345.75320435]
[24.58775520 331.52667236]
[23.56386375 316.46499634]
[26.64266205 301.68585205]
[33.59568405 288.28591919]
[43.90696716 277.25958252]
[56.81134796 269.42507935]
[71.35123444 265.36376953]
[71.35123444 250.36375427]
[71.35123444 235.36375427]
[71.35123444 220.36375427]
[71.35123444 205.36375427]
[71.35123444 190.36375427]
[71.35123444 175.36375427]
[71.35123444 160.36375427]
[71.35123444 145.36375427]
[71.35123444 130.36375427]
[68.07649994 110.97792816]
[74.52633667 96.09731293]
[85.68579102 89.44754791]
[95.71880341 91.18904877]
[93.85119629 76.30576324]
[91.98358154 61.42248535]
[90.11596680 46.53920364]
[88.24835205 31.65592575]
[86.38073730 16.77264595]
[75.71911621 6.22135496]
[60.81721115 4.50866556]
[45.91530991 2.79597569]
[39.16057968 16.36614227]
[28.16979980 26.80542374]
[14.27016354 32.85322571]
[-0.85988194 33.77924728]
[-15.39331055 29.47166634]
[-27.57514000 20.45064354]
[-35.93435287 7.80551243]
[-39.46154022 -6.93676615]
[-37.73076630 -21.99599075]
[-30.95104027 -35.55368423]
[-19.94104385 -45.97269440]
[-6.03028488 -51.99487305]
[9.10144234 -52.89300919]
[23.62690735 -48.55865097]
[35.79209137 -39.51519394]
[44.12799072 -26.85468102]
[47.62799835 -12.10592651]
[62.52989960 -10.39323711]
[77.43180084 -8.68054676]
[62.59439468 -10.88310242]
[51.05012894 -20.46068001]
[46.14611816 -34.63638687]
[49.30421448 -49.30016708]
[59.60876846 -60.20045090]
[74.07211304 -64.17684174]
[88.50079346 -60.07644653]
[98.71139526 -49.08811188]
[101.74350739 -34.39776611]
[96.71940613 -20.26667404]
[102.20643616 -34.22706604]
[107.69347382 -48.18745422]
[95.76760101 -39.08945084]
[81.92150879 -33.32006454]
[67.06393433 -31.25794601]
[52.16997910 -33.03843307]
[38.21715164 -38.54467010]
[26.12118912 -47.41527557]
[16.67595863 -59.06807327]
[10.50135708 -72.73826599]
[8.00263023 -87.52868652]
[9.34377098 -102.46860504]
[14.43675995 -116.57752228]
[22.94733810 -128.92944336]
[34.31695175 -138.71371460]
[47.79940033 -145.28817749]
[62.50982285 -148.22134399]
[77.48276520 -147.32070923]
[91.73552704 -142.64538574]
[104.33270264 -134.50221252]
[114.44752502 -123.42565155]
[121.41614532 -110.14263916]
[124.78120422 -95.52497101]
[124.32186127 -80.53200531]
[120.06629944 -66.14331055]
[131.15762329 -76.24195862]
[142.24893188 -86.34060669]
[153.34024048 -96.43926239]
[148.92948914 -111.05117035]
[151.30387878 -126.12847137]
[159.99200439 -138.67755127]
[173.26879883 -146.20678711]
[188.49816895 -147.22123718]
[202.65629578 -141.51948547]
[212.93209839 -130.23361206]
[217.28527832 -115.60443878]
[214.85151672 -100.53660583]
[206.11405945 -88.02183533]
[192.80770874 -80.54494476]
[177.57446289 -79.59047699]
[163.43890381 -85.34794617]
[152.34757996 -75.24929810]
[141.25627136 -65.15064240]
[130.16494751 -55.05199432]
[121.65386200 -42.70042419]
[116.16683197 -28.74003220]
[110.67979431 -14.77964306]
[125.11227417 -18.86663628]
[139.25642395 -13.87233925]
[147.92272949 -1.62916827]
[147.93148804 13.37082958]
[139.27951050 25.62412071]
[125.14120483 30.63494873]
[110.70395660 26.56482697]
[101.26402283 14.90503216]
[103.13162994 29.78831291]
[104.99924469 44.67159271]
[106.86685944 59.55487061]
[108.73447418 74.43814850]
[110.60208893 89.32143402]
[119.11317444 101.67300415]
[132.35575867 108.71813965]
[149.17898560 110.81945038]
[151.81692505 127.56691742]
[136.45420837 134.73793030]
[125.31062317 121.96072388]
[112.06803894 114.91558838]
[105.63883972 118.77763367]
[92.78044128 126.50171661]
[86.35123444 130.36375427]
[86.35123444 145.36375427]
[86.35123444 160.36375427]
[86.35123444 175.36375427]
[86.35123444 190.36375427]
[86.35123444 205.36375427]
[86.35123444 220.36375427]
[86.35123444 235.36375427]
[86.35123444 250.36375427]
[86.35123444 265.36376953]
[100.89112091 269.42507935]
[113.79550171 277.25958252]
[124.10678864 288.28591919]
[131.05981445 301.68585205]
[134.13861084 316.46499634]
[133.11471558 331.52667236]
[128.06411743 345.75320435]
[119.36159515 358.08886719]
[107.65293121 367.61828613]
[93.80699158 373.63430786]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 121]
[25 120]
[26 119]
[27 118]
[28 117]
[29 116]
[30 51]
[31 50]
[32 49]
[61 108]
[62 107]
[63 106]
[86 105]
[87 104]
[88 103]
[89 102]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
