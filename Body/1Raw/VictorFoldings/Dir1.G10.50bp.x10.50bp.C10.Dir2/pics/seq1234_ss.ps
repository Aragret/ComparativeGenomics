%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCCCCAAGGGGGGGGGGUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAxxxxxxxxxxUAGAGUGCUUAGUUGAACAGGGCCCUGAAGCGCGUACACACCGCCCGUCACCCCCCCCCCCCCUCCUCAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 383.92327881]
[71.19830322 377.90725708]
[59.48964310 368.37783813]
[50.78712082 356.04217529]
[45.73651886 341.81564331]
[44.71262741 326.75396729]
[47.79142761 311.97482300]
[54.74444962 298.57489014]
[65.05573273 287.54855347]
[77.96011353 279.71405029]
[92.50000000 275.65274048]
[92.50000000 260.65274048]
[92.50000000 245.65274048]
[92.50000000 230.65274048]
[92.50000000 215.65274048]
[92.50000000 200.65274048]
[92.50000000 185.65274048]
[92.50000000 170.65274048]
[92.50000000 155.65274048]
[92.50000000 140.65274048]
[92.50000000 125.65273285]
[75.33449554 110.29202271]
[76.49102783 87.28618622]
[65.82940674 76.73489380]
[55.16777802 66.18360138]
[44.50615311 55.63231277]
[40.12253189 54.66001129]
[36.65488052 52.52777100]
[34.36009598 49.67893982]
[33.31967926 46.59486389]
[33.44293976 43.73267365]
[23.69528961 32.33165359]
[13.94763660 20.93063164]
[4.19998503 9.52961063]
[-8.06238365 0.89049470]
[-22.07909584 -4.45101786]
[-36.36197662 1.76485538]
[-50.50082397 -3.85187125]
[-56.33868790 -17.50672150]
[-70.35540009 -22.84823418]
[-84.37211609 -28.18974686]
[-98.38883209 -33.53125763]
[-112.40554047 -38.87277222]
[-126.72351837 -32.18165970]
[-141.55047607 -37.65312576]
[-148.08984375 -52.04104614]
[-142.46191406 -66.80932617]
[-128.00566101 -73.19620514]
[-113.29770660 -67.41246033]
[-107.06402588 -52.88948441]
[-93.04731750 -47.54797363]
[-79.03060150 -42.20645905]
[-65.01389313 -36.86494827]
[-50.99717712 -31.52343369]
[-37.55237579 -37.83001328]
[-23.26134491 -32.61263275]
[-16.73758316 -18.46773148]
[-2.72087073 -13.12621784]
[-11.92736530 -24.96853447]
[-18.09450722 -38.64209747]
[-20.87718010 -53.38172913]
[-20.11966515 -68.36258698]
[-15.86435223 -82.74634552]
[-8.34937096 -95.72806549]
[2.00473619 -106.58128357]
[14.61854649 -114.69866180]
[28.78618431 -119.62593842]
[43.71482086 -121.08737946]
[58.56904221 -119.00119781]
[72.51759338 -113.48414612]
[84.77991486 -104.84495544]
[94.66978455 -93.56708527]
[101.63377380 -80.28164673]
[105.28217316 -65.73210907]
[105.41080475 -50.73265839]
[102.01248169 -36.12268066]
[95.27737427 -22.71976089]
[85.58237457 -11.27393055]
[73.47003174 -2.42570519]
[59.61815262 3.32976317]
[44.80189514 5.67039490]
[29.85039139 4.46520758]
[15.60100555 -0.21804123]
[25.34865761 11.18297958]
[35.09630966 22.58400154]
[44.84396362 33.98502350]
[55.05744171 44.97068787]
[65.71907043 55.52197647]
[76.38069153 66.07326508]
[87.04232025 76.62455750]
[93.27010345 74.13455200]
[99.92171478 73.27348328]
[106.57825470 74.09557343]
[112.82051849 76.54904938]
[118.25538635 80.47940063]
[122.54057312 85.63910675]
[125.40621948 91.70321655]
[140.39892578 91.23517609]
[148.94274902 87.82125092]
[155.70767212 90.91662598]
[170.70686340 90.76058960]
[185.70605469 90.60455322]
[200.70524597 90.44851685]
[211.72444153 79.43873596]
[226.93797302 79.49416351]
[237.36619568 90.06713104]
[252.36538696 89.91109467]
[259.27999878 76.25654602]
[271.75491333 67.38888550]
[286.92343140 65.34582520]
[301.29998779 70.59684753]
[311.58093262 81.93531036]
[315.40380859 96.75571442]
[311.89010620 111.65243530]
[301.84725952 123.20232391]
[287.58303833 128.75129700]
[272.37530518 127.02424622]
[259.71862793 118.41802216]
[252.52142334 104.91028595]
[237.52223206 105.06632233]
[227.31622314 115.85394287]
[212.10713196 116.22585297]
[200.86128235 105.44770050]
[185.86209106 105.60373688]
[170.86289978 105.75977325]
[155.86370850 105.91580963]
[140.86695862 106.22786713]
[125.87426758 106.69590759]
[119.19116211 118.60140228]
[107.50000000 125.65273285]
[107.50000000 140.65274048]
[107.50000000 155.65274048]
[107.50000000 170.65274048]
[107.50000000 185.65274048]
[107.50000000 200.65274048]
[107.50000000 215.65274048]
[107.50000000 230.65274048]
[107.50000000 245.65274048]
[107.50000000 260.65274048]
[107.50000000 275.65274048]
[122.03988647 279.71405029]
[134.94427490 287.54855347]
[145.25555420 298.57489014]
[152.20857239 311.97482300]
[155.28736877 326.75396729]
[154.26348877 341.81564331]
[149.21287537 356.04217529]
[140.51036072 368.37783813]
[128.80169678 377.90725708]
[114.95575714 383.92327881]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 90]
[24 89]
[25 88]
[26 87]
[31 86]
[32 85]
[33 84]
[34 83]
[35 58]
[36 57]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[97 128]
[98 127]
[100 126]
[101 125]
[102 124]
[103 123]
[106 120]
[107 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
