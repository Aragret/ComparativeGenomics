%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCUCUCACGGGGGGGGGGCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAxxxxxxxxxxCCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCACCCCCCCCCCUACCUCUCAC\
) } def
/len { sequence length } bind def

/coor [
[13.29722786 231.23240662]
[4.85127640 225.24389648]
[-3.18239260 218.71270752]
[-10.76896858 211.66714478]
[-17.87557983 204.13771057]
[-24.47143173 196.15704346]
[-30.52794456 187.75973511]
[-36.01887512 178.98214722]
[-40.92043304 169.86233521]
[-45.21138000 160.43980408]
[-48.87311554 150.75538635]
[-63.28533173 154.91328430]
[-77.69754791 159.07116699]
[-92.10976410 163.22904968]
[-106.47795105 167.53663635]
[-120.80054474 171.99345398]
[-135.12313843 176.45027161]
[-149.44573975 180.90708923]
[-163.76834106 185.36390686]
[-178.09094238 189.82070923]
[-192.31771851 194.57452393]
[-206.44252014 199.62329102]
[-220.56732178 204.67204285]
[-222.12353516 219.85562134]
[-230.12086487 232.85583496]
[-242.97142029 241.09147644]
[-258.12371826 242.92736816]
[-272.56927490 237.99899292]
[-283.43988037 227.28486633]
[-288.57720947 212.91229248]
[-286.96121216 197.73497009]
[-278.91275024 184.76634216]
[-266.02984619 176.58137512]
[-250.87043762 174.80516052]
[-236.44441223 179.79039001]
[-225.61607361 190.54724121]
[-211.49127197 185.49848938]
[-197.36647034 180.44972229]
[-194.52821350 176.53567505]
[-189.17362976 174.40031433]
[-182.54774475 175.49812317]
[-168.22515869 171.04130554]
[-153.90255737 166.58448792]
[-139.57995605 162.12767029]
[-125.25736237 157.67085266]
[-110.93476868 153.21403503]
[-105.44699097 148.19108582]
[-96.26765442 148.81683350]
[-81.85543823 144.65895081]
[-67.44322205 140.50106812]
[-53.03100586 136.34317017]
[-56.83271408 111.95050049]
[-56.77083588 87.26342773]
[-52.84688950 62.89012527]
[-45.15754700 39.43102264]
[-33.89223480 17.46404457]
[-19.32847404 -2.46965313]
[-1.82504559 -19.87899971]
[18.18685341 -34.33511734]
[11.00434494 -47.50370026]
[3.82183576 -60.67228317]
[-10.45126629 -68.74758911]
[-10.32380581 -85.14624023]
[4.07309628 -92.99871063]
[17.92914200 -84.22705078]
[16.99041748 -67.85478973]
[24.17292786 -54.68620682]
[31.35543633 -41.51762772]
[38.89466476 -44.93257904]
[46.60308838 -47.94622040]
[54.45936584 -50.55020905]
[62.44174576 -52.73733139]
[70.52812195 -54.50152969]
[78.69609833 -55.83792496]
[86.92307281 -56.74280930]
[95.18624878 -57.21368408]
[103.46276093 -57.24924088]
[111.72967529 -56.84938431]
[119.96411896 -56.01522064]
[128.14328003 -54.74905777]
[136.24452209 -53.05440140]
[144.24539185 -50.93594742]
[152.12374878 -48.39955902]
[159.85778809 -45.45225906]
[167.42608643 -42.10221100]
[174.80767822 -38.35868835]
[181.98213196 -34.23205948]
[188.92958069 -29.73374748]
[195.63078308 -24.87621117]
[202.06719971 -19.67289734]
[208.22099304 -14.13821697]
[214.07511902 -8.28749275]
[219.61338806 -2.13692689]
[224.82044983 4.29645061]
[229.68190002 10.99482632]
[234.18424988 17.93965340]
[238.31506348 25.11170006]
[242.06288147 32.49110794]
[245.41734314 40.05744553]
[259.54214478 35.00868988]
[273.66696167 29.95993423]
[287.79174805 24.91117668]
[295.92776489 11.08420849]
[311.83047485 8.96695614]
[323.30072021 20.18359566]
[321.53948975 36.12968063]
[307.89785767 44.57273865]
[292.84051514 39.03598022]
[278.71569824 44.08473587]
[264.59091187 49.13349152]
[250.46611023 54.18225098]
[256.87054443 88.55670929]
[255.52241516 123.49669647]
[270.23037720 126.44218445]
[284.93832397 129.38766479]
[299.03277588 121.72435760]
[313.75527954 128.09832764]
[317.81198120 143.62001038]
[308.09097290 156.38249207]
[292.04931641 156.59550476]
[281.99285889 144.09562683]
[267.28488159 141.15014648]
[252.57691956 138.20466614]
[249.73287964 148.15994263]
[246.24003601 157.90653992]
[242.11352539 167.40223694]
[237.37123108 176.60588074]
[232.03370667 185.47756958]
[226.12406921 193.97889709]
[219.66793823 202.07301331]
[212.69328308 209.72483826]
[205.23031616 216.90121460]
[197.31140137 223.57106018]
[188.97080994 229.70547485]
[180.24472046 235.27786255]
[171.17092896 240.26408386]
[161.78874207 244.64254761]
[152.13882446 248.39425659]
[142.26298523 251.50299072]
[132.20402527 253.95523071]
[122.00552368 255.74040222]
[111.71166992 256.85073853]
[101.36707306 257.28143311]
[91.01654816 257.03060913]
[80.70494843 256.09936523]
[70.47695923 254.49176025]
[60.37688828 252.21472168]
[50.44850922 249.27813721]
[40.73483658 245.69473267]
[31.27796364 241.48002625]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 51]
[12 50]
[13 49]
[14 48]
[15 46]
[16 45]
[17 44]
[18 43]
[19 42]
[20 41]
[21 38]
[22 37]
[23 36]
[59 68]
[60 67]
[61 66]
[99 111]
[100 110]
[101 109]
[102 108]
[113 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
