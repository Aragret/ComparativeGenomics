%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACACACUAGGGGGGGGGGACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGGxxxxxxxxxxCUAGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCCCCCCCCCCCAACAUACUA\
) } def
/len { sequence length } bind def

/coor [
[105.88923645 416.61157227]
[92.04329681 410.59555054]
[80.33463287 401.06613159]
[71.63211060 388.73046875]
[66.58150482 374.50393677]
[65.55761719 359.44226074]
[68.63641357 344.66308594]
[75.58943939 331.26315308]
[85.90071869 320.23684692]
[98.80509949 312.40231323]
[113.34498596 308.34100342]
[113.34498596 293.34100342]
[113.34498596 278.34100342]
[113.34498596 263.34100342]
[113.34498596 248.34100342]
[113.34498596 233.34100342]
[113.34498596 218.34100342]
[113.34498596 203.34100342]
[113.34498596 188.34100342]
[113.34498596 173.34100342]
[113.34498596 158.34100342]
[113.03293610 143.34425354]
[112.40895844 128.35723877]
[106.55914307 123.66365814]
[101.24678040 137.69145203]
[86.26395416 136.97389221]
[82.31646729 122.50263214]
[94.85951996 114.27649689]
[89.00971222 109.58291626]
[74.24365234 112.22177887]
[59.47759628 114.86064911]
[47.29510880 125.83876038]
[31.78217125 120.52079773]
[28.89716339 104.37741089]
[41.60793304 94.01554108]
[56.83873367 100.09458923]
[71.60478973 97.45572662]
[86.37084198 94.81686401]
[72.43346405 89.27163696]
[67.12712097 75.24157715]
[73.90653229 61.86100769]
[88.35792542 57.84141541]
[101.07266235 65.79977417]
[103.77285767 80.55432129]
[109.25988770 66.59393311]
[114.74691772 52.63354492]
[120.23394775 38.67315292]
[125.72098541 24.71276474]
[111.94771576 8.26481056]
[109.45309448 -12.93408203]
[118.93547058 -31.93676949]
[137.18762207 -42.58106613]
[136.56364441 -57.56808090]
[135.93966675 -72.55509949]
[135.31568909 -87.54211426]
[134.69171143 -102.52912903]
[126.38704681 -115.99549866]
[133.58821106 -129.03361511]
[120.08329773 -136.21446228]
[112.03903198 -149.10580444]
[111.53084564 -164.19248962]
[118.59513855 -177.41941833]
[131.24635315 -185.28149414]
[130.62237549 -200.26850891]
[129.99839783 -215.25552368]
[115.42395020 -219.31019592]
[102.81690216 -227.67185974]
[93.41236877 -239.52133179]
[88.13172150 -253.69772339]
[87.49228668 -268.81216431]
[91.55673218 -283.38391113]
[99.92684174 -295.98535156]
[111.78261566 -305.38192749]
[125.96253967 -310.65307617]
[141.07740784 -311.28237915]
[155.64640808 -307.20819092]
[168.24224854 -298.82962036]
[177.63088989 -286.96755981]
[182.89253235 -272.78411865]
[183.51170349 -257.66882324]
[179.42774963 -243.10255432]
[171.04074097 -230.51232910]
[159.17239380 -221.13163757]
[144.98542786 -215.87950134]
[145.60940552 -200.89248657]
[146.23338318 -185.90547180]
[159.49435425 -179.12223816]
[167.63368225 -166.52830505]
[168.38133240 -151.45158386]
[161.43649292 -137.93618774]
[148.57522583 -129.65759277]
[156.83526611 -117.26319885]
[149.67872620 -103.15310669]
[150.30270386 -88.16609192]
[150.92668152 -73.17907715]
[151.55065918 -58.19205856]
[152.17463684 -43.20504379]
[166.77587891 -37.40457153]
[177.63421631 -26.04946518]
[191.75901794 -31.09822083]
[205.88381958 -36.14697647]
[220.00862122 -41.19573593]
[228.14462280 -55.02270508]
[244.04734802 -57.13995743]
[255.51759338 -45.92331696]
[253.75637817 -29.97723007]
[240.11473083 -21.53417206]
[225.05737305 -27.07093048]
[210.93257141 -22.02217484]
[196.80776978 -16.97341919]
[182.68296814 -11.92466259]
[183.06457520 -4.99898243]
[182.14106750 1.88977766]
[179.93983459 8.49735546]
[176.53366089 14.58845806]
[172.03834534 19.94513702]
[166.60871887 24.37458420]
[160.43342590 27.71608162]
[153.72822571 29.84680748]
[146.72859192 30.68636703]
[139.68136597 30.19979668]
[134.19433594 44.16018677]
[128.70730591 58.12057495]
[123.22027588 72.08096313]
[117.73324585 86.04135895]
[127.39597321 127.73326111]
[128.01994324 142.72027588]
[131.28385925 148.59005737]
[131.07536316 154.35095215]
[128.34498596 158.34100342]
[128.34498596 173.34100342]
[128.34498596 188.34100342]
[128.34498596 203.34100342]
[128.34498596 218.34100342]
[128.34498596 233.34100342]
[128.34498596 248.34100342]
[128.34498596 263.34100342]
[128.34498596 278.34100342]
[128.34498596 293.34100342]
[128.34498596 308.34100342]
[142.88487244 312.40231323]
[155.78926086 320.23684692]
[166.10054016 331.26315308]
[173.05355835 344.66308594]
[176.13237000 359.44226074]
[175.10847473 374.50393677]
[170.05787659 388.73046875]
[161.35534668 401.06613159]
[149.64668274 410.59555054]
[135.80075073 416.61157227]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 127]
[23 126]
[29 38]
[30 37]
[31 36]
[44 125]
[45 124]
[46 123]
[47 122]
[48 121]
[52 97]
[53 96]
[54 95]
[55 94]
[56 93]
[58 91]
[63 86]
[64 85]
[65 84]
[99 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
