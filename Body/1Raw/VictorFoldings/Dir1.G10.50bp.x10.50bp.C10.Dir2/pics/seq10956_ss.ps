%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUACACAAAGGGGGGGGGGAUGACAUCAAAAAAAUCGUAGCCUUCUCCACUUCAAGUCAACUAGGACUCxxxxxxxxxxCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGAAACCGCAAACAUAUCCCCCCCCCCCAUACACAAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 394.32974243]
[71.19830322 388.31372070]
[59.48964310 378.78430176]
[50.78712082 366.44863892]
[45.73651886 352.22210693]
[44.71262741 337.16043091]
[47.79142761 322.38125610]
[54.74444962 308.98132324]
[65.05573273 297.95501709]
[77.96011353 290.12048340]
[92.50000000 286.05917358]
[92.50000000 271.05917358]
[92.50000000 256.05917358]
[92.50000000 241.05918884]
[92.50000000 226.05918884]
[92.50000000 211.05918884]
[92.50000000 196.05918884]
[92.50000000 181.05918884]
[92.50000000 166.05918884]
[92.50000000 151.05918884]
[92.50000000 136.05918884]
[92.50000000 121.05918121]
[80.32816315 112.29297638]
[66.10138702 117.04679108]
[63.71321869 132.16484070]
[54.56359482 144.43443298]
[40.75503540 151.03611755]
[25.46064568 150.45288086]
[12.19496059 142.81872559]
[4.00634003 129.88795471]
[2.77646828 114.63193512]
[8.78796196 100.55640411]
[20.65942192 90.89581299]
[35.66287613 87.87009430]
[50.35063934 92.17453766]
[61.34756851 102.82001495]
[75.57434845 98.06619263]
[80.62310791 83.94139099]
[72.63318634 71.24645996]
[65.36543274 65.60452271]
[64.61228943 58.20327377]
[50.44381332 63.26747131]
[35.56432343 65.46936035]
[20.54597855 64.72618103]
[5.96588945 61.06834793]
[-7.61603165 54.63827133]
[-19.67858315 45.68477631]
[-29.75927353 34.55348587]
[-37.47204971 21.67346382]
[-42.52209473 7.54070759]
[-44.71707535 -7.30098248]
[-43.97448349 -22.28091049]
[-40.32473373 -36.82343674]
[-33.90991211 -50.37009048]
[-24.97826195 -62.40103149]
[-13.87455654 -72.45497894]
[-21.59864235 -85.31338501]
[-29.32272720 -98.17178345]
[-37.04681015 -111.03018951]
[-52.43993759 -114.61170197]
[-60.72096252 -128.07275391]
[-56.97690201 -143.42715454]
[-43.42904282 -151.56539917]
[-28.11508751 -147.65922546]
[-20.12053299 -134.02607727]
[-24.18840981 -118.75427246]
[-16.46432495 -105.89586639]
[-8.74023914 -93.03746796]
[-1.01615417 -80.17906189]
[13.07500267 -85.25975037]
[27.89136696 -87.49432373]
[42.86376953 -86.79504395]
[57.41667557 -83.18692017]
[70.99031830 -76.80680084]
[83.06221008 -67.89820099]
[93.16728210 -56.80201340]
[100.91575623 -43.94343948]
[106.00824738 -29.81571770]
[108.24725342 -14.96118736]
[107.54487610 0.04951233]
[103.92623901 14.63937855]
[97.52860260 28.24721718]
[88.59615326 40.34923553]
[77.47069550 50.47919083]
[85.32811737 63.25654602]
[93.31803131 75.95147705]
[106.69722748 79.34781647]
[114.44126129 88.49746704]
[128.34381104 82.86550903]
[142.24636841 77.23355103]
[156.14892578 71.60159302]
[170.05148315 65.96964264]
[183.95404053 60.33768082]
[182.25901794 45.33670044]
[184.67520142 30.43486786]
[191.02330017 16.73799896]
[200.83224487 5.26249313]
[213.37413025 -3.14009142]
[227.71829224 -7.84622669]
[242.80027771 -8.50668621]
[257.50091553 -5.07245970]
[270.72930908 2.20161057]
[281.50384521 12.77574062]
[289.02493286 25.86525917]
[292.73452759 40.49883652]
[292.35729980 55.59056473]
[287.92126465 70.02053833]
[279.75558472 82.71795654]
[268.46624756 92.74058533]
[254.89094543 99.34468079]
[240.03709412 102.04017639]
[225.00694275 100.62704468]
[210.91581726 95.21015167]
[198.80937195 86.19146729]
[189.58599854 74.24024200]
[175.68344116 79.87219238]
[161.78088379 85.50415039]
[147.87832642 91.13610840]
[133.97576904 96.76806641]
[120.07321167 102.40002441]
[134.70204163 99.08380127]
[148.66656494 104.56032562]
[157.14100647 116.93707275]
[157.19685364 131.93696594]
[148.81478882 144.37646484]
[134.89143372 149.95681763]
[120.23832703 146.74960327]
[109.91915131 135.86315918]
[107.50000000 121.05918121]
[107.50000000 136.05918884]
[107.50000000 151.05918884]
[107.50000000 166.05918884]
[107.50000000 181.05918884]
[107.50000000 196.05918884]
[107.50000000 211.05918884]
[107.50000000 226.05918884]
[107.50000000 241.05918884]
[107.50000000 256.05917358]
[107.50000000 271.05917358]
[107.50000000 286.05917358]
[122.03988647 290.12048340]
[134.94427490 297.95501709]
[145.25555420 308.98132324]
[152.20857239 322.38125610]
[155.28736877 337.16043091]
[154.26348877 352.22210693]
[149.21287537 366.44863892]
[140.51036072 378.78430176]
[128.80169678 388.31372070]
[114.95575714 394.32974243]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 37]
[24 36]
[38 86]
[39 85]
[41 84]
[56 69]
[57 68]
[58 67]
[59 66]
[88 120]
[89 119]
[90 118]
[91 117]
[92 116]
[93 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
