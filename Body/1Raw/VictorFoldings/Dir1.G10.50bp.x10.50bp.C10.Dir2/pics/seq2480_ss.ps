%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUCACCCUGGGGGGGGGGAUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAxxxxxxxxxxCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUAACAUGACCCCCCCCCCCUAACACCCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 359.44293213]
[71.19830322 353.42691040]
[59.48964310 343.89749146]
[50.78712082 331.56182861]
[45.73651886 317.33529663]
[44.71262741 302.27362061]
[47.79142761 287.49447632]
[54.74444962 274.09454346]
[65.05573273 263.06820679]
[77.96011353 255.23370361]
[92.50000000 251.17239380]
[92.50000000 236.17239380]
[92.50000000 221.17239380]
[92.50000000 206.17239380]
[92.50000000 191.17239380]
[92.50000000 176.17239380]
[92.50000000 161.17239380]
[92.50000000 146.17239380]
[92.50000000 131.17239380]
[92.50000000 116.17238617]
[82.92588806 110.95568085]
[77.25356293 100.10027313]
[63.72937012 106.58843994]
[50.20518112 113.07659912]
[43.54893875 127.67365265]
[27.95203018 131.43078613]
[15.37906837 121.46583557]
[15.47495365 105.42306519]
[28.16613197 95.60912323]
[43.71701431 99.55241394]
[57.24120712 93.06424713]
[70.76539612 86.57608032]
[80.03034210 74.77944183]
[83.12866974 60.10291672]
[86.22698975 45.42639160]
[89.32530975 30.74986458]
[92.42362976 16.07333946]
[95.52194977 1.39681399]
[98.62027740 -13.27971172]
[101.71859741 -27.95623779]
[87.31510925 -32.17076492]
[73.27650452 -37.47550583]
[59.68516541 -43.83933640]
[46.62085724 -51.22490311]
[34.16024780 -59.58887100]
[22.37645721 -68.88214874]
[11.33864307 -79.05020905]
[1.11157835 -90.03337097]
[-8.24472046 -101.76718903]
[-16.67534447 -114.18279266]
[-24.13082123 -127.20733643]
[-30.56739616 -140.76437378]
[-35.94729614 -154.77435303]
[-40.23895264 -169.15504456]
[-43.41717529 -183.82206726]
[-45.46331787 -198.68934631]
[-46.36537170 -213.66964722]
[-46.11804199 -228.67501831]
[-44.72277832 -243.61744690]
[-42.18777084 -258.40921021]
[-38.52789688 -272.96353149]
[-33.76462936 -287.19497681]
[-27.92593002 -301.02005005]
[-21.04605675 -314.35757446]
[-13.16538429 -327.12933350]
[-4.33016205 -339.26034546]
[5.40776110 -350.67944336]
[15.99123955 -361.31961060]
[27.35816383 -371.11834717]
[39.44182587 -380.01824951]
[52.17131805 -387.96701050]
[65.47193146 -394.91799927]
[79.26561737 -400.83044434]
[93.47142029 -405.66964722]
[108.00598145 -409.40719604]
[122.78400421 -412.02114868]
[137.71876526 -413.49618530]
[152.72261047 -413.82363892]
[167.70750427 -413.00161743]
[182.58551025 -411.03488159]
[197.26928711 -407.93502808]
[211.67269897 -403.72024536]
[225.71121216 -398.41522217]
[239.30242920 -392.05114746]
[252.36659241 -384.66531372]
[264.82705688 -376.30111694]
[276.61065674 -367.00759888]
[287.64828491 -356.83935547]
[297.87512207 -345.85598755]
[307.23120117 -334.12200928]
[315.66159058 -321.70623779]
[323.11682129 -308.68154907]
[329.55316162 -295.12438965]
[334.93276978 -281.11431885]
[339.22415161 -266.73352051]
[342.40209961 -252.06645203]
[344.44796753 -237.19912720]
[345.34973145 -222.21882629]
[345.10211182 -207.21343994]
[343.70657349 -192.27104187]
[341.17129517 -177.47932434]
[337.51113892 -162.92507935]
[332.74761963 -148.69372559]
[326.90863037 -134.86877441]
[320.02850342 -121.53135681]
[312.14761353 -108.75975037]
[303.31216431 -96.62889862]
[293.57400513 -85.20999146]
[282.99032593 -74.57004547]
[271.62322998 -64.77149963]
[259.53939819 -55.87184906]
[246.80975342 -47.92332840]
[233.50900269 -40.97257996]
[219.71520996 -35.06039429]
[205.50930786 -30.22146797]
[190.97467041 -26.48419952]
[176.19659424 -23.87051773]
[161.26181030 -22.39576149]
[146.25796509 -22.06858635]
[131.27308655 -22.89091301]
[116.39511871 -24.85791588]
[113.29679871 -10.18138981]
[110.19847870 4.49513578]
[107.10015869 19.17166138]
[104.00183868 33.84818649]
[100.90351105 48.52471161]
[97.80519104 63.20123672]
[94.70687103 77.87776184]
[114.32349396 84.49738312]
[119.23091125 103.02117920]
[107.50000000 116.17238617]
[107.50000000 131.17239380]
[107.50000000 146.17239380]
[107.50000000 161.17239380]
[107.50000000 176.17239380]
[107.50000000 191.17239380]
[107.50000000 206.17239380]
[107.50000000 221.17239380]
[107.50000000 236.17239380]
[107.50000000 251.17239380]
[122.03988647 255.23370361]
[134.94427490 263.06820679]
[145.25555420 274.09454346]
[152.20857239 287.49447632]
[155.28736877 302.27362061]
[154.26348877 317.33529663]
[149.21287537 331.56182861]
[140.51036072 343.89749146]
[128.80169678 353.42691040]
[114.95575714 359.44293213]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 32]
[23 31]
[24 30]
[33 128]
[34 127]
[35 126]
[36 125]
[37 124]
[38 123]
[39 122]
[40 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
