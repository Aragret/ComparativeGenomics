%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUAAAACUGGGGGGGGGGUUACAGUCAGAGGUUCAAUUCCUCUUCUUAACAACAUACCCAUGGCCAACxxxxxxxxxxUACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCUCCCCCCCCCCACCUAAAACU\
) } def
/len { sequence length } bind def

/coor [
[84.94629669 352.00524902]
[71.10035706 345.98922729]
[59.39169693 336.45980835]
[50.68917084 324.12414551]
[45.63856888 309.89761353]
[44.61467743 294.83593750]
[47.69347763 280.05676270]
[54.64649963 266.65682983]
[64.95778656 255.63050842]
[77.86216736 247.79600525]
[92.40205383 243.73468018]
[92.40205383 228.73468018]
[92.40205383 213.73468018]
[92.40205383 198.73468018]
[92.40205383 183.73468018]
[92.40205383 168.73468018]
[92.40205383 153.73468018]
[92.40205383 138.73468018]
[92.40205383 123.73468781]
[92.40205383 108.73468781]
[82.12973785 119.66535950]
[67.42523193 122.62805176]
[53.72155762 116.52810669]
[46.08195114 103.61933136]
[47.32909012 88.67127228]
[57.00218582 77.20692444]
[71.52722168 73.46214294]
[85.53748322 78.82055664]
[93.85621643 91.30148315]
[96.34133911 76.50877380]
[98.82645416 61.71606827]
[101.31157684 46.92335892]
[103.79669189 32.13065338]
[89.19747925 28.66191673]
[74.86254883 24.22580147]
[60.85593414 18.84212112]
[47.24018860 12.53492069]
[34.07612610 5.33237028]
[21.42254257 -2.73336172]
[9.33594704 -11.62625122]
[-2.12967539 -21.30658150]
[-12.92311573 -31.73111534]
[-22.99616814 -42.85329437]
[-32.30384445 -54.62344360]
[-40.80456924 -66.98899841]
[-48.46038437 -79.89472198]
[-55.23708725 -93.28298950]
[-61.10441971 -107.09398651]
[-66.03617096 -121.26603699]
[-70.01032257 -135.73585510]
[-73.00910950 -150.43879700]
[-75.01914978 -165.30920410]
[-76.03146362 -180.28065491]
[-76.04153442 -195.28628540]
[-75.04930878 -210.25909424]
[-73.05922699 -225.13218689]
[-70.08016968 -239.83914185]
[-66.12544250 -254.31427002]
[-61.21271133 -268.49291992]
[-55.36391830 -282.31179810]
[-48.60518265 -295.70913696]
[-40.96669769 -308.62512207]
[-32.48257065 -321.00207520]
[-23.19069862 -332.78469849]
[-13.13257980 -343.92037964]
[-2.35313725 -354.35940552]
[9.09948444 -364.05508423]
[21.17413521 -372.96420288]
[33.81688690 -381.04690552]
[46.97127151 -388.26712036]
[60.57854080 -394.59259033]
[74.57791901 -399.99505615]
[88.90688324 -404.45040894]
[103.50142670 -407.93872070]
[118.29637909 -410.44442749]
[133.22566223 -411.95635986]
[148.22257996 -412.46774292]
[163.22016907 -411.97631836]
[178.15144348 -410.48422241]
[192.94972229 -407.99816895]
[207.54888916 -404.52926636]
[221.88375854 -400.09295654]
[235.89030457 -394.70910645]
[249.50598145 -388.40173340]
[262.66995239 -381.19900513]
[275.32342529 -373.13311768]
[287.40991211 -364.24008179]
[298.87542725 -354.55960083]
[309.66873169 -344.13494873]
[319.74163818 -333.01263428]
[329.04916382 -321.24237061]
[337.54974365 -308.87670898]
[345.20538330 -295.97088623]
[351.98193359 -282.58251953]
[357.84909058 -268.77145386]
[362.78067017 -254.59934998]
[366.75460815 -240.12948608]
[369.75323486 -225.42649841]
[371.76309204 -210.55607605]
[372.77520752 -195.58460999]
[372.78509521 -180.57896423]
[371.79266357 -165.60618591]
[369.80239868 -150.73310852]
[366.82315063 -136.02619934]
[362.86825562 -121.55111694]
[357.95535278 -107.37252045]
[352.10638428 -93.55373383]
[345.34747314 -80.15647888]
[337.70883179 -67.24058533]
[329.22454834 -54.86373901]
[319.93252563 -43.08122635]
[309.87426758 -31.94566727]
[299.09469604 -21.50679398]
[287.64193726 -11.81123161]
[275.56719971 -2.90228295]
[262.92434692 5.18026257]
[249.76985168 12.40030575]
[236.16250610 18.72559929]
[222.16307068 24.12789536]
[207.83404541 28.58306313]
[193.23945618 32.07120514]
[178.44447327 34.57674026]
[163.51516724 36.08848190]
[148.51823425 36.59967804]
[133.52066040 36.10803986]
[118.58940125 34.61577225]
[116.10427856 49.40847778]
[113.61916351 64.20118713]
[111.13404846 78.99389648]
[108.64892578 93.78659821]
[107.40205383 108.73468781]
[107.40205383 123.73468781]
[107.40205383 138.73468018]
[107.40205383 153.73468018]
[107.40205383 168.73468018]
[107.40205383 183.73468018]
[107.40205383 198.73468018]
[107.40205383 213.73468018]
[107.40205383 228.73468018]
[107.40205383 243.73468018]
[121.94194031 247.79600525]
[134.84631348 255.63050842]
[145.15760803 266.65682983]
[152.11062622 280.05676270]
[155.18942261 294.83593750]
[154.16552734 309.89761353]
[149.11492920 324.12414551]
[140.41241455 336.45980835]
[128.70375061 345.98922729]
[114.85780334 352.00524902]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 130]
[30 129]
[31 128]
[32 127]
[33 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
