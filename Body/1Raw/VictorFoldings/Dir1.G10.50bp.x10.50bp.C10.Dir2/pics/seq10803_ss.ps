%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUCCUACACGGGGGGGGGGUCCAACUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGxxxxxxxxxxUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGAAACCGCAAACACCCCCCCCCCUAUCAUACAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 402.93838501]
[71.19830322 396.92236328]
[59.48964310 387.39294434]
[50.78712082 375.05728149]
[45.73651886 360.83074951]
[44.71262741 345.76907349]
[47.79142761 330.98992920]
[54.74444962 317.58999634]
[65.05573273 306.56365967]
[77.96011353 298.72915649]
[92.50000000 294.66784668]
[92.50000000 279.66784668]
[92.50000000 264.66784668]
[92.50000000 249.66783142]
[92.50000000 234.66783142]
[92.50000000 219.66783142]
[92.50000000 204.66783142]
[92.50000000 189.66783142]
[92.50000000 174.66783142]
[92.50000000 159.66783142]
[92.50000000 144.66783142]
[82.27169037 141.67939758]
[73.02464294 136.38400269]
[65.27069092 129.07473755]
[59.43901443 120.15618134]
[55.85239410 110.12197876]
[54.70935822 99.52751923]
[56.07316971 88.95921326]
[59.86834335 79.00201416]
[65.88481140 70.20706177]
[56.37645340 58.60572052]
[46.86809540 47.00437927]
[37.35973358 35.40303802]
[24.70072556 43.48300171]
[11.17490864 50.00899887]
[-3.02783585 54.88940811]
[-17.70812225 58.05572128]
[-32.65986252 59.46348572]
[-47.67316055 59.09294128]
[-62.53724670 56.94928741]
[-77.04345703 53.06261826]
[-90.98815155 47.48749542]
[-104.17555237 40.30218506]
[-116.42054749 31.60756111]
[-127.55122375 21.52567863]
[-137.41133118 10.19807434]
[-145.86244202 -2.21623230]
[-152.78593445 -15.54296303]
[-158.08459473 -29.59502983]
[-161.68403625 -44.17516708]
[-163.53373718 -59.07868958]
[-163.60772705 -74.09637451]
[-161.90496826 -89.01739502]
[-158.44937134 -103.63229370]
[-153.28942871 -117.73589325]
[-146.49760437 -131.13018799]
[-138.16921997 -143.62716675]
[-128.42120361 -155.05139160]
[-117.39041138 -165.24246216]
[-105.23168945 -174.05731201]
[-92.11572266 -181.37222290]
[-78.22664642 -187.08447266]
[-63.75943375 -191.11389160]
[-48.91719055 -193.40391541]
[-33.90827560 -193.92237854]
[-18.94338989 -192.66200256]
[-4.23261547 -189.64050293]
[10.01752853 -184.90026855]
[23.60699463 -178.50787354]
[36.34500504 -170.55303955]
[48.05274200 -161.14744568]
[58.56584549 -150.42311096]
[67.73672485 -138.53062439]
[75.43663788 -125.63692474]
[81.55749512 -111.92300415]
[86.01335907 -97.58139801]
[88.74167633 -82.81343842]
[89.70416260 -67.82644653]
[88.88728333 -52.83081055]
[86.30252075 -38.03705215]
[81.98616028 -23.65284538]
[75.99878693 -9.88012695]
[68.42446899 3.08775640]
[59.36952209 15.06875610]
[48.96107483 25.89467812]
[58.46943665 37.49601746]
[67.97779083 49.09735870]
[77.48615265 60.69869995]
[101.56891632 54.73407745]
[125.18092346 62.35180664]
[141.23721313 81.26613617]
[155.73280334 77.40898132]
[170.22840881 73.55181885]
[184.72399902 69.69465637]
[199.21960449 65.83750153]
[213.71519470 61.98033905]
[213.90109253 46.88504410]
[218.15386963 32.39999771]
[226.15794373 19.60009766]
[237.31933594 9.43517303]
[250.80982971 2.65953279]
[265.62832642 -0.22402652]
[280.67517090 0.99847448]
[294.83383179 6.23631811]
[307.05361938 15.10082150]
[316.42773438 26.93417931]
[322.26058960 40.85828018]
[324.11932373 55.83985901]
[321.86599731 70.76718903]
[315.66781616 84.53255463]
[305.98477173 96.11447906]
[293.53536987 104.65351105]
[279.24346924 109.51599121]
[264.16958618 110.34109497]
[249.43232727 107.06759644]
[236.12528992 99.93840027]
[225.23594666 89.48255157]
[217.57235718 76.47593689]
[203.07676697 80.33309937]
[188.58116150 84.19025421]
[174.08557129 88.04741669]
[159.58996582 91.90457153]
[145.09437561 95.76173401]
[144.96569824 105.43610382]
[142.78520203 114.86241913]
[138.65238953 123.61054993]
[132.75582886 131.28131104]
[125.36460114 137.52468872]
[116.81596375 142.05578613]
[107.50000000 144.66783142]
[107.50000000 159.66783142]
[107.50000000 174.66783142]
[107.50000000 189.66783142]
[107.50000000 204.66783142]
[107.50000000 219.66783142]
[107.50000000 234.66783142]
[107.50000000 249.66783142]
[107.50000000 264.66784668]
[107.50000000 279.66784668]
[107.50000000 294.66784668]
[122.03988647 298.72915649]
[134.94427490 306.56365967]
[145.25555420 317.58999634]
[152.20857239 330.98992920]
[155.28736877 345.76907349]
[154.26348877 360.83074951]
[149.21287537 375.05728149]
[140.51036072 387.39294434]
[128.80169678 396.92236328]
[114.95575714 402.93838501]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[30 88]
[31 87]
[32 86]
[33 85]
[91 123]
[92 122]
[93 121]
[94 120]
[95 119]
[96 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
