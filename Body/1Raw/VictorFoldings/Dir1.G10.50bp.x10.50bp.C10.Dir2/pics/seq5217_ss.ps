%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCAAACCGGGGGGGGGGCAGCUACGCAAAAUCUUAGCAUACUCCUCAAUUACCCACAUAGGAUGAAUxxxxxxxxxxCCACAACCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCACCCCCCCCCCAAACCAUACC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 360.86578369]
[71.19830322 354.84976196]
[59.48964310 345.32034302]
[50.78712082 332.98468018]
[45.73651886 318.75814819]
[44.71262741 303.69647217]
[47.79142761 288.91729736]
[54.74444962 275.51739502]
[65.05573273 264.49105835]
[77.96011353 256.65652466]
[92.50000000 252.59523010]
[92.50000000 237.59523010]
[92.50000000 222.59523010]
[92.50000000 207.59523010]
[92.50000000 192.59523010]
[92.50000000 177.59523010]
[92.50000000 162.59523010]
[92.50000000 147.59523010]
[92.50000000 132.59523010]
[92.50000000 117.59522247]
[81.40966797 108.18117523]
[79.72657013 92.85765076]
[89.55204010 79.87136841]
[106.46868134 77.03095245]
[103.67635345 62.29314423]
[100.88403320 47.55533600]
[97.32926941 32.98263550]
[93.02168274 18.61445045]
[87.52556610 11.23579597]
[88.77729034 3.90239048]
[84.76955414 -10.55229759]
[73.62636566 -21.78350449]
[77.68187714 -36.11536026]
[73.67414093 -50.57004929]
[69.66639709 -65.02473450]
[65.65865326 -79.47942352]
[61.65091705 -93.93411255]
[46.28931046 -102.23823547]
[41.74431992 -118.74965668]
[50.34732437 -133.16653442]
[46.03973770 -147.53471375]
[41.73215485 -161.90290833]
[34.08156586 -160.09138489]
[25.13290024 -161.86523438]
[16.54040527 -167.78196716]
[5.24140072 -177.64768982]
[-6.05760431 -187.51341248]
[-17.35660934 -197.37913513]
[-31.15499115 -190.93518066]
[-46.38154984 -190.66714478]
[-60.39818573 -196.62144470]
[-70.77643585 -207.76647949]
[-75.71820831 -222.17129517]
[-74.36730957 -237.34017944]
[-66.95778656 -250.64501953]
[-54.77338791 -259.78067017]
[-39.92513275 -263.16436768]
[-24.98557281 -260.20980835]
[-12.54307652 -251.42889404]
[-4.75338030 -238.34300232]
[-2.96609783 -223.21932983]
[-7.49088573 -208.67814636]
[3.80811882 -198.81242371]
[15.10712337 -188.94670105]
[26.40612793 -179.08097839]
[40.58268738 -183.98252869]
[43.37501144 -198.72033691]
[29.61167336 -204.85769653]
[17.63506889 -214.00415039]
[8.09108162 -225.66644287]
[1.49440539 -239.21563721]
[-1.79920900 -253.92103577]
[-1.61214101 -268.98959351]
[2.04552126 -283.60870361]
[8.97652435 -296.98995972]
[18.80708885 -308.41171265]
[31.00706291 -317.25805664]
[44.91851807 -323.05184937]
[59.79122925 -325.48068237]
[74.82312775 -324.41354370]
[89.20355988 -319.90802002]
[102.15701294 -312.20706177]
[112.98491669 -301.72595215]
[121.10334778 -289.02999878]
[126.07447052 -274.80380249]
[127.63021851 -259.81457520]
[125.68667603 -244.87071228]
[120.34866333 -230.77807617]
[111.90406036 -218.29667664]
[100.80825806 -208.09962463]
[87.65964508 -200.73683167]
[73.16731262 -196.60534668]
[58.11281586 -195.92800903]
[55.32049179 -181.19020081]
[56.10033798 -166.21047974]
[60.40792084 -151.84230042]
[64.71550751 -137.47412109]
[76.83495331 -132.98905945]
[84.25234985 -122.16979218]
[84.06080627 -108.85846710]
[76.10560608 -97.94185638]
[80.11334229 -83.48716736]
[84.12108612 -69.03247833]
[88.12882233 -54.57778931]
[92.13656616 -40.12310028]
[102.99308777 -29.92579079]
[99.22424316 -14.56003857]
[103.23197937 -0.10534973]
[107.38986969 14.30686665]
[111.69744873 28.67505074]
[121.29049683 17.14363480]
[136.29017639 17.24084854]
[145.73295593 28.89563560]
[142.71690369 43.58929062]
[129.44653320 50.58193970]
[115.62183380 44.76301193]
[118.41416168 59.50082016]
[121.20648193 74.23862457]
[130.34822083 86.13100433]
[143.87240601 92.61917114]
[157.39660645 99.10733795]
[172.94747925 95.16403961]
[185.63865662 104.97798920]
[185.73454285 121.02075958]
[173.16159058 130.98570251]
[157.56468201 127.22857666]
[150.90843201 112.63152313]
[137.38424683 106.14335632]
[123.86005402 99.65519714]
[118.01825714 111.72039032]
[107.50000000 117.59522247]
[107.50000000 132.59523010]
[107.50000000 147.59523010]
[107.50000000 162.59523010]
[107.50000000 177.59523010]
[107.50000000 192.59523010]
[107.50000000 207.59523010]
[107.50000000 222.59523010]
[107.50000000 237.59523010]
[107.50000000 252.59523010]
[122.03988647 256.65652466]
[134.94427490 264.49105835]
[145.25555420 275.51739502]
[152.20857239 288.91729736]
[155.28736877 303.69647217]
[154.26348877 318.75814819]
[149.21287537 332.98468018]
[140.51036072 345.32034302]
[128.80169678 354.84976196]
[114.95575714 360.86578369]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 118]
[25 117]
[26 116]
[27 110]
[28 109]
[30 108]
[31 107]
[33 105]
[34 104]
[35 103]
[36 102]
[37 101]
[40 97]
[41 96]
[42 95]
[45 65]
[46 64]
[47 63]
[48 62]
[66 94]
[67 93]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
