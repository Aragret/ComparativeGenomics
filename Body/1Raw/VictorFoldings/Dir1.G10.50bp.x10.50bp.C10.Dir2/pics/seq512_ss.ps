%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCCCCCAGGGGGGGGGGACUAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUxxxxxxxxxxCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACCCCCCCCCCCUCACCCACCA\
) } def
/len { sequence length } bind def

/coor [
[-12.81882000 316.99307251]
[-28.77874374 307.91851807]
[-44.01296997 297.67230225]
[-58.43564987 286.31216431]
[-71.96550751 273.90209961]
[-84.52629089 260.51208496]
[-96.04723358 246.21751404]
[-106.46340179 231.09898376]
[-115.71609497 215.24166870]
[-123.75318146 198.73495483]
[-137.65574646 204.36691284]
[-147.54116821 216.71958923]
[-162.24235535 214.32701111]
[-176.14491272 219.95896912]
[-190.04747009 225.59092712]
[-203.95002747 231.22286987]
[-217.85258484 236.85482788]
[-231.75514221 242.48678589]
[-245.65769958 248.11874390]
[-259.56024170 253.75070190]
[-273.46279907 259.38265991]
[-273.54641724 274.58337402]
[-279.44531250 288.59304810]
[-290.25997925 299.27536011]
[-304.34124756 305.00128174]
[-319.54183960 304.89767456]
[-333.54376221 298.98034668]
[-344.21182251 288.15164185]
[-349.91921997 274.06283569]
[-349.79562378 258.86242676]
[-343.85986328 244.86830139]
[-333.01715088 234.21449280]
[-318.92086792 228.52563477]
[-303.72058105 228.66921997]
[-289.73428345 234.62336731]
[-279.09475708 245.48010254]
[-265.19219971 239.84814453]
[-251.28965759 234.21618652]
[-237.38710022 228.58422852]
[-223.48454285 222.95227051]
[-209.58198547 217.32032776]
[-195.67942810 211.68836975]
[-181.77687073 206.05641174]
[-167.87431335 200.42445374]
[-158.98329163 188.47460938]
[-143.28770447 190.46435547]
[-129.38514709 184.83239746]
[-133.63731384 172.30273438]
[-137.20562744 159.56146240]
[-140.07966614 146.64582825]
[-142.25099182 133.59368896]
[-143.71325684 120.44320679]
[-144.46218872 107.23289490]
[-144.49559021 94.00141144]
[-143.81336975 80.78748322]
[-142.41751099 67.62979126]
[-140.31210327 54.56684875]
[-137.50331116 41.63688278]
[-133.99935913 28.87774467]
[-129.81051636 16.32677841]
[-124.94900513 4.02071905]
[-119.42909241 -8.00441265]
[-113.26691437 -19.71341896]
[-106.48051453 -31.07203102]
[-99.08975220 -42.04700089]
[-91.11626434 -52.60620117]
[-82.58338928 -62.71873474]
[-73.51609802 -72.35499573]
[-63.94092941 -81.48677826]
[-53.88591385 -90.08735657]
[-43.38048553 -98.13156128]
[-32.45538330 -105.59584045]
[-21.14259338 -112.45835114]
[-9.47522354 -118.69900513]
[2.51257634 -124.29953766]
[14.78571796 -129.24354553]
[27.30827713 -133.51657104]
[40.04360199 -137.10610962]
[52.95441818 -140.00164795]
[66.00293732 -142.19471741]
[79.15095520 -143.67887878]
[92.36000824 -144.44981384]
[105.59141541 -144.50524902]
[118.80645752 -143.84503174]
[131.96646118 -142.47108459]
[145.03289795 -140.38743591]
[157.96751404 -137.60017395]
[170.73246765 -134.11747742]
[183.29039001 -129.94953918]
[195.60453796 -125.10853577]
[207.63883972 -119.60865021]
[219.35809326 -113.46598053]
[230.72799683 -106.69850159]
[241.71525574 -99.32602692]
[252.28771973 -91.37014008]
[262.41445923 -82.85411072]
[272.06579590 -73.80287933]
[281.21350098 -64.24293518]
[289.83081055 -54.20225906]
[297.89251709 -43.71023941]
[305.37496948 -32.79758453]
[312.25631714 -21.49623871]
[318.51638794 -9.83927631]
[324.13687134 2.13917971]
[329.10131836 14.40407085]
[333.39520264 26.91949654]
[337.00595093 39.64882660]
[339.92297363 52.55480194]
[342.13775635 65.59964752]
[343.64382935 78.74517822]
[344.43673706 91.95292664]
[344.51422119 105.18422699]
[343.87600708 118.40035248]
[342.52398682 131.56262207]
[340.46209717 144.63250732]
[337.69638062 157.57174683]
[334.23495483 170.34249878]
[330.08792114 182.90733337]
[325.26742554 195.22952271]
[319.78759766 207.27297974]
[313.66445923 219.00244141]
[306.91592407 230.38359070]
[319.35534668 238.76573181]
[331.79479980 247.14787292]
[344.23425293 255.53001404]
[360.62255859 256.12600708]
[368.06045532 270.74139404]
[358.89645386 284.34115601]
[342.55767822 282.93499756]
[335.85211182 267.96945190]
[323.41265869 259.58731079]
[310.97320557 251.20516968]
[298.53378296 242.82302856]
[287.26046753 257.31369019]
[274.93191528 270.91784668]
[261.61755371 283.55883789]
[247.39245605 295.16543579]
[232.33676147 305.67221069]
[216.53532410 315.01998901]
[200.07717896 323.15609741]
[183.05506897 330.03463745]
[165.56492615 335.61688232]
[147.70532227 339.87139893]
[129.57687378 342.77413940]
[111.28175354 344.30883789]
[92.92305756 344.46676636]
[74.60424805 343.24707031]
[56.42854691 340.65661621]
[38.49838257 336.71002197]
[20.91479111 331.42950439]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 47]
[11 46]
[13 44]
[14 43]
[15 42]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[21 36]
[122 133]
[123 132]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
