%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCUACUACGGGGGGGGGGUCAACUUAAACUCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACxxxxxxxxxxGGGCCCAUAACACUUGGGGGUAGCUAAAGUGAACUGUAUCCGACAUCUGGCCCCCCCCCCUUCCUACUUC\
) } def
/len { sequence length } bind def

/coor [
[134.91055298 570.95898438]
[121.06461334 564.94293213]
[109.35595703 555.41351318]
[100.65342712 543.07788086]
[95.60282898 528.85131836]
[94.57893372 513.78967285]
[97.65773773 499.01049805]
[104.61075592 485.61056519]
[114.92204285 474.58422852]
[127.82642365 466.74972534]
[142.36630249 462.68841553]
[142.36630249 447.68841553]
[142.36630249 432.68841553]
[142.36630249 417.68841553]
[142.36630249 402.68841553]
[142.36630249 387.68841553]
[142.36630249 372.68841553]
[142.36630249 357.68841553]
[142.36630249 342.68841553]
[142.36630249 327.68841553]
[142.36630249 312.68841553]
[142.36630249 297.68841553]
[142.36630249 282.68841553]
[139.86505127 278.47720337]
[138.38232422 273.76501465]
[138.01524353 268.79672241]
[138.80245972 263.83502197]
[140.72103882 259.14672852]
[143.68675232 254.98835754]
[147.55752563 251.59211731]
[144.15455627 236.98323059]
[140.75157166 222.37432861]
[128.00846863 214.74879456]
[124.34925842 199.98178101]
[132.43402100 186.66734314]
[129.03105164 172.05844116]
[125.62807465 157.44955444]
[122.07331085 142.87684631]
[118.36714935 128.34191895]
[114.66098785 113.80697632]
[92.57096100 131.36138916]
[57.53368759 112.68235779]
[44.75633240 104.82492828]
[31.97897339 96.96750641]
[19.43887711 105.60844421]
[4.46715117 108.39543915]
[-10.34226036 104.84561920]
[-22.42353821 95.57402039]
[-29.68352890 82.18699646]
[-30.86439514 67.00392914]
[-25.76154137 52.65538025]
[-15.25907230 41.62732697]
[-1.17660236 35.83043671]
[14.04599571 36.26906204]
[27.77131462 42.86720657]
[37.62136078 54.48170090]
[41.88955307 69.10026550]
[39.83639908 84.19014740]
[52.61375809 92.04756927]
[65.39111328 99.90499878]
[71.73857880 95.91004181]
[84.43350983 87.92012024]
[90.78097534 83.92516327]
[89.22338867 69.00625610]
[87.66580963 54.08734131]
[73.01247406 50.13206863]
[60.77976990 41.14733505]
[52.62207031 28.34825897]
[49.64263916 13.46580696]
[52.24441528 -1.48729312]
[60.07553101 -14.48875523]
[72.07689667 -23.78023911]
[86.62541962 -28.10514832]
[101.75354004 -26.87857437]
[115.41529846 -20.26639938]
[125.76305389 -9.16286850]
[131.39735413 4.93035936]
[131.55621338 20.10728836]
[126.21814728 34.31536484]
[116.10507965 45.63306427]
[102.58472443 52.52975845]
[104.14230347 67.44866943]
[105.69988251 82.36758423]
[120.15457153 86.37532806]
[129.17210388 74.38848877]
[138.18963623 62.40166092]
[147.20716858 50.41482544]
[143.50111389 35.22274780]
[150.47372437 21.22571564]
[164.83270264 15.03270149]
[179.79821777 19.56785774]
[188.30398560 32.68981934]
[186.33384705 48.20280075]
[174.81805420 58.78204727]
[159.19400024 59.43235779]
[150.17646790 71.41918945]
[141.15893555 83.40602112]
[132.14140320 95.39285278]
[129.19592285 110.10081482]
[132.90208435 124.63574982]
[136.60824585 139.17068481]
[141.79266357 146.77159119]
[140.23696899 154.04656982]
[143.63993835 168.65547180]
[147.04292297 183.26435852]
[160.17912292 191.63560486]
[163.42211914 206.49957275]
[155.36045837 218.97135925]
[158.76344299 233.58024597]
[162.16642761 248.18914795]
[172.71771240 258.85076904]
[187.29042053 262.40551758]
[193.83491516 260.89657593]
[199.31227112 262.69378662]
[202.38912964 266.42318726]
[216.80134583 270.58105469]
[231.21356201 274.73895264]
[245.89624023 268.27377319]
[260.03796387 275.84948730]
[262.79040527 291.65466309]
[252.04212952 303.56491089]
[236.03829956 302.44372559]
[227.05567932 289.15115356]
[212.64346313 284.99328613]
[198.23124695 280.83538818]
[183.73565674 276.97824097]
[169.16294861 273.42346191]
[157.36630249 282.68841553]
[157.36630249 297.68841553]
[157.36630249 312.68841553]
[157.36630249 327.68841553]
[157.36630249 342.68841553]
[157.36630249 357.68841553]
[157.36630249 372.68841553]
[157.36630249 387.68841553]
[157.36630249 402.68841553]
[157.36630249 417.68841553]
[157.36630249 432.68841553]
[157.36630249 447.68841553]
[157.36630249 462.68841553]
[171.90618896 466.74972534]
[184.81057739 474.58422852]
[195.12185669 485.61056519]
[202.07489014 499.01049805]
[205.15368652 513.78967285]
[204.12979126 528.85131836]
[199.07919312 543.07788086]
[190.37666321 555.41351318]
[178.66799927 564.94293213]
[164.82206726 570.95898438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[30 110]
[31 109]
[32 108]
[35 105]
[36 104]
[37 103]
[38 101]
[39 100]
[40 99]
[42 60]
[43 59]
[44 58]
[63 83]
[64 82]
[65 81]
[84 98]
[85 97]
[86 96]
[87 95]
[111 127]
[112 126]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
