%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUUAAAGGGGGGGGGGGGUUCGUUUGUUCAACGAUUAAAGUCCUACGUGAUCUGAGUUCAGACCGGAGxxxxxxxxxxACAAGAACUGCUAACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACCCCCCCCCCCUUUUAAAGG\
) } def
/len { sequence length } bind def

/coor [
[51.69831848 477.66094971]
[37.85237885 471.64492798]
[26.14371681 462.11550903]
[17.44119263 449.77984619]
[12.39059067 435.55331421]
[11.36669922 420.49163818]
[14.44549847 405.71246338]
[21.39851952 392.31256104]
[31.70980453 381.28622437]
[44.61418533 373.45172119]
[59.15407181 369.39038086]
[59.15407181 354.39038086]
[59.15407181 339.39038086]
[59.15407181 324.39038086]
[59.15407181 309.39038086]
[59.15407181 294.39038086]
[59.15407181 279.39038086]
[59.15407181 264.39038086]
[59.15407181 249.39039612]
[59.15407181 234.39039612]
[59.15407181 219.39039612]
[46.80250168 210.87930298]
[32.78578568 216.22080994]
[18.76907349 221.56233215]
[4.75236082 226.90383911]
[-9.26435184 232.24534607]
[-17.11093712 246.23858643]
[-32.96617889 248.68621826]
[-44.66728973 237.71063232]
[-43.23818207 221.73135376]
[-29.77514267 213.00633240]
[-14.60586452 218.22863770]
[-0.58915174 212.88713074]
[13.42756081 207.54560852]
[27.44427490 202.20410156]
[41.46098709 196.86259460]
[42.55899048 175.73828125]
[55.45121765 160.40809631]
[73.88868713 156.21270752]
[77.89643097 141.75801086]
[81.90416718 127.30332947]
[85.91191101 112.84864044]
[79.42374420 99.32444763]
[65.64136505 93.40448761]
[51.05743408 99.49420166]
[36.47091675 93.41069031]
[30.53573418 78.76319885]
[36.77312088 64.24181366]
[51.48254776 58.46182251]
[65.93717194 64.85239410]
[71.56132507 79.62210846]
[85.34370422 85.54206848]
[91.69116974 81.54711151]
[104.38610077 73.55719757]
[110.73356628 69.56223297]
[111.35754395 54.57522202]
[111.98152161 39.58820343]
[112.60549927 24.60118866]
[113.22947693 9.61417198]
[113.85345459 -5.37284422]
[114.16551208 -20.36959839]
[114.16551208 -35.36959839]
[114.16551208 -50.36959839]
[99.52629089 -53.96915054]
[86.17422485 -60.96812439]
[74.88556671 -70.95960999]
[66.31663513 -83.36270905]
[60.96561813 -97.45632172]
[59.14361191 -112.42107391]
[60.95654678 -127.38692474]
[66.29901886 -141.48377991]
[74.86042786 -153.89207458]
[86.14302063 -163.89039612]
[99.49084473 -170.89746094]
[114.12787628 -174.50588989]
[129.20314026 -174.50588989]
[143.84016418 -170.89746094]
[157.18798828 -163.89039612]
[168.47059631 -153.89207458]
[177.03199768 -141.48377991]
[182.37446594 -127.38692474]
[184.18740845 -112.42107391]
[182.36540222 -97.45632172]
[177.01437378 -83.36270905]
[168.44544983 -70.95960999]
[157.15679932 -60.96812439]
[143.80471802 -53.96915054]
[129.16551208 -50.36959839]
[129.16551208 -35.36959839]
[129.16551208 -20.36959839]
[131.89588928 -16.37953949]
[132.10438538 -10.61865044]
[128.84046936 -4.74886656]
[128.21649170 10.23814964]
[127.59251404 25.22516632]
[126.96853638 40.21218109]
[126.34455872 55.19919586]
[125.72058105 70.18621063]
[130.99623108 75.51702881]
[137.87553406 62.18754196]
[152.67843628 64.61112976]
[154.94779968 79.43847656]
[141.54751587 86.17864990]
[146.82316589 91.50946808]
[161.81585693 91.04142761]
[176.80854797 90.57337952]
[191.80125427 90.10533905]
[206.79394531 89.63729858]
[221.78663635 89.16925812]
[232.42379761 77.48051453]
[248.21429443 76.82039642]
[259.78991699 87.58052826]
[260.28305054 103.37712097]
[249.40113831 114.83833313]
[233.60020447 115.16443634]
[222.25468445 104.16194916]
[207.26199341 104.62999725]
[192.26928711 105.09803772]
[177.27659607 105.56607819]
[162.28390503 106.03411865]
[147.29119873 106.50215912]
[100.36660004 116.85638428]
[96.35885620 131.31106567]
[92.35111237 145.76576233]
[88.34337616 160.22044373]
[99.69031525 170.25192261]
[104.71056366 185.12005615]
[101.55690765 201.05122375]
[90.53346252 213.71281433]
[74.15407562 219.39039612]
[74.15407562 234.39039612]
[74.15407562 249.39039612]
[74.15407562 264.39038086]
[74.15407562 279.39038086]
[74.15407562 294.39038086]
[74.15407562 309.39038086]
[74.15407562 324.39038086]
[74.15407562 339.39038086]
[74.15407562 354.39038086]
[74.15407562 369.39038086]
[88.69396210 373.45172119]
[101.59834290 381.28622437]
[111.90962219 392.31256104]
[118.86264801 405.71246338]
[121.94144440 420.49163818]
[120.91755676 435.55331421]
[115.86695099 449.77984619]
[107.16442871 462.11550903]
[95.45576477 471.64492798]
[81.60982513 477.66094971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[39 125]
[40 124]
[41 123]
[42 122]
[43 52]
[44 51]
[55 98]
[56 97]
[57 96]
[58 95]
[59 94]
[60 93]
[61 90]
[62 89]
[63 88]
[104 121]
[105 120]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
