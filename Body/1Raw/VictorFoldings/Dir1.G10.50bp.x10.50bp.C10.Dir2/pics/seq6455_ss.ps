%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGACUCUUGGGGGGGGGGACCUCCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGxxxxxxxxxxUGGCUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUACCCCCCCCCCUCUGCCUCUU\
) } def
/len { sequence length } bind def

/coor [
[93.38374329 377.33023071]
[79.53780365 371.31420898]
[67.82914734 361.78479004]
[59.12661743 349.44912720]
[54.07601929 335.22259521]
[53.05212784 320.16091919]
[56.13092422 305.38174438]
[63.08394623 291.98184204]
[73.39523315 280.95550537]
[86.29961395 273.12100220]
[100.83950043 269.05966187]
[100.83950043 254.05967712]
[100.83950043 239.05967712]
[100.83950043 224.05967712]
[100.83950043 209.05967712]
[100.83950043 194.05967712]
[100.83950043 179.05967712]
[100.83950043 164.05967712]
[100.83950043 149.05967712]
[100.83950043 134.05967712]
[96.92370605 148.53953552]
[87.41609955 160.14149475]
[73.98793030 166.82612610]
[58.99962997 167.41841125]
[45.08585358 161.81422424]
[34.69239044 150.99868774]
[29.64621544 136.87295532]
[30.83435249 121.92008972]
[38.04794693 108.76850891]
[50.01898575 99.73001862]
[64.64466095 96.39340973]
[50.74210739 90.76145172]
[36.83955002 85.12949371]
[22.93699455 79.49753571]
[13.74229908 79.16672516]
[8.80576992 73.60108948]
[-4.97661114 67.68112946]
[-18.75899315 61.76116562]
[-32.06398773 69.52539062]
[-47.21255112 67.98446655]
[-58.41651917 57.93781662]
[-61.51909637 43.39436340]
[-75.30147552 37.47440338]
[-88.56689453 45.52475739]
[-104.02790833 44.20686722]
[-115.73942566 34.02748489]
[-119.19815063 18.90078926]
[-113.07411194 4.64330626]
[-99.72214508 -3.26267266]
[-84.27634430 -1.77713656]
[-72.67593384 8.52869511]
[-69.38151550 23.69202042]
[-55.59913254 29.61198425]
[-42.91535568 21.84926224]
[-27.91526413 23.05807686]
[-16.36821175 32.98374939]
[-12.83902931 47.97878265]
[0.94335175 53.89874649]
[14.72573280 59.81871033]
[28.56895065 65.59497833]
[42.47150803 71.22693634]
[56.37406158 76.85889435]
[70.27661896 82.49085236]
[82.44845581 73.72464752]
[81.51282501 58.75385284]
[80.57720184 43.78306198]
[79.64157104 28.81226921]
[65.35532379 23.53752327]
[54.45414734 12.90341377]
[48.82674408 -1.24763680]
[49.44808960 -16.46387291]
[56.21054077 -30.10898781]
[67.94245148 -39.81888580]
[82.61120605 -43.91126633]
[97.67534637 -41.67710114]
[110.52492523 -33.50347137]
[118.93367767 -20.80650711]
[121.44472504 -5.78603745]
[117.62302399 8.95555305]
[108.13069916 20.86419296]
[94.61236572 27.87664032]
[95.54798889 42.84743118]
[96.48361969 57.81822205]
[97.41925049 72.78901672]
[111.43595886 78.13053131]
[122.09758759 67.57923889]
[132.75921631 57.02794647]
[143.42083740 46.47665787]
[138.40606689 32.06087494]
[140.15121460 16.89785385]
[148.30978394 3.99822259]
[161.26188660 -4.07678699]
[176.43586731 -5.72387600]
[190.81893921 -0.61601371]
[201.55531311 10.23262978]
[206.51327515 24.66804886]
[204.70843506 39.82408142]
[196.49913025 52.69148254]
[183.51531982 60.71542358]
[168.33496094 62.30274582]
[153.97212219 57.13828278]
[143.31050110 67.68957520]
[132.64888000 78.24086761]
[121.98725128 88.79215240]
[128.61575317 102.24812317]
[143.47879028 100.22578430]
[158.34184265 98.20345306]
[173.20489502 96.18111420]
[188.08422852 88.05451202]
[200.01225281 100.10269165]
[191.73692322 114.89983368]
[175.22721863 111.04416656]
[160.36418152 113.06649780]
[145.50112915 115.08882904]
[130.63807678 117.11116791]
[144.65119934 122.46212769]
[158.66430664 127.81308746]
[173.66410828 127.73751831]
[187.40905762 133.74389648]
[197.54325867 144.80273438]
[202.32972717 159.01856995]
[200.94807434 173.95478821]
[193.63510132 187.05137634]
[181.64425659 196.06356812]
[167.03074646 199.44668579]
[152.29933167 196.62088013]
[139.97494507 188.07046509]
[132.16998291 175.26100159]
[130.22225952 160.38714600]
[123.03088379 147.22341919]
[115.83950043 134.05967712]
[115.83950043 149.05967712]
[115.83950043 164.05967712]
[115.83950043 179.05967712]
[115.83950043 194.05967712]
[115.83950043 209.05967712]
[115.83950043 224.05967712]
[115.83950043 239.05967712]
[115.83950043 254.05967712]
[115.83950043 269.05966187]
[130.37937927 273.12100220]
[143.28376770 280.95550537]
[153.59504700 291.98184204]
[160.54808044 305.38174438]
[163.62687683 320.16091919]
[162.60298157 335.22259521]
[157.55238342 349.44912720]
[148.84985352 361.78479004]
[137.14118958 371.31420898]
[123.29525757 377.33023071]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[31 63]
[32 62]
[33 61]
[34 60]
[36 59]
[37 58]
[38 57]
[42 53]
[43 52]
[64 84]
[65 83]
[66 82]
[67 81]
[85 104]
[86 103]
[87 102]
[88 101]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
