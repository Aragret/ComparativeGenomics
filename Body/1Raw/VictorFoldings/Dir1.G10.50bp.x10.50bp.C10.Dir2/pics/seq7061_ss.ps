%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAUAGGAGGGGGGGGGGGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCAAACCxxxxxxxxxxUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCUACUUCCCCUCCCCCCCCCCAUCAUAGAAG\
) } def
/len { sequence length } bind def

/coor [
[161.07229614 468.27679443]
[154.93620300 454.44915771]
[153.37541199 439.40194702]
[156.54284668 424.60928345]
[164.12818909 411.52044678]
[175.38832092 401.41772461]
[189.22006226 395.29089355]
[187.66247559 380.37197876]
[183.81492615 374.00473022]
[186.23100281 365.12695312]
[184.98413086 350.17889404]
[183.73725891 335.23080444]
[182.49037170 320.28271484]
[181.24349976 305.33462524]
[179.99662781 290.38653564]
[178.74975586 275.43844604]
[177.34744263 260.50415039]
[175.78987122 245.58522034]
[174.23228455 230.66632080]
[172.67471313 215.74740601]
[167.18766785 201.78701782]
[158.17015076 189.80018616]
[149.15261841 177.81333923]
[135.31832886 172.29412842]
[133.20515442 156.61468506]
[124.18761444 144.62783813]
[115.17008972 132.64100647]
[98.46937561 135.96142578]
[82.11120605 131.23393250]
[69.75642395 119.51648712]
[64.16994476 103.43138885]
[49.26804352 101.71869659]
[34.36614227 100.00601196]
[19.46423721 98.29331970]
[11.35858917 111.22627258]
[-1.56031942 119.35427856]
[-16.72743034 121.06352997]
[-31.13129997 116.01464081]
[-41.91203308 105.21008301]
[-46.92910385 90.79509735]
[-45.18637085 75.63179779]
[-37.02985764 62.73086548]
[-24.07904053 54.65379333]
[-8.90531635 53.00428772]
[5.47855997 58.10985565]
[16.21666145 68.95678711]
[21.17692757 83.39141846]
[36.07883072 85.10411072]
[50.98073196 86.81679535]
[65.88263702 88.52948761]
[67.71107483 84.09426117]
[70.11309814 79.94158173]
[59.67328262 69.17076874]
[49.23347092 58.39996338]
[33.27936172 56.71295166]
[24.77292252 43.11074448]
[30.23956108 28.02779388]
[45.48574066 23.03444672]
[58.81589890 31.96117401]
[60.00428009 47.96015167]
[70.44409180 58.73096085]
[80.88390350 69.50177002]
[87.18251038 66.36550903]
[93.97092438 64.51454163]
[94.59490204 49.52753067]
[95.21887970 34.54051208]
[80.91038513 29.69863319]
[68.54640198 21.02058601]
[59.12920761 9.20986271]
[53.42222214 -4.77609348]
[51.88808060 -19.80350494]
[54.65114594 -34.65416718]
[61.48743820 -48.12419891]
[71.84275818 -59.12165070]
[84.87765503 -66.75500488]
[99.53544617 -70.40546417]
[114.62789154 -69.77709961]
[128.93150330 -64.92084503]
[141.28677368 -56.23038483]
[150.69209290 -44.41020584]
[156.38502502 -30.41852379]
[157.90406799 -15.38957882]
[155.12608337 -0.54170072]
[148.27627563 12.92145920]
[137.90989685 23.90850258]
[124.86734772 31.52875900]
[110.20589447 35.16448975]
[109.58191681 50.15150833]
[108.95793915 65.13851929]
[124.80533600 73.91815948]
[134.36849976 89.30542755]
[135.22465515 107.40208435]
[127.15692139 123.62348175]
[136.17445374 135.61032104]
[145.19198608 147.59715271]
[159.67126465 153.97375488]
[161.13945007 168.79582214]
[170.15698242 180.78265381]
[179.17451477 192.76948547]
[184.07356262 189.43676758]
[190.48220825 187.69612122]
[197.84831238 188.09931946]
[212.84748840 188.25535583]
[227.84667969 188.41139221]
[242.84587097 188.56742859]
[257.84506226 188.72346497]
[272.84423828 188.87950134]
[287.84423828 188.87950134]
[302.84344482 188.72346497]
[317.84262085 188.56742859]
[332.84182739 188.41139221]
[348.61718750 182.20060730]
[358.95230103 195.64016724]
[348.89901733 209.29182434]
[332.99786377 203.41058350]
[317.99865723 203.56661987]
[302.99948120 203.72265625]
[288.00027466 203.87869263]
[281.30120850 207.11413574]
[272.68820190 203.87869263]
[257.68902588 203.72265625]
[242.68983459 203.56661987]
[227.69064331 203.41058350]
[212.69145203 203.25454712]
[197.69227600 203.09851074]
[187.59361267 214.18981934]
[189.15119934 229.10873413]
[190.70878601 244.02764893]
[192.26635742 258.94656372]
[196.29283142 267.21936035]
[193.69784546 274.19155884]
[194.94471741 289.13964844]
[196.19158936 304.08773804]
[197.43846130 319.03582764]
[198.68533325 333.98391724]
[199.93222046 348.93200684]
[201.17909241 363.88009644]
[202.58139038 378.81439209]
[204.13897705 393.73330688]
[218.93795776 396.87100220]
[232.04202271 404.43002319]
[242.16735840 415.66983032]
[248.32197571 429.48922729]
[249.90292358 444.53433228]
[246.75531006 459.33123779]
[239.18751526 472.43020630]
[227.94094849 482.54800415]
[214.11743164 488.69338989]
[199.07124329 490.26425171]
[184.27647400 487.10671997]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 139]
[8 138]
[10 137]
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 129]
[18 128]
[19 127]
[20 126]
[21 99]
[22 98]
[23 97]
[25 95]
[26 94]
[27 93]
[31 50]
[32 49]
[33 48]
[34 47]
[52 62]
[53 61]
[54 60]
[64 89]
[65 88]
[66 87]
[102 125]
[103 124]
[104 123]
[105 122]
[106 121]
[107 120]
[108 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
