%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUACCAUCAGGGGGGGGGGCCCUCUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAxxxxxxxxxxCUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAAGUCACCCUAGCCAUCAUCCCCCCCCCCUCUACUAUCA\
) } def
/len { sequence length } bind def

/coor [
[103.33715820 464.01126099]
[90.77893066 455.66009521]
[80.69271088 444.44766235]
[73.71251678 431.07873535]
[70.27713013 416.39373779]
[70.60250854 401.31579590]
[74.66819763 386.79266357]
[82.21861267 373.73733521]
[92.77914429 362.97042847]
[105.68593597 355.16879272]
[120.12767029 350.82284546]
[119.50369263 335.83584595]
[118.87971497 320.84881592]
[118.25573730 305.86178589]
[117.63175964 290.87478638]
[117.00778198 275.88775635]
[116.38380432 260.90075684]
[115.75982666 245.91374207]
[114.35752106 230.97943115]
[112.18068695 216.13821411]
[110.00384521 201.29701233]
[93.78679657 196.75567627]
[81.12356567 185.57009888]
[74.57247925 169.93608093]
[75.48485565 152.95442200]
[83.72655487 138.01586914]
[97.69515991 128.12416077]
[94.90283966 113.38635254]
[85.92642975 102.66647339]
[90.35935211 89.40597534]
[87.56703186 74.66816711]
[84.77470398 59.93036270]
[69.35078430 59.82336044]
[54.24558258 56.72521591]
[40.03340149 50.75556183]
[27.25424957 42.14316940]
[16.39330292 31.21719170]
[7.86248636 18.39457130]
[1.98485708 4.16414213]
[-1.01763511 -10.93201733]
[-1.03252566 -26.31922340]
[1.93895268 -41.41207123]
[7.78198528 -55.63670349]
[16.27260971 -68.45262909]
[27.08630371 -79.37326050]
[39.81037903 -87.98439026]
[53.95974731 -93.95990753]
[50.86142731 -108.63642883]
[47.76310349 -123.31295776]
[44.18248749 -127.28771973]
[42.68034744 -131.79283142]
[43.10371780 -135.93075562]
[44.95956039 -139.00050354]
[42.78272247 -153.84170532]
[28.57457542 -163.99383545]
[26.12074852 -180.94267273]
[36.45181656 -194.17622375]
[33.96669769 -208.96893311]
[31.48158073 -223.76164246]
[28.99646187 -238.55435181]
[13.97551060 -239.98033142]
[-0.16420233 -245.24635315]
[-12.45860863 -253.99334717]
[-22.06945419 -265.62493896]
[-28.34145737 -279.34808350]
[-30.84698105 -294.22708130]
[-29.41519547 -309.24746704]
[-24.14372063 -323.38516235]
[-15.39197540 -335.67617798]
[-3.75666857 -345.28253174]
[9.96888542 -351.54925537]
[24.84885597 -354.04901123]
[39.86870193 -352.61145020]
[54.00434494 -347.33450317]
[66.29199219 -338.57800293]
[75.89385223 -326.93899536]
[82.15525818 -313.21102905]
[84.64929199 -298.33007812]
[83.20590210 -283.31079102]
[77.92351532 -269.17718506]
[69.16227722 -256.89294434]
[57.51955795 -247.29556274]
[43.78916931 -241.03945923]
[46.27428818 -226.24674988]
[48.75940704 -211.45405579]
[51.24452591 -196.66134644]
[62.71124268 -190.70222473]
[68.72383881 -179.04362488]
[66.87642670 -165.85972595]
[57.62392807 -156.01853943]
[59.80076599 -141.17733765]
[62.43962860 -126.41127777]
[65.53794861 -111.73475647]
[68.63627625 -97.05822754]
[83.23896027 -97.36920929]
[97.65196228 -94.97725677]
[111.37914276 -89.96316528]
[123.94770813 -82.49800110]
[134.92445374 -72.83728790]
[143.93072510 -61.31226730]
[150.65547180 -48.31850052]
[154.86595154 -34.30233765]
[156.41586304 -19.74556160]
[155.25035095 -5.14883375]
[151.40798950 8.98553085]
[145.01953125 22.17084312]
[136.30335999 33.95280075]
[125.55814362 43.92513657]
[113.15252686 51.74364471]
[99.51251221 57.13803864]
[102.30484009 71.87584686]
[105.09716034 86.61364746]
[114.07357025 97.33352661]
[109.64064789 110.59402466]
[112.43296814 125.33183289]
[125.47596741 127.84570312]
[136.85057068 134.64331055]
[145.20233154 144.88972473]
[149.54544067 157.34091187]
[149.37908936 170.49472046]
[144.74514771 182.77214050]
[136.22042847 192.70681763]
[124.84505463 199.12017822]
[127.02188873 213.96138000]
[129.19873047 228.80259705]
[140.36367798 218.78541565]
[155.19046021 221.05839539]
[162.84190369 233.96015930]
[157.72540283 248.06056213]
[143.58073425 253.05335999]
[130.74684143 245.28976440]
[131.37081909 260.27676392]
[131.99479675 275.26379395]
[132.61877441 290.25079346]
[133.24275208 305.23782349]
[133.86672974 320.22482300]
[134.49070740 335.21185303]
[135.11468506 350.19888306]
[149.86769104 353.32931519]
[163.37832642 360.03106689]
[174.79730225 369.88284302]
[183.40681458 382.26538086]
[188.66566467 396.40029907]
[190.24327087 411.39901733]
[188.04046631 426.31875610]
[182.19572449 440.22161865]
[173.07643127 452.23367310]
[161.25585938 461.59982300]
[147.47705078 467.73132324]
[132.60615540 470.24273682]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 125]
[20 124]
[21 123]
[27 115]
[28 114]
[30 112]
[31 111]
[32 110]
[47 94]
[48 93]
[49 92]
[53 91]
[54 90]
[57 86]
[58 85]
[59 84]
[60 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
