%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGACUAACCCCUAUGGGGGGGGGGACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAxxxxxxxxxxUCUUCGAAUUUGCAAUUCAAUAUGAAAAUCACCUCGGAGCUGGUAAAAAGCCCCCCCCCCAGGCCUAACCCCUGU\
) } def
/len { sequence length } bind def

/coor [
[82.11737061 473.51864624]
[67.68049622 469.27920532]
[54.30696106 462.38391113]
[42.48021317 453.08203125]
[32.62778091 441.70986938]
[25.10582352 428.67849731]
[20.18625450 414.45901489]
[18.04691505 399.56539917]
[18.76513863 384.53607178]
[22.31496429 369.91433716]
[28.56806564 356.22872925]
[37.29839706 343.97402954]
[48.19036865 333.59320068]
[60.85023117 325.46151733]
[74.82035065 319.87292480]
[89.59570312 317.02947998]
[89.59570312 302.02947998]
[89.59570312 287.02947998]
[89.59570312 272.02947998]
[89.59570312 257.02947998]
[89.59570312 242.02946472]
[89.59570312 227.02946472]
[89.59570312 212.02946472]
[89.59570312 197.02946472]
[89.59570312 182.02946472]
[86.87559509 178.04803467]
[86.66224670 172.30522156]
[89.89980316 166.44708252]
[90.48504639 151.45849609]
[91.07028961 136.46992493]
[72.35844421 125.41140747]
[62.90931702 105.83749390]
[65.88932037 84.30744171]
[80.29984283 68.03597260]
[75.13899231 53.95174026]
[69.97814178 39.86750793]
[64.81729126 25.78327560]
[52.80432510 15.48768806]
[55.69034958 0.87536091]
[50.52949905 -13.20887184]
[45.36864853 -27.29310608]
[40.20779800 -41.37733841]
[37.19737244 -26.68253136]
[29.41956139 -13.85655785]
[17.78075027 -4.39409971]
[3.63728237 0.60212797]
[-11.36262703 0.54988623]
[-25.47095108 -4.54473686]
[-37.04356766 -14.08803558]
[-44.73185349 -26.96787453]
[-47.63984680 -41.68329620]
[-45.42866516 -56.51942062]
[-38.35599136 -69.74732208]
[-27.24604034 -79.82546234]
[-13.39351940 -85.57939148]
[1.58725643 -86.33856201]
[15.95049381 -82.01451111]
[28.02236176 -73.11114502]
[36.39504242 -60.66828537]
[35.80980301 -75.65686035]
[35.22455978 -90.64543915]
[34.63932037 -105.63401794]
[34.05407715 -120.62259674]
[33.46883774 -135.61117554]
[29.70447731 -150.13114929]
[22.93376923 -163.51612854]
[8.91793823 -172.03015137]
[9.55384445 -188.41696167]
[24.18732071 -195.81921387]
[37.76470184 -186.62211609]
[36.31874084 -170.28683472]
[43.08945084 -156.90185547]
[43.97147369 -171.87590027]
[48.63338089 -186.13307190]
[56.76849747 -198.73544312]
[67.84165192 -208.85400391]
[81.12441254 -215.82308960]
[95.74298096 -219.18426514]
[110.73568726 -218.71640015]
[125.11623383 -214.45028687]
[137.93862915 -206.66656494]
[148.35932922 -195.87727356]
[155.69285583 -182.79219055]
[159.45674133 -168.27209473]
[159.40341187 -153.27218628]
[155.53634644 -138.77923584]
[148.10995483 -125.74662781]
[137.61277771 -115.03172302]
[124.73535919 -107.33938599]
[110.32482910 -103.17565155]
[95.32917786 -102.81443024]
[80.73488617 -106.27947998]
[67.50202179 -113.34285736]
[56.50110626 -123.53990936]
[48.45741272 -136.19642639]
[49.04265594 -121.20783997]
[49.62789917 -106.21926117]
[50.21313858 -91.23068237]
[50.79838181 -76.24210358]
[51.38362122 -61.25352478]
[54.29203033 -46.53818893]
[59.45288086 -32.45395660]
[64.61373138 -18.36972237]
[69.77458191 -4.28548956]
[81.41841888 5.00269794]
[78.90152740 20.62242508]
[84.06237793 34.70665741]
[89.22322845 48.79088974]
[94.38407898 62.87512207]
[102.87862396 62.56327438]
[111.22562408 64.17012024]
[118.99729919 67.61331177]
[125.79532623 72.71637726]
[131.27130127 79.21778107]
[135.14456177 86.78430939]
[137.21661377 95.02816010]
[152.18164062 96.05179596]
[167.14666748 97.07543182]
[176.99913025 85.08758545]
[192.02467346 81.21293640]
[206.44564819 86.94136810]
[214.71691895 100.07018280]
[213.65798950 115.55108643]
[203.67605591 127.43135071]
[188.60937500 131.14277649]
[174.25138855 125.25823212]
[166.12303162 112.04046631]
[151.15800476 111.01683044]
[136.19297791 109.99319458]
[131.92668152 119.76061249]
[125.08768463 127.93569183]
[116.22708130 133.85966492]
[106.05886841 137.05516052]
[105.47362518 152.04374695]
[104.88838196 167.03231812]
[104.59570312 182.02946472]
[104.59570312 197.02946472]
[104.59570312 212.02946472]
[104.59570312 227.02946472]
[104.59570312 242.02946472]
[104.59570312 257.02947998]
[104.59570312 272.02947998]
[104.59570312 287.02947998]
[104.59570312 302.02947998]
[104.59570312 317.02947998]
[119.37106323 319.87292480]
[133.34118652 325.46151733]
[146.00105286 333.59320068]
[156.89302063 343.97402954]
[165.62335205 356.22872925]
[171.87644958 369.91433716]
[175.42626953 384.53607178]
[176.14450073 399.56539917]
[174.00515747 414.45901489]
[169.08558655 428.67849731]
[161.56362915 441.70986938]
[151.71119690 453.08203125]
[139.88444519 462.38391113]
[126.51091766 469.27920532]
[112.07404327 473.51864624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 145]
[17 144]
[18 143]
[19 142]
[20 141]
[21 140]
[22 139]
[23 138]
[24 137]
[25 136]
[28 135]
[29 134]
[30 133]
[34 109]
[35 108]
[36 107]
[37 106]
[39 104]
[40 103]
[41 102]
[42 101]
[59 100]
[60 99]
[61 98]
[62 97]
[63 96]
[64 95]
[65 72]
[66 71]
[116 129]
[117 128]
[118 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
