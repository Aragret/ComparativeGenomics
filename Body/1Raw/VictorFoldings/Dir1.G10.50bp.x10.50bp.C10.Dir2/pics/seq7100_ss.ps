%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACACCCUAGACGGGGGGGGGGCAAACCUACGCCAAAAUCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUCUxxxxxxxxxxUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACCCCCCCCCCCAACACCCUAGGC\
) } def
/len { sequence length } bind def

/coor [
[88.59922028 392.27664185]
[74.32745361 387.46719360]
[61.42346954 379.70181274]
[50.49081421 369.34365845]
[42.04082870 356.87722778]
[36.46873093 342.88562012]
[34.03514099 328.02319336]
[34.85388184 312.98510742]
[38.88666153 298.47473145]
[45.94485474 285.17074585]
[55.69833755 273.69540405]
[67.69092560 264.58541870]
[81.36170197 258.26687622]
[96.07125854 255.03530884]
[96.07125854 240.03530884]
[96.07125854 225.03530884]
[96.07125854 210.03530884]
[96.07125854 195.03530884]
[96.07125854 180.03530884]
[96.07125854 165.03530884]
[96.07125854 150.03530884]
[96.07125854 135.03530884]
[96.07125854 120.03531647]
[92.42357635 134.58503723]
[80.63284302 143.85749817]
[65.63327789 143.97232056]
[53.70196915 134.88145447]
[49.83197021 120.38928223]
[55.64281082 106.56053925]
[68.70275116 99.18233490]
[83.54754639 101.34289551]
[69.67503357 95.63732910]
[55.80252838 89.93175507]
[41.93001938 84.22618866]
[28.05751228 78.52061462]
[13.45291615 75.09925079]
[-1.51031148 74.04957581]
[-16.47353935 72.99990082]
[-29.47807503 82.39466858]
[-44.89206314 77.94623566]
[-50.89120865 63.06706238]
[-42.87348557 49.17117691]
[-26.98939896 46.91831207]
[-15.42386532 58.03667068]
[-0.46063757 59.08634567]
[14.50259018 60.13602066]
[2.36899734 51.31695557]
[-6.09312296 38.93178177]
[-9.89852333 24.42251015]
[-8.60414028 9.47846317]
[-2.36067796 -4.16042185]
[8.10493469 -14.90616322]
[21.57418251 -21.50763130]
[36.47883606 -23.19621468]
[51.08354187 -19.77530861]
[63.68786621 -11.64321423]
[72.82428741 0.25324765]
[77.42904663 14.52896786]
[76.96601105 29.52182007]
[71.48908997 43.48617935]
[61.63596344 54.79617310]
[48.55383682 62.13497162]
[33.76308441 64.64810944]
[47.63558960 70.35367584]
[61.50809860 76.05924988]
[75.38060760 81.76481628]
[89.25311279 87.47039032]
[103.89121246 84.19531250]
[114.00968933 73.12207794]
[124.12815857 62.04884720]
[134.24664307 50.97561646]
[127.24507141 41.88089752]
[121.68028259 31.84551239]
[117.67619324 21.09456062]
[115.32173920 9.86904812]
[114.66886139 -1.57950151]
[115.73141479 -12.99468708]
[118.48481750 -24.12097168]
[122.86666107 -34.70940399]
[128.77810669 -44.52318192]
[136.08610535 -53.34296417]
[144.62641907 -60.97174835]
[154.20730591 -67.23929596]
[164.61378479 -72.00592041]
[175.61250305 -75.16559601]
[186.95698547 -76.64832306]
[198.39308167 -76.42167664]
[209.66473389 -74.49150848]
[220.51968384 -70.90180969]
[230.71511841 -65.73371124]
[240.02307129 -59.10362625]
[248.23559570 -51.16065216]
[260.35317993 -60.00169754]
[272.47076416 -68.84274292]
[284.58834839 -77.68378448]
[296.70596313 -86.52482605]
[308.82354736 -95.36587524]
[307.80935669 -110.75986481]
[315.29879761 -124.24734497]
[328.90197754 -131.52450562]
[344.27816772 -130.26922607]
[356.52093506 -120.88206482]
[361.72360229 -106.35843658]
[358.22601318 -91.33277130]
[347.14428711 -80.59970856]
[332.01452637 -77.58412170]
[317.66458130 -83.24828339]
[305.54699707 -74.40724182]
[293.42941284 -65.56620026]
[281.31182861 -56.72515106]
[269.19424438 -47.88410950]
[257.07662964 -39.04306412]
[264.63354492 -21.60292244]
[267.65029907 -2.82845354]
[265.93597412 16.11775780]
[259.59265137 34.06147003]
[249.00952148 49.88955307]
[234.83885193 62.61904144]
[217.95590210 71.45818329]
[199.40478516 75.85568237]
[180.33396912 75.53507996]
[161.92510986 70.51213074]
[145.31987000 61.09409332]
[135.20138550 72.16732788]
[125.08291626 83.24055481]
[114.96443939 94.31378937]
[127.96555328 86.83240509]
[142.85990906 88.60951233]
[153.73583984 98.93977356]
[156.27659607 113.72303009]
[149.47373962 127.09169006]
[136.02737427 133.73963928]
[121.27445984 131.02827454]
[111.07125854 120.03531647]
[111.07125854 135.03530884]
[111.07125854 150.03530884]
[111.07125854 165.03530884]
[111.07125854 180.03530884]
[111.07125854 195.03530884]
[111.07125854 210.03530884]
[111.07125854 225.03530884]
[111.07125854 240.03530884]
[111.07125854 255.03530884]
[125.78081512 258.26687622]
[139.45159912 264.58541870]
[151.44418335 273.69540405]
[161.19766235 285.17074585]
[168.25585938 298.47473145]
[172.28863525 312.98510742]
[173.10737610 328.02319336]
[170.67378235 342.88562012]
[165.10169983 356.87722778]
[156.65170288 369.34365845]
[145.71905518 379.70181274]
[132.81506348 387.46719360]
[118.54329681 392.27664185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[31 67]
[32 66]
[33 65]
[34 64]
[35 63]
[36 46]
[37 45]
[38 44]
[68 126]
[69 125]
[70 124]
[71 123]
[92 112]
[93 111]
[94 110]
[95 109]
[96 108]
[97 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
