%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGGCCUCGGGGGGGGGGCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCxxxxxxxxxxUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCCCCCCCCCCCUAGACCUC\
) } def
/len { sequence length } bind def

/coor [
[83.92197418 459.99920654]
[70.70177460 452.72674561]
[59.81497192 442.27972412]
[52.00384140 429.37048340]
[47.80096054 414.87918091]
[47.49288940 399.79382324]
[51.10062790 385.14300537]
[58.37820053 371.92562866]
[68.82940674 361.04284668]
[81.74166870 353.23669434]
[96.23461151 349.03942871]
[95.92255402 334.04266357]
[95.61049652 319.04589844]
[95.29843903 304.04916382]
[94.98638153 289.05239868]
[94.67432404 274.05563354]
[94.36227417 259.05889893]
[94.05021667 244.06213379]
[93.73815918 229.06538391]
[93.42610168 214.06863403]
[93.11404419 199.07188416]
[92.80198669 184.07511902]
[84.27196503 175.44111633]
[83.92671204 162.90718079]
[92.50000000 153.21426392]
[92.50000000 138.21426392]
[92.50000000 123.21426392]
[80.84316254 117.70332336]
[72.98183441 106.43070221]
[71.67491150 91.89630127]
[56.69519424 92.67614746]
[41.71548080 93.45599365]
[26.73576546 94.23583221]
[16.34408951 106.14333344]
[0.57074225 107.13182068]
[-11.22622681 96.61483002]
[-12.04788685 80.83190918]
[-1.40676105 69.14679718]
[14.38395977 68.49205017]
[25.95591927 79.25611877]
[40.93563461 78.47627258]
[55.91534805 77.69643402]
[70.89506531 76.91658783]
[82.39686584 67.28805542]
[85.79984283 52.67916489]
[89.20281982 38.07027435]
[92.60579681 23.46138191]
[96.00878143 8.85248947]
[79.74790192 -9.29648399]
[80.19075775 -33.45286560]
[96.81774902 -50.69471741]
[93.71942902 -65.37123871]
[90.62110901 -80.04776764]
[87.52278900 -94.72428894]
[72.48318481 -94.37069702]
[57.63472748 -96.78688049]
[43.48314667 -101.89054108]
[30.51043701 -109.50785065]
[19.15844727 -119.37937927]
[9.81382179 -131.16888428]
[2.79483461 -144.47485352]
[-1.65944982 -158.84405518]
[-3.39732075 -173.78709412]
[-2.35958672 -188.79501343]
[1.41840756 -203.35665894]
[7.80798483 -216.97604370]
[16.59151840 -229.18933105]
[27.46984482 -239.58050537]
[40.07245255 -247.79568481]
[53.97010040 -253.55502319]
[68.68943787 -256.66238403]
[83.72913361 -257.01193237]
[98.57694244 -254.59173584]
[112.72714996 -249.48426819]
[125.69779968 -241.86344910]
[137.04713440 -231.98887634]
[146.38858032 -220.19683838]
[153.40397644 -206.88899231]
[157.85438538 -192.51858521]
[159.58822632 -177.57507324]
[158.54644775 -162.56742859]
[154.76452637 -148.00682068]
[148.37129211 -134.38914490]
[139.58445740 -122.17823029]
[128.70333862 -111.78997803]
[116.09851074 -103.57820892]
[102.19931030 -97.82261658]
[105.29763794 -83.14608765]
[108.39595795 -68.46956635]
[111.49427795 -53.79303741]
[119.45493317 -52.60773087]
[126.88265991 -49.50841141]
[133.32482910 -44.68394470]
[145.93594360 -52.80548477]
[158.54707336 -60.92702866]
[171.15820312 -69.04856873]
[183.76933289 -77.17011261]
[190.78482056 -91.99289703]
[207.14927673 -93.05884552]
[216.02838135 -79.27139282]
[208.28804016 -64.81389618]
[191.89086914 -64.55898285]
[179.27975464 -56.43744278]
[166.66862488 -48.31589890]
[154.05749512 -40.19435883]
[141.44636536 -32.07281494]
[143.25335693 -24.49174690]
[143.21229553 -16.67301178]
[141.31347656 -9.06205654]
[137.65341187 -2.09534287]
[132.42991638 3.82468414]
[125.93152618 8.35283756]
[118.52153015 11.22130489]
[110.61766815 12.25546741]
[107.21469116 26.86435890]
[103.81171417 41.47325134]
[100.40873718 56.08214569]
[97.00576019 70.69104004]
[110.79191589 73.49566650]
[121.31980133 82.20108795]
[126.35292053 94.46154785]
[125.05884552 107.24200439]
[118.12326050 117.56720734]
[107.50000000 123.21426392]
[107.50000000 138.21426392]
[107.50000000 153.21426392]
[117.08272552 168.90347290]
[107.79874420 183.76306152]
[108.11080170 198.75982666]
[108.42285919 213.75657654]
[108.73490906 228.75332642]
[109.04696655 243.75007629]
[109.35902405 258.74682617]
[109.67108154 273.74359131]
[109.98313904 288.74035645]
[110.29519653 303.73709106]
[110.60724640 318.73385620]
[110.91930389 333.73059082]
[111.23136139 348.72735596]
[125.88635254 352.31811523]
[139.11216736 359.58038330]
[150.00703430 370.01898193]
[157.82812500 382.92218018]
[162.04220581 397.41024780]
[162.36192322 412.49536133]
[158.76548767 427.14895630]
[151.49812317 440.37194824]
[141.05532837 451.26278687]
[128.14909363 459.07891846]
[113.65940857 463.28738403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[25 126]
[26 125]
[27 124]
[30 43]
[31 42]
[32 41]
[33 40]
[44 118]
[45 117]
[46 116]
[47 115]
[48 114]
[51 90]
[52 89]
[53 88]
[54 87]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
