%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCCCCCUCGGGGGGGGGGUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCxxxxxxxxxxUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCACCCCCCCCCCAAACCCCCUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 381.49822998]
[71.19830322 375.48220825]
[59.48964310 365.95278931]
[50.78712082 353.61712646]
[45.73651886 339.39059448]
[44.71262741 324.32891846]
[47.79142761 309.54974365]
[54.74444962 296.14981079]
[65.05573273 285.12350464]
[77.96011353 277.28897095]
[92.50000000 273.22766113]
[92.50000000 258.22766113]
[92.50000000 243.22766113]
[92.50000000 228.22766113]
[92.50000000 213.22766113]
[92.50000000 198.22766113]
[92.50000000 183.22766113]
[92.50000000 168.22766113]
[92.50000000 153.22766113]
[92.50000000 138.22766113]
[92.50000000 123.22766876]
[75.43360901 111.39194489]
[72.48471832 88.68769836]
[57.58281708 86.97500610]
[42.68091583 85.26231384]
[27.77901268 83.54962921]
[12.84470463 82.14732361]
[-2.11554360 81.05601501]
[-17.07579231 79.96470642]
[-27.11327744 91.65038300]
[-41.93377304 95.14414215]
[-55.80562973 89.31013489]
[-63.49024963 76.57888794]
[-78.45050049 75.48757935]
[-93.41075134 74.39627075]
[-108.37099457 73.30496216]
[-123.33124542 72.21364594]
[-137.84846497 79.84137726]
[-151.56649780 70.85539246]
[-150.37338257 54.49970627]
[-135.49652100 47.59964371]
[-122.23993683 57.25339890]
[-107.27968597 58.34471130]
[-92.31943512 59.43601990]
[-77.35919189 60.52733231]
[-62.39894104 61.61864090]
[-52.94807816 50.13738632]
[-38.37643051 46.37826157]
[-24.21985435 51.98582077]
[-15.98448181 65.00445557]
[-1.02423310 66.09576416]
[13.93601608 67.18707275]
[18.11414719 64.75422668]
[23.87493706 64.96540833]
[29.49170303 68.64772797]
[44.39360428 70.36041260]
[59.29550552 72.07310486]
[74.19741058 73.78579712]
[86.80854034 65.66425323]
[91.41410065 51.38879013]
[96.01966858 37.11333084]
[94.90944672 32.76259613]
[95.24766541 28.70591545]
[96.75459290 25.37259102]
[99.03743744 23.05254555]
[101.64732361 21.87110329]
[107.42359924 8.02788639]
[113.19986725 -5.81533194]
[118.97614288 -19.65855026]
[106.43521881 -27.97249985]
[95.69454193 -38.50978470]
[87.14237976 -50.88948441]
[81.08788300 -64.66408539]
[77.74992371 -79.33563995]
[77.24916840 -94.37378693]
[79.60371399 -109.23489380]
[84.72843933 -123.38175201]
[92.43810272 -136.30296326]
[102.45399475 -147.53143311]
[114.41405487 -156.66123962]
[127.88592529 -163.36238098]
[142.38261414 -167.39257812]
[157.38006592 -168.60617065]
[172.33615112 -166.95927429]
[186.71018982 -162.51142883]
[199.98258972 -155.42341614]
[211.67355347 -145.95146179]
[221.36045837 -134.43798828]
[228.69314575 -121.29917908]
[233.40652466 -107.01000214]
[235.33021545 -92.08700562]
[234.39466858 -77.06963348]
[230.63372803 -62.50077438]
[224.18331909 -48.90706635]
[215.27664185 -36.77992249]
[204.23567200 -26.55773163]
[191.45950317 -18.61001396]
[177.41001892 -13.22407722]
[162.59507751 -10.59462070]
[147.55023193 -10.81669617]
[132.81936646 -13.88227749]
[127.04309082 -0.03905930]
[121.26681519 13.80415821]
[115.49053955 27.64737701]
[110.29512787 41.71889496]
[105.68955994 55.99435425]
[101.08399963 70.26981354]
[113.98333740 75.77693176]
[122.18653107 86.08525085]
[124.34337616 98.21823883]
[138.91607666 101.77300262]
[147.57264709 89.30591583]
[160.15048218 80.81105804]
[174.94853210 77.43729401]
[189.96546936 79.64089203]
[203.17039490 87.12383270]
[212.77743530 98.87411499]
[217.48733521 113.30260468]
[216.66310120 128.45797729]
[210.41621399 142.29057312]
[199.59150696 152.92965698]
[185.65295410 158.93638611]
[170.48559570 159.49839783]
[156.14071655 154.53968811]
[144.55833435 144.73086548]
[137.30488586 131.39851379]
[135.36131287 116.34570312]
[120.78861237 112.79093933]
[115.07623291 119.19588470]
[107.50000000 123.22766876]
[107.50000000 138.22766113]
[107.50000000 153.22766113]
[107.50000000 168.22766113]
[107.50000000 183.22766113]
[107.50000000 198.22766113]
[107.50000000 213.22766113]
[107.50000000 228.22766113]
[107.50000000 243.22766113]
[107.50000000 258.22766113]
[107.50000000 273.22766113]
[122.03988647 277.28897095]
[134.94427490 285.12350464]
[145.25555420 296.14981079]
[152.20857239 309.54974365]
[155.28736877 324.32891846]
[154.26348877 339.39059448]
[149.21287537 353.61712646]
[140.51036072 365.95278931]
[128.80169678 375.48220825]
[114.95575714 381.49822998]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 58]
[24 57]
[25 56]
[26 55]
[27 52]
[28 51]
[29 50]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[59 107]
[60 106]
[61 105]
[66 104]
[67 103]
[68 102]
[69 101]
[110 128]
[111 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
