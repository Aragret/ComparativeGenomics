%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCCUUUCUAGGGGGGGGGGUUAGCUCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUUCCAGUGAGUUCxxxxxxxxxxCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCACAACAAACCCCCCCCCCUAGCCCUUCUA\
) } def
/len { sequence length } bind def

/coor [
[99.00014496 444.26129150]
[84.97820282 438.70828247]
[72.77824402 429.84194946]
[63.16717529 418.21966553]
[56.74914932 404.57196045]
[53.92761230 389.75677490]
[54.87992859 374.70538330]
[59.54623413 360.36395264]
[67.63320160 347.63400269]
[78.63247681 337.31573486]
[91.85263062 330.05776978]
[106.46264648 326.31631470]
[106.46264648 311.31631470]
[106.46264648 296.31631470]
[106.46264648 281.31631470]
[106.46264648 266.31631470]
[106.46264648 251.31631470]
[106.46264648 236.31631470]
[106.46264648 221.31631470]
[106.46264648 206.31631470]
[106.46264648 191.31631470]
[106.46264648 176.31631470]
[106.46264648 161.31631470]
[98.72534180 148.58905029]
[106.46264648 134.78887939]
[93.07080841 133.65368652]
[81.45934296 127.70343018]
[73.22868347 118.09096527]
[69.38501740 106.44659424]
[70.22264862 94.60618591]
[75.32088470 84.32286835]
[83.65007019 77.00746155]
[78.51976776 62.91207123]
[73.38946533 48.81668091]
[61.39884186 38.49507523]
[64.31654358 23.88903809]
[59.18624115 9.79364872]
[54.05593872 -4.30174065]
[39.01114273 -7.05880642]
[27.44273758 -16.91115570]
[22.39263153 -31.13658524]
[25.12273026 -45.88116074]
[34.80136490 -57.20324707]
[29.67106247 -71.29863739]
[24.54076004 -85.39402771]
[19.41045761 -99.48941803]
[14.28015518 -113.58480835]
[9.00541401 -127.62677765]
[3.58678889 -141.61386108]
[-1.83183622 -155.60095215]
[-16.58498192 -152.68275452]
[-31.62073517 -152.37094116]
[-46.48217773 -154.67498779]
[-60.71768951 -159.52487183]
[-73.89466095 -166.77322388]
[-85.61267090 -176.19975281]
[-95.51561737 -187.51800537]
[-103.30255127 -200.38403320]
[-108.73685455 -214.40684509]
[-111.65337372 -229.16032410]
[-111.96347809 -244.19612122]
[-109.65774536 -259.05728149]
[-104.80624390 -273.29226685]
[-97.55641174 -286.46841431]
[-88.12855530 -298.18533325]
[-76.80918121 -308.08700562]
[-63.94226837 -315.87249756]
[-49.91883087 -321.30520630]
[-35.16502380 -324.22003174]
[-20.12919807 -324.52844238]
[-5.26827812 -322.22100830]
[8.96613121 -317.36791992]
[22.14146233 -310.11657715]
[33.85733414 -300.68740845]
[43.75770950 -289.36688232]
[51.54172897 -276.49911499]
[56.97284698 -262.47503662]
[59.88601685 -247.72091675]
[60.19271088 -232.68505859]
[57.88360977 -217.82438660]
[53.02888107 -203.59053040]
[45.77605820 -190.41603088]
[36.34554672 -178.70123291]
[25.02392387 -168.80213928]
[12.15524769 -161.01957703]
[17.57387161 -147.03248596]
[22.99249649 -133.04541016]
[28.37464905 -127.91270447]
[28.37554550 -118.71510315]
[33.50584793 -104.61972046]
[38.63615036 -90.52433014]
[43.76645279 -76.42893982]
[48.89675140 -62.33354950]
[63.58871460 -59.88163376]
[75.15772247 -50.34150696]
[80.43304443 -36.19805145]
[77.90409851 -21.21468544]
[68.15132904 -9.43204308]
[73.28163147 4.66334629]
[78.41193390 18.75873566]
[90.03559875 28.07214737]
[87.48484802 43.68637848]
[92.61515045 57.78176880]
[97.74545288 71.87715912]
[122.61141205 77.64215851]
[135.23677063 103.22516632]
[150.17279053 101.84114075]
[165.10879517 100.45711517]
[172.91621399 87.04727173]
[187.12820435 80.81838989]
[202.27996826 84.16559601]
[212.54533386 95.80182648]
[213.97706604 111.25270844]
[206.02464294 124.57706451]
[191.74591064 130.65141296]
[176.63136292 127.14002991]
[166.49282837 115.39312744]
[151.55680847 116.77715302]
[136.62080383 118.16117859]
[151.57672119 117.01218414]
[164.59408569 124.46527100]
[171.17442322 137.94485474]
[169.04376221 152.79275513]
[158.93841553 163.87796021]
[144.35047913 167.36972046]
[130.32116699 162.06138611]
[121.69862366 149.78735352]
[121.46264648 134.78887939]
[129.19995117 148.58905029]
[121.46264648 161.31631470]
[121.46264648 176.31631470]
[121.46264648 191.31631470]
[121.46264648 206.31631470]
[121.46264648 221.31631470]
[121.46264648 236.31631470]
[121.46264648 251.31631470]
[121.46264648 266.31631470]
[121.46264648 281.31631470]
[121.46264648 296.31631470]
[121.46264648 311.31631470]
[121.46264648 326.31631470]
[136.07266235 330.05776978]
[149.29281616 337.31573486]
[160.29209900 347.63400269]
[168.37905884 360.36395264]
[173.04536438 374.70538330]
[173.99768066 389.75677490]
[171.17614746 404.57196045]
[164.75811768 418.21966553]
[155.14704895 429.84194946]
[142.94708252 438.70828247]
[128.92514038 444.26129150]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[25 128]
[32 104]
[33 103]
[34 102]
[36 100]
[37 99]
[38 98]
[43 93]
[44 92]
[45 91]
[46 90]
[47 89]
[48 87]
[49 86]
[50 85]
[106 119]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
