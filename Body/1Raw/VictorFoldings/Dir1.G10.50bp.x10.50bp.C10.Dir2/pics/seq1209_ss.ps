%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUCACCCCCGGGGGGGGGGUCCCCAAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACAxxxxxxxxxxCCAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCUUCUCGUCCCCAUGCCCCCCCCCCGAUGACCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 358.70907593]
[71.19830322 352.69305420]
[59.48964310 343.16363525]
[50.78712082 330.82797241]
[45.73651886 316.60144043]
[44.71262741 301.53976440]
[47.79142761 286.76062012]
[54.74444962 273.36068726]
[65.05573273 262.33435059]
[77.96011353 254.49984741]
[92.50000000 250.43852234]
[92.50000000 235.43852234]
[92.50000000 220.43852234]
[92.50000000 205.43852234]
[92.50000000 190.43852234]
[92.50000000 175.43852234]
[92.50000000 160.43852234]
[92.50000000 145.43852234]
[92.50000000 130.43852234]
[92.50000000 115.43852997]
[87.12200928 129.44128418]
[76.03783417 139.54777527]
[61.59935760 143.61352539]
[46.87020874 140.77587891]
[34.97569656 131.63691711]
[28.43965149 118.13580322]
[28.64892578 103.13726807]
[35.55911255 89.82376099]
[47.70397568 81.02022552]
[62.50655746 78.59462738]
[76.82597351 83.06164551]
[87.62376404 93.47327423]
[81.27663422 79.88232422]
[74.92950439 66.29137421]
[68.58237457 52.70042419]
[42.38808441 47.25423050]
[30.38850212 20.46571350]
[15.81579971 16.91095161]
[1.24309719 13.35619068]
[-13.32960606 9.80142879]
[-27.90230942 6.24666643]
[-43.48263168 11.36385059]
[-55.52232742 0.22932094]
[-51.63599014 -15.70267296]
[-35.82154846 -20.04266167]
[-24.34754562 -8.32603645]
[-9.77484417 -4.77127457]
[4.79785919 -1.21651256]
[19.37056160 2.33824944]
[33.94326401 5.89301157]
[44.49455643 -4.76861477]
[40.78839493 -19.30355072]
[37.08223343 -33.83848572]
[33.37607193 -48.37342453]
[29.66991043 -62.90835953]
[14.62596130 -62.29737854]
[-0.21620421 -64.82795715]
[-14.20775127 -70.38945770]
[-26.73703003 -78.73876190]
[-37.25631332 -89.51087189]
[-45.30574036 -102.23487854]
[-50.53343201 -116.35454559]
[-52.71084976 -131.25260925]
[-51.74280930 -146.27781677]
[-47.67162704 -160.77330017]
[-40.67527771 -174.10539246]
[-31.05961609 -185.69128418]
[-19.24499321 -195.02447510]
[-5.74789381 -201.69694519]
[8.84164524 -205.41703796]
[23.88583374 -206.02209473]
[38.72700119 -203.48568726]
[52.71636200 -197.91867065]
[65.24235535 -189.56443787]
[75.75740051 -178.78819275]
[83.80181885 -166.06101990]
[89.02395630 -151.93930054]
[91.19551086 -137.04037476]
[90.22155762 -122.01555634]
[86.14467621 -107.52167511]
[79.14308167 -94.19232941]
[69.52286530 -82.61022949]
[57.70457077 -73.28169250]
[44.20484543 -66.61451721]
[47.91100693 -52.07958603]
[51.61716843 -37.54464722]
[55.32332993 -23.00971222]
[59.02949142 -8.47477627]
[71.24166107 -7.18657064]
[81.89189148 -1.70573008]
[89.63665009 7.03152895]
[93.58886719 17.69634628]
[93.41652679 28.76655006]
[89.36057281 38.74314880]
[82.17332458 46.35329437]
[88.52045441 59.94424820]
[94.86758423 73.53519440]
[101.21471405 87.12615204]
[109.84779358 85.65798187]
[119.57697296 90.26480103]
[134.53723145 91.35610962]
[149.49746704 92.44742584]
[154.02320862 78.07333374]
[161.74237061 65.13072205]
[172.23866272 54.31755447]
[184.94604492 46.21698380]
[199.17921448 41.26585770]
[214.17059326 39.73118210]
[229.11172485 41.69572449]
[243.19683838 47.05353928]
[255.66635132 55.51568222]
[265.84780884 66.62580109]
[273.19210815 79.78475189]
[277.30322266 94.28287506]
[277.95941162 109.33831024]
[275.12527466 124.13913727]
[268.95370483 137.88716125]
[259.77746582 149.84098816]
[248.09149170 159.35592651]
[234.52592468 165.91888428]
[219.81237793 169.17591858]
[204.74432373 168.95137024]
[190.13436890 165.25735474]
[176.77038574 158.29309082]
[165.37310791 148.43414307]
[156.55717468 136.21220398]
[150.79798889 122.28637695]
[148.40615845 107.40766907]
[133.44590759 106.31636047]
[118.48566437 105.22505188]
[107.50000000 115.43852997]
[107.50000000 130.43852234]
[107.50000000 145.43852234]
[107.50000000 160.43852234]
[107.50000000 175.43852234]
[107.50000000 190.43852234]
[107.50000000 205.43852234]
[107.50000000 220.43852234]
[107.50000000 235.43852234]
[107.50000000 250.43852234]
[122.03988647 254.49984741]
[134.94427490 262.33435059]
[145.25555420 273.36068726]
[152.20857239 286.76062012]
[155.28736877 301.53976440]
[154.26348877 316.60144043]
[149.21287537 330.82797241]
[140.51036072 343.16363525]
[128.80169678 352.69305420]
[114.95575714 358.70907593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[32 98]
[33 97]
[34 96]
[35 95]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[51 88]
[52 87]
[53 86]
[54 85]
[55 84]
[100 130]
[101 129]
[102 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
