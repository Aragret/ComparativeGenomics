%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGUCCUCGGGGGGGGGGAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGAxxxxxxxxxxACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCCCCCCCCCCCUACUCCUC\
) } def
/len { sequence length } bind def

/coor [
[72.52243042 367.07211304]
[59.30223465 359.79965210]
[48.41542816 349.35263062]
[40.60429764 336.44338989]
[36.40141678 321.95205688]
[36.09334564 306.86672974]
[39.70108414 292.21591187]
[46.97866058 278.99850464]
[57.42986679 268.11575317]
[70.34212494 260.30960083]
[84.83506775 256.11230469]
[84.52301025 241.11557007]
[84.21095276 226.11880493]
[83.89889526 211.12205505]
[83.58683777 196.12530518]
[83.27478027 181.12855530]
[82.96273041 166.13179016]
[82.65067291 151.13504028]
[82.33861542 136.13829041]
[82.02655792 121.14153290]
[80.01988220 100.53826904]
[91.59121704 91.12530518]
[87.88505554 76.59037018]
[84.17889404 62.05543518]
[69.41916656 64.76231384]
[54.50912476 66.45563507]
[39.51828384 67.12751007]
[24.51654053 66.77480316]
[9.57383823 65.39916229]
[-5.24015141 63.00699234]
[-19.85635757 59.60945511]
[-34.20663071 55.22238922]
[-48.22406769 49.86624527]
[-61.84330750 43.56600571]
[-75.00085449 36.35103607]
[-87.63535309 28.25498199]
[-99.68790436 19.31558800]
[-111.10231018 9.57453632]
[-121.82534790 -0.92275739]
[-131.80702209 -12.12734795]
[-141.00080872 -23.98699379]
[-149.36381531 -36.44640350]
[-156.85705566 -49.44747543]
[-163.44561768 -62.92960358]
[-169.09875488 -76.82991791]
[-173.79011536 -91.08361816]
[-177.49781799 -105.62423706]
[-180.20460510 -120.38397980]
[-181.89782715 -135.29403687]
[-182.56961060 -150.28488159]
[-182.21679688 -165.28662109]
[-180.84104919 -180.22932434]
[-178.44879150 -195.04328918]
[-175.05114746 -209.65946960]
[-170.66398621 -224.00971985]
[-165.30775452 -238.02711487]
[-159.00741577 -251.64631653]
[-151.79235840 -264.80380249]
[-143.69622803 -277.43826294]
[-134.75674438 -289.49075317]
[-125.01561737 -300.90509033]
[-114.51824951 -311.62805176]
[-103.31359863 -321.60964966]
[-91.45388794 -330.80334473]
[-78.99442291 -339.16629028]
[-65.99330139 -346.65945435]
[-52.51112747 -353.24789429]
[-38.61077499 -358.90093994]
[-24.35704613 -363.59222412]
[-9.81640148 -367.29983521]
[4.94336224 -370.00650024]
[19.85342789 -371.69964600]
[34.84428024 -372.37130737]
[49.84601974 -372.01840210]
[64.78870392 -370.64254761]
[79.60266113 -368.25018311]
[94.21881866 -364.85244751]
[108.56903839 -360.46520996]
[122.58640289 -355.10885620]
[136.20555115 -348.80844116]
[149.36300659 -341.59329224]
[161.99739075 -333.49707031]
[174.04981995 -324.55752563]
[185.46409607 -314.81631470]
[196.18699646 -304.31887817]
[206.16853333 -293.11416626]
[215.36215210 -281.25439453]
[223.72499084 -268.79486084]
[231.21806335 -255.79368591]
[237.80642700 -242.31147766]
[243.45938110 -228.41108704]
[248.15055847 -214.15731812]
[251.85807800 -199.61665344]
[254.56465149 -184.85687256]
[256.25769043 -169.94679260]
[256.92926025 -154.95594788]
[256.57623291 -139.95420837]
[255.20030212 -125.01152802]
[252.80783081 -110.19758606]
[249.41000366 -95.58145142]
[245.02264404 -81.23126221]
[239.66622925 -67.21393585]
[233.36570740 -53.59482193]
[226.15046692 -40.43742371]
[218.05416870 -27.80308342]
[209.11453247 -15.75071335]
[199.37324524 -4.33650398]
[188.87573242 6.38632441]
[177.67094421 16.36777687]
[165.81111145 25.56131554]
[153.35153198 33.92407227]
[140.35031128 41.41706085]
[126.86805725 48.00534058]
[112.96762085 53.65819931]
[98.71383667 58.34927368]
[102.41999054 72.88420868]
[106.12615204 87.41914368]
[115.75468445 98.92095184]
[129.41091919 105.12635803]
[142.84095764 97.35371399]
[158.27119446 98.99296570]
[169.76841736 109.41378784]
[172.91169739 124.60916138]
[166.49237061 138.73616028]
[152.97882080 146.36265564]
[137.56726074 144.55610657]
[126.18376923 134.01116943]
[123.20551300 118.78260040]
[109.54927826 112.57718658]
[97.02331543 120.82947540]
[97.33536530 135.82623291]
[97.64742279 150.82298279]
[97.95948029 165.81973267]
[98.27153778 180.81649780]
[98.58359528 195.81324768]
[98.89565277 210.80999756]
[99.20770264 225.80674744]
[99.51976013 240.80351257]
[99.83181763 255.80026245]
[114.48680878 259.39102173]
[127.71262360 266.65328979]
[138.60748291 277.09188843]
[146.42858887 289.99508667]
[150.64265442 304.48315430]
[150.96237183 319.56826782]
[147.36595154 334.22186279]
[140.09858704 347.44485474]
[129.65579224 358.33569336]
[116.74955750 366.15182495]
[102.25986481 370.36029053]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 117]
[23 116]
[24 115]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
