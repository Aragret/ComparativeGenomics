%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCAGCCAGGGGGGGGGGCCAAUUAAGAAAGCGUUCAAGCUCAACACCCACUACCUAAAAAAUCCCAAxxxxxxxxxxUUAUAUCCUUCUUGCUCAUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACCCCCCCCCCCACAGCAGCCA\
) } def
/len { sequence length } bind def

/coor [
[95.06108093 545.59747314]
[81.84088135 538.32501221]
[70.95407867 527.87799072]
[63.14294434 514.96875000]
[58.94006348 500.47744751]
[58.63199234 485.39208984]
[62.23973465 470.74127197]
[69.51730347 457.52389526]
[79.96851349 446.64111328]
[92.88077545 438.83496094]
[107.37371063 434.63769531]
[107.06165314 419.64093018]
[106.74960327 404.64419556]
[106.43754578 389.64743042]
[106.12548828 374.65066528]
[105.81343079 359.65393066]
[105.50137329 344.65716553]
[105.18931580 329.66040039]
[104.87726593 314.66366577]
[104.56520844 299.66690063]
[88.62438202 296.59841919]
[73.73912811 290.10498047]
[60.63582230 280.50030518]
[49.95456314 268.25009155]
[42.21791077 253.94934082]
[37.80531311 238.29345703]
[36.93449020 222.04443359]
[39.65071869 205.99383545]
[45.82445145 190.92414856]
[55.15752411 177.57066345]
[67.19754028 166.58563232]
[81.35979462 158.50637817]
[96.95568848 153.72898865]
[95.70880890 138.78091431]
[94.46193695 123.83281708]
[93.21506500 108.88473511]
[91.81275940 93.95042419]
[90.25518036 79.03151703]
[88.69759369 64.11260223]
[85.54907227 59.78751755]
[84.52285004 55.15078735]
[85.37361145 51.07918930]
[87.53818512 48.21875000]
[86.91420746 33.23173141]
[86.29022980 18.24471664]
[85.66625214 3.25770092]
[85.04227448 -11.72931480]
[70.06361389 -12.78753853]
[55.29763031 -15.51621723]
[40.93001556 -19.88103485]
[27.14145660 -25.82710075]
[14.10536194 -33.27963257]
[1.98567355 -42.14491272]
[-9.06519032 -52.31144714]
[-18.90825462 -63.65138245]
[-27.41973114 -76.02210236]
[-34.49257660 -89.26804352]
[-40.03784943 -103.22261047]
[-43.98580551 -117.71031189]
[-46.28680038 -132.54896545]
[-46.91189194 -147.55194092]
[-45.85321808 -162.53056335]
[-43.12409973 -177.29646301]
[-38.75885010 -191.66395569]
[-32.81237411 -205.45233154]
[-25.35945129 -218.48820496]
[-16.49380875 -230.60762024]
[-6.32694483 -241.65818787]
[5.01328421 -251.50091553]
[17.38426208 -260.01202393]
[30.63040924 -267.08447266]
[44.58514404 -272.62933350]
[59.07296753 -276.57684326]
[73.91168213 -278.87741089]
[88.91468048 -279.50204468]
[103.89327240 -278.44293213]
[118.65909576 -275.71334839]
[133.02644348 -271.34768677]
[146.81465149 -265.40078735]
[159.85029602 -257.94747925]
[171.96945190 -249.08146667]
[183.01971436 -238.91427612]
[192.86209106 -227.57376099]
[201.37283325 -215.20252991]
[208.44488525 -201.95616150]
[213.98933411 -188.00126648]
[217.93641663 -173.51332092]
[220.23652649 -158.67453003]
[220.86071777 -143.67152405]
[219.80114746 -128.69296265]
[217.07115173 -113.92722321]
[212.70503235 -99.55999756]
[206.75773621 -85.77197266]
[199.30403137 -72.73654938]
[190.43766785 -60.61765289]
[180.27014160 -49.56770325]
[168.92932129 -39.72565842]
[156.55784607 -31.21529007]
[143.31126404 -24.14363098]
[129.35620117 -18.59961128]
[114.86814117 -14.65295410]
[100.02928925 -12.35329247]
[100.65326691 2.63372350]
[101.27724457 17.62073898]
[101.90122223 32.60775757]
[102.52519989 47.59477234]
[103.61650848 62.55501938]
[105.17408752 77.47393036]
[106.73166656 92.39284515]
[110.65673065 99.49762726]
[108.16314697 107.63785553]
[109.41002655 122.58594513]
[110.65689850 137.53402710]
[111.90377045 152.48211670]
[125.65077972 154.05468750]
[138.85940552 158.16102600]
[151.06707764 164.65556335]
[161.84658813 173.30915833]
[170.82110596 183.81713867]
[177.67723083 195.81002808]
[182.17607117 208.86656189]
[184.16146851 222.52847290]
[183.56549072 236.31654358]
[180.41065979 249.74746704]
[174.80921936 262.35079956]
[166.95906067 273.68533325]
[157.13676453 283.35464478]
[145.68783569 291.02099609]
[133.01458740 296.41693115]
[119.56195831 299.35485840]
[119.87401581 314.35159302]
[120.18607330 329.34835815]
[120.49813080 344.34512329]
[120.81018829 359.34185791]
[121.12223816 374.33862305]
[121.43429565 389.33535767]
[121.74635315 404.33212280]
[122.05841064 419.32888794]
[122.37046814 434.32562256]
[137.02545166 437.91641235]
[150.25126648 445.17864990]
[161.14613342 455.61724854]
[168.96723938 468.52047729]
[173.18130493 483.00854492]
[173.50102234 498.09362793]
[169.90460205 512.74725342]
[162.63723755 525.97021484]
[152.19442749 536.86108398]
[139.28820801 544.67718506]
[124.79851532 548.88568115]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[33 114]
[34 113]
[35 112]
[36 111]
[37 109]
[38 108]
[39 107]
[43 106]
[44 105]
[45 104]
[46 103]
[47 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
