%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUUGCGAGGGGGGGGGGGACGCUGGAGCCGGAGCACCCUAUGUCGCAGUAUCUGUCUUUGAUUCCUGCxxxxxxxxxxCAAUCCUCUGAUCAGGGUGAGCAUCAAACUCAAACUACGCCCUGAUCGGCCCCCCCCCCCGCACUGCGAG\
) } def
/len { sequence length } bind def

/coor [
[99.31771851 420.74670410]
[86.44444275 412.84381104]
[76.32015228 401.63333130]
[69.76557159 388.02398682]
[67.31204987 373.11904907]
[69.15848541 358.12680054]
[75.15519714 344.26260376]
[84.81605530 332.65036011]
[97.35790253 324.23141479]
[111.76403046 319.68823242]
[111.45197296 304.69149780]
[111.13991547 289.69473267]
[110.82785797 274.69796753]
[110.51580048 259.70123291]
[110.20375061 244.70446777]
[109.89169312 229.70771790]
[109.57963562 214.71096802]
[109.26757812 199.71421814]
[108.95552063 184.71745300]
[108.64346313 169.72070312]
[100.64306641 157.15715027]
[108.09159851 143.19900513]
[107.77954102 128.20225525]
[87.09938049 124.18367767]
[75.74698639 108.07909393]
[78.51813507 89.94857788]
[67.63930511 79.62137604]
[56.76048279 69.29417419]
[44.58864594 60.52796173]
[31.34606171 53.48283005]
[15.52870846 53.83201599]
[7.92659760 41.02353287]
[-5.31598806 33.97839737]
[-18.55857468 26.93326378]
[-51.20196533 55.56337738]
[-66.01972198 53.23227310]
[-80.86093140 51.05543900]
[-95.72397614 49.03310394]
[-109.31297302 57.56063080]
[-124.40438843 52.11739349]
[-129.42137146 36.87897491]
[-120.51533508 23.53498650]
[-104.51821899 22.32179451]
[-93.70164490 34.17005539]
[-78.83859253 36.19239044]
[-71.74090576 33.96338654]
[-63.68862152 38.41451645]
[-48.87086105 40.74562073]
[-45.27960968 34.16132736]
[-53.09294510 21.35696411]
[-38.09709930 20.99274635]
[-34.50584412 14.40845585]
[-44.48857117 3.21268964]
[-54.47129822 -7.98307610]
[-70.09533691 -7.33238792]
[-82.45068359 -16.91776848]
[-85.70351410 -32.21329498]
[-78.31793976 -45.99688339]
[-63.78121567 -51.76035309]
[-48.95712662 -46.78236008]
[-40.84515762 -33.41336823]
[-43.27553177 -17.96580315]
[-33.29280472 -6.77003670]
[-23.31007957 4.42572880]
[-11.51343918 13.69067860]
[1.72914672 20.73581314]
[14.97173214 27.78094864]
[29.84188652 26.92784691]
[38.39119720 40.24024200]
[51.63378143 47.28537750]
[44.72453690 33.97138596]
[43.71495056 19.00540161]
[48.77344131 4.88408232]
[59.05614471 -6.03681707]
[72.84767151 -11.93544579]
[87.84728241 -11.82778072]
[101.55271149 -5.73178196]
[111.67758179 5.33560085]
[116.53284454 19.52807999]
[115.30852509 34.47803116]
[108.20886993 47.69146729]
[96.41825867 56.96409225]
[81.90363312 60.74901962]
[67.08768463 58.41534424]
[77.96651459 68.74255371]
[88.84533691 79.06975555]
[98.32746887 75.23159790]
[109.00915527 75.68273163]
[118.95973969 80.72048187]
[126.22742462 89.78113556]
[129.21797180 101.48260498]
[143.92593384 98.53712463]
[158.63389587 95.59164429]
[173.34185791 92.64615631]
[188.04981995 89.70067596]
[202.75778198 86.75519562]
[217.46574402 83.80971527]
[231.92042542 79.80197144]
[246.04522705 74.75321198]
[260.17004395 69.70446014]
[274.29483032 64.65570068]
[279.55801392 49.93045425]
[293.08108521 42.07802582]
[308.47888184 44.80609894]
[318.48098755 56.82655716]
[318.36477661 72.46370697]
[308.18508911 84.33416748]
[292.74844360 86.83306885]
[279.34359741 78.78050232]
[265.21878052 83.82926178]
[251.09399414 88.87802124]
[236.96919250 93.92677307]
[250.35282898 100.70011902]
[256.41204834 114.42184448]
[252.40196228 128.87588501]
[240.13917542 137.51440430]
[225.17886353 136.42408752]
[214.29817200 126.09884644]
[212.42617798 111.21611786]
[220.41122437 98.51766968]
[205.70326233 101.46315765]
[190.99530029 104.40863800]
[176.28733826 107.35411835]
[161.57937622 110.29960632]
[146.87141418 113.24508667]
[132.16345215 116.19056702]
[122.77629089 127.89019012]
[123.08834839 142.88694763]
[131.11106873 156.52316284]
[123.64022064 169.40864563]
[123.95227814 184.40539551]
[124.26433563 199.40216064]
[124.57638550 214.39891052]
[124.88844299 229.39566040]
[125.20050049 244.39241028]
[125.51255798 259.38916016]
[125.82461548 274.38592529]
[126.13667297 289.38269043]
[126.44872284 304.37942505]
[126.76078033 319.37619019]
[141.34342957 323.31613159]
[154.22462463 331.20608521]
[164.36018372 342.40640259]
[170.92843628 356.00915527]
[173.39692688 370.91162109]
[171.56555176 385.90570068]
[165.58276367 399.77593994]
[155.93357849 411.39788818]
[143.40019226 419.82943726]
[128.99864197 424.38705444]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 128]
[23 127]
[26 86]
[27 85]
[28 84]
[29 70]
[30 69]
[32 67]
[33 66]
[34 65]
[35 48]
[36 47]
[37 45]
[38 44]
[52 64]
[53 63]
[54 62]
[91 126]
[92 125]
[93 124]
[94 123]
[95 122]
[96 121]
[97 120]
[98 112]
[99 111]
[100 110]
[101 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
