%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUUCUCAUCCGGGGGGGGGGAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGxxxxxxxxxxUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCCCCCCCCCCCAUCCUCAUCC\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 422.96316528]
[70.87159729 417.80813599]
[58.28185654 409.52593994]
[47.94191742 398.56317139]
[40.40940475 385.51104736]
[36.09054184 371.07345581]
[35.21823120 356.02899170]
[37.83952332 341.18899536]
[43.81304932 327.35375977]
[52.81666565 315.26940918]
[64.36482239 305.58761597]
[77.83473969 298.83053589]
[92.50000000 295.36257935]
[92.50000000 280.36257935]
[92.50000000 265.36257935]
[92.50000000 250.36256409]
[92.50000000 235.36256409]
[92.50000000 220.36256409]
[92.50000000 205.36256409]
[92.50000000 190.36256409]
[92.50000000 175.36256409]
[92.50000000 160.36256409]
[92.50000000 145.36256409]
[84.41651154 143.25698853]
[76.84738159 139.72366333]
[70.04244232 134.87918091]
[64.22629547 128.88346863]
[59.59090805 121.93440247]
[56.28929138 114.26136780]
[54.43040848 106.11760712]
[39.43733978 105.66164398]
[24.44427299 105.20567322]
[14.49867916 113.47852325]
[1.98457909 112.75585175]
[-6.38757610 103.97374725]
[-21.36832428 103.21401215]
[-36.34907150 102.45427704]
[-49.16925430 112.09909058]
[-64.66648865 107.94995880]
[-70.95262146 93.18974304]
[-63.20547485 79.14121246]
[-47.36798859 76.58119965]
[-35.58933258 87.47352600]
[-20.60858536 88.23326111]
[-5.62783861 88.99300385]
[9.50592327 80.15800476]
[24.90023994 90.21260834]
[39.89331055 90.66857147]
[54.88637543 91.12454224]
[57.30801773 82.92934418]
[61.20438766 75.32382965]
[66.44090271 68.57071686]
[72.83666992 62.90328598]
[80.17075348 58.51731110]
[88.18981171 55.56429291]
[96.61682892 54.14624405]
[105.16072083 54.31214905]
[113.52634430 56.05627823]
[121.42471313 59.31837845]
[130.48562622 47.36430359]
[139.54653931 35.41023254]
[148.60745239 23.45615959]
[156.41250610 10.64674091]
[162.88160706 -2.88657975]
[169.35069275 -16.41990089]
[175.81979370 -29.95322227]
[172.15956116 -48.45911026]
[185.42366028 -60.84574127]
[187.54470825 -75.69502258]
[189.66574097 -90.54430389]
[191.78678894 -105.39358521]
[178.11082458 -111.83248901]
[166.94146729 -122.01762390]
[159.27189636 -135.04331970]
[155.78407288 -149.75135803]
[156.78813171 -164.83390808]
[162.19479370 -178.94984436]
[171.52330017 -190.84396362]
[183.94418335 -199.45867920]
[198.35296631 -204.02795410]
[213.46844482 -204.14549255]
[227.94654846 -199.80085754]
[240.49990845 -191.38035583]
[250.01226807 -179.63275146]
[255.63781738 -165.60261536]
[256.87631226 -150.53750610]
[253.61764526 -135.77700806]
[246.15158081 -122.63359833]
[235.14196777 -112.27599335]
[221.56779480 -105.62517548]
[206.63607788 -103.27254486]
[204.51502991 -88.42326355]
[202.39398193 -73.57398224]
[200.27294922 -58.72469711]
[200.48686218 -58.58737183]
[200.69883728 -58.44709015]
[213.42851257 -66.38155365]
[226.15817261 -74.31600952]
[238.88783264 -82.25047302]
[242.21577454 -97.70040131]
[255.53884888 -106.20163727]
[270.95272827 -102.71054077]
[279.31262207 -89.29832458]
[275.65878296 -73.92221069]
[262.15890503 -65.70458221]
[246.82229614 -69.52080536]
[234.09263611 -61.58634949]
[221.36296082 -53.65188599]
[208.63330078 -45.71742630]
[204.47514343 -30.30770111]
[189.35311890 -23.48412323]
[182.88401794 -9.95080280]
[176.41491699 3.58251810]
[169.94583130 17.11583900]
[183.41818237 10.52072239]
[198.39170837 11.41159248]
[210.98701477 19.55764008]
[217.94090271 32.84836960]
[217.45172119 47.84039307]
[209.64624023 60.64953995]
[196.54667664 67.95719147]
[181.54693604 67.87006378]
[168.53315735 60.41073608]
[160.87698364 47.51177979]
[160.56152344 32.51707077]
[151.50061035 44.47114563]
[142.43969727 56.42521667]
[133.37878418 68.37928772]
[144.89978027 90.09938049]
[143.58181763 114.65051270]
[129.80177307 135.01239014]
[107.50000000 145.36256409]
[107.50000000 160.36256409]
[107.50000000 175.36256409]
[107.50000000 190.36256409]
[107.50000000 205.36256409]
[107.50000000 220.36256409]
[107.50000000 235.36256409]
[107.50000000 250.36256409]
[107.50000000 265.36257935]
[107.50000000 280.36257935]
[107.50000000 295.36257935]
[122.16526031 298.83053589]
[135.63517761 305.58761597]
[147.18333435 315.26940918]
[156.18695068 327.35375977]
[162.16047668 341.18899536]
[164.78176880 356.02899170]
[163.90945435 371.07345581]
[159.59059143 385.51104736]
[152.05809021 398.56317139]
[141.71813965 409.52593994]
[129.12840271 417.80813599]
[114.96779633 422.96316528]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[30 49]
[31 48]
[32 47]
[35 45]
[36 44]
[37 43]
[59 128]
[60 127]
[61 126]
[62 125]
[63 114]
[64 113]
[65 112]
[66 111]
[68 94]
[69 93]
[70 92]
[71 91]
[96 109]
[97 108]
[98 107]
[99 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
