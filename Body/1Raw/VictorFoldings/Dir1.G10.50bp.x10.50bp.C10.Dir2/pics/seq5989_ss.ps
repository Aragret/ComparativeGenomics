%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAAAGCCCUCGGGGGGGGGGAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCCCxxxxxxxxxxCAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCUACCUAAAACCCCCCCCCCCUCACAGCCCUC\
) } def
/len { sequence length } bind def

/coor [
[72.46445465 385.22610474]
[58.97557449 378.49456787]
[47.49007416 368.73001099]
[38.67570496 356.50009155]
[33.04492188 342.51589966]
[30.92509460 327.59042358]
[32.43946457 312.59143066]
[37.49998474 298.39093018]
[45.81245041 285.81448364]
[56.89358139 275.59335327]
[70.09913635 268.32171631]
[84.66136169 264.42233276]
[84.35338593 249.42550659]
[84.04541016 234.42866516]
[83.73742676 219.43182373]
[83.42945099 204.43498230]
[83.12147522 189.43814087]
[82.81349945 174.44131470]
[82.50551605 159.44447327]
[82.19754028 144.44763184]
[81.88956451 129.45079041]
[71.12088776 119.00878906]
[56.12167358 119.16278076]
[41.12246704 119.31678009]
[31.51978683 127.98812866]
[18.98482895 127.77323151]
[10.26311398 119.33558655]
[-4.73609591 119.18158722]
[-19.73530579 119.02759552]
[-34.73451614 118.87359619]
[-49.73372269 118.71959686]
[-64.73293304 118.56560516]
[-71.44995880 132.27124023]
[-83.45374298 141.69842529]
[-98.36093140 144.97538757]
[-113.21168518 141.45149231]
[-125.05738068 131.82640076]
[-131.54605103 118.01119995]
[-131.38934326 102.74888611]
[-124.61840057 89.06980896]
[-112.57758331 79.68996429]
[-97.65760803 76.47172546]
[-82.82084656 80.05407715]
[-71.01314545 89.72573853]
[-64.57893372 103.56639099]
[-49.57972717 103.72039032]
[-34.58051682 103.87438965]
[-19.58130836 104.02838135]
[-4.58209896 104.18238068]
[10.41711044 104.33638000]
[25.17986870 94.89680481]
[40.96846771 104.31757355]
[55.96767807 104.16357422]
[70.96688843 104.00957489]
[82.69136047 80.33271790]
[106.03932190 77.71436310]
[114.45273590 65.29605103]
[122.86614227 52.87773514]
[111.28131866 43.33172607]
[100.64130402 32.74283218]
[91.03961945 21.20411110]
[82.56063843 8.81696606]
[75.27888489 -4.30974245]
[69.25833893 -18.06065178]
[64.55191803 -32.31491852]
[61.20098495 -46.94726944]
[59.23498917 -61.82911682]
[58.67120361 -76.82966614]
[59.51458359 -91.81710052]
[61.75772095 -106.65970612]
[65.38089752 -121.22703552]
[70.35227966 -135.39106750]
[76.62816620 -149.02732849]
[84.15341949 -162.01597595]
[92.86188507 -174.24287415]
[102.67704773 -185.60057068]
[113.51264954 -195.98922729]
[125.27345276 -205.31756592]
[137.85610962 -213.50361633]
[151.15003967 -220.47541809]
[165.03840637 -226.17169189]
[179.39915466 -230.54241943]
[194.10609436 -233.54914856]
[209.02996826 -235.16546631]
[224.03962708 -235.37718201]
[239.00314331 -234.18241882]
[253.78903198 -231.59169006]
[268.26736450 -227.62776184]
[282.31085205 -222.32545471]
[295.79614258 -215.73138428]
[308.60467529 -207.90348816]
[320.62390137 -198.91056824]
[331.74819946 -188.83164978]
[341.87979126 -177.75532532]
[350.92965698 -165.77891541]
[358.81823730 -153.00767517]
[365.47625732 -139.55384827]
[370.84515381 -125.53565979]
[374.87774658 -111.07631683]
[377.53863525 -96.30288696]
[378.80438232 -81.34520721]
[378.66390991 -66.33471680]
[377.11843872 -51.40333939]
[374.18154907 -36.68229675]
[369.87902832 -22.30096054]
[364.24871826 -8.38571262]
[357.34008789 4.94115353]
[349.21386719 17.56251907]
[339.94143677 29.36746216]
[329.60433960 40.25224304]
[318.29336548 50.12119675]
[306.10791016 58.88759995]
[293.15512085 66.47441101]
[279.54879761 72.81494904]
[265.40853882 77.85349274]
[250.85856628 81.54576874]
[236.02677917 83.85932159]
[221.04350281 84.77382660]
[206.04045105 84.28124237]
[191.14944458 82.38589478]
[176.50134277 79.10444641]
[162.22489929 74.46573639]
[148.44557190 68.51052094]
[135.28445435 61.29114532]
[126.87104797 73.70945740]
[118.45763397 86.12776947]
[123.93947601 95.63983154]
[124.55122375 107.17130280]
[119.65134430 118.25348663]
[109.83164978 126.28636932]
[96.88639832 129.14282227]
[97.19438171 144.13964844]
[97.50235748 159.13648987]
[97.81033325 174.13333130]
[98.11830902 189.13017273]
[98.42629242 204.12701416]
[98.73426819 219.12384033]
[99.04224396 234.12068176]
[99.35021973 249.11752319]
[99.65820312 264.11434937]
[114.36823273 267.41259766]
[127.86119080 274.13592529]
[139.35261536 283.89355469]
[148.17439270 296.11810303]
[153.81365967 310.09887695]
[155.94253540 325.02304077]
[154.43725586 340.02297974]
[149.38534546 354.22656250]
[141.08050537 366.80801392]
[130.00556946 377.03588867]
[116.80442810 384.31552124]
[102.24456787 388.22372437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 54]
[23 53]
[24 52]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[56 126]
[57 125]
[58 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
