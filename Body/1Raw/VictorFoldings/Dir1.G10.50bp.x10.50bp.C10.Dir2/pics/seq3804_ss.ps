%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUAGCCAUCGGGGGGGGGGAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUxxxxxxxxxxUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUCCCCCCCCCCACCCUAGCCAAC\
) } def
/len { sequence length } bind def

/coor [
[69.96250153 435.13522339]
[55.80189514 429.98022461]
[43.21215057 421.69802856]
[32.87221527 410.73526001]
[25.33970261 397.68310547]
[21.02083778 383.24551392]
[20.14852905 368.20108032]
[22.76981926 353.36105347]
[28.74334526 339.52581787]
[37.74696350 327.44146729]
[49.29512024 317.75970459]
[62.76503754 311.00262451]
[77.43029785 307.53466797]
[77.43029785 292.53466797]
[77.43029785 277.53466797]
[77.43029785 262.53466797]
[77.43029785 247.53465271]
[77.43029785 232.53465271]
[77.43029785 217.53465271]
[77.43029785 202.53465271]
[77.43029785 187.53465271]
[77.43029785 172.53465271]
[77.43029785 157.53465271]
[77.43029785 142.53465271]
[69.74053955 155.41362000]
[58.91274261 165.79431152]
[45.72114944 172.93446350]
[31.10902023 176.32351685]
[16.12120056 175.71914673]
[1.82939589 171.16455078]
[-10.74445629 162.98541260]
[-20.70126152 151.76658630]
[-27.32905960 138.31027222]
[-30.15392494 123.57867432]
[-28.97386932 108.62516022]
[-23.87327003 94.51899719]
[-15.21684647 82.26883698]
[-3.62357783 72.75064087]
[10.07755756 66.64499664]
[24.90686035 64.38849640]
[39.80395889 66.14248657]
[53.70363235 71.78155518]
[65.61198425 80.90246582]
[74.67751312 92.85304260]
[80.25197601 106.77875519]
[81.93686676 121.67956543]
[88.13035583 108.01791382]
[86.95408630 94.08565521]
[98.20799255 85.78858948]
[104.40148163 72.12694550]
[103.05261230 56.36334229]
[115.35464478 47.96636581]
[121.54813385 34.30471420]
[126.89999390 20.29194832]
[131.39044189 5.97986031]
[135.88088989 -8.33222866]
[122.11368561 -14.32358360]
[109.06134033 -21.74438286]
[96.87173462 -30.51054192]
[85.68298340 -40.52273560]
[75.62187195 -51.66751480]
[66.80239868 -63.81860352]
[59.32448959 -76.83831787]
[53.27288055 -90.57913971]
[48.71614075 -104.88536835]
[45.70590210 -119.59490967]
[44.27626801 -134.54109192]
[44.44343948 -149.55455017]
[46.20552826 -164.46519470]
[49.54256058 -179.10404968]
[54.41672897 -193.30526733]
[60.77280426 -206.90792847]
[68.53876495 -219.75790405]
[77.62662506 -231.70960999]
[87.93340302 -242.62759399]
[99.34231567 -252.38815308]
[111.72409821 -260.88070679]
[124.93845367 -268.00903320]
[138.83564758 -273.69235229]
[153.25822449 -277.86627197]
[168.04275513 -280.48348999]
[183.02171326 -281.51434326]
[198.02539062 -280.94717407]
[212.88378906 -278.78839111]
[227.42852783 -275.06246948]
[241.49482727 -269.81161499]
[254.92329407 -263.09533691]
[267.56176758 -254.98973083]
[279.26705933 -245.58662415]
[289.90652466 -234.99258423]
[299.35961914 -223.32763672]
[307.51922607 -210.72395325]
[314.29290771 -197.32434082]
[319.60388184 -183.28063965]
[323.39199829 -168.75196838]
[325.61434937 -153.90295410]
[326.24569702 -138.90184021]
[325.27893066 -123.91860199]
[322.72500610 -109.12300873]
[318.61282349 -94.68270874]
[312.98904419 -80.76132965]
[305.91732788 -67.51659393]
[297.47781372 -55.09859085]
[287.76614380 -43.64801788]
[276.89236450 -33.29462051]
[264.97964478 -24.15571022]
[252.16302490 -16.33483887]
[238.58767700 -9.92062283]
[224.40744019 -4.98573971]
[209.78298950 -1.58610475]
[194.88003540 0.23976076]
[179.86741638 0.47116843]
[164.91526794 -0.89450377]
[150.19297791 -3.84178162]
[145.70252991 10.47030735]
[141.21208191 24.78239632]
[155.12484741 19.17569542]
[168.99949646 24.87603378]
[174.95213318 38.64433670]
[169.60029602 52.65711594]
[155.98504639 58.95195389]
[141.84291077 53.95196915]
[135.20979309 40.49820328]
[129.01629639 54.15985489]
[130.80816650 68.94628143]
[118.06313324 78.32043457]
[111.86964417 91.98208618]
[113.04591370 105.91434479]
[101.79200745 114.21141052]
[95.59851837 127.87305450]
[92.43029785 142.53465271]
[92.43029785 157.53465271]
[92.43029785 172.53465271]
[92.43029785 187.53465271]
[92.43029785 202.53465271]
[92.43029785 217.53465271]
[92.43029785 232.53465271]
[92.43029785 247.53465271]
[92.43029785 262.53466797]
[92.43029785 277.53466797]
[92.43029785 292.53466797]
[92.43029785 307.53466797]
[107.09555817 311.00262451]
[120.56547546 317.75970459]
[132.11363220 327.44146729]
[141.11724854 339.52581787]
[147.09077454 353.36105347]
[149.71206665 368.20108032]
[148.83975220 383.24551392]
[144.52088928 397.68310547]
[136.98838806 410.73526001]
[126.64844513 421.69802856]
[114.05870056 429.98022461]
[99.89809418 435.13522339]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[46 130]
[47 129]
[49 127]
[50 126]
[52 124]
[53 123]
[54 116]
[55 115]
[56 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
