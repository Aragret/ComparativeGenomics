%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCACACUCAGGGGGGGGGGUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAxxxxxxxxxxUACUAGUCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGCCCCCCCCCCGGCUCACUCA\
) } def
/len { sequence length } bind def

/coor [
[80.08840942 366.51666260]
[66.24246979 360.50064087]
[54.53380585 350.97122192]
[45.83127975 338.63555908]
[40.78067780 324.40902710]
[39.75678635 309.34735107]
[42.83558655 294.56817627]
[49.78860855 281.16827393]
[60.09989166 270.14193726]
[73.00427246 262.30743408]
[87.54415894 258.24612427]
[87.54415894 243.24610901]
[87.54415894 228.24610901]
[87.54415894 213.24610901]
[87.54415894 198.24610901]
[87.54415894 183.24610901]
[87.54415894 168.24610901]
[87.54415894 153.24610901]
[87.54415894 138.24610901]
[87.54415894 123.24610901]
[75.74752045 113.98116302]
[61.17481613 117.53591919]
[46.60211563 121.09068298]
[38.36796951 134.31326294]
[23.53853798 137.71070862]
[10.98357391 129.77922058]
[-3.58912921 133.33398438]
[-18.16183281 136.88874817]
[-24.92560959 150.98786926]
[-39.19095993 157.39363098]
[-54.22222519 153.08142090]
[-62.92209625 140.08732605]
[-61.18276215 124.54678345]
[-49.82548523 113.79753876]
[-34.21281815 112.91506195]
[-21.71659470 122.31604004]
[-7.14389086 118.76127625]
[7.42881203 115.20651245]
[14.92138195 102.38478088]
[29.64953613 98.57215118]
[43.04735184 106.51798248]
[57.62005615 102.96321869]
[72.19275665 99.40845490]
[57.69976425 95.54152679]
[43.55164719 90.55848694]
[33.70228577 79.24521637]
[30.71474838 64.54573822]
[35.36647797 50.28525162]
[46.44696426 40.17472458]
[61.07276917 36.84518051]
[75.43785858 41.16306305]
[85.80405426 52.00473785]
[89.47381592 66.54695892]
[95.25941467 80.38628387]
[96.81700134 65.46736908]
[98.37458038 50.54845810]
[99.93215942 35.62954330]
[101.48973846 20.71063232]
[102.58105469 5.75038338]
[103.20503235 -9.23663235]
[103.82901001 -24.22364807]
[103.67297363 -39.22283554]
[102.73734283 -54.19363022]
[101.80171204 -69.16442108]
[100.86608887 -84.13520813]
[86.26017761 -88.12846375]
[73.74365997 -96.64994812]
[64.67424774 -108.77531433]
[60.03571320 -123.18928528]
[60.33121109 -138.32835388]
[65.52868652 -152.55033875]
[75.06436157 -164.31256104]
[87.90387726 -172.33911133]
[102.65448761 -175.75936890]
[117.71617126 -174.20230103]
[131.45513916 -167.83680725]
[142.38110352 -157.35337830]
[149.30888367 -143.88919067]
[151.48699951 -128.90470886]
[148.67921448 -114.02536774]
[141.19007874 -100.86514282]
[129.83193970 -90.85157013]
[115.83687592 -85.07083893]
[116.77250671 -70.10005188]
[117.70813751 -55.12925720]
[118.64376068 -40.15846634]
[130.60275269 -49.21288681]
[145.18928528 -45.71530151]
[151.74177551 -32.22216034]
[145.47090149 -18.59586334]
[130.96014404 -14.79612446]
[118.81602478 -23.59967232]
[118.19204712 -8.61265564]
[117.56806946 6.37436056]
[119.73263550 9.23480225]
[120.58339691 13.30639744]
[119.55718231 17.94312668]
[116.40865326 22.26821327]
[114.85107422 37.18712616]
[113.29349518 52.10603714]
[111.73590851 67.02494812]
[110.17832947 81.94386292]
[118.69774628 69.59803009]
[121.39781189 54.84304047]
[129.71507263 42.36012268]
[142.29231262 34.18621063]
[157.07722473 31.65510559]
[171.65722656 35.17983246]
[183.65316772 44.18523026]
[191.10758972 57.20181656]
[192.80409241 72.10556793]
[188.46585083 86.46452332]
[178.80075073 97.93561554]
[165.38594055 104.64701080]
[150.41041565 105.50355530]
[136.32020569 100.36693573]
[121.36069489 101.46832275]
[135.01693726 107.67373657]
[148.67317200 113.87914276]
[162.10321045 106.10649872]
[177.53344727 107.74575043]
[189.03067017 118.16657257]
[192.17395020 133.36195374]
[185.75462341 147.48893738]
[172.24107361 155.11543274]
[156.82951355 153.30889893]
[145.44602966 142.76396179]
[142.46777344 127.53538513]
[128.81152344 121.32997131]
[115.15528870 115.12456512]
[102.54415894 123.24610901]
[102.54415894 138.24610901]
[102.54415894 153.24610901]
[102.54415894 168.24610901]
[102.54415894 183.24610901]
[102.54415894 198.24610901]
[102.54415894 213.24610901]
[102.54415894 228.24610901]
[102.54415894 243.24610901]
[102.54415894 258.24612427]
[117.08404541 262.30743408]
[129.98843384 270.14193726]
[140.29971313 281.16827393]
[147.25273132 294.56817627]
[150.33152771 309.34735107]
[149.30764771 324.40902710]
[144.25703430 338.63555908]
[135.55451965 350.97122192]
[123.84585571 360.50064087]
[109.99991608 366.51666260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 43]
[22 42]
[23 41]
[26 38]
[27 37]
[28 36]
[54 102]
[55 101]
[56 100]
[57 99]
[58 98]
[59 94]
[60 93]
[61 92]
[62 86]
[63 85]
[64 84]
[65 83]
[117 130]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
