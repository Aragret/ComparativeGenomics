%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUUCUUAGGGGGGGGGGACAACAUACCCAUGGCCAACCUCCUACUCCUCAUUGUACCCAUUCUAAUCxxxxxxxxxxUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCCCCCCCCCCCUCUUCCUA\
) } def
/len { sequence length } bind def

/coor [
[82.03127289 441.72830200]
[68.18534088 435.71228027]
[56.47667694 426.18286133]
[47.77415085 413.84719849]
[42.72354889 399.62066650]
[41.69965744 384.55899048]
[44.77845764 369.77984619]
[51.73147964 356.37991333]
[62.04276276 345.35357666]
[74.94714355 337.51907349]
[89.48703003 333.45776367]
[89.48703003 318.45776367]
[89.48703003 303.45776367]
[89.48703003 288.45776367]
[89.48703003 273.45776367]
[89.48703003 258.45776367]
[89.48703003 243.45774841]
[89.48703003 228.45774841]
[89.48703003 213.45774841]
[89.48703003 198.45774841]
[86.32144928 191.72538757]
[89.64631653 183.14651489]
[89.95837402 168.14974976]
[81.79489136 159.16839600]
[81.97132874 146.63093567]
[90.94040680 137.30303955]
[91.56438446 122.31602478]
[92.18836212 107.32901001]
[90.78605652 92.39470673]
[87.23130035 77.82199860]
[83.52513885 63.28706360]
[79.81897736 48.75212860]
[76.11281586 34.21719360]
[72.25565338 19.72159576]
[68.24791718 5.26690722]
[64.24017334 -9.18778133]
[49.46282578 -6.54875088]
[34.50328827 -5.30510521]
[19.49302292 -5.46777344]
[4.56394911 -7.03532553]
[-10.15273571 -9.99398613]
[-24.52769661 -14.31775284]
[-38.43460464 -19.96862793]
[-51.75123978 -26.89695168]
[-64.36058044 -35.04183578]
[-76.15180206 -44.33169937]
[-87.02128601 -54.68489838]
[-96.87350464 -66.01045227]
[-105.62187958 -78.20883179]
[-113.18952942 -91.17282867]
[-119.50994110 -104.78851318]
[-124.52758026 -118.93622589]
[-128.19833374 -133.49163818]
[-130.48995972 -148.32682800]
[-131.38230896 -163.31143188]
[-130.86753845 -178.31373596]
[-128.95018005 -193.20193481]
[-125.64707947 -207.84515381]
[-120.98725891 -222.11473083]
[-115.01168060 -235.88523865]
[-107.77285004 -249.03565979]
[-99.33439636 -261.45043945]
[-89.77046204 -273.02047729]
[-79.16510773 -283.64407349]
[-67.61153412 -293.22790527]
[-55.21127701 -301.68768311]
[-42.07331085 -308.94912720]
[-28.31309700 -314.94836426]
[-14.05156136 -319.63272095]
[0.58596092 -322.96096802]
[15.47083187 -324.90393066]
[30.47224045 -325.44448853]
[45.45835114 -324.57791138]
[60.29746246 -322.31179810]
[74.85916138 -318.66607666]
[89.01548004 -313.67276001]
[102.64201355 -307.37576294]
[115.61900330 -299.83041382]
[127.83239746 -291.10302734]
[139.17488098 -281.27029419]
[149.54675293 -270.41864014]
[158.85687256 -258.64340210]
[167.02342224 -246.04809570]
[173.97463989 -232.74337769]
[179.64941406 -218.84620667]
[183.99789429 -204.47871399]
[186.98184204 -189.76713562]
[188.57507324 -174.84077454]
[188.76353455 -159.83081055]
[187.54562378 -144.86915588]
[184.93199158 -130.08729553]
[180.94564819 -115.61512756]
[175.62161255 -101.57984924]
[169.00666809 -88.10479736]
[161.15895081 -75.30840302]
[152.14744568 -63.30310822]
[142.05131531 -52.19443130]
[130.95930481 -42.07999420]
[118.96889496 -33.04868317]
[106.18546295 -25.17987061]
[92.72133636 -18.54270554]
[78.69486237 -13.19552135]
[82.70259857 1.25916708]
[86.71034241 15.71385574]
[91.55960846 21.35568619]
[90.64775085 30.51103210]
[94.35391235 45.04596710]
[98.06007385 59.58090210]
[101.76623535 74.11583710]
[106.49707794 79.85733032]
[105.39495087 88.99172211]
[110.87963104 75.03041077]
[121.48899078 64.42656708]
[135.45315552 58.94916534]
[150.44259644 59.51194382]
[163.95672607 66.02102661]
[173.74110413 77.39055634]
[178.16345215 91.72383118]
[176.48603821 106.62974548]
[168.98867798 119.62165833]
[156.92213440 128.53222656]
[142.29933167 131.87495422]
[127.55971527 129.09222412]
[115.16217041 120.64824677]
[107.17537689 107.95298767]
[106.55139923 122.94000244]
[105.92742157 137.92701721]
[114.84920502 154.00128174]
[104.95512390 168.46180725]
[104.64306641 183.45855713]
[104.48703003 198.45774841]
[104.48703003 213.45774841]
[104.48703003 228.45774841]
[104.48703003 243.45774841]
[104.48703003 258.45776367]
[104.48703003 273.45776367]
[104.48703003 288.45776367]
[104.48703003 303.45776367]
[104.48703003 318.45776367]
[104.48703003 333.45776367]
[119.02691650 337.51907349]
[131.93130493 345.35357666]
[142.24258423 356.37991333]
[149.19560242 369.77984619]
[152.27439880 384.55899048]
[151.25051880 399.62066650]
[146.19990540 413.84719849]
[137.49739075 426.18286133]
[125.78872681 435.71228027]
[111.94278717 441.72830200]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[26 127]
[27 126]
[28 125]
[29 111]
[30 109]
[31 108]
[32 107]
[33 106]
[34 104]
[35 103]
[36 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
