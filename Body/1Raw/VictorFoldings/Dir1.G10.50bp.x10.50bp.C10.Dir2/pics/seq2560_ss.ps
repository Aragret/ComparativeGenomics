%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAUUAACAGGGGGGGGGGGCCCAAUAUCUACAAUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACxxxxxxxxxxUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACACCCCCCCCCCACAAUUAUCA\
) } def
/len { sequence length } bind def

/coor [
[107.25738525 412.90826416]
[93.41144562 406.89224243]
[81.70278168 397.36282349]
[73.00025940 385.02716064]
[67.94965363 370.80062866]
[66.92576599 355.73895264]
[70.00456238 340.95977783]
[76.95758820 327.55984497]
[87.26886749 316.53353882]
[100.17324829 308.69900513]
[114.71313477 304.63769531]
[114.71313477 289.63769531]
[114.71313477 274.63769531]
[114.71313477 259.63769531]
[114.71313477 244.63771057]
[114.71313477 229.63771057]
[114.71313477 214.63771057]
[114.71313477 199.63771057]
[114.71313477 184.63771057]
[114.71313477 169.63771057]
[112.22801971 154.84500122]
[107.32646942 140.66844177]
[102.42491913 126.49188232]
[97.52336884 112.31532288]
[101.44356537 126.79399872]
[95.56371307 140.59353638]
[82.40567780 147.79533386]
[67.61291504 145.31056213]
[57.53002548 134.20491028]
[56.48155212 119.24160004]
[64.91718292 106.83837128]
[79.21877289 102.31494904]
[65.83248901 95.54682922]
[52.44620132 88.77871704]
[43.09313965 100.57299805]
[31.55714226 110.24282837]
[18.31060028 117.39223480]
[3.89595103 121.72845459]
[-11.09653473 123.07391357]
[-26.05292320 121.37352753]
[-40.36075974 116.69691467]
[-53.43414688 109.23558807]
[-64.73773956 99.29508209]
[-73.80866241 87.28245544]
[-80.27546692 73.68961334]
[-83.87333679 59.07317352]
[-84.45494843 44.03167725]
[-81.99648285 29.18106079]
[-76.59860992 15.12944698]
[-68.48237610 2.45223999]
[-57.98012543 -8.33143520]
[-45.52192688 -16.77999496]
[-31.61793137 -22.54747581]
[-16.83750153 -25.39770126]
[-1.78588641 -25.21395874]
[12.92056084 -22.00377083]
[26.67961884 -15.89859390]
[38.92786407 -7.14843082]
[49.16374207 3.88840532]
[56.96809006 16.75996208]
[62.02133560 30.93915939]
[64.11654663 45.84536362]
[63.16792679 60.86817932]
[59.21431732 75.39243317]
[72.60060120 82.16054535]
[85.98688507 88.92866516]
[100.39910126 84.77077484]
[89.61077881 74.87284088]
[80.97509766 63.05605698]
[74.82563019 49.78015518]
[71.39924622 35.56116867]
[70.82701111 20.95135880]
[73.12918091 6.51777363]
[78.21449280 -7.17975903]
[85.88375854 -19.61034966]
[95.83768463 -30.29262161]
[107.68856812 -38.81335068]
[120.97535706 -44.84345627]
[135.18161011 -48.15069962]
[149.75556946 -48.60863495]
[164.13160706 -46.20144653]
[177.75213623 -41.02447891]
[185.74205017 -53.71940994]
[193.73196411 -66.41433716]
[201.72189331 -79.10926819]
[209.71180725 -91.80419922]
[217.70172119 -104.49913025]
[221.02142334 -121.12488556]
[237.91642761 -122.53739166]
[243.95072937 -106.69367218]
[230.39665222 -96.50920868]
[222.40673828 -83.81427765]
[214.41680908 -71.11935425]
[206.42689514 -58.42442322]
[198.43698120 -45.72949219]
[190.44706726 -33.03456116]
[201.54048157 -22.36769485]
[210.18963623 -9.63145733]
[216.01817322 4.62411499]
[218.77160645 19.78278732]
[218.32847595 35.18876648]
[214.70561218 50.17506790]
[208.05757141 64.09239197]
[198.67005920 76.33725739]
[186.94758606 86.37816620]
[173.39611816 93.77869415]
[158.60115051 98.21641541]
[143.20249939 99.49699402]
[127.86655426 97.56266785]
[113.25750732 92.49485779]
[111.69992828 107.41377258]
[116.60147858 121.59033203]
[121.50302887 135.76689148]
[126.40457916 149.94345093]
[129.88067627 135.35177612]
[138.05734253 122.77632141]
[149.98390198 113.67922211]
[164.27365112 109.11817932]
[179.26513672 109.62351227]
[193.21530151 115.13646698]
[204.50219727 125.01605225]
[211.81347656 138.11357117]
[214.29908752 152.90620422]
[211.67001343 167.67399597]
[204.23193359 180.69993591]
[192.84968567 190.46949768]
[178.84664917 195.84678650]
[163.85096741 196.20657349]
[149.60617065 191.50704956]
[137.76847839 182.29460144]
[129.71313477 169.63771057]
[129.71313477 184.63771057]
[129.71313477 199.63771057]
[129.71313477 214.63771057]
[129.71313477 229.63771057]
[129.71313477 244.63771057]
[129.71313477 259.63769531]
[129.71313477 274.63769531]
[129.71313477 289.63769531]
[129.71313477 304.63769531]
[144.25302124 308.69900513]
[157.15740967 316.53353882]
[167.46868896 327.55984497]
[174.42170715 340.95977783]
[177.50050354 355.73895264]
[176.47662354 370.80062866]
[171.42601013 385.02716064]
[162.72349548 397.36282349]
[151.01483154 406.89224243]
[137.16889954 412.90826416]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 114]
[22 113]
[23 112]
[24 111]
[32 66]
[33 65]
[34 64]
[67 110]
[82 96]
[83 95]
[84 94]
[85 93]
[86 92]
[87 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
