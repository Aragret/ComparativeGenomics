%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCACACUGGGGGGGGGGAGCAGAGACCAACCGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACxxxxxxxxxxCAACGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCCCCCCCCCCCUCCCCACACU\
) } def
/len { sequence length } bind def

/coor [
[113.66602325 580.85626221]
[101.10780334 572.50512695]
[91.02158356 561.29266357]
[84.04138947 547.92376709]
[80.60600281 533.23876953]
[80.93138123 518.16082764]
[84.99706268 503.63769531]
[92.54748535 490.58236694]
[103.10801697 479.81546021]
[116.01480865 472.01382446]
[130.45654297 467.66787720]
[129.83256531 452.68084717]
[129.20858765 437.69384766]
[128.58460999 422.70681763]
[127.96062469 407.71981812]
[127.33664703 392.73278809]
[126.71266937 377.74578857]
[126.08869171 362.75875854]
[125.46471405 347.77175903]
[124.84073639 332.78472900]
[124.21676636 317.79772949]
[122.19442749 302.93466187]
[107.22569275 302.77575684]
[92.72126007 299.03656006]
[79.52533722 291.93026733]
[68.40705109 281.86608887]
[60.01559830 269.42584229]
[54.84235764 255.33026123]
[53.19212723 240.39715576]
[55.16514206 225.49411011]
[60.65102005 211.48799133]
[69.33491516 199.19453430]
[80.71559906 189.33084106]
[94.13436127 182.47355652]
[90.73138428 167.86466980]
[87.32840729 153.25578308]
[83.92543030 138.64688110]
[80.52245331 124.03799438]
[71.50492096 112.05116272]
[58.41176605 104.73205566]
[45.31861115 97.41294861]
[32.22545624 90.09384155]
[19.13230324 82.77473450]
[6.03914833 75.45562744]
[-7.05400610 68.13652802]
[-20.14715958 60.81742096]
[-34.70087433 66.53785706]
[-49.51017380 61.51603317]
[-57.58255768 48.12310028]
[-55.10649109 32.68279266]
[-43.25110245 22.48554993]
[-27.61413956 22.34619904]
[-15.57889938 32.33053589]
[-12.82805443 47.72426605]
[0.26509956 55.04336929]
[13.35825443 62.36247635]
[26.45140839 69.68157959]
[39.54456329 77.00068665]
[52.63771820 84.31979370]
[65.73087311 91.63890076]
[78.82402802 98.95800781]
[85.60816193 87.98384094]
[96.30706787 84.12818146]
[100.01322937 69.59324646]
[103.71939087 55.05831146]
[105.58700562 40.17502975]
[105.58700562 25.17503166]
[91.33433533 20.01390839]
[79.70840454 10.28695679]
[72.11310577 -2.83124399]
[69.46559906 -17.75660896]
[72.08559418 -32.68682861]
[79.65670776 -45.81900406]
[91.26469421 -55.56736374]
[105.50782776 -60.75474548]
[120.66618347 -60.75474548]
[134.90931702 -55.56736374]
[146.51730347 -45.81900406]
[154.08842468 -32.68682861]
[156.70840454 -17.75660896]
[154.06091309 -2.83124399]
[146.46560669 10.28695679]
[134.83967590 20.01390839]
[120.58700562 25.17503166]
[120.58700562 40.17502975]
[129.32423401 27.98237419]
[142.42826843 20.68276787]
[157.39414978 19.67160416]
[171.36099243 25.14217758]
[181.65890503 36.04873276]
[186.31935120 50.30637360]
[184.45141602 65.18961334]
[176.41218567 77.85337067]
[163.73843384 85.87684631]
[148.85289001 87.72627258]
[134.60104370 83.04811859]
[123.70730591 72.73664856]
[118.25432587 58.76447296]
[114.54817200 73.29940796]
[110.84201050 87.83434296]
[116.63156891 108.65471649]
[95.13134003 120.63501740]
[98.53432465 135.24391174]
[101.93730164 149.85279846]
[105.34027863 164.46168518]
[108.74325562 179.07058716]
[123.81098175 179.29225159]
[138.37895203 183.11149597]
[151.60144043 190.30210876]
[162.71192932 200.44229126]
[171.06750488 212.93940735]
[176.18608093 227.06459045]
[177.77420044 241.99530029]
[175.74385071 256.86318970]
[170.21739197 270.80456543]
[161.52008057 283.01065063]
[150.16101074 292.77444458]
[136.80331421 299.53167725]
[143.73573303 286.22973633]
[156.68502808 278.65902710]
[171.67721558 279.14288330]
[184.11140442 287.53280640]
[190.17169189 301.25405884]
[187.99824524 316.09576416]
[178.25807190 327.50320435]
[163.94032288 331.97552490]
[149.43890381 328.14028931]
[139.20378113 317.17373657]
[139.82775879 332.16076660]
[140.45173645 347.14776611]
[141.07571411 362.13479614]
[141.69969177 377.12179565]
[142.32366943 392.10882568]
[142.94764709 407.09582520]
[143.57162476 422.08285522]
[144.19560242 437.06985474]
[144.81958008 452.05688477]
[145.44355774 467.04388428]
[160.19656372 470.17434692]
[173.70719910 476.87609863]
[185.12617493 486.72787476]
[193.73568726 499.11041260]
[198.99453735 513.24530029]
[200.57214355 528.24401855]
[198.36933899 543.16375732]
[192.52458191 557.06665039]
[183.40530396 569.07873535]
[171.58473206 578.44488525]
[157.80592346 584.57635498]
[142.93502808 587.08776855]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 118]
[34 106]
[35 105]
[36 104]
[37 103]
[38 102]
[39 61]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[63 100]
[64 99]
[65 98]
[66 85]
[67 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
