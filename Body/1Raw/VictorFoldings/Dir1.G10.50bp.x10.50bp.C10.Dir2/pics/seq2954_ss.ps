%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAAUUGAUCCGGGGGGGGGGAAUAACUUGACCAACGGAACAAGUUACCCUAGGGAUAACAGCGCAAUCCUxxxxxxxxxxCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCCCCCCCCCCCUCUAUUGAUCC\
) } def
/len { sequence length } bind def

/coor [
[68.79264069 438.08084106]
[56.61543274 429.23208618]
[46.46899033 418.11297607]
[38.76880264 405.17883301]
[33.83018875 390.95932007]
[31.85538292 376.03668213]
[32.92525101 361.02200317]
[36.99597931 346.53015137]
[43.90087891 333.15451050]
[53.35720062 321.44287109]
[64.97770691 311.87475586]
[78.28654480 304.84201050]
[92.73873901 300.63259888]
[91.52396393 285.68185425]
[90.30919647 270.73114014]
[89.09442902 255.78039551]
[87.87966156 240.82966614]
[86.66489410 225.87893677]
[85.45012665 210.92820740]
[84.23535919 195.97747803]
[83.02058411 181.02674866]
[81.80581665 166.07601929]
[80.59104919 151.12528992]
[79.37628174 136.17456055]
[67.89647675 126.51981354]
[52.95882797 127.88603210]
[38.02117538 129.25224304]
[23.08352280 130.61846924]
[8.14587021 131.98468018]
[-6.79178190 133.35089111]
[-21.72943497 134.71711731]
[-36.48431015 145.68861389]
[-52.12698364 137.78958130]
[-67.03387451 139.45826721]
[-82.10207367 147.22909546]
[-93.74050903 134.90095520]
[-85.11599731 120.30458069]
[-68.70255280 124.55136871]
[-53.79566193 122.88269043]
[-45.97264481 113.60806274]
[-33.52558517 112.12627411]
[-23.09565163 119.77946472]
[-8.15799904 118.41324615]
[6.77965355 117.04702759]
[21.71730614 115.68080902]
[36.65495682 114.31459808]
[51.59260941 112.94837952]
[66.53025818 111.58216095]
[69.85704041 86.78638458]
[87.84124756 72.12992096]
[85.41969299 57.32667542]
[82.99813080 42.52342987]
[80.57657623 27.72018433]
[78.15502167 12.91694069]
[75.73345947 -1.88630474]
[60.69857788 -1.93167627]
[45.87623978 -4.45124054]
[31.67081642 -9.37626171]
[18.46984291 -16.57238007]
[6.63344908 -25.84328461]
[-3.51545882 -36.93605423]
[-11.70001125 -49.54806900]
[-17.69692802 -63.33526993]
[-21.34260750 -77.92152405]
[-22.53759384 -92.90891266]
[-21.24928665 -107.88857269]
[-17.51283264 -122.45184326]
[-11.43016529 -136.20141602]
[-3.16722274 -148.76222229]
[7.05057573 -159.79156494]
[18.94448090 -168.98857117]
[32.19001770 -176.10234070]
[46.42583847 -180.93878174]
[61.26357651 -183.36598206]
[76.29845428 -183.31771851]
[91.12030792 -180.79530334]
[105.32478333 -175.86753845]
[118.52436829 -168.66888428]
[130.35897827 -159.39569092]
[140.50575256 -148.30096436]
[148.68786621 -135.68737793]
[154.68212891 -121.89902496]
[158.32499695 -107.31206512]
[159.51708984 -92.32444763]
[158.22590637 -77.34503937]
[154.48664856 -62.78248978]
[148.40132141 -49.03407669]
[140.13597107 -36.47487259]
[129.91604614 -25.44749641]
[118.02036285 -16.25278282]
[104.77346039 -9.14157104]
[90.53670502 -4.30786180]
[92.95826721 10.49538326]
[95.37982178 25.29862785]
[97.80137634 40.10187149]
[100.22293854 54.90511703]
[102.64449310 69.70836639]
[109.53938293 66.96065521]
[117.55149841 65.87847137]
[126.27045441 66.77882385]
[140.11405945 61.00348282]
[153.95767212 55.22814178]
[157.41065979 40.10013962]
[169.11833191 29.91632271]
[184.57884216 28.59257889]
[197.84730530 36.63791275]
[203.82173157 50.95872879]
[200.20483398 66.04838562]
[188.38737488 76.10459900]
[172.91342163 77.26054382]
[159.73301697 69.07174683]
[145.88940430 74.84709167]
[132.04580688 80.62243652]
[133.03102112 88.05744171]
[135.00148010 102.92745209]
[135.98670959 110.36246490]
[150.85671997 112.33291626]
[165.79795837 105.57336426]
[178.96296692 115.35163116]
[176.80871582 131.60867310]
[161.55131531 137.62063599]
[148.88626099 127.20292664]
[134.01625061 125.23247528]
[124.87909698 132.10826111]
[114.63443756 136.02613831]
[104.17041016 136.91625977]
[94.32701111 134.95979309]
[95.54177856 149.91052246]
[96.75654602 164.86125183]
[97.97132111 179.81198120]
[99.18608856 194.76271057]
[100.40085602 209.71343994]
[101.61562347 224.66416931]
[102.83039093 239.61489868]
[104.04515839 254.56562805]
[105.25992584 269.51635742]
[106.47470093 284.46710205]
[107.68946838 299.41781616]
[122.63163757 301.23889160]
[136.90126038 306.03085327]
[149.91398621 313.59747314]
[161.13696289 323.62890625]
[170.11061096 335.71438599]
[176.46746826 349.35897827]
[179.94723511 364.00399780]
[180.40739441 379.04968262]
[177.82911682 393.87997437]
[172.31799316 407.88757324]
[164.09967041 420.49884033]
[153.51071167 431.19738770]
[140.98471069 439.54507446]
[127.03461456 445.20013428]
[112.23165894 447.93093872]
[97.18201447 447.62570190]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[24 127]
[25 48]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
[33 39]
[34 38]
[50 97]
[51 96]
[52 95]
[53 94]
[54 93]
[55 92]
[100 113]
[101 112]
[102 111]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
