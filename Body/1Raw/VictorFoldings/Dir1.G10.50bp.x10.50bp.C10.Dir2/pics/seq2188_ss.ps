%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCCGUCUGGGGGGGGGGAUGUAGCAAAAUAGUGGGAAGAUUUAUAGGUAGAGGCGACAAACCUACCGxxxxxxxxxxAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUAUAAACUAAUCCCCCCCCCCACACCAGUCU\
) } def
/len { sequence length } bind def

/coor [
[83.35079956 462.23245239]
[69.50485992 456.21643066]
[57.79619598 446.68701172]
[49.09367371 434.35134888]
[44.04307175 420.12481689]
[43.01918030 405.06314087]
[46.09797668 390.28399658]
[53.05099869 376.88406372]
[63.36228561 365.85772705]
[76.26666260 358.02322388]
[90.80654907 353.96191406]
[90.80654907 338.96191406]
[90.80654907 323.96191406]
[90.80654907 308.96191406]
[90.80654907 293.96191406]
[90.80654907 278.96191406]
[90.80654907 263.96191406]
[90.80654907 248.96191406]
[90.80654907 233.96191406]
[90.80654907 218.96191406]
[90.80654907 203.96191406]
[90.80654907 188.96191406]
[87.64097595 182.22953796]
[90.96583557 173.65066528]
[91.27789307 158.65391541]
[91.58995056 143.65715027]
[75.50244904 137.10183716]
[63.15500259 124.88217163]
[56.43268967 108.86373901]
[41.43999481 109.33177948]
[26.44729805 109.79981995]
[11.45460320 110.26786804]
[3.61133528 123.55269623]
[-10.17942047 130.46778870]
[-25.51708412 128.80657959]
[-37.50746155 119.09914398]
[-42.32447052 104.44308472]
[-38.43101883 89.51510620]
[-27.06949043 79.07866669]
[-11.86531162 76.46399689]
[2.32992148 82.50543213]
[10.98656082 95.27516937]
[25.97925758 94.80712891]
[40.97195435 94.33908081]
[55.96464920 93.87104034]
[56.17002869 84.75286865]
[58.31172562 75.50365448]
[62.44264221 66.54185486]
[68.52431488 58.30011368]
[59.01596069 46.69877243]
[49.50760269 35.09743118]
[39.99924469 23.49608803]
[30.49088478 11.89474773]
[15.51343822 15.04667854]
[0.78995514 10.86605167]
[-10.29621506 0.31354398]
[-15.19755173 -14.18595505]
[-12.78776360 -29.30056763]
[-3.62060237 -41.55706406]
[10.19738483 -48.13899612]
[25.49092674 -47.53387833]
[38.74567795 -39.88076782]
[46.91579437 -26.93828583]
[48.12384415 -11.68052769]
[42.09222412 2.38638902]
[51.60058594 13.98773003]
[61.10894394 25.58907127]
[70.61730194 37.19041443]
[80.12565613 48.79175568]
[87.59281158 48.09060287]
[84.81042480 33.35091782]
[82.02803040 18.61123276]
[79.24564362 3.87154818]
[71.01821136 -8.67075634]
[74.62052155 -23.23177910]
[87.74680328 -30.49130440]
[101.99519348 -25.80265999]
[108.24558258 -12.16694927]
[102.49678802 1.68830872]
[102.50690460 16.68830490]
[102.51701355 31.68830109]
[102.52712250 46.68829727]
[109.99427795 45.98714828]
[117.17678070 32.81856537]
[124.35929108 19.64998245]
[123.42057037 3.27772355]
[137.27661133 -5.49393845]
[151.67352295 2.35852981]
[151.80097961 18.75718117]
[137.52787781 26.83249092]
[130.34536743 40.00107193]
[123.16285706 53.16965485]
[135.38859558 67.05109406]
[141.15574646 83.18092346]
[155.79924011 79.93009949]
[170.44274902 76.67927551]
[185.08624268 73.42845154]
[199.72975159 70.17761993]
[214.33863831 66.77464294]
[228.91134644 63.21988297]
[243.48403931 59.66511917]
[248.59863281 55.31212616]
[254.28829956 54.38533020]
[258.73681641 56.27903748]
[273.44479370 53.33355331]
[288.15274048 50.38807297]
[300.10421753 39.15888977]
[315.72442627 44.15297699]
[318.94464111 60.23284531]
[306.45220947 70.85690308]
[291.09823608 65.09603119]
[276.39025879 68.04151154]
[261.68231201 70.98699951]
[247.03880310 74.23782349]
[232.46611023 77.79258728]
[217.89340210 81.34734344]
[212.10301208 86.01821136]
[202.98057556 84.82112122]
[188.33706665 88.07195282]
[173.69357300 91.32277679]
[159.05006409 94.57360077]
[144.40657043 97.82442474]
[142.21945190 113.93534851]
[134.38624573 128.18266296]
[121.95448303 138.66105652]
[106.58670044 143.96920776]
[106.27464294 158.96597290]
[105.96258545 173.96272278]
[105.80654907 188.96191406]
[105.80654907 203.96191406]
[105.80654907 218.96191406]
[105.80654907 233.96191406]
[105.80654907 248.96191406]
[105.80654907 263.96191406]
[105.80654907 278.96191406]
[105.80654907 293.96191406]
[105.80654907 308.96191406]
[105.80654907 323.96191406]
[105.80654907 338.96191406]
[105.80654907 353.96191406]
[120.34643555 358.02322388]
[133.25082397 365.85772705]
[143.56210327 376.88406372]
[150.51512146 390.28399658]
[153.59391785 405.06314087]
[152.57003784 420.12481689]
[147.51942444 434.35134888]
[138.81690979 446.68701172]
[127.10824585 456.21643066]
[113.26230621 462.23245239]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 128]
[25 127]
[26 126]
[29 45]
[30 44]
[31 43]
[32 42]
[49 69]
[50 68]
[51 67]
[52 66]
[53 65]
[83 92]
[84 91]
[85 90]
[94 122]
[95 121]
[96 120]
[97 119]
[98 118]
[99 116]
[100 115]
[101 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
