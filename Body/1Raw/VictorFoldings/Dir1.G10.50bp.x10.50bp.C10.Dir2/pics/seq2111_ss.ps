%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGAAUUAAGGGGGGGGGGCUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACCAGAxxxxxxxxxxCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUACCCCCCCCCCAAUAAAUUAA\
) } def
/len { sequence length } bind def

/coor [
[102.69728851 574.06329346]
[88.85134888 568.04724121]
[77.14268494 558.51782227]
[68.44016266 546.18218994]
[63.38956070 531.95562744]
[62.36566925 516.89398193]
[65.44446564 502.11480713]
[72.39749146 488.71487427]
[82.70877075 477.68853760]
[95.61315155 469.85403442]
[110.15303802 465.79272461]
[110.15303802 450.79272461]
[110.15303802 435.79272461]
[110.15303802 420.79272461]
[110.15303802 405.79272461]
[110.15303802 390.79272461]
[110.15303802 375.79272461]
[110.15303802 360.79272461]
[110.15303802 345.79272461]
[110.15303802 330.79272461]
[106.98746490 324.06036377]
[110.31232452 315.48147583]
[110.62438202 300.48474121]
[110.93643951 285.48797607]
[98.12438965 277.89080811]
[90.78646088 264.81369019]
[90.98067474 249.71969604]
[98.75501251 236.66380310]
[112.10762024 229.20355225]
[112.41967010 214.20680237]
[111.17279816 199.25871277]
[108.38047028 184.52090454]
[105.58815002 169.78309631]
[102.79582214 155.04530334]
[100.00350189 140.30749512]
[81.59066010 135.85791016]
[67.24372101 123.48872375]
[60.13137054 105.93179321]
[61.82444382 87.06475830]
[71.94900513 71.05461121]
[63.69671631 58.52865219]
[55.44442749 46.00268936]
[43.94262314 36.37416458]
[30.16024208 30.45420074]
[16.37785912 24.53423691]
[0.16506231 26.99944115]
[-9.86354256 14.02411366]
[-3.39138651 -1.04384029]
[12.92353249 -2.70380139]
[22.29782295 10.75185585]
[36.08020401 16.67181778]
[49.86258698 22.59178162]
[41.28293610 10.28773403]
[35.39418030 -3.50801110]
[32.44407272 -18.21504593]
[32.55672836 -33.21462250]
[35.72740173 -47.87568665]
[41.82270432 -61.58142853]
[50.58619308 -73.75521851]
[61.64917755 -83.88489532]
[74.54621887 -91.54428864]
[88.73472595 -96.41114807]
[103.61775970 -98.28072357]
[118.56916809 -97.07436371]
[132.95993042 -92.84281158]
[146.18460083 -85.76409912]
[157.68679810 -76.13603973]
[166.98260498 -64.36370087]
[173.68092346 -50.94235992]
[177.49996948 -36.43667603]
[178.27906799 -21.45692062]
[175.98541260 -6.63331938]
[170.71553040 7.41047907]
[162.69111633 20.08363152]
[152.24977112 30.85295868]
[139.83078003 39.26537704]
[125.95664215 44.96696854]
[111.21104431 47.71785355]
[96.21436310 47.40229797]
[81.59753418 44.03358078]
[67.97039032 37.75040054]
[76.22267914 50.27636337]
[84.47496796 62.80232239]
[101.67672729 59.72739792]
[118.56336212 64.22158051]
[127.82830811 52.42493820]
[137.09326172 40.62829971]
[146.35820007 28.83165932]
[155.62315369 17.03501892]
[157.40986633 0.73349458]
[172.52767944 -5.62135267]
[185.42466736 4.50779867]
[182.83352661 20.70094681]
[167.41979980 26.29996681]
[158.15484619 38.09660721]
[148.88989258 49.89324951]
[139.62495422 61.68988800]
[130.36000061 73.48652649]
[135.27272034 80.49284363]
[138.59573364 88.37832642]
[140.17927551 96.78758240]
[139.95198059 105.34162140]
[137.92408752 113.65491486]
[134.18701172 121.35280609]
[128.90914917 128.08833313]
[122.32838440 133.55796814]
[114.74131012 137.51516724]
[117.53363037 152.25297546]
[120.32595825 166.99078369]
[123.11827850 181.72857666]
[125.91060638 196.46638489]
[132.92039490 183.20506287]
[145.54795837 175.10910034]
[160.52470398 174.27413940]
[173.97393799 180.91627502]
[182.41436768 193.31623840]
[183.66120911 208.26432800]
[177.39173889 221.89128113]
[165.22877502 230.66978455]
[150.32066345 232.32757568]
[136.52632141 226.43551636]
[127.41642761 214.51885986]
[127.10437012 229.51560974]
[140.13508606 237.52484131]
[147.35957336 250.89285278]
[146.92575073 265.98184204]
[139.05017090 278.74240112]
[125.93318939 285.80004883]
[125.62113190 300.79678345]
[125.30907440 315.79354858]
[125.15303802 330.79272461]
[125.15303802 345.79272461]
[125.15303802 360.79272461]
[125.15303802 375.79272461]
[125.15303802 390.79272461]
[125.15303802 405.79272461]
[125.15303802 420.79272461]
[125.15303802 435.79272461]
[125.15303802 450.79272461]
[125.15303802 465.79272461]
[139.69293213 469.85403442]
[152.59730530 477.68853760]
[162.90859985 488.71487427]
[169.86161804 502.11480713]
[172.94041443 516.89398193]
[171.91651917 531.95562744]
[166.86592102 546.18218994]
[158.16339111 558.51782227]
[146.45472717 568.04724121]
[132.60879517 574.06329346]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[24 128]
[29 123]
[30 122]
[31 111]
[32 110]
[33 109]
[34 108]
[35 107]
[40 83]
[41 82]
[42 81]
[43 52]
[44 51]
[45 50]
[85 98]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
