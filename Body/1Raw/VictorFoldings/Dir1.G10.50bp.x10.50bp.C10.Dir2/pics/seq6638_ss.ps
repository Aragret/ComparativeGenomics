%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACCCCCUGGGGGGGGGGGCCAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACxxxxxxxxxxGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUUCACACGAGCCCCCCCCCCAAAACACCCU\
) } def
/len { sequence length } bind def

/coor [
[85.60566711 376.04656982]
[71.11597443 371.83810425]
[58.20974731 364.02197266]
[47.76694870 353.13113403]
[40.49958420 339.90814209]
[36.90315628 325.25454712]
[37.22287750 310.16943359]
[41.43695068 295.68136597]
[49.25804520 282.77816772]
[60.15291595 272.33956909]
[73.37872314 265.07730103]
[88.03371429 261.48654175]
[88.34577179 246.48979187]
[88.65782928 231.49304199]
[88.96988678 216.49627686]
[89.28194427 201.49952698]
[89.59399414 186.50277710]
[89.90605164 171.50602722]
[90.21810913 156.50926208]
[90.53016663 141.51251221]
[90.84222412 126.51576233]
[91.15428162 111.51900482]
[83.05056763 124.14160156]
[72.38581085 134.68972778]
[59.67486572 142.65414429]
[45.53139114 147.65034485]
[30.63819313 149.43714905]
[15.71427631 147.92828369]
[1.48012614 143.19657898]
[-11.37706947 135.47048950]
[-22.23660088 125.12299347]
[-30.57419586 112.65365601]
[-35.98734283 98.66445160]
[-38.21470261 83.83074188]
[-37.14875031 68.86866760]
[-32.84094238 54.50054932]
[-25.49925423 41.42004395]
[-15.47811794 30.25864410]
[-3.26132846 21.55519295]
[10.56131935 15.72986984]
[25.32250595 13.06390381]
[40.30960083 13.68600178]
[54.79906464 17.56613159]
[68.09139252 24.51696777]
[79.54485321 34.20294571]
[88.60651398 46.15645218]
[94.83889771 59.80040359]
[97.94113159 74.47610474]
[97.76368713 89.47296143]
[105.75360107 76.77803040]
[113.74352264 64.08309937]
[121.73343658 51.38817215]
[122.53594971 35.58733368]
[135.86357117 28.93723679]
[143.85348511 16.24230766]
[151.84339905 3.54737735]
[139.94329834 -5.60259485]
[128.95231628 -15.82671642]
[118.96703339 -27.03513527]
[110.07521820 -39.12935257]
[102.35500336 -52.00307465]
[95.87423706 -65.54317474]
[90.68988037 -79.63064575]
[86.84749603 -94.14169312]
[84.38084412 -108.94879150]
[83.31159973 -123.92180634]
[83.64916992 -138.92915344]
[85.39057922 -153.83894348]
[88.52053070 -168.52015686]
[93.01151276 -182.84376526]
[98.82405853 -196.68386841]
[105.90708923 -209.91886902]
[114.19834900 -222.43243408]
[123.62498474 -234.11460876]
[134.10414124 -244.86271667]
[145.54373169 -254.58229065]
[157.84323120 -263.18792725]
[170.89453125 -270.60400391]
[184.58293152 -276.76531982]
[198.78816223 -281.61776733]
[213.38536072 -285.11865234]
[228.24624634 -287.23724365]
[243.24021912 -287.95492554]
[258.23553467 -287.26538086]
[273.10037231 -285.17465210]
[287.70410156 -281.70114136]
[301.91839600 -276.87536621]
[315.61834717 -270.73971558]
[328.68353271 -263.34814453]
[340.99914551 -254.76559448]
[352.45693970 -245.06748962]
[362.95623779 -234.33906555]
[372.40475464 -222.67459106]
[380.71948242 -210.17658997]
[387.82733154 -196.95491028]
[393.66583252 -183.12571716]
[398.18365479 -168.81056213]
[401.34115601 -154.13525391]
[403.11050415 -139.22874451]
[403.47622681 -124.22206116]
[402.43508911 -109.24707031]
[399.99618530 -94.43537140]
[396.18103027 -79.91713715]
[391.02310181 -65.81996918]
[384.56774902 -52.26773834]
[376.87170410 -39.37955856]
[368.00259399 -27.26868629]
[358.03833008 -16.04155731]
[347.06655884 -5.79683876]
[335.18362427 3.37543750]
[322.49401855 11.39466286]
[309.10922241 18.19036293]
[295.14685059 23.70281410]
[280.72964478 27.88357353]
[265.98431396 30.69589996]
[251.04039001 32.11507416]
[236.02925110 32.12863159]
[221.08280945 30.73644447]
[206.33239746 27.95075226]
[191.90766907 23.79603767]
[177.93539429 18.30880928]
[164.53833008 11.53729343]
[156.54841614 24.23222351]
[148.55850220 36.92715454]
[148.32748413 51.81996536]
[134.42835999 59.37808990]
[126.43844604 72.07302094]
[118.44853210 84.76794434]
[110.45861816 97.46287537]
[106.15103149 111.83106232]
[105.83897400 126.82781219]
[105.52691650 141.82456970]
[105.21485901 156.82131958]
[104.90280914 171.81806946]
[104.59075165 186.81483459]
[104.27869415 201.81158447]
[103.96663666 216.80833435]
[103.65457916 231.80508423]
[103.34252167 246.80184937]
[103.03047180 261.79858398]
[117.52340698 265.99588013]
[130.43566895 273.80203247]
[140.88687134 284.68478394]
[148.16444397 297.90219116]
[151.77218628 312.55300903]
[151.46411133 327.63833618]
[147.26123047 342.12966919]
[139.45010376 355.03890991]
[128.56330872 365.48593140]
[115.34310150 372.75839233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[49 129]
[50 128]
[51 127]
[52 126]
[54 124]
[55 123]
[56 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
