%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGACAACGGGGGGGGGGAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUxxxxxxxxxxUAAUUUUAAUAAUCAACACCCUCCUAGCCUUACUACUAAUAAUUAUUACACCCCCCCCCCUUUUGACUAC\
) } def
/len { sequence length } bind def

/coor [
[107.95729065 372.20895386]
[94.11135864 366.19293213]
[82.40269470 356.66351318]
[73.70017242 344.32781982]
[68.64956665 330.10131836]
[67.62567902 315.03964233]
[70.70447540 300.26046753]
[77.65749359 286.86053467]
[87.96878052 275.83419800]
[100.87316132 267.99969482]
[115.41304779 263.93838501]
[115.41304779 248.93838501]
[115.41304779 233.93838501]
[115.41304779 218.93838501]
[115.41304779 203.93838501]
[115.41304779 188.93838501]
[115.41304779 173.93838501]
[115.41304779 158.93838501]
[115.41304779 143.93838501]
[115.41304779 128.93838501]
[109.10748291 124.87761688]
[96.49636078 116.75607300]
[90.19079590 112.69530487]
[76.53455353 118.90071106]
[71.21888733 133.78422546]
[56.90033340 140.47412109]
[42.07384491 135.00140381]
[35.53570938 120.61292267]
[41.16488647 105.84512329]
[55.62168503 99.45947266]
[70.32914734 105.24446869]
[83.98538208 99.03906250]
[93.49374390 87.43772125]
[96.89672089 72.82882690]
[100.29969788 58.21993637]
[103.70267487 43.61104202]
[107.10565948 29.00215149]
[110.50863647 14.39325809]
[113.91161346 -0.21563435]
[99.58726501 -4.69004393]
[85.63248444 -10.21012974]
[72.12348938 -16.74574280]
[59.13405991 -24.26118660]
[46.73513794 -32.71541214]
[34.99444580 -42.06225204]
[23.97610474 -52.25064850]
[13.74029827 -63.22495651]
[4.34292889 -74.92523956]
[-4.16467762 -87.28759766]
[-11.73605442 -100.24450684]
[-18.32984924 -113.72519684]
[-23.91004944 -127.65605164]
[-28.44617653 -141.96096802]
[-31.91345406 -156.56182861]
[-34.29294968 -171.37889099]
[-35.57166290 -186.33122253]
[-35.74261093 -201.33715820]
[-34.80485916 -216.31472778]
[-32.76353073 -231.18215942]
[-29.62977219 -245.85821533]
[-25.42070389 -260.26275635]
[-20.15931129 -274.31710815]
[-13.87433243 -287.94451904]
[-6.60009241 -301.07055664]
[1.62367868 -313.62350464]
[10.75206470 -325.53485107]
[20.73520851 -336.73950195]
[31.51858711 -347.17623901]
[43.04330063 -356.78811646]
[55.24641037 -365.52261353]
[68.06125641 -373.33203125]
[81.41786194 -380.17370605]
[95.24327087 -386.01025391]
[109.46196747 -390.80981445]
[123.99629211 -394.54620361]
[138.76687622 -397.19897461]
[153.69303894 -398.75363159]
[168.69325256 -399.20172119]
[183.68559265 -398.54077148]
[198.58818054 -396.77441406]
[213.31962585 -393.91226196]
[227.79945374 -389.96997070]
[241.94859314 -384.96905518]
[255.68975830 -378.93685913]
[268.94790649 -371.90631104]
[281.65063477 -363.91580200]
[293.72854614 -355.00897217]
[305.11566162 -345.23449707]
[315.74981689 -334.64572144]
[325.57290649 -323.30050659]
[334.53131104 -311.26080322]
[342.57608032 -298.59237671]
[349.66329956 -285.36444092]
[355.75421143 -271.64920044]
[360.81558228 -257.52157593]
[364.81979370 -243.05873108]
[367.74493408 -228.33967590]
[369.57501221 -213.44477844]
[370.30007935 -198.45539856]
[369.91616821 -183.45339966]
[368.42535400 -168.52073669]
[365.83578491 -153.73893738]
[362.16162109 -139.18875122]
[357.42291260 -124.94966125]
[351.64556885 -111.09941864]
[344.86108398 -97.71367645]
[337.10656738 -84.86553192]
[328.42434692 -72.62517548]
[318.86184692 -61.05945587]
[308.47131348 -50.23153305]
[297.30947876 -40.20055389]
[285.43728638 -31.02130127]
[272.91961670 -22.74391174]
[259.82482910 -15.41359234]
[246.22444153 -9.07038021]
[232.19270325 -3.74891949]
[217.80630493 0.52172488]
[203.14378357 3.71822834]
[188.28521729 5.82313204]
[173.31179810 6.82494020]
[158.30526733 6.71818066]
[143.34761047 5.50343704]
[128.52050781 3.18734360]
[125.11752319 17.79623604]
[121.71454620 32.40512848]
[118.31156921 47.01402283]
[114.90859222 61.62291336]
[111.50561523 76.23180389]
[108.10263824 90.84069824]
[127.07977295 98.83514404]
[130.41305542 128.93838501]
[130.41305542 143.93838501]
[130.41305542 158.93838501]
[130.41305542 173.93838501]
[130.41305542 188.93838501]
[130.41305542 203.93838501]
[130.41305542 218.93838501]
[130.41305542 233.93838501]
[130.41305542 248.93838501]
[130.41305542 263.93838501]
[144.95294189 267.99969482]
[157.85731506 275.83419800]
[168.16859436 286.86053467]
[175.12162781 300.26046753]
[178.20042419 315.03964233]
[177.17652893 330.10131836]
[172.12593079 344.32781982]
[163.42340088 356.66351318]
[151.71473694 366.19293213]
[137.86880493 372.20895386]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 32]
[24 31]
[33 129]
[34 128]
[35 127]
[36 126]
[37 125]
[38 124]
[39 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
