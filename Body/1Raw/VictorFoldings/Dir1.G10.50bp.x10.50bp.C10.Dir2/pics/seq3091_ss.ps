%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUUCACAAGGGGGGGGGGAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCCACAxxxxxxxxxxAACCAGUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUACCCCCCCCCCUACUUCACAA\
) } def
/len { sequence length } bind def

/coor [
[106.35852051 361.90408325]
[92.51258087 355.88806152]
[80.80391693 346.35864258]
[72.10139465 334.02297974]
[67.05078888 319.79644775]
[66.02690125 304.73477173]
[69.10569763 289.95562744]
[76.05872345 276.55569458]
[86.37000275 265.52935791]
[99.27438354 257.69485474]
[113.81427002 253.63352966]
[113.81427002 238.63352966]
[113.81427002 223.63352966]
[113.81427002 208.63352966]
[113.81427002 193.63352966]
[113.81427002 178.63352966]
[113.81427002 163.63352966]
[113.81427002 148.63352966]
[113.81427002 133.63352966]
[113.81427002 118.63352966]
[101.33286285 129.06820679]
[81.81523895 129.90715027]
[67.91268158 135.53910828]
[54.01012421 141.17106628]
[50.40096283 156.26257324]
[38.58866501 166.32484436]
[23.11530113 167.48872375]
[9.93069458 159.30668640]
[4.10459518 144.92488098]
[7.87725687 129.87341309]
[19.79801559 119.93988037]
[35.28309631 118.94392395]
[48.37816620 127.26850891]
[62.28072357 121.63655090]
[76.18328094 116.00459290]
[75.87129211 108.51108551]
[62.58015060 101.55798340]
[75.24731445 93.52407074]
[74.93532562 86.03056335]
[60.61272812 81.57374573]
[46.29013062 77.11692810]
[33.23184967 85.72014618]
[17.70462990 83.86554718]
[7.03995419 72.42882538]
[6.27335262 56.81003952]
[15.76679230 44.38391495]
[31.03775978 41.01767731]
[44.87577438 48.30076981]
[50.74694443 62.79433060]
[65.06954193 67.25114441]
[79.39214325 71.70796204]
[95.66043091 68.24488831]
[110.19351959 72.74510193]
[119.67176819 82.77500916]
[122.60866547 94.81436157]
[132.35632324 83.41333771]
[142.10397339 72.01232147]
[151.85162354 60.61129761]
[161.59927368 49.21027756]
[171.34692383 37.80925751]
[165.90596008 18.98219109]
[172.82940674 0.85671282]
[189.10633850 -9.34177208]
[189.10633850 -24.34177208]
[189.10633850 -39.34177017]
[174.60881042 -43.58425140]
[161.89453125 -51.74046326]
[151.99418640 -63.14921951]
[145.71034241 -76.88566589]
[143.55241394 -91.83625031]
[145.69532776 -106.78900146]
[151.96536255 -120.53175354]
[161.85424805 -131.95045471]
[174.56033325 -140.11943054]
[189.05357361 -144.37648010]
[204.15908813 -144.37648010]
[218.65234375 -140.11943054]
[231.35842896 -131.95045471]
[241.24729919 -120.53175354]
[247.51734924 -106.78900146]
[249.66026306 -91.83625031]
[247.50231934 -76.88566589]
[241.21847534 -63.14921951]
[231.31813049 -51.74046326]
[218.60385132 -43.58425140]
[204.10633850 -39.34177017]
[204.10633850 -24.34177208]
[204.10633850 -9.34177208]
[213.94093323 -4.79807425]
[221.52967834 2.93337059]
[235.65447998 -2.11538577]
[249.77928162 -7.16414213]
[263.90408325 -12.21289825]
[278.02890015 -17.26165581]
[281.48461914 -21.34546852]
[285.74606323 -23.44128227]
[289.90328979 -23.57966042]
[293.19522095 -22.15463257]
[307.60745239 -26.31251907]
[315.28442383 -39.86618042]
[329.95968628 -43.87756348]
[342.83370972 -36.47521210]
[357.24594116 -40.63309860]
[371.65814209 -44.79098511]
[382.63482666 -56.97476959]
[398.61611938 -53.29639435]
[403.16183472 -37.53985977]
[391.59573364 -25.91413307]
[375.81604004 -30.37877083]
[361.40380859 -26.22088242]
[346.99160767 -22.06299591]
[340.03887939 -8.94067574]
[325.48208618 -4.51867867]
[311.76531982 -11.90030384]
[297.35311890 -7.74241638]
[283.07763672 -3.13685179]
[268.95285034 1.91190445]
[254.82804871 6.96066093]
[240.70324707 12.00941753]
[226.57843018 17.05817413]
[225.21846008 29.72340012]
[218.71611023 40.76700211]
[208.17398071 48.19005966]
[195.43234253 50.61846542]
[182.74795532 47.55690765]
[173.00028992 58.95792770]
[163.25263977 70.35894775]
[153.50498962 81.75997162]
[143.75733948 93.16099548]
[134.00968933 104.56201172]
[128.81427002 118.63352966]
[128.81427002 133.63352966]
[128.81427002 148.63352966]
[128.81427002 163.63352966]
[128.81427002 178.63352966]
[128.81427002 193.63352966]
[128.81427002 208.63352966]
[128.81427002 223.63352966]
[128.81427002 238.63352966]
[128.81427002 253.63352966]
[143.35415649 257.69485474]
[156.25854492 265.52935791]
[166.56982422 276.55569458]
[173.52284241 289.95562744]
[176.60163879 304.73477173]
[175.57775879 319.79644775]
[170.52714539 334.02297974]
[161.82463074 346.35864258]
[150.11596680 355.88806152]
[136.27001953 361.90408325]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 35]
[23 34]
[24 33]
[39 51]
[40 50]
[41 49]
[55 130]
[56 129]
[57 128]
[58 127]
[59 126]
[60 125]
[63 88]
[64 87]
[65 86]
[90 120]
[91 119]
[92 118]
[93 117]
[94 116]
[98 115]
[99 114]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
