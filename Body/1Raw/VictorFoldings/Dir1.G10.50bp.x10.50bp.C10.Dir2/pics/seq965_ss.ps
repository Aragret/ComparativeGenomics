%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUAGUAAGGGGGGGGGGGAUUACACAUGCAAGCAUCCCCGUUCCAGUGAGUUCACCCUCUAAAUCACxxxxxxxxxxAAACAGACCUAAAAUCGCUCAUUGCAUACUCUUCAAUCAGCCACAUAGCCCCCCCCCCCCCUCGUAGUAA\
) } def
/len { sequence length } bind def

/coor [
[93.05236053 394.10739136]
[79.83216858 386.83493042]
[68.94535828 376.38793945]
[61.13423157 363.47866821]
[56.93135071 348.98736572]
[56.62327576 333.90203857]
[60.23101807 319.25119019]
[67.50859070 306.03381348]
[77.95980072 295.15103149]
[90.87206268 287.34490967]
[105.36499786 283.14761353]
[105.05294037 268.15084839]
[104.74088287 253.15409851]
[104.42882538 238.15734863]
[104.11677551 223.16059875]
[103.80471802 208.16384888]
[103.49266052 193.16708374]
[103.18060303 178.17033386]
[102.86854553 163.17358398]
[102.55648804 148.17683411]
[102.24443817 133.18006897]
[91.66395569 131.39674377]
[82.44627380 126.41195679]
[75.50238037 118.90135956]
[71.45844269 109.77927399]
[70.60108185 100.08926392]
[72.86203766 90.88541412]
[77.84232330 83.11770630]
[84.87135315 77.53405762]
[80.26579285 63.25859451]
[75.66022491 48.98313141]
[71.05466461 34.70767212]
[66.44909668 20.43221092]
[61.84353256 6.15675116]
[57.92697906 20.63641357]
[49.12596893 32.78310776]
[36.58661270 41.01502991]
[21.94185066 44.26017380]
[7.09880066 42.09594727]
[-6.00959826 34.80418015]
[-15.67630386 23.33444405]
[-20.64246750 9.18039131]
[-20.26136971 -5.81476736]
[-14.58263779 -19.69828224]
[-4.34578800 -30.66217422]
[9.11608601 -37.27866364]
[24.04990959 -38.68612289]
[38.51092148 -34.70125961]
[50.61593628 -25.84300804]
[58.78789139 -13.26657104]
[58.78789139 -28.26657104]
[58.78789139 -43.26657104]
[58.78789139 -58.26657104]
[43.90383911 -60.31076813]
[29.43678665 -64.36270142]
[15.65624905 -70.34689331]
[2.81894779 -78.15185547]
[-8.83596611 -87.63219452]
[-19.09136772 -98.61128235]
[-27.75620651 -110.88460541]
[-34.66905975 -124.22350311]
[-39.70114899 -138.37948608]
[-42.75872421 -153.08883667]
[-43.78483200 -168.07752991]
[-42.76034927 -183.06632996]
[-39.70436478 -197.77600098]
[-34.67380905 -211.93254089]
[-27.76239586 -225.27218628]
[-19.09888649 -237.54643250]
[-8.84467316 -248.52664185]
[2.80921388 -258.00823975]
[15.64566994 -265.81457520]
[29.42556000 -271.80026245]
[43.89217377 -275.85375977]
[58.77600479 -277.89956665]
[73.79977417 -277.89956665]
[88.68360901 -275.85375977]
[103.15022278 -271.80026245]
[116.93010712 -265.81457520]
[129.76657104 -258.00823975]
[141.42045593 -248.52664185]
[151.67466736 -237.54643250]
[160.33818054 -225.27218628]
[167.24958801 -211.93254089]
[172.28015137 -197.77600098]
[175.33613586 -183.06632996]
[176.36061096 -168.07752991]
[175.33450317 -153.08883667]
[172.27693176 -138.37948608]
[167.24484253 -124.22350311]
[160.33198547 -110.88460541]
[151.66714478 -98.61128235]
[141.41174316 -87.63219452]
[129.75683594 -78.15185547]
[116.91953278 -70.34689331]
[103.13899231 -64.36270142]
[88.67194366 -60.31076813]
[73.78788757 -58.26657104]
[73.78788757 -43.26657104]
[73.78788757 -28.26657104]
[73.78788757 -13.26657104]
[76.11899567 1.55118656]
[80.72455597 15.82664680]
[85.33012390 30.10210800]
[89.93568420 44.37756729]
[94.54125214 58.65303040]
[99.14682007 72.92848969]
[123.67527771 81.29876709]
[132.09335327 108.71615601]
[146.73686218 111.96698761]
[154.86418152 99.17157745]
[166.87954712 89.93000031]
[181.33204651 85.35821533]
[196.47645569 86.00827789]
[210.48402405 91.80171204]
[221.66326904 102.03890991]
[228.66423035 115.48369598]
[230.64154053 130.51254272]
[227.35638428 145.31063843]
[219.20550537 158.09103394]
[207.17312622 167.31045532]
[192.71223450 171.85560608]
[177.56904602 171.17762756]
[163.57217407 165.35839844]
[152.41180420 155.10061646]
[145.43562317 141.64294434]
[143.48603821 126.61048889]
[128.84252930 123.35965729]
[117.24118805 132.86802673]
[117.55324554 147.86477661]
[117.86530304 162.86152649]
[118.17736053 177.85827637]
[118.48941040 192.85504150]
[118.80146790 207.85179138]
[119.11352539 222.84854126]
[119.42558289 237.84529114]
[119.73764038 252.84205627]
[120.04969788 267.83880615]
[120.36174774 282.83557129]
[135.01673889 286.42633057]
[148.24255371 293.68856812]
[159.13742065 304.12716675]
[166.95851135 317.03039551]
[171.17259216 331.51846313]
[171.49230957 346.60354614]
[167.89588928 361.25714111]
[160.62852478 374.48016357]
[150.18571472 385.37100220]
[137.27949524 393.18710327]
[122.78979492 397.39559937]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[29 107]
[30 106]
[31 105]
[32 104]
[33 103]
[34 102]
[50 101]
[51 100]
[52 99]
[53 98]
[109 128]
[110 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
