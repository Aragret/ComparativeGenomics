%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAAAAAUUGGGGGGGGGGUCGGUUGGGGCGACCUCGGAGCAGAACCCAACCUCCGAGCAGUACAUGCUxxxxxxxxxxAAAUAUUAAACACAAACUACCACCUACCUCCCUCACCAAAGCCCAUAAAACCCCCCCCCCAUAAAAAAUU\
) } def
/len { sequence length } bind def

/coor [
[82.64015961 508.66647339]
[68.79422760 502.65045166]
[57.08556366 493.12103271]
[48.38303757 480.78536987]
[43.33243561 466.55883789]
[42.30854416 451.49716187]
[45.38734436 436.71801758]
[52.34036636 423.31808472]
[62.65164948 412.29174805]
[75.55603027 404.45724487]
[90.09591675 400.39593506]
[90.09591675 385.39593506]
[90.09591675 370.39593506]
[90.09591675 355.39593506]
[90.09591675 340.39593506]
[90.09591675 325.39593506]
[90.09591675 310.39593506]
[90.09591675 295.39593506]
[90.09591675 280.39593506]
[90.09591675 265.39593506]
[90.09591675 250.39591980]
[77.28679657 244.98045349]
[67.48680115 235.05221558]
[62.20554733 222.09339905]
[62.27455902 208.05651855]
[67.71652222 195.07020569]
[77.73681641 185.11647034]
[90.83937073 179.72814941]
[91.15142822 164.73139954]
[91.46348572 149.73464966]
[91.77554321 134.73788452]
[79.53903198 129.25254822]
[70.18969727 119.63946533]
[65.04680634 107.25512695]
[64.83604431 93.84703827]
[50.93348694 88.21508026]
[37.03092957 82.58312225]
[23.12837410 76.95117188]
[9.22581863 71.31921387]
[-4.67673731 65.68725586]
[-18.57929420 60.05529785]
[-30.21882439 69.99411011]
[-45.14647675 73.37401581]
[-59.93198395 69.41834259]
[-71.17774963 59.03607941]
[-76.29956818 44.61299133]
[-74.12049866 29.46339607]
[-65.14125824 17.06856155]
[-51.42522812 10.27673054]
[-36.12423706 10.64861488]
[-22.75434685 18.09876060]
[-14.38786221 30.91517448]
[-12.94733715 46.15274429]
[0.95521921 51.78469849]
[14.85777569 57.41665649]
[28.76033211 63.04861450]
[42.66288757 68.68057251]
[56.56544495 74.31252289]
[70.46800232 79.94448090]
[81.86734009 69.24988556]
[96.74305725 64.45066833]
[112.24319458 66.46692657]
[120.23310852 53.77199554]
[108.55774689 44.32624435]
[98.08153534 33.56587982]
[88.95155334 21.64196587]
[81.29596710 8.72189045]
[75.22224426 -5.01296711]
[70.81565857 -19.36979103]
[68.13807678 -34.14703369]
[67.22707367 -49.13724518]
[68.09544373 -64.12998199]
[70.73099518 -78.91477966]
[75.09673309 -93.28408051]
[81.13137054 -107.03615570]
[88.75018311 -119.97794342]
[97.84622192 -131.92778015]
[108.29178619 -142.71789551]
[119.94023895 -152.19680786]
[132.62806702 -160.23146057]
[146.17712402 -166.70904541]
[160.39723206 -171.53863525]
[175.08874512 -174.65245056]
[190.04542542 -176.00674438]
[205.05729675 -175.58251953]
[219.91362000 -173.38572693]
[234.40585327 -169.44721985]
[248.33052063 -163.82226562]
[261.49215698 -156.58984375]
[273.70596313 -147.85150146]
[284.80053711 -137.72988892]
[294.62008667 -126.36709595]
[303.02673340 -113.92264557]
[309.90252686 -100.57125092]
[315.15090942 -86.50032043]
[318.69821167 -71.90740967]
[320.49459839 -56.99737167]
[320.51489258 -41.97951508]
[318.75878906 -27.06467438]
[315.25094604 -12.46222878]
[310.04061890 1.62282765]
[303.20095825 14.99276161]
[294.82794189 27.45988083]
[285.03915405 38.84916687]
[273.97198486 49.00072861]
[261.78179932 57.77205658]
[248.63977051 65.04001617]
[234.73036194 70.70257568]
[220.24884033 74.68024445]
[205.39849854 76.91717529]
[190.38781738 77.38196564]
[175.42753601 76.06809998]
[160.72766113 72.99401093]
[146.49455261 68.20286560]
[132.92803955 61.76191330]
[124.93811798 74.45684052]
[133.38563538 87.36029816]
[135.60173035 102.62296295]
[131.17276001 117.39604187]
[120.92538452 128.92214966]
[106.77229309 135.04994202]
[106.46023560 150.04670715]
[106.14818573 165.04345703]
[105.83612823 180.04020691]
[120.38063812 187.26525879]
[130.29527283 200.05438232]
[133.64338684 215.82702637]
[129.80696106 231.42829895]
[119.59986877 243.75999451]
[105.09591675 250.39591980]
[105.09591675 265.39593506]
[105.09591675 280.39593506]
[105.09591675 295.39593506]
[105.09591675 310.39593506]
[105.09591675 325.39593506]
[105.09591675 340.39593506]
[105.09591675 355.39593506]
[105.09591675 370.39593506]
[105.09591675 385.39593506]
[105.09591675 400.39593506]
[119.63580322 404.45724487]
[132.54019165 412.29174805]
[142.85147095 423.31808472]
[149.80448914 436.71801758]
[152.88328552 451.49716187]
[151.85940552 466.55883789]
[146.80879211 480.78536987]
[138.10627747 493.12103271]
[126.39761353 502.65045166]
[112.55167389 508.66647339]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[28 124]
[29 123]
[30 122]
[31 121]
[35 59]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[41 53]
[62 116]
[63 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
