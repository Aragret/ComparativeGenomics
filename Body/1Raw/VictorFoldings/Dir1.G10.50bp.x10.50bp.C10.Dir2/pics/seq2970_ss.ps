%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUUACCCUAGGGGGGGGGGGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCAUAUCAACAAUAGGGUUUACxxxxxxxxxxCUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGCCCCCCCCCCAAGUCACCCUAG\
) } def
/len { sequence length } bind def

/coor [
[131.34806824 460.30722046]
[117.86096954 453.57211304]
[106.37805176 443.80450439]
[97.56692505 431.57226562]
[91.93984985 417.58657837]
[89.82397461 402.66055298]
[91.34231567 387.66192627]
[96.40660095 373.46276855]
[104.72239685 360.88854980]
[115.80623627 350.67034912]
[129.01371765 343.40219116]
[143.57698059 339.50668335]
[143.27297974 324.50976562]
[142.96896362 309.51284790]
[142.66496277 294.51593018]
[142.36096191 279.51901245]
[142.05696106 264.52209473]
[141.75294495 249.52517700]
[141.44894409 234.52825928]
[141.14494324 219.53132629]
[140.84094238 204.53440857]
[138.26948547 189.75646973]
[133.48989868 175.53833008]
[128.71031189 161.32019043]
[117.32090759 151.72171021]
[120.25763702 136.17546082]
[115.47805023 121.95731354]
[98.65773773 125.44824982]
[84.11763763 118.13008118]
[77.66420746 104.17238617]
[81.09040070 90.10639954]
[71.09115601 78.92538452]
[61.09190750 67.74437714]
[47.32543945 72.06721497]
[31.20546722 64.03227997]
[18.31761169 56.35744476]
[5.42975473 48.68260574]
[-7.45810223 41.00776672]
[-20.34595871 33.33292770]
[-33.23381424 25.65808868]
[-46.12167358 17.98324966]
[-59.00952911 10.30841064]
[-71.89738464 2.63357186]
[-83.43563843 12.43905067]
[-97.53346252 17.96445465]
[-112.66162872 18.61042976]
[-127.17914581 14.30690479]
[-139.51127625 5.52069283]
[-148.32029724 -6.79514170]
[-152.65069580 -21.30467033]
[-152.03271484 -36.43400574]
[-146.53343201 -50.54203415]
[-136.74932861 -62.09842300]
[-123.74172211 -69.84961700]
[-108.92158508 -72.95482635]
[-93.89649963 -71.07722473]
[-80.29626465 -64.42047119]
[-69.59613037 -53.70664978]
[-62.95677948 -40.09791565]
[-61.09838867 -25.07043648]
[-64.22254944 -10.25428486]
[-51.33469009 -2.57944560]
[-38.44683456 5.09539318]
[-25.55897522 12.77023220]
[-12.67111969 20.44507217]
[0.21673697 28.11990929]
[13.10459328 35.79475021]
[25.99245071 43.46958923]
[38.88030624 51.14442825]
[51.92106247 43.73236084]
[51.92106247 28.73236275]
[38.14719391 22.15639877]
[28.59726715 10.25002766]
[25.16742706 -4.62273073]
[28.53867149 -19.50888062]
[38.04163742 -31.45276642]
[51.78950119 -38.08292007]
[67.05261993 -38.08292007]
[80.80048370 -31.45276642]
[90.30345154 -19.50888062]
[93.67469788 -4.62273073]
[90.24485779 10.25002766]
[80.69493103 22.15639877]
[66.92105865 28.73236275]
[66.92105865 43.73236084]
[72.27291870 57.74512863]
[82.27216339 68.92613983]
[92.27141571 80.10715485]
[109.95463562 78.04882050]
[125.24732971 90.82035828]
[137.29261780 81.88105011]
[149.33789062 72.94174957]
[155.80862427 58.50428391]
[170.63993835 57.13261795]
[182.68521118 48.19331360]
[194.73049927 39.25400925]
[194.43859863 23.73968124]
[203.34912109 11.03605080]
[218.03579712 6.02792645]
[232.85128784 10.64103317]
[242.09873962 23.10153770]
[242.22232056 38.61811829]
[233.17451477 51.22433853]
[218.43438721 56.07284546]
[203.66979980 51.29929352]
[191.62452698 60.23859787]
[179.57923889 69.17790222]
[173.97007751 82.97596741]
[158.27720642 84.98703003]
[146.23191833 93.92633057]
[134.18663025 102.86563873]
[129.69618225 117.17772675]
[134.47576904 131.39587402]
[146.20704651 142.01132202]
[142.92845154 156.54060364]
[147.70803833 170.75874329]
[152.48762512 184.97688293]
[156.72372437 182.34819031]
[161.98712158 180.83097839]
[167.98951721 180.70790100]
[174.37516785 182.18894958]
[188.09889221 188.24366760]
[201.44255066 180.32368469]
[216.88990784 181.79299927]
[228.50112915 192.08665466]
[231.81146240 207.24650574]
[225.54801941 221.44329834]
[212.11921692 229.21807861]
[196.68872070 227.58126831]
[185.18984985 217.16226196]
[182.04415894 201.96739197]
[168.32044983 195.91265869]
[155.83786011 204.23040771]
[156.14186096 219.22732544]
[156.44586182 234.22424316]
[156.74986267 249.22116089]
[157.05387878 264.21807861]
[157.35787964 279.21499634]
[157.66188049 294.21191406]
[157.96588135 309.20883179]
[158.26989746 324.20574951]
[158.57389832 339.20266724]
[173.28305054 342.50479126]
[186.77423096 349.23171997]
[198.26306152 358.99237061]
[207.08160400 371.21926880]
[212.71716309 385.20153809]
[214.84208679 400.12628174]
[213.33283997 415.12579346]
[208.27716064 429.32803345]
[199.96899414 441.90728760]
[188.89134216 452.13223267]
[175.68827820 459.40838623]
[161.12738037 463.31271362]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 142]
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 117]
[23 116]
[24 115]
[26 113]
[27 112]
[31 88]
[32 87]
[33 86]
[35 69]
[36 68]
[37 67]
[38 66]
[39 65]
[40 64]
[41 63]
[42 62]
[43 61]
[70 85]
[71 84]
[90 111]
[91 110]
[92 109]
[94 107]
[95 106]
[96 105]
[121 132]
[122 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
