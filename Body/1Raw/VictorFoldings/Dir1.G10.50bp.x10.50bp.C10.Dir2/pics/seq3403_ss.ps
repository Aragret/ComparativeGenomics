%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACGUUGUAGGCCGGGGGGGGGGCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAAAACUCUUCACCAAAxxxxxxxxxxGGCAUUGUAUUAGCAAACUCAUCACUAGACAUCGUACUACACGACACGUACCCCCCCCCCCUACGUUGUAGCCC\
) } def
/len { sequence length } bind def

/coor [
[82.07906342 464.01742554]
[67.71681213 459.51071167]
[54.55592346 452.20483398]
[43.13532639 442.39895630]
[33.92268372 430.49465942]
[27.29525757 416.97943115]
[23.52442741 402.40664673]
[22.76461029 387.37310791]
[25.04692078 372.49438477]
[30.27789688 358.37979126]
[38.24333572 345.60729980]
[48.61705780 334.69992065]
[60.97426605 326.10433960]
[74.80893707 320.17248535]
[89.55455017 317.14730835]
[89.55455017 302.14730835]
[89.55455017 287.14730835]
[89.55455017 272.14730835]
[89.55455017 257.14730835]
[89.55455017 242.14730835]
[89.55455017 227.14730835]
[89.55455017 212.14730835]
[89.55455017 197.14730835]
[89.55455017 182.14730835]
[86.83248901 178.16424561]
[86.62006378 172.41799927]
[89.86261749 166.55763245]
[90.45521545 151.56935120]
[91.04782104 136.58105469]
[91.64041901 121.59276581]
[67.61278534 94.92213440]
[97.52723694 57.66089630]
[89.39497375 45.05667877]
[81.26271057 32.45246124]
[73.13043976 19.84824753]
[59.14715958 12.44700909]
[58.74856186 -2.44226217]
[50.61629486 -15.04647827]
[42.48403168 -27.65069389]
[34.35176468 -40.25490952]
[26.21950150 -52.85912704]
[12.66049576 -46.39524841]
[-1.61379004 -41.71837997]
[-16.36895943 -38.90531921]
[-31.36271667 -38.00225449]
[-46.34885406 -39.02401733]
[-61.08128738 -41.95383072]
[-75.31809235 -46.74358749]
[-88.82548523 -53.31462860]
[-101.38166809 -61.55905533]
[-112.78045654 -71.34148407]
[-122.83467102 -82.50128174]
[-131.37921143 -94.85519409]
[-138.27377319 -108.20035553]
[-143.40513611 -122.31763458]
[-146.68904114 -136.97520447]
[-148.07154846 -151.93237305]
[-147.52998352 -166.94354248]
[-145.07322693 -181.76219177]
[-140.74160767 -196.14501953]
[-134.60627747 -209.85581970]
[-126.76797485 -222.66944885]
[-117.35540771 -234.37551880]
[-106.52313995 -244.78176880]
[-94.44905090 -253.71736145]
[-81.33140564 -261.03552246]
[-67.38560486 -266.61611938]
[-52.84065628 -270.36749268]
[-37.93539810 -272.22805786]
[-22.91459274 -272.16723633]
[-8.02489090 -270.18606567]
[6.48920298 -266.31701660]
[20.38935661 -260.62368774]
[33.44731522 -253.19953918]
[45.44865417 -244.16647339]
[56.19630051 -233.67283630]
[65.51377106 -221.89094543]
[73.24806213 -209.01425171]
[79.27217102 -195.25422668]
[83.48717499 -180.83680725]
[85.82386780 -165.99873352]
[86.24385834 -150.98367310]
[84.74027252 -136.03819275]
[81.33779144 -121.40769958]
[76.09228516 -107.33243561]
[69.08988953 -94.04354095]
[60.44559479 -81.75921631]
[50.30134583 -70.68119812]
[38.82371521 -60.99139023]
[46.95598221 -48.38717651]
[55.08824921 -35.78295898]
[63.22051239 -23.17874336]
[71.35277557 -10.57452774]
[84.75438690 -4.07482719]
[85.73465729 11.71598148]
[93.86692810 24.32019806]
[101.99919128 36.92441177]
[110.13145447 49.52862930]
[103.89749146 35.88539886]
[107.31935120 21.28091812]
[118.96504211 11.82692337]
[133.96102905 11.47976017]
[146.03172302 20.38471031]
[150.12574768 34.81519699]
[144.52983093 48.73229218]
[131.58450317 56.31217575]
[145.48484802 50.67475891]
[155.13183594 37.41324615]
[171.40946960 39.40587234]
[177.57272339 54.60279083]
[167.28137207 67.37071991]
[151.12226868 64.57510376]
[137.22192383 70.21251678]
[138.25593567 77.64089966]
[140.32395935 92.49765778]
[141.35798645 99.92603302]
[156.26950073 101.55290222]
[171.18101501 103.17976379]
[186.09252930 104.80663300]
[199.45024109 95.92119598]
[214.68090820 100.96169281]
[220.10084534 116.06148529]
[211.55235291 129.63729858]
[195.59310913 131.27494812]
[184.46566772 119.71814728]
[169.55415344 118.09127808]
[154.64262390 116.46441650]
[139.73110962 114.83754730]
[128.32095337 122.21197510]
[116.65015411 124.44092560]
[106.62870789 122.18536377]
[106.03610992 137.17366028]
[105.44351196 152.16194153]
[104.85090637 167.15023804]
[104.55455017 182.14730835]
[104.55455017 197.14730835]
[104.55455017 212.14730835]
[104.55455017 227.14730835]
[104.55455017 242.14730835]
[104.55455017 257.14730835]
[104.55455017 272.14730835]
[104.55455017 287.14730835]
[104.55455017 302.14730835]
[104.55455017 317.14730835]
[119.30017090 320.17248535]
[133.13484192 326.10433960]
[145.49205017 334.69992065]
[155.86576843 345.60729980]
[163.83120728 358.37979126]
[169.06217957 372.49438477]
[171.34449768 387.37310791]
[170.58467102 402.40664673]
[166.81384277 416.97943115]
[160.18641663 430.49465942]
[150.97378540 442.39895630]
[139.55317688 452.20483398]
[126.39229584 459.51071167]
[112.03003693 464.01742554]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[27 134]
[28 133]
[29 132]
[30 131]
[32 98]
[33 97]
[34 96]
[35 95]
[37 93]
[38 92]
[39 91]
[40 90]
[41 89]
[106 113]
[107 112]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
