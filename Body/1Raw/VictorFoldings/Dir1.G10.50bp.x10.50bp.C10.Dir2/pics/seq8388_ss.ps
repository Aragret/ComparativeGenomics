%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAACCAUACGGGGGGGGGGACAACACUAAAGGACGAACCUGAUCUCUUAUACUAGUAUCCUUAAUCAUUxxxxxxxxxxACUCAGACCCAAACAUUAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUACCCCCCCCCCAUUACCAUAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 479.94958496]
[71.19830322 473.93356323]
[59.48964310 464.40414429]
[50.78712082 452.06848145]
[45.73651886 437.84197998]
[44.71262741 422.78027344]
[47.79142761 408.00112915]
[54.74444962 394.60119629]
[65.05573273 383.57485962]
[77.96011353 375.74035645]
[92.50000000 371.67904663]
[92.50000000 356.67904663]
[92.50000000 341.67904663]
[92.50000000 326.67904663]
[92.50000000 311.67904663]
[92.50000000 296.67904663]
[92.50000000 281.67904663]
[92.50000000 266.67904663]
[92.50000000 251.67904663]
[92.50000000 236.67904663]
[78.03514099 232.84271240]
[65.04627991 225.38708496]
[54.42181396 214.81518555]
[46.89020538 201.84339905]
[42.97005844 187.35295105]
[42.93439102 172.33004761]
[46.79164505 157.79872131]
[54.28468323 144.75108337]
[64.90794373 134.07952881]
[77.94152832 126.51572418]
[92.50000000 122.58047485]
[92.50000000 107.58047485]
[91.09769440 92.64617157]
[88.30537415 77.90836334]
[78.13434601 65.78974915]
[83.36715698 51.84460831]
[80.57482910 37.10680389]
[77.78250885 22.36899757]
[74.99018097 7.63119221]
[70.28997040 -0.27828491]
[72.29641724 -7.44206953]
[69.81130219 -22.23477745]
[67.32617950 -37.02748489]
[64.84106445 -51.82019043]
[49.84720230 -51.00522232]
[34.85637283 -51.87419510]
[20.05710602 -54.41617203]
[5.63551092 -58.59918594]
[-8.22704124 -64.37063599]
[-21.35621643 -71.65794373]
[-33.58689880 -80.36945343]
[-44.76527786 -90.39560699]
[-54.75077438 -101.61032867]
[-63.41780472 -113.87257385]
[-70.65737152 -127.02812195]
[-76.37844086 -140.91154480]
[-80.50904846 -155.34823608]
[-82.99726105 -170.15664673]
[-83.81178284 -185.15052795]
[-82.94235992 -200.14132690]
[-80.39994049 -214.94052124]
[-76.21649170 -229.36198425]
[-70.44462585 -243.22436523]
[-63.15693283 -256.35333252]
[-54.44505692 -268.58374023]
[-44.41856384 -279.76184082]
[-33.20354843 -289.74697876]
[-20.94104576 -298.41366577]
[-7.78527498 -305.65283203]
[6.09831905 -311.37347412]
[20.53513336 -315.50366211]
[35.34361267 -317.99142456]
[50.33752060 -318.80551147]
[65.32829285 -317.93563843]
[80.12741089 -315.39276123]
[94.54875946 -311.20889282]
[108.41096497 -305.43661499]
[121.53970337 -298.14852905]
[133.76986694 -289.43627930]
[144.94764709 -279.40945435]
[154.93246460 -268.19415283]
[163.59877014 -255.93138123]
[170.83755493 -242.77539062]
[176.55778503 -228.89163208]
[180.68753052 -214.45468140]
[183.17485046 -199.64613342]
[183.98847961 -184.65220642]
[183.11816406 -169.66145325]
[180.57485962 -154.86241150]
[176.39054871 -140.44119263]
[170.61785889 -126.57915497]
[163.32937622 -113.45063782]
[154.61676025 -101.22073364]
[144.58959961 -90.04325104]
[133.37399292 -80.05876923]
[121.11096954 -71.39283752]
[107.95476532 -64.15444183]
[94.07083130 -58.43462753]
[79.63376617 -54.30530930]
[82.11888885 -39.51260376]
[84.60400391 -24.71989441]
[87.08912659 -9.92718792]
[89.72798920 4.83886766]
[92.52031708 19.57667351]
[95.31263733 34.31447983]
[98.10496521 49.05228424]
[108.07626343 60.11675262]
[103.04317474 75.11604309]
[105.83550262 89.85384369]
[113.31525421 76.85179901]
[126.56826782 69.82629395]
[141.52735901 70.93338013]
[153.60177612 79.83329773]
[159.08602905 93.79478455]
[156.29707336 108.53322601]
[146.09080505 119.52558899]
[131.59939575 123.39846039]
[117.27008057 118.96330261]
[107.50000000 107.58047485]
[107.50000000 122.58047485]
[122.05847168 126.51572418]
[135.09205627 134.07952881]
[145.71531677 144.75108337]
[153.20835876 157.79872131]
[157.06561279 172.33004761]
[157.02993774 187.35295105]
[153.10978699 201.84339905]
[145.57818604 214.81518555]
[134.95372009 225.38708496]
[121.96485901 232.84271240]
[107.50000000 236.67904663]
[107.50000000 251.67904663]
[107.50000000 266.67904663]
[107.50000000 281.67904663]
[107.50000000 296.67904663]
[107.50000000 311.67904663]
[107.50000000 326.67904663]
[107.50000000 341.67904663]
[107.50000000 356.67904663]
[107.50000000 371.67904663]
[122.03988647 375.74035645]
[134.94427490 383.57485962]
[145.25555420 394.60119629]
[152.20857239 408.00112915]
[155.28736877 422.78027344]
[154.26348877 437.84197998]
[149.21287537 452.06848145]
[140.51036072 464.40414429]
[128.80169678 473.93356323]
[114.95575714 479.94958496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[31 120]
[32 119]
[33 109]
[34 108]
[36 106]
[37 105]
[38 104]
[39 103]
[41 102]
[42 101]
[43 100]
[44 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
