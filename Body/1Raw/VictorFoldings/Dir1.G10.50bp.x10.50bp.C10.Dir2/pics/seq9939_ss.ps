%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUCACAAGGGGGGGGGGUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAAxxxxxxxxxxUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCCCCCCCCCCCUGACAA\
) } def
/len { sequence length } bind def

/coor [
[83.86666870 387.85729980]
[70.64646912 380.58483887]
[59.75966644 370.13781738]
[51.94853592 357.22857666]
[47.74565506 342.73727417]
[47.43758392 327.65191650]
[51.04532623 313.00109863]
[58.32289886 299.78372192]
[68.77410889 288.90093994]
[81.68637085 281.09478760]
[96.17930603 276.89752197]
[95.86724854 261.90075684]
[95.55519104 246.90400696]
[95.24313354 231.90724182]
[94.93107605 216.91049194]
[94.61902618 201.91374207]
[94.30696869 186.91699219]
[93.99491119 171.92022705]
[93.68285370 156.92347717]
[93.37079620 141.92672729]
[93.05873871 126.92996979]
[80.45655060 125.47116852]
[68.30587769 117.90035248]
[59.56008530 104.54492188]
[45.06448746 108.40207672]
[30.56889153 112.25923920]
[16.07329559 116.11640167]
[10.61321259 130.64109802]
[-2.35999703 139.15435791]
[-17.85787010 138.38262939]
[-29.92115784 128.62268066]
[-33.91128159 113.62739563]
[-28.29395294 99.16277313]
[-15.22915459 90.79075623]
[0.25943506 91.73056030]
[12.21613598 101.62080383]
[26.71173286 97.76364136]
[41.20732880 93.90647888]
[55.70292664 90.04932404]
[57.40441513 82.74487305]
[42.79552078 79.34189606]
[28.18663025 75.93891907]
[13.57779408 72.53569794]
[16.98125648 57.92692184]
[31.58960724 61.33002853]
[46.19850159 64.73300934]
[60.80739212 68.13598633]
[62.50888062 60.83153915]
[51.20987701 50.96581650]
[39.91087341 41.10009003]
[28.61186790 31.23436928]
[13.19041920 33.82530594]
[-0.26223445 25.85284424]
[-5.39416218 11.08134079]
[0.21777534 -3.51455474]
[13.92379284 -11.04310608]
[29.25232887 -7.94956207]
[38.96571732 4.30540085]
[38.47759247 19.93536377]
[49.77659607 29.80108643]
[61.07559967 39.66680908]
[72.37460327 49.53253174]
[87.36161804 48.90855408]
[97.80143738 38.13774872]
[108.24124908 27.36693954]
[93.72675323 31.15236092]
[78.72917938 31.42242241]
[64.08781433 28.16200829]
[50.62198257 21.55357361]
[39.08524323 11.96693230]
[30.12320328 -0.06144364]
[24.23738098 -13.85843945]
[21.75714874 -28.65196609]
[22.82130432 -43.61417007]
[27.37029457 -57.90776062]
[35.14955902 -70.73285675]
[45.72375870 -81.37175751]
[58.50116348 -89.22911072]
[72.76673889 -93.86520386]
[87.72217560 -95.02060699]
[102.53055573 -92.63066864]
[116.36319733 -86.82910919]
[128.44601440 -77.94061279]
[138.10285950 -66.46257019]
[144.79330444 -53.03730011]
[148.14297485 -38.41609192]
[147.96440125 -23.41715431]
[144.26759338 -8.87983704]
[137.25939941 4.38234186]
[127.33259583 15.62672806]
[141.29298401 10.13969707]
[154.81716919 3.65153170]
[168.34136963 -2.83663344]
[181.86555481 -9.32479858]
[195.38973999 -15.81296349]
[194.52503967 -30.98928452]
[199.53860474 -45.33963776]
[209.66589355 -56.67570114]
[223.36259460 -63.26880264]
[238.54003906 -64.11354065]
[252.88378906 -59.08110809]
[264.20651245 -48.93890762]
[270.78158569 -35.23355103]
[271.60635376 -20.05500793]
[266.55508423 -5.71789503]
[256.39797974 5.59148264]
[242.68399048 12.14852619]
[227.50437927 12.95333576]
[213.17391968 7.88318157]
[201.87791443 -2.28877378]
[188.35371399 4.19939137]
[174.82952881 10.68755627]
[161.30534363 17.17572212]
[147.78115845 23.66388702]
[161.79577637 29.01087189]
[169.24708557 42.02923965]
[166.75956726 56.82154465]
[155.46009827 66.68672180]
[140.46742249 67.15576172]
[128.57339478 58.01617050]
[125.16612244 43.40827942]
[131.78941345 29.94932556]
[119.01205444 37.80675125]
[108.57224274 48.57756042]
[98.13243103 59.34836960]
[123.49006653 70.80284882]
[133.75921631 94.20881653]
[126.39768219 116.31257629]
[108.05549622 126.61791992]
[108.36755371 141.61466980]
[108.67961121 156.61141968]
[108.99166107 171.60818481]
[109.30371857 186.60493469]
[109.61577606 201.60168457]
[109.92783356 216.59843445]
[110.23989105 231.59519958]
[110.55194855 246.59194946]
[110.86399841 261.58871460]
[111.17605591 276.58544922]
[125.83104706 280.17620850]
[139.05685425 287.43847656]
[149.95172119 297.87707520]
[157.77282715 310.78027344]
[161.98689270 325.26834106]
[162.30661011 340.35345459]
[158.71018982 355.00704956]
[151.44282532 368.23007202]
[141.00003052 379.12088013]
[128.09379578 386.93701172]
[113.60410309 391.14547729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[24 39]
[25 38]
[26 37]
[27 36]
[48 62]
[49 61]
[50 60]
[51 59]
[63 125]
[64 124]
[65 123]
[90 122]
[91 114]
[92 113]
[93 112]
[94 111]
[95 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
