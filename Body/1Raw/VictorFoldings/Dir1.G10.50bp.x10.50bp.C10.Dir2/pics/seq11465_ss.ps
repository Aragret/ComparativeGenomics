%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCUCCCCAGGGGGGGGGGCCCCAUCCAACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCxxxxxxxxxxGCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCACCCCCCCCCCGACCUCCUCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 376.68228149]
[71.19830322 370.66625977]
[59.48964310 361.13684082]
[50.78712082 348.80114746]
[45.73651886 334.57464600]
[44.71262741 319.51296997]
[47.79142761 304.73379517]
[54.74444962 291.33386230]
[65.05573273 280.30752563]
[77.96011353 272.47302246]
[92.50000000 268.41171265]
[92.50000000 253.41171265]
[92.50000000 238.41171265]
[92.50000000 223.41171265]
[92.50000000 208.41171265]
[92.50000000 193.41171265]
[92.50000000 178.41171265]
[92.50000000 163.41171265]
[92.50000000 148.41171265]
[92.50000000 133.41171265]
[84.51322937 130.54100037]
[77.47777557 125.79422760]
[71.82580566 119.46298218]
[67.90451050 111.93616486]
[53.04146194 113.95850372]
[38.17841339 115.98083496]
[23.31536674 118.00317383]
[19.47860527 132.71192932]
[10.30111313 144.82977295]
[-2.81760645 152.50881958]
[-17.87704468 154.57804871]
[-32.58074951 150.72193909]
[-44.68650818 141.52851868]
[-52.34828186 128.39970398]
[-54.39770508 113.33756256]
[-50.52225876 98.63894653]
[-41.31291962 86.54528809]
[-28.17404175 78.90079498]
[-13.10921001 76.87118530]
[1.58429646 80.76596069]
[13.66582584 89.99120331]
[21.29303360 103.14012146]
[36.15607834 101.11779022]
[51.01912689 99.09545898]
[65.88217163 97.07312012]
[67.86120605 88.18091583]
[72.11479950 80.12518311]
[78.34190369 73.47605133]
[86.10182190 68.70410156]
[94.84535217 66.14704895]
[103.95369720 65.98587036]
[112.78221893 68.23197174]
[121.29331207 55.88040161]
[129.80439758 43.52882767]
[138.31549072 31.17725563]
[146.82658386 18.82568359]
[137.46972656 4.49968338]
[134.57598877 -12.31883907]
[138.58541870 -28.86019707]
[148.80421448 -42.41481400]
[163.52453613 -50.77707672]
[180.30979919 -52.60418320]
[184.31753540 -67.05886841]
[188.32527161 -81.51355743]
[191.72825623 -96.12245178]
[194.52058411 -110.86026001]
[197.31291199 -125.59806061]
[200.10522461 -140.33587646]
[186.44708252 -146.73162842]
[174.80911255 -156.32374573]
[165.92289734 -168.50923157]
[160.34703064 -182.52209473]
[158.43202209 -197.48149109]
[160.29823303 -212.44705200]
[165.82838440 -226.47802734]
[174.67480469 -238.69242859]
[186.28143311 -248.32244873]
[199.91865540 -254.76271057]
[214.72921753 -257.60839844]
[229.78211975 -256.68063354]
[244.13113403 -252.03771973]
[256.87426758 -243.97151184]
[267.21044922 -232.98907471]
[274.48999023 -219.78077698]
[278.25521851 -205.17687988]
[278.26953125 -190.09541321]
[274.53198242 -175.48440552]
[267.27749634 -162.26232910]
[256.96215820 -151.26031494]
[244.23434448 -143.16996765]
[229.89416504 -138.49986267]
[214.84303284 -137.54354858]
[212.05070496 -122.80574036]
[209.25839233 -108.06793213]
[206.46606445 -93.33013153]
[207.99551392 -90.90770721]
[208.62545776 -87.71440887]
[208.05000305 -84.10182953]
[206.10064697 -80.52817535]
[202.77996826 -77.50582123]
[198.77223206 -63.05113220]
[194.76448059 -48.59644318]
[208.22215271 -38.20380020]
[216.39710999 -23.29455185]
[231.29901123 -25.00724220]
[246.20091248 -26.71993256]
[261.10281372 -28.43262100]
[270.73153687 -40.96512222]
[286.41250610 -42.93554306]
[298.84249878 -33.17486954]
[300.64703369 -17.47393990]
[290.75549316 -5.14783192]
[275.03634644 -3.50940990]
[262.81552124 -13.53071976]
[247.91360474 -11.81802940]
[233.01170349 -10.10534000]
[218.10980225 -8.39265060]
[215.87805176 2.82742476]
[210.66554260 13.04032803]
[202.85287476 21.46884918]
[193.01908875 27.46720886]
[181.89884949 30.57052803]
[170.32745361 30.53082466]
[159.17816162 27.33677292]
[150.66706848 39.68834686]
[142.15597534 52.03991699]
[133.64488220 64.39149475]
[125.13379669 76.74306488]
[134.20408630 98.36517334]
[127.23734283 120.75379181]
[107.50000000 133.41171265]
[107.50000000 148.41171265]
[107.50000000 163.41171265]
[107.50000000 178.41171265]
[107.50000000 193.41171265]
[107.50000000 208.41171265]
[107.50000000 223.41171265]
[107.50000000 238.41171265]
[107.50000000 253.41171265]
[107.50000000 268.41171265]
[122.03988647 272.47302246]
[134.94427490 280.30752563]
[145.25555420 291.33386230]
[152.20857239 304.73379517]
[155.28736877 319.51296997]
[154.26348877 334.57464600]
[149.21287537 348.80114746]
[140.51036072 361.13684082]
[128.80169678 370.66625977]
[114.95575714 376.68228149]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 45]
[25 44]
[26 43]
[27 42]
[52 128]
[53 127]
[54 126]
[55 125]
[56 124]
[62 102]
[63 101]
[64 100]
[65 95]
[66 94]
[67 93]
[68 92]
[104 117]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
