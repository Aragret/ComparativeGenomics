%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCUACUCCGGGGGGGGGGACCUCAAUCACACUACUCCCCAUAUCUAACAACGUAAAAAUAAAAUGACAxxxxxxxxxxAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAUCAACUGGCUUCCCCCCCCCCCAAUCUACUUC\
) } def
/len { sequence length } bind def

/coor [
[83.50609589 370.52893066]
[70.28589630 363.25646973]
[59.39909363 352.80944824]
[51.58796310 339.90020752]
[47.38508224 325.40890503]
[47.07701111 310.32354736]
[50.68475342 295.67272949]
[57.96232605 282.45535278]
[68.41353607 271.57257080]
[81.32579803 263.76641846]
[95.81873322 259.56915283]
[95.50667572 244.57238770]
[95.19461823 229.57563782]
[94.88256073 214.57888794]
[94.57050323 199.58213806]
[94.25845337 184.58537292]
[93.94639587 169.58862305]
[93.63433838 154.59187317]
[93.32228088 139.59512329]
[93.01022339 124.59836578]
[92.69816589 109.60160828]
[92.07418823 94.61459351]
[91.13856506 79.64379883]
[76.13388062 79.66516113]
[61.15581131 78.77172852]
[46.26006699 76.96683502]
[31.50206375 74.25718689]
[16.93670082 70.65287781]
[2.61816454 66.16729736]
[-11.40027905 60.81715393]
[-25.06648064 54.62233353]
[-38.32960129 47.60588837]
[-51.14030075 39.79391861]
[-63.45092010 31.21548653]
[-75.21566010 21.90250397]
[-86.39076996 11.88961601]
[-96.93465424 1.21407187]
[-106.80811310 -10.08441448]
[-115.97439575 -21.96381187]
[-124.39941406 -34.37992859]
[-132.05181885 -47.28657532]
[-138.90315247 -60.63573456]
[-144.92791748 -74.37775421]
[-150.10371399 -88.46150208]
[-154.41127014 -102.83459473]
[-157.83457947 -117.44355774]
[-160.36088562 -132.23405457]
[-161.98081970 -147.15104675]
[-162.68832397 -162.13905334]
[-162.48078918 -177.14230347]
[-161.35897827 -192.10501099]
[-159.32705688 -206.97148132]
[-156.39259338 -221.68643188]
[-152.56651306 -236.19512939]
[-147.86303711 -250.44357300]
[-142.29966736 -264.37875366]
[-135.89709473 -277.94888306]
[-128.67913818 -291.10342407]
[-120.67266083 -303.79345703]
[-111.90742493 -315.97177124]
[-102.41606140 -327.59310913]
[-92.23386383 -338.61416626]
[-81.39871979 -348.99395752]
[-69.95093536 -358.69390869]
[-57.93309021 -367.67791748]
[-45.38989639 -375.91253662]
[-32.36801910 -383.36718750]
[-18.91589546 -390.01406860]
[-5.08357191 -395.82852173]
[9.07749557 -400.78884888]
[23.51462555 -404.87664795]
[38.17411041 -408.07672119]
[53.00141907 -410.37710571]
[67.94139099 -411.76928711]
[82.93843842 -412.24807739]
[97.93679047 -411.81170654]
[112.88063812 -410.46176147]
[127.71438599 -408.20330811]
[142.38285828 -405.04470825]
[156.83149719 -400.99774170]
[171.00653076 -396.07745361]
[184.85523987 -390.30215454]
[198.32611084 -383.69332886]
[211.36900330 -376.27554321]
[223.93544006 -368.07641602]
[235.97863770 -359.12643433]
[247.45379639 -349.45889282]
[258.31826782 -339.10974121]
[268.53155518 -328.11752319]
[278.05575562 -316.52310181]
[286.85537720 -304.36959839]
[294.89770508 -291.70227051]
[302.15283203 -278.56817627]
[308.59375000 -265.01623535]
[314.19650269 -251.09681702]
[318.94024658 -236.86172485]
[322.80734253 -222.36390686]
[325.78338623 -207.65731812]
[327.85733032 -192.79664612]
[329.02145386 -177.83717346]
[329.27142334 -162.83456421]
[328.60629272 -147.84461975]
[327.02853394 -132.92311096]
[324.54406738 -118.12552643]
[321.16207886 -103.50694275]
[316.89517212 -89.12172699]
[311.75921631 -75.02339935]
[305.77334595 -61.26440430]
[298.95977783 -47.89592361]
[291.34390259 -34.96768951]
[282.95401001 -22.52780342]
[273.82135010 -10.62253475]
[263.97988892 0.70382369]
[253.46623230 11.40913773]
[242.31948853 21.45358276]
[230.58111572 30.79979324]
[218.29479980 39.41300201]
[205.50624084 47.26116180]
[192.26301575 54.31507874]
[178.61439514 60.54851532]
[164.61112976 65.93827820]
[150.30532837 70.46432495]
[135.75021362 74.10980225]
[120.99993896 76.86116791]
[106.10935211 78.70817566]
[107.04498291 93.67896271]
[110.13608551 98.00306702]
[110.54741669 103.75767517]
[107.69492340 109.28955078]
[108.00698090 124.28630829]
[108.31903839 139.28306580]
[108.63108826 154.27981567]
[108.94314575 169.27656555]
[109.25520325 184.27331543]
[109.56726074 199.27008057]
[109.87931824 214.26683044]
[110.19137573 229.26358032]
[110.50342560 244.26033020]
[110.81548309 259.25708008]
[125.47047424 262.84786987]
[138.69628906 270.11010742]
[149.59115601 280.54870605]
[157.41224670 293.45193481]
[161.62632751 307.93997192]
[161.94604492 323.02508545]
[158.34962463 337.67868042]
[151.08226013 350.90170288]
[140.63945007 361.79254150]
[127.73322296 369.60864258]
[113.24353027 373.81710815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 126]
[23 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
