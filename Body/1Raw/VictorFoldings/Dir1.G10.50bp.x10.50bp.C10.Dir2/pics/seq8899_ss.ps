%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUACUAGGCGGGGGGGGGGCUACUAACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGxxxxxxxxxxCUCAUAACCCUCAACACCCACUCCCUCUUAGCCAAUAUUGUGCCUAUUGCCCCCCCCCCCCAUACUAGUC\
) } def
/len { sequence length } bind def

/coor [
[71.90349579 554.00891113]
[58.68330383 546.73638916]
[47.79649734 536.28942871]
[39.98536682 523.38018799]
[35.78248596 508.88885498]
[35.47441483 493.80349731]
[39.08215714 479.15267944]
[46.35972977 465.93530273]
[56.81093597 455.05252075]
[69.72319794 447.24639893]
[84.21613312 443.04910278]
[83.90407562 428.05233765]
[83.59202576 413.05560303]
[83.27996826 398.05883789]
[82.96791077 383.06207275]
[82.65585327 368.06533813]
[82.34379578 353.06857300]
[82.03173828 338.07183838]
[81.71968842 323.07507324]
[81.40763092 308.07830811]
[81.09557343 293.08157349]
[79.09873962 291.02731323]
[77.82279205 288.03298950]
[77.63964081 284.37945557]
[78.80880737 280.48019409]
[81.43359375 276.83712769]
[82.36921692 261.86633301]
[69.88429260 253.74276733]
[63.09670258 240.37173462]
[63.91864014 225.29888916]
[72.22935486 212.57769775]
[85.88072968 205.67935181]
[86.81636047 190.70855713]
[87.75199127 175.73776245]
[88.68761444 160.76696777]
[81.75925446 147.58186340]
[90.34226990 134.29118347]
[91.27790070 119.32039642]
[84.68876648 114.66011047]
[80.31903839 107.87479401]
[78.80212402 99.94801331]
[64.78541565 94.60649872]
[50.76869965 89.26498413]
[36.45071793 95.95610046]
[21.62376404 90.48463440]
[15.08440304 76.09671021]
[20.71232414 61.32843018]
[35.16857910 54.94155502]
[49.87653351 60.72529984]
[56.11021042 75.24827576]
[70.12692261 80.58978271]
[84.14363861 85.93129730]
[91.23054504 80.70105743]
[99.83147430 78.80273438]
[105.02689362 64.73120880]
[110.22230530 50.65969086]
[115.41772461 36.58817291]
[102.01494598 29.81592751]
[89.47152710 21.55999184]
[77.95099640 11.92800522]
[67.60355377 1.04553616]
[58.56409073 -10.94553852]
[50.95045853 -23.88889122]
[44.86191559 -37.61577988]
[40.37784195 -51.94724274]
[37.55669403 -66.69644165]
[36.43524933 -81.67108917]
[37.02812958 -96.67596436]
[39.32761002 -111.51544189]
[43.30370712 -125.99606323]
[48.90458298 -139.92904663]
[56.05722427 -153.13273621]
[64.66837311 -165.43501282]
[74.62577820 -176.67546082]
[85.79961395 -186.70758057]
[98.04421234 -195.40054321]
[111.19992828 -202.64103699]
[125.09526825 -208.33465576]
[139.54907227 -212.40719604]
[154.37289429 -214.80552673]
[169.37347412 -215.49842834]
[184.35527039 -214.47682190]
[199.12294006 -211.75404358]
[213.48397827 -207.36560059]
[227.25114441 -201.36869812]
[240.24496460 -193.84150696]
[252.29602051 -184.88217163]
[263.24722290 -174.60749817]
[272.95578003 -163.15142822]
[281.29516602 -150.66333008]
[288.15658569 -137.30598450]
[293.45065308 -123.25355530]
[297.10830688 -108.68923950]
[299.08187866 -93.80291748]
[299.34564209 -78.78865051]
[297.89614868 -63.84218597]
[294.75231934 -49.15838242]
[289.95510864 -34.92867661]
[283.56707764 -21.33857727]
[275.67150879 -8.56526184]
[266.37130737 3.22474456]
[255.78775024 13.87773418]
[244.05882263 23.25482368]
[231.33741760 31.23376465]
[217.78938293 37.71053314]
[203.59133911 42.60069275]
[188.92842102 45.84049225]
[173.99174500 47.38768768]
[158.97607422 47.22211456]
[144.07716370 45.34592819]
[129.48924255 41.78358841]
[124.29382324 55.85511017]
[119.09841156 69.92662811]
[113.90299225 83.99814606]
[120.74080658 104.37853241]
[106.24869537 120.25601959]
[105.31306458 135.22680664]
[112.17450714 149.48272705]
[103.65840912 161.70260620]
[102.72277832 176.67340088]
[101.78715515 191.64418030]
[100.85152435 206.61497498]
[113.53778076 215.15934753]
[120.19994354 228.81629944]
[119.13880157 243.87419128]
[110.73922729 256.29608154]
[97.34001160 262.80197144]
[96.40438080 277.77276611]
[96.09232330 292.76950073]
[96.40438080 307.76626587]
[96.71643829 322.76300049]
[97.02849579 337.75976562]
[97.34055328 352.75653076]
[97.65261078 367.75326538]
[97.96466064 382.75003052]
[98.27671814 397.74679565]
[98.58877563 412.74353027]
[98.90083313 427.74029541]
[99.21289062 442.73703003]
[113.86788177 446.32781982]
[127.09368896 453.59005737]
[137.98855591 464.02865601]
[145.80966187 476.93188477]
[150.02372742 491.41995239]
[150.34344482 506.50503540]
[146.74702454 521.15863037]
[139.47966003 534.38165283]
[129.03684998 545.27246094]
[116.13062286 553.08862305]
[101.64093781 557.29705811]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[26 128]
[27 127]
[32 122]
[33 121]
[34 120]
[35 119]
[37 117]
[38 116]
[41 52]
[42 51]
[43 50]
[54 114]
[55 113]
[56 112]
[57 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
