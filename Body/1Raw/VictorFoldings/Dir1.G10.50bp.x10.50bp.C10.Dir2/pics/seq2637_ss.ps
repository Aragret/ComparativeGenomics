%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUACCCUCAGGGGGGGGGGCUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAAxxxxxxxxxxUACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCCCCCCCCCCCAUAACCCUCA\
) } def
/len { sequence length } bind def

/coor [
[112.17514801 355.92114258]
[98.95495605 348.64865112]
[88.06815338 338.20166016]
[80.25701904 325.29241943]
[76.05413818 310.80108643]
[75.74606323 295.71575928]
[79.35380554 281.06494141]
[86.63137817 267.84753418]
[97.08258820 256.96478271]
[109.99485016 249.15863037]
[124.48778534 244.96134949]
[124.17572784 229.96459961]
[123.86367798 214.96783447]
[123.55162048 199.97108459]
[123.23956299 184.97433472]
[122.92750549 169.97758484]
[122.61544800 154.98081970]
[122.30339050 139.98406982]
[121.99134064 124.98731995]
[121.67928314 109.99056244]
[103.90671539 121.59123230]
[85.91150665 114.21404266]
[72.12912750 120.13400269]
[58.34674454 126.05397034]
[54.01230621 141.07884216]
[41.00536346 149.75947571]
[25.46740341 147.99716187]
[14.73497105 136.62399292]
[13.87559414 121.01004028]
[23.29504395 108.52773285]
[38.54574585 105.07083893]
[52.42678070 112.27159119]
[66.20915985 106.35162354]
[79.99154663 100.43166351]
[92.03844452 79.55355072]
[117.92907715 84.24085236]
[110.47416687 71.22454071]
[103.01925659 58.20823288]
[95.56434631 45.19192123]
[88.10943604 32.17561340]
[80.65452576 19.15930367]
[80.28363037 34.15471649]
[76.26331329 48.60591507]
[68.83683777 61.63846970]
[58.45357513 72.46379852]
[45.74179459 80.42687988]
[31.47067642 85.04588318]
[16.50374222 86.04130554]
[1.74662137 83.35292816]
[-11.90775204 77.14340973]
[-23.63317108 67.78849030]
[-32.72014618 55.85421753]
[-38.61883545 42.06271744]
[-40.97232056 27.24849701]
[-39.63819122 12.30794430]
[-34.69717789 -1.85490727]
[-26.44824982 -14.38308430]
[-15.39054203 -24.51852226]
[-2.19314146 -31.64794159]
[12.34539604 -35.33994675]
[27.34536362 -35.37114334]
[41.89913177 -31.73964500]
[55.12607574 -24.66518402]
[66.22584534 -14.57583046]
[74.52593231 -2.08384514]
[73.90195465 -17.07086182]
[73.27797699 -32.05787659]
[72.65399933 -47.04489517]
[58.61850357 -53.04219437]
[48.58155441 -64.54099274]
[44.53599930 -79.25820160]
[47.28508377 -94.27170563]
[56.28297806 -106.60056305]
[69.74314117 -113.79686737]
[84.99304199 -114.43179321]
[99.00481415 -108.37926483]
[108.99640656 -96.84102631]
[112.98397064 -82.10800171]
[110.17578125 -67.10543823]
[101.12940979 -54.81211472]
[87.64101410 -47.66886902]
[88.26499176 -32.68185425]
[88.88896942 -17.69483948]
[89.51294708 -2.70782256]
[93.67083740 11.70439339]
[101.12574768 24.72070312]
[108.58065796 37.73701096]
[116.03556824 50.75332260]
[123.49047852 63.76963043]
[130.94538879 76.78594208]
[144.40135193 83.41443634]
[159.26440430 81.39210510]
[174.12744141 79.36977386]
[188.94520569 77.03866577]
[203.71125793 74.39980316]
[212.75413513 61.71657562]
[227.76660156 59.25074005]
[239.80239868 67.94989777]
[254.56845093 65.31103516]
[269.33450317 62.67217255]
[284.10055542 60.03330994]
[298.86660767 57.39444351]
[313.57458496 54.44896317]
[328.21807861 51.19813538]
[335.27371216 37.24277496]
[349.66921997 31.13517380]
[364.60754395 35.75915909]
[373.03518677 48.93141937]
[370.97293091 64.43242645]
[359.39450073 74.94306946]
[343.76684570 75.50054932]
[331.46890259 65.84163666]
[316.82540894 69.09246063]
[313.52191162 72.62268066]
[307.94311523 74.07472992]
[301.50549316 72.16049957]
[286.73941040 74.79936218]
[271.97335815 77.43822479]
[257.20730591 80.07709503]
[242.44125366 82.71595764]
[234.16351318 95.04537964]
[219.22622681 97.93190765]
[206.35012817 89.16585541]
[191.58406067 91.80472565]
[188.13658142 95.19445801]
[182.50221252 96.41319275]
[176.14978027 94.23281860]
[161.28672791 96.25514984]
[146.42369080 98.27748871]
[136.67604065 109.67850494]
[136.98809814 124.67526245]
[137.30014038 139.67201233]
[137.61219788 154.66876221]
[137.92425537 169.66552734]
[138.23631287 184.66227722]
[138.54837036 199.65902710]
[138.86042786 214.65577698]
[139.17248535 229.65254211]
[139.48454285 244.64929199]
[154.13952637 248.24005127]
[167.36534119 255.50231934]
[178.26020813 265.94091797]
[186.08131409 278.84411621]
[190.29537964 293.33218384]
[190.61509705 308.41729736]
[187.01867676 323.07089233]
[179.75131226 336.29388428]
[169.30850220 347.18472290]
[156.40228271 355.00085449]
[141.91258240 359.20932007]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 34]
[23 33]
[24 32]
[36 90]
[37 89]
[38 88]
[39 87]
[40 86]
[41 85]
[65 84]
[66 83]
[67 82]
[68 81]
[91 129]
[92 128]
[93 127]
[94 124]
[95 123]
[98 120]
[99 119]
[100 118]
[101 117]
[102 116]
[103 113]
[104 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
