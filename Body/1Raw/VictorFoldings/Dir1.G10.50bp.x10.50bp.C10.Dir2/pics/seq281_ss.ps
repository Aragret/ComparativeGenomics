%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCAAACCCGGGGGGGGGGCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCxxxxxxxxxxAACCCCGAUCAACCUCACCACCUCUUGCUCAGCCUAUAUACCGCCAUCUUCCCCCCCCCCCAGCAAACCC\
) } def
/len { sequence length } bind def

/coor [
[7.12466192 317.44564819]
[-2.86184764 312.90344238]
[-12.62691212 307.90289307]
[-22.14950943 302.45477295]
[-31.40913773 296.57077026]
[-40.38586426 290.26361084]
[-49.06035995 283.54684448]
[-57.41395187 276.43490601]
[-65.42865753 268.94314575]
[-73.08722687 261.08770752]
[-84.38623047 270.95343018]
[-95.68523407 280.81915283]
[-106.98423767 290.68487549]
[-118.28324127 300.55059814]
[-129.58224487 310.41632080]
[-140.77801514 320.39904785]
[-151.86932373 330.49768066]
[-162.96064758 340.59634399]
[-170.60177612 355.73071289]
[-187.25997925 352.57781982]
[-188.84173584 335.69781494]
[-173.05929565 329.50500488]
[-161.96798706 319.40637207]
[-150.87666321 309.30770874]
[-148.02981567 302.43450928]
[-139.44796753 299.11730957]
[-128.14897156 289.25158691]
[-116.84996033 279.38586426]
[-105.55095673 269.52014160]
[-94.25195312 259.65441895]
[-82.95294952 249.78869629]
[-107.01826477 214.24478149]
[-124.26112366 174.93585205]
[-134.11326599 133.15734863]
[-136.25001526 90.28611755]
[-151.21026611 89.19480133]
[-166.17051697 88.10349274]
[-180.68774414 95.73122406]
[-194.40576172 86.74523926]
[-193.21266174 70.38954926]
[-178.33580017 63.48949051]
[-165.07920837 73.14324188]
[-150.11895752 74.23455811]
[-135.15870667 75.32586670]
[-133.76104736 64.44429779]
[-131.86012268 53.63927841]
[-129.46003723 42.93406677]
[-126.56597900 32.35170746]
[-123.18414307 21.91498566]
[-119.32183838 11.64636803]
[-114.98736572 1.56796074]
[-110.19005585 -8.29853725]
[-104.94023895 -17.93188667]
[-99.24922180 -27.31134605]
[-93.12925720 -36.41672516]
[-86.59351349 -45.22842026]
[-79.65605927 -53.72746277]
[-72.33183289 -61.89555740]
[-64.63661194 -69.71511078]
[-56.58694839 -77.16929626]
[-48.20018005 -84.24206543]
[-39.49436188 -90.91819000]
[-30.48823166 -97.18330383]
[-21.20118141 -103.02390289]
[-11.65320492 -108.42742920]
[-1.86485684 -113.38224792]
[8.14278984 -117.87768555]
[18.34819031 -121.90406799]
[28.72937584 -125.45272064]
[39.26399231 -128.51602173]
[49.92936707 -131.08735657]
[60.70253372 -133.16119385]
[71.56030273 -134.73307800]
[82.47930145 -135.79960632]
[93.43601227 -136.35852051]
[104.40686035 -136.40856934]
[115.36821747 -135.94967651]
[126.29648590 -134.98281860]
[137.16815186 -133.51008606]
[147.95979309 -131.53463745]
[158.64817810 -129.06074524]
[169.21031189 -126.09370422]
[179.62345886 -122.63993073]
[189.86517334 -118.70684052]
[199.91342163 -114.30291748]
[209.74658203 -109.43762970]
[219.34346008 -104.12145996]
[228.68342590 -98.36584473]
[237.74635315 -92.18318176]
[246.51272583 -85.58677673]
[254.96369934 -78.59083557]
[263.08105469 -71.21041107]
[270.84729004 -63.46140671]
[278.24575806 -55.36048889]
[285.26046753 -46.92510986]
[291.87637329 -38.17341995]
[298.07916260 -29.12426758]
[303.85552979 -19.79713058]
[309.19305420 -10.21208954]
[314.08016968 -0.38977915]
[318.50643921 9.64865494]
[322.46231079 19.88159943]
[325.93923950 30.28702736]
[328.92974854 40.84253693]
[331.42739868 51.52540207]
[333.42684937 62.31262589]
[334.92376709 73.18098450]
[335.91491699 84.10707855]
[336.39819336 95.06739044]
[336.37252808 106.03832245]
[335.83798218 116.99624634]
[334.79574585 127.91758728]
[333.24801636 138.77882385]
[331.19815063 149.55657959]
[328.65051270 160.22764587]
[325.61065674 170.76904297]
[322.08511353 181.15809631]
[318.08142090 191.37243652]
[313.60827637 201.39004517]
[308.67523193 211.18939209]
[303.29293823 220.74935913]
[297.47302246 230.04937744]
[291.22793579 239.06942749]
[284.57119751 247.79006958]
[277.51708984 256.19253540]
[270.08084106 264.25875854]
[262.27841187 271.97137451]
[254.12663269 279.31372070]
[245.64303589 286.27008057]
[236.84590149 292.82537842]
[227.75415039 298.96560669]
[218.38737488 304.67745972]
[208.76573181 309.94866943]
[198.90992737 314.76791382]
[188.84117126 319.12478638]
[178.58117676 323.00994873]
[168.15199280 326.41497803]
[157.57609558 329.33255005]
[146.87625122 331.75643921]
[136.07548523 333.68139648]
[125.19705963 335.10324097]
[114.26438141 336.01898193]
[103.30099487 336.42660522]
[92.33050537 336.32522583]
[81.37652588 335.71508789]
[70.46263885 334.59747314]
[59.61234283 332.97482300]
[48.84899139 330.85061646]
[38.19576263 328.22943115]
[27.67558861 325.11688232]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 31]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[16 24]
[17 23]
[18 22]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
