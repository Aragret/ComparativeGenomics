%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGCAUCACGGGGGGGGGGUAUACUACUAACAGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGxxxxxxxxxxCCACUCCAGCCUAGCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACCCCCCCCCCCAGGCAUCAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 395.01629639]
[71.19830322 389.00024414]
[59.48964310 379.47082520]
[50.78712082 367.13516235]
[45.73651886 352.90866089]
[44.71262741 337.84695435]
[47.79142761 323.06781006]
[54.74444962 309.66787720]
[65.05573273 298.64154053]
[77.96011353 290.80703735]
[92.50000000 286.74572754]
[92.50000000 271.74572754]
[92.50000000 256.74572754]
[92.50000000 241.74572754]
[92.50000000 226.74572754]
[92.50000000 211.74572754]
[92.50000000 196.74572754]
[92.50000000 181.74572754]
[92.50000000 166.74572754]
[92.50000000 151.74572754]
[92.50000000 136.74572754]
[80.08132935 131.77648926]
[70.19644928 122.76503754]
[64.10280609 110.85771179]
[62.57554626 97.56921387]
[65.80895233 84.58992004]
[73.39170074 73.57090759]
[84.35923004 65.91386414]
[80.95625305 51.30497360]
[77.55326843 36.69607925]
[74.15029144 22.08718681]
[59.30934906 24.32022476]
[44.33790207 25.36708260]
[29.33061218 25.22113609]
[14.38235760 23.88331413]
[-0.41235155 21.36207008]
[-14.95997715 17.67334557]
[-29.16854286 12.84046459]
[-42.94821548 6.89398003]
[-56.21187973 -0.12851121]
[-68.87567139 -8.18261051]
[-80.85951996 -17.21739578]
[-92.08766937 -27.17574501]
[-102.48912811 -37.99470139]
[-111.99813080 -49.60585785]
[-120.55455780 -61.93580246]
[-128.10432434 -74.90658569]
[-134.59967041 -88.43620300]
[-139.99955750 -102.43910980]
[-144.26982117 -116.82677460]
[-147.38348389 -131.50822449]
[-149.32084656 -146.39065552]
[-150.06967163 -161.37997437]
[-149.62521362 -176.38139343]
[-147.99029541 -191.30006409]
[-145.17524719 -206.04170227]
[-141.19786072 -220.51306152]
[-136.08328247 -234.62268066]
[-129.86386108 -248.28132629]
[-122.57889557 -261.40267944]
[-114.27447510 -273.90374756]
[-105.00308228 -285.70547485]
[-94.82334137 -296.73330688]
[-83.79961395 -306.91748047]
[-72.00159454 -316.19363403]
[-59.50387192 -324.50308228]
[-46.38546753 -331.79333496]
[-32.72931671 -338.01824951]
[-18.62176514 -343.13851929]
[-4.15199947 -347.12173462]
[10.58849239 -349.94271851]
[25.50651741 -351.58364868]
[40.50775528 -352.03411865]
[55.49736404 -351.29135132]
[70.38056946 -349.35995483]
[85.06327820 -346.25222778]
[99.45265961 -341.98773193]
[113.45774078 -336.59350586]
[126.98996735 -330.10357666]
[139.96379089 -322.55905151]
[152.29718018 -314.00759888]
[163.91217041 -304.50326538]
[174.73530579 -294.10617065]
[184.69818115 -282.88201904]
[193.73779297 -270.90179443]
[201.79698181 -258.24124146]
[208.82481384 -244.98042297]
[214.77684021 -231.20314026]
[219.61544800 -216.99652100]
[223.31002808 -202.45037842]
[225.83721924 -187.65669250]
[227.18106079 -172.70896912]
[227.33305359 -157.70175171]
[226.29222107 -142.72987366]
[224.06515503 -127.88803864]
[220.66593933 -113.27005768]
[216.11605835 -98.96835327]
[210.44427490 -85.07335663]
[203.68646240 -71.67290497]
[195.88533020 -58.85173416]
[187.09020996 -46.69089508]
[177.35670471 -35.26728058]
[166.74635315 -24.65311050]
[155.32624817 -14.91549301]
[143.16857910 -6.11599493]
[130.35021973 1.68975103]
[116.95220184 8.45239353]
[103.05924988 14.12917614]
[88.75918579 18.68420982]
[92.16216278 33.29310226]
[95.56513977 47.90199280]
[98.96811676 62.51088715]
[119.23993683 67.80802155]
[133.50645447 83.15314484]
[137.31469727 103.75662994]
[151.63728333 108.21344757]
[165.95988464 112.67025757]
[180.28248596 117.12707520]
[196.15165710 112.99168396]
[207.47338867 124.85550690]
[202.60086060 140.51406860]
[186.54649353 143.85917664]
[175.82566833 131.44967651]
[161.50306702 126.99285889]
[147.18046570 122.53604126]
[132.85787964 118.07922363]
[128.20445251 124.71856689]
[122.23283386 130.20263672]
[115.22213745 134.27513123]
[107.50000000 136.74572754]
[107.50000000 151.74572754]
[107.50000000 166.74572754]
[107.50000000 181.74572754]
[107.50000000 196.74572754]
[107.50000000 211.74572754]
[107.50000000 226.74572754]
[107.50000000 241.74572754]
[107.50000000 256.74572754]
[107.50000000 271.74572754]
[107.50000000 286.74572754]
[122.03988647 290.80703735]
[134.94427490 298.64154053]
[145.25555420 309.66787720]
[152.20857239 323.06781006]
[155.28736877 337.84695435]
[154.26348877 352.90866089]
[149.21287537 367.13516235]
[140.51036072 379.47082520]
[128.80169678 389.00024414]
[114.95575714 395.01629639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[28 112]
[29 111]
[30 110]
[31 109]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
