%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUCCUAAUGGGGGGGGGGCACAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCAxxxxxxxxxxCAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCCCCCCCCCCCUCCUAAU\
) } def
/len { sequence length } bind def

/coor [
[81.51840210 373.77651978]
[69.63412476 364.50140381]
[60.31541824 352.65130615]
[54.10405350 338.91513062]
[51.36114883 324.09149170]
[52.24618149 309.04223633]
[56.70768738 294.64230347]
[64.48628235 281.72885132]
[75.12973785 271.05270386]
[88.01924896 263.23452759]
[102.40543365 258.72885132]
[101.46980286 243.75805664]
[100.53417206 228.78726196]
[99.59854889 213.81648254]
[98.66291809 198.84568787]
[97.72728729 183.87489319]
[96.79166412 168.90409851]
[95.85603333 153.93330383]
[94.92040253 138.96252441]
[93.98477936 123.99172974]
[76.77870178 114.70742035]
[70.33901215 94.11195374]
[80.98409271 73.03892517]
[66.41138458 69.48416138]
[51.83868408 65.92939758]
[37.26597977 62.37463760]
[22.69327736 58.81987381]
[8.12057495 55.26511383]
[-6.45212746 51.71035004]
[-19.17183876 62.81265259]
[-35.83544540 64.15644836]
[-49.88831711 55.41101456]
[-55.92028427 40.17550659]
[-70.56378174 36.92468262]
[-85.20728302 33.67385483]
[-93.60262299 46.31832886]
[-106.00100708 55.07301331]
[-120.72566223 58.75390244]
[-135.78520203 56.86318970]
[-149.14294434 49.65657806]
[-158.99235535 38.10870361]
[-164.00140381 23.78132057]
[-163.49263000 8.61208820]
[-157.53486633 -5.34747744]
[-146.93383789 -16.20945930]
[-133.12326050 -22.50486565]
[-117.97087860 -23.38229179]
[-103.52593994 -18.72307587]
[-91.74201202 -9.15733624]
[-84.21276093 4.02123833]
[-81.95645905 19.03035355]
[-67.31295776 22.28117943]
[-52.66945648 25.53200531]
[-43.50173569 15.77757931]
[-30.60305977 11.81076050]
[-17.32665253 14.77513885]
[-7.17980051 23.99763680]
[-2.89736557 37.13764954]
[11.67533684 40.69240952]
[26.24803925 44.24717331]
[40.82074356 47.80193329]
[55.39344406 51.35669708]
[69.96614838 54.91145706]
[84.53884888 58.46622086]
[96.97829437 50.08407593]
[99.15512848 35.24287033]
[85.14839935 29.68335152]
[72.80168152 21.04302025]
[62.78082275 9.78783989]
[55.62623215 -3.47521138]
[51.72374344 -18.03087425]
[51.28382111 -33.09418106]
[54.33018494 -47.85278320]
[60.69854736 -61.51077271]
[70.04547119 -73.33158875]
[81.86689758 -82.67774963]
[95.52529907 -89.04522705]
[110.28409576 -92.09063721]
[125.34737396 -91.64973450]
[139.90278625 -87.74630737]
[153.16537476 -80.59085846]
[164.41990662 -70.56926727]
[173.05943298 -58.22199249]
[178.61804199 -44.21490479]
[180.79597473 -29.30338669]
[179.47575378 -14.29160023]
[174.72860718 0.01088920]
[166.81051636 12.83276653]
[156.14849854 23.48256302]
[143.31755066 31.38595009]
[129.00962830 36.11670685]
[113.99633789 37.41970825]
[111.81949615 52.26091385]
[122.37078857 62.92253876]
[137.23384094 60.90020370]
[152.09687805 58.87787247]
[166.95993042 56.85553741]
[168.41903687 41.85661316]
[173.29837036 27.59867477]
[181.33480835 14.85063553]
[192.09494019 4.29998207]
[204.99848938 -3.48430300]
[219.34957886 -8.08242321]
[234.37429810 -9.24640751]
[249.26234436 -6.91348410]
[263.21084595 -1.20946383]
[275.46759033 7.55804205]
[285.37155151 18.91621399]
[292.38867188 32.25251770]
[296.14047241 46.84774399]
[296.42465210 61.91479492]
[293.22589111 76.64112091]
[286.71667480 90.23254395]
[277.24804688 101.95610046]
[265.33062744 111.17955780]
[251.60713196 117.40550232]
[236.81764221 120.29817200]
[221.75971985 119.70157623]
[207.24543762 115.64788818]
[194.05754089 108.35571289]
[182.90721130 98.21831512]
[174.39578247 85.78238678]
[168.98226929 71.71858215]
[154.11921692 73.74092102]
[139.25616455 75.76325226]
[124.39311981 77.78558350]
[128.09797668 106.60298920]
[108.95556641 123.05609894]
[109.89119720 138.02688599]
[110.82682800 152.99768066]
[111.76245117 167.96847534]
[112.69808197 182.93927002]
[113.63371277 197.91004944]
[114.56933594 212.88084412]
[115.50496674 227.85163879]
[116.44059753 242.82243347]
[117.37622070 257.79321289]
[132.21145630 260.47265625]
[145.97409058 266.62515259]
[157.86398315 275.89303589]
[167.18988037 287.73748779]
[173.40956116 301.46990967]
[176.16145325 316.29187012]
[175.28555298 331.34164429]
[170.83277893 345.74429321]
[163.06201172 358.66244507]
[152.42503357 369.34506226]
[139.54026794 377.17105103]
[125.15680695 381.68545532]
[110.11090851 382.62576294]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[23 64]
[24 63]
[25 62]
[26 61]
[27 60]
[28 59]
[29 58]
[33 53]
[34 52]
[35 51]
[65 93]
[66 92]
[94 126]
[95 125]
[96 124]
[97 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
