%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCGGACUGGGGGGGGGGACCCCGAUGCAUACACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCxxxxxxxxxxCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACACCCCCCCCCCUACUCGGAUU\
) } def
/len { sequence length } bind def

/coor [
[93.71618652 365.84848022]
[79.87024689 359.83245850]
[68.16158295 350.30303955]
[59.45906067 337.96737671]
[54.40845871 323.74084473]
[53.38456726 308.67916870]
[56.46336746 293.89999390]
[63.41638947 280.50006104]
[73.72767639 269.47372437]
[86.63205719 261.63922119]
[101.17194366 257.57791138]
[101.17194366 242.57791138]
[101.17194366 227.57791138]
[101.17194366 212.57791138]
[101.17194366 197.57791138]
[101.17194366 182.57791138]
[101.17194366 167.57791138]
[101.17194366 152.57791138]
[101.17194366 137.57791138]
[101.17194366 122.57791901]
[95.91786957 136.62763977]
[82.00122833 142.22471619]
[68.48252106 135.72514343]
[64.16315460 121.36048889]
[71.85527802 108.48294067]
[86.55046082 105.47638702]
[71.73270416 103.14527893]
[56.91494751 100.81417847]
[42.09718704 98.48307037]
[33.06718445 100.24684143]
[26.99672127 95.94625092]
[12.23066521 93.30738831]
[-2.53539038 90.66852570]
[-17.46969795 89.26622009]
[-32.46888733 89.11018372]
[-44.89039993 99.26329041]
[-60.54210663 95.74140167]
[-67.41735077 81.24620819]
[-60.24203873 66.89718628]
[-44.52045441 63.70167160]
[-32.31285095 74.11099243]
[-17.31366158 74.26702881]
[-28.13688469 63.88156891]
[-30.94645309 49.14703751]
[-24.70428658 35.50756073]
[-11.71674347 28.00264740]
[3.21753883 29.40521622]
[14.58064079 39.19704437]
[18.17412186 53.76025009]
[12.67026234 67.71401215]
[0.10347399 75.90246582]
[14.86952972 78.54132843]
[29.63558578 81.18019867]
[44.42829132 83.66531372]
[59.24605179 85.99642181]
[74.06380463 88.32752228]
[88.88156891 90.65862274]
[103.10834503 85.90480804]
[113.54815674 75.13400269]
[123.98796844 64.36319733]
[128.03692627 49.06886292]
[142.45074463 45.31505966]
[152.89054871 34.54425049]
[138.35020447 38.22911072]
[123.35972595 38.76346970]
[108.59390259 36.12327576]
[94.71742249 30.42737579]
[82.35491943 21.93216896]
[72.06288910 11.02006054]
[64.30461884 -1.81774485]
[59.42934799 -16.00336075]
[57.65652847 -30.89822960]
[59.06596756 -45.83186722]
[63.59421539 -60.13203812]
[71.03743744 -73.15503693]
[81.06058502 -84.31462860]
[93.21246338 -93.10848236]
[106.94606781 -99.14073944]
[121.64318848 -102.13986206]
[136.64222717 -101.97084045]
[151.26803589 -98.64129639]
[164.86222839 -92.30110168]
[176.81285095 -83.23564911]
[186.58198547 -71.85302734]
[193.72985840 -58.66561127]
[197.93470764 -44.26702881]
[199.00727844 -29.30542564]
[196.89926147 -14.45428753]
[191.70556641 -0.38213265]
[183.65998840 12.27758789]
[173.12290955 22.95644951]
[187.65785217 19.25028801]
[202.15344238 15.39312935]
[216.64903259 11.53596973]
[231.14463806 7.67881012]
[245.64022827 3.82165098]
[260.13583374 -0.03550855]
[274.63143921 -3.89266801]
[289.12701416 -7.74982738]
[303.62261963 -11.60698700]
[305.98934937 -26.65087318]
[314.27578735 -39.42798233]
[327.04632568 -47.72460175]
[342.08831787 -50.10329437]
[356.79568481 -46.15193558]
[368.62026978 -36.55512238]
[375.51342773 -22.97556114]
[376.28082275 -7.76599264]
[370.78955078 6.43843317]
[359.99096680 17.17671394]
[345.75601196 22.58837700]
[330.55099487 21.73582077]
[317.01022339 14.76675415]
[307.47976685 2.88860965]
[292.98419189 6.74576902]
[278.48858643 10.60292816]
[263.99298096 14.46008778]
[249.49739075 18.31724739]
[235.00180054 22.17440605]
[220.50619507 26.03156662]
[206.01060486 29.88872528]
[191.51499939 33.74588394]
[185.82302856 38.53620148]
[176.67767334 37.52915192]
[163.66136169 44.98406219]
[153.22154236 55.75487137]
[149.91932678 70.27880096]
[134.75877380 74.80300903]
[124.31896973 85.57381439]
[113.87915039 96.34461975]
[116.17194366 122.57791901]
[116.17194366 137.57791138]
[116.17194366 152.57791138]
[116.17194366 167.57791138]
[116.17194366 182.57791138]
[116.17194366 197.57791138]
[116.17194366 212.57791138]
[116.17194366 227.57791138]
[116.17194366 242.57791138]
[116.17194366 257.57791138]
[130.71182251 261.63922119]
[143.61621094 269.47372437]
[153.92749023 280.50006104]
[160.88050842 293.89999390]
[163.95932007 308.67916870]
[162.93542480 323.74084473]
[157.88482666 337.96737671]
[149.18229675 350.30303955]
[137.47363281 359.83245850]
[123.62769318 365.84848022]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 57]
[27 56]
[28 55]
[29 54]
[31 53]
[32 52]
[33 51]
[34 42]
[35 41]
[58 130]
[59 129]
[60 128]
[62 126]
[63 125]
[91 124]
[92 122]
[93 121]
[94 120]
[95 119]
[96 118]
[97 117]
[98 116]
[99 115]
[100 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
