%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAUAGCAGGGGGGGGGGGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACxxxxxxxxxxCCCCUGCCAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUACCCCCCCCCCAUCACAGCAG\
) } def
/len { sequence length } bind def

/coor [
[83.15753174 350.30032349]
[70.28425598 342.39746094]
[60.15996170 331.18695068]
[53.60538101 317.57760620]
[51.15185928 302.67266846]
[52.99829483 287.68045044]
[58.99500656 273.81622314]
[68.65586853 262.20397949]
[81.19771576 253.78503418]
[95.60383606 249.24186707]
[95.29178619 234.24511719]
[94.97972870 219.24836731]
[94.66767120 204.25160217]
[94.35561371 189.25485229]
[94.04355621 174.25810242]
[93.73149872 159.26135254]
[93.41944885 144.26458740]
[93.10739136 129.26783752]
[92.79533386 114.27108765]
[86.16683197 100.81511688]
[74.46720886 91.42795563]
[62.76758575 82.04079437]
[51.06796265 72.65363312]
[39.36833954 63.26647186]
[25.58595848 57.34650803]
[10.72291183 55.32417297]
[-4.14013529 53.30183792]
[-19.05904770 51.74425888]
[-34.01929474 50.65294647]
[-48.34581757 57.36572647]
[-60.47644043 48.72296906]
[-75.43669128 47.63166046]
[-90.39693451 46.54034805]
[-106.74175262 54.95622635]
[-120.88652039 44.61574936]
[-135.86624146 43.83590698]
[-148.69935608 53.46350479]
[-164.19100952 49.29357910]
[-170.45732117 34.52493286]
[-162.69131470 20.48681450]
[-146.85041809 17.94806290]
[-135.08639526 28.85619164]
[-120.10667419 29.63603592]
[-110.87496185 21.75677681]
[-98.34911346 22.32433319]
[-89.30562592 31.58009911]
[-74.34537506 32.67140961]
[-59.38513184 33.76272202]
[-46.12866592 26.97188568]
[-32.92798615 35.69269943]
[-17.96773720 36.78400803]
[-15.04114819 34.70974731]
[-10.94498920 33.98645020]
[-6.34253788 35.15684509]
[-2.11780095 38.43879318]
[12.74524593 40.46112823]
[27.60829353 42.48346329]
[15.99352455 32.99150848]
[6.73207951 21.19211769]
[0.27107435 7.65493155]
[-3.07757020 -6.96651077]
[-3.15219069 -21.96632576]
[0.05081548 -36.62036133]
[6.37681580 -50.22116089]
[15.52040768 -62.11211014]
[27.04016304 -71.71915436]
[40.37993622 -78.57848358]
[54.89572525 -82.35894775]
[69.88674164 -82.87803650]
[84.62925720 -80.11069489]
[98.41154480 -74.19052124]
[110.56823730 -65.40332031]
[120.51243591 -54.17332077]
[127.76406097 -41.04267502]
[131.97303772 -26.64529419]
[132.93614197 -11.67624474]
[130.60688782 3.14180541]
[125.09774017 17.09348106]
[116.67465210 29.50523376]
[105.74427032 39.77785492]
[92.83428955 47.41540909]
[78.56795502 52.04918289]
[63.63402176 53.45545959]
[48.75550079 51.56684875]
[60.45512390 60.95401001]
[72.15474701 70.34117126]
[83.85437012 79.72833252]
[95.55399323 89.11549377]
[104.00019073 84.73458099]
[115.51740265 87.69496155]
[130.38044739 85.67262268]
[131.77287292 71.16423035]
[136.36978149 57.34100342]
[143.93547058 44.90098572]
[154.08444214 34.47156906]
[166.30101013 26.57786369]
[179.96551514 21.61625862]
[194.38574219 19.83452034]
[208.83198547 21.31941795]
[222.57397461 25.99250603]
[234.91780090 33.61426163]
[245.24098206 43.79635620]
[253.02377319 56.02145004]
[257.87542725 69.66945648]
[272.77731323 67.95676422]
[287.67922974 66.24407959]
[295.18936157 52.66551208]
[309.26068115 46.12508774]
[324.48251343 49.13773346]
[335.00170898 60.54502106]
[336.77343750 75.96061707]
[329.11642456 89.45690918]
[314.97497559 95.84429932]
[299.78674316 92.66670990]
[289.39190674 81.14598083]
[274.48999023 82.85866547]
[259.58810425 84.57135773]
[257.73190308 99.92417908]
[252.26666260 114.40019226]
[243.50350952 127.16344452]
[231.94419861 137.47584534]
[218.25230408 144.73982239]
[203.21517944 148.53297424]
[187.69860840 148.63261414]
[172.59706116 145.02883911]
[158.78204346 137.92536926]
[147.05180359 127.72798157]
[138.08529663 115.02138519]
[132.40278625 100.53567505]
[117.53974152 102.55800629]
[107.79208374 113.95903015]
[108.10414124 128.95578003]
[108.41619873 143.95252991]
[108.72825623 158.94929504]
[109.04031372 173.94604492]
[109.35237122 188.94279480]
[109.66442108 203.93954468]
[109.97647858 218.93630981]
[110.28853607 233.93305969]
[110.60059357 248.92980957]
[125.18323517 252.86976624]
[138.06443787 260.75970459]
[148.19999695 271.96002197]
[154.76824951 285.56277466]
[157.23674011 300.46524048]
[155.40536499 315.45932007]
[149.42257690 329.32955933]
[139.77339172 340.95150757]
[127.24000549 349.38305664]
[112.83845520 353.94067383]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 88]
[21 87]
[22 86]
[23 85]
[24 84]
[25 57]
[26 56]
[27 55]
[28 51]
[29 50]
[31 48]
[32 47]
[33 46]
[35 43]
[36 42]
[90 130]
[91 129]
[104 117]
[105 116]
[106 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
