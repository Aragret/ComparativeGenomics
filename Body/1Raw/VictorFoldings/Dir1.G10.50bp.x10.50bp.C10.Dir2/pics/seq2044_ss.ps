%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUUAUAACCAGGGGGGGGGGAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAAxxxxxxxxxxCAACCGACUAAUCACCACCCAACAAUGACUAAUCAAACUAACCUCAAAACCCCCCCCCCCAAAUGAUAACCA\
) } def
/len { sequence length } bind def

/coor [
[83.79137421 396.74215698]
[70.08921814 390.48126221]
[58.12410736 381.32791138]
[48.49619293 369.74124146]
[41.68841553 356.30242920]
[38.04224777 341.68554688]
[37.74057770 326.62377930]
[40.79854202 311.87261963]
[47.06275177 298.17199707]
[56.21899796 286.20907593]
[67.80800629 276.58398438]
[81.24847412 269.77944946]
[95.86624146 266.13684082]
[95.56223297 251.13990784]
[95.25823212 236.14299011]
[94.95422363 221.14607239]
[94.65022278 206.14915466]
[94.34621429 191.15223694]
[94.04221344 176.15531921]
[93.73820496 161.15840149]
[93.43420410 146.16148376]
[93.13020325 131.16456604]
[76.21220398 121.27356720]
[68.26464844 103.36025238]
[53.39463425 101.38980103]
[38.52462006 99.41934967]
[23.82763672 105.27676392]
[12.22705364 95.93461609]
[-2.64296055 93.96416473]
[-17.54985619 92.29548645]
[-32.48750687 90.92926788]
[-47.42515945 89.56304932]
[-62.36281204 88.19683838]
[-77.30046082 86.83061981]
[-84.69916534 100.14147949]
[-96.87613678 109.28704834]
[-111.72163391 112.68278503]
[-126.66358948 109.74037170]
[-139.11322021 100.96958923]
[-146.91355896 87.89003754]
[-148.71313477 72.76782227]
[-144.20016479 58.22295761]
[-134.15655518 46.77543259]
[-120.32241821 40.40859985]
[-105.09460449 40.22555161]
[-91.11141968 46.25799942]
[-80.79553986 57.46078873]
[-75.93424988 71.89296722]
[-60.99659348 73.25918579]
[-46.05894470 74.62539673]
[-31.12129021 75.99161530]
[-16.18363762 77.35783386]
[-11.96543980 75.00614929]
[-6.21680593 75.32053375]
[-0.67250890 79.09414673]
[14.19750500 81.06459808]
[27.83088493 75.06624603]
[40.49507141 84.54933929]
[55.36508560 86.51979065]
[70.23509979 88.49024200]
[75.92246246 79.05492401]
[84.47928619 72.11575317]
[94.88580322 68.49970245]
[105.90180206 68.63771820]
[116.21445465 72.51335907]
[126.65859985 61.74675369]
[137.10275269 50.98015213]
[127.47737122 39.45756912]
[119.10918427 26.99197197]
[112.08987427 13.71993637]
[106.49633789 -0.21312021]
[102.38986969 -14.65454102]
[99.81546021 -29.44609642]
[98.80131531 -44.42572403]
[99.35855103 -59.42929459]
[101.48105621 -74.29242706]
[105.14557648 -88.85227203]
[110.31196594 -102.94929504]
[116.92361450 -116.42905426]
[124.90808105 -129.14384460]
[134.17788696 -140.95436096]
[144.63145447 -151.73121643]
[156.15428162 -161.35630798]
[168.62007141 -169.72419739]
[181.89228821 -176.74319458]
[195.82546997 -182.33638000]
[210.26699829 -186.44250488]
[225.05860901 -189.01655579]
[240.03826904 -190.03033447]
[255.04182434 -189.47273254]
[269.90490723 -187.34986877]
[284.46466064 -183.68499756]
[298.56155396 -178.51826477]
[312.04116821 -171.90628052]
[324.75576782 -163.92150879]
[336.56604004 -154.65141296]
[347.34265137 -144.19757080]
[356.96746826 -132.67453003]
[365.33505249 -120.20852661]
[372.35369873 -106.93614960]
[377.94656372 -93.00282288]
[382.05233765 -78.56120300]
[384.62603760 -63.76951981]
[385.63943481 -48.78984451]
[385.08148193 -33.78629684]
[382.95825195 -18.92326927]
[379.29302979 -4.36360550]
[374.12594604 9.73316956]
[367.51364136 23.21260452]
[359.52856445 35.92700958]
[350.25817871 47.73707962]
[339.80407715 58.51342010]
[328.28079224 68.13795471]
[315.81460571 76.50523376]
[302.54205322 83.52358246]
[288.60858154 89.11610413]
[274.16687012 93.22151947]
[259.37512207 95.79485321]
[244.39541626 96.80790710]
[229.39189148 96.24958038]
[214.52891541 94.12599182]
[199.96932983 90.46040344]
[185.87268066 85.29299164]
[172.39341736 78.68035889]
[159.67919922 70.69496155]
[147.86935425 61.42430115]
[137.42520142 72.19090271]
[126.98105621 82.95750427]
[131.77127075 96.99825287]
[129.69548035 111.68770599]
[121.20228577 123.85135651]
[108.12712097 130.86054993]
[108.43112183 145.85746765]
[108.73513031 160.85440063]
[109.03913116 175.85131836]
[109.34313202 190.84823608]
[109.64714050 205.84515381]
[109.95114136 220.84207153]
[110.25514984 235.83898926]
[110.55915070 250.83590698]
[110.86315918 265.83282471]
[125.61653137 268.88006592]
[139.32171631 275.13430786]
[151.29125977 284.28186035]
[160.92478943 295.86386108]
[167.73908997 309.29937744]
[171.39233398 323.91448975]
[171.70129395 338.97610474]
[168.65048218 353.72875977]
[162.39291382 367.43243408]
[153.24247742 379.39974976]
[141.65812683 389.03048706]
[128.22096252 395.84152222]
[113.60495758 399.49121094]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[24 60]
[25 59]
[26 58]
[28 56]
[29 55]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[65 128]
[66 127]
[67 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
