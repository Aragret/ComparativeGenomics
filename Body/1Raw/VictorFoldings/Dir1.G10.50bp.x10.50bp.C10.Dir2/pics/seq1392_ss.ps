%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCCCUAAAGGGGGGGGGGCCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAxxxxxxxxxxGACACUAGGAAAAAACCUUGUAGAGAGAGUAAAAAAUUUAACACCCAUAGCCCCCCCCCCUAGGCCUAAA\
) } def
/len { sequence length } bind def

/coor [
[61.06616974 658.03851318]
[47.22023010 652.02252197]
[35.51156998 642.49310303]
[26.80904579 630.15740967]
[21.75844383 615.93090820]
[20.73455238 600.86920166]
[23.81335068 586.09008789]
[30.76637268 572.69012451]
[41.07765579 561.66381836]
[53.98203659 553.82928467]
[68.52192688 549.76800537]
[68.52192688 534.76800537]
[68.52192688 519.76800537]
[68.52192688 504.76797485]
[68.52192688 489.76797485]
[68.52192688 474.76797485]
[68.52192688 459.76797485]
[68.52192688 444.76797485]
[68.52192688 429.76797485]
[68.52192688 414.76797485]
[68.52192688 399.76797485]
[54.45799637 394.71911621]
[42.94845963 385.14520264]
[35.39478683 372.18695068]
[32.72533417 357.39859009]
[35.28128052 342.56155396]
[42.77315903 329.46987915]
[54.31349945 319.71322632]
[68.52192688 314.48388672]
[68.52192688 299.48388672]
[68.52192688 284.48388672]
[68.52192688 269.48388672]
[68.52192688 254.48387146]
[68.52192688 239.48387146]
[68.52192688 224.48387146]
[56.33624268 219.78923035]
[46.46002579 211.19685364]
[40.09341049 199.72190857]
[38.01992035 186.73147583]
[40.51010132 173.78181458]
[47.28645325 162.43183899]
[57.55416107 154.05549622]
[70.09426117 149.67539978]
[70.71823883 134.68838501]
[71.34221649 119.70137024]
[65.71025848 105.79881287]
[54.83143616 95.47161102]
[43.95261002 85.14440155]
[33.07378387 74.81719971]
[22.19495964 64.48999023]
[9.26258564 64.03443146]
[0.40997866 55.15466309]
[0.02087914 43.02387619]
[-10.64074707 32.47258759]
[-26.63165474 28.83625793]
[-31.21880341 13.09173203]
[-19.68332481 1.43562698]
[-3.89193296 5.85874462]
[-0.08945686 21.81096077]
[10.57216930 32.36225128]
[27.74100494 35.85953903]
[32.52216339 53.61116791]
[43.40098953 63.93837357]
[54.27981567 74.26557922]
[65.15863800 84.59278107]
[76.03746796 94.91999054]
[85.86564636 82.62429810]
[99.92098236 79.69815063]
[105.40801239 65.73776245]
[110.89504242 51.77737045]
[98.77067566 60.60911560]
[84.38377380 64.85375977]
[69.40708923 64.01778412]
[55.58194733 58.19838333]
[44.51578522 48.07217407]
[37.49525833 34.81652832]
[35.33663559 19.97266197]
[38.29090118 5.26646185]
[46.01456451 -7.59219456]
[57.60960007 -17.10824203]
[71.72785950 -22.17525864]
[86.72783661 -22.20410538]
[100.86547852 -17.19142914]
[112.49703217 -7.72004890]
[120.27009583 5.10880518]
[123.28089905 19.80353355]
[121.17849731 34.65834808]
[130.92614746 23.25732613]
[140.67379761 11.85630512]
[139.19229126 -3.87839174]
[149.33503723 -15.99863911]
[165.08451843 -17.31371117]
[177.09684753 -7.04339647]
[178.24533081 8.71910763]
[167.84858704 20.62218666]
[152.07482910 21.60395622]
[142.32717896 33.00497818]
[132.57951355 44.40599823]
[124.85543823 57.26440048]
[119.36840820 71.22479248]
[113.88137054 85.18518066]
[119.31492615 92.01337433]
[121.48779297 100.72536469]
[119.80607605 109.80239105]
[114.36734009 117.57216644]
[105.97937775 122.51667023]
[96.04515076 123.56653595]
[86.32923126 120.32534790]
[85.70525360 135.31236267]
[85.08127594 150.29937744]
[100.33752441 158.05921936]
[110.65988922 171.64356995]
[114.02703094 188.31304932]
[109.81414032 204.73226929]
[98.90824890 217.63714600]
[83.52192688 224.48387146]
[83.52192688 239.48387146]
[83.52192688 254.48387146]
[83.52192688 269.48388672]
[83.52192688 284.48388672]
[83.52192688 299.48388672]
[83.52192688 314.48388672]
[97.73034668 319.71322632]
[109.27069092 329.46987915]
[116.76257324 342.56155396]
[119.31851959 357.39859009]
[116.64906311 372.18695068]
[109.09539032 385.14520264]
[97.58585358 394.71911621]
[83.52192688 399.76797485]
[83.52192688 414.76797485]
[83.52192688 429.76797485]
[83.52192688 444.76797485]
[83.52192688 459.76797485]
[83.52192688 474.76797485]
[83.52192688 489.76797485]
[83.52192688 504.76797485]
[83.52192688 519.76800537]
[83.52192688 534.76800537]
[83.52192688 549.76800537]
[98.06181335 553.82928467]
[110.96619415 561.66381836]
[121.27747345 572.69012451]
[128.23049927 586.09008789]
[131.30929565 600.86920166]
[130.28540039 615.93090820]
[125.23480225 630.15740967]
[116.53227997 642.49310303]
[104.82361603 652.02252197]
[90.97767639 658.03851318]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[29 122]
[30 121]
[31 120]
[32 119]
[33 118]
[34 117]
[35 116]
[43 110]
[44 109]
[45 108]
[46 66]
[47 65]
[48 64]
[49 63]
[50 62]
[53 60]
[54 59]
[68 101]
[69 100]
[70 99]
[87 98]
[88 97]
[89 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
