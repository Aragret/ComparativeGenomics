%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUCACCCUGGGGGGGGGGAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGxxxxxxxxxxCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUAACAUGACCCCCCCCCCCUAACACCCU\
) } def
/len { sequence length } bind def

/coor [
[52.98751068 520.70227051]
[39.14157104 514.68627930]
[27.43291092 505.15682983]
[18.73038673 492.82116699]
[13.67978382 478.59463501]
[12.65589237 463.53295898]
[15.73469162 448.75381470]
[22.68771362 435.35388184]
[32.99899673 424.32754517]
[45.90337753 416.49304199]
[60.44326401 412.43173218]
[60.44326401 397.43173218]
[60.44326401 382.43173218]
[60.44326401 367.43173218]
[60.44326401 352.43173218]
[60.44326401 337.43173218]
[60.44326401 322.43173218]
[60.44326401 307.43173218]
[60.44326401 292.43173218]
[60.44326401 277.43173218]
[50.67385864 288.81411743]
[36.34466934 293.24969482]
[21.85314941 289.37725830]
[11.64655685 278.38519287]
[8.85716534 263.64682007]
[14.34100437 249.68518066]
[26.41515350 240.78489685]
[41.37421036 239.67738342]
[54.62742996 246.70248413]
[62.10776138 259.70507812]
[64.90008545 244.96728516]
[67.69241333 230.22947693]
[62.45960236 216.28433228]
[72.63063049 204.16572571]
[64.05713654 192.04010010]
[66.67900848 177.05407715]
[79.45561218 168.14363098]
[82.24794006 153.40583801]
[85.04026794 138.66802979]
[87.83258820 123.93022156]
[79.10650635 116.85714722]
[74.03824615 106.83290100]
[73.51509094 95.61241913]
[59.99090195 89.12425232]
[46.46670914 82.63609314]
[31.64208412 88.11386108]
[17.32125854 81.42884064]
[12.00052643 66.54713440]
[18.83658218 52.29778290]
[33.77371597 47.13468552]
[47.94999313 54.12101364]
[52.95487595 69.11190033]
[66.47906494 75.60006714]
[80.00325775 82.08822632]
[87.24494934 76.37776184]
[95.99189758 73.45500946]
[105.21184540 73.66489410]
[112.11884308 60.34973526]
[119.02584076 47.03458023]
[122.73200226 32.49964523]
[123.04405975 17.50288963]
[123.35611725 2.50613666]
[123.66817474 -12.49061680]
[123.35611725 -27.48737144]
[122.42048645 -42.45816040]
[121.48486328 -57.42895508]
[120.54923248 -72.39974213]
[106.26298523 -77.67449188]
[95.36180878 -88.30860138]
[89.73440552 -102.45964813]
[90.35575104 -117.67588806]
[97.11820221 -131.32099915]
[108.85011292 -141.03089905]
[123.51886749 -145.12327576]
[138.58300781 -142.88911438]
[151.43258667 -134.71548462]
[159.84133911 -122.01852417]
[162.35238647 -106.99805450]
[158.53068542 -92.25646210]
[149.03836060 -80.34782410]
[135.52001953 -73.33537292]
[136.45565796 -58.36458206]
[137.39128113 -43.39379120]
[138.32690430 -28.42299843]
[140.40747070 -26.45357895]
[141.80686951 -23.51493073]
[142.14184570 -19.87217522]
[141.13589478 -15.92767048]
[138.66493225 -12.17856026]
[138.35287476 2.81819296]
[138.04081726 17.81494713]
[137.72875977 32.81169891]
[145.76524353 20.14619637]
[156.75598145 9.93818188]
[169.97966003 2.85761881]
[184.56838989 -0.63079029]
[199.56469727 -0.29809815]
[213.98437500 3.83386040]
[226.88102722 11.49390125]
[237.40824890 22.17929077]
[244.87513733 35.18873596]
[248.79161072 49.66841507]
[248.90065002 64.66802216]
[245.19509888 79.20310974]
[237.91813660 92.31973267]
[227.54736328 103.15704346]
[214.76344299 111.00376892]
[200.40536499 115.34492493]
[185.41546631 115.89559937]
[170.77757263 112.61965179]
[157.45234680 105.73208618]
[146.31436157 95.68493652]
[138.09460449 83.13761139]
[133.33253479 68.91358948]
[132.34100342 53.94157791]
[125.43399811 67.25673676]
[118.52700043 80.57189178]
[126.81523132 98.71755219]
[120.29651642 117.57135773]
[102.57039642 126.72254181]
[99.77806854 141.46034241]
[96.98574829 156.19815063]
[94.19342041 170.93595886]
[102.82505798 183.90255737]
[99.78329468 198.80900574]
[87.36843109 206.95805359]
[92.40151978 221.95733643]
[82.43022156 233.02180481]
[79.63789368 247.75961304]
[76.84556580 262.49740601]
[75.44326782 277.43173218]
[75.44326782 292.43173218]
[75.44326782 307.43173218]
[75.44326782 322.43173218]
[75.44326782 337.43173218]
[75.44326782 352.43173218]
[75.44326782 367.43173218]
[75.44326782 382.43173218]
[75.44326782 397.43173218]
[75.44326782 412.43173218]
[89.98315430 416.49304199]
[102.88753510 424.32754517]
[113.19881439 435.35388184]
[120.15184021 448.75381470]
[123.23063660 463.53295898]
[122.20674896 478.59463501]
[117.15614319 492.82116699]
[108.45362091 505.15682983]
[96.74495697 514.68627930]
[82.89901733 520.70227051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[30 130]
[31 129]
[32 128]
[34 126]
[37 123]
[38 122]
[39 121]
[40 120]
[43 54]
[44 53]
[45 52]
[57 117]
[58 116]
[59 115]
[60 92]
[61 91]
[62 90]
[63 89]
[64 84]
[65 83]
[66 82]
[67 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
