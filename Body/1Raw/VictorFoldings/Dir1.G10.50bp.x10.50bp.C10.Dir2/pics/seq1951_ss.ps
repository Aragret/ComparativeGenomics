%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUUAGCCAAGGGGGGGGGGACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAxxxxxxxxxxUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUCCCCCCCCCCACCCUAGCCAA\
) } def
/len { sequence length } bind def

/coor [
[89.08682251 387.59793091]
[75.06488037 382.04492188]
[62.86492157 373.17858887]
[53.25384903 361.55630493]
[46.83582687 347.90859985]
[44.01428986 333.09341431]
[44.96660614 318.04202271]
[49.63290787 303.70059204]
[57.71987534 290.97064209]
[68.71915436 280.65237427]
[81.93930817 273.39440918]
[96.54932404 269.65295410]
[96.54932404 254.65296936]
[96.54932404 239.65296936]
[96.54932404 224.65296936]
[96.54932404 209.65296936]
[96.54932404 194.65296936]
[96.54932404 179.65296936]
[96.54932404 164.65296936]
[96.54932404 149.65296936]
[96.54932404 134.65296936]
[96.54932404 119.65296173]
[85.15824890 109.89368439]
[70.33576965 112.19456482]
[55.75201797 115.70372772]
[41.50532532 120.39752960]
[27.25863266 125.09133148]
[13.01194096 129.78512573]
[2.49844480 142.37077332]
[-13.60919285 139.29244995]
[-18.74081421 123.71688080]
[-7.61744833 111.66687012]
[8.31814003 115.53843689]
[22.56483269 110.84464264]
[36.81152344 106.15084076]
[51.05821609 101.45703888]
[37.45170212 95.14334106]
[30.01689720 82.11553955]
[31.50201607 67.18923950]
[41.35809708 55.88182068]
[55.94192123 52.37297440]
[69.86270905 57.95971298]
[77.97476196 70.57695007]
[77.27952576 85.56082916]
[68.03488922 97.37207794]
[82.85737610 95.07120514]
[68.44795227 90.90364075]
[59.60467148 78.78768921]
[60.02829742 63.79367065]
[69.54155731 52.19634628]
[84.16329956 48.84900284]
[97.77455902 55.15245438]
[104.67925262 68.46880341]
[101.98725891 83.22647858]
[110.65386963 70.98352814]
[119.32047272 58.74057388]
[127.98708344 46.49761963]
[136.65368652 34.25466919]
[133.81010437 25.14956665]
[135.48753357 15.89982700]
[141.17759705 8.59124184]
[149.48205566 4.81136513]
[158.45448303 5.30544472]
[167.85833740 -6.38076353]
[177.26220703 -18.06697273]
[186.66606140 -29.75318146]
[195.82798767 -41.63000488]
[204.74414062 -53.69243622]
[213.66029358 -65.75486755]
[202.87654114 -76.21403503]
[193.58312988 -88.01725006]
[185.94590759 -100.95387268]
[180.10116577 -114.79303741]
[176.15322876 -129.28776550]
[174.17253113 -144.17938232]
[174.19442749 -159.20213318]
[176.21853638 -174.08792114]
[180.20872498 -188.57107544]
[186.09379578 -202.39314270]
[193.76869202 -215.30743408]
[203.09648132 -227.08351135]
[213.91069031 -237.51118469]
[226.01831055 -246.40437317]
[239.20329285 -253.60437012]
[253.23030090 -258.98269653]
[267.84902954 -262.44332886]
[282.79861450 -263.92453003]
[297.81219482 -263.39987183]
[312.62191772 -260.87872314]
[326.96340942 -256.40606689]
[340.58078003 -250.06173706]
[353.23098755 -241.95892334]
[364.68829346 -232.24224854]
[374.74819946 -221.08512878]
[383.23123169 -208.68666077]
[389.98593140 -195.26811218]
[394.89178467 -181.06895447]
[397.86123657 -166.34259033]
[398.84130859 -151.35183716]
[397.81451416 -136.36419678]
[394.79913330 -121.64717102]
[389.84899902 -107.46338654]
[383.05249023 -94.06597137]
[374.53085327 -81.69401550]
[364.43618774 -70.56832123]
[352.94863892 -60.88742828]
[340.27322388 -52.82410812]
[326.63613892 -46.52226257]
[312.28076172 -42.09434891]
[297.46325684 -39.61939621]
[282.44808960 -39.14156723]
[267.50323486 -40.66939545]
[252.89535522 -44.17560959]
[238.88517761 -49.59763718]
[225.72273254 -56.83871841]
[216.80657959 -44.77628326]
[207.89042664 -32.71385193]
[207.71369934 -27.88498497]
[204.46012878 -23.13081551]
[198.35226440 -20.34932327]
[188.94841003 -8.66311550]
[179.54455566 3.02309346]
[170.14070129 14.70930195]
[168.87240601 35.27584457]
[148.89663696 42.92127609]
[140.23004150 55.16423035]
[131.56343079 67.40718079]
[122.89682007 79.65013885]
[114.23020935 91.89308929]
[118.92389679 105.05096436]
[111.54932404 119.65296173]
[111.54932404 134.65296936]
[111.54932404 149.65296936]
[111.54932404 164.65296936]
[111.54932404 179.65296936]
[111.54932404 194.65296936]
[111.54932404 209.65296936]
[111.54932404 224.65296936]
[111.54932404 239.65296936]
[111.54932404 254.65296936]
[111.54932404 269.65295410]
[126.15933228 273.39440918]
[139.37950134 280.65237427]
[150.37876892 290.97064209]
[158.46572876 303.70059204]
[163.13203430 318.04202271]
[164.08435059 333.09341431]
[161.26281738 347.90859985]
[154.84478760 361.55630493]
[145.23371887 373.17858887]
[133.03376770 382.04492188]
[119.01181793 387.59793091]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 46]
[24 45]
[25 36]
[26 35]
[27 34]
[28 33]
[54 129]
[55 128]
[56 127]
[57 126]
[58 125]
[63 123]
[64 122]
[65 121]
[66 120]
[67 117]
[68 116]
[69 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
