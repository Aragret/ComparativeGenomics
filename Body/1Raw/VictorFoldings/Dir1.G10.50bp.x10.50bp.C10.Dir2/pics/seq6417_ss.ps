%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCCCCUAAGGGGGGGGGGUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCxxxxxxxxxxUCCGACAUCUGGUUCCUACUUCAGGGUCAUAAAGCCUAAAUAGCCCACACCCCCCCCCCCGUUCCCCUUA\
) } def
/len { sequence length } bind def

/coor [
[83.81081390 385.17318726]
[70.59062195 377.90072632]
[59.70381546 367.45370483]
[51.89268494 354.54446411]
[47.68980408 340.05313110]
[47.38173294 324.96780396]
[50.98947525 310.31698608]
[58.26704788 297.09957886]
[68.71825409 286.21682739]
[81.63051605 278.41067505]
[96.12345123 274.21337891]
[95.81139374 259.21664429]
[95.49934387 244.21987915]
[95.18728638 229.22312927]
[94.87522888 214.22637939]
[94.56317139 199.22962952]
[94.25111389 184.23286438]
[93.93905640 169.23611450]
[93.62700653 154.23936462]
[93.31494904 139.24261475]
[93.00289154 124.24585724]
[79.91713715 120.14064026]
[69.61692047 108.86288452]
[55.39014053 113.61669922]
[41.16336060 118.37051392]
[26.93658257 123.12432861]
[12.70980263 127.87814331]
[4.28791142 141.53286743]
[-11.65542316 143.31881714]
[-22.88983917 131.86598206]
[-20.79725456 115.95999146]
[-6.98292017 107.80255127]
[7.95598793 113.65136719]
[22.18276787 108.89755249]
[36.40954590 104.14373779]
[50.63632584 99.38992310]
[64.86310577 94.63610840]
[70.20462036 80.61939240]
[62.74970627 67.60308075]
[55.29479599 54.58677292]
[41.72211838 46.45701218]
[42.11081314 31.56747818]
[34.65590286 18.55116844]
[20.62695122 23.94458008]
[5.93908596 27.13316345]
[-9.06338501 28.04217339]
[-24.02878189 26.65030289]
[-38.60629654 22.99017715]
[-52.45420837 17.14759636]
[-65.24790955 9.25951958]
[-76.68748474 -0.48914719]
[-86.50478363 -11.86988068]
[-94.46967316 -24.61590004]
[-100.39543915 -38.42841721]
[-104.14318085 -52.98365402]
[-105.62503815 -67.94040680]
[-104.80628204 -82.94807434]
[-101.70610809 -97.65485382]
[-96.39717865 -111.71599579]
[-89.00394440 -124.80188751]
[-79.69971466 -136.60577393]
[-68.70259857 -146.85096741]
[-56.27037430 -155.29728699]
[-42.69448471 -161.74674988]
[-28.29315567 -166.04817200]
[-13.40398312 -168.10070801]
[1.62401366 -167.85626221]
[16.43855476 -165.32057190]
[30.69236946 -160.55303955]
[44.05132294 -153.66546631]
[56.20226669 -144.81927490]
[66.86035919 -134.22184753]
[75.77577209 -122.12160492]
[82.73949432 -108.80219269]
[87.58831024 -94.57582092]
[90.20854187 -79.77600098]
[90.53876495 -64.74964142]
[88.57125092 -49.84899521]
[84.35211182 -35.42334747]
[77.98024750 -21.81085777]
[69.60503387 -9.33062458]
[59.42279816 1.72479928]
[47.67221451 11.09625912]
[55.12712479 24.11256790]
[68.16657257 31.31131744]
[68.31110382 47.13186264]
[75.76601410 60.14817429]
[83.22092438 73.16448212]
[107.21024323 72.48674774]
[122.15319061 87.91458130]
[136.86114502 84.96910095]
[151.56910706 82.02362061]
[157.11392212 72.57160950]
[166.76370239 67.86147308]
[177.18960571 69.24700928]
[184.94223022 76.02408600]
[199.75997925 73.69297791]
[214.57774353 71.36187744]
[227.00781250 61.57393646]
[240.78288269 67.23932648]
[255.60064697 64.90822601]
[263.65292358 60.45709610]
[270.75061035 62.68609619]
[285.61367798 60.66376495]
[300.47671509 58.64142990]
[313.10772705 49.11420059]
[326.76196289 55.06493759]
[337.57852173 43.21667480]
[353.57565308 44.42986679]
[362.48168945 57.77385330]
[357.46469116 73.01227570]
[342.37329102 78.45551300]
[328.78430176 69.92798615]
[317.21640015 79.31056213]
[302.49905396 73.50447845]
[287.63601685 75.52680969]
[272.77294922 77.54914093]
[257.93176270 79.72598267]
[243.11399841 82.05708313]
[231.74377441 91.67829132]
[216.90884399 86.17963409]
[202.09107971 88.51073456]
[187.27333069 90.84184265]
[173.23757935 104.08673859]
[154.51460266 96.73158264]
[139.80664062 99.67706299]
[125.09867096 102.62254333]
[119.68291473 115.79253387]
[107.99964142 123.93379974]
[108.31169891 138.93055725]
[108.62375641 153.92730713]
[108.93581390 168.92405701]
[109.24787140 183.92082214]
[109.55992889 198.91757202]
[109.87197876 213.91432190]
[110.18403625 228.91107178]
[110.49609375 243.90783691]
[110.80815125 258.90457153]
[111.12020874 273.90133667]
[125.77519989 277.49209595]
[139.00100708 284.75436401]
[149.89587402 295.19296265]
[157.71697998 308.09616089]
[161.93104553 322.58422852]
[162.25076294 337.66934204]
[158.65434265 352.32293701]
[151.38697815 365.54592896]
[140.94416809 376.43676758]
[128.03794861 384.25289917]
[113.54825592 388.46136475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
[38 88]
[39 87]
[40 86]
[42 84]
[43 83]
[90 127]
[91 126]
[92 125]
[96 123]
[97 122]
[98 121]
[100 119]
[101 118]
[103 117]
[104 116]
[105 115]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
