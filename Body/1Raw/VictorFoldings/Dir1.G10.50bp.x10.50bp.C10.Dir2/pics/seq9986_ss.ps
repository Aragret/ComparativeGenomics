%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACAAAUCGGGGGGGGGGUCCUUAAUUAUAACAUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUxxxxxxxxxxAACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCCCCCCCCCCCUCCAAAUC\
) } def
/len { sequence length } bind def

/coor [
[87.90843201 376.99307251]
[74.06249237 370.97705078]
[62.35383224 361.44763184]
[53.65130997 349.11196899]
[48.60070801 334.88543701]
[47.57681656 319.82376099]
[50.65561295 305.04458618]
[57.60863495 291.64465332]
[67.91992188 280.61831665]
[80.82430267 272.78381348]
[95.36418915 268.72250366]
[95.36418915 253.72250366]
[95.36418915 238.72250366]
[95.36418915 223.72250366]
[95.36418915 208.72250366]
[95.36418915 193.72250366]
[95.36418915 178.72250366]
[95.36418915 163.72250366]
[95.36418915 148.72250366]
[95.36418915 133.72250366]
[89.14447021 129.53143311]
[75.66573334 136.11351013]
[76.70502472 121.14929199]
[70.48530579 116.95822144]
[56.58275223 122.59017944]
[42.68019485 128.22213745]
[33.02800369 141.47985840]
[16.75115204 139.48085022]
[10.59386539 124.28150940]
[20.89023590 111.51762390]
[37.04824066 114.31958008]
[50.95079422 108.68762207]
[64.85334778 103.05566406]
[69.61576080 89.95059204]
[78.50867462 80.93823242]
[89.18041992 76.96377563]
[99.26936340 77.83770752]
[103.87493134 63.56224442]
[108.48049927 49.28678513]
[101.33676147 31.54924202]
[112.93513489 15.64304161]
[112.31115723 0.65602517]
[111.68717957 -14.33099079]
[111.06320953 -29.31800652]
[99.71495819 -39.98829651]
[99.29565430 -55.19615173]
[109.53808594 -65.94921112]
[108.91410828 -80.93622589]
[96.17042542 -86.78811646]
[87.24477386 -97.51769257]
[83.84277344 -110.98510742]
[86.57579041 -124.53643036]
[94.85198975 -135.52659607]
[107.00331116 -141.83569336]
[106.69125366 -156.83244324]
[106.37920380 -171.82920837]
[106.06714630 -186.82595825]
[105.75508881 -201.82270813]
[90.90231323 -204.19650269]
[76.71215820 -209.18441772]
[63.64077759 -216.62611389]
[52.10836029 -226.28236389]
[42.48562622 -237.84275818]
[35.08190536 -250.93568420]
[30.13520050 -265.14025879]
[27.80452347 -279.99984741]
[28.16479874 -295.03680420]
[31.20444298 -309.76773071]
[36.82574463 -323.71911621]
[44.84800339 -336.44244385]
[55.01333618 -347.52871704]
[66.99497223 -356.62161255]
[80.40774536 -363.42874146]
[94.82048798 -367.73135376]
[109.76990509 -369.39111328]
[124.77542114 -368.35467529]
[139.35467529 -364.65533447]
[153.03901672 -358.41201782]
[165.38851929 -349.82543945]
[176.00622559 -339.17160034]
[184.55081177 -326.79299927]
[190.74760437 -313.08755493]
[194.39739990 -298.49581909]
[195.38287354 -283.48687744]
[193.67236328 -268.54318237]
[189.32081604 -254.14512634]
[182.46815491 -240.75555420]
[173.33464050 -228.80487061]
[162.21389771 -218.67724609]
[149.46339417 -210.69824219]
[135.49301147 -205.12435913]
[120.75183868 -202.13476562]
[121.06389618 -187.13801575]
[121.37595367 -172.14126587]
[121.68801117 -157.14450073]
[122.00006866 -142.14775085]
[136.32386780 -134.73287964]
[145.01957703 -121.03737640]
[145.64430237 -104.73278809]
[137.93409729 -90.24665070]
[123.90112305 -81.56020355]
[124.52510071 -66.57318878]
[135.62593079 -56.70874786]
[136.47222900 -41.51866913]
[126.05022430 -29.94198418]
[126.67420197 -14.95496845]
[127.29817963 0.03204777]
[127.92215729 15.01906395]
[129.72325134 0.12758777]
[139.58047485 -11.17883492]
[154.08743286 -14.99301529]
[168.23094177 -9.99687862]
[177.12336731 2.08304811]
[177.69175720 17.07227516]
[169.73966980 29.79093933]
[156.01515198 35.84381866]
[141.26068115 33.13904572]
[155.38548279 38.18780136]
[169.51028442 43.23656082]
[185.53775024 39.76487732]
[196.35615540 52.08940506]
[190.83647156 67.53171539]
[174.65686035 70.20609283]
[164.46153259 57.36136246]
[150.33673096 52.31260681]
[136.21192932 47.26385117]
[122.75595856 53.89234924]
[118.15039062 68.16780853]
[113.54483032 82.44326782]
[128.26539612 105.12793732]
[110.36418915 133.72250366]
[110.36418915 148.72250366]
[110.36418915 163.72250366]
[110.36418915 178.72250366]
[110.36418915 193.72250366]
[110.36418915 208.72250366]
[110.36418915 223.72250366]
[110.36418915 238.72250366]
[110.36418915 253.72250366]
[110.36418915 268.72250366]
[124.90407562 272.78381348]
[137.80845642 280.61831665]
[148.11973572 291.64465332]
[155.07276917 305.04458618]
[158.15156555 319.82376099]
[157.12767029 334.88543701]
[152.07707214 349.11196899]
[143.37454224 361.44763184]
[131.66587830 370.97705078]
[117.81994629 376.99307251]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 33]
[25 32]
[26 31]
[37 129]
[38 128]
[39 127]
[41 108]
[42 107]
[43 106]
[44 105]
[47 102]
[48 101]
[54 96]
[55 95]
[56 94]
[57 93]
[58 92]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
