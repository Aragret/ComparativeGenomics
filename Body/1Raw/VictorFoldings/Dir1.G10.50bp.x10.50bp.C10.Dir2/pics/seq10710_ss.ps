%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCACAACCGGGGGGGGGGCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCAUAAUxxxxxxxxxxGUACCCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCCCCCCCCCCCAUCCACAACC\
) } def
/len { sequence length } bind def

/coor [
[84.56239319 531.56909180]
[70.71646118 525.55310059]
[59.00779724 516.02368164]
[50.30527115 503.68801880]
[45.25466919 489.46148682]
[44.23077774 474.39981079]
[47.30957794 459.62063599]
[54.26259995 446.22070312]
[64.57388306 435.19436646]
[77.47826385 427.35986328]
[92.01815033 423.29855347]
[92.01815033 408.29855347]
[92.01815033 393.29855347]
[92.01815033 378.29855347]
[92.01815033 363.29855347]
[92.01815033 348.29855347]
[92.01815033 333.29855347]
[92.01815033 318.29855347]
[92.01815033 303.29855347]
[92.01815033 288.29855347]
[79.20903015 282.88308716]
[69.40903473 272.95486450]
[64.12778473 259.99603271]
[64.19679260 245.95915222]
[69.63875580 232.97283936]
[79.65904999 223.01910400]
[92.76160431 217.63078308]
[93.07366180 202.63403320]
[93.38571930 187.63728333]
[93.69777679 172.64051819]
[93.69777679 157.64051819]
[93.38571930 142.64376831]
[93.07366180 127.64701843]
[85.03654480 124.89114380]
[78.02870941 119.81070709]
[72.71797943 112.77523804]
[69.64310455 104.34439850]
[69.16027069 95.22387695]
[71.40440369 86.20641327]
[76.26937103 78.10285187]
[83.40949249 71.66934967]
[92.26290131 67.53715515]
[102.09524536 66.15147400]
[100.22763824 51.26819229]
[98.36002350 36.38491058]
[96.49240875 21.50163269]
[81.47574615 21.62988472]
[66.54573822 20.01390457]
[51.90429688 16.67554855]
[37.74942398 11.65996170]
[24.27255249 5.03497410]
[11.65594101 -3.10981774]
[0.07021470 -12.66426563]
[-10.32794285 -23.49915504]
[-19.39790726 -35.46796036]
[-27.01701927 -48.40880966]
[-33.08223724 -62.14670181]
[-37.51153946 -76.49584198]
[-40.24502182 -91.26217651]
[-41.24571609 -106.24600220]
[-40.50009155 -121.24468994]
[-38.01823044 -136.05538940]
[-33.83369827 -150.47781372]
[-28.00308609 -164.31690979]
[-20.60524559 -177.38551331]
[-11.74022293 -189.50689697]
[-1.52790892 -200.51712036]
[9.89358711 -210.26730347]
[22.36980247 -218.62556458]
[35.73200989 -225.47888184]
[49.79949951 -230.73455811]
[64.38202667 -234.32153320]
[79.28237915 -236.19129944]
[94.29904938 -236.31854248]
[109.22895050 -234.70156860]
[123.87017059 -231.36222839]
[138.02470398 -226.34570312]
[151.50114441 -219.71981812]
[164.11720276 -211.57418823]
[175.70230103 -202.01896667]
[186.09973145 -191.18338013]
[195.16889954 -179.21397400]
[202.78713989 -166.27261353]
[208.85144043 -152.53431702]
[213.27978516 -138.18487549]
[216.01228333 -123.41835785]
[217.01197815 -108.43446350]
[216.26535034 -93.43582916]
[213.78250122 -78.62528992]
[209.59701538 -64.20315552]
[203.76547241 -50.36444855]
[196.36676025 -37.29633713]
[187.50093079 -25.17554665]
[177.28788757 -14.16599751]
[165.86573792 -4.41658306]
[153.38896179 3.94084883]
[140.02629089 10.79327297]
[125.95845795 16.04801750]
[111.37568665 19.63401794]
[113.24330139 34.51729965]
[115.11091614 49.40057755]
[116.97853088 64.28385925]
[129.05851746 73.17620850]
[143.82456970 70.53734589]
[158.59062195 67.89848328]
[173.35668945 65.25961304]
[183.67102051 52.97165680]
[199.70475769 53.51834106]
[209.15818787 66.48030090]
[204.77943420 81.91423035]
[189.92752075 87.98053741]
[175.99554443 80.02567291]
[161.22949219 82.66453552]
[146.46343994 85.30339813]
[131.69738770 87.94226074]
[127.96196747 113.85742950]
[108.07041931 127.33496094]
[108.38246918 142.33171082]
[108.69452667 157.32847595]
[111.83562469 163.26487732]
[111.50731659 169.02018738]
[108.69452667 172.95257568]
[108.38246918 187.94934082]
[108.07041931 202.94609070]
[107.75836182 217.94284058]
[122.30287170 225.16789246]
[132.21749878 237.95701599]
[135.56562805 253.72966003]
[131.72918701 269.33093262]
[121.52210236 281.66262817]
[107.01815033 288.29855347]
[107.01815033 303.29855347]
[107.01815033 318.29855347]
[107.01815033 333.29855347]
[107.01815033 348.29855347]
[107.01815033 363.29855347]
[107.01815033 378.29855347]
[107.01815033 393.29855347]
[107.01815033 408.29855347]
[107.01815033 423.29855347]
[121.55803680 427.35986328]
[134.46241760 435.19436646]
[144.77369690 446.22070312]
[151.72673035 459.62063599]
[154.80552673 474.39981079]
[153.78163147 489.46148682]
[148.73103333 503.68801880]
[140.02850342 516.02368164]
[128.31983948 525.55310059]
[114.47390747 531.56909180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 125]
[28 124]
[29 123]
[30 122]
[31 119]
[32 118]
[33 117]
[43 102]
[44 101]
[45 100]
[46 99]
[103 115]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
