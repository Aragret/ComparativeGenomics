%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAACUCCGGGGGGGGGGAGUUGACACAAAAUAGACUACGAAAGUGGCUUUAACAUAUCUGAACACACxxxxxxxxxxCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCAUACACCUCCUAUGCCCCCCCCCCAAAAAACUUC\
) } def
/len { sequence length } bind def

/coor [
[71.71288300 362.56097412]
[57.86694336 356.54495239]
[46.15828323 347.01553345]
[37.45575714 334.67987061]
[32.40515518 320.45333862]
[31.38126373 305.39166260]
[34.46006393 290.61251831]
[41.41308594 277.21258545]
[51.72436905 266.18624878]
[64.62875366 258.35174561]
[79.16864014 254.29042053]
[79.16864014 239.29042053]
[79.16864014 224.29042053]
[79.16864014 209.29042053]
[79.16864014 194.29042053]
[79.16864014 179.29042053]
[79.16864014 164.29042053]
[79.16864014 149.29042053]
[79.16864014 134.29042053]
[79.16864014 119.29042053]
[88.24045563 90.77000427]
[83.63488770 76.49454498]
[79.02931976 62.21908188]
[74.42375946 47.94361877]
[69.81819153 33.66815948]
[55.76849747 29.90872955]
[45.77714157 19.71609306]
[40.31706238 34.24079895]
[27.34385109 42.75405121]
[11.84597778 41.98232651]
[-0.21731007 32.22237396]
[-4.20743227 17.22708893]
[1.40989447 2.76246810]
[14.47469330 -5.60954809]
[29.96328354 -4.66974783]
[41.91998291 5.22049618]
[42.86895752 -1.24779952]
[45.35515976 -7.29413795]
[49.23076248 -12.55903053]
[54.26534653 -16.72944641]
[60.15957260 -19.55743408]
[59.53559494 -34.54444885]
[50.56651688 -43.87233734]
[50.39007950 -56.40979385]
[58.55355835 -65.39115906]
[58.24150085 -80.38791656]
[57.92944336 -95.38466644]
[57.61738968 -110.38142395]
[57.30533218 -125.37817383]
[42.16992188 -129.87185669]
[29.17410278 -138.80328369]
[19.57802391 -151.29191589]
[14.30769634 -166.11297607]
[13.86564255 -181.81759644]
[18.28300095 -196.87445068]
[27.11766052 -209.81903076]
[39.49847412 -219.39617920]
[54.21115875 -224.68167114]
[53.58718109 -239.66868591]
[52.96320343 -254.65570068]
[52.18335724 -269.63540649]
[51.24773026 -284.60620117]
[50.31209946 -299.57699585]
[35.54720306 -302.72348022]
[22.17926979 -309.73782349]
[11.20029354 -320.09951782]
[3.42498684 -333.03964233]
[-0.56967044 -347.59799194]
[-0.48724869 -362.69421387]
[3.66613579 -377.20806885]
[11.58227444 -390.06253052]
[22.67373657 -400.30371094]
[36.11746216 -407.17169189]
[50.91584015 -410.15673828]
[65.97072601 -409.03741455]
[80.16495514 -403.89675903]
[92.44522095 -395.11621094]
[101.90023804 -383.34738159]
[107.82838440 -369.46359253]
[109.78976440 -354.49511719]
[107.63880920 -339.55270386]
[101.53514862 -325.74514771]
[91.93171692 -314.09713745]
[79.54114532 -305.47296143]
[65.28289032 -300.51263428]
[66.21852112 -285.54183960]
[67.15415192 -270.57104492]
[70.73349762 -264.04925537]
[67.95021820 -255.27967834]
[68.57419586 -240.29266357]
[69.19817352 -225.30564880]
[83.04692841 -221.79711914]
[95.35472107 -214.51206970]
[105.11483765 -204.03588867]
[111.52600098 -191.21543884]
[114.05815125 -177.09053040]
[112.49625397 -162.80966187]
[106.95851898 -149.53659058]
[97.88752747 -138.35548401]
[86.01485443 -130.18240356]
[72.30208588 -125.69023132]
[72.61414337 -110.69348145]
[72.92620087 -95.69672394]
[73.23825836 -80.69997406]
[73.55030823 -65.70321655]
[83.44439697 -51.24268341]
[74.52261353 -35.16842651]
[75.14659119 -20.18140984]
[91.76972961 -8.51207638]
[95.59204865 11.69796848]
[84.09365845 29.06259537]
[88.69921875 43.33805466]
[93.30478668 57.61351776]
[97.91034698 71.88897705]
[102.51591492 86.16443634]
[112.61456299 97.25575256]
[126.39694214 103.17571259]
[140.17932129 109.09568024]
[153.96170044 115.01564026]
[167.84274292 107.81488800]
[183.09344482 111.27178955]
[192.51289368 123.75409698]
[191.65351868 139.36804199]
[180.92108154 150.74121094]
[165.38311768 152.50352478]
[152.37619019 143.82289124]
[148.04174805 128.79801941]
[134.25936890 122.87805939]
[120.47698212 116.95809937]
[106.69460297 111.03813171]
[94.16864014 119.29042053]
[94.16864014 134.29042053]
[94.16864014 149.29042053]
[94.16864014 164.29042053]
[94.16864014 179.29042053]
[94.16864014 194.29042053]
[94.16864014 209.29042053]
[94.16864014 224.29042053]
[94.16864014 239.29042053]
[94.16864014 254.29042053]
[108.70852661 258.35174561]
[121.61290741 266.18624878]
[131.92419434 277.21258545]
[138.87721252 290.61251831]
[141.95600891 305.39166260]
[140.93211365 320.45333862]
[135.88151550 334.67987061]
[127.17899323 347.01553345]
[115.47032928 356.54495239]
[101.62438965 362.56097412]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 115]
[22 114]
[23 113]
[24 112]
[25 111]
[27 36]
[41 108]
[42 107]
[45 105]
[46 104]
[47 103]
[48 102]
[49 101]
[58 91]
[59 90]
[60 89]
[61 87]
[62 86]
[63 85]
[116 130]
[117 129]
[118 128]
[119 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
