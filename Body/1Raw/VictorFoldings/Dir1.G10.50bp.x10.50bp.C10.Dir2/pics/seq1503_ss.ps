%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACUCAAAGGGGGGGGGGGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAxxxxxxxxxxGACUUCCCUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAACCCCCCCCCCAAAACUCAUA\
) } def
/len { sequence length } bind def

/coor [
[69.55023956 373.94039917]
[55.70429993 367.92437744]
[43.99563980 358.39495850]
[35.29311371 346.05929565]
[30.24251175 331.83276367]
[29.21862030 316.77108765]
[32.29742050 301.99191284]
[39.25044250 288.59201050]
[49.56172562 277.56567383]
[62.46610641 269.73117065]
[77.00599670 265.66983032]
[77.00599670 250.66984558]
[77.00599670 235.66984558]
[77.00599670 220.66984558]
[77.00599670 205.66984558]
[77.00599670 190.66984558]
[77.00599670 175.66984558]
[77.00599670 160.66984558]
[77.00599670 145.66984558]
[77.00599670 130.66984558]
[64.39486694 122.54830170]
[55.03184128 135.30151367]
[40.24385452 133.52253723]
[26.58761215 139.72795105]
[12.93137169 145.93334961]
[3.83903766 159.58111572]
[-12.50688362 158.26092529]
[-19.29110909 143.33088684]
[-9.53460979 130.14973450]
[6.72596455 132.27711487]
[20.38220596 126.07170868]
[34.03844833 119.86630249]
[42.42468643 107.55694580]
[58.18945694 108.89205933]
[43.39547348 106.41456604]
[30.28120804 99.13335419]
[20.35610199 87.88648224]
[14.76251888 73.96843719]
[14.14427471 58.98118591]
[18.57252884 44.64973068]
[27.53759384 32.62360764]
[40.00760269 24.28701019]
[54.54727554 20.59946632]
[69.48310852 21.98541069]
[83.09600830 28.28532028]
[93.81915283 38.77408218]
[100.41831970 52.24446106]
[102.13394928 67.14602661]
[98.76874542 81.76322937]
[102.47490692 67.22829437]
[106.18106842 52.69335938]
[109.88722992 38.15842438]
[95.80601501 32.94908142]
[82.34648132 26.29636955]
[69.65608978 18.27317619]
[57.87388229 8.96740818]
[47.12895584 -1.51897573]
[37.53903198 -13.07108021]
[29.20919037 -25.56233406]
[22.23069191 -38.85587692]
[16.68000031 -52.80605698]
[12.61792850 -67.26002502]
[10.08898544 -82.05942535]
[9.12087822 -97.04209900]
[9.72421360 -112.04388428]
[11.89238358 -126.90042877]
[15.60162926 -141.44894409]
[20.81131363 -155.53002930]
[27.46435356 -168.98939514]
[35.48785400 -181.67959595]
[44.79391098 -193.46157837]
[55.28055573 -204.20625305]
[66.83289337 -213.79588318]
[79.32434845 -222.12542725]
[92.61805725 -229.10360718]
[106.56837463 -234.65396118]
[121.02244568 -238.71568298]
[135.82189941 -241.24426270]
[150.80459595 -242.21200562]
[165.80638123 -241.60830688]
[180.66285706 -239.43977356]
[195.21128845 -235.73017883]
[209.29223633 -230.52015686]
[222.75144958 -223.86677551]
[235.44145203 -215.84297180]
[247.22320557 -206.53663635]
[257.96762085 -196.04972839]
[267.55697632 -184.49716187]
[275.88623047 -172.00549316]
[282.86407471 -158.71160889]
[288.41409302 -144.76116943]
[292.47546387 -130.30699158]
[295.00369263 -115.50747681]
[295.97106934 -100.52475739]
[295.36700439 -85.52299500]
[293.19812012 -70.66656494]
[289.48815918 -56.11823273]
[284.27780151 -42.03740311]
[277.62408447 -28.57835007]
[269.59997559 -15.88854122]
[260.29333496 -4.10701323]
[249.80618286 6.63715029]
[238.25337219 16.22623062]
[225.76152039 24.55516243]
[212.46746826 31.53269196]
[198.51687622 37.08236694]
[184.06262207 41.14338684]
[169.26303101 43.67124939]
[154.28028870 44.63826752]
[139.27854919 44.03383636]
[124.42216492 41.86458588]
[120.71600342 56.39952087]
[117.00984192 70.93445587]
[113.30368042 85.46939087]
[120.62278748 98.56254578]
[134.94538879 103.01936340]
[149.26797485 107.47618103]
[163.59057617 111.93299866]
[179.45974731 107.79759979]
[190.78147888 119.66143036]
[185.90895081 135.31999207]
[169.85459900 138.66510010]
[159.13375854 126.25559235]
[144.81117249 121.79877472]
[130.48857117 117.34196472]
[116.16596985 112.88514709]
[110.12597656 117.33132172]
[119.01814270 129.41145325]
[106.93787384 138.30342102]
[98.04598999 126.22367096]
[92.00599670 130.66984558]
[92.00599670 145.66984558]
[92.00599670 160.66984558]
[92.00599670 175.66984558]
[92.00599670 190.66984558]
[92.00599670 205.66984558]
[92.00599670 220.66984558]
[92.00599670 235.66984558]
[92.00599670 250.66984558]
[92.00599670 265.66983032]
[106.54588318 269.73117065]
[119.45026398 277.56567383]
[129.76155090 288.59201050]
[136.71456909 301.99191284]
[139.79336548 316.77108765]
[138.76947021 331.83276367]
[133.71887207 346.05929565]
[125.01634979 358.39495850]
[113.30768585 367.92437744]
[99.46174622 373.94039917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 34]
[23 32]
[24 31]
[25 30]
[49 114]
[50 113]
[51 112]
[52 111]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
