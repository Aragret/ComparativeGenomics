%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACCCCCUAGGGGGGGGGGACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUxxxxxxxxxxGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACCCCCCCCCCCAACCCCCUA\
) } def
/len { sequence length } bind def

/coor [
[31.11638260 294.93136597]
[18.13796806 289.84677124]
[5.53166294 283.89923096]
[-6.64522934 277.11575317]
[-18.33735847 269.52716064]
[-29.49157524 261.16799927]
[-40.05717850 252.07623291]
[-49.98614120 242.29318237]
[-59.23333359 231.86332703]
[-71.12570953 241.00506592]
[-83.01808929 250.14680481]
[-94.91046906 259.28854370]
[-106.80284882 268.43026733]
[-118.69522858 277.57199097]
[-130.58761597 286.71374512]
[-142.47999573 295.85546875]
[-154.37237549 304.99719238]
[-166.26475525 314.13894653]
[-178.15713501 323.28067017]
[-181.65473938 338.93783569]
[-196.13925171 345.83554077]
[-210.49938965 338.68249512]
[-213.71926880 322.96588135]
[-203.32890320 310.74215698]
[-187.29885864 311.38830566]
[-175.40647888 302.24655151]
[-163.51409912 293.10482788]
[-151.62171936 283.96310425]
[-139.72933960 274.82135010]
[-127.83696747 265.67962646]
[-115.94458771 256.53790283]
[-104.05220795 247.39614868]
[-92.15982819 238.25442505]
[-80.26744843 229.11268616]
[-68.37506866 219.97094727]
[-75.17877960 209.79794312]
[-81.36862946 199.24017334]
[-86.92292786 188.33465576]
[-91.82221222 177.11958313]
[-96.04931641 165.63427734]
[-99.58941650 153.91897583]
[-102.43012238 142.01473999]
[-104.56147003 129.96327209]
[-105.97599792 117.80679321]
[-106.66873932 105.58792877]
[-106.63727570 93.34947968]
[-105.88171387 81.13433075]
[-104.40470123 68.98529816]
[-102.21141052 56.94494247]
[-99.30953217 45.05546188]
[-95.70923615 33.35851669]
[-91.42313385 21.89509773]
[-86.46624756 10.70537376]
[-80.85594940 -0.17144403]
[-74.61189270 -10.69724083]
[-67.75596619 -20.83513260]
[-60.31218338 -30.54959488]
[-52.30663681 -39.80658722]
[-43.76737595 -48.57366562]
[-34.72432709 -56.82011414]
[-25.20917702 -64.51703644]
[-15.25527000 -71.63745117]
[-4.89748573 -78.15641785]
[5.82788086 -84.05109406]
[16.88324547 -89.30081177]
[28.22986603 -93.88718414]
[39.82798386 -97.79413605]
[51.63695908 -101.00798035]
[63.61540604 -103.51745605]
[75.72135162 -105.31375885]
[87.91237640 -106.39060211]
[100.14575195 -106.74421692]
[112.37862396 -106.37335968]
[124.56811523 -105.27931976]
[136.67152405 -103.46595001]
[148.64640808 -100.93959045]
[160.45085144 -97.70909882]
[172.04344177 -93.78579712]
[183.38359070 -89.18342590]
[194.43153381 -83.91812897]
[205.14859009 -78.00833893]
[215.49716187 -71.47476959]
[225.44102478 -64.34032440]
[234.94531250 -56.62999725]
[243.97671509 -48.37080383]
[252.50361633 -39.59169388]
[260.49609375 -30.32342529]
[267.92617798 -20.59847641]
[274.76779175 -10.45092773]
[280.99700928 0.08366328]
[294.38330078 -6.68445158]
[307.76959229 -13.45256615]
[321.15585327 -20.22068024]
[319.06054688 -35.21695709]
[321.95046997 -50.08057022]
[329.51220703 -63.19922638]
[340.92544556 -73.14990997]
[354.95223999 -78.85324860]
[370.07101440 -79.69058228]
[384.64184570 -75.57109070]
[397.08413696 -66.94161224]
[406.04827881 -54.73822403]
[410.56192017 -40.28464890]
[410.13543701 -25.14870262]
[404.81506348 -10.97222233]
[395.17797852 0.70703381]
[382.26950073 8.62218857]
[367.48983765 11.91466427]
[352.44219971 10.22731781]
[338.75881958 3.74318123]
[327.92398071 -6.83439636]
[314.53768921 -0.06628141]
[301.15139771 6.70183325]
[287.76513672 13.46994781]
[296.99826050 37.27136230]
[303.22750854 62.02927780]
[306.35787964 87.36618042]
[306.34167480 112.89572144]
[303.17913818 138.22862244]
[296.91848755 162.97862244]
[287.65515137 186.76829529]
[275.53042603 209.23490906]
[287.96984863 217.61705017]
[300.40930176 225.99919128]
[315.87194824 222.73078918]
[329.07101440 231.42332458]
[332.17575073 246.91964722]
[323.34414673 260.02609253]
[307.81585693 262.96679688]
[294.80352783 253.99714661]
[292.02716064 238.43862915]
[279.58770752 230.05648804]
[267.14828491 221.67434692]
[258.56964111 232.66069031]
[249.27024841 243.04400635]
[239.29231262 252.77709961]
[228.68122864 261.81573486]
[217.48519897 270.11883545]
[205.75514221 277.64865112]
[193.54435730 284.37094116]
[180.90837097 290.25515747]
[167.90460205 295.27456665]
[154.59217834 299.40634155]
[141.03160095 302.63168335]
[127.28450012 304.93597412]
[113.41338348 306.30868530]
[99.48129272 306.74362183]
[85.55155945 306.23876953]
[71.68750000 304.79647827]
[57.95214081 302.42324829]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 35]
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[90 114]
[91 113]
[92 112]
[93 111]
[122 133]
[123 132]
[124 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
