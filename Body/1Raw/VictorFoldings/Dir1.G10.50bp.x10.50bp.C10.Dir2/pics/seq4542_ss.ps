%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUGAGAAUCGGGGGGGGGGGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAxxxxxxxxxxCCGAAUUGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUCCCCCCCCCCUAUGAUAAUC\
) } def
/len { sequence length } bind def

/coor [
[98.85753632 388.29415894]
[84.36784363 384.08569336]
[71.46161652 376.26956177]
[61.01881409 365.37872314]
[53.75144958 352.15573120]
[50.15502167 337.50213623]
[50.47474289 322.41702271]
[54.68881226 307.92895508]
[62.50991058 295.02575684]
[73.40477753 284.58715820]
[86.63058472 277.32489014]
[101.28558350 273.73413086]
[101.59763336 258.73736572]
[101.90969086 243.74061584]
[102.22174835 228.74386597]
[102.53380585 213.74711609]
[102.84586334 198.75036621]
[103.15792084 183.75360107]
[103.46997070 168.75685120]
[103.78202820 153.76010132]
[104.09408569 138.76335144]
[104.40614319 123.76659393]
[96.94245911 136.77787781]
[89.47878265 149.78915405]
[85.40674591 164.22586060]
[75.24732971 175.26155090]
[61.19601059 180.51135254]
[46.28932571 178.84080505]
[33.74865341 170.61088562]
[26.28406525 157.60012817]
[25.50866508 142.62026978]
[39.52177429 137.26931763]
[53.53488541 131.91835022]
[38.67183685 129.89602661]
[23.80879021 127.87368774]
[8.94574451 125.85134888]
[-5.91730261 123.82901764]
[-20.78034973 121.80667877]
[-34.36934662 130.33421326]
[-49.46075821 124.89096832]
[-54.47774506 109.65254974]
[-45.57170486 96.30856323]
[-29.57458878 95.09537506]
[-18.75801468 106.94363403]
[-3.89496827 108.96596527]
[10.96807861 110.98830414]
[25.83112526 113.01063538]
[40.69417191 115.03297424]
[55.55722046 117.05530548]
[59.01071930 110.39772797]
[69.37121582 90.42499542]
[59.15773773 79.43933105]
[48.94425583 68.45366669]
[33.55680847 70.45519257]
[19.94777870 63.00040436]
[13.35011196 48.95581818]
[16.30074883 33.72186279]
[27.66510773 23.15630722]
[43.07336044 21.32182121]
[56.60072327 28.92380524]
[63.04564285 43.03913879]
[59.92992020 58.24018478]
[70.14340210 69.22585297]
[80.35688019 80.21151733]
[94.53343964 75.30996704]
[95.78031158 60.36187744]
[97.02719116 45.41379166]
[82.93250275 39.98088837]
[70.94020844 30.79603195]
[62.02247620 18.60379028]
[56.90222168 4.39253855]
[55.99452591 -10.68568325]
[59.37296677 -25.40855026]
[66.76367188 -38.58254623]
[77.56751251 -49.13971329]
[90.90866089 -56.22422791]
[105.70561981 -59.26178360]
[120.75885773 -58.00613785]
[134.84808350 -52.55908203]
[146.83114624 -43.36217880]
[155.73661804 -31.16098595]
[160.84259033 -16.94459724]
[161.73513794 -1.86547184]
[158.34191895 12.85399342]
[150.93797302 26.02055740]
[140.12353516 36.56686401]
[126.77527618 43.63797760]
[111.97527313 46.66066742]
[110.72840118 61.60875320]
[109.48152924 76.55683899]
[114.58826447 82.04967499]
[118.99530029 67.71167755]
[133.61585999 64.35919952]
[143.82954407 75.34467316]
[139.42277527 89.68274689]
[124.80174255 93.03533936]
[129.90849304 98.52816772]
[144.90766907 98.37213135]
[159.90686035 98.21609497]
[174.90605164 98.06005859]
[189.90524292 97.90402222]
[195.42956543 84.85822296]
[205.48699951 74.94201660]
[218.52922058 69.63543701]
[232.56605530 69.71244812]
[245.46923828 75.12821960]
[255.29498291 85.03096771]
[260.57693481 97.89572144]
[275.57611084 98.05176544]
[290.57528687 98.20780182]
[305.57449341 98.36383820]
[319.58764648 89.84544373]
[333.83947754 97.95826721]
[333.66888428 114.35652161]
[319.25137329 122.17109680]
[305.41845703 113.36302185]
[290.41925049 113.20698547]
[275.42007446 113.05094910]
[260.42089844 112.89491272]
[253.63442993 127.32905579]
[241.19721985 137.40730286]
[225.55690002 141.08123779]
[209.81993103 137.56922913]
[197.13462830 127.52209473]
[190.06127930 112.90321350]
[175.06208801 113.05924988]
[160.06289673 113.21528625]
[145.06370544 113.37132263]
[130.06452942 113.52735901]
[119.40289307 124.07864380]
[119.09084320 139.07539368]
[118.77878571 154.07215881]
[118.46672821 169.06890869]
[118.15467072 184.06565857]
[117.84261322 199.06240845]
[117.53055573 214.05917358]
[117.21850586 229.05592346]
[116.90644836 244.05267334]
[116.59439087 259.04943848]
[116.28233337 274.04617310]
[130.77526855 278.24346924]
[143.68753052 286.04962158]
[154.13873291 296.93237305]
[161.41632080 310.14978027]
[165.02404785 324.80059814]
[164.71598816 339.88592529]
[160.51310730 354.37725830]
[152.70196533 367.28649902]
[141.81517029 377.73348999]
[128.59497070 385.00598145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[51 64]
[52 63]
[53 62]
[65 90]
[66 89]
[67 88]
[97 129]
[98 128]
[99 127]
[100 126]
[101 125]
[108 119]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
