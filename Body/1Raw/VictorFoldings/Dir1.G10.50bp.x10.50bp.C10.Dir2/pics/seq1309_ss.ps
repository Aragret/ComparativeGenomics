%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAAUAGACUACGGGGGGGGGGGAAAGUGGCUUUAACAUAUCUGAACACACAAUAGCUAAGACCCAAACUGGxxxxxxxxxxUCGAACUGACACUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCCCCCCCCCCCAAACUAGACUAC\
) } def
/len { sequence length } bind def

/coor [
[82.07727814 414.04995728]
[67.41561890 410.62515259]
[53.78657913 404.22647095]
[41.78596497 395.13366699]
[31.93839073 383.74426270]
[24.67435074 370.55609131]
[20.31139755 356.14575195]
[19.04025841 341.14315796]
[20.91650391 326.20416260]
[25.85811234 311.98184204]
[33.64905930 299.09793091]
[43.94875717 288.11569214]
[56.30694199 279.51516724]
[70.18338013 273.67236328]
[84.97143555 270.84271240]
[85.27156830 255.84571838]
[85.57170105 240.84872437]
[85.87183380 225.85173035]
[86.17196655 210.85472107]
[86.47209930 195.85772705]
[86.77223206 180.86073303]
[87.07236481 165.86373901]
[87.37248993 150.86674500]
[87.67262268 135.86973572]
[87.97275543 120.87274933]
[81.59067535 109.63304901]
[82.59661102 98.53698730]
[88.73217773 91.43726349]
[81.27554321 78.42194366]
[73.81890869 65.40662384]
[66.36227417 52.39130020]
[58.90563965 39.37598038]
[51.44900513 26.36065865]
[37.77357483 32.55156326]
[23.57157707 37.41448975]
[8.97163391 40.90539551]
[-5.89403343 42.99266052]
[-20.89079666 43.65739059]
[-35.88283920 42.89355850]
[-50.73438644 40.70808792]
[-65.31093597 37.12076187]
[-79.48048401 32.16408157]
[-93.11470032 25.88292503]
[-106.09011078 18.33418083]
[-118.28919983 9.58621502]
[-129.60150146 -0.28174946]
[-139.92454529 -11.18034458]
[-149.16485596 -23.01086807]
[-157.23876953 -35.66617966]
[-164.07312012 -49.03166580]
[-169.60604858 -62.98628998]
[-173.78744507 -77.40366364]
[-176.57942200 -92.15322876]
[-177.95671082 -107.10140228]
[-177.90682983 -122.11280060]
[-176.43023682 -137.05149841]
[-173.54028320 -151.78218079]
[-169.26318359 -166.17144775]
[-163.63763428 -180.08898926]
[-156.71459961 -193.40876770]
[-148.55677795 -206.01013184]
[-139.23803711 -217.77899170]
[-128.84278870 -228.60873413]
[-117.46516418 -238.40130615]
[-105.20820618 -247.06800842]
[-92.18291473 -254.53036499]
[-78.50726318 -260.72076416]
[-64.30508423 -265.58316040]
[-49.70501709 -269.07354736]
[-34.83927155 -271.16027832]
[-19.84248543 -271.82446289]
[-4.85047245 -271.06008911]
[10.00099564 -268.87405396]
[24.57741737 -265.28619385]
[38.74678040 -260.32901001]
[52.38076782 -254.04734802]
[65.35590363 -246.49813843]
[77.55467224 -237.74972534]
[88.86660767 -227.88134766]
[99.18926239 -216.98237610]
[108.42915344 -205.15151978]
[116.50258636 -192.49591064]
[123.33646393 -179.13017273]
[128.86888123 -165.17535400]
[133.04974365 -150.75782776]
[135.84118652 -136.00816345]
[137.21792603 -121.05993652]
[137.16749573 -106.04853821]
[135.69035339 -91.10990143]
[132.79988098 -76.37932587]
[128.52224731 -61.99020767]
[122.89619446 -48.07287216]
[115.97267914 -34.75334930]
[107.81439209 -22.15227127]
[98.49523163 -10.38375759]
[88.09958649 0.44561425]
[76.72160339 10.23776817]
[64.46432495 18.90402222]
[71.92095947 31.91934395]
[79.37759399 44.93466568]
[86.83422852 57.94998550]
[94.29087067 70.96530914]
[101.74750519 83.98062897]
[95.59593964 70.30004883]
[94.96549225 55.31330490]
[99.94635010 41.16441727]
[109.82594299 29.87754059]
[123.19089508 23.06739426]
[138.12919617 21.70824242]
[152.50373840 25.99452782]
[164.25811768 35.31304932]
[171.71070862 48.33068848]
[173.79533386 63.18512344]
[170.21377563 77.75126648]
[161.47842407 89.94525909]
[148.83895874 98.02262878]
[134.10359192 100.82779694]
[119.37873840 97.95880890]
[133.75177002 102.25020599]
[148.12480164 106.54160309]
[162.49781799 110.83300018]
[175.45605469 102.07981110]
[191.00361633 103.75527191]
[201.79943848 115.06829071]
[202.74604797 130.67720032]
[193.39649963 143.21194458]
[178.16535950 146.75401306]
[164.24429321 139.63093567]
[158.20642090 125.20602417]
[143.83340454 120.91462708]
[129.46037292 116.62322998]
[115.08734131 112.33183289]
[102.96975708 121.17287445]
[102.66962433 136.16987610]
[102.36949158 151.16687012]
[102.06935883 166.16386414]
[101.76922607 181.16087341]
[101.46909332 196.15786743]
[101.16896057 211.15486145]
[100.86882782 226.15185547]
[100.56869507 241.14884949]
[100.26856232 256.14584351]
[99.96843719 271.14285278]
[114.63143921 274.56192017]
[128.26300049 280.95523071]
[140.26718140 290.04330444]
[150.11923218 301.42883301]
[157.38845825 314.61413574]
[161.75708008 329.02276611]
[163.03413391 344.02487183]
[161.16375732 358.96459961]
[156.22775269 373.18884277]
[148.44186401 386.07580566]
[138.14649963 397.06213379]
[125.79168701 405.66751099]
[111.91755676 411.51574707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[25 133]
[28 103]
[29 102]
[30 101]
[31 100]
[32 99]
[33 98]
[118 132]
[119 131]
[120 130]
[121 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
