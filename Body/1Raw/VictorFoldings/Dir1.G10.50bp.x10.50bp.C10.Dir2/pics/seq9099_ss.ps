%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACCAUAGGGGGGGGGGGUCUAAUAGAAAACAACCGAAACCAAAUAAUUCAAGCACUGCUUAUUACAAxxxxxxxxxxUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCAACCUCCCCCCCCCCCCCUCACCAUUG\
) } def
/len { sequence length } bind def

/coor [
[73.45046997 148.06309509]
[61.46925735 139.11930847]
[52.34487915 127.27504730]
[46.75386429 113.40848541]
[45.11075211 98.54776764]
[47.53737259 83.79472351]
[53.85380173 70.24320221]
[63.59171295 58.89799118]
[76.02909851 50.60025787]
[90.24378967 45.96524429]
[89.61981201 30.97822762]
[88.99583435 15.99121189]
[88.37185669 1.00419569]
[87.74787903 -13.98282051]
[87.12390137 -28.96983719]
[86.49992371 -43.95685196]
[85.87594604 -58.94387054]
[85.25196838 -73.93088531]
[84.62799072 -88.91790009]
[84.00402069 -103.90491486]
[69.00170898 -104.13749695]
[54.03713989 -105.22616577]
[39.15913010 -107.16736603]
[24.41620636 -109.95477295]
[9.85645771 -113.57929230]
[-4.47262573 -118.02909851]
[-18.52430534 -123.28968048]
[-32.25274658 -129.34388733]
[-45.61317062 -136.17195129]
[-58.56199646 -143.75161743]
[-71.05699158 -152.05815125]
[-83.05739594 -161.06446838]
[-94.52406311 -170.74119568]
[-105.41960144 -181.05674744]
[-115.70846558 -191.97749329]
[-125.35709381 -203.46781921]
[-134.33401489 -215.49021912]
[-142.60993958 -228.00550842]
[-150.15789795 -240.97283936]
[-156.95324707 -254.34992981]
[-162.97383118 -268.09313965]
[-168.20001221 -282.15765381]
[-172.61474609 -296.49758911]
[-176.20361328 -311.06616211]
[-178.95494080 -325.81585693]
[-180.85972595 -340.69857788]
[-181.91175842 -355.66577148]
[-182.10762024 -370.66860962]
[-181.44667053 -385.65814209]
[-179.93106079 -400.58551025]
[-177.56573486 -415.40203857]
[-174.35841370 -430.05932617]
[-170.31954956 -444.50961304]
[-165.46231079 -458.70578003]
[-159.80255127 -472.60147095]
[-153.35874939 -486.15139771]
[-146.15188599 -499.31137085]
[-138.20549011 -512.03845215]
[-129.54548645 -524.29107666]
[-120.20011139 -536.02941895]
[-110.19985199 -547.21502686]
[-99.57732391 -557.81152344]
[-88.36717987 -567.78424072]
[-76.60598755 -577.10076904]
[-64.33209991 -585.73071289]
[-51.58555984 -593.64581299]
[-38.40794373 -600.82031250]
[-24.84223175 -607.23089600]
[-10.93267250 -612.85650635]
[3.27536130 -617.67883301]
[17.73552704 -621.68225098]
[32.40065765 -624.85357666]
[47.22291946 -627.18249512]
[62.15396500 -628.66143799]
[77.14508820 -629.28564453]
[92.14739990 -629.05291748]
[107.11196136 -627.96411133]
[121.98995209 -626.02282715]
[136.73284912 -623.23529053]
[151.29257202 -619.61065674]
[165.62162781 -615.16076660]
[179.67326355 -609.90002441]
[193.40165710 -603.84576416]
[206.76202393 -597.01757812]
[219.71080017 -589.43780518]
[232.20571899 -581.13116455]
[244.20605469 -572.12475586]
[255.67265320 -562.44793701]
[266.56811523 -552.13232422]
[276.85687256 -541.21148682]
[286.50543213 -529.72106934]
[295.48223877 -517.69860840]
[303.75808716 -505.18325806]
[311.30593872 -492.21585083]
[318.10116577 -478.83871460]
[324.12164307 -465.09545898]
[329.34771729 -451.03088379]
[333.76232910 -436.69091797]
[337.35110474 -422.12231445]
[340.10229492 -407.37258911]
[342.00698853 -392.48986816]
[343.05889893 -377.52267456]
[343.25463867 -362.51983643]
[342.59356689 -347.53030396]
[341.07785034 -332.60293579]
[338.71240234 -317.78646851]
[335.50497437 -303.12918091]
[331.46597290 -288.67892456]
[326.60864258 -274.48281860]
[320.94879150 -260.58715820]
[314.50485229 -247.03726196]
[307.29791260 -233.87736511]
[299.35140991 -221.15034485]
[290.69131470 -208.89775085]
[281.34582520 -197.15954590]
[271.34548950 -185.97399902]
[260.72286987 -175.37759399]
[249.51266479 -165.40492249]
[237.75138855 -156.08848572]
[225.47743225 -147.45867920]
[212.73083496 -139.54365540]
[199.55316162 -132.36923218]
[185.98739624 -125.95880890]
[172.07778931 -120.33329773]
[157.86972046 -115.51104736]
[143.40953064 -111.50778198]
[128.74436951 -108.33656311]
[113.92208862 -106.00773621]
[98.99103546 -104.52889252]
[99.61501312 -89.54187775]
[100.23899078 -74.55486298]
[100.86296844 -59.56784439]
[101.48694611 -44.58082962]
[102.11091614 -29.59381485]
[102.73489380 -14.60679817]
[103.35887146 0.38021830]
[103.98284912 15.36723423]
[104.60682678 30.35424995]
[105.23080444 45.34126663]
[119.78159332 48.77864456]
[132.86567688 56.01380157]
[143.51295471 66.51028442]
[150.93400574 79.48985291]
[154.57856750 93.99012756]
[154.17643738 108.93599701]
[149.75743103 123.21931458]
[141.64918518 135.78105164]
[130.45288086 145.68981934]
[116.99867249 152.21095276]
[102.28411102 154.86093140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
