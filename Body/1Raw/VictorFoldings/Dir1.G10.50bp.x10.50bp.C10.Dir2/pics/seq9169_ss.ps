%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGGCUUCGGGGGGGGGGCACGGACUUCACGUCAUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUxxxxxxxxxxUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCCCCCCCCCCCACAGGUUUC\
) } def
/len { sequence length } bind def

/coor [
[107.66542053 391.05612183]
[93.81948090 385.04006958]
[82.11081696 375.51065063]
[73.40829468 363.17498779]
[68.35769653 348.94848633]
[67.33380127 333.88677979]
[70.41260529 319.10763550]
[77.36562347 305.70770264]
[87.67691040 294.68136597]
[100.58129120 286.84686279]
[115.12117767 282.78555298]
[115.12117767 267.78555298]
[115.12117767 252.78555298]
[115.12117767 237.78555298]
[115.12117767 222.78555298]
[115.12117767 207.78555298]
[115.12117767 192.78555298]
[115.12117767 177.78555298]
[115.12117767 162.78555298]
[115.12117767 147.78555298]
[85.39381409 142.21476746]
[67.58917236 122.08406067]
[53.80678558 128.00402832]
[40.02440643 133.92398071]
[35.68996811 148.94885254]
[22.68302727 157.62950134]
[7.14506483 155.86717224]
[-3.58736753 144.49400330]
[-4.44674444 128.88005066]
[4.97270536 116.39775085]
[20.22340584 112.94084930]
[34.10444260 120.14160156]
[47.88682556 114.22164154]
[61.66920471 108.30168152]
[60.79251099 100.96980286]
[61.30564499 93.60355377]
[63.19041443 86.46405029]
[66.38001251 79.80435944]
[70.76136780 73.86056519]
[76.17916870 68.84336853]
[82.44137573 64.93060303]
[89.32600403 62.26098251]
[88.07913208 47.31289673]
[86.83225250 32.36480713]
[85.58538055 17.41672134]
[84.02780151 2.49780893]
[82.16018677 -12.38547134]
[80.29257202 -27.26875114]
[65.27248383 -27.28003693]
[50.37225342 -29.17380142]
[35.82687759 -32.92017365]
[21.86576080 -38.46007538]
[8.70909023 -45.70612335]
[-3.43563509 -54.54404831]
[-14.37687588 -64.83445740]
[-23.94207191 -76.41505432]
[-31.98036766 -89.10319519]
[-38.36498642 -102.69878387]
[-42.99523544 -116.98738098]
[-45.79808807 -131.74363708]
[-46.72933578 -146.73483276]
[-45.77429962 -161.72453308]
[-42.94803238 -176.47633362]
[-38.29511261 -190.75756836]
[-31.88892746 -204.34300232]
[-23.83050537 -217.01837158]
[-14.24694252 -228.58377075]
[-3.28938460 -238.85681152]
[8.86935139 -247.67544556]
[22.03750420 -254.90060425]
[36.00739670 -260.41833496]
[50.55869675 -264.14163208]
[65.46191406 -266.01174927]
[80.48200226 -265.99920654]
[95.38207245 -264.10418701]
[109.92713165 -260.35656738]
[123.88778687 -254.81550598]
[137.04383850 -247.56834412]
[149.18782043 -238.72940063]
[160.12820435 -228.43807983]
[169.69242859 -216.85667419]
[177.72964478 -204.16784668]
[184.11312866 -190.57173157]
[188.74217224 -176.28274536]
[191.54377747 -161.52624512]
[192.47377014 -146.53497314]
[191.51747131 -131.54534912]
[188.68995667 -116.79378510]
[184.03584290 -102.51294708]
[177.62850952 -88.92805481]
[169.56901550 -76.25335693]
[159.98448181 -64.68875885]
[149.02606201 -54.41665268]
[136.86657715 -45.59903717]
[123.69782257 -38.37498474]
[109.72747040 -32.85842514]
[95.17584991 -29.13636398]
[97.04346466 -14.25308418]
[98.91107941 0.63019586]
[102.11699677 4.24925518]
[103.04115295 9.93935490]
[100.53347015 16.16984749]
[101.78034210 31.11793327]
[103.02721405 46.06602097]
[104.27409363 61.01410675]
[123.11604309 63.91601562]
[139.86071777 76.07979584]
[149.96090698 95.99792480]
[164.92115784 94.90661621]
[178.17773438 85.25286102]
[193.05461121 92.15292358]
[194.24771118 108.50861359]
[180.52969360 117.49459076]
[166.01246643 109.86686707]
[151.05221558 110.95817566]
[148.56709290 125.75088501]
[162.34948730 131.67083740]
[176.13186646 137.59080505]
[189.91424561 143.51077271]
[203.69662476 149.43074036]
[219.07000732 144.84396362]
[232.15844727 154.12147522]
[232.92161560 170.14637756]
[220.77406311 180.62571716]
[205.03436279 177.52064514]
[197.77665710 163.21311951]
[183.99427795 157.29315186]
[170.21189880 151.37318420]
[156.42951965 145.45323181]
[142.64714050 139.53326416]
[130.12117004 147.78555298]
[130.12117004 162.78555298]
[130.12117004 177.78555298]
[130.12117004 192.78555298]
[130.12117004 207.78555298]
[130.12117004 222.78555298]
[130.12117004 237.78555298]
[130.12117004 252.78555298]
[130.12117004 267.78555298]
[130.12117004 282.78555298]
[144.66105652 286.84686279]
[157.56544495 294.68136597]
[167.87672424 305.70770264]
[174.82974243 319.10763550]
[177.90855408 333.88677979]
[176.88465881 348.94848633]
[171.83406067 363.17498779]
[163.13153076 375.51065063]
[151.42286682 385.04006958]
[137.57693481 391.05612183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 34]
[23 33]
[24 32]
[42 105]
[43 104]
[44 103]
[45 102]
[46 99]
[47 98]
[48 97]
[108 115]
[109 114]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
