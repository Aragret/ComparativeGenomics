%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAAAAAUUGGGGGGGGGGUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUAUAACCACxxxxxxxxxxUUCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUGAUAUAUAAACUCAGACCCCCCCCCCCCCAAACAUU\
) } def
/len { sequence length } bind def

/coor [
[69.76534271 420.12008667]
[55.91940308 414.10406494]
[44.21074295 404.57464600]
[35.50822067 392.23895264]
[30.45761681 378.01245117]
[29.43372536 362.95077515]
[32.51252365 348.17160034]
[39.46554565 334.77166748]
[49.77682877 323.74533081]
[62.68121338 315.91082764]
[77.22109985 311.84951782]
[77.22109985 296.84951782]
[77.22109985 281.84951782]
[77.22109985 266.84951782]
[77.22109985 251.84951782]
[77.22109985 236.84951782]
[77.22109985 221.84951782]
[77.22109985 206.84951782]
[77.22109985 191.84951782]
[77.22109985 176.84951782]
[77.22109985 161.84951782]
[77.06506348 146.85032654]
[76.75300598 131.85357666]
[66.53952789 120.86791229]
[51.60521698 119.46560669]
[36.67090988 118.06330109]
[21.73660278 116.66100311]
[6.80229521 115.25869751]
[-8.19689274 115.10266113]
[-23.15714264 116.19396973]
[-38.11738968 117.28527832]
[-45.40124130 130.88487244]
[-58.89240265 138.36767578]
[-74.28588867 137.34591675]
[-86.66970825 128.14566040]
[-92.09221649 113.70267487]
[-88.82311249 98.62565613]
[-77.90556335 87.72562408]
[-62.82331085 84.48075104]
[-48.38904953 89.92645264]
[-39.20870209 102.32503510]
[-24.24845314 101.23371887]
[-9.28820324 100.14241028]
[-20.93725967 90.69257355]
[-24.96191216 76.24258423]
[-19.87513161 62.13142776]
[-7.55638170 53.57289886]
[7.44280386 53.72920227]
[19.58052444 62.54258728]
[24.37213516 76.75668335]
[20.04722977 91.11965942]
[8.20459843 100.32438660]
[23.13890648 101.72669220]
[38.07321548 103.12899780]
[53.00752258 104.53130341]
[67.94182587 105.93360138]
[68.74473572 94.38645935]
[73.46502686 84.15058136]
[81.29415131 76.46829987]
[91.06285095 72.18715668]
[101.41248322 71.66902161]
[110.98293304 74.76780701]
[120.49128723 63.16646576]
[129.99964905 51.56512451]
[139.50801086 39.96378326]
[145.71340942 26.30754471]
[148.19853210 11.51483631]
[150.68365479 -3.27787066]
[153.16876221 -18.07057762]
[139.57446289 -24.65629768]
[128.38717651 -34.80622482]
[120.51377869 -47.69755936]
[116.59255981 -62.28524780]
[116.94138336 -77.38673401]
[121.53196716 -91.77781677]
[129.99218750 -104.29187012]
[141.63619995 -113.91442871]
[155.52008057 -119.86544037]
[170.51831055 -121.66249084]
[185.41508484 -119.15988922]
[199.00276184 -112.56051636]
[210.17985535 -102.39935303]
[218.04028320 -89.50012207]
[221.94685364 -74.90850067]
[221.58287048 -59.80736542]
[216.97782898 -45.42090607]
[208.50503540 -32.91535950]
[196.85136414 -23.30450249]
[182.96151733 -17.36743736]
[167.96147156 -15.58545876]
[165.47636414 -0.79275203]
[162.99124146 13.99995518]
[160.50611877 28.79266167]
[166.10400391 33.78402710]
[177.29977417 43.76675034]
[182.89764404 48.75811386]
[197.30986023 44.60022736]
[211.72207642 40.44234085]
[226.13429260 36.28445435]
[240.54650879 32.12656403]
[254.95872498 27.96867752]
[269.37094116 23.81079102]
[274.52767944 9.17563629]
[287.32098389 0.39433628]
[302.83154297 0.84347862]
[315.09527588 10.35035896]
[319.39648438 25.25938797]
[314.08129883 39.83774185]
[301.19348145 48.47974014]
[285.68869019 47.86236572]
[273.52883911 38.22300720]
[259.11660767 42.38089371]
[244.70440674 46.53878021]
[230.29219055 50.69667053]
[215.87997437 54.85455704]
[201.46775818 59.01244354]
[187.05554199 63.17033005]
[163.77249146 62.18988419]
[151.10934448 49.47214508]
[141.60098267 61.07348633]
[132.09263611 72.67482758]
[122.58427429 84.27616882]
[128.32620239 96.54920197]
[127.59779358 110.56908417]
[120.11297607 123.02045441]
[107.23558807 130.74598694]
[91.74975586 131.54151917]
[92.06181335 146.53826904]
[95.38668060 155.11715698]
[92.22109985 161.84951782]
[92.22109985 176.84951782]
[92.22109985 191.84951782]
[92.22109985 206.84951782]
[92.22109985 221.84951782]
[92.22109985 236.84951782]
[92.22109985 251.84951782]
[92.22109985 266.84951782]
[92.22109985 281.84951782]
[92.22109985 296.84951782]
[92.22109985 311.84951782]
[106.76098633 315.91082764]
[119.66536713 323.74533081]
[129.97665405 334.77166748]
[136.92967224 348.17160034]
[140.00846863 362.95077515]
[138.98457336 378.01245117]
[133.93397522 392.23895264]
[125.23145294 404.57464600]
[113.52278900 414.10406494]
[99.67685699 420.12008667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 128]
[23 127]
[24 56]
[25 55]
[26 54]
[27 53]
[28 52]
[29 43]
[30 42]
[31 41]
[62 122]
[63 121]
[64 120]
[65 119]
[66 93]
[67 92]
[68 91]
[69 90]
[96 117]
[97 116]
[98 115]
[99 114]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
