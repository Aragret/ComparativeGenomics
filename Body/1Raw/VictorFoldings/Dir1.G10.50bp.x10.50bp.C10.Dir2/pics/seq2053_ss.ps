%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAUAACCAGGGGGGGGGGAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAAxxxxxxxxxxCCUACUUCACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUCCCCCCCCCCAUUAUACCCA\
) } def
/len { sequence length } bind def

/coor [
[68.20025635 390.57882690]
[54.35432053 384.56280518]
[42.64566040 375.03338623]
[33.94313431 362.69772339]
[28.89253235 348.47122192]
[27.86864281 333.40951538]
[30.94744110 318.63037109]
[37.90046310 305.23043823]
[48.21174622 294.20410156]
[61.11612701 286.36959839]
[75.65601349 282.30828857]
[75.65601349 267.30828857]
[75.65601349 252.30828857]
[75.65601349 237.30828857]
[75.65601349 222.30828857]
[75.65601349 207.30828857]
[75.65601349 192.30828857]
[75.65601349 177.30828857]
[75.65601349 162.30828857]
[75.65601349 147.30828857]
[75.65601349 132.30828857]
[65.55736542 121.21697235]
[50.62305832 119.81466675]
[35.68875122 118.41236115]
[21.22567940 124.82563782]
[9.27748203 115.93239594]
[-5.65682507 114.53009033]
[-20.61707306 113.43878174]
[-35.59678650 112.65893555]
[-50.57650375 111.87908936]
[-65.55621338 111.09924316]
[-80.53593445 110.31939697]
[-87.40737915 123.90995026]
[-99.21662903 133.52563477]
[-113.91766357 137.50048828]
[-128.96343994 135.14581299]
[-141.74719238 126.86960602]
[-150.05404663 114.10575104]
[-152.44479370 99.06565857]
[-148.50523376 84.35513306]
[-138.91789246 72.52284241]
[-125.34386444 65.61882019]
[-110.13491821 64.83921814]
[-95.92609406 70.31911469]
[-85.17916107 81.10907745]
[-79.75608826 95.33968353]
[-64.77637482 96.11952972]
[-49.79665756 96.89937592]
[-34.81694412 97.67922211]
[-19.83722878 98.45906830]
[-15.71061420 95.93982697]
[-9.94667721 96.03111267]
[-4.25452137 99.59577942]
[10.67978573 100.99808502]
[24.07465553 94.48450470]
[37.09105301 103.47805786]
[52.02536011 104.88035583]
[66.95967102 106.28266144]
[67.57775116 96.25358582]
[71.08068848 87.15512085]
[76.97669220 79.76877594]
[84.57797241 74.67073822]
[93.07709503 72.18820190]
[93.38914490 57.19144821]
[93.70120239 42.19469452]
[94.01325989 27.19793892]
[79.65973663 22.45792198]
[67.34201050 13.69635773]
[58.15536118 1.69231927]
[52.91666794 -12.48680210]
[52.09174347 -27.58020782]
[55.75394058 -42.24580383]
[63.57762527 -55.17953491]
[74.86711884 -65.23133850]
[88.61856079 -71.50742340]
[103.60918427 -73.44972229]
[118.50604248 -70.88552094]
[131.98449707 -64.04283142]
[142.84608459 -53.53009796]
[150.12496948 -40.28210831]
[153.17393494 -25.47686386]
[151.72186279 -10.43083858]
[145.89787292 3.51808739]
[136.21981812 15.12958431]
[123.54829407 23.37116623]
[109.01001740 27.50999641]
[108.69795990 42.50674820]
[108.38590240 57.50350189]
[108.07384491 72.50025940]
[115.55555725 75.92828369]
[121.75469971 81.34106445]
[126.16013336 88.29228973]
[140.97789001 85.96118927]
[155.79563904 83.63008118]
[169.92045593 78.58132935]
[182.85850525 70.99141693]
[184.23933411 55.53590393]
[194.46632385 43.86592865]
[209.60697937 40.46883392]
[223.83941650 46.65087128]
[231.69094849 60.03492355]
[230.14253235 75.47454834]
[219.78955078 87.03289795]
[204.61294556 90.26554871]
[190.44841003 83.92947388]
[177.51036072 91.51938629]
[178.90652466 98.88829041]
[193.64437866 96.09620667]
[196.43620300 110.83410645]
[181.69883728 113.62609100]
[183.09500122 120.99499512]
[197.91276550 123.32610321]
[212.73052979 125.65720367]
[224.40203857 115.25001526]
[240.03402710 114.83163452]
[252.24552917 124.59960175]
[255.27066040 139.94178772]
[247.68103027 153.61407471]
[233.06024170 159.16084290]
[218.31178284 153.96305847]
[210.39941406 140.47496033]
[195.58166504 138.14385986]
[180.76390076 135.81275940]
[159.60450745 118.80996704]
[158.12675476 98.44784546]
[143.30899048 100.77894592]
[128.49124146 103.11005402]
[123.38385010 119.29669952]
[109.43914795 130.55007935]
[90.65601349 132.30828857]
[90.65601349 147.30828857]
[90.65601349 162.30828857]
[90.65601349 177.30828857]
[90.65601349 192.30828857]
[90.65601349 207.30828857]
[90.65601349 222.30828857]
[90.65601349 237.30828857]
[90.65601349 252.30828857]
[90.65601349 267.30828857]
[90.65601349 282.30828857]
[105.19589996 286.36959839]
[118.10028076 294.20410156]
[128.41156006 305.23043823]
[135.36459351 318.63037109]
[138.44338989 333.40951538]
[137.41949463 348.47122192]
[132.36889648 362.69772339]
[123.66636658 375.03338623]
[111.95771027 384.56280518]
[98.11177063 390.57882690]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 58]
[23 57]
[24 56]
[26 54]
[27 53]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[63 89]
[64 88]
[65 87]
[66 86]
[92 127]
[93 126]
[94 125]
[95 106]
[96 105]
[111 123]
[112 122]
[113 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
