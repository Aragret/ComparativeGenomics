%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGGCGCACUGGGGGGGGGGGCGAGCAGUAGCCCAAACAAUCUCAUAUGAAGUCACCCUAGCCAUCAUUCxxxxxxxxxxCUCAUUCAUCGACCUCCCCACCCCAUCCAACAUCUCCGCAUGAUGAAACUCCCCCCCCCCUCGGCUCACU\
) } def
/len { sequence length } bind def

/coor [
[30.62236977 206.69656372]
[37.87573242 193.56686401]
[47.18501282 181.80517578]
[58.29789734 171.73027039]
[70.91319275 163.61520386]
[84.68898010 157.67991638]
[99.25189972 154.08528137]
[114.20724487 152.92872620]
[129.14968872 154.24159241]
[143.67044067 157.98696899]
[133.45695496 147.00129700]
[123.24347687 136.01564026]
[113.02999115 125.02997589]
[102.81651306 114.04431152]
[89.50946045 109.75315857]
[86.19782257 96.16916656]
[75.98434448 85.18350220]
[65.77085876 74.19783783]
[55.55738068 63.21217728]
[45.23017502 52.33335114]
[34.79036331 41.56254196]
[24.23907471 30.90091515]
[13.57744789 20.34962463]
[2.91582155 9.79833508]
[-8.60962391 19.41648865]
[-20.99715424 27.89551163]
[-34.13458252 35.15861893]
[-47.90293121 41.14002991]
[-62.17751312 45.78557587]
[-76.82904816 49.05318832]
[-91.72484589 50.91326523]
[-106.73001099 51.34897232]
[-121.70864868 50.35635757]
[-136.52510071 47.94440842]
[-151.04518127 44.13497543]
[-165.13740540 38.96255112]
[-178.67414856 32.47398376]
[-191.53280640 24.72803307]
[-203.59692383 15.79485226]
[-214.75724792 5.75534010]
[-224.91271973 -5.29958010]
[-233.97134399 -17.26979065]
[-241.85110474 -30.04688644]
[-248.48063660 -43.51515198]
[-253.79988098 -57.55261612]
[-257.76068115 -72.03214264]
[-260.32714844 -86.82260895]
[-261.47607422 -101.79006958]
[-261.19705200 -116.79896545]
[-259.49255371 -131.71336365]
[-256.37808228 -146.39820862]
[-251.88179016 -160.72050476]
[-246.04443359 -174.55055237]
[-238.91885376 -187.76307678]
[-230.56961060 -200.23844910]
[-221.07229614 -211.86366272]
[-210.51292419 -222.53346252]
[-198.98712158 -232.15119934]
[-186.59928894 -240.62976074]
[-173.46159363 -247.89239502]
[-159.69302368 -253.87330627]
[-145.41827393 -258.51834106]
[-130.76661682 -261.78540039]
[-115.87075043 -263.64492798]
[-100.86557770 -264.08010864]
[-85.88697815 -263.08694458]
[-71.07061005 -260.67443848]
[-56.55066299 -256.86450195]
[-42.45862579 -251.69155884]
[-28.92212677 -245.20248413]
[-16.06375313 -237.45606995]
[-3.99995852 -228.52244568]
[7.16000509 -218.48252869]
[17.31506920 -207.42724609]
[26.37326241 -195.45669556]
[34.25255585 -182.67932129]
[40.88158798 -169.21081543]
[46.20032501 -155.17315674]
[50.16059875 -140.69348145]
[52.72653961 -125.90291595]
[53.87491608 -110.93541718]
[53.59532547 -95.92653656]
[51.89029694 -81.01219177]
[48.77527618 -66.32746124]
[44.27847290 -52.00532532]
[38.44060898 -38.17549896]
[31.31455612 -24.96322632]
[22.96485138 -12.48816490]
[13.46711159 -0.86329108]
[24.12873840 9.68799877]
[34.79036331 20.23929024]
[41.80229187 22.72495270]
[45.56117249 31.12273026]
[56.00098419 41.89353943]
[62.95968246 44.52453613]
[66.54304504 52.99869537]
[76.75652313 63.98435974]
[86.97000885 74.97002411]
[97.18348694 85.95568848]
[110.49053955 90.24684143]
[113.80217743 103.83083344]
[124.01565552 114.81649780]
[134.22914124 125.80216217]
[144.44261169 136.78782654]
[154.65609741 147.77348328]
[154.71867371 132.77362061]
[165.83528137 122.70281982]
[180.76840210 124.11772156]
[189.79576111 136.09715271]
[187.04003906 150.84185791]
[174.29583740 158.75215149]
[189.00378418 161.69763184]
[203.71174622 164.64311218]
[218.41970825 167.58859253]
[230.51405334 157.67593384]
[246.14991760 157.90817261]
[257.94451904 168.17567444]
[260.32879639 183.63041687]
[252.17700195 196.97515869]
[237.33813477 201.90890503]
[222.81866455 196.10211182]
[215.47422791 182.29655457]
[200.76626587 179.35107422]
[186.05830383 176.40559387]
[171.35034180 173.46011353]
[182.14978027 183.87030029]
[191.09484863 195.91130066]
[197.94311523 209.25675964]
[202.50895691 223.54498291]
[204.66864014 238.38868713]
[204.36361694 253.38558960]
[201.60217285 268.12921143]
[196.45912170 282.21997070]
[189.07388306 295.27590942]
[179.64662170 306.94326782]
[168.43283081 316.90573120]
[155.73643494 324.89331055]
[141.90156555 330.68954468]
[127.30317688 334.13732910]
[112.33694458 335.14318848]
[97.40848541 333.67990112]
[82.92242432 329.78710938]
[69.27136230 323.57031250]
[56.82530212 315.19799805]
[45.92156219 304.89709473]
[36.85566711 292.94680786]
[29.87333870 279.67098999]
[25.16381454 265.42950439]
[22.85473824 250.60829163]
[23.00869560 235.60906982]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 105]
[11 104]
[12 103]
[13 102]
[14 101]
[16 99]
[17 98]
[18 97]
[19 96]
[20 94]
[21 93]
[22 91]
[23 90]
[24 89]
[111 125]
[112 124]
[113 123]
[114 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
