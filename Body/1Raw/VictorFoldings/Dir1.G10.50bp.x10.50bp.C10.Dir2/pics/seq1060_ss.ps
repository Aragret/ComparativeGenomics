%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUAGCCACGGGGGGGGGGACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUxxxxxxxxxxCCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCCCCCCCCCCCAGCCUAGCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.27729797 514.06372070]
[73.35813904 506.30538940]
[62.57683945 495.77636719]
[54.51482391 483.04449463]
[49.60686493 468.79638672]
[48.11764145 453.80041504]
[50.12746429 438.86529541]
[55.52795029 424.79650879]
[64.02785492 412.35269165]
[75.16878510 402.20495605]
[88.34993744 394.90057373]
[102.86045074 390.83343506]
[102.24462891 375.84609985]
[101.62879944 360.85873413]
[101.01297760 345.87136841]
[100.39714813 330.88403320]
[99.78132629 315.89666748]
[99.16550446 300.90933228]
[98.54967499 285.92196655]
[97.93385315 270.93463135]
[97.31802368 255.94726562]
[96.70220184 240.95991516]
[83.86854553 233.19477844]
[70.30664825 239.60374451]
[56.74475098 246.01272583]
[47.85757065 259.79495239]
[31.49373245 258.71942139]
[24.48694992 243.89251709]
[34.04520035 230.56689453]
[50.33577728 232.45083618]
[63.89767456 226.04185486]
[77.45957184 219.63287354]
[85.87297821 207.21456909]
[86.79639435 192.24301147]
[87.71981049 177.27146912]
[77.69435883 166.31582642]
[78.41755676 151.11938477]
[89.97681427 140.67805481]
[90.90022278 125.70651245]
[67.09395599 117.36044312]
[54.44019318 87.89741516]
[40.01280975 83.79247284]
[25.35396957 90.31151581]
[11.18453789 82.78777313]
[8.37408924 66.99280548]
[19.07855797 55.04316711]
[35.08639526 56.10559464]
[44.11775589 69.36508179]
[58.54513931 73.47003174]
[65.91169739 60.40275192]
[73.27761841 47.33663940]
[62.29681396 37.11793137]
[51.31601334 26.89922523]
[40.33520889 16.68051910]
[24.24011993 13.53726101]
[19.17135429 -2.05888152]
[30.34322739 -14.06393433]
[46.26307297 -10.12812901]
[50.55391693 5.69971561]
[61.53472137 15.91842270]
[72.51552582 26.13713074]
[83.49632263 36.35583878]
[97.88080597 32.10298920]
[101.53951263 17.55603600]
[105.19821930 3.00908256]
[94.54418945 13.56804752]
[81.38459015 20.76699638]
[66.74688721 24.04384804]
[51.77397919 23.14274979]
[37.63492203 18.13405800]
[25.43366432 9.40884495]
[16.12286568 -2.35164070]
[10.42949677 -16.22916031]
[8.79808521 -31.14017868]
[11.35600948 -45.92047119]
[17.90355110 -59.41601562]
[27.92948723 -70.57310486]
[40.65101242 -78.52060699]
[55.07485199 -82.63799286]
[70.07481384 -82.60379028]
[84.47972107 -78.42066956]
[97.16487885 -70.41524506]
[107.13983154 -59.21255493]
[113.62577057 -45.68729401]
[116.11626434 -30.89549065]
[114.41622162 -15.98953152]
[123.57815552 -27.86635399]
[132.74009705 -39.74317932]
[141.90202332 -51.62000275]
[139.63105774 -67.26027679]
[149.15141296 -79.87528992]
[164.81481934 -81.98077393]
[177.32847595 -72.32757568]
[179.26823425 -56.64278030]
[169.48327637 -44.23189163]
[153.77885437 -42.45806503]
[144.61691284 -30.58124352]
[135.45497131 -18.70442009]
[126.29304504 -6.82759571]
[119.74517059 6.66778851]
[116.08646393 21.21474266]
[112.42775726 35.76169586]
[122.97977448 46.42260361]
[137.56352234 42.91343689]
[152.14727783 39.40427017]
[166.73101807 35.89510345]
[176.29913330 23.01757431]
[192.33709717 22.61324501]
[202.54194641 34.99228287]
[199.08540344 50.65854645]
[184.61903381 57.59422302]
[170.24018860 50.47885132]
[155.65644836 53.98802185]
[141.07269287 57.49718857]
[126.48894501 61.00635529]
[136.53631592 107.02069092]
[105.87177277 126.62992859]
[104.94836426 141.60147095]
[115.13688660 153.38415527]
[113.98713684 168.55429077]
[102.69136047 178.19487000]
[101.76794434 193.16642761]
[100.84452820 208.13796997]
[106.28776550 211.32556152]
[110.64056396 215.93824768]
[113.53870392 221.61813354]
[114.73182678 227.91699219]
[114.10503387 234.33163452]
[111.68955231 240.34408569]
[112.30538177 255.33143616]
[112.92120361 270.31878662]
[113.53702545 285.30615234]
[114.15285492 300.29348755]
[114.76867676 315.28085327]
[115.38450623 330.26821899]
[116.00032806 345.25555420]
[116.61615753 360.24291992]
[117.23197937 375.23025513]
[117.84780884 390.21762085]
[132.64308167 393.08059692]
[146.37905884 399.27896118]
[158.31495667 408.47845459]
[167.80711365 420.18298340]
[174.34359741 433.76132202]
[177.57194519 448.48117065]
[177.31802368 463.54876709]
[173.59553528 478.15148926]
[166.60522461 491.50186157]
[156.72407532 502.87991333]
[144.48498535 511.67199707]
[130.54795837 517.40405273]
[115.66461182 519.76684570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 32]
[24 31]
[25 30]
[33 123]
[34 122]
[35 121]
[38 118]
[39 117]
[41 49]
[42 48]
[51 62]
[52 61]
[53 60]
[54 59]
[63 102]
[64 101]
[65 100]
[86 99]
[87 98]
[88 97]
[89 96]
[103 115]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
