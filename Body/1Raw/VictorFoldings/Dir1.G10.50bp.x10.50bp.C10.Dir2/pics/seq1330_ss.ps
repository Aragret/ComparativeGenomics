%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACAAUAGCGGGGGGGGGGUAAGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACCUCxxxxxxxxxxCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGAAUUCACAAACCCCCCCCCCAAACAAUAGC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 425.74624634]
[71.19830322 419.73022461]
[59.48964310 410.20080566]
[50.78712082 397.86514282]
[45.73651886 383.63861084]
[44.71262741 368.57693481]
[47.79142761 353.79776001]
[54.74444962 340.39782715]
[65.05573273 329.37149048]
[77.96011353 321.53698730]
[92.50000000 317.47567749]
[92.50000000 302.47567749]
[92.50000000 287.47567749]
[92.50000000 272.47567749]
[92.50000000 257.47567749]
[92.50000000 242.47567749]
[92.50000000 227.47567749]
[92.50000000 212.47567749]
[92.50000000 197.47567749]
[92.50000000 182.47567749]
[92.50000000 167.47567749]
[81.81912994 157.15800476]
[81.60544586 141.94586182]
[92.50000000 130.81274414]
[80.93550873 125.34206390]
[72.47361755 115.74716949]
[58.06140137 119.90505981]
[43.64918518 124.06294250]
[29.23696899 128.22082520]
[15.69450188 138.42073059]
[2.14429069 128.23112488]
[8.18461418 112.38969421]
[25.07908058 113.80861664]
[39.49129486 109.65072632]
[53.90351105 105.49284363]
[68.31572723 101.33495331]
[75.89643097 79.39191437]
[96.39477539 68.49321747]
[98.26239014 53.60993576]
[92.30352020 38.95379257]
[101.56526184 27.28890991]
[103.43286896 12.40563011]
[105.30048370 -2.47765017]
[107.16809845 -17.36092949]
[97.58419037 -36.48022079]
[110.51856232 -52.51845551]
[111.45419312 -67.48925018]
[112.38982391 -82.46003723]
[113.32544708 -97.43083191]
[103.28692627 -106.46884155]
[100.34999084 -119.45354462]
[105.37265778 -131.57159424]
[116.30434418 -138.46325684]
[117.55121613 -153.41134644]
[97.58437347 -158.05014038]
[85.41400146 -183.58999634]
[82.92887878 -198.38270569]
[80.44376373 -213.17541504]
[77.95864105 -227.96812439]
[75.47352600 -242.76083374]
[60.45257187 -244.18681335]
[46.31285858 -249.45283508]
[34.01845169 -258.19982910]
[24.40760612 -269.83142090]
[18.13560486 -283.55456543]
[15.63008022 -298.43356323]
[17.06186676 -313.45397949]
[22.33334160 -327.59164429]
[31.08508682 -339.88265991]
[42.72039413 -349.48901367]
[56.44594955 -355.75573730]
[71.32592010 -358.25549316]
[86.34576416 -356.81793213]
[100.48140717 -351.54098511]
[112.76905060 -342.78448486]
[122.37091827 -331.14547729]
[128.63232422 -317.41751099]
[131.12635803 -302.53659058]
[129.68296814 -287.51727295]
[124.40057373 -273.38369751]
[115.63934326 -261.09942627]
[103.99662018 -251.50204468]
[90.26622772 -245.24594116]
[92.75135040 -230.45324707]
[95.23646545 -215.66053772]
[97.72158813 -200.86782837]
[100.20670319 -186.07511902]
[107.32009888 -183.69821167]
[121.54687500 -178.94439697]
[128.66026306 -176.56748962]
[139.53909302 -186.89469910]
[150.41790771 -197.22189331]
[152.27079773 -213.15759277]
[165.96075439 -221.52207947]
[180.98602295 -215.89883423]
[185.82049561 -200.60153198]
[176.75559998 -187.36495972]
[160.74511719 -186.34307861]
[149.86628723 -176.01586914]
[138.98747253 -165.68865967]
[132.49929810 -152.16447449]
[131.25242615 -137.21638489]
[142.64778137 -124.88740540]
[141.61131287 -107.79325867]
[128.29623413 -96.49520111]
[127.36061096 -81.52441406]
[126.42498016 -66.55361938]
[125.48935699 -51.58282852]
[132.45207214 -45.89404678]
[136.03591919 -37.49747849]
[135.30531311 -28.25867462]
[130.29925537 -20.29564667]
[122.05137634 -15.49331665]
[120.18376160 -0.61003709]
[118.31615448 14.27324295]
[116.44853973 29.15652275]
[122.54099274 42.74811172]
[113.14567566 55.47754669]
[111.27806091 70.36082458]
[119.96514130 75.36124420]
[126.65765381 82.82313538]
[130.68699646 92.00104523]
[131.65063477 101.97806549]
[129.45228577 111.75747681]
[124.31157684 120.36228180]
[116.74207306 126.93284607]
[107.50000000 130.81274414]
[118.39455414 141.94586182]
[118.18087006 157.15800476]
[107.50000000 167.47567749]
[107.50000000 182.47567749]
[107.50000000 197.47567749]
[107.50000000 212.47567749]
[107.50000000 227.47567749]
[107.50000000 242.47567749]
[107.50000000 257.47567749]
[107.50000000 272.47567749]
[107.50000000 287.47567749]
[107.50000000 302.47567749]
[107.50000000 317.47567749]
[122.03988647 321.53698730]
[134.94427490 329.37149048]
[145.25555420 340.39782715]
[152.20857239 353.79776001]
[155.28736877 368.57693481]
[154.26348877 383.63861084]
[149.21287537 397.86514282]
[140.51036072 410.20080566]
[128.80169678 419.73022461]
[114.95575714 425.74624634]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 127]
[26 36]
[27 35]
[28 34]
[29 33]
[38 119]
[39 118]
[41 116]
[42 115]
[43 114]
[44 113]
[46 108]
[47 107]
[48 106]
[49 105]
[53 102]
[54 101]
[56 87]
[57 86]
[58 85]
[59 84]
[60 83]
[90 100]
[91 99]
[92 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
