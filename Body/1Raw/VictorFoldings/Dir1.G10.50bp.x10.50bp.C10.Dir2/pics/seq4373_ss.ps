%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACUCACCGGGGGGGGGGCUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUxxxxxxxxxxUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCCCCCCCCCCCACUACUCACC\
) } def
/len { sequence length } bind def

/coor [
[83.70330048 380.00598145]
[70.48310089 372.73348999]
[59.59629440 362.28649902]
[51.78516388 349.37725830]
[47.58228302 334.88592529]
[47.27421188 319.80059814]
[50.88195419 305.14978027]
[58.15952682 291.93237305]
[68.61073303 281.04962158]
[81.52299500 273.24346924]
[96.01593018 269.04617310]
[95.70387268 254.04942322]
[95.39182281 239.05267334]
[95.07976532 224.05592346]
[94.76770782 209.05917358]
[94.45565033 194.06240845]
[94.14359283 179.06565857]
[93.83153534 164.06890869]
[93.51948547 149.07215881]
[93.20742798 134.07539368]
[92.89537048 119.07864380]
[80.63349915 111.10950470]
[76.06645203 95.82538605]
[82.98854065 79.99102020]
[68.86373901 74.94226837]
[59.43817902 88.17289734]
[46.69677734 98.22755432]
[31.66309547 104.30842590]
[15.54207230 105.93652344]
[-0.37654880 102.98941803]
[-14.82140732 95.71038818]
[-26.64106369 84.68838501]
[-34.89577866 70.81035614]
[-38.93222809 55.18991089]
[-38.43521500 39.07792664]
[-52.75781250 34.62110901]
[-67.08040619 30.16429329]
[-84.90831757 34.65266800]
[-96.33838654 21.37285233]
[-110.75060272 17.21496582]
[-125.16281891 13.05707836]
[-139.57504272 8.89919090]
[-155.35473633 13.36382771]
[-166.92083740 1.73810256]
[-162.37512207 -14.01843452]
[-146.39382935 -17.69680977]
[-135.41714478 -5.51302528]
[-121.00493622 -1.35513794]
[-106.59272003 2.80274940]
[-92.18050385 6.96063709]
[-81.40196228 1.38117361]
[-69.33147430 4.77561140]
[-62.62359238 15.84169674]
[-48.30099487 20.29851151]
[-33.97839737 24.75532722]
[-26.71674347 12.97533607]
[-16.82335854 3.28533888]
[-4.87794971 -3.74017048]
[8.41792107 -7.68301964]
[22.28203583 -8.30624676]
[35.89754105 -5.56833601]
[48.46107483 0.37405348]
[59.23016739 9.17504406]
[67.56712341 20.31966782]
[72.97677612 33.15399551]
[75.13589478 46.92351151]
[73.91249847 60.81746292]
[88.03730011 65.86621857]
[75.04695129 58.36616135]
[66.40088654 46.10869217]
[63.69404602 31.35494614]
[67.42575073 16.82654762]
[76.90762329 5.20354795]
[90.39054108 -1.36995864]
[105.38730621 -1.68135822]
[119.13146973 4.32679319]
[129.08764648 15.54617214]
[133.41923523 29.90714073]
[131.32716370 44.76053238]
[123.19737244 57.36634445]
[110.53243256 65.39813232]
[124.43498993 59.76617813]
[138.33753967 54.13422394]
[152.24009705 48.50226593]
[165.62638855 41.73414993]
[178.32131958 33.74423599]
[190.93243408 25.62269211]
[203.54356384 17.50115013]
[216.15469360 9.37960815]
[219.51954651 -7.75559425]
[233.93490601 -17.00122452]
[250.25683594 -13.07029152]
[262.69628906 -21.45243454]
[275.13571167 -29.83457756]
[287.57516479 -38.21672058]
[289.03689575 -53.78583527]
[300.20053101 -64.73605347]
[315.79495239 -65.89700317]
[328.45693970 -56.72053146]
[332.20791626 -41.53948212]
[325.27676392 -27.52188492]
[310.93615723 -21.28641891]
[295.95730591 -25.77728081]
[283.51785278 -17.39513779]
[271.07843018 -9.01299381]
[258.63897705 -0.63085079]
[257.95739746 12.27388668]
[249.83061218 22.57094193]
[237.06352234 26.34312057]
[224.27624512 21.99073601]
[211.66511536 30.11227798]
[199.05398560 38.23382187]
[186.44285583 46.35536194]
[182.49662781 52.66194534]
[173.48381042 54.51150894]
[188.17575073 57.53591537]
[198.40206909 68.50962067]
[200.38436890 83.37805939]
[193.39021301 96.64764404]
[180.00381470 103.41551971]
[165.17115784 101.18109131]
[154.37265015 90.76994324]
[151.59809875 76.02878571]
[157.87205505 62.40482330]
[143.96949768 68.03678131]
[130.06694031 73.66873169]
[116.16439056 79.30068970]
[123.10662842 103.07857513]
[107.89212036 118.76658630]
[108.20417786 133.76333618]
[108.51623535 148.76010132]
[108.82829285 163.75685120]
[109.14035034 178.75360107]
[109.45240784 193.75035095]
[109.76445770 208.74711609]
[110.07651520 223.74386597]
[110.38857269 238.74061584]
[110.70063019 253.73736572]
[111.01268768 268.73413086]
[125.66767883 272.32489014]
[138.89349365 279.58715820]
[149.78836060 290.02575684]
[157.60945129 302.92895508]
[161.82351685 317.41702271]
[162.14324951 332.50213623]
[158.54681396 347.15573120]
[151.27944946 360.37872314]
[140.83665466 371.26956177]
[127.93041992 379.08569336]
[113.44073486 383.29415894]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[24 68]
[25 67]
[35 55]
[36 54]
[37 53]
[39 50]
[40 49]
[41 48]
[42 47]
[81 127]
[82 126]
[83 125]
[84 124]
[85 115]
[86 113]
[87 112]
[88 111]
[89 110]
[92 106]
[93 105]
[94 104]
[95 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
