%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGGAGGCCUGGGGGGGGGGGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGAAUUCAxxxxxxxxxxCUCCGGGUCCAUCAUCCACAACCUUAACAAUGAACAAGAUAUUCGAAAAACCCCCCCCCCUAGGAGGACU\
) } def
/len { sequence length } bind def

/coor [
[75.20782471 357.60330200]
[61.98762512 350.33084106]
[51.10082245 339.88381958]
[43.28969193 326.97457886]
[39.08681107 312.48327637]
[38.77873993 297.39791870]
[42.38647842 282.74710083]
[49.66405106 269.52972412]
[60.11526108 258.64694214]
[73.02751923 250.84078979]
[87.52046204 246.64350891]
[87.20840454 231.64675903]
[86.89634705 216.65000916]
[86.58428955 201.65324402]
[86.27223206 186.65649414]
[85.96017456 171.65974426]
[85.64812469 156.66299438]
[85.33606720 141.66622925]
[85.02400970 126.66947937]
[74.14518738 116.34227753]
[59.15248871 116.81031799]
[44.15979004 117.27835846]
[29.16709518 117.74639893]
[14.17439938 118.21444702]
[-0.59165597 120.85330963]
[-14.81843472 125.60712433]
[-29.04521370 130.36093140]
[-37.46710587 144.01565552]
[-53.41043854 145.80160522]
[-64.64485931 134.34877014]
[-62.55226898 118.44277954]
[-48.73793793 110.28534698]
[-33.79903030 116.13415527]
[-19.57225037 111.38034058]
[-5.34547091 106.62652588]
[-5.73539352 99.13667297]
[-6.51523829 84.15695953]
[-6.90516090 76.66709900]
[-21.54866219 73.41627502]
[-36.19216537 70.16545105]
[-50.44298172 77.53388214]
[-65.02969360 70.85500336]
[-68.76262665 55.25228882]
[-58.77818680 42.69479752]
[-42.73559189 42.81556320]
[-32.94133759 55.52194595]
[-18.29783630 58.77277374]
[-3.65433526 62.02359772]
[15.26273251 82.32942200]
[13.70635700 103.22174835]
[28.69905281 102.75370789]
[43.69174957 102.28565979]
[58.68444443 101.81761932]
[73.67713928 101.34957886]
[86.08085632 82.03092957]
[105.71566010 81.77362061]
[115.46331024 70.37260437]
[118.55039215 54.85549927]
[132.70199585 50.20994186]
[142.44964600 38.80891800]
[152.19729614 27.40789795]
[161.94496155 16.00687790]
[171.69261169 4.60585594]
[161.36286926 -6.28974342]
[152.22862244 -18.20542336]
[144.38996887 -31.01062775]
[137.93280029 -44.56505585]
[132.92784119 -58.72019958]
[129.42993164 -73.32096863]
[127.47740936 -88.20738220]
[127.09166718 -103.21634674]
[128.27691650 -118.18340302]
[131.02018738 -132.94458008]
[135.29141235 -147.33811951]
[141.04380798 -161.20635986]
[148.21432495 -174.39730835]
[156.72441101 -186.76646423]
[166.48083496 -198.17829895]
[177.37667847 -208.50778198]
[189.29258728 -217.64173889]
[202.09797668 -225.48007202]
[215.65257263 -231.93692017]
[229.80783081 -236.94154358]
[244.40867615 -240.43908691]
[259.29513550 -242.39125061]
[274.30410767 -242.77662659]
[289.27114868 -241.59100342]
[304.03225708 -238.84738159]
[318.42568970 -234.57580566]
[332.29379272 -228.82308960]
[345.48455811 -221.65223694]
[357.85351562 -213.14184570]
[369.26513672 -203.38514709]
[379.59432983 -192.48905945]
[388.72799683 -180.57292175]
[396.56600952 -167.76734924]
[403.02255249 -154.21260071]
[408.02682495 -140.05722046]
[411.52401733 -125.45627594]
[413.47579956 -110.56977081]
[413.86083984 -95.56079102]
[412.67483521 -80.59378815]
[409.93084717 -65.83274841]
[405.65893555 -51.43940353]
[399.90588379 -37.57145309]
[392.73471069 -24.38084602]
[384.22402954 -12.01210117]
[374.46704102 -0.60073924]
[363.57067871 9.72821140]
[351.65435791 18.86157990]
[338.84857178 26.69929695]
[325.29367065 33.15549088]
[311.13815308 38.15941620]
[296.53713989 41.65625763]
[281.65057373 43.60769272]
[266.64160156 43.99234390]
[251.67462158 42.80599976]
[236.91365051 40.06165695]
[222.52041626 35.78937912]
[208.65260315 30.03598213]
[195.46217346 22.86450005]
[183.09362793 14.35350800]
[173.34597778 25.75452995]
[163.59832764 37.15555191]
[153.85067749 48.55657196]
[144.10302734 59.95759201]
[141.71316528 74.65921783]
[126.86433411 80.12025452]
[117.11668396 91.52127838]
[119.31727600 111.97801208]
[100.02075958 126.35742188]
[100.33281708 141.35417175]
[100.64487457 156.35093689]
[100.95693207 171.34768677]
[101.26898956 186.34443665]
[101.58104706 201.34118652]
[101.89309692 216.33795166]
[102.20515442 231.33470154]
[102.51721191 246.33145142]
[117.17220306 249.92222595]
[130.39801025 257.18447876]
[141.29287720 267.62307739]
[149.11398315 280.52627563]
[153.32804871 295.01434326]
[153.64776611 310.09945679]
[150.05134583 324.75305176]
[142.78398132 337.97604370]
[132.34118652 348.86688232]
[119.43495178 356.68301392]
[104.94525909 360.89147949]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 54]
[21 53]
[22 52]
[23 51]
[24 50]
[25 35]
[26 34]
[27 33]
[38 48]
[39 47]
[40 46]
[56 129]
[57 128]
[59 126]
[60 125]
[61 124]
[62 123]
[63 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
