%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGUAACAGCCGGGGGGGGGGAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUxxxxxxxxxxCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACCCCCCCCCCCUAGUCACAGCC\
) } def
/len { sequence length } bind def

/coor [
[-25.63813591 246.47193909]
[-35.33008957 237.56721497]
[-44.39251328 228.02255249]
[-52.78325272 217.88235474]
[-60.46327591 207.19378662]
[-67.39685059 196.00657654]
[-73.55173492 184.37277222]
[-78.89929199 172.34646606]
[-83.41464996 159.98364258]
[-97.84203339 164.08857727]
[-112.26941681 168.19352722]
[-126.69680023 172.29847717]
[-141.12419128 176.40341187]
[-141.43832397 191.47441101]
[-155.81283569 204.98712158]
[-169.24028015 211.67320251]
[-182.66772461 218.35926819]
[-196.09518433 225.04534912]
[-209.52262878 231.73141479]
[-222.73780823 238.82781982]
[-235.72819519 246.32781982]
[-248.71856689 253.82781982]
[-261.70895386 261.32781982]
[-269.43548584 275.79272461]
[-285.83239746 276.06329346]
[-294.03195190 261.86120605]
[-285.59918213 247.79635620]
[-269.20895386 248.33744812]
[-256.21856689 240.83744812]
[-243.22819519 233.33744812]
[-230.23780823 225.83744812]
[-228.98132324 222.48059082]
[-226.00158691 219.58390808]
[-221.54176331 217.96665955]
[-216.20870972 218.30397034]
[-202.78125000 211.61790466]
[-189.35380554 204.93182373]
[-175.92636108 198.24574280]
[-162.49890137 191.55967712]
[-164.03619385 176.63865662]
[-178.54483032 172.83079529]
[-193.05345154 169.02293396]
[-208.72047424 173.86817932]
[-220.56455994 162.52578735]
[-216.40151978 146.66384888]
[-200.51393127 142.59976196]
[-189.24559021 154.51431274]
[-174.73696899 158.32217407]
[-160.22834778 162.13003540]
[-145.22912598 161.97602844]
[-130.80174255 157.87109375]
[-116.37435913 153.76614380]
[-101.94697571 149.66119385]
[-87.51959229 145.55625916]
[-90.24088287 132.36318970]
[-92.03514862 119.01242828]
[-92.89363861 105.56901550]
[-92.81217957 92.09847260]
[-91.79116058 78.66642761]
[-89.83555603 65.33834076]
[-86.95490265 52.17915344]
[-83.16323853 39.25299835]
[-78.47903442 26.62285423]
[-72.92510986 14.35027313]
[-66.52854156 2.49505520]
[-59.32049561 -8.88502979]
[-51.33609390 -19.73452759]
[-42.61424255 -30.00056839]
[-33.19744492 -39.63312912]
[-23.13158798 -48.58526993]
[-12.46572113 -56.81336594]
[-1.25181830 -64.27732086]
[10.45547581 -70.94077301]
[22.59911156 -76.77124023]
[35.11991501 -81.74031830]
[47.95687485 -85.82379913]
[61.04743576 -89.00177002]
[74.32781219 -91.25875092]
[87.73328400 -92.58374023]
[101.19853210 -92.97029114]
[114.65793610 -92.41651154]
[128.04591370 -90.92510986]
[141.29722595 -88.50334167]
[154.34730530 -85.16300964]
[167.13255310 -80.92039490]
[179.59066772 -75.79617310]
[191.66094971 -69.81531525]
[203.28456116 -63.00695801]
[214.40489197 -55.40428162]
[224.96772766 -47.04433823]
[234.92161560 -37.96785355]
[244.21803284 -28.21906853]
[255.80708313 -37.74240494]
[267.39611816 -47.26574326]
[278.98516846 -56.78908157]
[281.97216797 -72.55161285]
[296.22491455 -79.91635132]
[310.80987549 -73.23369598]
[314.53875732 -57.63001251]
[304.55108643 -45.07510757]
[288.50851440 -45.20003128]
[276.91946411 -35.67669296]
[265.33041382 -26.15335655]
[253.74136353 -16.63002014]
[269.44049072 7.64800072]
[281.33624268 33.99900055]
[289.16165161 61.83148956]
[292.74105835 90.52072906]
[307.74026489 90.36673737]
[322.73947144 90.21273804]
[337.73867798 90.05873871]
[348.61825562 78.59530640]
[364.41909790 78.26597595]
[375.76687622 89.26613617]
[375.92913818 105.06959534]
[364.80960083 116.30043030]
[349.00531006 116.29559326]
[337.89266968 105.05795288]
[322.89346313 105.21194458]
[307.89425659 105.36594391]
[292.89505005 105.51994324]
[292.07012939 118.65567780]
[290.35174561 131.70463562]
[287.74786377 144.60610962]
[284.27062988 157.30007935]
[279.93621826 169.72750854]
[274.76477051 181.83058167]
[268.78036499 193.55299377]
[262.01080322 204.84020996]
[254.48760986 215.63972473]
[246.24577332 225.90132141]
[237.32363892 235.57723999]
[227.76269531 244.62249756]
[217.60742188 252.99497986]
[206.90505981 260.65576172]
[195.70541382 267.56921387]
[184.06054688 273.70318604]
[172.02465820 279.02911377]
[159.65371704 283.52221680]
[147.00529480 287.16162109]
[134.13819885 289.93038940]
[121.11230469 291.81564331]
[107.98819733 292.80859375]
[94.82693481 292.90466309]
[81.68973541 292.10336304]
[68.63770294 290.40844727]
[55.73157120 287.82778931]
[43.03136444 284.37338257]
[30.59616470 280.06130981]
[18.48381805 274.91165161]
[6.75066710 268.94830322]
[-4.54870653 262.19906616]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 54]
[10 53]
[11 52]
[12 51]
[13 50]
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[20 31]
[21 30]
[22 29]
[23 28]
[40 49]
[41 48]
[42 47]
[92 104]
[93 103]
[94 102]
[95 101]
[108 121]
[109 120]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
