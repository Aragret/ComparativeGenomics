%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCAUAGCCGGGGGGGGGGGAAUACACAAACAUUAUUAUAAUAAACACCCUCACCACUACAAUCUUCCUxxxxxxxxxxUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCCCCCCCCCCCCUUCAAAGCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 372.32565308]
[71.19830322 366.30963135]
[59.48964310 356.78021240]
[50.78712082 344.44454956]
[45.73651886 330.21801758]
[44.71262741 315.15634155]
[47.79142761 300.37716675]
[54.74444962 286.97726440]
[65.05573273 275.95092773]
[77.96011353 268.11642456]
[92.50000000 264.05508423]
[92.50000000 249.05509949]
[92.50000000 234.05509949]
[92.50000000 219.05509949]
[92.50000000 204.05509949]
[92.50000000 189.05509949]
[92.50000000 174.05509949]
[92.50000000 159.05509949]
[92.50000000 144.05509949]
[92.50000000 129.05509949]
[92.50000000 114.05509949]
[89.09702301 99.44620514]
[82.46852112 85.99024200]
[75.84002686 72.53427124]
[60.22492218 74.86714935]
[44.67061996 72.27378082]
[30.69150162 65.01879120]
[19.64483643 53.82006454]
[12.59902191 39.77773285]
[10.23024559 24.26610374]
[12.75760841 8.79917240]
[19.92292404 -5.11716509]
[31.01702881 -16.13171577]
[24.11003113 -29.44687271]
[17.20303154 -42.76202774]
[10.29603291 -56.07718277]
[3.38903475 -69.39234161]
[-3.51796389 -82.70749664]
[-10.42496204 -96.02265167]
[-25.22223854 -100.88869476]
[-32.03723907 -114.49054718]
[-27.30702019 -128.56750488]
[-34.21401978 -141.88265991]
[-41.12101746 -155.19781494]
[-48.02801514 -168.51296997]
[-54.93501282 -181.82812500]
[-69.26017761 -177.25671387]
[-84.15187836 -175.17218018]
[-99.18165588 -175.63452148]
[-113.91707611 -178.63041687]
[-127.93416595 -184.07368469]
[-140.82963562 -191.80769348]
[-152.23245239 -201.60993958]
[-161.81452942 -213.19836426]
[-169.30017090 -226.23957825]
[-174.47399902 -240.35833740]
[-177.18717957 -255.14842224]
[-177.36160278 -270.18429565]
[-174.99227905 -285.03335571]
[-170.14738464 -299.26834106]
[-162.96629333 -312.47970581]
[-153.65563965 -324.28732300]
[-142.48330688 -334.35144043]
[-129.77072144 -342.38253784]
[-115.88368225 -348.14953613]
[-101.22173309 -351.48648071]
[-86.20672607 -352.29736328]
[-71.27067566 -350.55886841]
[-56.84331512 -346.32101440]
[-43.33975983 -339.70574951]
[-31.14852524 -330.90335083]
[-20.62038040 -320.16714478]
[-12.05824280 -307.80599976]
[-5.70845938 -294.17559814]
[-1.75372744 -279.66806030]
[-0.30783224 -264.70086670]
[-1.41237509 -249.70460510]
[-5.03557587 -235.11074829]
[-11.07318878 -221.33921814]
[-19.35149765 -208.78622437]
[-29.63232231 -197.81294250]
[-41.61985779 -188.73512268]
[-34.71286011 -175.41996765]
[-27.80586243 -162.10481262]
[-20.89886284 -148.78965759]
[-13.99186516 -135.47450256]
[0.24024796 -131.23391724]
[7.43460608 -117.82884216]
[2.89019322 -102.92964935]
[9.79719162 -89.61449432]
[16.70419121 -76.29933929]
[23.61118889 -62.98418045]
[30.51818657 -49.66902542]
[37.42518616 -36.35387039]
[44.33218384 -23.03871536]
[58.36463928 -25.71975708]
[72.59889221 -24.32697678]
[85.87508392 -18.96480942]
[97.10887909 -10.06149673]
[105.38001251 1.66509902]
[110.00765991 15.26537228]
[110.60652161 29.63487053]
[107.11882019 43.60398102]
[99.81980133 56.03313828]
[89.29598999 65.90577698]
[95.92449188 79.36174011]
[102.55298615 92.81770325]
[109.59244537 84.90510559]
[120.00777435 80.20198822]
[132.63314819 79.74203491]
[147.45089722 82.07313538]
[162.26866150 84.40424347]
[172.44787598 72.81169128]
[187.28485107 68.58467865]
[202.04516602 73.07203674]
[212.01887512 84.84186554]
[214.02339172 100.13845062]
[207.41906738 114.08070374]
[194.31333923 122.21971130]
[178.88819885 121.95834351]
[166.06573486 113.38000488]
[159.93756104 99.22200012]
[145.11979675 96.89089966]
[130.30204773 94.55979156]
[124.60153198 99.43361664]
[137.39520264 107.26446533]
[133.90106201 121.85182190]
[118.94790649 123.03641510]
[113.20050812 109.18127441]
[107.50000000 114.05509949]
[107.50000000 129.05509949]
[107.50000000 144.05509949]
[107.50000000 159.05509949]
[107.50000000 174.05509949]
[107.50000000 189.05509949]
[107.50000000 204.05509949]
[107.50000000 219.05509949]
[107.50000000 234.05509949]
[107.50000000 249.05509949]
[107.50000000 264.05508423]
[122.03988647 268.11642456]
[134.94427490 275.95092773]
[145.25555420 286.97726440]
[152.20857239 300.37716675]
[155.28736877 315.15634155]
[154.26348877 330.21801758]
[149.21287537 344.44454956]
[140.51036072 356.78021240]
[128.80169678 366.30963135]
[114.95575714 372.32565308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 107]
[23 106]
[24 105]
[33 95]
[34 94]
[35 93]
[36 92]
[37 91]
[38 90]
[39 89]
[42 86]
[43 85]
[44 84]
[45 83]
[46 82]
[110 124]
[111 123]
[112 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
