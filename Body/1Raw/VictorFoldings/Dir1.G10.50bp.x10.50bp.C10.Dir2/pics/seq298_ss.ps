%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAACCCCCGGGGGGGGGGCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAxxxxxxxxxxAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGCCCCCCCCCCCCACACCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.89041138 476.13494873]
[83.04447174 470.11892700]
[71.33581543 460.58950806]
[62.63328934 448.25384521]
[57.58268738 434.02731323]
[56.55879593 418.96563721]
[59.63759232 404.18646240]
[66.59061432 390.78652954]
[76.90190125 379.76022339]
[89.80628204 371.92568970]
[104.34616852 367.86437988]
[104.34616852 352.86437988]
[104.34616852 337.86437988]
[104.34616852 322.86437988]
[104.34616852 307.86437988]
[104.34616852 292.86437988]
[104.34616852 277.86437988]
[104.34616852 262.86437988]
[104.34616852 247.86437988]
[104.34616852 232.86437988]
[104.34616852 217.86437988]
[94.71900940 213.71195984]
[87.01657104 206.54226685]
[82.15052795 197.16870117]
[80.70862579 186.66746521]
[82.88380432 176.25402832]
[88.44880676 167.14244080]
[96.77967072 160.40383911]
[106.92557526 156.84049988]
[108.17244720 141.89241028]
[109.41932678 126.94432068]
[90.94642639 125.42823029]
[78.31659698 113.30593109]
[76.30625153 96.95146179]
[62.78205872 90.46330261]
[49.25786972 83.97513580]
[35.73367691 77.48696899]
[25.91676521 88.94518280]
[13.46820164 97.47135925]
[-0.76324672 102.48416901]
[-15.80725574 103.64183807]
[-30.63810158 100.86543274]
[-44.24459076 94.34424591]
[-55.69900894 84.52290344]
[-64.22038269 72.07105255]
[-69.22769928 57.83766937]
[-70.37955475 42.79321289]
[-67.59741974 27.96344185]
[-61.07098389 14.35947132]
[-51.24522400 2.90884447]
[-38.79008102 -5.60771656]
[-24.55476379 -10.60953903]
[-9.50986576 -11.75558853]
[5.31883144 -8.96772766]
[18.92028046 -2.43603611]
[30.36711311 7.39414406]
[38.87886429 19.85257530]
[43.87519073 34.08982086]
[45.01543045 49.13515854]
[42.22184372 63.96278000]
[55.74603271 70.45094299]
[69.27022552 76.93910980]
[82.79441071 83.42727661]
[85.42108154 81.07534027]
[88.36531830 79.13563538]
[91.56298828 77.65040588]
[90.93901062 62.66339111]
[76.65335083 57.46835709]
[65.44655609 47.19819641]
[59.02757645 33.41904068]
[58.37526321 18.23210907]
[63.58908463 3.95329666]
[73.87397766 -7.23998022]
[87.66156769 -13.64082813]
[102.84934235 -14.27316380]
[117.12128448 -9.04056168]
[128.30102539 1.25904560]
[134.68373108 15.05504227]
[135.29608154 30.24363899]
[130.04470825 44.50868225]
[119.73040771 55.67486191]
[105.92602539 62.03941345]
[106.55000305 77.02642822]
[114.55777740 79.61115265]
[121.51192474 85.01583099]
[126.41619110 92.80034637]
[128.46038818 102.17401123]
[142.58518982 97.12525177]
[156.70999146 92.07649994]
[170.83479309 87.02774048]
[173.54852295 69.72076416]
[184.56721497 56.21564865]
[200.81130981 50.14542007]
[217.81173706 53.08470535]
[230.93923950 64.14241791]
[244.84179688 58.51045609]
[258.74435425 52.87850189]
[264.50915527 41.29312134]
[276.25570679 36.90707397]
[287.46072388 41.57125854]
[301.47744751 36.22974777]
[315.49414062 30.88823509]
[325.42007446 17.83418083]
[341.65182495 20.17138100]
[347.49154663 35.49552536]
[336.93188477 48.04244614]
[320.83566284 44.90494919]
[306.81893921 50.24645996]
[292.80224609 55.58797455]
[282.51562500 69.77194977]
[264.37631226 66.78105927]
[250.47375488 72.41301727]
[236.57119751 78.04496765]
[236.17025757 90.74295807]
[230.95704651 102.37976837]
[221.68049622 111.19658661]
[209.70654297 115.84602356]
[196.81710815 115.59798431]
[184.94487000 110.45404053]
[175.88356018 101.15254211]
[161.75874329 106.20130157]
[147.63394165 111.25006104]
[133.50914001 116.29881287]
[124.36740875 128.19119263]
[123.12053680 143.13928223]
[121.87365723 158.08737183]
[137.66783142 170.21847534]
[142.99301147 189.26065063]
[135.88609314 207.55915833]
[119.34616852 217.86437988]
[119.34616852 232.86437988]
[119.34616852 247.86437988]
[119.34616852 262.86437988]
[119.34616852 277.86437988]
[119.34616852 292.86437988]
[119.34616852 307.86437988]
[119.34616852 322.86437988]
[119.34616852 337.86437988]
[119.34616852 352.86437988]
[119.34616852 367.86437988]
[133.88604736 371.92568970]
[146.79043579 379.76022339]
[157.10171509 390.78652954]
[164.05474854 404.18646240]
[167.13354492 418.96563721]
[166.10964966 434.02731323]
[161.05905151 448.25384521]
[152.35652161 460.58950806]
[140.64785767 470.11892700]
[126.80192566 476.13494873]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[29 126]
[30 125]
[31 124]
[34 63]
[35 62]
[36 61]
[37 60]
[66 83]
[67 82]
[87 123]
[88 122]
[89 121]
[90 120]
[95 113]
[96 112]
[97 111]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
