%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAUAAUCGGGGGGGGGGAUUUUCCUUAUCUGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCACxxxxxxxxxxUCAUUACUAUUCUGCCUAGCAAACUCAAACUACGAACGCACUCACAGUCGCCCCCCCCCCCAUCAUAAUC\
) } def
/len { sequence length } bind def

/coor [
[79.87490082 553.66296387]
[66.02896118 547.64691162]
[54.32029724 538.11749268]
[45.61777496 525.78186035]
[40.56717300 511.55532837]
[39.54328156 496.49365234]
[42.62208176 481.71447754]
[49.57510376 468.31454468]
[59.88638687 457.28823853]
[72.79076385 449.45370483]
[87.33065796 445.39239502]
[87.33065796 430.39239502]
[87.33065796 415.39239502]
[87.33065796 400.39239502]
[87.33065796 385.39239502]
[87.33065796 370.39239502]
[87.33065796 355.39239502]
[87.33065796 340.39239502]
[87.33065796 325.39239502]
[87.33065796 310.39239502]
[73.75296783 307.18038940]
[61.23456573 301.00143433]
[50.41486359 292.16714478]
[41.84741592 281.12500000]
[35.97155762 268.43545532]
[33.08989716 254.74360657]
[33.35272598 240.74639893]
[36.75017548 227.15710449]
[43.11256409 214.66902161]
[52.11885071 203.92005920]
[63.31282425 195.46022034]
[76.12623596 189.72337341]
[89.90763855 187.00506592]
[90.53161621 172.01805115]
[91.15558624 157.03103638]
[91.62363434 142.03833008]
[91.93569183 127.04158020]
[92.24774170 112.04483032]
[85.67915344 99.70201111]
[92.75550079 87.64311218]
[93.06755829 72.64636230]
[93.37961578 57.64960480]
[93.69167328 42.65285110]
[80.09659576 32.64155579]
[75.17337036 16.66521835]
[80.66539001 1.05100584]
[94.23154449 -8.13946533]
[94.23154449 -23.13946533]
[86.49424744 -36.93963623]
[94.23154449 -49.66690826]
[94.23154449 -64.66690826]
[94.23154449 -79.66690826]
[79.33806610 -81.62628937]
[64.82776642 -85.51295471]
[50.94893265 -91.26040649]
[37.93906021 -98.77027893]
[26.02076340 -107.91408539]
[15.39797592 -118.53535461]
[6.25246859 -130.45234680]
[-1.25926602 -143.46115112]
[-7.00869274 -157.33915710]
[-10.89743137 -171.84890747]
[-12.85894012 -186.74211121]
[-12.85965443 -201.76391602]
[-10.89956379 -216.65731812]
[-7.01220703 -231.16743469]
[-1.26410151 -245.04598999]
[6.24639463 -258.05551147]
[15.39076710 -269.97335815]
[26.01254463 -280.59564209]
[37.92997360 -289.74057007]
[50.93912888 -297.25170898]
[64.81741333 -303.00045776]
[79.32733917 -306.88851929]
[94.22063446 -308.84930420]
[109.24245453 -308.84930420]
[124.13574982 -306.88851929]
[138.64569092 -303.00045776]
[152.52397156 -297.25170898]
[165.53312683 -289.74057007]
[177.45054626 -280.59564209]
[188.07232666 -269.97335815]
[197.21670532 -258.05551147]
[204.72718811 -245.04598999]
[210.47529602 -231.16743469]
[214.36265564 -216.65731812]
[216.32275391 -201.76391602]
[216.32203674 -186.74211121]
[214.36051941 -171.84890747]
[210.47178650 -157.33915710]
[204.72236633 -143.46115112]
[197.21063232 -130.45234680]
[188.06512451 -118.53535461]
[177.44233704 -107.91408539]
[165.52403259 -98.77027893]
[152.51416016 -91.26040649]
[138.63533020 -85.51295471]
[124.12503052 -81.62628937]
[109.23154449 -79.66690826]
[109.23154449 -64.66690826]
[109.23154449 -49.66690826]
[116.96884918 -36.93963623]
[109.23154449 -23.13946533]
[109.23154449 -8.13946533]
[120.74098969 -1.30362344]
[127.40895081 10.42879868]
[127.39231110 24.03211594]
[120.58804321 35.93652725]
[108.68842316 42.96490860]
[108.37636566 57.96166229]
[108.06430817 72.95841980]
[107.75225830 87.95516968]
[114.32084656 100.29798889]
[107.24449921 112.35688782]
[106.93244171 127.35363770]
[106.62038422 142.35038757]
[109.58550262 151.06015015]
[106.14260864 157.65501404]
[105.51863098 172.64202881]
[104.89465332 187.62904358]
[120.31851959 192.31274414]
[134.01272583 200.79551697]
[145.06118774 212.50347900]
[152.72650146 226.64717102]
[156.49909973 242.27485657]
[156.13114929 258.33657837]
[151.65283203 273.75460815]
[143.36993408 287.49588013]
[131.84298706 298.64105225]
[117.84931946 306.44622803]
[102.33065796 310.39239502]
[102.33065796 325.39239502]
[102.33065796 340.39239502]
[102.33065796 355.39239502]
[102.33065796 370.39239502]
[102.33065796 385.39239502]
[102.33065796 400.39239502]
[102.33065796 415.39239502]
[102.33065796 430.39239502]
[102.33065796 445.39239502]
[116.87054443 449.45370483]
[129.77491760 457.28823853]
[140.08621216 468.31454468]
[147.03923035 481.71447754]
[150.11802673 496.49365234]
[149.09413147 511.55532837]
[144.04353333 525.78186035]
[135.34100342 538.11749268]
[123.63234711 547.64691162]
[109.78640747 553.66296387]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[33 120]
[34 119]
[35 118]
[36 116]
[37 115]
[38 114]
[40 112]
[41 111]
[42 110]
[43 109]
[47 104]
[48 103]
[50 101]
[51 100]
[52 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
