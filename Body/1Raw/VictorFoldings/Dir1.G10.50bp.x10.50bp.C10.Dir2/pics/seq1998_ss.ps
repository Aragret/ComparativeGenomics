%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAUAGGCGAGGGGGGGGGGUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCGCAAGGGAAAGAUGAxxxxxxxxxxGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAUAGCCCCCCCCCCGUAGAGGCGA\
) } def
/len { sequence length } bind def

/coor [
[77.90581512 466.32067871]
[64.68561554 459.04821777]
[53.79881668 448.60119629]
[45.98768616 435.69195557]
[41.78480148 421.20065308]
[41.47673035 406.11529541]
[45.08447266 391.46447754]
[52.36204529 378.24710083]
[62.81325150 367.36431885]
[75.72551727 359.55819702]
[90.21845245 355.36090088]
[89.90639496 340.36413574]
[89.59433746 325.36740112]
[89.28227997 310.37063599]
[88.97022247 295.37387085]
[88.65817261 280.37713623]
[88.34611511 265.38037109]
[88.03405762 250.38362122]
[87.72200012 235.38687134]
[79.72160339 222.82331848]
[87.17012787 208.86515808]
[86.85807800 193.86840820]
[78.85767365 181.30485535]
[86.30620575 167.34671021]
[85.99414825 152.34996033]
[85.68209076 137.35319519]
[85.37003326 122.35644531]
[83.61283112 92.88421631]
[75.10174561 80.53264618]
[59.94852448 82.38557434]
[45.44068527 74.99509430]
[37.03177261 59.87829590]
[38.56272125 41.62722015]
[24.66016579 35.99526215]
[10.75760937 30.36330605]
[-4.93797779 32.35305786]
[-13.82900906 20.40321159]
[-27.73156548 14.77125549]
[-41.63412094 9.13929844]
[-52.00830460 20.21813965]
[-65.68578339 26.79773903]
[-80.81678009 27.98826027]
[-95.35495758 23.62869453]
[-107.33414459 14.30863762]
[-115.13426208 1.28855038]
[-117.70039368 -13.67070675]
[-114.68550110 -28.54601860]
[-106.49732971 -41.32561874]
[-94.24324799 -50.28117371]
[-79.58052826 -54.20151520]
[-64.49217987 -52.55645370]
[-51.01878357 -45.56846619]
[-40.98249817 -34.18262482]
[-35.74065399 -19.93876457]
[-36.00216293 -4.76325703]
[-22.09960747 0.86869955]
[-8.19705200 6.50065613]
[6.50413132 4.10806894]
[16.38956642 16.46075058]
[30.29212189 22.09270668]
[44.19467926 27.72466469]
[34.69414139 16.11691666]
[25.19360542 4.50916958]
[15.69306755 -7.09857798]
[2.12655902 -13.49778461]
[-8.33862782 -24.24394035]
[-14.37624168 -37.97518921]
[-15.22113991 -52.95137405]
[-10.76624680 -67.27457428]
[-1.57613051 -79.12960052]
[11.18454838 -87.01408386]
[25.89863396 -89.92882538]
[40.70141602 -87.50442505]
[53.71693802 -80.04814911]
[63.29575348 -68.50491333]
[68.22393799 -54.33758926]
[67.87694550 -39.34160233]
[62.29810715 -25.41635513]
[63.24382401 -10.44619846]
[64.18954468 4.52395916]
[65.13526154 19.49411774]
[71.48239136 5.90316582]
[77.82952118 -7.68778515]
[73.72467804 -23.19680786]
[83.40607452 -35.98938751]
[99.44697571 -36.25215149]
[109.54217529 -23.78353119]
[105.94749451 -8.14838219]
[91.42047119 -1.34065545]
[85.07334137 12.25029564]
[78.72621155 25.84124565]
[95.35084534 48.44258881]
[87.45331573 72.02156067]
[95.96440887 84.37313080]
[110.03592682 89.56854248]
[124.53152466 85.71138763]
[139.02711487 81.85422516]
[146.18951416 71.07675934]
[158.39076233 68.18737030]
[168.92788696 74.21037292]
[183.50057983 70.65561676]
[198.07328796 67.10085297]
[212.64598083 63.54608917]
[218.40705872 49.13811874]
[231.55456543 40.89659882]
[247.03303528 41.99057007]
[258.89065552 51.99937439]
[262.56796265 67.07442474]
[256.65093994 81.41905212]
[243.41479492 89.51745605]
[227.94911194 88.25563812]
[216.20074463 78.11879730]
[201.62805176 81.67355347]
[187.05534363 85.22831726]
[172.48263550 88.78308105]
[160.51004028 101.57592773]
[142.88427734 96.34982300]
[128.38868713 100.20698547]
[113.89308167 104.06414032]
[126.71411896 111.85009766]
[125.39183044 126.79170227]
[111.40269470 132.20503235]
[100.36679077 122.04438782]
[100.67884827 137.04113770]
[100.99090576 152.03790283]
[101.30295563 167.03465271]
[109.32567596 180.67086792]
[101.85482788 193.55635071]
[102.16688538 208.55311584]
[110.18960571 222.18933105]
[102.71875763 235.07481384]
[103.03080750 250.07156372]
[103.34286499 265.06832886]
[103.65492249 280.06506348]
[103.96697998 295.06182861]
[104.27903748 310.05859375]
[104.59109497 325.05532837]
[104.90314484 340.05209351]
[105.21520233 355.04882812]
[119.87019348 358.63961792]
[133.09600830 365.90185547]
[143.99087524 376.34045410]
[151.81196594 389.24368286]
[156.02604675 403.73175049]
[156.34576416 418.81683350]
[152.74934387 433.47042847]
[145.48197937 446.69345093]
[135.03916931 457.58428955]
[122.13294220 465.40039062]
[107.64324951 469.60888672]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[21 129]
[22 128]
[24 126]
[25 125]
[26 124]
[27 123]
[28 94]
[29 93]
[33 61]
[34 60]
[35 59]
[37 57]
[38 56]
[39 55]
[81 91]
[82 90]
[83 89]
[95 119]
[96 118]
[97 117]
[100 115]
[101 114]
[102 113]
[103 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
