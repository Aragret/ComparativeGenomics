%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUUACUUAGGGGGGGGGGUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCUCAAACCxxxxxxxxxxGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCAGUAAGUUCCCCCCCCCCGCAAUACUUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 361.58865356]
[71.19830322 355.57263184]
[59.48964310 346.04321289]
[50.78712082 333.70755005]
[45.73651886 319.48104858]
[44.71262741 304.41934204]
[47.79142761 289.64019775]
[54.74444962 276.24026489]
[65.05573273 265.21392822]
[77.96011353 257.37942505]
[92.50000000 253.31811523]
[92.50000000 238.31811523]
[92.50000000 223.31811523]
[92.50000000 208.31811523]
[92.50000000 193.31811523]
[92.50000000 178.31811523]
[92.50000000 163.31811523]
[92.50000000 148.31811523]
[92.50000000 133.31811523]
[92.50000000 118.31811523]
[83.85288239 113.97774506]
[77.76420593 105.55550385]
[76.12886047 94.56551361]
[61.55615997 98.12027740]
[48.58483505 111.14811707]
[31.94837952 105.65009308]
[17.45278358 109.50725555]
[2.95718598 113.36441040]
[-11.53841019 117.22157288]
[-22.76618004 129.17436218]
[-38.66748810 125.16431427]
[-42.88442993 109.31661987]
[-31.07897758 97.93402863]
[-15.39556980 102.72597504]
[-0.89997339 98.86881256]
[13.59562302 95.01165771]
[28.09121895 91.15449524]
[34.45779037 80.82134247]
[46.55286789 77.51557922]
[58.00139618 83.54757690]
[72.57409668 79.99281311]
[83.87310791 70.12709045]
[89.36013794 56.16669846]
[94.84716797 42.20631027]
[100.33419800 28.24592018]
[86.84020996 21.67733765]
[73.90318298 14.07027149]
[61.60288620 5.47162151]
[50.01515198 -4.06559801]
[39.21142960 -14.48258591]
[29.25832176 -25.71511650]
[20.21719742 -37.69393921]
[12.14379787 -50.34519577]
[5.08789873 -63.59088898]
[-0.90699708 -77.34934998]
[-5.80392885 -91.53575897]
[-9.57270527 -106.06264496]
[-12.19008923 -120.84044647]
[-13.63994503 -135.77804565]
[-13.91333199 -150.78335571]
[-13.00856590 -165.76387024]
[-10.93122482 -180.62719727]
[-7.69411564 -195.28172302]
[-3.31719685 -209.63710022]
[2.17254567 -223.60481262]
[8.74126530 -237.09872437]
[16.34846497 -250.03567505]
[24.94723892 -262.33587646]
[34.48457718 -273.92352295]
[44.90167618 -284.72714233]
[56.13430786 -294.68014526]
[68.11322021 -303.72113037]
[80.76456451 -311.79440308]
[94.01033020 -318.85015869]
[107.76885223 -324.84490967]
[121.95530701 -329.74169922]
[136.48223877 -333.51034546]
[151.26005554 -336.12756348]
[166.19767761 -337.57727051]
[181.20298767 -337.85049438]
[196.18348694 -336.94558716]
[211.04679871 -334.86810303]
[225.70129395 -331.63082886]
[240.05662537 -327.25378418]
[254.02427673 -321.76388550]
[267.51812744 -315.19503784]
[280.45498657 -307.58770752]
[292.75512695 -298.98880005]
[304.34265137 -289.45135498]
[315.14617920 -279.03414917]
[325.09906006 -267.80139160]
[334.13992310 -255.82238770]
[342.21307373 -243.17097473]
[349.26870728 -229.92514038]
[355.26330566 -216.16654968]
[360.15994263 -201.98004150]
[363.92843628 -187.45307922]
[366.54553223 -172.67521667]
[367.99505615 -157.73759460]
[368.26815796 -142.73226929]
[367.36306763 -127.75179291]
[365.28543091 -112.88849640]
[362.04803467 -98.23403168]
[357.67080688 -83.87875366]
[352.18078613 -69.91115570]
[345.61178589 -56.41736603]
[338.00433350 -43.48057556]
[329.40530396 -31.18054008]
[319.86773682 -19.59309959]
[309.45040894 -8.78969574]
[298.21755981 1.16306722]
[286.23846436 10.20382500]
[273.58697510 18.27683640]
[260.34106445 25.33233070]
[246.58241272 31.32680511]
[232.39585876 36.22330093]
[217.86885071 39.99163437]
[203.09097290 42.60856247]
[188.15332031 44.05796051]
[173.14801025 44.33089066]
[158.16752625 43.42566299]
[143.30426025 41.34786606]
[128.64982605 38.11030960]
[114.29458618 33.73295212]
[108.80755615 47.69334030]
[103.32052612 61.65373230]
[97.83349609 75.61412048]
[113.57780457 81.05278015]
[121.51074982 94.76763916]
[118.67560577 109.52862549]
[107.50000000 118.31811523]
[107.50000000 133.31811523]
[107.50000000 148.31811523]
[107.50000000 163.31811523]
[107.50000000 178.31811523]
[107.50000000 193.31811523]
[107.50000000 208.31811523]
[107.50000000 223.31811523]
[107.50000000 238.31811523]
[107.50000000 253.31811523]
[122.03988647 257.37942505]
[134.94427490 265.21392822]
[145.25555420 276.24026489]
[152.20857239 289.64019775]
[155.28736877 304.41934204]
[154.26348877 319.48104858]
[149.21287537 333.70755005]
[140.51036072 346.04321289]
[128.80169678 355.57263184]
[114.95575714 361.58865356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 41]
[24 40]
[26 37]
[27 36]
[28 35]
[29 34]
[42 127]
[43 126]
[44 125]
[45 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
