%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUCAGCCAUGGGGGGGGGGUUUACCUCACCCCCACUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAAxxxxxxxxxxUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCCCCCCCCCCCUCAGCCAU\
) } def
/len { sequence length } bind def

/coor [
[83.71837616 387.18667603]
[70.22949982 380.45513916]
[58.74399948 370.69058228]
[49.92963028 358.46069336]
[44.29884720 344.47650146]
[42.17901993 329.55102539]
[43.69338989 314.55203247]
[48.75391006 300.35150146]
[57.06637573 287.77508545]
[68.14750671 277.55392456]
[81.35306549 270.28228760]
[95.91528320 266.38293457]
[95.60730743 251.38609314]
[95.29933167 236.38925171]
[94.99135590 221.39241028]
[94.68338013 206.39556885]
[94.37539673 191.39874268]
[94.06742096 176.40190125]
[93.75944519 161.40505981]
[93.45146942 146.40821838]
[93.14348602 131.41139221]
[76.35913086 121.78981781]
[68.13493347 104.27835083]
[71.44879913 85.21772003]
[85.10080719 71.50963593]
[81.44210052 56.96268082]
[77.78339386 42.41572571]
[74.12468719 27.86877251]
[59.81091309 26.72309875]
[46.57401657 21.21268463]
[35.70824051 11.89071369]
[28.27151489 -0.31766650]
[24.98248100 -14.20714951]
[26.15105247 -28.41126442]
[31.64926720 -41.53681183]
[40.92514420 -52.30051422]
[53.05808640 -59.65447617]
[49.69882584 -74.27348328]
[46.33956909 -88.89248657]
[42.98030853 -103.51149750]
[39.62104797 -118.13050079]
[35.46235275 -115.64239502]
[30.39037132 -114.19163513]
[24.65205765 -114.00682831]
[18.54369354 -115.26037598]
[4.98179770 -121.66935730]
[-10.54576302 -117.63520050]
[-23.29410744 -127.37477112]
[-23.48379707 -143.41670227]
[-10.96931744 -153.45500183]
[4.64929342 -149.78913879]
[11.39077377 -135.23124695]
[24.95266914 -128.82228088]
[37.70592499 -136.71875000]
[38.01390457 -151.71559143]
[38.32188034 -166.71243286]
[30.86955643 -180.66856384]
[38.86653900 -193.23428345]
[39.17451859 -208.23112488]
[31.09297371 -195.59432983]
[20.52678108 -184.94746399]
[7.95180607 -176.77006531]
[-6.06560707 -171.43038940]
[-20.89415359 -169.16893005]
[-35.86600113 -170.08753967]
[-50.30685425 -174.14483643]
[-63.56634140 -181.15811157]
[-75.04729462 -190.81149292]
[-84.23263550 -202.67022705]
[-90.70869446 -216.20021057]
[-94.18379974 -230.79211426]
[-94.50144958 -245.78875732]
[-91.64733124 -260.51470947]
[-85.74998474 -274.30679321]
[-77.07501221 -286.54382324]
[-66.01311493 -296.67468262]
[-53.06248856 -304.24313354]
[-38.80638504 -308.90826416]
[-23.88686371 -310.45999146]
[-8.97585869 -308.82846069]
[5.25508213 -304.08712769]
[18.16503716 -296.44952393]
[29.17257881 -286.25961304]
[37.78195572 -273.97634888]
[43.60543060 -260.15292358]
[46.38072968 -245.41189575]
[45.98321533 -230.41987610]
[54.13988113 -243.00831604]
[54.44050217 -259.40469360]
[68.91952515 -267.10470581]
[82.68216705 -258.18722534]
[81.57061005 -241.82577515]
[66.72832489 -234.85165405]
[58.57165527 -222.26321411]
[54.17135620 -207.92314148]
[53.86337662 -192.92631531]
[61.33773422 -180.04286194]
[53.31872177 -166.40444946]
[53.01074219 -151.40762329]
[52.70276642 -136.41078186]
[54.24005890 -121.48976135]
[57.59931564 -106.87075806]
[60.95857620 -92.25174713]
[64.31783295 -77.63274384]
[67.67709351 -63.01373291]
[83.29794312 -61.28520966]
[97.41143799 -54.31024170]
[108.30980682 -42.91241074]
[114.66732788 -28.45169830]
[115.70162201 -12.66223240]
[111.26985931 2.55567169]
[101.88817596 15.36421680]
[88.67164612 24.21006584]
[92.33035278 38.75701904]
[95.98905945 53.30397415]
[99.64775848 67.85092926]
[112.97632599 70.58398438]
[123.98099518 78.58508301]
[130.69097900 90.42131805]
[131.90458679 103.97297668]
[145.94656372 109.24771881]
[162.02766418 106.03364563]
[172.64692688 118.53016663]
[166.88018799 133.88192749]
[150.65974426 136.29635620]
[140.67181396 123.28969574]
[126.62983704 118.01495361]
[122.97414398 122.49167633]
[118.57600403 126.24154663]
[113.57755280 129.14338684]
[108.14032745 131.10340881]
[108.44830322 146.10025024]
[108.75627899 161.09707642]
[109.06426239 176.09391785]
[109.37223816 191.09075928]
[109.68021393 206.08760071]
[109.98818970 221.08444214]
[110.29617310 236.08126831]
[110.60414886 251.07810974]
[110.91212463 266.07495117]
[125.62216187 269.37316895]
[139.11511230 276.09652710]
[150.60653687 285.85412598]
[159.42831421 298.07867432]
[165.06758118 312.05944824]
[167.19645691 326.98364258]
[165.69117737 341.98355103]
[160.63926697 356.18713379]
[152.33442688 368.76858521]
[141.25949097 378.99645996]
[128.05834961 386.27612305]
[113.49849701 390.18429565]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[25 116]
[26 115]
[27 114]
[28 113]
[37 105]
[38 104]
[39 103]
[40 102]
[41 101]
[45 53]
[46 52]
[54 100]
[55 99]
[56 98]
[58 96]
[59 95]
[87 94]
[88 93]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
