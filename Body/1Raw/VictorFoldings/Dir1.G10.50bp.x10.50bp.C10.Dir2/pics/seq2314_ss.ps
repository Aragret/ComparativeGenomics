%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAAAAUUUGGGGGGGGGGAACACCCAUAGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGxxxxxxxxxxAUGCAAACAGUACCUAACAAACCCACAGGUCCUAAACUACCAAACCUGCACCCCCCCCCCUUAAAAAUUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 404.69818115]
[71.19830322 398.68215942]
[59.48964310 389.15274048]
[50.78712082 376.81707764]
[45.73651886 362.59054565]
[44.71262741 347.52886963]
[47.79142761 332.74972534]
[54.74444962 319.34979248]
[65.05573273 308.32345581]
[77.96011353 300.48895264]
[92.50000000 296.42764282]
[92.50000000 281.42764282]
[92.50000000 266.42764282]
[92.50000000 251.42764282]
[92.50000000 236.42764282]
[92.50000000 221.42764282]
[92.50000000 206.42764282]
[92.50000000 191.42764282]
[92.50000000 176.42764282]
[92.50000000 161.42764282]
[80.34747314 158.68034363]
[68.99154663 153.55445862]
[58.89254379 146.25776672]
[50.45981216 137.08604431]
[44.03517532 126.41104126]
[39.87905121 114.66548157]
[38.15990829 102.32545471]
[38.94743347 89.89117432]
[42.20969772 77.86664581]
[47.81446838 66.73928833]
[55.53456497 56.96014023]
[65.05705261 48.92559814]
[58.15005112 35.61043930]
[51.24305344 22.29528427]
[44.33605194 8.98012924]
[28.60533333 -0.53429615]
[30.00416183 -17.99978256]
[22.82165337 -31.16836548]
[7.53366137 -31.64222908]
[-5.37924433 -39.65182877]
[-12.50192738 -52.96099091]
[-12.00978470 -67.94811249]
[-4.13507223 -80.59146881]
[-11.31758118 -93.76004791]
[-18.50008965 -106.92863464]
[-33.79643631 -102.50325775]
[-49.68538666 -101.55984497]
[-65.38469696 -104.14188385]
[-80.12213135 -110.11936188]
[-93.17340088 -119.19532776]
[-103.89781189 -130.92063904]
[-111.76968384 -144.71615601]
[-116.40412903 -159.90139771]
[-117.57586670 -175.72808838]
[-115.23016357 -191.41700745]
[-109.48540497 -206.19635010]
[-100.62710571 -219.33978271]
[-89.09372711 -230.20199585]
[-96.81781006 -243.06039429]
[-104.54189301 -255.91880798]
[-119.13856506 -263.39337158]
[-119.69337463 -279.78314209]
[-105.63558197 -288.22769165]
[-91.42664337 -280.04000854]
[-91.68349457 -263.64288330]
[-83.95941162 -250.78448486]
[-76.23532104 -237.92608643]
[-62.90520096 -242.61790466]
[-48.90703201 -244.59353638]
[-34.78874207 -243.77359009]
[-21.10336494 -240.18814087]
[-8.38737392 -233.97563171]
[2.86033821 -225.37753296]
[12.19803810 -214.72892761]
[19.25849915 -202.44552612]
[23.76344299 -189.00737000]
[25.53450775 -174.94004822]
[24.50030899 -160.79426575]
[20.69931221 -147.12414551]
[14.27840996 -134.46559143]
[5.48724127 -123.31526947]
[-5.33150768 -114.11113739]
[1.85100138 -100.94255829]
[9.03351021 -87.77397919]
[23.92696381 -87.54900360]
[36.79372787 -79.84819794]
[44.12681961 -66.65380096]
[43.86930847 -51.46069717]
[35.99023438 -38.35087585]
[43.17274475 -25.18229103]
[54.72032166 -21.44587708]
[60.79825592 -10.47875977]
[57.65121078 2.07313085]
[64.55820465 15.38828659]
[71.46520996 28.70344162]
[78.37220764 42.01859665]
[90.09250641 38.91443634]
[102.19311523 38.15507507]
[114.20954132 39.76966476]
[125.68052673 43.69622421]
[136.16574097 49.78403473]
[145.26272583 57.79940796]
[152.62228394 67.43467712]
[157.96189880 78.31997681]
[161.07661438 90.03748322]
[161.84687805 102.13739777]
[176.66462708 104.46850586]
[191.48239136 106.79960632]
[206.30015564 109.13071442]
[221.11790466 111.46181488]
[229.36343384 98.65825653]
[242.10733032 90.32080841]
[257.14163208 87.89398956]
[271.86157227 91.79825592]
[283.71682739 101.35717773]
[290.65338135 114.91461182]
[291.46948242 130.12164307]
[286.02368164 144.34356689]
[275.25952148 155.11634827]
[261.04196167 160.57354736]
[245.83427429 159.76965332]
[232.27128601 152.84396362]
[222.70286560 140.99638367]
[218.78680420 126.27957153]
[203.96903992 123.94847107]
[189.15129089 121.61737061]
[174.33352661 119.28626251]
[159.51577759 116.95516205]
[148.57791138 138.33784485]
[130.32272339 153.94567871]
[107.50000000 161.42764282]
[107.50000000 176.42764282]
[107.50000000 191.42764282]
[107.50000000 206.42764282]
[107.50000000 221.42764282]
[107.50000000 236.42764282]
[107.50000000 251.42764282]
[107.50000000 266.42764282]
[107.50000000 281.42764282]
[107.50000000 296.42764282]
[122.03988647 300.48895264]
[134.94427490 308.32345581]
[145.25555420 319.34979248]
[152.20857239 332.74972534]
[155.28736877 347.52886963]
[154.26348877 362.59054565]
[149.21287537 376.81707764]
[140.51036072 389.15274048]
[128.80169678 398.68215942]
[114.95575714 404.69818115]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[32 96]
[33 95]
[34 94]
[35 93]
[37 90]
[38 89]
[43 84]
[44 83]
[45 82]
[58 67]
[59 66]
[60 65]
[106 128]
[107 127]
[108 126]
[109 125]
[110 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
