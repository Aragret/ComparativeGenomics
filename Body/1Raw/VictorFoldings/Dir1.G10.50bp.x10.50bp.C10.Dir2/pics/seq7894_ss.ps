%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAUCUUUGGGGGGGGGGGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUCUAGAGxxxxxxxxxxCAGUCUUGUAAACCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGACCCCCCCCCCAAAAGUCUUU\
) } def
/len { sequence length } bind def

/coor [
[52.67178345 459.60577393]
[38.18209457 455.39730835]
[25.27586365 447.58117676]
[14.83306313 436.69033813]
[7.56569862 423.46734619]
[3.96927238 408.81372070]
[4.28899431 393.72863770]
[8.50306416 379.24057007]
[16.32416153 366.33737183]
[27.21903038 355.89877319]
[40.44483948 348.63650513]
[55.09983063 345.04574585]
[55.41188812 330.04898071]
[55.72394180 315.05224609]
[56.03599930 300.05548096]
[56.34805679 285.05871582]
[56.66011047 270.06198120]
[56.97216797 255.06521606]
[57.28422546 240.06846619]
[57.59627914 225.07171631]
[57.90833664 210.07495117]
[48.95129395 205.61537170]
[42.74079514 196.51031494]
[41.63874054 184.52032471]
[26.77569389 186.54266357]
[11.91264725 188.56498718]
[-2.95039964 190.58732605]
[-17.81344604 192.60966492]
[-32.67649460 194.63200378]
[-38.41818619 208.87730408]
[-50.52317047 218.33059692]
[-65.73526764 220.44900513]
[-79.96250153 214.66268921]
[-89.37780762 202.52813721]
[-91.44853210 187.30947876]
[-85.61764526 173.10044861]
[-73.45363617 163.72322083]
[-58.22856140 161.70021057]
[-44.03788376 167.57560730]
[-34.69882965 179.76895142]
[-19.83578110 177.74661255]
[-4.97273397 175.72428894]
[9.89031315 173.70195007]
[24.75335884 171.67961121]
[39.61640549 169.65727234]
[25.02796555 166.16766357]
[14.92097664 155.08395386]
[12.78813553 140.23635864]
[19.36649323 126.75580597]
[32.38275146 119.30080414]
[47.33884811 120.44760132]
[59.06637192 129.79988098]
[63.51261139 144.12576294]
[59.14086914 158.47491455]
[68.40582275 146.67826843]
[77.67076874 134.88163757]
[86.93572235 123.08499146]
[81.29859161 82.47120667]
[78.50627136 67.73339844]
[63.45514679 66.77709198]
[49.11496353 62.10697937]
[36.38715363 54.01663208]
[26.07180023 43.01462173]
[18.81733322 29.79253578]
[15.07977486 15.18153000]
[15.09407139 0.10006431]
[18.85932541 -14.50382805]
[26.13884735 -27.71213531]
[36.47504425 -38.69457245]
[49.21816635 -46.76076889]
[63.56718063 -51.40368271]
[78.62008667 -52.33145523]
[93.43065643 -49.48576736]
[107.06787109 -43.04549789]
[118.67449951 -33.41548538]
[127.52092743 -21.20108795]
[133.05107117 -7.17010927]
[134.91728210 7.79545307]
[133.00227356 22.75484848]
[127.42640686 36.76771927]
[118.54019165 48.95320511]
[106.90222168 58.54531097]
[93.24407196 64.94107819]
[96.03639984 79.67887878]
[109.62734985 86.02600861]
[122.72050476 78.70690155]
[135.81365967 71.38780212]
[148.90681458 64.06869507]
[134.00088501 62.39146042]
[121.23523712 54.51502228]
[113.05015564 41.94503784]
[111.01030731 27.08438492]
[115.50561523 12.77382374]
[125.67677307 1.74895883]
[139.57945251 -3.88269734]
[154.55601501 -3.04459834]
[167.74356079 4.10304499]
[176.62113953 16.19388962]
[179.49172974 30.91665268]
[175.80657959 45.45692825]
[166.27131653 57.03429413]
[180.76690674 53.17713547]
[195.26251221 49.31997681]
[209.75810242 45.46281815]
[224.25370789 41.60565567]
[238.00543213 31.68969917]
[251.34072876 42.15900040]
[244.97215271 57.87133789]
[228.11085510 56.10125351]
[213.61526489 59.95841217]
[199.11967468 63.81557465]
[184.62406921 67.67272949]
[170.12847900 71.52989197]
[156.22592163 77.16184998]
[143.13276672 84.48095703]
[130.03961182 91.80005646]
[116.94645691 99.11916351]
[118.19332886 114.06725311]
[132.31813049 119.11600494]
[148.34559631 115.64432526]
[159.16401672 127.96884918]
[153.64431763 143.41116333]
[137.46472168 146.08554077]
[127.26937866 133.24081421]
[113.14457703 128.19206238]
[98.73236084 132.34994507]
[89.46740723 144.14657593]
[80.20246124 155.94322205]
[70.93750763 167.73986816]
[87.96250916 190.69757080]
[72.90509033 210.38700867]
[72.59303284 225.38375854]
[72.28097534 240.38052368]
[71.96892548 255.37727356]
[71.65686798 270.37402344]
[71.34481049 285.37078857]
[71.03275299 300.36752319]
[70.72069550 315.36428833]
[70.40863800 330.36105347]
[70.09658813 345.35778809]
[84.58952332 349.55508423]
[97.50178528 357.36123657]
[107.95298767 368.24398804]
[115.23056030 381.46139526]
[118.83830261 396.11221313]
[118.53023529 411.19754028]
[114.32735443 425.68887329]
[106.51622009 438.59811401]
[95.62941742 449.04510498]
[82.40921783 456.31759644]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[54 129]
[55 128]
[56 127]
[57 126]
[58 84]
[59 83]
[85 117]
[86 116]
[87 115]
[88 114]
[101 113]
[102 112]
[103 111]
[104 110]
[105 109]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
