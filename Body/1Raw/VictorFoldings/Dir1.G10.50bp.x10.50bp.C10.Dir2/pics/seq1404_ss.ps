%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAAACCUCGGGGGGGGGGAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUxxxxxxxxxxACAAAAAACAAUAGCCUCAUCAUCCCCACCAUCAUAGCCACCAUCACCCUCCCCCCCCCCCCUUAACCUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 409.78372192]
[71.19830322 403.76770020]
[59.48964310 394.23828125]
[50.78712082 381.90261841]
[45.73651886 367.67608643]
[44.71262741 352.61441040]
[47.79142761 337.83526611]
[54.74444962 324.43533325]
[65.05573273 313.40899658]
[77.96011353 305.57449341]
[92.50000000 301.51318359]
[92.50000000 286.51318359]
[92.50000000 271.51318359]
[92.50000000 256.51318359]
[92.50000000 241.51316833]
[92.50000000 226.51316833]
[92.50000000 211.51316833]
[92.50000000 196.51316833]
[92.50000000 181.51316833]
[92.50000000 166.51316833]
[92.50000000 151.51316833]
[71.92402649 145.48284912]
[55.02497482 131.38752747]
[44.89181519 111.21984100]
[30.24831200 114.47066498]
[15.60481167 117.72148895]
[0.96130985 120.97231293]
[-3.57637143 135.64558411]
[-14.85365677 146.07240295]
[-29.83701324 149.44798279]
[-44.49599457 144.86433411]
[-54.88740540 133.55442810]
[-58.21601105 118.56056213]
[-53.58643341 103.91601562]
[-42.24400330 93.56011200]
[-27.23977852 90.27851868]
[-12.60982132 94.95397949]
[-2.28951597 106.32881165]
[12.35398579 103.07798767]
[26.99748611 99.82716370]
[41.64098740 96.57633209]
[44.43331146 81.83853149]
[31.99387169 73.45639038]
[19.55443192 65.07424164]
[7.11499166 56.69210052]
[-5.32444859 48.30995560]
[-18.15357971 50.00325775]
[-28.35499954 42.71285248]
[-30.74848366 30.81417465]
[-43.01085281 22.17505836]
[-59.38322067 21.23826790]
[-66.51544189 6.47129774]
[-57.07049942 -6.93486118]
[-40.76454163 -5.18910122]
[-34.37173462 9.91269016]
[-22.10936737 18.55180550]
[-4.59838533 19.15632248]
[3.05769467 35.87051773]
[15.49713516 44.25265884]
[27.93657494 52.63480377]
[40.37601471 61.01694489]
[52.81545639 69.39908600]
[64.99998474 57.05341339]
[80.15884399 49.16938782]
[96.75136566 46.36903000]
[113.14482880 48.76661301]
[127.77498627 55.97265625]
[137.52264404 44.57163239]
[147.27029419 33.17061234]
[137.22352600 22.00291634]
[128.72042847 9.61936092]
[121.90651703 -3.76815438]
[116.89837646 -17.93055153]
[113.78170013 -32.62549591]
[112.60981750 -47.60153198]
[113.40279388 -62.60240555]
[116.14704895 -77.37142944]
[120.79562378 -91.65589142]
[127.26898193 -105.21135712]
[135.45634460 -117.80587769]
[145.21763611 -129.22395325]
[156.38581848 -139.27018738]
[168.76977539 -147.77268982]
[182.15760803 -154.58596802]
[196.32025146 -159.59342957]
[211.01533508 -162.70941162]
[225.99143982 -163.88056946]
[240.99226379 -163.08688354]
[255.76116943 -160.34193420]
[270.04541016 -155.69267273]
[283.60055542 -149.21867371]
[296.19470215 -141.03070068]
[307.61230469 -131.26887512]
[317.65798950 -120.10021973]
[326.15991211 -107.71585083]
[332.97256470 -94.32769012]
[337.97933960 -80.16481781]
[341.09463501 -65.46957397]
[342.26507568 -50.49342728]
[341.47067261 -35.49262619]
[338.72500610 -20.72386360]
[334.07507324 -6.43984890]
[327.60043335 7.11500072]
[319.41186523 19.70874214]
[309.64950562 31.12588310]
[298.48034668 41.17105484]
[286.09558105 49.67237854]
[272.70709229 56.48438263]
[258.54397583 61.49050522]
[243.84860229 64.60507965]
[228.87239075 65.77481842]
[213.87162781 64.97970581]
[199.10299683 62.23334503]
[184.81921387 57.58272934]
[171.26466370 51.10743332]
[158.67131042 42.91826630]
[148.92366028 54.31928635]
[139.17601013 65.72030640]
[144.64685059 73.23219299]
[148.69488525 81.59712219]
[151.19108582 90.54852295]
[152.05590820 99.80112457]
[151.26181030 109.06005859]
[148.83407593 118.03027344]
[144.85008240 126.42588806]
[139.43679810 133.97935486]
[132.76672363 140.44995117]
[125.05242920 145.63148499]
[116.53976440 149.35882568]
[107.50000000 151.51316833]
[107.50000000 166.51316833]
[107.50000000 181.51316833]
[107.50000000 196.51316833]
[107.50000000 211.51316833]
[107.50000000 226.51316833]
[107.50000000 241.51316833]
[107.50000000 256.51318359]
[107.50000000 271.51318359]
[107.50000000 286.51318359]
[107.50000000 301.51318359]
[122.03988647 305.57449341]
[134.94427490 313.40899658]
[145.25555420 324.43533325]
[152.20857239 337.83526611]
[155.28736877 352.61441040]
[154.26348877 367.67608643]
[149.21287537 381.90261841]
[140.51036072 394.23828125]
[128.80169678 403.76770020]
[114.95575714 409.78372192]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 41]
[25 40]
[26 39]
[27 38]
[42 62]
[43 61]
[44 60]
[45 59]
[46 58]
[49 56]
[50 55]
[67 118]
[68 117]
[69 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
