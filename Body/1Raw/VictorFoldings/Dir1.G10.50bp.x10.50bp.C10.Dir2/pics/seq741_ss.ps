%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUACCCGGGGGGGGGGCGAACCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUxxxxxxxxxxUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCUAGCCCCCCCCCCCCCCAAACCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 407.73635864]
[71.19830322 401.72030640]
[59.48964310 392.19091797]
[50.78712082 379.85522461]
[45.73651886 365.62872314]
[44.71262741 350.56704712]
[47.79142761 335.78787231]
[54.74444962 322.38793945]
[65.05573273 311.36160278]
[77.96011353 303.52709961]
[92.50000000 299.46578979]
[92.50000000 284.46578979]
[92.50000000 269.46578979]
[92.50000000 254.46578979]
[92.50000000 239.46578979]
[92.50000000 224.46578979]
[92.50000000 209.46578979]
[92.50000000 194.46578979]
[92.50000000 179.46578979]
[92.50000000 164.46578979]
[92.50000000 149.46578979]
[85.04924774 147.74504089]
[77.94776154 144.90893555]
[71.36142731 141.02372742]
[65.44411469 136.18017578]
[60.33404922 130.49142456]
[56.15061569 124.09037018]
[52.99153519 117.12654114]
[50.93060684 109.76262665]
[50.01597595 102.17065430]
[50.26901245 94.52796936]
[35.77341461 90.67080688]
[21.27781868 86.81365204]
[6.78222132 82.95648956]
[-1.22432745 95.77782440]
[-12.65541172 105.66831207]
[-26.49458694 111.74849701]
[-41.51128006 113.47772980]
[-56.37022400 110.70226288]
[-69.75016785 103.66886902]
[-80.46137238 93.00296783]
[-87.55140686 79.65295410]
[-90.38983154 64.80590820]
[-88.72425842 49.78202057]
[-82.70278168 35.91720200]
[-72.86083984 24.44429970]
[-60.07355499 16.38348007]
[-45.47797394 12.45150566]
[-30.37192154 12.99800491]
[-16.09862328 17.97438240]
[-3.92724657 26.93814278]
[5.05993652 39.09223557]
[10.06379223 53.35592270]
[10.63938046 68.46089172]
[25.13497734 72.31805420]
[39.63057327 76.17521667]
[54.12617111 80.03237152]
[66.40644836 62.92457199]
[84.63855743 52.38550186]
[105.59229279 50.28239059]
[125.55522919 56.98785400]
[135.06358337 45.38651276]
[144.57194519 33.78517151]
[154.08030701 22.18383026]
[163.58865356 10.58248901]
[173.09701538 -1.01885271]
[158.95251465 3.97444367]
[144.01699829 5.36375141]
[129.19418335 3.06500506]
[115.38098907 -2.78270125]
[103.41323090 -11.82553005]
[94.01506042 -23.51631355]
[87.75514984 -37.14765549]
[85.01227570 -51.89474487]
[85.95240784 -66.86525726]
[90.51866150 -81.15334320]
[98.43473053 -93.89444733]
[109.22164154 -104.31762695]
[122.22666931 -111.79219055]
[136.66291809 -115.86585999]
[151.65686035 -116.29214478]
[166.30123901 -113.04524994]
[179.70993042 -106.32164001]
[191.07159424 -96.52815247]
[199.69877625 -84.25737762]
[205.06942749 -70.25180817]
[206.85859680 -55.35889053]
[204.95800781 -40.47978592]
[199.48266602 -26.51480484]
[190.76522827 -14.31040573]
[204.54760742 -20.23036766]
[218.32998657 -26.15033150]
[232.11238098 -32.07029343]
[235.64155579 -47.06533051]
[247.18861389 -56.99100113]
[262.18869019 -58.19981384]
[274.87246704 -50.43709564]
[288.65484619 -56.35705566]
[302.43722534 -62.27701950]
[316.21963501 -68.19698334]
[321.84378052 -82.96669769]
[336.29840088 -89.35726166]
[351.00781250 -83.57727814]
[357.24520874 -69.05589294]
[351.31002808 -54.40839767]
[336.72351074 -48.32488632]
[322.13958740 -54.41460037]
[308.35720825 -48.49464035]
[294.57482910 -42.57467651]
[280.79244995 -36.65471268]
[277.68984985 -22.11125946]
[266.48590088 -12.06461239]
[251.33734131 -10.52368450]
[238.03233337 -18.28791237]
[224.24995422 -12.36795044]
[210.46757507 -6.44798708]
[196.68519592 -0.52802402]
[184.69836426 8.48950577]
[175.19000244 20.09084702]
[165.68164062 31.69218826]
[156.17327881 43.29352951]
[146.66493225 54.89487076]
[137.15657043 66.49621582]
[145.55914307 79.32442474]
[149.68145752 94.09510040]
[149.13621521 109.42053986]
[143.97465515 123.86092377]
[134.68170166 136.05958557]
[122.13042450 144.87046814]
[107.50000000 149.46578979]
[107.50000000 164.46578979]
[107.50000000 179.46578979]
[107.50000000 194.46578979]
[107.50000000 209.46578979]
[107.50000000 224.46578979]
[107.50000000 239.46578979]
[107.50000000 254.46578979]
[107.50000000 269.46578979]
[107.50000000 284.46578979]
[107.50000000 299.46578979]
[122.03988647 303.52709961]
[134.94427490 311.36160278]
[145.25555420 322.38793945]
[152.20857239 335.78787231]
[155.28736877 350.56704712]
[154.26348877 365.62872314]
[149.21287537 379.85522461]
[140.51036072 392.19091797]
[128.80169678 401.72030640]
[114.95575714 407.73635864]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[31 57]
[32 56]
[33 55]
[34 54]
[61 123]
[62 122]
[63 121]
[64 120]
[65 119]
[66 118]
[90 117]
[91 116]
[92 115]
[93 114]
[97 110]
[98 109]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
