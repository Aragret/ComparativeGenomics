%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUGGCCAUGGGGGGGGGGAAUAUGAUUUAUCUCCACACUAGCAGAGACCAACCGAACCCCCUUCGACCxxxxxxxxxxCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCACCCCCCCCCCCCUUGGCUAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 358.25552368]
[71.19830322 352.23950195]
[59.48964310 342.71008301]
[50.78712082 330.37442017]
[45.73651886 316.14788818]
[44.71262741 301.08621216]
[47.79142761 286.30703735]
[54.74444962 272.90710449]
[65.05573273 261.88076782]
[77.96011353 254.04627991]
[92.50000000 249.98495483]
[92.50000000 234.98495483]
[92.50000000 219.98495483]
[92.50000000 204.98495483]
[92.50000000 189.98495483]
[92.50000000 174.98495483]
[92.50000000 159.98495483]
[92.50000000 144.98495483]
[92.50000000 129.98495483]
[92.50000000 114.98496246]
[87.59844971 100.80840302]
[78.33349609 89.01176453]
[69.06855011 77.21511841]
[59.80360031 65.41847992]
[50.53865051 53.62184143]
[41.27370453 41.82520294]
[32.00875473 30.02856064]
[22.74380493 18.23192215]
[13.47885513 6.43528175]
[1.87751353 -3.07307696]
[-6.63331079 14.92153835]
[-32.16580963 22.80471230]
[-47.06771088 21.09202194]
[-61.96961212 19.37933350]
[-76.87151337 17.66664314]
[-85.95487976 30.05163574]
[-100.02025604 36.22097397]
[-115.28412628 34.51514435]
[-127.64058685 25.39300156]
[-133.76580811 11.30835629]
[-132.01214600 -3.95009160]
[-122.85131073 -16.27789688]
[-108.74753571 -22.35894012]
[-93.49465942 -20.55745316]
[-81.19563293 -11.35802650]
[-75.15882874 2.76474094]
[-60.25692368 4.47743082]
[-45.35502243 6.19012022]
[-30.45311928 7.90281010]
[-26.59107590 1.47360897]
[-41.20701218 -1.89899123]
[-42.51602554 -16.84176445]
[-28.70910263 -22.70425987]
[-18.86699104 -11.38479328]
[-15.00494862 -17.81399536]
[-23.51603889 -30.16556740]
[-32.02713013 -42.51713943]
[-40.53821945 -54.86871338]
[-55.99235535 -59.17560196]
[-62.12770081 -73.99913025]
[-54.23774719 -87.96796417]
[-38.37498856 -90.36640167]
[-26.70797920 -79.35456848]
[-28.18664742 -63.37980270]
[-19.67555618 -51.02822876]
[-11.16446686 -38.67665863]
[-2.65337634 -26.32508469]
[8.64562798 -16.45936203]
[0.71056008 -29.18864632]
[-3.56933022 -43.56510544]
[-3.88829684 -58.56171417]
[-0.22355330 -73.10714722]
[7.16309929 -86.16231537]
[17.74397469 -96.79457855]
[30.76319695 -104.24440002]
[45.29070282 -107.97957611]
[60.28868103 -107.73327637]
[74.68570709 -103.52308655]
[87.45329285 -95.64978790]
[97.67934418 -84.67582703]
[104.63333130 -71.38515472]
[107.81848907 -56.72723007]
[107.00727081 -41.74917984]
[102.25762939 -27.52100754]
[93.90885925 -15.05914211]
[82.55738831 -5.25382900]
[69.01414490 1.19446051]
[54.24661636 3.82507467]
[39.30976868 2.45008850]
[25.27549553 -2.82966757]
[34.54044342 8.96697235]
[43.80539322 20.76361275]
[53.07034302 32.56025314]
[62.33529282 44.35689163]
[71.60024261 56.15353394]
[80.86518860 67.95017242]
[90.13014221 79.74681091]
[99.39508820 91.54344940]
[104.07642365 85.52352142]
[112.55738068 82.42427826]
[123.17089844 83.99333191]
[138.17008972 83.83729553]
[153.16928101 83.68125916]
[157.45912170 69.18682098]
[165.83206177 56.60170746]
[177.54360962 47.04497528]
[191.55236816 41.36640167]
[206.61268616 40.07092285]
[221.38540649 43.27373123]
[234.55696106 50.69003677]
[244.95613098 61.66038513]
[251.65824890 75.20929718]
[254.06735229 90.13201904]
[251.96922302 105.10163116]
[245.55043030 118.78704834]
[235.38172913 129.97135925]
[222.36730957 137.66007996]
[207.66441345 141.16952515]
[192.58039856 140.18763733]
[178.45654297 134.80172729]
[166.54872131 125.49070740]
[157.91575623 113.08250427]
[153.32531738 98.68045044]
[138.32612610 98.83648682]
[123.32693481 98.99252319]
[137.76478577 103.06052399]
[144.49929810 116.46374512]
[139.14596558 130.47593689]
[125.19007874 135.97442627]
[111.71768951 129.37936401]
[107.50000000 114.98496246]
[107.50000000 129.98495483]
[107.50000000 144.98495483]
[107.50000000 159.98495483]
[107.50000000 174.98495483]
[107.50000000 189.98495483]
[107.50000000 204.98495483]
[107.50000000 219.98495483]
[107.50000000 234.98495483]
[107.50000000 249.98495483]
[122.03988647 254.04627991]
[134.94427490 261.88076782]
[145.25555420 272.90710449]
[152.20857239 286.30703735]
[155.28736877 301.08621216]
[154.26348877 316.14788818]
[149.21287537 330.37442017]
[140.51036072 342.71008301]
[128.80169678 352.23950195]
[114.95575714 358.25552368]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 98]
[22 97]
[23 96]
[24 95]
[25 94]
[26 93]
[27 92]
[28 91]
[29 90]
[30 68]
[32 49]
[33 48]
[34 47]
[35 46]
[55 67]
[56 66]
[57 65]
[58 64]
[101 125]
[102 124]
[103 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
