%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACAACACGGGGGGGGGGUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCxxxxxxxxxxAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACCCCCCCCCCCUCACAACAC\
) } def
/len { sequence length } bind def

/coor [
[65.73105621 407.34680176]
[51.88511276 401.33078003]
[40.17645264 391.80136108]
[31.47392845 379.46569824]
[26.42332649 365.23916626]
[25.39943504 350.17749023]
[28.47823334 335.39831543]
[35.43125534 321.99838257]
[45.74253845 310.97204590]
[58.64691925 303.13754272]
[73.18680573 299.07623291]
[73.18680573 284.07623291]
[73.18680573 269.07623291]
[73.18680573 254.07623291]
[73.18680573 239.07623291]
[73.18680573 224.07623291]
[73.18680573 209.07623291]
[73.18680573 194.07623291]
[73.18680573 179.07623291]
[73.18680573 164.07623291]
[73.18680573 149.07623291]
[61.10681915 140.18388367]
[46.78422165 144.64070129]
[32.46162415 149.09751892]
[25.14054108 154.67008972]
[17.79451180 153.49472046]
[3.38229632 157.65260315]
[-11.02991962 161.81050110]
[-20.01253700 175.10305786]
[-36.01636505 176.22424316]
[-46.76463318 164.31399536]
[-44.01219559 148.50881958]
[-29.87048149 140.93309021]
[-15.18780708 147.39828491]
[-0.77559108 143.24038696]
[13.63662529 139.08250427]
[28.00480843 134.77491760]
[42.32740784 130.31809998]
[56.65000534 125.86128998]
[53.43813705 117.34494019]
[51.85213089 108.52713013]
[51.89417648 99.71046448]
[53.51147461 91.18833923]
[56.59963608 83.23513031]
[43.66157913 75.64522552]
[30.72352219 68.05531311]
[17.78546715 60.46540833]
[2.55680704 64.69192505]
[-11.15876389 56.83962250]
[-15.22404099 41.56713104]
[-7.22716713 27.93534470]
[8.08745384 24.03176498]
[21.63392830 32.17231750]
[25.37537575 47.52735138]
[38.31343079 55.11725998]
[51.25148773 62.70716858]
[64.18954468 70.29707336]
[69.82920837 64.58283234]
[76.36728668 59.92323303]
[83.60909271 56.45702362]
[91.33898926 54.28742599]
[99.32678223 53.47904587]
[107.33462524 54.05595016]
[115.12406158 56.00096512]
[122.46313477 59.25616837]
[131.72808838 47.45952606]
[140.99304199 35.66288757]
[150.25798035 23.86624718]
[159.52293396 12.06960678]
[145.48536682 17.35608101]
[130.58198547 19.05580330]
[115.71455383 17.06592369]
[101.78269958 11.50685024]
[89.62940216 2.71495223]
[79.99005890 -8.77778339]
[73.44792175 -22.27594757]
[70.39884186 -36.96278381]
[71.02732849 -51.94961166]
[75.29534912 -66.32959747]
[82.94464874 -79.23262787]
[93.51237488 -89.87796021]
[106.35909271 -97.62145996]
[120.70747375 -101.99457550]
[135.68930054 -102.73270416]
[150.39805603 -99.79116821]
[163.94372559 -93.34796143]
[175.50666809 -83.79296112]
[184.38725281 -71.70432281]
[190.04811096 -57.81350708]
[192.14672852 -42.96103668]
[190.55609131 -28.04561424]
[185.37246704 -13.96974754]
[176.91081238 -1.58663416]
[190.56704712 -7.79204130]
[204.22329712 -13.99744797]
[217.87953186 -20.20285606]
[231.53576660 -26.40826225]
[245.19201660 -32.61367035]
[247.31463623 -47.89431381]
[257.37896729 -59.58673859]
[272.17352295 -63.95993805]
[286.97738647 -59.61843872]
[297.06674194 -47.94759750]
[299.22207642 -32.67153549]
[292.75564575 -18.66479111]
[279.73086548 -10.39686394]
[264.30389404 -10.50602055]
[251.39741516 -18.95742798]
[237.74118042 -12.75202084]
[224.08494568 -6.54661417]
[210.42869568 -0.34120712]
[196.77246094 5.86420012]
[183.11621094 12.06960678]
[171.31958008 21.33455658]
[162.05462646 33.13119507]
[152.78967285 44.92783737]
[143.52473450 56.72447586]
[134.25978088 68.52111816]
[140.41252136 76.28849792]
[144.81735229 85.24251556]
[147.24925232 94.99244690]
[147.56999207 105.10583496]
[145.73565674 115.12763977]
[141.79998779 124.60073090]
[135.91322327 133.08673096]
[128.31654358 140.18630981]
[119.33229065 145.55786133]
[109.35036469 148.93397522]
[98.81128693 150.13456726]
[88.18680573 149.07623291]
[88.18680573 164.07623291]
[88.18680573 179.07623291]
[88.18680573 194.07623291]
[88.18680573 209.07623291]
[88.18680573 224.07623291]
[88.18680573 239.07623291]
[88.18680573 254.07623291]
[88.18680573 269.07623291]
[88.18680573 284.07623291]
[88.18680573 299.07623291]
[102.72669220 303.13754272]
[115.63107300 310.97204590]
[125.94235992 321.99838257]
[132.89538574 335.39831543]
[135.97418213 350.17749023]
[134.95028687 365.23916626]
[129.89968872 379.46569824]
[121.19716644 391.80136108]
[109.48850250 401.33078003]
[95.64256287 407.34680176]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 39]
[23 38]
[24 37]
[26 36]
[27 35]
[28 34]
[44 57]
[45 56]
[46 55]
[47 54]
[65 118]
[66 117]
[67 116]
[68 115]
[69 114]
[93 113]
[94 112]
[95 111]
[96 110]
[97 109]
[98 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
