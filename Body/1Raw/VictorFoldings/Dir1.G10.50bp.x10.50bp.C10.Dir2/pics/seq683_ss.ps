%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCCCAUCCGGGGGGGGGGUACCCAGCACACACACACCGCUGCUAACCCCAUACCCCGAACCAACCAAAxxxxxxxxxxAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCAUCCUAGUCCUCAUCGCCCCCCCCCCCCCUCCCAUCC\
) } def
/len { sequence length } bind def

/coor [
[233.02166748 212.17271423]
[224.88343811 202.40492249]
[217.32135010 192.18444824]
[210.36051941 181.54524231]
[204.02407837 170.52262878]
[198.33309937 159.15319824]
[193.30645752 147.47471619]
[188.96089172 135.52595520]
[185.31083679 123.34661102]
[182.36842346 110.97711945]
[180.14344788 98.45856476]
[165.23899841 100.14895630]
[150.33454895 101.83935547]
[135.43009949 103.52975464]
[120.52565765 105.22015381]
[110.57335663 118.35092926]
[94.22203064 120.37566376]
[81.36754608 110.06897736]
[66.50095367 112.06503296]
[51.63435364 114.06108856]
[36.76775360 116.05714417]
[21.90115356 118.05320740]
[14.46999359 131.54705811]
[0.67932266 138.00234985]
[-14.09337997 135.13333130]
[-24.22275352 124.24600983]
[-39.08935165 126.24206543]
[-53.95595169 128.23812866]
[-68.82254791 130.23417664]
[-74.00873566 144.63424683]
[-85.30075073 154.96618652]
[-100.10378265 158.85578918]
[-115.01618958 155.40924072]
[-126.61121368 145.41854858]
[-132.22441101 131.17950439]
[-130.56590271 115.96411896]
[-122.01679993 103.26878357]
[-108.54163361 96.01079559]
[-93.23688507 95.85799408]
[-79.61948395 102.84547424]
[-70.81860352 115.36758423]
[-55.95200729 113.37152100]
[-41.08540726 111.37546539]
[-26.21880913 109.37940979]
[-19.31996727 96.20580292]
[-5.82721806 89.54174042]
[9.17778778 92.13079071]
[19.90509796 103.18660736]
[34.77169800 101.19055176]
[49.63829422 99.19448853]
[64.50489044 97.19843292]
[79.37149048 95.20237732]
[85.83309174 84.25670624]
[97.39733887 78.98146820]
[109.89901733 81.27670288]
[118.83525848 90.31570435]
[133.73970032 88.62530518]
[148.64414978 86.93490601]
[163.54859924 85.24451447]
[178.45304871 83.55411530]
[177.77804565 64.42085266]
[178.76432800 45.30155563]
[181.40438843 26.34018898]
[185.67828369 7.67952681]
[191.55372620 -10.53992844]
[198.98643494 -28.18100357]
[207.92033386 -45.11088562]
[218.28810120 -61.20212555]
[230.01161194 -76.33359528]
[243.00248718 -90.39138794]
[257.16287231 -103.26970673]
[272.38610840 -114.87163544]
[288.55746460 -125.10985565]
[305.55514526 -133.90734863]
[323.25109863 -141.19792175]
[341.51208496 -146.92675781]
[360.20056152 -151.05079651]
[379.17575073 -153.53903198]
[398.29476929 -154.37283325]
[417.41363525 -153.54597473]
[436.38842773 -151.06477356]
[455.07620239 -146.94798279]
[473.33630371 -141.22668457]
[491.03121948 -133.94403076]
[508.02777100 -125.15492249]
[515.92425537 -137.90818787]
[523.82073975 -150.66143799]
[521.56213379 -166.54470825]
[532.67633057 -178.11425781]
[548.63745117 -176.49493408]
[557.20147705 -162.92892456]
[551.79888916 -147.82292175]
[536.57397461 -142.76495361]
[528.67749023 -130.01170349]
[520.78100586 -117.25844574]
[531.14483643 -109.90503693]
[541.06787109 -101.96675110]
[550.51721191 -93.46994781]
[559.46154785 -84.44284058]
[567.87097168 -74.91539001]
[575.71771240 -64.91924286]
[582.97564697 -54.48758698]
[589.62066650 -43.65506363]
[595.63067627 -32.45763779]
[600.98565674 -20.93249512]
[605.66790771 -9.11791039]
[609.66180420 2.94688177]
[612.95410156 15.22181606]
[615.53381348 27.66612625]
[617.39245605 40.23848724]
[618.52368164 52.89714050]
[618.92388916 65.60005188]
[618.59161377 78.30502319]
[617.52801514 90.96986389]
[615.73657227 103.55250549]
[613.22326660 116.01116180]
[609.99639893 128.30445862]
[606.06671143 140.39154053]
[601.44720459 152.23228455]
[596.15319824 163.78733826]
[590.20233154 175.01834106]
[583.61425781 185.88796997]
[576.41094971 196.36012268]
[568.61627197 206.40000916]
[560.25610352 215.97428894]
[551.35821533 225.05114746]
[541.95214844 233.60041809]
[532.06909180 241.59371948]
[521.74188232 249.00447083]
[511.00488281 255.80807495]
[499.89364624 261.98190308]
[488.44512939 267.50546265]
[476.69732666 272.36038208]
[464.68927002 276.53051758]
[452.46081543 280.00201416]
[440.05261230 282.76333618]
[427.50579834 284.80529785]
[414.86209106 286.12112427]
[402.16351318 286.70639038]
[389.45214844 286.55917358]
[376.77029419 285.67993164]
[364.16006470 284.07159424]
[351.66329956 281.73947144]
[339.32150269 278.69128418]
[327.17572021 274.93719482]
[315.26626587 270.48962402]
[303.63269043 265.36331177]
[292.31365967 259.57531738]
[281.34677124 253.14483643]
[270.76843262 246.09320068]
[260.61376953 238.44383240]
[250.91656494 230.22213745]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 60]
[12 59]
[13 58]
[14 57]
[15 56]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[26 44]
[27 43]
[28 42]
[29 41]
[85 95]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
