%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACUUCCACGGGGGGGGGGUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCAxxxxxxxxxxCCCCACAUUAGGCUUAAAAACAGAUGCAAUUCCCGGACGUCUAAACCAAACCCCCCCCCCCCACUUUCAC\
) } def
/len { sequence length } bind def

/coor [
[125.27341461 592.39062500]
[111.42747498 586.37457275]
[99.71881104 576.84515381]
[91.01628876 564.50952148]
[85.96569061 550.28295898]
[84.94179535 535.22131348]
[88.02059174 520.44213867]
[94.97361755 507.04220581]
[105.28489685 496.01586914]
[118.18928528 488.18136597]
[132.72917175 484.12005615]
[132.72917175 469.12005615]
[132.72917175 454.12005615]
[132.72917175 439.12005615]
[132.72917175 424.12005615]
[132.72917175 409.12005615]
[132.72917175 394.12005615]
[132.72917175 379.12005615]
[132.72917175 364.12005615]
[132.72917175 349.12005615]
[132.72917175 334.12005615]
[131.32685852 319.18576050]
[128.53454590 304.44793701]
[125.74221802 289.71014404]
[122.94989014 274.97232056]
[120.15756989 260.23452759]
[117.36524200 245.49671936]
[104.78445435 240.92289734]
[96.04899597 230.63684082]
[93.53302002 217.26820374]
[98.00228882 204.30522156]
[108.38553619 195.18452454]
[105.90042114 180.39181519]
[103.41529846 165.59910583]
[93.67633820 154.32958984]
[99.02037811 139.43826294]
[89.28141785 128.16874695]
[94.62545776 113.27741241]
[85.87400818 102.37311554]
[90.58184052 89.20770264]
[88.09671783 74.41500092]
[85.61160278 59.62229156]
[83.12648010 44.82958603]
[73.20977020 32.50199890]
[78.73155975 18.66873741]
[76.24643707 3.87602997]
[73.76132202 -10.91667747]
[70.96899414 -25.65448380]
[67.87067413 -40.33100891]
[64.77235413 -55.00753403]
[49.86773682 -57.85851288]
[37.22422409 -66.17624664]
[28.75137711 -78.66722107]
[25.71454620 -93.41053772]
[28.54600143 -108.15325165]
[36.78369141 -120.65468597]
[49.14631271 -129.02694702]
[46.04799271 -143.70347595]
[41.18424606 -151.51345825]
[43.04122925 -158.71743774]
[40.24890518 -173.45524597]
[25.22583961 -175.12825012]
[11.36400127 -181.15658569]
[-0.10402684 -191.00421143]
[-8.15851593 -203.79548645]
[-12.08326530 -218.39300537]
[-11.52929020 -233.49879456]
[-6.54584837 -247.76962280]
[2.42393517 -259.93655396]
[14.58247375 -268.91772461]
[28.84863853 -273.91452026]
[43.95389175 -274.48263550]
[58.55508423 -270.57156372]
[71.35388947 -262.52902222]
[81.21224213 -251.07022095]
[87.25354767 -237.21403503]
[88.94061279 -222.19255066]
[86.12343597 -207.34144592]
[79.05250549 -193.98130798]
[68.35657501 -183.30009460]
[54.98670959 -176.24757385]
[57.77903366 -161.50976562]
[60.72451782 -146.80180359]
[63.82283783 -132.12527466]
[78.51464081 -129.46440125]
[91.10250092 -121.35938263]
[99.65136719 -109.01913452]
[102.83293152 -94.30638123]
[100.13192749 -79.45652008]
[91.92932129 -66.73802185]
[79.44887543 -58.10585785]
[82.54720306 -43.42932892]
[85.64552307 -28.75280571]
[89.14118195 -25.41276360]
[90.53512573 -19.81917572]
[88.55403137 -13.40179539]
[91.03914642 1.39091146]
[93.52426910 16.18361855]
[103.26322174 27.45313263]
[97.91918945 42.34446716]
[100.40430450 57.13717270]
[102.88942719 71.92987823]
[105.37454224 86.72258759]
[114.12599182 97.62688446]
[109.41815948 110.79229736]
[119.33487701 123.11988068]
[113.81308746 136.95314026]
[123.72979736 149.28073120]
[118.20800781 163.11398315]
[120.69313049 177.90669250]
[123.17824554 192.69940186]
[138.39933777 200.00491333]
[146.21058655 214.78550720]
[143.72122192 231.14915466]
[132.10304260 242.70439148]
[134.89537048 257.44219971]
[137.68769836 272.17999268]
[140.48002625 286.91781616]
[143.27233887 301.65560913]
[146.06466675 316.39343262]
[153.54441833 303.39138794]
[166.79743958 296.36587524]
[181.75653076 297.47296143]
[193.83094788 306.37286377]
[199.31520081 320.33435059]
[196.52624512 335.07281494]
[186.31997681 346.06515503]
[171.82856750 349.93804932]
[157.49925232 345.50286865]
[147.72917175 334.12005615]
[147.72917175 349.12005615]
[147.72917175 364.12005615]
[147.72917175 379.12005615]
[147.72917175 394.12005615]
[147.72917175 409.12005615]
[147.72917175 424.12005615]
[147.72917175 439.12005615]
[147.72917175 454.12005615]
[147.72917175 469.12005615]
[147.72917175 484.12005615]
[162.26905823 488.18136597]
[175.17343140 496.01586914]
[185.48472595 507.04220581]
[192.43774414 520.44213867]
[195.51654053 535.22131348]
[194.49264526 550.28295898]
[189.44204712 564.50952148]
[180.73951721 576.84515381]
[169.03086853 586.37457275]
[155.18492126 592.39062500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 120]
[23 119]
[24 118]
[25 117]
[26 116]
[27 115]
[32 111]
[33 110]
[34 109]
[36 107]
[38 105]
[40 103]
[41 102]
[42 101]
[43 100]
[45 98]
[46 97]
[47 96]
[48 93]
[49 92]
[50 91]
[57 84]
[58 83]
[60 82]
[61 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
