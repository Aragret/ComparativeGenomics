%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAGCCCUAAGGGGGGGGGGGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUGGUAxxxxxxxxxxCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCCCCCCCCCCCUCCUAGACCUAA\
) } def
/len { sequence length } bind def

/coor [
[102.97734833 425.43899536]
[89.27519226 419.17810059]
[77.31007385 410.02474976]
[67.68216705 398.43807983]
[60.87438583 384.99926758]
[57.22821808 370.38238525]
[56.92655182 355.32061768]
[59.98451233 340.56945801]
[66.24872589 326.86883545]
[75.40496826 314.90594482]
[86.99397278 305.28082275]
[100.43444824 298.47631836]
[115.05220795 294.83367920]
[114.74820709 279.83676147]
[114.44419861 264.83984375]
[114.14019775 249.84292603]
[113.83618927 234.84600830]
[113.53218842 219.84909058]
[113.22818756 204.85215759]
[112.92417908 189.85523987]
[112.62017822 174.85832214]
[112.31616974 159.86140442]
[112.01216888 144.86448669]
[83.80910492 139.00862122]
[67.04492950 118.97167206]
[66.48090363 95.52637482]
[79.11324310 79.01648712]
[71.56939697 66.05151367]
[64.02555847 53.08654404]
[56.48171997 40.12157059]
[48.93788147 27.15660095]
[41.39404297 14.19162846]
[34.33100128 8.30480957]
[33.83174896 0.88656354]
[26.55222130 -12.22863579]
[1.27094054 -11.99702168]
[-18.11260414 -34.20722961]
[-33.07487488 -35.27042770]
[-47.57773972 -27.61542892]
[-61.31262589 -36.57561874]
[-60.15025711 -52.93352127]
[-45.28638458 -59.86152649]
[-32.01168060 -50.23270035]
[-17.04940796 -49.16950226]
[-12.45861340 -55.10032272]
[-24.32009697 -64.28210449]
[-15.13811302 -76.14344025]
[-3.27702332 -66.96195984]
[1.31377161 -72.89277649]
[-3.46581531 -87.11091614]
[-8.24540234 -101.32905579]
[-13.02498913 -115.54720306]
[-17.80457687 -129.76533508]
[-32.70167542 -127.66985321]
[-47.73015594 -128.34761047]
[-62.37815857 -131.77554321]
[-76.14677429 -137.83688354]
[-88.56704712 -146.32519531]
[-99.21595001 -156.95137024]
[-107.73078918 -169.35346985]
[-113.82154846 -183.10910034]
[-117.28076935 -197.74974060]
[-117.99065399 -212.77673340]
[-115.92700195 -227.67828369]
[-111.16011047 -241.94682312]
[-103.85234070 -255.09638977]
[-94.25258636 -266.67910767]
[-82.68782043 -276.30047607]
[-69.55192566 -283.63281250]
[-55.29230499 -288.42633057]
[-40.39464188 -290.51782227]
[-25.36634064 -289.83599854]
[-10.71926403 -286.40411377]
[3.04771686 -280.33905029]
[15.46570301 -271.84741211]
[26.11174202 -261.21835327]
[34.62323761 -248.81396484]
[40.71028519 -235.05670166]
[44.16556549 -220.41511536]
[44.87139130 -205.38793945]
[42.80372620 -190.48693848]
[38.03298950 -176.21968079]
[30.72167587 -163.07208252]
[21.11880112 -151.49195862]
[9.55143738 -141.87370300]
[-3.58643460 -134.54492188]
[1.19315231 -120.32678986]
[5.97273922 -106.10864258]
[10.75232601 -91.89050293]
[15.53191280 -77.67236328]
[33.49521637 -73.24892426]
[46.35105133 -61.41405487]
[51.57653809 -45.81746292]
[48.79800797 -30.64529610]
[39.66741943 -19.50816536]
[46.94694901 -6.39296579]
[54.35901260 6.64778900]
[61.90285492 19.61276054]
[69.44669342 32.57773209]
[76.99053192 45.54270554]
[84.53437042 58.50767517]
[92.07820892 71.47264862]
[115.67761230 65.35648346]
[141.82102966 79.79813385]
[155.88731384 74.58855438]
[165.93544006 61.62833786]
[182.14451599 64.11794281]
[187.84002686 79.49627686]
[177.16291809 91.94342804]
[161.09689331 88.65483856]
[147.03060913 93.86441040]
[149.30203247 108.69143677]
[164.28277588 109.45117950]
[173.92243958 97.29154968]
[188.87736511 93.15270233]
[203.39706421 98.62609100]
[211.89840698 111.60710144]
[211.11248779 127.10425568]
[201.34147644 139.15859985]
[186.34254456 143.13497925]
[171.88307190 137.50439453]
[163.52304077 124.43192291]
[148.54229736 123.67218781]
[143.15899658 128.89425659]
[158.03744507 130.79994202]
[165.82424927 143.62045288]
[160.65589905 157.70195007]
[146.42420959 162.44100952]
[133.84564209 154.26911926]
[132.39239502 139.33840942]
[127.00908661 144.56048584]
[127.31308746 159.55740356]
[127.61709595 174.55432129]
[127.92109680 189.55123901]
[128.22509766 204.54815674]
[128.52911377 219.54507446]
[128.83311462 234.54199219]
[129.13711548 249.53890991]
[129.44111633 264.53582764]
[129.74511719 279.53274536]
[130.04913330 294.52966309]
[144.80250549 297.57690430]
[158.50769043 303.83117676]
[170.47723389 312.97869873]
[180.11076355 324.56072998]
[186.92504883 337.99624634]
[190.57830811 352.61135864]
[190.88726807 367.67297363]
[187.83645630 382.42559814]
[181.57888794 396.12927246]
[172.42843628 408.09661865]
[160.84410095 417.72732544]
[147.40692139 424.53836060]
[132.79093933 428.18807983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[27 102]
[28 101]
[29 100]
[30 99]
[31 98]
[32 97]
[34 96]
[35 95]
[37 44]
[38 43]
[49 90]
[50 89]
[51 88]
[52 87]
[53 86]
[104 111]
[105 110]
[112 123]
[113 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
