%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAUCCACCUUGGGGGGGGGGUAUUAUCAGUCUCUUCCCCACAACAAUAUUCAUGUGCCUAGACCAAGAAGxxxxxxxxxxGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCCCCCCCCCCCGCAUCCCCCUU\
) } def
/len { sequence length } bind def

/coor [
[81.39491272 386.97979736]
[68.69943237 378.88546753]
[57.96456146 368.32815552]
[49.65958405 355.76947021]
[44.14756393 341.75836182]
[41.66945648 326.90734863]
[42.33359528 311.86563110]
[46.11094666 297.29083252]
[52.83638382 283.82003784]
[62.21589661 272.04214478]
[73.83945465 262.47207642]
[87.19892883 255.52813721]
[101.71028900 251.51391602]
[100.79877472 236.54162598]
[99.88726807 221.56935120]
[98.97575378 206.59707642]
[98.06423950 191.62478638]
[97.15272522 176.65251160]
[96.24121094 161.68023682]
[95.32969666 146.70796204]
[94.41818237 131.73567200]
[93.50666809 116.76339722]
[91.61266327 131.64334106]
[81.68506622 142.88801575]
[67.15457916 146.61158752]
[53.04253769 141.52726746]
[44.22567368 129.39207458]
[43.75085831 114.39958954]
[51.78216553 101.73080444]
[65.54420471 95.76370239]
[80.28150177 98.56051636]
[66.32369232 93.06692505]
[52.36588287 87.57333374]
[38.40806961 82.07975006]
[29.88320732 89.89250946]
[19.09691811 93.91490173]
[7.64101982 93.59459686]
[-2.80928516 89.01713562]
[-10.74036980 80.88774109]
[-15.01939964 70.42295837]
[-15.05604362 59.16871643]
[-28.65422630 52.83709717]
[-42.25241089 46.50547791]
[-55.85059357 40.17385864]
[-68.38066864 49.05601883]
[-83.67459869 50.46718216]
[-97.61838531 44.02774429]
[-106.46122742 31.46989059]
[-107.82444000 16.17161560]
[-101.34133148 2.24807978]
[-88.75582123 -6.55535603]
[-73.45334625 -7.87061119]
[-59.55020142 -1.34388936]
[-50.78625870 11.26915455]
[-49.51897430 26.57567406]
[-35.92079163 32.90729523]
[-22.32260895 39.23891449]
[-8.72442436 45.57053375]
[6.98894978 35.56197357]
[25.71380806 36.98831940]
[39.95408630 49.45775986]
[43.90166092 68.12194061]
[57.85947037 73.61552429]
[71.81728363 79.10911560]
[85.77509308 84.60270691]
[92.13547516 83.41365814]
[97.80715179 84.40305328]
[102.13825226 87.03079987]
[104.73954010 90.58771515]
[116.21934509 80.93296814]
[127.69914246 71.27822113]
[120.46447754 58.08536911]
[115.94421387 43.73912430]
[114.31030273 28.79143715]
[115.62368011 13.81700039]
[119.83200073 -0.60882664]
[126.77172089 -13.93212986]
[136.17446899 -25.64171028]
[147.67741394 -35.28870010]
[160.83721924 -42.50376511]
[175.14723206 -47.01124573]
[190.05688477 -48.63968658]
[204.99295044 -47.32836533]
[219.38154602 -43.12954712]
[232.67019653 -36.20640564]
[244.34901428 -26.82668495]
[246.24765015 -39.62316513]
[256.05743408 -47.42658997]
[268.15231323 -46.46142197]
[279.82543945 -55.88152695]
[291.49856567 -65.30162811]
[303.17169189 -74.72173309]
[309.05200195 -89.40956116]
[323.81555176 -91.38114929]
[335.48864746 -100.80125427]
[347.16177368 -110.22135162]
[348.59088135 -125.96089935]
[360.78430176 -136.01557922]
[376.50784302 -134.42013550]
[386.43304443 -122.12110901]
[384.67144775 -106.41530609]
[372.26818848 -96.62068939]
[356.58187866 -98.54824066]
[344.90875244 -89.12813568]
[333.23565674 -79.70803070]
[328.19024658 -65.69399261]
[312.59176636 -63.04861450]
[300.91867065 -53.62850952]
[289.24554443 -44.20840836]
[277.57241821 -34.78830338]
[272.18127441 -18.11427498]
[254.00376892 -15.34688187]
[261.24252319 -2.23298287]
[265.78512573 12.04577351]
[267.45513916 26.94116974]
[266.18655396 41.88092804]
[262.02624512 56.29070282]
[255.13233948 69.61615753]
[245.76809692 81.34427643]
[234.29197693 91.02313995]
[221.14382935 98.27931976]
[206.82807922 102.83229828]
[191.89437866 104.50530243]
[176.91647339 103.23217010]
[162.47015381 99.05996704]
[149.11120605 92.14724731]
[137.35389709 82.75802612]
[125.87409210 92.41277313]
[114.39428711 102.06752014]
[108.47895050 115.85188293]
[109.39046478 130.82415771]
[110.30197906 145.79644775]
[111.21349335 160.76872253]
[112.12500000 175.74099731]
[113.03651428 190.71328735]
[113.94802856 205.68556213]
[114.85954285 220.65783691]
[115.77105713 235.63011169]
[116.68257141 250.60240173]
[131.57373047 252.82659912]
[145.67691040 258.09860229]
[158.37557983 266.18795776]
[169.11459351 276.74099731]
[177.42451477 289.29644775]
[182.94204712 303.30538940]
[185.42599487 318.15542603]
[184.76777649 333.19738770]
[180.99615479 347.77368164]
[174.27601624 361.24713135]
[164.90113831 373.02868652]
[153.28134155 382.60336304]
[139.92460632 389.55255127]
[125.41482544 393.57247925]
[110.38629913 394.48739624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[31 65]
[32 64]
[33 63]
[34 62]
[41 58]
[42 57]
[43 56]
[44 55]
[69 129]
[70 128]
[71 127]
[86 112]
[89 110]
[90 109]
[91 108]
[92 107]
[94 105]
[95 104]
[96 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
