%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACCCCAUUCGGGGGGGGGGUAUACCAACACCUAUUCUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUxxxxxxxxxxGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCCCGAUUGACCCCCCCCCCAGCCCCCAUUC\
) } def
/len { sequence length } bind def

/coor [
[93.54907990 398.69476318]
[79.52713776 393.14175415]
[67.32717896 384.27542114]
[57.71610641 372.65310669]
[51.29808044 359.00540161]
[48.47654343 344.19021606]
[49.42885971 329.13885498]
[54.09516525 314.79742432]
[62.18213272 302.06747437]
[73.18140411 291.74920654]
[86.40156555 284.49121094]
[101.01157379 280.74978638]
[101.01157379 265.74978638]
[101.01157379 250.74978638]
[101.01157379 235.74978638]
[101.01157379 220.74978638]
[101.01157379 205.74978638]
[101.01157379 190.74978638]
[101.01157379 175.74978638]
[101.01157379 160.74978638]
[101.01157379 145.74978638]
[101.01157379 130.74978638]
[87.00643158 126.43338776]
[77.16398621 116.44692230]
[73.41186523 103.59539032]
[76.07619476 91.12187195]
[83.93565369 81.89299011]
[77.94735718 68.14015961]
[71.95906067 54.38732910]
[65.97076416 40.63449860]
[67.88564301 55.51177216]
[61.11030579 68.89440155]
[47.98612595 76.15772247]
[33.04845047 74.79173279]
[21.45933723 65.26847076]
[17.22365952 50.87892532]
[21.80515289 36.59572220]
[33.62057877 27.35474205]
[48.58719254 26.34949303]
[33.93447113 23.14049721]
[19.28174400 19.93150139]
[3.82684851 25.41586304]
[-8.47290611 14.56929302]
[-4.96458578 -1.45018685]
[10.74275017 -6.16310930]
[22.49074173 5.27877617]
[37.14346695 8.48777294]
[51.79619217 11.69676876]
[63.28685760 2.05495477]
[62.67103195 -12.93239880]
[62.05520630 -27.91975212]
[61.43938065 -42.90710449]
[46.47801208 -44.25338364]
[31.82037735 -47.54104996]
[17.71728897 -52.71385574]
[4.41006756 -59.68328094]
[-7.87358189 -68.33007050]
[-18.92346954 -78.50626373]
[-28.55051804 -90.03774261]
[-36.58999634 -102.72718048]
[-42.90433884 -116.35744476]
[-47.38549423 -130.69529724]
[-49.95679092 -145.49542236]
[-50.57422638 -160.50454712]
[-49.22723770 -175.46585083]
[-45.93886948 -190.12332153]
[-40.76539612 -204.22616577]
[-33.79533768 -217.53306580]
[-25.14796448 -229.81629944]
[-14.97124100 -240.86570740]
[-3.43930650 -250.49220276]
[9.25051308 -258.53106689]
[22.88107872 -264.84475708]
[37.21915054 -269.32525635]
[52.01939011 -271.89584351]
[67.02854156 -272.51254272]
[81.98978424 -271.16485596]
[96.64710236 -267.87579346]
[110.74970245 -262.70162964]
[124.05625916 -255.73095703]
[136.33908081 -247.08299255]
[147.38800049 -236.90574646]
[157.01396179 -225.37335205]
[165.05223083 -212.68315125]
[171.36526489 -199.05227661]
[175.84506226 -184.71398926]
[178.41494751 -169.91363525]
[179.03096008 -154.90444946]
[177.68254089 -139.94328308]
[174.39277649 -125.28610992]
[169.21795654 -111.18376160]
[162.24664307 -97.87753296]
[153.59809875 -85.59512329]
[143.42031860 -74.54668427]
[131.88746643 -64.92128754]
[119.19688416 -56.88361740]
[105.56571960 -50.57122421]
[91.22721863 -46.09211349]
[76.42673492 -43.52293015]
[77.04255676 -28.53557777]
[77.65838623 -13.54822445]
[78.27420807 1.43912935]
[79.72359467 34.64620209]
[85.71189117 48.39903259]
[91.70018768 62.15186310]
[97.68848419 75.90469360]
[120.49099731 81.68036652]
[130.10696411 106.33585358]
[144.87908936 108.94057465]
[159.65119934 111.54529572]
[174.42330933 114.15002441]
[189.19543457 116.75474548]
[203.96754456 119.35946655]
[218.79002380 121.66033936]
[233.65663147 123.65639496]
[248.52322388 125.65245819]
[265.02609253 121.76760864]
[273.32754517 136.55009460]
[261.42083740 148.61933899]
[246.52717590 140.51905823]
[231.66056824 138.52299500]
[216.79397583 136.52694702]
[212.47814941 138.70016479]
[206.74440002 138.14173889]
[201.36282349 134.13157654]
[186.59071350 131.52685547]
[171.81858826 128.92213440]
[157.04647827 126.31741333]
[142.27435303 123.71269226]
[127.50224304 121.10797119]
[116.01157379 130.74978638]
[116.01157379 145.74978638]
[116.01157379 160.74978638]
[116.01157379 175.74978638]
[116.01157379 190.74978638]
[116.01157379 205.74978638]
[116.01157379 220.74978638]
[116.01157379 235.74978638]
[116.01157379 250.74978638]
[116.01157379 265.74978638]
[116.01157379 280.74978638]
[130.62159729 284.49121094]
[143.84175110 291.74920654]
[154.84101868 302.06747437]
[162.92799377 314.79742432]
[167.59429932 329.13885498]
[168.54661560 344.19021606]
[165.72506714 359.00540161]
[159.30705261 372.65310669]
[149.69598389 384.27542114]
[137.49601746 393.14175415]
[123.47407532 398.69476318]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[27 106]
[28 105]
[29 104]
[30 103]
[39 48]
[40 47]
[41 46]
[49 102]
[50 101]
[51 100]
[52 99]
[108 130]
[109 129]
[110 128]
[111 127]
[112 126]
[113 125]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
