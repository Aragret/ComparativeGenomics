%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUAUCAAACGGGGGGGGGGUCCUGAGCCAACAACUUAAUAUGACUAGCUUACACAAUAGCUUUUAUAGUxxxxxxxxxxCAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCCCCCCCCCCCAACUAUCACAC\
) } def
/len { sequence length } bind def

/coor [
[97.63562775 297.50155640]
[101.98841858 283.14700317]
[108.27568054 269.52825928]
[116.37770081 256.90457153]
[126.14024353 245.51631165]
[137.37744141 235.58024597]
[149.87536621 227.28555298]
[163.39608765 220.79016113]
[177.68218994 216.21771240]
[192.46170044 213.65525818]
[207.45323181 213.15159607]
[222.36955261 214.71597290]
[210.97846985 204.95669556]
[199.58740234 195.19741821]
[188.19633484 185.43814087]
[176.80525208 175.67886353]
[165.41418457 165.91960144]
[154.02310181 156.16032410]
[142.63203430 146.40104675]
[131.24096680 136.64176941]
[119.84988403 126.88249969]
[108.45881653 117.12322235]
[94.00453186 118.13313293]
[83.00111389 108.70598602]
[81.78191376 94.26785278]
[70.39083862 84.50857544]
[58.99976349 74.74930573]
[46.73908615 84.17400360]
[32.79846954 90.85486603]
[17.78251076 94.50473022]
[2.34192181 94.96784210]
[-12.85469151 92.22647858]
[-27.14976692 86.40162659]
[-39.92524338 77.74765778]
[-50.62928009 66.64118958]
[-58.80010223 53.56472778]
[-64.08591461 39.08568954]
[-66.26004028 23.83178329]
[-65.23065186 8.46378899]
[-61.04466248 -6.35304785]
[-53.88554764 -19.97783089]
[-65.47459412 -29.50116920]
[-77.06364441 -39.02450562]
[-88.65269470 -48.54784393]
[-100.24174500 -58.07118225]
[-113.17165375 -57.60102844]
[-122.63585663 -65.82295990]
[-123.89346313 -77.89278412]
[-135.28454590 -87.65206146]
[-146.67561340 -97.41133118]
[-158.06668091 -107.17060852]
[-173.12878418 -103.44059753]
[-187.49401855 -109.30741882]
[-195.63867188 -122.51515198]
[-194.43095398 -137.98515320]
[-184.33526611 -149.76890564]
[-169.23359680 -153.33529663]
[-154.93284607 -147.31298828]
[-146.93194580 -134.01766968]
[-148.30741882 -118.56168365]
[-136.91633606 -108.80240631]
[-125.52526093 -99.04312897]
[-114.13419342 -89.28385925]
[-96.75762177 -87.02567291]
[-90.71840668 -69.66023254]
[-79.12935638 -60.13689041]
[-67.54030609 -50.61355591]
[-55.95125961 -41.09021759]
[-44.36220932 -31.56687927]
[-33.07374573 -40.77824783]
[-20.19425964 -47.60047150]
[-6.22256756 -51.76712036]
[8.29978085 -53.11464691]
[22.80948830 -51.58882904]
[36.74336624 -47.24692535]
[49.56019592 -40.25553513]
[60.76173401 -30.88422203]
[69.91210938 -19.49509430]
[76.65475464 -6.52883482]
[80.72631836 7.51235867]
[81.96694946 22.08422470]
[80.32656097 36.62153244]
[75.86686707 50.56000519]
[68.75904083 63.35823059]
[80.15011597 73.11750031]
[91.54118347 82.87677765]
[105.99546814 81.86686707]
[116.99888611 91.29401398]
[118.21808624 105.73214722]
[129.60916138 115.49142456]
[141.00022888 125.25069427]
[152.39131165 135.00997925]
[163.78237915 144.76924133]
[175.17346191 154.52851868]
[186.56452942 164.28779602]
[197.95559692 174.04707336]
[209.34667969 183.80635071]
[220.73774719 193.56561279]
[232.12882996 203.32489014]
[237.36558533 203.74899292]
[241.70974731 206.05090332]
[256.53222656 203.75003052]
[271.35470581 201.44915771]
[286.17718506 199.14828491]
[300.97528076 196.69534302]
[315.74740601 194.09062195]
[330.51950073 191.48590088]
[339.37802124 178.39765930]
[354.91232300 175.48887634]
[367.90618896 184.48527527]
[370.65057373 200.04946899]
[361.51730347 212.94747925]
[345.92495728 215.52716064]
[333.12423706 206.25802612]
[318.35211182 208.86274719]
[303.57998657 211.46746826]
[297.50140381 215.75267029]
[288.47808838 213.97076416]
[273.65557861 216.27163696]
[258.83309937 218.57250977]
[244.01063538 220.87338257]
[257.51791382 227.39668274]
[269.99868774 235.71716309]
[281.21533203 245.67640686]
[290.95434570 257.08480835]
[299.03027344 269.72518921]
[305.28939819 283.35690308]
[309.61254883 297.72039795]
[311.91741943 312.54226685]
[312.16012573 327.54028320]
[310.33605957 342.42898560]
[306.47994995 356.92483521]
[300.66516113 370.75195312]
[293.00247192 383.64700317]
[283.63769531 395.36456299]
[272.74914551 405.68154907]
[260.54415894 414.40148926]
[247.25502014 421.35842896]
[233.13476562 426.41989136]
[218.45220947 429.48956299]
[203.48689270 430.50894165]
[188.52371216 429.45864868]
[173.84753418 426.35870361]
[159.73776245 421.26806641]
[146.46302795 414.28372192]
[134.27603149 405.53857422]
[123.40882874 395.19915771]
[114.06827545 383.46228027]
[106.43220520 370.55142212]
[100.64599609 356.71234131]
[96.81980896 342.20855713]
[95.02648163 327.31613159]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 99]
[13 98]
[14 97]
[15 96]
[16 95]
[17 94]
[18 93]
[19 92]
[20 91]
[21 90]
[22 89]
[25 86]
[26 85]
[27 84]
[41 69]
[42 68]
[43 67]
[44 66]
[45 65]
[48 63]
[49 62]
[50 61]
[51 60]
[101 121]
[102 120]
[103 119]
[104 118]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
