%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCAUACUGGGGGGGGGGAGUUAUUAUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGxxxxxxxxxxAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAAAACCCCCCCCCCCCCCCUCCCCAUGCU\
) } def
/len { sequence length } bind def

/coor [
[79.72350311 358.61090088]
[68.50807190 348.54556274]
[59.91667175 336.16476440]
[54.41263199 322.13613892]
[52.29277039 307.21624756]
[53.67141342 292.20971680]
[58.47421265 277.92581177]
[66.44216156 265.13485718]
[77.14555359 254.52664185]
[90.00717163 246.67326355]
[104.33339691 241.99824524]
[103.08652496 227.05015564]
[101.83965302 212.10206604]
[100.59277344 197.15399170]
[99.34590149 182.20590210]
[98.09902954 167.25781250]
[96.85214996 152.30972290]
[95.60527802 137.36163330]
[94.35840607 122.41355133]
[93.11152649 107.46546173]
[89.33512115 100.28056335]
[91.99751282 92.19396973]
[91.06188965 77.22317505]
[90.12625885 62.25238800]
[75.12137604 62.25562668]
[60.14531708 61.32600784]
[45.25602341 59.46712875]
[30.51109505 56.68618393]
[15.96758366 52.99392700]
[1.68175137 48.40464020]
[-12.29113102 42.93608856]
[-25.89700508 36.60942078]
[-39.08323288 29.44911766]
[-51.79879379 21.48287964]
[-63.99450302 12.74152756]
[-75.62316895 3.25887966]
[-86.63980865 -6.92837763]
[-97.00179291 -17.78083038]
[-106.66904449 -29.25649452]
[-115.60414886 -41.31097031]
[-123.77254486 -53.89762115]
[-131.14263916 -66.96775055]
[-137.68589783 -80.47080231]
[-143.37701416 -94.35451508]
[-148.19398499 -108.56519318]
[-152.11814880 -123.04785156]
[-155.13435364 -137.74645996]
[-157.23089600 -152.60415649]
[-158.39968872 -167.56344604]
[-158.63621521 -182.56646729]
[-157.93952942 -197.55516052]
[-156.31236267 -212.47155762]
[-153.76098633 -227.25793457]
[-150.29528809 -241.85710144]
[-145.92864990 -256.21255493]
[-140.67799377 -270.26876831]
[-134.56361389 -283.97134399]
[-127.60918427 -297.26730347]
[-119.84159851 -310.10519409]
[-111.29090118 -322.43530273]
[-101.99018860 -334.20999146]
[-91.97543335 -345.38369751]
[-81.28539276 -355.91314697]
[-69.96141052 -365.75762939]
[-58.04730225 -374.87905884]
[-45.58916473 -383.24215698]
[-32.63519287 -390.81454468]
[-19.23550797 -397.56695557]
[-5.44194508 -403.47323608]
[8.69212723 -408.51055908]
[23.11202621 -412.65939331]
[37.76196671 -415.90374756]
[52.58526611 -418.23104858]
[67.52458191 -419.63226318]
[82.52210999 -420.10198975]
[97.51982880 -419.63842773]
[112.45971680 -418.24334717]
[127.28397369 -415.92218018]
[141.93525696 -412.68386841]
[156.35685730 -408.54092407]
[170.49299622 -403.50942993]
[184.28898621 -397.60882568]
[197.69145203 -390.86193848]
[210.64854431 -383.29489136]
[223.11012268 -374.93692017]
[235.02798462 -365.82040405]
[246.35601807 -355.98056030]
[257.05038452 -345.45550537]
[267.06973267 -334.28594971]
[276.37530518 -322.51510620]
[284.93106079 -310.18847656]
[292.70394897 -297.35379028]
[299.66384888 -284.06069946]
[305.78387451 -270.36065674]
[311.04031372 -256.30657959]
[315.41284180 -241.95294189]
[318.88455200 -227.35520935]
[321.44201660 -212.56988525]
[323.07531738 -197.65415955]
[323.77816772 -182.66574097]
[323.54782104 -167.66262817]
[322.38519287 -152.70285034]
[320.29476929 -137.84429932]
[317.28460693 -123.14445496]
[313.36639404 -108.66017914]
[308.55529785 -94.44752502]
[302.86987305 -80.56146240]
[296.33218384 -67.05572510]
[288.96746826 -53.98255920]
[280.80426025 -41.39254761]
[271.87411499 -29.33439636]
[262.21157837 -17.85475349]
[251.85406494 -6.99803686]
[240.84162903 3.19375372]
[229.21685791 12.68118763]
[217.02474976 21.42755890]
[204.31246948 29.39902878]
[191.12919617 36.56475830]
[177.52592468 42.89702606]
[163.55529785 48.37133026]
[149.27134705 52.96649170]
[134.72935486 56.66473389]
[119.98558044 59.45175171]
[105.09704590 61.31675720]
[106.03267670 76.28755188]
[106.96830750 91.25833893]
[108.05961609 106.21858978]
[109.30648804 121.16667938]
[110.55336761 136.11476135]
[111.80023956 151.06285095]
[113.04711151 166.01094055]
[114.29399109 180.95903015]
[115.54086304 195.90710449]
[116.78773499 210.85519409]
[118.03461456 225.80328369]
[119.28148651 240.75137329]
[134.18426514 242.98829651]
[148.16925049 248.60229492]
[160.48223877 257.29061890]
[170.45919800 268.58474731]
[177.56211853 281.87554932]
[181.40789795 296.44628906]
[181.78918457 311.51119995]
[178.68539429 326.25781250]
[172.26390076 339.89089966]
[162.87103271 351.67526245]
[151.01332092 360.97531128]
[137.33023071 367.28958130]
[122.55969238 370.27752686]
[107.49824524 369.77798462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[22 126]
[23 125]
[24 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
