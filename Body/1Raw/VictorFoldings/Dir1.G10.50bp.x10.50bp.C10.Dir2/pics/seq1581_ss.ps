%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUUGCUCAGCGGGGGGGGGGCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAAAGUAAGCGxxxxxxxxxxAACAACCUAUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCCCCCCCCCCCUUCUUGCUCAUC\
) } def
/len { sequence length } bind def

/coor [
[90.21623993 499.31640625]
[76.34210205 493.46813965]
[63.98730087 484.86276245]
[53.69192505 473.87646484]
[45.90604782 460.98950195]
[40.97003555 446.76522827]
[39.09966660 431.82553101]
[40.37670517 416.82342529]
[44.74533081 402.41479492]
[52.01455688 389.22949219]
[61.86661148 377.84393311]
[73.87080383 368.75585938]
[87.50235748 362.36254883]
[102.16535950 358.94348145]
[101.86522675 343.94650269]
[101.56509399 328.94949341]
[101.26496124 313.95251465]
[100.96482849 298.95550537]
[100.66469574 283.95849609]
[100.36457062 268.96151733]
[100.06443787 253.96452332]
[99.76430511 238.96751404]
[99.46417236 223.97052002]
[91.47376251 211.40061951]
[98.93338776 197.44839478]
[98.63325500 182.45138550]
[98.33312225 167.45439148]
[98.03298950 152.45739746]
[96.98331451 137.49417114]
[95.18672943 122.60214996]
[93.39013672 107.71012878]
[89.35478973 100.67614746]
[91.70966339 92.50254822]
[90.21141052 77.57756042]
[88.71315002 62.65257645]
[79.63613129 49.69424820]
[86.06348419 36.25779343]
[84.56522369 21.33280563]
[83.06697083 6.40781975]
[79.07645416 -1.87250829]
[81.69111633 -8.83034039]
[80.49179077 -23.78231812]
[79.29246521 -38.73429489]
[78.09313965 -53.68627167]
[67.30768585 -43.26158524]
[52.30784988 -43.33168030]
[41.62030411 -53.85671616]
[41.32039261 -68.85371399]
[51.57860184 -79.79762268]
[66.56364441 -80.46736145]
[77.75699615 -70.48274231]
[78.35713959 -85.47072601]
[78.95728302 -100.45871735]
[79.55742645 -115.44670868]
[80.15756989 -130.43469238]
[80.75771332 -145.42268372]
[81.35785675 -160.41067505]
[66.56751251 -163.04873657]
[52.27415848 -167.67625427]
[38.74407959 -174.20700073]
[26.22933197 -182.51933289]
[14.96305466 -192.45838928]
[5.15513325 -203.83900452]
[-3.01171637 -216.44917297]
[-9.38535118 -230.05397034]
[-13.84703541 -244.39994812]
[-16.31364822 -259.21984863]
[-16.73924065 -274.23760986]
[-15.11588192 -289.17340088]
[-11.47381496 -303.74905396]
[-5.88089085 -317.69296265]
[1.55869985 -330.74542236]
[10.70636082 -342.66320801]
[21.39167786 -353.22436523]
[33.41558838 -362.23208618]
[46.55409622 -369.51861572]
[60.56243515 -374.94818115]
[75.17964172 -378.41961670]
[90.13340759 -379.86828613]
[105.14515686 -379.26721191]
[119.93521881 -376.62753296]
[134.22807312 -371.99847412]
[147.75743103 -365.46624756]
[160.27128601 -357.15258789]
[171.53648376 -347.21231079]
[181.34317017 -335.83062744]
[189.50866699 -323.21957397]
[195.88082886 -309.61407471]
[200.34095764 -295.26763916]
[202.80596924 -280.44744873]
[203.22993469 -265.42965698]
[201.60494995 -250.49403381]
[197.96130371 -235.91879272]
[192.36688232 -221.97547913]
[184.92587280 -208.92384338]
[175.77691650 -197.00701904]
[165.09046936 -186.44703674]
[153.06558228 -177.44059753]
[139.92628479 -170.15550232]
[125.91735077 -164.72746277]
[111.29976654 -161.25758362]
[96.34584808 -159.81053162]
[95.74570465 -144.82254028]
[95.14556122 -129.83454895]
[94.54541779 -114.84656525]
[93.94526672 -99.85857391]
[93.34512329 -84.87058258]
[92.74497986 -69.88259888]
[93.04511261 -54.88559723]
[94.24443817 -39.93362045]
[95.44377136 -24.98164558]
[96.64309692 -10.02966785]
[97.99195862 4.90956163]
[99.49021149 19.83454895]
[100.98847198 34.75953293]
[109.95832825 46.65032578]
[103.63813782 61.15431595]
[105.13639832 76.07930756]
[106.63465118 91.00428772]
[108.28215790 105.91354370]
[110.07875061 120.80555725]
[111.87533569 135.69758606]
[123.26024628 125.93111420]
[138.03143311 128.54110718]
[145.38009644 141.61769104]
[139.92886353 155.59210205]
[125.66665649 160.23855591]
[113.02999115 152.15727234]
[113.33012390 167.15426636]
[113.63025665 182.15126038]
[113.93038177 197.14825439]
[121.94226074 210.79084778]
[114.46116638 223.67039490]
[114.76129913 238.66738892]
[115.06143188 253.66438293]
[115.36156464 268.66137695]
[115.66169739 283.65838623]
[115.96183014 298.65536499]
[116.26196289 313.65237427]
[116.56209564 328.64938354]
[116.86222839 343.64636230]
[117.16235352 358.64337158]
[131.95042419 361.47302246]
[145.82684326 367.31582642]
[158.18504333 375.91635132]
[168.48474121 386.89859009]
[176.27568054 399.78250122]
[181.21728516 414.00479126]
[183.09353638 428.94378662]
[181.82240295 443.94638062]
[177.45944214 458.35675049]
[170.19540405 471.54489136]
[160.34782410 482.93432617]
[148.34721375 492.02713013]
[134.71818542 498.42578125]
[120.05651855 501.85061646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[25 131]
[26 130]
[27 129]
[28 128]
[29 122]
[30 121]
[31 120]
[33 119]
[34 118]
[35 117]
[37 115]
[38 114]
[39 113]
[41 112]
[42 111]
[43 110]
[44 109]
[51 108]
[52 107]
[53 106]
[54 105]
[55 104]
[56 103]
[57 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
