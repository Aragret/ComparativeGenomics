%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUAUCCCCCAGGGGGGGGGGUUCUCCUCCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUxxxxxxxxxxCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCAUUCUCCCCCCCCCCCCUCCUAUCCCUCA\
) } def
/len { sequence length } bind def

/coor [
[86.60317993 542.86938477]
[72.72904968 537.02111816]
[60.37424469 528.41571045]
[50.07886887 517.42944336]
[42.29299164 504.54248047]
[37.35697937 490.31820679]
[35.48661041 475.37847900]
[36.76364899 460.37640381]
[41.13227463 445.96774292]
[48.40150070 432.78247070]
[58.25355530 421.39691162]
[70.25774384 412.30883789]
[83.88929749 405.91552734]
[98.55230713 402.49645996]
[98.25217438 387.49948120]
[97.95204163 372.50247192]
[97.65190887 357.50546265]
[97.35177612 342.50848389]
[97.05164337 327.51147461]
[96.75151062 312.51449585]
[96.45137787 297.51748657]
[96.15124512 282.52047729]
[95.85111237 267.52349854]
[81.31239319 263.97735596]
[68.17695618 256.78311157]
[57.34308243 246.42591858]
[49.55343246 233.60742188]
[45.34413147 219.19831848]
[45.00788116 204.17913818]
[48.57360840 189.57354736]
[55.80408096 176.37858582]
[66.21168518 165.49659729]
[79.09132385 157.67352295]
[93.56813812 153.44776917]
[93.26800537 138.45077515]
[82.28819275 136.18757629]
[72.07955933 130.76214600]
[63.55767441 122.44047546]
[57.54577637 111.75405884]
[54.69787979 99.46791840]
[55.43302536 86.52630615]
[59.88685226 73.98027039]
[67.88563538 62.90231323]
[78.94595337 54.29527283]
[66.00588226 46.70879364]
[53.06581879 39.12231445]
[40.12575150 31.53583336]
[26.81347084 39.19604111]
[11.45462608 39.15778732]
[-1.81933069 31.43136215]
[-9.43777180 18.09513664]
[-9.35137558 2.73648643]
[-1.58338130 -10.51318645]
[11.77665901 -18.08978844]
[27.13496208 -17.95524979]
[40.36022186 -10.14576244]
[47.89490891 3.23796105]
[47.71223068 18.59576607]
[60.65229797 26.18224525]
[73.59236145 33.76872635]
[86.53243256 41.35520554]
[99.83567047 34.42527771]
[101.03499603 19.47330093]
[102.23432159 4.52132320]
[103.43364716 -10.43065357]
[104.63298035 -25.38263130]
[102.19017029 -34.24382019]
[106.00882721 -40.62079239]
[107.50708771 -55.54577637]
[101.18689728 -70.04976654]
[110.15675354 -81.94055939]
[111.65500641 -96.86554718]
[113.15326691 -111.79053497]
[99.60559845 -118.63342285]
[89.44761658 -129.91082764]
[84.05310822 -144.09756470]
[84.15162659 -159.27500916]
[89.72985840 -173.39053345]
[100.03339386 -184.53511047]
[113.66875458 -191.20153809]
[128.79187012 -192.48825073]
[143.35748291 -188.22122192]
[155.39569092 -178.97750854]
[163.27842712 -166.00729370]
[165.93963623 -151.06465149]
[163.01939392 -136.17047119]
[154.91264343 -123.33906555]
[142.71574402 -114.30577087]
[128.07824707 -110.29227448]
[126.57999420 -95.36728668]
[125.08173370 -80.44229889]
[131.50909424 -67.00584412]
[122.43207550 -54.04751968]
[120.93381500 -39.12253189]
[119.58495331 -24.18330383]
[118.38562775 -9.23132610]
[117.18630219 5.72065067]
[115.98696899 20.67262840]
[114.78764343 35.62460327]
[120.42438507 40.57204819]
[128.64524841 28.02544212]
[133.12055969 13.70861149]
[147.56213379 9.65389729]
[158.83537292 19.54906464]
[156.68722534 34.39445114]
[143.07223511 40.68821716]
[131.69786072 50.46693420]
[137.33459473 55.41437912]
[152.00471497 52.28591919]
[166.67485046 49.15745926]
[178.48551941 37.78027725]
[194.16673279 42.57940674]
[197.58700562 58.61791611]
[185.22784424 69.39675903]
[169.80331421 63.82758713]
[155.13317871 66.95604706]
[140.46305847 70.08451080]
[147.04728699 93.46046448]
[141.80784607 115.75605774]
[127.34297943 131.69174194]
[108.26500702 138.15063477]
[108.56513214 153.14764404]
[123.19943237 156.79080200]
[136.38174438 164.09230042]
[147.21641541 174.54916382]
[154.96900940 187.44427490]
[159.11625671 201.89550781]
[159.38117981 216.91610718]
[155.75175476 231.48210144]
[148.48120117 244.60198975]
[138.07038879 255.38435364]
[125.23331451 263.09838867]
[110.84811401 267.22335815]
[111.14824677 282.22036743]
[111.44837952 297.21734619]
[111.74850464 312.21435547]
[112.04863739 327.21133423]
[112.34877014 342.20834351]
[112.64890289 357.20535278]
[112.94903564 372.20233154]
[113.24916840 387.19934082]
[113.54930115 402.19631958]
[128.33735657 405.02600098]
[142.21379089 410.86880493]
[154.57197571 419.46929932]
[164.87167358 430.45156860]
[172.66262817 443.33544922]
[177.60423279 457.55776978]
[179.48048401 472.49676514]
[178.20933533 487.49935913]
[173.84638977 501.90972900]
[166.58235168 515.09783936]
[156.73477173 526.48730469]
[144.73416138 535.58007812]
[131.10511780 541.97875977]
[116.44346619 545.40356445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[34 122]
[35 121]
[44 61]
[45 60]
[46 59]
[47 58]
[62 99]
[63 98]
[64 97]
[65 96]
[66 95]
[68 94]
[69 93]
[71 91]
[72 90]
[73 89]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
