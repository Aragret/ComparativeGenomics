%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCCCCCUCGGGGGGGGGGUAUUGAUCCCCACCUCCAAAUAUCUCAUCAACAACCGACUAAUCACCACCxxxxxxxxxxAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACCCCCCCCCCCAUUUCCCCCGC\
) } def
/len { sequence length } bind def

/coor [
[118.83439636 388.84732056]
[105.34551239 382.11578369]
[93.86001587 372.35122681]
[85.04564667 360.12133789]
[79.41486359 346.13714600]
[77.29503632 331.21166992]
[78.80940247 316.21267700]
[83.86992645 302.01214600]
[92.18238831 289.43572998]
[103.26351929 279.21456909]
[116.46907806 271.94293213]
[131.03129578 268.04357910]
[130.72332764 253.04673767]
[130.41534424 238.04989624]
[130.10736084 223.05305481]
[129.79939270 208.05621338]
[129.49140930 193.05938721]
[129.18344116 178.06254578]
[128.87545776 163.06570435]
[128.56747437 148.06886292]
[128.25950623 133.07202148]
[127.95152283 118.07518768]
[96.02073669 129.31747437]
[75.30265808 107.75395966]
[60.30344391 107.90795898]
[45.30423737 108.06195831]
[30.30502701 108.21595001]
[15.30581760 108.36994934]
[11.01400661 122.86380005]
[2.63934517 135.44778442]
[-9.07349777 145.00291443]
[-23.08302498 150.67959595]
[-38.14351654 151.97302246]
[-52.91580963 148.76820374]
[-66.08634949 141.35011292]
[-76.48403931 130.37834167]
[-83.18430328 116.82851410]
[-85.59137726 101.90546417]
[-83.49121094 86.93614197]
[-77.07055664 73.25160217]
[-66.90033722 62.06866837]
[-53.88487244 54.38172150]
[-39.18149948 50.87427521]
[-24.09762383 51.85821533]
[-9.97449780 57.24604797]
[1.93206060 66.55868530]
[10.56332874 78.96806335]
[15.15182018 93.37074280]
[30.15102959 93.21674347]
[45.15023804 93.06274414]
[60.14944839 92.90875244]
[75.14865875 92.75475311]
[80.71071625 80.06970978]
[92.65170288 71.34076691]
[108.29612732 69.67796326]
[123.53077698 76.45635986]
[123.53077698 61.45636368]
[123.53077698 46.45636368]
[115.79347229 32.65618896]
[123.53077698 19.92891884]
[123.53077698 4.92891884]
[115.80531311 17.78649330]
[105.17420959 28.36853790]
[92.28104401 36.03445053]
[77.90631866 40.32016373]
[62.92023849 40.96623230]
[48.23001099 37.93354416]
[34.72493362 31.40569305]
[23.22255707 21.77784920]
[14.41920280 9.63285160]
[8.84779358 -4.29407883]
[6.84560633 -19.15985298]
[8.53384590 -34.06454468]
[13.81031132 -48.10587311]
[22.35558319 -60.43382263]
[33.65235901 -70.30210114]
[47.01676941 -77.11330414]
[61.63977432 -80.45511627]
[76.63614655 -80.12523651]
[91.09805298 -76.14362335]
[104.15001678 -68.75131989]
[115.00192261 -58.39582443]
[122.99681854 -45.70403290]
[127.65072632 -31.44425774]
[128.68183899 -16.47840691]
[135.50541687 -29.83650589]
[137.32621765 -46.69239426]
[154.02742004 -49.60893250]
[161.45332336 -34.36780167]
[148.86352539 -23.01292992]
[142.03994751 -9.65483093]
[138.53077698 4.92891884]
[138.53077698 19.92891884]
[146.26808167 32.65618896]
[138.53077698 46.45636368]
[138.53077698 61.45636368]
[138.53077698 76.45635986]
[150.77372742 85.12297058]
[164.92105103 80.13764954]
[175.36520386 68.25362396]
[189.94052124 71.32112122]
[204.08784485 66.33580017]
[218.23515320 61.35047913]
[224.83412170 46.98979950]
[239.68363953 41.57986832]
[253.97375488 48.33030319]
[259.22637939 63.23618698]
[252.32524109 77.45412445]
[237.36465454 82.54887390]
[223.22047424 75.49779510]
[209.07316589 80.48311615]
[194.92584229 85.46844482]
[185.49359131 96.99588013]
[169.90637207 94.28496552]
[155.75904846 99.27028656]
[170.56457520 101.67784119]
[185.04246521 97.75469971]
[199.89097595 99.88109589]
[212.68591309 107.70986938]
[221.33831787 119.96286011]
[224.43556213 134.63961792]
[221.47200012 149.34394836]
[212.93145752 161.67517090]
[200.20829773 169.62005615]
[185.37974548 171.88148499]
[170.86677551 168.09025574]
[159.03880310 158.86534119]
[151.82691956 145.71281433]
[150.40850830 130.78051758]
[142.94836426 117.76721191]
[143.25634766 132.76405334]
[143.56431580 147.76089478]
[143.87229919 162.75772095]
[144.18026733 177.75456238]
[144.48825073 192.75140381]
[144.79623413 207.74824524]
[145.10420227 222.74507141]
[145.41218567 237.74191284]
[145.72015381 252.73875427]
[146.02813721 267.73559570]
[160.73817444 271.03381348]
[174.23114014 277.75717163]
[185.72254944 287.51477051]
[194.54432678 299.73931885]
[200.18359375 313.72009277]
[202.31246948 328.64428711]
[200.80718994 343.64419556]
[195.75527954 357.84777832]
[187.45043945 370.42922974]
[176.37550354 380.65710449]
[163.17436218 387.93676758]
[148.61450195 391.84494019]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[24 52]
[25 51]
[26 50]
[27 49]
[28 48]
[56 97]
[57 96]
[58 95]
[60 93]
[61 92]
[85 91]
[86 90]
[98 115]
[99 114]
[101 112]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
