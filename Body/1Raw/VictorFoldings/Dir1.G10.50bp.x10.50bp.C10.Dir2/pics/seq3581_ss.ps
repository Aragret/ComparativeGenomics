%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCCCUCCCCAUACGGGGGGGGGGCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCxxxxxxxxxxUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCACCCCCCCCCCAAACCCCCUCCCCAUGC\
) } def
/len { sequence length } bind def

/coor [
[85.01728821 453.32617188]
[70.46566010 449.53695679]
[56.76379395 443.34283447]
[44.30591965 434.92208862]
[33.45047760 424.51690674]
[24.50979424 412.42675781]
[17.74111557 398.99942017]
[13.33918953 384.62127686]
[11.43066788 369.70599365]
[12.07046223 354.68273926]
[15.24016476 339.98370361]
[20.84857750 326.03189087]
[28.73433304 313.22863770]
[38.67054367 301.94238281]
[50.37132645 292.49783325]
[63.50002670 285.16671753]
[77.67890167 280.15997314]
[92.50000000 277.62164307]
[92.50000000 262.62164307]
[92.50000000 247.62164307]
[92.50000000 232.62164307]
[92.50000000 217.62164307]
[92.50000000 202.62164307]
[92.50000000 187.62164307]
[92.50000000 172.62164307]
[92.50000000 157.62164307]
[92.50000000 142.62164307]
[82.68537903 139.66180420]
[73.84230042 134.47650146]
[66.46694946 127.35668945]
[60.97316360 118.70188141]
[57.66920853 108.99768829]
[56.74047089 98.78862762]
[58.23906326 88.64753723]
[62.08089447 79.14344788]
[68.05039978 70.80963898]
[75.81262970 64.11371613]
[69.71157837 50.41053772]
[63.61052704 36.70735550]
[57.50947571 23.00417328]
[51.40842819 9.30099201]
[45.30737686 -4.40219021]
[39.20632935 -18.10537148]
[28.05915642 -28.14233208]
[13.79330826 -32.77758789]
[-0.47253948 -37.41284180]
[-14.43870831 -30.01543045]
[-29.52027512 -34.74003601]
[-36.76961136 -48.78363419]
[-31.88581848 -63.81440735]
[-17.76636124 -70.91486359]
[-2.78806376 -65.87242889]
[4.16271544 -51.67868805]
[18.42856407 -47.04343414]
[32.69441223 -42.40818024]
[38.50047302 -47.15577316]
[25.88177109 -55.26554108]
[29.69540787 -69.77265167]
[44.67097855 -70.62841797]
[50.11259842 -56.65095901]
[55.91865921 -61.39855194]
[54.20878983 -76.30078125]
[52.49891663 -91.20300293]
[50.78904724 -106.10523224]
[49.07917404 -121.00745392]
[47.36930466 -135.90968323]
[45.65943146 -150.81190491]
[30.70532036 -152.71925354]
[16.64245796 -158.15058899]
[4.28844357 -166.79013062]
[-5.63847828 -178.13560486]
[-12.56116962 -191.52737427]
[-16.07715225 -206.18688965]
[-15.98201466 -221.26185608]
[-12.28128529 -235.87582397]
[-5.19012070 -249.17915344]
[4.87920809 -260.39843750]
[17.34128380 -268.88134766]
[31.47157669 -274.13476562]
[46.44857025 -275.85321045]
[61.40152359 -273.93679810]
[75.46109009 -268.49694824]
[87.80986786 -259.84991455]
[97.72990417 -248.49842834]
[104.64447784 -235.10244751]
[108.15157318 -220.44081116]
[108.04729462 -205.36590576]
[104.33770752 -190.75419617]
[97.23847961 -177.45515442]
[87.16235352 -166.24198914]
[74.69513702 -157.76661682]
[60.56165695 -152.52177429]
[62.27153015 -137.61955261]
[63.98139954 -122.71733093]
[65.69126892 -107.81510162]
[67.40114594 -92.91287231]
[69.11101532 -78.01065063]
[70.82088470 -63.10842514]
[69.16353607 -35.81939697]
[52.90951157 -24.20642090]
[59.01055908 -10.50323963]
[65.11161041 3.19994211]
[71.21266174 16.90312386]
[77.31370544 30.60630608]
[83.41475677 44.30948639]
[89.51580811 58.01266861]
[111.70358276 58.33610153]
[130.81430054 69.61360931]
[141.82348633 88.88016510]
[156.76846313 87.59654236]
[171.71342468 86.31291199]
[174.69972229 71.50552368]
[181.73799133 58.13991928]
[192.25767517 47.29958344]
[205.40599060 39.86329651]
[220.11706543 36.43388367]
[235.19834900 37.28935242]
[249.42724609 42.36035538]
[261.65029907 51.23580551]
[270.87664795 63.19621658]
[276.35833740 77.27200317]
[277.65097046 92.32211304]
[274.64981079 107.12648773]
[267.59811401 120.48502350]
[257.06756592 131.31478882]
[243.91177368 138.73785400]
[229.19725037 142.15249634]
[214.11685181 141.28187561]
[199.89305115 136.19657898]
[187.67890930 127.30885315]
[178.46459961 115.33917999]
[172.99705505 101.25788879]
[158.05207825 102.54151917]
[143.10710144 103.82514191]
[139.59375000 117.46967316]
[131.88356018 129.26246643]
[120.79382324 137.95353699]
[107.50000000 142.62164307]
[107.50000000 157.62164307]
[107.50000000 172.62164307]
[107.50000000 187.62164307]
[107.50000000 202.62164307]
[107.50000000 217.62164307]
[107.50000000 232.62164307]
[107.50000000 247.62164307]
[107.50000000 262.62164307]
[107.50000000 277.62164307]
[122.32109833 280.15997314]
[136.49996948 285.16671753]
[149.62867737 292.49783325]
[161.32945251 301.94238281]
[171.26567078 313.22863770]
[179.15142822 326.03189087]
[184.75984192 339.98370361]
[187.92953491 354.68273926]
[188.56933594 369.70599365]
[186.66081238 384.62127686]
[182.25888062 398.99942017]
[175.49020386 412.42675781]
[166.54953003 424.51690674]
[155.69407654 434.92208862]
[143.23620605 443.34283447]
[129.53433228 449.53695679]
[114.98271179 453.32617188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 147]
[19 146]
[20 145]
[21 144]
[22 143]
[23 142]
[24 141]
[25 140]
[26 139]
[27 138]
[37 106]
[38 105]
[39 104]
[40 103]
[41 102]
[42 101]
[43 100]
[44 55]
[45 54]
[46 53]
[61 98]
[62 97]
[63 96]
[64 95]
[65 94]
[66 93]
[67 92]
[109 134]
[110 133]
[111 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
