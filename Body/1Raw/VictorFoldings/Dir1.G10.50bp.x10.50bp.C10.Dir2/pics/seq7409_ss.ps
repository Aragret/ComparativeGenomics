%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUCAAAAAGGGGGGGGGGGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAxxxxxxxxxxAAUGCUAAAACUAAUCGUCCCAACAAUUAUAUUACUACCACUGACAUGACCCCCCCCCCCUUUCCAAAAA\
) } def
/len { sequence length } bind def

/coor [
[159.73455811 434.90557861]
[145.24487305 430.69711304]
[132.33863831 422.88098145]
[121.89583588 411.99014282]
[114.62847137 398.76715088]
[111.03204346 384.11355591]
[111.35176849 369.02844238]
[115.56584167 354.54037476]
[123.38693237 341.63717651]
[134.28179932 331.19857788]
[147.50761414 323.93630981]
[162.16261292 320.34555054]
[162.47465515 305.34878540]
[162.78671265 290.35205078]
[163.09877014 275.35528564]
[163.41082764 260.35852051]
[163.72288513 245.36178589]
[164.03494263 230.36502075]
[164.34700012 215.36827087]
[164.65905762 200.37152100]
[164.97111511 185.37477112]
[165.28317261 170.37800598]
[165.59523010 155.38125610]
[160.84141541 141.15447998]
[151.57646179 129.35783386]
[142.31150818 117.56119537]
[133.04655457 105.76455688]
[123.78160858 93.96791840]
[122.87438965 128.15263367]
[78.91916656 143.13804626]
[64.05612183 145.16036987]
[49.19307327 147.18270874]
[36.56446075 157.64454651]
[21.28616905 151.68586731]
[19.07519722 135.43644714]
[32.20600510 125.61230469]
[47.17074203 132.31965637]
[62.03378677 130.29733276]
[76.89683533 128.27499390]
[78.29299927 120.90608978]
[81.08531952 106.16828156]
[82.48148346 98.79938507]
[69.38832855 91.48027802]
[56.29517365 84.16117096]
[43.20201874 76.84206390]
[30.10886574 69.52295685]
[17.01571083 62.20385361]
[3.92255688 54.88475037]
[-12.85331059 52.43390656]
[-15.14227009 35.63518524]
[0.36630189 28.78533173]
[11.24166203 41.79159546]
[24.33481598 49.11069870]
[37.42797089 56.42980576]
[50.52112579 63.74891281]
[63.61428070 71.06801605]
[76.70743561 78.38712311]
[89.80059052 85.70623016]
[96.26961517 81.91127014]
[109.20767212 74.32136536]
[115.67670441 70.52641296]
[115.67670441 55.52641296]
[107.93939972 41.72623825]
[115.67670441 28.99896622]
[115.67670441 13.99896717]
[115.67670441 -1.00103295]
[101.28353119 -5.65847301]
[89.03522491 -14.53733921]
[80.13175201 -26.76776886]
[75.44538879 -41.15155029]
[75.43525696 -56.27950668]
[80.10234070 -70.66955566]
[88.98941040 -82.91191101]
[101.22579956 -91.80718231]
[115.61272430 -96.48390198]
[130.74067688 -96.48390198]
[145.12759399 -91.80718231]
[157.36399841 -82.91191101]
[166.25106812 -70.66955566]
[170.91815186 -56.27950668]
[170.90800476 -41.15155029]
[166.22164917 -26.76776886]
[157.31817627 -14.53733921]
[145.06987000 -5.65847301]
[130.67669678 -1.00103295]
[130.67669678 13.99896717]
[130.67669678 28.99896622]
[138.41400146 41.72623825]
[130.67669678 55.52641296]
[130.67669678 70.52641296]
[135.57824707 84.70297241]
[144.84320068 96.49961090]
[154.10815430 108.29624939]
[163.37309265 120.09288788]
[172.63804626 131.88952637]
[181.38519287 125.44862366]
[194.50988770 124.28050995]
[209.44419861 122.87820435]
[224.37850952 121.47589874]
[226.73771667 106.58010101]
[232.72799683 92.73931122]
[241.97279358 80.82358551]
[253.89097595 71.58194733]
[267.73333740 65.59534454]
[282.62976074 63.24009323]
[297.64385986 64.66424561]
[311.83178711 69.77828217]
[324.30169678 78.26072693]
[334.26974487 89.57836914]
[341.10931396 103.01977539]
[344.39044189 117.73999786]
[343.90689087 132.81372070]
[339.68908691 147.29338074]
[332.00210571 160.26879883]
[321.32922363 170.92431641]
[308.34127808 178.59010315]
[293.85476685 182.78431702]
[278.78027344 183.24327087]
[264.06539917 179.93814087]
[250.63517761 173.07667542]
[239.33381653 163.09019470]
[230.87170410 150.60646057]
[225.78080750 136.41020203]
[210.84651184 137.81251526]
[195.91220093 139.21481323]
[207.85543823 148.29000854]
[204.98878479 163.01353455]
[190.51315308 166.94499207]
[180.59197998 155.69331360]
[180.27992249 170.69006348]
[179.96786499 185.68682861]
[179.65580750 200.68357849]
[179.34375000 215.68032837]
[179.03169250 230.67707825]
[178.71963501 245.67384338]
[178.40757751 260.67059326]
[178.09553528 275.66735840]
[177.78347778 290.66409302]
[177.47142029 305.66085815]
[177.15936279 320.65759277]
[191.65229797 324.85488892]
[204.56455994 332.66104126]
[215.01576233 343.54379272]
[222.29333496 356.76119995]
[225.90107727 371.41201782]
[225.59300232 386.49734497]
[221.39012146 400.98867798]
[213.57899475 413.89791870]
[202.69218445 424.34490967]
[189.47200012 431.61740112]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[24 95]
[25 94]
[26 93]
[27 92]
[28 91]
[30 39]
[31 38]
[32 37]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
[61 90]
[62 89]
[64 87]
[65 86]
[66 85]
[97 125]
[98 124]
[99 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
