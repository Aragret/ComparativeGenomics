%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAACCACAGGGGGGGGGGAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAxxxxxxxxxxAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGCCCCCCCCCCACAAAACACA\
) } def
/len { sequence length } bind def

/coor [
[43.46226120 614.40667725]
[29.61632156 608.39068604]
[17.90765953 598.86126709]
[9.20513535 586.52557373]
[4.15453339 572.29907227]
[3.13064218 557.23736572]
[6.20944118 542.45819092]
[13.16246319 529.05828857]
[23.47374725 518.03198242]
[36.37812805 510.19744873]
[50.91801453 506.13613892]
[50.91801453 491.13613892]
[50.91801453 476.13613892]
[50.91801453 461.13613892]
[50.91801453 446.13613892]
[50.91801453 431.13613892]
[50.91801453 416.13613892]
[50.91801453 401.13613892]
[50.91801453 386.13613892]
[50.91801453 371.13613892]
[43.18071365 358.40884399]
[50.91801453 344.60867310]
[50.91801453 329.60867310]
[37.35186005 320.41821289]
[31.85983658 304.80401611]
[36.78306198 288.82766724]
[50.37813950 278.81637573]
[50.06608200 263.81961060]
[49.75402451 248.82286072]
[49.28598404 233.83016968]
[48.66200638 218.84315491]
[48.03802872 203.85612488]
[40.80390549 216.99642944]
[30.58086967 227.97320557]
[17.98750496 236.12225342]
[3.78581524 240.95051575]
[-11.16487217 242.16581726]
[-25.95991135 239.69461060]
[-39.70407486 233.68646240]
[-51.56572342 224.50488281]
[-60.82712173 212.70545959]
[-66.92787933 199.00215149]
[-69.49884796 184.22412109]
[-68.38445282 169.26556396]
[-63.65213394 155.03163147]
[-55.58823395 142.38356018]
[-44.68068695 132.08670044]
[-31.58949852 124.76407623]
[-17.10679436 120.85878754]
[-2.10890579 120.60712433]
[12.49666691 124.02433014]
[25.82615852 130.90361023]
[37.07302094 140.82873535]
[45.55672073 153.19914246]
[50.76392365 167.26629639]
[52.37957764 182.17706299]
[58.72670746 168.58610535]
[65.07383728 154.99516296]
[71.42096710 141.40420532]
[71.40149689 133.96476746]
[78.04411316 127.59864807]
[84.67261505 114.14268494]
[75.43569183 94.44062805]
[89.04000092 72.59453583]
[88.10437012 57.62374115]
[87.16873932 42.65295029]
[72.69261932 38.09154510]
[60.84425735 28.60572815]
[53.22604370 15.47838211]
[50.86827469 0.48487157]
[54.08982468 -14.34705544]
[62.45500565 -27.01150131]
[74.83249664 -35.79570389]
[89.54833984 -39.51167297]
[104.61233521 -37.65685272]
[117.98721313 -30.48209381]
[127.86412048 -18.95772171]
[132.90728760 -4.64231443]
[132.43467712 10.52808666]
[126.51019287 24.50181007]
[115.93508148 35.38902283]
[102.13953400 41.71732330]
[103.07516479 56.68811417]
[104.01078796 71.65890503]
[117.79317474 77.57886505]
[129.29496765 67.95034027]
[140.79678345 58.32181549]
[152.29858398 48.69329071]
[163.80038452 39.06476212]
[159.21276855 24.57262230]
[160.52523804 9.42845345]
[167.53765869 -4.05836821]
[179.18069458 -13.83119965]
[193.67884827 -18.39975548]
[208.82128906 -17.06736374]
[222.29887390 -10.03720474]
[232.05638123 1.61867356]
[236.60585022 16.12283325]
[235.25354004 31.26349831]
[228.20565796 44.73182297]
[216.53695679 54.47398758]
[202.02682495 59.00438690]
[186.88795471 57.63216019]
[173.42890930 50.56656647]
[161.92710876 60.19509506]
[150.42530823 69.82361603]
[138.92350769 79.45214844]
[127.42169952 89.08067322]
[125.43241119 107.89264679]
[113.20947266 119.72812653]
[98.12857819 120.77118683]
[91.50008392 134.22714233]
[85.01191711 147.75134277]
[78.66478729 161.34228516]
[72.31765747 174.93324280]
[65.97052765 188.52418518]
[63.02504349 203.23214722]
[63.64902115 218.21917725]
[64.27300262 233.20619202]
[67.77561188 241.71403503]
[64.75077820 248.51080322]
[65.06283569 263.50756836]
[65.37489319 278.50430298]
[77.27451324 285.53268433]
[84.07878113 297.43710327]
[84.09542084 311.04043579]
[77.42745972 322.77285767]
[65.91801453 329.60867310]
[65.91801453 344.60867310]
[73.65531158 358.40884399]
[65.91801453 371.13613892]
[65.91801453 386.13613892]
[65.91801453 401.13613892]
[65.91801453 416.13613892]
[65.91801453 431.13613892]
[65.91801453 446.13613892]
[65.91801453 461.13613892]
[65.91801453 476.13613892]
[65.91801453 491.13613892]
[65.91801453 506.13613892]
[80.45790100 510.19744873]
[93.36228180 518.03198242]
[103.67356873 529.05828857]
[110.62658691 542.45819092]
[113.70539093 557.23736572]
[112.68149567 572.29907227]
[107.63089752 586.52557373]
[98.92836761 598.86126709]
[87.21971130 608.39068604]
[73.37377167 614.40667725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[27 123]
[28 122]
[29 121]
[30 119]
[31 118]
[32 117]
[56 116]
[57 115]
[58 114]
[59 113]
[61 112]
[62 111]
[64 84]
[65 83]
[66 82]
[85 108]
[86 107]
[87 106]
[88 105]
[89 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
