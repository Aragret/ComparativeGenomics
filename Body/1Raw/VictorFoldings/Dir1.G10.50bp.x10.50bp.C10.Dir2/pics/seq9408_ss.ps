%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUCCCCCGCGGGGGGGGGGCCGCGUCCCUUUCUCCAUAAAAUUCUUCUUAGUAGCUAUUACCUUCUUAUxxxxxxxxxxAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACCCCCCCCCCCAUUUCCCCCGC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 360.65200806]
[71.01555634 355.09899902]
[58.81560135 346.23266602]
[49.20452881 334.61035156]
[42.78650284 320.96264648]
[39.96496582 306.14746094]
[40.91728210 291.09609985]
[45.58358765 276.75466919]
[53.67055511 264.02471924]
[64.66983032 253.70643616]
[77.88998413 246.44845581]
[92.50000000 242.70701599]
[92.50000000 227.70701599]
[92.50000000 212.70701599]
[92.50000000 197.70701599]
[92.50000000 182.70701599]
[92.50000000 167.70701599]
[92.50000000 152.70701599]
[92.50000000 137.70701599]
[92.50000000 122.70702362]
[92.50000000 107.70702362]
[89.59252930 92.99150085]
[83.88786316 79.11861420]
[78.04107666 65.30503082]
[72.05278015 51.55220413]
[66.06448364 37.79937744]
[51.88668442 42.72002792]
[37.37381744 46.54093933]
[22.61104012 49.23967743]
[7.68499374 50.80041504]
[-7.31672955 51.21398544]
[-22.30609322 50.47796631]
[-37.19513321 48.59667587]
[-51.89647293 45.58115387]
[-66.32383728 41.44909286]
[-80.39256287 36.22475052]
[-94.02008057 29.93877792]
[-107.12642670 22.62806892]
[-119.63468170 14.33552361]
[-131.47143555 5.10980749]
[-142.56724548 -4.99493933]
[-152.85697937 -15.91941643]
[-162.28024292 -27.59951591]
[-170.78175354 -39.96669006]
[-178.31163025 -52.94836426]
[-184.82565308 -66.46836090]
[-190.28561401 -80.44732666]
[-194.65946960 -94.80323792]
[-197.92153931 -109.45184326]
[-200.05270386 -124.30717468]
[-201.04045105 -139.28205872]
[-200.87895203 -154.28860474]
[-199.56919861 -169.23876953]
[-197.11885071 -184.04479980]
[-193.54229736 -198.61981201]
[-188.86053467 -212.87828064]
[-183.10101318 -226.73651123]
[-176.29756165 -240.11320496]
[-168.49008179 -252.92982483]
[-159.72439575 -265.11120605]
[-150.05195618 -276.58581543]
[-139.52952576 -287.28631592]
[-128.21884155 -297.14996338]
[-116.18629456 -306.11880493]
[-103.50248718 -314.14025879]
[-90.24185181 -321.16723633]
[-76.48221588 -327.15850830]
[-62.30432510 -332.07888794]
[-47.79138565 -335.89953613]
[-33.02855682 -338.59799194]
[-18.10248184 -340.15844727]
[-3.10074973 -340.57171631]
[11.88860035 -339.83541870]
[26.77760315 -337.95385742]
[41.47888565 -334.93804932]
[55.90617371 -330.80572510]
[69.97479248 -325.58111572]
[83.60219574 -319.29486084]
[96.70840454 -311.98391724]
[109.21649933 -303.69113159]
[121.05308533 -294.46517944]
[132.14869690 -284.36022949]
[142.43821716 -273.43557739]
[151.86126709 -261.75527954]
[160.36254883 -249.38795471]
[167.89216614 -236.40612793]
[174.40594482 -222.88601685]
[179.86563110 -208.90693665]
[184.23921204 -194.55094910]
[187.50102234 -179.90228271]
[189.63189697 -165.04692078]
[190.61935425 -150.07200623]
[190.45758057 -135.06546021]
[189.14753723 -120.11532593]
[186.69691467 -105.30934143]
[183.12008667 -90.73439789]
[178.43804932 -76.47602081]
[172.67826843 -62.61789322]
[165.87455750 -49.24133682]
[158.06683350 -36.42485428]
[149.30091858 -24.24365616]
[139.62826538 -12.76922894]
[129.10562134 -2.06890965]
[117.79476166 7.79450750]
[105.76203918 16.76313972]
[93.07807922 24.78435516]
[79.81731415 31.81107903]
[85.80561066 45.56390762]
[91.79390717 59.31673813]
[97.38224030 64.22415161]
[97.76074219 73.41395569]
[103.46540833 87.28683472]
[105.79983521 72.46959686]
[112.32395935 58.96271896]
[122.47900391 47.92301559]
[135.39523315 40.29600906]
[149.96638489 36.73492813]
[164.94450378 37.54476547]
[179.04676819 42.65616608]
[191.06533813 51.63135147]
[199.97087097 63.70162201]
[205.00064087 77.83319855]
[205.72384644 92.81575775]
[202.07855225 107.36608124]
[194.37698364 120.23797607]
[183.27874756 130.32901001]
[169.73435974 136.77491760]
[154.90388489 139.02362061]
[140.05747986 136.88253784]
[126.46669769 130.53501892]
[115.29557037 120.52474213]
[107.50000000 107.70702362]
[107.50000000 122.70702362]
[107.50000000 137.70701599]
[107.50000000 152.70701599]
[107.50000000 167.70701599]
[107.50000000 182.70701599]
[107.50000000 197.70701599]
[107.50000000 212.70701599]
[107.50000000 227.70701599]
[107.50000000 242.70701599]
[122.11001587 246.44845581]
[135.33016968 253.70643616]
[146.32945251 264.02471924]
[154.41641235 276.75466919]
[159.08271790 291.09609985]
[160.03503418 306.14746094]
[157.21350098 320.96264648]
[150.79547119 334.61035156]
[141.18440247 346.23266602]
[128.98443604 355.09899902]
[114.96250153 360.65200806]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 112]
[23 111]
[24 109]
[25 108]
[26 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
