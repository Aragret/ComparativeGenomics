%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUACUCCUGCUGGGGGGGGGGCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUACCxxxxxxxxxxUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCCCCCCCCCCCUACUCCUCCU\
) } def
/len { sequence length } bind def

/coor [
[94.62158203 681.43096924]
[80.25933075 676.92425537]
[67.09844208 669.61840820]
[55.67784500 659.81250000]
[46.46520233 647.90820312]
[39.83777618 634.39294434]
[36.06694794 619.82019043]
[35.30712891 604.78668213]
[37.58943939 589.90795898]
[42.82041550 575.79333496]
[50.78585434 563.02087402]
[61.15957642 552.11346436]
[73.51678467 543.51788330]
[87.35145569 537.58605957]
[102.09706879 534.56085205]
[102.09706879 519.56085205]
[102.09706879 504.56085205]
[102.09706879 489.56085205]
[102.09706879 474.56085205]
[102.09706879 459.56085205]
[102.09706879 444.56085205]
[102.09706879 429.56085205]
[102.09706879 414.56085205]
[102.09706879 399.56085205]
[102.09706879 384.56085205]
[86.60526276 378.58230591]
[74.55595398 367.10314941]
[67.80440521 351.85214233]
[67.40495300 335.14166260]
[73.44651031 319.51715088]
[85.03468323 307.36938477]
[100.42411804 300.56860352]
[99.83152008 285.58032227]
[99.23891449 270.59204102]
[85.51442719 264.75219727]
[75.64591217 253.48623657]
[71.63101959 238.99342346]
[74.31771851 224.13401794]
[83.22580719 211.86482239]
[96.63176727 204.65084839]
[96.03916931 189.66255188]
[95.44657135 174.67427063]
[94.85397339 159.68597412]
[94.26137543 144.69769287]
[93.66877747 129.70939636]
[93.07617950 114.72110748]
[84.99598694 106.28730011]
[84.64987946 94.61258698]
[92.21624756 85.71491241]
[91.91989136 70.71784210]
[82.03032684 55.21391678]
[91.03254700 40.17624664]
[90.43994904 25.18795776]
[89.84735107 10.19966698]
[87.32344055 6.51804495]
[86.24533844 2.61592078]
[86.50045776 -1.01477790]
[87.82495880 -3.97192192]
[89.84735107 -5.98553085]
[90.43994904 -20.97381973]
[90.88445282 -35.96723175]
[91.18080902 -50.96430588]
[91.47716522 -65.96138000]
[76.73287201 -68.93553925]
[62.75666428 -74.49479675]
[49.99781418 -82.46044159]
[38.86647034 -92.57641602]
[29.72045517 -104.51753235]
[22.85377693 -117.89992523]
[18.48717117 -132.29341125]
[16.76100731 -147.23530579]
[17.73077202 -162.24528503]
[21.36529350 -176.84083557]
[27.54773712 -190.55276489]
[36.07936096 -202.94030762]
[46.68590927 -213.60525513]
[59.02642441 -222.20474243]
[72.70420837 -228.46237183]
[87.27958679 -232.17697144]
[102.28401184 -233.22912598]
[117.23515320 -231.58502197]
[131.65240479 -227.29750061]
[145.07229614 -220.50439453]
[157.06343079 -211.42407227]
[167.24037170 -200.34843445]
[175.27593994 -187.63351440]
[180.91184998 -173.68803406]
[183.96690369 -158.96028137]
[184.34292603 -143.92372131]
[182.02780151 -129.06169128]
[177.09596252 -114.85194397]
[169.70596313 -101.75127411]
[160.09533691 -90.18081665]
[148.57302856 -80.51249695]
[135.50944519 -73.05712891]
[121.32451630 -68.05436707]
[106.47423553 -65.66501617]
[106.17787933 -50.66794968]
[105.88152313 -35.67087555]
[108.90971375 -28.88507843]
[105.42823792 -20.38122177]
[104.83563995 -5.39293194]
[104.83563995 9.60706806]
[105.42823792 24.59535789]
[106.02084351 39.58364868]
[114.70719910 48.05009842]
[115.29341888 60.56776810]
[106.91696167 70.42148590]
[107.21331787 85.41855621]
[116.26093292 99.51792145]
[108.06446838 114.12850952]
[108.65706635 129.11680603]
[109.24966431 144.10508728]
[109.84226227 159.09338379]
[110.43486023 174.08166504]
[111.02745819 189.06996155]
[111.62005615 204.05824280]
[125.55373383 210.19128418]
[135.40267944 221.71887207]
[139.25416565 236.31976318]
[136.39604187 251.08432007]
[127.44779205 263.09423828]
[114.22721100 269.99945068]
[114.81980896 284.98773193]
[115.41240692 299.97601318]
[128.31561279 303.93472290]
[139.34385681 311.67587280]
[147.42451477 322.42929077]
[151.77696228 335.13262939]
[151.98803711 348.53640747]
[148.05117798 361.32684326]
[140.36567688 372.25460815]
[129.69628906 380.25692749]
[117.09706879 384.56085205]
[117.09706879 399.56085205]
[117.09706879 414.56085205]
[117.09706879 429.56085205]
[117.09706879 444.56085205]
[117.09706879 459.56085205]
[117.09706879 474.56085205]
[117.09706879 489.56085205]
[117.09706879 504.56085205]
[117.09706879 519.56085205]
[117.09706879 534.56085205]
[131.84268188 537.58605957]
[145.67735291 543.51788330]
[158.03456116 552.11346436]
[168.40827942 563.02087402]
[176.37371826 575.79333496]
[181.60470581 589.90795898]
[183.88700867 604.78668213]
[183.12719727 619.82019043]
[179.35636902 634.39294434]
[172.72894287 647.90820312]
[163.51629639 659.81250000]
[152.09570312 669.61840820]
[138.93481445 676.92425537]
[124.57255554 681.43096924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[32 125]
[33 124]
[34 123]
[40 117]
[41 116]
[42 115]
[43 114]
[44 113]
[45 112]
[46 111]
[49 109]
[50 108]
[52 105]
[53 104]
[54 103]
[59 102]
[60 101]
[61 99]
[62 98]
[63 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
