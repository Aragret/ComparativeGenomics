%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCCCUAGGGGGGGGGGGACCUCAACUACCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAxxxxxxxxxxGAGGGGCCACAGUAAUUACAAACUUACUAUCCGCCAUCCCAUACAUUGGGCCCCCCCCCCACAGACCUAG\
) } def
/len { sequence length } bind def

/coor [
[79.43975067 383.45965576]
[66.56647491 375.55676270]
[56.44218063 364.34625244]
[49.88759613 350.73693848]
[47.43407440 335.83200073]
[49.28050995 320.83975220]
[55.27722549 306.97555542]
[64.93808746 295.36331177]
[77.47993469 286.94433594]
[91.88605499 282.40118408]
[91.57399750 267.40441895]
[91.26194000 252.40766907]
[90.94988251 237.41091919]
[90.63783264 222.41416931]
[90.32577515 207.41741943]
[90.01371765 192.42065430]
[89.70166016 177.42390442]
[89.38960266 162.42715454]
[89.07754517 147.43040466]
[72.74487305 124.03366852]
[76.11758423 102.41751862]
[89.87711334 94.19183350]
[77.79712677 85.29948425]
[65.71714020 76.40713501]
[53.63714981 67.51478577]
[43.46001434 78.55513000]
[32.13010406 88.40887451]
[19.78494644 96.95640564]
[6.57440186 104.09396362]
[-7.34116411 109.73490143]
[-21.79282951 113.81075287]
[-36.60516739 116.27203369]
[-51.59836197 117.08886719]
[-66.59041595 116.25133514]
[-81.39934540 113.76960754]
[-95.84536743 109.67381287]
[-109.75313568 104.01367188]
[-122.95381165 96.85788727]
[-135.28715515 88.29331970]
[-146.60345459 78.42394257]
[-156.76533508 67.36956787]
[-165.64944458 55.26436996]
[-173.14794922 42.25530243]
[-179.16979980 28.50028419]
[-183.64190674 14.16628933]
[-186.50997925 -0.57268363]
[-187.73921204 -15.53771496]
[-187.31468201 -30.54714394]
[-185.24153137 -45.41876984]
[-181.54493713 -59.97206497]
[-176.26977539 -74.03036499]
[-169.48007202 -87.42301178]
[-161.25823975 -99.98744202]
[-151.70410156 -111.57112122]
[-140.93363953 -122.03343964]
[-129.07757568 -131.24740601]
[-116.27984619 -139.10115051]
[-102.69580078 -145.49934387]
[-88.49033356 -150.36431885]
[-73.83589935 -153.63702393]
[-58.91037369 -155.27772522]
[-43.89494705 -155.26651001]
[-28.97188759 -153.60351562]
[-14.32235432 -150.30891418]
[-0.12417450 -145.42272949]
[13.45029736 -139.00424194]
[26.23628044 -131.13139343]
[38.07856369 -121.89973450]
[48.83339310 -111.42133331]
[58.37021637 -99.82339478]
[66.57326508 -87.24670410]
[73.34295654 -73.84392548]
[78.59711456 -59.77775955]
[82.27196503 -45.21895981]
[84.32289124 -30.34425354]
[84.72500610 -15.33420658]
[83.47341919 -0.37102759]
[80.58332062 14.36364460]
[76.08980560 28.69094276]
[70.04741669 42.43695068]
[62.52949905 55.43479919]
[74.60948944 64.32714844]
[86.68947601 73.21949768]
[98.76946259 82.11184692]
[113.75647736 82.73582458]
[126.53383636 74.87840271]
[139.31118774 67.02097321]
[140.36724854 50.17054749]
[151.13360596 37.38121796]
[167.23471069 33.54449463]
[182.30673218 39.97407532]
[194.91786194 31.85253334]
[207.52899170 23.73099136]
[220.14012146 15.60944843]
[232.75125122 7.48790598]
[233.48796082 -8.01167011]
[243.22064209 -20.09697342]
[258.20687866 -24.12095642]
[272.68414307 -18.53631592]
[281.08566284 -5.49046183]
[280.18084717 10.00021076]
[270.31762695 21.97922134]
[255.28862000 25.84039688]
[240.87278748 20.09903526]
[228.26165771 28.22057724]
[215.65052795 36.34211731]
[203.03939819 44.46366119]
[190.42826843 52.58520126]
[190.91271973 65.96284485]
[184.65905762 77.92124176]
[173.21318054 85.27257538]
[159.52055359 85.99742126]
[147.16862488 79.79833221]
[134.39126587 87.65575409]
[121.61390686 95.51318359]
[122.00382996 103.00304413]
[122.78367615 117.98275757]
[123.17359924 125.47261047]
[136.69778442 131.96078491]
[150.22196960 138.44894409]
[163.74617004 144.93710327]
[179.29704285 140.99382019]
[191.98822021 150.80776978]
[192.08410645 166.85052490]
[179.51115417 176.81547546]
[163.91424561 173.05834961]
[157.25799561 158.46130371]
[143.73381042 151.97312927]
[130.20962524 145.48497009]
[116.68543243 138.99679565]
[104.07430267 147.11834717]
[104.38636017 162.11509705]
[104.69841766 177.11184692]
[105.01046753 192.10861206]
[105.32252502 207.10536194]
[105.63458252 222.10211182]
[105.94664001 237.09886169]
[106.25869751 252.09562683]
[106.57075500 267.09237671]
[106.88280487 282.08914185]
[121.46544647 286.02908325]
[134.34664917 293.91903687]
[144.48220825 305.11935425]
[151.05046082 318.72210693]
[153.51895142 333.62454224]
[151.68757629 348.61865234]
[145.70480347 362.48886108]
[136.05560303 374.11080933]
[123.52222443 382.54235840]
[109.12067413 387.10000610]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[22 84]
[23 83]
[24 82]
[25 81]
[85 115]
[86 114]
[87 113]
[91 108]
[92 107]
[93 106]
[94 105]
[95 104]
[118 130]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
