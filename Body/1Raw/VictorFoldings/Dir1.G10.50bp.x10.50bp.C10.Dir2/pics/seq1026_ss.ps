%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACGAUCAGGGGGGGGGGAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUxxxxxxxxxxUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGACCCCCCCCCCACCACUAUCA\
) } def
/len { sequence length } bind def

/coor [
[98.76956177 373.76080322]
[84.92362213 367.74478149]
[73.21495819 358.21536255]
[64.51243591 345.87969971]
[59.46183395 331.65316772]
[58.43794632 316.59149170]
[61.51674271 301.81234741]
[68.46976471 288.41241455]
[78.78105164 277.38607788]
[91.68543243 269.55157471]
[106.22531891 265.49026489]
[106.22531891 250.49026489]
[106.22531891 235.49026489]
[106.22531891 220.49026489]
[106.22531891 205.49026489]
[106.22531891 190.49026489]
[106.22531891 175.49026489]
[106.22531891 160.49026489]
[106.22531891 145.49026489]
[106.22531891 130.49026489]
[85.06174469 125.14602661]
[73.82341766 108.02025604]
[76.92409515 89.13244629]
[65.83277893 79.03379059]
[54.74146271 68.93514252]
[43.65014648 58.83649445]
[25.59771156 55.35950851]
[20.86059189 38.49061203]
[9.56158638 28.62488937]
[-3.21577096 20.76746368]
[-17.11832619 15.13550758]
[-31.02088356 9.50355148]
[-44.56442642 20.61517906]
[-61.77645493 23.36208916]
[-77.94062805 17.08211327]
[-88.67333984 3.57424164]
[-91.11243439 -13.41561031]
[-105.23723602 -18.46436691]
[-119.36203766 -23.51312256]
[-131.37503052 -18.70253372]
[-143.06146240 -23.24636459]
[-148.32063293 -34.18475723]
[-162.33734131 -39.52627182]
[-176.35406494 -44.86778259]
[-192.45027161 -41.73028564]
[-203.00994873 -54.27720642]
[-197.17019653 -69.60134888]
[-180.93846130 -71.93855286]
[-171.01254272 -58.88449478]
[-156.99583435 -53.54298401]
[-142.97912598 -48.20146942]
[-125.86168671 -51.94226456]
[-114.31327820 -37.63792801]
[-100.18847656 -32.58916855]
[-86.06367493 -27.54041290]
[-77.31371307 -36.75115967]
[-65.67818451 -41.96722794]
[-52.88658905 -42.37427521]
[-40.85514832 -37.87570190]
[-31.39974785 -29.11245155]
[-25.96187401 -17.37194061]
[-25.38892555 -4.39900494]
[-11.48637009 1.23295176]
[2.41618562 6.86490870]
[-6.28895855 -5.35067415]
[-10.38371468 -19.78095436]
[-9.39198971 -34.74813461]
[-3.42908859 -48.51199341]
[6.81168556 -59.47221756]
[20.13964653 -66.35447693]
[35.00516510 -68.35856628]
[49.67983627 -65.25148010]
[62.45745468 -57.39447403]
[71.85237122 -45.70107651]
[76.77224731 -31.53087044]
[76.64505768 -16.53140831]
[71.48558807 -2.44667053]
[61.89371872 9.08572483]
[48.98470306 16.72491455]
[34.25944901 19.58269882]
[19.42730904 17.32588577]
[30.72631454 27.19160843]
[42.85326004 26.69711304]
[52.35356140 34.88022232]
[53.74879837 47.74517822]
[64.84011078 57.84383011]
[75.93142700 67.94248199]
[87.02274323 78.04113007]
[95.83679962 73.88750458]
[105.90930176 73.26766205]
[115.82783508 76.52425385]
[124.10800171 83.43864441]
[129.41453552 93.22854614]
[130.77267456 104.63172150]
[145.75239563 103.85187531]
[160.73210144 103.07202911]
[175.71182251 102.29218292]
[182.13453674 85.60224915]
[195.13897705 73.40338135]
[212.10466003 68.09101868]
[229.64007568 70.67921448]
[244.26058960 80.60741425]
[253.08094788 95.86108398]
[267.98284912 94.14839172]
[282.88473511 92.43569946]
[297.78665161 90.72301483]
[305.29678345 77.14444733]
[319.36813354 70.60402679]
[334.58993530 73.61666870]
[345.10913086 85.02395630]
[346.88085938 100.43955231]
[339.22384644 113.93584442]
[325.08239746 120.32323456]
[309.89416504 117.14564514]
[299.49932861 105.62491608]
[284.59744263 107.33760834]
[269.69552612 109.05029297]
[254.79362488 110.76298523]
[252.01007080 122.78217316]
[245.63906860 133.37583923]
[236.29011536 141.50111389]
[224.86671448 146.35267639]
[212.47904968 147.44253540]
[200.33616638 144.64912415]
[189.62785339 138.23060608]
[181.40817261 128.80107117]
[176.49166870 117.27189636]
[161.51194763 118.05174255]
[146.53224182 118.83158875]
[131.55252075 119.61143494]
[121.22531891 130.49026489]
[121.22531891 145.49026489]
[121.22531891 160.49026489]
[121.22531891 175.49026489]
[121.22531891 190.49026489]
[121.22531891 205.49026489]
[121.22531891 220.49026489]
[121.22531891 235.49026489]
[121.22531891 250.49026489]
[121.22531891 265.49026489]
[135.76519775 269.55157471]
[148.66958618 277.38607788]
[158.98086548 288.41241455]
[165.93388367 301.81234741]
[169.01269531 316.59149170]
[167.98880005 331.65316772]
[162.93820190 345.87969971]
[154.23567200 358.21536255]
[142.52700806 367.74478149]
[128.68107605 373.76080322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 88]
[24 87]
[25 86]
[26 85]
[28 82]
[29 81]
[30 64]
[31 63]
[32 62]
[37 55]
[38 54]
[39 53]
[42 51]
[43 50]
[44 49]
[94 130]
[95 129]
[96 128]
[97 127]
[103 118]
[104 117]
[105 116]
[106 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
