%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUCCAAACCCGGGGGGGGGGCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUACAxxxxxxxxxxCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACCCCCCCCCCCUCAUCCUAACCC\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 514.13372803]
[70.75619507 509.32427979]
[57.85220718 501.55886841]
[46.91955185 491.20074463]
[38.46956635 478.73431396]
[32.89747238 464.74267578]
[30.46388245 449.88024902]
[31.28262329 434.84216309]
[35.31539917 420.33178711]
[42.37359238 407.02783203]
[52.12707901 395.55245972]
[64.11966705 386.44247437]
[77.79044342 380.12393188]
[92.50000000 376.89239502]
[92.50000000 361.89239502]
[92.50000000 346.89239502]
[92.50000000 331.89239502]
[92.50000000 316.89239502]
[92.50000000 301.89239502]
[92.50000000 286.89239502]
[92.50000000 271.89239502]
[92.50000000 256.89239502]
[92.50000000 241.89237976]
[80.36157990 233.30187988]
[75.55226898 219.04232788]
[80.11502075 204.51530457]
[92.50000000 195.35459900]
[92.50000000 180.35459900]
[92.50000000 165.35459900]
[92.50000000 150.35459900]
[82.13632202 147.67309570]
[72.56247711 142.88375854]
[64.20175934 136.19836426]
[57.42383957 127.91246033]
[52.52839661 118.39244080]
[49.73187637 108.05920410]
[49.15792847 97.36963654]
[50.83192825 86.79637146]
[37.07635880 80.81436920]
[23.32079124 74.83236694]
[9.56522274 68.85037231]
[12.23238087 83.61133575]
[2.51006603 95.03397369]
[-12.48742771 94.75977325]
[-21.78569794 82.98937988]
[-18.58074379 68.33576965]
[-5.21805477 61.52171707]
[-18.30732727 54.19567108]
[-31.39660072 46.86962509]
[-47.16473770 49.82689285]
[-59.21343994 39.23405075]
[-58.29998016 23.21702385]
[-45.12508011 14.06270409]
[-29.79539871 18.79350090]
[-24.07055664 33.78035355]
[-10.98128319 41.10639572]
[2.10799003 48.43244171]
[15.54722309 55.09479904]
[29.30279160 61.07680130]
[43.05836105 67.05879974]
[56.81393051 73.04080200]
[63.07315826 64.95369720]
[70.82237244 58.28068924]
[79.74887848 53.29103470]
[89.49251556 50.18606567]
[88.59259796 35.21308517]
[87.69268799 20.24010658]
[73.00328827 16.67457962]
[60.01830673 8.93625355]
[49.89236069 -2.28678560]
[43.52584076 -15.99659348]
[41.48485184 -30.97410202]
[43.95087814 -45.88752365]
[50.70464706 -59.41076279]
[61.14561081 -70.34134674]
[74.34536743 -77.70733643]
[89.13021088 -80.85374451]
[104.18547821 -79.50080109]
[118.17245483 -73.76881409]
[129.84744263 -64.16745758]
[138.17230225 -51.55047989]
[142.40679932 -37.03977966]
[142.17440796 -21.92563248]
[137.49577332 -7.55198288]
[128.78694153 4.80307722]
[116.82226562 14.04094315]
[102.66566467 19.34019089]
[103.56558228 34.31317139]
[104.46549988 49.28615189]
[119.64360809 53.03231049]
[132.96932983 61.20750046]
[143.18606567 73.04080200]
[156.94163513 67.05879974]
[170.69720459 61.07680130]
[184.45277405 55.09479904]
[181.91558838 40.23458099]
[183.00909424 25.19903564]
[187.66975403 10.86230755]
[195.62657166 -1.94208241]
[206.41697693 -12.46970463]
[219.41358948 -20.10849762]
[233.86085510 -24.41435051]
[248.91877747 -25.13692665]
[263.71194458 -22.23421669]
[277.38027954 -15.87498283]
[289.12915039 -6.42893934]
[298.27545166 5.55473185]
[304.28747559 19.37931633]
[306.81564331 34.24106979]
[305.71301270 49.27595139]
[301.04367065 63.60984802]
[293.07910156 76.40941620]
[282.28231812 86.93048859]
[269.28106689 94.56140137]
[254.83120728 98.85849762]
[239.77284241 99.57194519]
[224.98144531 96.66027069]
[211.31695557 90.29274750]
[199.57382202 80.83958435]
[190.43478394 68.85037231]
[176.67921448 74.83236694]
[162.92364502 80.81436920]
[149.16807556 86.79637146]
[150.26812744 108.05920410]
[142.57615662 127.91246033]
[127.43752289 142.88375854]
[107.50000000 150.35459900]
[107.50000000 165.35459900]
[107.50000000 180.35459900]
[107.50000000 195.35459900]
[119.88497925 204.51530457]
[124.44773102 219.04232788]
[119.63842010 233.30187988]
[107.50000000 241.89237976]
[107.50000000 256.89239502]
[107.50000000 271.89239502]
[107.50000000 286.89239502]
[107.50000000 301.89239502]
[107.50000000 316.89239502]
[107.50000000 331.89239502]
[107.50000000 346.89239502]
[107.50000000 361.89239502]
[107.50000000 376.89239502]
[122.20955658 380.12393188]
[135.88034058 386.44247437]
[147.87292480 395.55245972]
[157.62640381 407.02783203]
[164.68460083 420.33178711]
[168.71737671 434.84216309]
[169.53611755 449.88024902]
[167.10252380 464.74267578]
[161.53042603 478.73431396]
[153.08044434 491.20074463]
[142.14779663 501.55886841]
[129.24380493 509.32427979]
[114.97203827 514.13372803]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[27 130]
[28 129]
[29 128]
[30 127]
[38 61]
[39 60]
[40 59]
[41 58]
[47 57]
[48 56]
[49 55]
[65 89]
[66 88]
[67 87]
[92 123]
[93 122]
[94 121]
[95 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
