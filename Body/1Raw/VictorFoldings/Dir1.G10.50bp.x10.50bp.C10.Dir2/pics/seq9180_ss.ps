%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCACGUCAGGGGGGGGGGUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUCCGCCAACUAAUAUUUxxxxxxxxxxCAAUCGCCCACAUCACUCGAGACGUAAAUUAUGGCUGAAUCAUCCGCUACCCCCCCCCCCCUUCACGCCA\
) } def
/len { sequence length } bind def

/coor [
[77.87727356 453.01480103]
[64.65708160 445.74234009]
[53.77027512 435.29534912]
[45.95914459 422.38607788]
[41.75626373 407.89477539]
[41.44818878 392.80944824]
[45.05593109 378.15859985]
[52.33350372 364.94122314]
[62.78471375 354.05844116]
[75.69697571 346.25231934]
[90.18991089 342.05502319]
[89.87785339 327.05825806]
[89.56579590 312.06152344]
[89.25373840 297.06475830]
[88.94168854 282.06799316]
[88.62963104 267.07125854]
[88.31757355 252.07449341]
[88.00551605 237.07774353]
[87.69345856 222.08099365]
[87.38140106 207.08424377]
[87.06935120 192.08747864]
[85.07251740 190.03321838]
[83.79656982 187.03890991]
[83.61341858 183.38536072]
[84.78258514 179.48612976]
[87.40736389 175.84304810]
[88.34299469 160.87225342]
[89.27862549 145.90145874]
[79.26211548 134.93765259]
[79.99771118 119.74181366]
[91.56548309 109.30991364]
[82.62368011 121.35334778]
[69.98935699 129.43875122]
[55.30781937 132.51322937]
[40.49096680 130.17637634]
[27.46832848 122.73252106]
[17.93578148 111.15104675]
[13.13470268 96.94014740]
[13.69031334 81.95043945]
[19.53025818 68.13396454]
[29.89403152 57.28997040]
[43.43200684 50.83061981]
[58.38119888 49.59708023]
[72.79485321 53.74999619]
[84.79593658 62.74854660]
[92.82161713 75.42089844]
[95.82671356 90.11501312]
[101.31374359 76.15462494]
[99.16082764 60.48058319]
[111.01753998 51.46572495]
[116.50457001 37.50533295]
[121.99160004 23.54494286]
[127.47863007 9.58455372]
[126.67531586 4.29548359]
[127.89942169 -0.29297298]
[130.52946472 -3.51548886]
[133.76803589 -5.05792570]
[140.11515808 -18.64887619]
[146.46229553 -32.23982620]
[152.80941772 -45.83078003]
[152.61495972 -52.54417419]
[155.45274353 -57.56197357]
[159.71371460 -59.84661102]
[166.62071228 -73.16176605]
[173.52770996 -86.47692108]
[180.43470764 -99.79207611]
[168.24391174 -108.57855988]
[157.46241760 -119.04647064]
[148.32002258 -130.97268677]
[141.01161194 -144.10298157]
[135.69294739 -158.15751648]
[132.47741699 -172.83668518]
[131.43354797 -187.82763672]
[132.58360291 -202.81079102]
[135.90304565 -217.46682739]
[141.32115173 -231.48332214]
[148.72239685 -244.56150818]
[157.94906616 -256.42266846]
[168.80445862 -266.81390381]
[181.05718994 -275.51379395]
[194.44612122 -282.33688354]
[208.68585205 -287.13772583]
[223.47285461 -289.81399536]
[238.49194336 -290.30865479]
[253.42300415 -288.61114502]
[267.94775391 -284.75765991]
[281.75662231 -278.83032227]
[294.55523682 -270.95550537]
[306.07083130 -261.30102539]
[316.05795288 -250.07267761]
[324.30368042 -237.50981140]
[330.63229370 -223.88018799]
[334.90890503 -209.47434998]
[337.04232788 -194.59931946]
[336.98709106 -179.57218933]
[334.74438477 -164.71324158]
[330.36203003 -150.33921814]
[323.93341064 -136.75648499]
[315.59555054 -124.25455475]
[305.52618408 -113.09992981]
[293.93994141 -103.53035736]
[281.08377075 -95.74980927]
[267.23171997 -89.92413330]
[252.67903137 -86.17751312]
[237.73590088 -84.58979034]
[222.72085571 -85.19482422]
[207.95391846 -87.97970581]
[193.74986267 -92.88507843]
[186.84286499 -79.56992340]
[179.93586731 -66.25476837]
[173.02886963 -52.93961334]
[166.40037537 -39.48365021]
[160.05323792 -25.89269829]
[153.70611572 -12.30174732]
[147.35897827 1.28920400]
[141.43902588 15.07158566]
[135.95199585 29.03197479]
[130.46495056 42.99236679]
[124.97792816 56.95275497]
[127.52331543 71.62825775]
[115.27413177 81.64165497]
[109.78710175 95.60204315]
[106.53627777 110.24554443]
[116.71517944 122.03653717]
[115.55305481 137.20571899]
[104.24941254 146.83709717]
[103.31378937 161.80787659]
[102.37815857 176.77867126]
[102.06610107 191.77543640]
[102.37815857 206.77218628]
[102.69021606 221.76893616]
[103.00227356 236.76568604]
[103.31432343 251.76245117]
[103.62638092 266.75918579]
[103.93843842 281.75595093]
[104.25049591 296.75271606]
[104.56255341 311.74945068]
[104.87461090 326.74621582]
[105.18666077 341.74295044]
[119.84165955 345.33374023]
[133.06745911 352.59597778]
[143.96232605 363.03457642]
[151.78343201 375.93780518]
[155.99749756 390.42587280]
[156.31721497 405.51095581]
[152.72079468 420.16455078]
[145.45343018 433.38757324]
[135.01063538 444.27841187]
[122.10440063 452.09451294]
[107.61470795 456.30300903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[26 128]
[27 127]
[28 126]
[31 123]
[47 122]
[48 121]
[50 119]
[51 118]
[52 117]
[53 116]
[57 115]
[58 114]
[59 113]
[60 112]
[63 111]
[64 110]
[65 109]
[66 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
