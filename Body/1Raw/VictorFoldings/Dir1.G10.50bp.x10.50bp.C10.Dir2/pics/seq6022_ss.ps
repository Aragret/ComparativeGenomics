%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACCCCACGGGGGGGGGGUCUGCAUCAACUGAACGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUAxxxxxxxxxxACCGCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGCCCCCCCCCCAAAACCCCAC\
) } def
/len { sequence length } bind def

/coor [
[92.41419220 402.40692139]
[78.56825256 396.39089966]
[66.85959625 386.86148071]
[58.15707016 374.52581787]
[53.10646820 360.29928589]
[52.08257675 345.23760986]
[55.16137695 330.45843506]
[62.11439896 317.05850220]
[72.42568207 306.03219604]
[85.33006287 298.19766235]
[99.86994934 294.13635254]
[99.86994934 279.13635254]
[99.86994934 264.13635254]
[99.86994934 249.13636780]
[99.86994934 234.13636780]
[99.86994934 219.13636780]
[99.86994934 204.13636780]
[99.86994934 189.13636780]
[99.86994934 174.13636780]
[99.86994934 159.13636780]
[96.70436859 152.40399170]
[100.02923584 143.82511902]
[100.34128571 128.82836914]
[95.12138367 123.44295502]
[93.20971680 138.32064819]
[80.38605499 146.10227966]
[66.30665588 140.92826843]
[61.57332230 126.69466400]
[69.75027466 114.11939240]
[84.68157196 112.67214966]
[79.46166229 107.28674316]
[64.46247864 107.13070679]
[49.46328735 106.97467041]
[34.46409988 106.81863403]
[24.42645073 118.80944824]
[9.02066803 121.49195862]
[-4.47911215 113.59955597]
[-9.69870472 98.85880280]
[-4.17357874 84.22982788]
[9.48747063 76.61997986]
[24.83411407 79.62240601]
[34.62013626 91.81945038]
[49.61932373 91.97548676]
[64.61851501 92.13152313]
[79.61769867 92.28755951]
[82.14208221 85.22515869]
[72.43399811 73.79042053]
[87.19083405 71.10034943]
[89.71520996 64.03794861]
[78.01558685 54.65079117]
[66.31596375 45.26362610]
[50.27595901 45.57614899]
[40.14213181 33.13890076]
[43.68828964 17.49267769]
[58.19412613 10.63992214]
[72.53200531 17.83748055]
[75.70312500 33.56400299]
[87.40274811 42.95116425]
[99.10237885 52.33832932]
[114.06262207 51.24701691]
[124.27610016 40.26135254]
[134.48957825 29.27568817]
[144.70306396 18.29002190]
[154.91654968 7.30435801]
[165.13002014 -3.68130660]
[175.34350586 -14.66697121]
[165.55938721 -26.05780220]
[157.11218262 -38.47250366]
[150.10812378 -51.75494385]
[144.63529968 -65.73808289]
[140.76254272 -80.24607086]
[138.53852844 -95.09645081]
[137.99125671 -110.10247040]
[139.12760925 -125.07540131]
[141.93327332 -139.82695007]
[146.37297058 -154.17160034]
[152.39088440 -167.92895508]
[159.91131592 -180.92599487]
[168.83969116 -192.99928284]
[179.06372070 -203.99696350]
[190.45484924 -213.78074646]
[202.86979675 -222.22756958]
[216.15245056 -229.23123169]
[230.13575745 -234.70364380]
[244.64385986 -238.57597351]
[259.49432373 -240.79953003]
[274.50033569 -241.34634399]
[289.47323608 -240.20956421]
[304.22470093 -237.40345764]
[318.56921387 -232.96331787]
[332.32641602 -226.94500732]
[345.32321167 -219.42417908]
[357.39624023 -210.49545288]
[368.39361572 -200.27107239]
[378.17703247 -188.87965393]
[386.62350464 -176.46446228]
[393.62677002 -163.18159485]
[399.09875488 -149.19813538]
[402.97064209 -134.68991089]
[405.19375610 -119.83939362]
[405.74014282 -104.83334351]
[404.60290527 -89.86048126]
[401.79635620 -75.10910034]
[397.35580444 -60.76470947]
[391.33706665 -47.00771713]
[383.81585693 -34.01112366]
[374.88674927 -21.93837929]
[364.66204834 -10.94130707]
[353.27035522 -1.15821087]
[340.85488892 7.28787851]
[327.57183838 14.29074192]
[313.58819580 19.76231003]
[299.07986450 23.63377571]
[284.22927856 25.85644722]
[269.22320557 26.40237236]
[254.25038147 25.26468849]
[239.49908447 22.45770073]
[225.15483093 18.01671028]
[211.39801025 11.99756718]
[198.40164185 4.47596931]
[186.32916260 -4.45349121]
[176.11569214 6.53217316]
[165.90220642 17.51783752]
[155.68872070 28.50350189]
[145.47525024 39.48916626]
[135.26176453 50.47483063]
[125.04828644 61.46049500]
[139.40580750 101.81053925]
[115.33804321 129.14041138]
[115.02598572 144.13717651]
[114.86994934 159.13636780]
[114.86994934 174.13636780]
[114.86994934 189.13636780]
[114.86994934 204.13636780]
[114.86994934 219.13636780]
[114.86994934 234.13636780]
[114.86994934 249.13636780]
[114.86994934 264.13635254]
[114.86994934 279.13635254]
[114.86994934 294.13635254]
[129.40983582 298.19766235]
[142.31422424 306.03219604]
[152.62550354 317.05850220]
[159.57852173 330.45843506]
[162.65731812 345.23760986]
[161.63343811 360.29928589]
[156.58282471 374.52581787]
[147.88031006 386.86148071]
[136.17164612 396.39089966]
[122.32570648 402.40692139]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[31 45]
[32 44]
[33 43]
[34 42]
[49 59]
[50 58]
[51 57]
[60 127]
[61 126]
[62 125]
[63 124]
[64 123]
[65 122]
[66 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
