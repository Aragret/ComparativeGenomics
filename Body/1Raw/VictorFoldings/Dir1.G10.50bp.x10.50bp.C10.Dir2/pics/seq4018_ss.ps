%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCGACCUUGGGGGGGGGGGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUACGCCGCxxxxxxxxxxCUACCACAACUCAACGGCUACAUAGAAAAAUCCACCCCUUACGAGUGCGGCCCCCCCCCCCUUCGACCCU\
) } def
/len { sequence length } bind def

/coor [
[99.12625122 505.75164795]
[84.63655853 501.54318237]
[71.73032379 493.72708130]
[61.28752518 482.83624268]
[54.02016068 469.61322021]
[50.42373657 454.95962524]
[50.74345779 439.87451172]
[54.95752716 425.38644409]
[62.77862549 412.48324585]
[73.67349243 402.04464722]
[86.89929962 394.78240967]
[101.55429077 391.19161987]
[101.86634827 376.19488525]
[102.17840576 361.19812012]
[102.49046326 346.20135498]
[102.80252075 331.20462036]
[103.11457825 316.20785522]
[103.42662811 301.21109009]
[103.73868561 286.21435547]
[104.05074310 271.21759033]
[104.36280060 256.22085571]
[104.67485809 241.22409058]
[104.98691559 226.22734070]
[105.29896545 211.23059082]
[104.51912689 196.25086975]
[102.65151215 181.36758423]
[100.78389740 166.48431396]
[98.91628265 151.60102844]
[97.04866791 136.71774292]
[95.18106079 121.83447266]
[78.33332825 105.52463531]
[85.31433868 83.13887024]
[79.82730865 69.17848206]
[58.07435608 64.93557739]
[46.76399994 40.32649231]
[32.98162079 34.40652847]
[19.19923782 28.48656654]
[9.57949066 40.13290024]
[-2.93251538 48.59613800]
[-17.32248688 53.19020462]
[-32.42389297 53.54267120]
[-47.01252747 49.62497330]
[-59.90576172 41.75469971]
[-70.05839539 30.56985474]
[-76.64739227 16.97714615]
[-79.13862610 2.07847381]
[-77.33013916 -12.91839409]
[-71.36853027 -26.79772758]
[-61.73708725 -38.43439484]
[-49.21658707 -46.88505554]
[-34.82200623 -51.46466064]
[-19.72025490 -51.80195999]
[-5.13556147 -47.86960983]
[7.74975824 -39.98638535]
[17.89114952 -28.79134560]
[24.46649361 -15.19202518]
[26.94275665 -0.29085794]
[25.11920166 14.70418549]
[38.90158463 20.62414932]
[52.68396378 26.54411125]
[59.44606018 23.30002975]
[49.09626007 12.44269657]
[56.22395706 -0.75563556]
[70.97888947 1.94472003]
[72.97025299 16.81186485]
[79.73234558 13.56778145]
[83.74008179 -0.88690704]
[87.74782562 -15.34159565]
[91.75556183 -29.79628372]
[78.55002594 -37.05648804]
[67.37517548 -47.16684341]
[58.83364487 -59.58211517]
[53.38607407 -73.63276672]
[51.32624435 -88.56105042]
[52.76523972 -103.56192017]
[57.62545395 -117.82638550]
[65.64479065 -130.58518982]
[76.39076233 -141.15025330]
[89.28386688 -148.95184326]
[103.62878418 -153.56919861]
[118.65191650 -154.75332642]
[133.54309082 -152.44036865]
[147.49923706 -146.75505066]
[159.76771545 -138.00398254]
[169.68690491 -126.65911102]
[176.72187805 -113.33222198]
[180.49325562 -98.74204254]
[180.79763794 -83.67538452]
[177.61860657 -68.94478607]
[171.12762451 -55.34464645]
[161.67472839 -43.60840225]
[149.76969910 -34.36897659]
[136.05456543 -28.12463951]
[121.26895142 -25.21213913]
[106.21025085 -25.78854370]
[102.20251465 -11.33385563]
[98.19477081 3.12083316]
[94.18703461 17.57552147]
[106.63910675 43.77562332]
[93.78769684 63.69145203]
[99.27472687 77.65184021]
[105.17247009 78.24656677]
[110.70668793 80.37010193]
[115.48846436 83.87319183]
[119.18172455 88.50966644]
[133.88967896 85.56417847]
[145.84114075 74.33499908]
[161.46136475 79.32908630]
[164.68159485 95.40895844]
[152.18913269 106.03301239]
[136.83515930 100.27214050]
[122.12720490 103.21762848]
[119.99340820 110.01148987]
[115.83174896 115.78993225]
[110.06433868 119.96685791]
[111.93195343 134.85014343]
[113.79956818 149.73341370]
[115.66717529 164.61669922]
[117.53479004 179.49996948]
[119.40240479 194.38325500]
[128.91529846 182.78562927]
[143.62406921 179.84420776]
[156.86550903 186.89149475]
[162.64111328 200.73498535]
[158.33448792 215.10345459]
[145.89656067 223.48783875]
[130.96183777 222.08993530]
[120.29572296 211.54263306]
[119.98366547 226.53939819]
[119.67160797 241.53614807]
[119.35955048 256.53289795]
[119.04750061 271.52966309]
[118.73544312 286.52639771]
[118.42338562 301.52316284]
[118.11132812 316.51992798]
[117.79927063 331.51666260]
[117.48721313 346.51342773]
[117.17516327 361.51016235]
[116.86310577 376.50692749]
[116.55104828 391.50369263]
[131.04399109 395.70095825]
[143.95625305 403.50711060]
[154.40745544 414.38989258]
[161.68502808 427.60726929]
[165.29277039 442.25808716]
[164.98469543 457.34344482]
[160.78181458 471.83474731]
[152.97068787 484.74398804]
[142.08387756 495.19100952]
[128.86367798 502.46347046]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[24 128]
[25 120]
[26 119]
[27 118]
[28 117]
[29 116]
[30 115]
[32 101]
[33 100]
[35 60]
[36 59]
[37 58]
[66 98]
[67 97]
[68 96]
[69 95]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
