%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUCUCGCACGGGGGGGGGGCUGAAACAAGCUAACAUGACUAACACCCUUAAUUCCAUCCACCCUCCUCUxxxxxxxxxxUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCAUCCUCCGUGAAAUCAACCCCCCCCCCUAUCCCGCAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 426.15542603]
[71.19830322 420.13940430]
[59.48964310 410.60998535]
[50.78712082 398.27432251]
[45.73651886 384.04779053]
[44.71262741 368.98611450]
[47.79142761 354.20697021]
[54.74444962 340.80703735]
[65.05573273 329.78070068]
[77.96011353 321.94619751]
[92.50000000 317.88488770]
[92.50000000 302.88488770]
[92.50000000 287.88488770]
[92.50000000 272.88488770]
[92.50000000 257.88488770]
[92.50000000 242.88488770]
[92.50000000 227.88488770]
[92.50000000 212.88488770]
[92.50000000 197.88488770]
[92.50000000 182.88488770]
[84.76270294 170.15760803]
[92.50000000 156.35743713]
[92.50000000 141.35743713]
[92.50000000 126.35743713]
[76.62458801 114.30226135]
[73.11775208 94.67935944]
[83.83505249 77.87175751]
[78.63963318 63.80024338]
[73.44422150 49.72872162]
[68.24880219 35.65720367]
[50.54801178 30.42072296]
[41.39577484 12.70210743]
[48.31085968 -7.57862711]
[36.27746964 1.41169226]
[23.19318771 8.78935719]
[9.27287483 14.43322086]
[-5.25488853 18.25060463]
[-20.15154266 20.17882538]
[-35.17247009 20.18621635]
[-50.07101440 18.27266121]
[-64.60253143 14.46957874]
[-78.52838898 8.83941936]
[-91.61992645 1.47463667]
[-103.66216278 -7.50383377]
[-114.45734406 -17.94855690]
[-123.82822418 -29.68802261]
[-131.62091064 -42.52945328]
[-137.70744324 -56.26198959]
[-141.98786926 -70.66012573]
[-144.39190674 -85.48742676]
[-144.88008118 -100.50041962]
[-143.44438171 -115.45258331]
[-140.10836792 -130.09837341]
[-134.92681885 -144.19731140]
[-127.98484802 -157.51786804]
[-119.39642334 -169.84130859]
[-109.30258179 -180.96528625]
[-97.86907196 -190.70710754]
[-85.28364563 -198.90682983]
[-71.75296021 -205.42979431]
[-57.49921417 -210.16886902]
[-42.75645828 -213.04627991]
[-27.76677895 -214.01472473]
[-12.77632713 -213.05834961]
[1.96874285 -210.19282532]
[16.22630501 -205.46520996]
[29.76223373 -198.95315552]
[42.35425949 -190.76358032]
[53.79561234 -181.03096008]
[63.89841080 -169.91513062]
[72.49675751 -157.59860229]
[79.44946289 -144.28364563]
[84.64234924 -130.18887329]
[87.99015808 -115.54577637]
[89.43790436 -100.59477997]
[88.96182251 -85.58139801]
[86.56972504 -70.75215912]
[82.30089569 -56.35058212]
[76.22542572 -42.61315155]
[68.44308472 -29.76544762]
[59.08166885 -18.01844025]
[74.06867981 -18.64241600]
[83.57704163 -30.24375725]
[93.08540344 -41.84510040]
[102.59375763 -53.44644165]
[112.10211945 -65.04778290]
[121.61047363 -76.64912415]
[116.76208496 -91.29483032]
[120.62355804 -106.23110962]
[131.96270752 -116.69186401]
[147.16123962 -119.33909607]
[161.36938477 -113.32807922]
[170.05335999 -100.57691956]
[170.44213867 -85.15444946]
[162.41166687 -71.98194122]
[148.52444458 -65.26268005]
[133.21182251 -67.14076233]
[123.70346069 -55.53942490]
[114.19509888 -43.93808365]
[104.68674469 -32.33674240]
[95.17838287 -20.73539925]
[85.67002106 -9.13405800]
[93.40747070 12.82332611]
[82.32032013 30.46178627]
[87.51573944 44.53330612]
[92.71115112 58.60482407]
[97.90657043 72.67634583]
[111.30640411 75.03742981]
[121.91894531 83.55237579]
[127.12796021 96.12204742]
[141.99099731 98.14437866]
[156.85404968 100.16671753]
[167.48629761 88.86473083]
[182.73735046 86.00379944]
[196.74287415 92.68400574]
[204.11744690 106.33666992]
[202.02539062 121.71207428]
[191.27116394 132.89805603]
[175.98997498 135.59336853]
[162.05775452 128.76162720]
[154.83171082 115.02976227]
[139.96867371 113.00743103]
[125.10562134 110.98509216]
[122.09871674 116.20528412]
[118.02384186 120.64232635]
[113.07792664 124.08178711]
[107.50000000 126.35743713]
[107.50000000 141.35743713]
[107.50000000 156.35743713]
[115.23729706 170.15760803]
[107.50000000 182.88488770]
[107.50000000 197.88488770]
[107.50000000 212.88488770]
[107.50000000 227.88488770]
[107.50000000 242.88488770]
[107.50000000 257.88488770]
[107.50000000 272.88488770]
[107.50000000 287.88488770]
[107.50000000 302.88488770]
[107.50000000 317.88488770]
[122.03988647 321.94619751]
[134.94427490 329.78070068]
[145.25555420 340.80703735]
[152.20857239 354.20697021]
[155.28736877 368.98611450]
[154.26348877 384.04779053]
[149.21287537 398.27432251]
[140.51036072 410.60998535]
[128.80169678 420.13940430]
[114.95575714 426.15542603]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[24 127]
[27 107]
[28 106]
[29 105]
[30 104]
[33 81]
[82 102]
[83 101]
[84 100]
[85 99]
[86 98]
[87 97]
[110 123]
[111 122]
[112 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
