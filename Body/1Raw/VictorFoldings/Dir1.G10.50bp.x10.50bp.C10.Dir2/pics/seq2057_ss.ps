%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAUAACCAGGGGGGGGGGAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAAxxxxxxxxxxCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUCCCCCCCCCCACUAUAACCA\
) } def
/len { sequence length } bind def

/coor [
[52.39473724 385.75671387]
[38.54880142 379.74069214]
[26.84013939 370.21127319]
[18.13761330 357.87561035]
[13.08701229 343.64907837]
[12.06312084 328.58740234]
[15.14192009 313.80825806]
[22.09494209 300.40832520]
[32.40622711 289.38198853]
[45.31060791 281.54748535]
[59.85049438 277.48617554]
[59.85049438 262.48617554]
[59.85049438 247.48617554]
[59.85049438 232.48617554]
[59.85049438 217.48617554]
[59.85049438 202.48617554]
[59.85049438 187.48617554]
[59.85049438 172.48617554]
[59.85049438 157.48617554]
[59.85049438 142.48617554]
[59.85049438 127.48616791]
[59.85049438 112.48616791]
[50.58554459 100.68952942]
[36.01284027 97.13476562]
[21.44013977 93.58000946]
[14.89563274 95.08896637]
[9.41828442 93.29175568]
[6.34141684 89.56236267]
[-8.07079983 85.40447235]
[-22.48301506 81.24658203]
[-31.66235542 81.87232971]
[-37.15012741 76.84938049]
[-51.47272491 72.39256287]
[-65.79532623 67.93575287]
[-80.20753479 63.77786255]
[-94.70313263 59.92070389]
[-109.19873047 56.06354523]
[-118.72918701 67.94168854]
[-132.26994324 74.91075134]
[-147.47497559 75.76331329]
[-161.70993042 70.35164642]
[-172.50849915 59.61336899]
[-177.99978638 45.40894318]
[-177.23237610 30.19937325]
[-170.33923340 16.61981201]
[-158.51463318 7.02299881]
[-143.80726624 3.07164025]
[-128.76525879 5.45033216]
[-115.99475098 13.74695301]
[-107.70829773 26.52406120]
[-105.34157562 41.56794739]
[-90.84597778 45.42510605]
[-76.35037994 49.28226471]
[-71.79239655 47.66972733]
[-66.17161560 48.94961166]
[-61.33850861 53.61315155]
[-47.01591110 58.06996918]
[-32.69331360 62.52678299]
[-18.32512856 66.83436584]
[-3.91291189 70.99225616]
[10.49930382 75.15014648]
[24.99490166 79.00730133]
[39.56760406 82.56206512]
[54.14030457 86.11682892]
[66.40267181 77.47771454]
[67.96025848 62.55879974]
[69.51783752 47.63988495]
[71.07541656 32.72097397]
[57.16558456 26.80422401]
[45.61878967 17.04907227]
[37.46177292 4.32293892]
[33.41984558 -10.24257660]
[33.85241699 -25.35231781]
[38.72101974 -39.66273880]
[47.59274292 -51.90136337]
[59.67871475 -60.97994232]
[73.90426636 -66.09121704]
[89.00446320 -66.78069305]
[103.63661194 -62.98706818]
[116.49963379 -55.04766464]
[126.44975281 -43.66844559]
[132.60220337 -29.86124992]
[134.40992737 -14.85379982]
[131.71218872 0.01945027]
[124.74884796 13.43598175]
[114.13909149 24.20280457]
[100.82633209 31.36254311]
[85.99433136 34.27855682]
[84.43675232 49.19746780]
[82.87916565 64.11637878]
[81.32158661 79.03529358]
[93.09449005 74.27167511]
[105.08901215 75.31983948]
[114.73433685 81.36059570]
[120.22922516 90.56752014]
[135.16352844 89.16522217]
[150.09783936 87.76291656]
[165.03215027 86.36061096]
[179.96644592 84.95830536]
[194.73251343 82.31944275]
[209.22810364 78.46228790]
[223.72369385 74.60512543]
[228.34860229 59.88731766]
[240.21098328 50.02388000]
[255.52560425 48.16219330]
[269.40563965 54.89632416]
[277.42199707 68.07743073]
[277.01669312 83.49946594]
[268.31906128 96.24132538]
[254.10449219 102.23711395]
[238.90879822 99.57360840]
[227.58085632 89.10072327]
[213.08526611 92.95787811]
[198.58966064 96.81504059]
[211.79423523 103.93117523]
[218.43847656 117.37937164]
[216.06747437 132.19079590]
[205.55726624 142.89292908]
[190.79115295 145.53152466]
[177.22494507 139.13169861]
[169.87106323 126.05803680]
[171.44664001 111.14101410]
[181.36875916 99.89261627]
[166.43444824 101.29492188]
[151.50013733 102.69721985]
[136.56582642 104.09952545]
[121.63152313 105.50183105]
[102.66316986 125.05824280]
[74.85049438 112.48616791]
[74.85049438 127.48616791]
[74.85049438 142.48617554]
[74.85049438 157.48617554]
[74.85049438 172.48617554]
[74.85049438 187.48617554]
[74.85049438 202.48617554]
[74.85049438 217.48617554]
[74.85049438 232.48617554]
[74.85049438 247.48617554]
[74.85049438 262.48617554]
[74.85049438 277.48617554]
[89.39038086 281.54748535]
[102.29476166 289.38198853]
[112.60604858 300.40832520]
[119.55906677 313.80825806]
[122.63786316 328.58740234]
[121.61397552 343.64907837]
[116.56336975 357.87561035]
[107.86084747 370.21127319]
[96.15219116 379.74069214]
[82.30625153 385.75671387]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 64]
[24 63]
[25 62]
[28 61]
[29 60]
[30 59]
[32 58]
[33 57]
[34 56]
[35 53]
[36 52]
[37 51]
[65 91]
[66 90]
[67 89]
[68 88]
[95 127]
[96 126]
[97 125]
[98 124]
[99 123]
[100 114]
[101 113]
[102 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
