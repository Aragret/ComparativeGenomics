%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUUCUCCGGGGGGGGGGCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUxxxxxxxxxxCACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCCCCCCCCCCCUACUCCUCC\
) } def
/len { sequence length } bind def

/coor [
[103.46656799 374.57186890]
[90.24636841 367.29937744]
[79.35956573 356.85238647]
[71.54843140 343.94314575]
[67.34555054 329.45181274]
[67.03748322 314.36648560]
[70.64521790 299.71566772]
[77.92279816 286.49826050]
[88.37400055 275.61550903]
[101.28626251 267.80935669]
[115.77919769 263.61206055]
[115.46714783 248.61531067]
[115.15509033 233.61856079]
[114.84303284 218.62181091]
[114.53097534 203.62506104]
[114.21891785 188.62829590]
[113.90686035 173.63154602]
[113.59481049 158.63479614]
[113.28275299 143.63804626]
[112.97069550 128.64128113]
[107.02450562 124.07041931]
[95.13212585 114.92868805]
[89.18593597 110.35781860]
[74.61323547 113.91258240]
[60.04053116 117.46734619]
[45.46782684 121.02210236]
[30.89512444 124.57686615]
[25.96504021 139.19528198]
[13.90002918 148.80979919]
[-1.45000899 150.35247803]
[-15.18693352 143.33105469]
[-22.92734146 129.98602295]
[-22.20129585 114.57575226]
[-13.24047661 102.01760101]
[1.09575284 96.31882477]
[16.23275185 99.29787445]
[27.34036255 110.00416565]
[41.91306305 106.44940186]
[56.48576736 102.89463806]
[71.05847168 99.33988190]
[85.63117218 95.78511810]
[70.64292145 95.19156647]
[57.78807449 87.46156311]
[50.23638153 74.50116730]
[49.84992981 59.50614548]
[56.72401428 46.17396927]
[69.16362000 37.79207611]
[84.10140228 36.42727280]
[97.85400391 42.41609192]
[107.03031158 54.28181458]
[109.36763763 69.09859467]
[104.29033661 83.21189880]
[113.05654144 71.04006195]
[121.82274628 58.86822891]
[130.58895874 46.69639206]
[139.35516357 34.52455521]
[148.12136841 22.35271835]
[156.88757324 10.18088150]
[165.65377808 -1.99095571]
[174.41999817 -14.16279221]
[170.73829651 -27.15905380]
[175.16912842 -39.71276474]
[185.87477112 -47.29323959]
[198.79750061 -47.30297470]
[207.81501770 -59.28980637]
[216.83255005 -71.27664185]
[202.88145447 -65.76604462]
[187.93252563 -64.52927399]
[173.26548767 -67.67220306]
[160.13591003 -74.92577362]
[149.66775513 -85.66904449]
[142.75717163 -98.98233795]
[139.99572754 -113.72595978]
[141.61981201 -128.63777161]
[147.49038696 -142.44126892]
[157.10493469 -153.95475769]
[169.64036560 -162.19265747]
[184.02359009 -166.44973755]
[199.02333069 -166.36157227]
[213.35552979 -161.93572998]
[225.79327393 -153.55105591]
[235.27180481 -141.92533875]
[240.97975159 -128.05380249]
[242.42843628 -113.12392426]
[239.49388123 -98.41378021]
[232.42524719 -85.17989349]
[245.36329651 -92.76979828]
[242.16278076 -107.54187012]
[243.68280029 -122.55959320]
[249.76197815 -136.35350037]
[259.79342651 -147.57780457]
[272.78540039 -155.14163208]
[287.45916748 -158.31512451]
[302.37506104 -156.79978943]
[316.07357788 -150.75654602]
[327.21826172 -140.78874207]
[340.15634155 -148.37864685]
[353.09439087 -155.96855164]
[360.72039795 -170.48667908]
[377.11505127 -170.87097168]
[385.41290283 -156.72608948]
[377.07788086 -142.60308838]
[360.68429565 -143.03050232]
[347.74624634 -135.44059753]
[334.80816650 -127.85068512]
[338.07089233 -113.25905609]
[336.66186523 -98.35319519]
[330.70648193 -84.59406281]
[320.77648926 -73.33412933]
[307.83489990 -65.68444061]
[293.14270020 -62.40499496]
[278.13604736 -63.82922745]
[264.28573608 -69.83019257]
[252.95320129 -79.83174133]
[240.01515198 -72.24183655]
[228.81938171 -62.25910950]
[219.80184937 -50.27227783]
[210.78433228 -38.28544617]
[213.86137390 -21.78120995]
[203.87879944 -7.86602974]
[186.59182739 -5.39658546]
[177.82562256 6.77525139]
[169.05941772 18.94708824]
[160.29321289 31.11892509]
[151.52699280 43.29076004]
[142.76078796 55.46259689]
[133.99458313 67.63443756]
[125.22837830 79.80627441]
[116.46217346 91.97811127]
[127.96744537 128.32923889]
[128.27951050 143.32598877]
[128.59156799 158.32273865]
[128.90361023 173.31948853]
[129.21566772 188.31625366]
[129.52772522 203.31300354]
[129.83978271 218.30975342]
[130.15184021 233.30650330]
[130.46389771 248.30326843]
[130.77595520 263.30001831]
[145.43095398 266.89077759]
[158.65675354 274.15304565]
[169.55162048 284.59164429]
[177.37272644 297.49484253]
[181.58679199 311.98291016]
[181.90650940 327.06802368]
[178.31008911 341.72161865]
[171.04272461 354.94461060]
[160.59991455 365.83544922]
[147.69369507 373.65158081]
[133.20399475 377.86004639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 41]
[24 40]
[25 39]
[26 38]
[27 37]
[52 129]
[53 128]
[54 127]
[55 126]
[56 125]
[57 124]
[58 123]
[59 122]
[60 121]
[64 118]
[65 117]
[66 116]
[86 115]
[87 114]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
