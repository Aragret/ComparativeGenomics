%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUAUCUCCCGGGGGGGGGGCUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGxxxxxxxxxxCCUUACACUAUUCCUCAUCACCCAACUAAAAAUAUUAAACACAAACUACCCCCCCCCCCCACCUACCUCCC\
) } def
/len { sequence length } bind def

/coor [
[82.86788177 392.55181885]
[69.94872284 384.79345703]
[59.16742325 374.26443481]
[51.10540771 361.53256226]
[46.19744873 347.28445435]
[44.70822525 332.28851318]
[46.71804810 317.35339355]
[52.11853409 303.28457642]
[60.61843872 290.84075928]
[71.75936890 280.69305420]
[84.94052124 273.38867188]
[99.45103455 269.32153320]
[98.83521271 254.33418274]
[98.21938324 239.34681702]
[97.60356140 224.35946655]
[96.98773193 209.37211609]
[96.37191010 194.38476562]
[95.75608826 179.39741516]
[95.14025879 164.41004944]
[94.52443695 149.42269897]
[93.90860748 134.43534851]
[87.21176147 134.26809692]
[80.39263916 132.76426697]
[73.72258759 129.87826538]
[67.48451996 125.62001801]
[53.23782730 130.31381226]
[38.99113464 135.00761414]
[24.74444389 139.70141602]
[14.23094749 152.28706360]
[-1.87668931 149.20874023]
[-7.00831127 133.63316345]
[4.11505508 121.58315277]
[20.05064392 125.45472717]
[34.29733658 120.76092529]
[48.54402924 116.06712341]
[62.79071808 111.37332153]
[61.25342560 96.45230865]
[46.34897995 94.76190948]
[31.44453239 93.07151031]
[15.02491665 97.29437256]
[6.42168427 82.68544769]
[18.07807541 70.37428284]
[33.13492966 78.16706085]
[48.03937912 79.85746002]
[62.94382477 81.54785919]
[75.70045471 69.17118835]
[91.67558289 63.83362579]
[107.46246338 65.83554077]
[113.73186493 52.20856476]
[120.00127411 38.58158493]
[114.75715637 23.91403770]
[121.30934143 10.18365288]
[135.32492065 5.27457857]
[141.59432983 -8.35240078]
[147.86373901 -21.97937965]
[146.60260010 -37.75024033]
[158.95115662 -46.07863998]
[165.22056580 -59.70561981]
[171.48997498 -73.33259583]
[177.75936890 -86.95957947]
[164.92121887 -94.74929810]
[153.05474854 -103.95170593]
[142.31463623 -114.44683838]
[132.84089661 -126.09785461]
[124.75707245 -138.75288391]
[118.16853333 -152.24690247]
[113.16117859 -166.40403748]
[109.80027771 -181.03967285]
[108.12966156 -195.96304321]
[108.17110443 -210.97956848]
[109.92406464 -225.89347839]
[113.36569214 -240.51036072]
[118.45111847 -254.63961792]
[125.11404419 -268.09707642]
[133.26759338 -280.70727539]
[142.80548096 -292.30584717]
[153.60336304 -302.74151611]
[165.52046204 -311.87829590]
[178.40141296 -319.59704590]
[192.07827759 -325.79711914]
[206.37277222 -330.39770508]
[221.09851074 -333.33883667]
[236.06353760 -334.58212280]
[251.07273865 -334.11138916]
[265.93045044 -331.93280029]
[280.44296265 -328.07470703]
[294.42108154 -322.58743286]
[307.68255615 -315.54251099]
[320.05450439 -307.03176880]
[331.37564087 -297.16619873]
[341.49838257 -286.07440186]
[350.29071045 -273.90097046]
[357.63806152 -260.80462646]
[363.44461060 -246.95610046]
[367.63467407 -232.53593445]
[370.15359497 -217.73211670]
[370.96856689 -202.73767090]
[370.06893921 -187.74806213]
[367.46649170 -172.95870972]
[363.19506836 -158.56242371]
[357.31042480 -144.74690247]
[349.88928223 -131.69224548]
[341.02832031 -119.56864929]
[330.84313965 -108.53417206]
[319.46649170 -98.73267365]
[307.04666138 -90.29193878]
[293.74563599 -83.32199860]
[279.73675537 -77.91372681]
[265.20269775 -74.13763428]
[250.33293152 -72.04294586]
[235.32130432 -71.65697479]
[220.36354065 -72.98474884]
[205.65463257 -76.00895691]
[191.38635254 -80.69017029]
[185.11694336 -67.06319427]
[178.84753418 -53.43621445]
[172.57814026 -39.80923462]
[174.28770447 -25.01306725]
[161.49072266 -15.70997429]
[155.22131348 -2.08299541]
[148.95190430 11.54398346]
[154.34272766 25.38142014]
[148.17877197 39.29042435]
[133.62825012 44.85099030]
[127.35884857 58.47797012]
[121.08943939 72.10494995]
[132.67636108 87.54392242]
[134.30674744 106.77828217]
[125.48383331 123.94728851]
[108.89596558 133.81951904]
[109.51178741 148.80688477]
[110.12760925 163.79423523]
[110.74343872 178.78158569]
[111.35926056 193.76893616]
[111.97509003 208.75628662]
[112.59091187 223.74363708]
[113.20674133 238.73100281]
[113.82256317 253.71835327]
[114.43839264 268.70571899]
[129.23365784 271.56866455]
[142.96963501 277.76702881]
[154.90554810 286.96655273]
[164.39768982 298.67108154]
[170.93418884 312.24938965]
[174.16252136 326.96926880]
[173.90859985 342.03686523]
[170.18611145 356.63958740]
[163.19581604 369.98995972]
[153.31466675 381.36798096]
[141.07556152 390.16009521]
[127.13853455 395.89212036]
[112.25519562 398.25494385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 36]
[26 35]
[27 34]
[28 33]
[37 45]
[38 44]
[39 43]
[48 126]
[49 125]
[50 124]
[53 121]
[54 120]
[55 119]
[57 117]
[58 116]
[59 115]
[60 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
