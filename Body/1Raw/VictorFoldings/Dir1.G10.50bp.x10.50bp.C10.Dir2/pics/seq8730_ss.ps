%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAUUCUAAUGGGGGGGGGGUCUACUGACUAUCCUAGAAAUCGCUGUCGCCUUAAUCCAAGCCUACGUUUxxxxxxxxxxGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACACCCCCCCCCCACAAUCCUAAU\
) } def
/len { sequence length } bind def

/coor [
[113.13559723 453.88568115]
[99.11365509 448.33267212]
[86.91369629 439.46633911]
[77.30262756 427.84402466]
[70.88459778 414.19631958]
[68.06306458 399.38113403]
[69.01538086 384.32977295]
[73.68168640 369.98834229]
[81.76864624 357.25839233]
[92.76792145 346.94012451]
[105.98808289 339.68212891]
[120.59809875 335.94070435]
[120.59809875 320.94070435]
[120.59809875 305.94070435]
[120.59809875 290.94070435]
[120.59809875 275.94070435]
[120.59809875 260.94070435]
[120.59809875 245.94070435]
[120.59809875 230.94070435]
[120.59809875 215.94070435]
[120.59809875 200.94070435]
[120.59809875 185.94070435]
[117.69062042 171.22517395]
[111.98596191 157.35229492]
[106.28129578 143.47941589]
[100.57663727 129.60653687]
[94.87197113 115.73365784]
[82.45365906 107.32024384]
[67.45444489 107.16625214]
[52.45523834 107.01225281]
[47.14805984 121.21118927]
[37.30226517 132.73664856]
[24.10677910 140.19686890]
[9.15502071 142.69099426]
[-5.74751377 139.91786194]
[-18.80126953 132.21232605]
[-28.42994118 120.50487518]
[-33.47082138 106.20923615]
[-33.31520081 91.05167389]
[-27.98186493 76.86254883]
[-18.11484718 65.35525513]
[-4.90563488 57.91936111]
[10.05069542 55.45278549]
[24.94809341 58.25337982]
[37.98762512 65.98295593]
[47.59470749 77.70813751]
[52.60923386 92.01304626]
[67.60844421 92.16703796]
[82.60765076 92.32103729]
[67.74986267 90.26043701]
[57.26229858 79.53611755]
[55.53383636 64.63603210]
[63.28780746 51.79563522]
[77.27930450 46.38841248]
[91.65310669 50.67720413]
[100.39402008 62.86721802]
[99.84365082 77.85831451]
[102.29657745 63.06023788]
[104.74951172 48.26215744]
[107.20243835 33.46408081]
[109.65536499 18.66600037]
[95.39254761 13.92062378]
[82.04772949 7.00236464]
[69.94953918 -1.91840827]
[59.39589691 -12.62201309]
[50.64670181 -24.84486389]
[43.91741180 -38.28596497]
[39.37373734 -52.61431122]
[37.12757492 -67.47705841]
[37.23423767 -82.50819397]
[39.69109344 -97.33757019]
[44.43764877 -111.59999084]
[51.35700989 -124.94424438]
[60.27877808 -137.04170227]
[70.98325348 -147.59445190]
[83.20682526 -156.34263611]
[96.64848328 -163.07081604]
[110.97720337 -167.61331177]
[125.84013367 -169.85824585]
[140.87126160 -169.75035095]
[155.70043945 -167.29226685]
[169.96246338 -162.54454041]
[183.30615234 -155.62406921]
[195.40286255 -146.70130920]
[205.95474243 -135.99595642]
[214.70191956 -123.77166748]
[221.42898560 -110.32946014]
[225.97030640 -96.00035858]
[228.21400452 -81.13724518]
[228.10487366 -66.10612488]
[225.64556885 -51.27715302]
[220.89665222 -37.01551437]
[213.97509766 -23.67240906]
[205.05133057 -11.57642269]
[194.34510803 -1.02543199]
[182.12008667 7.72073650]
[168.67732239 14.44670010]
[154.34785461 18.98682594]
[139.48455811 21.22930908]
[124.45344543 21.11892700]
[122.00051880 35.91700745]
[119.54758453 50.71508789]
[117.09465790 65.51316833]
[114.64173126 80.31124115]
[119.62778473 93.13751221]
[116.48226929 104.36122894]
[108.74485016 110.02899170]
[114.44951630 123.90187073]
[120.15417480 137.77474976]
[125.85884094 151.64762878]
[131.56350708 165.52052307]
[133.89793396 150.70327759]
[140.42205811 137.19639587]
[150.57710266 126.15670013]
[163.49331665 118.52969360]
[178.06448364 114.96861267]
[193.04260254 115.77845001]
[207.14486694 120.88984680]
[219.16343689 129.86503601]
[228.06896973 141.93530273]
[233.09872437 156.06687927]
[233.82194519 171.04943848]
[230.17665100 185.59976196]
[222.47508240 198.47166443]
[211.37684631 208.56269836]
[197.83245850 215.00860596]
[183.00196838 217.25730896]
[168.15556335 215.11621094]
[154.56478882 208.76870728]
[143.39366150 198.75842285]
[135.59809875 185.94070435]
[135.59809875 200.94070435]
[135.59809875 215.94070435]
[135.59809875 230.94070435]
[135.59809875 245.94070435]
[135.59809875 260.94070435]
[135.59809875 275.94070435]
[135.59809875 290.94070435]
[135.59809875 305.94070435]
[135.59809875 320.94070435]
[135.59809875 335.94070435]
[150.20811462 339.68212891]
[163.42826843 346.94012451]
[174.42753601 357.25839233]
[182.51451111 369.98834229]
[187.18081665 384.32977295]
[188.13313293 399.38113403]
[185.31159973 414.19631958]
[178.89356995 427.84402466]
[169.28250122 439.46633911]
[157.08253479 448.33267212]
[143.06059265 453.88568115]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 111]
[24 110]
[25 109]
[26 108]
[27 107]
[28 49]
[29 48]
[30 47]
[57 104]
[58 103]
[59 102]
[60 101]
[61 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
