%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCAACGGAACGGGGGGGGGGAAGUUACCCUAGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCAUAUCAACxxxxxxxxxxCUGCCAUCAUGACCCUUGGCCAUAAUAUGAUUUAUCUCCACACUAGCAGACCCCCCCCCCGACCAACCGAAC\
) } def
/len { sequence length } bind def

/coor [
[86.50227356 584.98864746]
[72.34166718 579.83367920]
[59.75192642 571.55145264]
[49.41198730 560.58868408]
[41.87947464 547.53656006]
[37.56061172 533.09893799]
[36.68830109 518.05450439]
[39.30959320 503.21450806]
[45.28311920 489.37927246]
[54.28673553 477.29492188]
[65.83489227 467.61312866]
[79.30480957 460.85604858]
[93.97006989 457.38809204]
[93.97006989 442.38809204]
[93.97006989 427.38809204]
[93.97006989 412.38809204]
[93.97006989 397.38809204]
[93.97006989 382.38809204]
[93.97006989 367.38809204]
[93.97006989 352.38809204]
[93.97006989 337.38809204]
[93.97006989 322.38809204]
[79.42767334 318.83743286]
[66.14971924 311.90518188]
[54.91004562 301.99047852]
[46.36486435 289.66635132]
[41.01446152 275.64675903]
[39.17391205 260.74505615]
[40.95450974 245.82695007]
[46.25706100 231.76008606]
[54.77740097 219.36372375]
[66.02383423 209.36087036]
[79.34550476 202.33624268]
[93.97006989 198.70201111]
[93.97006989 183.70201111]
[93.81806183 168.70277405]
[93.51405334 153.70585632]
[93.21005249 138.70893860]
[92.90604401 123.71202087]
[92.60204315 108.71510315]
[81.96145630 119.28761292]
[67.02970123 120.71685791]
[54.57672501 112.35484314]
[50.24861145 97.99282837]
[56.00769043 84.14244843]
[69.24284363 77.08335876]
[83.95335388 80.01609802]
[93.46948242 91.61069489]
[95.28913879 76.72147369]
[97.10879517 61.83225632]
[91.10274506 47.19538879]
[100.32685089 35.50072861]
[102.14651489 20.61150742]
[103.96617126 5.72228861]
[105.78582764 -9.16693020]
[96.30155182 -18.78001595]
[94.13597870 -31.91188240]
[99.86132050 -43.71038818]
[111.17563629 -49.94699478]
[101.72744751 -38.29660034]
[89.88643646 -29.08842468]
[76.26781464 -22.80088234]
[61.57914734 -19.76064873]
[46.58359146 -20.12568092]
[32.06024551 -23.87701416]
[18.76368713 -30.81974220]
[7.38474131 -40.59315491]
[-1.48538911 -52.68946838]
[-7.38585186 -66.48020935]
[-10.01008415 -81.24887085]
[-9.22174358 -96.22814178]
[-5.06178713 -110.63976288]
[2.25365067 -123.73496246]
[12.34449196 -134.83338928]
[24.68646240 -143.35839844]
[38.63832474 -148.86706543]
[53.47520065 -151.07321167]
[68.42623901 -149.86218262]
[82.71463776 -145.29692078]
[95.59803772 -137.61460876]
[106.40708160 -127.21439362]
[114.58016968 -114.63661194]
[119.69267273 -100.53475189]
[121.47895813 -85.64149475]
[119.84618378 -70.73046875]
[128.90710449 -82.68454742]
[137.96801758 -94.63861847]
[147.02893066 -106.59268951]
[140.99368286 -120.71612549]
[142.84466553 -135.96307373]
[152.08395386 -148.23217773]
[166.22624207 -154.22312927]
[181.46731567 -152.32437134]
[193.70739746 -143.04666138]
[199.65397644 -128.88566589]
[197.70745850 -113.65061951]
[188.39143372 -101.43967438]
[174.21186829 -95.53750610]
[158.98300171 -97.53177643]
[149.92208862 -85.57770538]
[140.86117554 -73.62363434]
[131.80026245 -61.66955948]
[126.02491760 -47.82595444]
[136.67823792 -34.84697342]
[134.63645935 -17.84082985]
[120.67504883 -7.34727287]
[118.85538483 7.54194641]
[117.03572845 22.43116570]
[115.21607208 37.32038498]
[121.35227966 50.89227676]
[111.99801636 63.65191269]
[110.17835999 78.54113007]
[108.35869598 93.43035126]
[107.59896088 108.41110229]
[107.90296936 123.40802002]
[108.20697021 138.40493774]
[108.51097870 153.40185547]
[108.81497955 168.39877319]
[112.13364410 176.97360229]
[108.97006989 183.70201111]
[108.97006989 198.70201111]
[123.59463501 202.33624268]
[136.91630554 209.36087036]
[148.16273499 219.36372375]
[156.68307495 231.76008606]
[161.98562622 245.82695007]
[163.76623535 260.74505615]
[161.92567444 275.64675903]
[156.57527161 289.66635132]
[148.03009033 301.99047852]
[136.79042053 311.90518188]
[123.51246643 318.83743286]
[108.97006989 322.38809204]
[108.97006989 337.38809204]
[108.97006989 352.38809204]
[108.97006989 367.38809204]
[108.97006989 382.38809204]
[108.97006989 397.38809204]
[108.97006989 412.38809204]
[108.97006989 427.38809204]
[108.97006989 442.38809204]
[108.97006989 457.38809204]
[123.63533020 460.85604858]
[137.10523987 467.61312866]
[148.65339661 477.29492188]
[157.65702820 489.37927246]
[163.63055420 503.21450806]
[166.25183105 518.05450439]
[165.37953186 533.09893799]
[161.06066895 547.53656006]
[153.52815247 560.58868408]
[143.18821716 571.55145264]
[130.59846497 579.83367920]
[116.43786621 584.98864746]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[34 121]
[35 120]
[36 118]
[37 117]
[38 116]
[39 115]
[40 114]
[48 113]
[49 112]
[50 111]
[52 109]
[53 108]
[54 107]
[55 106]
[59 103]
[85 102]
[86 101]
[87 100]
[88 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
