%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUAAACCCCGGGGGGGGGGAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAAxxxxxxxxxxCCCCCAAAAUUCAGAAUAAUAACACACCCGACCACACCGCUAACAAUCAACCCCCCCCCCUACUAAACCCC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 384.88323975]
[71.01555634 379.33023071]
[58.81560135 370.46389771]
[49.20452881 358.84158325]
[42.78650284 345.19390869]
[39.96496582 330.37869263]
[40.91728210 315.32733154]
[45.58358765 300.98590088]
[53.67055511 288.25595093]
[64.66983032 277.93768311]
[77.88998413 270.67968750]
[92.50000000 266.93826294]
[92.50000000 251.93826294]
[92.50000000 236.93826294]
[92.50000000 221.93826294]
[92.50000000 206.93826294]
[92.50000000 191.93826294]
[92.50000000 176.93826294]
[92.50000000 161.93826294]
[92.50000000 146.93826294]
[92.50000000 131.93826294]
[87.24199677 130.22476196]
[82.34651184 127.65243530]
[77.95263672 124.29437256]
[74.18523407 120.24600220]
[71.15134430 115.62234497]
[68.93717194 110.55479431]
[67.60563660 105.18732452]
[52.64435959 104.11025238]
[41.95085907 117.17736053]
[25.74228859 121.27745056]
[10.42850494 114.99256134]
[1.94497442 100.97187042]
[-13.03526688 100.20220947]
[-28.01550865 99.43254852]
[-37.66322327 111.58578491]
[-52.62088013 115.71472931]
[-67.13694763 110.23171997]
[-75.62970734 97.24508667]
[-74.83351135 81.74845123]
[-65.05452728 69.70059204]
[-50.05295944 65.73414612]
[-35.59722519 71.37430573]
[-27.24584770 84.45230865]
[-12.26560688 85.22196960]
[2.71463442 85.99163055]
[10.13083839 74.84927368]
[22.18797684 68.79184723]
[35.77096176 69.50450134]
[47.31059647 76.90748596]
[53.72142792 89.14897156]
[68.68270874 90.22604370]
[75.46984100 78.21527863]
[86.59465790 70.05672455]
[100.08995056 67.19306946]
[113.56934357 70.13069153]
[122.73127747 58.25386429]
[131.89321899 46.37704086]
[141.05514526 34.50021744]
[130.06610107 24.27449608]
[120.06744385 13.07844448]
[111.14449310 1.00758469]
[103.37338257 -11.83509636]
[96.82040405 -25.34002686]
[91.54147339 -39.39198303]
[87.58162689 -53.87108231]
[84.97464752 -68.65378571]
[83.74278259 -83.61396790]
[83.89653778 -98.62400055]
[85.43460083 -113.55580902]
[88.34385681 -128.28201294]
[92.59947205 -142.67695618]
[98.16514587 -156.61782837]
[104.99339294 -169.98568726]
[113.02595520 -182.66647339]
[122.19430542 -194.55201721]
[132.42021179 -205.54090881]
[143.61642456 -215.53936768]
[155.68743896 -224.46211243]
[168.53024292 -232.23301697]
[182.03527832 -238.78576660]
[196.08732605 -244.06446838]
[210.56649780 -248.02406311]
[225.34924316 -250.63079834]
[240.30944824 -251.86241150]
[255.31947327 -251.70841980]
[270.25125122 -250.17010498]
[284.97741699 -247.26060486]
[299.37228394 -243.00474548]
[313.31304932 -237.43884277]
[326.68081665 -230.61036682]
[339.36148071 -222.57759094]
[351.24685669 -213.40905762]
[362.23556519 -203.18296814]
[372.23385620 -191.98658752]
[381.15640259 -179.91542053]
[388.92709351 -167.07247925]
[395.47961426 -153.56733704]
[400.75805664 -139.51519775]
[404.71743774 -125.03597260]
[407.32391357 -110.25318146]
[408.55529785 -95.29295349]
[408.40103149 -80.28292847]
[406.86245728 -65.35117340]
[403.95272827 -50.62506866]
[399.69662476 -36.23027039]
[394.13049316 -22.28958321]
[387.30178833 -8.92194939]
[379.26879883 3.75857854]
[370.10006714 15.64381504]
[359.87380981 26.63235664]
[348.67724609 36.63045120]
[336.60595703 45.55279541]
[323.76287842 53.32326508]
[310.25762939 59.87556839]
[296.20538330 65.15379333]
[281.72610474 69.11292267]
[266.94326782 71.71915436]
[251.98301697 72.95027924]
[236.97299194 72.79576874]
[222.04125977 71.25695801]
[207.31521606 68.34696960]
[192.92048645 64.09063721]
[178.97988892 58.52426529]
[165.61236572 51.69534683]
[152.93197632 43.66215134]
[143.77003479 55.53897476]
[134.60810852 67.41580200]
[125.44616699 79.29262543]
[132.80581665 99.71549225]
[125.80148315 120.26292419]
[107.50000000 131.93826294]
[107.50000000 146.93826294]
[107.50000000 161.93826294]
[107.50000000 176.93826294]
[107.50000000 191.93826294]
[107.50000000 206.93826294]
[107.50000000 221.93826294]
[107.50000000 236.93826294]
[107.50000000 251.93826294]
[107.50000000 266.93826294]
[122.11001587 270.67968750]
[135.33016968 277.93768311]
[146.32945251 288.25595093]
[154.41641235 300.98590088]
[159.08271790 315.32733154]
[160.03503418 330.37869263]
[157.21350098 345.19390869]
[150.79547119 358.84158325]
[141.18440247 370.46389771]
[128.98443604 379.33023071]
[114.96250153 384.88323975]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[28 52]
[29 51]
[33 46]
[34 45]
[35 44]
[56 129]
[57 128]
[58 127]
[59 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
