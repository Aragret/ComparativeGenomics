%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUACAAACCACGGGGGGGGGGAAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUxxxxxxxxxxCUUCUUAUUAUUUGAUCUAGAAAUUGCCCUCCUUUUACCCCUACCAUGAGCCCCCCCCCCCCCUACAAACAAC\
) } def
/len { sequence length } bind def

/coor [
[85.98198700 351.34912109]
[71.71022034 346.53970337]
[58.80623245 338.77429199]
[47.87358093 328.41616821]
[39.42359161 315.94973755]
[33.85149765 301.95809937]
[31.41790771 287.09567261]
[32.23664856 272.05758667]
[36.26942444 257.54724121]
[43.32761765 244.24324036]
[53.08110428 232.76789856]
[65.07369232 223.65789795]
[78.74446869 217.33937073]
[93.45402527 214.10780334]
[93.45402527 199.10780334]
[93.45402527 184.10780334]
[93.45402527 169.10780334]
[93.45402527 154.10780334]
[93.45402527 139.10780334]
[93.45402527 124.10780334]
[93.45402527 109.10780334]
[91.08780670 108.81037903]
[88.66313934 107.95211792]
[73.68190002 108.70217896]
[58.70066833 109.45224762]
[49.45345688 118.49637604]
[36.92358780 118.78294373]
[27.87249184 110.70500183]
[19.33321381 114.10629272]
[12.57540798 111.01113892]
[-2.42384124 111.16121674]
[-16.14591217 119.03620148]
[-28.94995880 111.42662048]
[-43.94920731 111.57669067]
[-52.07236481 124.69225311]
[-66.00662994 131.31341553]
[-81.30562592 129.32739258]
[-93.08750153 119.36793518]
[-97.59269714 104.61304474]
[-93.38362885 89.77096558]
[-81.80339050 79.57775116]
[-66.54719543 77.28601837]
[-52.48324203 83.62705231]
[-44.09928131 96.57744598]
[-29.10003090 96.42736816]
[-16.45080757 88.56312561]
[-2.57391500 96.16196442]
[12.42533398 96.01189423]
[27.42233086 95.71176147]
[41.79652023 85.68614197]
[57.95059967 94.47101593]
[72.93183136 93.72094727]
[87.91307068 92.97087860]
[101.14630890 85.90820312]
[110.10814667 73.87967682]
[119.06997681 61.85114670]
[121.11042023 46.16206741]
[134.91896057 40.57873917]
[143.88079834 28.55021286]
[152.84263611 16.52168465]
[161.80445862 4.49315691]
[155.84593201 -9.59382629]
[157.72608948 -24.67234802]
[166.84065247 -36.70527267]
[180.66192627 -42.52146530]
[195.43919373 -40.65119553]
[204.40103149 -52.67972565]
[207.04080200 -61.48425293]
[213.66448975 -64.85687256]
[222.86521912 -76.70367432]
[213.02558899 -88.08671570]
[205.59826660 -101.16655731]
[200.86706543 -115.43957520]
[199.01205444 -130.35659790]
[200.10267639 -145.34408569]
[204.09513855 -159.82617188]
[210.83419800 -173.24671936]
[220.05915833 -185.09078979]
[231.41400146 -194.90431213]
[244.46109009 -202.31153870]
[258.69805908 -207.02941895]
[273.57714844 -208.87838745]
[288.52624512 -207.78926086]
[302.97094727 -203.80574036]
[316.35659790 -197.08276367]
[325.55731201 -208.92956543]
[334.75802612 -220.77636719]
[343.95877075 -232.62316895]
[336.73321533 -246.02882385]
[335.59136963 -261.21487427]
[340.73110962 -275.55026245]
[351.26187134 -286.55126953]
[365.35919189 -292.31195068]
[380.58062744 -291.83419800]
[394.28894043 -285.20077515]
[404.10910034 -273.56100464]
[408.33969116 -258.93151855]
[406.24774170 -243.84695435]
[398.19573975 -230.92083740]
[385.57867432 -222.39266968]
[370.58255005 -219.74000549]
[355.80557251 -223.42245483]
[346.60485840 -211.57565308]
[337.40411377 -199.72885132]
[328.20339966 -187.88204956]
[338.03048706 -176.57705688]
[345.46548462 -163.56788635]
[350.22103882 -149.35357666]
[352.11254883 -134.47984314]
[351.06552124 -119.51811218]
[347.11831665 -105.04354095]
[340.42080688 -91.61293793]
[331.22872925 -79.74332428]
[319.89392090 -69.89203644]
[306.85073853 -62.43911743]
[292.59960938 -57.67262650]
[277.68762207 -55.77754211]
[262.68768311 -56.82855606]
[248.17640686 -60.78713989]
[234.71202087 -67.50295258]
[225.51129150 -55.65615082]
[216.42956543 -43.71788788]
[207.46772766 -31.68935966]
[213.48750305 -18.06482506]
[211.86859131 -3.15727329]
[202.94622803 9.01884556]
[189.03585815 15.13428307]
[173.83299255 13.45499325]
[164.87115479 25.48352242]
[155.90931702 37.51205063]
[146.94747925 49.54057693]
[145.54804993 64.36929321]
[131.09851074 70.81298065]
[122.13667297 82.84151459]
[113.17483521 94.87004089]
[108.45402527 109.10780334]
[108.45402527 124.10780334]
[108.45402527 139.10780334]
[108.45402527 154.10780334]
[108.45402527 169.10780334]
[108.45402527 184.10780334]
[108.45402527 199.10780334]
[108.45402527 214.10780334]
[123.16358185 217.33937073]
[136.83436584 223.65789795]
[148.82695007 232.76789856]
[158.58042908 244.24324036]
[165.63862610 257.54724121]
[169.67140198 272.05758667]
[170.49014282 287.09567261]
[168.05654907 301.95809937]
[162.48445129 315.94973755]
[154.03446960 328.41616821]
[143.10182190 338.77429199]
[130.19783020 346.53970337]
[115.92606354 351.34912109]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[23 53]
[24 52]
[25 51]
[28 49]
[30 48]
[31 47]
[33 45]
[34 44]
[54 135]
[55 134]
[56 133]
[58 131]
[59 130]
[60 129]
[61 128]
[66 123]
[67 122]
[69 121]
[70 120]
[85 105]
[86 104]
[87 103]
[88 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
