%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAUAGCAAGGGGGGGGGGGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGxxxxxxxxxxCAUUUCUCUACUCAGAAACCUGAAACAUCGGCAUUAUCCUCCUGCUUGCACCCCCCCCCCACUAUAGCAA\
) } def
/len { sequence length } bind def

/coor [
[46.29308701 487.93432617]
[32.44714737 481.91830444]
[20.73848534 472.38888550]
[12.03596020 460.05322266]
[6.98535872 445.82669067]
[5.96146727 430.76501465]
[9.04026604 415.98587036]
[15.99328804 402.58593750]
[26.30457306 391.55960083]
[39.20895386 383.72509766]
[53.74884033 379.66378784]
[53.74884033 364.66378784]
[53.74884033 349.66378784]
[53.74884033 334.66378784]
[53.74884033 319.66378784]
[53.74884033 304.66378784]
[53.74884033 289.66378784]
[53.74884033 274.66378784]
[53.74884033 259.66378784]
[53.74884033 244.66378784]
[41.39726639 236.15269470]
[27.38055420 241.49420166]
[26.58876228 256.70251465]
[19.67385864 270.27102661]
[7.83389330 279.84884644]
[-6.87978983 283.77664185]
[-21.91795540 281.37384033]
[-34.67515182 273.05673218]
[-42.94111252 260.26635742]
[-45.28371811 245.21870422]
[-41.29708862 230.52085876]
[-31.67193985 218.71931458]
[-18.07588387 211.85876465]
[-2.86451745 211.12785339]
[11.32669544 216.65318298]
[22.03904152 227.47749329]
[36.05575562 222.13597107]
[42.39978027 220.28842163]
[48.44737625 220.13066101]
[53.79696655 221.44459534]
[58.12710953 223.92424011]
[64.19012451 210.20419312]
[70.25313568 196.48413086]
[76.31614685 182.76408386]
[80.92171478 168.48861694]
[84.02003479 153.81208801]
[87.11835480 139.13557434]
[90.21667480 124.45904541]
[93.31500244 109.78251648]
[84.52738953 105.26082611]
[80.19406891 93.52802277]
[85.46016693 79.25799561]
[85.14810944 64.26124573]
[76.37503052 54.74878311]
[76.45944977 42.21036911]
[84.80801392 33.40077972]
[84.80801392 18.40077972]
[83.87238312 3.42998719]
[82.00476837 -11.45329285]
[80.13715363 -26.33657265]
[78.26954651 -41.21985245]
[76.40193176 -56.10313416]
[74.53431702 -70.98641205]
[59.67325592 -73.81555176]
[46.41477585 -81.10032654]
[36.05780792 -92.12703705]
[29.61701965 -105.81540680]
[27.72341537 -120.82438660]
[30.56251335 -135.68354797]
[37.85616684 -148.93714905]
[48.88981628 -159.28671265]
[62.58249664 -165.71833801]
[77.59274292 -167.60188293]
[92.44999695 -164.75282288]
[105.69870758 -157.45028687]
[116.04088593 -146.40971375]
[122.46332550 -132.71272278]
[124.33681488 -117.70121765]
[121.47780609 -102.84587860]
[114.16639709 -89.60206604]
[103.11888885 -79.26728058]
[89.41759491 -72.85402679]
[91.28520966 -57.97074509]
[93.15282440 -43.08746719]
[95.02043915 -28.20418549]
[96.88805389 -13.32090569]
[98.75566101 1.56237411]
[109.10517883 -9.29522991]
[124.09503174 -9.84691620]
[135.21467590 0.22053602]
[136.15087891 15.19129086]
[126.37211609 26.56564331]
[111.43032074 27.88575745]
[99.80801392 18.40077972]
[99.80801392 33.40077972]
[109.39911652 48.06401825]
[100.14485931 63.94918823]
[100.45691681 78.94593811]
[112.80849457 87.45703125]
[126.93329620 82.40827179]
[134.01623535 76.53598022]
[141.40480042 77.40474701]
[155.63157654 72.65093231]
[166.09191895 60.02108383]
[182.21238708 63.03147507]
[187.40962219 78.58528137]
[176.33715820 90.68207550]
[160.38539124 86.87771606]
[146.15861511 91.63153076]
[131.98205566 96.53308105]
[117.85724640 101.58183289]
[107.99152374 112.88083649]
[104.89320374 127.55736542]
[101.79488373 142.23388672]
[98.69655609 156.91041565]
[95.59823608 171.58694458]
[107.17417145 162.04766846]
[121.94554901 159.43875122]
[136.08883667 164.43548584]
[145.94308472 175.74449158]
[148.95756531 190.43847656]
[144.35197449 204.71392822]
[133.31846619 214.87570190]
[118.71302032 218.29344177]
[104.31621552 214.08248901]
[93.85462952 203.33283997]
[90.03620148 188.82708740]
[83.97319031 202.54714966]
[77.91017151 216.26719666]
[71.84716034 229.98725891]
[68.74884033 244.66378784]
[68.74884033 259.66378784]
[68.74884033 274.66378784]
[68.74884033 289.66378784]
[68.74884033 304.66378784]
[68.74884033 319.66378784]
[68.74884033 334.66378784]
[68.74884033 349.66378784]
[68.74884033 364.66378784]
[68.74884033 379.66378784]
[83.28872681 383.72509766]
[96.19310760 391.55960083]
[106.50439453 402.58593750]
[113.45741272 415.98587036]
[116.53621674 430.76501465]
[115.51232147 445.82669067]
[110.46172333 460.05322266]
[101.75919342 472.38888550]
[90.05053711 481.91830444]
[76.20459747 487.93432617]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 37]
[22 36]
[41 130]
[42 129]
[43 128]
[44 127]
[45 116]
[46 115]
[47 114]
[48 113]
[49 112]
[52 98]
[53 97]
[56 95]
[57 94]
[58 87]
[59 86]
[60 85]
[61 84]
[62 83]
[63 82]
[99 111]
[100 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
