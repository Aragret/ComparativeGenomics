%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGCAUACUCGGGGGGGGGGCUCAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAxxxxxxxxxxCCCUAGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUACCCCCCCCCCUUAGCAAACUC\
) } def
/len { sequence length } bind def

/coor [
[116.60308075 479.61108398]
[102.58113098 474.05807495]
[90.38117981 465.19174194]
[80.77010345 453.56942749]
[74.35208130 439.92172241]
[71.53054047 425.10653687]
[72.48285675 410.05517578]
[77.14916229 395.71374512]
[85.23612976 382.98379517]
[96.23540497 372.66552734]
[109.45556641 365.40753174]
[124.06557465 361.66610718]
[124.06557465 346.66610718]
[124.06557465 331.66610718]
[124.06557465 316.66610718]
[124.06557465 301.66610718]
[124.06557465 286.66610718]
[124.06557465 271.66610718]
[124.06557465 256.66610718]
[124.06557465 241.66610718]
[124.06557465 226.66610718]
[113.38470459 216.34843445]
[113.17102051 201.13629150]
[124.06557465 190.00317383]
[124.06557465 175.00317383]
[124.06557465 160.00317383]
[124.06557465 145.00317383]
[110.59556580 149.02503967]
[96.78141785 149.17501831]
[83.69532013 145.57473755]
[72.31652069 138.63185120]
[63.45808792 128.99855042]
[57.70918274 117.51240540]
[55.39680099 105.12442017]
[56.56949997 92.82076263]
[61.00359344 81.54432678]
[68.23062134 72.12245178]
[77.58319092 65.20641327]
[71.87852478 51.33353043]
[66.17386627 37.46064758]
[60.46920013 23.58776855]
[54.76453781 9.71488857]
[49.05987549 -4.15799236]
[43.35520935 -18.03087234]
[37.65054703 -31.90375328]
[35.39698792 -17.07400322]
[29.44858170 -3.30387473]
[20.19593048 8.50241375]
[8.24661446 17.56959724]
[-5.61471319 23.30227661]
[-20.47784233 25.32401276]
[-35.36677933 23.50204659]
[-49.30383682 17.95602226]
[-61.37383652 9.05011749]
[-70.78419495 -2.63085747]
[-76.91697693 -16.31986618]
[-79.36946869 -31.11801720]
[-77.98063660 -46.05358505]
[-72.84166718 -60.14581680]
[-64.29002380 -72.46934509]
[-52.88724518 -82.21493530]
[-39.38209915 -88.74265289]
[-24.66140747 -91.62384033]
[-9.69180870 -90.66930389]
[4.54371214 -85.94173431]
[17.11037445 -77.75155640]
[27.18298721 -66.63658905]
[34.09894943 -53.32991028]
[35.02236557 -68.30146027]
[35.94577789 -83.27301025]
[36.86919022 -98.24456024]
[23.34513664 -105.24597168]
[13.84310150 -117.14686584]
[10.00937271 -131.88533020]
[12.50816727 -146.90785217]
[20.90655136 -159.61166382]
[33.74945831 -167.79577637]
[48.81177139 -170.04223633]
[63.48386002 -165.96182251]
[75.22369385 -156.26150513]
[81.99726868 -142.62190247]
[82.63103485 -127.40618134]
[77.01517487 -113.25054932]
[66.12268066 -102.60754395]
[51.84074020 -97.32114410]
[50.91732788 -82.34959412]
[49.99391556 -67.37804413]
[49.07049942 -52.40649414]
[51.52342987 -37.60841751]
[57.22809219 -23.73553658]
[62.93275452 -9.86265564]
[68.63742065 4.01022482]
[74.34207916 17.88310623]
[80.04674530 31.75598526]
[85.75141144 45.62886810]
[91.45606995 59.50174713]
[99.70875549 57.40579987]
[108.45471954 57.02304459]
[117.33246613 58.46515656]
[125.95614624 61.76651764]
[133.93223572 66.87911224]
[140.87727356 73.67103577]
[146.43577576 81.92882538]
[150.29762268 91.36363220]
[164.88136292 87.85446167]
[179.46511841 84.34529114]
[194.04885864 80.83612823]
[208.03395081 71.25209808]
[221.11489868 82.03751373]
[214.37213135 97.59294891]
[197.55802917 95.41987610]
[182.97428894 98.92904663]
[168.39053345 102.43820953]
[153.80677795 105.94738007]
[153.96078491 120.94658661]
[168.61351013 124.15558624]
[183.26623535 127.36457825]
[197.49595642 119.95548248]
[212.10166931 126.59267426]
[215.87915039 142.18467712]
[205.93060303 154.77062988]
[189.88772583 154.69566345]
[180.05723572 142.01730347]
[165.40451050 138.80830383]
[150.75178528 135.59931946]
[139.06558228 145.00317383]
[139.06558228 160.00317383]
[139.06558228 175.00317383]
[139.06558228 190.00317383]
[149.96012878 201.13629150]
[149.74644470 216.34843445]
[139.06558228 226.66610718]
[139.06558228 241.66610718]
[139.06558228 256.66610718]
[139.06558228 271.66610718]
[139.06558228 286.66610718]
[139.06558228 301.66610718]
[139.06558228 316.66610718]
[139.06558228 331.66610718]
[139.06558228 346.66610718]
[139.06558228 361.66610718]
[153.67558289 365.40753174]
[166.89575195 372.66552734]
[177.89501953 382.98379517]
[185.98199463 395.71374512]
[190.64830017 410.05517578]
[191.60061646 425.10653687]
[188.77906799 439.92172241]
[182.36105347 453.56942749]
[172.74998474 465.19174194]
[160.55001831 474.05807495]
[146.52807617 479.61108398]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 129]
[25 128]
[26 127]
[27 126]
[38 96]
[39 95]
[40 94]
[41 93]
[42 92]
[43 91]
[44 90]
[45 89]
[68 88]
[69 87]
[70 86]
[71 85]
[104 114]
[105 113]
[106 112]
[107 111]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
