%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCAACACGGGGGGGGGGCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAUACCAACACCxxxxxxxxxxAGCUAUUACCUAAAACAAUUUCACAGCACCAAAUCUCCACCUCCAUCAUCCCCCCCCCCCACCUCAACCC\
) } def
/len { sequence length } bind def

/coor [
[75.07411194 388.41036987]
[61.85391235 381.13790894]
[50.96710587 370.69088745]
[43.15597916 357.78164673]
[38.95309448 343.29034424]
[38.64502335 328.20498657]
[42.25276566 313.55416870]
[49.53033829 300.33679199]
[59.98154449 289.45401001]
[72.89380646 281.64785767]
[87.38674164 277.45059204]
[87.07468414 262.45382690]
[86.76263428 247.45707703]
[86.45057678 232.46031189]
[86.13851929 217.46356201]
[85.82646179 202.46681213]
[85.51440430 187.47006226]
[85.20234680 172.47329712]
[84.89029694 157.47654724]
[84.57823944 142.47979736]
[78.77756500 137.72561646]
[71.86159515 151.03611755]
[69.59082031 165.86323547]
[57.01666641 174.04190063]
[42.54211044 170.10652161]
[35.84013367 156.68699646]
[41.38949203 142.75126648]
[55.48293304 137.61230469]
[67.17622375 128.21725464]
[61.37555695 123.46308136]
[46.60950089 126.10194397]
[34.42701340 137.08006287]
[18.91407394 131.76208496]
[16.02906609 115.61871338]
[28.73983574 105.25684357]
[43.97063446 111.33588409]
[58.73669052 108.69702148]
[63.98848724 84.83538055]
[80.70812225 69.63093567]
[101.32682037 67.14388275]
[105.33456421 52.68919373]
[109.34230042 38.23450470]
[113.35004425 23.77981567]
[117.35778046 9.32512760]
[113.58892822 -6.04062414]
[124.44545746 -16.23793411]
[128.45320129 -30.69262314]
[132.46093750 -45.14731216]
[136.46867371 -59.60200119]
[140.47640991 -74.05668640]
[126.46475220 -79.44453430]
[113.03851318 -86.15956116]
[100.32305908 -94.13906860]
[88.43710327 -103.30856323]
[77.49163055 -113.58242798]
[67.58884430 -124.86472321]
[58.82119751 -137.05012512]
[51.27055740 -150.02484131]
[45.00742722 -163.66773987]
[40.09027863 -177.85144043]
[36.56502533 -192.44349670]
[34.46458435 -207.30766296]
[33.80856705 -222.30517578]
[34.60309982 -237.29597473]
[36.84075928 -252.14010620]
[40.50065613 -266.69897461]
[45.54861832 -280.83663940]
[51.93751144 -294.42111206]
[59.60768127 -307.32553101]
[68.48751831 -319.42941284]
[78.49410248 -330.61975098]
[89.53401184 -340.79205322]
[101.50416565 -349.85137939]
[114.29279327 -357.71307373]
[127.78048706 -364.30380249]
[141.84132385 -369.56198120]
[156.34400940 -373.43853760]
[171.15313721 -375.89724731]
[186.13043213 -376.91519165]
[201.13604736 -376.48284912]
[216.02987671 -374.60424805]
[230.67288208 -371.29693604]
[244.92829895 -366.59179688]
[258.66305542 -360.53277588]
[271.74890137 -353.17642212]
[284.06369019 -344.59140015]
[295.49237061 -334.85794067]
[305.92825317 -324.06686401]
[315.27395630 -312.31893921]
[323.44213867 -299.72384644]
[330.35659790 -286.39920044]
[335.95275879 -272.46945190]
[340.17834473 -258.06457520]
[342.99389648 -243.31913757]
[344.37316895 -228.37078857]
[344.30325317 -213.35910034]
[342.78482056 -198.42425537]
[339.83203125 -183.70567322]
[335.47247314 -169.34078979]
[329.74682617 -155.46374512]
[322.70855713 -142.20408630]
[314.42340088 -129.68563843]
[304.96871948 -118.02526855]
[294.43276978 -107.33185577]
[282.91390991 -97.70523834]
[270.51971436 -89.23531342]
[257.36593628 -82.00115204]
[243.57533264 -76.07030487]
[229.27670288 -71.49814606]
[214.60353088 -68.32736969]
[199.69284058 -66.58757019]
[184.68385315 -66.29500580]
[169.71669006 -67.45240021]
[154.93110657 -70.04895020]
[150.92337036 -55.59426117]
[146.91561890 -41.13957214]
[142.90788269 -26.68488312]
[138.90014648 -12.23019409]
[142.95565796 2.10166144]
[131.81246948 13.33286858]
[127.80473328 27.78755760]
[123.79698944 42.24224472]
[119.78925323 56.69693375]
[115.78150940 71.15161896]
[127.85397339 79.76065063]
[135.35450745 93.32804871]
[136.30981445 109.47773743]
[129.95657349 125.08782196]
[116.99949646 136.89401245]
[99.57498932 142.16773987]
[99.88704681 157.16448975]
[100.19910431 172.16123962]
[100.51116180 187.15800476]
[100.82321930 202.15475464]
[101.13526917 217.15150452]
[101.44732666 232.14825439]
[101.75938416 247.14501953]
[102.07144165 262.14175415]
[102.38349915 277.13851929]
[117.03849030 280.72927856]
[130.26429749 287.99154663]
[141.15916443 298.43014526]
[148.98027039 311.33334351]
[153.19433594 325.82141113]
[153.51405334 340.90652466]
[149.91763306 355.56011963]
[142.65026855 368.78311157]
[132.20745850 379.67395020]
[119.30123138 387.49008179]
[104.81154633 391.69854736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[30 37]
[31 36]
[40 124]
[41 123]
[42 122]
[43 121]
[44 120]
[46 118]
[47 117]
[48 116]
[49 115]
[50 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
