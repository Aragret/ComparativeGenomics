%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACAGCUCUGGGGGGGGGGUUGGACACUAGGAAAAAACCUUGUAGAGAGAGUAAAAAAUUUAACACCCAxxxxxxxxxxCAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACAACACAACCCCCCCCCCGAACACCUCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 430.18640137]
[71.19830322 424.17034912]
[59.48964310 414.64093018]
[50.78712082 402.30526733]
[45.73651886 388.07876587]
[44.71262741 373.01705933]
[47.79142761 358.23791504]
[54.74444962 344.83798218]
[65.05573273 333.81164551]
[77.96011353 325.97714233]
[92.50000000 321.91583252]
[92.50000000 306.91583252]
[92.50000000 291.91583252]
[92.50000000 276.91583252]
[92.50000000 261.91583252]
[92.50000000 246.91583252]
[92.50000000 231.91583252]
[92.50000000 216.91583252]
[92.50000000 201.91583252]
[92.50000000 186.91583252]
[92.50000000 171.91583252]
[92.50000000 156.91583252]
[92.50000000 141.91583252]
[71.99349213 132.07525635]
[59.47803879 113.08271027]
[44.61499023 115.10504913]
[29.75194359 117.12738037]
[24.21299934 120.92575073]
[18.45784950 121.25672913]
[14.23001099 118.91133118]
[-0.70429695 120.31363678]
[-15.63860416 121.71593475]
[-25.52595139 134.04541016]
[-41.24452591 135.68917847]
[-53.46877289 125.67203522]
[-54.94626999 109.93695831]
[-44.80043793 97.81930542]
[-29.05062103 96.50824738]
[-17.04090881 106.78163147]
[-2.10660052 105.37932587]
[12.82770729 103.97702026]
[27.72960854 102.26433563]
[42.59265518 100.24199677]
[57.45570374 98.21966553]
[58.23637390 91.69419861]
[60.01187897 85.36657715]
[62.73992538 79.38753510]
[66.35552979 73.89949799]
[70.77256012 69.03318787]
[75.88581085 64.90451813]
[81.57347107 61.61185455]
[77.56573486 47.15716553]
[73.55799103 32.70247650]
[69.55025482 18.24778748]
[65.54251099 3.79309916]
[50.50428772 4.60915804]
[35.64229584 2.17291760]
[21.65165710 -3.40167403]
[9.18673706 -11.85388374]
[-1.16945553 -22.78838539]
[-8.93254375 -35.69375229]
[-13.73943329 -49.96638107]
[-15.36529827 -64.93871307]
[-13.73409271 -79.91046143]
[-8.92211151 -94.18136597]
[-1.15442038 -107.08396912]
[9.20567226 -118.01477814]
[21.67360687 -126.46253967]
[35.66623306 -132.03213501]
[50.52909470 -134.46307373]
[65.56702423 -133.64164734]
[80.07667542 -129.60629272]
[93.37939453 -122.54572296]
[104.85300446 -112.79019165]
[113.96085358 -100.79597473]
[120.27695465 -87.12407684]
[123.50588989 -72.41394043]
[123.49664307 -57.35359573]
[120.24964142 -42.64743805]
[113.91674805 -28.98330498]
[104.79416656 -17.00028992]
[93.30858612 -7.25886059]
[79.99720001 -0.21464117]
[84.00493622 14.24004745]
[88.01268005 28.69473648]
[92.02041626 43.14942551]
[96.02816010 57.60411072]
[119.21311188 61.99943161]
[136.49739075 78.06538391]
[150.51409912 72.72386932]
[164.53080750 67.38235474]
[178.54753113 62.04084396]
[192.45008850 56.40888596]
[206.23246765 50.48892593]
[220.01484680 44.56896210]
[233.79722595 38.64899826]
[233.56457520 23.44984245]
[239.17076111 9.32046795]
[249.76084900 -1.58450079]
[263.71994019 -7.60213375]
[278.91940308 -7.81478596]
[293.04138184 -2.19002962]
[303.93240356 8.41440105]
[309.93167114 22.38140678]
[310.12432861 37.58111954]
[304.48101807 51.69569778]
[293.86227417 62.57276917]
[279.88739014 68.55365753]
[264.68740845 68.72631836]
[250.58027649 63.06442642]
[239.71719360 52.43137741]
[225.93481445 58.35134125]
[212.15242004 64.27130890]
[198.37004089 70.19126892]
[195.78146362 74.27474213]
[190.57049561 76.73992920]
[183.88903809 76.05755615]
[169.87232971 81.39907074]
[155.85560608 86.74058533]
[141.83889771 92.08209229]
[142.57916260 100.44971466]
[141.66232300 108.79982758]
[139.12409973 116.80747986]
[135.06326294 124.16101837]
[129.63783264 130.57426453]
[123.05896759 135.79763794]
[115.58270264 139.62783813]
[107.50000000 141.91583252]
[107.50000000 156.91583252]
[107.50000000 171.91583252]
[107.50000000 186.91583252]
[107.50000000 201.91583252]
[107.50000000 216.91583252]
[107.50000000 231.91583252]
[107.50000000 246.91583252]
[107.50000000 261.91583252]
[107.50000000 276.91583252]
[107.50000000 291.91583252]
[107.50000000 306.91583252]
[107.50000000 321.91583252]
[122.03988647 325.97714233]
[134.94427490 333.81164551]
[145.25555420 344.83798218]
[152.20857239 358.23791504]
[155.28736877 373.01705933]
[154.26348877 388.07876587]
[149.21287537 402.30526733]
[140.51036072 414.64093018]
[128.80169678 424.17034912]
[114.95575714 430.18640137]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[25 44]
[26 43]
[27 42]
[30 41]
[31 40]
[32 39]
[51 87]
[52 86]
[53 85]
[54 84]
[55 83]
[89 120]
[90 119]
[91 118]
[92 117]
[93 114]
[94 113]
[95 112]
[96 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
