%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCUACAAGGGGGGGGGGACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCAUxxxxxxxxxxGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUCCCCCCCCCCAGCCCUACUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 380.79101562]
[71.19830322 374.77499390]
[59.48964310 365.24557495]
[50.78712082 352.90991211]
[45.73651886 338.68338013]
[44.71262741 323.62170410]
[47.79142761 308.84252930]
[54.74444962 295.44262695]
[65.05573273 284.41629028]
[77.96011353 276.58178711]
[92.50000000 272.52044678]
[92.50000000 257.52044678]
[92.50000000 242.52046204]
[92.50000000 227.52046204]
[92.50000000 212.52046204]
[92.50000000 197.52046204]
[92.50000000 182.52046204]
[92.50000000 167.52046204]
[92.50000000 152.52046204]
[92.50000000 137.52046204]
[92.50000000 122.52046204]
[74.87285614 112.46789551]
[69.36248779 89.57004547]
[54.59642792 92.20890808]
[39.83037186 94.84777069]
[25.06431770 97.48664093]
[10.29826164 100.12550354]
[6.24801731 114.84142303]
[-3.79259396 126.33702087]
[-17.82999992 132.32984924]
[-33.07706451 131.63002014]
[-46.50647354 124.37648773]
[-55.45180511 112.00943756]
[-58.13695908 96.98436737]
[-54.02879333 82.28451538]
[-43.94298935 70.82854462]
[-29.88209343 64.89103699]
[-14.63790226 65.65090942]
[-1.23716307 72.95726776]
[7.65939760 85.35944366]
[22.42545319 82.72058105]
[37.19150925 80.08171844]
[51.95756531 77.44285583]
[66.72361755 74.80399323]
[71.03120422 60.43580627]
[60.15237808 50.10860062]
[49.27355576 39.78139496]
[35.85750961 46.80197144]
[20.88842964 49.08350372]
[5.99005032 46.37850952]
[-7.22156620 38.98040771]
[-17.31332207 27.69168854]
[-23.19053650 13.73686600]
[-24.21569824 -1.37034309]
[-20.27760124 -15.99122238]
[-11.80342102 -28.53980827]
[0.28762445 -37.65492249]
[14.68399048 -42.34783173]
[29.82406616 -42.10947418]
[44.06557083 -36.96571350]
[55.86368942 -27.47450447]
[63.93865585 -14.66537952]
[67.41455078 0.07222094]
[65.91434479 15.13967228]
[59.60075760 28.90257072]
[70.47958374 39.22977448]
[81.35840607 49.55698013]
[76.76246643 35.27841949]
[67.43457031 23.53149414]
[63.10792160 9.16903687]
[64.39506531 -5.77563667]
[71.11377716 -19.18678665]
[82.31286621 -29.16577911]
[96.40687561 -34.29987335]
[111.40048981 -33.86222458]
[125.17104340 -27.91479492]
[135.76901245 -17.29957008]
[141.69403076 -3.51936221]
[142.10729980 11.47494411]
[136.95028687 25.56058311]
[126.95307922 36.74343109]
[113.52973175 43.44067383]
[103.32366180 54.43321991]
[117.55043793 49.67940521]
[131.77722168 44.92559052]
[146.00399780 40.17177582]
[131.40333557 36.73365784]
[118.53468323 29.02666664]
[108.61186218 17.77776718]
[102.57086182 4.04800987]
[100.98147583 -10.86754799]
[103.99364471 -25.56199837]
[111.32323456 -38.64928818]
[122.27887726 -48.89495850]
[135.82719421 -55.33259201]
[150.69024658 -57.35495377]
[165.46604919 -54.77128983]
[178.76091003 -47.82529831]
[189.32077026 -37.17216492]
[196.14959717 -23.81674385]
[198.60322571 -9.01878357]
[196.45024109 5.82590199]
[189.89372253 19.31708717]
[179.55212402 30.18221664]
[166.40071106 37.39650345]
[181.38041687 38.17634964]
[196.36013794 38.95619583]
[211.33984375 39.73604202]
[226.31956482 40.51588440]
[235.11759949 37.82398224]
[241.60182190 41.47097778]
[256.56207275 42.56229019]
[271.52230835 43.65359879]
[287.75936890 38.77564621]
[296.94155884 53.02779388]
[285.78826904 65.79652405]
[270.43099976 58.61384964]
[255.47076416 57.52253723]
[240.51051331 56.43122864]
[225.53971863 55.49559784]
[210.55999756 54.71575546]
[195.58029175 53.93590927]
[180.60057068 53.15606308]
[165.62086487 52.37622070]
[150.75781250 54.39855194]
[136.53103638 59.15237045]
[122.30425262 63.90618515]
[108.07747650 68.65999603]
[128.03353882 99.02922058]
[107.50000000 122.52046204]
[107.50000000 137.52046204]
[107.50000000 152.52046204]
[107.50000000 167.52046204]
[107.50000000 182.52046204]
[107.50000000 197.52046204]
[107.50000000 212.52046204]
[107.50000000 227.52046204]
[107.50000000 242.52046204]
[107.50000000 257.52044678]
[107.50000000 272.52044678]
[122.03988647 276.58178711]
[134.94427490 284.41629028]
[145.25555420 295.44262695]
[152.20857239 308.84252930]
[155.28736877 323.62170410]
[154.26348877 338.68338013]
[149.21287537 352.90991211]
[140.51036072 365.24557495]
[128.80169678 374.77499390]
[114.95575714 380.79101562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 44]
[24 43]
[25 42]
[26 41]
[27 40]
[45 67]
[46 66]
[47 65]
[83 128]
[84 127]
[85 126]
[86 125]
[105 124]
[106 123]
[107 122]
[108 121]
[109 120]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
