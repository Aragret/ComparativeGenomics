%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUACUCCUGGGGGGGGGGGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUxxxxxxxxxxCCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACCCCCCCCCCCUCCUACCCCU\
) } def
/len { sequence length } bind def

/coor [
[75.44557190 382.32083130]
[61.42362595 376.76782227]
[49.22366714 367.90148926]
[39.61259842 356.27917480]
[33.19457245 342.63146973]
[30.37303543 327.81628418]
[31.32534981 312.76489258]
[35.99165726 298.42349243]
[44.07862091 285.69354248]
[55.07789612 275.37524414]
[68.29805756 268.11727905]
[82.90806580 264.37585449]
[82.90806580 249.37583923]
[82.90806580 234.37583923]
[82.90806580 219.37583923]
[82.90806580 204.37583923]
[82.90806580 189.37583923]
[82.90806580 174.37583923]
[82.90806580 159.37583923]
[82.90806580 144.37583923]
[82.90806580 129.37583923]
[71.92726898 119.15713501]
[56.96598434 120.23420715]
[42.00470352 121.31127167]
[27.04342461 122.38834381]
[12.10741138 123.77236938]
[-2.79703617 125.46276855]
[-15.63735867 134.70596313]
[-29.15549660 128.45222473]
[-44.05994415 130.14262390]
[-58.96438980 131.83302307]
[-73.86883545 133.52342224]
[-88.77328491 135.21382141]
[-101.63204956 145.39144897]
[-116.77367401 139.09355164]
[-118.62174225 122.79887390]
[-105.27513123 113.26997375]
[-90.46368408 120.30937195]
[-75.55923462 118.61897278]
[-60.65478897 116.92857361]
[-45.75033951 115.23817444]
[-30.84589386 113.54778290]
[-19.07163811 104.42549133]
[-4.48743391 110.55831909]
[10.41701412 108.86791992]
[14.07239914 105.70764160]
[19.76919556 104.85066986]
[25.96635437 107.42706299]
[40.92763519 106.34999084]
[55.88891602 105.27292633]
[70.85019684 104.19585419]
[72.22169495 94.26818085]
[76.74491119 85.74439240]
[83.64577484 79.54378510]
[91.91355133 76.23480988]
[100.44354248 75.98754883]
[108.18294525 78.58001709]
[117.82476044 67.08935547]
[127.46657562 55.59868622]
[137.10838318 44.10801697]
[146.75019836 32.61735153]
[149.69366455 17.07236671]
[163.80171204 12.29615021]
[153.33590698 1.53241885]
[144.01275635 -10.23490906]
[135.92794800 -22.88508034]
[129.16444397 -36.28828430]
[123.79162598 -50.30698395]
[119.86464691 -64.79731750]
[117.42379761 -79.61060333]
[116.49413300 -94.59481812]
[117.08518219 -109.59620667]
[119.19088745 -124.46083069]
[122.78964233 -139.03614807]
[127.84451294 -153.17260742]
[134.30361938 -166.72512817]
[142.10070801 -179.55464172]
[151.15573120 -191.52951050]
[161.37579346 -202.52684021]
[172.65602112 -212.43377686]
[184.88066101 -221.14868164]
[197.92425537 -228.58209229]
[211.65295410 -234.65776062]
[225.92590332 -239.31330872]
[240.59660339 -242.50099182]
[255.51454163 -244.18809509]
[270.52661133 -244.35728455]
[285.47879028 -243.00683594]
[300.21762085 -240.15061951]
[314.59185791 -235.81793213]
[328.45401001 -230.05323792]
[341.66183472 -222.91569519]
[354.07977295 -214.47853088]
[365.58041382 -204.82835388]
[376.04574585 -194.06416321]
[385.36837769 -182.29641724]
[393.45263672 -169.64588928]
[400.21554565 -156.24238586]
[405.58773804 -142.22344971]
[409.51409912 -127.73294830]
[411.95428467 -112.91955566]
[412.88330078 -97.93530273]
[412.29156494 -82.93393707]
[410.18521118 -68.06940460]
[406.58581543 -53.49424362]
[401.53033447 -39.35801315]
[395.07061768 -25.80577469]
[387.27297974 -12.97659874]
[378.21740723 -1.00213158]
[367.99685669 9.99474812]
[356.71621704 19.90119362]
[344.49118042 28.61555099]
[331.44726562 36.04839325]
[317.71829224 42.12345123]
[303.44515991 46.77838135]
[288.77429199 49.96541595]
[273.85629272 51.65185547]
[258.84420776 51.82038879]
[243.89210510 50.46929169]
[229.15341187 47.61242294]
[214.77935791 43.27910233]
[200.91744995 37.51379776]
[187.70996094 30.37566948]
[175.29237366 21.93796539]
[173.03855896 36.66106033]
[158.24085999 42.25916672]
[148.59906006 53.74983215]
[138.95724487 65.24050140]
[129.31542969 76.73116302]
[119.67360687 88.22183228]
[122.31090546 113.71643829]
[97.90806580 129.37583923]
[97.90806580 144.37583923]
[97.90806580 159.37583923]
[97.90806580 174.37583923]
[97.90806580 189.37583923]
[97.90806580 204.37583923]
[97.90806580 219.37583923]
[97.90806580 234.37583923]
[97.90806580 249.37583923]
[97.90806580 264.37585449]
[112.51808167 268.11727905]
[125.73824310 275.37524414]
[136.73751831 285.69354248]
[144.82447815 298.42349243]
[149.49078369 312.76489258]
[150.44309998 327.81628418]
[147.62156677 342.63146973]
[141.20353699 356.27917480]
[131.59246826 367.90148926]
[119.39250946 376.76782227]
[105.37056732 382.32083130]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 51]
[23 50]
[24 49]
[25 48]
[26 45]
[27 44]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[57 130]
[58 129]
[59 128]
[60 127]
[61 126]
[63 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
