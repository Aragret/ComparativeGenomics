%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACCAAUACGGGGGGGGGGUACCAAUCAAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCAAUAAAACxxxxxxxxxxAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUCCCCCCCCCCUAACCAAAAC\
) } def
/len { sequence length } bind def

/coor [
[87.66732025 363.92358398]
[73.82138824 357.90756226]
[62.11272430 348.37814331]
[53.41019821 336.04248047]
[48.35959625 321.81594849]
[47.33570480 306.75427246]
[50.41450500 291.97509766]
[57.36752701 278.57519531]
[67.67881012 267.54885864]
[80.58319092 259.71435547]
[95.12307739 255.65303040]
[95.12307739 240.65303040]
[95.12307739 225.65303040]
[95.12307739 210.65303040]
[95.12307739 195.65303040]
[95.12307739 180.65303040]
[95.12307739 165.65303040]
[95.12307739 150.65303040]
[95.12307739 135.65303040]
[95.12307739 120.65303040]
[87.93169403 133.81677246]
[85.78015900 148.66166687]
[77.15781403 160.93582153]
[63.92249298 167.99459839]
[48.92596054 168.31704712]
[35.39946365 161.83369446]
[26.25751114 149.94148254]
[23.46988678 135.20277405]
[27.63722992 120.79329681]
[37.86161804 109.81777954]
[51.94003677 104.64109802]
[66.84017181 106.37904358]
[81.41047668 102.81446075]
[66.91487885 98.95729828]
[62.62775040 100.29221344]
[58.55897141 100.16535950]
[55.15180969 98.83376312]
[52.71621704 96.67462921]
[51.40068817 94.12969208]
[37.27588272 89.08093262]
[23.15108109 84.03217316]
[9.02627754 78.98342133]
[-4.37858105 87.03598022]
[-19.81521034 84.53708649]
[-29.99490356 72.66662598]
[-30.11112404 57.02947235]
[-20.10899544 45.00901413]
[-4.71121407 42.28094101]
[8.81185532 50.13336945]
[14.07503414 64.85861969]
[28.19983673 69.90737152]
[42.32463837 74.95613098]
[56.44944382 80.00488281]
[70.77204132 84.46170044]
[85.26763916 88.31886292]
[99.54309845 83.71329498]
[109.05145264 72.11195374]
[118.55981445 60.51061630]
[128.06817627 48.90927505]
[137.57653809 37.30793381]
[146.71826172 25.41555214]
[155.48446655 13.24371529]
[164.25068665 1.07187867]
[173.01689148 -11.09995842]
[173.75808716 -32.47399139]
[192.79289246 -40.36062622]
[200.78280640 -53.05555725]
[208.77273560 -65.75048828]
[216.76264954 -78.44541931]
[203.34727478 -71.73512268]
[188.63366699 -68.81798553]
[173.67292786 -69.90240479]
[159.53379822 -74.91090393]
[147.22636414 -83.48569489]
[137.62983704 -95.01420593]
[131.42976379 -108.67287445]
[129.06907654 -123.48594666]
[130.71641541 -138.39521790]
[136.25408936 -152.33558655]
[145.28651428 -164.31120300]
[157.16842651 -173.46655273]
[171.05099487 -179.14758301]
[185.94248962 -180.94847107]
[200.77911377 -178.74055481]
[214.50093079 -172.68156433]
[226.12773132 -163.20433044]
[234.82888794 -150.98591614]
[239.98281860 -136.89913940]
[241.22134399 -121.95036316]
[238.45597839 -107.20747375]
[231.88732910 -93.72825623]
[244.49844360 -101.84979248]
[257.10958862 -109.97133636]
[269.72070312 -118.09288025]
[268.89526367 -133.42958069]
[275.86306763 -147.11698914]
[288.74978638 -155.47328186]
[304.08898926 -156.25065613]
[317.75451660 -149.23999023]
[326.07037354 -136.32713318]
[326.79965210 -120.98555756]
[319.74618530 -107.34209442]
[306.80731201 -99.06674957]
[291.46353149 -98.38555908]
[277.84225464 -105.48175049]
[265.23110962 -97.36020660]
[252.61999512 -89.23867035]
[240.00886536 -81.11712646]
[229.45758057 -70.45549774]
[221.46765137 -57.76057053]
[213.47773743 -45.06563950]
[205.48782349 -32.37071228]
[208.87644958 -24.04251480]
[208.00216675 -14.95505428]
[202.93692017 -7.19409323]
[194.72909546 -2.60037947]
[185.18872070 -2.33375096]
[176.42251587 9.83808613]
[167.65631104 22.00992203]
[158.89010620 34.18175888]
[159.12397766 37.76125336]
[157.59442139 41.62934494]
[154.18655396 44.93673706]
[149.17787170 46.81629181]
[139.66950989 58.41763306]
[130.16116333 70.01897430]
[120.65279388 81.62031555]
[111.14443970 93.22165680]
[116.36235809 100.12090302]
[116.66258240 110.47503662]
[110.12307739 120.65303040]
[110.12307739 135.65303040]
[110.12307739 150.65303040]
[110.12307739 165.65303040]
[110.12307739 180.65303040]
[110.12307739 195.65303040]
[110.12307739 210.65303040]
[110.12307739 225.65303040]
[110.12307739 240.65303040]
[110.12307739 255.65303040]
[124.66296387 259.71435547]
[137.56735229 267.54885864]
[147.87863159 278.57519531]
[154.83164978 291.97509766]
[157.91044617 306.75427246]
[156.88656616 321.81594849]
[151.83595276 336.04248047]
[143.13343811 348.37814331]
[131.42477417 357.90756226]
[117.57883453 363.92358398]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[33 55]
[34 54]
[39 53]
[40 52]
[41 51]
[42 50]
[56 128]
[57 127]
[58 126]
[59 125]
[60 124]
[61 120]
[62 119]
[63 118]
[64 117]
[66 112]
[67 111]
[68 110]
[69 109]
[91 108]
[92 107]
[93 106]
[94 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
