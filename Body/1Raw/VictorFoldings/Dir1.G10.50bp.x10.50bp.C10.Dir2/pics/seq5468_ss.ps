%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACUAACACGGGGGGGGGGCCUUAAUUCCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCxxxxxxxxxxUUUUAAUAAUCAACACCCUCCUAGCCUUACUACUAAUAAUUAUUACAUUUCCCCCCCCCCUGACUACCAC\
) } def
/len { sequence length } bind def

/coor [
[233.29154968 229.82232666]
[224.71740723 217.50811768]
[216.94984436 204.66987610]
[210.02079773 191.36032104]
[203.95872498 177.63418579]
[198.78855896 163.54783630]
[194.53153992 149.15917969]
[191.20513916 134.52734375]
[188.82305908 119.71244049]
[187.39506531 104.77535248]
[172.40235901 105.24339294]
[157.40966797 105.71144104]
[142.41697693 106.17948151]
[127.42427063 106.64752197]
[112.43157959 107.11556244]
[100.44694519 114.31697083]
[88.03646088 107.87712860]
[73.04376984 108.34517670]
[58.05107117 108.81321716]
[71.00719452 116.37223816]
[80.87600708 127.66854858]
[86.62680054 141.52236938]
[87.65897369 156.48681641]
[83.86473083 170.99900818]
[75.64033508 183.54330444]
[63.84473801 192.80958557]
[49.70986557 197.83007812]
[34.71195602 198.08045959]
[20.41738129 193.53456116]
[8.31905746 184.66717529]
[-0.31947365 172.40440369]
[-4.59600830 158.02694702]
[-4.06390810 143.03637695]
[1.22125494 128.99832153]
[10.70750141 117.37889099]
[23.40409279 109.39161682]
[37.98801041 105.87046051]
[23.76123047 101.11664581]
[9.53445053 96.36283112]
[-4.69232798 91.60901642]
[-18.91910744 86.85520172]
[-33.14588547 82.10138702]
[-47.17313385 89.38231659]
[-62.21485901 84.53236389]
[-69.34707642 70.42892456]
[-64.33836365 55.43931580]
[-50.16030502 48.45660782]
[-35.22449112 53.62351608]
[-28.39207077 67.87461090]
[-14.16529274 72.62842560]
[0.06148665 77.38224030]
[14.28826618 82.13605499]
[28.51504517 86.88986969]
[42.74182510 91.64368439]
[57.58303070 93.82051849]
[72.57572937 93.35247803]
[87.56842041 92.88443756]
[99.55305481 85.68302917]
[111.96353912 92.12287140]
[126.95623016 91.65482330]
[141.94892883 91.18678284]
[156.94161987 90.71874237]
[171.93432617 90.25070190]
[186.92701721 89.78266144]
[187.42053223 74.78559113]
[188.87390137 59.85095215]
[191.28114319 45.04011536]
[194.63238525 30.41394615]
[198.91384888 16.03254318]
[204.10794067 1.95500278]
[210.19329834 -11.76082516]
[217.14495850 -25.05858040]
[224.93431091 -37.88361740]
[233.52935791 -50.18323898]
[242.89480591 -61.90689850]
[252.99214172 -73.00642395]
[263.77987671 -83.43620300]
[275.21371460 -93.15337372]
[287.24661255 -102.11801147]
[299.82916260 -110.29328156]
[312.90966797 -117.64557648]
[326.43435669 -124.14469910]
[340.34765625 -129.76393127]
[354.59237671 -134.48019409]
[369.11004639 -138.27409363]
[383.84091187 -141.13003540]
[398.72454834 -143.03631592]
[413.69970703 -143.98506165]
[428.70489502 -143.97239685]
[443.67843628 -142.99838257]
[458.55877686 -141.06700134]
[473.28485107 -138.18618774]
[487.79605103 -134.36779785]
[502.03283691 -129.62750244]
[515.93664551 -123.98480225]
[529.45031738 -117.46286774]
[542.51837158 -110.08850861]
[555.08715820 -101.89202118]
[567.10491943 -92.90708923]
[578.52227783 -83.17063141]
[589.29241943 -72.72266388]
[599.37103271 -61.60611725]
[608.71667480 -49.86666870]
[617.29095459 -37.55256271]
[625.05865479 -24.71439743]
[631.98785400 -11.40493107]
[638.05004883 2.32114720]
[643.22039795 16.40743256]
[647.47760010 30.79603958]
[650.80413818 45.42784500]
[653.18640137 60.24272156]
[654.61456299 75.17978668]
[655.08276367 90.17767334]
[654.58905029 105.17473602]
[653.13555908 120.10935974]
[650.72814941 134.92016602]
[647.37670898 149.54629517]
[643.09509277 163.92765808]
[637.90087891 178.00514221]
[631.81530762 191.72090149]
[624.86352539 205.01856995]
[617.07403564 217.84352112]
[608.47882080 230.14305115]
[599.11328125 241.86660767]
[589.01580811 252.96601868]
[578.22796631 263.39569092]
[566.79400635 273.11273193]
[554.76104736 282.07723999]
[542.17840576 290.25234985]
[529.09777832 297.60452271]
[515.57305908 304.10348511]
[501.65966797 309.72256470]
[487.41488647 314.43865967]
[472.89721680 318.23239136]
[458.16629028 321.08819580]
[443.28265381 322.99429321]
[428.30746460 323.94287109]
[413.30230713 323.93005371]
[398.32876587 322.95587158]
[383.44842529 321.02432251]
[368.72238159 318.14334106]
[354.21121216 314.32479858]
[339.97451782 309.58435059]
[326.07077026 303.94149780]
[312.55715942 297.41940308]
[299.48916626 290.04489136]
[286.92050171 281.84826660]
[274.90283203 272.86318970]
[263.48553467 263.12661743]
[252.71553040 252.67852783]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[17 57]
[18 56]
[19 55]
[37 54]
[38 53]
[39 52]
[40 51]
[41 50]
[42 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
