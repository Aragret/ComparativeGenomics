%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCCUAUCAGGGGGGGGGGUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAUAUUAAUAAUUUUCAUxxxxxxxxxxUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCCCCCCCCCCCAUCCUAGCA\
) } def
/len { sequence length } bind def

/coor [
[114.25320435 360.78854370]
[100.40726471 354.77252197]
[88.69860077 345.24310303]
[79.99607849 332.90744019]
[74.94547272 318.68090820]
[73.92158508 303.61923218]
[77.00038147 288.84008789]
[83.95340729 275.44015503]
[94.26468658 264.41381836]
[107.16906738 256.57931519]
[121.70896149 252.51799011]
[121.70896149 237.51799011]
[121.70896149 222.51799011]
[121.70896149 207.51799011]
[121.70896149 192.51799011]
[121.70896149 177.51799011]
[121.70896149 162.51799011]
[121.70896149 147.51799011]
[121.70896149 132.51799011]
[121.70896149 117.51799011]
[97.32444000 124.76186371]
[80.39775848 109.80227661]
[65.49585724 111.51496887]
[50.59395599 113.22765350]
[35.69205093 114.94034576]
[32.93048859 129.80187988]
[25.90962219 143.18840027]
[15.25374794 153.90957642]
[1.91037810 161.01210022]
[-12.93400383 163.86442566]
[-27.95944595 162.21290588]
[-41.82989502 156.20442200]
[-53.31200409 146.37321472]
[-61.38478470 133.59347534]
[-65.33042145 119.00157928]
[-64.79805756 103.89502716]
[-59.83504105 89.61707306]
[-50.88267517 77.43731689]
[-38.73699951 68.43875885]
[-24.47799683 63.42155838]
[-9.37357330 62.83183670]
[5.23320007 66.72202301]
[18.04349709 74.74621582]
[27.91823769 86.19091034]
[33.97936249 100.03844452]
[48.88126373 98.32575226]
[63.78316879 96.61306000]
[78.68506622 94.90037537]
[94.80498505 75.64183044]
[122.12089539 83.00514984]
[120.87402344 68.05706787]
[119.62714386 53.10897827]
[104.62770081 52.21605301]
[89.90802002 49.19748688]
[75.76777649 44.11473465]
[62.49485397 37.07128143]
[50.35946655 28.21051407]
[39.60867691 17.71283340]
[30.46136093 5.79195499]
[23.10374260 -7.30942678]
[17.68561172 -21.32458305]
[14.31727886 -35.96818542]
[13.06731606 -50.94210815]
[13.96117210 -65.94149780]
[16.98064804 -80.66099548]
[22.06427383 -94.80092621]
[29.10854912 -108.07341003]
[37.97006607 -120.20824432]
[48.46841431 -130.95838928]
[60.38985825 -140.10496521]
[73.49169159 -147.46177673]
[87.50718689 -152.87904358]
[102.15100098 -156.24645996]
[117.12500000 -157.49549866]
[132.12432861 -156.60072327]
[146.84364319 -153.58032227]
[160.98326111 -148.49583435]
[174.25531006 -141.45072937]
[186.38960266 -132.58847046]
[197.13908386 -122.08945465]
[206.28492737 -110.16744232]
[213.64093018 -97.06514740]
[219.05731201 -83.04932404]
[222.42384338 -68.40530396]
[223.67195129 -53.43122482]
[222.77622986 -38.43194199]
[219.75494385 -23.71282196]
[214.66957092 -9.57352448]
[207.62364197 3.69809127]
[198.76062012 15.83183193]
[188.26095581 26.58067131]
[176.33837891 35.72577667]
[163.23562622 43.08096313]
[149.21946716 48.49649048]
[134.57524109 51.86210251]
[135.82211304 66.81018829]
[137.06898499 81.75827789]
[147.94781494 92.08547974]
[162.94050598 92.55352783]
[177.93319702 93.02156830]
[192.92590332 93.48960876]
[207.84480286 91.93202972]
[222.41751099 88.37726593]
[236.99021912 84.82250214]
[251.56291199 81.26774597]
[263.03692627 69.55111694]
[278.85134888 73.89110565]
[282.73770142 89.82309723]
[270.69799805 100.95762634]
[255.11767578 95.84044647]
[240.54498291 99.39521027]
[225.97227478 102.94996643]
[211.39956665 106.50473022]
[225.41719055 111.84387970]
[236.13081360 122.34236145]
[241.75318909 136.24879456]
[241.34635925 151.24328613]
[234.97821045 164.82438660]
[223.71107483 174.72650146]
[209.42457581 179.29771423]
[194.50202942 177.77545166]
[181.43283081 170.41365051]
[172.39721680 158.44042969]
[168.90255737 143.85321045]
[171.53179932 129.08543396]
[179.84637451 116.60072327]
[192.45785522 108.48230743]
[177.46516418 108.01426697]
[162.47245789 107.54621887]
[147.47976685 107.07817841]
[136.70895386 117.51799011]
[136.70895386 132.51799011]
[136.70895386 147.51799011]
[136.70895386 162.51799011]
[136.70895386 177.51799011]
[136.70895386 192.51799011]
[136.70895386 207.51799011]
[136.70895386 222.51799011]
[136.70895386 237.51799011]
[136.70895386 252.51799011]
[151.24884033 256.57931519]
[164.15322876 264.41381836]
[174.46450806 275.44015503]
[181.41752625 288.84008789]
[184.49633789 303.61923218]
[183.47244263 318.68090820]
[178.42184448 332.90744019]
[169.71931458 345.24310303]
[158.01065063 354.77252197]
[144.16471863 360.78854370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 48]
[23 47]
[24 46]
[25 45]
[50 97]
[51 96]
[52 95]
[98 130]
[99 129]
[100 128]
[101 127]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
