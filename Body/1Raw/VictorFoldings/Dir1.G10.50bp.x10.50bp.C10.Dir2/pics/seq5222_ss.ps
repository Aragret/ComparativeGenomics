%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAACCCAGGGGGGGGGGGCUACGCAAAAUCUUAGCAUACUCCUCAAUUACCCACAUAGGAUGAAUAAxxxxxxxxxxAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUCCCCCCCCCCACUAAACCCA\
) } def
/len { sequence length } bind def

/coor [
[82.34931183 365.61715698]
[68.50337219 359.60110474]
[56.79471207 350.07168579]
[48.09218597 337.73602295]
[43.04158401 323.50952148]
[42.01769257 308.44781494]
[45.09649277 293.66867065]
[52.04951477 280.26873779]
[62.36079788 269.24240112]
[75.26517487 261.40789795]
[89.80506897 257.34658813]
[89.80506897 242.34658813]
[89.80506897 227.34658813]
[89.80506897 212.34658813]
[89.80506897 197.34658813]
[89.80506897 182.34658813]
[89.80506897 167.34658813]
[89.80506897 152.34658813]
[89.80506897 137.34658813]
[89.80506897 122.34658813]
[76.63648224 115.16407776]
[64.02535248 123.28562164]
[53.98244095 136.94491577]
[38.07680511 131.07574463]
[39.31348419 114.16696167]
[55.90381241 110.67449188]
[68.51493835 102.55294800]
[73.23841095 94.79000092]
[79.50079346 89.70388031]
[86.23622131 87.46657562]
[92.42138672 87.88411713]
[97.19036102 90.43769836]
[94.70523834 75.64498901]
[92.22012329 60.85228348]
[89.73500061 46.05957413]
[86.78952026 31.35161400]
[83.38654327 16.74272156]
[79.98356628 2.13382912]
[69.31722260 -9.55119610]
[73.96540833 -23.70194244]
[63.29907227 -35.38696671]
[67.94725800 -49.53771591]
[64.54428101 -64.14660645]
[61.14130020 -78.75550079]
[57.73832321 -93.36439514]
[54.33534241 -107.97328186]
[50.03578949 -113.13287354]
[49.16823196 -118.83187866]
[51.10810852 -123.26046753]
[48.31578445 -137.99827576]
[45.52346039 -152.73606873]
[32.64028549 -156.45520020]
[23.29801941 -168.13287354]
[22.25053406 -184.60485840]
[12.26780701 -195.80061340]
[-3.60231304 -198.14984131]
[-11.53555965 -212.09413147]
[-5.44622469 -226.93661499]
[9.99447536 -231.29142761]
[22.94175720 -221.81790161]
[23.46357346 -205.78334045]
[33.44630051 -194.58758545]
[47.51781845 -199.78298950]
[47.82987595 -214.77975464]
[48.14192963 -229.77650452]
[33.68968201 -234.13941956]
[20.95108032 -242.24069214]
[10.87141705 -253.47915649]
[4.19866896 -267.02081299]
[1.42799819 -281.86083984]
[2.76500726 -296.89794922]
[8.11048126 -311.01632690]
[17.06775093 -323.16827393]
[28.97212601 -332.45205688]
[42.94022369 -338.17874146]
[57.93552017 -339.92337036]
[72.84526062 -337.55645752]
[86.56304932 -331.25369263]
[98.07092285 -321.48275757]
[106.51493835 -308.96871948]
[111.26848602 -294.64019775]
[111.97881317 -279.56048584]
[108.59321594 -264.84857178]
[101.36293030 -251.59617615]
[90.82449341 -240.78674316]
[77.75991821 -233.22239685]
[63.13868332 -229.46444702]
[62.82662964 -214.46769714]
[62.51457214 -199.47093201]
[74.33432007 -174.48916626]
[60.26126480 -155.52839661]
[63.05358887 -140.79058838]
[65.84591675 -126.05278778]
[68.94423676 -111.37626648]
[72.34721375 -96.76737213]
[75.75019073 -82.15847778]
[79.15316772 -67.54958344]
[82.55615234 -52.94069290]
[92.97908020 -42.30059433]
[88.57430267 -27.10492134]
[98.99723816 -16.46482277]
[94.59245300 -1.26914883]
[97.99543762 13.33974361]
[101.39841461 27.94863701]
[104.24855042 30.12675285]
[106.15624237 33.82302094]
[106.40618896 38.56537628]
[104.52770996 43.57445908]
[107.01282501 58.36716461]
[109.49794769 73.15987396]
[111.98306274 87.95257568]
[121.73072052 99.35359955]
[135.95748901 104.10741425]
[145.62043762 92.40305328]
[158.86087036 84.98313141]
[173.88815308 82.85112762]
[188.66995239 86.29538727]
[201.20715332 94.85009003]
[209.80419922 107.35829163]
[213.29843140 122.12834930]
[211.21726990 137.16275024]
[203.84216309 150.42820740]
[192.17054749 160.13067627]
[177.78091431 164.95797729]
[162.61933899 164.25724792]
[148.73629761 158.12327576]
[138.00935364 147.38562012]
[131.88925171 133.49645996]
[131.20367432 118.33419037]
[116.97690582 113.58037567]
[104.80506897 122.34658813]
[104.80506897 137.34658813]
[104.80506897 152.34658813]
[104.80506897 167.34658813]
[104.80506897 182.34658813]
[104.80506897 197.34658813]
[104.80506897 212.34658813]
[104.80506897 227.34658813]
[104.80506897 242.34658813]
[104.80506897 257.34658813]
[119.34495544 261.40789795]
[132.24932861 269.24240112]
[142.56062317 280.26873779]
[149.51364136 293.66867065]
[152.59243774 308.44781494]
[151.56854248 323.50952148]
[146.51794434 337.73602295]
[137.81541443 350.07168579]
[126.10675812 359.60110474]
[112.26081848 365.61715698]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 27]
[22 26]
[32 111]
[33 110]
[34 109]
[35 108]
[36 104]
[37 103]
[38 102]
[40 100]
[42 98]
[43 97]
[44 96]
[45 95]
[46 94]
[49 93]
[50 92]
[51 91]
[54 62]
[55 61]
[63 89]
[64 88]
[65 87]
[112 130]
[113 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
