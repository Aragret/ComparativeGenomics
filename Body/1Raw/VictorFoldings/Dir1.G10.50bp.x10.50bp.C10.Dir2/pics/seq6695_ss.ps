%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACAGCAGGGGGGGGGGGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUAxxxxxxxxxxGAAUUAUAUCCUUCUUGCUCAUCAGUUGAUGAUACGCCCGAGCAGAUGCCCCCCCCCCCCAACACAGCAG\
) } def
/len { sequence length } bind def

/coor [
[71.73544312 397.42309570]
[59.64050293 388.38897705]
[50.43236923 376.42599487]
[44.79433441 362.42190552]
[43.14478683 347.41583252]
[45.60613251 332.52139282]
[51.99571609 318.84384155]
[61.83939743 307.39810181]
[74.40670776 299.03356934]
[88.76506042 294.37094116]
[88.14108276 279.38394165]
[87.51710510 264.39691162]
[86.89312744 249.40989685]
[86.26914978 234.42288208]
[85.64517212 219.43586731]
[85.02119446 204.44885254]
[84.39721680 189.46183777]
[83.77323914 174.47482300]
[83.14926147 159.48780823]
[82.52529144 144.50079346]
[81.90131378 129.51376343]
[74.56302643 142.59619141]
[64.62992096 153.83599854]
[52.54913712 162.72726440]
[38.86447144 168.86973572]
[24.19194031 171.98692322]
[9.19201851 171.93849182]
[-5.46008015 168.72663879]
[-19.10479927 162.49594116]
[-31.12792778 153.52687073]
[-40.98825455 142.22314453]
[-48.24191666 129.09362793]
[-52.56239700 114.72930908]
[-53.75521088 99.77681732]
[-51.76666260 84.90921021]
[-46.68627167 70.79575348]
[-38.74272156 58.07175827]
[-28.29359436 47.30998993]
[-15.80924606 38.99487686]
[-1.85165632 33.50072861]
[12.95088196 31.07485580]
[27.93203926 31.82645798]
[42.41744995 35.72170258]
[55.75505447 42.58525085]
[67.34447479 52.10813904]
[76.66400909 63.86169815]
[83.29415131 77.31685638]
[86.93645477 91.86792755]
[87.42678070 106.86218262]
[87.57034302 92.88108826]
[99.55691528 85.68290710]
[107.01182556 72.66660309]
[114.46673584 59.65029144]
[121.92164612 46.63397980]
[129.37655640 33.61767197]
[136.55906677 20.44908905]
[143.46606445 7.13393354]
[150.37306213 -6.18122196]
[157.00155640 -19.63718796]
[163.34869385 -33.22813797]
[169.69581604 -46.81908798]
[176.04295349 -60.41004181]
[163.35685730 -68.45315552]
[151.80349731 -78.05253601]
[141.57257080 -89.05055237]
[132.83207703 -101.26660919]
[125.72554779 -114.50010681]
[120.36967468 -128.53375244]
[116.85240936 -143.13706970]
[115.23150635 -158.07029724]
[115.53357697 -173.08818054]
[117.75367737 -187.94413757]
[121.85533905 -202.39422607]
[127.77120972 -216.20112610]
[135.40414429 -229.13815308]
[144.62881470 -240.99285889]
[155.29371643 -251.57055664]
[167.22375488 -260.69760132]
[180.22300720 -268.22406006]
[194.07803345 -274.02636719]
[208.56129456 -278.00924683]
[223.43498230 -280.10729980]
[238.45484924 -280.28607178]
[253.37425232 -278.54260254]
[267.94821167 -274.90557861]
[281.93740845 -269.43466187]
[295.11212158 -262.21972656]
[307.25601196 -253.37922668]
[318.16964722 -243.05834961]
[327.67385864 -231.42655945]
[335.61254883 -218.67486572]
[341.85534668 -205.01266479]
[346.29977417 -190.66430664]
[348.87280273 -175.86540222]
[349.53225708 -160.85894775]
[348.26721191 -145.89138794]
[345.09851074 -131.20848083]
[340.07818604 -117.05134583]
[333.28863525 -103.65245819]
[324.84136963 -91.23182678]
[314.87509155 -79.99341583]
[303.55346680 -70.12178040]
[291.06240845 -61.77900696]
[277.60702515 -55.10210037]
[263.40829468 -50.20069885]
[248.69931030 -47.15528488]
[233.72166443 -46.01587296]
[218.72126770 -46.80116653]
[203.94447327 -49.49827576]
[189.63389587 -54.06291199]
[183.28677368 -40.47195816]
[176.93963623 -26.88100815]
[170.59251404 -13.29005814]
[171.37803650 -8.51947498]
[169.12928772 -3.21151996]
[163.68821716 0.72577667]
[156.78121948 14.04093266]
[149.87422180 27.35608864]
[150.46061707 32.15521622]
[147.99301147 37.36503220]
[142.39286804 41.07258224]
[134.93795776 54.08889008]
[127.48303986 67.10520172]
[120.02812958 80.12151337]
[112.57321930 93.13781738]
[112.42965698 107.11891174]
[100.44308472 114.31709290]
[96.88832855 128.88978577]
[97.51230621 143.87681580]
[98.13628387 158.86383057]
[98.76026154 173.85084534]
[99.38423920 188.83786011]
[100.00821686 203.82487488]
[100.63219452 218.81188965]
[101.25616455 233.79890442]
[101.88014221 248.78591919]
[102.50411987 263.77294922]
[103.12809753 278.75994873]
[103.75207520 293.74697876]
[118.44832611 297.19992065]
[131.66743469 304.49084473]
[142.42848206 315.07870483]
[149.93289185 328.17779541]
[153.62382507 342.81610107]
[153.22735596 357.90731812]
[148.77293396 372.33163452]
[140.59107971 385.01864624]
[129.28897095 395.02688599]
[115.70526886 401.61364746]
[100.84799957 404.29022217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[49 127]
[51 125]
[52 124]
[53 123]
[54 122]
[55 121]
[56 118]
[57 117]
[58 116]
[59 113]
[60 112]
[61 111]
[62 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
