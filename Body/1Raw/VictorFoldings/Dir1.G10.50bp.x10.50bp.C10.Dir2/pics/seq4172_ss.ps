%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAGGAACAGGGGGGGGGGACAUAUGACGCACUCUCCCCUGAACUCUACACAACAUAUUUUGUCACCAAxxxxxxxxxxCCACAAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGCCCCCCCCCCUCCUAGGCACA\
) } def
/len { sequence length } bind def

/coor [
[85.07875061 407.06262207]
[71.58987427 400.33108521]
[60.10437012 390.56652832]
[51.29000092 378.33663940]
[45.65922165 364.35244751]
[43.53939056 349.42697144]
[45.05376053 334.42797852]
[50.11428452 320.22744751]
[58.42675018 307.65103149]
[69.50788116 297.42987061]
[82.71343231 290.15823364]
[97.27565765 286.25888062]
[96.96768188 271.26202393]
[96.65970612 256.26519775]
[96.35173035 241.26835632]
[96.04374695 226.27153015]
[95.73577118 211.27468872]
[95.42779541 196.27784729]
[95.11981964 181.28100586]
[94.81183624 166.28416443]
[82.20044708 155.20013428]
[81.46323395 138.08908081]
[93.54040527 125.47444153]
[92.92458344 110.48709106]
[91.84751129 95.52581024]
[90.31021881 80.60478973]
[88.77292633 65.68377686]
[87.23563385 50.76275635]
[83.22146606 42.48735809]
[85.82318878 35.52006531]
[84.59258270 20.57063103]
[83.36196899 5.62119579]
[68.35584259 5.75758886]
[53.37979126 4.79823542]
[38.51372528 2.74825382]
[23.83695412 -0.38141781]
[9.42779160 -4.57408142]
[-4.63688517 -9.80736637]
[-18.28203392 -16.05335236]
[-31.43485069 -23.27871132]
[-44.02515793 -31.44489479]
[-55.98578262 -40.50833130]
[-67.25290680 -50.42066193]
[-77.76641846 -61.12900162]
[-87.47021484 -72.57621765]
[-96.31253052 -84.70122528]
[-104.24618530 -97.43933868]
[-111.22884369 -110.72259521]
[-117.22325134 -124.48011780]
[-122.19743347 -138.63850403]
[-126.12483978 -153.12222290]
[-128.98452759 -167.85397339]
[-130.76121521 -182.75517273]
[-131.44544983 -197.74630737]
[-131.03358459 -212.74740601]
[-129.52778625 -227.67840576]
[-126.93610382 -242.45967102]
[-123.27237701 -257.01229858]
[-118.55613708 -271.25869751]
[-112.81255341 -285.12280273]
[-106.07228088 -298.53070068]
[-98.37126160 -311.41076660]
[-89.75060272 -323.69436646]
[-80.25628662 -335.31591797]
[-69.93898010 -346.21340942]
[-58.85372543 -356.32873535]
[-47.05966949 -365.60787964]
[-34.61973572 -374.00137329]
[-21.60030556 -381.46438599]
[-8.07083607 -387.95715332]
[5.89648247 -393.44497681]
[20.22712898 -397.89865112]
[34.84464264 -401.29434204]
[49.67103195 -403.61395264]
[64.62718964 -404.84512329]
[79.63331604 -404.98126221]
[94.60935211 -404.02166748]
[109.47537994 -401.97143555]
[124.15209961 -398.84152222]
[138.56120300 -394.64862061]
[152.62579346 -389.41510010]
[166.27082825 -383.16888428]
[179.42352295 -375.94332886]
[192.01370239 -367.77691650]
[203.97418213 -358.71328735]
[215.24113464 -348.80078125]
[225.75447083 -338.09225464]
[235.45808411 -326.64489746]
[244.30020142 -314.51974487]
[252.23364258 -301.78149414]
[259.21609497 -288.49813843]
[265.21026611 -274.74050903]
[270.18420410 -260.58203125]
[274.11138916 -246.09825134]
[276.97082520 -231.36645508]
[278.74728394 -216.46522522]
[279.43127441 -201.47407532]
[279.01913452 -186.47299194]
[277.51309204 -171.54200745]
[274.92117310 -156.76078796]
[271.25720215 -142.20820618]
[266.54074097 -127.96189880]
[260.79693604 -114.09787750]
[254.05644226 -100.69011688]
[246.35520935 -87.81015015]
[237.73434448 -75.52670288]
[228.23983765 -63.90530777]
[217.92234802 -53.00797653]
[206.83692932 -42.89284515]
[195.04272461 -33.61388779]
[182.60266113 -25.22061157]
[169.58309937 -17.75779915]
[156.05352783 -11.26526451]
[142.08612061 -5.77765226]
[127.75539398 -1.32424009]
[113.13782501 2.07121062]
[98.31140137 4.39058352]
[99.54201508 19.34001732]
[100.77262878 34.28945160]
[102.15665436 49.22546387]
[103.69394684 64.14648438]
[105.23123932 79.06749725]
[106.76853180 93.98851776]
[109.44417572 96.86096954]
[110.81301880 100.91535187]
[110.36962128 105.52827454]
[107.91193390 109.87126160]
[108.52776337 124.85861206]
[119.44496155 132.80999756]
[123.70812988 145.41978455]
[119.96671295 157.99079895]
[109.80867767 165.97619629]
[110.11665344 180.97303772]
[110.42462921 195.96986389]
[110.73261261 210.96670532]
[111.04058838 225.96354675]
[111.34856415 240.96038818]
[111.65653992 255.95722961]
[111.96452332 270.95407104]
[112.27249908 285.95089722]
[126.98253632 289.24911499]
[140.47549438 295.97247314]
[151.96690369 305.73007202]
[160.78869629 317.95462036]
[166.42794800 331.93539429]
[168.55682373 346.85958862]
[167.05155945 361.85949707]
[161.99963379 376.06307983]
[153.69479370 388.64456177]
[142.61987305 398.87240601]
[129.41873169 406.15206909]
[114.85886383 410.06024170]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[23 128]
[24 127]
[25 123]
[26 122]
[27 121]
[28 120]
[30 119]
[31 118]
[32 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
