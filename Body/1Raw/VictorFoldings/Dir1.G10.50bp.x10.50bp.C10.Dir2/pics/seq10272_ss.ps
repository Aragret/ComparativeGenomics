%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUUCUCAUCCGGGGGGGGGGAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGxxxxxxxxxxAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCCCCCCCCCCCAUUCUCCUCC\
) } def
/len { sequence length } bind def

/coor [
[84.76190948 406.71691895]
[72.06642914 398.62255859]
[61.33155823 388.06527710]
[53.02658463 375.50656128]
[47.51456070 361.49545288]
[45.03645325 346.64443970]
[45.70059204 331.60275269]
[49.47794724 317.02792358]
[56.20338440 303.55712891]
[65.58289337 291.77926636]
[77.20645142 282.20916748]
[90.56592560 275.26522827]
[105.07729340 271.25100708]
[104.16577911 256.27874756]
[103.25426483 241.30645752]
[102.34275055 226.33418274]
[101.43123627 211.36189270]
[100.51972198 196.38961792]
[99.60820770 181.41734314]
[98.69669342 166.44506836]
[97.78518677 151.47277832]
[96.87367249 136.50050354]
[95.96215820 121.52822113]
[93.92806244 136.38966370]
[82.45348358 146.05061340]
[67.46276093 145.52310181]
[56.69564056 135.07948303]
[55.71121597 120.11181641]
[65.01774597 108.34795380]
[79.81224823 105.86199951]
[64.81918335 105.40603638]
[49.82611465 104.95006561]
[39.88051987 113.22290802]
[27.36642075 112.50023651]
[18.99426460 103.71813965]
[4.01351738 102.95840454]
[-10.96722984 102.19866180]
[-23.78741264 111.84348297]
[-39.28464508 107.69435120]
[-45.57078171 92.93413544]
[-37.82363129 78.88559723]
[-21.98614883 76.32558441]
[-10.20749283 87.21791840]
[4.77325487 87.97765350]
[19.75400352 88.73738861]
[34.88776398 79.90238953]
[50.28208160 89.95700073]
[65.27514648 90.41296387]
[80.26821899 90.86893463]
[82.73077393 86.38634491]
[86.20712280 82.55650330]
[90.52654266 79.60743713]
[95.46734619 77.72299194]
[96.07523346 62.73531342]
[96.68311310 47.74763489]
[97.29100037 32.75996017]
[97.89888000 17.77228165]
[84.39244843 13.93436337]
[72.09725189 7.16971111]
[61.63762665 -2.17414880]
[53.54379272 -13.61882305]
[48.22497559 -26.57954597]
[45.94873810 -40.39505768]
[46.82748795 -54.36133957]
[50.81296158 -67.76749420]
[57.69884491 -79.93193054]
[67.13146210 -90.23700714]
[78.62792969 -98.16040039]
[91.60088348 -103.30158997]
[105.38846588 -105.40208435]
[106.60323334 -120.35281372]
[107.81800842 -135.30354309]
[94.27547455 -142.20776367]
[84.40972900 -153.77217102]
[79.72524261 -168.23329163]
[80.93634796 -183.38591003]
[87.85837555 -196.91934204]
[99.43575287 -206.76986694]
[113.90302277 -211.43533325]
[129.05403137 -210.20428467]
[142.57835388 -203.26446533]
[152.41363525 -191.67413330]
[157.06005859 -177.20074463]
[155.80909729 -162.05137634]
[148.85148621 -148.53619385]
[137.24822998 -138.71615601]
[122.76873779 -134.08877563]
[121.55397034 -119.13804626]
[120.33919525 -104.18731689]
[135.49194336 -98.99482727]
[148.81051636 -90.07711792]
[159.39744568 -78.02850342]
[166.53767395 -63.65448380]
[169.74674988 -47.91790009]
[168.80381775 -31.87444305]
[163.76667786 -16.60183907]
[154.96842957 -3.12743330]
[142.99530029 7.64089537]
[128.64767456 14.97591877]
[112.88655853 18.38016510]
[112.27867126 33.36784363]
[111.67079163 48.35551834]
[111.06290436 63.34319687]
[110.45502472 78.33087158]
[121.83639526 88.10146332]
[136.55918884 85.23104095]
[151.28198242 82.36061096]
[166.00477600 79.49018860]
[174.62606812 66.24447632]
[190.10545349 63.05630875]
[203.25926208 71.81716156]
[206.28359985 87.32938385]
[197.38417053 100.38983917]
[181.84083557 103.25000000]
[168.87519836 94.21298218]
[154.15240479 97.08340454]
[139.42961121 99.95383453]
[124.70681763 102.82425690]
[139.00344849 107.36370850]
[154.00288391 107.49340057]
[166.68080139 115.51026917]
[173.22837830 129.00579834]
[171.67849731 143.92552185]
[162.49679565 155.78706360]
[148.44175720 161.02688599]
[133.73593140 158.07075500]
[122.79740906 147.80680847]
[118.91246033 133.31912231]
[110.93443298 120.61670685]
[111.84594727 135.58898926]
[112.75746155 150.56126404]
[113.66897583 165.53355408]
[114.58049011 180.50582886]
[115.49200439 195.47810364]
[116.40351868 210.45037842]
[117.31502533 225.42266846]
[118.22653961 240.39494324]
[119.13805389 255.36721802]
[120.04956818 270.33950806]
[134.94073486 272.56369019]
[149.04391479 277.83569336]
[161.74256897 285.92504883]
[172.48159790 296.47811890]
[180.79150391 309.03353882]
[186.30905151 323.04248047]
[188.79299927 337.89254761]
[188.13478088 352.93447876]
[184.36315918 367.51080322]
[177.64302063 380.98422241]
[168.26814270 392.76577759]
[156.64834595 402.34045410]
[143.29161072 409.28964233]
[128.78182983 413.30957031]
[113.75329590 414.22451782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[30 49]
[31 48]
[32 47]
[35 45]
[36 44]
[37 43]
[53 104]
[54 103]
[55 102]
[56 101]
[57 100]
[70 89]
[71 88]
[72 87]
[105 118]
[106 117]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
