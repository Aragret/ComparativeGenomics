%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUACUACGGGGGGGGGGUAUCUCGCACCUGAAACAAGCUAACAUGACUAACACCCUUAAUUCCAUCCxxxxxxxxxxACCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUCCCCCCCCCCACCCUCCUAC\
) } def
/len { sequence length } bind def

/coor [
[86.86706543 480.34518433]
[73.02112579 474.32916260]
[61.31246185 464.79974365]
[52.60993958 452.46408081]
[47.55933762 438.23754883]
[46.53544617 423.17587280]
[49.61424255 408.39669800]
[56.56726456 394.99679565]
[66.87854767 383.97045898]
[79.78292847 376.13595581]
[94.32281494 372.07461548]
[94.32281494 357.07461548]
[94.32281494 342.07461548]
[94.32281494 327.07461548]
[94.32281494 312.07461548]
[94.32281494 297.07461548]
[94.32281494 282.07461548]
[94.32281494 267.07461548]
[94.32281494 252.07463074]
[94.32281494 237.07463074]
[79.40299988 232.40573120]
[66.63450623 223.35189819]
[57.26902008 210.78602600]
[52.22914505 195.92596436]
[52.01752472 180.21655273]
[56.66675949 165.18908691]
[65.73502350 152.31207275]
[78.34806061 142.84776306]
[93.28343964 137.72837830]
[92.97138214 122.73162079]
[92.65932465 107.73486328]
[90.94663239 92.83296204]
[87.84831238 78.15644073]
[77.42737579 66.25204468]
[82.36894226 52.20105743]
[79.27062225 37.52453232]
[68.84968567 25.62013626]
[73.79125214 11.56915092]
[70.69293213 -3.10737467]
[67.59460449 -17.78390121]
[64.49628448 -32.46042633]
[49.56252670 -30.91105461]
[34.54862213 -30.93119812]
[19.61907578 -32.52063751]
[4.93745995 -35.66195297]
[-9.33536339 -40.32073212]
[-23.04301453 -46.44592667]
[-36.03530502 -53.97042847]
[-48.16987991 -62.81179428]
[-59.31379318 -72.87315369]
[-69.34494019 -84.04426575]
[-78.15341949 -96.20274353]
[-85.64271545 -109.21535492]
[-91.73077393 -122.93953705]
[-96.35089111 -137.22492981]
[-99.45243835 -151.91499329]
[-101.00144958 -166.84878540]
[-100.98094177 -181.86268616]
[-99.39114380 -196.79220581]
[-96.24946594 -211.47373962]
[-91.59033966 -225.74644470]
[-85.46481323 -239.45394897]
[-77.93999481 -252.44606018]
[-69.09833527 -264.58041382]
[-59.03670502 -275.72409058]
[-47.86534882 -285.75497437]
[-35.70666122 -294.56314087]
[-22.69386482 -302.05212402]
[-8.96953201 -308.13986206]
[5.31596565 -312.75961304]
[20.00610924 -315.86080933]
[34.93994141 -317.40945435]
[49.95384598 -317.38858032]
[64.88331604 -315.79843140]
[79.56478119 -312.65640259]
[93.83737946 -307.99691772]
[107.54473114 -301.87106323]
[120.53665161 -294.34591675]
[132.67080688 -285.50396729]
[143.81422424 -275.44207764]
[153.84483337 -264.27047729]
[162.65270996 -252.11157227]
[170.14137268 -239.09860229]
[176.22877502 -225.37411499]
[180.84819031 -211.08850098]
[183.94903564 -196.39828491]
[185.49731445 -181.46441650]
[185.47607422 -166.45051575]
[183.88555908 -151.52108765]
[180.74316406 -136.83969116]
[176.08334351 -122.56720734]
[169.95715332 -108.86000824]
[162.43170166 -95.86826324]
[153.58944702 -83.73432922]
[143.52728271 -72.59115601]
[132.35543823 -62.56081772]
[120.19631958 -53.75322723]
[107.18315887 -46.26488113]
[93.45853424 -40.17782211]
[79.17281342 -35.55874634]
[82.27113342 -20.88222122]
[85.36945343 -6.20569658]
[88.46777344 8.47082901]
[98.66709900 19.32546234]
[93.94714355 34.42620850]
[97.04547119 49.10273361]
[107.24479675 59.95736694]
[102.52484131 75.05811310]
[105.62316132 89.73464203]
[112.83080292 76.57980347]
[125.93479156 69.28010559]
[140.91368103 70.07574463]
[153.17062378 78.72254944]
[158.94415283 92.56691742]
[156.46240234 107.36019135]
[146.48703003 118.56250763]
[132.07933044 122.73601532]
[117.66085052 118.59991455]
[107.65608215 107.42281342]
[107.96813202 122.41956329]
[108.28018951 137.41632080]
[122.16796112 141.33416748]
[134.37034607 149.00628662]
[143.89860535 159.80038452]
[149.98367310 172.83160400]
[152.13829041 187.03514099]
[150.19590759 201.25314331]
[144.32359314 214.32919312]
[135.00772095 225.20231628]
[123.01363373 232.99305725]
[109.32281494 237.07463074]
[109.32281494 252.07463074]
[109.32281494 267.07461548]
[109.32281494 282.07461548]
[109.32281494 297.07461548]
[109.32281494 312.07461548]
[109.32281494 327.07461548]
[109.32281494 342.07461548]
[109.32281494 357.07461548]
[109.32281494 372.07461548]
[123.86270142 376.13595581]
[136.76708984 383.97045898]
[147.07836914 394.99679565]
[154.03138733 408.39669800]
[157.11018372 423.17587280]
[156.08630371 438.23754883]
[151.03569031 452.46408081]
[142.33317566 464.79974365]
[130.62451172 474.32916260]
[116.77857208 480.34518433]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 121]
[30 120]
[31 119]
[32 109]
[33 108]
[35 106]
[36 105]
[38 103]
[39 102]
[40 101]
[41 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
