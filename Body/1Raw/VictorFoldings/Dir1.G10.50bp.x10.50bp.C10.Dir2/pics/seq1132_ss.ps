%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAACGAAAGGGGGGGGGGGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAGCCAxxxxxxxxxxUAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACUAACCCCCCCCCCCAUUAACGAAA\
) } def
/len { sequence length } bind def

/coor [
[110.18710327 546.08544922]
[96.34116364 540.06945801]
[84.63250732 530.54003906]
[75.92997742 518.20434570]
[70.87937927 503.97784424]
[69.85549164 488.91616821]
[72.93428802 474.13699341]
[79.88730621 460.73709106]
[90.19859314 449.71075439]
[103.10297394 441.87622070]
[117.64286041 437.81491089]
[117.64286041 422.81491089]
[117.64286041 407.81491089]
[117.64286041 392.81491089]
[117.64286041 377.81491089]
[117.64286041 362.81491089]
[117.64286041 347.81491089]
[117.64286041 332.81491089]
[117.64286041 317.81491089]
[117.64286041 302.81491089]
[117.64286041 287.81491089]
[117.64286041 272.81491089]
[117.64286041 257.81491089]
[116.39598846 242.86683655]
[102.39363861 237.78747559]
[92.74960327 226.30494690]
[90.13060760 211.43862915]
[95.33863068 197.16371155]
[107.06906891 187.34822083]
[104.58395386 172.55551147]
[102.09883118 157.76280212]
[99.61371613 142.97009277]
[84.94940948 140.24995422]
[72.09812164 132.68124390]
[62.60792160 121.17572021]
[57.62201691 107.11933899]
[57.74101257 92.20536041]
[62.95057297 78.23033142]
[72.62315369 66.87770081]
[85.59358215 59.51501846]
[83.10845947 44.72231293]
[80.62334442 29.92960548]
[64.80391693 19.59785843]
[61.54866791 1.30849540]
[72.45252991 -13.33743572]
[69.35420990 -28.01396179]
[66.25588226 -42.69048691]
[63.15756226 -57.36701202]
[60.05924225 -72.04354095]
[53.29112625 -85.42982483]
[43.30839920 -96.62558746]
[33.32567215 -107.82135773]
[25.22362518 -112.18124390]
[23.25469589 -119.35543060]
[13.50704288 -130.75645447]
[-2.26672244 -131.73822021]
[-12.66346359 -143.64131165]
[-11.51497936 -159.40380859]
[0.49735588 -169.67411804]
[16.24683571 -168.35905457]
[26.38957405 -156.23880005]
[24.90806389 -140.50410461]
[34.65571594 -129.10308838]
[44.52143860 -117.80408478]
[54.50416565 -106.60831451]
[64.48689270 -95.41255188]
[61.79273987 -110.16861725]
[62.50847626 -125.15153503]
[66.59694672 -139.58358765]
[73.84593964 -152.71569824]
[83.87919617 -163.86621094]
[96.17591858 -172.45634460]
[110.09784698 -178.04023743]
[124.92234802 -180.32806396]
[139.87994385 -179.20104980]
[154.19425964 -174.71769714]
[167.12229919 -167.11073303]
[177.99301147 -156.77497864]
[186.24214172 -144.24693298]
[191.44152832 -130.17687988]
[193.32127380 -115.29513550]
[191.78382874 -100.37413788]
[186.90899658 -86.18836975]
[178.94978333 -73.47416687]
[168.31933594 -62.89146042]
[155.56944275 -54.98955536]
[141.36187744 -50.17860794]
[126.43411255 -48.70833588]
[111.56097412 -50.65504837]
[97.51445770 -55.91770554]
[85.02367401 -64.22314453]
[74.73576355 -75.14186096]
[77.83409119 -60.46533585]
[80.93241119 -45.78880692]
[84.03073120 -31.11228371]
[87.12905121 -16.43575668]
[97.87817383 -12.39262104]
[105.39585114 -3.55225015]
[107.70690155 7.94265604]
[104.11710358 19.23080254]
[95.41604614 27.44448662]
[97.90116882 42.23719406]
[100.38628387 57.02990341]
[115.05059052 59.75004959]
[127.90187836 67.31875610]
[137.39207458 78.82427979]
[142.37799072 92.88066101]
[142.25898743 107.79463959]
[137.04942322 121.76966858]
[127.37684631 133.12229919]
[114.40641785 140.48498535]
[116.89154053 155.27767944]
[119.37665558 170.07038879]
[121.86177826 184.86309814]
[136.15567017 190.30661011]
[145.74241638 202.09606934]
[148.12504578 217.00209045]
[142.76258850 231.00564575]
[131.18869019 240.38171387]
[139.50811768 227.90023804]
[153.51856995 222.54232788]
[168.04347229 226.28762817]
[177.71615601 237.75231934]
[178.96276855 252.70042419]
[171.32269287 265.60891724]
[157.61880493 271.70837402]
[142.91441345 268.74517822]
[132.64286804 257.81491089]
[132.64286804 272.81491089]
[132.64286804 287.81491089]
[132.64286804 302.81491089]
[132.64286804 317.81491089]
[132.64286804 332.81491089]
[132.64286804 347.81491089]
[132.64286804 362.81491089]
[132.64286804 377.81491089]
[132.64286804 392.81491089]
[132.64286804 407.81491089]
[132.64286804 422.81491089]
[132.64286804 437.81491089]
[147.18275452 441.87622070]
[160.08712769 449.71075439]
[170.39840698 460.73709106]
[177.35144043 474.13699341]
[180.43023682 488.91616821]
[179.40634155 503.97784424]
[174.35574341 518.20434570]
[165.65321350 530.54003906]
[153.94454956 540.06945801]
[140.09861755 546.08544922]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[24 119]
[29 114]
[30 113]
[31 112]
[32 111]
[40 103]
[41 102]
[42 101]
[45 96]
[46 95]
[47 94]
[48 93]
[49 92]
[50 66]
[51 65]
[52 64]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
