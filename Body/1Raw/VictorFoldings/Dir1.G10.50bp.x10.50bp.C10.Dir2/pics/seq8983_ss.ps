%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUCCUAUGGGGGGGGGGUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACxxxxxxxxxxUACUAUUCUGCCUAGCAAACUCAAACUACGAACGCACUCACAGUCGCAUCCCCCCCCCCCAUAAUCCUCU\
) } def
/len { sequence length } bind def

/coor [
[83.69134521 379.43173218]
[70.47115326 372.15927124]
[59.58434677 361.71228027]
[51.77321625 348.80300903]
[47.57033539 334.31170654]
[47.26226425 319.22637939]
[50.87000275 304.57553101]
[58.14757538 291.35815430]
[68.59878540 280.47537231]
[81.51104736 272.66925049]
[96.00398254 268.47195435]
[95.69192505 253.47520447]
[95.37986755 238.47845459]
[95.06781769 223.48168945]
[94.75576019 208.48493958]
[94.44370270 193.48818970]
[94.13164520 178.49143982]
[93.81958771 163.49467468]
[93.50753021 148.49792480]
[93.19548035 133.50117493]
[84.29947662 130.36648560]
[76.59872437 124.92008209]
[70.67945099 117.57656097]
[66.99228668 108.89498901]
[65.81791687 99.53625488]
[67.24574280 90.21282959]
[71.16707611 81.63447571]
[77.28338623 74.45424652]
[85.12906647 69.21875000]
[81.72608185 54.60985947]
[76.70092010 46.90274811]
[78.40762329 39.66170120]
[67.98668671 27.75730515]
[72.92825317 13.70631981]
[69.82993317 -0.97020572]
[66.73161316 -15.64673138]
[63.63328934 -30.32325745]
[60.53496933 -44.99978256]
[56.98020554 -59.57248688]
[52.97246552 -74.02717590]
[48.96472549 -88.48186493]
[37.82154083 -99.71306610]
[41.87705231 -114.04492188]
[37.86931229 -128.49961853]
[24.39624214 -136.31716919]
[20.53773689 -151.03337097]
[28.07361031 -163.82971191]
[24.06587029 -178.28439331]
[20.05813026 -192.73907471]
[16.05038834 -207.19377136]
[12.04264927 -221.64845276]
[8.03490829 -236.10314941]
[4.02716827 -250.55783081]
[-10.97076988 -249.35021973]
[-25.92618942 -251.00306702]
[-40.29846191 -255.45663452]
[-53.56803894 -262.54992676]
[-65.25523376 -272.02651978]
[-74.93756104 -283.54385376]
[-82.26501465 -296.68557739]
[-86.97270203 -310.97665405]
[-88.89044952 -325.90039062]
[-87.94893646 -340.91738892]
[-84.18218994 -355.48477173]
[-77.72637939 -369.07589722]
[-68.81487274 -381.19949341]
[-57.76982498 -391.41729736]
[-44.99050140 -399.35992432]
[-30.93886757 -404.74026489]
[-16.12288094 -407.36383057]
[-1.07813168 -407.13577271]
[13.65152359 -404.06433105]
[27.53361511 -398.26052856]
[40.06631851 -389.93417358]
[50.79657745 -379.38629150]
[59.33650589 -366.99813843]
[65.37738800 -353.21759033]
[68.70085144 -338.54272461]
[69.18675232 -323.50408936]
[66.81752777 -308.64532471]
[61.67882156 -294.50354004]
[53.95639801 -281.58993530]
[43.92941284 -270.37139893]
[31.96034241 -261.25338745]
[18.48185730 -254.56558228]
[22.48959732 -240.11088562]
[26.49733734 -225.65620422]
[30.50507736 -211.20150757]
[34.51281738 -196.74682617]
[38.52055740 -182.29212952]
[42.52829742 -167.83744812]
[55.57758331 -160.74859619]
[59.84791565 -146.14657593]
[52.32400131 -132.50735474]
[56.33174133 -118.05266571]
[67.18826294 -107.85535431]
[63.41941452 -92.48960114]
[67.42715454 -78.03491211]
[71.43489838 -63.58022690]
[74.37317657 -61.52255630]
[76.43296814 -57.90884399]
[76.87997437 -53.18099213]
[75.21149445 -48.09810257]
[78.30981445 -33.42157745]
[81.40814209 -18.74505234]
[84.50646210 -4.06852770]
[87.60478210 10.60799789]
[97.80410767 21.46263123]
[93.08415222 36.56337738]
[96.33497620 51.20687866]
[99.73795319 65.81577301]
[124.54683685 76.20750427]
[134.15940857 101.32855988]
[148.65499878 105.18572235]
[157.81933594 104.36914825]
[163.41041565 109.27684021]
[177.82263184 113.43473053]
[192.23484802 117.59261322]
[209.12931824 116.17369080]
[215.16964722 132.01512146]
[201.61943054 142.20472717]
[188.07696533 132.00483704]
[173.66474915 127.84694672]
[159.25253296 123.68905640]
[144.79783630 119.68131256]
[130.30224609 115.82415771]
[126.29669952 121.84293365]
[121.11495972 126.88472748]
[114.98880005 130.72402954]
[108.19223022 133.18911743]
[108.50428772 148.18586731]
[108.81634521 163.18261719]
[109.12840271 178.17938232]
[109.44045258 193.17613220]
[109.75251007 208.17288208]
[110.06456757 223.16963196]
[110.37662506 238.16639709]
[110.68868256 253.16314697]
[111.00074005 268.15991211]
[125.65573120 271.75067139]
[138.88153076 279.01293945]
[149.77641296 289.45150757]
[157.59750366 302.35473633]
[161.81156921 316.84280396]
[162.13130188 331.92788696]
[158.53486633 346.58151245]
[151.26750183 359.80450439]
[140.82470703 370.69534302]
[127.91847229 378.51144409]
[113.42878723 382.71994019]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[29 111]
[30 110]
[32 109]
[34 107]
[35 106]
[36 105]
[37 104]
[38 103]
[39 99]
[40 98]
[41 97]
[43 95]
[44 94]
[47 91]
[48 90]
[49 89]
[50 88]
[51 87]
[52 86]
[53 85]
[113 126]
[114 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
