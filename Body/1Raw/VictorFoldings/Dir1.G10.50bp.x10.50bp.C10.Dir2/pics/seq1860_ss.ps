%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUAGCCCCAAGGGGGGGGGGACCCACUCCACCUUACUACCAGACAACCUUAGCCAAACCAUUUACCCAAAxxxxxxxxxxCCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCCCCCCCCCCCAGCCUAGCCCCUA\
) } def
/len { sequence length } bind def

/coor [
[73.56089020 169.12319946]
[60.18842697 162.38655090]
[48.44566727 153.09608459]
[38.81330872 141.63211060]
[31.68565369 128.46389771]
[27.35447693 114.13050842]
[25.99707603 99.21867371]
[27.66901779 84.33882904]
[32.30186081 70.10008240]
[39.70595551 57.08530045]
[49.57821274 45.82725143]
[61.51451111 36.78678513]
[75.02622986 30.33398247]
[89.56025696 26.73298836]
[88.96011353 11.74499893]
[88.35997009 -3.24299049]
[87.75982666 -18.23097992]
[87.15968323 -33.21896744]
[86.55953979 -48.20695877]
[85.95938873 -63.19494629]
[85.35924530 -78.18293762]
[84.75910187 -93.17092896]
[84.15895844 -108.15891266]
[83.55881500 -123.14690399]
[68.55702209 -123.41920471]
[53.59643555 -124.56332397]
[38.72768784 -126.57539368]
[24.00108719 -129.44859314]
[9.46646500 -133.17321777]
[-4.82699919 -137.73666382]
[-18.83094025 -143.12345886]
[-32.49797058 -149.31541443]
[-45.78184891 -156.29156494]
[-58.63762665 -164.02830505]
[-71.02179718 -172.49945068]
[-82.89246368 -181.67634583]
[-94.20945740 -191.52792358]
[-104.93448639 -202.02087402]
[-115.03125763 -213.11965942]
[-124.46560669 -224.78675842]
[-133.20561218 -236.98268127]
[-141.22169495 -249.66615295]
[-148.48674011 -262.79425049]
[-154.97615051 -276.32257080]
[-160.66798401 -290.20535278]
[-165.54298401 -304.39556885]
[-169.58464050 -318.84524536]
[-172.77926636 -333.50546265]
[-175.11608887 -348.32666016]
[-176.58717346 -363.25863647]
[-177.18754578 -378.25088501]
[-176.91519165 -393.25268555]
[-175.77101135 -408.21325684]
[-173.75888062 -423.08200073]
[-170.88562012 -437.80859375]
[-167.16093445 -452.34320068]
[-162.59742737 -466.63662720]
[-157.21057129 -480.64056396]
[-151.01855469 -494.30755615]
[-144.04235840 -507.59140015]
[-136.30557251 -520.44714355]
[-127.83436584 -532.83129883]
[-118.65743256 -544.70190430]
[-108.80579376 -556.01885986]
[-98.31281281 -566.74383545]
[-87.21396637 -576.84057617]
[-75.54683685 -586.27490234]
[-63.35087967 -595.01483154]
[-50.66737747 -603.03088379]
[-37.53923798 -610.29583740]
[-24.01088905 -616.78521729]
[-10.12810230 -622.47698975]
[4.06214380 -627.35192871]
[18.51183510 -631.39349365]
[33.17207718 -634.58807373]
[47.99326706 -636.92486572]
[62.92525101 -638.39587402]
[77.91750336 -638.99621582]
[92.91930389 -638.72375488]
[107.87987518 -637.57952881]
[122.74860382 -635.56732178]
[137.47517395 -632.69403076]
[152.00976562 -628.96923828]
[166.30319214 -624.40570068]
[180.30709839 -619.01879883]
[193.97407532 -612.82672119]
[207.25790405 -605.85046387]
[220.11360168 -598.11364746]
[232.49771118 -589.64239502]
[244.36830139 -580.46539307]
[255.68521118 -570.61370850]
[266.41015625 -560.12066650]
[276.50683594 -549.02178955]
[285.94107056 -537.35461426]
[294.68099976 -525.15863037]
[302.69696045 -512.47509766]
[309.96191406 -499.34692383]
[316.45120239 -485.81854248]
[322.14291382 -471.93572998]
[327.01779175 -457.74548340]
[331.05932617 -443.29577637]
[334.25384521 -428.63549805]
[336.59054565 -413.81430054]
[338.06152344 -398.88232422]
[338.66177368 -383.89004517]
[338.38928223 -368.88827515]
[337.24496460 -353.92770386]
[335.23272705 -339.05895996]
[332.35934448 -324.33239746]
[328.63452148 -309.79782104]
[324.07092285 -295.50442505]
[318.68392944 -281.50054932]
[312.49182129 -267.83358765]
[305.51550293 -254.54980469]
[297.77859497 -241.69412231]
[289.30731201 -229.31005859]
[280.13024902 -217.43949890]
[270.27853394 -206.12263489]
[259.78546143 -195.39773560]
[248.68653870 -185.30110168]
[237.01931763 -175.86689758]
[224.82330322 -167.12704468]
[212.13972473 -159.11111450]
[199.01152039 -151.84623718]
[185.48312378 -145.35699463]
[171.60029602 -139.66532898]
[157.41000366 -134.79051208]
[142.96028137 -130.74903870]
[128.30000305 -127.55458069]
[113.47879791 -125.21794891]
[98.54680634 -123.74704742]
[99.14694977 -108.75906372]
[99.74709320 -93.77107239]
[100.34723663 -78.78308105]
[100.94738007 -63.79509354]
[101.54752350 -48.80710220]
[102.14766693 -33.81911469]
[102.74781036 -18.83112335]
[103.34796143 -3.84313464]
[103.94810486 11.14485455]
[104.54824829 26.13284492]
[119.32366180 28.56023979]
[133.30805969 33.91205215]
[145.92897034 41.96920776]
[156.66975403 52.40187454]
[165.09074402 64.78299713]
[170.84721375 78.60573578]
[173.70353699 93.30426025]
[173.54275513 108.27688599]
[170.37147522 122.91068268]
[164.31950378 136.60662842]
[155.63458252 148.80406189]
[144.67224121 159.00367737]
[131.88122559 166.78794861]
[117.78512573 171.83824158]
[102.96099091 173.94778442]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
