%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCAAAGCUGGGGGGGGGGGGUUUCAAGCCAACCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGxxxxxxxxxxACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCCCCCCCCCCCACCCAAAGCU\
) } def
/len { sequence length } bind def

/coor [
[87.45085144 349.51065063]
[74.53169250 341.75228882]
[63.75039673 331.22326660]
[55.68838120 318.49139404]
[50.78041840 304.24328613]
[49.29119492 289.24731445]
[51.30102158 274.31219482]
[56.70150375 260.24340820]
[65.20140839 247.79959106]
[76.34233856 237.65187073]
[89.52349091 230.34747314]
[104.03401184 226.28034973]
[103.41818237 211.29298401]
[102.80236053 196.30563354]
[102.18653107 181.31828308]
[101.57070923 166.33093262]
[100.95487976 151.34358215]
[100.33905792 136.35623169]
[99.72322845 121.36887360]
[87.13478851 113.21220398]
[73.20407104 118.77413940]
[59.27335739 124.33608246]
[45.34264374 129.89801025]
[31.41192627 135.45996094]
[17.48121071 141.02189636]
[12.76006889 155.92976379]
[-0.46678331 164.27149963]
[-15.95403194 162.10836792]
[-26.38907051 150.46173096]
[-26.84479523 134.83079529]
[-17.10602570 122.59599304]
[-1.77110958 119.53422546]
[11.91927242 127.09117889]
[25.84998894 121.52923584]
[39.78070450 115.96730042]
[53.71142197 110.40536499]
[67.64213562 104.84342957]
[81.57285309 99.28148651]
[91.67829132 88.19635773]
[95.93113708 73.81187439]
[100.18398285 59.42739487]
[104.43682861 45.04291153]
[90.40137482 35.10554886]
[80.59627533 21.00720596]
[76.17681885 4.43822813]
[77.65380859 -12.62171555]
[84.83455658 -28.14014816]
[96.84784698 -40.27393723]
[112.24958801 -47.58819199]
[129.19642639 -49.22594452]
[132.55567932 -63.84495163]
[135.91494751 -78.46395874]
[139.27420044 -93.08296967]
[142.63345337 -107.70197296]
[145.99272156 -122.32098389]
[149.35197449 -136.93998718]
[152.71124268 -151.55899048]
[156.07049561 -166.17800903]
[156.99391174 -181.14955139]
[155.45661926 -196.07057190]
[153.91932678 -210.99159241]
[152.38203430 -225.91259766]
[150.84474182 -240.83361816]
[149.30744934 -255.75463867]
[147.77015686 -270.67565918]
[146.23286438 -285.59667969]
[131.58491516 -289.57186890]
[119.36444092 -298.57321167]
[111.22415161 -311.38339233]
[108.26496124 -326.26986694]
[110.88706970 -341.21942139]
[118.73585510 -354.21023560]
[130.74984741 -363.48538208]
[145.30424500 -367.79049683]
[160.43067932 -366.54336548]
[174.08343506 -359.91259766]
[184.41607666 -348.79501343]
[190.03120422 -334.69415283]
[190.16943359 -319.51699829]
[184.81204224 -305.31619263]
[174.68359375 -294.01226807]
[161.15386963 -287.13397217]
[162.69116211 -272.21295166]
[164.22845459 -257.29193115]
[165.76574707 -242.37091064]
[167.30303955 -227.44989014]
[168.84033203 -212.52888489]
[170.37762451 -197.60786438]
[171.91491699 -182.68684387]
[178.59106445 -196.11924744]
[189.39314270 -206.52668762]
[203.06460571 -212.69850159]
[218.01504517 -213.91673279]
[232.50534058 -210.03967285]
[244.84982300 -201.51831055]
[253.61251831 -189.34394836]
[257.77407837 -174.93278503]
[256.85034180 -159.96125793]
[250.94883728 -146.17095947]
[240.75604248 -135.16610718]
[227.45765686 -128.22686768]
[212.60067749 -126.16045380]
[197.91337585 -129.20727539]
[185.10429382 -137.01287842]
[175.66349792 -148.66926575]
[170.68949890 -162.81874084]
[167.33024597 -148.19973755]
[163.97097778 -133.58073425]
[160.61172485 -118.96172333]
[157.25247192 -104.34271240]
[153.89320374 -89.72370911]
[150.53395081 -75.10469818]
[147.17468262 -60.48569489]
[143.81542969 -45.86668777]
[155.14547729 -39.58094025]
[164.45626831 -30.55092621]
[171.09976196 -19.39530182]
[174.61100769 -6.88101149]
[174.74064636 6.12944984]
[171.47268677 18.73747635]
[165.02600098 30.07041740]
[155.83973694 39.34197617]
[144.54342651 45.90675735]
[131.91377258 49.30521011]
[118.82131195 49.29576111]
[114.56846619 63.68024063]
[110.31561279 78.06472015]
[106.06276703 92.44920349]
[112.36978149 94.29454803]
[117.55290222 100.52579498]
[118.94877625 110.15710449]
[114.71058655 120.75304413]
[115.32640839 135.74040222]
[115.94223785 150.72775269]
[116.55805969 165.71510315]
[117.17388153 180.70245361]
[117.78971100 195.68981934]
[118.40553284 210.67716980]
[119.02136230 225.66452026]
[133.81663513 228.52748108]
[147.55261230 234.72586060]
[159.48851013 243.92536926]
[168.98066711 255.62988281]
[175.51716614 269.20822144]
[178.74549866 283.92807007]
[178.49157715 298.99566650]
[174.76908875 313.59838867]
[167.77877808 326.94876099]
[157.89764404 338.32681274]
[145.65853882 347.11889648]
[131.72151184 352.85092163]
[116.83816528 355.21374512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 38]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[39 128]
[40 127]
[41 126]
[42 125]
[50 114]
[51 113]
[52 112]
[53 111]
[54 110]
[55 109]
[56 108]
[57 107]
[58 106]
[59 89]
[60 88]
[61 87]
[62 86]
[63 85]
[64 84]
[65 83]
[66 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
