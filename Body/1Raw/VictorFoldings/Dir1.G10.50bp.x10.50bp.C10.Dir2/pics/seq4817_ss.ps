%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGCAAGCAAGGGGGGGGGGCCGCAUCCAUAAUCCUUCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCxxxxxxxxxxUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCCCCCCCCCCCACGGAAGCAA\
) } def
/len { sequence length } bind def

/coor [
[72.25796509 366.67135620]
[59.33880997 358.91299438]
[48.55751038 348.38397217]
[40.49549484 335.65209961]
[35.58753586 321.40399170]
[34.09831238 306.40802002]
[36.10813522 291.47293091]
[41.50862122 277.40411377]
[50.00852585 264.96029663]
[61.14945984 254.81257629]
[74.33060455 247.50819397]
[88.84112549 243.44107056]
[88.22529602 228.45370483]
[87.60947418 213.46635437]
[86.99364471 198.47900391]
[86.37782288 183.49165344]
[85.76200104 168.50430298]
[85.14617157 153.51693726]
[84.53034973 138.52958679]
[83.91452026 123.54223633]
[84.95069122 93.93184662]
[76.03454590 81.86941528]
[67.11839294 69.80698395]
[58.20223999 57.74454880]
[45.42866135 65.62504578]
[32.04045105 72.40902710]
[18.13152504 78.04891205]
[3.79944181 82.50513458]
[-10.85526562 85.74644470]
[-25.72980499 87.75009918]
[-40.71983719 88.50205231]
[-55.72022247 87.99702454]
[-70.62573242 86.23855591]
[-85.33182526 83.23898315]
[-99.73533630 79.01934814]
[-113.73524475 73.60924530]
[-127.23334503 67.04663086]
[-140.13494873 59.37752914]
[-152.34956360 50.65573883]
[-163.79151917 40.94243240]
[-174.38053894 30.30574989]
[-184.04237366 18.82029915]
[-192.70922852 6.56664181]
[-200.32032776 -6.36926937]
[-206.82226562 -19.89669609]
[-212.16944885 -33.92075348]
[-216.32437134 -48.34307098]
[-219.25787354 -63.06248093]
[-220.94940186 -77.97573853]
[-221.38706970 -92.97824097]
[-220.56782532 -107.96474457]
[-218.49739075 -122.83013916]
[-215.19030762 -137.47013855]
[-210.66978455 -151.78207397]
[-204.96749878 -165.66554260]
[-198.12347412 -179.02314758]
[-190.18569946 -191.76121521]
[-181.20986938 -203.79039001]
[-171.25892639 -215.02629089]
[-160.40269470 -225.39009094]
[-148.71730042 -234.80912781]
[-136.28471375 -243.21730042]
[-123.19215393 -250.55564880]
[-109.53144836 -256.77270508]
[-95.39842224 -261.82482910]
[-80.89220428 -265.67663574]
[-66.11455536 -268.30105591]
[-51.16912460 -269.67968750]
[-36.16074753 -269.80288696]
[-21.19470024 -268.66976929]
[-6.37595892 -266.28829956]
[8.19153214 -262.67517090]
[22.40559196 -257.85571289]
[36.16651535 -251.86375427]
[49.37777710 -244.74131775]
[61.94671249 -236.53837585]
[73.78514862 -227.31243896]
[84.81005859 -217.12823486]
[94.94410706 -206.05720520]
[104.11620331 -194.17700195]
[112.26200867 -181.57095337]
[119.32439423 -168.32749939]
[125.25381470 -154.53952026]
[130.00868225 -140.30372620]
[133.55564880 -125.71997833]
[135.86982727 -110.89057922]
[136.93498230 -95.91954041]
[136.74365234 -80.91188049]
[135.29718018 -65.97286224]
[132.60569763 -51.20727539]
[128.68809509 -36.71869659]
[123.57185364 -22.60874939]
[117.29284668 -8.97640896]
[109.89513397 4.08270216]
[101.43060303 16.47698402]
[91.95861816 28.11949539]
[81.54563141 38.92857361]
[70.26467133 48.82839966]
[79.18082428 60.89083099]
[88.09697723 72.95326233]
[97.01312256 85.01569366]
[110.88600922 90.72035980]
[125.70848846 88.41947937]
[140.53097534 86.11860657]
[155.35345459 83.81773376]
[160.24288940 69.31421661]
[171.32038879 58.75260925]
[186.04043579 54.55989838]
[201.02046204 57.69953156]
[212.81817627 67.45005035]
[218.72253418 81.57085419]
[217.37678528 96.81708527]
[209.09014893 109.68526459]
[195.76683044 117.21839142]
[180.46844482 117.68540192]
[166.71044922 110.97898102]
[157.65432739 98.64021301]
[142.83184814 100.94109344]
[128.00936890 103.24196625]
[113.18688202 105.54283905]
[127.29792786 110.62990570]
[142.28945923 111.13402557]
[154.75462341 119.47785950]
[160.93484497 133.14552307]
[158.96661377 148.01582336]
[149.44340515 159.60498047]
[135.23672485 164.41853333]
[120.63028717 161.00506592]
[110.02831268 150.39384460]
[106.62763214 135.78381348]
[98.90187073 122.92641449]
[99.51770020 137.91377258]
[100.13352203 152.90112305]
[100.74935150 167.88847351]
[101.36517334 182.87582397]
[101.98100281 197.86317444]
[102.59682465 212.85052490]
[103.21265411 227.83789062]
[103.82847595 242.82524109]
[118.62374878 245.68820190]
[132.35972595 251.88658142]
[144.29562378 261.08609009]
[153.78778076 272.79058838]
[160.32427979 286.36892700]
[163.55261230 301.08880615]
[163.29869080 316.15637207]
[159.57620239 330.75912476]
[152.58589172 344.10949707]
[142.70475769 355.48751831]
[130.46565247 364.27963257]
[116.52862549 370.01165771]
[101.64528656 372.37445068]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 101]
[22 100]
[23 99]
[24 98]
[102 120]
[103 119]
[104 118]
[105 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
