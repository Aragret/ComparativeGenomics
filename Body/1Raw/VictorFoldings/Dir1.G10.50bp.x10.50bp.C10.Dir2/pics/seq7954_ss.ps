%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAUUAAGAGGGGGGGGGGGAACCAACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGxxxxxxxxxxCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUCCCCCCCCCCAAGAUUAAAA\
) } def
/len { sequence length } bind def

/coor [
[90.40149689 616.20477295]
[75.91180420 611.99627686]
[63.00557709 604.18017578]
[52.56277466 593.28930664]
[45.29541016 580.06634521]
[41.69898605 565.41271973]
[42.01870728 550.32763672]
[46.23277664 535.83953857]
[54.05387497 522.93634033]
[64.94873810 512.49774170]
[78.17455292 505.23547363]
[92.82954407 501.64471436]
[93.14160156 486.64794922]
[93.45365143 471.65121460]
[93.76570892 456.65444946]
[94.07776642 441.65771484]
[94.38982391 426.66094971]
[94.70188141 411.66418457]
[95.01393890 396.66744995]
[95.32598877 381.67068481]
[95.63804626 366.67391968]
[95.95010376 351.67718506]
[80.53866577 346.06103516]
[67.94642639 335.50982666]
[59.69401169 321.27502441]
[56.78573227 305.05416870]
[59.58735275 288.78863525]
[67.78021240 274.43112183]
[80.39736938 263.71133423]
[95.93766785 257.92752075]
[95.62561035 242.93078613]
[95.31355286 227.93402100]
[81.70072937 221.83840942]
[72.04473114 210.38977051]
[68.30171967 195.82437134]
[71.26596832 181.01785278]
[80.40206146 168.91748047]
[93.94065857 161.95559692]
[93.62860107 146.95884705]
[85.62820435 134.39529419]
[93.07672882 120.43714142]
[92.76467896 105.44039154]
[90.33018494 102.35661316]
[89.29714966 98.19986725]
[90.11940002 93.63455200]
[92.93045044 89.50516510]
[93.55442810 74.51815033]
[94.17840576 59.53113556]
[94.80238342 44.54411697]
[95.42636108 29.55710220]
[95.58239746 14.55791378]
[95.27033997 -0.43884000]
[92.12924194 -6.37525511]
[92.45755005 -12.13055897]
[95.27033997 -16.06295204]
[95.58239746 -31.05970573]
[95.89445496 -46.05646133]
[92.33969116 -60.62916183]
[85.15718079 -73.79774475]
[77.97467041 -86.96633148]
[70.79216003 -100.13491058]
[56.51906204 -108.21022034]
[56.64652252 -124.60887146]
[71.04342651 -132.46133423]
[84.89946747 -123.68967438]
[83.96074677 -107.31742096]
[91.14325714 -94.14883423]
[98.32576752 -80.98025513]
[105.50827026 -67.81166840]
[106.23200226 -82.79420471]
[110.32817841 -97.22407532]
[117.58418274 -110.35231018]
[127.62338257 -121.49745941]
[139.92469788 -130.08103943]
[153.84959412 -135.65750122]
[168.67532349 -137.93740845]
[183.63232422 -136.80241394]
[197.94424438 -132.31141663]
[210.86820984 -124.69754791]
[221.73339844 -114.35600281]
[229.97584534 -101.82356262]
[235.16772461 -87.75073242]
[237.03953552 -72.86798096]
[235.49412537 -57.94780350]
[230.61170959 -43.76464462]
[222.64572144 -31.05468750]
[212.00962830 -20.47765732]
[199.25550842 -12.58256149]
[185.04537964 -7.77919912]
[170.11683655 -6.31689358]
[155.24473572 -8.27154636]
[141.20103455 -13.54170036]
[128.71467590 -21.85380363]
[118.43379211 -32.77641296]
[110.89120483 -45.74440384]
[110.57914734 -30.74765015]
[110.26708984 -15.75089645]
[110.26708984 -0.75089622]
[110.57914734 14.24585724]
[112.91792297 16.96571350]
[114.02099609 20.97631454]
[113.28599548 25.66802597]
[110.41337585 30.18107986]
[109.78939819 45.16809464]
[109.16542053 60.15511322]
[108.54144287 75.14212799]
[107.91746521 90.12914276]
[107.76142883 105.12833405]
[108.07348633 120.12508392]
[116.09620667 133.76130676]
[108.62535858 146.64678955]
[108.93740845 161.64353943]
[122.75389099 168.03620911]
[132.38543701 179.74606323]
[135.96304321 194.41645813]
[132.82917786 209.12495422]
[123.65777588 220.96534729]
[110.31031036 227.62196350]
[110.62236786 242.61872864]
[110.93441772 257.61547852]
[124.07266235 261.44949341]
[135.57618713 268.83328247]
[144.51104736 279.15600586]
[150.15502930 291.56875610]
[152.05606079 305.05416870]
[150.06838989 318.51004028]
[144.36372375 330.83923340]
[135.41642761 341.03927612]
[123.96413422 348.28372192]
[110.94686127 351.98922729]
[110.63480377 366.98599243]
[110.32274628 381.98272705]
[110.01068878 396.97949219]
[109.69863129 411.97625732]
[109.38657379 426.97299194]
[109.07452393 441.96975708]
[108.76246643 456.96652222]
[108.45040894 471.96325684]
[108.13835144 486.96002197]
[107.82629395 501.95675659]
[122.31922913 506.15405273]
[135.23149109 513.96020508]
[145.68270874 524.84295654]
[152.96028137 538.06036377]
[156.56802368 552.71118164]
[156.25994873 567.79650879]
[152.05706787 582.28784180]
[144.24592590 595.19708252]
[133.35913086 605.64410400]
[120.13893127 612.91656494]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[30 120]
[31 119]
[32 118]
[38 112]
[39 111]
[41 109]
[42 108]
[46 107]
[47 106]
[48 105]
[49 104]
[50 103]
[51 99]
[52 98]
[55 97]
[56 96]
[57 95]
[58 69]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
