%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCGCUAACAUGGGGGGGGGGUACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAxxxxxxxxxxGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGACCCCCCCCCCAACCGCAAACAU\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 418.89096069]
[70.87159729 413.73596191]
[58.28185654 405.45373535]
[47.94191742 394.49096680]
[40.40940475 381.43884277]
[36.09054184 367.00125122]
[35.21823120 351.95678711]
[37.83952332 337.11679077]
[43.81304932 323.28155518]
[52.81666565 311.19720459]
[64.36482239 301.51541138]
[77.83473969 294.75833130]
[92.50000000 291.29037476]
[92.50000000 276.29037476]
[92.50000000 261.29037476]
[92.50000000 246.29037476]
[92.50000000 231.29037476]
[92.50000000 216.29037476]
[92.50000000 201.29037476]
[92.50000000 186.29037476]
[92.50000000 171.29037476]
[92.50000000 156.29037476]
[92.50000000 141.29037476]
[78.19622040 135.85720825]
[66.79091644 125.65738678]
[59.80025864 112.04679871]
[44.89336395 113.71547699]
[29.98646927 115.38415527]
[15.07957458 117.05283356]
[2.22579694 126.27730560]
[-11.28321362 120.00388336]
[-18.03602600 133.87481689]
[-31.22791290 141.87342834]
[-46.64939117 141.44735718]
[-59.37952423 132.73258972]
[-65.35617065 118.50995636]
[-62.67220688 103.31786346]
[-52.18407440 92.00403595]
[-37.23849869 88.17868805]
[-22.60455894 93.06246948]
[-12.95189095 105.09698486]
[-1.16435385 95.99185944]
[13.41089725 102.14593506]
[28.31779289 100.47725677]
[43.22468948 98.80857849]
[58.13158417 97.13990784]
[60.38047028 86.16390991]
[65.45333099 76.17412567]
[72.98860168 67.88257599]
[82.44916534 61.88028336]
[93.16071320 58.59506607]
[104.35974121 58.26108170]
[108.55920410 43.86092758]
[112.75866699 29.46076965]
[116.95812988 15.06061268]
[121.15759277 0.66045600]
[109.36576843 -8.89090633]
[102.14857483 -22.19335747]
[100.57843781 -37.20496368]
[104.86363983 -51.63495255]
[114.32134247 -63.29328918]
[127.48614502 -70.42304230]
[142.33711243 -71.96512604]
[146.53657532 -86.36528778]
[150.73603821 -100.76544189]
[137.10588074 -112.92080688]
[132.01246643 -131.33474731]
[137.95545959 -150.37698364]
[153.90852356 -163.70980835]
[153.30064392 -178.69747925]
[139.27159119 -184.70985413]
[129.24699402 -196.21942139]
[125.21725464 -210.94096375]
[127.98246002 -225.95150757]
[136.99357605 -238.27070618]
[150.46145630 -245.45254517]
[165.71203613 -246.07109070]
[179.71730042 -240.00352478]
[189.69650269 -228.45457458]
[193.66824341 -213.71726990]
[190.84394836 -198.71772766]
[181.78437805 -186.43412781]
[168.28831482 -179.30537415]
[168.89620972 -164.31768799]
[183.33818054 -160.26437378]
[191.65592957 -172.74696350]
[199.97367859 -185.22955322]
[208.29142761 -197.71214294]
[216.60916138 -210.19473267]
[214.88195801 -226.14454651]
[226.37609863 -237.33670044]
[242.27427673 -235.18553162]
[250.38076782 -221.34123230]
[244.47695923 -206.42398071]
[229.09176636 -201.87699890]
[220.77401733 -189.39439392]
[212.45626831 -176.91180420]
[204.13851929 -164.42921448]
[195.82077026 -151.94662476]
[202.13928223 -136.24121094]
[200.84303284 -119.91065216]
[192.68693542 -106.33747864]
[179.79632568 -98.11730957]
[165.13618469 -96.56597900]
[160.93673706 -82.16582489]
[156.73727417 -67.76566315]
[168.43127441 -58.48237228]
[175.69985962 -45.39371109]
[177.40818787 -30.47906876]
[173.26498413 -16.00766563]
[163.87168884 -4.19328499]
[150.63529968 3.14436889]
[135.55775452 4.85991812]
[131.35829163 19.26007462]
[127.15882874 33.66023254]
[122.95936584 48.06039047]
[118.75990295 62.46054459]
[136.69282532 79.63381958]
[141.78096008 103.93653870]
[156.22293091 107.98985291]
[170.85835266 101.41841888]
[185.05461121 108.89143372]
[187.92153931 124.67624664]
[177.25987244 136.66409302]
[161.24833679 135.65893555]
[152.16961670 122.43183136]
[137.72764587 118.37850952]
[133.63902283 125.09104919]
[128.37046814 130.92347717]
[122.10677338 135.67120361]
[115.06764984 139.16772461]
[107.50000000 141.29037476]
[107.50000000 156.29037476]
[107.50000000 171.29037476]
[107.50000000 186.29037476]
[107.50000000 201.29037476]
[107.50000000 216.29037476]
[107.50000000 231.29037476]
[107.50000000 246.29037476]
[107.50000000 261.29037476]
[107.50000000 276.29037476]
[107.50000000 291.29037476]
[122.16526031 294.75833130]
[135.63517761 301.51541138]
[147.18333435 311.19720459]
[156.18695068 323.28155518]
[162.16047668 337.11679077]
[164.78176880 351.95678711]
[163.90945435 367.00125122]
[159.59059143 381.43884277]
[152.05809021 394.49096680]
[141.71813965 405.45373535]
[129.12840271 413.73596191]
[114.96779633 418.89096069]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[26 46]
[27 45]
[28 44]
[29 43]
[31 41]
[52 117]
[53 116]
[54 115]
[55 114]
[56 113]
[63 106]
[64 105]
[65 104]
[69 84]
[70 83]
[85 99]
[86 98]
[87 97]
[88 96]
[89 95]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
