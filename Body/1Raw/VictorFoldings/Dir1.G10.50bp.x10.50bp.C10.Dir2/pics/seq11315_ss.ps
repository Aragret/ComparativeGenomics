%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCAGUAAGGGGGGGGGGCUACUACUAAUCAACGCCCAUAAUCAUACAAAGCCCCCGCACCAAUAGGAxxxxxxxxxxUUUAUUGACUCCUAGCCGCAGACCUCCUCAUUCUAACCUGAAUCGGAGGACCCCCCCCCCCAACCAGUAA\
) } def
/len { sequence length } bind def

/coor [
[22.78611565 218.38154602]
[19.01099586 203.86436462]
[17.92741585 188.90354919]
[19.57120895 173.99389648]
[23.88801193 159.62847900]
[30.73506355 146.28239441]
[39.88591385 134.39703369]
[51.03792953 124.36544800]
[63.82228851 116.51942444]
[77.81619263 111.11843109]
[92.55414581 108.34135437]
[77.56145477 108.80939484]
[64.00942230 116.97353363]
[51.04692459 109.63713074]
[37.49489975 117.80126190]
[24.53239822 110.46485901]
[9.53970146 110.93289948]
[-5.45299435 111.40093994]
[-20.44569016 111.86898804]
[-35.43838501 112.33702850]
[-50.43108368 112.80506897]
[-65.42378235 113.27310944]
[-67.98738098 128.10594177]
[-73.48464966 142.11897278]
[-81.69049072 154.73835754]
[-92.26885986 165.44737244]
[-104.78659058 173.80746460]
[-118.73109436 179.47631836]
[-133.53134155 182.22177124]
[-148.58128357 181.93141174]
[-163.26461792 178.61712646]
[-176.98008728 172.41464233]
[-189.16604614 163.57794189]
[-199.32347107 152.46887207]
[-207.03645325 139.54235840]
[-211.98913574 125.32772064]
[-213.97869873 110.40704346]
[-212.92369080 95.39132690]
[-208.86729431 80.89544678]
[-201.97563171 67.51300049]
[-192.53089905 55.79199219]
[-180.91986084 46.21239471]
[-167.61799622 39.16647720]
[-153.16996765 34.94277191]
[-138.16744995 33.71423721]
[-123.22477722 35.53117752]
[-108.95383453 40.31919479]
[-95.93901062 47.88221741]
[-84.71325684 57.91054535]
[-75.73626709 69.99353027]
[-69.37563324 83.63637543]
[-65.89182281 98.28041840]
[-50.89912415 97.81237030]
[-35.90642929 97.34432983]
[-20.91373253 96.87628937]
[-5.92103672 96.40824890]
[9.07165909 95.94020081]
[24.06435585 95.47216034]
[36.54400635 87.34149933]
[50.57888412 94.64443207]
[63.05853271 86.51377106]
[77.09340668 93.81670380]
[92.08610535 93.34865570]
[87.33606720 85.89351654]
[84.62873077 77.10520935]
[84.22485352 67.42311859]
[87.01718140 52.68531036]
[89.80950928 37.94750595]
[92.60182953 23.20969963]
[95.39415741 8.47189331]
[82.02429199 1.41936648]
[71.32835388 -9.26185131]
[64.25743103 -22.62199211]
[61.44025040 -37.47308350]
[63.12731934 -52.49457550]
[69.16862488 -66.35076904]
[79.02697754 -77.80957031]
[91.82578278 -85.85208893]
[106.42697144 -89.76317596]
[121.53222656 -89.19506073]
[135.79838562 -84.19826508]
[147.95692444 -75.21710205]
[156.92671204 -63.05016327]
[161.91015625 -48.77932739]
[162.46412659 -33.67354965]
[158.53938293 -19.07602501]
[150.48489380 -6.28475428]
[139.01686096 3.56287146]
[125.15502167 9.59120750]
[110.13195801 11.26421833]
[107.33963776 26.00202370]
[104.54730988 40.73983002]
[101.75498962 55.47763443]
[98.96266174 70.21543884]
[103.40883636 76.25543976]
[112.92501068 64.66050720]
[121.37230682 52.26521301]
[136.36982727 51.99277496]
[145.26173401 64.07308960]
[140.54447937 78.31202698]
[126.19994354 82.69409943]
[112.30118561 88.33542633]
[116.74736023 94.37541962]
[131.64926147 96.08811188]
[146.55116272 97.80079651]
[161.45306396 99.51348877]
[176.35496521 101.22618103]
[186.96339417 93.81568909]
[199.37594604 95.58979797]
[206.97952271 105.04986572]
[221.84257507 107.07219696]
[236.70562744 109.09453583]
[251.56866455 111.11686707]
[263.99533081 101.35196686]
[279.67700195 103.31704712]
[289.30996704 115.84626770]
[287.17919922 131.50625610]
[274.54882812 141.00622559]
[258.91223145 138.71000671]
[249.54634094 125.97991180]
[234.68328857 123.95758057]
[219.82023621 121.93524170]
[204.95719910 119.91291046]
[189.13473511 127.43951416]
[174.64228821 116.12808228]
[159.74038696 114.41539001]
[144.83847046 112.70269775]
[129.93656921 110.99001312]
[115.03467560 109.27732086]
[129.49330139 113.27082825]
[142.98959351 119.81681061]
[155.07722473 128.69877625]
[165.35641479 139.62298584]
[173.48721313 152.22814941]
[179.20071411 166.09738159]
[182.30798340 180.77201843]
[182.70622253 195.76673889]
[180.38229370 210.58561707]
[175.41304016 224.73858643]
[167.96279907 237.75756836]
[158.27798462 249.21200562]
[146.67886353 258.72308350]
[133.54905701 265.97622681]
[119.32279205 270.73159790]
[104.47056580 272.83190918]
[89.48355865 272.20767212]
[74.85742188 268.87957764]
[61.07588196 262.95767212]
[48.59470749 254.63778687]
[37.82668304 244.19511414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 63]
[12 62]
[14 60]
[16 58]
[17 57]
[18 56]
[19 55]
[20 54]
[21 53]
[22 52]
[66 94]
[67 93]
[68 92]
[69 91]
[70 90]
[103 129]
[104 128]
[105 127]
[106 126]
[107 125]
[110 123]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
