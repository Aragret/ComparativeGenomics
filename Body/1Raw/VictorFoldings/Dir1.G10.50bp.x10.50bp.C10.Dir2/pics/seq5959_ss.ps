%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUCUUAUGGGGGGGGGGAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCAGUAAGUxxxxxxxxxxAUUGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGCCCCCCCCCCAUAAUCAUAU\
) } def
/len { sequence length } bind def

/coor [
[75.17329407 485.84591675]
[61.95309448 478.57345581]
[51.06629181 468.12643433]
[43.25516129 455.21719360]
[39.05227661 440.72589111]
[38.74420547 425.64053345]
[42.35194778 410.98971558]
[49.62952042 397.77233887]
[60.08072662 386.88955688]
[72.99298859 379.08340454]
[87.48592377 374.88613892]
[87.17386627 359.88937378]
[86.86181641 344.89260864]
[86.54975891 329.89587402]
[86.23770142 314.89910889]
[85.92564392 299.90234375]
[85.61358643 284.90560913]
[85.30152893 269.90884399]
[84.98947906 254.91209412]
[76.98907471 242.34854126]
[84.43760681 228.39039612]
[75.90758514 219.75639343]
[75.56233215 207.22244263]
[84.13562012 197.52952576]
[84.13562012 182.52952576]
[84.13562012 167.52952576]
[84.13562012 152.52952576]
[84.13562012 137.52952576]
[84.13562012 122.52953339]
[77.99729156 86.87824249]
[64.95813751 77.91770935]
[66.27481842 63.08141708]
[59.64631653 49.62545013]
[53.01781845 36.16948700]
[46.38932037 22.71352005]
[39.76082230 9.25755501]
[33.13232422 -4.19841003]
[16.49337959 -9.49773884]
[8.95414925 -24.87447739]
[14.72300243 -40.64084244]
[1.50026035 -49.32817078]
[2.50800109 -64.18864441]
[-4.39899778 -77.50379944]
[-11.30599594 -90.81895447]
[-18.21299553 -104.13410950]
[-25.11999321 -117.44927216]
[-34.38494110 -129.24591064]
[-45.68394852 -139.11163330]
[-56.98295212 -148.97735596]
[-71.23122406 -143.38760376]
[-86.44385529 -145.07115173]
[-99.12510681 -153.64112854]
[-106.36090851 -167.12821960]
[-106.48852539 -182.43319702]
[-99.47863770 -196.03907776]
[-86.94207001 -204.81935120]
[-71.75962830 -206.75633240]
[-57.42012024 -201.40496826]
[-47.21866989 -189.99491882]
[-43.49949265 -175.14816284]
[-47.11722946 -160.27635193]
[-35.81822586 -150.41062927]
[-24.51922035 -140.54490662]
[-28.94156075 -154.87818909]
[-28.80545807 -169.87757874]
[-24.12374878 -184.12825012]
[-15.33803749 -196.28601074]
[-3.27703166 -205.20408630]
[10.92161274 -210.04129028]
[25.91861153 -210.34133911]
[40.29937363 -206.07592773]
[52.70743561 -197.64741516]
[61.97240829 -185.85078430]
[67.22037506 -171.79878235]
[67.95631409 -156.81684875]
[64.11082458 -142.31814575]
[56.04661179 -129.67028809]
[44.52434921 -120.06625366]
[30.63086128 -114.41195679]
[15.67665672 -113.24073792]
[1.07228637 -116.66307068]
[-11.80483723 -124.35626984]
[-4.89783907 -111.04111481]
[2.00915956 -97.72595215]
[8.91615772 -84.41079712]
[15.82315636 -71.09564209]
[28.55186462 -63.36070633]
[28.03815842 -47.54784012]
[40.78067780 -45.39727402]
[50.08248138 -36.14790726]
[52.37225342 -23.03360367]
[46.58828735 -10.82690907]
[53.21678925 2.62905693]
[59.84528732 16.08502197]
[66.47378540 29.54098701]
[73.10227966 42.99695206]
[79.73078156 56.45291901]
[92.29582214 64.45098877]
[91.45325470 80.24974060]
[93.59258270 65.40308380]
[106.93482971 58.54855728]
[120.25000000 65.45552063]
[122.33090210 80.31047821]
[111.42598724 90.61024475]
[126.24375153 88.27913666]
[141.06150818 85.94803619]
[155.87927246 83.61692810]
[168.28750610 72.89463043]
[183.68644714 78.53417206]
[186.23498535 94.73407745]
[173.31140137 104.82927704]
[158.21037292 98.43468475]
[143.39260864 100.76579285]
[128.57485962 103.09689331]
[113.75709534 105.42800140]
[128.71691895 106.52512360]
[139.07914734 117.37058258]
[139.49375916 132.36485291]
[129.74665833 143.76635742]
[114.87032318 145.68846130]
[102.54542542 137.13879395]
[99.13562012 122.52953339]
[99.13562012 137.52952576]
[99.13562012 152.52952576]
[99.13562012 167.52952576]
[99.13562012 182.52952576]
[99.13562012 197.52952576]
[108.71833801 213.21873474]
[99.43435669 228.07833862]
[107.45708466 241.71455383]
[99.98622894 254.60003662]
[100.29828644 269.59680176]
[100.61034393 284.59353638]
[100.92240143 299.59030151]
[101.23445129 314.58706665]
[101.54650879 329.58380127]
[101.85856628 344.58056641]
[102.17062378 359.57730103]
[102.48268127 374.57406616]
[117.13767242 378.16482544]
[130.36347961 385.42709351]
[141.25834656 395.86569214]
[149.07945251 408.76889038]
[153.29351807 423.25695801]
[153.61323547 438.34207153]
[150.01681519 452.99566650]
[142.74945068 466.21865845]
[132.30664062 477.10949707]
[119.40042114 484.92562866]
[104.91072845 489.13409424]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[21 129]
[24 127]
[25 126]
[26 125]
[27 124]
[28 123]
[29 122]
[30 99]
[32 97]
[33 96]
[34 95]
[35 94]
[36 93]
[37 92]
[40 88]
[42 86]
[43 85]
[44 84]
[45 83]
[46 82]
[47 63]
[48 62]
[49 61]
[104 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
