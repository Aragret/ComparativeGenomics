%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCCCUCACGGGGGGGGGGAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAxxxxxxxxxxCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUCCCCCCCCCCUACCCCCCAC\
) } def
/len { sequence length } bind def

/coor [
[107.48766327 445.77734375]
[93.64173126 439.76132202]
[81.93306732 430.23190308]
[73.23054504 417.89624023]
[68.17993927 403.66973877]
[67.15605164 388.60803223]
[70.23484802 373.82888794]
[77.18786621 360.42895508]
[87.49915314 349.40261841]
[100.40353394 341.56811523]
[114.94342041 337.50680542]
[114.94342041 322.50680542]
[114.94342041 307.50680542]
[114.94342041 292.50680542]
[114.94342041 277.50680542]
[114.94342041 262.50680542]
[114.94342041 247.50680542]
[114.94342041 232.50680542]
[114.94342041 217.50680542]
[114.94342041 202.50680542]
[114.94342041 187.50680542]
[125.82855225 152.87098694]
[117.31745911 140.51940918]
[108.80637360 128.16784668]
[100.29528046 115.81626892]
[86.45206451 110.04000092]
[71.68601227 112.67886353]
[56.91995239 115.31772614]
[42.15389633 117.95658875]
[35.50534439 131.97715759]
[21.86937141 139.38255310]
[6.48928356 137.32524109]
[-4.72095871 126.59629822]
[-7.45078945 111.32123566]
[-0.65053213 97.37361145]
[13.06497478 90.11658478]
[28.42183876 92.34062195]
[39.51503372 103.19053650]
[54.28108978 100.55167389]
[69.04714203 97.91280365]
[83.81320190 95.27394104]
[86.11598206 88.13621521]
[71.84052277 83.53064728]
[57.56505966 78.92507935]
[43.28967285 74.31929779]
[47.89567566 60.04397964]
[62.17062759 64.64962006]
[76.44608307 69.25518799]
[90.72154999 73.86074829]
[93.02433014 66.72302246]
[82.58451843 55.95221329]
[72.14470673 45.18140411]
[61.70489120 34.41059494]
[46.12144470 35.71065903]
[33.37805939 26.64753723]
[29.49177170 11.50056458]
[36.29756927 -2.57832456]
[50.58196640 -8.94150829]
[65.60029602 -4.58448696]
[74.26137543 8.43548870]
[72.47570038 23.97078323]
[82.91551208 34.74159241]
[93.35532379 45.51240158]
[103.79513550 56.28320694]
[118.25046539 52.27528381]
[132.70451355 48.26772690]
[136.10749817 33.65883636]
[139.51046753 19.04994202]
[142.91345215 4.44105053]
[129.53317261 -2.51733541]
[118.30429840 -12.58526230]
[109.93267822 -25.12985229]
[104.94454956 -39.36254120]
[103.65348816 -54.38864899]
[106.14063263 -69.26362610]
[112.24964905 -83.05241394]
[121.59651947 -94.88824463]
[133.59368896 -104.02709961]
[147.48701477 -109.89450836]
[162.40313721 -112.12163544]
[177.40441895 -110.56848907]
[191.54788208 -105.33269501]
[203.94442749 -96.74338531]
[213.81481934 -85.34048462]
[220.53860474 -71.84078979]
[223.69309998 -57.09291077]
[223.08001709 -42.02390671]
[218.73789978 -27.58102417]
[210.93968201 -14.67216015]
[200.17559814 -4.10877371]
[187.12225342 3.44511056]
[172.60021973 7.51464939]
[157.52233887 7.84402847]
[154.11936951 22.45292091]
[150.71638489 37.06181335]
[147.31340027 51.67070770]
[112.64685822 107.30518341]
[121.15794373 119.65675354]
[129.66903687 132.00833130]
[138.18013000 144.35989380]
[151.42271423 151.40502930]
[166.42190552 151.56106567]
[173.81816101 139.88655090]
[185.92909241 133.45704651]
[199.52630615 133.86486816]
[211.04495239 140.89567566]
[217.51834106 152.61280823]
[232.51103210 153.08085632]
[247.50372314 153.54888916]
[262.49642944 154.01693726]
[272.78134155 142.23753357]
[288.23962402 139.87611389]
[301.57226562 148.04763794]
[306.48406982 162.89379883]
[300.65582275 177.40466309]
[286.83941650 184.72866821]
[271.55853271 181.40762329]
[262.02838135 169.00962830]
[247.03569031 168.54159546]
[232.04298401 168.07354736]
[217.05029297 167.60549927]
[207.44099426 180.87828064]
[191.66302490 185.88043213]
[175.84808350 180.46109009]
[166.26586914 166.56025696]
[151.26667786 166.40422058]
[145.93586731 171.67987061]
[149.74302673 186.18867493]
[135.27423096 182.23115540]
[129.94342041 187.50680542]
[129.94342041 202.50680542]
[129.94342041 217.50680542]
[129.94342041 232.50680542]
[129.94342041 247.50680542]
[129.94342041 262.50680542]
[129.94342041 277.50680542]
[129.94342041 292.50680542]
[129.94342041 307.50680542]
[129.94342041 322.50680542]
[129.94342041 337.50680542]
[144.48330688 341.56811523]
[157.38769531 349.40261841]
[167.69897461 360.42895508]
[174.65199280 373.82888794]
[177.73078918 388.60803223]
[176.70690918 403.66973877]
[171.65629578 417.89624023]
[162.95378113 430.23190308]
[151.24511719 439.76132202]
[137.39916992 445.77734375]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 100]
[23 99]
[24 98]
[25 97]
[26 41]
[27 40]
[28 39]
[29 38]
[50 64]
[51 63]
[52 62]
[53 61]
[66 96]
[67 95]
[68 94]
[69 93]
[101 126]
[102 125]
[107 121]
[108 120]
[109 119]
[110 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
