%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCCUUCAUGGGGGGGGGGAAAUUAUUCAGCUUCCUACACUAUUAAAGUUUACCACAACCACCACCCCAxxxxxxxxxxUCCACCCUUACUACACAAUCAAAGACGCCCUCGGCUUACUUCUCUUCCUUCCCCCCCCCCCUCUCCUUAAU\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 397.36282349]
[71.01555634 391.80981445]
[58.81560135 382.94348145]
[49.20452881 371.32116699]
[42.78650284 357.67346191]
[39.96496582 342.85827637]
[40.91728210 327.80691528]
[45.58358765 313.46548462]
[53.67055511 300.73553467]
[64.66983032 290.41726685]
[77.88998413 283.15927124]
[92.50000000 279.41784668]
[92.50000000 264.41784668]
[92.50000000 249.41784668]
[92.50000000 234.41784668]
[92.50000000 219.41784668]
[92.50000000 204.41784668]
[92.50000000 189.41784668]
[92.50000000 174.41784668]
[92.50000000 159.41784668]
[92.50000000 144.41784668]
[92.50000000 129.41784668]
[92.50000000 114.41783905]
[88.09970093 100.07778168]
[79.68628693 87.65946198]
[71.27288055 75.24114990]
[58.16928101 82.56079865]
[44.48495483 88.72688293]
[30.32121658 93.69376373]
[15.78292847 97.42466736]
[0.97773123 99.89196777]
[-13.98476219 101.07740021]
[-28.99377060 100.97218323]
[-43.93817520 99.57709503]
[-58.70732498 96.90246582]
[-73.19187927 92.96810913]
[-87.28459167 87.80313873]
[-100.88111877 81.44580078]
[-113.88081360 73.94316864]
[-126.18740845 65.35077667]
[-137.70979309 55.73225784]
[-148.36267090 45.15881348]
[-158.06715393 33.70872879]
[-166.75140381 21.46678352]
[-174.35112000 8.52360916]
[-180.81004333 -5.02496433]
[-186.08033752 -19.07862663]
[-190.12298584 -33.53332901]
[-192.90806580 -48.28204727]
[-194.41496277 -63.21559143]
[-194.63250732 -78.22339630]
[-193.55908203 -93.19434357]
[-191.20266724 -108.01758575]
[-187.58067322 -122.58338928]
[-182.71992493 -136.78390503]
[-176.65641785 -150.51399231]
[-169.43504333 -163.67201233]
[-161.10928345 -176.16052246]
[-151.74073792 -187.88706970]
[-141.39880371 -198.76484680]
[-130.16004944 -208.71328735]
[-118.10766602 -217.65876770]
[-105.33090210 -225.53504944]
[-91.92434692 -232.28379822]
[-77.98725891 -237.85507202]
[-63.62282944 -242.20761108]
[-48.93740463 -245.30918884]
[-34.03971863 -247.13684082]
[-19.04006386 -247.67704773]
[-4.04949760 -246.92579651]
[10.82099342 -244.88865662]
[25.46131134 -241.58070374]
[39.76306152 -237.02642822]
[53.62036133 -231.25956726]
[66.93061066 -224.32279968]
[79.59526062 -216.26748657]
[91.52055359 -207.15327454]
[102.61818695 -197.04763794]
[112.80600739 -186.02539062]
[122.00857544 -174.16815186]
[130.15776062 -161.56370544]
[137.19323730 -148.30535889]
[143.06291199 -134.49130249]
[147.72331238 -120.22378540]
[151.13995361 -105.60844421]
[153.28752136 -90.75350189]
[154.15013123 -75.76893616]
[153.72140503 -60.76567841]
[152.00448608 -45.85482407]
[149.01211548 -31.14675903]
[144.76643372 -16.75038528]
[139.29885864 -2.77228665]
[132.64991760 10.68404388]
[124.86878967 23.51898003]
[116.01310730 35.63749313]
[106.14843750 46.94986343]
[95.34780884 57.37233353]
[83.69119263 66.82774353]
[92.10460663 79.24605560]
[100.51801300 91.66436768]
[104.48202515 86.43470001]
[111.01675415 83.04309845]
[119.35800171 82.40972137]
[134.13011169 79.80500031]
[148.90223694 77.20027924]
[161.14918518 67.18415070]
[175.02665710 72.59383392]
[189.79878235 69.98911285]
[202.00660706 59.03918839]
[217.50721741 64.39300537]
[220.35490417 80.54301453]
[207.62020874 90.87547302]
[192.40350342 84.76123047]
[177.63139343 87.36595154]
[166.44104004 97.19577789]
[151.50695801 91.97239685]
[136.73483276 94.57711792]
[121.96272278 97.18183899]
[136.17524719 101.97811127]
[151.17150879 101.64359283]
[164.42858887 108.66143036]
[172.58317566 121.25121307]
[173.56648254 136.21894836]
[167.12904358 149.76736450]
[154.90403748 158.45925903]
[139.99288940 160.08950806]
[126.17853546 154.24455261]
[116.96563721 142.40721130]
[114.69138336 127.58158112]
[107.50000000 114.41783905]
[107.50000000 129.41784668]
[107.50000000 144.41784668]
[107.50000000 159.41784668]
[107.50000000 174.41784668]
[107.50000000 189.41784668]
[107.50000000 204.41784668]
[107.50000000 219.41784668]
[107.50000000 234.41784668]
[107.50000000 249.41784668]
[107.50000000 264.41784668]
[107.50000000 279.41784668]
[122.11001587 283.15927124]
[135.33016968 290.41726685]
[146.32945251 300.73553467]
[154.41641235 313.46548462]
[159.08271790 327.80691528]
[160.03503418 342.85827637]
[157.21350098 357.67346191]
[150.79547119 371.32116699]
[141.18440247 382.94348145]
[128.98443604 391.80981445]
[114.96250153 397.36282349]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 100]
[25 99]
[26 98]
[103 118]
[104 117]
[105 116]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
