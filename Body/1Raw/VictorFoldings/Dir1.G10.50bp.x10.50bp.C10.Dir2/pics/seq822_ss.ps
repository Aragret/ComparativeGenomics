%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCCCACAGGGGGGGGGGGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGxxxxxxxxxxCUACAACCCUUCGCUGACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAACCCCCCCCCCACCCGCCACA\
) } def
/len { sequence length } bind def

/coor [
[68.41548157 443.09393311]
[53.92579269 438.88543701]
[41.01956558 431.06933594]
[30.57676315 420.17849731]
[23.30939865 406.95547485]
[19.71297264 392.30187988]
[20.03269386 377.21679688]
[24.24676514 362.72872925]
[32.06786346 349.82550049]
[42.96273041 339.38690186]
[56.18853760 332.12466431]
[70.84352875 328.53387451]
[71.15558624 313.53713989]
[71.46764374 298.54037476]
[71.77970123 283.54364014]
[72.09175873 268.54687500]
[72.40380859 253.55012512]
[72.71586609 238.55335999]
[73.02792358 223.55661011]
[73.33998108 208.55986023]
[73.65203857 193.56311035]
[73.96409607 178.56634521]
[74.27615356 163.56959534]
[74.58820343 148.57284546]
[74.90026093 133.57609558]
[64.68678284 122.59042358]
[49.70706940 121.81057739]
[34.72735214 121.03073883]
[19.74763870 120.25089264]
[4.75494337 119.78284454]
[-10.24424553 119.62680817]
[-25.24343300 119.47077179]
[-40.24262238 119.31473541]
[-48.63172913 132.26179504]
[-62.69820404 138.59724426]
[-77.95349121 136.29943848]
[-89.52967072 126.10162354]
[-93.73284149 111.25787354]
[-89.22177887 96.50477600]
[-77.43594360 86.54999542]
[-62.13616180 84.57006073]
[-48.20452881 91.19676208]
[-40.08658600 104.31555176]
[-25.08739662 104.47158813]
[-10.08820820 104.62762451]
[4.91097975 104.78366089]
[8.92922592 102.09494019]
[14.69197083 101.94637299]
[20.52748489 105.27117920]
[35.50719833 106.05101776]
[50.48691177 106.83086395]
[65.46662903 107.61071014]
[63.14044571 85.10377502]
[75.59323120 63.21017838]
[100.73976898 51.46237564]
[99.49289703 36.51428986]
[98.24602509 21.56620407]
[87.00215149 14.08068371]
[82.21193695 1.65966070]
[85.42282867 -11.05900574]
[95.23865509 -19.46415138]
[94.30302429 -34.43494415]
[93.36739349 -49.40573502]
[92.27608490 -64.36598206]
[91.02921295 -79.31407166]
[89.78233337 -94.26215363]
[75.29293823 -98.85843658]
[63.66861725 -108.65351868]
[56.68200302 -122.15372467]
[55.39849854 -137.30038452]
[60.01383209 -151.78372192]
[69.82419586 -163.39514160]
[83.33358765 -170.36399841]
[98.48191071 -171.62756348]
[112.95916748 -166.99319458]
[124.55767822 -157.16755676]
[131.50875854 -143.64901733]
[132.75239563 -128.49903870]
[128.09898376 -114.02788544]
[118.25809479 -102.44231415]
[104.73042297 -95.50903320]
[105.97729492 -80.56094360]
[107.22417450 -65.61285400]
[110.93842316 -59.16692734]
[108.33818817 -50.34136200]
[109.27381897 -35.37057114]
[110.20944214 -20.39978027]
[123.27337646 -9.85503578]
[124.72863007 7.20856047]
[113.19410706 20.31932831]
[114.44098663 35.26741409]
[115.68785858 50.21550369]
[129.53108215 55.99177551]
[141.03288269 46.36324692]
[146.14822388 30.78232193]
[162.25263977 27.68717003]
[172.77928162 40.26182175]
[166.89924622 55.57055283]
[150.66140747 57.86505127]
[139.15960693 67.49357605]
[141.46238708 74.63130951]
[155.73783875 70.02574158]
[167.89143372 61.23425293]
[180.00828552 70.07630157]
[175.34329224 84.33245087]
[160.34341431 84.30120850]
[146.06794739 88.90676880]
[148.37072754 96.04450226]
[163.33097839 97.13581085]
[178.29122925 98.22711945]
[193.25148010 99.31842804]
[208.21173096 100.40974426]
[221.24235535 91.05120087]
[236.64390564 95.54251099]
[242.60162354 110.43832397]
[234.54525757 124.31184387]
[218.65496826 126.52049255]
[207.12042236 115.36998749]
[192.16017151 114.27867889]
[177.19992065 113.18737030]
[162.23966980 112.09606171]
[147.27941895 111.00474548]
[139.01501465 124.19262695]
[127.52243042 133.38977051]
[114.42855072 137.98661804]
[101.39161682 137.97282410]
[89.89701843 133.88815308]
[89.58496094 148.88490295]
[89.27290344 163.88165283]
[88.96084595 178.87840271]
[88.64878845 193.87516785]
[88.33673096 208.87191772]
[88.02468109 223.86866760]
[87.71262360 238.86541748]
[87.40056610 253.86218262]
[87.08850861 268.85891724]
[86.77645111 283.85568237]
[86.46439362 298.85244751]
[86.15234375 313.84918213]
[85.84028625 328.84594727]
[100.33322144 333.04324341]
[113.24548340 340.84936523]
[123.69669342 351.73214722]
[130.97425842 364.94952393]
[134.58200073 379.60034180]
[134.27392578 394.68569946]
[130.07104492 409.17700195]
[122.25991821 422.08624268]
[111.37311554 432.53326416]
[98.15292358 439.80572510]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[24 128]
[25 127]
[26 52]
[27 51]
[28 50]
[29 49]
[30 46]
[31 45]
[32 44]
[33 43]
[55 92]
[56 91]
[57 90]
[61 87]
[62 86]
[63 85]
[64 83]
[65 82]
[66 81]
[93 100]
[94 99]
[108 122]
[109 121]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
