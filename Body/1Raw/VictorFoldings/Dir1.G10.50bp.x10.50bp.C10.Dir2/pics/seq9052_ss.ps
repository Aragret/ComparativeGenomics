%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGCCCCCAGGGGGGGGGGACAGGCAUCACCCCGCUAAAUCCCCUAGAAGUCCCACUCCUAAACACAUCxxxxxxxxxxUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCUCAACCCCCCCCCCCCCCUGACCCCCA\
) } def
/len { sequence length } bind def

/coor [
[81.28369904 370.02111816]
[69.39942932 360.74603271]
[60.08071899 348.89590454]
[53.86935425 335.15975952]
[51.12644958 320.33612061]
[52.01147842 305.28686523]
[56.47298813 290.88693237]
[64.25158691 277.97348022]
[74.89503479 267.29733276]
[87.78454590 259.47912598]
[102.17073059 254.97346497]
[101.23510742 240.00267029]
[100.29947662 225.03189087]
[99.36384583 210.06109619]
[98.42822266 195.09030151]
[97.49259186 180.11950684]
[96.55696106 165.14871216]
[95.62133026 150.17793274]
[94.68570709 135.20713806]
[93.75007629 120.23634338]
[81.13907623 109.63518524]
[79.94046021 93.20395660]
[90.87949371 80.88488770]
[89.63261414 65.93679810]
[88.38574219 50.98871231]
[73.38329315 51.27556229]
[58.39329529 50.60060501]
[43.47734070 48.96662140]
[28.69672012 46.38032150]
[14.11217403 42.85233688]
[-0.21636647 38.39715958]
[-14.23002243 33.03310013]
[-27.87120819 26.78220367]
[-41.08386612 19.67015076]
[-53.81370926 11.72617149]
[-66.00842285 2.98290610]
[-77.61788940 -6.52371550]
[-88.59441376 -16.75462914]
[-98.89289093 -27.66779137]
[-108.47099304 -39.21836090]
[-117.28936005 -51.35887146]
[-125.31176758 -64.03942871]
[-132.50524902 -77.20793915]
[-138.84022522 -90.81027985]
[-144.29067993 -104.79055786]
[-148.83421326 -119.09132385]
[-152.45216370 -133.65382385]
[-155.12965393 -148.41819763]
[-156.85566711 -163.32377625]
[-157.62313843 -178.30932617]
[-157.42890930 -193.31326294]
[-156.27375793 -208.27391052]
[-154.16246033 -223.12982178]
[-151.10365295 -237.81993103]
[-147.10993958 -252.28388977]
[-142.19772339 -266.46224976]
[-136.38719177 -280.29675293]
[-129.70219421 -293.73052979]
[-122.17024231 -306.70840454]
[-113.82226562 -319.17703247]
[-104.69255829 -331.08520508]
[-94.81865692 -342.38394165]
[-84.24112701 -353.02685547]
[-73.00343323 -362.97018433]
[-61.15175247 -372.17309570]
[-48.73479080 -380.59774780]
[-35.80356979 -388.20953369]
[-22.41122627 -394.97714233]
[-8.61279583 -400.87283325]
[5.53502369 -405.87231445]
[19.97409439 -409.95507812]
[34.64508057 -413.10430908]
[49.48770142 -415.30712891]
[64.44095612 -416.55444336]
[79.44340515 -416.84112549]
[94.43339539 -416.16598511]
[109.34933472 -414.53182983]
[124.12992859 -411.94537354]
[138.71443176 -408.41723633]
[153.04292297 -403.96188354]
[167.05651855 -398.59768677]
[180.69763184 -392.34661865]
[193.91021729 -385.23443604]
[206.63996887 -377.29031372]
[218.83459473 -368.54690552]
[230.44395447 -359.04016113]
[241.42036438 -348.80914307]
[251.71871948 -337.89584351]
[261.29669189 -326.34518433]
[270.11492920 -314.20455933]
[278.13720703 -301.52392578]
[285.33053589 -288.35531616]
[291.66534424 -274.75292969]
[297.11566162 -260.77258301]
[301.65902710 -246.47175598]
[305.27682495 -231.90922546]
[307.95413208 -217.14482117]
[309.67999268 -202.23922729]
[310.44729614 -187.25366211]
[310.25289917 -172.24974060]
[309.09759521 -157.28909302]
[306.98611450 -142.43321228]
[303.92715454 -127.74312592]
[299.93328857 -113.27922058]
[295.02090454 -99.10091400]
[289.21020508 -85.26648712]
[282.52508545 -71.83277130]
[274.99298096 -58.85497665]
[266.64486694 -46.38643265]
[257.51501465 -34.47837448]
[247.64099121 -23.17973709]
[237.06335449 -12.53694725]
[225.82554626 -2.59373760]
[213.97375488 6.60903072]
[201.55670166 15.03354263]
[188.62539673 22.64517784]
[175.23298645 29.41266060]
[161.43447876 35.30818176]
[147.28660583 40.30751038]
[132.84748840 44.39011002]
[118.17647552 47.53919983]
[103.33383179 49.74184036]
[104.58070374 64.68992615]
[105.82757568 79.63801575]
[116.43614197 86.64244080]
[121.12337494 98.45910645]
[118.20063019 110.83089447]
[108.72087097 119.30072021]
[109.65649414 134.27151489]
[110.59212494 149.24229431]
[111.52775574 164.21308899]
[112.46337891 179.18388367]
[113.39900970 194.15467834]
[114.33464050 209.12547302]
[115.27026367 224.09625244]
[116.20589447 239.06704712]
[117.14152527 254.03784180]
[131.97676086 256.71725464]
[145.73939514 262.86978149]
[157.62928772 272.13766479]
[166.95516968 283.98211670]
[173.17486572 297.71450806]
[175.92675781 312.53649902]
[175.05085754 327.58627319]
[170.59806824 341.98892212]
[162.82730103 354.90707397]
[152.19032288 365.58969116]
[139.30555725 373.41567993]
[124.92211151 377.93005371]
[109.87620544 378.87039185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[23 124]
[24 123]
[25 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
