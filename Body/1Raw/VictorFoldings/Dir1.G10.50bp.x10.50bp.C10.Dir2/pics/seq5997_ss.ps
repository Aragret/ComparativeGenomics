%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGCAAUACUGGGGGGGGGGUAAUUUCUGUAACAGCUAAGGACUGCAAAACCCCACUCUGCAUCAACUGAxxxxxxxxxxUACUCUCAUAACCCUCAACACCCACUCCCUCUUAGCCAAUAUUGUGCCUACCCCCCCCCCUUGCCAUACU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 439.69354248]
[71.19830322 433.67752075]
[59.48964310 424.14810181]
[50.78712082 411.81243896]
[45.73651886 397.58590698]
[44.71262741 382.52423096]
[47.79142761 367.74508667]
[54.74444962 354.34515381]
[65.05573273 343.31881714]
[77.96011353 335.48431396]
[92.50000000 331.42300415]
[92.50000000 316.42300415]
[92.50000000 301.42300415]
[92.50000000 286.42300415]
[92.50000000 271.42300415]
[92.50000000 256.42300415]
[92.50000000 241.42298889]
[92.50000000 226.42298889]
[92.50000000 211.42298889]
[92.50000000 196.42298889]
[92.50000000 181.42298889]
[92.50000000 166.42298889]
[77.90982819 163.08952332]
[64.42700195 156.59352112]
[52.72736740 147.26057434]
[43.39741898 135.55856323]
[36.90484238 122.07408142]
[33.57509613 107.48306274]
[33.57509613 92.51693726]
[36.90484238 77.92591858]
[43.39741898 64.44142914]
[52.72736740 52.73941803]
[64.42700195 43.40648651]
[77.90982819 36.91047287]
[92.50000000 33.57700729]
[92.50000000 18.57700539]
[92.50000000 3.57700539]
[92.50000000 -11.42299461]
[92.50000000 -26.42299461]
[92.50000000 -41.42299271]
[77.54743958 -42.73076248]
[62.76575851 -45.33676910]
[48.26745605 -49.22117615]
[34.16287613 -54.35442734]
[20.55936813 -60.69744492]
[7.56046200 -68.20196533]
[-4.73491192 -76.81085968]
[-16.23317528 -86.45862579]
[-26.84681892 -97.07182312]
[-36.49506378 -108.56967926]
[-45.10448074 -120.86469269]
[-52.60954285 -133.86328125]
[-58.95313644 -147.46652222]
[-64.08698273 -161.57089233]
[-67.97200012 -176.06901550]
[-70.57862854 -190.85060120]
[-71.88702393 -205.80310059]
[-71.88722992 -220.81274414]
[-70.57925415 -235.76528931]
[-67.97304535 -250.54693604]
[-64.08843231 -265.04516602]
[-58.95498276 -279.14968872]
[-52.61177444 -292.75311279]
[-45.10707474 -305.75189209]
[-36.49800110 -318.04714966]
[-26.85007858 -329.54528809]
[-16.23673248 -340.15878296]
[-4.73874044 -349.80685425]
[7.55639172 -358.41610718]
[20.55508804 -365.92098999]
[34.15842056 -372.26440430]
[48.26285172 -377.39804077]
[62.76104736 -381.28286743]
[77.54265594 -383.88928223]
[92.49517822 -385.19744873]
[107.50482178 -385.19744873]
[122.45734406 -383.88928223]
[137.23895264 -381.28286743]
[151.73715210 -377.39804077]
[165.84158325 -372.26440430]
[179.44491577 -365.92098999]
[192.44360352 -358.41610718]
[204.73873901 -349.80685425]
[216.23674011 -340.15878296]
[226.85008240 -329.54528809]
[236.49800110 -318.04714966]
[245.10707092 -305.75189209]
[252.61177063 -292.75311279]
[258.95498657 -279.14968872]
[264.08843994 -265.04516602]
[267.97305298 -250.54693604]
[270.57925415 -235.76528931]
[271.88723755 -220.81274414]
[271.88702393 -205.80310059]
[270.57861328 -190.85060120]
[267.97198486 -176.06901550]
[264.08697510 -161.57089233]
[258.95312500 -147.46652222]
[252.60954285 -133.86328125]
[245.10447693 -120.86469269]
[236.49505615 -108.56967926]
[226.84681702 -97.07182312]
[216.23316956 -86.45862579]
[204.73490906 -76.81085968]
[192.43954468 -68.20196533]
[179.44062805 -60.69744492]
[165.83712769 -54.35442734]
[151.73254395 -49.22117615]
[137.23423767 -45.33676910]
[122.45256042 -42.73076248]
[107.50000000 -41.42299271]
[107.50000000 -26.42299461]
[107.50000000 -11.42299461]
[107.50000000 3.57700539]
[107.50000000 18.57700539]
[107.50000000 33.57700729]
[122.09017181 36.91047287]
[135.57299805 43.40648651]
[147.27262878 52.73941803]
[156.60258484 64.44142914]
[163.09515381 77.92591858]
[166.42491150 92.51693726]
[166.42491150 107.48306274]
[163.09515381 122.07408142]
[156.60258484 135.55856323]
[147.27262878 147.26057434]
[135.57299805 156.59352112]
[122.09017181 163.08952332]
[107.50000000 166.42298889]
[107.50000000 181.42298889]
[107.50000000 196.42298889]
[107.50000000 211.42298889]
[107.50000000 226.42298889]
[107.50000000 241.42298889]
[107.50000000 256.42300415]
[107.50000000 271.42300415]
[107.50000000 286.42300415]
[107.50000000 301.42300415]
[107.50000000 316.42300415]
[107.50000000 331.42300415]
[122.03988647 335.48431396]
[134.94427490 343.31881714]
[145.25555420 354.34515381]
[152.20857239 367.74508667]
[155.28736877 382.52423096]
[154.26348877 397.58590698]
[149.21287537 411.81243896]
[140.51036072 424.14810181]
[128.80169678 433.67752075]
[114.95575714 439.69354248]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[35 116]
[36 115]
[37 114]
[38 113]
[39 112]
[40 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
