%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAACACAAGGGGGGGGGGAGCACCCAACUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGxxxxxxxxxxACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACUUCCCCCCCCCCCUUACCACAA\
) } def
/len { sequence length } bind def

/coor [
[45.34605026 597.12811279]
[31.50011253 591.11212158]
[19.79145050 581.58270264]
[11.08892632 569.24700928]
[6.03832436 555.02050781]
[5.01443291 539.95880127]
[8.09323215 525.17968750]
[15.04625416 511.77972412]
[25.35753822 500.75341797]
[38.26191711 492.91888428]
[52.80180740 488.85757446]
[52.80180740 473.85757446]
[52.80180740 458.85757446]
[52.80180740 443.85757446]
[52.80180740 428.85757446]
[52.80180740 413.85757446]
[52.80180740 398.85757446]
[52.80180740 383.85757446]
[52.80180740 368.85757446]
[52.80180740 353.85757446]
[52.80180740 338.85757446]
[52.02196121 323.87786865]
[50.46437836 308.95895386]
[43.48197937 322.23474121]
[32.01931000 331.90982056]
[17.75948334 336.56356812]
[2.79634213 335.51263428]
[-10.67300510 328.91137695]
[-20.67078972 317.72906494]
[-25.72898865 303.60763550]
[-25.10488510 288.62063599]
[-18.89011574 274.96862793]
[-7.99722767 264.65628052]
[5.97432613 259.19772339]
[20.97303581 259.39453125]
[34.79656601 265.21774292]
[45.41514969 275.81234741]
[51.26946259 289.62203979]
[54.06178665 274.88421631]
[56.85411072 260.14642334]
[59.64643860 245.40861511]
[51.07294846 233.28298950]
[53.69481659 218.29698181]
[66.47142792 209.38653564]
[69.26374817 194.64872742]
[72.05607605 179.91091919]
[74.84839630 165.17311096]
[73.31894684 162.75070190]
[72.68900299 159.55740356]
[73.26445770 155.94482422]
[75.21382141 152.37115479]
[78.53449249 149.34880066]
[82.54223633 134.89411926]
[86.54997253 120.43943024]
[90.55771637 105.98474121]
[94.41487122 91.48914337]
[98.12103271 76.95420837]
[101.82719421 62.41927338]
[105.38195801 47.84656906]
[108.78493500 33.23767853]
[104.38015747 18.04200363]
[114.80309296 7.40190506]
[118.20606995 -7.20698738]
[119.76364899 -22.12590027]
[111.74092865 -35.76211929]
[119.21177673 -48.64760208]
[118.89971924 -63.64435577]
[118.58766937 -78.64111328]
[104.53320312 -84.50557709]
[94.08383179 -95.58395386]
[89.04995728 -109.95684814]
[90.30374146 -125.13406372]
[97.62795258 -138.48605347]
[109.75363159 -147.69952393]
[124.57991791 -151.17816162]
[139.53808594 -148.31929016]
[152.03652954 -139.61820984]
[159.90982056 -126.58244324]
[161.79386902 -111.47052002]
[157.36224365 -96.90066528]
[147.38276672 -85.39720154]
[133.58442688 -78.95316315]
[133.89646912 -63.95641327]
[134.20852661 -48.95965958]
[142.20893860 -36.39610672]
[134.76040649 -22.43795586]
[143.24208069 -34.80974197]
[156.19142151 -42.38037872]
[171.13302612 -43.70267105]
[185.21066284 -38.52384567]
[195.73324585 -27.83388519]
[200.68928528 -13.67628288]
[199.13137817 1.24259520]
[191.35734558 14.07085991]
[178.85325623 22.35626030]
[164.00939941 24.51496124]
[149.66333008 20.13430595]
[138.55743408 10.05169773]
[132.81495667 -3.80400920]
[129.41198730 10.80488300]
[134.06016541 24.95563126]
[123.39382935 36.64065552]
[119.99085236 51.24954605]
[121.54655457 58.52453613]
[116.36212921 66.12543488]
[112.65597534 80.66036987]
[108.94981384 95.19530487]
[110.17109680 103.21980286]
[105.01240540 109.99248505]
[101.00466156 124.44717407]
[96.99692535 138.90185547]
[92.98918152 153.35655212]
[89.58620453 167.96543884]
[86.79387665 182.70324707]
[84.00155640 197.44105530]
[81.20922852 212.17886353]
[89.84086609 225.14546204]
[86.79910278 240.05191040]
[74.38423920 248.20094299]
[71.59191895 262.93875122]
[68.79959106 277.67654419]
[66.00727081 292.41436768]
[65.38329315 307.40136719]
[66.94087219 322.32028198]
[78.51286316 312.77624512]
[93.23226166 315.66400146]
[100.34038544 328.87289429]
[94.64176178 342.74826050]
[80.30162811 347.14834595]
[67.80180359 338.85757446]
[67.80180359 353.85757446]
[67.80180359 368.85757446]
[67.80180359 383.85757446]
[67.80180359 398.85757446]
[67.80180359 413.85757446]
[67.80180359 428.85757446]
[67.80180359 443.85757446]
[67.80180359 458.85757446]
[67.80180359 473.85757446]
[67.80180359 488.85757446]
[82.34169006 492.91888428]
[95.24607086 500.75341797]
[105.55735779 511.77972412]
[112.51037598 525.17968750]
[115.58917999 539.95880127]
[114.56528473 555.02050781]
[109.51468658 569.24700928]
[100.81216431 581.58270264]
[89.10350037 591.11212158]
[75.25756073 597.12811279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 124]
[23 123]
[38 122]
[39 121]
[40 120]
[41 119]
[44 116]
[45 115]
[46 114]
[47 113]
[52 112]
[53 111]
[54 110]
[55 109]
[56 107]
[57 106]
[58 105]
[59 103]
[60 102]
[62 100]
[63 99]
[64 86]
[66 84]
[67 83]
[68 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
