%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCCCUAUUCGGGGGGGGGGUCAGGCUACACCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUCAUxxxxxxxxxxACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCCCCCCCCCCCUUCCCCUACUC\
) } def
/len { sequence length } bind def

/coor [
[62.71688461 380.86257935]
[50.38377380 372.21142578]
[40.28532410 361.03247070]
[32.92807388 347.88644409]
[28.68105125 333.43270874]
[27.75729370 318.39627075]
[30.20313263 303.53134155]
[35.89588547 289.58358765]
[44.55000687 277.25256348]
[55.73141098 267.15682983]
[68.87924194 259.80276489]
[83.33400726 255.55923462]
[82.41059113 240.58769226]
[81.48718262 225.61613464]
[80.56376648 210.64459229]
[79.64035034 195.67303467]
[78.71694183 180.70149231]
[77.79352570 165.72993469]
[76.87010956 150.75839233]
[75.94670105 135.78683472]
[75.02328491 120.81528473]
[68.33721161 107.38784027]
[56.94613647 97.62856293]
[45.55506134 87.86928558]
[34.16398621 78.11001587]
[22.77291489 68.35073853]
[11.38184071 58.59146500]
[0.43785650 68.87136841]
[-11.55344391 77.90773773]
[-24.45146751 85.59462738]
[-38.10499191 91.84190369]
[-52.35393906 96.57632446]
[-67.03124237 99.74238586]
[-81.96482849 101.30296326]
[-96.97959137 101.23976135]
[-111.89950562 99.55352020]
[-126.54963684 96.26401520]
[-140.75822449 91.40979767]
[-154.35867310 85.04780579]
[-167.19152832 77.25260925]
[-179.10632324 68.11560822]
[-189.96337891 57.74393463]
[-199.63539124 46.25918961]
[-208.00897217 33.79602432]
[-214.98593140 20.50056267]
[-220.48446655 6.52868748]
[-224.44012451 -7.95578814]
[-226.80651855 -22.78304100]
[-227.55589294 -37.77922821]
[-226.67948914 -52.76853180]
[-224.18756104 -67.57520294]
[-220.10932922 -82.02564240]
[-214.49261475 -95.95043182]
[-207.40325928 -109.18630981]
[-198.92440796 -121.57807922]
[-189.15542603 -132.98046875]
[-178.21089172 -143.25978088]
[-166.21910095 -152.29551697]
[-153.32066345 -159.98170471]
[-139.66680908 -166.22824097]
[-125.41761017 -170.96189880]
[-110.74013519 -174.12718201]
[-95.80646515 -175.68695068]
[-80.79170227 -175.62294006]
[-65.87187958 -173.93589783]
[-51.22192383 -170.64559937]
[-37.01360321 -165.79061890]
[-23.41349602 -159.42788696]
[-10.58106041 -151.63200378]
[1.33325064 -142.49436951]
[12.18974781 -132.12211609]
[21.86114311 -120.63684082]
[30.23404694 -108.17322540]
[37.21028900 -94.87738800]
[42.70807648 -80.90522003]
[46.66295242 -66.42053223]
[49.02854538 -51.59315109]
[49.77712250 -36.59692001]
[48.89990616 -21.60766792]
[46.40718079 -6.80112934]
[42.32817459 7.64909315]
[36.71070862 21.57357979]
[29.62064743 34.80907059]
[21.14111519 47.20038986]
[32.53218842 56.95966339]
[43.92326355 66.71894073]
[55.31433487 76.47821045]
[66.70541382 86.23748779]
[78.09648132 95.99676514]
[87.92765808 83.08013153]
[102.89554596 80.91439819]
[114.18915558 89.21477509]
[128.84187317 86.00577545]
[135.20085144 43.33278275]
[147.87236023 35.30578613]
[160.54388428 27.27878952]
[160.54183960 11.85142612]
[168.90000916 -1.11563325]
[182.95130920 -7.48464727]
[198.21203613 -5.22328663]
[209.81254578 4.94685698]
[214.05114746 19.78052711]
[209.57533264 34.54435349]
[197.81330872 44.52725601]
[182.51829529 46.54372025]
[168.57087708 39.95030594]
[155.89935303 47.97730255]
[143.22784424 56.00429916]
[144.75704956 63.34674835]
[159.00373840 68.04051971]
[147.81544495 78.03164673]
[149.34463501 85.37409210]
[164.16711426 87.67497253]
[178.98959351 89.97584534]
[193.81208801 92.27671814]
[206.41979980 82.74671936]
[222.06181335 85.00571442]
[231.45799255 97.71348572]
[229.03373718 113.33073425]
[216.22734070 122.59203339]
[200.63658142 120.00280762]
[191.51119995 107.09920502]
[176.68872070 104.79832458]
[161.86624146 102.49745178]
[147.04376221 100.19657898]
[132.05087280 100.65850067]
[117.39814758 103.86750031]
[108.59243774 118.10953522]
[89.99483490 119.89187622]
[90.91825104 134.86341858]
[91.84165955 149.83497620]
[92.76507568 164.80651855]
[93.68849182 179.77807617]
[94.61190033 194.74961853]
[95.53531647 209.72117615]
[96.45873260 224.69271851]
[97.38214111 239.66427612]
[98.30555725 254.63581848]
[113.17224121 257.07086182]
[127.12414551 262.75347900]
[139.46145630 271.39862061]
[149.56530762 282.57269287]
[156.92893982 295.71517944]
[161.18296814 310.16683960]
[162.11401367 325.20281982]
[159.67536926 340.06893921]
[153.98937988 354.01943970]
[145.34123230 366.35467529]
[134.16471863 376.45581055]
[121.02046204 383.81625366]
[106.56774902 388.06677246]
[91.53153992 388.99417114]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 89]
[23 88]
[24 87]
[25 86]
[26 85]
[27 84]
[92 127]
[93 126]
[94 108]
[95 107]
[96 106]
[112 125]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
