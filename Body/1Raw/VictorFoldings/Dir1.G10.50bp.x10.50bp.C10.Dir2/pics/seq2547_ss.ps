%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUUAAAACGGGGGGGGGGACUGAACUGACAAUUAACAGCCCAAUAUCUACAAUCAACCAACAAGUCAUxxxxxxxxxxAAUGGGCCUGUCCUUGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGGCCCCCCCCCCAGAUGAAAAC\
) } def
/len { sequence length } bind def

/coor [
[82.95246887 480.28430176]
[69.10652924 474.26828003]
[57.39786530 464.73886108]
[48.69534302 452.40319824]
[43.64474106 438.17666626]
[42.62084961 423.11499023]
[45.69964600 408.33584595]
[52.65266800 394.93591309]
[62.96395493 383.90957642]
[75.86833191 376.07507324]
[90.40821838 372.01376343]
[90.40821838 357.01376343]
[90.40821838 342.01376343]
[90.40821838 327.01376343]
[90.40821838 312.01376343]
[90.40821838 297.01376343]
[90.40821838 282.01376343]
[90.40821838 267.01376343]
[90.40821838 252.01376343]
[90.40821838 237.01376343]
[89.31690979 222.05351257]
[87.14007568 207.21231079]
[73.88348389 200.47428894]
[67.05570221 187.06364441]
[69.46195221 172.02824402]
[80.38639832 161.16717529]
[78.20955658 146.32597351]
[76.03272247 131.48477173]
[73.85588837 116.64356232]
[69.10207367 102.41678619]
[61.91955948 89.24819946]
[54.73705292 76.07962036]
[47.55454254 62.91103363]
[34.24445343 60.60903549]
[24.84240150 51.18410492]
[22.63841438 38.25287247]
[28.21928596 26.59737206]
[21.31228828 13.28221703]
[14.40528965 -0.03293843]
[7.49829102 -13.34809399]
[0.45315591 -26.59067917]
[-6.72935295 -39.75926208]
[-13.91186142 -52.92784500]
[-21.09436989 -66.09642792]
[-35.25331497 -61.04957199]
[-50.02746582 -58.27991867]
[-65.05299377 -57.85567474]
[-79.95988464 -59.78728867]
[-94.38104248 -64.02719116]
[-107.96132660 -70.47097015]
[-120.36631775 -78.95993805]
[-131.29052734 -89.28505707]
[-140.46495056 -101.19205475]
[-147.66363525 -114.38771820]
[-152.70932007 -128.54707336]
[-155.47775269 -143.32145691]
[-155.90075684 -158.34701538]
[-153.96792603 -173.25375366]
[-149.72682190 -187.67456055]
[-143.28192139 -201.25430298]
[-134.79193115 -213.65859985]
[-124.46591187 -224.58195496]
[-112.55815887 -233.75540161]
[-99.36190033 -240.95298767]
[-85.20212555 -245.99751282]
[-70.42752075 -248.76472473]
[-55.40192032 -249.18649292]
[-40.49534988 -247.25242615]
[-26.07489395 -243.01013184]
[-12.49567127 -236.56411743]
[-0.09208039 -228.07310486]
[10.83042812 -217.74617004]
[20.00287819 -205.83766174]
[27.19938850 -192.64082336]
[32.24274063 -178.48062134]
[35.00873566 -163.70579529]
[35.42926025 -148.68016052]
[33.49395752 -133.77374268]
[29.25048637 -119.35364532]
[22.80334663 -105.77494812]
[14.31130219 -93.37206268]
[3.98348045 -82.45040131]
[-7.92578840 -73.27893829]
[-0.74327934 -60.11035538]
[6.43922949 -46.94177246]
[13.62173843 -33.77318954]
[19.62450218 -29.37859344]
[20.81344604 -20.25509262]
[27.72044563 -6.93993711]
[34.62744522 6.37521887]
[41.53444290 19.69037437]
[57.74582672 24.05488586]
[65.97402191 39.07423401]
[60.72312546 55.72852707]
[67.90563202 68.89710999]
[75.08814240 82.06568909]
[82.27065277 95.23427582]
[95.25133514 83.85185242]
[110.27685547 88.65840912]
[124.50363159 83.90459442]
[138.73040771 79.15077972]
[152.95718384 74.39696503]
[159.78961182 60.14587784]
[174.72541809 54.97896576]
[188.90348816 61.96167374]
[193.91220093 76.95127869]
[186.77998352 91.05472565]
[171.73825073 95.90467834]
[157.71099854 88.62374878]
[143.48422241 93.37756348]
[129.25744629 98.13137817]
[115.03067017 102.88519287]
[110.51163483 112.48777008]
[100.31602478 117.33794403]
[88.69709015 114.46672821]
[90.87392426 129.30793762]
[93.05076599 144.14913940]
[95.22760010 158.99034119]
[108.81089020 166.25672913]
[115.43354034 179.96781921]
[112.74452209 194.77433777]
[101.98127747 205.03546143]
[104.15811920 219.87667847]
[113.42767334 208.08364868]
[128.07206726 204.83686829]
[141.45726013 211.60716248]
[147.51960754 225.32749939]
[143.51283264 239.78245544]
[131.25201416 248.42378235]
[116.29145050 247.33688354]
[105.40821838 237.01376343]
[105.40821838 252.01376343]
[105.40821838 267.01376343]
[105.40821838 282.01376343]
[105.40821838 297.01376343]
[105.40821838 312.01376343]
[105.40821838 327.01376343]
[105.40821838 342.01376343]
[105.40821838 357.01376343]
[105.40821838 372.01376343]
[119.94810486 376.07507324]
[132.85249329 383.90957642]
[143.16377258 394.93591309]
[150.11679077 408.33584595]
[153.19558716 423.11499023]
[152.17170715 438.17666626]
[147.12110901 452.40319824]
[138.41857910 464.73886108]
[126.70991516 474.26828003]
[112.86397552 480.28430176]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 123]
[22 122]
[26 118]
[27 117]
[28 116]
[29 115]
[30 97]
[31 96]
[32 95]
[33 94]
[37 91]
[38 90]
[39 89]
[40 88]
[41 86]
[42 85]
[43 84]
[44 83]
[99 112]
[100 111]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
