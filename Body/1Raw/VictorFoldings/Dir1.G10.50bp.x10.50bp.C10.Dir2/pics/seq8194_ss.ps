%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGCCCCCAGGGGGGGGGGCAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAxxxxxxxxxxAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUACCCCCCCCCCAUUCCCCCCA\
) } def
/len { sequence length } bind def

/coor [
[84.98612213 351.71713257]
[71.14018250 345.70111084]
[59.43151855 336.17169189]
[50.72899246 323.83602905]
[45.67839432 309.60949707]
[44.65450287 294.54782104]
[47.73329926 279.76864624]
[54.68632126 266.36871338]
[64.99760437 255.34239197]
[77.90198517 247.50788879]
[92.44187164 243.44657898]
[92.44187164 228.44657898]
[92.44187164 213.44657898]
[92.44187164 198.44657898]
[92.44187164 183.44657898]
[92.44187164 168.44657898]
[92.44187164 153.44657898]
[92.44187164 138.44657898]
[92.44187164 123.44657135]
[92.44187164 108.44657135]
[80.82103729 117.93109894]
[65.87914276 116.61214447]
[56.09949875 105.23854828]
[57.03454590 90.26772308]
[68.15340424 80.19940948]
[83.14330292 80.74993134]
[93.49422455 91.60816956]
[95.36183929 76.72489166]
[97.22944641 61.84160995]
[99.09706116 46.95832825]
[84.35889435 44.14016342]
[69.83156586 40.38350677]
[55.57477951 35.70379639]
[41.64711761 30.12026405]
[28.10580826 23.65585136]
[15.00649929 16.33712196]
[2.40301967 8.19415283]
[-9.65284157 -0.73959738]
[-21.11154175 -10.42741585]
[-31.92599678 -20.82949448]
[-42.05176544 -31.90308762]
[-51.44724274 -43.60269165]
[-60.07381439 -55.88022614]
[-67.89603424 -68.68524933]
[-74.88175964 -81.96513367]
[-81.00228119 -95.66530609]
[-86.23246002 -109.72948456]
[-90.55078888 -124.09986115]
[-93.93952179 -138.71739197]
[-96.38475037 -153.52200317]
[-97.87641144 -168.45286560]
[-98.40838623 -183.44860840]
[-97.97847748 -198.44764709]
[-96.58846283 -213.38830566]
[-94.24404907 -228.20921326]
[-90.95486450 -242.84947205]
[-86.73443604 -257.24890137]
[-81.60009766 -271.34832764]
[-75.57295227 -285.08984375]
[-68.67776489 -298.41696167]
[-60.94286728 -311.27493286]
[-52.40005112 -323.61090088]
[-43.08441544 -335.37417603]
[-33.03424072 -346.51641846]
[-22.29082680 -356.99185181]
[-10.89832115 -366.75741577]
[1.09646189 -375.77301025]
[13.64423275 -384.00155640]
[26.69342995 -391.40927124]
[40.19043350 -397.96569824]
[54.07977295 -403.64389038]
[68.30438232 -408.42050171]
[82.80580902 -412.27593994]
[97.52445221 -415.19433594]
[112.39984894 -417.16372681]
[127.37084961 -418.17596436]
[142.37594604 -418.22695923]
[157.35348511 -417.31643677]
[172.24191284 -415.44818115]
[186.98005676 -412.62985229]
[201.50733948 -408.87301636]
[215.76406860 -404.19317627]
[229.69168091 -398.60946655]
[243.23291016 -392.14489746]
[256.33215332 -384.82604980]
[268.93551636 -376.68292236]
[280.99130249 -367.74905396]
[292.44989014 -358.06109619]
[303.26422119 -347.65890503]
[313.38986206 -336.58520508]
[322.78521729 -324.88549805]
[331.41165161 -312.60784912]
[339.23373413 -299.80273438]
[346.21929932 -286.52279663]
[352.33969116 -272.82254028]
[357.56970215 -258.75830078]
[361.88787842 -244.38787842]
[365.27645874 -229.77032471]
[367.72149658 -214.96568298]
[369.21301270 -200.03480530]
[369.74481201 -185.03904724]
[369.31472778 -170.04002380]
[367.92456055 -155.09936523]
[365.57998657 -140.27848816]
[362.29061890 -125.63826752]
[358.07003784 -111.23888397]
[352.93554688 -97.13950348]
[346.90823364 -83.39805603]
[340.01290894 -70.07101440]
[332.27786255 -57.21314240]
[323.73492432 -44.87727356]
[314.41915894 -33.11410522]
[304.36886597 -21.97196960]
[293.62533569 -11.49665356]
[282.23272705 -1.73120296]
[270.23782349 7.28425312]
[257.68997192 15.51266861]
[244.64068604 22.92023087]
[231.14361572 29.47649956]
[217.25421143 35.15453339]
[203.02954102 39.93100357]
[188.52807617 43.78627777]
[173.80940247 46.70451355]
[158.93399048 48.67372131]
[143.96296692 49.68581009]
[128.95787048 49.73662186]
[113.98033905 48.82594299]
[112.11273193 63.70922089]
[110.24511719 78.59249878]
[108.37750244 93.47578430]
[107.44187164 108.44657135]
[107.44187164 123.44657135]
[107.44187164 138.44657898]
[107.44187164 153.44657898]
[107.44187164 168.44657898]
[107.44187164 183.44657898]
[107.44187164 198.44657898]
[107.44187164 213.44657898]
[107.44187164 228.44657898]
[107.44187164 243.44657898]
[121.98175812 247.50788879]
[134.88613892 255.34239197]
[145.19743347 266.36871338]
[152.15045166 279.76864624]
[155.22924805 294.54782104]
[154.20535278 309.60949707]
[149.15475464 323.83602905]
[140.45222473 336.17169189]
[128.74356079 345.70111084]
[114.89762878 351.71713257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 130]
[28 129]
[29 128]
[30 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
