%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUAUUCUGGGGGGGGGGGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUACCAGGCUUCGGAxxxxxxxxxxCCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCCACCCCCCCCCCCCUCCUAUUCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 421.15008545]
[71.19830322 415.13406372]
[59.48964310 405.60464478]
[50.78712082 393.26898193]
[45.73651886 379.04244995]
[44.71262741 363.98077393]
[47.79142761 349.20162964]
[54.74444962 335.80169678]
[65.05573273 324.77536011]
[77.96011353 316.94085693]
[92.50000000 312.87954712]
[92.50000000 297.87954712]
[92.50000000 282.87954712]
[92.50000000 267.87954712]
[92.50000000 252.87953186]
[92.50000000 237.87953186]
[92.50000000 222.87953186]
[92.50000000 207.87953186]
[92.50000000 192.87953186]
[92.50000000 177.87953186]
[92.50000000 162.87953186]
[74.06749725 157.77189636]
[58.00084686 147.39364624]
[45.76583481 132.69160461]
[38.47867203 115.00708008]
[36.80418396 95.95343018]
[40.89513016 77.26895905]
[50.37828827 60.65827179]
[64.38849640 47.63677979]
[57.48149872 34.32162476]
[50.70787811 28.09507370]
[50.57257462 20.65683746]
[43.94407654 7.20087290]
[28.78583908 4.45605040]
[18.27326393 -6.55935383]
[16.28623390 -21.47631454]
[23.37903214 -34.54651642]
[16.75053406 -48.00248337]
[10.12203503 -61.45845032]
[3.49353671 -74.91441345]
[-3.13496208 -88.37037659]
[-9.76346016 -101.82634735]
[-24.01874352 -97.08286285]
[-38.78717041 -94.32471466]
[-53.79361343 -93.60330200]
[-68.75850677 -94.93205261]
[-83.40307617 -98.28622437]
[-97.45449066 -103.60330963]
[-110.65098572 -110.78427887]
[-122.74671936 -119.69533539]
[-133.51635742 -130.17048645]
[-142.75926208 -142.01457214]
[-150.30323792 -155.00695801]
[-156.00776672 -168.90560913]
[-159.76655579 -183.45156860]
[-161.50959778 -198.37388611]
[-161.20440674 -213.39456177]
[-158.85667419 -228.23376465]
[-154.51013184 -242.61505127]
[-148.24575806 -256.27050781]
[-140.18025208 -268.94573975]
[-130.46388245 -280.40460205]
[-119.27764130 -290.43365479]
[-106.82993317 -298.84603882]
[-93.35263824 -305.48504639]
[-79.09683990 -310.22698975]
[-64.32811737 -312.98352051]
[-49.32159805 -313.70330811]
[-34.35684204 -312.37295532]
[-19.71263885 -309.01718140]
[-5.66179848 -303.69857788]
[7.53391981 -296.51617432]
[19.62868881 -287.60382080]
[30.39718819 -277.12750244]
[39.63880920 -265.28240967]
[47.18138885 -252.28921509]
[52.88440704 -238.38995361]
[56.64162445 -223.84358215]
[58.38304520 -208.92106628]
[58.07622528 -193.90043640]
[55.72688675 -179.06149292]
[51.37879181 -164.68066406]
[45.11294174 -151.02589417]
[37.04607010 -138.35153198]
[27.32845497 -126.89371490]
[16.14112854 -116.86588287]
[3.69250488 -108.45484161]
[10.32100391 -94.99887848]
[16.94950294 -81.54291534]
[23.57800102 -68.08694458]
[30.20649910 -54.63098145]
[36.83499908 -41.17501831]
[51.52008438 -38.83274460]
[62.13563538 -28.16625214]
[64.46205139 -13.11828804]
[57.40004349 0.57237434]
[64.02854156 14.02833939]
[70.79665375 27.41462517]
[77.70365143 40.72978210]
[90.51211548 37.38956833]
[103.73513794 36.78501129]
[116.79495239 38.94252396]
[129.12094116 43.76783371]
[140.17454529 51.05010986]
[149.47279358 60.47116852]
[156.60942078 71.61936951]
[161.27258301 84.00761414]
[163.25856018 97.09461212]
[178.21879578 98.18592834]
[193.17904663 99.27723694]
[208.13929749 100.36854553]
[218.90533447 89.02718353]
[234.44844055 87.31083679]
[247.42964172 96.02992249]
[251.71961975 111.06754303]
[245.29275513 125.32340240]
[231.18363953 132.06631470]
[216.05416870 128.11248779]
[207.04798889 115.32879639]
[192.08773804 114.23748779]
[177.12748718 113.14617157]
[162.16725159 112.05486298]
[159.50547791 121.66064453]
[155.36938477 130.72975159]
[149.86141968 139.03747559]
[143.11807251 146.37799072]
[135.30639648 152.56942749]
[126.61996460 157.45835876]
[117.27397919 160.92369080]
[107.50000000 162.87953186]
[107.50000000 177.87953186]
[107.50000000 192.87953186]
[107.50000000 207.87953186]
[107.50000000 222.87953186]
[107.50000000 237.87953186]
[107.50000000 252.87953186]
[107.50000000 267.87954712]
[107.50000000 282.87954712]
[107.50000000 297.87954712]
[107.50000000 312.87954712]
[122.03988647 316.94085693]
[134.94427490 324.77536011]
[145.25555420 335.80169678]
[152.20857239 349.20162964]
[155.28736877 363.98077393]
[154.26348877 379.04244995]
[149.21287537 393.26898193]
[140.51036072 405.60464478]
[128.80169678 415.13406372]
[114.95575714 421.15008545]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[29 99]
[30 98]
[32 97]
[33 96]
[37 92]
[38 91]
[39 90]
[40 89]
[41 88]
[42 87]
[108 122]
[109 121]
[110 120]
[111 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
