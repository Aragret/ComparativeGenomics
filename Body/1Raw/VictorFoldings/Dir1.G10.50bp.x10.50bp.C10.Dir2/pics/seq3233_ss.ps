%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAACAACAUGGGGGGGGGGACCCAUGGCCAACCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGxxxxxxxxxxGUCUUACUCUUUUAGUAUAAAUAGUACCGUUAACUUCCAAUUAACUAGUUCCCCCCCCCCUUGACAACAU\
) } def
/len { sequence length } bind def

/coor [
[61.58489609 430.76818848]
[47.73895645 424.75216675]
[36.03029633 415.22274780]
[27.32777023 402.88705444]
[22.27716827 388.66055298]
[21.25327682 373.59887695]
[24.33207512 358.81970215]
[31.28509712 345.41976929]
[41.59638214 334.39343262]
[54.50076294 326.55892944]
[69.04064941 322.49761963]
[69.04064941 307.49761963]
[69.04064941 292.49761963]
[69.04064941 277.49761963]
[69.04064941 262.49761963]
[69.04064941 247.49761963]
[69.04064941 232.49761963]
[69.04064941 217.49761963]
[69.04064941 202.49761963]
[69.04064941 187.49761963]
[69.04064941 172.49761963]
[61.08103943 185.21157837]
[49.48229599 194.72309875]
[35.45578003 200.03881836]
[20.46641350 200.60356140]
[6.07967997 196.35833740]
[-6.20188141 187.74653625]
[-15.09559155 175.66754150]
[-19.67259598 161.38290405]
[-19.45487595 146.38447571]
[-14.46516895 132.23870850]
[-5.22459793 120.42296600]
[7.30175781 112.17127228]
[21.80565262 108.34543610]
[36.77231216 109.34503174]
[50.63862228 115.06564331]
[61.95639420 124.90982819]
[69.54360962 137.84947205]
[72.60799408 152.53614807]
[77.80341339 138.46463013]
[82.99882507 124.39311218]
[72.03917694 114.50843811]
[66.73193359 99.83938599]
[69.05847931 83.56380463]
[79.24851227 69.60448456]
[68.80869293 58.83367538]
[58.36888504 48.06286621]
[47.92906952 37.29205704]
[37.48925781 26.52124977]
[27.04944611 15.75044155]
[12.76316452 21.02510262]
[-2.43297672 20.02651215]
[-15.90615368 12.92768192]
[-25.32205772 0.95852780]
[-29.04932594 -13.80722141]
[-26.44218636 -28.81131172]
[-17.95234299 -41.45419312]
[-5.05071115 -49.54541016]
[10.02742290 -51.68310928]
[24.66968155 -47.49692154]
[36.33920288 -37.71213150]
[43.01417542 -24.02401161]
[43.53812027 -8.80411148]
[37.82025528 5.31062937]
[48.26006699 16.08143806]
[58.69987869 26.85224724]
[69.13969421 37.62305450]
[79.57950592 48.39386368]
[90.01931763 59.16467285]
[86.02132416 44.70728683]
[82.02332306 30.24989891]
[72.04493713 19.05026627]
[67.55207062 4.73893738]
[69.33893585 -10.15425205]
[77.08967590 -22.99660683]
[89.43417358 -31.51796150]
[104.19026184 -34.21198273]
[118.74949646 -30.60244179]
[130.53820801 -21.32740402]
[137.47248840 -8.02643490]
[138.32653809 6.94923115]
[132.94941711 20.95232010]
[122.29235077 31.50701714]
[117.40035248 45.68687820]
[112.50836182 59.86673355]
[123.59967804 49.76808548]
[134.69099426 39.66943741]
[145.78230286 29.57078552]
[147.17755127 16.70582771]
[156.67784119 8.52272034]
[168.80479431 9.01721478]
[180.10379028 -0.84850782]
[191.40280151 -10.71423054]
[202.70179749 -20.57995415]
[210.65612793 -35.55209351]
[227.24513245 -32.05332565]
[228.47538757 -15.14407444]
[212.56752014 -9.28094959]
[201.26852417 0.58477390]
[189.96951294 10.45049667]
[178.67051697 20.31621933]
[173.93339539 37.18511581]
[155.88095093 40.66210175]
[144.78964233 50.76074982]
[133.69833374 60.85940170]
[122.60700989 70.95805359]
[127.64574432 79.45007324]
[129.92898560 88.42301941]
[129.58773804 97.06245422]
[144.40550232 99.39355469]
[159.22326660 101.72465515]
[174.04101562 104.05576324]
[188.85877991 106.38686371]
[200.53030396 95.97967529]
[216.16227722 95.56129456]
[228.37379456 105.32926178]
[231.39891052 120.67144775]
[223.80928040 134.34373474]
[209.18849182 139.89050293]
[194.44003296 134.69271851]
[186.52767944 121.20462799]
[171.70991516 118.87351990]
[156.89215088 116.54241943]
[142.07440186 114.21131134]
[127.25663757 111.88021088]
[115.04482269 125.64599609]
[97.07034302 129.58853149]
[91.87493134 143.66004944]
[86.67951202 157.73156738]
[84.04064941 172.49761963]
[84.04064941 187.49761963]
[84.04064941 202.49761963]
[84.04064941 217.49761963]
[84.04064941 232.49761963]
[84.04064941 247.49761963]
[84.04064941 262.49761963]
[84.04064941 277.49761963]
[84.04064941 292.49761963]
[84.04064941 307.49761963]
[84.04064941 322.49761963]
[98.58053589 326.55892944]
[111.48491669 334.39343262]
[121.79620361 345.41976929]
[128.74922180 358.81970215]
[131.82801819 373.59887695]
[130.80413818 388.66055298]
[125.75353241 402.88705444]
[117.05100250 415.22274780]
[105.34234619 424.75216675]
[91.49640656 430.76818848]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[39 129]
[40 128]
[41 127]
[45 69]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[85 106]
[86 105]
[87 104]
[88 103]
[91 101]
[92 100]
[93 99]
[94 98]
[109 125]
[110 124]
[111 123]
[112 122]
[113 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
