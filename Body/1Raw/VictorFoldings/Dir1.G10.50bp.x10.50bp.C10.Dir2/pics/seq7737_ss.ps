%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAUGGUAGGGGGGGGGGCUGAACCUACGAGUACACCGACUACGGCGGACUAAUCUUCAACUCCUACAxxxxxxxxxxUCAACAGAAACAAAGCAUACAUCAUUAUUCUCGCACGGACUACAACCACGCCCCCCCCCCACCAAUGAUA\
) } def
/len { sequence length } bind def

/coor [
[57.94560242 400.06365967]
[44.09966660 394.04763794]
[32.39100266 384.51821899]
[23.68847847 372.18255615]
[18.63787651 357.95602417]
[17.61398506 342.89434814]
[20.69278526 328.11520386]
[27.64580536 314.71527100]
[37.95709229 303.68893433]
[50.86147308 295.85443115]
[65.40135956 291.79312134]
[65.40135956 276.79312134]
[65.40135956 261.79312134]
[65.40135956 246.79312134]
[65.40135956 231.79312134]
[65.40135956 216.79312134]
[65.40135956 201.79312134]
[65.40135956 186.79312134]
[65.40135956 171.79312134]
[65.40135956 156.79312134]
[65.40135956 141.79312134]
[62.23577881 135.06074524]
[65.56063843 126.48187256]
[60.34073639 121.09646606]
[56.23293686 135.52304077]
[41.68527985 139.17895508]
[31.24526978 128.40834045]
[35.35280228 113.98168945]
[49.90092087 110.32566071]
[44.68101501 104.94025421]
[29.68182755 104.78421783]
[14.68182755 104.78421783]
[-0.31736046 104.94025421]
[-15.31654930 105.09629059]
[-26.19456482 116.56121063]
[-41.99537659 116.89268494]
[-53.34464264 105.89406586]
[-53.50904846 90.09062958]
[-42.39104843 78.85828400]
[-26.58675957 78.86096954]
[-15.47258568 90.09709930]
[-0.47339702 89.94106293]
[14.52579117 89.78502655]
[21.22486496 86.54959106]
[29.83786392 89.78502655]
[44.83705139 89.94106293]
[56.53667831 80.55390167]
[59.63499832 65.87738037]
[62.73331833 51.20085144]
[65.67880249 36.49289322]
[68.47113037 21.75508499]
[63.43804169 6.75579786]
[73.40933990 -4.30866957]
[76.20166779 -19.04647446]
[78.99398804 -33.78428268]
[81.78631592 -48.52208710]
[67.50628662 -53.18138504]
[53.93933487 -59.62856674]
[41.30824661 -67.75776672]
[29.82043076 -77.43550110]
[19.66453362 -88.50284576]
[11.00732136 -100.77806091]
[3.99095297 -114.05958557]
[-1.26935601 -128.12931824]
[-4.68722677 -142.75622559]
[-6.20653439 -157.70013428]
[-5.80233049 -172.71562195]
[-3.48125315 -187.55613708]
[0.71858424 -201.97798157]
[6.72821617 -215.74433899]
[14.44895935 -228.62915039]
[23.75403214 -240.42085266]
[34.49063492 -250.92578125]
[46.48246765 -259.97146606]
[59.53260803 -267.40933228]
[73.42676544 -273.11730957]
[87.93678284 -277.00158691]
[102.82439423 -278.99844360]
[117.84512329 -279.07507324]
[132.75233459 -277.23019409]
[147.30120850 -273.49411011]
[161.25286865 -267.92819214]
[174.37821960 -260.62380981]
[186.46170044 -251.70094299]
[197.30490112 -241.30607605]
[206.72978210 -229.60992432]
[214.58155823 -216.80453491]
[220.73130798 -203.10020447]
[225.07804871 -188.72193909]
[227.55039978 -173.90588379]
[228.10775757 -158.89529419]
[226.74096680 -143.93667603]
[223.47248840 -129.27566528]
[218.35597229 -115.15299225]
[211.47546387 -101.80058289]
[202.94392395 -89.43769073]
[192.90144348 -78.26732635]
[181.51295471 -68.47290802]
[168.96545410 -60.21527863]
[155.46498108 -53.63003540]
[141.23321533 -48.82530594]
[126.50387573 -45.87999725]
[111.51882172 -44.84247208]
[96.52412415 -45.72976303]
[93.73179626 -30.99195671]
[90.93947601 -16.25415039]
[88.14714813 -1.51634490]
[93.37995911 12.42879581]
[83.20893097 24.54741096]
[80.41661072 39.28521729]
[82.27359009 46.48919296]
[77.40984344 54.29917526]
[74.31152344 68.97570038]
[71.21320343 83.65222931]
[95.14756012 70.09664154]
[118.38121796 79.56691742]
[124.63622284 101.36228180]
[138.65293884 106.70379639]
[152.22241211 98.93184662]
[167.60371399 101.75134277]
[177.53425598 113.83100891]
[177.32514954 129.46719360]
[167.07510376 141.27697754]
[151.62390137 143.68412781]
[138.26712036 135.55206299]
[133.31143188 120.72050476]
[119.29470825 115.37899017]
[103.89006042 128.62623596]
[80.55739594 126.79393005]
[80.40135956 141.79312134]
[80.40135956 156.79312134]
[80.40135956 171.79312134]
[80.40135956 186.79312134]
[80.40135956 201.79312134]
[80.40135956 216.79312134]
[80.40135956 231.79312134]
[80.40135956 246.79312134]
[80.40135956 261.79312134]
[80.40135956 276.79312134]
[80.40135956 291.79312134]
[94.94124603 295.85443115]
[107.84562683 303.68893433]
[118.15691376 314.71527100]
[125.10993195 328.11520386]
[128.18873596 342.89434814]
[127.16484070 357.95602417]
[122.11423492 372.18255615]
[113.41171265 384.51821899]
[101.70304871 394.04763794]
[87.85711670 400.06365967]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 129]
[30 46]
[31 45]
[32 43]
[33 42]
[34 41]
[47 114]
[48 113]
[49 112]
[50 110]
[51 109]
[53 107]
[54 106]
[55 105]
[56 104]
[117 127]
[118 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
