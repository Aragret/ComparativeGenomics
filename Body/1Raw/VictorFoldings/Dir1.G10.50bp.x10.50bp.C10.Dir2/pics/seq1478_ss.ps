%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACAGCUUAAGGGGGGGGGGAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUxxxxxxxxxxCCACUGACAUGACUUUCCAAAAAACACAUAAUUUGAAUCAACACAACCACCCCCCCCCCCCCACAGCCUAA\
) } def
/len { sequence length } bind def

/coor [
[84.26834106 413.96694946]
[70.77946472 407.23541260]
[59.29396439 397.47085571]
[50.47959518 385.24096680]
[44.84881210 371.25677490]
[42.72898483 356.33129883]
[44.24335098 341.33227539]
[49.30387497 327.13177490]
[57.61634064 314.55535889]
[68.69747162 304.33419800]
[81.90302277 297.06256104]
[96.46524811 293.16320801]
[96.15727234 278.16635132]
[95.84929657 263.16952515]
[95.54132080 248.17268372]
[95.23333740 233.17584229]
[94.92536163 218.17900085]
[94.61738586 203.18215942]
[94.30941010 188.18533325]
[94.00142670 173.18849182]
[93.69345093 158.19165039]
[83.35736847 156.11651611]
[73.56117249 152.22096252]
[64.62265015 146.63136292]
[56.83176804 139.52903748]
[50.44126892 131.14439392]
[45.65845490 121.74942017]
[42.63847733 111.64889526]
[27.67719841 112.72595978]
[12.71591759 113.80303192]
[-0.49305853 122.51127625]
[-13.74305153 115.70782471]
[-28.70433235 116.78489685]
[-43.66561508 117.86196899]
[-56.93138123 127.50309753]
[-71.80167389 120.58888245]
[-72.97920990 104.23206329]
[-59.25263977 95.25914001]
[-44.74268341 102.90068817]
[-29.78140259 101.82361603]
[-14.82012177 100.74654388]
[-2.68127656 92.11534119]
[11.63884735 98.84175110]
[26.60012817 97.76467896]
[41.56140900 96.68761444]
[42.26628494 90.36365509]
[43.65346527 84.15358734]
[45.70655441 78.13078308]
[48.40128708 72.36643982]
[51.70581818 66.92867279]
[40.51752090 56.93757248]
[29.32922554 46.94647598]
[13.87984657 49.36529922]
[0.51692384 41.24333191]
[-4.44997835 26.41552353]
[1.32435894 11.88311005]
[15.11347008 4.50785303]
[30.40655899 7.77212238]
[39.98269653 20.13463020]
[39.32032394 35.75817871]
[50.50861740 45.74927521]
[61.69691467 55.74037170]
[78.44023132 45.58293533]
[97.59695435 41.51696014]
[117.02266693 43.99759293]
[134.54286194 52.74715805]
[144.87376404 41.87184525]
[155.20466614 30.99652863]
[140.74861145 34.99929428]
[125.74990845 35.19676971]
[111.19346619 31.57598305]
[98.03514099 24.37469864]
[87.13897705 14.06578732]
[79.22047424 1.32619083]
[74.79960632 -13.00754261]
[74.16667175 -27.99418259]
[77.36322021 -42.64962769]
[84.17935944 -56.01152039]
[94.16751099 -67.20245361]
[106.67179108 -75.48756409]
[120.87110138 -80.32280731]
[135.83303833 -81.39067841]
[150.57513428 -78.62105560]
[164.12931824 -72.19580078]
[175.60557556 -62.53684235]
[184.25030518 -50.27843094]
[189.49584961 -36.22552109]
[190.99775696 -21.30090141]
[188.65739441 -6.48460245]
[182.62846375 7.25045872]
[173.30928040 18.99998093]
[187.35125732 13.72523975]
[201.39323425 8.45049763]
[205.94630432 3.51976585]
[211.47982788 1.91726136]
[216.12149048 3.26046038]
[230.36817932 -1.43334019]
[244.61486816 -6.12714100]
[251.83992004 -11.81875992]
[259.20251465 -10.76780033]
[273.54257202 -15.16810036]
[287.88262939 -19.56840134]
[291.24401855 -34.55495071]
[301.66012573 -45.84211349]
[316.32910156 -50.39369583]
[331.30505371 -46.98535156]
[342.55950928 -36.53390503]
[347.06509399 -21.85073853]
[343.60980225 -6.88555717]
[333.12313843 4.33608437]
[318.42593384 8.79561996]
[303.47164917 5.29345751]
[292.28292847 -5.22833967]
[277.94287109 -0.82803917]
[263.60281372 3.57226110]
[249.30867004 8.11955166]
[235.06198120 12.81335163]
[220.81529236 17.50715256]
[206.66796875 22.49247360]
[192.62599182 27.76721573]
[178.58401489 33.04195786]
[166.07998657 41.32743073]
[155.74908447 52.20274734]
[145.41818237 63.07806015]
[154.31440735 78.18288422]
[158.33889771 95.24459076]
[157.13069153 112.73284149]
[150.79814148 129.07901001]
[139.90927124 142.81695557]
[125.44073486 152.71441650]
[108.69029236 157.88366699]
[108.99826813 172.88050842]
[109.30624390 187.87734985]
[109.61421967 202.87419128]
[109.92220306 217.87103271]
[110.23017883 232.86785889]
[110.53815460 247.86470032]
[110.84613037 262.86154175]
[111.15411377 277.85836792]
[111.46208954 292.85522461]
[126.17212677 296.15344238]
[139.66508484 302.87680054]
[151.15649414 312.63439941]
[159.97828674 324.85894775]
[165.61753845 338.83972168]
[167.74641418 353.76391602]
[166.24114990 368.76382446]
[161.18922424 382.96740723]
[152.88438416 395.54885864]
[141.80946350 405.77673340]
[128.60832214 413.05636597]
[114.04845428 416.96456909]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[28 45]
[29 44]
[30 43]
[32 41]
[33 40]
[34 39]
[50 62]
[51 61]
[52 60]
[66 124]
[67 123]
[68 122]
[91 121]
[92 120]
[93 119]
[96 118]
[97 117]
[98 116]
[100 115]
[101 114]
[102 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
