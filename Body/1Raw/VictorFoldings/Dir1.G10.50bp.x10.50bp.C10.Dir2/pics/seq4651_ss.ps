%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUACUAAUUGGGGGGGGGGAAUCCCCUGGCCCAACCCGUCAUCUACUCUACCAUCUUUGCAGGCACACUxxxxxxxxxxGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCCCCCCCCCCCGCACUAAUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 395.31317139]
[71.19830322 389.29714966]
[59.48964310 379.76773071]
[50.78712082 367.43206787]
[45.73651886 353.20553589]
[44.71262741 338.14385986]
[47.79142761 323.36468506]
[54.74444962 309.96478271]
[65.05573273 298.93844604]
[77.96011353 291.10394287]
[92.50000000 287.04263306]
[92.50000000 272.04263306]
[92.50000000 257.04263306]
[92.50000000 242.04261780]
[92.50000000 227.04261780]
[92.50000000 212.04261780]
[92.50000000 197.04261780]
[92.50000000 182.04261780]
[92.50000000 167.04261780]
[92.50000000 152.04261780]
[92.50000000 137.04261780]
[82.02279663 133.24493408]
[73.10863495 126.55673218]
[66.53256989 117.55952454]
[62.86637497 107.03559113]
[62.42880249 95.89993286]
[65.25789642 85.12076569]
[71.10768127 75.63528442]
[79.46953583 68.26822662]
[73.98250580 54.30783463]
[59.59843826 58.59413910]
[44.90268326 61.64514160]
[30.00112534 63.43885422]
[15.00113201 63.96235657]
[0.01078096 63.21187210]
[-14.86192036 61.19281006]
[-29.50981140 57.91971970]
[-43.82735062 53.41618347]
[-57.71138382 47.71464539]
[-71.06186676 40.85619354]
[-83.78261566 32.89023590]
[-95.78196716 23.87417793]
[-106.97347260 13.87297249]
[-117.27648926 2.95868516]
[-126.61679077 -8.79004669]
[-134.92706299 -21.28857231]
[-142.14744568 -34.44683838]
[-148.22590637 -48.17003632]
[-153.11865234 -62.35928726]
[-156.79042053 -76.91236115]
[-159.21478271 -91.72439575]
[-160.37423706 -106.68866730]
[-160.26045227 -121.69736481]
[-158.87423706 -136.64233398]
[-156.22558594 -151.41590881]
[-152.33357239 -165.91163635]
[-147.22624207 -180.02507019]
[-140.94041443 -193.65452576]
[-133.52136230 -206.70181274]
[-125.02252960 -219.07289124]
[-115.50517273 -230.67866516]
[-105.03785706 -241.43548584]
[-93.69599915 -251.26585388]
[-81.56132507 -260.09893799]
[-68.72126007 -267.87109375]
[-55.26832199 -274.52633667]
[-41.29943848 -280.01672363]
[-26.91526031 -284.30264282]
[-12.21942520 -287.35327148]
[2.68217874 -289.14660645]
[17.68218613 -289.66970825]
[32.67251587 -288.91885376]
[47.54516602 -286.89938354]
[62.19297028 -283.62591553]
[76.51039886 -279.12200928]
[90.39427948 -273.42013550]
[103.74459076 -266.56134033]
[116.46513367 -258.59503174]
[128.46424866 -249.57867432]
[139.65550232 -239.57717896]
[149.95823669 -228.66262817]
[159.29821777 -216.91365051]
[167.60818481 -204.41491699]
[174.82821655 -191.25646973]
[180.90632629 -177.53311157]
[185.79870605 -163.34373474]
[189.47010803 -148.79055786]
[191.89407349 -133.97846985]
[193.05314636 -119.01416016]
[192.93896484 -104.00547028]
[191.55236816 -89.06053162]
[188.90333557 -74.28702545]
[185.01095581 -59.79140091]
[179.90325928 -45.67809296]
[173.61708069 -32.04879761]
[166.19767761 -19.00171280]
[157.69853210 -6.63084507]
[148.18087769 4.97467232]
[137.71328735 15.73122025]
[126.37117767 25.56129456]
[114.23627472 34.39406967]
[101.39600372 42.16590500]
[87.94289398 48.82080078]
[93.42992401 62.78119278]
[114.45762634 65.08034515]
[130.95645142 78.31813049]
[137.75811768 98.34780121]
[152.57588196 100.67890167]
[167.39363098 103.01000977]
[182.21139526 105.34111023]
[197.02915955 107.67221832]
[211.84690857 110.00331879]
[222.02612305 98.41076660]
[236.86309814 94.18376160]
[251.62342834 98.67111206]
[261.59713745 110.44094086]
[263.60162354 125.73752594]
[256.99731445 139.67977905]
[243.89160156 147.81878662]
[228.46644592 147.55741882]
[215.64398193 138.97908020]
[209.51580811 124.82107544]
[194.69804382 122.48997498]
[179.88029480 120.15886688]
[165.06253052 117.82776642]
[150.24478149 115.49666595]
[135.42701721 113.16555786]
[129.04701233 124.18008423]
[119.37220001 132.45185852]
[107.50000000 137.04261780]
[107.50000000 152.04261780]
[107.50000000 167.04261780]
[107.50000000 182.04261780]
[107.50000000 197.04261780]
[107.50000000 212.04261780]
[107.50000000 227.04261780]
[107.50000000 242.04261780]
[107.50000000 257.04263306]
[107.50000000 272.04263306]
[107.50000000 287.04263306]
[122.03988647 291.10394287]
[134.94427490 298.93844604]
[145.25555420 309.96478271]
[152.20857239 323.36468506]
[155.28736877 338.14385986]
[154.26348877 353.20553589]
[149.21287537 367.43206787]
[140.51036072 379.76773071]
[128.80169678 389.29714966]
[114.95575714 395.31317139]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[29 104]
[30 103]
[107 127]
[108 126]
[109 125]
[110 124]
[111 123]
[112 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
