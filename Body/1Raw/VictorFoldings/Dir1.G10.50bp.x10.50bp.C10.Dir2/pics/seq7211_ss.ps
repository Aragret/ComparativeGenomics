%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAUGCCCCGACGGGGGGGGGGGUUACUCGGACUACCCCGAUGCAUACACCACAUGAAACAUCCUAUCAUCUxxxxxxxxxxGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUCCCCCCCCCCGAAAUGCCCCAAC\
) } def
/len { sequence length } bind def

/coor [
[130.64593506 404.83782959]
[115.70896912 403.46414185]
[101.73593140 398.00939941]
[89.81884003 388.89990234]
[80.88903046 376.84756470]
[75.64438629 362.79431152]
[74.49478149 347.83840942]
[67.83242798 361.27764893]
[61.17007065 374.71688843]
[62.74794769 391.03994751]
[49.24530792 400.34643555]
[34.55251312 393.06262207]
[33.78424454 376.68148804]
[47.73083496 368.05450439]
[54.39319229 354.61529541]
[61.05554962 341.17605591]
[64.91367340 326.68069458]
[65.81358337 311.70773315]
[66.71350098 296.73474121]
[67.61341858 281.76177979]
[68.51333618 266.78878784]
[69.41325378 251.81581116]
[70.31316376 236.84281921]
[71.21308136 221.86984253]
[59.07783890 230.68664551]
[44.23469543 228.52305603]
[35.12125397 216.60897827]
[36.91806412 201.71697998]
[48.60372162 192.31243896]
[63.53550720 193.74137878]
[73.22524261 205.19094849]
[75.91203308 190.43353271]
[78.59882355 175.67613220]
[81.28561401 160.91871643]
[83.97240448 146.16130066]
[72.28877258 140.24720764]
[62.59531403 131.44264221]
[55.58818817 120.37991333]
[51.77062988 107.85354614]
[51.41681671 94.76314545]
[54.55215836 82.04885101]
[41.61209106 74.46237183]
[28.67202377 66.87589264]
[15.73195648 59.28941345]
[2.57004237 52.09469223]
[-10.80186176 45.29821014]
[-24.17376709 38.50172806]
[-38.49029160 44.79228210]
[-53.48630524 40.35904312]
[-62.08114624 27.29524994]
[-60.21659470 11.76922512]
[-48.77303696 1.11188304]
[-33.15376663 0.35529473]
[-20.73372841 9.85669804]
[-17.37728500 25.12982178]
[-4.00537968 31.92630386]
[9.36652470 38.72278595]
[12.86061478 37.94842529]
[16.90667343 38.86354446]
[20.68994904 41.71006775]
[23.31843567 46.34934616]
[36.25850296 53.93582535]
[49.19857025 61.52230453]
[62.13863754 69.10877991]
[68.60749054 62.55323029]
[76.19151306 57.32792282]
[84.62129974 53.61847687]
[93.59738922 51.55666351]
[102.80092621 51.21572876]
[111.90496063 52.60778427]
[117.74903870 38.79305649]
[123.59311676 24.97832489]
[129.43719482 11.16359615]
[116.84460449 19.31384659]
[102.04296112 21.74518204]
[87.50485992 18.05145073]
[75.65886688 8.84968662]
[68.48384094 -4.32297325]
[67.17834473 -19.26605415]
[71.96047974 -33.48334122]
[82.03137970 -44.59985733]
[95.70872498 -50.75860977]
[110.70773315 -50.93078232]
[124.52285004 -45.08761978]
[134.84628296 -34.20521164]
[139.95350647 -20.10144424]
[138.99159241 -5.13311195]
[148.19232178 -16.97991562]
[157.39303589 -28.82672119]
[166.59375000 -40.67352295]
[175.79447937 -52.52032852]
[172.32238770 -67.76757812]
[179.50932312 -81.65577698]
[193.96180725 -87.62734222]
[208.85583496 -82.86268616]
[217.15890503 -69.61152649]
[214.95054626 -54.13066101]
[203.27348328 -43.72967911]
[187.64128113 -43.31961060]
[178.44056702 -31.47280502]
[169.23983765 -19.62600136]
[160.03912354 -7.77919722]
[150.83840942 4.06760693]
[143.25192261 17.00767326]
[137.40785217 30.82240295]
[131.56376648 44.63713455]
[125.71968842 58.45186234]
[140.86553955 73.20899963]
[148.35823059 92.98346710]
[163.35748291 93.13354492]
[178.35673523 93.28361511]
[193.35597229 93.43368530]
[208.35522461 93.58376312]
[216.73918152 80.63336945]
[230.80314636 74.29233551]
[246.05934143 76.58406830]
[257.63958740 86.77728271]
[261.84863281 101.61936188]
[257.34344482 116.37425232]
[245.56156921 126.33371735]
[230.26257324 128.31973267]
[216.32830811 121.69857025]
[208.20515442 108.58301544]
[193.20590210 108.43293762]
[178.20664978 108.28286743]
[163.20741272 108.13278961]
[148.20816040 107.98271942]
[142.35035706 124.37617493]
[131.11732483 137.67575073]
[115.93481445 146.19342041]
[98.72981262 148.84809875]
[96.04302216 163.60551453]
[93.35623169 178.36291504]
[90.66944122 193.12033081]
[87.98265076 207.87774658]
[86.18606567 222.76976013]
[85.28614807 237.74273682]
[84.38623047 252.71572876]
[83.48631287 267.68869019]
[82.58640289 282.66168213]
[81.68648529 297.63467407]
[80.78656769 312.60763550]
[79.88665009 327.58062744]
[88.31884766 315.17504883]
[99.85554504 305.58837891]
[113.59515381 299.56979370]
[128.46388245 297.58969116]
[143.29972839 299.80276489]
[156.94323730 306.03613281]
[168.32814026 315.80258179]
[176.56471252 328.33889771]
[181.00923157 342.66531372]
[181.31434631 357.66223145]
[177.45623779 372.15756226]
[169.73638916 385.01852417]
[158.75816345 395.23995972]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 16]
[8 15]
[9 14]
[17 143]
[18 142]
[19 141]
[20 140]
[21 139]
[22 138]
[23 137]
[24 136]
[31 135]
[32 134]
[33 133]
[34 132]
[35 131]
[41 64]
[42 63]
[43 62]
[44 61]
[45 57]
[46 56]
[47 55]
[70 107]
[71 106]
[72 105]
[73 104]
[87 103]
[88 102]
[89 101]
[90 100]
[91 99]
[109 127]
[110 126]
[111 125]
[112 124]
[113 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
