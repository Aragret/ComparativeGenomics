%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGAUUAGAGGGGGGGGGGCUGAACCGAAUUGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUxxxxxxxxxxACACCCGACCACACCGCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGCCCCCCCCCCAAGGCUUAGA\
) } def
/len { sequence length } bind def

/coor [
[90.64584351 544.60034180]
[76.79990387 538.58428955]
[65.09123993 529.05487061]
[56.38871765 516.71923828]
[51.33811569 502.49270630]
[50.31422424 487.43103027]
[53.39302063 472.65185547]
[60.34604263 459.25195312]
[70.65732574 448.22561646]
[83.56170654 440.39111328]
[98.10159302 436.32977295]
[98.10159302 421.32977295]
[98.10159302 406.32977295]
[98.10159302 391.32977295]
[98.10159302 376.32977295]
[98.10159302 361.32977295]
[98.10159302 346.32977295]
[98.10159302 331.32977295]
[98.10159302 316.32977295]
[98.10159302 301.32977295]
[98.10159302 286.32977295]
[98.10159302 271.32977295]
[95.81990814 268.56185913]
[94.80051422 264.52917480]
[95.63296509 259.85379028]
[98.59884644 255.40145874]
[99.53447723 240.43066406]
[91.75167084 231.11749268]
[92.44950104 218.59822083]
[101.79883575 209.65150452]
[103.04571533 194.70343018]
[104.29258728 179.75534058]
[103.82454681 164.76263428]
[101.64771271 149.92143250]
[99.47087097 135.08023071]
[97.29403687 120.23902130]
[95.11719513 105.39781952]
[88.59638977 109.73149872]
[80.97690582 112.39390564]
[72.59027863 113.18761444]
[63.79878616 111.97389221]
[49.89622879 106.34193420]
[35.99367523 100.70997620]
[22.09111786 95.07801819]
[6.81647921 99.98362732]
[-6.46213293 90.98040009]
[-7.55850315 74.97485352]
[4.36841011 64.24507141]
[20.16930008 67.02201843]
[27.72307587 81.17546082]
[41.62562943 86.80741882]
[55.52818680 92.43937683]
[69.43074036 98.07133484]
[76.12388611 94.68727875]
[76.95563507 79.71035767]
[89.51016998 87.91915894]
[96.20331573 84.53510284]
[99.90947723 70.00016785]
[103.61563873 55.46523285]
[107.32180023 40.93029785]
[111.02795410 26.39536095]
[112.74064636 11.49345779]
[112.42858887 -3.50329566]
[112.11653137 -18.50004959]
[97.49530792 -22.25799942]
[84.43072510 -29.82235336]
[73.89228821 -40.63178635]
[66.66200256 -53.88416290]
[63.27640533 -68.59607697]
[63.98673630 -83.67579651]
[68.74028015 -98.00431061]
[77.18429565 -110.51835632]
[88.69217682 -120.28929901]
[102.40995789 -126.59206390]
[117.31970215 -128.95895386]
[132.31500244 -127.21434021]
[146.28309631 -121.48766327]
[158.18746948 -112.20388794]
[167.14474487 -100.05194092]
[172.49021912 -85.93356323]
[173.82722473 -70.89644623]
[171.05654907 -56.05643082]
[164.38380432 -42.51475525]
[154.30413818 -31.27629662]
[141.56553650 -23.17502403]
[127.11328888 -18.81210518]
[127.42534637 -3.81535196]
[127.73740387 11.18140221]
[135.98757935 -1.34595215]
[148.55842590 -9.52970600]
[163.35284424 -12.00462723]
[177.90278625 -8.35784149]
[189.78100586 0.80228430]
[197.00595093 13.94763565]
[198.37231445 28.88527298]
[193.65219116 43.12326431]
[183.63298035 54.28639221]
[169.98611450 60.51239395]
[154.98820496 60.76263809]
[141.14123535 54.99537659]
[130.75518799 44.17271423]
[125.56289673 30.10152245]
[121.85673523 44.63645935]
[118.15057373 59.17139435]
[114.44441223 73.70632935]
[110.73825073 88.24126434]
[109.95840454 103.22097778]
[112.13523865 118.06218719]
[114.31208038 132.90339661]
[116.48891449 147.74459839]
[118.66574860 162.58580017]
[125.84659576 149.41630554]
[138.25332642 140.98582458]
[153.14167786 139.15907288]
[167.21849060 144.34013367]
[177.37010193 155.38299561]
[181.35105896 169.84507751]
[178.28083801 184.52751160]
[168.83851624 196.18266296]
[155.11265564 202.23252869]
[140.13929749 201.33892822]
[127.23040771 193.69953918]
[119.24067688 181.00221252]
[117.99379730 195.95030212]
[116.74692535 210.89837646]
[124.99232483 227.32986450]
[114.50526428 241.36630249]
[113.56964111 256.33709717]
[113.10159302 271.32977295]
[113.10159302 286.32977295]
[113.10159302 301.32977295]
[113.10159302 316.32977295]
[113.10159302 331.32977295]
[113.10159302 346.32977295]
[113.10159302 361.32977295]
[113.10159302 376.32977295]
[113.10159302 391.32977295]
[113.10159302 406.32977295]
[113.10159302 421.32977295]
[113.10159302 436.32977295]
[127.64148712 440.39111328]
[140.54586792 448.22561646]
[150.85714722 459.25195312]
[157.81016541 472.65185547]
[160.88896179 487.43103027]
[159.86508179 502.49270630]
[154.81448364 516.71923828]
[146.11195374 529.05487061]
[134.40328979 538.58428955]
[120.55735016 544.60034180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[26 128]
[27 127]
[30 125]
[31 124]
[32 123]
[33 111]
[34 110]
[35 109]
[36 108]
[37 107]
[41 53]
[42 52]
[43 51]
[44 50]
[57 106]
[58 105]
[59 104]
[60 103]
[61 102]
[62 88]
[63 87]
[64 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
