%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAUCCACCGGGGGGGGGGUUUAUUAUCAGUCUCUUCCCCACAACAAUAUUCAUGUGCCUAGACCAAGAxxxxxxxxxxCCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCCCCCCCCCCCGCUUCCACC\
) } def
/len { sequence length } bind def

/coor [
[82.16975403 584.34826660]
[68.32381439 578.33227539]
[56.61515045 568.80285645]
[47.91262436 556.46716309]
[42.86202240 542.24066162]
[41.83813095 527.17895508]
[44.91693115 512.39978027]
[51.86995316 498.99987793]
[62.18123627 487.97354126]
[75.08561707 480.13903809]
[89.62550354 476.07772827]
[89.62550354 461.07772827]
[89.62550354 446.07772827]
[89.62550354 431.07772827]
[89.62550354 416.07772827]
[89.62550354 401.07772827]
[89.62550354 386.07772827]
[89.62550354 371.07772827]
[89.62550354 356.07772827]
[89.62550354 341.07772827]
[75.27349091 338.36575317]
[61.66537476 333.04830933]
[49.26990128 325.30691528]
[38.51434326 315.40664673]
[29.76977348 303.68695068]
[23.33826828 290.55017090]
[19.44247437 276.44760132]
[18.21789551 261.86401367]
[19.70818520 247.30101013]
[23.86358643 233.25979614]
[30.54259682 220.22389221]
[39.51678848 208.64248657]
[50.47861099 198.91497803]
[63.05194092 191.37716675]
[76.80497742 186.28970337]
[91.26509094 183.82905579]
[91.57714081 168.83230591]
[91.88919830 153.83554077]
[92.20125580 138.83879089]
[82.91727448 123.97919464]
[92.50000000 108.28998566]
[92.34396362 93.29080200]
[92.03190613 78.29404449]
[91.71984863 63.29729080]
[91.40779114 48.30053711]
[91.09574127 33.30378342]
[83.07302094 19.66756248]
[90.54386902 6.78208065]
[90.23181152 -8.21467304]
[89.91975403 -23.21142578]
[77.59446716 -14.66232014]
[63.16605377 -18.76365662]
[57.18052292 -32.51768875]
[64.01280975 -45.87133408]
[78.66906738 -49.06415558]
[90.43646240 -39.76305389]
[91.68334198 -54.71113968]
[92.93021393 -69.65922546]
[94.17708588 -84.60731506]
[79.60354614 -88.30349731]
[65.83720398 -94.34813690]
[53.25361252 -102.57632446]
[42.19606400 -112.76359558]
[32.96621704 -124.63202667]
[25.81586647 -137.85784912]
[20.94008064 -152.08024597]
[18.47187424 -166.91122437]
[18.47858047 -181.94618225]
[20.96001816 -196.77494812]
[25.84849167 -210.99298096]
[33.01063919 -224.21241760]
[42.25107193 -236.07261658]
[53.31770706 -246.25001526]
[65.90863037 -254.46697998]
[79.68036652 -260.49932861]
[94.25719452 -264.18249512]
[109.24146271 -265.41604614]
[124.22438812 -264.16625977]
[138.79721069 -260.46725464]
[152.56239319 -254.41996765]
[165.14439392 -246.18936157]
[176.19998169 -235.99995422]
[185.42755127 -224.12974548]
[192.57534790 -210.90254211]
[197.44839478 -196.67921448]
[199.91374207 -181.84776306]
[199.90414429 -166.81280518]
[197.41984558 -151.98451233]
[192.52862549 -137.76742554]
[185.36393738 -124.54936218]
[176.12121582 -112.69094849]
[165.05262756 -102.51567841]
[152.46011353 -94.30114746]
[138.68722534 -88.27144623]
[124.10968018 -84.59107971]
[109.12517548 -83.36044312]
[107.87830353 -68.41235352]
[106.63142395 -53.46426773]
[105.38455200 -38.51617813]
[104.91651154 -23.52348328]
[105.22856903 -8.52672958]
[105.54061890 6.47002459]
[113.54102325 19.03357697]
[106.09249115 32.99172592]
[106.40454865 47.98847961]
[106.71660614 62.98523331]
[107.02866364 77.98198700]
[107.34071350 92.97874451]
[110.66161346 100.38520813]
[107.50000000 108.28998566]
[116.07328796 117.98290253]
[115.72803497 130.51684570]
[107.19801331 139.15084839]
[106.88595581 154.14759827]
[106.57389832 169.14436340]
[106.26184082 184.14111328]
[121.33103943 187.43168640]
[135.47056580 193.58306885]
[148.14320374 202.35958862]
[158.86784363 213.42584229]
[167.23776245 226.35958862]
[172.93603516 240.66777039]
[175.74754333 255.80537415]
[175.56710815 271.19616699]
[172.40338135 286.25460815]
[166.37847900 300.40823364]
[157.72328186 313.11920166]
[146.76856995 323.90496826]
[133.93237305 332.35647583]
[119.70401001 338.15368652]
[104.62550354 341.07772827]
[104.62550354 356.07772827]
[104.62550354 371.07772827]
[104.62550354 386.07772827]
[104.62550354 401.07772827]
[104.62550354 416.07772827]
[104.62550354 431.07772827]
[104.62550354 446.07772827]
[104.62550354 461.07772827]
[104.62550354 476.07772827]
[119.16539001 480.13903809]
[132.06977844 487.97354126]
[142.38105774 498.99987793]
[149.33407593 512.39978027]
[152.41287231 527.17895508]
[151.38899231 542.24066162]
[146.33837891 556.46716309]
[137.63586426 568.80285645]
[125.92720032 578.33227539]
[112.08126068 584.34826660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[36 116]
[37 115]
[38 114]
[39 113]
[41 110]
[42 108]
[43 107]
[44 106]
[45 105]
[46 104]
[48 102]
[49 101]
[50 100]
[56 99]
[57 98]
[58 97]
[59 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
