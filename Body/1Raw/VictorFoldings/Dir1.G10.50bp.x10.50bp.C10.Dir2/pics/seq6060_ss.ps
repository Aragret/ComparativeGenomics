%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCAGCCACUUGGGGGGGGGGUAAUUAAGCUAAGCCCUUACUAGACCAAUGGGACUUAAACCCACAAACACxxxxxxxxxxUCCAUCUGCCUACGACAAACAGACCUAAAAUCGCUCAUUGCAUACUCUUCCCCCCCCCCCAAUCAGCCACAU\
) } def
/len { sequence length } bind def

/coor [
[76.97840118 451.69931030]
[63.27624512 445.43841553]
[51.31113052 436.28506470]
[41.68321609 424.69839478]
[34.87543869 411.25955200]
[31.22927094 396.64270020]
[30.92760468 381.58093262]
[33.98556900 366.82977295]
[40.24977875 353.12911987]
[49.40602112 341.16622925]
[60.99502945 331.54113770]
[74.43550110 324.73660278]
[89.05326080 321.09399414]
[88.74925995 306.09707642]
[88.44525146 291.10012817]
[88.14125061 276.10321045]
[87.83724976 261.10629272]
[87.53324127 246.10939026]
[87.22924042 231.11247253]
[86.92523193 216.11555481]
[86.62123108 201.11862183]
[86.31722260 186.12170410]
[74.00664520 194.69198608]
[59.57268524 190.61019897]
[53.57351685 176.86210632]
[60.39741135 163.50416565]
[75.05281830 160.30746460]
[86.81938171 169.60986328]
[88.03414917 154.65913391]
[89.24891663 139.70840454]
[66.23535156 123.50089264]
[59.02944946 96.29090881]
[44.58747482 92.23759460]
[30.14550018 88.18428040]
[15.70352459 84.13096619]
[1.22121537 80.22421265]
[-13.29994106 76.46442413]
[-27.82109833 72.70463562]
[-37.27162170 84.64647675]
[-50.76529694 91.70626068]
[-65.96426392 92.66084290]
[-80.23521423 87.34484100]
[-91.10561371 76.67927551]
[-96.69210052 62.51202011]
[-96.02678680 47.29764557]
[-89.22493744 33.67212677]
[-77.46501160 23.99617195]
[-62.78449631 19.94619560]
[-47.72687149 22.22388268]
[-34.90096664 30.43460846]
[-26.52894592 43.15581894]
[-24.06130981 58.18347931]
[-9.54015350 61.94326782]
[4.98100328 65.70305634]
[12.28757572 64.32696533]
[19.75683975 69.68898773]
[34.19881439 73.74230957]
[48.64078903 77.79562378]
[63.08276367 81.84893799]
[66.27479553 76.44253540]
[70.25235748 71.58483887]
[74.92281342 67.38899231]
[80.17736053 63.95272064]
[85.89361572 61.35606766]
[91.93844604 59.65951538]
[98.17104340 58.90257645]
[104.44624329 59.10288239]
[110.61788177 60.25576782]
[116.54220581 62.33438110]
[122.08122253 65.29030609]
[132.30502319 54.31423950]
[123.38421631 42.20410156]
[116.84239197 28.66450310]
[112.90101624 14.15719891]
[111.69290924 -0.82335180]
[113.25775146 -15.76683998]
[117.54078674 -30.16448784]
[124.39476013 -43.52637863]
[133.58493042 -55.39810944]
[144.79714966 -65.37626648]
[157.64857483 -73.12211609]
[171.70080566 -78.37312317]
[186.47473145 -80.95182037]
[201.46694946 -80.77182770]
[216.16687012 -77.84074402]
[230.07417297 -72.25982666]
[242.71575928 -64.22051239]
[252.93955994 -75.19657135]
[263.16336060 -86.17263794]
[273.38714600 -97.14870453]
[268.25823975 -111.56927490]
[270.42990112 -126.71994019]
[279.40304565 -139.11917114]
[293.11575317 -145.91773987]
[308.41693115 -145.55335999]
[321.79046631 -138.10977173]
[330.16323853 -125.29747009]
[331.61123657 -110.06060791]
[325.80172729 -95.90052032]
[314.06970215 -86.07108307]
[299.11105347 -82.83103180]
[284.36322021 -86.92490387]
[274.13940430 -75.94883728]
[263.91561890 -64.97277832]
[253.69181824 -53.99671555]
[262.60696411 -41.95675278]
[269.15957642 -28.47999954]
[273.12521362 -14.02479362]
[274.36740112 0.91695428]
[272.84234619 15.83649540]
[268.60058594 30.22556686]
[261.78512573 43.59370804]
[252.62677002 55.48497391]
[241.43629456 65.49349213]
[228.59382629 73.27730560]
[214.53596497 78.57007599]
[199.74098206 81.19017029]
[184.71247864 81.04692078]
[169.96229553 78.14373016]
[155.99307251 72.57804108]
[143.28108215 64.53804016]
[133.05728149 75.51409912]
[138.82868958 86.41043854]
[141.11174011 98.52765656]
[139.70133972 110.77715302]
[134.72418213 122.05842590]
[126.62742615 131.35798645]
[116.13847351 137.84036255]
[104.19964600 140.92317200]
[102.98487854 155.87390137]
[101.77011108 170.82463074]
[101.31414032 185.81770325]
[101.61814880 200.81462097]
[101.92214966 215.81153870]
[102.22615814 230.80845642]
[102.53015900 245.80537415]
[102.83416748 260.80230713]
[103.13816833 275.79922485]
[103.44217682 290.79614258]
[103.74617767 305.79306030]
[104.05017853 320.78997803]
[118.80355835 323.83721924]
[132.50874329 330.09146118]
[144.47828674 339.23901367]
[154.11181641 350.82101440]
[160.92610168 364.25653076]
[164.57936096 378.87164307]
[164.88832092 393.93325806]
[161.83750916 408.68591309]
[155.57994080 422.38958740]
[146.42948914 434.35690308]
[134.84515381 443.98764038]
[121.40798187 450.79867554]
[106.79198456 454.44836426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[28 131]
[29 130]
[30 129]
[32 59]
[33 58]
[34 57]
[35 56]
[36 54]
[37 53]
[38 52]
[70 122]
[71 121]
[87 105]
[88 104]
[89 103]
[90 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
