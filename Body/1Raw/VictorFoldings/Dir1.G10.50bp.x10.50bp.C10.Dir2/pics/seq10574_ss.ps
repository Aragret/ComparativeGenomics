%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAAAAAUUGGGGGGGGGGUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUAUAACCACxxxxxxxxxxCCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCCCCCCCCCCCAAAAUU\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 367.38253784]
[71.01555634 361.82952881]
[58.81560135 352.96322632]
[49.20452881 341.34091187]
[42.78650284 327.69320679]
[39.96496582 312.87802124]
[40.91728210 297.82662964]
[45.58358765 283.48519897]
[53.67055511 270.75524902]
[64.66983032 260.43698120]
[77.88998413 253.17900085]
[92.50000000 249.43757629]
[92.50000000 234.43757629]
[92.50000000 219.43757629]
[92.50000000 204.43757629]
[92.50000000 189.43757629]
[92.50000000 174.43757629]
[92.50000000 159.43757629]
[92.50000000 144.43757629]
[92.50000000 129.43757629]
[92.50000000 114.43756866]
[84.75668335 105.68637085]
[84.87664795 94.00185394]
[92.79801178 85.41148376]
[93.10598755 70.41464233]
[93.41396332 55.41780853]
[78.45910645 54.19589233]
[63.60655975 52.06454086]
[48.91157150 49.03168106]
[34.42881775 45.10859680]
[20.21216583 40.30987930]
[6.31450844 34.65337753]
[-7.21245527 28.16014290]
[-20.31840324 20.85432434]
[-32.95458221 12.76310158]
[-45.07397842 3.91657519]
[-56.63151550 -5.65234518]
[-67.58419037 -15.90806198]
[-77.89126587 -26.81242371]
[-87.51438904 -38.32486343]
[-96.41777039 -50.40255737]
[-104.56828308 -63.00057220]
[-111.93560791 -76.07204437]
[-118.49234009 -89.56834412]
[-124.21408081 -103.43927002]
[-129.07955933 -117.63320923]
[-133.07066345 -132.09738159]
[-136.17254639 -146.77793884]
[-138.37365723 -161.62031555]
[-139.66583252 -176.56925964]
[-140.04426575 -191.56918335]
[-139.50752258 -206.56428528]
[-138.05761719 -221.49876404]
[-135.69995117 -236.31706238]
[-132.44326782 -250.96408081]
[-128.29971313 -265.38531494]
[-123.28468323 -279.52709961]
[-117.41683960 -293.33685303]
[-110.71800995 -306.76318359]
[-103.21311188 -319.75616455]
[-94.93006897 -332.26742554]
[-85.89969635 -344.25048828]
[-76.15557861 -355.66070557]
[-65.73397827 -366.45565796]
[-54.67365265 -376.59518433]
[-43.01575470 -386.04156494]
[-30.80364799 -394.75967407]
[-18.08276558 -402.71707153]
[-4.90042877 -409.88412476]
[8.69432259 -416.23422241]
[22.65091515 -421.74368286]
[36.91742706 -426.39208984]
[51.44078827 -430.16207886]
[66.16696930 -433.03964233]
[81.04119110 -435.01409912]
[96.00811005 -436.07806396]
[111.01206207 -436.22763062]
[125.99722290 -435.46221924]
[140.90783691 -433.78466797]
[155.68846130 -431.20120239]
[170.28408813 -427.72146606]
[184.64042664 -423.35839844]
[198.70407104 -418.12823486]
[212.42271423 -412.05041504]
[225.74530029 -405.14755249]
[238.62226868 -397.44531250]
[251.00573730 -388.97238159]
[262.84963989 -379.76025391]
[274.10986328 -369.84323120]
[284.74459839 -359.25814819]
[294.71423340 -348.04446411]
[303.98168945 -336.24380493]
[312.51248169 -323.90011597]
[320.27487183 -311.05932617]
[327.24002075 -297.76919556]
[333.38198853 -284.07916260]
[338.67791748 -270.04016113]
[343.10812378 -255.70439148]
[346.65612793 -241.12521362]
[349.30874634 -226.35684204]
[351.05606079 -211.45423889]
[351.89160156 -196.47282410]
[351.81225586 -181.46833801]
[350.81832886 -166.49659729]
[348.91351318 -151.61329651]
[346.10488892 -136.87380981]
[342.40292358 -122.33296967]
[337.82135010 -108.04485321]
[332.37725830 -94.06262970]
[326.09085083 -80.43830872]
[318.98556519 -67.22257233]
[311.08779907 -54.46458817]
[302.42694092 -42.21181488]
[293.03521729 -30.50983238]
[282.94757080 -19.40217590]
[272.20150757 -8.93016529]
[260.83700562 0.86724311]
[248.89637756 9.95360088]
[236.42399597 18.29510689]
[223.46629333 25.86072922]
[210.07145691 32.62232208]
[196.28930664 38.55473328]
[182.17114258 43.63589478]
[167.76947021 47.84690094]
[153.13786316 51.17209244]
[138.33074951 53.59909058]
[123.40322113 55.11887360]
[108.41080475 55.72578430]
[108.10282898 70.72262573]
[107.79484558 85.71945953]
[116.26854706 100.16703033]
[107.50000000 114.43756866]
[107.50000000 129.43757629]
[107.50000000 144.43757629]
[107.50000000 159.43757629]
[107.50000000 174.43757629]
[107.50000000 189.43757629]
[107.50000000 204.43757629]
[107.50000000 219.43757629]
[107.50000000 234.43757629]
[107.50000000 249.43757629]
[122.11001587 253.17900085]
[135.33016968 260.43698120]
[146.32945251 270.75524902]
[154.41641235 283.48519897]
[159.08271790 297.82662964]
[160.03503418 312.87802124]
[157.21350098 327.69320679]
[150.79547119 341.34091187]
[141.18440247 352.96322632]
[128.98443604 361.82952881]
[114.96250153 367.38253784]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 130]
[25 129]
[26 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
