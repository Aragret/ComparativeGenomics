%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUUCAUCACAAGGGGGGGGGGCAAUUAUCAAUAUAAAACCCCCUGCCAUAACCCAAUACCAAACGCCCCUCxxxxxxxxxxGACGUUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCAUUCGUAUAAUCCCCCCCCCCAAUUACAUCACAA\
) } def
/len { sequence length } bind def

/coor [
[65.44107819 484.45370483]
[51.16931152 479.64428711]
[38.26532745 471.87887573]
[27.33267403 461.52075195]
[18.88268852 449.05432129]
[13.31059170 435.06268311]
[10.87700272 420.20025635]
[11.69574356 405.16217041]
[15.72852039 390.65182495]
[22.78671455 377.34783936]
[32.54019928 365.87249756]
[44.53278732 356.76248169]
[58.20356369 350.44393921]
[72.91312408 347.21240234]
[72.91312408 332.21240234]
[72.91312408 317.21240234]
[72.91312408 302.21240234]
[72.91312408 287.21240234]
[72.91312408 272.21240234]
[72.91312408 257.21240234]
[72.91312408 242.21238708]
[72.91312408 227.21238708]
[72.91312408 212.21238708]
[70.18906403 208.22764587]
[69.97757721 202.47789001]
[73.22526550 196.61524963]
[73.82540894 181.62725830]
[74.42555237 166.63926697]
[75.02569580 151.65129089]
[75.62583923 136.66329956]
[67.32450104 149.15679932]
[56.71729660 159.76280212]
[44.22283936 168.06271362]
[30.33423233 173.72897339]
[15.59959507 176.53797913]
[0.60043961 176.37884521]
[-14.07128525 173.25787354]
[-27.83655357 167.29823303]
[-40.15210724 158.73510742]
[-50.53190994 147.90644836]
[-58.56631851 135.23963928]
[-63.93824768 121.23455048]
[-66.43569183 106.44391632]
[-65.96009064 91.45146179]
[-62.53020859 76.84886169]
[-56.28141403 63.21241760]
[-47.46031570 51.08030319]
[-36.41504288 40.93131638]
[-23.58150101 33.16599274]
[-9.46617794 28.09079361]
[5.37386036 25.90601540]
[20.35294342 26.69788170]
[34.87991333 30.43514061]
[48.38145828 36.97029877]
[60.32472992 46.04544449]
[70.23838043 57.30242157]
[77.73116302 70.29696655]
[82.50737762 84.51624298]
[84.37851715 99.39907837]
[83.27141571 114.35424805]
[91.99078369 102.14881134]
[85.94216919 98.58200836]
[82.13779449 91.07939911]
[82.50714874 81.03234100]
[81.30782318 66.08036041]
[80.10848999 51.12838745]
[78.90916443 36.17641068]
[64.18968964 32.68468857]
[51.27068710 24.81356430]
[41.41783524 13.33416843]
[35.59641647 -0.62886465]
[34.37675476 -15.70757866]
[37.87833786 -30.42471504]
[45.75811768 -43.33843994]
[57.24411392 -53.18359375]
[71.21104431 -58.99565506]
[86.29057312 -60.20521164]
[101.00535583 -56.69376755]
[113.91379547 -48.80533981]
[123.75125885 -37.31274796]
[129.55395508 -23.34192657]
[130.75340271 -8.26159191]
[127.23210907 6.45083857]
[119.33502960 19.35399055]
[107.83584595 29.18374443]
[93.86114502 34.97708130]
[95.06047058 49.92905807]
[96.25979614 64.88103485]
[97.45912170 79.83301544]
[110.24480438 87.67688751]
[124.11730957 81.97132111]
[137.35055542 74.90863800]
[149.81216431 66.55949402]
[162.27377319 58.21035004]
[174.73538208 49.86120605]
[187.19699097 41.51206207]
[199.65861511 33.16291809]
[211.95066833 24.56610107]
[224.06825256 15.72505665]
[236.18585205 6.88401270]
[245.41758728 -7.33608818]
[261.63757324 -2.40164232]
[261.38610840 14.55043983]
[245.02688599 19.00160027]
[232.90930176 27.84264565]
[220.79171753 36.68368912]
[219.17825317 41.23291016]
[214.65802002 44.79268646]
[208.00775146 45.62452698]
[195.54614258 53.97367477]
[183.08453369 62.32281876]
[170.62292480 70.67196655]
[158.16130066 79.02111053]
[145.69969177 87.37025452]
[160.65467834 88.53147888]
[173.09991455 96.90501404]
[179.80982971 110.32056427]
[179.04531860 125.30107117]
[171.00453186 137.96383667]
[157.77149963 145.02690125]
[142.77600098 144.65965271]
[129.90458679 136.95726013]
[122.49332428 123.91604614]
[122.46307373 108.91607666]
[129.82287598 95.84382629]
[115.95037079 101.54939270]
[104.19621277 110.86817932]
[95.47685242 123.07361603]
[90.61383057 137.26344299]
[90.01368713 152.25143433]
[89.41354370 167.23941040]
[88.81340027 182.22740173]
[88.21324921 197.21539307]
[87.91312408 212.21238708]
[87.91312408 227.21238708]
[87.91312408 242.21238708]
[87.91312408 257.21240234]
[87.91312408 272.21240234]
[87.91312408 287.21240234]
[87.91312408 302.21240234]
[87.91312408 317.21240234]
[87.91312408 332.21240234]
[87.91312408 347.21240234]
[102.62268066 350.44393921]
[116.29345703 356.76248169]
[128.28604126 365.87249756]
[138.03952026 377.34783936]
[145.09771729 390.65182495]
[149.13049316 405.16217041]
[149.94923401 420.20025635]
[147.51565552 435.06268311]
[141.94355774 449.05432129]
[133.49356079 461.52075195]
[122.56091309 471.87887573]
[109.65692902 479.64428711]
[95.38516235 484.45370483]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[26 133]
[27 132]
[28 131]
[29 130]
[30 129]
[60 128]
[61 127]
[64 89]
[65 88]
[66 87]
[67 86]
[90 126]
[91 125]
[92 114]
[93 113]
[94 112]
[95 111]
[96 110]
[97 109]
[98 106]
[99 105]
[100 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
