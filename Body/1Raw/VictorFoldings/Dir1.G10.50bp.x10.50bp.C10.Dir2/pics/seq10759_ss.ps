%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCUUCCUAGGGGGGGGGGAUUACCAUACUAAUCUUAGUUACCGCUAACAACCUAUUCCAACUGUUCAUxxxxxxxxxxUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCCCCCCCCCCCUCUUCCUA\
) } def
/len { sequence length } bind def

/coor [
[91.42891693 359.43225098]
[78.20872498 352.15979004]
[67.32192230 341.71279907]
[59.51078796 328.80355835]
[55.30790710 314.31222534]
[54.99983597 299.22689819]
[58.60757828 284.57608032]
[65.88514709 271.35867310]
[76.33635712 260.47592163]
[89.24861908 252.66976929]
[103.74155426 248.47247314]
[103.42949677 233.47572327]
[103.11744690 218.47897339]
[102.80538940 203.48220825]
[102.49333191 188.48545837]
[102.18127441 173.48870850]
[101.86921692 158.49195862]
[101.55715942 143.49519348]
[101.24510956 128.49844360]
[88.55017853 120.50852966]
[74.89393616 126.71393585]
[61.23769379 132.91934204]
[47.58145142 139.12475586]
[33.92521286 145.33015442]
[28.60954475 160.21368408]
[14.29099464 166.90357971]
[-0.53549492 161.43084717]
[-7.07363129 147.04237366]
[-1.44445419 132.27456665]
[13.01234531 125.88892365]
[27.71980476 131.67391968]
[41.37604523 125.46851349]
[55.03228760 119.26310730]
[68.68852997 113.05769348]
[82.34477234 106.85228729]
[80.63208008 91.95038605]
[65.92411804 89.00490570]
[51.21615601 86.05942535]
[36.50819397 83.11393738]
[21.80023384 80.16845703]
[6.44626379 85.92932892]
[-6.04619074 75.30527496]
[-2.82596397 59.22540283]
[12.79425144 54.23131561]
[24.74571609 65.46049500]
[39.45367813 68.40597534]
[54.16164017 71.35146332]
[68.86959839 74.29694366]
[83.57756042 77.24242401]
[75.69018555 64.32832336]
[68.49175262 50.98251343]
[58.98339081 39.38117218]
[49.47503281 27.77983093]
[34.49758530 30.93176270]
[19.77410507 26.75113678]
[8.68793392 16.19862747]
[3.78659749 1.69912863]
[6.19638538 -13.41548347]
[15.36354637 -25.67198181]
[29.18153381 -32.25391006]
[44.47507477 -31.64879417]
[57.72982788 -23.99568176]
[65.89994812 -11.05320263]
[67.10799408 4.20455599]
[61.07637405 18.27147293]
[70.58473206 29.87281418]
[80.09309387 41.47415543]
[87.58943939 41.24013519]
[84.80705261 26.50045013]
[82.02465820 11.76076508]
[79.24227142 -2.97891951]
[73.42864990 -16.80649376]
[78.95116425 -30.75288582]
[92.65530396 -36.85178375]
[106.71313477 -31.61944580]
[113.09468842 -18.04462624]
[108.15487671 -3.88151360]
[106.29729462 11.00302124]
[104.43972015 25.88755798]
[102.58213806 40.77209091]
[110.07848358 40.53807068]
[118.84468842 28.36623383]
[127.61090088 16.19439697]
[136.37710571 4.02256107]
[129.04330444 -9.36318207]
[128.25221252 -24.60578346]
[134.16088867 -38.67881775]
[145.59617615 -48.78806686]
[160.28758240 -52.92633820]
[175.31813049 -50.27197266]
[187.70347595 -41.35199356]
[194.98449707 -27.93747520]
[195.71556091 -12.69187546]
[189.75151062 1.35777867]
[178.27650452 11.42191887]
[163.56890869 15.50230312]
[148.54895020 12.78876781]
[139.78273010 24.96060562]
[131.01652527 37.13244247]
[122.25032043 49.30427933]
[131.01652527 61.47611618]
[145.33912659 57.01929855]
[159.66172791 52.56248474]
[173.98431396 48.10566711]
[187.31166077 37.62624359]
[201.07092285 47.53174973]
[195.36146545 63.49541092]
[178.44113159 62.42826462]
[164.11854553 66.88507843]
[149.79594421 71.34189606]
[135.47334290 75.79871368]
[135.16136169 83.29222107]
[147.82852173 91.32608032]
[134.53738403 98.27923584]
[134.22538757 105.77274323]
[148.12794495 111.40470123]
[162.08833313 116.89173126]
[176.10504150 122.23324585]
[190.12176514 127.57476044]
[205.29104614 122.35244751]
[218.75407410 131.07746887]
[220.18318176 147.05674744]
[208.48207092 158.03233337]
[192.62683105 155.58470154]
[184.78024292 141.59147644]
[170.76353455 136.24995422]
[156.74682617 130.90844727]
[149.32850647 131.46911621]
[142.49598694 125.30725861]
[128.59342957 119.67530060]
[116.24185944 128.18638611]
[116.55391693 143.18315125]
[116.86597443 158.17990112]
[117.17803192 173.17665100]
[117.49008179 188.17340088]
[117.80213928 203.17016602]
[118.11419678 218.16691589]
[118.42625427 233.16366577]
[118.73831177 248.16041565]
[133.39329529 251.75119019]
[146.61911011 259.01345825]
[157.51397705 269.45202637]
[165.33508301 282.35525513]
[169.54914856 296.84332275]
[169.86886597 311.92840576]
[166.27244568 326.58203125]
[159.00508118 339.80502319]
[148.56227112 350.69586182]
[135.65605164 358.51196289]
[121.16635895 362.72045898]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[51 67]
[52 66]
[53 65]
[81 100]
[82 99]
[83 98]
[84 97]
[101 111]
[102 110]
[103 109]
[104 108]
[115 130]
[116 129]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
