%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCUUUAAGGGGGGGGGGUUUAUUAAUGCAAACAGUACCUAACAAACCCACAGGUCCUAAACUACCAAxxxxxxxxxxACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUACCCCCCCCCCGGAGCUUAAA\
) } def
/len { sequence length } bind def

/coor [
[86.70319366 445.57434082]
[72.85725403 439.55831909]
[61.14859009 430.02890015]
[52.44606400 417.69323730]
[47.39546204 403.46670532]
[46.37157059 388.40502930]
[49.45037079 373.62585449]
[56.40339279 360.22595215]
[66.71467590 349.19961548]
[79.61905670 341.36511230]
[94.15894318 337.30380249]
[94.15894318 322.30380249]
[94.15894318 307.30380249]
[94.15894318 292.30380249]
[94.15894318 277.30380249]
[94.15894318 262.30380249]
[94.15894318 247.30378723]
[94.15894318 232.30378723]
[94.15894318 217.30378723]
[94.15894318 202.30378723]
[94.15894318 187.30378723]
[94.00290680 172.30459595]
[93.69084930 157.30784607]
[93.37879944 142.31109619]
[93.06674194 127.31433868]
[92.75468445 112.31758118]
[86.85636139 107.68511200]
[75.05972290 98.42015839]
[69.16140747 93.78768921]
[54.51790237 97.03851318]
[42.80263138 108.51390076]
[27.08190346 103.84584808]
[23.52785110 87.83645630]
[35.79658127 76.95480347]
[51.26707840 82.39501190]
[65.91057587 79.14418793]
[81.42223358 84.69699860]
[94.47721863 93.97290039]
[97.57553864 79.29637146]
[100.67385864 64.61985016]
[103.61933899 49.91188431]
[106.41166687 35.17407990]
[109.20398712 20.43627357]
[104.17090607 5.43698645]
[114.14220428 -5.62748098]
[116.93453217 -20.36528778]
[119.72685242 -35.10309219]
[114.09490204 -49.00564957]
[101.83252716 -57.64476395]
[89.57015991 -66.28388214]
[73.19779205 -67.22067261]
[66.06556702 -81.98764038]
[75.51051331 -95.39379883]
[91.81647491 -93.64804077]
[98.20928192 -78.54624939]
[110.47164917 -69.90713501]
[122.73401642 -61.26801682]
[129.96136475 -63.27188873]
[125.95385742 -77.72663879]
[140.40867615 -81.73390198]
[144.41604614 -67.27962494]
[151.64338684 -69.28350067]
[157.70640564 -83.00354767]
[163.76942444 -96.72360229]
[169.83242798 -110.44365692]
[157.14405823 -118.49740601]
[145.79782104 -128.35238647]
[136.04719543 -139.78842163]
[128.11003113 -152.55004883]
[122.16361237 -166.35214233]
[118.34081268 -180.88636780]
[116.72702789 -195.82803345]
[117.35830688 -210.84333801]
[120.22055054 -225.59681702]
[125.24980927 -239.75888062]
[132.33374023 -253.01315308]
[141.31407166 -265.06350708]
[151.99018860 -275.64077759]
[164.12358093 -284.50860596]
[177.44317627 -291.46890259]
[191.65141296 -296.36621094]
[206.43089294 -299.09106445]
[221.45141602 -299.58264160]
[236.37741089 -297.82989502]
[250.87545776 -293.87207031]
[264.62164307 -287.79751587]
[277.30886841 -279.74194336]
[288.65368652 -269.88534546]
[298.40267944 -258.44790649]
[306.33804321 -245.68518066]
[312.28247070 -231.88223267]
[316.10321045 -217.34745789]
[317.71487427 -202.40556335]
[317.08145142 -187.39035034]
[314.21710205 -172.63728333]
[309.18582153 -158.47592163]
[302.10000610 -145.22267151]
[293.11798096 -133.17358398]
[282.44033813 -122.59785461]
[270.30569458 -113.73174286]
[256.98510742 -106.77333069]
[242.77616882 -101.87805939]
[227.99630737 -99.15530396]
[212.97570801 -98.66587830]
[198.04995728 -100.42073059]
[183.55249023 -104.38064575]
[177.48947144 -90.66059113]
[171.42645264 -76.94053650]
[165.36344910 -63.22048569]
[162.76991272 -48.97999954]
[155.12637329 -38.34672165]
[144.82734680 -32.73982239]
[134.46466064 -32.31076813]
[131.67233276 -17.57296181]
[128.88000488 -2.83515644]
[134.11282349 11.10998440]
[123.94179535 23.22859764]
[121.14947510 37.96640396]
[118.35714722 52.70421219]
[120.21412659 59.90818787]
[115.35038757 67.71817017]
[112.25205994 82.39469147]
[109.15373993 97.07122040]
[107.75143433 112.00553131]
[108.06349182 127.00228119]
[108.37554932 141.99903870]
[108.68760681 156.99578857]
[108.99966431 171.99253845]
[112.32452393 180.57142639]
[109.15894318 187.30378723]
[109.15894318 202.30378723]
[109.15894318 217.30378723]
[109.15894318 232.30378723]
[109.15894318 247.30378723]
[109.15894318 262.30380249]
[109.15894318 277.30380249]
[109.15894318 292.30380249]
[109.15894318 307.30380249]
[109.15894318 322.30380249]
[109.15894318 337.30380249]
[123.69882965 341.36511230]
[136.60321045 349.19961548]
[146.91450500 360.22595215]
[153.86752319 373.62585449]
[156.94631958 388.40502930]
[155.92242432 403.46670532]
[150.87182617 417.69323730]
[142.16929626 430.02890015]
[130.46063232 439.55831909]
[116.61470032 445.57434082]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 128]
[23 127]
[24 126]
[25 125]
[26 124]
[29 36]
[30 35]
[38 123]
[39 122]
[40 121]
[41 119]
[42 118]
[43 117]
[45 115]
[46 114]
[47 113]
[48 57]
[49 56]
[50 55]
[62 109]
[63 108]
[64 107]
[65 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
