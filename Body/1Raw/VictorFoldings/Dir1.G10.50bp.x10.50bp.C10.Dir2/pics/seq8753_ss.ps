%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUCCAAGCCUGGGGGGGGGGACGUUUUCACACUUCUAGUAAGCCUCUACCUGCACGACAACACAUAAUGAxxxxxxxxxxAUCCUACACUCCAACUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCCCCCCCCCCCUAAUCCAAGCCU\
) } def
/len { sequence length } bind def

/coor [
[83.31626892 372.59216309]
[69.61411285 366.33126831]
[57.64899826 357.17791748]
[48.02108383 345.59124756]
[41.21330643 332.15243530]
[37.56713867 317.53555298]
[37.26546860 302.47378540]
[40.32343292 287.72262573]
[46.58764267 274.02200317]
[55.74388885 262.05908203]
[67.33289337 252.43399048]
[80.77336884 245.62947083]
[95.39112854 241.98684692]
[95.08712769 226.98992920]
[94.78311920 211.99299622]
[94.47911835 196.99607849]
[94.17510986 181.99916077]
[93.87110901 167.00224304]
[93.56710052 152.00532532]
[93.26309967 137.00840759]
[92.95909882 122.01148987]
[92.65509033 107.01457214]
[89.33980560 99.61120605]
[92.50000000 91.71133423]
[92.50000000 76.71133423]
[92.50000000 61.71133423]
[92.50000000 46.71133423]
[92.50000000 31.71133614]
[77.52462006 30.76931763]
[62.63793564 28.88884544]
[47.89870453 26.07733536]
[33.36509705 22.34588814]
[19.09446907 17.70922852]
[5.14313841 12.18565369]
[-8.43383217 5.79696512]
[-21.58286095 -1.43162453]
[-34.25205612 -9.47158718]
[-46.39141464 -18.29119301]
[-57.95302963 -27.85563469]
[-68.89127350 -38.12716293]
[-79.16297150 -49.06524658]
[-88.72759247 -60.62671280]
[-97.54739380 -72.76593018]
[-105.58755493 -85.43499756]
[-112.81634521 -98.58391571]
[-119.20524597 -112.16078949]
[-124.72904205 -126.11203003]
[-129.36592102 -140.38258362]
[-133.09759521 -154.91613770]
[-135.90933228 -169.65531921]
[-137.79003906 -184.54197693]
[-138.73229980 -199.51734924]
[-138.73237610 -214.52232361]
[-137.79028320 -229.49769592]
[-135.90972900 -244.38436890]
[-133.09814453 -259.12359619]
[-129.36662292 -273.65716553]
[-124.72988129 -287.92779541]
[-119.20623779 -301.87908936]
[-112.81748199 -315.45602417]
[-105.58882141 -328.60501099]
[-97.54878998 -341.27416992]
[-88.72911835 -353.41348267]
[-79.16461945 -364.97503662]
[-68.89303589 -375.91323853]
[-57.95489883 -386.18487549]
[-46.39338303 -395.74945068]
[-34.25411606 -404.56918335]
[-21.58500671 -412.60925293]
[-8.43605232 -419.83798218]
[5.14085150 -426.22680664]
[19.09212303 -431.75054932]
[33.36270523 -436.38735962]
[47.89627457 -440.11895752]
[62.63547516 -442.93060303]
[77.52213287 -444.81124878]
[92.49751282 -445.75341797]
[107.50248718 -445.75341797]
[122.47786713 -444.81124878]
[137.36453247 -442.93060303]
[152.10372925 -440.11895752]
[166.63729858 -436.38735962]
[180.90788269 -431.75054932]
[194.85914612 -426.22680664]
[208.43605042 -419.83798218]
[221.58500671 -412.60925293]
[234.25411987 -404.56918335]
[246.39338684 -395.74945068]
[257.95489502 -386.18487549]
[268.89303589 -375.91323853]
[279.16461182 -364.97503662]
[288.72912598 -353.41348267]
[297.54879761 -341.27416992]
[305.58880615 -328.60501099]
[312.81747437 -315.45602417]
[319.20623779 -301.87908936]
[324.72988892 -287.92779541]
[329.36660767 -273.65716553]
[333.09814453 -259.12359619]
[335.90972900 -244.38436890]
[337.79028320 -229.49769592]
[338.73236084 -214.52232361]
[338.73229980 -199.51734924]
[337.79003906 -184.54197693]
[335.90933228 -169.65531921]
[333.09759521 -154.91613770]
[329.36593628 -140.38258362]
[324.72903442 -126.11203003]
[319.20526123 -112.16078949]
[312.81634521 -98.58391571]
[305.58755493 -85.43499756]
[297.54739380 -72.76593018]
[288.72760010 -60.62671280]
[279.16296387 -49.06524658]
[268.89126587 -38.12716293]
[257.95303345 -27.85563469]
[246.39141846 -18.29119301]
[234.25205994 -9.47158718]
[221.58285522 -1.43162453]
[208.43383789 5.79696512]
[194.85685730 12.18565369]
[180.90553284 17.70922852]
[166.63490295 22.34588814]
[152.10128784 26.07733536]
[137.36206055 28.88884544]
[122.47537994 30.76931763]
[107.50000000 31.71133614]
[107.50000000 46.71133423]
[107.50000000 61.71133423]
[107.50000000 76.71133423]
[107.50000000 91.71133423]
[107.65200806 106.71056366]
[107.95601654 121.70748138]
[108.26001740 136.70440674]
[108.56402588 151.70132446]
[108.86802673 166.69824219]
[109.17202759 181.69515991]
[109.47603607 196.69207764]
[109.78003693 211.68899536]
[110.08404541 226.68591309]
[110.38804626 241.68283081]
[125.14142609 244.73007202]
[138.84660339 250.98432922]
[150.81616211 260.13186646]
[160.44969177 271.71386719]
[167.26397705 285.14941406]
[170.91722107 299.76452637]
[171.22619629 314.82614136]
[168.17538452 329.57876587]
[161.91780090 343.28244019]
[152.76736450 355.24975586]
[141.18301392 364.88049316]
[127.74584961 371.69152832]
[113.12985229 375.34121704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[24 131]
[25 130]
[26 129]
[27 128]
[28 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
