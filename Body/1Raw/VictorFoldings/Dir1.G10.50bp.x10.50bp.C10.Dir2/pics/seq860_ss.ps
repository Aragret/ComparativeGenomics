%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCAAAGCAAUACGGGGGGGGGGACUGAAAAUGUUUAGACGGGCUCACAUCACCCCAUAAACAAAUAGGUUUGxxxxxxxxxxCGGCAUCAACCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUCCCCCCCCCCUCUUCAAAGCCAUAC\
) } def
/len { sequence length } bind def

/coor [
[104.59901428 498.81225586]
[90.16213226 494.57278442]
[76.78860474 487.67749023]
[64.96185303 478.37564087]
[55.10942078 467.00347900]
[47.58746338 453.97210693]
[42.66789246 439.75259399]
[40.52855301 424.85897827]
[41.24677658 409.82965088]
[44.79660416 395.20791626]
[51.04970551 381.52233887]
[59.78003693 369.26763916]
[70.67200470 358.88681030]
[83.33187103 350.75512695]
[97.30198669 345.16653442]
[112.07734680 342.32305908]
[112.07734680 327.32305908]
[112.07734680 312.32305908]
[112.07734680 297.32305908]
[112.07734680 282.32305908]
[112.07734680 267.32305908]
[112.07734680 252.32305908]
[112.07734680 237.32305908]
[112.07734680 222.32305908]
[112.07734680 207.32305908]
[110.61618805 192.39439392]
[107.70777893 177.67904663]
[97.64957428 166.69352722]
[102.56427002 151.65502930]
[99.65585327 136.93969727]
[84.30461884 133.44120789]
[71.80455017 123.86789703]
[64.42639160 109.95880890]
[63.51042175 94.24063873]
[49.47721100 88.94261932]
[35.44399643 83.64460754]
[21.41078568 78.34658813]
[7.37757397 73.04857635]
[-6.65563774 67.75055695]
[-18.23861313 74.68341064]
[-31.50488663 73.67760468]
[-41.60966492 65.32589722]
[-44.99287033 52.86237335]
[-58.92003632 47.29155350]
[-72.84719849 41.72073364]
[-85.35136414 50.75674438]
[-100.75700378 51.57524109]
[-114.14822388 43.91504288]
[-121.25195312 30.22049522]
[-119.80139923 14.86147594]
[-110.25944519 2.73899388]
[-95.67088318 -2.27871227]
[-80.69087219 1.40948963]
[-70.09947968 12.62670803]
[-67.27638245 27.79356766]
[-53.34921646 33.36438751]
[-39.42205048 38.93520737]
[-24.28832054 31.65215492]
[-8.24538136 37.66328812]
[-1.35762227 53.71735001]
[12.67558956 59.01536560]
[26.70880127 64.31337738]
[40.74201202 69.61139679]
[54.77522659 74.90940857]
[68.80843353 80.20742798]
[78.53178406 67.73932648]
[93.17884827 60.01710129]
[110.45042419 58.93877792]
[114.49737549 44.49502182]
[118.54433441 30.05126190]
[122.59128571 15.60750198]
[126.63823700 1.16374254]
[130.11856079 -13.42691517]
[133.02697754 -28.14225197]
[135.93537903 -42.85758972]
[122.53558350 -49.83053970]
[111.64403534 -60.29718781]
[104.14366150 -73.40905762]
[100.64248657 -88.10321808]
[101.42433167 -103.18849182]
[106.42582703 -117.44197083]
[115.24151611 -129.70820618]
[127.15674591 -138.99279785]
[141.20561218 -144.54312134]
[156.24923706 -145.90922546]
[171.06808472 -142.98034668]
[184.46087646 -135.99394226]
[195.34190369 -125.51635742]
[202.82910156 -112.39696503]
[206.31552124 -97.69928741]
[205.51850891 -82.61481476]
[200.50270081 -68.36636353]
[191.67469788 -56.10899734]
[179.75013733 -46.83636475]
[165.69570923 -41.30016327]
[150.65072632 -39.94918060]
[147.74230957 -25.23384094]
[144.83390808 -10.51850414]
[146.33003235 -8.09122658]
[146.92974854 -4.91047668]
[146.33558655 -1.32403159]
[144.38484192 2.21730018]
[141.08200073 5.21069431]
[137.03503418 19.65445328]
[132.98808289 34.09821320]
[128.94113159 48.54197311]
[124.89418793 62.98573303]
[135.75631714 73.33049774]
[149.98554993 68.58403778]
[164.21478271 63.83757401]
[174.68165588 51.21313095]
[190.80056763 54.23185730]
[195.98976135 69.78834534]
[184.91104126 81.87941742]
[168.96124268 78.06681061]
[154.73200989 82.81327057]
[140.50277710 87.55973053]
[140.91453552 102.84013367]
[135.93566895 116.76923370]
[126.57507324 127.57794189]
[114.37119293 134.03128052]
[117.27960205 148.74662781]
[127.54583740 160.78468323]
[122.42311859 174.77064514]
[125.33152771 189.48597717]
[132.11282349 176.10636902]
[144.60437012 167.80206299]
[159.56581116 166.72724915]
[173.11608887 173.16073608]
[181.74023438 185.43363953]
[183.20109558 200.36233521]
[177.11972046 214.07424927]
[165.07363892 223.01248169]
[150.18765259 224.85841370]
[136.32324219 219.13319397]
[127.07734680 207.32305908]
[127.07734680 222.32305908]
[127.07734680 237.32305908]
[127.07734680 252.32305908]
[127.07734680 267.32305908]
[127.07734680 282.32305908]
[127.07734680 297.32305908]
[127.07734680 312.32305908]
[127.07734680 327.32305908]
[127.07734680 342.32305908]
[141.85270691 345.16653442]
[155.82281494 350.75512695]
[168.48268127 358.88681030]
[179.37464905 369.26763916]
[188.10498047 381.52233887]
[194.35809326 395.20791626]
[197.90791321 409.82965088]
[198.62614441 424.85897827]
[196.48680115 439.75259399]
[191.56723022 453.97210693]
[184.04527283 467.00347900]
[174.19284058 478.37564087]
[162.36608887 487.67749023]
[148.99255371 494.57278442]
[134.55567932 498.81225586]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 145]
[17 144]
[18 143]
[19 142]
[20 141]
[21 140]
[22 139]
[23 138]
[24 137]
[25 136]
[26 125]
[27 124]
[29 122]
[30 121]
[34 65]
[35 64]
[36 63]
[37 62]
[38 61]
[39 60]
[43 57]
[44 56]
[45 55]
[68 107]
[69 106]
[70 105]
[71 104]
[72 103]
[73 98]
[74 97]
[75 96]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
