%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACUAUGCGGGGGGGGGGUUAGCCCUAAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACxxxxxxxxxxGCAAUAAUCCCCAUCCUCCAUAUAUCCAAACAACAAAGCAUAAUAUUUCGCCCCCCCCCCCCCACUAAGC\
) } def
/len { sequence length } bind def

/coor [
[86.18749237 353.56936646]
[72.34155273 347.55334473]
[60.63289261 338.02392578]
[51.93037033 325.68823242]
[46.87976837 311.46173096]
[45.85587692 296.40005493]
[48.93467331 281.62088013]
[55.88769531 268.22094727]
[66.19898224 257.19461060]
[79.10336304 249.36010742]
[93.64324951 245.29879761]
[93.64324951 230.29879761]
[93.64324951 215.29879761]
[93.64324951 200.29879761]
[93.64324951 185.29879761]
[93.64324951 170.29879761]
[93.64324951 155.29879761]
[93.64324951 140.29879761]
[93.64324951 125.29879761]
[93.64324951 110.29879761]
[91.44469452 109.02342987]
[89.50873566 107.27400208]
[87.93820953 105.10620880]
[73.07516479 103.08386993]
[58.21211624 101.06153870]
[69.30513763 111.15831757]
[75.43586731 124.84824371]
[75.58156586 139.84753418]
[69.71791840 153.65397644]
[58.82312775 163.96432495]
[44.71467972 169.05860901]
[29.74618340 168.08697510]
[16.41471672 161.21151733]
[6.94427013 149.57919312]
[2.91472626 135.13056946]
[4.99830294 120.27598572]
[12.84741306 107.49352264]
[25.15264893 98.91557312]
[39.85980225 95.97312927]
[26.07741928 90.05316925]
[12.29503727 84.13320160]
[-1.48734379 78.21324158]
[-13.74473667 87.46807098]
[-28.98932838 89.33836365]
[-43.12039948 83.32102966]
[-52.33676529 71.03468323]
[-54.15926743 55.78430557]
[-48.09766006 41.67216492]
[-35.78248978 32.49435806]
[-20.52647400 30.71966743]
[-6.43340206 36.82547760]
[2.70575809 49.16935349]
[4.43261909 64.43086243]
[18.21500015 70.35082245]
[31.99738121 76.27078247]
[45.77976227 82.19075012]
[60.23445129 86.19848633]
[75.09749603 88.22082520]
[89.96054840 90.24315643]
[104.23600769 85.63759613]
[115.11483002 75.31038666]
[105.81280518 63.52957535]
[97.62061310 50.95168686]
[90.60614777 37.68095016]
[84.82752991 23.82732964]
[80.33264160 9.50562477]
[77.15872955 -5.16548777]
[75.33209991 -20.06443596]
[74.86788940 -35.06776047]
[75.76993561 -50.05113602]
[78.03077698 -64.89040375]
[81.63166809 -79.46260071]
[86.54277039 -93.64696503]
[92.72338867 -107.32597351]
[100.12231445 -120.38626099]
[108.67823792 -132.71960449]
[118.32025146 -144.22381592]
[128.96846008 -154.80355835]
[140.53462219 -164.37117004]
[152.92289734 -172.84735107]
[166.03063965 -180.16188049]
[179.74923706 -186.25413513]
[193.96498108 -191.07363892]
[208.56010437 -194.58045959]
[223.41365051 -196.74552917]
[238.40252686 -197.55091858]
[253.40254211 -196.98992920]
[268.28939819 -195.06723022]
[282.93972778 -191.79876709]
[297.23214722 -187.21157837]
[311.04821777 -181.34371948]
[324.27340698 -174.24380493]
[336.79821777 -165.97065735]
[348.51876831 -156.59281921]
[359.33798218 -146.18803406]
[369.16622925 -134.84249878]
[377.92202759 -122.65023804]
[385.53283691 -109.71227264]
[391.93557739 -96.13581848]
[397.07720947 -82.03337860]
[400.91510010 -67.52181244]
[403.41751099 -52.72135925]
[404.56362915 -37.75467682]
[404.34402466 -22.74577904]
[402.76046753 -7.81903839]
[399.82608032 6.90185499]
[395.56521606 21.29491615]
[390.01315308 35.24087906]
[383.21591187 48.62417603]
[375.22979736 61.33391571]
[366.12100220 73.26477051]
[355.96502686 84.31787872]
[344.84600830 94.40164185]
[332.85604858 103.43251801]
[320.09457397 111.33565521]
[306.66726685 118.04557800]
[292.68545532 123.50667572]
[278.26492310 127.67369843]
[263.52523804 130.51211548]
[248.58850098 131.99839783]
[233.57849121 132.12025452]
[218.61958313 130.87664795]
[203.83575439 128.27789307]
[189.34948730 124.34553528]
[175.28083801 119.11214447]
[161.74638367 112.62109375]
[148.85827637 104.92617035]
[136.72331238 96.09114075]
[125.44203949 86.18921661]
[114.56320953 96.51641846]
[108.64324951 110.29879761]
[108.64324951 125.29879761]
[108.64324951 140.29879761]
[108.64324951 155.29879761]
[108.64324951 170.29879761]
[108.64324951 185.29879761]
[108.64324951 200.29879761]
[108.64324951 215.29879761]
[108.64324951 230.29879761]
[108.64324951 245.29879761]
[123.18313599 249.36010742]
[136.08750916 257.19461060]
[146.39880371 268.22094727]
[153.35182190 281.62088013]
[156.43061829 296.40005493]
[155.40672302 311.46173096]
[150.35612488 325.68823242]
[141.65361023 338.02392578]
[129.94494629 347.55334473]
[116.09900665 353.56936646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 59]
[24 58]
[25 57]
[39 56]
[40 55]
[41 54]
[42 53]
[60 130]
[61 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
