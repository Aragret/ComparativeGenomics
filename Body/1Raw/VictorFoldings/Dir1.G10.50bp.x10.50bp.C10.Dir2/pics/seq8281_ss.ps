%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCAAAUAUCUGGGGGGGGGGCAUCAACAACCGACUAAUCACCACCCAACAAUGACUAAUCAAACUAACCUxxxxxxxxxxAUAGAAUUCUCACUGUGAUAUAUAAACUCAGACCCAAACAUUAAUCAGUUCCCCCCCCCCCUUCAAAUAUCU\
) } def
/len { sequence length } bind def

/coor [
[85.26871490 367.50006104]
[71.10811615 362.34506226]
[58.51836777 354.06283569]
[48.17842865 343.10006714]
[40.64591980 330.04794312]
[36.32705307 315.61035156]
[35.45474625 300.56588745]
[38.07603455 285.72589111]
[44.04956055 271.89065552]
[53.05318069 259.80630493]
[64.60133362 250.12452698]
[78.07125092 243.36744690]
[92.73651123 239.89947510]
[92.73651123 224.89947510]
[92.73651123 209.89947510]
[92.73651123 194.89947510]
[92.73651123 179.89947510]
[92.73651123 164.89947510]
[92.73651123 149.89947510]
[92.73651123 134.89947510]
[92.73651123 119.89947510]
[92.73651123 104.89947510]
[90.71197510 102.53427887]
[89.52564240 99.36354065]
[89.48353577 95.70480347]
[90.76676941 91.98625183]
[93.39366913 88.69702911]
[94.60843658 73.74629974]
[95.82320404 58.79557037]
[80.97085571 56.66218948]
[66.27800751 53.61852646]
[51.80039597 49.67612839]
[37.59294891 44.84994888]
[23.70954895 39.15829849]
[10.20286655 32.62276459]
[-2.87586284 25.26814270]
[-15.47702694 17.12232780]
[-27.55282593 8.21622086]
[-39.05745316 -1.41639233]
[-49.94726181 -11.73897362]
[-60.18094635 -22.71236420]
[-69.71968842 -34.29494095]
[-78.52730560 -46.44276047]
[-86.57038116 -59.10974884]
[-93.81840515 -72.24784851]
[-100.24388885 -85.80723572]
[-105.82245636 -99.73645782]
[-110.53294373 -113.98268127]
[-114.35748291 -128.49186707]
[-117.28157043 -143.20898438]
[-119.29410553 -158.07818604]
[-120.38745880 -173.04309082]
[-120.55747986 -188.04690552]
[-119.80353546 -203.03274536]
[-118.12847137 -217.94374084]
[-115.53864288 -232.72334290]
[-112.04388428 -247.31547546]
[-107.65744781 -261.66479492]
[-102.39596558 -275.71685791]
[-96.27941132 -289.41836548]
[-89.33097076 -302.71734619]
[-81.57701111 -315.56332397]
[-73.04694366 -327.90762329]
[-63.77312469 -339.70339966]
[-53.79074097 -350.90588379]
[-43.13764954 -361.47259521]
[-31.85426712 -371.36343384]
[-19.98339272 -380.54089355]
[-7.57005882 -388.97018433]
[5.33864641 -396.61929321]
[18.69375610 -403.45922852]
[32.44461060 -409.46405029]
[46.53904343 -414.61093140]
[60.92359543 -418.88040161]
[75.54369354 -422.25625610]
[90.34388733 -424.72564697]
[105.26802826 -426.27926636]
[120.25949860 -426.91119385]
[135.26144409 -426.61901855]
[150.21694946 -425.40383911]
[165.06927490 -423.27032471]
[179.76208496 -420.22650146]
[194.23965454 -416.28396606]
[208.44706726 -411.45764160]
[222.33041382 -405.76586914]
[235.83702087 -399.23019409]
[248.91567993 -391.87545776]
[261.51675415 -383.72952271]
[273.59246826 -374.82327271]
[285.09701538 -365.19055176]
[295.98672485 -354.86785889]
[306.22030640 -343.89437866]
[315.75891113 -332.31170654]
[324.56640625 -320.16381836]
[332.60937500 -307.49673462]
[339.85726929 -294.35855103]
[346.28262329 -280.79913330]
[351.86105347 -266.86984253]
[356.57138062 -252.62356567]
[360.39578247 -238.11434937]
[363.31973267 -223.39720154]
[365.33212280 -208.52796936]
[366.42532349 -193.56306458]
[366.59521484 -178.55923462]
[365.84109497 -163.57341003]
[364.16589355 -148.66242981]
[361.57592773 -133.88285828]
[358.08102417 -119.29076385]
[353.69445801 -104.94149780]
[348.43283081 -90.88948059]
[342.31613159 -77.18803406]
[335.36755371 -63.88912201]
[327.61346436 -51.04319763]
[319.08328247 -38.69898605]
[309.80935669 -26.90331841]
[299.82687378 -15.70093441]
[289.17367554 -5.13433123]
[277.89019775 4.75640774]
[266.01922607 13.93376350]
[253.60580444 22.36292267]
[240.69702148 30.01191139]
[227.34184265 36.85171509]
[213.59094238 42.85638428]
[199.49644470 48.00314331]
[185.11186218 52.27247238]
[170.49172974 55.64816666]
[155.69151306 58.11743164]
[140.76734924 59.67089462]
[125.77587128 60.30266190]
[110.77393341 60.01034164]
[109.55916595 74.96106720]
[108.34439850 89.91180420]
[107.73651123 104.89947510]
[107.73651123 119.89947510]
[107.73651123 134.89947510]
[107.73651123 149.89947510]
[107.73651123 164.89947510]
[107.73651123 179.89947510]
[107.73651123 194.89947510]
[107.73651123 209.89947510]
[107.73651123 224.89947510]
[107.73651123 239.89947510]
[122.40177155 243.36744690]
[135.87168884 250.12452698]
[147.41984558 259.80630493]
[156.42346191 271.89065552]
[162.39698792 285.72589111]
[165.01828003 300.56588745]
[164.14596558 315.61035156]
[159.82710266 330.04794312]
[152.29460144 343.10006714]
[141.95466614 354.06283569]
[129.36491394 362.34506226]
[115.20430756 367.50006104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[27 132]
[28 131]
[29 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
