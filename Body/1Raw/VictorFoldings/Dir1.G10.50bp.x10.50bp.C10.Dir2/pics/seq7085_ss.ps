%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCUAUUCUCGGGGGGGGGGAGGCUACACCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUCAUAUxxxxxxxxxxACAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUACCCCCCCCCCUCCCCCAUUCUC\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 370.88925171]
[70.87159729 365.73425293]
[58.28185654 357.45202637]
[47.94191742 346.48925781]
[40.40940475 333.43713379]
[36.09054184 318.99954224]
[35.21823120 303.95507812]
[37.83952332 289.11508179]
[43.81304932 275.27984619]
[52.81666565 263.19549561]
[64.36482239 253.51371765]
[77.83473969 246.75663757]
[92.50000000 243.28866577]
[92.50000000 228.28866577]
[92.50000000 213.28866577]
[92.50000000 198.28866577]
[92.50000000 183.28866577]
[92.50000000 168.28866577]
[92.50000000 153.28866577]
[92.50000000 138.28866577]
[92.50000000 123.28866577]
[92.50000000 108.28866577]
[92.34799194 93.28943634]
[92.04398346 78.29251862]
[91.73998260 63.29559708]
[76.74720764 62.70213318]
[61.81675720 61.21309662]
[47.00208282 58.83382416]
[32.35621643 55.57282639]
[17.93158531 51.44177628]
[3.77982807 46.45546722]
[-10.04839706 40.63174820]
[-23.50358772 33.99146652]
[-36.53757858 26.55838776]
[-49.10370636 18.35912704]
[-61.15699387 9.42303181]
[-72.65428925 -0.21790750]
[-83.55443573 -10.52917862]
[-93.81841278 -21.47386932]
[-103.40948486 -33.01280212]
[-112.29330444 -45.10466766]
[-120.43807983 -57.70618057]
[-127.81465149 -70.77223206]
[-134.39662170 -84.25605011]
[-140.16041565 -98.10935974]
[-145.08540344 -112.28256989]
[-149.15394592 -126.72495270]
[-152.35150146 -141.38481140]
[-154.66661072 -156.20964050]
[-156.09098816 -171.14639282]
[-156.61952209 -186.14160156]
[-156.25035095 -201.14157104]
[-154.98475647 -216.09262085]
[-152.82730103 -230.94122314]
[-149.78570557 -245.63421631]
[-145.87083435 -260.11901855]
[-141.09672546 -274.34375000]
[-135.48045349 -288.25753784]
[-129.04212952 -301.81051636]
[-121.80480957 -314.95422363]
[-113.79439545 -327.64157104]
[-105.03955078 -339.82714844]
[-95.57163239 -351.46731567]
[-85.42453003 -362.52047729]
[-74.63455963 -372.94696045]
[-63.24034882 -382.70953369]
[-51.28269196 -391.77319336]
[-38.80439377 -400.10549927]
[-25.85012054 -407.67666626]
[-12.46624470 -414.45953369]
[1.29931951 -420.42987061]
[15.39729595 -425.56625366]
[29.77721786 -429.85034180]
[44.38760757 -433.26678467]
[59.17616653 -435.80331421]
[74.08995056 -437.45092773]
[89.07557678 -438.20364380]
[104.07939148 -438.05883789]
[119.04769135 -437.01699829]
[133.92689514 -435.08184814]
[148.66374207 -432.26031494]
[163.20545959 -428.56250000]
[177.50001526 -424.00164795]
[191.49621582 -418.59408569]
[205.14398193 -412.35916138]
[218.39443970 -405.31921387]
[231.20014954 -397.49942017]
[243.51530457 -388.92779541]
[255.29577637 -379.63504028]
[266.49942017 -369.65435791]
[277.08612061 -359.02151489]
[287.01800537 -347.77459717]
[296.25946045 -335.95379639]
[304.77746582 -323.60150146]
[312.54150391 -310.76193237]
[319.52377319 -297.48098755]
[325.69931030 -283.80624390]
[331.04595947 -269.78665161]
[335.54461670 -255.47241211]
[339.17916870 -240.91474915]
[341.93658447 -226.16577148]
[343.80703735 -211.27828979]
[344.78378296 -196.30560303]
[344.86337280 -181.30130005]
[344.04550171 -166.31909180]
[342.33306885 -151.41261292]
[339.73223877 -136.63522339]
[336.25231934 -122.03982544]
[331.90576172 -107.67866516]
[326.70809937 -93.60315704]
[320.67800903 -79.86367798]
[313.83700562 -66.50942230]
[306.20959473 -53.58818817]
[297.82308960 -41.14623260]
[288.70751953 -29.22809792]
[278.89553833 -17.87644386]
[268.42221069 -7.13190842]
[257.32504272 2.96704507]
[245.64381409 12.38426590]
[233.42028809 21.08604050]
[220.69822693 29.04122162]
[207.52319336 36.22132874]
[193.94233704 42.60066223]
[180.00427246 48.15638351]
[165.75891113 52.86860275]
[151.25723267 56.72045517]
[136.55114746 59.69814682]
[121.69330597 61.79102325]
[106.73690033 62.99159241]
[107.04090118 77.98851013]
[107.34490967 92.98542786]
[110.66019440 100.38879395]
[107.50000000 108.28866577]
[107.50000000 123.28866577]
[107.50000000 138.28866577]
[107.50000000 153.28866577]
[107.50000000 168.28866577]
[107.50000000 183.28866577]
[107.50000000 198.28866577]
[107.50000000 213.28866577]
[107.50000000 228.28866577]
[107.50000000 243.28866577]
[122.16526031 246.75663757]
[135.63517761 253.51371765]
[147.18333435 263.19549561]
[156.18695068 275.27984619]
[162.16047668 289.11508179]
[164.78176880 303.95507812]
[163.90945435 318.99954224]
[159.59059143 333.43713379]
[152.05809021 346.48925781]
[141.71813965 357.45202637]
[129.12840271 365.73425293]
[114.96779633 370.88925171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 131]
[24 130]
[25 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
