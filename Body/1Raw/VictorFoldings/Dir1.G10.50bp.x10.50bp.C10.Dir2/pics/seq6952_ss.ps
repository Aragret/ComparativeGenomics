%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGACUCGCCGGGGGGGGGGACACUCCACGGAAGCAAUAUGAAAUGAUCUGCUGCAGUGCUCUGAGCCCUxxxxxxxxxxGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCCCCCCCCCCCUGACUCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.46105957 593.45220947]
[85.57678223 584.17712402]
[76.25807953 572.32702637]
[70.04670715 558.59082031]
[67.30381012 543.76721191]
[68.18883514 528.71795654]
[72.65034485 514.31799316]
[80.42893982 501.40457153]
[91.07239532 490.72839355]
[103.96190643 482.91021729]
[118.34809113 478.40454102]
[117.41246033 463.43377686]
[116.47682953 448.46298218]
[115.54120636 433.49218750]
[114.60557556 418.52139282]
[113.66994476 403.55059814]
[112.73432159 388.57980347]
[111.79869080 373.60900879]
[110.86306000 358.63821411]
[109.92743683 343.66741943]
[95.03780365 337.94909668]
[84.08139801 326.27807617]
[79.27931213 310.94650269]
[81.63709259 294.99572754]
[90.73468781 281.61306763]
[104.80021667 273.49487305]
[103.55333710 258.54678345]
[88.41311646 253.96876526]
[76.15077209 243.91700745]
[68.65482330 229.90151978]
[67.09425354 214.04554749]
[71.73634338 198.76402283]
[81.90141296 186.39570618]
[96.06218719 178.84530640]
[94.50460815 163.92639160]
[92.34392548 162.04522705]
[90.82349396 159.16734314]
[90.33728027 155.54167175]
[91.17826843 151.55873108]
[93.49114227 147.71008301]
[93.17908478 132.71333313]
[92.86702728 117.71657562]
[82.48339081 107.61081696]
[82.18195343 93.12443542]
[92.13621521 82.59548187]
[91.82416534 67.59873199]
[83.05107880 58.08626938]
[83.13550568 45.54785538]
[91.48406219 36.73826218]
[91.48406219 21.73826408]
[91.48406219 6.73826408]
[91.48406219 -8.26173592]
[91.48406219 -23.26173592]
[91.48406219 -38.26173782]
[91.48406219 -53.26173782]
[88.46714783 -59.26221466]
[88.91511536 -65.00943756]
[91.80910492 -68.88246918]
[92.43308258 -83.86948395]
[93.05706024 -98.85649872]
[93.68103790 -113.84351349]
[83.25903320 -125.42020416]
[84.10533142 -140.61027527]
[95.20616150 -150.47471619]
[95.83013916 -165.46173096]
[95.83013916 -180.46173096]
[95.20616150 -195.44874573]
[94.58218384 -210.43576050]
[80.54668427 -216.43307495]
[70.50974274 -227.93186951]
[66.46418762 -242.64907837]
[69.21327209 -257.66256714]
[78.21115875 -269.99142456]
[91.67132568 -277.18774414]
[106.92122650 -277.82266235]
[120.93299866 -271.77014160]
[130.92459106 -260.23190308]
[134.91215515 -245.49887085]
[132.10397339 -230.49632263]
[123.05759430 -218.20298767]
[109.56919861 -211.05973816]
[110.19317627 -196.07272339]
[110.81715393 -181.08570862]
[112.85629272 -179.07344055]
[114.19425201 -176.10630798]
[114.45336914 -172.45738220]
[113.36557770 -168.53465271]
[110.81715393 -164.83775330]
[110.19317627 -149.85073853]
[120.43560028 -139.09768677]
[120.01629639 -123.88983154]
[108.66805267 -113.21953583]
[108.04407501 -98.23252106]
[107.42009735 -83.24550629]
[106.79611969 -68.25849152]
[106.48406219 -53.26173782]
[106.48406219 -38.26173782]
[106.48406219 -23.26173592]
[106.48406219 -8.26173592]
[106.48406219 6.73826408]
[106.48406219 21.73826408]
[106.48406219 36.73826218]
[116.07517242 51.40150452]
[106.82091522 67.28667450]
[107.13297272 82.28342438]
[117.51660919 92.38918304]
[117.81804657 106.87556458]
[107.86378479 117.40451813]
[108.17583466 132.40127563]
[108.48789215 147.39802551]
[109.42352295 162.36882019]
[110.98110199 177.28773499]
[124.77806091 180.95443726]
[136.46411133 189.10205078]
[144.64123535 200.73091125]
[148.33975220 214.42640686]
[147.13325500 228.53108215]
[141.18769836 241.34519958]
[131.23886108 251.33155823]
[118.50142670 257.29992676]
[119.74829865 272.24801636]
[133.16143799 276.80856323]
[143.78309631 286.11788940]
[150.02447510 298.73947144]
[150.96891785 312.74472046]
[146.50625610 326.00772095]
[137.34460449 336.52789307]
[124.89822388 342.73181152]
[125.83385468 357.70260620]
[126.76948547 372.67337036]
[127.70510864 387.64416504]
[128.64074707 402.61495972]
[129.57637024 417.58575439]
[130.51199341 432.55654907]
[131.44763184 447.52734375]
[132.38325500 462.49813843]
[133.31887817 477.46893311]
[148.15411377 480.14834595]
[161.91674805 486.30084229]
[173.80664062 495.56875610]
[183.13253784 507.41320801]
[189.35221863 521.14562988]
[192.10411072 535.96759033]
[191.22821045 551.01733398]
[186.77543640 565.41998291]
[179.00466919 578.33813477]
[168.36769104 589.02075195]
[155.48292542 596.84674072]
[141.09947205 601.36114502]
[126.05356598 602.30145264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[26 121]
[27 120]
[34 112]
[35 111]
[40 110]
[41 109]
[42 108]
[45 105]
[46 104]
[49 102]
[50 101]
[51 100]
[52 99]
[53 98]
[54 97]
[55 96]
[58 95]
[59 94]
[60 93]
[61 92]
[64 89]
[65 88]
[66 83]
[67 82]
[68 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
