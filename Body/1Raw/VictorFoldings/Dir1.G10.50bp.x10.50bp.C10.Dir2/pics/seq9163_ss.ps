%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGCUCAACGGGGGGGGGGAUUUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAAxxxxxxxxxxGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCACUACUCACCAGCCCCCCCCCCACGCCUCAAC\
) } def
/len { sequence length } bind def

/coor [
[107.82775116 622.97613525]
[93.98181152 616.96008301]
[82.27314758 607.43066406]
[73.57062531 595.09503174]
[68.52001953 580.86846924]
[67.49613190 565.80682373]
[70.57492828 551.02764893]
[77.52795410 537.62774658]
[87.83923340 526.60137939]
[100.74361420 518.76690674]
[115.28350067 514.70556641]
[115.28350067 499.70556641]
[115.28350067 484.70556641]
[115.28350067 469.70556641]
[115.28350067 454.70556641]
[115.28350067 439.70556641]
[115.28350067 424.70556641]
[115.28350067 409.70556641]
[115.28350067 394.70556641]
[115.28350067 379.70556641]
[107.54620361 366.97830200]
[115.28350067 353.17813110]
[101.80043793 346.80062866]
[92.38470459 335.15359497]
[88.94551849 320.51348877]
[92.21715546 305.77182007]
[101.60300446 293.86413574]
[115.28350067 287.18542480]
[115.28350067 272.18542480]
[115.28350067 257.18542480]
[115.28350067 242.18540955]
[105.69239807 227.52217102]
[114.94665527 211.63700867]
[114.63459778 196.64025879]
[106.10456848 188.00625610]
[105.75932312 175.47230530]
[114.33260345 165.77938843]
[114.33260345 150.77938843]
[114.33260345 135.77938843]
[114.33260345 120.77938843]
[102.61205292 128.97927856]
[86.44292450 130.03242493]
[70.32284546 121.76762390]
[59.62897110 104.82379150]
[46.53581619 97.50468445]
[33.44266129 90.18558502]
[18.88894653 95.90602112]
[4.07964849 90.88419342]
[-3.99273419 77.49126434]
[-1.51666987 62.05095291]
[10.33871937 51.85371017]
[25.97568321 51.71435928]
[38.01092148 61.69869995]
[40.76176834 77.09243011]
[53.85492325 84.41152954]
[66.94807434 91.73063660]
[73.45623016 88.00318146]
[62.34405518 77.92749023]
[68.49292755 64.24570465]
[83.40516663 65.86590576]
[86.47254181 80.54827118]
[92.98069763 76.82081604]
[93.29274750 61.82406235]
[93.60480499 46.82730865]
[93.91686249 31.83055687]
[79.46461487 27.46763802]
[66.72601318 19.36636543]
[56.64635086 8.12790680]
[49.97360229 -5.41377020]
[47.20293045 -20.25378227]
[48.53993988 -35.29090118]
[53.88541412 -49.40927505]
[62.84268188 -61.56122589]
[74.74705505 -70.84500122]
[88.71515656 -76.57167816]
[103.71044922 -78.31629944]
[118.62019348 -75.94940186]
[132.33798218 -69.64663696]
[143.84585571 -59.87569427]
[152.28987122 -47.36165237]
[157.04341125 -33.03313446]
[157.75373840 -17.95341301]
[154.36814880 -3.24150229]
[147.13786316 10.01087666]
[136.59942627 20.82030869]
[123.53485107 28.38466263]
[108.91362000 32.14261246]
[108.60156250 47.13936615]
[108.28950500 62.13611984]
[107.97744751 77.13287354]
[114.10863495 81.45243073]
[121.57231140 68.44114685]
[123.97585297 53.63496780]
[137.80311584 47.82060242]
[150.06542969 56.45978928]
[149.24417114 71.43729401]
[136.11096191 78.68395996]
[126.37100220 90.09154510]
[132.50218201 94.41110229]
[146.51889038 89.06959534]
[160.53561401 83.72808075]
[174.55232239 78.38656616]
[184.47824097 65.33251190]
[200.70997620 67.66971588]
[206.54972839 82.99385834]
[195.99005127 95.54077911]
[179.89382935 92.40328217]
[165.87712097 97.74479675]
[151.86041260 103.08630371]
[137.84370422 108.42781830]
[129.33261108 120.77938843]
[129.33261108 135.77938843]
[129.33261108 150.77938843]
[129.33261108 165.77938843]
[138.91532898 181.46859741]
[129.63134766 196.32820129]
[129.94340515 211.32495117]
[138.71649170 220.83741760]
[138.63206482 233.37582397]
[130.28350830 242.18540955]
[130.28350830 257.18542480]
[130.28350830 272.18542480]
[130.28350830 287.18542480]
[143.96400452 293.86413574]
[153.34985352 305.77182007]
[156.62149048 320.51348877]
[153.18229675 335.15359497]
[143.76657104 346.80062866]
[130.28350830 353.17813110]
[138.02079773 366.97830200]
[130.28350830 379.70556641]
[130.28350830 394.70556641]
[130.28350830 409.70556641]
[130.28350830 424.70556641]
[130.28350830 439.70556641]
[130.28350830 454.70556641]
[130.28350830 469.70556641]
[130.28350830 484.70556641]
[130.28350830 499.70556641]
[130.28350830 514.70556641]
[144.82339478 518.76690674]
[157.72776794 526.60137939]
[168.03906250 537.62774658]
[174.99208069 551.02764893]
[178.07087708 565.80682373]
[177.04698181 580.86846924]
[171.99638367 595.09503174]
[163.29385376 607.43066406]
[151.58520508 616.96008301]
[137.73925781 622.97613525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[28 123]
[29 122]
[30 121]
[31 120]
[33 117]
[34 116]
[37 114]
[38 113]
[39 112]
[40 111]
[44 56]
[45 55]
[46 54]
[62 90]
[63 89]
[64 88]
[65 87]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
