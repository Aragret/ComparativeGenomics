%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACCACCAGGGGGGGGGGCCCCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACxxxxxxxxxxCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGCCCCCCCCCCACAACCAUCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 398.02648926]
[71.19830322 392.01046753]
[59.48964310 382.48104858]
[50.78712082 370.14538574]
[45.73651886 355.91885376]
[44.71262741 340.85717773]
[47.79142761 326.07803345]
[54.74444962 312.67810059]
[65.05573273 301.65176392]
[77.96011353 293.81726074]
[92.50000000 289.75595093]
[92.50000000 274.75595093]
[92.50000000 259.75595093]
[92.50000000 244.75593567]
[92.50000000 229.75593567]
[92.50000000 214.75593567]
[92.50000000 199.75593567]
[92.50000000 184.75593567]
[92.50000000 169.75593567]
[92.50000000 154.75593567]
[92.50000000 139.75593567]
[77.86192322 133.86282349]
[66.59169006 122.81818390]
[60.40382004 108.30224609]
[60.23966980 92.52330017]
[66.12421417 77.88177490]
[77.16223907 66.60506439]
[91.67455292 60.40869141]
[91.36249542 45.41193771]
[91.05043793 30.41518402]
[90.73838043 15.41843128]
[90.42632294 0.42167717]
[80.89582825 12.00483894]
[66.66201782 16.73756218]
[52.09307480 13.16743755]
[41.66001129 2.39008808]
[38.56461334 -12.28705406]
[43.75680923 -26.35976028]
[55.64318848 -35.50929642]
[70.57596588 -36.92779160]
[83.97246552 -30.17991829]
[91.72167969 -17.33574677]
[94.20680237 -32.12845230]
[96.69191742 -46.92116165]
[99.17704010 -61.71386719]
[101.66215515 -76.50657654]
[87.15126801 -80.34828949]
[73.05675507 -85.51252747]
[59.49887085 -91.95523071]
[46.59328461 -99.62142181]
[34.45010757 -108.44569397]
[23.17294121 -118.35277557]
[12.85800266 -129.25813293]
[3.59329653 -141.06871033]
[-4.54213285 -153.68376160]
[-11.47887516 -166.99563599]
[-17.15774727 -180.89079285]
[-21.53029823 -195.25064087]
[-24.55922127 -209.95269775]
[-26.21867371 -224.87150574]
[-26.49450111 -239.87977600]
[-25.38434601 -254.84948730]
[-22.89768219 -269.65292358]
[-19.05572319 -284.16372681]
[-13.89125156 -298.25814819]
[-7.44832706 -311.81594849]
[0.21807954 -324.72140503]
[9.04256058 -336.86444092]
[18.94982529 -348.14141846]
[29.85534859 -358.45617676]
[41.66608429 -367.72070312]
[54.28126907 -375.85592651]
[67.59326935 -382.79241943]
[81.48851013 -388.47106934]
[95.84843445 -392.84338379]
[110.55053711 -395.87207031]
[125.46937561 -397.53128052]
[140.47766113 -397.80685425]
[155.44735718 -396.69644165]
[170.25073242 -394.20953369]
[184.76148987 -390.36734009]
[198.85583496 -385.20263672]
[212.41349792 -378.75946045]
[225.31883240 -371.09286499]
[237.46171570 -362.26815796]
[248.73855591 -352.36071777]
[259.05313110 -341.45501709]
[268.31744385 -329.64413452]
[276.45245361 -317.02880859]
[283.38873291 -303.71670532]
[289.06713867 -289.82135010]
[293.43923950 -275.46136475]
[296.46765137 -260.75921631]
[298.12661743 -245.84034729]
[298.40194702 -230.83204651]
[297.29129028 -215.86238098]
[294.80413818 -201.05905151]
[290.96170044 -186.54835510]
[285.79675293 -172.45410156]
[279.35336304 -158.89653015]
[271.68652344 -145.99133301]
[262.86166382 -133.84858704]
[252.95401001 -122.57192230]
[242.04814148 -112.25753021]
[230.23709106 -102.99341583]
[217.62164307 -94.85861206]
[204.30941772 -87.92253876]
[190.41398621 -82.24436188]
[176.05390930 -77.87252808]
[161.35169983 -74.84433746]
[146.43281555 -73.18563080]
[131.42451477 -72.91055298]
[116.45486450 -74.02145386]
[113.96974182 -59.22874832]
[111.48462677 -44.43604279]
[108.99951172 -29.64333534]
[106.51438904 -14.85062790]
[105.42308044 0.10962094]
[105.73513794 15.10637474]
[106.04719543 30.10312843]
[106.35924530 45.09988022]
[106.67130280 60.09663391]
[119.90331268 64.77723694]
[130.73986816 73.69704437]
[137.87675476 85.78253174]
[140.45500183 99.57914734]
[138.16433716 113.42641449]
[131.28041077 125.65775299]
[120.63176727 134.80107117]
[107.50000000 139.75593567]
[107.50000000 154.75593567]
[107.50000000 169.75593567]
[107.50000000 184.75593567]
[107.50000000 199.75593567]
[107.50000000 214.75593567]
[107.50000000 229.75593567]
[107.50000000 244.75593567]
[107.50000000 259.75595093]
[107.50000000 274.75595093]
[107.50000000 289.75595093]
[122.03988647 293.81726074]
[134.94427490 301.65176392]
[145.25555420 312.67810059]
[152.20857239 326.07803345]
[155.28736877 340.85717773]
[154.26348877 355.91885376]
[149.21287537 370.14538574]
[140.51036072 382.48104858]
[128.80169678 392.01046753]
[114.95575714 398.02648926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[28 122]
[29 121]
[30 120]
[31 119]
[32 118]
[42 117]
[43 116]
[44 115]
[45 114]
[46 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
