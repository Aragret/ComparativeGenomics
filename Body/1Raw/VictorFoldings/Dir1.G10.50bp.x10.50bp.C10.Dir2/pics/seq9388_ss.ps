%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACAUAGAAAGGGGGGGGGGAAUCCACCCCUUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCxxxxxxxxxxCCAGCCACCAUGAAUAUUGUACGGUACCAUAAAUACUUGACCACCUGUAGCCCCCCCCCCUACAUAAAAA\
) } def
/len { sequence length } bind def

/coor [
[65.60687256 226.14166260]
[61.31940460 211.76747131]
[59.99894714 196.82569885]
[61.69904709 181.92234802]
[66.35075378 167.66186523]
[73.76541138 154.62258911]
[83.64484406 143.33097839]
[88.83077240 129.25596619]
[94.01670074 115.18094635]
[82.71769714 125.04666901]
[71.41869354 134.91238403]
[60.11968994 144.77810669]
[48.82068253 154.64382935]
[37.52167892 164.50955200]
[32.21540070 179.41439819]
[17.53943062 181.95704651]
[6.24042606 191.82278442]
[-5.05857897 201.68850708]
[-9.84867382 217.37246704]
[-25.88521004 220.80198669]
[-36.67117310 208.44905090]
[-31.11088943 193.02130127]
[-14.92430210 190.38949585]
[-3.62529707 180.52377319]
[7.67370749 170.65805054]
[12.17180347 156.45887756]
[27.65595627 153.21055603]
[38.95495987 143.34483337]
[50.25396347 133.47911072]
[61.55297089 123.61338806]
[72.85197449 113.74766541]
[84.15097809 103.88194275]
[82.90410614 88.93385315]
[70.12674713 81.07642365]
[57.34939194 73.21900177]
[41.54105759 72.58089447]
[34.75268173 59.32317352]
[18.94434738 58.68506622]
[12.15597248 45.42734528]
[-0.62138522 37.56991959]
[-13.39874268 29.71249199]
[-26.17609978 21.85506630]
[-37.85269547 31.49539185]
[-52.02770615 36.81965637]
[-67.16352844 37.25032806]
[-81.61835480 32.74068832]
[-93.82421875 23.77991104]
[-102.45713043 11.33999157]
[-106.58065033 -3.22967958]
[-105.74748993 -18.34869385]
[-100.04802704 -32.37705231]
[-90.10049438 -43.79306412]
[-76.98392487 -51.35840607]
[-62.12111282 -54.25244522]
[-47.12425613 -52.16125870]
[-33.62010574 -45.31168747]
[-23.07349205 -34.44671249]
[-16.62843132 -20.74489021]
[-14.98403454 -5.69249344]
[-18.31867409 9.07771015]
[-5.54131699 16.93513489]
[7.23604059 24.79256058]
[20.01339722 32.64998627]
[34.90781021 32.72607803]
[42.61010742 46.54581451]
[57.50451660 46.62190628]
[65.20681763 60.44164276]
[77.98417664 68.29907227]
[90.76152802 76.15649414]
[83.31539154 63.13516235]
[74.00457764 51.37469101]
[67.12573242 38.04496765]
[62.93496704 23.64227867]
[61.58829880 8.70285130]
[63.13587570 -6.21710205]
[67.52007294 -20.56209564]
[74.57766724 -33.79804611]
[84.04589081 -45.43216705]
[95.57222748 -55.03130341]
[108.72755432 -62.23806763]
[123.02206421 -66.78414917]
[137.92356873 -68.50028992]
[152.87727356 -67.32259369]
[167.32641602 -63.29490280]
[180.73304749 -56.56718445]
[192.59802246 -47.38991165]
[202.47959900 -36.10476685]
[210.00987244 -23.13191032]
[214.90846252 -8.95433331]
[216.99302673 5.90011454]
[216.18592834 20.87838554]
[212.51722717 35.42282104]
[206.12350464 48.99191284]
[197.24281311 61.08047485]
[186.20578003 71.23842621]
[173.42333984 79.08758545]
[159.37139893 84.33570862]
[144.57310486 86.78740692]
[129.58119202 86.35162354]
[116.06138611 92.84889984]
[131.04109192 93.62874603]
[146.02081299 94.40859222]
[161.00782776 95.03256989]
[176.00051880 95.50061035]
[190.99322510 95.96865845]
[196.33444214 81.80002594]
[205.98873901 70.13497925]
[218.90887451 62.23884583]
[233.69335938 58.96814346]
[248.73851013 60.67765427]
[262.41232300 67.18193817]
[273.23156738 77.77546692]
[280.02264404 91.30912018]
[282.04891968 106.31488800]
[279.09060669 121.16503906]
[271.46856689 134.24874878]
[260.00961304 144.14678955]
[245.95674133 149.78550720]
[230.83425903 150.55323792]
[216.28256226 146.36672974]
[203.88011169 137.68006897]
[194.97222900 125.43554688]
[190.52517700 110.96134949]
[175.53248596 110.49330902]
[160.53979492 110.02526855]
[153.71192932 112.97923279]
[145.24096680 109.38830566]
[130.26126099 108.60845947]
[115.28153992 107.82862091]
[128.05360413 115.69465637]
[140.82565308 123.56069183]
[155.56634521 126.33774567]
[169.45170593 132.01197815]
[181.91856384 140.35327148]
[192.46134949 151.02331543]
[200.65245056 163.58938599]
[206.15966797 177.54182434]
[208.75965881 192.31477356]
[208.34695435 207.30909729]
[204.93832397 221.91667175]
[198.67198181 235.54505920]
[189.80207825 247.64154053]
[178.68835449 257.71551514]
[165.78153992 265.35842896]
[151.60510254 270.26031494]
[136.73397827 272.22235107]
[121.77129364 271.16497803]
[107.32388306 267.13107300]
[93.97769165 260.28424072]
[82.27399445 250.90216064]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 32]
[10 31]
[11 30]
[12 29]
[13 28]
[14 27]
[16 25]
[17 24]
[18 23]
[33 69]
[34 68]
[35 67]
[37 65]
[39 63]
[40 62]
[41 61]
[42 60]
[100 129]
[101 128]
[102 127]
[103 125]
[104 124]
[105 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
