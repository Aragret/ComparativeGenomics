%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCUUAUGAGGGGGGGGGGGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCxxxxxxxxxxAUGACUAGCUUACACAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACCCCCCCCCCCUCCACUUAUGA\
) } def
/len { sequence length } bind def

/coor [
[65.86354828 410.76788330]
[52.37467194 404.03634644]
[40.88917160 394.27178955]
[32.07480240 382.04190063]
[26.44402122 368.05770874]
[24.32419205 353.13223267]
[25.83856201 338.13320923]
[30.89908409 323.93270874]
[39.21154785 311.35629272]
[50.29267883 301.13513184]
[63.49823380 293.86349487]
[78.06046295 289.96414185]
[77.75247955 274.96728516]
[77.44450378 259.97045898]
[77.13652802 244.97361755]
[76.82855225 229.97677612]
[76.52056885 214.97993469]
[76.21259308 199.98310852]
[75.90461731 184.98626709]
[75.59664154 169.98942566]
[75.28865814 154.99258423]
[67.29167938 142.42686462]
[74.74400330 128.47073364]
[65.70448303 116.50048065]
[51.36442184 112.10017395]
[37.02436066 107.69987488]
[22.68430138 103.29957581]
[8.34423923 98.89927673]
[-0.24976061 112.03653717]
[-12.17757511 122.22068787]
[-26.47302437 128.63749695]
[-41.98114395 130.77745056]
[-57.45151138 128.47624207]
[-71.63903809 121.92729950]
[-83.40421295 111.66559601]
[-91.80458832 98.52394104]
[-96.17031097 83.56539154]
[-96.15749359 67.99727631]
[-110.58487701 63.89233398]
[-125.01226044 59.78738785]
[-139.48103333 55.83077621]
[-153.98965454 52.02291870]
[-169.65667725 56.86815262]
[-181.50076294 45.52576447]
[-177.33772278 29.66382408]
[-161.45013428 25.59974098]
[-150.18179321 37.51429367]
[-135.67317200 41.32215118]
[-128.35993958 39.96980667]
[-120.90731812 45.36000443]
[-106.47993469 49.46494675]
[-92.05255127 53.56989288]
[-84.63645172 41.26892471]
[-74.27225494 31.30674744]
[-61.66636658 24.37112045]
[-47.68027115 20.94322777]
[-33.27164841 21.26428795]
[-19.42879295 25.31859398]
[-7.10283518 32.83415604]
[2.85761285 43.30093384]
[9.76488209 56.00546265]
[13.13971996 70.07946777]
[12.74453926 84.55921173]
[27.08460045 88.95951843]
[41.42466354 93.35981750]
[55.76472473 97.76011658]
[70.10478210 102.16041565]
[71.37218475 75.17034149]
[96.80815125 54.29362488]
[97.73155975 39.32207489]
[83.93085480 33.00503540]
[73.34687042 22.12645149]
[67.41098785 8.15756702]
[66.92599487 -7.01244402]
[71.95748138 -21.33196068]
[81.82498169 -32.86438751]
[95.19400024 -40.05005646]
[110.25647736 -41.91716766]
[124.97534943 -38.21320343]
[137.36000061 -29.43910408]
[145.73550415 -16.78148842]
[148.96916199 -1.95219433]
[146.62362671 13.04323578]
[139.01612854 26.17679214]
[127.17550659 35.67227173]
[112.70310974 40.24548721]
[111.77970123 55.21703720]
[125.47032166 61.34621048]
[136.02233887 50.68530273]
[146.57435608 40.02439499]
[157.12637329 29.36348534]
[154.48751831 14.07243919]
[161.37068176 0.16554728]
[175.12915039 -7.00970650]
[190.47250366 -4.69429064]
[201.50091553 6.22147036]
[203.97372437 21.54024315]
[196.94010925 35.37164688]
[183.10461426 42.39722443]
[167.78727722 39.91550064]
[157.23526001 50.57640839]
[146.68324280 61.23731995]
[136.13124084 71.89822388]
[138.47813416 79.02157593]
[152.72482300 74.32777405]
[166.97158813 69.63419342]
[171.66494751 83.88102722]
[157.41862488 88.57446289]
[143.17193604 93.26826477]
[145.51882935 100.39160919]
[160.34132385 102.69248962]
[175.16380310 104.99336243]
[189.98628235 107.29423523]
[204.80876160 109.59510803]
[219.63124084 111.89598846]
[234.45372009 114.19686127]
[249.54168701 107.77148438]
[262.48583984 117.84029388]
[259.97033691 134.04536438]
[244.58293152 139.71630859]
[232.15284729 129.01934814]
[217.33036804 126.71846771]
[202.50788879 124.41759491]
[187.68540955 122.11671448]
[172.86293030 119.81584167]
[158.04043579 117.51496887]
[143.21795654 115.21409607]
[116.19210052 134.26193237]
[89.74084473 128.16276550]
[97.75985718 141.80116272]
[90.28549957 154.68461609]
[90.59347534 169.68144226]
[90.90145111 184.67828369]
[91.20943451 199.67512512]
[91.51741028 214.67196655]
[91.82538605 229.66880798]
[92.13336182 244.66563416]
[92.44134521 259.66247559]
[92.74932098 274.65930176]
[93.05729675 289.65615845]
[107.76733398 292.95437622]
[121.26029205 299.67773438]
[132.75170898 309.43533325]
[141.57348633 321.65988159]
[147.21275330 335.64065552]
[149.34162903 350.56484985]
[147.83634949 365.56475830]
[142.78443909 379.76834106]
[134.47959900 392.34979248]
[123.40467072 402.57766724]
[110.20352173 409.85733032]
[95.64366913 413.76550293]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[23 129]
[24 67]
[25 66]
[26 65]
[27 64]
[28 63]
[38 52]
[39 51]
[40 50]
[41 48]
[42 47]
[69 87]
[70 86]
[88 103]
[89 102]
[90 101]
[91 100]
[110 127]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
