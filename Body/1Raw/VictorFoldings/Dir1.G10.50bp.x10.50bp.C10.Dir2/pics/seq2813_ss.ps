%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGACGAGAAGGGGGGGGGGGACCCUAUGGAGCUUUAAUUUAUUAAUGCAAACAGUACCUAACAAACCCAxxxxxxxxxxCUAGGCCUACUAACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUCCCCCCCCCCAACACGAGAA\
) } def
/len { sequence length } bind def

/coor [
[128.19139099 534.58532715]
[113.70169830 530.37683105]
[100.79547119 522.56072998]
[90.35266876 511.66989136]
[83.08530426 498.44689941]
[79.48887634 483.79327393]
[79.80860138 468.70819092]
[84.02267456 454.22012329]
[91.84376526 441.31692505]
[102.73863983 430.87832642]
[115.96444702 423.61605835]
[130.61944580 420.02529907]
[130.93148804 405.02853394]
[131.24354553 390.03179932]
[131.55560303 375.03503418]
[131.86766052 360.03826904]
[132.17971802 345.04153442]
[132.49177551 330.04476929]
[132.80383301 315.04800415]
[133.11589050 300.05126953]
[133.42794800 285.05450439]
[133.74000549 270.05776978]
[134.05206299 255.06100464]
[111.56368256 238.64979553]
[108.58473969 213.62104797]
[123.23441315 196.44462585]
[118.62885284 182.16917419]
[114.02328491 167.89370728]
[109.41772461 153.61825562]
[104.81215668 139.34278870]
[74.87511444 130.65538025]
[60.47824478 103.00709534]
[45.57633972 101.29441071]
[30.98297882 107.40541077]
[19.22238159 98.26552582]
[4.32047939 96.55283356]
[-10.58142281 94.84014130]
[-25.48332596 93.12745667]
[-40.30528641 100.14469147]
[-53.63763046 90.59583282]
[-51.76518631 74.30393219]
[-36.61416245 68.02870178]
[-23.77063560 78.22555542]
[-8.86873341 79.93824005]
[6.03316927 81.65093231]
[20.93507195 83.36362457]
[34.46254730 77.13011169]
[47.28903198 86.39250946]
[62.19093323 88.10519409]
[65.12077332 81.17311859]
[69.30807495 74.91977692]
[74.60186768 69.57062531]
[80.81130981 65.31850433]
[87.71253204 62.31671524]
[85.84491730 47.43343353]
[83.97731018 32.55015182]
[82.10969543 17.66687393]
[79.93285370 2.82566810]
[77.44773865 -11.96703911]
[74.96262360 -26.75974655]
[72.47750092 -41.55245209]
[57.47745895 -43.33443069]
[43.58760834 -49.27149582]
[31.93393898 -58.88235474]
[23.46115494 -71.38790131]
[18.85611343 -85.77436066]
[18.49212074 -100.87549591]
[22.39868736 -115.46711731]
[30.25912094 -128.36634827]
[41.43621445 -138.52751160]
[55.02389145 -145.12689209]
[69.92066193 -147.62948608]
[84.91889954 -145.83244324]
[98.80278015 -139.88142395]
[110.44679260 -130.25886536]
[118.90700531 -117.74481201]
[123.49759674 -103.35372925]
[123.84642029 -88.25224304]
[119.92519379 -73.66455078]
[112.05180359 -60.77322006]
[100.86450958 -50.62329102]
[87.27021027 -44.03757095]
[89.75532532 -29.24486542]
[92.24044800 -14.45215797]
[94.72556305 0.34054965]
[98.07925415 3.82311463]
[99.23931122 9.46984673]
[96.99297333 15.79926014]
[98.86058807 30.68254089]
[100.72820282 45.56581879]
[102.59580994 60.44910049]
[109.31034851 61.47300720]
[115.75148773 63.62827301]
[121.73007202 66.85160828]
[127.07054901 71.04836273]
[131.61608887 76.09529114]
[135.23320007 81.84419250]
[137.81568909 88.12624359]
[139.28768921 94.75697327]
[139.60600281 101.54167175]
[138.76126099 108.28108978]
[136.77828979 114.77733612]
[133.71530151 120.83963776]
[129.66224670 126.28997803]
[124.73815918 130.96829224]
[119.08761597 134.73722839]
[123.69318390 149.01268005]
[128.29875183 163.28814697]
[132.90431213 177.56361389]
[137.50987244 191.83906555]
[153.51524353 192.63798523]
[167.92518616 203.17707825]
[174.89035034 221.59028625]
[189.65641785 224.22915649]
[204.42247009 226.86801147]
[219.65327454 220.78897095]
[232.36404419 231.15083313]
[229.47903442 247.29421997]
[213.96609497 252.61218262]
[201.78359985 241.63406372]
[187.01754761 238.99520874]
[172.25149536 236.35633850]
[166.45082092 241.11051941]
[180.48593140 246.40350342]
[182.91952515 261.20477295]
[171.31797791 270.71286011]
[157.28298950 265.41958618]
[154.84948730 250.61888123]
[149.04881287 255.37306213]
[148.73675537 270.36981201]
[148.42469788 285.36657715]
[148.11264038 300.36331177]
[147.80058289 315.36007690]
[147.48852539 330.35681152]
[147.17646790 345.35357666]
[146.86441040 360.35034180]
[146.55236816 375.34707642]
[146.24031067 390.34384155]
[145.92825317 405.34060669]
[145.61619568 420.33734131]
[160.10913086 424.53463745]
[173.02139282 432.34078979]
[183.47259521 443.22354126]
[190.75016785 456.44094849]
[194.35791016 471.09176636]
[194.04983521 486.17709351]
[189.84695435 500.66842651]
[182.03582764 513.57763672]
[171.14901733 524.02465820]
[157.92883301 531.29711914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[26 110]
[27 109]
[28 108]
[29 107]
[30 106]
[32 49]
[33 48]
[35 46]
[36 45]
[37 44]
[38 43]
[54 91]
[55 90]
[56 89]
[57 88]
[58 85]
[59 84]
[60 83]
[61 82]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
