%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACGCUACUGGGGGGGGGGCCUACCUAUCUCCCCUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAxxxxxxxxxxAACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCCCCCCCCCCCACCCUACU\
) } def
/len { sequence length } bind def

/coor [
[75.70785522 370.64013672]
[63.14963150 362.28897095]
[53.06340790 351.07653809]
[46.08321762 337.70761108]
[42.64783096 323.02261353]
[42.97320938 307.94467163]
[47.03889465 293.42153931]
[54.58931351 280.36621094]
[65.14984131 269.59930420]
[78.05663300 261.79766846]
[92.49836731 257.45172119]
[91.87438965 242.46470642]
[91.25041199 227.47769165]
[90.62643433 212.49067688]
[90.00245667 197.50366211]
[89.37847900 182.51664734]
[88.75450134 167.52963257]
[88.13052368 152.54260254]
[87.50654602 137.55558777]
[86.88256836 122.56858063]
[80.68459320 96.63654327]
[68.79221344 87.49481201]
[56.89983749 78.35308075]
[43.65724945 71.30794525]
[29.43047142 66.55413055]
[15.20369148 61.80031204]
[0.97691268 57.04649734]
[-13.24986649 52.29268265]
[-27.66208267 48.13479614]
[-42.23478699 44.58003235]
[-56.80748749 41.02527237]
[-65.82487488 53.23028564]
[-78.79312897 61.03205109]
[-93.72003174 63.26837540]
[-108.32635498 59.62928391]
[-120.39384460 50.69953156]
[-128.10212708 37.86489868]
[-130.30328369 23.09722710]
[-144.87599182 19.54246521]
[-159.44869995 15.98770332]
[-174.02139282 12.43294144]
[-189.60171509 17.55012512]
[-201.64141846 6.41559553]
[-197.75508118 -9.51639843]
[-181.94064331 -13.85638618]
[-170.46662903 -2.13976192]
[-155.89393616 1.41500008]
[-141.32122803 4.96976185]
[-126.74852753 8.52452374]
[-117.99459076 -3.57084203]
[-105.24220276 -11.41443920]
[-90.41831207 -13.78450108]
[-75.77693939 -10.28911781]
[-63.55641937 -1.43064046]
[-55.63725281 11.46625042]
[-53.25272751 26.45256805]
[-38.68002319 30.00732994]
[-24.10732079 33.56209183]
[-21.60866356 32.16064835]
[-18.38693237 31.69757843]
[-14.80915642 32.46007156]
[-11.34167576 34.59259033]
[-8.49605179 38.06590271]
[5.73072767 42.81971741]
[19.95750618 47.57353210]
[34.18428421 52.32734680]
[48.41106415 57.08116150]
[38.96092224 45.43235397]
[33.97404861 31.28558350]
[34.03026199 16.28568840]
[39.12302399 2.17669344]
[48.66021347 -9.40096092]
[61.53293991 -17.10115051]
[76.24450684 -20.02857971]
[91.08440399 -17.84288025]
[104.32722473 -10.79818058]
[114.43322754 0.28643686]
[120.22739410 14.12217426]
[121.03604126 29.10036087]
[116.76515961 43.47949600]
[107.91130829 55.58773041]
[95.50392151 64.01725006]
[80.98559570 67.78795624]
[66.04157257 66.46070099]
[77.93395233 75.60243225]
[89.82633209 84.74416351]
[83.62622833 71.08551788]
[88.18572998 56.79527664]
[101.15075684 49.25152969]
[115.82743073 52.34913254]
[124.63816071 64.48877716]
[123.03394318 79.40274811]
[111.84111786 89.39164734]
[126.41381836 85.83688354]
[140.98652649 82.28212738]
[141.01428223 67.20689392]
[144.64964294 52.57652664]
[151.68127441 39.24162292]
[161.70034790 27.97745514]
[174.12438965 19.43890572]
[188.23104858 14.12239265]
[203.20021057 12.33701324]
[218.16159058 14.18656731]
[232.24533081 19.56352234]
[244.63262939 28.15527153]
[254.60331726 39.46230316]
[261.57769775 52.82723618]
[265.15029907 67.47305298]
[265.11340332 82.54826355]
[261.46917725 97.17642212]
[254.42945862 110.50705719]
[244.40354919 121.76515198]
[231.97433472 130.29617310]
[217.86445618 135.60412598]
[202.89421082 137.38043213]
[187.93395996 135.52180481]
[173.85348511 130.13632202]
[161.47138977 121.53705597]
[151.50756836 110.22398376]
[144.54129028 96.85482788]
[129.96858215 100.40959167]
[115.39588165 103.96434784]
[130.39500427 104.12621307]
[141.41355896 114.30421448]
[142.76261902 129.24342346]
[133.74568176 141.23069763]
[119.01819611 144.07698059]
[106.18400574 136.31272888]
[101.86958313 121.94460297]
[102.49356079 136.93161011]
[103.11753845 151.91862488]
[103.74151611 166.90565491]
[104.36549377 181.89266968]
[104.98947144 196.87968445]
[105.61344910 211.86669922]
[106.23742676 226.85371399]
[106.86140442 241.84072876]
[107.48538208 256.82775879]
[122.23838806 259.95819092]
[135.74902344 266.65994263]
[147.16799927 276.51171875]
[155.77751160 288.89425659]
[161.03636169 303.02917480]
[162.61396790 318.02789307]
[160.41116333 332.94763184]
[154.56642151 346.85049438]
[145.44712830 358.86254883]
[133.62657166 368.22869873]
[119.84775543 374.36019897]
[104.97685242 376.87161255]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 86]
[22 85]
[23 84]
[24 67]
[25 66]
[26 65]
[27 64]
[28 63]
[29 58]
[30 57]
[31 56]
[38 49]
[39 48]
[40 47]
[41 46]
[93 122]
[94 121]
[95 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
