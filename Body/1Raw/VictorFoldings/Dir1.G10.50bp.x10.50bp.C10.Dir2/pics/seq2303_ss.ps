%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUUGUAGGGGGGGGGGGAGAGAGUAAAAAAUUUAACACCCAUAGUAGGCCUAAAAGCAGCCACCAAUxxxxxxxxxxUAGGCACAGCUCUAAGCCUCCUUAUUCGAGCCGAGCUGGGCCAGCCAGGCCCCCCCCCCCAACCUUCUAG\
) } def
/len { sequence length } bind def

/coor [
[83.46485138 365.06942749]
[70.59157562 357.16656494]
[60.46728134 345.95605469]
[53.91270065 332.34671021]
[51.45917892 317.44177246]
[53.30561447 302.44952393]
[59.30232620 288.58532715]
[68.96318817 276.97308350]
[81.50503540 268.55413818]
[95.91115570 264.01095581]
[95.59909821 249.01420593]
[95.28704834 234.01745605]
[94.97499084 219.02070618]
[94.66293335 204.02395630]
[94.35087585 189.02719116]
[94.03881836 174.03044128]
[93.72676086 159.03369141]
[93.41471100 144.03694153]
[93.10265350 129.04017639]
[92.79059601 114.04342651]
[86.79718018 109.53466797]
[72.99447632 115.40708923]
[74.81034851 100.51713562]
[68.81693268 96.00836945]
[61.65452576 106.78584290]
[49.45328140 109.67522430]
[38.91616821 103.65222168]
[24.34346581 107.20698547]
[9.77076340 110.76174164]
[-4.80193949 114.31650543]
[-18.75698471 123.94422913]
[-31.87159348 113.19977570]
[-25.17751884 97.62332916]
[-8.35670185 99.74380493]
[6.21600103 96.18904114]
[20.78870392 92.63427734]
[35.36140823 89.07951355]
[47.33400345 76.28667450]
[64.95977020 81.51277161]
[78.10284424 81.04578400]
[89.22633362 85.20234680]
[97.01277924 92.96039581]
[103.07579041 79.24034882]
[93.48406219 68.81394958]
[88.61688995 55.55522537]
[89.18117523 41.48608017]
[95.05824280 28.73856926]
[105.32681274 19.23178291]
[118.40728760 14.38296223]
[132.30467224 14.89627838]
[138.65180969 1.30532706]
[144.99893188 -12.28562355]
[151.34606934 -25.87657547]
[139.30592346 -16.93033791]
[124.31938171 -16.29508781]
[111.56536865 -24.19034958]
[105.45132446 -37.88773727]
[108.09008789 -52.65380859]
[118.56977844 -63.38582230]
[133.26890564 -66.37508392]
[147.10784912 -60.58859253]
[155.30435181 -48.02565765]
[154.05747986 -62.97374344]
[152.81060791 -77.92182922]
[138.08009338 -81.36672211]
[125.13613129 -89.19671631]
[115.24681854 -100.64472198]
[109.38102722 -114.58916473]
[108.11341095 -129.66392517]
[111.56816864 -144.39212036]
[119.40683746 -157.33084106]
[130.86146545 -167.21247864]
[144.80984497 -173.06893921]
[159.88545227 -174.32644653]
[174.61132812 -170.86181641]
[187.54478455 -163.01448059]
[197.41874695 -151.55323792]
[203.26585388 -137.60093689]
[204.51325989 -122.52449799]
[201.03877258 -107.80094147]
[193.18276978 -94.87273407]
[181.71490479 -85.00646210]
[167.75869751 -79.16870880]
[169.00556946 -64.22061920]
[170.25244141 -49.27253342]
[169.78817749 -46.43500519]
[169.00013733 -43.71526337]
[182.52432251 -50.20342636]
[196.04852295 -56.69159317]
[209.57270813 -63.17975616]
[223.09689331 -69.66792297]
[236.62109375 -76.15608978]
[249.55914307 -83.74599457]
[261.82150269 -92.38510895]
[274.08389282 -101.02423096]
[286.34625244 -109.66334534]
[292.73904419 -124.76513672]
[309.04501343 -126.51089478]
[318.48995972 -113.10473633]
[311.35772705 -98.33776855]
[294.98535156 -97.40097809]
[282.72299194 -88.76185608]
[270.46063232 -80.12274170]
[258.19827271 -71.48362732]
[273.05023193 -69.38152313]
[283.94113159 -59.06705475]
[286.84698486 -44.35121536]
[280.69415283 -30.67120934]
[267.75595093 -23.08153152]
[252.81283569 -24.38641357]
[241.38594055 -34.10372925]
[237.69731140 -48.64312363]
[243.10925293 -62.63189697]
[229.58506775 -56.14373016]
[216.06086731 -49.65556717]
[202.53668213 -43.16740036]
[189.01249695 -36.67923737]
[175.48829651 -30.19107246]
[164.93701172 -19.52944565]
[158.58988953 -5.93849421]
[152.24275208 7.65245628]
[145.89562988 21.24340820]
[156.22918701 33.39321136]
[160.25939941 48.88556290]
[157.13389587 64.64465332]
[147.42620850 77.51893616]
[133.03131104 84.91139984]
[116.79584503 85.30335999]
[110.73283386 99.02341461]
[107.78734589 113.73137665]
[108.09940338 128.72813416]
[108.41146088 143.72488403]
[108.72351837 158.72163391]
[109.03557587 173.71838379]
[109.34763336 188.71514893]
[109.65968323 203.71189880]
[109.97174072 218.70864868]
[110.28379822 233.70539856]
[110.59585571 248.70216370]
[110.90791321 263.69891357]
[125.49055481 267.63885498]
[138.37176514 275.52880859]
[148.50730896 286.72912598]
[155.07556152 300.33187866]
[157.54405212 315.23434448]
[155.71267700 330.22842407]
[149.72990417 344.09866333]
[140.08070374 355.72061157]
[127.54732513 364.15216064]
[113.14577484 368.70977783]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[24 39]
[27 37]
[28 36]
[29 35]
[30 34]
[42 129]
[43 128]
[50 122]
[51 121]
[52 120]
[53 119]
[62 85]
[63 84]
[64 83]
[87 118]
[88 117]
[89 116]
[90 115]
[91 114]
[92 113]
[93 104]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
