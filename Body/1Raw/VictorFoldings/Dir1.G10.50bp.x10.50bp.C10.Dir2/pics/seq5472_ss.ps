%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACACCCUUAGGGGGGGGGGAUUCCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUxxxxxxxxxxGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUUCACACGAGAACCCCCCCCCCAACACCCUCA\
) } def
/len { sequence length } bind def

/coor [
[83.71412659 414.77160645]
[69.86818695 408.75558472]
[58.15952682 399.22616577]
[49.45700073 386.89050293]
[44.40639877 372.66397095]
[43.38251114 357.60229492]
[46.46130753 342.82312012]
[53.41432953 329.42318726]
[63.72561264 318.39688110]
[76.62999725 310.56234741]
[91.16988373 306.50103760]
[91.16988373 291.50103760]
[91.16988373 276.50103760]
[91.16988373 261.50103760]
[91.16988373 246.50103760]
[91.16988373 231.50103760]
[91.16988373 216.50103760]
[91.16988373 201.50103760]
[91.16988373 186.50103760]
[91.16988373 171.50103760]
[88.00430298 164.76867676]
[91.32916260 156.18980408]
[91.64122009 141.19305420]
[91.95327759 126.19629669]
[86.28404999 123.72484589]
[81.31337738 120.04508972]
[77.29441833 115.34444427]
[74.43184662 109.86230469]
[72.87145996 103.87787628]
[58.00841522 101.85553741]
[41.17048645 109.23551941]
[27.69824791 98.03289795]
[12.79634571 96.32020569]
[-2.10555649 94.60751343]
[-17.00745964 92.89482880]
[-31.90936089 91.18213654]
[-46.81126404 89.46944427]
[-59.03210068 99.49075317]
[-74.75123596 97.85233307]
[-84.64277649 85.52622986]
[-82.83825684 69.82529449]
[-70.40825653 60.06462479]
[-54.72728348 62.03504562]
[-45.09857559 74.56754303]
[-30.19667053 76.28023529]
[-15.29476929 77.99291992]
[-0.39286673 79.70561218]
[14.50903606 81.41830444]
[29.41093826 83.13098907]
[39.11614609 75.84290314]
[51.58220291 77.19065857]
[60.03075027 86.99249268]
[74.89379883 89.01482391]
[79.50592041 81.80691528]
[86.11632538 76.37291718]
[94.08044434 73.24267578]
[102.62175751 72.72140503]
[110.90743256 74.85992432]
[120.41579437 63.25858307]
[109.74752808 52.69815826]
[100.11504364 41.18513107]
[91.60299683 28.82068634]
[84.28618622 15.71348190]
[78.22892761 1.97870731]
[73.48443604 -12.26293278]
[70.09442139 -26.88627815]
[68.08866119 -41.76281738]
[67.48480225 -56.76181030]
[68.28813171 -71.75144196]
[70.49160004 -86.59999084]
[74.07584381 -101.17694092]
[79.00936127 -115.35420990]
[85.24879456 -129.00720215]
[92.73931122 -142.01591492]
[101.41507721 -154.26603699]
[111.19985962 -165.64990234]
[122.00765991 -176.06748962]
[133.74349976 -185.42721558]
[146.30422974 -193.64685059]
[159.57948303 -200.65414429]
[173.45257568 -206.38751221]
[187.80160522 -210.79658508]
[202.50045776 -213.84260559]
[217.41996765 -215.49879456]
[232.42900085 -215.75062561]
[247.39566040 -214.59584045]
[262.18841553 -212.04463196]
[276.67727661 -208.11940002]
[290.73489380 -202.85464478]
[304.23773193 -196.29661560]
[317.06713867 -188.50297546]
[329.11035156 -179.54220581]
[340.26153564 -169.49305725]
[350.42269897 -158.44383240]
[359.50454712 -146.49163818]
[367.42721558 -133.74151611]
[374.12115479 -120.30553436]
[379.52749634 -106.30174255]
[383.59872437 -91.85323334]
[386.29904175 -77.08696747]
[387.60476685 -62.13271713]
[387.50442505 -47.12190628]
[385.99884033 -32.18645477]
[383.10128784 -17.45761681]
[378.83721924 -3.06483364]
[373.24411011 10.86540794]
[366.37112427 24.21068573]
[358.27862549 36.85371780]
[349.03778076 48.68339539]
[338.72979736 59.59575653]
[327.44522095 69.49490356]
[315.28326416 78.29383087]
[302.35079956 85.91522217]
[288.76147461 92.29209137]
[274.63470459 97.36840820]
[260.09463501 101.09954071]
[245.26908875 103.45272064]
[230.28833008 104.40725708]
[215.28399658 103.95475769]
[200.38798523 102.09920502]
[185.73117065 98.85691071]
[171.44238281 94.25635529]
[157.64720154 88.33798218]
[144.46682739 81.15380096]
[132.01713562 72.76694489]
[122.50877380 84.36828613]
[125.70800781 109.49178314]
[106.95002747 126.50834656]
[106.63797760 141.50509644]
[106.32592010 156.50186157]
[106.16988373 171.50103760]
[106.16988373 186.50103760]
[106.16988373 201.50103760]
[106.16988373 216.50103760]
[106.16988373 231.50103760]
[106.16988373 246.50103760]
[106.16988373 261.50103760]
[106.16988373 276.50103760]
[106.16988373 291.50103760]
[106.16988373 306.50103760]
[120.70977020 310.56234741]
[133.61415100 318.39688110]
[143.92543030 329.42318726]
[150.87844849 342.82312012]
[153.95726013 357.60229492]
[152.93336487 372.66397095]
[147.88276672 386.89050293]
[139.18023682 399.22616577]
[127.47157288 408.75558472]
[113.62564087 414.77160645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[24 128]
[29 53]
[30 52]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[58 126]
[59 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
