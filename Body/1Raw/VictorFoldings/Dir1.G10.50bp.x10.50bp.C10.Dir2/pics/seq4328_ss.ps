%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCUCCUAGGGGGGGGGGUGAAAAAACUUCCUACCACUCACCCUAGCAUUACUUAUAUGAUAUGUCUCxxxxxxxxxxGGCUUACUUCUCUUCCUUCUCUCCUUAAUGACAUUAACACUAUUCUCACCCCCCCCCCCCAGACCUCCUA\
) } def
/len { sequence length } bind def

/coor [
[73.45092773 153.45297241]
[60.99306107 145.17224121]
[50.98559952 134.05380249]
[44.05722046 120.79610443]
[40.64315414 106.23200226]
[40.95788193 91.27640533]
[44.98162460 76.86882019]
[52.46161652 63.91433716]
[62.92796326 53.22674942]
[75.72316742 45.47745132]
[90.04344940 41.15325165]
[89.41947174 26.16623497]
[88.79549408 11.17921829]
[88.17151642 -3.80779743]
[87.54753876 -18.79481316]
[86.92356110 -33.78182983]
[86.29958344 -48.76884460]
[85.67560577 -63.75586319]
[85.05162811 -78.74288177]
[84.42765045 -93.72989655]
[83.80367279 -108.71691132]
[83.17969513 -123.70392609]
[82.55571747 -138.69094849]
[67.55376434 -138.97294617]
[52.59620667 -140.16023254]
[37.73762512 -142.24847412]
[23.03223991 -145.23004150]
[8.53370667 -149.09407043]
[-5.70507050 -153.82644653]
[-19.63213539 -159.40991211]
[-33.19666672 -165.82408142]
[-46.34917450 -173.04554749]
[-59.04166031 -181.04798889]
[-71.22781372 -189.80216980]
[-82.86316681 -199.27616882]
[-93.90526581 -209.43542480]
[-104.31381989 -220.24282837]
[-114.05084229 -231.65898132]
[-123.08081055 -243.64221191]
[-131.37077332 -256.14880371]
[-138.89047241 -269.13311768]
[-145.61248779 -282.54776001]
[-151.51226807 -296.34378052]
[-156.56831360 -310.47088623]
[-160.76214600 -324.87747192]
[-164.07847595 -339.51098633]
[-166.50520325 -354.31805420]
[-168.03347778 -369.24462891]
[-168.65771484 -384.23623657]
[-168.37564087 -399.23818970]
[-167.18829346 -414.19573975]
[-165.09997559 -429.05432129]
[-162.11834717 -443.75970459]
[-158.25425720 -458.25820923]
[-153.52180481 -472.49697876]
[-147.93829346 -486.42401123]
[-141.52404785 -499.98849487]
[-134.30252075 -513.14099121]
[-126.30002594 -525.83343506]
[-117.54577637 -538.01953125]
[-108.07172394 -549.65484619]
[-97.91242981 -560.69689941]
[-87.10496521 -571.10540771]
[-75.68876648 -580.84234619]
[-63.70549393 -589.87231445]
[-51.19887161 -598.16217041]
[-38.21453094 -605.68182373]
[-24.79985237 -612.40380859]
[-11.00378704 -618.30352783]
[3.12332535 -623.35949707]
[17.52993584 -627.55322266]
[32.16347885 -630.86950684]
[46.97055054 -633.29620361]
[61.89712906 -634.82440186]
[76.88874817 -635.44854736]
[91.89070129 -635.16638184]
[106.84824371 -633.97900391]
[121.70680237 -631.89062500]
[136.41217041 -628.90887451]
[150.91065979 -625.04473877]
[165.14939880 -620.31225586]
[179.07640076 -614.72863770]
[192.64088440 -608.31433105]
[205.79331970 -601.09271240]
[218.48573303 -593.09020996]
[230.67179871 -584.33587646]
[242.30706787 -574.86175537]
[253.34907532 -564.70245361]
[263.75753784 -553.89489746]
[273.49444580 -542.47869873]
[282.52429199 -530.49536133]
[290.81414795 -517.98870850]
[298.33374023 -505.00433350]
[305.05560303 -491.58963013]
[310.95526123 -477.79351807]
[316.01116943 -463.66638184]
[320.20489502 -449.25976562]
[323.52108765 -434.62619019]
[325.94766235 -419.81912231]
[327.47579956 -404.89254761]
[328.09991455 -389.90090942]
[327.81768799 -374.89895630]
[326.63018799 -359.94143677]
[324.54174805 -345.08288574]
[321.55996704 -330.37753296]
[317.69573975 -315.87905884]
[312.96316528 -301.64035034]
[307.37951660 -287.71334839]
[300.96517944 -274.14889526]
[293.74349976 -260.99649048]
[285.74090576 -248.30412292]
[276.98654175 -236.11808777]
[267.51239014 -224.48286438]
[257.35296631 -213.44091797]
[246.54542542 -203.03251648]
[235.12913513 -193.29565430]
[223.14578247 -184.26585388]
[210.63906860 -175.97605896]
[197.65466309 -168.45654297]
[184.23992920 -161.73471069]
[170.44380188 -155.83511353]
[156.31665039 -150.77928162]
[141.90998840 -146.58564758]
[127.27642059 -143.26951599]
[112.46932220 -140.84298706]
[97.54273224 -139.31492615]
[98.16670990 -124.32790375]
[98.79068756 -109.34088898]
[99.41466522 -94.35387421]
[100.03864288 -79.36685181]
[100.66262054 -64.37983704]
[101.28659821 -49.39282227]
[101.91057587 -34.40580750]
[102.53455353 -19.41879082]
[103.15853119 -4.43177509]
[103.78250885 10.55524158]
[104.40648651 25.54225731]
[105.03046417 40.52927399]
[119.66062164 43.64813614]
[133.05570984 50.30701447]
[144.37423706 60.08759689]
[152.90518188 72.37547302]
[158.11264038 86.39871979]
[159.66944885 101.27639771]
[157.47784424 116.07389069]
[151.67549133 129.86163330]
[142.62687683 141.77345276]
[130.90046692 151.06108093]
[117.23287964 157.14106750]
[102.48272705 159.63143921]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[23 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
