%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUUCGAAGGGGGGGGGGUUUGCAAUUCAAUAUGAAAAUCACCUCGGAGCUGGUAAAAAGAGGCCUAAxxxxxxxxxxAUCUCCUUAAUUAUAACAUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCCCCCCCCCCCUUCUUCGAA\
) } def
/len { sequence length } bind def

/coor [
[84.13337708 424.32806396]
[70.28743744 418.31201172]
[58.57877350 408.78262329]
[49.87624741 396.44692993]
[44.82564545 382.22042847]
[43.80175400 367.15875244]
[46.88055420 352.37957764]
[53.83357620 338.97964478]
[64.14485931 327.95330811]
[77.04924011 320.11880493]
[91.58912659 316.05749512]
[91.58912659 301.05749512]
[91.58912659 286.05749512]
[91.58912659 271.05749512]
[91.58912659 256.05749512]
[91.58912659 241.05749512]
[91.58912659 226.05749512]
[91.58912659 211.05749512]
[91.58912659 196.05749512]
[91.58912659 181.05749512]
[79.30918121 175.00254822]
[70.80613708 164.18693542]
[67.79179382 150.69540405]
[70.91288757 137.16014099]
[79.61338806 126.24719238]
[92.23256683 120.13145447]
[92.54462433 105.13470459]
[90.24052429 101.95232391]
[89.38129425 97.75620270]
[90.39274597 93.22904205]
[93.37313843 89.22016907]
[94.62001038 74.27207947]
[95.86688995 59.32399368]
[97.11376190 44.37590790]
[98.36063385 29.42782021]
[99.60751343 14.47973347]
[100.85438538 -0.46835360]
[87.36726379 -4.68674183]
[75.07036591 -11.63687038]
[64.50937653 -21.00726509]
[56.15230179 -32.37912369]
[50.36874390 -45.24501801]
[47.41353989 -59.03155899]
[47.41553879 -73.12493134]
[50.37199783 -86.89823151]
[56.14880371 -99.73934937]
[64.48656464 -111.07817841]
[75.01226044 -120.41191101]
[87.25590515 -127.32735443]
[100.67158508 -131.51921082]
[114.66173553 -132.80355835]
[116.52934265 -147.68684387]
[118.39695740 -162.57012939]
[120.26457214 -177.45339966]
[105.71295929 -181.17546082]
[91.74259949 -186.69201660]
[78.57383728 -193.91607666]
[66.41436005 -202.73368835]
[55.45594025 -213.00579834]
[45.87140274 -224.57040405]
[37.81191635 -237.24508667]
[31.40458488 -250.82998657]
[26.75046539 -265.11083984]
[23.92295647 -279.86239624]
[22.96665573 -294.85198975]
[23.89664459 -309.84329224]
[26.69825363 -324.59979248]
[31.32729912 -338.88876343]
[37.71077347 -352.48489380]
[45.74800110 -365.17370605]
[55.31222534 -376.75509644]
[66.25260162 -387.04644775]
[78.39658356 -395.88537598]
[91.55264282 -403.13253784]
[105.51329041 -408.67361450]
[120.05834961 -412.42120361]
[134.95841980 -414.31622314]
[149.97851562 -414.32879639]
[164.88172913 -412.45867920]
[179.43302917 -408.73538208]
[193.40292358 -403.21765137]
[206.57107544 -395.99249268]
[218.72981262 -387.17385864]
[229.68736267 -376.90081787]
[239.27093506 -365.33541870]
[247.32934570 -352.66003418]
[253.73553467 -339.07461548]
[258.38845825 -324.79336548]
[261.21472168 -310.04156494]
[262.16976929 -295.05187988]
[261.23852539 -280.06066895]
[258.43566895 -265.30441284]
[253.80541992 -251.01582336]
[247.42079163 -237.42024231]
[239.38249207 -224.73208618]
[229.81730652 -213.15148926]
[218.87605286 -202.86108398]
[206.73133850 -194.02316284]
[193.57466125 -186.77711487]
[179.61354065 -181.23721313]
[165.06817627 -177.49084473]
[150.16793823 -175.59707642]
[135.14785767 -175.58578491]
[133.28024292 -160.70251465]
[131.41262817 -145.81922913]
[129.54501343 -130.93594360]
[144.47213745 -125.39743042]
[157.66557312 -116.47024536]
[168.36940002 -104.66105652]
[175.96919250 -90.64182281]
[180.02732849 -75.21149445]
[180.30812073 -59.25053406]
[176.79154968 -43.67065430]
[169.67462158 -29.36274719]
[159.36035156 -17.14593697]
[146.43487549 -7.72068644]
[131.63426208 -1.62863576]
[115.80247498 0.77852094]
[114.55559540 15.72660828]
[113.30872345 30.67469406]
[112.06185150 45.62278366]
[110.81497192 60.57086945]
[109.56809998 75.51895905]
[108.32122803 90.46704102]
[107.54138184 105.44675446]
[107.22932434 120.44351196]
[121.43997192 128.83613586]
[129.44989014 143.15873718]
[129.16447449 159.47279358]
[120.75557709 173.34623718]
[106.58912659 181.05749512]
[106.58912659 196.05749512]
[106.58912659 211.05749512]
[106.58912659 226.05749512]
[106.58912659 241.05749512]
[106.58912659 256.05749512]
[106.58912659 271.05749512]
[106.58912659 286.05749512]
[106.58912659 301.05749512]
[106.58912659 316.05749512]
[121.12901306 320.11880493]
[134.03340149 327.95330811]
[144.34468079 338.97964478]
[151.29769897 352.37957764]
[154.37649536 367.15875244]
[153.35261536 382.22042847]
[148.30200195 396.44692993]
[139.59948730 408.78262329]
[127.89082336 418.31201172]
[114.04488373 424.32806396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 126]
[27 125]
[31 124]
[32 123]
[33 122]
[34 121]
[35 120]
[36 119]
[37 118]
[51 106]
[52 105]
[53 104]
[54 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
