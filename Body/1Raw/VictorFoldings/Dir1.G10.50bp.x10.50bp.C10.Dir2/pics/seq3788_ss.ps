%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUAUGAAGGGGGGGGGGGUCACCCUAGCCAUCAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUxxxxxxxxxxUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCAUACACCCCCCCCCCCCUCCUAUGAA\
) } def
/len { sequence length } bind def

/coor [
[86.36729431 392.25198364]
[72.52135468 386.23596191]
[60.81269455 376.70654297]
[52.11016846 364.37088013]
[47.05956650 350.14434814]
[46.03567886 335.08267212]
[49.11447525 320.30349731]
[56.06749725 306.90356445]
[66.37878418 295.87725830]
[79.28316498 288.04272461]
[93.82305145 283.98141479]
[93.82305145 268.98141479]
[93.82305145 253.98141479]
[93.82305145 238.98141479]
[93.82305145 223.98141479]
[93.82305145 208.98141479]
[93.82305145 193.98141479]
[93.82305145 178.98141479]
[93.82305145 163.98141479]
[93.82305145 148.98141479]
[93.82305145 133.98141479]
[93.82305145 118.98142242]
[88.62216949 133.05091858]
[75.32935333 140.00082397]
[60.80772400 136.24287415]
[52.55481720 123.71732330]
[54.83163452 108.89112854]
[66.46264648 99.41909027]
[81.44461823 100.19248199]
[67.66223145 94.27251434]
[53.87985229 88.35255432]
[40.09747314 82.43258667]
[26.31509018 76.51262665]
[12.53270912 70.59266663]
[-5.66489315 73.20554352]
[-15.65421391 58.81063461]
[-29.55677032 53.17868042]
[-43.45932388 47.54672241]
[-53.37739944 58.98833847]
[-66.47441864 66.58746338]
[-81.32972717 69.51980591]
[-96.33192444 67.46728516]
[-109.85368347 60.65253830]
[-120.42826843 49.81478500]
[-126.90862274 36.12962341]
[-128.59181213 21.08151436]
[-125.29525757 6.30276489]
[-117.37654114 -6.60353613]
[-105.69461823 -16.23740959]
[-91.51667023 -21.55384636]
[-76.38060760 -21.97615814]
[-61.92828369 -17.45853615]
[-49.72736740 -8.49101639]
[-41.10132980 3.95366931]
[-36.98585892 18.52561569]
[-37.82736969 33.64416504]
[-23.92481232 39.27612305]
[-10.02225685 44.90808105]
[1.27737951 40.47800827]
[12.93014526 45.10747910]
[18.45267296 56.81027985]
[32.23505402 62.73024368]
[46.01743317 68.65020752]
[59.79981613 74.57016754]
[73.58219910 80.49013519]
[87.36457825 86.41009521]
[74.11753845 79.37333679]
[64.43157959 67.91986084]
[59.69239426 53.68820190]
[60.57796478 38.71436310]
[66.96160889 25.14052582]
[77.93006897 14.90857410]
[91.91419220 9.48230362]
[106.91338348 9.63800430]
[120.78184509 15.35340118]
[131.53553772 25.81084251]
[137.63603210 39.51427460]
[138.21057129 54.50326920]
[133.17695618 68.63347626]
[123.25533295 79.88342285]
[109.86336517 86.64414978]
[123.76591492 81.01219177]
[137.66847229 75.38024139]
[151.57102966 69.74828339]
[165.47358704 64.11632538]
[175.35902405 51.76364517]
[190.06021118 54.15623093]
[203.78025818 48.09321594]
[217.30444336 41.60505295]
[230.82864380 35.11688614]
[233.86614990 24.58793259]
[242.05297852 17.63959122]
[252.49797058 16.40616035]
[261.68469238 21.05762100]
[275.46707153 15.13765812]
[289.24945068 9.21769428]
[289.01681519 -5.98146057]
[294.62298584 -20.11083603]
[305.21307373 -31.01580429]
[319.17218018 -37.03343582]
[334.37161255 -37.24608994]
[348.49362183 -31.62133217]
[359.38464355 -21.01690292]
[365.38391113 -7.04989624]
[365.57656860 8.14981842]
[359.93322754 22.26439476]
[349.31448364 33.14146423]
[335.33959961 39.12235260]
[320.13964844 39.29501343]
[306.03250122 33.63312149]
[295.16940308 23.00007629]
[281.38702393 28.92004013]
[267.60464478 34.84000397]
[257.27658081 51.14216614]
[237.31680298 48.64107895]
[223.79261780 55.12924194]
[210.26841736 61.61740875]
[208.75976562 64.87185669]
[205.56477356 67.53526306]
[200.98930359 68.80704498]
[195.69215393 68.05878448]
[186.80113220 80.00863647]
[171.10554504 78.01888275]
[157.20298767 83.65084076]
[143.30043030 89.28279114]
[129.39787292 94.91474915]
[115.49531555 100.54670715]
[115.18410492 110.06739044]
[108.82305145 118.98142242]
[108.82305145 133.98141479]
[108.82305145 148.98141479]
[108.82305145 163.98141479]
[108.82305145 178.98141479]
[108.82305145 193.98141479]
[108.82305145 208.98141479]
[108.82305145 223.98141479]
[108.82305145 238.98141479]
[108.82305145 253.98141479]
[108.82305145 268.98141479]
[108.82305145 283.98141479]
[123.36293793 288.04272461]
[136.26731873 295.87725830]
[146.57859802 306.90356445]
[153.53161621 320.30349731]
[156.61042786 335.08267212]
[155.58653259 350.14434814]
[150.53593445 364.37088013]
[141.83340454 376.70654297]
[130.12474060 386.23596191]
[116.27880859 392.25198364]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[29 66]
[30 65]
[31 64]
[32 63]
[33 62]
[34 61]
[36 58]
[37 57]
[38 56]
[81 127]
[82 126]
[83 125]
[84 124]
[85 123]
[87 121]
[88 117]
[89 116]
[90 115]
[94 113]
[95 112]
[96 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
