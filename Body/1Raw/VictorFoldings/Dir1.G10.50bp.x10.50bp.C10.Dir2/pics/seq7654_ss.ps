%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCAUCCUAGGGGGGGGGGGUCCUCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUxxxxxxxxxxUGAUAUAUAAACUCAGACCCAAACAUUAAUCAGUUCUUCAAAUAUCUACUCCCCCCCCCCCAUCUUCCUA\
) } def
/len { sequence length } bind def

/coor [
[84.83972168 387.34844971]
[70.99378204 381.33242798]
[59.28512192 371.80300903]
[50.58259583 359.46734619]
[45.53199387 345.24081421]
[44.50810242 330.17913818]
[47.58690262 315.39996338]
[54.53992462 302.00006104]
[64.85121155 290.97372437]
[77.75559235 283.13922119]
[92.29547882 279.07788086]
[92.29547882 264.07788086]
[92.29547882 249.07789612]
[92.29547882 234.07789612]
[92.29547882 219.07789612]
[92.29547882 204.07789612]
[92.29547882 189.07789612]
[92.29547882 174.07789612]
[92.29547882 159.07789612]
[92.29547882 144.07789612]
[92.13944244 129.07870483]
[91.82738495 114.08195496]
[83.06117249 101.91011810]
[68.93637085 96.86135864]
[54.81156921 91.81259918]
[40.68676758 86.76384735]
[25.08753586 89.40478516]
[15.70710564 77.83513641]
[1.58230221 72.78638458]
[-5.92497110 85.82020569]
[-15.63904095 97.30396271]
[-27.24764061 106.86849213]
[-40.37760162 114.20633698]
[-54.60684967 119.08160400]
[-69.47797394 121.33759308]
[-84.51292419 120.90177155]
[-99.22840118 117.78814697]
[-113.15135193 112.09681702]
[-125.83421326 104.01073456]
[-136.86927795 93.78982544]
[-145.90184021 81.76265717]
[-152.64151001 68.31584930]
[-156.87164307 53.88166809]
[-158.45626831 38.92410278]
[-157.34443665 23.92398262]
[-153.57189941 9.36349773]
[-147.25991821 -4.28929090]
[-138.61138916 -16.59550285]
[-127.90435028 -27.15954590]
[-115.48297119 -35.64182663]
[-101.74655151 -41.76968002]
[-87.13666534 -45.34611511]
[-72.12294769 -46.25616837]
[-57.18804169 -44.47058487]
[-42.81203461 -40.04676056]
[-29.45705986 -33.12690735]
[-17.55241966 -23.93346786]
[-7.48080301 -12.76197147]
[0.43403095 0.02846147]
[5.93765259 14.02667332]
[8.85314369 28.78267860]
[9.08678246 43.82213211]
[6.63105869 58.66157913]
[20.75586128 63.71033478]
[35.34479141 60.70827484]
[45.73552322 72.63904572]
[59.86032486 77.68779755]
[73.98513031 82.73655701]
[88.10993195 87.78530884]
[75.11958313 80.28525543]
[66.47351837 68.02778625]
[63.76667786 53.27403641]
[67.49838257 38.74563980]
[76.98025513 27.12264061]
[90.46317291 20.54913330]
[105.45993805 20.23773384]
[119.20410156 26.24588585]
[129.16027832 37.46526337]
[133.49186707 51.82623291]
[131.39979553 66.67962646]
[123.27000427 79.28543854]
[110.60506439 87.31723022]
[124.50762177 81.68527222]
[138.41017151 76.05331421]
[152.31272888 70.42135620]
[166.21528625 64.78939819]
[169.97151184 46.09225464]
[184.07482910 33.47747040]
[202.77691650 31.84727478]
[218.59719849 41.67459488]
[232.12139893 35.18642807]
[245.64558411 28.69826508]
[259.16976929 22.21010017]
[263.27493286 16.89453697]
[268.65048218 14.81249714]
[273.39422607 15.74650097]
[287.17660522 9.82653809]
[287.78271484 -5.42454052]
[294.95358276 -18.89827347]
[307.26541138 -27.91944313]
[322.27368164 -30.69688988]
[336.99850464 -26.67914581]
[348.51626587 -16.66394234]
[354.54006958 -2.63980174]
[353.87390137 12.60877132]
[346.65002441 26.05416107]
[334.30276489 35.02677917]
[319.28366089 37.74509811]
[304.57476807 33.66940308]
[293.09655762 23.60891914]
[279.31417847 29.52888298]
[265.65792847 35.73429108]
[252.13374329 42.22245407]
[238.60955811 48.71062088]
[225.08537292 55.19878387]
[225.17788696 66.46253204]
[221.01295471 76.98382568]
[213.16474915 85.20691681]
[202.75514221 89.90029144]
[191.29331970 90.34101868]
[180.45710754 86.42584229]
[171.84724426 78.69195557]
[157.94468689 84.32391357]
[144.04212952 89.95587158]
[130.13957214 95.58782959]
[116.23702240 101.21978760]
[113.12498474 108.84191132]
[106.82413483 113.76989746]
[107.13619232 128.76664734]
[110.46105194 137.34552002]
[107.29547882 144.07789612]
[107.29547882 159.07789612]
[107.29547882 174.07789612]
[107.29547882 189.07789612]
[107.29547882 204.07789612]
[107.29547882 219.07789612]
[107.29547882 234.07789612]
[107.29547882 249.07789612]
[107.29547882 264.07788086]
[107.29547882 279.07788086]
[121.83536530 283.13922119]
[134.73974609 290.97372437]
[145.05102539 302.00006104]
[152.00404358 315.39996338]
[155.08285522 330.17913818]
[154.05895996 345.24081421]
[149.00836182 359.46734619]
[140.30583191 371.80300903]
[128.59716797 381.33242798]
[114.75122833 387.34844971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 129]
[22 128]
[23 69]
[24 68]
[25 67]
[26 66]
[28 64]
[29 63]
[82 126]
[83 125]
[84 124]
[85 123]
[86 122]
[90 115]
[91 114]
[92 113]
[93 112]
[96 111]
[97 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
