%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACACCCACGGGGGGGGGGCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAACUxxxxxxxxxxCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCUCCCCCCCCCCCAACACCCAC\
) } def
/len { sequence length } bind def

/coor [
[75.98923492 523.02404785]
[62.14329529 517.00805664]
[50.43463135 507.47860718]
[41.73210907 495.14294434]
[36.68150711 480.91641235]
[35.65761566 465.85473633]
[38.73641586 451.07559204]
[45.68943405 437.67565918]
[56.00072098 426.64932251]
[68.90509796 418.81481934]
[83.44498444 414.75350952]
[83.44498444 399.75350952]
[83.44498444 384.75350952]
[83.44498444 369.75350952]
[83.44498444 354.75350952]
[83.44498444 339.75350952]
[83.44498444 324.75350952]
[83.44498444 309.75350952]
[83.44498444 294.75350952]
[83.44498444 279.75350952]
[73.17267609 290.68417358]
[58.46817017 293.64685059]
[44.76449585 287.54690552]
[37.12488556 274.63815308]
[38.37202835 259.69009399]
[48.04512024 248.22573853]
[62.57015610 244.48095703]
[76.58042145 249.83935547]
[84.89915466 262.32028198]
[87.38427734 247.52758789]
[89.86939240 232.73487854]
[92.35450745 217.94216919]
[94.83963013 203.14945984]
[97.32474518 188.35675049]
[99.65585327 173.53900146]
[101.83268738 158.69778442]
[99.97684479 155.62805176]
[99.55347443 151.49012756]
[101.05561829 146.98501587]
[104.63623047 143.01025391]
[107.73455811 128.33372498]
[110.83287811 113.65720367]
[93.80757141 114.82510376]
[85.38608551 101.59741974]
[71.72985077 95.39201355]
[58.07360458 89.18660736]
[41.15207291 88.13874054]
[37.47463989 71.58842468]
[52.36014557 63.47312546]
[64.27901459 75.53036499]
[77.93525696 81.73577118]
[91.59149170 87.94117737]
[100.61667633 84.40091705]
[110.49019623 87.23606873]
[116.95498657 95.95046234]
[123.58348846 82.49449921]
[130.21199036 69.03853607]
[129.85110474 63.70099258]
[131.45239258 59.23017120]
[134.34118652 56.23743057]
[137.69677734 54.96953583]
[145.15168762 41.95322800]
[152.47079468 28.86007309]
[159.65330505 15.69149017]
[166.83581543 2.52290797]
[174.01832581 -10.64567471]
[180.92532349 -23.96083069]
[187.55381775 -37.41679382]
[194.18231201 -50.87276077]
[182.04844666 -59.75760269]
[171.64189148 -70.61461639]
[163.27890015 -83.11387634]
[157.21360779 -96.87553406]
[153.63032532 -111.48139954]
[152.63795471 -126.48760986]
[154.26664734 -141.43814087]
[158.46691895 -155.87867737]
[165.11111450 -169.37036133]
[173.99732971 -181.50321960]
[184.85552979 -191.90853882]
[197.35572815 -200.27012634]
[211.11807251 -206.33386230]
[225.72434998 -209.91548157]
[240.73066711 -210.90614319]
[255.68101501 -209.27575684]
[270.12106323 -205.07385254]
[283.61199951 -198.42813110]
[295.74386597 -189.54052734]
[306.14794922 -178.68115234]
[314.50811768 -166.18000793]
[320.57028198 -152.41696167]
[324.15026855 -137.81028748]
[325.13922119 -122.80385590]
[323.50714111 -107.85369110]
[319.30358887 -93.41411591]
[312.65634155 -79.92393494]
[303.76736450 -67.79309082]
[292.90679932 -57.39023209]
[280.40472412 -49.03149033]
[266.64099121 -42.97087479]
[252.03390503 -39.39256668]
[237.02735901 -38.40530014]
[222.07737732 -40.03908157]
[207.63827515 -44.24426270]
[201.00978088 -30.78829765]
[194.38128662 -17.33233070]
[195.06739807 -12.54643917]
[192.70869446 -7.28641558]
[187.18690491 -3.46316552]
[180.00439453 9.70541668]
[172.82188416 22.87399864]
[165.63937378 36.04258347]
[165.19476318 43.46875000]
[158.16799927 49.40813828]
[150.71308899 62.42444611]
[143.66795349 75.66703033]
[137.03945923 89.12300110]
[130.41094971 102.57896423]
[125.50939941 116.75552368]
[122.41107941 131.43205261]
[119.31275940 146.10856628]
[116.67389679 160.87463379]
[114.49705505 175.71583557]
[116.35466766 184.72700500]
[112.11745453 190.84187317]
[109.63233948 205.63458252]
[107.14721680 220.42729187]
[104.66210175 235.22000122]
[102.17697906 250.01269531]
[99.69186401 264.80541992]
[98.44498444 279.75350952]
[98.44498444 294.75350952]
[98.44498444 309.75350952]
[98.44498444 324.75350952]
[98.44498444 339.75350952]
[98.44498444 354.75350952]
[98.44498444 369.75350952]
[98.44498444 384.75350952]
[98.44498444 399.75350952]
[98.44498444 414.75350952]
[112.98487854 418.81481934]
[125.88925934 426.64932251]
[136.20054626 437.67565918]
[143.15356445 451.07559204]
[146.23236084 465.85473633]
[145.20846558 480.91641235]
[140.15786743 495.14294434]
[131.45533752 507.47860718]
[119.74668121 517.00805664]
[105.90074158 523.02404785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 130]
[30 129]
[31 128]
[32 127]
[33 126]
[34 125]
[35 123]
[36 122]
[40 121]
[41 120]
[42 119]
[44 52]
[45 51]
[46 50]
[55 118]
[56 117]
[57 116]
[61 115]
[62 114]
[63 112]
[64 111]
[65 110]
[66 109]
[67 106]
[68 105]
[69 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
