%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCACCCAAGGGGGGGGGGAGCUAAGAUUCUAAUUUAAACUAUUCUCUGUUCUUUCAUGGGGAAGCAGAxxxxxxxxxxGAUUCUAAUUUAAACUAUUCUCUGUUCUUUCAUGGGGAAGCAGAUUUGGGCCCCCCCCCCUACCACCCAA\
) } def
/len { sequence length } bind def

/coor [
[43.07963181 502.93179321]
[28.58994102 498.72329712]
[15.68371201 490.90719604]
[5.24091101 480.01635742]
[-2.02645302 466.79336548]
[-5.62287951 452.13973999]
[-5.30315781 437.05465698]
[-1.08908725 422.56658936]
[6.73200989 409.66336060]
[17.62687874 399.22479248]
[30.85268593 391.96252441]
[45.50767899 388.37176514]
[45.81973648 373.37500000]
[46.13179016 358.37823486]
[46.44384766 343.38150024]
[46.75590515 328.38473511]
[47.06795883 313.38796997]
[47.38001633 298.39123535]
[47.69207382 283.39447021]
[48.00412750 268.39773560]
[44.97929382 261.60095215]
[48.48190689 253.09310913]
[49.10588455 238.10609436]
[49.72986221 223.11907959]
[40.49300385 234.93771362]
[27.09665871 241.68589783]
[12.10167027 242.07362366]
[-1.62551999 236.02679443]
[-11.46082497 224.70129395]
[-15.52412796 210.26213074]
[-13.03869057 195.46948242]
[-4.47962618 183.15110779]
[8.51691437 175.66177368]
[23.46651268 174.43316650]
[37.51140976 179.70013428]
[47.96677780 190.45584106]
[52.83381271 204.64276123]
[57.14139938 190.27458191]
[61.44898224 175.90638733]
[65.75656891 161.53820801]
[51.90152359 167.28605652]
[37.96775818 161.73175049]
[31.86622810 148.02877808]
[37.06110001 133.95706177]
[50.60296249 127.50586700]
[64.80336761 132.33789062]
[71.60011292 145.71125793]
[77.66312408 131.99121094]
[83.72614288 118.27114868]
[89.78915405 104.55109406]
[95.70911407 90.76871490]
[101.48538971 76.92549896]
[107.26165771 63.08227921]
[100.72756195 51.26013184]
[102.19487000 38.02854156]
[110.90162659 28.21698189]
[123.48519135 25.27578354]
[129.54820251 11.55573082]
[135.61122131 -2.16432333]
[141.67424011 -15.88437653]
[135.05712891 -32.04455185]
[142.00836182 -47.69588852]
[157.80084229 -53.39286423]
[163.57710266 -67.23608398]
[169.35337830 -81.07929993]
[169.77981567 -90.27005768]
[175.39651489 -95.14842224]
[181.45951843 -108.86847687]
[187.52253723 -122.58853149]
[193.58555603 -136.30857849]
[181.26885986 -144.95643616]
[170.87617493 -155.84121704]
[162.80694580 -168.54450989]
[157.37133789 -182.57806396]
[154.77828979 -197.40243530]
[155.12745667 -212.44784546]
[158.40542603 -227.13597107]
[164.48620605 -240.90225220]
[173.13606262 -253.21754456]
[184.02250671 -263.60845947]
[196.72711182 -271.67562866]
[210.76153564 -277.10897827]
[225.58633423 -279.69961548]
[240.63169861 -279.34802246]
[255.31929016 -276.06768799]
[269.08459473 -269.98468018]
[281.39846802 -261.33282471]
[291.78762817 -250.44468689]
[299.85275269 -237.73878479]
[305.28381348 -223.70347595]
[307.87207031 -208.87825012]
[307.51803589 -193.83296204]
[304.23529053 -179.14588928]
[298.15005493 -165.38157654]
[289.49621582 -153.06909180]
[278.60641479 -142.68168640]
[265.89920044 -134.61863708]
[251.86302185 -129.18984985]
[237.03736877 -126.60398865]
[221.99214172 -126.96046448]
[207.30560303 -130.24557495]
[201.24258423 -116.52551270]
[195.17958069 -102.80546570]
[189.11656189 -89.08541107]
[183.19659424 -75.30302429]
[177.42033386 -61.45980835]
[171.64405823 -47.61659241]
[178.17446899 -36.46533966]
[177.05302429 -23.39565659]
[168.46696472 -13.22179604]
[155.39428711 -9.82136345]
[149.33126831 3.89868975]
[143.26826477 17.61874390]
[137.20524597 31.33879662]
[143.94630432 46.71462631]
[137.38087463 62.53168488]
[121.10488129 68.85855103]
[115.32860565 82.70177460]
[109.55233765 96.54499054]
[109.59616089 104.66176605]
[103.50920868 110.61411285]
[97.44619751 124.33416748]
[91.38317871 138.05421448]
[85.32016754 151.77427673]
[80.12474823 165.84579468]
[75.81716919 180.21397400]
[71.50958252 194.58215332]
[67.20199585 208.95034790]
[64.71688080 223.74305725]
[64.09290314 238.73007202]
[63.46892548 253.71708679]
[63.00088120 268.70977783]
[62.68882751 283.70654297]
[62.37677002 298.70327759]
[62.06471252 313.70004272]
[61.75265884 328.69680786]
[61.44060135 343.69354248]
[61.12854385 358.69030762]
[60.81649017 373.68704224]
[60.50443268 388.68380737]
[74.99736786 392.88110352]
[87.90962982 400.68722534]
[98.36083984 411.57000732]
[105.63841248 424.78738403]
[109.24615479 439.43823242]
[108.93807983 454.52355957]
[104.73519897 469.01486206]
[96.92407227 481.92413330]
[86.03726196 492.37112427]
[72.81707001 499.64358521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[22 131]
[23 130]
[24 129]
[37 128]
[38 127]
[39 126]
[40 125]
[47 124]
[48 123]
[49 122]
[50 121]
[51 119]
[52 118]
[53 117]
[57 114]
[58 113]
[59 112]
[60 111]
[63 107]
[64 106]
[65 105]
[67 104]
[68 103]
[69 102]
[70 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
