%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAACAGUUGGGGGGGGGGAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCxxxxxxxxxxGCCUCAGAGUACUUCGAGUCUCCCUUCACCAUUUCCGACGGCAUCUACGGCCCCCCCCCCCUCAACAUUU\
) } def
/len { sequence length } bind def

/coor [
[81.83839417 366.52355957]
[67.99245453 360.50753784]
[56.28379440 350.97811890]
[47.58126831 338.64245605]
[42.53066635 324.41592407]
[41.50677490 309.35424805]
[44.58557510 294.57507324]
[51.53859711 281.17514038]
[61.84988022 270.14880371]
[74.75426483 262.31430054]
[89.29415131 258.25299072]
[89.29415131 243.25299072]
[89.29415131 228.25299072]
[89.29415131 213.25299072]
[89.29415131 198.25299072]
[89.29415131 183.25299072]
[89.29415131 168.25299072]
[89.29415131 153.25299072]
[89.29415131 138.25299072]
[89.29415131 123.25299835]
[88.02136993 138.19889832]
[79.18251801 150.31808472]
[65.34030151 156.09675598]
[50.50809097 153.85946655]
[38.98628235 144.25488281]
[34.11547852 130.06773376]
[37.30789948 115.41139221]
[47.63794708 104.53527069]
[62.11056137 100.59275055]
[76.52751160 104.72563934]
[62.51079941 99.38412476]
[46.86000443 101.69997406]
[37.72229385 89.93767548]
[23.70558167 84.59616852]
[9.52902412 79.69461823]
[-4.79357338 75.23780060]
[-19.11617088 70.78098297]
[-33.43876648 66.32416534]
[-47.76136398 61.86735153]
[-59.56385040 67.17350006]
[-71.42917633 63.11973953]
[-77.13881683 52.40958786]
[-91.36560059 47.65577316]
[-107.31736755 51.46013260]
[-118.38983154 39.36334229]
[-113.19260406 23.80953789]
[-97.07212830 20.79914474]
[-86.61177826 33.42899323]
[-72.38500214 38.18281174]
[-55.43799973 33.73319244]
[-43.30455017 47.54475403]
[-28.98195267 52.00157166]
[-14.65935516 56.45838547]
[-0.33675769 60.91520309]
[13.98583984 65.37201691]
[17.30669975 64.01578522]
[21.46014786 64.24061584]
[25.67707253 66.42462921]
[29.04709435 70.57945251]
[43.06380844 75.92096710]
[57.71203613 73.22305298]
[67.85231018 85.36740875]
[81.86902618 90.70892334]
[91.17935181 80.59028625]
[105.38276672 78.39340973]
[113.63505554 65.86744690]
[121.88734436 53.34148407]
[111.70015717 43.35201645]
[103.54615784 31.64910316]
[97.70730591 18.64020920]
[94.38498688 4.77790594]
[93.69306946 -9.45586395]
[95.65400696 -23.56654930]
[100.19808960 -37.06417084]
[107.16595459 -49.48033905]
[116.31414795 -60.38449860]
[127.32365417 -69.39886475]
[139.81100464 -76.21152496]
[153.34161377 -80.58719635]
[167.44496155 -82.37539673]
[181.63090515 -81.51557922]
[195.40670776 -78.03919983]
[208.29421997 -72.06856537]
[217.06042480 -84.24040222]
[225.82662964 -96.41223907]
[228.32701111 -105.26661682]
[234.90399170 -108.74355316]
[243.92152405 -120.73038483]
[243.10865784 -136.75283813]
[255.22364807 -147.26980591]
[270.97290039 -144.21357727]
[278.27493286 -129.92861938]
[271.52825928 -115.37314606]
[255.90835571 -111.71285248]
[246.89082336 -99.72602081]
[237.99847412 -87.64603424]
[229.23226929 -75.47419739]
[220.46606445 -63.30236053]
[231.17289734 -51.71714783]
[239.26779175 -38.17101288]
[244.40196228 -23.24327087]
[246.35325623 -7.57287264]
[245.03587341 8.16896629]
[240.50399780 23.30749702]
[232.94967651 37.19337463]
[222.69468689 49.23049545]
[210.17672729 58.90159988]
[195.93084717 65.79049683]
[180.56652832 69.59996033]
[164.74162292 70.16458893]
[149.13415527 67.45793152]
[134.41331482 61.59377289]
[126.16101837 74.11973572]
[117.90872955 86.64569855]
[122.36554718 100.96829224]
[136.26809692 106.60025024]
[150.17065430 112.23220825]
[162.23286438 102.72438049]
[177.43524170 100.53734589]
[191.68844604 106.25940704]
[201.15841675 118.35135651]
[203.29779053 133.56051636]
[197.53108215 147.79570007]
[185.40950012 157.22773743]
[170.19371033 159.31941223]
[155.97666931 153.50811768]
[146.58268738 141.35704041]
[144.53869629 126.13476562]
[130.63613892 120.50280762]
[116.73358917 114.87084961]
[104.29415131 123.25299835]
[104.29415131 138.25299072]
[104.29415131 153.25299072]
[104.29415131 168.25299072]
[104.29415131 183.25299072]
[104.29415131 198.25299072]
[104.29415131 213.25299072]
[104.29415131 228.25299072]
[104.29415131 243.25299072]
[104.29415131 258.25299072]
[118.83403778 262.31430054]
[131.73841858 270.14880371]
[142.04969788 281.17514038]
[149.00271606 294.57507324]
[152.08152771 309.35424805]
[151.05763245 324.41592407]
[146.00703430 338.64245605]
[137.30450439 350.97811890]
[125.59584045 360.50753784]
[111.74990082 366.52355957]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[30 63]
[31 62]
[33 60]
[34 59]
[35 55]
[36 54]
[37 53]
[38 52]
[39 51]
[42 49]
[43 48]
[65 114]
[66 113]
[67 112]
[83 98]
[84 97]
[85 96]
[87 95]
[88 94]
[115 130]
[116 129]
[117 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
