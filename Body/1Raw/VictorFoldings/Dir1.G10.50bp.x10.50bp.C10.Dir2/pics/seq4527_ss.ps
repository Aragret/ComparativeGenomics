%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCUUAUUGGGGGGGGGGUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUxxxxxxxxxxCUACGAGUACACCGACUACGGCGGACUAAUCUUCAACUCCUACAUACUUCCCCCCCCCCCCCCCAUUAUU\
) } def
/len { sequence length } bind def

/coor [
[110.04460907 592.47045898]
[96.82440948 585.19799805]
[85.93760681 574.75097656]
[78.12647247 561.84173584]
[73.92359161 547.35040283]
[73.61552429 532.26507568]
[77.22325897 517.61425781]
[84.50083160 504.39685059]
[94.95204163 493.51409912]
[107.86430359 485.70794678]
[122.35723877 481.51065063]
[122.04518890 466.51388550]
[121.73313141 451.51715088]
[121.42107391 436.52038574]
[121.10901642 421.52365112]
[120.79695892 406.52688599]
[120.48490143 391.53012085]
[120.17284393 376.53338623]
[119.86079407 361.53662109]
[119.54873657 346.53985596]
[102.87065125 333.46102905]
[101.11087036 312.05886841]
[115.80643463 296.01882935]
[113.93881989 281.13555908]
[112.07120514 266.25228882]
[110.20359802 251.36900330]
[108.33598328 236.48571777]
[97.12707520 230.05474854]
[91.60466766 218.15612793]
[93.99890900 205.06050110]
[103.65277863 195.61271667]
[102.09519958 180.69380188]
[100.53762054 165.77490234]
[98.82492828 150.87300110]
[96.95731354 135.98971558]
[79.25269318 135.98384094]
[61.48941040 126.86466980]
[48.38531876 108.88312531]
[44.27468872 84.68322754]
[29.63118744 81.43240356]
[15.38037109 88.80083466]
[0.79365760 82.12195587]
[-2.93927336 66.51924133]
[7.04516315 53.96175003]
[23.08776093 54.08251953]
[32.88201523 66.78890228]
[47.52551651 70.03972626]
[51.45422745 63.65105057]
[44.31715012 50.45778656]
[59.31165314 50.87369156]
[63.24036789 44.48501205]
[53.73200989 32.88367081]
[44.22364807 21.28232956]
[34.71529007 9.68098927]
[25.20693207 -1.92035210]
[15.69857407 -13.52169323]
[-0.06008522 -16.52905273]
[-7.40640354 -30.79128075]
[-0.70491409 -45.36761856]
[14.90357399 -49.07634354]
[27.44556427 -39.07244492]
[27.29991531 -23.03005219]
[36.80827332 -11.42871094]
[46.31663132 0.17263064]
[55.82498932 11.77397156]
[65.33335114 23.37531281]
[74.84170532 34.97665405]
[89.06848907 30.22283936]
[89.69246674 15.23582363]
[90.31644440 0.24880728]
[76.82804871 -6.89443636]
[67.78166962 -19.18776321]
[64.97348785 -34.19032288]
[68.96105194 -48.92335129]
[78.95264435 -60.46158981]
[92.96440887 -66.51411438]
[108.21431732 -65.87918854]
[121.67447662 -58.68288422]
[130.67237854 -46.35403061]
[133.42146301 -31.34052467]
[129.37590027 -16.62331581]
[119.33895111 -5.12451458]
[105.30345917 0.87278467]
[104.67948151 15.85980034]
[104.05550385 30.84681702]
[117.51146698 37.47531509]
[129.01327515 27.84678841]
[140.51507568 18.21826363]
[146.13027954 3.42704773]
[160.85597229 1.19025016]
[166.47117615 -13.60096550]
[181.19686890 -15.83776283]
[192.69866943 -25.46628952]
[204.20046997 -35.09481430]
[209.31582642 -50.67574310]
[225.42022705 -53.77089310]
[235.94686890 -41.19624329]
[230.06683350 -25.88751221]
[213.82899475 -23.59301186]
[202.32719421 -13.96448517]
[190.82539368 -4.33595943]
[186.03288269 9.76655960]
[170.48449707 12.69205379]
[165.69198608 26.79457283]
[150.14360046 29.72006607]
[138.64179993 39.34859085]
[127.13999176 48.97711945]
[148.17192078 84.62067413]
[138.76240540 119.39246368]
[111.84059143 134.12210083]
[113.70820618 149.00538635]
[117.90591431 157.19262695]
[115.45652771 164.21731567]
[117.01411438 179.13623047]
[118.57169342 194.05514526]
[132.34523010 204.78953552]
[134.09188843 221.82575989]
[123.21926117 234.61810303]
[125.08687592 249.50138855]
[126.95449066 264.38467407]
[128.82209778 279.26794434]
[130.68971252 294.15121460]
[139.27906799 297.13739014]
[146.37550354 302.75366211]
[151.20832825 310.35345459]
[153.26477051 319.07696533]
[152.34425354 327.94827271]
[148.57762146 335.98461914]
[142.40939331 342.30523682]
[134.54548645 346.22781372]
[134.85754395 361.22457886]
[135.16960144 376.22131348]
[135.48165894 391.21807861]
[135.79371643 406.21484375]
[136.10577393 421.21157837]
[136.41783142 436.20834351]
[136.72988892 451.20507812]
[137.04194641 466.20184326]
[137.35398865 481.19860840]
[152.00898743 484.78936768]
[165.23480225 492.05163574]
[176.12966919 502.49020386]
[183.95075989 515.39343262]
[188.16482544 529.88146973]
[188.48455811 544.96661377]
[184.88812256 559.62017822]
[177.62075806 572.84320068]
[167.17796326 583.73400879]
[154.27172852 591.55017090]
[139.78204346 595.75860596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 122]
[24 121]
[25 120]
[26 119]
[27 118]
[31 115]
[32 114]
[33 113]
[34 111]
[35 110]
[39 47]
[40 46]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[68 85]
[69 84]
[70 83]
[86 107]
[87 106]
[88 105]
[90 103]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
