%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAUUUACCGGGGGGGGGGCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUxxxxxxxxxxUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUCCCCCCCCCCAGCAUUUACC\
) } def
/len { sequence length } bind def

/coor [
[78.93835449 448.25851440]
[65.09242249 442.24249268]
[53.38375854 432.71307373]
[44.68123245 420.37741089]
[39.63063049 406.15090942]
[38.60673904 391.08920288]
[41.68553925 376.31005859]
[48.63856125 362.91012573]
[58.94984436 351.88378906]
[71.85422516 344.04928589]
[86.39411163 339.98797607]
[86.39411163 324.98797607]
[86.39411163 309.98797607]
[86.39411163 294.98797607]
[86.39411163 279.98797607]
[86.39411163 264.98797607]
[86.39411163 249.98797607]
[86.39411163 234.98797607]
[86.39411163 219.98797607]
[86.39411163 204.98797607]
[75.51125336 215.31092834]
[60.55070496 216.39810181]
[48.28973770 207.75700378]
[44.28269196 193.30212402]
[50.34479904 179.58166504]
[63.72986221 172.81114197]
[78.37432098 176.05764771]
[87.64421844 187.85089111]
[89.82105255 173.00967407]
[91.99789429 158.16847229]
[94.17472839 143.32727051]
[96.35156250 128.48606873]
[98.52840424 113.64485931]
[83.15512085 119.97791290]
[62.93170166 110.54663086]
[48.91498947 105.20512390]
[34.89827728 99.86360931]
[19.24747849 102.17945862]
[10.10977077 90.41716003]
[-3.90694237 85.07565308]
[-17.92365456 79.73413849]
[-29.78545189 89.49084473]
[-44.93904495 91.99367523]
[-59.30819702 86.56937408]
[-69.02767944 74.67705536]
[-71.48299408 59.51568985]
[-66.01367950 45.16361237]
[-54.09095383 35.48145676]
[-38.92196655 33.07367325]
[-24.58710098 38.58794785]
[-14.94236469 50.54096603]
[-12.58214283 65.71742249]
[1.43457007 71.05893707]
[15.45128345 76.40045166]
[30.09951019 73.70254517]
[40.23978806 85.84689331]
[54.25650024 91.18840790]
[68.27321625 96.52992249]
[74.53619385 92.40377808]
[66.28411102 79.87767792]
[78.81034851 71.62580109]
[87.06215668 84.15148926]
[93.32513428 80.02534485]
[93.94911194 65.03832245]
[94.57308960 50.05131149]
[80.17060852 45.55342484]
[67.42353821 37.48034668]
[57.20099640 26.38250732]
[50.19997025 13.01657963]
[46.89780426 -1.70612752]
[47.51964188 -16.78179359]
[52.02308655 -31.18253708]
[60.10108566 -43.92649078]
[71.20287323 -54.14474869]
[84.57150269 -61.14061356]
[99.29547882 -64.43709564]
[114.37091064 -63.80943680]
[128.76991272 -59.30043411]
[141.51074219 -51.21751022]
[151.72471619 -40.11178207]
[158.71542358 -26.74045181]
[162.00621033 -12.01519966]
[161.37274170 3.05998254]
[156.85816956 17.45724297]
[148.77032471 30.19495392]
[137.66065979 40.40463638]
[124.28662872 47.39017487]
[109.56011200 50.67528915]
[108.93613434 65.66230011]
[108.31215668 80.64932251]
[119.91349792 90.15767670]
[134.48619080 86.60291290]
[149.05889893 83.04815674]
[163.63160706 79.49339294]
[178.20429993 75.93862915]
[192.77700806 72.38386536]
[207.34971619 68.82910919]
[216.12911987 53.73409271]
[232.77432251 49.70651627]
[246.91572571 58.75517654]
[261.41131592 54.89801788]
[275.90692139 51.04085922]
[290.40252686 47.18370056]
[304.89813232 43.32654190]
[314.15533447 30.22373009]
[330.17901611 29.43571854]
[340.67718506 41.56700134]
[337.59652710 57.31149673]
[323.30026245 64.59137726]
[308.75527954 57.82213593]
[294.25967407 61.67929840]
[279.76409912 65.53645325]
[265.26849365 69.39361572]
[250.77288818 73.25077820]
[245.91184998 85.22437286]
[234.86640930 92.30056763]
[221.56755066 91.69376373]
[210.90447998 83.40180969]
[196.33177185 86.95657349]
[181.75906372 90.51132965]
[167.18637085 94.06609344]
[152.61366272 97.62085724]
[138.04095459 101.17562103]
[123.46825409 104.73037720]
[113.36960602 115.82169342]
[111.19277191 130.66290283]
[109.01593018 145.50410461]
[106.83909607 160.34530640]
[104.66226196 175.18652344]
[102.48542023 190.02772522]
[101.39411163 204.98797607]
[101.39411163 219.98797607]
[101.39411163 234.98797607]
[101.39411163 249.98797607]
[101.39411163 264.98797607]
[101.39411163 279.98797607]
[101.39411163 294.98797607]
[101.39411163 309.98797607]
[101.39411163 324.98797607]
[101.39411163 339.98797607]
[115.93399811 344.04928589]
[128.83837891 351.88378906]
[139.14965820 362.91012573]
[146.10269165 376.31005859]
[149.18148804 391.08920288]
[148.15759277 406.15090942]
[143.10699463 420.37741089]
[134.40446472 432.71307373]
[122.69580841 442.24249268]
[108.84986877 448.25851440]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 130]
[29 129]
[30 128]
[31 127]
[32 126]
[33 125]
[35 58]
[36 57]
[37 56]
[39 54]
[40 53]
[41 52]
[63 90]
[64 89]
[65 88]
[91 124]
[92 123]
[93 122]
[94 121]
[95 120]
[96 119]
[97 118]
[100 114]
[101 113]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
