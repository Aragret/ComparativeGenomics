%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACUAGCAGGGGGGGGGGGAGACCAACCGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACUAGUxxxxxxxxxxUUCCGCUACGACCAACUCAUACACCUCCUAUGAAAAAACUUCCUACCACUCCCCCCCCCCCACCCUAGCA\
) } def
/len { sequence length } bind def

/coor [
[81.35976410 526.09710693]
[66.87007141 521.88861084]
[53.96384048 514.07250977]
[43.52104187 503.18167114]
[36.25367737 489.95867920]
[32.65724945 475.30505371]
[32.97697067 460.21997070]
[37.19104385 445.73190308]
[45.01213837 432.82867432]
[55.90700912 422.39010620]
[69.13282013 415.12783813]
[83.78781128 411.53707886]
[84.09986877 396.54031372]
[84.41191864 381.54354858]
[84.72397614 366.54681396]
[85.03603363 351.55004883]
[85.34809113 336.55331421]
[85.66014862 321.55654907]
[85.97220612 306.55978394]
[86.28425598 291.56304932]
[86.59631348 276.56628418]
[86.90837097 261.56951904]
[87.22042847 246.57278442]
[74.13550568 241.41053772]
[63.58314896 232.06417847]
[56.84988022 219.64587402]
[54.76595688 205.64392090]
[57.60301208 191.74438477]
[65.03886414 179.62812805]
[76.19394684 170.76745605]
[89.73532867 166.24729919]
[90.35930634 151.26028442]
[90.98328400 136.27326965]
[69.00328064 120.88671112]
[62.99513626 94.73773193]
[48.87033463 89.68897247]
[34.74552917 84.64021301]
[20.62072754 79.59146118]
[6.49592447 74.54270172]
[-7.62887812 69.49394989]
[-21.75368118 64.44519043]
[-35.87848282 59.39643478]
[-49.28334427 67.44899750]
[-64.71997070 64.95009613]
[-74.89966583 53.07963562]
[-75.01588440 37.44248581]
[-65.01375580 25.42202759]
[-49.61597443 22.69395638]
[-36.09290695 30.54638290]
[-30.82972717 45.27163315]
[-16.70492554 50.32038879]
[-2.58012199 55.36914444]
[11.54468060 60.41790009]
[25.66948318 65.46665955]
[39.79428864 70.51541138]
[53.91909027 75.56417084]
[68.04389191 80.61292267]
[78.47296143 69.44451141]
[92.50000000 63.38304520]
[92.50000000 48.38304520]
[92.50000000 33.38304520]
[91.87602234 18.39602852]
[90.62915039 3.44794178]
[75.82914734 0.42525241]
[62.48088455 -6.64585781]
[51.66644669 -17.19216537]
[44.26251221 -30.35873032]
[40.86928177 -45.07819748]
[41.76182938 -60.15732193]
[46.86780167 -74.37371063]
[55.77328110 -86.57490540]
[67.75634003 -95.77180481]
[81.84556580 -101.21886444]
[96.89880371 -102.47451019]
[111.69576263 -99.43695068]
[125.03691101 -92.35243988]
[135.84074402 -81.79527283]
[143.23146057 -68.62127686]
[146.60989380 -53.89840698]
[145.70219421 -38.82018661]
[140.58195496 -24.60893250]
[131.66421509 -12.41669178]
[119.67192078 -3.23183393]
[105.57723236 2.20106721]
[106.82411194 17.14915466]
[108.94519043 19.07486343]
[110.40542603 21.98376274]
[110.81610870 25.61876297]
[109.89243317 29.58334160]
[107.50000000 33.38304520]
[107.50000000 48.38304520]
[107.50000000 63.38304520]
[113.40175629 65.10810852]
[118.94083405 67.77739716]
[123.96734619 71.31868744]
[128.34526062 75.63614655]
[131.95610046 80.61292267]
[146.08091736 75.56417084]
[160.20571899 70.51541138]
[174.33052063 65.46665955]
[188.45532227 60.41790009]
[193.71849060 45.69264984]
[207.24156189 37.84022522]
[222.63934326 40.56829834]
[232.64147949 52.58875275]
[232.52525330 68.22590637]
[222.34556580 80.09636688]
[206.90893555 82.59526825]
[193.50407410 74.54270172]
[179.37927246 79.59146118]
[165.25447083 84.64021301]
[151.12966919 89.68897247]
[137.00486755 94.73773193]
[137.25639343 103.00205231]
[135.68484497 111.11947632]
[132.36712646 118.69278717]
[127.46557617 125.35140228]
[121.22003937 130.76948547]
[113.93614197 134.68191528]
[105.97029877 136.89724731]
[105.34632111 151.88426208]
[104.72234344 166.87127686]
[119.32650757 173.52369690]
[130.24325562 185.23387146]
[135.82949829 200.19609070]
[135.26098633 216.11853027]
[128.65385437 230.57429504]
[117.04236603 241.37133789]
[102.21717834 246.88482666]
[101.90512848 261.88159180]
[101.59307098 276.87832642]
[101.28101349 291.87509155]
[100.96895599 306.87185669]
[100.65689850 321.86859131]
[100.34484100 336.86535645]
[100.03279114 351.86212158]
[99.72073364 366.85885620]
[99.40867615 381.85562134]
[99.09661865 396.85235596]
[98.78456116 411.84912109]
[113.27749634 416.04641724]
[126.18975830 423.85256958]
[136.64097595 434.73532104]
[143.91854858 447.95269775]
[147.52627563 462.60354614]
[147.21821594 477.68887329]
[143.01533508 492.18020630]
[135.20419312 505.08944702]
[124.31739807 515.53643799]
[111.09719849 522.80889893]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[31 122]
[32 121]
[33 120]
[35 57]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[59 92]
[60 91]
[61 90]
[62 85]
[63 84]
[97 113]
[98 112]
[99 111]
[100 110]
[101 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
