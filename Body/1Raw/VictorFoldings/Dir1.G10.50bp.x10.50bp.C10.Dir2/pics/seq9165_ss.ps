%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCAACAUGGGGGGGGGGUUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAACUxxxxxxxxxxUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGCCCCCCCCCCGACUCAACAU\
) } def
/len { sequence length } bind def

/coor [
[113.51545715 454.76290894]
[99.66951752 448.74688721]
[87.96085358 439.21746826]
[79.25833130 426.88180542]
[74.20772552 412.65527344]
[73.18383789 397.59359741]
[76.26263428 382.81445312]
[83.21566010 369.41452026]
[93.52693939 358.38818359]
[106.43132019 350.55368042]
[120.97121429 346.49237061]
[120.97121429 331.49237061]
[120.97121429 316.49237061]
[120.97121429 301.49237061]
[120.97121429 286.49237061]
[120.97121429 271.49237061]
[120.97121429 256.49237061]
[120.97121429 241.49235535]
[120.97121429 226.49235535]
[120.97121429 211.49235535]
[120.97121429 196.49235535]
[120.97121429 181.49235535]
[118.17888641 166.75454712]
[112.69185638 152.79415894]
[107.20482635 138.83377075]
[101.71778870 124.87338257]
[88.06140900 121.88849640]
[78.15782928 112.02313232]
[63.44986725 114.96861267]
[48.74190521 117.91409302]
[34.03394318 120.85958099]
[19.69048119 129.89845276]
[7.03417635 118.61775208]
[14.37041283 103.33325195]
[31.08846283 106.15161896]
[45.79642487 103.20613098]
[60.50438690 100.26065063]
[75.21234894 97.31517029]
[77.57197571 89.10873413]
[82.56224823 82.17976379]
[89.59783936 77.34098053]
[87.73022461 62.45770264]
[83.53251648 54.27045059]
[85.98190308 47.24576569]
[84.42432404 32.32685471]
[82.86674500 17.40794373]
[72.28745270 11.81762886]
[65.81216431 1.89898610]
[64.96795654 -9.79550552]
[69.85034180 -20.32308578]
[79.12842560 -27.09121704]
[78.19280243 -42.06200790]
[77.25717163 -57.03279877]
[76.32154083 -72.00359344]
[64.75377655 -82.43548584]
[64.01818085 -97.63132477]
[74.03468323 -108.59513855]
[73.09905243 -123.56593323]
[72.16342926 -138.53672791]
[71.22779846 -153.50750732]
[70.29216766 -168.47830200]
[69.35654449 -183.44909668]
[68.42091370 -198.41989136]
[67.48528290 -213.39068604]
[58.90226364 -226.68136597]
[65.83062744 -239.86647034]
[64.89500427 -254.83726501]
[50.60874939 -260.11199951]
[39.70757675 -270.74612427]
[34.08017349 -284.89715576]
[34.70152283 -300.11340332]
[41.46397018 -313.75851440]
[53.19588470 -323.46841431]
[67.86463928 -327.56079102]
[82.92877960 -325.32662964]
[95.77835846 -317.15301514]
[104.18710327 -304.45602417]
[106.69815826 -289.43557739]
[102.87644958 -274.69396973]
[93.38413239 -262.78533936]
[79.86579132 -255.77288818]
[80.80142212 -240.80209351]
[89.31752014 -228.58222961]
[82.45607758 -214.32630920]
[83.39170837 -199.35551453]
[84.32733154 -184.38471985]
[85.26296234 -169.41394043]
[86.19859314 -154.44314575]
[87.13421631 -139.47235107]
[88.06984711 -124.50155640]
[89.00547791 -109.53076935]
[100.30912018 -99.89939880]
[101.47124481 -84.73021698]
[91.29233551 -72.93921661]
[92.22796631 -57.96842957]
[93.16358948 -42.99763489]
[94.09922028 -28.02684593]
[108.51982117 -16.82667542]
[110.26951599 1.66753900]
[97.78565216 15.85036182]
[99.34323120 30.76927376]
[100.90081787 45.68818665]
[102.61350250 60.59008789]
[104.48111725 75.47336578]
[120.14913177 85.31502533]
[124.72070312 103.24393463]
[115.67818451 119.38635254]
[121.16521454 133.34674072]
[126.65224457 147.30712891]
[132.13928223 161.26751709]
[134.81365967 146.50785828]
[141.84118652 133.25592041]
[152.55899048 122.76169586]
[165.95611572 116.01506042]
[180.76887512 113.65237427]
[195.60005188 115.89650726]
[209.05070496 122.53577423]
[219.85209656 132.94393921]
[226.98539734 146.13923645]
[229.77774048 160.87704468]
[227.96575928 175.76719666]
[221.72036743 189.40519714]
[211.63064575 200.50463867]
[198.64831543 208.01855469]
[183.99792480 211.23822021]
[169.06138611 209.85992432]
[155.24757385 204.01367188]
[143.85948181 194.25091553]
[135.97120667 181.49235535]
[135.97120667 196.49235535]
[135.97120667 211.49235535]
[135.97120667 226.49235535]
[135.97120667 241.49235535]
[135.97120667 256.49237061]
[135.97120667 271.49237061]
[135.97120667 286.49237061]
[135.97120667 301.49237061]
[135.97120667 316.49237061]
[135.97120667 331.49237061]
[135.97120667 346.49237061]
[150.51109314 350.55368042]
[163.41548157 358.38818359]
[173.72676086 369.41452026]
[180.67977905 382.81445312]
[183.75859070 397.59359741]
[182.73469543 412.65527344]
[177.68409729 426.88180542]
[168.98156738 439.21746826]
[157.27290344 448.74688721]
[143.42697144 454.76290894]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 110]
[24 109]
[25 108]
[26 107]
[28 38]
[29 37]
[30 36]
[31 35]
[41 104]
[42 103]
[44 102]
[45 101]
[46 100]
[51 97]
[52 96]
[53 95]
[54 94]
[57 91]
[58 90]
[59 89]
[60 88]
[61 87]
[62 86]
[63 85]
[64 84]
[66 82]
[67 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
