%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCAUUACCGGGGGGGGGGGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACAUCAGAUUGUGAAUCxxxxxxxxxxGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCCCCCCCCCCCAUCAUUCCC\
) } def
/len { sequence length } bind def

/coor [
[57.60420227 600.72369385]
[42.73329926 598.21228027]
[28.95449066 592.08081055]
[17.13392067 582.71466064]
[8.01463795 570.70257568]
[2.16989231 556.79974365]
[-0.03291281 541.88000488]
[1.54469323 526.88122559]
[6.80354071 512.74633789]
[15.41305447 500.36383057]
[26.83203316 490.51202393]
[40.34267044 483.81027222]
[55.09567261 480.67984009]
[55.71965027 465.69281006]
[56.34362793 450.70581055]
[56.96760559 435.71878052]
[57.59158325 420.73178101]
[58.21556091 405.74475098]
[58.83953857 390.75772095]
[59.46351624 375.77072144]
[60.08749390 360.78369141]
[60.71147156 345.79669189]
[61.33544922 330.80966187]
[61.95942307 315.82266235]
[62.58340073 300.83563232]
[55.50384521 295.29293823]
[51.74610138 286.97274780]
[52.28433609 277.72073364]
[57.12365341 269.65530396]
[65.26983643 264.68240356]
[66.82741547 249.76350403]
[68.38500214 234.84458923]
[69.94258118 219.92567444]
[59.20518494 211.93167114]
[53.79154587 199.57026672]
[55.22064590 186.04222107]
[63.22426987 174.90870667]
[75.78938293 169.15396118]
[77.65699768 154.27069092]
[79.52460480 139.38740540]
[81.39221954 124.50412750]
[83.25983429 109.62084198]
[76.21469879 96.37825775]
[62.82841492 89.61014557]
[49.44213104 82.84203339]
[36.05584335 76.07391357]
[20.42629051 79.69284058]
[7.94202614 69.61698914]
[8.17991161 53.57569885]
[20.95746040 43.87447357]
[36.47283173 47.95526123]
[42.82395935 62.68762970]
[56.21024323 69.45574188]
[69.59652710 76.22386169]
[82.98281097 82.99197388]
[89.74491119 79.74789429]
[79.39522552 68.89044952]
[86.52320862 55.69226837]
[101.27805328 58.39310455]
[103.26909637 73.25972748]
[110.03119659 70.01564789]
[113.12951660 55.33911896]
[116.22783661 40.66259384]
[119.32615662 25.98606873]
[109.06537628 36.92756271]
[96.27290344 44.76035309]
[81.86260223 48.92488098]
[66.86392212 49.12364197]
[52.34832382 45.34243774]
[39.35277939 37.85138702]
[28.80566025 27.18563652]
[21.46042633 14.10712242]
[17.84180450 -0.44985518]
[18.20830536 -15.44537735]
[22.53374290 -29.80819702]
[30.50912094 -42.51226425]
[41.56469345 -52.65003204]
[54.91067123 -59.49728012]
[69.59365845 -62.56485367]
[84.56472015 -61.63361359]
[98.75437164 -56.77008438]
[111.14891815 -48.32170868]
[120.86293793 -36.89201736]
[127.20247650 -23.29752159]
[129.71464539 -8.50938416]
[128.22125244 6.41061878]
[137.23878479 -5.57621384]
[146.25631714 -17.56304741]
[155.27384949 -29.54987907]
[159.96408081 -45.84215164]
[176.91801453 -45.84537125]
[181.61444092 -29.55488205]
[167.26068115 -20.53234863]
[158.24314880 -8.54551697]
[149.22561646 3.44131589]
[140.20808411 15.42814827]
[134.00268555 29.08439064]
[130.90435791 43.76091385]
[127.80603790 58.43743896]
[124.70771790 73.11396790]
[135.90348816 83.09669495]
[150.13026428 78.34288025]
[164.35704041 73.58906555]
[174.81739807 60.95921326]
[190.93786621 63.96960449]
[196.13510132 79.52340698]
[185.06262207 91.62020111]
[169.11085510 87.81584167]
[154.88407898 92.56965637]
[140.65730286 97.32347107]
[133.42910767 110.10756683]
[123.11530304 117.68109131]
[112.33609772 119.74359894]
[103.45336914 117.11416626]
[98.14311218 111.48845673]
[96.27549744 126.37173462]
[94.40789032 141.25502014]
[92.54027557 156.13830566]
[90.67266083 171.02157593]
[103.15468597 182.39045715]
[106.39233398 198.79164124]
[99.30863953 213.75115967]
[84.86149597 221.48326111]
[83.30390930 236.40217590]
[81.74633026 251.32109070]
[80.18875122 266.23999023]
[90.16834259 285.15576172]
[77.57041931 301.45962524]
[76.94644165 316.44662476]
[76.32246399 331.43365479]
[75.69848633 346.42065430]
[75.07450867 361.40768433]
[74.45053101 376.39468384]
[73.82655334 391.38171387]
[73.20257568 406.36874390]
[72.57859802 421.35574341]
[71.95462036 436.34277344]
[71.33064270 451.32977295]
[70.70666504 466.31680298]
[70.08268738 481.30380249]
[84.52442169 485.64974976]
[97.43121338 493.45138550]
[107.99174500 504.21829224]
[115.54216003 517.27362061]
[119.60784912 531.79675293]
[119.93321991 546.87469482]
[116.49784088 561.55969238]
[109.51764679 574.92858887]
[99.43141937 586.14105225]
[86.87319946 594.49218750]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 129]
[25 128]
[30 126]
[31 125]
[32 124]
[33 123]
[38 119]
[39 118]
[40 117]
[41 116]
[42 115]
[43 55]
[44 54]
[45 53]
[46 52]
[61 100]
[62 99]
[63 98]
[64 97]
[86 96]
[87 95]
[88 94]
[89 93]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
