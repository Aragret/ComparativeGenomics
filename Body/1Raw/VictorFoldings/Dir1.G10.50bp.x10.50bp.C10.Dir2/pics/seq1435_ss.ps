%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGUUAAAUCGGGGGGGGGGAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGxxxxxxxxxxACCCUUAACAGUACAUAGUACAUAAAGCCAUUUACCGUACAUAGCACAUUCCCCCCCCCCACAGUCAAAUC\
) } def
/len { sequence length } bind def

/coor [
[29.22650337 504.75106812]
[15.20455933 499.19805908]
[3.00460243 490.33172607]
[-6.60646915 478.70941162]
[-13.02449417 465.06170654]
[-15.84603119 450.24652100]
[-14.89371490 435.19512939]
[-10.22741032 420.85372925]
[-2.14044356 408.12374878]
[8.85883141 397.80548096]
[22.07898903 390.54751587]
[36.68900299 386.80606079]
[36.68900299 371.80606079]
[36.68900299 356.80606079]
[36.68900299 341.80606079]
[36.68900299 326.80606079]
[36.68900299 311.80606079]
[36.68900299 296.80606079]
[36.68900299 281.80606079]
[36.68900299 266.80606079]
[36.68900299 251.80607605]
[36.68900299 236.80607605]
[36.68900299 221.80607605]
[30.37221336 220.05982971]
[24.42383575 217.30882263]
[19.00247383 213.62643433]
[14.25268269 209.11082458]
[10.30111217 203.88241577]
[7.25312471 198.08061218]
[5.18999243 191.86010742]
[4.16672659 185.38676453]
[-10.73772049 183.69636536]
[-25.64216805 182.00596619]
[-40.54661560 180.31556702]
[-55.45106506 178.62516785]
[-66.04656219 186.05073547]
[-78.46010590 184.29707336]
[-86.07882690 174.85159302]
[-100.94542694 172.85552979]
[-115.89828491 179.58934021]
[-129.04643250 169.78840637]
[-126.86419678 153.53511047]
[-111.59645844 147.54942322]
[-98.94937134 157.98893738]
[-84.08277130 159.98498535]
[-68.27189636 152.43113708]
[-53.76066589 163.72073364]
[-38.85621643 165.41111755]
[-23.95177078 167.10151672]
[-9.04732323 168.79191589]
[5.85712433 170.48231506]
[11.81396580 158.42233276]
[21.44872093 148.96975708]
[33.70432281 143.20460510]
[47.22190475 141.80000305]
[60.49145126 144.94367981]
[68.90486145 132.52536011]
[77.31827545 120.10704803]
[68.79907227 108.54886627]
[66.23087311 93.49021149]
[70.96070099 78.00175476]
[82.76179504 65.60750580]
[99.72634888 59.49021530]
[100.64976501 44.51866531]
[101.57317352 29.54711342]
[89.75755310 16.68716621]
[90.84592438 -0.40514201]
[103.68223572 -11.22790909]
[104.29806519 -26.21526337]
[104.91388702 -41.20261765]
[105.52971649 -56.18996811]
[92.03743744 -63.32587433]
[82.98437500 -75.61428070]
[80.16802979 -90.61531067]
[84.14758301 -105.35050201]
[94.13289642 -116.89417267]
[108.14137268 -122.95432281]
[123.39161682 -122.32769012]
[136.85569763 -115.13871002]
[145.86029053 -102.81475067]
[148.61753845 -87.80274200]
[144.57998657 -73.08333588]
[134.54930115 -61.57907486]
[120.51706696 -55.57414246]
[119.90124512 -40.58679199]
[119.28541565 -25.59943771]
[118.66959381 -10.61208344]
[128.66152954 -2.41980720]
[132.14405823 10.22537994]
[127.62287903 22.74497032]
[116.54472351 30.47052765]
[115.62131500 45.44207764]
[114.69789886 60.41362762]
[120.34304047 65.35147858]
[126.24667358 51.56209946]
[141.18547058 52.91582489]
[144.51414490 67.54182434]
[131.63331604 75.22718811]
[137.27845764 80.16503906]
[151.99398804 77.25756836]
[166.70950317 74.35009766]
[181.42503357 71.44261932]
[194.96113586 59.00057220]
[211.33842468 65.23182678]
[225.99114990 62.02282715]
[240.64387512 58.81383133]
[255.29660034 55.60483551]
[267.04458618 44.16295242]
[282.75192261 48.87587357]
[286.26025391 64.89535522]
[273.96051025 75.74192047]
[258.50561523 70.25756073]
[243.85287476 73.46656036]
[229.20014954 76.67555237]
[214.54742432 79.88455200]
[207.72930908 89.92324829]
[195.50148010 92.68941498]
[184.33250427 86.15814209]
[169.61697388 89.06562042]
[154.90145874 91.97309113]
[140.18592834 94.88056183]
[131.55476379 119.53221893]
[111.10051727 131.83082581]
[89.73658752 128.52046204]
[81.32317352 140.93876648]
[72.90976715 153.35708618]
[83.60899353 172.42810059]
[82.90969086 194.19091797]
[71.10964203 212.37928772]
[51.68900299 221.80607605]
[51.68900299 236.80607605]
[51.68900299 251.80607605]
[51.68900299 266.80606079]
[51.68900299 281.80606079]
[51.68900299 296.80606079]
[51.68900299 311.80606079]
[51.68900299 326.80606079]
[51.68900299 341.80606079]
[51.68900299 356.80606079]
[51.68900299 371.80606079]
[51.68900299 386.80606079]
[66.29901886 390.54751587]
[79.51917267 397.80548096]
[90.51844788 408.12374878]
[98.60541534 420.85372925]
[103.27172089 435.19512939]
[104.22403717 450.24652100]
[101.40249634 465.06170654]
[94.98447418 478.70941162]
[85.37340546 490.33172607]
[73.17344666 499.19805908]
[59.15150070 504.75106812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[38 45]
[39 44]
[56 126]
[57 125]
[58 124]
[63 93]
[64 92]
[65 91]
[68 87]
[69 86]
[70 85]
[71 84]
[99 121]
[100 120]
[101 119]
[102 118]
[104 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
