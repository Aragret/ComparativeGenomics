%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUAGUAGGGGGGGGGGGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCACUAxxxxxxxxxxAAAAUGCCCUAGCCCACUUCUUACCACAAGGCACACCUACACCCCUUAUCCCCCCCCCCCCCCAUACUAG\
) } def
/len { sequence length } bind def

/coor [
[83.33593750 358.87399292]
[70.46266174 350.97109985]
[60.33836746 339.76062012]
[53.78378296 326.15127563]
[51.33026123 311.24633789]
[53.17669678 296.25408936]
[59.17341232 282.38989258]
[68.83427429 270.77764893]
[81.37612152 262.35867310]
[95.78224182 257.81552124]
[95.47018433 242.81877136]
[95.15812683 227.82202148]
[94.84606934 212.82525635]
[94.53401947 197.82850647]
[94.22196198 182.83175659]
[93.90990448 167.83500671]
[93.59784698 152.83824158]
[93.28578949 137.84149170]
[92.97373199 122.84474182]
[92.66168213 107.84798431]
[89.71619415 93.14002228]
[84.22916412 79.17963409]
[78.74213409 65.21924591]
[73.25510406 51.25885773]
[58.92505646 55.71443939]
[44.30800247 59.11210251]
[29.48192787 61.43372345]
[14.52593803 62.66690826]
[-0.48017141 62.80508423]
[-15.45633411 61.84750748]
[-30.32264519 59.79928970]
[-44.99978638 56.67135620]
[-59.40944672 52.48040390]
[-73.47474670 47.24878693]
[-87.12063599 41.00442123]
[-100.27430725 33.78062057]
[-112.86558533 25.61593246]
[-124.82728577 16.55391502]
[-136.09558105 6.64292097]
[-146.61036682 -4.06417084]
[-156.31552124 -15.51023293]
[-165.15927124 -27.63419342]
[-173.09443665 -40.37136841]
[-180.07867432 -53.65379333]
[-186.07472229 -67.41060638]
[-191.05056763 -81.56840515]
[-194.97970581 -96.05165100]
[-197.84112549 -110.78306580]
[-199.61959839 -125.68405151]
[-200.30561829 -140.67510986]
[-199.89550781 -155.67625427]
[-198.39149475 -170.60743713]
[-195.80157471 -185.38900757]
[-192.13955688 -199.94207764]
[-187.42501831 -214.18902588]
[-181.68307495 -228.05381775]
[-174.94439697 -241.46249390]
[-167.24490356 -254.34350586]
[-158.62570190 -266.62811279]
[-149.13276672 -278.25079346]
[-138.81675720 -289.14950562]
[-127.73269653 -299.26614380]
[-115.93974304 -308.54669189]
[-103.50080109 -316.94165039]
[-90.48226166 -324.40621948]
[-76.95355988 -330.90057373]
[-62.98689270 -336.39007568]
[-48.65677261 -340.84542847]
[-34.03966522 -344.24285889]
[-19.21355057 -346.56423950]
[-4.25753975 -347.79718018]
[10.74857140 -347.93508911]
[25.72471809 -346.97726440]
[40.59099579 -344.92880249]
[55.26808548 -341.80062866]
[69.67768097 -337.60946655]
[83.74288940 -332.37759399]
[97.38867188 -326.13302612]
[110.54222870 -318.90899658]
[123.13337708 -310.74411011]
[135.09492493 -301.68188477]
[146.36306763 -291.77072144]
[156.87767029 -281.06344604]
[166.58264160 -269.61721802]
[175.42619324 -257.49310303]
[183.36114502 -244.75581360]
[190.34515381 -231.47326660]
[196.34097290 -217.71635437]
[201.31660461 -203.55848694]
[205.24549866 -189.07518005]
[208.10667419 -174.34370422]
[209.88490295 -159.44268799]
[210.57066345 -144.45162964]
[210.16032410 -129.45048523]
[208.65605164 -114.51932526]
[206.06588745 -99.73780823]
[202.40364075 -85.18478394]
[197.68885803 -70.93791962]
[191.94670105 -57.07321548]
[185.20779419 -43.66465378]
[177.50808716 -30.78377533]
[168.88868713 -18.49930382]
[159.39556885 -6.87678337]
[149.07937622 4.02177382]
[137.99514771 14.13821888]
[126.20204163 23.41857529]
[113.76296997 31.81332779]
[100.74430084 39.27768707]
[87.21549225 45.77182388]
[92.70252228 59.73221588]
[98.18955231 73.69260406]
[103.67658997 87.65299225]
[106.43374634 72.90856934]
[113.74927521 59.81341553]
[124.85915375 49.73518753]
[138.60305786 43.72644806]
[153.54559326 42.41474152]
[168.12617493 45.93706894]
[180.82200623 53.92555618]
[190.30714417 65.54589081]
[195.59095764 79.58444977]
[196.12162781 94.57506561]
[191.84371948 108.95211029]
[183.20402527 121.21406555]
[171.10485840 130.08029175]
[156.80984497 134.62481689]
[141.81195068 134.37301636]
[127.67756653 129.35116577]
[115.88285065 120.08376312]
[107.65843201 107.53593445]
[107.97048950 122.53268433]
[108.28254700 137.52943420]
[108.59460449 152.52619934]
[108.90665436 167.52294922]
[109.21871185 182.51969910]
[109.53076935 197.51644897]
[109.84282684 212.51321411]
[110.15488434 227.50996399]
[110.46694183 242.50671387]
[110.77899170 257.50347900]
[125.36163330 261.44342041]
[138.24284363 269.33337402]
[148.37838745 280.53369141]
[154.94664001 294.13644409]
[157.41514587 309.03890991]
[155.58377075 324.03298950]
[149.60098267 337.90319824]
[139.95179749 349.52514648]
[127.41841125 357.95669556]
[113.01686096 362.51434326]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 112]
[22 111]
[23 110]
[24 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
