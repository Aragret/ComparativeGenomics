%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUAAUCUUAGGGGGGGGGGUAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCAGUAAGxxxxxxxxxxCCCAAACAUUAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCACCCCCCCCCCUACUAAUCUUA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 406.67593384]
[71.01555634 401.12292480]
[58.81560135 392.25659180]
[49.20452881 380.63427734]
[42.78650284 366.98657227]
[39.96496582 352.17138672]
[40.91728210 337.11999512]
[45.58358765 322.77859497]
[53.67055511 310.04861450]
[64.66983032 299.73034668]
[77.88998413 292.47238159]
[92.50000000 288.73095703]
[92.50000000 273.73095703]
[92.50000000 258.73095703]
[92.50000000 243.73094177]
[92.50000000 228.73094177]
[92.50000000 213.73094177]
[92.50000000 198.73094177]
[92.50000000 183.73094177]
[92.50000000 168.73094177]
[92.50000000 153.73094177]
[92.50000000 138.73094177]
[84.76270294 126.00366974]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[92.50000000 42.79650116]
[89.35507965 34.15328217]
[92.65715790 27.48931313]
[92.96513367 12.49247551]
[93.27311707 -2.50436258]
[78.32907104 -3.86979079]
[63.51856232 -6.28596020]
[48.91538620 -9.74083328]
[34.59228897 -14.21719837]
[20.62063217 -19.69275475]
[7.07002020 -26.14022064]
[-5.99203777 -33.52747726]
[-18.50046730 -41.81772232]
[-30.39294815 -50.96965027]
[-41.61023712 -60.93766785]
[-52.09644699 -71.67211151]
[-61.79933167 -83.11951447]
[-70.67055511 -95.22282410]
[-78.66592407 -107.92176819]
[-85.74560547 -121.15305328]
[-91.87432098 -134.85078430]
[-97.02154541 -148.94670105]
[-101.16162872 -163.37060547]
[-104.27394867 -178.05059814]
[-106.34299469 -192.91357422]
[-107.35846710 -207.88546753]
[-107.31530762 -222.89170837]
[-106.21372223 -237.85751343]
[-104.05920410 -252.70832825]
[-100.86248016 -267.37017822]
[-96.63948822 -281.77001953]
[-91.41126251 -295.83609009]
[-85.20384979 -309.49835205]
[-78.04817200 -322.68869019]
[-69.97988129 -335.34143066]
[-61.03917313 -347.39349365]
[-51.27059174 -358.78488159]
[-40.72280502 -369.45883179]
[-29.44835854 -379.36215210]
[-17.50342560 -388.44552612]
[-4.94751120 -396.66366577]
[8.15682793 -403.97567749]
[21.74430656 -410.34506226]
[35.74723434 -415.74017334]
[50.09584427 -420.13406372]
[64.71865082 -423.50485229]
[79.54281616 -425.83578491]
[94.49446869 -427.11523438]
[109.49913025 -427.33679199]
[124.48204041 -426.49938965]
[139.36856079 -424.60720825]
[154.08451843 -421.66961670]
[168.55662537 -417.70132446]
[182.71273804 -412.72204590]
[196.48236084 -406.75662231]
[209.79689026 -399.83474731]
[222.58998108 -391.99093628]
[234.79791260 -383.26422119]
[246.35986328 -373.69812012]
[257.21823120 -363.34027100]
[267.31890869 -352.24227905]
[276.61157227 -340.45944214]
[285.04992676 -328.05047607]
[292.59197998 -315.07714844]
[299.20007324 -301.60415649]
[304.84136963 -287.69857788]
[309.48770142 -273.42971802]
[313.11593628 -258.86865234]
[315.70803833 -244.08792114]
[317.25103760 -229.16116333]
[317.73727417 -214.16275024]
[317.16430664 -199.16738892]
[315.53503418 -184.24981689]
[312.85751343 -169.48431396]
[309.14514160 -154.94447327]
[304.41635132 -140.70271301]
[298.69476318 -126.82999420]
[292.00885010 -113.39542389]
[284.39193726 -100.46594238]
[275.88195801 -88.10596466]
[266.52130127 -76.37705994]
[256.35662842 -65.33766937]
[245.43856812 -55.04278183]
[233.82148743 -45.54369736]
[221.56330872 -36.88772964]
[208.72506714 -29.11800957]
[195.37074280 -22.27324486]
[181.56684875 -16.38753510]
[167.38217163 -11.49020290]
[152.88737488 -7.60564709]
[138.15466309 -4.75322056]
[123.25745392 -2.94713378]
[108.26995087 -2.19638491]
[107.96197510 12.80045319]
[107.65399933 27.79729080]
[107.50000000 42.79650116]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[115.23729706 126.00366974]
[107.50000000 138.73094177]
[107.50000000 153.73094177]
[107.50000000 168.73094177]
[107.50000000 183.73094177]
[107.50000000 198.73094177]
[107.50000000 213.73094177]
[107.50000000 228.73094177]
[107.50000000 243.73094177]
[107.50000000 258.73095703]
[107.50000000 273.73095703]
[107.50000000 288.73095703]
[122.11001587 292.47238159]
[135.33016968 299.73034668]
[146.32945251 310.04861450]
[154.41641235 322.77859497]
[159.08271790 337.11999512]
[160.03503418 352.17138672]
[157.21350098 366.98657227]
[150.79547119 380.63427734]
[141.18440247 392.25659180]
[128.98443604 401.12292480]
[114.96250153 406.67593384]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[24 129]
[26 127]
[27 126]
[28 125]
[29 124]
[31 123]
[32 122]
[33 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
