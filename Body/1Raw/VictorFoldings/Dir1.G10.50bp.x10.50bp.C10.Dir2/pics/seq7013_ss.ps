%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGACAUCGGGGGGGGGGGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCUAUCAxxxxxxxxxxUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCUCUUCCCCCCCCCCCCUACACAUCG\
) } def
/len { sequence length } bind def

/coor [
[127.10796356 470.01153564]
[114.23468781 462.10867310]
[104.11039734 450.89816284]
[97.55580902 437.28881836]
[95.10228729 422.38391113]
[96.94873047 407.39166260]
[102.94544220 393.52746582]
[112.60630035 381.91519165]
[125.14814758 373.49624634]
[139.55427551 368.95309448]
[139.24221802 353.95632935]
[138.93016052 338.95956421]
[138.61810303 323.96282959]
[138.30604553 308.96606445]
[137.99398804 293.96932983]
[137.68193054 278.97256470]
[137.36987305 263.97579956]
[137.05781555 248.97904968]
[136.74575806 233.98229980]
[136.43370056 218.98554993]
[121.79483795 212.65278625]
[111.33341217 200.53610229]
[107.17325592 185.01803589]
[110.19252014 169.17913818]
[119.83894348 156.18652344]
[134.22999573 148.66046143]
[133.60601807 133.67344666]
[130.16313171 127.07858276]
[133.12823486 118.36882782]
[132.81617737 103.37207031]
[103.41957855 128.62170410]
[76.75202942 108.22940826]
[61.75933075 108.69744873]
[46.76663589 109.16549683]
[31.77393723 109.63353729]
[16.13118172 116.17115784]
[5.51870632 102.94951630]
[15.28581333 89.09166718]
[31.30589485 94.64083862]
[46.29859161 94.17279816]
[61.29128647 93.70475769]
[76.28398132 93.23670959]
[85.27143860 75.22168732]
[107.21170807 67.80894470]
[101.43543243 53.96572495]
[95.65916443 40.12250900]
[89.88288879 26.27929115]
[84.10661316 12.43607330]
[69.45103455 15.80088615]
[54.43759537 16.64032555]
[39.49826431 14.93023777]
[25.06287766 10.71982574]
[11.54676628 4.13023138]
[-0.66118205 -4.64894915]
[-11.20972061 -15.36512184]
[-19.79534721 -27.70995903]
[-26.17103386 -41.32827759]
[-30.15334320 -55.82825089]
[-31.62769318 -70.79268646]
[-30.55166626 -85.79102325]
[-26.95622063 -100.39173889]
[-20.94480324 -114.17472839]
[-12.69037628 -126.74343872]
[-2.43043613 -137.73623657]
[9.53981972 -146.83683777]
[22.87598228 -153.78340149]
[37.19434357 -158.37606812]
[52.08293533 -160.48269653]
[67.11338043 -160.04264832]
[81.85323334 -157.06861877]
[95.87838745 -151.64616394]
[108.78531647 -143.93128967]
[120.20265961 -134.14598083]
[129.80192566 -122.57177734]
[137.30690002 -109.54169464]
[142.50167847 -95.43061829]
[145.23678589 -80.64457703]
[145.43353271 -65.60897064]
[143.08625793 -50.75642395]
[138.26248169 -36.51425934]
[131.10099792 -23.29225922]
[121.80787659 -11.47084713]
[110.65048218 -1.39014590]
[97.94983673 6.65980101]
[103.72610474 20.50301933]
[109.50238037 34.34623718]
[115.27864838 48.18945312]
[121.05492401 62.03267288]
[128.23901367 64.18646240]
[127.89594269 49.19038773]
[142.05210876 44.23024368]
[151.14382935 56.16090012]
[142.60719299 68.49404907]
[149.79129028 70.64784241]
[162.23072815 62.26569748]
[174.67016602 53.88355637]
[187.10961914 45.50141144]
[196.86619568 31.63614845]
[212.89048767 37.17314529]
[212.00584412 54.10400009]
[195.49176025 57.94085312]
[183.05232239 66.32299805]
[170.61286926 74.70513916]
[158.17343140 83.08728027]
[173.10868835 81.69504547]
[186.92835999 75.86267853]
[201.92451477 75.52315521]
[215.99400330 80.72409058]
[227.16362000 90.73607635]
[233.86686707 104.15496063]
[235.16365051 119.09880066]
[230.87208557 133.47177124]
[221.59407043 145.25813293]
[208.63079834 152.80490112]
[193.80030823 155.05363464]
[179.18254089 151.68899536]
[166.82757568 143.18283081]
[158.46813965 130.72811890]
[155.27662659 116.07129669]
[147.81294250 103.06001282]
[148.12500000 118.05677032]
[148.59303284 133.04946899]
[149.21701050 148.03648376]
[162.42883301 153.15104675]
[172.65403748 162.89416504]
[178.36497498 175.76446533]
[178.72599792 189.79687500]
[173.71548462 202.86274719]
[164.12414551 212.99272156]
[151.43046570 218.67349243]
[151.74252319 233.67024231]
[152.05458069 248.66699219]
[152.36662292 263.66375732]
[152.67868042 278.66049194]
[152.99073792 293.65725708]
[153.30279541 308.65402222]
[153.61485291 323.65075684]
[153.92691040 338.64752197]
[154.23896790 353.64428711]
[154.55102539 368.64102173]
[169.13366699 372.58099365]
[182.01487732 380.47091675]
[192.15042114 391.67126465]
[198.71867371 405.27398682]
[201.18716431 420.17645264]
[199.35578918 435.17056274]
[193.37301636 449.04077148]
[183.72381592 460.66271973]
[171.19044495 469.09426880]
[156.78889465 473.65188599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[26 123]
[27 122]
[29 121]
[30 120]
[32 42]
[33 41]
[34 40]
[35 39]
[44 88]
[45 87]
[46 86]
[47 85]
[48 84]
[94 104]
[95 103]
[96 102]
[97 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
