%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAGCCUUGGGGGGGGGGUCUAUUAGCUCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUUCCAGUGAxxxxxxxxxxCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUCCCCCCCCCCUCCUAGCCAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 383.16351318]
[71.19830322 377.14746094]
[59.48964310 367.61804199]
[50.78712082 355.28237915]
[45.73651886 341.05587769]
[44.71262741 325.99417114]
[47.79142761 311.21502686]
[54.74444962 297.81509399]
[65.05573273 286.78875732]
[77.96011353 278.95425415]
[92.50000000 274.89294434]
[92.50000000 259.89294434]
[92.50000000 244.89294434]
[92.50000000 229.89294434]
[92.50000000 214.89294434]
[92.50000000 199.89294434]
[92.50000000 184.89294434]
[92.50000000 169.89294434]
[92.50000000 154.89294434]
[92.50000000 139.89294434]
[85.98094177 138.09413147]
[79.85099792 135.23797607]
[74.28031158 131.40373230]
[69.42351532 126.69785309]
[65.41539764 121.25093842]
[62.36722565 115.21417236]
[60.36359406 108.75512695]
[59.46012115 102.05306244]
[44.59707642 100.03073120]
[29.73402786 98.00839996]
[14.73484039 97.85236359]
[-0.16706240 99.56504822]
[-15.06896496 101.27774048]
[-30.11414528 109.09304047]
[-41.78894043 96.79931641]
[-33.20756912 82.17754364]
[-16.78165436 86.37583923]
[-1.87975216 84.66314697]
[13.02215004 82.95045471]
[-0.08837897 75.66252136]
[-8.83645630 63.47764587]
[-11.54980087 48.72509766]
[-7.70972967 34.22496414]
[1.94968951 22.74909210]
[15.58196354 16.49120903]
[30.58114815 16.64756966]
[44.08000183 23.18828392]
[53.49808502 34.86303329]
[57.03503799 49.44006729]
[54.01473618 64.13285065]
[45.01454163 76.13269806]
[31.75636292 83.14534760]
[46.61941147 85.16768646]
[61.48245621 87.19001770]
[65.70885468 76.97627258]
[72.63568115 68.11802673]
[81.83674622 61.32616043]
[92.69987488 57.17950821]
[104.46732330 56.07667160]
[116.28852844 58.19997787]
[118.15614319 43.31669998]
[115.90980530 36.98728561]
[117.06986237 31.34055328]
[120.42355347 27.85798836]
[122.90867615 13.06528091]
[125.39379120 -1.72742617]
[127.26140594 -16.61070633]
[128.50828552 -31.55879211]
[129.75515747 -46.50688171]
[131.00202942 -61.45496750]
[117.47434998 -68.38825226]
[107.63346863 -79.97382355]
[102.98004913 -94.44496918]
[104.22370148 -109.59494781]
[111.17477417 -123.11349487]
[122.77327728 -132.93911743]
[137.25053406 -137.57350159]
[152.39886475 -136.30992126]
[165.90824890 -129.34107971]
[175.71861267 -117.72965240]
[180.33395386 -103.24631500]
[179.05044556 -88.09966278]
[172.06382751 -74.59944916]
[160.43951416 -64.80436707]
[145.95011902 -60.20809174]
[144.70324707 -45.26000595]
[143.45635986 -30.31191826]
[142.20948792 -15.36383152]
[143.98222351 -13.11332512]
[144.94033813 -10.00270176]
[144.74311829 -6.34989643]
[143.17538452 -2.59313583]
[140.18649292 0.75769240]
[137.70138550 15.55039978]
[135.21626282 30.34310722]
[133.03942871 45.18431091]
[131.17181396 60.06759262]
[141.49902344 70.94641876]
[156.45925903 69.85511017]
[171.41950989 68.76379395]
[186.37976074 67.67248535]
[197.53869629 54.24060059]
[214.62113953 53.02637100]
[227.06799316 64.29285431]
[242.00230408 62.89055252]
[256.93661499 61.48825073]
[271.87091064 60.08594513]
[280.60919189 47.11765671]
[295.65313721 42.84993362]
[309.89947510 49.29786682]
[316.62152100 63.41693878]
[312.64532471 78.54055786]
[299.84832764 87.52780914]
[284.27285767 86.13519287]
[273.27322388 75.02025604]
[258.33889771 76.42256165]
[243.40460205 77.82485962]
[228.47029114 79.22716522]
[221.69271851 90.22994995]
[209.62756348 95.37839508]
[196.61302185 92.57669830]
[187.47106934 82.63273621]
[172.51081848 83.72404480]
[157.55058289 84.81535339]
[142.59033203 85.90666962]
[144.12214661 98.43408966]
[142.10278320 110.68838501]
[136.80644226 121.69921112]
[128.76211548 130.62689209]
[118.70288086 136.82630920]
[107.50000000 139.89294434]
[107.50000000 154.89294434]
[107.50000000 169.89294434]
[107.50000000 184.89294434]
[107.50000000 199.89294434]
[107.50000000 214.89294434]
[107.50000000 229.89294434]
[107.50000000 244.89294434]
[107.50000000 259.89294434]
[107.50000000 274.89294434]
[122.03988647 278.95425415]
[134.94427490 286.78875732]
[145.25555420 297.81509399]
[152.20857239 311.21502686]
[155.28736877 325.99417114]
[154.26348877 341.05587769]
[149.21287537 355.28237915]
[140.51036072 367.61804199]
[128.80169678 377.14746094]
[114.95575714 383.16351318]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 54]
[29 53]
[30 52]
[31 39]
[32 38]
[33 37]
[60 97]
[61 96]
[64 95]
[65 94]
[66 93]
[67 88]
[68 87]
[69 86]
[70 85]
[98 125]
[99 124]
[100 123]
[101 122]
[104 118]
[105 117]
[106 116]
[107 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
