%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCUCGCAUCGGGGGGGGGGUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUACCCUCCCUxxxxxxxxxxAUCCGUCCUAAUCACAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCCCCCCCCCCCUGCUGGCAUC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 367.82296753]
[71.01555634 362.26995850]
[58.81560135 353.40362549]
[49.20452881 341.78131104]
[42.78650284 328.13360596]
[39.96496582 313.31842041]
[40.91728210 298.26705933]
[45.58358765 283.92562866]
[53.67055511 271.19567871]
[64.66983032 260.87741089]
[77.88998413 253.61941528]
[92.50000000 249.87799072]
[92.50000000 234.87799072]
[92.50000000 219.87799072]
[92.50000000 204.87799072]
[92.50000000 189.87799072]
[92.50000000 174.87799072]
[92.50000000 159.87799072]
[92.50000000 144.87799072]
[92.50000000 129.87799072]
[92.50000000 114.87798309]
[87.80619812 100.63129425]
[78.89004517 88.56886292]
[69.97389984 76.50643158]
[61.05774689 64.44400024]
[56.15500259 62.31836319]
[52.91903687 58.84933472]
[51.58318329 54.91422272]
[51.99127960 51.35322952]
[43.83461380 38.76479340]
[35.67794800 26.17635155]
[27.52128220 13.58791256]
[19.10787201 1.16959870]
[10.44126511 -11.07335472]
[1.77465749 -23.31630898]
[-12.51388168 -30.10955620]
[-13.55220604 -44.96792603]
[-22.21881294 -57.21088028]
[-30.88541985 -69.45383453]
[-39.55202866 -81.69678497]
[-49.54312515 -92.88508606]
[-62.48143768 -92.94616699]
[-71.60011292 -101.54972076]
[-72.36112976 -113.66099548]
[-83.34193420 -123.87970734]
[-94.32273865 -134.09840393]
[-105.22982025 -133.07913208]
[-114.68660736 -138.15783691]
[-119.65235138 -147.42517090]
[-118.68432617 -157.67311096]
[-129.23634338 -168.33401489]
[-139.78836060 -178.99491882]
[-154.99543762 -183.36013794]
[-158.44955444 -197.84870911]
[-169.00157166 -208.50961304]
[-184.95404053 -212.31100464]
[-189.37823486 -228.10209656]
[-177.72291565 -239.63836670]
[-161.97807312 -235.05229187]
[-158.34066772 -219.06163025]
[-147.78865051 -208.40072632]
[-133.33630371 -204.79803467]
[-129.12744141 -189.54693604]
[-118.57543182 -178.88603210]
[-108.02341461 -168.22512817]
[-89.07170868 -164.57408142]
[-84.10402679 -145.07920837]
[-73.12322235 -134.86050415]
[-62.14242172 -124.64179993]
[-44.87321472 -121.67211914]
[-39.55202866 -104.07337952]
[-42.51932144 -118.77695465]
[-38.43557739 -133.21035767]
[-28.20448303 -144.17962646]
[-14.09007359 -149.25737000]
[0.78427911 -147.31993103]
[13.12703800 -138.79606628]
[20.20687866 -125.57200623]
[20.45710945 -110.57408905]
[13.82235336 -97.12120819]
[1.77081513 -88.19033813]
[-13.03062725 -85.75778961]
[-27.30907440 -90.36339569]
[-18.64246750 -78.12044525]
[-9.97585964 -65.87748718]
[-1.30925190 -53.63453293]
[12.35939312 -47.71698380]
[14.01761150 -31.98291588]
[22.68421936 -19.73996162]
[31.35082626 -7.49700880]
[35.88188553 -5.81810760]
[39.37918854 -1.24025333]
[40.10972214 5.43124723]
[48.26638794 18.01968575]
[56.42305374 30.60812569]
[64.57971954 43.19656372]
[73.12017822 55.52784729]
[82.03633118 67.59027863]
[90.95247650 79.65270996]
[99.86862946 91.71514130]
[103.13267517 88.52869415]
[108.08718109 86.78072357]
[114.11515808 87.12909698]
[120.37869263 89.98244476]
[135.28314209 91.67283630]
[150.23257446 92.90345001]
[165.21281433 93.67311096]
[180.19305420 94.44277191]
[186.36808777 80.57794189]
[197.13743591 69.88282013]
[211.04463196 63.80384445]
[226.20887756 63.16313553]
[240.57928467 68.04734802]
[252.21241760 77.79592896]
[259.53494263 91.09046936]
[261.55661011 106.13298798]
[258.00393677 120.88910675]
[249.35745239 133.36318970]
[236.78649902 141.86820984]
[221.99118042 145.25393677]
[206.97245789 143.06246948]
[193.76148987 135.59020996]
[184.14495850 123.84769440]
[179.42340088 109.42301178]
[164.44316101 108.65335083]
[149.46292114 107.88368988]
[146.58305359 110.01760864]
[142.50721741 110.82828522]
[137.88497925 109.76036835]
[133.59274292 106.57728577]
[118.68829346 104.88688660]
[107.50000000 114.87798309]
[107.50000000 129.87799072]
[107.50000000 144.87799072]
[107.50000000 159.87799072]
[107.50000000 174.87799072]
[107.50000000 189.87799072]
[107.50000000 204.87799072]
[107.50000000 219.87799072]
[107.50000000 234.87799072]
[107.50000000 249.87799072]
[122.11001587 253.61941528]
[135.33016968 260.87741089]
[146.32945251 271.19567871]
[154.41641235 283.92562866]
[159.08271790 298.26705933]
[160.03503418 313.31842041]
[157.21350098 328.13360596]
[150.79547119 341.78131104]
[141.18440247 353.40362549]
[128.98443604 362.26995850]
[114.96250153 367.82296753]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 100]
[23 99]
[24 98]
[25 97]
[29 96]
[30 95]
[31 94]
[32 93]
[33 90]
[34 89]
[35 88]
[37 86]
[38 85]
[39 84]
[40 83]
[41 71]
[44 69]
[45 68]
[46 67]
[50 65]
[51 64]
[52 63]
[54 61]
[55 60]
[104 131]
[105 130]
[106 126]
[107 125]
[108 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
