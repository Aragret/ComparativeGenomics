%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAGGCCUAAAAGGGGGGGGGGGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCACUACCUAAAAAxxxxxxxxxxUUUGCAGGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGCCCCCCCCCCAGUAGGCCUAGAA\
) } def
/len { sequence length } bind def

/coor [
[55.74897003 459.82211304]
[41.08731079 456.39730835]
[27.45827103 449.99862671]
[15.45765781 440.90582275]
[5.61008453 429.51641846]
[-1.65395570 416.32824707]
[-6.01691008 401.91790771]
[-7.28804827 386.91531372]
[-5.41180229 371.97631836]
[-0.47019356 357.75399780]
[7.32075214 344.87008667]
[17.62044907 333.88784790]
[29.97863770 325.28732300]
[43.85506821 319.44451904]
[58.64313126 316.61486816]
[58.94326401 301.61785889]
[59.24339294 286.62088013]
[59.54352570 271.62387085]
[59.84365845 256.62689209]
[60.14379120 241.62988281]
[60.44392395 226.63288879]
[60.74405670 211.63589478]
[61.04418564 196.63890076]
[61.34431839 181.64189148]
[61.64445114 166.64489746]
[61.94458389 151.64790344]
[62.24471664 136.65090942]
[54.79138184 149.66812134]
[52.47505951 164.48818970]
[43.21554565 176.28910828]
[29.37188911 182.06431580]
[14.47103882 180.34249878]
[2.30928826 171.56230164]
[-4.01491165 157.96066284]
[-2.89034390 143.00288391]
[5.39648581 130.49974060]
[18.73434067 123.63668060]
[33.72550201 124.16230774]
[47.91655731 119.30288696]
[33.13300323 116.76387787]
[18.34945107 114.22486115]
[3.16008449 120.40670776]
[-9.62042522 110.13097382]
[-6.84458542 93.96846771]
[8.63205814 88.54577637]
[20.88846207 99.44131470]
[35.67201233 101.98032379]
[50.45556641 104.51933289]
[53.65162659 97.73440552]
[63.23980713 77.37963104]
[51.86790085 67.59803009]
[37.66150284 73.29336548]
[22.43679428 71.72276306]
[9.69229984 63.24711990]
[2.35661197 49.81409454]
[2.11541772 34.51048660]
[9.02414227 20.85295486]
[21.49521065 11.97990417]
[36.66286087 9.93029404]
[51.04168320 15.17510891]
[61.32752609 26.50913048]
[65.15677643 41.32788467]
[61.64950562 56.22612381]
[73.02140808 66.00772858]
[85.63520813 63.98288727]
[96.99381256 65.97774506]
[105.96112061 71.07424927]
[111.82556915 78.07321930]
[122.59014893 67.62698364]
[133.35472107 57.18075180]
[144.11930847 46.73451614]
[154.88389587 36.28828430]
[165.64846802 25.84205055]
[151.05990601 29.33116531]
[136.06021118 29.42526436]
[121.42902374 26.11945343]
[107.92686462 19.58556557]
[96.25555420 10.16322231]
[87.02175140 -1.65781546]
[80.70542145 -15.26310635]
[77.63487244 -29.94546700]
[77.96970367 -44.94173050]
[81.69252777 -59.47240829]
[88.60981750 -72.78221893]
[98.36203003 -84.17933655]
[110.44226074 -93.07135773]
[124.22259521 -98.99607849]
[138.98675537 -101.64555359]
[153.96731567 -100.88205719]
[168.38560486 -96.74527740]
[181.49217224 -89.45023346]
[192.60578918 -79.37612152]
[201.14875793 -67.04657745]
[206.67701721 -53.10246658]
[208.90324402 -38.26858902]
[207.71171570 -23.31599045]
[203.16435242 -9.02188206]
[195.49754333 3.87074614]
[185.10707092 14.69398022]
[199.56309509 10.69102859]
[214.01910400 6.68807793]
[228.47512817 2.68512630]
[236.29713440 -10.78535271]
[251.01461792 -14.63898277]
[263.80844116 -7.09887123]
[278.26446533 -11.10182190]
[292.72048950 -15.10477352]
[299.04577637 -29.40598679]
[313.10656738 -36.24908829]
[328.26379395 -32.40297318]
[337.36065674 -19.68366241]
[336.10192871 -4.09682178]
[325.08190918 6.99791670]
[309.50393677 8.36195755]
[296.72344971 -0.64875823]
[282.26742554 3.35419297]
[267.81140137 7.35714436]
[260.71823120 20.40407944]
[246.11480713 24.66957283]
[232.47807312 17.14114189]
[218.02206421 21.14409256]
[203.56604004 25.14704514]
[189.11003113 29.14999580]
[176.09471130 36.60663223]
[165.33012390 47.05286407]
[154.56553650 57.49909973]
[143.80096436 67.94532776]
[133.03637695 78.39156342]
[122.27179718 88.83779907]
[123.07247925 125.18356323]
[77.24171448 136.95103455]
[76.94158173 151.94802856]
[76.64144897 166.94503784]
[76.34131622 181.94203186]
[76.04118347 196.93902588]
[75.74105072 211.93601990]
[75.44091797 226.93301392]
[75.14078522 241.93002319]
[74.84065247 256.92700195]
[74.54051971 271.92401123]
[74.24039459 286.92102051]
[73.94026184 301.91799927]
[73.64012909 316.91500854]
[88.30313110 320.33404541]
[101.93468475 326.72735596]
[113.93887329 335.81546021]
[123.79093170 347.20098877]
[131.06016541 360.38629150]
[135.42878723 374.79492188]
[136.70582581 389.79702759]
[134.83544922 404.73675537]
[129.89944458 418.96099854]
[122.11356354 431.84796143]
[111.81819153 442.83425903]
[99.46338654 451.43963623]
[85.58924866 457.28790283]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[25 133]
[26 132]
[27 131]
[39 48]
[40 47]
[41 46]
[50 64]
[51 63]
[68 129]
[69 128]
[70 127]
[71 126]
[72 125]
[73 124]
[99 123]
[100 122]
[101 121]
[102 120]
[105 117]
[106 116]
[107 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
