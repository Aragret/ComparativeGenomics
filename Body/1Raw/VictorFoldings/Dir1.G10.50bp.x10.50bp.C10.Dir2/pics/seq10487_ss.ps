%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACCCUCAUGGGGGGGGGGUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCAUUCUCCUCxxxxxxxxxxGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUUCACACGAGAACCCCCCCCCCAACACCCUCAU\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 382.38253784]
[71.01555634 376.82952881]
[58.81560135 367.96322632]
[49.20452881 356.34091187]
[42.78650284 342.69320679]
[39.96496582 327.87802124]
[40.91728210 312.82662964]
[45.58358765 298.48519897]
[53.67055511 285.75524902]
[64.66983032 275.43698120]
[77.88998413 268.17901611]
[92.50000000 264.43756104]
[92.50000000 249.43757629]
[92.50000000 234.43757629]
[92.50000000 219.43757629]
[92.50000000 204.43757629]
[92.50000000 189.43757629]
[92.50000000 174.43757629]
[92.50000000 159.43757629]
[92.50000000 144.43757629]
[92.50000000 129.43757629]
[92.50000000 114.43756866]
[84.75668335 105.68637085]
[84.87664795 94.00185394]
[92.79801178 85.41148376]
[85.34568787 71.45536041]
[93.34266663 58.88963318]
[93.65064240 43.89279556]
[78.69845581 42.63401031]
[63.85620880 40.42942810]
[49.18366241 37.28792953]
[34.73991013 33.22216415]
[20.58310127 28.24849892]
[6.77024698 22.38696671]
[-6.64303493 15.66116524]
[-19.60273361 8.09818077]
[-32.05666351 -0.27153531]
[-43.95467758 -9.41427994]
[-55.24886703 -19.29323769]
[-65.89375305 -29.86863136]
[-75.84647369 -41.09787369]
[-85.06694794 -52.93575287]
[-93.51805115 -65.33460236]
[-101.16575623 -78.24448395]
[-107.97926331 -91.61342621]
[-113.93113708 -105.38759613]
[-118.99741364 -119.51152039]
[-123.15769196 -133.92834473]
[-126.39522552 -148.57998657]
[-128.69697571 -163.40748596]
[-130.05364990 -178.35110474]
[-130.45982361 -193.35069275]
[-129.91384888 -208.34584045]
[-128.41790771 -223.27616882]
[-125.97803497 -238.08155823]
[-122.60405731 -252.70239258]
[-118.30956268 -267.07980347]
[-113.11183929 -281.15588379]
[-107.03181458 -294.87396240]
[-100.09397125 -308.17880249]
[-92.32624817 -321.01684570]
[-83.75992584 -333.33636475]
[-74.42949677 -345.08776855]
[-64.37252808 -356.22375488]
[-53.62951660 -366.69943237]
[-42.24372482 -376.47268677]
[-30.26099586 -385.50411987]
[-17.72957993 -393.75738525]
[-4.69994116 -401.19921875]
[8.77545834 -407.79968262]
[22.64235497 -413.53219604]
[36.84491348 -418.37365723]
[51.32594299 -422.30459595]
[66.02713776 -425.30917358]
[80.88928986 -427.37530518]
[95.85256195 -428.49465942]
[110.85670471 -428.66268921]
[125.84130096 -427.87878418]
[140.74600220 -426.14608765]
[155.51080322 -423.47152710]
[170.07624817 -419.86593628]
[184.38368225 -415.34378052]
[198.37550354 -409.92330933]
[211.99536133 -403.62631226]
[225.18841553 -396.47817993]
[237.90155029 -388.50769043]
[250.08355713 -379.74691772]
[261.68539429 -370.23114014]
[272.66033936 -359.99868774]
[282.96423340 -349.09078979]
[292.55551147 -337.55130005]
[301.39562988 -325.42675781]
[309.44894409 -312.76593018]
[316.68307495 -299.61981201]
[323.06881714 -286.04135132]
[328.58053589 -272.08520508]
[333.19598389 -257.80761719]
[336.89657593 -243.26600647]
[339.66744995 -228.51898193]
[341.49743652 -213.62590027]
[342.37915039 -198.64674377]
[342.30905151 -183.64183044]
[341.28741455 -168.67156982]
[339.31835938 -153.79623413]
[336.40982056 -139.07574463]
[332.57348633 -124.56936646]
[327.82482910 -110.33550262]
[322.18295288 -96.43148041]
[315.67059326 -82.91328430]
[308.31399536 -69.83534241]
[300.14270020 -57.25031281]
[291.18969727 -45.20888138]
[281.49099731 -33.75953293]
[271.08563232 -22.94836426]
[260.01556396 -12.81891441]
[248.32531738 -3.41196799]
[236.06198120 5.23459482]
[223.27493286 13.08595753]
[210.01565552 20.11050606]
[196.33755493 26.27995300]
[182.29570007 31.56945801]
[167.94664001 35.95771790]
[153.34814453 39.42707062]
[138.55899048 41.96353912]
[123.63874817 43.55691147]
[108.64748383 44.20077133]
[108.33950806 59.19760895]
[115.81385803 72.08106232]
[107.79484558 85.71945953]
[116.26854706 100.16703033]
[107.50000000 114.43756866]
[107.50000000 129.43757629]
[107.50000000 144.43757629]
[107.50000000 159.43757629]
[107.50000000 174.43757629]
[107.50000000 189.43757629]
[107.50000000 204.43757629]
[107.50000000 219.43757629]
[107.50000000 234.43757629]
[107.50000000 249.43757629]
[107.50000000 264.43756104]
[122.11001587 268.17901611]
[135.33016968 275.43698120]
[146.32945251 285.75524902]
[154.41641235 298.48519897]
[159.08271790 312.82662964]
[160.03503418 327.87802124]
[157.21350098 342.69320679]
[150.79547119 356.34091187]
[141.18440247 367.96322632]
[128.98443604 376.82952881]
[114.96250153 382.38253784]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[25 129]
[27 127]
[28 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
