%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAUAGUACGGGGGGGGGGCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAxxxxxxxxxxGACUCCACUUAUGACUCCCUAAAGCCCAUGUCGAAGCCCCCAUCGCUGGGCCCCCCCCCCUCAAUAGUAC\
) } def
/len { sequence length } bind def

/coor [
[95.26805878 364.58648682]
[80.77836609 360.37802124]
[67.87213898 352.56188965]
[57.42933655 341.67105103]
[50.16197586 328.44805908]
[46.56554794 313.79446411]
[46.88526917 298.70935059]
[51.09933853 284.22128296]
[58.92043686 271.31808472]
[69.81530762 260.87948608]
[83.04111481 253.61721802]
[97.69610596 250.02645874]
[98.00816345 235.02969360]
[98.32022095 220.03294373]
[98.63227844 205.03619385]
[98.94432831 190.03944397]
[99.25638580 175.04267883]
[99.56844330 160.04592896]
[99.88050079 145.04917908]
[100.19255829 130.05242920]
[80.57543182 122.40407562]
[71.01788330 103.96058655]
[56.79110718 108.71440125]
[42.56432724 113.46821594]
[28.33754921 118.22203064]
[14.11077023 122.97584534]
[8.54238987 137.58840942]
[-5.14111280 145.15780640]
[-20.47880745 142.11000061]
[-30.22870255 129.88406372]
[-29.78719521 114.25271606]
[-19.36275291 102.59659576]
[-3.87747908 100.41938019]
[9.35695553 108.74906921]
[23.58373451 103.99525452]
[37.81051254 99.24143982]
[52.03729248 94.48762512]
[66.26406860 89.73381042]
[73.58317566 76.64065552]
[70.18019867 62.03176117]
[66.77722168 47.42287064]
[57.88487244 35.34288025]
[44.94681549 27.75297356]
[32.00875854 20.16306496]
[19.07070351 12.57315636]
[6.13264799 4.98324823]
[-6.80540800 -2.60666013]
[-22.03406715 1.61985958]
[-35.74963760 -6.23244333]
[-39.81491470 -21.50493813]
[-31.81804276 -35.13672256]
[-16.50342178 -39.04030228]
[-2.95694613 -30.89975166]
[0.78450012 -15.54471588]
[13.72255611 -7.95480776]
[26.66061211 -0.36489955]
[39.59866714 7.22500896]
[52.53672409 14.81491661]
[65.47477722 22.40482521]
[72.27025604 19.23126030]
[85.86120605 12.88413143]
[92.65668488 9.71056652]
[95.14179993 -5.08214092]
[97.62692261 -19.87484741]
[100.11203766 -34.66755676]
[94.76799774 -49.55889130]
[104.50695801 -60.82840347]
[106.99208069 -75.62110901]
[109.47719574 -90.41381836]
[111.96231842 -105.20652771]
[98.53966522 -112.18418121]
[87.93163300 -122.96958160]
[81.17747498 -136.50607300]
[78.93890381 -151.46748352]
[81.43522644 -166.38806152]
[88.42187500 -179.80603027]
[99.21437836 -190.40682983]
[112.75539398 -197.15191650]
[127.71830750 -199.38046265]
[142.63720703 -196.87414551]
[156.05049133 -189.87850952]
[166.64405823 -179.07890320]
[173.38006592 -165.53337097]
[175.59858704 -150.56896973]
[173.08227539 -135.65176392]
[166.07765198 -122.24316406]
[155.27095032 -111.65682983]
[141.72090149 -104.92990112]
[126.75502014 -102.72140503]
[124.26990509 -87.92869568]
[121.78478241 -73.13599396]
[119.29966736 -58.34328461]
[124.82145691 -44.51002502]
[114.90474701 -32.18243790]
[112.41962433 -17.38973045]
[109.93450928 -2.59702229]
[107.44938660 12.19568443]
[99.09901428 36.72635269]
[81.38611603 44.01988983]
[84.78909302 58.62878418]
[88.19207001 73.23767853]
[109.13419342 71.93011475]
[125.75844574 85.04340363]
[129.42951965 106.09006500]
[144.19557190 108.72892761]
[158.96162415 111.36779785]
[173.72767639 114.00666046]
[188.49374390 116.64552307]
[197.55848694 115.06999207]
[203.53816223 119.49594116]
[212.63371277 118.10932922]
[218.52003479 122.65872192]
[233.16352844 125.90955353]
[247.80703735 129.16036987]
[259.34197998 118.78131104]
[274.77804565 117.19802094]
[288.17980957 125.01931763]
[294.39398193 139.23774719]
[291.03109741 154.38603210]
[279.38424683 164.63935852]
[263.93188477 166.05509949]
[250.61576843 158.08888245]
[244.55621338 143.80387878]
[229.91270447 140.55305481]
[215.26921082 137.30223083]
[200.59268188 134.20390320]
[185.85487366 131.41157532]
[171.08882141 128.77272034]
[156.32276917 126.13385010]
[141.55670166 123.49498749]
[126.79064941 120.85612488]
[115.18930817 130.36448669]
[114.87725067 145.36123657]
[114.56520081 160.35798645]
[114.25314331 175.35473633]
[113.94108582 190.35150146]
[113.62902832 205.34825134]
[113.31697083 220.34500122]
[113.00491333 235.34175110]
[112.69286346 250.33851624]
[127.18579865 254.53579712]
[140.09805298 262.34194946]
[150.54927063 273.22470093]
[157.82684326 286.44210815]
[161.43458557 301.09292603]
[161.12651062 316.17825317]
[156.92362976 330.66958618]
[149.11250305 343.57882690]
[138.22569275 354.02581787]
[125.00549316 361.29830933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[39 101]
[40 100]
[41 99]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[62 97]
[63 96]
[64 95]
[65 94]
[67 92]
[68 91]
[69 90]
[70 89]
[104 131]
[105 130]
[106 129]
[107 128]
[108 127]
[110 126]
[112 125]
[113 124]
[114 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
