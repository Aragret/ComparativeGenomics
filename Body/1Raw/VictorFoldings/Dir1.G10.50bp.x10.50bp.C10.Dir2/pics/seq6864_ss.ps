%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAACCAUUUGGGGGGGGGGGGAUACAUAGGUAUGGUCUGAGCUAUGAUAUCAAUUGGCUUCCUAGGGUUxxxxxxxxxxGGUUUCAAGCCAACCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGCCCCCCCCCCAAAAACCAUUU\
) } def
/len { sequence length } bind def

/coor [
[85.14386749 419.15609741]
[70.58400726 415.24792480]
[57.38286209 407.96826172]
[46.30792999 397.74038696]
[38.00309372 385.15893555]
[32.95117950 370.95535278]
[31.44590378 355.95544434]
[33.57477951 341.03125000]
[39.21403885 327.05047607]
[48.03582001 314.82592773]
[59.52724075 305.06832886]
[73.02019501 298.34497070]
[87.73023224 295.04675293]
[88.03820801 280.04992676]
[88.34619141 265.05307007]
[88.65416718 250.05624390]
[88.96214294 235.05940247]
[89.27011871 220.06256104]
[89.57810211 205.06571960]
[89.88607788 190.06889343]
[90.19405365 175.07205200]
[90.50202942 160.07521057]
[79.95001984 149.41430664]
[64.95080566 149.56829834]
[49.95159912 149.72229004]
[34.95238876 149.87629700]
[19.95555115 150.18426514]
[4.96266508 150.64619446]
[-10.03022099 151.10812378]
[-25.02310562 151.57005310]
[-40.01599121 152.03196716]
[-53.57135010 160.19058228]
[-66.53085327 152.84889221]
[-75.14898682 165.75267029]
[-89.71747589 171.09483337]
[-104.63444519 166.82121277]
[-114.16400146 154.57510376]
[-114.64185333 139.06539917]
[-105.88424683 126.25586700]
[-91.25865936 121.07205963]
[-76.38893890 125.50724030]
[-66.99278259 137.85600281]
[-54.50981522 129.73043823]
[-40.47791672 137.03909302]
[-25.48503304 136.57716370]
[-10.49214649 136.11523438]
[4.50073910 135.65330505]
[19.49362564 135.19139099]
[26.12334061 131.82106018]
[34.79839325 134.87709045]
[49.79759979 134.72308350]
[64.79681396 134.56909180]
[79.79602051 134.41508484]
[64.54758453 109.91500854]
[70.32158661 83.99664307]
[90.68642426 70.82705688]
[89.76300812 55.85550308]
[88.83959198 40.88395309]
[87.91618347 25.91240501]
[86.99276733 10.94085503]
[86.06935120 -4.03069496]
[85.14594269 -19.00224495]
[70.29500580 -21.56083488]
[56.43466187 -27.47587395]
[44.31239319 -36.42837524]
[34.58192825 -47.93553543]
[27.76802063 -61.37679291]
[24.23813820 -76.02727509]
[24.18264198 -91.09690094]
[27.60452461 -105.77298737]
[34.31924820 -119.26406097]
[43.96469498 -130.84257507]
[56.02070236 -139.88412476]
[69.83709717 -145.90107727]
[84.66879272 -148.56898499]
[99.71591949 -147.74394226]
[114.16700745 -143.47045898]
[127.24273682 -135.97898865]
[138.23794556 -125.67355347]
[146.55966187 -113.10988617]
[151.75912476 -98.96555328]
[153.55593872 -84.00332642]
[151.85317993 -69.03010559]
[146.74269104 -54.85337448]
[138.50007629 -42.23767090]
[127.56983948 -31.86334229]
[114.54144287 -24.28986168]
[100.11749268 -19.92565918]
[101.04090118 -4.95410824]
[101.96431732 10.01744175]
[102.88773346 24.98899078]
[103.81114197 39.96054077]
[104.73455811 54.93209076]
[105.65797424 69.90364075]
[110.78347778 71.33782959]
[115.58325958 73.63780212]
[119.91231537 76.73407745]
[123.63990021 80.53314209]
[137.20179749 74.12416077]
[150.76368713 67.71518707]
[164.32559204 61.30621338]
[177.88748169 54.89723587]
[189.62467957 42.66307449]
[204.62989807 50.55481720]
[201.20042419 67.15827942]
[184.29646301 68.45913696]
[170.73455811 74.86811066]
[157.17266846 81.27708435]
[143.61076355 87.68605804]
[130.04887390 94.09503937]
[134.10066223 108.98880005]
[130.27706909 125.99803925]
[145.14367676 127.99409485]
[160.01026917 129.99015808]
[174.87687683 131.98620605]
[189.74346924 133.98226929]
[206.24632263 130.09742737]
[214.54779053 144.87991333]
[202.64109802 156.94915771]
[187.74740601 148.84886169]
[172.88081360 146.85281372]
[158.01422119 144.85675049]
[143.14761353 142.86070251]
[128.28102112 140.86463928]
[122.58547974 145.74427795]
[137.31784058 148.56520081]
[144.29798889 161.84214783]
[138.26985168 175.57756042]
[123.77264404 179.42864990]
[111.72277832 170.49551392]
[111.19440460 155.50355530]
[105.49887085 160.38319397]
[105.19089508 175.38002014]
[104.88291168 190.37686157]
[104.57493591 205.37370300]
[104.26696014 220.37054443]
[103.95898438 235.36737061]
[103.65100098 250.36421204]
[103.34302521 265.36105347]
[103.03504944 280.35787964]
[102.72707367 295.35473633]
[117.28929901 299.25408936]
[130.49485779 306.52572632]
[141.57598877 316.74688721]
[149.88844299 329.32330322]
[154.94897461 343.52383423]
[156.46333313 358.52282715]
[154.34350586 373.44830322]
[148.71272278 387.43249512]
[139.89836121 399.66238403]
[128.41285706 409.42694092]
[114.92398071 416.15847778]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 53]
[24 52]
[25 51]
[26 50]
[27 48]
[28 47]
[29 46]
[30 45]
[31 44]
[33 42]
[56 94]
[57 93]
[58 92]
[59 91]
[60 90]
[61 89]
[62 88]
[98 110]
[99 109]
[100 108]
[101 107]
[102 106]
[112 124]
[113 123]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
