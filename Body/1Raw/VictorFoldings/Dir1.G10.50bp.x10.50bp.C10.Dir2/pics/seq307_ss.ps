%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAACCCCCCGGGGGGGGGGCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAxxxxxxxxxxCACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCCCCCCCCCCCGAACCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.06109619 441.94531250]
[74.21515656 435.92926025]
[62.50649643 426.39984131]
[53.80397034 414.06417847]
[48.75336838 399.83767700]
[47.72947693 384.77597046]
[50.80827713 369.99682617]
[57.76129913 356.59689331]
[68.07257843 345.57055664]
[80.97696686 337.73605347]
[95.51685333 333.67474365]
[95.51685333 318.67474365]
[95.51685333 303.67474365]
[95.51685333 288.67474365]
[95.51685333 273.67474365]
[95.51685333 258.67474365]
[95.51685333 243.67474365]
[95.51685333 228.67474365]
[95.51685333 213.67474365]
[95.51685333 198.67474365]
[85.92574310 184.01150513]
[95.18000031 168.12632751]
[94.86794281 153.12957764]
[94.55588531 138.13282776]
[93.93190765 123.14581299]
[92.99628448 108.17501831]
[88.39071655 93.89955902]
[80.40080261 81.20462799]
[71.88970947 68.85305786]
[62.87218094 56.86622238]
[53.85464859 44.87939072]
[44.83712006 32.89255905]
[33.04048157 23.62760735]
[19.25809860 17.70764542]
[5.47571754 11.78768158]
[-8.30666351 5.86771870]
[-17.63843727 17.72438049]
[-29.72154808 26.76101875]
[-43.73215103 32.36149979]
[-58.71498108 34.14397430]
[-73.64848328 31.98690796]
[-87.51446533 26.03737640]
[-99.36752319 16.70102692]
[-108.39949799 4.61442709]
[-113.99456787 -9.39833832]
[-115.77125549 -24.38185501]
[-113.60842896 -39.31452179]
[-107.65354156 -53.17820740]
[-98.31261444 -65.02766418]
[-86.22252655 -74.05496216]
[-72.20760345 -79.64462280]
[-57.22340012 -81.41552734]
[-42.29156876 -79.24693298]
[-28.43018532 -73.28669739]
[-16.58434105 -63.94119263]
[-7.56170464 -51.84762192]
[-1.97745645 -37.83053970]
[-0.21233891 -22.84565544]
[-2.38670063 -7.91466236]
[11.39568043 -1.99469948]
[25.17806244 3.92526364]
[38.96044540 9.84522629]
[30.27545929 -2.38469744]
[24.58406067 -16.26302528]
[22.18166542 -31.06939125]
[23.19297028 -46.03526306]
[27.56548309 -60.38381958]
[35.07224655 -73.37029266]
[45.32361221 -84.32061005]
[57.78748322 -92.66638947]
[71.81690216 -97.97443390]
[86.68367004 -99.96921539]
[101.61611938 -98.54721069]
[115.83915710 -93.78222656]
[128.61453247 -85.92158508]
[139.27914429 -75.37329865]
[147.27940369 -62.68489075]
[152.20008850 -48.51496124]
[153.78576660 -33.59901047]
[151.95413208 -18.71125984]
[146.80026245 -4.62447023]
[138.59167480 7.93017244]
[127.75443268 18.30101013]
[114.85106659 25.94973755]
[100.55132294 30.47934151]
[85.59744263 31.65470695]
[70.76561737 29.41482925]
[56.82395172 23.87502670]
[65.84148407 35.86185837]
[74.85901642 47.84869385]
[83.87654114 59.83552551]
[86.69742584 60.33549118]
[89.48271942 62.01956940]
[91.76651764 64.87722015]
[93.09655762 68.72455597]
[93.09572601 73.21471405]
[101.08564758 85.90963745]
[100.84776306 70.91152954]
[104.13957977 56.27718735]
[110.77688599 42.82556534]
[120.38825989 31.30942154]
[132.43583679 22.37320709]
[146.24542236 16.51699829]
[161.04423523 14.06851101]
[176.00413513 15.16476345]
[190.28791809 19.74440956]
[203.09629822 27.55116844]
[213.71249390 38.14817047]
[221.54241943 50.94240189]
[226.14788818 65.21788788]
[227.27120972 80.17577362]
[224.84950256 94.97898865]
[219.01828003 108.79915619]
[210.10388184 120.86287689]
[198.60514832 130.49507141]
[185.16555786 137.15670776]
[170.53718567 140.47499084]
[155.53866577 140.26423645]
[141.00932312 136.53625488]
[127.76220703 129.49963379]
[116.53865051 119.54816437]
[107.96707153 107.23938751]
[108.90270233 122.21018219]
[112.28802490 128.01078796]
[112.19941711 133.77476501]
[109.55264282 137.82077026]
[109.86470032 152.81752014]
[110.17675018 167.81427002]
[118.94983673 177.32673645]
[118.86540985 189.86515808]
[110.51685333 198.67474365]
[110.51685333 213.67474365]
[110.51685333 228.67474365]
[110.51685333 243.67474365]
[110.51685333 258.67474365]
[110.51685333 273.67474365]
[110.51685333 288.67474365]
[110.51685333 303.67474365]
[110.51685333 318.67474365]
[110.51685333 333.67474365]
[125.05673981 337.73605347]
[137.96112061 345.57055664]
[148.27239990 356.59689331]
[155.22541809 369.99682617]
[158.30422974 384.77597046]
[157.28033447 399.83767700]
[152.22973633 414.06417847]
[143.52720642 426.39984131]
[131.81854248 435.92926025]
[117.97260284 441.94531250]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 128]
[23 127]
[24 126]
[25 123]
[26 122]
[27 97]
[28 96]
[29 91]
[30 90]
[31 89]
[32 88]
[33 62]
[34 61]
[35 60]
[36 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
