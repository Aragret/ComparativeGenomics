%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUUUAUCGGGGGGGGGGUCCACACUAGCAGAGACCAACCGAACCCCCUUCGACCUUGCCGAAGGGGAxxxxxxxxxxGCAAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCCCCCCCCCCCAUGAUUUAUC\
) } def
/len { sequence length } bind def

/coor [
[65.65869904 626.58013916]
[52.43849945 619.30767822]
[41.55169678 608.86065674]
[33.74056625 595.95141602]
[29.53768349 581.46008301]
[29.22961044 566.37475586]
[32.83735275 551.72393799]
[40.11492538 538.50653076]
[50.56613159 527.62377930]
[63.47839355 519.81762695]
[77.97132874 515.62030029]
[77.65927887 500.62356567]
[77.34722137 485.62683105]
[77.03516388 470.63006592]
[76.72310638 455.63330078]
[76.41104889 440.63656616]
[76.09899139 425.63980103]
[75.78694153 410.64306641]
[75.47488403 395.64630127]
[75.16282654 380.64953613]
[63.74182129 390.37377930]
[48.77571487 389.36596680]
[38.76157761 378.19827271]
[39.38497162 363.21124268]
[50.29196930 352.91378784]
[65.29006958 353.15234375]
[75.86464691 363.79290771]
[77.42222595 348.87399292]
[78.97980499 333.95507812]
[80.22667694 319.00698853]
[81.16230774 304.03619385]
[78.42282867 297.11947632]
[82.27632141 288.76470947]
[83.52320099 273.81661987]
[84.77007294 258.86853027]
[70.89440918 248.02722168]
[66.21585083 230.88920593]
[72.77255249 214.21011353]
[88.13515472 204.68103027]
[88.75913239 189.69401550]
[89.38311005 174.70700073]
[90.00708771 159.71998596]
[90.63106537 144.73297119]
[91.25504303 129.74594116]
[70.98092651 117.96859741]
[63.31700897 93.47518158]
[75.10121155 68.20283508]
[65.11848450 57.00706863]
[55.13575745 45.81130600]
[45.15303421 34.61553955]
[35.17030716 23.41977310]
[25.18758011 12.22400665]
[15.20485306 1.02824092]
[5.22212648 -10.16752529]
[-10.40191269 -9.51683617]
[-22.75725555 -19.10221672]
[-26.01008606 -34.39774323]
[-18.62451935 -48.18133545]
[-4.08779049 -53.94480133]
[10.73629856 -48.96681213]
[18.84826851 -35.59781647]
[16.41789246 -20.15025139]
[26.40061951 -8.95448589]
[36.38334656 2.24128032]
[46.36607361 13.43704605]
[56.34879684 24.63281250]
[66.33152771 35.82857895]
[76.31425476 47.02434540]
[86.29697418 58.22010803]
[93.79332733 58.45413208]
[90.40019226 43.84294891]
[87.00706482 29.23176575]
[83.61393738 14.62058163]
[75.94105530 1.73155642]
[75.90776062 -13.26840687]
[83.52334595 -26.19136620]
[96.66156006 -33.42927551]
[111.65425873 -32.96133041]
[124.31552887 -24.91818428]
[131.11039734 -11.54545498]
[130.14173889 3.42323589]
[121.67971802 15.80891991]
[117.38182068 30.18000412]
[113.08392334 44.55109024]
[108.78601837 58.92217255]
[116.28237152 59.15619278]
[126.94399261 48.60490417]
[131.31024170 33.39811325]
[145.79904175 29.94498634]
[156.46066284 19.39369583]
[167.12229919 8.84240532]
[177.78392029 -1.70888484]
[181.58639526 -17.66110039]
[197.37779236 -22.08421898]
[208.91326904 -10.42811394]
[204.32612610 5.31641293]
[188.33520508 8.95274162]
[177.67358398 19.50403214]
[167.01196289 30.05532265]
[156.35032654 40.60661316]
[152.74667358 55.05870056]
[137.49528503 59.26652908]
[126.83365631 69.81781769]
[134.51779175 82.23233032]
[137.04695129 96.03282166]
[134.47700500 109.24595642]
[127.56525421 120.12793732]
[117.61331177 127.39458466]
[106.24205780 130.36991882]
[105.61808014 145.35694885]
[104.99410248 160.34396362]
[104.37012482 175.33097839]
[103.74614716 190.31799316]
[103.12216949 205.30500793]
[113.91809845 211.75205994]
[120.88642120 222.13198853]
[122.74372101 234.42202759]
[119.19537354 246.25877380]
[110.98032379 255.39265442]
[99.71816254 260.11538696]
[98.47128296 275.06347656]
[97.22441101 290.01156616]
[96.13310242 304.97183228]
[95.19747162 319.94259644]
[97.83423615 326.11959839]
[97.02865601 331.82766724]
[93.89871979 335.51266479]
[92.34114075 350.43154907]
[90.78355408 365.35046387]
[90.15957642 380.33749390]
[90.47163391 395.33422852]
[90.78369141 410.33099365]
[91.09574890 425.32775879]
[91.40780640 440.32449341]
[91.71986389 455.32125854]
[92.03191376 470.31802368]
[92.34397125 485.31475830]
[92.65602875 500.31152344]
[92.96808624 515.30828857]
[107.62307739 518.89904785]
[120.84888458 526.16131592]
[131.74375916 536.59991455]
[139.56484985 549.50311279]
[143.77891541 563.99114990]
[144.09864807 579.07629395]
[140.50221252 593.72985840]
[133.23484802 606.95288086]
[122.79205322 617.84368896]
[109.88582611 625.65985107]
[95.39613342 629.86828613]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[27 129]
[28 128]
[29 127]
[30 124]
[31 123]
[33 122]
[34 121]
[35 120]
[39 114]
[40 113]
[41 112]
[42 111]
[43 110]
[44 109]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[86 103]
[87 102]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
