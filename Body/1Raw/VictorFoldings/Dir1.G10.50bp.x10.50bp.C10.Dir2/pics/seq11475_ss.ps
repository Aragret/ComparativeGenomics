%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCAACAUCUGGGGGGGGGGCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAxxxxxxxxxxCUCUCCUCGCUCCGGGCCCAUAACACUUGGGGGUAGCUAAAGUGAACUGUCCCCCCCCCCAUCCGACAUCU\
) } def
/len { sequence length } bind def

/coor [
[60.57924271 461.56719971]
[47.09036255 454.83566284]
[35.60486221 445.07107544]
[26.79049301 432.84118652]
[21.15970993 418.85699463]
[19.03988266 403.93151855]
[20.55425072 388.93252563]
[25.61477470 374.73199463]
[33.92723846 362.15557861]
[45.00836945 351.93441772]
[58.21392441 344.66278076]
[72.77614594 340.76342773]
[72.46817017 325.76660156]
[72.16019440 310.76974487]
[71.85221863 295.77291870]
[71.54424286 280.77606201]
[71.23625946 265.77923584]
[70.92828369 250.78239441]
[70.62030792 235.78555298]
[70.31233215 220.78872681]
[58.15899658 211.99687195]
[43.81893539 216.39718628]
[29.47887230 220.79748535]
[15.13881207 225.19778442]
[13.34029102 240.32011414]
[5.54087257 253.40022278]
[-6.90814590 262.17187500]
[-21.84989738 265.11532593]
[-36.69563293 261.72061157]
[-48.87324142 252.57591248]
[-56.27287292 239.26556396]
[-57.61250305 224.09568787]
[-52.66002655 209.69453430]
[-42.27349472 198.55722046]
[-28.25243568 192.61334229]
[-13.02608299 192.89270020]
[0.76750743 199.34689331]
[10.73851109 210.85771179]
[25.07857323 206.45741272]
[39.41863251 202.05711365]
[53.75869370 197.65681458]
[64.41960144 187.10479736]
[68.96689606 172.81066895]
[73.51418304 158.51654053]
[78.06147766 144.22241211]
[82.60876465 129.92828369]
[74.38042450 123.27648163]
[68.54589844 114.44980621]
[65.65034485 104.27297974]
[65.96430969 93.69689941]
[69.45846558 83.70977020]
[58.06739044 73.95049286]
[46.67631531 64.19121552]
[30.46574783 61.71139526]
[24.76095581 46.33650208]
[35.43054199 33.88290787]
[51.49855042 37.16180420]
[56.43558884 52.80014420]
[67.82666779 62.55941772]
[79.21773529 72.31869507]
[88.55343628 64.50325012]
[100.80404663 60.02910995]
[100.18821716 45.04175568]
[85.41356659 42.04624939]
[71.78540802 35.60134888]
[60.09607315 26.08174515]
[51.02515793 14.04090023]
[45.10003662 0.17885247]
[42.66518784 -14.69847775]
[43.86217117 -29.72614098]
[48.62139130 -44.03044891]
[56.66616058 -56.77976990]
[67.52876282 -67.23287201]
[80.57765961 -74.78202820]
[95.05420685 -78.98833466]
[110.11675262 -79.60725403]
[124.88958740 -76.60279083]
[138.51383972 -70.14962769]
[150.19740295 -60.62293625]
[159.26101685 -48.57659531]
[165.17773438 -34.71095657]
[167.60356140 -19.83215332]
[166.39746094 -4.80521917]
[161.62956238 9.49620152]
[153.57707214 22.24064064]
[142.70814514 32.68715668]
[129.65466309 40.22839737]
[115.17557526 44.42593002]
[115.79139709 59.41328430]
[128.62504578 67.17842102]
[142.18695068 60.76944351]
[155.74884033 54.36046982]
[169.24423218 47.81259918]
[182.67167664 41.12652206]
[185.61637878 36.66737366]
[189.59461975 34.08296204]
[193.70191956 33.45072556]
[197.13793945 34.47098541]
[210.95152283 28.62419510]
[224.76510620 22.77740669]
[238.57868958 16.93062019]
[242.99275208 1.92894959]
[256.04553223 -6.68258953]
[271.57394409 -4.83789301]
[282.24591064 6.59203005]
[283.02246094 22.21031952]
[273.53695679 34.64249802]
[258.26812744 38.01846695]
[244.42547607 30.74420166]
[230.61189270 36.59099197]
[216.79830933 42.43777847]
[202.98472595 48.28456497]
[189.35775757 54.55397034]
[175.93029785 61.24004745]
[171.31610107 67.07282257]
[162.15782166 67.92236328]
[148.59593201 74.33133698]
[135.03402710 80.74031830]
[138.60977173 101.47227478]
[131.22030640 120.40429688]
[115.67712402 132.35783386]
[96.90289307 134.47557068]
[92.35560608 148.76969910]
[87.80831146 163.06382751]
[83.26102448 177.35795593]
[78.71373749 191.65209961]
[82.58595276 195.09231567]
[85.56064606 199.43107605]
[87.43045044 204.43460083]
[88.04878235 209.82160950]
[87.34062195 215.27915955]
[85.30916595 220.48074341]
[85.61714172 235.47758484]
[85.92512512 250.47442627]
[86.23310089 265.47125244]
[86.54107666 280.46810913]
[86.84905243 295.46493530]
[87.15703583 310.46176147]
[87.46501160 325.45861816]
[87.77298737 340.45544434]
[102.48302460 343.75366211]
[115.97598267 350.47702026]
[127.46739960 360.23461914]
[136.28918457 372.45916748]
[141.92843628 386.43994141]
[144.05731201 401.36413574]
[142.55204773 416.36407471]
[137.50012207 430.56762695]
[129.19529724 443.14910889]
[118.12036133 453.37695312]
[104.91921234 460.65661621]
[90.35935974 464.56478882]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 41]
[22 40]
[23 39]
[24 38]
[42 126]
[43 125]
[44 124]
[45 123]
[46 122]
[51 60]
[52 59]
[53 58]
[62 89]
[63 88]
[90 118]
[91 117]
[92 116]
[93 114]
[94 113]
[98 112]
[99 111]
[100 110]
[101 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
