%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACCUUAGCGGGGGGGGGGCAAACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGxxxxxxxxxxCCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCCCCCCCCCCCACAACCUUAAC\
) } def
/len { sequence length } bind def

/coor [
[101.94734192 649.30175781]
[87.92539978 643.74877930]
[75.72544098 634.88244629]
[66.11437225 623.26013184]
[59.69634628 609.61242676]
[56.87480927 594.79724121]
[57.82712555 579.74584961]
[62.49343109 565.40441895]
[70.58039856 552.67449951]
[81.57967377 542.35620117]
[94.79982758 535.09826660]
[109.40984344 531.35681152]
[109.40984344 516.35681152]
[109.40984344 501.35681152]
[109.40984344 486.35681152]
[109.40984344 471.35681152]
[109.40984344 456.35681152]
[109.40984344 441.35681152]
[109.40984344 426.35681152]
[109.40984344 411.35681152]
[109.40984344 396.35681152]
[95.54895020 392.59011841]
[83.13076782 385.34786987]
[73.01013947 375.12121582]
[65.88562775 362.60711670]
[62.25132751 348.66067505]
[62.36258698 334.23675537]
[66.21808624 320.32458496]
[73.55949402 307.88000488]
[83.88877869 297.75967407]
[96.50194550 290.66210938]
[110.53708649 287.07965088]
[110.84506226 272.08279419]
[111.15303802 257.08596802]
[111.46101379 242.08912659]
[110.38394928 227.12785339]
[107.93102264 212.32977295]
[105.47808838 197.53169250]
[103.02516174 182.73361206]
[99.68148804 179.24519348]
[98.53333282 173.59988403]
[100.78835297 167.27868652]
[98.94503021 152.39237976]
[97.10170746 137.50607300]
[95.25838470 122.61976624]
[93.41505432 107.73345947]
[89.35557556 100.70761108]
[91.68994904 92.52297974]
[90.15265656 77.60195923]
[88.61536407 62.68094254]
[76.18226624 56.65012741]
[68.42742157 45.34394455]
[67.29682159 31.78934669]
[72.98007202 19.55138779]
[83.88876343 11.79557133]
[82.65814972 -3.15386295]
[81.42753601 -18.10329819]
[78.37814331 -22.49151421]
[77.45307922 -27.14445686]
[78.38887787 -31.19339180]
[80.61047363 -34.00617218]
[80.30249786 -49.00300980]
[79.99451447 -63.99984741]
[77.52883911 -67.74418640]
[76.52422333 -71.68301392]
[76.85706329 -75.32113647]
[78.25210571 -78.25764465]
[80.32778168 -80.22808075]
[81.25119781 -95.19963074]
[82.17460632 -110.17118073]
[83.09802246 -125.14273071]
[69.57396698 -132.14414978]
[60.07193375 -144.04502869]
[56.23820496 -158.78350830]
[58.73699951 -173.80601501]
[67.13538361 -186.50984192]
[79.97828674 -194.69393921]
[95.04060364 -196.94039917]
[109.71269226 -192.85998535]
[121.45252228 -183.15966797]
[128.22610474 -169.52008057]
[128.85986328 -154.30435181]
[123.24401093 -140.14871216]
[112.35151672 -129.50572205]
[98.06957245 -124.21931458]
[97.14615631 -109.24776459]
[96.22274780 -94.27621460]
[95.29933167 -79.30466461]
[94.99135590 -64.30782318]
[95.29933167 -49.31098938]
[95.60730743 -34.31415176]
[96.37696838 -19.33390999]
[97.60758209 -4.38447523]
[98.83819580 10.56495953]
[113.11348724 18.61269760]
[119.86698151 33.72567368]
[116.26798248 50.05282211]
[103.53638458 61.14365005]
[105.07367706 76.06466675]
[106.61096954 90.98568726]
[108.30136871 105.89012909]
[110.14469147 120.77644348]
[111.98801422 135.66275024]
[113.83133698 150.54905701]
[115.67465973 165.43536377]
[117.82324219 180.28068542]
[120.27616882 195.07876587]
[122.72909546 209.87684631]
[125.18202972 224.67492676]
[132.93562317 211.83430481]
[146.33546448 205.09304810]
[161.26734924 206.52095032]
[173.14669800 215.67959595]
[178.32618713 229.75698853]
[175.21554565 244.43090820]
[164.76982117 255.19598389]
[150.19619751 258.74700928]
[135.96926880 253.99366760]
[126.45785522 242.39710999]
[126.14987946 257.39395142]
[125.84189606 272.39077759]
[125.53392029 287.38763428]
[140.52153015 292.05838013]
[153.58111572 300.74383545]
[163.66510010 312.73751831]
[169.96736145 327.06799316]
[171.98767090 342.57754517]
[169.57133484 358.01568604]
[162.92105103 372.13995361]
[152.57994080 383.81604004]
[139.38716125 392.10870361]
[124.40984344 396.35681152]
[124.40984344 411.35681152]
[124.40984344 426.35681152]
[124.40984344 441.35681152]
[124.40984344 456.35681152]
[124.40984344 471.35681152]
[124.40984344 486.35681152]
[124.40984344 501.35681152]
[124.40984344 516.35681152]
[124.40984344 531.35681152]
[139.01985168 535.09826660]
[152.24002075 542.35620117]
[163.23928833 552.67449951]
[171.32626343 565.40441895]
[175.99255371 579.74584961]
[176.94487000 594.79724121]
[174.12333679 609.61242676]
[167.70532227 623.26013184]
[158.09423828 634.88244629]
[145.89428711 643.74877930]
[131.87234497 649.30175781]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[32 122]
[33 121]
[34 120]
[35 119]
[36 109]
[37 108]
[38 107]
[39 106]
[42 105]
[43 104]
[44 103]
[45 102]
[46 101]
[48 100]
[49 99]
[50 98]
[55 94]
[56 93]
[57 92]
[61 91]
[62 90]
[63 89]
[68 88]
[69 87]
[70 86]
[71 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
