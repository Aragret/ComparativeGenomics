%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUGCCUGGGGGGGGGGCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCxxxxxxxxxxUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAAAACCCCCUCCCCCCCCCCCCCCAUGCUU\
) } def
/len { sequence length } bind def

/coor [
[85.05905151 350.13757324]
[71.21311188 344.12155151]
[59.50444794 334.59213257]
[50.80192184 322.25646973]
[45.75131989 308.02993774]
[44.72742844 292.96826172]
[47.80622864 278.18911743]
[54.75925064 264.78918457]
[65.07053375 253.76284790]
[77.97491455 245.92832947]
[92.51480103 241.86701965]
[92.51480103 226.86701965]
[92.51480103 211.86701965]
[92.51480103 196.86701965]
[92.51480103 181.86701965]
[92.51480103 166.86701965]
[92.51480103 151.86701965]
[92.51480103 136.86701965]
[92.51480103 121.86702728]
[92.51480103 106.86702728]
[89.34870911 99.39307404]
[92.67408752 91.55577850]
[92.98614502 76.55902863]
[93.29819489 61.56227112]
[78.34243774 60.35367584]
[63.48572159 58.25281906]
[48.78124237 55.26723099]
[34.28163147 51.40759659]
[20.03879547 46.68772888]
[6.10372066 41.12452316]
[-7.47370768 34.73789978]
[-20.64488602 27.55072021]
[-33.36266708 19.58870888]
[-45.58152008 10.88037205]
[-57.25770569 1.45688140]
[-68.34942627 -8.64802933]
[-78.81697845 -19.39818573]
[-88.62289429 -30.75510597]
[-97.73205566 -42.67813492]
[-106.11186981 -55.12458801]
[-113.73233032 -68.04991913]
[-120.56616974 -81.40784454]
[-126.58890533 -95.15055847]
[-131.77899170 -109.22885895]
[-136.11784363 -123.59234619]
[-139.58993530 -138.18960571]
[-142.18281555 -152.96839905]
[-143.88723755 -167.87579346]
[-144.69708252 -182.85844421]
[-144.60943604 -197.86270142]
[-143.62464905 -212.83486938]
[-141.74620056 -227.72132874]
[-138.98085022 -242.46882629]
[-135.33848572 -257.02453613]
[-130.83215332 -271.33636475]
[-125.47796631 -285.35305786]
[-119.29511261 -299.02450562]
[-112.30570984 -312.30169678]
[-104.53478241 -325.13711548]
[-96.01014709 -337.48483276]
[-86.76232910 -349.30062866]
[-76.82442474 -360.54223633]
[-66.23200989 -371.16940308]
[-55.02301025 -381.14404297]
[-43.23754120 -390.43051147]
[-30.91779709 -398.99551392]
[-18.10787964 -406.80841064]
[-4.85364485 -413.84124756]
[8.79746056 -420.06884766]
[22.79656792 -425.46890259]
[37.09356689 -430.02206421]
[51.63727188 -433.71206665]
[66.37562561 -436.52569580]
[81.25586700 -438.45285034]
[96.22472382 -439.48666382]
[111.22862244 -439.62341309]
[126.21383667 -438.86264038]
[141.12673950 -437.20703125]
[155.91392517 -434.66253662]
[170.52247620 -431.23828125]
[184.90010071 -426.94647217]
[198.99531555 -421.80249023]
[212.75767517 -415.82479858]
[226.13790894 -409.03472900]
[239.08811951 -401.45663452]
[251.56193542 -393.11761475]
[263.51473999 -384.04751587]
[274.90368652 -374.27883911]
[285.68804932 -363.84655762]
[295.82922363 -352.78796387]
[305.29089355 -341.14270020]
[314.03918457 -328.95242310]
[322.04278564 -316.26077271]
[329.27307129 -303.11318970]
[335.70410156 -289.55676270]
[341.31289673 -275.63995361]
[346.07937622 -261.41265869]
[349.98648071 -246.92576599]
[353.02017212 -232.23114014]
[355.16967773 -217.38137817]
[356.42721558 -202.42965698]
[356.78836060 -187.42948914]
[356.25177002 -172.43457031]
[354.81936646 -157.49858093]
[352.49630737 -142.67498779]
[349.29086304 -128.01686096]
[345.21456909 -113.57666016]
[340.28198242 -99.40608978]
[334.51074219 -85.55587769]
[327.92153931 -72.07559967]
[320.53796387 -59.01351166]
[312.38641357 -46.41637039]
[303.49609375 -34.32927704]
[293.89883423 -22.79549789]
[283.62899780 -11.85631847]
[272.72329712 -1.55090165]
[261.22082520 8.08386326]
[249.16275024 17.01348495]
[236.59222412 25.20599937]
[223.55424500 32.63207626]
[210.09548950 39.26513672]
[196.26412964 45.08142853]
[182.10969543 50.06013870]
[167.68286133 54.18344116]
[153.03523254 57.43657684]
[138.21928406 59.80789566]
[123.28804779 61.28891373]
[108.29495239 61.87432861]
[107.98289490 76.87107849]
[107.67083740 91.86783600]
[107.51480103 106.86702728]
[107.51480103 121.86702728]
[107.51480103 136.86701965]
[107.51480103 151.86701965]
[107.51480103 166.86701965]
[107.51480103 181.86701965]
[107.51480103 196.86701965]
[107.51480103 211.86701965]
[107.51480103 226.86701965]
[107.51480103 241.86701965]
[122.05468750 245.92832947]
[134.95907593 253.76284790]
[145.27035522 264.78918457]
[152.22337341 278.18911743]
[155.30216980 292.96826172]
[154.27828979 308.02993774]
[149.22767639 322.25646973]
[140.52516174 334.59213257]
[128.81649780 344.12155151]
[114.97055817 350.13757324]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[24 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
