%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACUAAUCGGGGGGGGGGGUCCCAACAAUUAUAUUACUACCACUGACAUGACUUUCCAAAAAACACAUxxxxxxxxxxAAAACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCCCCCCCCCCCAAAACUAACC\
) } def
/len { sequence length } bind def

/coor [
[84.67090607 390.04928589]
[70.82496643 384.03326416]
[59.11630249 374.50384521]
[50.41378021 362.16818237]
[45.36317825 347.94165039]
[44.33928680 332.87997437]
[47.41808319 318.10083008]
[54.37110519 304.70089722]
[64.68238831 293.67456055]
[77.58676910 285.84005737]
[92.12665558 281.77874756]
[92.12665558 266.77874756]
[92.12665558 251.77873230]
[92.12665558 236.77873230]
[92.12665558 221.77873230]
[92.12665558 206.77873230]
[92.12665558 191.77873230]
[92.12665558 176.77873230]
[92.12665558 161.77873230]
[92.12665558 146.77873230]
[92.12665558 131.77873230]
[92.12665558 116.77873993]
[87.45343781 111.12802124]
[85.75054169 104.70708466]
[86.80751801 98.84332275]
[89.89279938 94.55747223]
[80.38443756 82.95613098]
[70.87608337 71.35478973]
[58.37549591 79.66827393]
[45.10926437 86.69577026]
[31.20923424 92.36743164]
[16.81355667 96.62689972]
[2.06530428 99.43183899]
[-12.88894367 100.75436401]
[-27.90056229 100.58132935]
[-42.82035446 98.91446686]
[-57.50003433 95.77033997]
[-71.79370880 91.18018341]
[-85.55931854 85.18963623]
[-98.66004181 77.85822296]
[-110.96568298 69.25881958]
[-122.35393524 59.47687912]
[-132.71162415 48.60963440]
[-141.93579102 36.76508713]
[-149.93476868 24.06095505]
[-156.62905884 10.62350464]
[-161.95211792 -3.41371655]
[-165.85105896 -17.91119576]
[-168.28712463 -32.72484589]
[-169.23609924 -47.70743561]
[-168.68855286 -62.71006393]
[-166.64993286 -77.58361816]
[-163.14048767 -92.18027496]
[-158.19511414 -106.35496521]
[-151.86294556 -119.96681213]
[-144.20693970 -132.88052368]
[-135.30314636 -144.96775818]
[-125.24010468 -156.10839844]
[-114.11779785 -166.19169617]
[-102.04677582 -175.11744690]
[-89.14701080 -182.79693604]
[-75.54670715 -189.15385437]
[-61.38103485 -194.12500000]
[-46.79078293 -197.66099548]
[-31.92096138 -199.72666931]
[-16.91935539 -200.30149841]
[-1.93506169 -199.37977600]
[12.88299465 -196.97067261]
[27.38754082 -193.09809875]
[41.43442154 -187.80058289]
[54.88402557 -181.13073730]
[67.60268402 -173.15489197]
[79.46399689 -163.95227051]
[90.35005951 -153.61437988]
[100.15269470 -142.24394226]
[108.77447510 -129.95396423]
[116.12970734 -116.86659241]
[122.14528656 -103.11190033]
[126.76142883 -88.82659912]
[129.93225098 -74.15266418]
[131.62625122 -59.23592758]
[131.82659912 -44.22465134]
[130.53126526 -29.26802063]
[127.75316620 -14.51469040]
[123.51988983 -0.11128857]
[117.87351990 13.79903412]
[110.87017059 27.07802773]
[102.57943726 39.59371567]
[93.08373260 51.22170639]
[82.47742462 61.84643173]
[91.98577881 73.44777679]
[101.49414062 85.04911804]
[115.39669800 90.68106842]
[130.29859924 88.96838379]
[145.20050049 87.25569153]
[160.10240173 85.54299927]
[175.00430298 83.83031464]
[189.82206726 81.49920654]
[204.53002930 78.55372620]
[219.23799133 75.60824585]
[221.49989319 60.61959457]
[228.75453186 47.30997467]
[240.12588501 37.28658676]
[254.24078369 31.75980186]
[269.39480591 31.39700699]
[283.75799561 36.24200821]
[295.59597778 45.70975494]
[303.47921753 58.65696335]
[306.45581055 73.52020264]
[304.16629028 88.50465393]
[296.88711548 101.80088043]
[285.49731445 111.80329895]
[271.37225342 117.30406189]
[256.21759033 117.63893127]
[241.86334229 112.76746368]
[230.04284668 103.27792358]
[222.18347168 90.31620789]
[207.47550964 93.26168823]
[192.76754761 96.20716858]
[191.09661865 98.53425598]
[188.37345886 100.31707764]
[184.80912781 101.14011383]
[180.76501465 100.67515564]
[176.71699524 98.73221588]
[161.81509399 100.44490814]
[146.91319275 102.15759277]
[132.01129150 103.87028503]
[117.10938263 105.58297729]
[107.12665558 116.77873993]
[107.12665558 131.77873230]
[107.12665558 146.77873230]
[107.12665558 161.77873230]
[107.12665558 176.77873230]
[107.12665558 191.77873230]
[107.12665558 206.77873230]
[107.12665558 221.77873230]
[107.12665558 236.77873230]
[107.12665558 251.77873230]
[107.12665558 266.77874756]
[107.12665558 281.77874756]
[121.66654205 285.84005737]
[134.57092285 293.67456055]
[144.88221741 304.70089722]
[151.83523560 318.10083008]
[154.91403198 332.87997437]
[153.89013672 347.94165039]
[148.83953857 362.16818237]
[140.13700867 374.50384521]
[128.42835999 384.03326416]
[114.58241272 390.04928589]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[26 92]
[27 91]
[28 90]
[93 128]
[94 127]
[95 126]
[96 125]
[97 124]
[98 119]
[99 118]
[100 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
