%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCCAGCCAGGGGGGGGGGCCGCGGUCACACGAUUAACCCAAGUCAAUAGAAGCCGGCGUAAAGAGUGUxxxxxxxxxxUGAGCUGGAGUCCUAGGCACAGCUCUAAGCCUCCUUAUUCGAGCCGAGCUCCCCCCCCCCGGGCCAGCCA\
) } def
/len { sequence length } bind def

/coor [
[63.48237991 525.62243652]
[49.63644028 519.60638428]
[37.92778015 510.07699585]
[29.22525406 497.74130249]
[24.17465210 483.51480103]
[23.15076065 468.45312500]
[26.22955894 453.67395020]
[33.18258286 440.27401733]
[43.49386597 429.24768066]
[56.39824677 421.41317749]
[70.93813324 417.35186768]
[70.93813324 402.35186768]
[70.93813324 387.35186768]
[70.93813324 372.35186768]
[70.93813324 357.35186768]
[70.93813324 342.35186768]
[70.93813324 327.35186768]
[70.93813324 312.35186768]
[70.93813324 297.35186768]
[70.93813324 282.35186768]
[61.34702682 267.68862915]
[70.60128021 251.80345154]
[62.60088348 239.23991394]
[70.04941559 225.28175354]
[69.73735809 210.28500366]
[69.42530060 195.28825378]
[69.11324310 180.29148865]
[61.41985703 193.16828918]
[50.02149582 202.91905212]
[36.10860062 208.52542114]
[21.13422966 209.40187073]
[6.66229248 205.45687866]
[-5.79576874 197.10243225]
[-14.93884277 185.21107483]
[-19.81203079 171.02474976]
[-19.90638161 156.02503967]
[-15.21203899 141.77853394]
[-6.21927929 129.77310181]
[6.13269949 121.26260376]
[20.55386353 117.13586426]
[35.53807831 117.82387543]
[49.52039719 123.25477600]
[61.04051590 132.86138916]
[68.89528656 145.64038086]
[72.26454163 160.26013184]
[77.16609192 146.08357239]
[81.91990662 131.85679626]
[86.52547455 117.58132935]
[91.13103485 103.30587006]
[89.83593750 98.15073395]
[91.55815887 92.64449310]
[96.23652649 88.53945923]
[101.43194580 74.46794128]
[106.62735748 60.39642334]
[100.26324463 46.17897415]
[105.73258972 31.98246574]
[119.32597351 26.00287247]
[124.52139282 11.93135357]
[129.71681213 -2.14016628]
[127.23827362 -17.76602554]
[138.90487671 -27.02559662]
[144.10029602 -41.09711456]
[132.31932068 -31.81226158]
[118.35521698 -26.33466721]
[103.40341187 -25.13324356]
[88.74384308 -28.31083679]
[75.63145447 -35.59542847]
[65.18873596 -46.36341858]
[58.30964279 -59.69301224]
[55.58305740 -74.44312286]
[57.24239349 -89.35105896]
[63.14559937 -103.14062500]
[72.78733063 -114.63136292]
[85.34220886 -122.83959961]
[99.73545837 -127.06266022]
[114.73494720 -126.93904114]
[129.05664062 -122.47931671]
[141.47451782 -114.06526184]
[150.92555237 -102.41716766]
[156.60067749 -88.53218079]
[158.01406860 -73.59891510]
[155.04357910 -58.89253616]
[165.25704956 -69.87820435]
[175.47053528 -80.86386871]
[185.68402100 -91.84953308]
[195.89749146 -102.83519745]
[206.11097717 -113.82086182]
[206.43197632 -126.75727844]
[215.21917725 -135.70176697]
[227.34526062 -136.21704102]
[237.78507996 -146.98785400]
[238.97344971 -162.98683167]
[252.30361938 -171.91355896]
[267.54980469 -166.92021179]
[273.01641846 -151.83724976]
[264.50997925 -138.23504639]
[248.55587769 -136.54803467]
[238.11607361 -125.77722931]
[234.79757690 -108.57294464]
[217.09663391 -103.60738373]
[206.88316345 -92.62171936]
[196.66967773 -81.63605499]
[186.45619202 -70.65038300]
[176.24272156 -59.66472244]
[166.02923584 -48.67905807]
[158.17181396 -35.90169907]
[152.97639465 -21.83018112]
[155.82653809 -7.21081066]
[143.78833008 3.05524921]
[138.59291077 17.12676811]
[133.39749146 31.19828796]
[139.84359741 44.57675552]
[134.77516174 58.92128754]
[120.69888306 65.59184265]
[115.50346375 79.66336060]
[110.30805206 93.73487854]
[105.40650177 107.91143799]
[100.80093384 122.18689728]
[96.19536591 136.46235657]
[96.53438568 145.65675354]
[91.34265137 150.98512268]
[86.44110107 165.16168213]
[84.11000061 179.97943115]
[84.42205048 194.97619629]
[84.73410797 209.97294617]
[85.04616547 224.96969604]
[93.06888580 238.60592651]
[85.59803772 251.49140930]
[94.37111664 261.00387573]
[94.28668976 273.54226685]
[85.93813324 282.35186768]
[85.93813324 297.35186768]
[85.93813324 312.35186768]
[85.93813324 327.35186768]
[85.93813324 342.35186768]
[85.93813324 357.35186768]
[85.93813324 372.35186768]
[85.93813324 387.35186768]
[85.93813324 402.35186768]
[85.93813324 417.35186768]
[100.47801971 421.41317749]
[113.38240051 429.24768066]
[123.69368744 440.27401733]
[130.64671326 453.67395020]
[133.72550964 468.45312500]
[132.70161438 483.51480103]
[127.65101624 497.74130249]
[118.94848633 510.07699585]
[107.23983002 519.60638428]
[93.39389038 525.62243652]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 128]
[24 126]
[25 125]
[26 124]
[27 123]
[45 122]
[46 121]
[47 119]
[48 118]
[49 117]
[52 116]
[53 115]
[54 114]
[57 111]
[58 110]
[59 109]
[61 107]
[62 106]
[82 105]
[83 104]
[84 103]
[85 102]
[86 101]
[87 100]
[90 98]
[91 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
