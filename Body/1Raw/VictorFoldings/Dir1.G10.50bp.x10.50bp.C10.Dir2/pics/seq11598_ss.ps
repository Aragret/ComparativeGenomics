%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCCAUGGGGGGGGGGGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCACACAUCAACUGCAxxxxxxxxxxGUACAUAAAGCCAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCUUCUCCCCCCCCCCCGUCCCCAUG\
) } def
/len { sequence length } bind def

/coor [
[66.67004395 395.13006592]
[53.79677200 387.22717285]
[43.67247772 376.01666260]
[37.11789322 362.40734863]
[34.66437149 347.50241089]
[36.51081085 332.51016235]
[42.50752258 318.64596558]
[52.16838455 307.03369141]
[64.71022797 298.61474609]
[79.11635590 294.07159424]
[78.80429840 279.07482910]
[78.49224091 264.07809448]
[78.18018341 249.08132935]
[77.86812592 234.08457947]
[77.55606842 219.08782959]
[77.24401855 204.09106445]
[76.93196106 189.09431458]
[76.61990356 174.09756470]
[76.30784607 159.10081482]
[63.13926315 151.91830444]
[50.36190796 159.77572632]
[37.58454895 167.63314819]
[30.26221466 182.30677795]
[13.87911415 183.03205872]
[5.28877497 169.06286621]
[13.32820320 154.76953125]
[29.72712326 154.85578918]
[42.50448227 146.99836731]
[55.28183746 139.14094543]
[45.66740036 119.12848663]
[44.27448654 97.66003418]
[29.50843048 95.02117157]
[14.74237537 92.38230896]
[7.40150547 105.62580872]
[-3.84344459 115.76631165]
[-17.77270699 121.70384979]
[-32.87533951 122.79436493]
[-47.51311874 118.91957092]
[-60.09825516 110.49976349]
[-69.26560211 98.44826508]
[-74.02075195 84.07234192]
[-73.84790802 68.93137360]
[-68.76580811 54.66774750]
[-59.32573700 42.82867432]
[-46.55167007 34.69836426]
[-31.82924843 31.15873146]
[-16.75544548 32.59373474]
[-2.96535969 38.84771347]
[8.04516697 49.24227905]
[15.08179283 62.64991379]
[17.38123894 77.61624908]
[32.14729309 80.25511169]
[46.91334915 82.89398193]
[50.04498291 75.19466400]
[54.28604507 68.04624176]
[59.54234695 61.60746765]
[65.69715118 56.02133179]
[72.61377716 51.41190338]
[80.13861084 47.88154221]
[88.10453796 45.50865936]
[96.33464050 44.34594727]
[104.64614868 44.41923523]
[112.85447693 45.72688675]
[120.77732086 48.23986816]
[128.23872375 51.90236664]
[137.50367737 40.10572433]
[146.76863098 28.30908585]
[156.03358459 16.51244545]
[146.93576050 5.12552166]
[140.61578369 -7.99968052]
[137.39025879 -22.19790649]
[137.41902161 -36.75035095]
[140.69726562 -50.92103958]
[147.05590820 -63.99406815]
[156.17033386 -75.30974579]
[167.57698059 -84.29791260]
[180.69688416 -90.50663757]
[194.86506653 -93.62496185]
[209.36427307 -93.49846649]
[223.46124268 -90.13691711]
[236.44383240 -83.71359253]
[245.95217896 -95.31493378]
[255.46054077 -106.91627502]
[264.96890259 -118.51761627]
[267.50265503 -136.72640991]
[284.10244751 -142.33412170]
[293.36740112 -154.13076782]
[302.63235474 -165.92741394]
[311.89730835 -177.72404480]
[313.68402100 -194.02557373]
[328.80181885 -200.38041687]
[341.69879150 -190.25126648]
[339.10766602 -174.05812073]
[323.69393921 -168.45909119]
[314.42898560 -156.66246033]
[305.16403198 -144.86581421]
[295.89907837 -133.06918335]
[297.02337646 -120.98434448]
[289.34527588 -111.07144928]
[276.57025146 -109.00925446]
[267.06188965 -97.40791321]
[257.55352783 -85.80657196]
[248.04516602 -74.20523071]
[257.39770508 -61.88919449]
[263.54846191 -47.69088745]
[266.13912964 -32.42713928]
[265.01620483 -16.97714043]
[260.24032593 -2.23182845]
[252.08285522 10.95751381]
[241.01048279 21.82839012]
[227.65856934 29.75117302]
[212.79470825 34.26557922]
[197.27452087 35.10739899]
[181.99244690 32.22395706]
[167.83021545 25.77739525]
[158.56527710 37.57403564]
[149.30032349 49.37067413]
[140.03536987 61.16731644]
[146.92587280 69.33730316]
[152.16159058 78.71630096]
[155.53326416 88.97135925]
[156.89822388 99.73394775]
[156.18630981 110.61315918]
[153.40318298 121.20994568]
[148.63081360 131.13171387]
[142.02528381 140.00689697]
[133.81167603 147.49884033]
[124.27649689 153.31860352]
[113.75767517 157.23599243]
[102.63259888 159.08866882]
[91.30460358 158.78875732]
[91.61665344 173.78550720]
[91.92871094 188.78225708]
[92.24076843 203.77900696]
[92.55282593 218.77577209]
[92.86488342 233.77252197]
[93.17694092 248.76927185]
[93.48899078 263.76602173]
[93.80104828 278.76278687]
[94.11310577 293.75952148]
[108.69574738 297.69949341]
[121.57695770 305.58944702]
[131.71250916 316.78976440]
[138.28076172 330.39251709]
[140.74925232 345.29495239]
[138.91787720 360.28906250]
[132.93508911 374.15927124]
[123.28590393 385.78121948]
[110.75251770 394.21276855]
[96.35096741 398.77041626]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 29]
[21 28]
[22 27]
[31 53]
[32 52]
[33 51]
[65 118]
[66 117]
[67 116]
[68 115]
[81 103]
[82 102]
[83 101]
[84 100]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
