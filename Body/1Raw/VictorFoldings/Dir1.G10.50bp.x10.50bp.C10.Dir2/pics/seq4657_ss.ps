%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAAUCCCCGGGGGGGGGGUGGCCCAACCCGUCAUCUACUCUACCAUCUUUGCAGGCACACUCAUCACAxxxxxxxxxxACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUCCCCCCCCCCAUUGAUCCCC\
) } def
/len { sequence length } bind def

/coor [
[70.11264038 381.04818726]
[56.26670456 375.03216553]
[44.55804443 365.50274658]
[35.85551834 353.16708374]
[30.80491638 338.94055176]
[29.78102493 323.87887573]
[32.85982513 309.09970093]
[39.81284714 295.69976807]
[50.12413025 284.67346191]
[63.02851105 276.83892822]
[77.56839752 272.77761841]
[77.56839752 257.77761841]
[77.56839752 242.77763367]
[77.56839752 227.77763367]
[77.56839752 212.77763367]
[77.56839752 197.77763367]
[77.56839752 182.77763367]
[77.56839752 167.77763367]
[77.56839752 152.77763367]
[77.56839752 137.77763367]
[66.16737366 128.02996826]
[51.34962082 130.36108398]
[36.53186035 132.69218445]
[34.77948761 147.68656921]
[29.04559517 161.65171814]
[19.75567245 173.55128479]
[7.59909487 182.50227356]
[-6.52203989 187.84045410]
[-21.55984879 189.16969299]
[-36.39842606 186.39135742]
[-49.93665314 179.71160889]
[-61.16990280 169.62612915]
[-69.26458740 156.88334656]
[-73.62004089 142.42884827]
[-73.91304779 127.33525085]
[-70.12186432 112.72259521]
[-62.52783203 99.67525482]
[-51.69447327 89.16140747]
[-38.42568970 81.96127319]
[-23.70612144 78.60913086]
[-8.62805271 79.35373688]
[5.68962049 84.13984680]
[18.18443298 92.61228180]
[27.92918777 104.14234924]
[34.20075607 117.87442780]
[49.01851654 115.54331970]
[63.83627319 113.21221924]
[62.49182510 99.63835907]
[65.94731903 86.80938721]
[73.51434326 76.32221985]
[84.00991058 69.39016724]
[95.93541718 66.70423126]
[97.49299622 51.78531647]
[99.05058289 36.86640549]
[96.81972504 27.94031143]
[100.79890442 21.65447044]
[102.66651154 6.77118969]
[104.53412628 -8.11209011]
[90.06739044 -12.18285942]
[76.36899567 -18.36440849]
[63.74496460 -26.51864243]
[52.47732544 -36.46339035]
[42.81780243 -47.97648239]
[34.98219681 -60.80071259]
[29.14555168 -74.64958191]
[25.43826294 -89.21370697]
[23.94315338 -104.16771698]
[24.69362450 -119.17752838]
[27.67290878 -133.90782166]
[32.81444931 -148.02951050]
[40.00338364 -161.22712708]
[49.07910538 -173.20581055]
[59.83885956 -183.69796753]
[72.04226685 -192.46919250]
[85.41670990 -199.32353210]
[99.66338348 -204.10786438]
[114.46402740 -206.71531677]
[129.48797607 -207.08760071]
[144.39959717 -205.21643066]
[158.86575317 -201.14360046]
[172.56326294 -194.96009827]
[185.18614197 -186.80407715]
[196.45236206 -176.85772705]
[206.11024475 -165.34324646]
[213.94401550 -152.51789856]
[219.77868652 -138.66819763]
[223.48390198 -124.10355377]
[224.97688293 -109.14933014]
[224.22427368 -94.13962555]
[221.24288940 -79.40975952]
[216.09934998 -65.28879547]
[208.90852356 -52.09221268]
[199.83110046 -40.11481857]
[189.06985474 -29.62419510]
[176.86518860 -20.85470581]
[163.48977661 -14.00226688]
[149.24241638 -9.21996212]
[134.44140625 -6.61463070]
[119.41741180 -6.24447727]
[117.54979706 8.63880253]
[115.68218231 23.52208328]
[113.96949005 38.42398453]
[112.41191101 53.34289551]
[110.85433197 68.26181030]
[117.30789948 71.26734161]
[122.98183441 75.56714630]
[127.62054443 80.96752930]
[131.01507568 87.22524261]
[133.01252747 94.05839539]
[133.52290344 101.15919495]
[148.01850891 105.01634979]
[156.67106628 92.57010651]
[169.06047058 83.83634949]
[183.69062805 79.86972046]
[198.79489136 81.14920807]
[212.54933167 87.52031708]
[223.29306030 98.21369934]
[229.72868347 111.93807220]
[231.07908630 127.03616333]
[227.18121338 141.68478394]
[218.50572205 154.11506653]
[206.10025024 162.82597351]
[191.46279907 166.76564026]
[176.36093140 165.45831299]
[162.61824036 159.06187439]
[151.89425659 148.34870911]
[145.48393250 134.61250305]
[144.16134644 119.51194763]
[129.66575623 115.65479279]
[115.52219391 132.50642395]
[92.56839752 137.77763367]
[92.56839752 152.77763367]
[92.56839752 167.77763367]
[92.56839752 182.77763367]
[92.56839752 197.77763367]
[92.56839752 212.77763367]
[92.56839752 227.77763367]
[92.56839752 242.77763367]
[92.56839752 257.77761841]
[92.56839752 272.77761841]
[107.10828400 276.83892822]
[120.01266479 284.67346191]
[130.32394409 295.69976807]
[137.27697754 309.09970093]
[140.35577393 323.87887573]
[139.33187866 338.94055176]
[134.28128052 353.16708374]
[125.57875061 365.50274658]
[113.87009430 375.03216553]
[100.02415466 381.04818726]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 47]
[22 46]
[23 45]
[52 104]
[53 103]
[54 102]
[56 101]
[57 100]
[58 99]
[110 129]
[111 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
