%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAACAUCAGGGGGGGGGGCUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUxxxxxxxxxxCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCCCCCCCCCCCAAAACAUCA\
) } def
/len { sequence length } bind def

/coor [
[84.42800140 339.04861450]
[70.58206177 333.03259277]
[58.87340164 323.50317383]
[50.17087936 311.16751099]
[45.12027740 296.94097900]
[44.09638596 281.87930298]
[47.17518234 267.10015869]
[54.12820435 253.70022583]
[64.43949127 242.67388916]
[77.34387207 234.83938599]
[91.88375854 230.77806091]
[91.88375854 215.77806091]
[91.88375854 200.77806091]
[91.88375854 185.77806091]
[91.88375854 170.77806091]
[91.88375854 155.77806091]
[91.88375854 140.77806091]
[91.88375854 125.77806854]
[79.27262878 117.65652466]
[65.61638641 123.86193085]
[51.96014786 130.06733704]
[38.30390549 136.27275085]
[24.64766502 142.47814941]
[10.99142361 148.68356323]
[-2.66481709 154.88896179]
[-11.75715160 168.53672791]
[-28.10307312 167.21653748]
[-34.88729858 152.28649902]
[-25.13079834 139.10534668]
[-8.87022400 141.23272705]
[4.78601694 135.02731323]
[18.44225883 128.82191467]
[32.09849930 122.61650848]
[45.75474167 116.41109467]
[59.41098022 110.20568848]
[73.06722260 104.00028229]
[71.97591400 89.04003906]
[57.56369781 84.88214874]
[43.15148163 80.72425842]
[32.14176178 91.43321228]
[17.24866104 95.18701935]
[2.47834301 90.97592926]
[-8.19604778 79.93270111]
[-11.90315533 65.02790070]
[-7.64578581 50.27085876]
[3.43084979 39.63113403]
[18.34719276 35.97076416]
[33.09082031 40.27437210]
[43.69577026 51.38430405]
[47.30936813 66.31204224]
[61.72158432 70.46993256]
[76.13379669 74.62782288]
[82.43936157 70.56704712]
[70.81828308 61.08282852]
[76.24722290 47.09974670]
[91.22355652 47.94198608]
[95.05049133 62.44550705]
[101.35605621 58.38473511]
[103.53289032 43.54352951]
[105.70973206 28.70232391]
[107.57733917 13.81904411]
[109.13492584 -1.09986794]
[110.69250488 -16.01877975]
[112.25008392 -30.93769264]
[113.80766296 -45.85660553]
[114.89897919 -60.81685257]
[115.52295685 -75.80387115]
[116.14693451 -90.79088593]
[116.77091217 -105.77790070]
[102.96652985 -112.14245605]
[92.65222168 -123.30863190]
[87.40084839 -137.57368469]
[88.01320648 -152.76226807]
[94.39591217 -166.55827332]
[105.57565308 -176.85787964]
[119.84759521 -182.09048462]
[135.03536987 -181.45814514]
[148.82295227 -175.05729675]
[159.10784912 -163.86401367]
[164.32167053 -149.58520508]
[163.66935730 -134.39826965]
[157.25038147 -120.61911774]
[146.04357910 -110.34896088]
[131.75791931 -105.15392303]
[131.13394165 -90.16690826]
[130.50996399 -75.17989349]
[129.88598633 -60.19287491]
[132.05056763 -57.33243561]
[132.90132141 -53.26083755]
[131.87510681 -48.62410736]
[128.72657776 -44.29902267]
[127.16899872 -29.38011169]
[125.61141968 -14.46119881]
[124.05383301 0.45771298]
[122.49625397 15.37662506]
[124.79754639 19.62863350]
[124.40671539 25.38002968]
[120.55093384 30.87916183]
[118.37409973 45.72036743]
[116.19725800 60.56157303]
[126.79014587 83.16007996]
[120.61588287 101.21265411]
[135.43363953 103.54376221]
[150.25140381 105.87486267]
[165.06915283 108.20597076]
[179.88691711 110.53707123]
[169.75871277 99.47273254]
[166.38536072 84.85697174]
[170.64004517 70.47303009]
[181.42143250 60.04415512]
[195.93881226 56.26982117]
[210.43440247 60.12700653]
[221.15606689 70.61728668]
[225.32852173 85.02529144]
[221.87174988 99.62155151]
[211.68052673 110.62786865]
[197.39291382 115.19527435]
[211.40963745 120.53678894]
[225.42634583 125.87830353]
[240.59562683 120.65599060]
[254.05867004 129.38102722]
[255.48777771 145.36029053]
[243.78666687 156.33587646]
[227.93142700 153.88824463]
[220.08483887 139.89501953]
[206.06811523 134.55349731]
[192.05140686 129.21199036]
[177.55581665 125.35482788]
[162.73805237 123.02372742]
[147.92028809 120.69262695]
[133.10253906 118.36151886]
[118.28478241 116.03041840]
[106.88375854 125.77806854]
[106.88375854 140.77806091]
[106.88375854 155.77806091]
[106.88375854 170.77806091]
[106.88375854 185.77806091]
[106.88375854 200.77806091]
[106.88375854 215.77806091]
[106.88375854 230.77806091]
[121.42364502 234.83938599]
[134.32803345 242.67388916]
[144.63931274 253.70022583]
[151.59233093 267.10015869]
[154.67112732 281.87930298]
[153.64723206 296.94097900]
[148.59663391 311.16751099]
[139.89411926 323.50317383]
[128.18545532 333.03259277]
[114.33951569 339.04861450]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[37 52]
[38 51]
[39 50]
[58 100]
[59 99]
[60 98]
[61 95]
[62 94]
[63 93]
[64 92]
[65 91]
[66 87]
[67 86]
[68 85]
[69 84]
[102 132]
[103 131]
[104 130]
[105 129]
[106 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
