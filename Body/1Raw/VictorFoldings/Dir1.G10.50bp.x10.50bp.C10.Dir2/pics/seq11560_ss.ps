%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUAUUUCGGGGGGGGGGCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUxxxxxxxxxxUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCAUAUAUCCAAACAACAAAGCCCCCCCCCCCAUAAUAUUUC\
) } def
/len { sequence length } bind def

/coor [
[110.94892883 425.51025391]
[97.72872925 418.23779297]
[86.84192657 407.79077148]
[79.03079224 394.88153076]
[74.82791138 380.39022827]
[74.51984406 365.30487061]
[78.12758636 350.65405273]
[85.40515900 337.43667603]
[95.85636139 326.55389404]
[108.76862335 318.74774170]
[123.26155853 314.55047607]
[122.94950867 299.55371094]
[122.63745117 284.55694580]
[122.32539368 269.56021118]
[122.01333618 254.56344604]
[121.70127869 239.56669617]
[121.38922119 224.56994629]
[121.07717133 209.57319641]
[120.76511383 194.57643127]
[120.45305634 179.57968140]
[120.14099884 164.58293152]
[119.82894135 149.58618164]
[115.22338104 135.31071472]
[106.71228790 122.95914459]
[98.20120239 110.60756683]
[86.59986115 101.09921265]
[72.81747437 95.17924500]
[59.03509521 89.25928497]
[45.25271225 83.33931732]
[31.47033119 77.41935730]
[40.16408920 89.64304352]
[45.13730621 103.79462433]
[46.00186157 118.76969147]
[42.69029236 133.39956665]
[35.46103287 146.54254150]
[24.87826157 157.17292786]
[11.76786518 164.46110535]
[-2.84700847 167.83830261]
[-17.82580185 167.04096985]
[-31.99955750 162.13131714]
[-44.26214218 153.49250793]
[-53.65657806 141.79872131]
[-59.44971085 127.96255493]
[-61.18943787 113.06378174]
[-58.73999405 98.26512909]
[-52.29253387 84.72148132]
[-42.35022354 73.48981476]
[-29.68896675 65.44664001]
[-15.29686260 61.21966553]
[-0.29708043 61.13876343]
[14.14226246 65.21134186]
[3.92878222 54.22567368]
[-6.28469753 43.24000931]
[-16.49817848 32.25434494]
[-32.29912949 31.92959023]
[-43.18202209 20.46930313]
[-42.69022751 4.67266798]
[-31.11552048 -6.08845139]
[-15.32496738 -5.42967319]
[-4.68682432 6.25816107]
[-5.51251268 22.04086685]
[4.70096684 33.02653122]
[14.91444683 44.01219559]
[25.12792587 54.99785995]
[37.39029312 63.63697815]
[51.17267609 69.55693817]
[64.95505524 75.47690582]
[78.73744202 81.39686584]
[92.51982117 87.31682587]
[83.89868164 75.04181671]
[78.06122589 61.22428513]
[75.27023315 46.48622894]
[75.65132141 31.49106979]
[79.18735504 16.91380882]
[85.71914673 3.41063571]
[94.95267487 -8.41061306]
[106.47229767 -18.01781082]
[119.75946808 -24.97849083]
[134.21606445 -28.97932625]
[149.19134521 -29.84021950]
[164.01118469 -27.52241707]
[178.00849915 -22.13025665]
[190.55317688 -13.90645885]
[201.08055115 -3.22121763]
[209.11672974 9.44447803]
[214.29997253 23.52048874]
[216.39694214 38.37318802]
[215.31326294 53.33399200]
[211.09771729 67.72944641]
[203.94004822 80.91154480]
[194.16246033 92.28690338]
[182.20509338 101.34347534]
[168.60620117 107.67356873]
[153.97792053 110.99224091]
[138.97875977 111.15011597]
[124.28386688 108.14007568]
[110.55277252 102.09648132]
[119.06385803 114.44805145]
[127.57495117 126.79962158]
[126.86763763 111.81630707]
[129.23226929 97.00386810]
[134.56936646 82.98547363]
[142.65440369 70.35090637]
[153.14721680 59.63172531]
[165.60635376 51.27889252]
[179.50765991 45.64383316]
[194.26626587 42.96361923]
[209.26126099 43.35101318]
[223.86178589 46.78971100]
[237.45358276 53.13504791]
[249.46479797 62.12006378]
[259.39013672 73.36674500]
[266.81198120 86.40192413]
[271.41812134 100.67720032]
[273.01477051 115.59197998]
[271.53472900 130.51878357]
[267.04028320 144.82962036]
[259.72052002 157.92240906]
[249.88339233 169.24630737]
[237.94274902 178.32490540]
[224.40095520 184.77627563]
[209.82774353 188.32896423]
[194.83624268 188.83352661]
[180.05714417 186.26872253]
[166.11222839 180.74247742]
[153.58819580 172.48725891]
[143.01193237 161.85040283]
[134.82569885 149.27412415]
[135.13775635 164.27087402]
[135.44981384 179.26762390]
[135.76187134 194.26437378]
[136.07392883 209.26113892]
[136.38597107 224.25788879]
[136.69802856 239.25463867]
[137.01008606 254.25138855]
[137.32214355 269.24813843]
[137.63420105 284.24490356]
[137.94625854 299.24166870]
[138.25831604 314.23840332]
[152.91331482 317.82916260]
[166.13911438 325.09143066]
[177.03398132 335.53002930]
[184.85508728 348.43322754]
[189.06915283 362.92129517]
[189.38887024 378.00640869]
[185.79244995 392.66000366]
[178.52508545 405.88302612]
[168.08227539 416.77383423]
[155.17605591 424.58996582]
[140.68635559 428.79843140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 99]
[24 98]
[25 97]
[26 69]
[27 68]
[28 67]
[29 66]
[30 65]
[51 64]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
