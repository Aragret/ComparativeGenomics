%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACACCGCCGGGGGGGGGGCGUCACCCUCCUCAAGUAUACUUCAAAGGACAUUUAACUAAAACCCCUACxxxxxxxxxxAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGGCCACCCCCCCCCCCCACACACCACC\
) } def
/len { sequence length } bind def

/coor [
[79.99241638 349.35964966]
[68.10814667 340.08453369]
[58.78944016 328.23443604]
[52.57807541 314.49826050]
[49.83517075 299.67462158]
[50.72019958 284.62536621]
[55.18170929 270.22543335]
[62.96030426 257.31201172]
[73.60375977 246.63583374]
[86.49326324 238.81765747]
[100.87945557 234.31198120]
[99.94382477 219.34120178]
[99.00819397 204.37040710]
[98.07257080 189.39961243]
[97.13694000 174.42881775]
[96.20130920 159.45802307]
[95.26568604 144.48724365]
[94.33005524 129.51644897]
[93.39442444 114.54565430]
[87.61815643 100.70243835]
[77.63542938 89.50666809]
[67.65270233 78.31090546]
[57.66997528 67.11513519]
[47.68724823 55.91937256]
[37.70452118 44.72360611]
[26.59489632 47.98279953]
[14.53907585 45.43086624]
[4.55738401 36.99530792]
[-0.52674478 24.14965820]
[-15.48699379 23.05834770]
[-30.44724274 21.96703720]
[-45.40748978 20.87572670]
[-52.19968033 34.47479248]
[-63.68225479 44.43566132]
[-78.10420990 49.23936462]
[-93.26630402 48.15338135]
[-106.85643005 41.34330750]
[-116.80217743 29.84763718]
[-121.58690643 15.41937447]
[-120.48097992 0.25872248]
[-113.65303802 -13.32242775]
[-102.14429474 -23.25304985]
[-87.70974731 -28.01879501]
[-72.55056763 -26.89292336]
[-58.97840881 -20.04712105]
[-49.06293488 -8.52532482]
[-44.31618118 5.91547775]
[-29.35593224 7.00678825]
[-14.39568329 8.09809875]
[0.56456572 9.18940926]
[10.31221771 -2.21161151]
[6.90923977 -16.82050323]
[3.50626183 -31.42939568]
[0.10328391 -46.03828812]
[-14.93190765 -45.45560455]
[-29.80562592 -47.72914505]
[-43.98019791 -52.77672195]
[-56.94321823 -60.41587067]
[-68.22608185 -70.37043762]
[-77.42092896 -82.28057861]
[-84.19535828 -95.71573639]
[-88.30448914 -110.19025421]
[-89.59976959 -125.18087769]
[-88.03438568 -140.14570618]
[-83.66491699 -154.54376221]
[-76.64932251 -167.85458374]
[-67.24121094 -179.59698486]
[-55.78067780 -189.34648132]
[-42.68201447 -196.75064087]
[-28.41872787 -201.54179382]
[-13.50643063 -203.54676819]
[1.51580870 -202.69305420]
[16.10494614 -199.01153564]
[29.73359299 -192.63529968]
[41.90908432 -183.79483032]
[52.19128036 -172.80970764]
[60.20848846 -160.07702637]
[65.67089081 -146.05709839]
[68.38101959 -131.25669861]
[68.24092102 -116.21087646]
[65.25563812 -101.46351624]
[59.53310776 -87.54772949]
[51.28018188 -74.96656036]
[40.79520416 -64.17481995]
[28.45719910 -55.56261063]
[14.71217632 -49.44126892]
[18.11515427 -34.83237457]
[21.51813316 -20.22348213]
[24.92111015 -5.61458969]
[50.46448898 8.75013351]
[48.90028763 34.74087906]
[58.88301468 45.93664551]
[68.86573792 57.13241196]
[78.84846497 68.32817841]
[88.83119202 79.52394104]
[98.81391907 90.71971130]
[105.73094940 82.94578552]
[118.64068604 80.98627472]
[133.28419495 77.73545074]
[147.92768860 74.48462677]
[162.57119751 71.23379517]
[165.56167603 56.30138779]
[174.37246704 43.88003922]
[187.47705078 36.12183762]
[202.60498047 34.37092590]
[217.13523865 38.93067169]
[228.55038452 49.01106262]
[234.87268066 62.86561203]
[235.00672913 78.09394073]
[228.92932129 92.05764008]
[217.69338989 102.33742523]
[203.24565125 107.15225220]
[188.08923340 105.66792297]
[174.85011292 98.14161682]
[165.82202148 85.87729645]
[151.17851257 89.12812805]
[136.53501892 92.37895203]
[121.89151001 95.62977600]
[136.30091858 99.79737854]
[151.30091858 99.80109406]
[164.05630493 107.69412994]
[170.75296021 121.11630249]
[169.38844299 136.05410767]
[160.37077332 148.04083252]
[146.39642334 153.49220276]
[131.64399719 150.77813721]
[120.52480316 140.71020508]
[116.36368561 126.29956818]
[108.36521912 113.61002350]
[109.30084229 128.58081055]
[110.23647308 143.55160522]
[111.17210388 158.52239990]
[112.10773468 173.49319458]
[113.04335785 188.46398926]
[113.97898865 203.43476868]
[114.91461945 218.40556335]
[115.85024261 233.37635803]
[130.68548584 236.05577087]
[144.44810486 242.20828247]
[156.33801270 251.47618103]
[165.66389465 263.32064819]
[171.88359070 277.05303955]
[174.63548279 291.87500000]
[173.75956726 306.92480469]
[169.30679321 321.32745361]
[161.53602600 334.24557495]
[150.89904785 344.92819214]
[138.01428223 352.75418091]
[123.63082886 357.26858521]
[108.58493042 358.20892334]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 96]
[21 95]
[22 94]
[23 93]
[24 92]
[25 91]
[29 50]
[30 49]
[31 48]
[32 47]
[51 89]
[52 88]
[53 87]
[54 86]
[98 118]
[99 117]
[100 116]
[101 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
