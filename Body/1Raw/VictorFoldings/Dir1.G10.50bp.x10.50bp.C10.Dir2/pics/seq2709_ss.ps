%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAAACAUCGGGGGGGGGGACCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUxxxxxxxxxxGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUGACAUCCCCCCCCCCCAAAAAAAUC\
) } def
/len { sequence length } bind def

/coor [
[103.71264648 392.84017944]
[89.86670685 386.82415771]
[78.15804291 377.29473877]
[69.45552063 364.95907593]
[64.40491486 350.73254395]
[63.38102722 335.67086792]
[66.45982361 320.89172363]
[73.41284943 307.49179077]
[83.72412872 296.46545410]
[96.62850952 288.63095093]
[111.16839600 284.56964111]
[111.16839600 269.56964111]
[111.16839600 254.56964111]
[111.16839600 239.56964111]
[111.16839600 224.56964111]
[111.16839600 209.56964111]
[111.16839600 194.56964111]
[111.16839600 179.56964111]
[111.16839600 164.56964111]
[111.16839600 149.56964111]
[111.16839600 134.56964111]
[93.29937744 136.39369202]
[76.40461731 129.37988281]
[64.66371918 114.92323303]
[49.84595871 117.25434113]
[35.02820206 119.58544159]
[20.21044350 121.91654968]
[16.29437637 136.63334656]
[6.72595501 148.48092651]
[-6.83703232 155.40663147]
[-22.04471588 156.21052551]
[-36.26227188 150.75332642]
[-47.02642822 139.98054504]
[-52.47222137 125.75861359]
[-51.65613937 110.55158234]
[-44.71957397 96.99414825]
[-32.86432648 87.43522644]
[-18.14438820 83.53096008]
[-3.11007881 85.95777893]
[9.63381577 94.29522705]
[17.87933922 107.09879303]
[32.69709778 104.76768494]
[47.51485443 102.43658447]
[62.33261490 100.10547638]
[65.27809906 85.39751434]
[52.50074005 77.54009247]
[39.72338104 69.68266296]
[26.94602394 61.82524109]
[11.06974030 64.13243103]
[-0.53376329 53.05369949]
[1.03673005 37.08770370]
[14.57647133 28.48218346]
[29.69893074 33.83856201]
[34.80345154 49.04788208]
[47.58080673 56.90530777]
[60.35816574 64.76273346]
[73.13552094 72.62016296]
[79.06797028 70.53311920]
[84.95478821 69.58654022]
[90.59230042 69.70939636]
[89.65666962 54.73860931]
[88.72103882 39.76781464]
[87.78541565 24.79702377]
[73.02051544 21.65054893]
[59.65258026 14.63620853]
[48.67360306 4.27451658]
[40.89829636 -8.66562271]
[36.90364075 -23.22396278]
[36.98606110 -38.32017899]
[41.13944626 -52.83403397]
[49.05558395 -65.68849945]
[60.14704895 -75.92969513]
[73.59077454 -82.79765320]
[88.38915253 -85.78271484]
[103.44403839 -84.66339111]
[117.63826752 -79.52272034]
[129.91853333 -70.74218750]
[139.37355042 -58.97336578]
[145.30169678 -45.08957672]
[147.26307678 -30.12108803]
[145.11212158 -15.17866611]
[139.00846863 -1.37113452]
[129.40502930 10.27689552]
[117.01445007 18.90106201]
[102.75620270 23.86139679]
[103.69183350 38.83218765]
[104.62746429 53.80297852]
[105.56308746 68.77377319]
[114.09138489 70.72885895]
[121.95337677 75.02123260]
[128.50747681 81.42804718]
[133.18562317 89.55046844]
[135.54144287 98.83762360]
[135.29057312 108.62371826]
[150.25082397 107.53240967]
[165.21105957 106.44110107]
[162.88179016 86.11506653]
[181.14358521 65.54476166]
[195.16029358 60.20324707]
[209.17700195 54.86173248]
[223.19372559 49.52022171]
[237.21043396 44.17871094]
[247.13635254 31.12465477]
[263.36810303 33.46185684]
[269.20782471 48.78599930]
[258.64816284 61.33292007]
[242.55194092 58.19542313]
[228.53523254 63.53693390]
[214.51852417 68.87844849]
[200.50180054 74.21996307]
[186.48509216 79.56147003]
[186.48509216 87.06147003]
[201.48509216 87.06147003]
[216.48509216 87.06170654]
[216.48463440 102.06170654]
[201.48509216 102.06147003]
[186.48509216 102.06147003]
[186.48509216 109.56147003]
[200.50180054 114.90298462]
[215.67108154 109.68067169]
[229.13412476 118.40570068]
[230.56323242 134.38497925]
[218.86212158 145.36056519]
[203.00688171 142.91293335]
[195.16029358 128.91969299]
[181.14358521 123.57818604]
[166.30236816 121.40135193]
[151.34213257 122.49266052]
[136.38188171 123.58396912]
[126.16839600 134.56964111]
[126.16839600 149.56964111]
[126.16839600 164.56964111]
[126.16839600 179.56964111]
[126.16839600 194.56964111]
[126.16839600 209.56964111]
[126.16839600 224.56964111]
[126.16839600 239.56964111]
[126.16839600 254.56964111]
[126.16839600 269.56964111]
[126.16839600 284.56964111]
[140.70828247 288.63095093]
[153.61267090 296.46545410]
[163.92395020 307.49179077]
[170.87696838 320.89172363]
[173.95576477 335.67086792]
[172.93188477 350.73254395]
[167.88127136 364.95907593]
[159.17875671 377.29473877]
[147.47009277 386.82415771]
[133.62416077 392.84017944]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 44]
[25 43]
[26 42]
[27 41]
[45 57]
[46 56]
[47 55]
[48 54]
[60 88]
[61 87]
[62 86]
[63 85]
[94 129]
[95 128]
[96 127]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
