%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACAGCAGUCGGGGGGGGGGCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUxxxxxxxxxxCCCACUAAUCCAAACUCUAACACUAUGCUUAGGCGCUAUCACCACUCUGUCCCCCCCCCCUCGCAGCAGUC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 383.98410034]
[71.01555634 378.43109131]
[58.81560135 369.56475830]
[49.20452881 357.94244385]
[42.78650284 344.29473877]
[39.96496582 329.47955322]
[40.91728210 314.42819214]
[45.58358765 300.08676147]
[53.67055511 287.35681152]
[64.66983032 277.03854370]
[77.88998413 269.78054810]
[92.50000000 266.03912354]
[92.50000000 251.03912354]
[92.50000000 236.03912354]
[92.50000000 221.03912354]
[92.50000000 206.03912354]
[92.50000000 191.03912354]
[92.50000000 176.03912354]
[92.50000000 161.03912354]
[92.50000000 146.03912354]
[92.50000000 131.03912354]
[83.46070099 127.31536102]
[75.97164154 121.03129578]
[70.73478699 112.77594757]
[55.96267319 115.38066864]
[41.19055939 117.98538971]
[38.27741241 132.88096619]
[30.17677879 145.71623230]
[17.98419762 154.75534058]
[3.34861779 158.77580261]
[-11.75062084 157.23391724]
[-25.27146912 150.33818054]
[-35.38534164 139.02120972]
[-40.72442627 124.81351471]
[-40.56664658 109.63657379]
[-34.93334961 95.54294586]
[-24.58638573 84.43867493]
[-10.92510128 77.82552338]
[4.20292854 76.59786987]
[18.75176239 80.92174530]
[30.75378990 90.21237183]
[38.58583450 103.21327209]
[53.35795212 100.60855103]
[68.13006592 98.00382996]
[73.20692444 82.62736511]
[85.17362976 71.71827698]
[100.95293427 68.08183289]
[104.90953827 53.61306763]
[108.86614990 39.14430237]
[112.82276154 24.67553329]
[112.06907654 15.50886822]
[117.01199341 9.95191193]
[121.26483917 -4.43256855]
[125.51768494 -18.81704903]
[129.47430420 -33.28581619]
[133.13299561 -47.83277130]
[136.79170227 -62.37972641]
[140.45040894 -76.92668152]
[144.10911560 -91.47363281]
[130.14338684 -97.00656128]
[117.01934814 -104.31510162]
[104.96158600 -113.27419281]
[94.17641449 -123.73052979]
[84.84838104 -135.50520325]
[77.13710785 -148.39672852]
[71.17454529 -162.18449402]
[67.06271362 -176.63261414]
[64.87197113 -191.49382019]
[64.63980865 -206.51385498]
[66.37020111 -221.43566895]
[70.03353882 -236.00395203]
[75.56713104 -249.96942139]
[82.87628937 -263.09310913]
[91.83596039 -275.15045166]
[102.29281616 -285.93511963]
[114.06792450 -295.26260376]
[126.95981598 -302.97326660]
[140.74787903 -308.93518066]
[155.19618225 -313.04632568]
[170.05749512 -315.23632812]
[185.07752991 -315.46780396]
[199.99926758 -313.73669434]
[214.56738281 -310.07266235]
[228.53259277 -304.53839111]
[241.65592957 -297.22860718]
[253.71284485 -288.26837158]
[264.49700928 -277.81100464]
[273.82394409 -266.03546143]
[281.53396606 -253.14318848]
[287.49523926 -239.35484314]
[291.60568237 -224.90634155]
[293.79501343 -210.04492188]
[294.02575684 -195.02488708]
[292.29394531 -180.10322571]
[288.62921143 -165.53527832]
[283.09429932 -151.57034302]
[275.78387451 -138.44735718]
[266.82305908 -126.39086151]
[256.36517334 -115.60718536]
[244.58917236 -106.28083801]
[231.69656372 -98.57140350]
[217.90792847 -92.61080933]
[203.45922852 -88.50103760]
[188.59770203 -86.31242371]
[173.57765198 -86.08240509]
[158.65606689 -87.81492615]
[154.99737549 -73.26797485]
[151.33866882 -58.72101974]
[147.67996216 -44.17406464]
[144.02125549 -29.62711143]
[145.69427490 -25.09387779]
[144.49324036 -19.45957375]
[139.90216064 -14.56420326]
[135.64932251 -0.17972200]
[131.39646912 14.20475864]
[127.29152679 28.63214302]
[123.33492279 43.10091019]
[119.37831116 57.56967926]
[115.42169952 72.03844452]
[129.00946045 86.65352631]
[131.26777649 106.48098755]
[144.82968140 112.88996124]
[159.62202454 107.32559967]
[173.98168945 113.92676544]
[179.38934326 128.77711487]
[172.63673401 143.06619263]
[157.73004150 148.31654358]
[143.51315308 141.41322327]
[138.42070007 126.45185852]
[124.85880280 120.04288483]
[117.08808136 126.97544861]
[107.50000000 131.03912354]
[107.50000000 146.03912354]
[107.50000000 161.03912354]
[107.50000000 176.03912354]
[107.50000000 191.03912354]
[107.50000000 206.03912354]
[107.50000000 221.03912354]
[107.50000000 236.03912354]
[107.50000000 251.03912354]
[107.50000000 266.03912354]
[122.11001587 269.78054810]
[135.33016968 277.03854370]
[146.32945251 287.35681152]
[154.41641235 300.08676147]
[159.08271790 314.42819214]
[160.03503418 329.47955322]
[157.21350098 344.29473877]
[150.79547119 357.94244385]
[141.18440247 369.56475830]
[128.98443604 378.43109131]
[114.96250153 383.98410034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 44]
[25 43]
[26 42]
[47 119]
[48 118]
[49 117]
[50 116]
[52 115]
[53 114]
[54 113]
[55 110]
[56 109]
[57 108]
[58 107]
[59 106]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
