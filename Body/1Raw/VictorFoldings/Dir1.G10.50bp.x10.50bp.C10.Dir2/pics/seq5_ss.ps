%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUAUCACCCUAUGGGGGGGGGGUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUxxxxxxxxxxCUAAAAAAUCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACCAACCCCCCCCCCUCUAUCACCCUAU\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 420.56878662]
[70.75619507 415.75936890]
[57.85220718 407.99395752]
[46.91955185 397.63583374]
[38.46956635 385.16940308]
[32.89747238 371.17776489]
[30.46388245 356.31533813]
[31.28262329 341.27725220]
[35.31539917 326.76690674]
[42.37359238 313.46292114]
[52.12707901 301.98757935]
[64.11966705 292.87756348]
[77.79044342 286.55902100]
[92.50000000 283.32748413]
[92.50000000 268.32748413]
[92.50000000 253.32746887]
[92.50000000 238.32746887]
[92.50000000 223.32746887]
[92.50000000 208.32746887]
[92.50000000 193.32746887]
[92.50000000 178.32746887]
[92.50000000 163.32746887]
[92.50000000 148.32746887]
[92.50000000 133.32746887]
[87.40248871 131.75332642]
[82.61222839 129.40469360]
[78.24606323 126.33888245]
[74.41048431 122.63066864]
[71.19902802 118.37048340]
[68.69004059 113.66223907]
[53.96024704 116.49654388]
[39.23045731 119.33084869]
[27.19451332 130.46943665]
[11.61246586 125.35749817]
[8.51378918 109.25376892]
[21.08613586 98.72437286]
[36.39615250 104.60105133]
[51.12594223 101.76675415]
[65.85573578 98.93244934]
[69.03256989 85.57817841]
[77.20967865 74.55257416]
[89.06669617 67.63592529]
[102.68910217 65.94505310]
[107.12408447 51.61568069]
[111.55906677 37.28630829]
[115.99404907 22.95693588]
[116.74411774 7.97570181]
[113.76258850 -6.72499466]
[109.62193298 -11.99499416]
[108.91420746 -17.70495224]
[110.96827698 -22.07296181]
[108.57730103 -36.88117599]
[106.18632507 -51.68939209]
[103.79535675 -66.49760437]
[101.40438080 -81.30582428]
[91.56627655 -93.69623566]
[97.17594910 -107.49409485]
[94.78497314 -122.30231476]
[92.39399719 -137.11051941]
[90.00302124 -151.91874695]
[87.61204529 -166.72695923]
[72.57798004 -167.68846130]
[58.13494873 -171.97175598]
[45.00741577 -179.36199951]
[33.85384750 -189.48847961]
[25.23370934 -201.84327698]
[19.57937622 -215.80667114]
[17.17447090 -230.67825317]
[18.13962364 -245.71209717]
[22.42641830 -260.15408325]
[29.81983566 -273.27981567]
[39.94902420 -284.43093872]
[52.30590439 -293.04809570]
[66.27066803 -298.69903564]
[81.14283752 -301.10034180]
[96.17643738 -300.13153076]
[110.61739349 -295.84124756]
[123.74134064 -288.44464111]
[134.88999939 -278.31277466]
[143.50415039 -265.95379639]
[149.15171814 -251.98765564]
[151.54940796 -237.11491394]
[150.57698059 -222.08154297]
[146.28318787 -207.64163208]
[138.88340759 -194.51947021]
[128.74880981 -183.37327576]
[116.38776398 -174.76211548]
[102.42026520 -169.11793518]
[104.81124115 -154.30972290]
[107.20221710 -139.50149536]
[109.59318542 -124.69328308]
[111.98416138 -109.88507080]
[121.65124512 -98.55384064]
[116.21259308 -83.69680023]
[118.60356903 -68.88858032]
[120.99454498 -54.08036804]
[123.38552094 -39.27215195]
[125.77648926 -24.46393585]
[128.46328735 -9.70652580]
[131.44480896 4.99417067]
[136.38388062 -9.16936302]
[144.40263367 -21.84609032]
[155.08430481 -32.37709045]
[167.87365723 -40.21498108]
[182.10592651 -44.95235443]
[197.04132080 -46.34297180]
[211.90353394 -44.31454849]
[225.92005920 -38.97252274]
[238.36231995 -30.59456062]
[248.58358765 -19.61614227]
[256.05258179 -6.60790634]
[260.38104248 7.75399542]
[261.34405518 22.72305107]
[258.89147949 37.52119064]
[253.15086365 51.37923050]
[244.42056274 63.57684326]
[233.15437317 73.48001862]
[219.93788147 80.57400513]
[205.45808411 84.49005890]
[190.46762085 85.02463531]
[175.74565125 82.14994812]
[162.05743408 76.01541901]
[150.11442566 66.93991089]
[140.53744507 55.39515686]
[133.82426453 41.98123550]
[130.32342529 27.39192009]
[125.88844299 41.72129440]
[121.45345306 56.05066681]
[117.01847076 70.38003540]
[130.76594543 85.15322113]
[133.77697754 105.10752106]
[125.00077057 123.27943420]
[107.50000000 133.32746887]
[107.50000000 148.32746887]
[107.50000000 163.32746887]
[107.50000000 178.32746887]
[107.50000000 193.32746887]
[107.50000000 208.32746887]
[107.50000000 223.32746887]
[107.50000000 238.32746887]
[107.50000000 253.32746887]
[107.50000000 268.32748413]
[107.50000000 283.32748413]
[122.20955658 286.55902100]
[135.88034058 292.87756348]
[147.87292480 301.98757935]
[157.62640381 313.46292114]
[164.68460083 326.76690674]
[168.71737671 341.27725220]
[169.53611755 356.31533813]
[167.10252380 371.17776489]
[161.53042603 385.16940308]
[153.08044434 397.63583374]
[142.14779663 407.99395752]
[129.24380493 415.75936890]
[114.97203827 420.56878662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[30 39]
[31 38]
[32 37]
[43 129]
[44 128]
[45 127]
[46 126]
[47 100]
[48 99]
[51 98]
[52 97]
[53 96]
[54 95]
[55 94]
[57 92]
[58 91]
[59 90]
[60 89]
[61 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
