%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAUAUUAUGGGGGGGGGGCCUAACUACUACCGCAUUCCUACUACUCAACUUAAACUCCAGCACCACGAxxxxxxxxxxAGACCCCAUUCUAUACCAACACCUAUUCUGAUUUUUCGGUCACCCUGAAGCCCCCCCCCCUUUAUAUUCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 410.25341797]
[71.19830322 404.23739624]
[59.48964310 394.70797729]
[50.78712082 382.37231445]
[45.73651886 368.14578247]
[44.71262741 353.08410645]
[47.79142761 338.30496216]
[54.74444962 324.90502930]
[65.05573273 313.87869263]
[77.96011353 306.04418945]
[92.50000000 301.98287964]
[92.50000000 286.98287964]
[92.50000000 271.98287964]
[92.50000000 256.98287964]
[92.50000000 241.98287964]
[92.50000000 226.98287964]
[92.50000000 211.98287964]
[92.50000000 196.98287964]
[92.50000000 181.98287964]
[92.50000000 166.98287964]
[92.50000000 151.98287964]
[78.16321564 147.76634216]
[65.59430695 139.68270874]
[55.81085205 128.38641357]
[49.60489273 114.79197693]
[47.47887039 100.00000000]
[49.60489273 85.20802307]
[55.81085205 71.61358643]
[65.59430695 60.31728745]
[78.16321564 52.23365021]
[92.50000000 48.01712418]
[92.50000000 33.01712418]
[92.50000000 18.01712608]
[92.50000000 3.01712561]
[77.53487396 1.89590335]
[62.69537735 -0.34053546]
[48.06451035 -3.67968369]
[33.72409058 -8.10286713]
[19.75431442 -13.58534908]
[6.23331165 -20.09646988]
[-6.76330423 -27.59981346]
[-19.16284943 -36.05342102]
[-30.89598083 -45.41001511]
[-41.89707947 -55.61726761]
[-52.10462570 -66.61809540]
[-61.46152878 -78.35098267]
[-69.91546631 -90.75030518]
[-77.41915131 -103.74671936]
[-83.93063354 -117.26755524]
[-89.41348267 -131.23718262]
[-93.83704376 -145.57748413]
[-97.17658234 -160.20826721]
[-99.41341400 -175.04769897]
[-100.53502655 -190.01280212]
[-100.53516388 -205.01986694]
[-99.41381073 -219.98498535]
[-97.17723846 -234.82446289]
[-93.83795929 -249.45530701]
[-89.41464996 -263.79568481]
[-83.93204498 -277.76541138]
[-77.42080688 -291.28634644]
[-69.91735077 -304.28289795]
[-61.46363068 -316.68237305]
[-52.10693359 -328.41543579]
[-41.89958191 -339.41644287]
[-30.89866257 -349.62387085]
[-19.16569710 -358.98068237]
[-6.76630020 -367.43450928]
[6.23018360 -374.93807983]
[19.75107193 -381.44943237]
[33.72074890 -386.93215942]
[48.06109238 -391.35559082]
[62.69190216 -394.69500732]
[77.53135681 -396.93170166]
[92.49646759 -398.05319214]
[107.50353241 -398.05319214]
[122.46864319 -396.93170166]
[137.30810547 -394.69500732]
[151.93890381 -391.35559082]
[166.27925110 -386.93215942]
[180.24893188 -381.44943237]
[193.76982117 -374.93807983]
[206.76629639 -367.43450928]
[219.16569519 -358.98068237]
[230.89866638 -349.62387085]
[241.89958191 -339.41644287]
[252.10693359 -328.41543579]
[261.46362305 -316.68237305]
[269.91735840 -304.28289795]
[277.42080688 -291.28634644]
[283.93203735 -277.76541138]
[289.41464233 -263.79568481]
[293.83795166 -249.45530701]
[297.17724609 -234.82446289]
[299.41381836 -219.98498535]
[300.53515625 -205.01986694]
[300.53503418 -190.01280212]
[299.41342163 -175.04769897]
[297.17657471 -160.20826721]
[293.83703613 -145.57748413]
[289.41348267 -131.23718262]
[283.93063354 -117.26755524]
[277.41915894 -103.74671936]
[269.91546631 -90.75030518]
[261.46151733 -78.35098267]
[252.10462952 -66.61809540]
[241.89707947 -55.61726761]
[230.89598083 -45.41001511]
[219.16285706 -36.05342102]
[206.76330566 -27.59981346]
[193.76669312 -20.09646988]
[180.24568176 -13.58534908]
[166.27590942 -8.10286713]
[151.93548584 -3.67968369]
[137.30462646 -0.34053546]
[122.46512604 1.89590335]
[107.50000000 3.01712561]
[107.50000000 18.01712608]
[107.50000000 33.01712418]
[107.50000000 48.01712418]
[121.83678436 52.23365021]
[134.40568542 60.31728745]
[144.18914795 71.61358643]
[150.39511108 85.20802307]
[152.52113342 100.00000000]
[150.39511108 114.79197693]
[144.18914795 128.38641357]
[134.40568542 139.68270874]
[121.83678436 147.76634216]
[107.50000000 151.98287964]
[107.50000000 166.98287964]
[107.50000000 181.98287964]
[107.50000000 196.98287964]
[107.50000000 211.98287964]
[107.50000000 226.98287964]
[107.50000000 241.98287964]
[107.50000000 256.98287964]
[107.50000000 271.98287964]
[107.50000000 286.98287964]
[107.50000000 301.98287964]
[122.03988647 306.04418945]
[134.94427490 313.87869263]
[145.25555420 324.90502930]
[152.20857239 338.30496216]
[155.28736877 353.08410645]
[154.26348877 368.14578247]
[149.21287537 382.37231445]
[140.51036072 394.70797729]
[128.80169678 404.23739624]
[114.95575714 410.25341797]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[31 120]
[32 119]
[33 118]
[34 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
