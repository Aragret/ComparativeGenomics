%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUACUAGAGGGGGGGGGGCCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAxxxxxxxxxxUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUAGACCUAACCCCCCCCCCCCUGACUAGA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 421.56332397]
[71.19830322 415.54730225]
[59.48964310 406.01788330]
[50.78712082 393.68222046]
[45.73651886 379.45568848]
[44.71262741 364.39401245]
[47.79142761 349.61483765]
[54.74444962 336.21493530]
[65.05573273 325.18859863]
[77.96011353 317.35409546]
[92.50000000 313.29275513]
[92.50000000 298.29275513]
[92.50000000 283.29275513]
[92.50000000 268.29275513]
[92.50000000 253.29277039]
[92.50000000 238.29277039]
[92.50000000 223.29277039]
[92.50000000 208.29277039]
[92.50000000 193.29277039]
[92.50000000 178.29277039]
[74.98969269 174.56871033]
[58.77510452 166.98146057]
[44.69625473 155.92408752]
[33.48253632 141.96945190]
[25.71489716 125.84049225]
[11.14219379 129.39526367]
[-3.43050885 132.95001221]
[-18.00321198 136.50477600]
[-24.76698875 150.60391235]
[-39.03234100 157.00965881]
[-54.06360245 152.69744873]
[-62.76347351 139.70336914]
[-61.02414322 124.16281891]
[-49.66686249 113.41357422]
[-34.05419922 112.53110504]
[-21.55797386 121.93207550]
[-6.98527050 118.37731934]
[7.58743238 114.82255554]
[22.16013527 111.26779175]
[21.41258049 103.16628265]
[21.50595093 95.03089142]
[22.43924522 86.94867706]
[24.20247650 79.00611877]
[26.77677917 71.28820038]
[30.13460350 63.87751007]
[34.24002457 56.85335159]
[22.54039955 47.46619034]
[10.84077644 38.07902908]
[-0.85884744 28.69186592]
[-12.55847073 19.30470467]
[-24.25809479 9.91754341]
[-40.29810333 10.23006439]
[-50.43193054 -2.20718265]
[-46.88576889 -17.85340691]
[-32.37993240 -24.70616150]
[-18.04205704 -17.50860405]
[-14.87093258 -1.78208053]
[-3.17130923 7.60508156]
[8.52831459 16.99224281]
[20.22793770 26.37940407]
[31.92756081 35.76656723]
[43.62718582 45.15372849]
[49.21944809 39.93883896]
[55.29167557 35.29162979]
[61.78647232 31.25602531]
[68.64245605 27.87017250]
[75.79482269 25.16607094]
[83.17596436 23.16927910]
[90.71613312 21.89867210]
[98.34403992 21.36625671]
[105.98760223 21.57706833]
[113.57456970 22.52910995]
[121.03324127 24.21338844]
[128.29310608 26.61397934]
[135.28555298 29.70819664]
[141.94448853 33.46679306]
[148.20698547 37.85424423]
[154.01382446 42.82907867]
[159.31015015 48.34428024]
[164.04589844 54.34771729]
[168.17630005 60.78264618]
[181.83253479 54.57723999]
[195.48876953 48.37182999]
[209.14501953 42.16642380]
[222.80125427 35.96101761]
[236.45750427 29.75560951]
[233.89294434 15.44931984]
[234.83950806 0.95533931]
[239.23724365 -12.87782001]
[246.82421875 -25.24142647]
[257.15228271 -35.41381454]
[269.61337280 -42.80250549]
[283.47543335 -46.97871017]
[297.92532349 -47.70222092]
[312.11660767 -44.93521118]
[325.21905518 -38.84419632]
[336.46728516 -29.79001045]
[345.20541382 -18.30644035]
[358.98779297 -24.22640419]
[362.28219604 -39.38972855]
[373.88262939 -49.69556046]
[389.32843018 -51.18109512]
[402.68038940 -43.27511978]
[408.80441284 -29.01763535]
[405.34570312 -13.89094067]
[393.63418579 -3.71155715]
[378.17318726 -2.39366579]
[364.90774536 -10.44402313]
[351.12536621 -4.52405977]
[353.47174072 10.80885887]
[351.78292847 26.23923683]
[346.16751099 40.72236252]
[337.00012207 53.27616882]
[324.89642334 63.04782867]
[310.67178345 69.37168121]
[295.28643799 71.81459045]
[279.78048706 70.20559692]
[265.20376587 64.64787292]
[252.54457092 55.51211929]
[242.66290283 43.41184998]
[229.00666809 49.61725998]
[215.35041809 55.82266617]
[201.69418335 62.02807236]
[188.03793335 68.23348236]
[174.38169861 74.43888855]
[178.61589050 97.64435577]
[175.77870178 121.06170654]
[166.12533569 142.58459473]
[150.52409363 160.27705383]
[130.37829590 172.54768372]
[107.50000000 178.29277039]
[107.50000000 193.29277039]
[107.50000000 208.29277039]
[107.50000000 223.29277039]
[107.50000000 238.29277039]
[107.50000000 253.29277039]
[107.50000000 268.29275513]
[107.50000000 283.29275513]
[107.50000000 298.29275513]
[107.50000000 313.29275513]
[122.03988647 317.35409546]
[134.94427490 325.18859863]
[145.25555420 336.21493530]
[152.20857239 349.61483765]
[155.28736877 364.39401245]
[154.26348877 379.45568848]
[149.21287537 393.68222046]
[140.51036072 406.01788330]
[128.80169678 415.54730225]
[114.95575714 421.56332397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 39]
[26 38]
[27 37]
[28 36]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[81 125]
[82 124]
[83 123]
[84 122]
[85 121]
[86 120]
[98 109]
[99 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
