%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGUGCACUGGGGGGGGGGUGGACGAACCAGAGUGUAGCUUAACACAAAGCACCCAACUUACACUUAGGxxxxxxxxxxACAAGAGUGCUACUCUCCUCGCUCCGGGCCCAUAACACUUGGGGGUAGCUCCCCCCCCCCAAAGUGAACU\
) } def
/len { sequence length } bind def

/coor [
[78.37155151 381.42889404]
[64.52561188 375.41287231]
[52.81695175 365.88345337]
[44.11442566 353.54779053]
[39.06382370 339.32125854]
[38.03993225 324.25958252]
[41.11873245 309.48040771]
[48.07175446 296.08047485]
[58.38303757 285.05416870]
[71.28742218 277.21963501]
[85.82730865 273.15832520]
[85.82730865 258.15832520]
[85.82730865 243.15834045]
[85.82730865 228.15834045]
[85.82730865 213.15834045]
[85.82730865 198.15834045]
[85.82730865 183.15834045]
[85.82730865 168.15834045]
[85.82730865 153.15834045]
[85.82730865 138.15834045]
[72.96890259 130.43424988]
[59.72631836 137.47938538]
[46.48373032 144.52452087]
[40.44046783 159.38583374]
[25.01334953 163.78851318]
[12.03674412 154.35520935]
[11.46519184 138.32232666]
[23.73713875 127.98894501]
[39.43859863 131.28193665]
[52.68118286 124.23680115]
[65.92376709 117.19166565]
[64.97334290 103.74052429]
[68.75532532 91.87296295]
[55.51274109 84.82782745]
[42.27015686 77.78269958]
[29.02756882 70.73756409]
[15.78498363 63.69242477]
[2.54239821 56.64729309]
[-11.23998356 50.72732925]
[-25.46676254 45.97351456]
[-39.69354248 41.21969986]
[-53.92032242 36.46588516]
[-67.94757080 43.74681091]
[-82.98929596 38.89685822]
[-90.12150574 24.79341888]
[-85.11280060 9.80381107]
[-70.93473816 2.82110310]
[-55.99892426 7.98801327]
[-49.16650772 22.23910522]
[-34.93972778 26.99291992]
[-20.71294785 31.74673462]
[-6.48616838 36.50054932]
[-13.59787273 23.29359436]
[-11.74767780 8.40813923]
[-1.61919177 -2.65593696]
[13.04531002 -5.81067801]
[26.82758522 0.10952958]
[34.63536072 12.91728783]
[33.58381653 27.88038445]
[24.06147575 39.47025299]
[9.58753300 43.40470505]
[22.83011818 50.44984055]
[36.07270432 57.49497604]
[49.31528854 64.54010773]
[62.55787659 71.58524323]
[75.80046082 78.63037872]
[88.19032288 69.95320892]
[103.17265320 67.87193298]
[108.07420349 53.69537735]
[112.97576141 39.51881790]
[100.89727020 48.41320801]
[86.27001190 51.73634338]
[71.53413391 48.93386078]
[59.14791107 40.47327423]
[51.17765045 27.76599503]
[48.95296478 12.93188667]
[52.84498215 -1.55438995]
[62.20442581 -13.27619839]
[75.46993256 -20.27807808]
[90.42852020 -21.39195824]
[104.58475494 -16.43202019]
[115.57706451 -6.22569036]
[121.57167816 7.52438498]
[121.56885529 22.52299500]
[130.07994080 10.17142200]
[138.59103394 -2.18015075]
[147.10212708 -14.53172302]
[155.61322021 -26.88329506]
[159.62165833 -43.35657120]
[176.56079102 -44.06504822]
[181.93080139 -27.98402214]
[167.96479797 -18.37220573]
[159.45370483 -6.02063322]
[150.94261169 6.33093929]
[142.43151855 18.68251228]
[133.92042542 31.03408432]
[127.15231323 44.42036819]
[122.25076294 58.59692764]
[117.34921265 72.77348328]
[126.95948792 82.23868561]
[131.86352539 94.80442810]
[146.82377625 95.89574432]
[161.78402710 96.98705292]
[176.75482178 97.92268372]
[191.73452759 98.70252991]
[196.49636841 96.26440430]
[201.23625183 95.97122955]
[205.12615967 97.44441223]
[207.61546326 100.02721405]
[222.51736450 101.73989868]
[237.41926575 103.45259094]
[252.32116699 105.16528320]
[263.54965210 94.28158569]
[279.15072632 93.21329498]
[291.75799561 102.46482849]
[295.41870117 117.66789246]
[288.40438843 131.64407349]
[274.02697754 137.79421997]
[259.07507324 133.21446228]
[250.60847473 120.06718445]
[235.70657349 118.35449219]
[220.80467224 116.64180756]
[205.90277100 114.92911530]
[190.95468140 113.68224335]
[175.97497559 112.90239716]
[169.08712769 115.71367645]
[160.69271851 111.94730377]
[145.73246765 110.85598755]
[130.77221680 109.76467896]
[121.11012268 128.19966125]
[100.82730865 138.15834045]
[100.82730865 153.15834045]
[100.82730865 168.15834045]
[100.82730865 183.15834045]
[100.82730865 198.15834045]
[100.82730865 213.15834045]
[100.82730865 228.15834045]
[100.82730865 243.15834045]
[100.82730865 258.15832520]
[100.82730865 273.15832520]
[115.36719513 277.21963501]
[128.27157593 285.05416870]
[138.58285522 296.08047485]
[145.53587341 309.48040771]
[148.61468506 324.25958252]
[147.59078979 339.32125854]
[142.54019165 353.54779053]
[133.83766174 365.88345337]
[122.12899780 375.41287231]
[108.28305817 381.42889404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 31]
[22 30]
[23 29]
[33 66]
[34 65]
[35 64]
[36 63]
[37 62]
[38 61]
[39 52]
[40 51]
[41 50]
[42 49]
[68 99]
[69 98]
[70 97]
[84 96]
[85 95]
[86 94]
[87 93]
[88 92]
[101 129]
[102 128]
[103 127]
[104 125]
[105 124]
[109 123]
[110 122]
[111 121]
[112 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
