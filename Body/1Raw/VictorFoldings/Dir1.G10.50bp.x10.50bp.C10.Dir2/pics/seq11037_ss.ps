%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCCCUCAGGGGGGGGGGCCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACxxxxxxxxxxUUACCGUACAUAGCACAUUACAGUCAAAUCCCUUCUCGUCCCCAUGGAUGCCCCCCCCCCACCCCCCUCA\
) } def
/len { sequence length } bind def

/coor [
[79.74805450 378.42684937]
[65.90211487 372.41082764]
[54.19345474 362.88140869]
[45.49092865 350.54571533]
[40.44032669 336.31921387]
[39.41643524 321.25753784]
[42.49523544 306.47836304]
[49.44825745 293.07843018]
[59.75954056 282.05209351]
[72.66391754 274.21759033]
[87.20381165 270.15628052]
[87.20381165 255.15628052]
[87.20381165 240.15628052]
[87.20381165 225.15628052]
[87.20381165 210.15628052]
[87.20381165 195.15628052]
[87.20381165 180.15628052]
[87.20381165 165.15628052]
[87.20381165 150.15628052]
[87.20381165 135.15628052]
[87.20381165 120.15628052]
[82.18101501 108.09720612]
[84.90645599 97.68628693]
[91.83286285 92.68027496]
[85.76985168 78.96022034]
[79.70683289 65.24016571]
[73.64382172 51.52011490]
[67.58081055 37.80006027]
[41.15948868 29.27549553]
[32.52845001 3.32737637]
[18.62589455 -2.30458021]
[4.72333860 -7.93653679]
[-9.17921734 -13.56849384]
[-28.20809364 -2.17496538]
[-51.79793549 -12.68970585]
[-66.79063416 -13.15774822]
[-80.97798920 -4.93272591]
[-95.05793762 -13.34028244]
[-94.54624176 -29.73144531]
[-79.96928406 -37.24438858]
[-66.32259369 -28.15044403]
[-51.32989502 -27.68240166]
[-47.32215500 -42.13708878]
[-60.41530991 -49.45619583]
[-73.50846100 -56.77530289]
[-86.60161591 -64.09440613]
[-99.69477081 -71.41351318]
[-115.46134186 -68.44789124]
[-127.51565552 -79.03433990]
[-126.61068726 -95.05184937]
[-113.44063568 -104.21315002]
[-98.10845184 -99.49048615]
[-92.37566376 -84.50666809]
[-79.28250885 -77.18756104]
[-66.18935394 -69.86845398]
[-53.09620285 -62.54935074]
[-40.00304794 -55.23024368]
[-24.70190811 -56.71273041]
[-11.73235703 -50.64189529]
[-4.27179956 -39.66908646]
[-3.54726052 -27.47105026]
[10.35529518 -21.83909225]
[24.25785065 -16.20713615]
[38.16040802 -10.57518005]
[44.26586914 -16.72221184]
[51.87193298 -20.87076759]
[60.34571838 -22.67566109]
[63.13804245 -37.41346741]
[65.93036652 -52.15127182]
[52.40066528 -58.84826660]
[41.18027878 -68.94804382]
[33.10183716 -81.70114136]
[28.76481628 -96.16117859]
[28.49104691 -111.25514221]
[32.30084991 -125.86294556]
[39.91150665 -138.90060425]
[50.75825882 -149.40063477]
[64.03620911 -156.58384705]
[78.76004028 -159.91723633]
[93.83714294 -159.15339661]
[108.14870453 -154.34906006]
[120.63270569 -145.86068726]
[130.36276245 -134.31822205]
[136.61682129 -120.57816315]
[138.93080139 -105.66011810]
[137.13299561 -90.67110443]
[131.35679626 -76.72341156]
[122.03084564 -64.85205078]
[109.84719086 -55.93795013]
[95.70993805 -50.64260101]
[80.66817474 -49.35894775]
[77.87584686 -34.62114334]
[75.08352661 -19.88333702]
[80.38282013 -16.80172729]
[84.96126556 -12.69716358]
[88.62358856 -7.73446369]
[91.21154785 -2.11524343]
[92.61071777 3.93027639]
[92.75556183 10.15269947]
[91.63245392 16.29374313]
[89.28054810 22.09695625]
[85.79047394 27.31842804]
[81.30086517 31.73704720]
[87.36387634 45.45709991]
[93.42688751 59.17715454]
[99.48990631 72.89720917]
[105.55291748 86.61726379]
[117.15425873 96.12561798]
[131.79776001 99.37644196]
[146.44125366 102.62727356]
[161.08476257 105.87809753]
[169.77857971 93.40869141]
[182.58514404 85.21965790]
[197.55154419 82.55975342]
[212.39552307 85.83460236]
[224.85348511 94.54481506]
[233.02566528 107.36213684]
[235.66587830 122.33203125]
[232.37150574 137.17169189]
[223.64492798 149.61817932]
[210.81684875 157.77349854]
[195.84350586 160.39401245]
[181.00819397 157.08012390]
[168.57318115 148.33717346]
[160.43475342 135.49838257]
[157.83393860 120.52159882]
[143.19042969 117.27077484]
[128.54693604 114.01994324]
[113.90343475 110.76911926]
[102.20381165 120.15628052]
[102.20381165 135.15628052]
[102.20381165 150.15628052]
[102.20381165 165.15628052]
[102.20381165 180.15628052]
[102.20381165 195.15628052]
[102.20381165 210.15628052]
[102.20381165 225.15628052]
[102.20381165 240.15628052]
[102.20381165 255.15628052]
[102.20381165 270.15628052]
[116.74369812 274.21759033]
[129.64807129 282.05209351]
[139.95936584 293.07843018]
[146.91238403 306.47836304]
[149.99118042 321.25753784]
[148.96728516 336.31921387]
[143.91668701 350.54571533]
[135.21415710 362.88140869]
[123.50550079 372.41082764]
[109.65956116 378.42684937]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 107]
[25 106]
[26 105]
[27 104]
[28 103]
[30 64]
[31 63]
[32 62]
[33 61]
[35 42]
[36 41]
[43 57]
[44 56]
[45 55]
[46 54]
[47 53]
[67 93]
[68 92]
[69 91]
[108 129]
[109 128]
[110 127]
[111 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
