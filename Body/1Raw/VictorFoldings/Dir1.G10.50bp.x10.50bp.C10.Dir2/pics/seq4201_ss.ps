%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACAACAUAGGGGGGGGGGUUUUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAAxxxxxxxxxxGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGCCCCCCCCCCACUCAACAUA\
) } def
/len { sequence length } bind def

/coor [
[83.52075195 355.68621826]
[69.67481232 349.67019653]
[57.96615219 340.14077759]
[49.26362610 327.80511475]
[44.21302795 313.57861328]
[43.18913651 298.51690674]
[46.26793289 283.73776245]
[53.22095490 270.33782959]
[63.53223801 259.31149292]
[76.43662262 251.47698975]
[90.97650909 247.41567993]
[90.97650909 232.41567993]
[90.97650909 217.41567993]
[90.97650909 202.41567993]
[90.97650909 187.41567993]
[90.97650909 172.41567993]
[90.97650909 157.41567993]
[90.97650909 142.41567993]
[90.97650909 127.41567993]
[90.97650909 112.41567993]
[82.95484161 125.09056854]
[72.65502930 135.99533081]
[60.45809937 144.72659302]
[46.81523132 150.96134949]
[32.23110962 154.46896362]
[17.24522972 155.11968994]
[2.41195488 152.88943481]
[-11.71999931 147.86073303]
[-24.62786293 140.21958923]
[-35.83414459 130.24867249]
[-44.92429733 118.31681824]
[-51.56205750 104.86542511]
[-55.50188446 90.39207458]
[-56.59803009 75.43218231]
[-54.80994415 60.53913498]
[-50.20377731 46.26387024]
[-42.94992065 33.13445282]
[-33.31670761 21.63657570]
[-21.66049194 12.19556713]
[-8.41246510 5.16066980]
[5.93730068 0.79212153]
[20.85797691 -0.74847579]
[35.79761124 0.59586781]
[50.20355988 4.77542210]
[63.54291153 11.63557625]
[75.32221222 20.92255783]
[85.10572815 32.29282379]
[92.53153229 45.32575607]
[97.32493591 59.53924561]
[99.30862427 74.40750122]
[98.41023254 89.37400818]
[107.17644501 77.20217133]
[115.94264984 65.03033447]
[124.70885468 52.85849762]
[133.47506714 40.68666077]
[122.10600281 30.88698006]
[111.63430786 20.13370323]
[102.13967896 8.50867081]
[93.69437408 -3.89964342]
[86.36267853 -16.99680328]
[80.20038605 -30.68312836]
[75.25439453 -44.85445404]
[71.56234741 -59.40293121]
[69.15234375 -74.21782684]
[68.04272461 -89.18640137]
[68.24193573 -104.19472504]
[69.74846649 -119.12856293]
[72.55084229 -133.87428284]
[76.62773895 -148.31964111]
[81.94813538 -162.35469055]
[88.47152710 -175.87263489]
[96.14826965 -188.77056885]
[104.91993713 -200.95036316]
[114.71977997 -212.31929016]
[125.47320557 -222.79083252]
[137.09837341 -232.28529358]
[149.50680542 -240.73042297]
[162.60406494 -248.06193542]
[176.29048157 -254.22404480]
[190.46186829 -259.16983032]
[205.01040649 -262.86166382]
[219.82533264 -265.27148438]
[234.79391479 -266.38088989]
[249.80223083 -266.18145752]
[264.73605347 -264.67471313]
[279.48171997 -261.87213135]
[293.92703247 -257.79504395]
[307.96200562 -252.47444153]
[321.47985840 -245.95086670]
[334.37768555 -238.27394104]
[346.55737305 -229.50209045]
[357.92614746 -219.70210266]
[368.39755249 -208.94853210]
[377.89184570 -197.32322693]
[386.33679199 -184.91467285]
[393.66812134 -171.81730652]
[399.83004761 -158.13081360]
[404.77563477 -143.95935059]
[408.46728516 -129.41076660]
[410.87686157 -114.59580231]
[411.98605347 -99.62719727]
[411.78643799 -84.61888123]
[410.27947998 -69.68508148]
[407.47668457 -54.93944550]
[403.39938354 -40.49420547]
[398.07858276 -26.45929909]
[391.55484009 -12.94154072]
[383.87771606 -0.04381180]
[375.10571289 12.13572598]
[365.30554199 23.50437927]
[354.55181885 33.97562027]
[342.92639160 43.46976089]
[330.51773071 51.91453934]
[317.42025757 59.24568558]
[303.73367310 65.40740204]
[289.56213379 70.35279846]
[275.01351929 74.04423523]
[260.19851685 76.45361328]
[245.22988892 77.56260681]
[230.22157288 77.36275482]
[215.28779602 75.85559845]
[200.54220581 73.05260468]
[186.09701538 68.97509766]
[172.06219482 63.65411758]
[158.54452515 57.13015366]
[145.64689636 49.45286942]
[136.88069153 61.62470627]
[128.11448669 73.79653931]
[119.34828186 85.96837616]
[110.58206940 98.14021301]
[105.97650909 112.41567993]
[105.97650909 127.41567993]
[105.97650909 142.41567993]
[105.97650909 157.41567993]
[105.97650909 172.41567993]
[105.97650909 187.41567993]
[105.97650909 202.41567993]
[105.97650909 217.41567993]
[105.97650909 232.41567993]
[105.97650909 247.41567993]
[120.51639557 251.47698975]
[133.42077637 259.31149292]
[143.73205566 270.33782959]
[150.68508911 283.73776245]
[153.76388550 298.51690674]
[152.73999023 313.57861328]
[147.68939209 327.80511475]
[138.98686218 340.14077759]
[127.27819824 349.67019653]
[113.43226624 355.68621826]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[51 130]
[52 129]
[53 128]
[54 127]
[55 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
