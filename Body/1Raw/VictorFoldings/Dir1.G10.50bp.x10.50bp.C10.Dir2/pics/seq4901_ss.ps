%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUACUACCAGGGGGGGGGGAUCAAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCAAUAAAACUAGGAxxxxxxxxxxACAUAACCUAAACCUACUCCAAUGCUAAAACUAAUCGUCCCAACAAUUAUCCCCCCCCCCAUUACUACCA\
) } def
/len { sequence length } bind def

/coor [
[59.96581650 450.15338135]
[46.11987686 444.13735962]
[34.41121674 434.60794067]
[25.70869255 422.27224731]
[20.65809059 408.04574585]
[19.63419914 392.98406982]
[22.71299744 378.20489502]
[29.66601944 364.80496216]
[39.97730255 353.77862549]
[52.88168335 345.94412231]
[67.42156982 341.88281250]
[67.42156982 326.88281250]
[67.42156982 311.88281250]
[67.42156982 296.88281250]
[67.42156982 281.88281250]
[67.42156982 266.88281250]
[67.42156982 251.88281250]
[67.42156982 236.88281250]
[67.42156982 221.88281250]
[67.42156982 206.88281250]
[67.42156982 191.88281250]
[67.42156982 176.88281250]
[59.46196365 189.59677124]
[47.86321640 199.10829163]
[33.83670044 204.42401123]
[18.84733582 204.98875427]
[4.46060181 200.74353027]
[-7.82096004 192.13172913]
[-16.71467018 180.05273438]
[-21.29167366 165.76809692]
[-21.07395363 150.76966858]
[-16.08424759 136.62390137]
[-6.84367609 124.80815887]
[5.68267965 116.55646515]
[20.18657494 112.73062897]
[35.15323257 113.73021698]
[49.01954269 119.45083618]
[60.33731461 129.29502869]
[67.92453003 142.23464966]
[70.98891449 156.92134094]
[76.18433380 142.84982300]
[81.37974548 128.77830505]
[71.15559387 118.51768494]
[66.08245087 104.95019531]
[67.06627655 90.49870300]
[73.93138885 77.74394989]
[85.45180511 68.96366119]
[99.57022858 65.72581482]
[102.66854858 51.04928970]
[105.76687622 36.37276459]
[95.54116821 24.85143089]
[94.07743835 9.69521523]
[101.72840881 -3.26343441]
[115.37947845 -9.16143894]
[118.47779846 -23.83796501]
[121.57611847 -38.51449203]
[124.67443848 -53.19101715]
[127.77276611 -67.86753845]
[115.76805115 -75.59332275]
[107.14809418 -86.93544769]
[102.93643951 -100.51328278]
[103.62160492 -114.68283081]
[109.10048676 -127.73577881]
[118.69327545 -138.10542297]
[131.22773743 -144.55474854]
[145.18244934 -146.32395935]
[148.58541870 -160.93284607]
[151.98840332 -175.54174805]
[155.39137268 -190.15063477]
[142.01110840 -197.10902405]
[130.78222656 -207.17695618]
[122.41060638 -219.72154236]
[117.42248535 -233.95422363]
[116.13141632 -248.98033142]
[118.61856079 -263.85531616]
[124.72758484 -277.64410400]
[134.07444763 -289.47991943]
[146.07162476 -298.61877441]
[159.96495056 -304.48620605]
[174.88107300 -306.71331787]
[189.88235474 -305.16018677]
[204.02580261 -299.92437744]
[216.42236328 -291.33508301]
[226.29275513 -279.93215942]
[233.01652527 -266.43249512]
[236.17102051 -251.68460083]
[235.55793762 -236.61560059]
[231.21582031 -222.17271423]
[223.41761780 -209.26383972]
[212.65353394 -198.70045471]
[199.60018921 -191.14657593]
[185.07814026 -187.07704163]
[170.00027466 -186.74766541]
[166.59729004 -172.13876343]
[163.19432068 -157.52987671]
[159.79133606 -142.92097473]
[172.79461670 -133.91546631]
[181.37838745 -120.58423615]
[184.20898438 -104.94418335]
[180.82579041 -89.37493896]
[171.71592712 -76.25685120]
[158.24432373 -67.60702515]
[142.44929504 -64.76921844]
[139.35096741 -50.09269333]
[136.25263977 -35.41616821]
[133.15432739 -20.73964310]
[130.05599976 -6.06311750]
[140.15824890 4.84938383]
[141.91847229 19.79480553]
[134.45347595 33.06610489]
[120.44339752 39.47108459]
[117.34507751 54.14760971]
[114.24675751 68.82413483]
[122.97172546 74.55978394]
[129.56507874 82.65610504]
[133.41500854 92.36181641]
[134.16426086 102.77629852]
[148.48686218 107.23311615]
[164.35603333 103.09772491]
[175.67776489 114.96154785]
[170.80523682 130.62010193]
[154.75086975 133.96520996]
[144.03004456 121.55570984]
[129.70744324 117.09889984]
[115.14694977 130.74856567]
[95.45126343 133.97372437]
[90.25585175 148.04524231]
[85.06043243 162.11676025]
[82.42156982 176.88281250]
[82.42156982 191.88281250]
[82.42156982 206.88281250]
[82.42156982 221.88281250]
[82.42156982 236.88281250]
[82.42156982 251.88281250]
[82.42156982 266.88281250]
[82.42156982 281.88281250]
[82.42156982 296.88281250]
[82.42156982 311.88281250]
[82.42156982 326.88281250]
[82.42156982 341.88281250]
[96.96145630 345.94412231]
[109.86583710 353.77862549]
[120.17712402 364.80496216]
[127.13014221 378.20489502]
[130.20893860 392.98406982]
[129.18505859 408.04574585]
[124.13445282 422.27224731]
[115.43193054 434.60794067]
[103.72326660 444.13735962]
[89.87732697 450.15338135]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[40 128]
[41 127]
[42 126]
[48 113]
[49 112]
[50 111]
[54 107]
[55 106]
[56 105]
[57 104]
[58 103]
[66 96]
[67 95]
[68 94]
[69 93]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
