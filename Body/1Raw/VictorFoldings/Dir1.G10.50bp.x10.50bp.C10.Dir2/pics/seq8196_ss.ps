%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCACAAUGGGGGGGGGGCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAxxxxxxxxxxACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCCCCCCCCCCCACUAU\
) } def
/len { sequence length } bind def

/coor [
[83.40955353 460.51834106]
[70.18936157 453.24588013]
[59.30255508 442.79885864]
[51.49142456 429.88961792]
[47.28854370 415.39831543]
[46.98047256 400.31295776]
[50.58821106 385.66213989]
[57.86578369 372.44476318]
[68.31699371 361.56198120]
[81.22925568 353.75585938]
[95.72219086 349.55856323]
[95.41013336 334.56179810]
[95.09807587 319.56506348]
[94.78602600 304.56829834]
[94.47396851 289.57153320]
[94.16191101 274.57479858]
[93.84985352 259.57803345]
[93.53779602 244.58128357]
[93.22573853 229.58453369]
[92.91368866 214.58776855]
[82.43315887 207.02766418]
[78.17613983 194.61991882]
[81.91727448 181.84368896]
[92.50000000 173.44943237]
[92.50000000 158.44943237]
[92.50000000 143.44943237]
[92.50000000 128.44943237]
[80.19222260 121.75482178]
[72.37631226 110.12680054]
[57.44200516 111.52910614]
[42.50769424 112.93141174]
[34.71669388 126.35079956]
[20.51233864 132.59706116]
[5.35649347 129.26840210]
[-4.92310905 117.64475250]
[-6.37375212 102.19563293]
[1.56236553 88.86154938]
[15.83364582 82.76973724]
[30.95248795 86.26261902]
[41.10539246 97.99710083]
[56.03969955 96.59480286]
[70.97400665 95.19249725]
[75.84214020 80.32115936]
[88.17246246 69.30403137]
[105.23226166 65.76454926]
[104.29663849 50.79375458]
[103.04975891 35.84566879]
[101.49217987 20.92675781]
[99.93460083 6.00784492]
[98.37702179 -8.91106701]
[96.81943512 -23.82997894]
[94.33432007 -38.62268829]
[90.93134308 -53.23157883]
[87.52836609 -67.84046936]
[84.12538147 -82.44936371]
[80.72240448 -97.05825806]
[65.66325378 -96.86846924]
[50.91547012 -99.92083740]
[37.16883469 -106.07259369]
[25.06630516 -115.03601074]
[15.17393589 -126.39185333]
[7.95441055 -139.60897827]
[3.74540138 -154.06921387]
[2.74377036 -169.09622192]
[4.99636602 -183.98715210]
[10.39783001 -198.04553223]
[18.69552612 -210.61384583]
[29.50135803 -221.10421753]
[42.30991364 -229.02603149]
[56.52211380 -234.00872803]
[71.47323608 -235.81929016]
[86.46397400 -234.37303162]
[100.79319763 -229.73757935]
[113.79070282 -222.12974548]
[124.84856415 -211.90538025]
[133.44958496 -199.54267883]
[139.19149780 -185.61985779]
[141.80570984 -170.78814697]
[141.16998291 -155.74122620]
[137.31404114 -141.18286133]
[130.41821289 -127.79399872]
[120.80506134 -116.20083618]
[108.92419434 -106.94562531]
[95.33129883 -100.46123505]
[98.73427582 -85.85234070]
[102.13725281 -71.24344635]
[105.54022980 -56.63455582]
[108.94321442 -42.02566528]
[118.10933685 -53.89925385]
[132.96087646 -56.00448608]
[145.06579590 -47.14610672]
[147.55148315 -32.35349655]
[139.00668335 -20.02521706]
[124.28273773 -17.16070366]
[111.73834991 -25.38755989]
[113.29592896 -10.46864796]
[114.85350800 4.45026398]
[116.41109467 19.36917686]
[117.96867371 34.28808975]
[121.09860992 37.97306061]
[121.90419006 43.68115234]
[119.26742554 49.85812759]
[120.20305634 64.82891846]
[131.60408020 74.57656860]
[146.53839111 73.17427063]
[161.47268677 71.77196503]
[176.40699768 70.36965942]
[185.14527893 57.40137100]
[200.18922424 53.13364792]
[214.43556213 59.58158112]
[221.15760803 73.70065308]
[217.18139648 88.82427216]
[204.38439941 97.81152344]
[188.80894470 96.41890717]
[177.80929565 85.30397034]
[162.87500000 86.70626831]
[147.94068909 88.10857391]
[133.00637817 89.51087952]
[133.74055481 98.73159027]
[132.01033020 107.58104706]
[128.06542969 115.42961121]
[122.30847168 121.75295258]
[115.25725555 126.16679382]
[107.50000000 128.44943237]
[107.50000000 143.44943237]
[107.50000000 158.44943237]
[107.50000000 173.44943237]
[120.08443451 185.55601501]
[120.05262756 202.68153381]
[107.91043854 214.27572632]
[108.22249603 229.27247620]
[108.53455353 244.26922607]
[108.84661102 259.26599121]
[109.15866089 274.26272583]
[109.47071838 289.25949097]
[109.78277588 304.25625610]
[110.09483337 319.25299072]
[110.40689087 334.24975586]
[110.71894836 349.24649048]
[125.37393951 352.83728027]
[138.59974670 360.09951782]
[149.49461365 370.53811646]
[157.31570435 383.44134521]
[161.52978516 397.92941284]
[161.84950256 413.01449585]
[158.25308228 427.66809082]
[150.98571777 440.89111328]
[140.54290771 451.78195190]
[127.63668060 459.59805298]
[113.14698792 463.80651855]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[24 127]
[25 126]
[26 125]
[27 124]
[29 42]
[30 41]
[31 40]
[45 103]
[46 102]
[47 99]
[48 98]
[49 97]
[50 96]
[51 95]
[52 88]
[53 87]
[54 86]
[55 85]
[56 84]
[104 118]
[105 117]
[106 116]
[107 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
