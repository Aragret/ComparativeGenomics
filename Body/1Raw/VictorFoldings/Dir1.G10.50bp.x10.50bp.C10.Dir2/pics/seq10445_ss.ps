%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAUUUACCGGGGGGGGGGACAACACAAUGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCxxxxxxxxxxGUUUAACCAAAACAUCAGAUUGUGAAUCUGACAACAGAGGCUUACGACCCCCCCCCCCCCCUUAUUUACC\
) } def
/len { sequence length } bind def

/coor [
[84.16491699 416.12289429]
[72.28064728 406.84780884]
[62.96193695 394.99768066]
[56.75057220 381.26153564]
[54.00767136 366.43789673]
[54.89270020 351.38864136]
[59.35420609 336.98870850]
[67.13280487 324.07525635]
[77.77625275 313.39910889]
[90.66576385 305.58090210]
[105.05194855 301.07525635]
[104.11632538 286.10446167]
[103.18069458 271.13366699]
[102.24506378 256.16287231]
[101.30944061 241.19207764]
[100.37380981 226.22128296]
[99.43817902 211.25050354]
[98.50255585 196.27970886]
[97.56692505 181.30891418]
[96.63129425 166.33811951]
[88.11519623 154.11825562]
[94.97663879 139.86233521]
[86.07084656 137.68577576]
[77.89031219 133.54699707]
[70.86099243 127.66149139]
[65.34889221 120.33569336]
[61.64101028 111.95104980]
[59.93041229 102.94413757]
[45.02851105 101.23144531]
[30.12660980 99.51876068]
[15.22470665 97.80606842]
[0.63134569 103.91707611]
[-11.12925243 94.77718353]
[-26.03115463 93.06449127]
[-34.13680267 105.99744415]
[-47.05571365 114.12545013]
[-62.22282028 115.83470154]
[-76.62669373 110.78581238]
[-87.40742493 99.98125458]
[-92.42449951 85.56626892]
[-90.68176270 70.40296936]
[-82.52524567 57.50203705]
[-69.57443237 49.42496490]
[-54.40070724 47.77545929]
[-40.01683426 52.88102722]
[-29.27873230 63.72796249]
[-24.31846428 78.16259003]
[-9.41656208 79.87528229]
[4.11091471 73.64176941]
[16.93739700 82.90416718]
[31.83929825 84.61685181]
[46.74119949 86.32954407]
[61.64310455 88.04223633]
[64.42039490 81.33635712]
[68.35886383 75.23958588]
[73.32996368 69.95089722]
[79.17146301 65.64287567]
[85.69272614 62.45613861]
[92.68090820 60.49467468]
[99.90796661 59.82250214]
[107.13802338 60.46155930]
[114.13512421 62.39098740]
[120.67091370 65.54781342]
[130.65364075 54.35205078]
[130.70545959 41.41175842]
[139.30467224 32.28638840]
[151.41740417 31.51896286]
[161.63088989 20.53329849]
[171.84437561 9.54763412]
[182.05784607 -1.43803036]
[175.98066711 -11.35114288]
[172.36532593 -22.38983345]
[171.40272522 -33.95349503]
[173.13955688 -45.41430664]
[177.47607422 -56.15131760]
[184.17190552 -65.58409119]
[192.85923767 -73.20408630]
[203.06309509 -78.60206604]
[214.22732544 -81.49008179]
[225.74481201 -81.71681213]
[236.99060059 -79.27551270]
[243.89759827 -92.59066772]
[250.80459595 -105.90582275]
[257.71160889 -119.22098541]
[254.25546265 -134.88732910]
[264.46063232 -147.26611328]
[280.49856567 -146.86137390]
[290.06634521 -133.98359680]
[285.82440186 -118.51151276]
[271.02676392 -112.31398010]
[264.11975098 -98.99882507]
[257.21276855 -85.68367004]
[250.30575562 -72.36851501]
[256.98736572 -66.49409485]
[262.50646973 -59.51609802]
[276.16271973 -65.72150421]
[289.81896973 -71.92691040]
[303.47521973 -78.13231659]
[317.13143921 -84.33773041]
[330.78768921 -90.54313660]
[344.44393921 -96.74854279]
[356.36279297 -108.80577850]
[371.24829102 -100.69047546]
[367.57086182 -84.14016724]
[350.64932251 -83.09230042]
[336.99310303 -76.88689423]
[323.33685303 -70.68148804]
[309.68060303 -64.47608185]
[296.02438354 -58.27067184]
[282.36813354 -52.06526566]
[268.71188354 -45.85985947]
[270.21093750 -25.92858315]
[263.68157959 -6.99719858]
[250.16291809 7.82866716]
[231.84332275 16.10423088]
[211.70602417 16.44867516]
[193.04351807 8.77544975]
[182.83003235 19.76111412]
[172.61656189 30.74677849]
[162.40307617 41.73244476]
[159.44320679 59.00204468]
[141.84941101 64.33477783]
[131.86668396 75.53054047]
[140.17733765 100.14635468]
[131.68756104 124.70096588]
[109.94743347 138.92669678]
[118.53045654 152.21739197]
[111.60208893 165.40249634]
[112.53771973 180.37329102]
[113.47334290 195.34407043]
[114.40897369 210.31486511]
[115.34460449 225.28565979]
[116.28022766 240.25645447]
[117.21585846 255.22724915]
[118.15148926 270.19802856]
[119.08711243 285.16882324]
[120.02274323 300.13961792]
[134.85797119 302.81903076]
[148.62060547 308.97155762]
[160.51049805 318.23944092]
[169.83639526 330.08389282]
[176.05609131 343.81628418]
[178.80796814 358.63827515]
[177.93206787 373.68804932]
[173.47929382 388.09069824]
[165.70852661 401.00885010]
[155.07154846 411.69146729]
[142.18678284 419.51745605]
[127.80332947 424.03182983]
[112.75742340 424.97216797]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[22 126]
[28 53]
[29 52]
[30 51]
[31 50]
[33 48]
[34 47]
[63 123]
[64 122]
[67 120]
[68 119]
[69 118]
[70 117]
[81 93]
[82 92]
[83 91]
[84 90]
[95 111]
[96 110]
[97 109]
[98 108]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
