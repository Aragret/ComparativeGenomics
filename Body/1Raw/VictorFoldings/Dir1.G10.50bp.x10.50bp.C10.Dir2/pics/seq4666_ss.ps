%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUCUACUCUACCGGGGGGGGGGAUCUUUGCAGGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACxxxxxxxxxxCACCAUCAUAGCCACCAUCACCCUCCUUAACCUCUACUUCUACCUACGCCCCCCCCCCCCUAAUCUACUCCACC\
) } def
/len { sequence length } bind def

/coor [
[102.61945343 404.92425537]
[88.98394775 398.56268311]
[76.79895020 389.73535156]
[66.50492859 378.76129150]
[58.47401810 366.03726196]
[52.99652863 352.02322388]
[50.27046204 337.22573853]
[50.39436722 322.17977905]
[53.36376572 307.42919922]
[59.07131577 293.50726318]
[67.31069183 280.91723633]
[77.78404236 270.11419678]
[90.11277008 261.48870850]
[103.85119629 255.35258484]
[118.50268555 251.92759705]
[117.91007996 236.93931580]
[117.31748199 221.95101929]
[116.72488403 206.96273804]
[116.13228607 191.97444153]
[115.53968811 176.98616028]
[114.94709015 161.99786377]
[114.35449219 147.00958252]
[113.76188660 132.02128601]
[113.16928864 117.03299713]
[100.79070282 120.19462585]
[89.64955902 115.80180359]
[83.63121033 106.38418579]
[68.66706085 105.34769440]
[53.70291519 104.31120300]
[39.40108490 111.07642365]
[27.23887634 102.47817230]
[12.27472878 101.44168091]
[6.09725475 104.02951050]
[0.40794885 103.19510651]
[-3.25639176 100.05710602]
[-18.16790771 98.43024445]
[-26.19896126 111.40964508]
[-39.07086182 119.61190033]
[-54.22787857 121.40844727]
[-68.66057587 116.44257355]
[-79.50334167 105.70025635]
[-84.60331726 91.31439972]
[-82.94791412 76.14131165]
[-74.86581421 63.19363785]
[-61.96171570 55.04213715]
[-46.79774094 53.30529404]
[-32.38470459 58.32796860]
[-21.58433342 69.11289978]
[-16.54104233 83.51873016]
[-1.62952673 85.14559174]
[13.31122112 86.47753143]
[28.27536774 87.51402283]
[41.50686264 80.67466736]
[54.73940659 89.34705353]
[69.70355225 90.38354492]
[84.66770172 91.42003632]
[94.59651947 81.89941406]
[109.33987427 82.07753754]
[120.43811035 93.22972107]
[129.30278015 81.12940216]
[118.01358795 71.23780823]
[107.62947845 60.39993286]
[98.22946930 48.69825363]
[89.88510895 36.22183609]
[82.65990448 23.06562614]
[76.60884857 9.32975960]
[71.77798462 -4.88122654]
[68.20408630 -19.45917511]
[65.91435242 -34.29314041]
[64.92620087 -49.27021790]
[65.24716949 -64.27642822]
[66.87480164 -79.19756317]
[69.79671478 -93.92005157]
[73.99066925 -108.33185577]
[79.42474365 -122.32328796]
[86.05758667 -135.78787231]
[93.83871460 -148.62310791]
[102.70890808 -160.73132324]
[112.60065460 -172.02037048]
[123.43868256 -182.40434265]
[135.14048767 -191.80418396]
[147.61701965 -200.14836121]
[160.77333069 -207.37338257]
[174.50929260 -213.42425537]
[188.72033691 -218.25491333]
[203.29833984 -221.82861328]
[218.13233948 -224.11813354]
[233.10943604 -225.10607910]
[248.11563110 -224.78489685]
[263.03674316 -223.15705872]
[277.75918579 -220.23493958]
[292.17092896 -216.04078674]
[306.16229248 -210.60650635]
[319.62677002 -203.97348022]
[332.46191406 -196.19216919]
[344.57000732 -187.32180786]
[355.85891724 -177.42990112]
[366.24273682 -166.59173584]
[375.64239502 -154.88978577]
[383.98641968 -142.41313171]
[391.21124268 -129.25672913]
[397.26193237 -115.52068329]
[402.09237671 -101.30956268]
[405.66586304 -86.73151398]
[407.95520020 -71.89749146]
[408.94293213 -56.92037964]
[408.62155151 -41.91417694]
[406.99349976 -26.99309158]
[404.07116699 -12.27068138]
[399.87680054 2.14100528]
[394.44232178 16.13228416]
[387.80911255 29.59667206]
[380.02761841 42.43169403]
[371.15710449 54.53966904]
[361.26501465 65.82843781]
[350.42672729 76.21209717]
[338.72463989 85.61161041]
[326.24786377 93.95544434]
[313.09136963 101.18009186]
[299.35522461 107.23057556]
[285.14404297 112.06084442]
[270.56594849 115.63412476]
[255.73188782 117.92324066]
[240.75476074 118.91075897]
[225.74856567 118.58915710]
[210.82749939 116.96089935]
[196.10513306 114.03836823]
[181.69351196 109.84381104]
[167.70230103 104.40914154]
[154.23800659 97.77573395]
[141.40309143 89.99406433]
[132.53843689 102.09438324]
[128.15757751 116.44039917]
[128.75018311 131.42868042]
[129.34277344 146.41697693]
[129.93537903 161.40527344]
[130.52796936 176.39355469]
[131.12057495 191.38185120]
[131.71318054 206.37013245]
[132.30577087 221.35842896]
[132.89837646 236.34671021]
[133.49096680 251.33500671]
[148.36712646 253.59252930]
[162.54711914 258.62484741]
[175.51835632 266.25003052]
[186.81193542 276.19244385]
[196.01959229 288.09268188]
[202.80848694 301.52053833]
[206.93319702 315.99063110]
[208.24461365 330.97982788]
[206.69534302 345.94635010]
[202.34138489 360.34912109]
[195.34011841 373.66748047]
[185.94465637 385.41998291]
[174.49462891 395.18182373]
[161.40394592 402.60006714]
[147.14582825 407.40658569]
[132.23568726 409.42761230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[27 56]
[28 55]
[29 54]
[31 52]
[32 51]
[35 50]
[36 49]
[59 132]
[60 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
