%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAACCCUCUGGGGGGGGGGAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGxxxxxxxxxxCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCACUAUUAACCUACUGGGCCCCCCCCCCAGAACUCUCU\
) } def
/len { sequence length } bind def

/coor [
[84.93926239 366.07772827]
[71.09333038 360.06170654]
[59.38466644 350.53228760]
[50.68214035 338.19662476]
[45.63153839 323.97009277]
[44.60764694 308.90841675]
[47.68644714 294.12927246]
[54.63946915 280.72933960]
[64.95075226 269.70300293]
[77.85513306 261.86849976]
[92.39501953 257.80718994]
[92.39501953 242.80717468]
[92.39501953 227.80717468]
[92.39501953 212.80717468]
[92.39501953 197.80717468]
[92.39501953 182.80717468]
[92.39501953 167.80717468]
[92.39501953 152.80717468]
[92.39501953 137.80717468]
[92.39501953 122.80718231]
[80.13265228 114.16806793]
[66.00785065 119.21681976]
[51.88304520 124.26557922]
[37.75824356 129.31433105]
[35.08280563 144.43840027]
[25.19148827 156.18818665]
[10.74500847 161.40306091]
[-4.37060404 158.68022156]
[-16.08932686 148.75212097]
[-21.25888062 134.28936768]
[-18.48868179 119.18236542]
[-8.52390003 107.49481964]
[5.95498848 102.37062836]
[21.05323601 105.18816376]
[32.70948792 115.18952942]
[46.83428955 110.14077759]
[60.95909500 105.09201813]
[75.08390045 100.04325867]
[77.65851593 94.70247650]
[81.24695587 90.53608704]
[85.45291138 87.69930267]
[89.86871338 86.23011017]
[94.10732269 86.05358124]
[91.00900269 71.37705994]
[87.91068268 56.70053101]
[84.81236267 42.02400589]
[81.71403503 27.34748077]
[78.61571503 12.67095470]
[72.26858521 -0.91999584]
[63.00363922 -12.71663570]
[53.73868942 -24.51327515]
[44.47373962 -36.30991745]
[35.20878983 -48.10655594]
[25.94384003 -59.90319443]
[16.67889023 -71.69983673]
[7.41394186 -83.49647522]
[-8.30533028 -85.13356018]
[-18.19792175 -97.45882416]
[-16.39473534 -113.15991211]
[-3.96556783 -122.92163849]
[11.71557522 -120.95255280]
[21.34535027 -108.42087555]
[19.21058273 -92.76142120]
[28.47553062 -80.96478271]
[37.74047852 -69.16814423]
[47.00542831 -57.37150574]
[56.27037811 -45.57486343]
[65.53533173 -33.77822495]
[74.80027771 -21.98158455]
[84.06522369 -10.18494511]
[82.25228119 -25.07498360]
[84.28200531 -39.93702316]
[90.02119446 -53.79565430]
[99.09318542 -65.74132538]
[110.90255737 -74.99003601]
[124.67427063 -80.93477631]
[139.50447083 -83.18539429]
[154.41983032 -81.59418488]
[168.44145203 -76.26557159]
[180.64907837 -67.54927063]
[190.24151611 -56.01735687]
[196.58921814 -42.42667007]
[199.27555847 -27.66917801]
[198.12423706 -12.71342754]
[193.21081543 1.45902193]
[184.85777283 13.91802120]
[173.61331177 23.84587479]
[160.21543884 30.59101105]
[145.54345703 33.71073914]
[130.56028748 33.00031281]
[116.24929810 28.50635147]
[103.54973602 20.52380371]
[93.29224396 9.57263374]
[96.39056396 24.24915886]
[99.48888397 38.92568588]
[102.58720398 53.60221100]
[105.68553162 68.27873230]
[108.78385162 82.95526123]
[105.88945770 68.23715973]
[109.43595886 53.66244507]
[118.76913452 41.91971207]
[132.16729736 35.17514038]
[147.15888977 34.67290115]
[160.97840881 40.50564194]
[171.07656860 51.59740067]
[175.59057617 65.90207672]
[173.68771362 80.78089142]
[165.71900940 93.48915100]
[153.15444946 101.68256378]
[138.31182861 103.84968567]
[123.93182373 99.59223175]
[138.25442505 104.04904938]
[152.57702637 108.50586700]
[166.89961243 112.96268463]
[177.27111816 101.76470184]
[191.47727966 96.18368530]
[206.69744873 97.32774353]
[219.90968323 104.96973419]
[228.49064636 117.59232330]
[230.73660278 132.68928528]
[226.20159912 147.26312256]
[215.78608704 158.42018127]
[201.55805969 163.94520569]
[186.34249878 162.74121094]
[173.16047668 155.04725647]
[164.62928772 142.39097595]
[162.44279480 127.28527832]
[148.12020874 122.82846069]
[133.79760742 118.37165070]
[119.47500610 113.91483307]
[107.39501953 122.80718231]
[107.39501953 137.80717468]
[107.39501953 152.80717468]
[107.39501953 167.80717468]
[107.39501953 182.80717468]
[107.39501953 197.80717468]
[107.39501953 212.80717468]
[107.39501953 227.80717468]
[107.39501953 242.80717468]
[107.39501953 257.80718994]
[121.93490601 261.86849976]
[134.83929443 269.70300293]
[145.15057373 280.72933960]
[152.10359192 294.12927246]
[155.18238831 308.90841675]
[154.15850830 323.97009277]
[149.10789490 338.19662476]
[140.40538025 350.53228760]
[128.69671631 360.06170654]
[114.85077667 366.07772827]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 38]
[22 37]
[23 36]
[24 35]
[43 98]
[44 97]
[45 96]
[46 95]
[47 94]
[48 93]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[111 130]
[112 129]
[113 128]
[114 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
