%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACACUACUGGGGGGGGGGCCCCAUAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACxxxxxxxxxxUCUACUGACUAUCCUAGAAAUCGCUGUCGCCUUAAUCCAAGCCUACGUUUCCCCCCCCCCUCACACUUCU\
) } def
/len { sequence length } bind def

/coor [
[51.65235138 483.98559570]
[37.80641174 477.96957397]
[26.09775162 468.44015503]
[17.39522743 456.10446167]
[12.34462547 441.87796021]
[11.32073402 426.81628418]
[14.39953327 412.03710938]
[21.35255432 398.63717651]
[31.66383934 387.61083984]
[44.56821823 379.77633667]
[59.10810852 375.71502686]
[59.10810852 360.71502686]
[59.10810852 345.71502686]
[59.10810852 330.71502686]
[59.10810852 315.71502686]
[59.10810852 300.71502686]
[59.10810852 285.71502686]
[59.10810852 270.71502686]
[59.10810852 255.71502686]
[59.10810852 240.71502686]
[50.09209061 252.70300293]
[36.59325409 259.24374390]
[21.59741592 258.89053345]
[8.42151260 251.72145081]
[-0.02006372 239.32226562]
[-1.86011505 224.43554688]
[3.30836105 210.35411072]
[14.34214497 200.19264221]
[28.80066681 196.19874573]
[43.48583221 199.25585938]
[55.14942169 208.68775940]
[61.21190262 222.41014099]
[59.65620422 215.13516235]
[64.84062195 207.53425598]
[68.54678345 192.99932861]
[72.25294495 178.46438599]
[75.95910645 163.92945862]
[79.66526794 149.39451599]
[83.37142944 134.85957336]
[74.83148193 129.29582214]
[68.04434204 121.69183350]
[63.48268127 112.57716370]
[61.46417999 102.58658600]
[62.12942123 92.41587067]
[65.43207550 82.77333069]
[71.14212799 74.33050537]
[78.86192322 67.67537689]
[88.05382538 63.27141953]
[98.07769775 61.42533875]
[100.25453949 46.58413315]
[102.43137360 31.74292755]
[104.60820770 16.90172195]
[106.78504944 2.06051683]
[108.96188354 -12.78068829]
[94.48175812 -16.76886177]
[80.60150146 -22.50628853]
[67.53153229 -29.90598869]
[55.46999359 -38.85578918]
[44.59973145 -49.22000885]
[35.08554077 -60.84152985]
[27.07164955 -73.54417419]
[20.67954636 -87.13536835]
[16.00613785 -101.40908051]
[13.12226868 -116.14892578]
[12.07165813 -131.13143921]
[12.87023258 -146.12950134]
[15.50588799 -160.91574097]
[19.93866539 -175.26600647]
[26.10136795 -188.96275330]
[33.90056992 -201.79832458]
[43.21803665 -213.57817078]
[53.91251755 -224.12367249]
[65.82188416 -233.27497864]
[78.76560211 -240.89337158]
[92.54743958 -246.86334229]
[106.95847321 -251.09439087]
[121.78022766 -253.52238464]
[136.78800964 -254.11050415]
[151.75431824 -252.84983826]
[166.45225525 -249.75949097]
[180.65901184 -244.88632202]
[194.15921021 -238.30419922]
[206.74819946 -230.11291504]
[218.23512268 -220.43664551]
[228.44584656 -209.42207336]
[237.22557068 -197.23619080]
[244.44120789 -184.06370544]
[249.98338318 -170.10433960]
[253.76805115 -155.56970215]
[255.73783875 -140.68011475]
[255.86291504 -125.66133118]
[254.14134216 -110.74101257]
[250.59925842 -96.14535522]
[245.29032898 -82.09562683]
[238.29505920 -68.80480957]
[229.71948242 -56.47439194]
[219.69361877 -45.29130554]
[208.36943054 -35.42507935]
[195.91860962 -27.02528000]
[182.52989197 -20.21925163]
[168.40626526 -15.11016655]
[153.76182556 -11.77548122]
[138.81858826 -10.26574707]
[123.80309296 -10.60385132]
[121.62625122 4.23735380]
[119.44941711 19.07855988]
[117.27258301 33.91976547]
[115.09574127 48.76097107]
[112.91890717 63.60217667]
[130.62092590 76.46154022]
[138.49589539 96.87500000]
[153.39779663 98.58768463]
[168.29969788 100.30037689]
[181.70835876 91.49199677]
[196.90974426 96.62009430]
[202.24266052 111.75084686]
[193.61614990 125.27722168]
[177.64773560 126.82295227]
[166.58700562 115.20227814]
[151.68510437 113.48959351]
[136.78320312 111.77690125]
[128.30574036 126.27707672]
[114.47485352 135.80751038]
[97.90636444 138.56573486]
[94.20020294 153.10067749]
[90.49404144 167.63562012]
[86.78787994 182.17054749]
[83.08171844 196.70549011]
[79.37555695 211.24041748]
[75.82079315 225.81312561]
[74.10810852 240.71502686]
[74.10810852 255.71502686]
[74.10810852 270.71502686]
[74.10810852 285.71502686]
[74.10810852 300.71502686]
[74.10810852 315.71502686]
[74.10810852 330.71502686]
[74.10810852 345.71502686]
[74.10810852 360.71502686]
[74.10810852 375.71502686]
[88.64799500 379.77633667]
[101.55237579 387.61083984]
[111.86366272 398.63717651]
[118.81668091 412.03710938]
[121.89547729 426.81628418]
[120.87158966 441.87796021]
[115.82098389 456.10446167]
[107.11846161 468.44015503]
[95.40979767 477.96957397]
[81.56386566 483.98559570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[32 130]
[34 129]
[35 128]
[36 127]
[37 126]
[38 125]
[39 124]
[49 109]
[50 108]
[51 107]
[52 106]
[53 105]
[54 104]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
