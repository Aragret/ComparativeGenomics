%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAACACCUCGGGGGGGGGGUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUxxxxxxxxxxUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCCCCCCCCCCCACCAAGACCUC\
) } def
/len { sequence length } bind def

/coor [
[83.29691315 366.66363525]
[69.80803680 359.93212891]
[58.32253265 350.16754150]
[49.50816345 337.93765259]
[43.87738419 323.95346069]
[41.75755310 309.02798462]
[43.27192307 294.02899170]
[48.33244705 279.82846069]
[56.64491272 267.25204468]
[67.72604370 257.03088379]
[80.93159485 249.75926208]
[95.49382019 245.85989380]
[95.18584442 230.86305237]
[94.87786865 215.86621094]
[94.56989288 200.86936951]
[94.26190948 185.87254333]
[93.95393372 170.87570190]
[93.64595795 155.87886047]
[93.33798218 140.88201904]
[93.02999878 125.88518524]
[92.72202301 110.88835144]
[91.79860687 95.91680145]
[90.26131439 80.99578094]
[88.72402191 66.07476807]
[79.20364380 57.31314087]
[78.26103973 44.81182861]
[85.85795593 35.34878922]
[84.62734222 20.39935493]
[83.39672852 5.44992018]
[82.16612244 -9.49951458]
[67.16110229 -9.31443405]
[52.17972946 -10.17650509]
[37.29498672 -12.08152962]
[22.57938957 -15.02022457]
[8.10463333 -18.97827530]
[-6.05876160 -23.93639565]
[-19.84179306 -29.87043190]
[-33.17731094 -36.75147247]
[-46.00034332 -44.54599380]
[-58.24841690 -53.21602249]
[-69.86186218 -62.71931458]
[-80.78409576 -73.00957489]
[-90.96191406 -84.03667450]
[-100.34571838 -95.74687958]
[-108.88980103 -108.08313751]
[-116.55253601 -120.98535919]
[-123.29657745 -134.39068604]
[-129.08908081 -148.23377991]
[-133.90182495 -162.44723511]
[-137.71136475 -176.96179199]
[-140.49913025 -191.70672607]
[-142.25155640 -206.61019897]
[-142.96008301 -221.59962463]
[-142.62127686 -236.60195923]
[-141.23678589 -251.54409790]
[-138.81333923 -266.35327148]
[-135.36276245 -280.95733643]
[-130.90185547 -295.28509521]
[-125.45235443 -309.26678467]
[-119.04080963 -322.83428955]
[-111.69846344 -335.92147827]
[-103.46108246 -348.46459961]
[-94.36879730 -360.40258789]
[-84.46590424 -371.67721558]
[-73.80065918 -382.23361206]
[-62.42500687 -392.02029419]
[-50.39437866 -400.98962402]
[-37.76738739 -409.09786987]
[-24.60554886 -416.30554199]
[-10.97298622 -422.57754517]
[3.06388140 -427.88330078]
[17.43666840 -432.19699097]
[32.07535172 -435.49752808]
[46.90861130 -437.76892090]
[61.86418152 -439.00003052]
[76.86920166 -439.18490601]
[91.85056305 -438.32260132]
[106.73527527 -436.41735840]
[121.45082855 -433.47845459]
[135.92553711 -429.52020264]
[150.08885193 -424.56188965]
[163.87179565 -418.62765503]
[177.20721436 -411.74642944]
[190.03013611 -403.95172119]
[202.27809143 -395.28149414]
[213.89140320 -385.77804565]
[224.81349182 -375.48764038]
[234.99114990 -364.46038818]
[244.37478638 -352.75006104]
[252.91868591 -340.41366577]
[260.58123779 -327.51132202]
[267.32510376 -314.10592651]
[273.11740112 -300.26272583]
[277.92993164 -286.04919434]
[281.73925781 -271.53460693]
[284.52682495 -256.78964233]
[286.27902222 -241.88612366]
[286.98733521 -226.89669800]
[286.64831543 -211.89436340]
[285.26361084 -196.95223999]
[282.83996582 -182.14309692]
[279.38916016 -167.53909302]
[274.92807007 -153.21139526]
[269.47836304 -139.22978210]
[263.06661987 -125.66237640]
[255.72409058 -112.57528687]
[247.48652649 -100.03226471]
[238.39407349 -88.09442902]
[228.49101257 -76.81993103]
[217.82562256 -66.26370239]
[206.44982910 -56.47717667]
[194.41906738 -47.50802612]
[181.79196167 -39.39995193]
[168.63002014 -32.19245529]
[154.99737549 -25.92065239]
[140.96041870 -20.61509514]
[126.58757782 -16.30163383]
[111.94884491 -13.00128555]
[97.11555481 -10.73012733]
[98.34616852 4.21930742]
[99.57678223 19.16874123]
[100.80738831 34.11817551]
[111.56883240 47.94698715]
[103.64504242 64.53747559]
[105.18233490 79.45848846]
[106.71962738 94.37950897]
[108.97904968 96.52616119]
[110.48576355 99.56215668]
[110.90166473 103.20201874]
[110.00209808 107.03690338]
[107.71886444 110.58036804]
[108.02684021 125.57720947]
[108.33481598 140.57405090]
[108.64279175 155.57087708]
[108.95077515 170.56771851]
[109.25875092 185.56455994]
[109.56672668 200.56140137]
[109.87470245 215.55824280]
[110.18268585 230.55506897]
[110.49066162 245.55191040]
[125.20069885 248.85014343]
[138.69364929 255.57348633]
[150.18507385 265.33108521]
[159.00685120 277.55563354]
[164.64611816 291.53640747]
[166.77499390 306.46060181]
[165.26971436 321.46051025]
[160.21780396 335.66409302]
[151.91296387 348.24557495]
[140.83802795 358.47341919]
[127.63688660 365.75308228]
[113.07702637 369.66125488]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 126]
[23 125]
[24 124]
[27 122]
[28 121]
[29 120]
[30 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
