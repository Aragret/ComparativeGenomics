%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUCGCUCAGGGGGGGGGGCACCUCAUAUCCUCCCUACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUxxxxxxxxxxUAUGAGGCAUAAUUAUAACAAGCUCCAUCUGCCUACGACAAACAGACCUACCCCCCCCCCAAAUCGCUCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 382.72586060]
[71.19830322 376.70983887]
[59.48964310 367.18041992]
[50.78712082 354.84475708]
[45.73651886 340.61822510]
[44.71262741 325.55654907]
[47.79142761 310.77740479]
[54.74444962 297.37747192]
[65.05573273 286.35113525]
[77.96011353 278.51663208]
[92.50000000 274.45532227]
[92.50000000 259.45532227]
[92.50000000 244.45530701]
[92.50000000 229.45530701]
[92.50000000 214.45530701]
[92.50000000 199.45530701]
[92.50000000 184.45530701]
[92.50000000 169.45530701]
[92.50000000 154.45530701]
[92.50000000 139.45530701]
[70.48628235 127.23806763]
[60.07085419 104.31682587]
[65.34675598 79.69915771]
[54.04774857 69.83343506]
[42.74874496 59.96770859]
[31.44973946 50.10198593]
[20.15073395 40.23626328]
[8.85173035 30.37054062]
[-2.44727468 20.50481796]
[-16.03822517 14.15768814]
[-30.85598373 11.82658482]
[-45.67374039 9.49548054]
[-60.49150085 7.16437674]
[-71.39900208 14.12715721]
[-83.72700500 11.83823776]
[-90.93048859 2.07006454]
[-105.69654083 -0.56879979]
[-120.46260071 -3.20766401]
[-132.34809875 6.95446110]
[-147.98541260 7.04755068]
[-159.99105835 -2.97234917]
[-162.69635010 -18.37414742]
[-154.82392883 -31.88558769]
[-140.09091187 -37.12697983]
[-125.45378113 -31.62349892]
[-117.82373810 -17.97371864]
[-103.05767822 -15.33485508]
[-88.29162598 -12.69599056]
[-72.16976929 -19.55789375]
[-58.16039658 -7.65338135]
[-43.34263611 -5.32227755]
[-28.52487946 -2.99117351]
[-13.70712185 -0.66006964]
[-25.09384727 -10.42441750]
[-34.16431427 -22.37124252]
[-40.51021957 -35.96276474]
[-43.84590912 -50.58716965]
[-44.02122498 -65.58614349]
[-41.02827454 -80.28452301]
[-35.00178528 -94.02065277]
[-26.21303940 -106.17623138]
[-15.05765533 -116.20405579]
[-2.03778625 -123.65274811]
[12.26048470 -128.18701172]
[27.19352722 -129.60270691]
[42.08913803 -127.83615112]
[56.27680206 -122.96683502]
[69.11786652 -115.21395874]
[80.03429413 -104.92651367]
[88.53469086 -92.56758118]
[94.23641968 -78.69348907]
[96.88281250 -63.92878342]
[96.35475159 -48.93807983]
[92.67599487 -34.39618301]
[86.01215363 -20.95768547]
[76.66319275 -9.22751617]
[65.04994202 0.26629826]
[51.69517899 7.09639835]
[37.20005417 10.95532990]
[22.21706009 11.66938686]
[7.41844845 9.20581341]
[18.71745300 19.07153702]
[30.01645851 28.93725967]
[41.31546402 38.80298233]
[52.61446762 48.66870499]
[63.91347122 58.53442764]
[75.21247864 68.40015411]
[82.26527405 62.26225281]
[90.84121704 57.74865723]
[100.55441284 55.23541641]
[110.92704773 55.00437927]
[121.41292572 57.22104263]
[131.42611694 61.91834259]
[143.12573242 52.53118134]
[146.29685974 36.80465698]
[160.63473511 29.60709953]
[175.14057922 36.45985413]
[178.68673706 52.10607910]
[168.55290222 64.54332733]
[152.51289368 64.23080444]
[140.81327820 73.61796570]
[142.74185181 80.86576843]
[157.23745728 77.00860596]
[171.73310852 73.15167236]
[175.58981323 87.64738464]
[161.09460449 91.50420380]
[146.59901428 95.36135864]
[148.52758789 102.60916138]
[163.34535217 104.94026184]
[178.16311646 107.27136993]
[192.98086548 109.60247040]
[202.06214905 97.28220367]
[215.83378601 90.60385895]
[231.13119507 91.10207367]
[244.43910217 98.66235352]
[252.69947815 111.54741669]
[254.01414490 126.79636383]
[248.08097839 140.90509033]
[236.26341248 150.63153076]
[221.27700806 153.74060059]
[206.56553650 149.51786804]
[195.50959778 138.93368530]
[190.64976501 124.42022705]
[175.83200073 122.08912659]
[161.01425171 119.75801849]
[146.19648743 117.42691803]
[140.14036560 125.45616913]
[132.81300354 131.79331970]
[124.63948822 136.26893616]
[116.05853271 138.81346130]
[107.50000000 139.45530701]
[107.50000000 154.45530701]
[107.50000000 169.45530701]
[107.50000000 184.45530701]
[107.50000000 199.45530701]
[107.50000000 214.45530701]
[107.50000000 229.45530701]
[107.50000000 244.45530701]
[107.50000000 259.45532227]
[107.50000000 274.45532227]
[122.03988647 278.51663208]
[134.94427490 286.35113525]
[145.25555420 297.37747192]
[152.20857239 310.77740479]
[155.28736877 325.55654907]
[154.26348877 340.61822510]
[149.21287537 354.84475708]
[140.51036072 367.18041992]
[128.80169678 376.70983887]
[114.95575714 382.72586060]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 87]
[24 86]
[25 85]
[26 84]
[27 83]
[28 82]
[29 81]
[30 53]
[31 52]
[32 51]
[33 50]
[36 48]
[37 47]
[38 46]
[93 101]
[94 100]
[108 126]
[109 125]
[110 124]
[111 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
