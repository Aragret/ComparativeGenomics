%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACUCCACCGGGGGGGGGGUUACUACCAGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCxxxxxxxxxxACCCUAGCCAUCAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCCCCCCCCCCCUCUCCACC\
) } def
/len { sequence length } bind def

/coor [
[80.57357788 426.53961182]
[66.72763824 420.52359009]
[55.01897812 410.99417114]
[46.31645203 398.65850830]
[41.26585007 384.43197632]
[40.24195862 369.37030029]
[43.32075882 354.59112549]
[50.27378082 341.19119263]
[60.58506393 330.16485596]
[73.48944092 322.33035278]
[88.02933502 318.26904297]
[88.02933502 303.26904297]
[88.02933502 288.26904297]
[88.02933502 273.26904297]
[88.02933502 258.26904297]
[88.02933502 243.26904297]
[88.02933502 228.26904297]
[88.02933502 213.26904297]
[88.02933502 198.26904297]
[88.02933502 183.26904297]
[88.02933502 168.26904297]
[88.02933502 153.26904297]
[88.02933502 138.26904297]
[82.22866058 133.51486206]
[76.77051544 147.48657227]
[61.79597855 146.61286926]
[57.99971390 132.10121155]
[70.62731934 124.00650787]
[64.82665253 119.25232697]
[50.11868668 122.19781494]
[40.06221390 134.69769287]
[24.02057648 134.48468018]
[14.29954338 121.72219849]
[18.35626030 106.20051575]
[33.07876205 99.82654572]
[47.17320633 107.48985291]
[61.88116837 104.54436493]
[74.80500793 78.63617706]
[98.73977661 72.35082245]
[102.14275360 57.74192810]
[105.54573059 43.13303375]
[108.94871521 28.52414131]
[112.35169220 13.91524887]
[100.36133575 6.13490295]
[91.56333923 -5.07579184]
[86.88431549 -18.49134064]
[86.80255127 -32.65653610]
[91.29921722 -46.04431152]
[79.40683746 -55.18604660]
[67.51445770 -64.32778168]
[55.62207413 -73.46951294]
[39.30284500 -75.08655548]
[32.79108047 -90.13743591]
[42.78552246 -103.13909912]
[59.00474930 -100.71654510]
[64.76380920 -85.36189270]
[76.65618896 -76.22016144]
[88.54856873 -67.07842255]
[100.44094849 -57.93669128]
[112.98018646 -65.90508270]
[127.48399353 -69.12489319]
[142.21710205 -67.21090698]
[149.12409973 -80.52606201]
[156.03109741 -93.84121704]
[162.93809509 -107.15637207]
[166.64425659 -121.69131470]
[166.95631409 -136.68806458]
[167.26837158 -151.68481445]
[167.58042908 -166.68156433]
[153.78208923 -173.12561035]
[143.80259705 -184.62907410]
[139.37097168 -199.19892883]
[141.25502014 -214.31085205]
[149.12831116 -227.34661865]
[161.62675476 -236.04769897]
[176.58493042 -238.90657043]
[191.41122437 -235.42793274]
[203.53689575 -226.21446228]
[210.86109924 -212.86247253]
[212.11488342 -197.68525696]
[207.08102417 -183.31236267]
[196.63163757 -172.23397827]
[182.57717896 -166.36952209]
[182.26512146 -151.37275696]
[181.95306396 -136.37600708]
[181.64100647 -121.37925720]
[189.67749023 -134.04475403]
[200.66822815 -144.25277710]
[213.89190674 -151.33334351]
[228.48063660 -154.82174683]
[243.47694397 -154.48905945]
[257.89663696 -150.35710144]
[270.79327393 -142.69705200]
[281.32049561 -132.01165771]
[288.78738403 -119.00222015]
[292.70385742 -104.52253723]
[292.81289673 -89.52293396]
[289.10736084 -74.98784637]
[281.83038330 -61.87121964]
[271.45962524 -51.03391266]
[258.67568970 -43.18718719]
[244.31761169 -38.84603119]
[229.32772827 -38.29535294]
[214.68981934 -41.57130051]
[201.36460876 -48.45886612]
[190.22662354 -58.50601578]
[182.00685120 -71.05334473]
[177.24478149 -85.27736664]
[176.25325012 -100.24937439]
[169.34625244 -86.93421936]
[162.43925476 -73.61906433]
[155.53225708 -60.30390930]
[166.02072144 -48.83918762]
[171.76174927 -34.36396408]
[171.98341370 -18.75985146]
[166.63291931 -4.06434393]
[156.38662720 7.79522800]
[142.56457520 15.25446224]
[126.96057892 17.31822586]
[123.55760193 31.92712021]
[120.15462494 46.53601074]
[116.75164795 61.14490509]
[113.34867096 75.75379944]
[125.33361053 84.26963806]
[131.93157959 98.60053253]
[130.43618774 115.38664246]
[120.19211578 130.10137939]
[103.02933502 138.26904297]
[103.02933502 153.26904297]
[103.02933502 168.26904297]
[103.02933502 183.26904297]
[103.02933502 198.26904297]
[103.02933502 213.26904297]
[103.02933502 228.26904297]
[103.02933502 243.26904297]
[103.02933502 258.26904297]
[103.02933502 273.26904297]
[103.02933502 288.26904297]
[103.02933502 303.26904297]
[103.02933502 318.26904297]
[117.56922150 322.33035278]
[130.47360229 330.16485596]
[140.78488159 341.19119263]
[147.73789978 354.59112549]
[150.81671143 369.37030029]
[149.79281616 384.43197632]
[144.74221802 398.65850830]
[136.03968811 410.99417114]
[124.33102417 420.52359009]
[110.48508453 426.53961182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[29 37]
[30 36]
[39 123]
[40 122]
[41 121]
[42 120]
[43 119]
[48 59]
[49 58]
[50 57]
[51 56]
[62 112]
[63 111]
[64 110]
[65 109]
[66 86]
[67 85]
[68 84]
[69 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
