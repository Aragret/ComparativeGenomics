%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGCCCGCCGGGGGGGGGGAUCAUCCUAGUCCUCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACxxxxxxxxxxAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUAGGCCCCCCCCCCCCUACCCGCC\
) } def
/len { sequence length } bind def

/coor [
[50.18710327 411.83914185]
[36.34116364 405.82312012]
[24.63250351 396.29370117]
[15.92997837 383.95803833]
[10.87937737 369.73150635]
[9.85548592 354.66983032]
[12.93428421 339.89068604]
[19.88730621 326.49075317]
[30.19859123 315.46441650]
[43.10297012 307.62991333]
[57.64285660 303.56860352]
[57.64285660 288.56860352]
[57.64285660 273.56860352]
[57.64285660 258.56860352]
[57.64285660 243.56860352]
[57.64285660 228.56860352]
[57.64285660 213.56860352]
[57.64285660 198.56860352]
[57.64285660 183.56860352]
[57.64285660 168.56860352]
[45.14238358 176.85943604]
[30.80241776 172.45883179]
[25.10431671 158.58325195]
[32.21293259 145.37463379]
[46.93244171 142.48741150]
[58.50379181 152.03131104]
[60.06137085 137.11239624]
[61.61895370 122.19348145]
[63.17653275 107.27456665]
[64.73411560 92.35565186]
[59.68535995 78.23085022]
[47.91199493 87.55529785]
[35.10051727 95.39260101]
[21.43774414 101.62846375]
[7.12292528 106.17195892]
[-7.63518715 108.95682526]
[-22.62137794 109.94244385]
[-37.61710358 109.11445618]
[-52.40368271 106.48491669]
[-66.76548004 102.09219360]
[-80.49306488 96.00032806]
[-93.38624573 88.29816437]
[-105.25699615 79.09803009]
[-115.93222046 68.53407288]
[-125.25622559 56.76036453]
[-133.09304810 43.94858932]
[-139.32839966 30.28558540]
[-143.87136841 15.97059822]
[-146.65567017 1.21238101]
[-147.64073181 -13.77384663]
[-146.81217957 -28.76954079]
[-144.18209839 -43.55602264]
[-139.78883362 -57.91765594]
[-133.69645691 -71.64501190]
[-125.99381256 -84.53790283]
[-116.79322815 -96.40831757]
[-106.22887421 -107.08313751]
[-94.45481873 -116.40670776]
[-81.64274597 -124.24304962]
[-67.97950745 -130.47789001]
[-53.66435242 -135.02030945]
[-38.90603256 -137.80407715]
[-23.91976738 -138.78857422]
[-8.92410374 -137.95945740]
[5.86227798 -135.32882690]
[20.22374916 -130.93502808]
[33.95087814 -124.84213257]
[46.84348297 -117.13900757]
[58.71354675 -107.93798065]
[69.38797760 -97.37322998]
[78.71109772 -85.59882355]
[86.54696655 -72.78646088]
[92.78130341 -59.12298965]
[97.32318878 -44.80766296]
[100.10639954 -30.04923630]
[101.09033966 -15.06293583]
[100.26065826 -0.06730317]
[97.62947083 14.71898079]
[93.23513031 29.08028793]
[87.14172363 42.80718994]
[79.43811798 55.69950485]
[70.23664856 67.56922913]
[85.22934723 68.03726959]
[96.52835083 58.17154312]
[107.82735443 48.30582047]
[119.12635803 38.44009781]
[130.42536926 28.57437515]
[141.72436523 18.70865250]
[152.92013550 8.72592545]
[164.01144409 -1.37272370]
[175.10276794 -11.47137356]
[186.19407654 -21.57002258]
[186.68318176 -37.36674118]
[198.25605774 -48.12982941]
[214.04672241 -47.47373962]
[224.68685913 -35.78771591]
[223.86386108 -20.00486946]
[212.06599426 -9.48888493]
[196.29272461 -10.47870731]
[185.20141602 -0.38005787]
[174.11009216 9.71859169]
[163.01878357 19.81724167]
[160.17193604 26.69045639]
[151.59008789 30.00765610]
[140.29109192 39.87337875]
[128.99208069 49.73910141]
[117.69307709 59.60482788]
[106.39407349 69.47055054]
[95.09506989 79.33627319]
[110.31159210 83.07877350]
[117.85219574 95.57156372]
[132.61825562 98.21043396]
[147.38430786 100.84929657]
[162.15036011 103.48815918]
[174.97248840 94.24864197]
[190.55880737 96.86435699]
[199.66224670 109.78345490]
[196.88189697 125.34125519]
[183.86727905 134.30758667]
[168.33973694 131.36289978]
[159.51148987 118.25421906]
[144.74543762 115.61534882]
[129.97938538 112.97648621]
[115.21333313 110.33762360]
[91.49243927 117.89632416]
[79.65303040 93.91323853]
[78.09544373 108.83214569]
[76.53786469 123.75106049]
[74.98028564 138.66996765]
[73.42270660 153.58888245]
[72.64286041 168.56860352]
[72.64286041 183.56860352]
[72.64286041 198.56860352]
[72.64286041 213.56860352]
[72.64286041 228.56860352]
[72.64286041 243.56860352]
[72.64286041 258.56860352]
[72.64286041 273.56860352]
[72.64286041 288.56860352]
[72.64286041 303.56860352]
[87.18274689 307.62991333]
[100.08712769 315.46441650]
[110.39840698 326.49075317]
[117.35143280 339.89068604]
[120.43022919 354.66983032]
[119.40634155 369.73150635]
[114.35573578 383.95803833]
[105.65321350 396.29370117]
[93.94454956 405.82312012]
[80.09860992 411.83914185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 130]
[27 129]
[28 128]
[29 127]
[30 126]
[31 82]
[83 109]
[84 108]
[85 107]
[86 106]
[87 105]
[88 104]
[89 102]
[90 101]
[91 100]
[92 99]
[111 124]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
