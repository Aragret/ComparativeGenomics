%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAAUAAAGGGGGGGGGGGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUxxxxxxxxxxCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCUACUAAACCCCCCCCCCCCCCAUUAAA\
) } def
/len { sequence length } bind def

/coor [
[98.59461212 373.57888794]
[84.74867249 367.56286621]
[73.04001617 358.03344727]
[64.33748627 345.69778442]
[59.28688812 331.47125244]
[58.26299667 316.40957642]
[61.34179688 301.63040161]
[68.29481506 288.23046875]
[78.60610199 277.20416260]
[91.51048279 269.36962891]
[106.05036926 265.30831909]
[106.05036926 250.30831909]
[106.05036926 235.30831909]
[106.05036926 220.30831909]
[106.05036926 205.30831909]
[106.05036926 190.30831909]
[106.05036926 175.30831909]
[106.05036926 160.30831909]
[106.05036926 145.30831909]
[106.05036926 130.30831909]
[100.20055389 125.61474609]
[94.88804626 139.64247131]
[79.90523529 138.92459106]
[75.95821381 124.45320892]
[88.50093079 116.22758484]
[82.65112305 111.53400421]
[68.00762177 114.78482819]
[53.36412048 118.03565216]
[38.72061920 121.28647614]
[24.07711601 124.53730774]
[12.36184692 136.01269531]
[-3.35888338 131.34465027]
[-6.91293478 115.33525085]
[5.35579586 104.45359802]
[20.82629013 109.89380646]
[35.46979141 106.64297485]
[50.11329269 103.39215088]
[64.75679779 100.14132690]
[79.40029907 96.89050293]
[90.49160767 86.79185486]
[95.09717560 72.51638794]
[99.70274353 58.24092865]
[85.80966949 52.56642914]
[72.38554382 45.85746002]
[59.50726318 38.15244675]
[47.24858475 29.49552727]
[35.67973328 19.93628693]
[24.86697388 9.52948284]
[14.87223816 -1.66527700]
[5.75277853 -13.58386898]
[-2.43916965 -26.15802383]
[-9.65668392 -39.31571579]
[-15.85842037 -52.98157883]
[-21.00885773 -67.07733917]
[-25.07849503 -81.52224731]
[-28.04401779 -96.23357391]
[-29.88844299 -111.12704468]
[-30.60120392 -126.11735535]
[-30.17822075 -141.11863708]
[-28.62191200 -156.04496765]
[-25.94119453 -170.81083679]
[-22.15142441 -185.33169556]
[-17.27430725 -199.52433777]
[-11.33778191 -213.30747986]
[-4.37584925 -226.60217285]
[3.57161117 -239.33226013]
[12.45907688 -251.42483521]
[22.23563957 -262.81063843]
[32.84530258 -273.42440796]
[44.22728729 -283.20541382]
[56.31640625 -292.09756470]
[69.04341125 -300.04998779]
[82.33539581 -307.01708984]
[96.11622620 -312.95895386]
[110.30697632 -317.84158325]
[124.82634735 -321.63702393]
[139.59118652 -324.32345581]
[154.51690674 -325.88558960]
[169.51802063 -326.31439209]
[184.50860596 -325.60745239]
[199.40278625 -323.76882935]
[214.11526489 -320.80902100]
[228.56176758 -316.74499512]
[242.65951538 -311.60003662]
[256.32778931 -305.40362549]
[269.48828125 -298.19122314]
[282.06564331 -290.00415039]
[293.98776245 -280.88934326]
[305.18640137 -270.89895630]
[315.59741211 -260.09024048]
[325.16116333 -248.52511597]
[333.82284546 -236.26980591]
[341.53286743 -223.39451599]
[348.24703979 -209.97299194]
[353.92694092 -196.08213806]
[358.54003906 -181.80148315]
[362.05987549 -167.21286011]
[364.46627808 -152.39981079]
[365.74551392 -137.44717407]
[365.89025879 -122.44063568]
[364.89962769 -107.46612549]
[362.77932739 -92.60941315]
[359.54147339 -77.95561981]
[355.20468140 -63.58866119]
[349.79373169 -49.59083939]
[343.33963013 -36.04233551]
[335.87933350 -23.02075195]
[327.45562744 -10.60067558]
[318.11669922 1.14674914]
[307.91607666 12.15423489]
[296.91220093 22.35873032]
[285.16806030 31.70178604]
[272.75094604 40.12988281]
[259.73199463 47.59474564]
[246.18576050 54.05361938]
[232.18984985 59.46950150]
[217.82441711 63.81137466]
[203.17175293 67.05436707]
[188.31579590 69.17990112]
[173.34164429 70.17580414]
[158.33503723 70.03636932]
[143.38197327 68.76239777]
[128.56806946 66.36119080]
[113.97820282 62.84649658]
[109.37263489 77.12195587]
[104.76707458 91.39741516]
[112.05475616 90.66213989]
[120.00196838 94.82082367]
[125.77291870 103.95677948]
[126.71121979 116.67372894]
[121.05036926 130.30831909]
[121.05036926 145.30831909]
[121.05036926 160.30831909]
[121.05036926 175.30831909]
[121.05036926 190.30831909]
[121.05036926 205.30831909]
[121.05036926 220.30831909]
[121.05036926 235.30831909]
[121.05036926 250.30831909]
[121.05036926 265.30831909]
[135.59025574 269.36962891]
[148.49464417 277.20416260]
[158.80592346 288.23046875]
[165.75894165 301.63040161]
[168.83773804 316.40957642]
[167.81385803 331.47125244]
[162.76324463 345.69778442]
[154.06072998 358.03344727]
[142.35206604 367.56286621]
[128.50611877 373.57888794]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[40 126]
[41 125]
[42 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
