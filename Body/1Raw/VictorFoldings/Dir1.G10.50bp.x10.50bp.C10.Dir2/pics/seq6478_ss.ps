%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCUCUCUCCUGGGGGGGGGGACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAAxxxxxxxxxxCACCUUCCACCCUUACUACACAAUCAAAGACGCCCUCGGCUUACUUCUCUCCCCCCCCCCUCCUUCUCUCCU\
) } def
/len { sequence length } bind def

/coor [
[96.50299835 418.08612061]
[82.34239197 412.93112183]
[69.75264740 404.64892578]
[59.41271210 393.68612671]
[51.88020325 380.63400269]
[47.56133652 366.19641113]
[46.68902588 351.15194702]
[49.31031799 336.31195068]
[55.28384399 322.47671509]
[64.28746033 310.39236450]
[75.83561707 300.71060181]
[89.30553436 293.95352173]
[103.97079468 290.48553467]
[103.97079468 275.48553467]
[103.97079468 260.48553467]
[103.97079468 245.48554993]
[103.97079468 230.48554993]
[103.97079468 215.48554993]
[103.97079468 200.48554993]
[103.97079468 185.48554993]
[103.97079468 170.48554993]
[103.97079468 155.48554993]
[103.97079468 140.48554993]
[76.37615204 127.32711029]
[68.46956635 101.49388885]
[53.74676895 98.62346649]
[39.02397537 95.75304413]
[24.30118179 92.88262177]
[9.57838726 90.01219177]
[-5.14440680 87.14176941]
[-19.86720085 84.27134705]
[-34.58999634 81.40091705]
[-49.36793900 78.82947540]
[-64.19496155 76.55805206]
[-79.00763702 82.11640167]
[-90.41650391 72.54106140]
[-105.24353027 70.26964569]
[-120.07054901 67.99822998]
[-134.89758301 65.72681427]
[-149.72460938 63.45539856]
[-164.79975891 69.91074371]
[-177.76390076 59.86766815]
[-175.28060913 43.65763092]
[-159.90449524 37.95612717]
[-147.45318604 48.62837219]
[-132.62615967 50.89978790]
[-117.79913330 53.17120361]
[-102.97211456 55.44262314]
[-88.14508820 57.71403885]
[-74.39293671 51.99322510]
[-61.92354965 61.73102951]
[-47.09652328 64.00244904]
[-42.74321365 61.91143799]
[-37.02430725 62.57456970]
[-31.71957016 66.67812347]
[-16.99677658 69.54855347]
[-2.27398252 72.41897583]
[12.44881153 75.28939819]
[27.17160606 78.15982819]
[41.89439774 81.03025055]
[56.61719513 83.90067291]
[71.33998871 86.77109528]
[76.86635590 78.52362061]
[84.68105316 72.40054321]
[94.01106262 69.00753784]
[103.93348694 68.68022919]
[109.28533936 54.66746521]
[114.63719940 40.65470123]
[119.98905945 26.64193535]
[125.34091949 12.62916851]
[112.51084137 4.77399302]
[101.34276581 -5.30513048]
[92.21707153 -17.26491165]
[85.44458008 -30.69800377]
[81.25595093 -45.14688110]
[79.79385376 -60.11941910]
[81.10808563 -75.10565948]
[85.15388489 -89.59517670]
[91.79345703 -103.09446716]
[100.80065155 -115.14374542]
[111.86869812 -125.33261108]
[124.62060547 -133.31405640]
[138.62207031 -138.81620789]
[153.39619446 -141.65168762]
[168.43977356 -141.72390747]
[183.24044800 -139.03041077]
[197.29408264 -133.66293335]
[210.12203979 -125.80430603]
[221.28739929 -115.72217560]
[230.40988159 -103.75993347]
[237.17875671 -90.32501221]
[241.36347961 -75.87500763]
[242.82154846 -60.90207672]
[241.50326538 -45.91619110]
[237.45356750 -31.42776299]
[230.81034851 -17.93026543]
[221.79991150 -5.88341761]
[210.72912598 4.30246973]
[197.97505188 12.28046894]
[183.97212219 17.77885246]
[169.19723511 20.61034584]
[154.15362549 20.67851257]
[139.35368347 17.98102760]
[134.00183105 31.99379349]
[128.64996338 46.00655746]
[123.29811096 60.01932526]
[117.94625092 74.03208923]
[132.84814453 84.97147369]
[140.44322205 104.38087463]
[155.44245911 104.53288269]
[170.44168091 104.68489075]
[184.31956482 97.08783722]
[196.96777344 104.95372009]
[211.96699524 105.10572815]
[225.97789001 96.58358002]
[240.23187256 104.69257355]
[240.06568909 121.09088135]
[225.65028381 128.90931702]
[211.81498718 120.10495758]
[196.81575012 119.95294952]
[184.01072693 127.56087494]
[170.28967285 119.68412018]
[155.29045105 119.53211212]
[140.29121399 119.38010406]
[134.96110535 124.65646362]
[149.85810852 126.41126251]
[157.77442932 139.15222168]
[152.74906921 153.28535461]
[138.56611633 158.16839600]
[125.90538788 150.12440491]
[124.30090332 135.20918274]
[118.97079468 140.48554993]
[118.97079468 155.48554993]
[118.97079468 170.48554993]
[118.97079468 185.48554993]
[118.97079468 200.48554993]
[118.97079468 215.48554993]
[118.97079468 230.48554993]
[118.97079468 245.48554993]
[118.97079468 260.48553467]
[118.97079468 275.48553467]
[118.97079468 290.48553467]
[133.63606262 293.95352173]
[147.10597229 300.71060181]
[158.65412903 310.39236450]
[167.65774536 322.47671509]
[173.63127136 336.31195068]
[176.25256348 351.15194702]
[175.38024902 366.19641113]
[171.06138611 380.63400269]
[163.52888489 393.68612671]
[153.18893433 404.64892578]
[140.59919739 412.93112183]
[126.43859100 418.08612061]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[25 62]
[26 61]
[27 60]
[28 59]
[29 58]
[30 57]
[31 56]
[32 55]
[33 52]
[34 51]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[66 107]
[67 106]
[68 105]
[69 104]
[70 103]
[109 124]
[110 123]
[111 122]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
