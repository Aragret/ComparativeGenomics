%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUAUUACCGGGGGGGGGGCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGxxxxxxxxxxCUCAUGUUCAUACACCUAUCCCCCAUUCUCCUCCUAUCCCUCAACCCCGACCCCCCCCCCCAUCAUUACC\
) } def
/len { sequence length } bind def

/coor [
[83.94643402 403.60736084]
[70.10049438 397.59133911]
[58.39183426 388.06192017]
[49.68931198 375.72625732]
[44.63871002 361.49972534]
[43.61481857 346.43804932]
[46.69361496 331.65890503]
[53.64663696 318.25897217]
[63.95792389 307.23263550]
[76.86230469 299.39813232]
[91.40219116 295.33682251]
[91.40219116 280.33682251]
[91.40219116 265.33682251]
[91.40219116 250.33680725]
[91.40219116 235.33680725]
[91.40219116 220.33680725]
[91.40219116 205.33680725]
[91.40219116 190.33680725]
[91.40219116 175.33680725]
[91.40219116 160.33680725]
[88.23661041 153.60444641]
[91.56147003 145.02557373]
[91.87352753 130.02882385]
[78.44010925 129.85385132]
[64.51358795 123.46174622]
[49.80562592 126.40722656]
[35.09766388 129.35270691]
[20.38970375 132.29818726]
[14.85578537 146.69886780]
[2.40126729 155.80317688]
[-12.99965763 156.70597839]
[-26.43261147 149.11920166]
[-33.61118698 135.46372986]
[-32.24472427 120.09700775]
[-22.76926041 107.92247772]
[-8.20838070 102.82499695]
[6.79159212 106.43115234]
[17.44422150 117.59023285]
[32.15218353 114.64475250]
[46.86014557 111.69926453]
[61.56810760 108.75378418]
[62.81066513 101.35742950]
[51.24216843 91.80914307]
[65.29578400 86.56472778]
[66.53834534 79.16837311]
[50.72015762 78.85927582]
[43.65744019 65.74564362]
[30.71938324 58.15573883]
[14.32580662 58.58314514]
[5.99076319 44.46014404]
[14.28863144 30.31527328]
[30.68327522 30.69955826]
[38.30929184 45.21768188]
[51.24734879 52.80759048]
[66.14012146 52.57380295]
[74.12825012 66.23031616]
[89.25212097 62.79082108]
[103.18540192 65.22592163]
[113.91915894 72.17867279]
[123.66680908 60.77764893]
[133.41445923 49.37662888]
[143.16210938 37.97560883]
[132.79627991 27.11556244]
[123.58235168 15.26253033]
[115.61485291 2.53814220]
[108.97556305 -10.92702866]
[103.73260498 -24.99480820]
[99.93978119 -39.52083588]
[97.63601685 -54.35605240]
[96.84494019 -69.34822083]
[97.57467651 -84.34350586]
[99.81774139 -99.18802643]
[103.55111694 -113.72944641]
[108.73648071 -127.81855774]
[115.32063293 -141.31077576]
[123.23600769 -154.06764221]
[132.40138245 -165.95826721]
[142.72270203 -176.86062622]
[154.09405518 -186.66284180]
[166.39874268 -195.26432800]
[179.51051331 -202.57681274]
[193.29481506 -208.52526855]
[207.61018372 -213.04866028]
[222.30973816 -216.10054016]
[237.24264526 -217.64962769]
[252.25563049 -217.68000793]
[267.19467163 -216.19136047]
[281.90646362 -213.19898987]
[296.24002075 -208.73356628]
[310.04827881 -202.84094238]
[323.18954468 -195.58157349]
[335.52893066 -187.02995300]
[346.93984985 -177.27383423]
[357.30520630 -166.41333008]
[366.51861572 -154.55989075]
[374.48556519 -141.83515930]
[381.12426758 -128.36968994]
[386.36660767 -114.30168152]
[390.15878296 -99.77548218]
[392.46191406 -84.94017029]
[393.25231934 -69.94795990]
[392.52191162 -54.95270920]
[390.27819824 -40.10829163]
[386.54418945 -25.56703568]
[381.35821533 -11.47815418]
[374.77346802 2.01377320]
[366.85751343 14.77029896]
[357.69161987 26.66052055]
[347.36981201 37.56242371]
[335.99804688 47.36413956]
[323.69296265 55.96508408]
[310.58087158 63.27699661]
[296.79632568 69.22484589]
[282.48074341 73.74759674]
[267.78106689 76.79884338]
[252.84808350 78.34726715]
[237.83509827 78.37698364]
[222.89611816 76.88768005]
[208.18446350 73.89465332]
[193.85108948 69.42861176]
[180.04309082 63.53537369]
[166.90216064 56.27542496]
[154.56314087 47.72325897]
[144.81549072 59.12428284]
[135.06782532 70.52529907]
[125.32018280 81.92632294]
[131.08874512 101.12229919]
[123.95105743 119.85236359]
[106.87028503 130.34086609]
[106.55822754 145.33763123]
[106.40219116 160.33680725]
[106.40219116 175.33680725]
[106.40219116 190.33680725]
[106.40219116 205.33680725]
[106.40219116 220.33680725]
[106.40219116 235.33680725]
[106.40219116 250.33680725]
[106.40219116 265.33682251]
[106.40219116 280.33682251]
[106.40219116 295.33682251]
[120.94207764 299.39813232]
[133.84645081 307.23263550]
[144.15774536 318.25897217]
[151.11076355 331.65890503]
[154.18955994 346.43804932]
[153.16566467 361.49972534]
[148.11506653 375.72625732]
[139.41255188 388.06192017]
[127.70388031 397.59133911]
[113.85794830 403.60736084]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[25 41]
[26 40]
[27 39]
[28 38]
[45 56]
[47 54]
[48 53]
[59 126]
[60 125]
[61 124]
[62 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
