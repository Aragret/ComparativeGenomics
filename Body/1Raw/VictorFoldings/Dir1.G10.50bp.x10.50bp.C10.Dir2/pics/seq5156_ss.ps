%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUCUCCUCGGGGGGGGGGACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAxxxxxxxxxxACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCCCCCCCCCCCUACUCCUC\
) } def
/len { sequence length } bind def

/coor [
[40.97834396 437.12753296]
[27.75814629 429.85507202]
[16.87134361 419.40805054]
[9.06021309 406.49880981]
[4.85733175 392.00750732]
[4.54925919 376.92214966]
[8.15700054 362.27133179]
[15.43457317 349.05395508]
[25.88578033 338.17117310]
[38.79804230 330.36502075]
[53.29097748 326.16775513]
[52.97892380 311.17098999]
[52.66686630 296.17422485]
[52.35480881 281.17749023]
[52.04275513 266.18072510]
[51.73069763 251.18397522]
[51.41864014 236.18722534]
[51.10658646 221.19046021]
[50.79452896 206.19371033]
[50.48247147 191.19696045]
[42.96327972 204.17623901]
[32.60565186 215.02610779]
[19.98921013 223.13938904]
[5.81997299 228.06205750]
[-9.10913658 229.51866150]
[-23.96267891 227.42765808]
[-37.90944290 221.90608215]
[-50.16895676 213.26292419]
[-60.05517197 201.98184204]
[-67.01484680 188.69413757]
[-70.65852356 174.14341736]
[-70.78229523 159.14392090]
[-67.37922668 144.53504944]
[-60.63977051 131.13432312]
[-50.94105911 119.69163513]
[-38.82584381 110.84733582]
[-24.97209740 105.09636688]
[-10.15508366 102.76054382]
[4.79603052 103.97058105]
[19.04457092 108.65876770]
[31.79318047 116.56275177]
[42.32844162 127.24021912]
[50.06079483 140.09364319]
[54.55752945 154.40376282]
[55.56705093 169.36900330]
[62.47404861 156.05384827]
[69.38105011 142.73869324]
[76.28804779 129.42353821]
[83.19504547 116.10839081]
[77.56781006 93.78039551]
[93.88917542 77.53793335]
[94.82480621 62.56713867]
[84.78628540 53.52912521]
[81.84934998 40.54442596]
[86.87201691 28.42637634]
[97.80369568 21.53470802]
[99.05057526 6.58662033]
[100.29744720 -8.36146641]
[97.88137817 -17.23921776]
[101.72892761 -23.60648155]
[103.28650665 -38.52539444]
[104.84408569 -53.44430542]
[106.40167236 -68.36322021]
[107.95925140 -83.28212738]
[93.66477203 -88.02364349]
[80.72400665 -95.72758484]
[69.74221802 -106.03361511]
[61.23304367 -118.45972443]
[55.59447479 -132.42469788]
[53.09023666 -147.27539062]
[53.83745575 -162.31718445]
[57.80118561 -176.84657288]
[64.79603577 -190.18395996]
[74.49484253 -201.70556641]
[86.44396973 -210.87248230]
[100.08454132 -217.25595093]
[114.77857208 -220.55743408]
[129.83877563 -220.62248230]
[144.56077576 -217.44807434]
[158.25598145 -211.18267822]
[170.28385925 -202.11933899]
[180.08184814 -190.68194580]
[187.19165039 -177.40548706]
[191.28074646 -162.91088867]
[192.15788269 -147.87609863]
[189.78204346 -133.00433350]
[184.26432800 -118.99116516]
[175.86282349 -106.49201965]
[164.97047424 -96.09149170]
[152.09674072 -88.27604675]
[137.84376526 -83.41121674]
[122.87816620 -81.72454834]
[121.32057953 -66.80563354]
[119.76300049 -51.88672256]
[118.20542145 -36.96781158]
[116.64784241 -22.04890060]
[115.24553680 -7.11459208]
[113.99865723 7.83349514]
[112.75178528 22.78158188]
[124.14714050 35.11056519]
[123.11067200 52.20471191]
[109.79560089 63.50276566]
[108.85997009 78.47355652]
[116.71518707 83.79848480]
[121.79241180 91.81603241]
[136.78511047 91.34799194]
[151.77780151 90.87994385]
[158.96768188 77.30786896]
[171.98884583 69.16263580]
[187.33868408 68.63527679]
[200.88815308 75.86765289]
[208.99253845 88.91428375]
[209.47177124 104.26569366]
[202.19696045 117.79243469]
[189.12498474 125.85588074]
[173.77215576 126.28700256]
[160.26828003 118.96982574]
[152.24584961 105.87264252]
[137.25315857 106.34068298]
[122.26045990 106.80872345]
[119.44959259 112.79062653]
[115.07080078 117.74140930]
[109.47708893 121.26197052]
[103.11937714 123.06851196]
[96.51020050 123.01538849]
[89.60320282 136.33053589]
[82.69620514 149.64569092]
[75.78919983 162.96084595]
[68.88220215 176.27601624]
[65.47922516 190.88490295]
[65.79128265 205.88165283]
[66.10334015 220.87840271]
[66.41539764 235.87516785]
[66.72745514 250.87191772]
[67.03950500 265.86868286]
[67.35156250 280.86541748]
[67.66362000 295.86218262]
[67.97567749 310.85891724]
[68.28773499 325.85568237]
[82.94272614 329.44644165]
[96.16853333 336.70870972]
[107.06340027 347.14730835]
[114.88449860 360.05050659]
[119.09857178 374.53857422]
[119.41828918 389.62368774]
[115.82186890 404.27728271]
[108.55450439 417.50027466]
[98.11170197 428.39111328]
[85.20546722 436.20724487]
[70.71578217 440.41571045]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[45 129]
[46 128]
[47 127]
[48 126]
[49 125]
[51 103]
[52 102]
[56 99]
[57 98]
[58 97]
[60 96]
[61 95]
[62 94]
[63 93]
[64 92]
[105 120]
[106 119]
[107 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
