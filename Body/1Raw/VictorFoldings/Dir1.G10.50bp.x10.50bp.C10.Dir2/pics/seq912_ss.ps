%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCAUAAACGGGGGGGGGGAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUxxxxxxxxxxGCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAACCCCCCCCCCACCCCACAAAC\
) } def
/len { sequence length } bind def

/coor [
[70.41336060 477.74987793]
[55.53002167 475.38708496]
[41.59299469 469.65505981]
[29.35389328 460.86294556]
[19.47274971 449.48492432]
[12.48244381 436.13455200]
[8.75995636 421.53182983]
[8.50603294 406.46423340]
[11.73437023 391.74435425]
[18.27086639 378.16604614]
[27.76301765 366.46151733]
[39.69892120 357.26199341]
[53.43489456 351.06362915]
[68.23017120 348.20065308]
[68.84599304 333.21331787]
[69.46182251 318.22595215]
[70.07764435 303.23861694]
[70.69346619 288.25125122]
[71.30929565 273.26391602]
[71.92511749 258.27655029]
[72.54094696 243.28919983]
[59.71950912 251.07449341]
[45.56753540 246.10240173]
[40.43300247 232.00856018]
[48.07030487 219.09841919]
[62.89501572 216.81193542]
[74.06700134 226.82043457]
[76.21558380 211.97511292]
[78.36415863 197.12977600]
[80.51274109 182.28445435]
[82.66131592 167.43913269]
[73.56847382 155.69793701]
[75.53596497 140.61206055]
[87.91286469 131.15426636]
[90.06144714 116.30893707]
[81.47333527 104.63886261]
[83.54879761 90.29875183]
[95.09323120 81.54248810]
[97.24181366 66.69715881]
[99.39038849 51.85183716]
[101.53897095 37.00651550]
[103.68754578 22.16119385]
[105.83612823 7.31587076]
[107.67945099 -7.57043695]
[109.21674347 -22.49145317]
[110.75403595 -37.41247177]
[112.29132843 -52.33348465]
[113.82862091 -67.25450134]
[115.36591339 -82.17552185]
[99.19635773 -91.30229950]
[88.62300110 -106.50382233]
[85.70777130 -124.73892212]
[90.98584747 -142.38259888]
[103.36802673 -155.94667053]
[120.36518860 -162.76937866]
[120.67316437 -177.76622009]
[120.98114014 -192.76306152]
[121.28911591 -207.75988770]
[121.59709930 -222.75672913]
[121.90507507 -237.75357056]
[112.64689636 -253.63804626]
[122.23753357 -268.30313110]
[122.23753357 -283.30313110]
[122.23753357 -298.30313110]
[122.23753357 -313.30313110]
[107.66041565 -317.19799805]
[94.58854675 -324.73382568]
[83.91320038 -335.39682007]
[76.36222839 -348.45993042]
[72.45047760 -363.03253174]
[72.44465637 -378.12103271]
[76.34515381 -392.69662476]
[83.88603210 -405.76559448]
[94.55313873 -416.43682861]
[107.61918640 -423.98275757]
[122.19329071 -427.88888550]
[137.28176880 -427.88888550]
[151.85588074 -423.98275757]
[164.92192078 -416.43682861]
[175.58903503 -405.76559448]
[183.12991333 -392.69662476]
[187.03041077 -378.12103271]
[187.02458191 -363.03253174]
[183.11283875 -348.45993042]
[175.56185913 -335.39682007]
[164.88652039 -324.73382568]
[151.81465149 -317.19799805]
[137.23753357 -313.30313110]
[137.23753357 -298.30313110]
[137.23753357 -283.30313110]
[137.23753357 -268.30313110]
[145.58518982 -259.49523926]
[145.67138672 -246.95874023]
[136.90191650 -237.44558716]
[136.59393311 -222.44874573]
[136.28594971 -207.45191956]
[135.97798157 -192.45507812]
[135.66999817 -177.45823669]
[135.36203003 -162.46139526]
[146.39709473 -158.53996277]
[155.89363098 -151.65377808]
[163.07403564 -142.35321045]
[167.34652710 -131.38690186]
[168.35394287 -119.64147949]
[166.00360107 -108.06985474]
[160.47567749 -97.61392975]
[152.20944214 -89.12794495]
[141.86837769 -83.30867767]
[130.28692627 -80.63822937]
[128.74963379 -65.71720886]
[127.21234131 -50.79619217]
[125.67504883 -35.87517929]
[124.13775635 -20.95416069]
[122.60046387 -6.03314447]
[124.90557098 -1.78629899]
[124.52397156 3.96194100]
[120.68144989 9.46444988]
[118.53286743 24.30977249]
[116.38429260 39.15509415]
[114.23571014 54.00041962]
[112.08713531 68.84574127]
[109.93855286 83.69106293]
[118.52666473 95.36113739]
[116.45120239 109.70124817]
[104.90676880 118.45751190]
[102.75818634 133.30284119]
[111.94570923 145.88168335]
[109.55526733 160.90634155]
[97.50663757 169.58772278]
[95.35806274 184.43304443]
[93.20948029 199.27836609]
[91.06090546 214.12368774]
[88.91232300 228.96900940]
[87.52829742 243.90501404]
[86.91247559 258.89236450]
[86.29664612 273.87973022]
[85.68082428 288.86706543]
[85.06499481 303.85443115]
[84.44917297 318.84179688]
[83.83334351 333.82913208]
[83.21752167 348.81649780]
[97.72804260 352.88363647]
[110.90918732 360.18801880]
[122.05012512 370.33572388]
[130.55001831 382.77954102]
[135.95051575 396.84835815]
[137.96032715 411.78344727]
[136.47111511 426.77941895]
[131.56315613 441.02752686]
[123.50113678 453.75939941]
[112.71983337 464.28842163]
[99.80068207 472.04678345]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[27 133]
[28 132]
[29 131]
[30 130]
[31 129]
[34 126]
[35 125]
[38 122]
[39 121]
[40 120]
[41 119]
[42 118]
[43 117]
[44 114]
[45 113]
[46 112]
[47 111]
[48 110]
[49 109]
[55 99]
[56 98]
[57 97]
[58 96]
[59 95]
[60 94]
[62 91]
[63 90]
[64 89]
[65 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
