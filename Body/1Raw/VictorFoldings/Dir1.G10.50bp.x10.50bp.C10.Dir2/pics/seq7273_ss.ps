%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUAAUUUUCGGGGGGGGGGAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAxxxxxxxxxxUACUUCCCCUAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCUCACCCCCCCCCCUAAUCAUUUUC\
) } def
/len { sequence length } bind def

/coor [
[150.42617798 577.23718262]
[136.40423584 571.68420410]
[124.20427704 562.81787109]
[114.59320831 551.19555664]
[108.17518616 537.54785156]
[105.35364532 522.73266602]
[106.30596161 507.68130493]
[110.97226715 493.33987427]
[119.05923462 480.60992432]
[130.05850220 470.29165649]
[143.27867126 463.03366089]
[157.88868713 459.29223633]
[157.88868713 444.29223633]
[157.88868713 429.29223633]
[157.88868713 414.29223633]
[157.88868713 399.29223633]
[157.88868713 384.29223633]
[157.88868713 369.29223633]
[157.88868713 354.29223633]
[157.88868713 339.29223633]
[157.88868713 324.29223633]
[155.89262390 309.42562866]
[151.93601990 294.95687866]
[147.97940063 280.48809814]
[144.02279663 266.01931763]
[127.62696838 257.97854614]
[122.16189575 240.22146606]
[131.51353455 223.80090332]
[126.96624756 209.50677490]
[122.41896057 195.21264648]
[111.18745422 185.42987061]
[114.37709045 169.93353271]
[109.82980347 155.63940430]
[105.28251648 141.34527588]
[100.73522186 127.05113983]
[75.46023560 121.30768585]
[62.59581757 93.65892029]
[48.08719254 89.85105896]
[33.57856369 86.04320526]
[19.06994057 82.23534393]
[4.56131458 78.42748260]
[-9.94731045 74.61962891]
[-25.61433792 79.46485901]
[-37.45841599 68.12246704]
[-33.29537201 52.26053238]
[-17.40779114 48.19644928]
[-6.13945198 60.11100006]
[8.36917305 63.91886139]
[22.87779808 67.72671509]
[37.38642502 71.53457642]
[51.89505005 75.34243774]
[66.40367126 79.15029144]
[72.48033905 74.75437164]
[60.36332703 65.91254425]
[65.02822113 51.65636063]
[80.02818298 51.68772125]
[84.63367462 65.96253204]
[90.71034241 61.56660843]
[91.63375092 46.59505844]
[92.55716705 31.62351036]
[93.17299652 16.63615608]
[93.48097229 1.63931823]
[93.78894806 -13.35752010]
[94.09692383 -28.35435677]
[83.43325043 -39.70882034]
[83.95922089 -54.91336060]
[94.84968567 -65.00956726]
[95.15766144 -80.00640869]
[95.46563721 -95.00324249]
[95.77362061 -110.00008392]
[81.97351837 -116.44036102]
[71.99090576 -127.94111633]
[67.55532074 -142.50976562]
[69.43525696 -157.62219238]
[77.30500793 -170.66011047]
[89.80108643 -179.36457825]
[104.75847626 -182.22752380]
[119.58570862 -178.75291443]
[131.71389771 -169.54275513]
[139.04173279 -156.19274902]
[140.29965210 -141.01586914]
[135.26968384 -126.64160919]
[124.82332611 -115.56039429]
[110.77045441 -109.69210815]
[110.46247864 -94.69526672]
[110.15450287 -79.69842529]
[109.84651947 -64.70159149]
[120.31330109 -54.16678619]
[120.21460724 -38.95347214]
[109.09376526 -28.04638100]
[108.78578949 -13.04954243]
[108.47780609 1.94729590]
[108.16983032 16.94413376]
[110.81558228 20.98755074]
[110.90686035 26.74771881]
[107.52871704 32.54692459]
[106.60530090 47.51847458]
[105.68189240 62.49002457]
[121.09300232 71.12019348]
[130.10348511 85.10440826]
[131.40490723 100.65950775]
[125.63659668 114.05476379]
[115.02935028 122.50385284]
[119.57664490 136.79797363]
[124.12393188 151.09211731]
[128.67121887 165.38624573]
[140.22798157 176.19142151]
[136.71308899 190.66535950]
[141.26037598 204.95948792]
[145.80766296 219.25361633]
[157.29673767 222.58375549]
[165.64569092 230.98139954]
[168.84330750 242.25823975]
[166.19975281 253.55419922]
[158.49156189 262.06271362]
[162.44816589 276.53149414]
[166.40478516 291.00024414]
[170.36138916 305.46902466]
[175.27671814 291.29724121]
[185.44947815 280.27386475]
[199.18180847 274.23870850]
[214.18176270 274.19906616]
[227.94580078 280.16152954]
[238.17668152 291.13098145]
[243.16685486 305.27661133]
[242.08343506 320.23742676]
[235.10726929 333.51647949]
[223.40267944 342.89743042]
[208.92318726 346.81460571]
[194.08544922 344.61422729]
[181.36592102 336.66351318]
[172.88868713 324.29223633]
[172.88868713 339.29223633]
[172.88868713 354.29223633]
[172.88868713 369.29223633]
[172.88868713 384.29223633]
[172.88868713 399.29223633]
[172.88868713 414.29223633]
[172.88868713 429.29223633]
[172.88868713 444.29223633]
[172.88868713 459.29223633]
[187.49868774 463.03366089]
[200.71885681 470.29165649]
[211.71812439 480.60992432]
[219.80509949 493.33987427]
[224.47140503 507.68130493]
[225.42370605 522.73266602]
[222.60217285 537.54785156]
[216.18415833 551.19555664]
[206.57307434 562.81787109]
[194.37312317 571.68420410]
[180.35118103 577.23718262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 118]
[23 117]
[24 116]
[25 115]
[28 110]
[29 109]
[30 108]
[32 106]
[33 105]
[34 104]
[35 103]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[42 47]
[58 98]
[59 97]
[60 96]
[61 93]
[62 92]
[63 91]
[64 90]
[67 87]
[68 86]
[69 85]
[70 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
