%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUAGGAAUGGGGGGGGGGAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGAxxxxxxxxxxCCUUACACAAAAUGACAUCAAAAAAAUCGUAGCCUUCUCCACUUCAAGUCCCCCCCCCCCAACUAGGACU\
) } def
/len { sequence length } bind def

/coor [
[76.24224854 455.67868042]
[63.02204895 448.40621948]
[52.13524628 437.95919800]
[44.32411575 425.04995728]
[40.12123489 410.55865479]
[39.81315994 395.47329712]
[43.42090225 380.82247925]
[50.69847488 367.60510254]
[61.14968491 356.72232056]
[74.06194305 348.91616821]
[88.55487823 344.71890259]
[88.24282837 329.72213745]
[87.93077087 314.72540283]
[87.61871338 299.72863770]
[87.30665588 284.73187256]
[86.99459839 269.73513794]
[86.68254089 254.73837280]
[86.37049103 239.74162292]
[86.05843353 224.74487305]
[85.74637604 209.74810791]
[85.43431854 194.75135803]
[73.10903168 203.30046082]
[58.68061829 199.19912720]
[52.69508743 185.44509888]
[59.52737427 172.09144592]
[74.18363190 168.89863586]
[85.95102692 178.19973755]
[87.19789886 163.25164795]
[88.44477844 148.30355835]
[68.97572327 138.78466797]
[55.41346741 121.88146210]
[50.34018326 100.81216431]
[35.47713852 98.78983307]
[20.61408997 96.76749420]
[5.75104284 94.74516296]
[-9.11200428 92.72282410]
[-23.97504997 90.70049286]
[-38.83809662 88.67816162]
[-52.42709351 97.20568848]
[-67.51850891 91.76244354]
[-72.53549194 76.52402496]
[-63.62945175 63.18004227]
[-47.63233566 61.96685028]
[-36.81576157 73.81510925]
[-21.95271683 75.83744812]
[-7.08966923 77.85977936]
[7.77337742 79.88211060]
[22.63642502 81.90444946]
[37.49946976 83.92678070]
[52.36251831 85.94911957]
[57.61589432 74.10898590]
[65.75220490 64.02993774]
[76.21801758 56.39754486]
[88.30146027 51.73094940]
[101.18062592 50.34757614]
[113.97949219 52.34151840]
[120.32662201 38.75056839]
[126.67375183 25.15961647]
[133.02087402 11.56866550]
[139.36801147 -2.02228498]
[126.60742188 -9.94086456]
[114.87298584 -19.31313133]
[104.32942963 -30.00751114]
[95.12477112 -41.87387085]
[87.38822174 -54.74562836]
[81.22839355 -68.44208527]
[76.73175812 -82.77095795]
[73.96144867 -97.53109741]
[72.95635223 -112.51529694]
[73.73058319 -127.51319885]
[76.27326202 -142.31423950]
[80.54870605 -156.71066284]
[86.49688721 -170.50035095]
[94.03429413 -183.48973083]
[103.05513000 -195.49642944]
[113.43275452 -206.35191345]
[125.02146912 -215.90376282]
[137.65859985 -224.01791382]
[151.16673279 -230.58044434]
[165.35623169 -235.49922180]
[180.02790833 -238.70520020]
[194.97578430 -240.15336609]
[209.99003601 -239.82339478]
[224.85984802 -237.71990967]
[239.37651062 -233.87246704]
[253.33622742 -228.33505249]
[266.54299927 -221.18540955]
[278.81143188 -212.52391052]
[289.96932983 -202.47213745]
[299.86001587 -191.17123413]
[308.34466553 -178.77980042]
[315.30413818 -165.47183228]
[320.64074707 -151.43414307]
[324.27957153 -136.86378479]
[326.16955566 -121.96531677]
[326.28411865 -106.94788361]
[324.62170410 -92.02230835]
[321.20559692 -77.39813232]
[316.08380127 -63.28063965]
[309.32818604 -49.86803055]
[301.03363037 -37.34859085]
[291.31652832 -25.89807320]
[280.31329346 -15.67722988]
[268.17843628 -6.82954216]
[255.08230591 0.52078158]
[241.20870972 6.27055407]
[226.75244141 10.33905697]
[211.91644287 12.66917610]
[196.90898132 13.22819901]
[181.94075012 12.00827885]
[167.22186279 9.02654171]
[152.95895386 4.32484436]
[146.61183167 17.91579628]
[140.26469421 31.50674629]
[133.91757202 45.09769821]
[127.57044220 58.68864822]
[136.88317871 66.73759460]
[143.93049622 76.82956696]
[148.27951050 88.34471893]
[149.66311646 100.57575989]
[147.99632263 112.77143097]
[143.38151550 124.18265533]
[136.10212708 134.10855103]
[126.60529327 141.93942261]
[115.47431183 147.19430542]
[103.39286041 149.55043030]
[102.14598846 164.49851990]
[100.89911652 179.44660950]
[100.43107605 194.43930054]
[100.74312592 209.43605042]
[101.05518341 224.43281555]
[101.36724091 239.42956543]
[101.67929840 254.42631531]
[101.99135590 269.42306519]
[102.30341339 284.41983032]
[102.61546326 299.41656494]
[102.92752075 314.41333008]
[103.23957825 329.41009521]
[103.55163574 344.40682983]
[118.20662689 347.99761963]
[131.43243408 355.25985718]
[142.32730103 365.69845581]
[150.14840698 378.60168457]
[154.36247253 393.08972168]
[154.68218994 408.17483521]
[151.08576965 422.82843018]
[143.81840515 436.05145264]
[133.37559509 446.94229126]
[120.46937561 454.75839233]
[105.97968292 458.96685791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[27 128]
[28 127]
[29 126]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[56 116]
[57 115]
[58 114]
[59 113]
[60 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
