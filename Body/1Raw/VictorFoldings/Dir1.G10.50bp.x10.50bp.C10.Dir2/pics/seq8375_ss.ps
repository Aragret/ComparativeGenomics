%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAACAAAUGAUGGGGGGGGGGAACCAUACACAACACUAAAGGACGAACCUGAUCUCUUAUACUAGUAUCCUxxxxxxxxxxGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUGGUAUAUAGUUUAAACCCCCCCCCCCAAAACGAAUGAU\
) } def
/len { sequence length } bind def

/coor [
[94.35820007 496.36749268]
[80.08643341 491.55807495]
[67.18244934 483.79269409]
[56.24979401 473.43453979]
[47.79980850 460.96810913]
[42.22771454 446.97647095]
[39.79412460 432.11404419]
[40.61286545 417.07598877]
[44.64564133 402.56561279]
[51.70383453 389.26162720]
[61.45732117 377.78628540]
[73.44990540 368.67630005]
[87.12068176 362.35775757]
[101.83024597 359.12619019]
[101.83024597 344.12619019]
[101.83024597 329.12619019]
[101.83024597 314.12619019]
[101.83024597 299.12619019]
[101.83024597 284.12619019]
[101.83024597 269.12619019]
[101.83024597 254.12619019]
[101.83024597 239.12619019]
[101.83024597 224.12619019]
[101.23009491 209.13819885]
[100.03076935 194.18621826]
[98.83144379 179.23423767]
[90.10130310 167.16635132]
[96.71044159 152.79173279]
[95.51110840 137.83975220]
[94.31178284 122.88777161]
[80.13356018 112.70946503]
[76.83568573 95.57050323]
[86.22431946 80.85746765]
[81.78933716 66.52809143]
[69.20233154 61.64089584]
[61.85065460 50.54837418]
[62.24219131 37.44159698]
[70.00861359 27.11931419]
[65.86122894 12.70407104]
[61.71384811 -1.71117175]
[57.56646347 -16.12641525]
[47.12023163 -26.89099503]
[32.83594894 -31.46912193]
[18.55166435 -36.04724503]
[3.68596959 -30.01477623]
[-10.22784615 -38.00134659]
[-12.51629448 -53.88034439]
[-1.42387402 -65.47076416]
[14.54025936 -63.88142014]
[23.12978935 -50.33153152]
[37.41407394 -45.75340652]
[51.69835663 -41.17527771]
[57.71261978 -45.65619659]
[69.74114990 -54.61803436]
[75.75540924 -59.09895325]
[75.45528412 -74.09594727]
[72.13959503 -82.66883087]
[75.30220032 -89.39533234]
[75.30220032 -104.39533234]
[75.30220032 -119.39533234]
[62.10769272 -127.13175201]
[54.60665131 -140.34655762]
[54.72648621 -155.44132996]
[62.33488083 -168.36294556]
[75.30220032 -175.69194031]
[75.30220032 -190.69194031]
[75.30220032 -205.69194031]
[75.30220032 -220.69194031]
[60.80468369 -224.93441772]
[48.09040451 -233.09062195]
[38.19005585 -244.49938965]
[31.90621567 -258.23583984]
[29.74828339 -273.18643188]
[31.89119530 -288.13916016]
[38.16123199 -301.88192749]
[48.05011749 -313.30062866]
[60.75619507 -321.46960449]
[75.24944305 -325.72665405]
[90.35496521 -325.72665405]
[104.84821320 -321.46960449]
[117.55429077 -313.30062866]
[127.44317627 -301.88192749]
[133.71321106 -288.13916016]
[135.85612488 -273.18643188]
[133.69819641 -258.23583984]
[127.41435242 -244.49938965]
[117.51399994 -233.09062195]
[104.79972076 -224.93441772]
[90.30220032 -220.69194031]
[90.30220032 -205.69194031]
[90.30220032 -190.69194031]
[90.30220032 -175.69194031]
[103.26952362 -168.36294556]
[110.87792206 -155.44132996]
[110.99775696 -140.34655762]
[103.49671173 -127.13175201]
[90.30220032 -119.39533234]
[90.30220032 -104.39533234]
[90.30220032 -89.39533234]
[90.45227814 -74.39608002]
[90.75241089 -59.39908600]
[71.98170471 -20.27379608]
[76.12908936 -5.85855389]
[80.27647400 8.55668926]
[84.42385101 22.97193146]
[99.45950317 30.44985008]
[104.56089783 46.80218124]
[96.11871338 62.09310913]
[100.55369568 76.42248535]
[113.32246399 80.53932190]
[121.78004456 90.95369720]
[136.74327087 89.90402222]
[151.70649719 88.85434723]
[163.27203369 77.73598480]
[179.15611267 79.98884583]
[187.17384338 93.88473511]
[181.17469788 108.76390839]
[165.76071167 113.21234131]
[152.75616455 103.81757355]
[137.79293823 104.86724854]
[122.82971954 105.91692352]
[117.87968445 115.37930298]
[109.26376343 121.68844604]
[110.46308899 136.64042664]
[111.66241455 151.59239197]
[120.47834015 164.72975159]
[113.78342438 178.03491211]
[114.98274994 192.98689270]
[116.18207550 207.93887329]
[118.85728455 211.52000427]
[120.09317017 215.38070679]
[119.98273468 219.02311707]
[118.77448273 222.03341675]
[116.83024597 224.12619019]
[116.83024597 239.12619019]
[116.83024597 254.12619019]
[116.83024597 269.12619019]
[116.83024597 284.12619019]
[116.83024597 299.12619019]
[116.83024597 314.12619019]
[116.83024597 329.12619019]
[116.83024597 344.12619019]
[116.83024597 359.12619019]
[131.53979492 362.35775757]
[145.21057129 368.67630005]
[157.20317078 377.78628540]
[166.95664978 389.26162720]
[174.01484680 402.56561279]
[178.04762268 417.07598877]
[178.86636353 432.11404419]
[176.43276978 446.97647095]
[170.86067200 460.96810913]
[162.41069031 473.43453979]
[151.47802734 483.79269409]
[138.57405090 491.55807495]
[124.30228424 496.36749268]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 129]
[25 128]
[26 127]
[28 125]
[29 124]
[30 123]
[33 109]
[34 108]
[38 105]
[39 104]
[40 103]
[41 102]
[42 52]
[43 51]
[44 50]
[55 101]
[56 100]
[58 99]
[59 98]
[60 97]
[65 92]
[66 91]
[67 90]
[68 89]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
