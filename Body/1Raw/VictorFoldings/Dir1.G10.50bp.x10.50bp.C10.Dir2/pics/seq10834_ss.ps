%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACCCCACUAGGGGGGGGGGCUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCAxxxxxxxxxxCACCACCCCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCCCCCCCCCCCUAACCCCACUA\
) } def
/len { sequence length } bind def

/coor [
[59.22591400 424.92019653]
[45.06530762 419.76519775]
[32.47556305 411.48300171]
[22.13562584 400.52023315]
[14.60311508 387.46810913]
[10.28425026 373.03051758]
[9.41194153 357.98605347]
[12.03323174 343.14605713]
[18.00675774 329.31082153]
[27.01037598 317.22647095]
[38.55853271 307.54467773]
[52.02845001 300.78759766]
[66.69371033 297.31964111]
[66.69371033 282.31964111]
[66.69371033 267.31964111]
[66.69371033 252.31962585]
[66.69371033 237.31962585]
[66.69371033 222.31962585]
[66.69371033 207.31962585]
[66.69371033 192.31962585]
[66.69371033 177.31962585]
[66.69371033 162.31962585]
[66.69371033 147.31962585]
[54.46973038 138.62628174]
[40.30075455 143.54971313]
[26.13177872 148.47314453]
[11.96280384 153.39656067]
[5.30111551 167.72825623]
[-9.57191086 173.07322693]
[-23.83237267 166.26039124]
[-29.01979065 151.33168030]
[-22.05656242 137.14404297]
[-7.07384777 132.11474609]
[7.03937531 139.22758484]
[21.20835114 134.30416870]
[35.37732697 129.38073730]
[49.54629898 124.45730591]
[47.87762451 109.55041504]
[32.97072983 107.88173676]
[18.16955566 114.94271088]
[4.80907202 105.43326569]
[6.63339710 89.13591003]
[21.76582336 82.81595612]
[34.63940430 92.97483826]
[49.54629898 94.64351654]
[55.77498245 89.27474976]
[62.45003510 85.43255615]
[49.72037125 77.49809265]
[36.99070740 69.56362915]
[21.65408325 73.37985992]
[8.15422916 65.16222382]
[4.50036478 49.78611374]
[12.86026478 36.37389374]
[28.27414894 32.88280106]
[41.59723282 41.38403702]
[44.92516708 56.83396912]
[57.65483093 64.76842499]
[70.38449097 72.70288849]
[77.21116638 66.79036713]
[85.18360901 62.54756165]
[93.90099335 60.18778229]
[102.92501831 59.82967758]
[111.80198669 61.49125290]
[120.08557129 65.08896637]
[129.85615540 53.70759201]
[139.62673950 42.32622147]
[149.39732361 30.94484901]
[139.14874268 19.97079849]
[130.16963196 7.93590927]
[122.56896973 -5.01372957]
[116.43903351 -18.72092056]
[111.85423279 -33.01926804]
[108.87022400 -47.73521042]
[107.52323151 -62.69010162]
[107.82960510 -77.70240784]
[109.78562927 -92.58988953]
[113.36754608 -107.17183685]
[118.53189850 -121.27121735]
[125.21597290 -134.71690369]
[133.33863831 -147.34565735]
[142.80130005 -159.00418091]
[153.48908997 -169.55096436]
[165.27224731 -178.85795593]
[178.00776672 -186.81219482]
[191.54103088 -193.31712341]
[205.70774841 -198.29376221]
[220.33598328 -201.68171692]
[235.24812317 -203.43984985]
[250.26316833 -203.54682922]
[265.19885254 -202.00135803]
[279.87387085 -198.82217407]
[294.11007690 -194.04789734]
[307.73464966 -187.73646545]
[320.58221436 -179.96449280]
[332.49679565 -170.82633972]
[343.33377075 -160.43292236]
[352.96157837 -148.91041565]
[361.26336670 -136.39868164]
[368.13836670 -123.04960632]
[373.50308228 -109.02523041]
[377.29241943 -94.49581146]
[379.46035767 -79.63771057]
[379.98062134 -64.63129425]
[378.84683228 -49.65872574]
[376.07281494 -34.90176010]
[371.69223022 -20.53953552]
[365.75820923 -6.74639225]
[358.34286499 6.31023169]
[349.53613281 18.47184181]
[339.44494629 29.59080696]
[328.19183350 39.53215027]
[315.91336060 48.17520142]
[302.75857544 55.41503143]
[288.88720703 61.16376114]
[274.46759033 65.35160065]
[259.67477417 67.92772675]
[244.68836975 68.86084747]
[229.69027710 68.13965607]
[214.86254883 65.77289581]
[200.38517761 61.78929520]
[186.43391418 56.23721695]
[173.17811584 49.18405914]
[160.77870178 40.71543503]
[151.00811768 52.09680939]
[141.23753357 63.47817993]
[131.46693420 74.85955048]
[140.83137512 90.07588959]
[142.91497803 108.57619476]
[136.69258118 126.91723633]
[122.74465179 141.41593933]
[103.25761414 148.88539124]
[81.69371033 147.31962585]
[81.69371033 162.31962585]
[81.69371033 177.31962585]
[81.69371033 192.31962585]
[81.69371033 207.31962585]
[81.69371033 222.31962585]
[81.69371033 237.31962585]
[81.69371033 252.31962585]
[81.69371033 267.31964111]
[81.69371033 282.31964111]
[81.69371033 297.31964111]
[96.35897064 300.78759766]
[109.82888794 307.54467773]
[121.37704468 317.22647095]
[130.38066101 329.31082153]
[136.35418701 343.14605713]
[138.97547913 357.98605347]
[138.10316467 373.03051758]
[133.78430176 387.46810913]
[126.25179291 400.52023315]
[115.91185760 411.48300171]
[103.32211304 419.76519775]
[89.16150665 424.92019653]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 37]
[25 36]
[26 35]
[27 34]
[38 45]
[39 44]
[47 58]
[48 57]
[49 56]
[64 126]
[65 125]
[66 124]
[67 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
