%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAAAACUAAGGGGGGGGGGCUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCxxxxxxxxxxAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUGGUAUAUAGUUUACCCCCCCCCCAACAAAACGAA\
) } def
/len { sequence length } bind def

/coor [
[66.38380432 381.70883179]
[52.36186218 376.15582275]
[40.16190338 367.28948975]
[30.55083275 355.66717529]
[24.13280678 342.01947021]
[21.31126976 327.20428467]
[22.26358604 312.15289307]
[26.92989159 297.81149292]
[35.01685715 285.08151245]
[46.01613235 274.76324463]
[59.23628998 267.50527954]
[73.84630585 263.76382446]
[73.84630585 248.76383972]
[73.84630585 233.76383972]
[73.84630585 218.76383972]
[73.84630585 203.76383972]
[73.84630585 188.76383972]
[73.84630585 173.76383972]
[73.84630585 158.76383972]
[73.84630585 143.76383972]
[73.84630585 128.76383972]
[86.81638336 93.22292328]
[79.18341064 80.31022644]
[71.55044556 67.39752960]
[63.91747284 54.48483276]
[56.28450394 41.57213593]
[42.60145569 33.62954330]
[42.78562546 18.73607635]
[35.15265274 5.82337856]
[19.43452454 9.28790760]
[3.31156683 6.92303467]
[-11.09916782 -1.10399222]
[-21.85495758 -13.87331390]
[-27.44894028 -29.81603050]
[-27.02007294 -46.90636063]
[-20.48238564 -62.91893387]
[-33.62401962 -70.15063477]
[-46.76564789 -77.38233948]
[-59.90727997 -84.61404419]
[-73.04891205 -91.84574127]
[-86.19054413 -99.07744598]
[-99.33217621 -106.30915070]
[-110.72528839 -96.31050873]
[-124.85217285 -90.81442261]
[-140.00694275 -90.48457336]
[-154.35957336 -95.36079407]
[-166.17694092 -104.85425568]
[-174.03201294 -117.81857300]
[-176.97627258 -132.68824768]
[-174.65417480 -147.66767883]
[-167.34613037 -160.94805908]
[-155.93461609 -170.92568970]
[-141.79762268 -176.39572144]
[-126.64227295 -176.69764709]
[-112.29864502 -171.79498291]
[-100.49879456 -162.27975464]
[-92.66762543 -149.30099487]
[-89.75077057 -134.42591858]
[-92.10047150 -119.45078278]
[-78.95883942 -112.21907806]
[-65.81720734 -104.98737335]
[-52.67557907 -97.75566864]
[-39.53394699 -90.52397156]
[-26.39231491 -83.29226685]
[-13.25068378 -76.06056213]
[-0.33798581 -83.69353485]
[-0.33798581 -98.69353485]
[-0.33798581 -113.69353485]
[-14.59065628 -118.85466003]
[-26.21658516 -128.58160400]
[-33.81188583 -141.69981384]
[-36.45938873 -156.62516785]
[-33.83939743 -171.55538940]
[-26.26828384 -184.68757629]
[-14.66029930 -194.43592834]
[-0.41716462 -199.62330627]
[14.74119282 -199.62330627]
[28.98432732 -194.43592834]
[40.59231186 -184.68757629]
[48.16342545 -171.55538940]
[50.78342056 -156.62516785]
[48.13591385 -141.69981384]
[40.54061508 -128.58160400]
[28.91468430 -118.85466003]
[14.66201401 -113.69353485]
[14.66201401 -98.69353485]
[14.66201401 -83.69353485]
[25.71393967 -83.14346313]
[36.26915741 -80.10327911]
[45.77862167 -74.76976013]
[53.75656891 -67.45793152]
[59.80531311 -58.58264923]
[63.63498306 -48.63517761]
[65.07727051 -38.15604401]
[64.09252930 -27.70569611]
[60.76991272 -17.83452415]
[55.32072830 -9.05387783]
[48.06535339 -1.80959165]
[55.69832230 11.10310650]
[68.83541107 18.12209511]
[69.19720459 33.93916321]
[76.83016968 46.85186386]
[84.46314240 59.76456070]
[92.09610748 72.67726135]
[99.72908020 85.58995819]
[112.40059662 93.61695099]
[127.33660889 95.00097656]
[142.27262878 96.38500214]
[156.31239319 83.73696899]
[174.82752991 85.27667999]
[186.18975830 99.57273102]
[201.16999817 100.34239197]
[216.15023804 101.11204529]
[228.97680664 91.47572327]
[244.47129822 95.63511658]
[250.74765015 110.39949799]
[242.99119568 124.44289398]
[227.15202332 126.99241638]
[215.38058472 116.09229279]
[200.40034485 115.32263184]
[185.42010498 114.55297089]
[178.75759888 123.90295410]
[168.28871155 128.90188599]
[156.58888245 128.19079590]
[146.59953308 121.83165741]
[140.88859558 111.32101440]
[125.95258331 109.93698883]
[111.01657104 108.55296326]
[105.47400665 113.60568237]
[108.68302917 128.25840759]
[94.38887024 123.71112061]
[88.84630585 128.76383972]
[88.84630585 143.76383972]
[88.84630585 158.76383972]
[88.84630585 173.76383972]
[88.84630585 188.76383972]
[88.84630585 203.76383972]
[88.84630585 218.76383972]
[88.84630585 233.76383972]
[88.84630585 248.76383972]
[88.84630585 263.76382446]
[103.45631409 267.50527954]
[116.67647552 274.76324463]
[127.67575073 285.08151245]
[135.76271057 297.81149292]
[140.42901611 312.15289307]
[141.38133240 327.20428467]
[138.55979919 342.01947021]
[132.14176941 355.66717529]
[122.53070068 367.28948975]
[110.33074951 376.15582275]
[96.30879974 381.70883179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 105]
[23 104]
[24 103]
[25 102]
[26 101]
[28 99]
[29 98]
[36 65]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[66 87]
[67 86]
[68 85]
[106 128]
[107 127]
[108 126]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
