%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGAAAAUGUUGGUGGGGGGGGGGUAUACCCUUCCCGUACUAAUUAAUCCCCUGGCCCAACCCGUCAUCUACUCxxxxxxxxxxACAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCCCCCCCCCCCAAAAAUUUUGGU\
) } def
/len { sequence length } bind def

/coor [
[6.57731390 557.66326904]
[-7.92182589 553.66143799]
[-21.47331047 547.13482666]
[-33.64151764 538.29315186]
[-44.03528595 527.42077637]
[-52.32049942 514.86706543]
[-58.23082733 501.03567505]
[-61.57627106 486.37115479]
[-62.24929428 471.34497070]
[-60.22825623 456.44009399]
[-55.57812881 442.13568115]
[-48.44839478 428.89157104]
[-39.06824112 417.13348389]
[-27.73920631 407.23941040]
[-14.82546902 399.52740479]
[-0.74215269 394.24536133]
[14.05802250 391.56307983]
[14.05802250 376.56307983]
[14.05802250 361.56307983]
[14.05802250 346.56307983]
[14.05802250 331.56307983]
[14.05802250 316.56307983]
[14.05802250 301.56307983]
[14.05802250 286.56307983]
[14.05802250 271.56307983]
[14.05802250 256.56307983]
[6.52548790 269.53460693]
[-3.66141176 280.54492188]
[-16.00953865 289.06103516]
[-29.92112732 294.67062378]
[-44.72273254 297.10220337]
[-59.69781876 296.23800659]
[-74.12145233 292.11990356]
[-87.29540253 284.94723511]
[-98.58192444 275.06726074]
[-107.43464661 262.95819092]
[-113.42501831 249.20626831]
[-116.26304626 234.47718811]
[-115.81134796 219.48399353]
[-112.09179688 204.95248413]
[-105.28443909 191.58610535]
[-95.71881866 180.03193665]
[-83.85800171 170.84928894]
[-70.27616119 164.48268127]
[-55.63077927 161.24034119]
[-40.63083267 161.27920532]
[-26.00244904 164.59739685]
[-12.45378017 171.03428650]
[-0.64070714 180.27827454]
[8.86491013 191.88186646]
[15.60291195 205.28332520]
[19.24711800 219.83392334]
[19.62144089 234.82542419]
[26.82747078 221.66969299]
[34.03350067 208.51397705]
[41.23952866 195.35824585]
[35.83058929 179.45681763]
[43.73071289 164.25354004]
[60.49903870 159.35035706]
[67.45018768 146.05819702]
[74.40133667 132.76603699]
[81.35248566 119.47387695]
[70.19286346 107.85942078]
[66.77340698 90.03206635]
[74.28779602 71.27308655]
[92.37217712 58.27457428]
[91.21691132 43.31912613]
[90.06163788 28.36368179]
[88.90637207 13.40823650]
[87.75109863 -1.54720914]
[73.04197693 -5.08228254]
[60.14621735 -12.99143600]
[50.32723236 -24.49981117]
[44.54697800 -38.47993469]
[43.37174988 -53.56217575]
[46.91667938 -68.26893616]
[54.83446884 -81.15938568]
[66.34941864 -90.97065735]
[80.33341217 -96.74153900]
[95.41644287 -97.90666962]
[110.12081909 -94.35188293]
[123.00595856 -86.42545319]
[132.80950928 -74.90393066]
[138.57102966 -60.91607285]
[139.72604370 -45.83227158]
[136.16140747 -31.13027763]
[128.22634888 -18.25045013]
[116.69826508 -8.45461750]
[102.70655060 -2.70247841]
[103.86181641 12.25296688]
[105.01708221 27.20841217]
[106.17235565 42.16385651]
[107.32762146 57.11930466]
[121.43396759 62.21940994]
[131.88613892 51.46060181]
[142.33831787 40.70178986]
[138.07199097 25.94733810]
[141.77003479 11.04029179]
[152.43771362 -0.00942645]
[167.20545959 -4.22949696]
[182.10084534 -0.48474294]
[193.11706543 10.21751595]
[197.29083252 24.99842644]
[193.49940491 39.88199615]
[182.76266479 50.86462021]
[167.96875000 54.99203110]
[153.09713745 51.15396881]
[142.64495850 61.91278076]
[132.19277954 72.67158508]
[139.39880371 85.82731628]
[154.09269714 82.81240082]
[168.78657532 79.79749298]
[183.48046875 76.78258514]
[198.17434692 73.76767731]
[208.17167664 61.22044373]
[224.21414185 61.35768890]
[233.99534607 74.07411957]
[230.01197815 89.61479187]
[215.31973267 96.05821991]
[201.18927002 88.46156311]
[186.49537659 91.47647095]
[171.80148315 94.49137878]
[157.10760498 97.50629425]
[142.41371155 100.52120209]
[121.79306030 126.98942566]
[94.64464569 126.42502594]
[87.69349670 139.71717834]
[80.74234772 153.00933838]
[73.79119873 166.30149841]
[79.27674103 178.63423157]
[76.68037415 191.68119812]
[67.17384338 200.70579529]
[54.39525604 202.56427002]
[47.18922806 215.72000122]
[39.98319626 228.87573242]
[32.77716827 242.03146362]
[29.05802155 256.56307983]
[29.05802155 271.56307983]
[29.05802155 286.56307983]
[29.05802155 301.56307983]
[29.05802155 316.56307983]
[29.05802155 331.56307983]
[29.05802155 346.56307983]
[29.05802155 361.56307983]
[29.05802155 376.56307983]
[29.05802155 391.56307983]
[43.85819626 394.24536133]
[57.94151306 399.52740479]
[70.85524750 407.23941040]
[82.18428802 417.13348389]
[91.56443787 428.89157104]
[98.69417572 442.13568115]
[103.34429932 456.44009399]
[105.36534119 471.34497070]
[104.69231415 486.37115479]
[101.34687042 501.03567505]
[95.43654633 514.86706543]
[87.15132904 527.42077637]
[76.75756073 538.29315186]
[64.58935547 547.13482666]
[51.03786850 553.66143799]
[36.53873062 557.66326904]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 146]
[18 145]
[19 144]
[20 143]
[21 142]
[22 141]
[23 140]
[24 139]
[25 138]
[26 137]
[53 136]
[54 135]
[55 134]
[56 133]
[59 129]
[60 128]
[61 127]
[62 126]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
[94 109]
[95 108]
[96 107]
[110 124]
[111 123]
[112 122]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
