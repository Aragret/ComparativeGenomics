%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAAACCUGGGGGGGGGGCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUxxxxxxxxxxUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACCCUCCCCCCCCCCCCAUAAACCU\
) } def
/len { sequence length } bind def

/coor [
[92.31050110 385.05667114]
[78.46456146 379.04061890]
[66.75590515 369.51119995]
[58.05337906 357.17553711]
[53.00277710 342.94903564]
[51.97888565 327.88732910]
[55.05768204 313.10818481]
[62.01070404 299.70825195]
[72.32199097 288.68191528]
[85.22637177 280.84741211]
[99.76625824 276.78610229]
[99.76625824 261.78610229]
[99.76625824 246.78610229]
[99.76625824 231.78610229]
[99.76625824 216.78610229]
[99.76625824 201.78610229]
[99.76625824 186.78610229]
[99.76625824 171.78610229]
[99.76625824 156.78610229]
[99.76625824 141.78610229]
[92.47895050 140.18453979]
[85.75045776 137.35211182]
[79.78111267 133.43544006]
[74.73720551 128.61225891]
[70.74644470 123.08406067]
[67.89494324 117.06810760]
[53.48272705 121.22599030]
[39.07051086 125.38388062]
[30.08789444 138.67643738]
[14.08406639 139.79763794]
[3.33579564 127.88737488]
[6.08823442 112.08219910]
[20.22994804 104.50647736]
[34.91262436 110.97166443]
[49.32484055 106.81377411]
[63.73705673 102.65589142]
[65.06325531 89.92633820]
[70.71804810 78.44490051]
[80.00082397 69.63410187]
[91.76146698 64.58557892]
[91.44940948 49.58882141]
[91.13735199 34.59206772]
[84.23035431 21.27691269]
[72.15036774 12.38456249]
[60.07037735 3.49221325]
[47.99038696 -5.40013647]
[35.91040039 -14.29248619]
[23.02193451 -13.13432407]
[13.13261604 -20.84278107]
[11.23616982 -32.83072662]
[-0.65621001 -41.97246170]
[-16.97543716 -43.58950424]
[-23.48720360 -58.64038467]
[-13.49276066 -71.64204407]
[2.72646499 -69.21949005]
[8.48552418 -53.86484146]
[20.37790489 -44.72310638]
[37.84858322 -43.39068222]
[44.80274963 -26.37247467]
[56.88273621 -17.48012543]
[68.96272278 -8.58777523]
[81.04271698 0.30457464]
[93.12270355 9.19692421]
[100.01389313 6.23694277]
[94.09416199 -7.54553699]
[107.87673950 -13.46504211]
[113.79627228 0.31697968]
[120.68746948 -2.64300179]
[122.55507660 -17.52628136]
[124.42269135 -32.40956116]
[110.92352295 -39.30508804]
[100.59913635 -50.40386581]
[94.69625854 -64.36566162]
[93.92767334 -79.50452423]
[98.38620758 -93.99235535]
[107.53346252 -106.07968903]
[120.26486206 -114.30690765]
[135.04302979 -117.68054962]
[150.08343506 -115.79321289]
[163.56987000 -108.87282562]
[173.87379456 -97.75503540]
[179.75093079 -83.78238678]
[180.49162292 -68.64213562]
[176.00639343 -54.16254425]
[166.83688354 -42.09209061]
[154.09033203 -33.88834763]
[139.30596924 -30.54194832]
[137.43835449 -15.65866852]
[135.57073975 -0.77538872]
[142.35197449 5.49474764]
[145.78889465 12.78958130]
[158.05125427 4.15046501]
[170.31362915 -4.48865128]
[182.57598877 -13.12776756]
[194.83836365 -21.76688385]
[207.10072327 -30.40600014]
[213.49353027 -45.50778961]
[229.79949951 -47.25355148]
[239.24443054 -33.84739304]
[232.11221313 -19.08042145]
[215.73985291 -18.14363098]
[203.47747803 -9.50451565]
[191.21510315 -0.86539924]
[178.95274353 7.77371693]
[166.69036865 16.41283226]
[154.42800903 25.05194855]
[140.32652283 53.27049255]
[106.13410187 34.28001022]
[106.44615936 49.27676392]
[106.75821686 64.27352142]
[127.13858795 75.80181885]
[136.26448059 97.36520386]
[151.12753296 99.38754272]
[165.99057007 101.40987396]
[180.95530701 94.70251465]
[194.08612061 104.52666473]
[191.87515259 120.77608490]
[176.59686279 126.73476410]
[163.96824646 116.27291870]
[149.10519409 114.25058746]
[134.24214172 112.22824860]
[135.27865601 116.79725647]
[135.71684265 121.68963623]
[148.49420166 129.54705811]
[164.89311218 129.46080017]
[172.93254089 143.75413513]
[164.34220886 157.72332764]
[147.95910645 156.99804688]
[140.63676453 142.32441711]
[127.85941315 134.46699524]
[114.76625824 141.78610229]
[114.76625824 156.78610229]
[114.76625824 171.78610229]
[114.76625824 186.78610229]
[114.76625824 201.78610229]
[114.76625824 216.78610229]
[114.76625824 231.78610229]
[114.76625824 246.78610229]
[114.76625824 261.78610229]
[114.76625824 276.78610229]
[129.30613708 280.84741211]
[142.21052551 288.68191528]
[152.52180481 299.70825195]
[159.47483826 313.10818481]
[162.55363464 327.88732910]
[161.52973938 342.94903564]
[156.47914124 357.17553711]
[147.77661133 369.51119995]
[136.06794739 379.04061890]
[122.22201538 385.05667114]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 36]
[27 35]
[28 34]
[40 110]
[41 109]
[42 108]
[43 63]
[44 62]
[45 61]
[46 60]
[47 59]
[50 57]
[51 56]
[68 89]
[69 88]
[70 87]
[91 106]
[92 105]
[93 104]
[94 103]
[95 102]
[96 101]
[112 121]
[113 120]
[114 119]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
