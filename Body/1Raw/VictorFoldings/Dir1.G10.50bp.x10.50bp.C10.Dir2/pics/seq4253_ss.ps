%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCUAACCGGGGGGGGGGUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACCAxxxxxxxxxxGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCCCCCCCCCCCACUUCUUACC\
) } def
/len { sequence length } bind def

/coor [
[81.90030670 362.03869629]
[69.34207916 353.68753052]
[59.25585938 342.47509766]
[52.27566528 329.10617065]
[48.84028244 314.42117310]
[49.16565704 299.34323120]
[53.23134232 284.82009888]
[60.78176117 271.76477051]
[71.34229279 260.99786377]
[84.24908447 253.19622803]
[98.69081116 248.85028076]
[98.06683350 233.86326599]
[97.44285583 218.87625122]
[96.81887817 203.88923645]
[96.19490814 188.90220642]
[95.57093048 173.91519165]
[94.94695282 158.92817688]
[94.32297516 143.94116211]
[93.69899750 128.95414734]
[93.07501984 113.96713257]
[87.32411194 109.15287018]
[73.23467255 114.29949188]
[75.82231140 99.52434540]
[70.07141113 94.71008301]
[55.20836258 96.73241425]
[40.34531784 98.75475311]
[25.48226929 100.77708435]
[10.61922264 102.79941559]
[-4.24382401 104.82175446]
[-9.98551655 119.06705475]
[-22.09050179 128.52035522]
[-37.30259705 130.63876343]
[-51.52983093 124.85244751]
[-60.94514084 112.71789551]
[-63.01586151 97.49922943]
[-57.18497849 83.29020691]
[-45.02096939 73.91297913]
[-29.79589081 71.88996887]
[-15.60521412 77.76536560]
[-6.26615858 89.95870209]
[8.59688854 87.93637085]
[23.45993614 85.91403961]
[38.32298279 83.89170074]
[53.18602753 81.86936951]
[68.04907990 79.84703064]
[54.03596497 74.49607849]
[44.09286880 63.26509857]
[38.64173889 49.29065323]
[38.35378265 34.29341507]
[43.26445770 20.12001419]
[52.76910019 8.51563072]
[65.69740295 0.90912217]
[80.45749664 -1.76291573]
[95.23194122 0.82852739]
[108.20156860 8.36436462]
[117.76940155 19.91670227]
[122.75735474 34.06309128]
[122.55125427 49.06167603]
[117.17647552 63.06566620]
[107.29567719 74.35005188]
[102.99777222 88.72113800]
[113.65940094 78.16984558]
[124.32102966 67.61856079]
[134.98265076 57.06726837]
[120.32305908 60.24472427]
[105.44809723 58.31197357]
[92.08726501 51.49374008]
[81.79402924 40.58277512]
[75.76515961 26.84768295]
[74.70163727 11.88543224]
[78.72711182 -2.56432676]
[87.37355042 -14.82153320]
[99.63563538 -23.46105385]
[114.08766174 -27.47837639]
[129.04931641 -26.40641022]
[142.78100586 -20.36979294]
[153.68615723 -10.07039833]
[160.49685669 3.29427409]
[162.42120361 18.17032433]
[159.23547363 32.82812500]
[151.30815125 45.56558990]
[164.83233643 39.07742310]
[178.35652161 32.58926010]
[191.88072205 26.10109329]
[205.40490723 19.61292839]
[202.81486511 4.13090754]
[204.67677307 -11.44085693]
[210.83259583 -25.84912300]
[220.77902222 -37.93659592]
[233.70864868 -46.73487091]
[248.57548523 -51.54204178]
[264.17962646 -51.97866440]
[279.26397705 -48.01770782]
[292.61569214 -39.98608017]
[303.16354370 -28.53765297]
[316.54983521 -35.30576706]
[329.93612671 -42.07388306]
[343.25128174 -48.98088074]
[356.49386597 -56.02601624]
[364.71719360 -70.21434021]
[381.11364746 -69.91630554]
[388.81591797 -55.43849564]
[379.90060425 -41.67444611]
[363.53900146 -42.78343201]
[350.29641724 -35.73829651]
[345.83959961 -29.78157043]
[336.70422363 -28.68759918]
[323.31793213 -21.91948318]
[309.93167114 -15.15136909]
[312.82446289 -1.08063447]
[311.96389771 13.27076912]
[307.40264893 26.91804504]
[299.44763184 38.92307281]
[288.63922119 48.45889664]
[275.71466064 54.86667633]
[261.55767822 57.70122910]
[247.13810730 56.76192856]
[233.44546509 52.10690308]
[221.42102051 44.04948425]
[211.89306641 33.13711929]
[198.36888123 39.62528229]
[184.84469604 46.11344910]
[171.32049561 52.60161209]
[157.79631042 59.08977890]
[145.53395081 67.72889709]
[134.87231445 78.28018188]
[124.21069336 88.83147430]
[113.54906464 99.38276672]
[108.06203461 113.34315491]
[108.68601227 128.33016968]
[109.30998993 143.31718445]
[109.93396759 158.30419922]
[110.55794525 173.29121399]
[111.18192291 188.27822876]
[111.80590057 203.26525879]
[112.42987823 218.25227356]
[113.05385590 233.23928833]
[113.67783356 248.22630310]
[128.43083191 251.35675049]
[141.94146729 258.05850220]
[153.36044312 267.91027832]
[161.96995544 280.29281616]
[167.22880554 294.42770386]
[168.80641174 309.42645264]
[166.60360718 324.34619141]
[160.75886536 338.24905396]
[151.63958740 350.26110840]
[139.81901550 359.62725830]
[126.04019928 365.75875854]
[111.16930389 368.27017212]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[61 128]
[62 127]
[63 126]
[64 125]
[81 124]
[82 123]
[83 122]
[84 121]
[85 120]
[95 109]
[96 108]
[97 107]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
