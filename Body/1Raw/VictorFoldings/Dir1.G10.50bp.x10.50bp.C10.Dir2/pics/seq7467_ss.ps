%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUUCCCCUGGGGGGGGGGAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUUxxxxxxxxxxAAAUCUCCACCUCCAUCAUCACCUCAACCCAAAAAGGCAUAAUUAAACUUCCCCCCCCCCUACUUCCUCU\
) } def
/len { sequence length } bind def

/coor [
[80.24962616 423.56936646]
[66.40368652 417.55331421]
[54.69502640 408.02389526]
[45.99250031 395.68823242]
[40.94189835 381.46173096]
[39.91800690 366.40002441]
[42.99680710 351.62088013]
[49.94982910 338.22094727]
[60.26111221 327.19461060]
[73.16549683 319.36010742]
[87.70538330 315.29879761]
[87.70538330 300.29879761]
[87.70538330 285.29879761]
[87.70538330 270.29879761]
[87.70538330 255.29879761]
[87.70538330 240.29879761]
[87.70538330 225.29879761]
[87.70538330 210.29879761]
[87.70538330 195.29879761]
[87.70538330 180.29879761]
[87.70538330 165.29879761]
[85.75171661 163.20343018]
[84.53833771 160.18322754]
[84.43123627 156.52665710]
[85.68126678 152.65258789]
[88.38127136 149.06491089]
[89.62814331 134.11682129]
[77.40234375 127.58403015]
[68.59138489 116.88288116]
[64.52674103 103.63047791]
[65.82263184 89.82946014]
[72.28322601 77.56535339]
[82.93224335 68.69146729]
[96.16045380 64.54875946]
[97.71804047 49.62984467]
[99.27561951 34.71093369]
[100.83319855 19.79202080]
[93.31275940 9.26126575]
[94.95764923 -3.16907120]
[104.33811188 -10.87065315]
[106.20571899 -25.75393295]
[108.07333374 -40.63721085]
[109.94094849 -55.52049255]
[111.80856323 -70.40377045]
[97.14253998 -73.59973145]
[82.82205200 -78.09748840]
[68.96239471 -83.86083221]
[55.67515945 -90.84335327]
[43.06732941 -98.98883820]
[31.24041939 -108.23169708]
[20.28965378 -118.49751282]
[10.30320263 -129.70362854]
[1.36147225 -141.75981140]
[-6.46354103 -154.56901550]
[-13.10883427 -168.02807617]
[-18.52090263 -182.02862549]
[-22.65616989 -196.45797729]
[-25.48134232 -211.19990540]
[-26.97366905 -226.13574219]
[-27.12113953 -241.14521790]
[-25.92256165 -256.10748291]
[-23.38759041 -270.90209961]
[-19.53663254 -285.40991211]
[-14.40069580 -299.51409912]
[-8.02113152 -313.10113525]
[-0.44930744 -326.06158447]
[8.25381279 -338.29113770]
[18.01815605 -349.69131470]
[28.76510239 -360.17031860]
[40.40812302 -369.64376831]
[52.85347366 -378.03540039]
[66.00095367 -385.27764893]
[79.74469757 -391.31219482]
[93.97404480 -396.09045410]
[108.57444000 -399.57394409]
[123.42831421 -401.73464966]
[138.41607666 -402.55514526]
[153.41705322 -402.02883911]
[168.31045532 -400.15994263]
[182.97637939 -396.96356201]
[197.29672241 -392.46536255]
[211.15620422 -386.70159912]
[224.44323730 -379.71865845]
[237.05081177 -371.57278442]
[248.87744141 -362.32955933]
[259.82788086 -352.06341553]
[269.81399536 -340.85699463]
[278.75537109 -328.80053711]
[286.57998657 -315.99111938]
[293.22488403 -302.53186035]
[298.63650513 -288.53112793]
[302.77133179 -274.10165405]
[305.59606934 -259.35961914]
[307.08792114 -244.42375183]
[307.23495483 -229.41426086]
[306.03591919 -214.45202637]
[303.50048828 -199.65750122]
[299.64907837 -185.14982605]
[294.51272583 -171.04577637]
[288.13275146 -157.45893860]
[280.56051636 -144.49870300]
[271.85702515 -132.26942444]
[262.09234619 -120.86955261]
[251.34506226 -110.39088440]
[239.70175171 -100.91778564]
[227.25614929 -92.52653503]
[214.10845947 -85.28469086]
[200.36451721 -79.25055695]
[186.13502502 -74.47273254]
[171.53453064 -70.98966980]
[156.68058777 -68.82942963]
[141.69279480 -68.00939178]
[126.69184113 -68.53615570]
[124.82422638 -53.65287781]
[122.95661163 -38.76959991]
[121.08900452 -23.88632011]
[119.22138977 -9.00303936]
[126.91217804 6.74026585]
[115.75211334 21.34960175]
[114.19452667 36.26851654]
[112.63694763 51.18742752]
[111.07936859 66.10633850]
[124.70596313 74.28720093]
[133.42431641 87.57632446]
[135.50239563 103.33361053]
[130.52734375 118.42861938]
[119.48754120 129.86248779]
[104.57623291 135.36369324]
[103.32936096 150.31178284]
[102.70538330 165.29879761]
[102.70538330 180.29879761]
[102.70538330 195.29879761]
[102.70538330 210.29879761]
[102.70538330 225.29879761]
[102.70538330 240.29879761]
[102.70538330 255.29879761]
[102.70538330 270.29879761]
[102.70538330 285.29879761]
[102.70538330 300.29879761]
[102.70538330 315.29879761]
[117.24526978 319.36010742]
[130.14964294 327.19461060]
[140.46093750 338.22094727]
[147.41395569 351.62088013]
[150.49275208 366.40002441]
[149.46885681 381.46173096]
[144.41825867 395.68823242]
[135.71572876 408.02389526]
[124.00707245 417.55331421]
[110.16113281 423.56936646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 129]
[27 128]
[34 122]
[35 121]
[36 120]
[37 119]
[40 117]
[41 116]
[42 115]
[43 114]
[44 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
