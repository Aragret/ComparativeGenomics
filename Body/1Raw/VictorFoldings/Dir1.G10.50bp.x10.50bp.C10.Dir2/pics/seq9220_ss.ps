%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCCAAACAUCAGGGGGGGGGGCUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUxxxxxxxxxxAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCCCCCCCCCCCUUCCAAACAACA\
) } def
/len { sequence length } bind def

/coor [
[98.05434418 409.24084473]
[85.06256104 401.64480591]
[73.80252838 391.65991211]
[64.70705414 379.66998291]
[58.12573624 366.13586426]
[54.31154633 351.57775879]
[53.41109467 336.55526733]
[55.45899200 321.64578247]
[60.37651825 307.42242432]
[67.97466278 294.43188477]
[77.96136475 283.17346191]
[89.95277405 274.07992554]
[103.48796082 267.50079346]
[118.04667664 263.68896484]
[117.14675903 248.71598816]
[116.24684143 233.74299622]
[115.34693146 218.77001953]
[114.44701385 203.79704285]
[113.54709625 188.82406616]
[112.64717865 173.85107422]
[111.74726868 158.87809753]
[110.84735107 143.90512085]
[109.94743347 128.93214417]
[103.93316650 124.45121765]
[94.97114563 136.47961426]
[82.94289398 127.51740265]
[91.90464020 115.48937988]
[85.89038086 111.00846863]
[71.28578186 114.42983246]
[56.68118286 117.85119629]
[42.07658768 121.27256775]
[30.49593163 132.88378906]
[14.72183514 128.39938354]
[10.98133564 112.43251801]
[23.12233734 101.40853882]
[38.65522003 106.66796875]
[53.25981903 103.24660492]
[67.86441040 99.82523346]
[82.46900940 96.40386963]
[83.21907806 81.42263031]
[69.02925873 76.55961609]
[54.83943558 71.69659424]
[43.31539154 81.85001373]
[28.25540924 84.86537933]
[13.71054268 79.93157196]
[3.59329128 68.37576294]
[0.62514442 53.30640030]
[5.60451841 38.77707291]
[17.19198608 28.69609261]
[32.27058029 25.77519417]
[46.78422928 30.80008698]
[56.82883835 42.41909790]
[59.70245743 57.50677109]
[73.89228058 62.36979294]
[88.08209991 67.23281097]
[74.95300293 59.97837067]
[68.16861725 46.60032654]
[70.07343292 31.72175980]
[80.00920105 20.48429871]
[94.54238892 16.77129555]
[108.65073395 21.86586380]
[117.45877838 34.00746155]
[117.92269897 49.00028610]
[109.88191986 61.66345978]
[120.00039673 50.59022522]
[130.11888123 39.51699448]
[140.23735046 28.44376373]
[150.35581970 17.37053299]
[160.47430420 6.29730177]
[170.59277344 -4.77592945]
[160.73356628 -16.10261154]
[152.22979736 -28.47934914]
[145.19232178 -41.74478531]
[139.71290588 -55.72597885]
[135.86297607 -70.24065399]
[133.69271851 -85.09957886]
[133.23042297 -100.10904694]
[134.48213196 -115.07337189]
[137.43153381 -129.79745483]
[142.04014587 -144.08935547]
[148.24790955 -157.76274109]
[155.97389221 -170.63935852]
[165.11735535 -182.55131531]
[175.55911255 -193.34332275]
[187.16302490 -202.87469482]
[199.77780151 -211.02116394]
[213.23901367 -217.67652893]
[227.37112427 -222.75401306]
[241.98992920 -226.18742371]
[256.90484619 -227.93199158]
[271.92138672 -227.96499634]
[286.84381104 -226.28599548]
[301.47756958 -222.91688538]
[315.63186646 -217.90156555]
[329.12219238 -211.30545044]
[341.77267456 -203.21450806]
[353.41836548 -193.73423767]
[363.90744019 -182.98822021]
[373.10317993 -171.11657715]
[380.88571167 -158.27404785]
[387.15350342 -144.62808228]
[391.82489014 -130.35658264]
[394.83898926 -115.64559174]
[396.15646362 -100.68692017]
[395.76016235 -85.67556763]
[393.65524292 -70.80724335]
[389.86914062 -56.27578354]
[384.45123291 -42.27064133]
[377.47213745 -28.97439957]
[369.02285767 -16.56040192]
[359.21353149 -5.19049072]
[348.17205811 4.98710442]
[336.04235840 13.83969784]
[322.98260498 21.25187683]
[309.16302490 27.12700844]
[294.76379395 31.38850021]
[279.97265625 33.98079300]
[264.98245239 34.87009048]
[249.98855591 34.04479980]
[235.18647766 31.51568031]
[220.76919556 27.31570244]
[206.92466736 21.49962616]
[193.83337402 14.14327145]
[181.66600037 5.34254599]
[171.54753113 16.41577721]
[161.42906189 27.48900795]
[151.31057739 38.56224060]
[141.19210815 49.63547134]
[131.07362366 60.70870209]
[120.95515442 71.78193665]
[124.92041779 128.03222656]
[125.82032776 143.00520325]
[126.72024536 157.97817993]
[127.62016296 172.95117188]
[128.52008057 187.92414856]
[129.41999817 202.89712524]
[130.31991577 217.87010193]
[131.21981812 232.84309387]
[132.11973572 247.81607056]
[133.01965332 262.78906250]
[147.93011475 264.82971191]
[162.15586853 269.74032593]
[175.15011597 277.33215332]
[186.41337585 287.31338501]
[195.51274109 299.30038452]
[202.09843445 312.83236694]
[205.91734314 327.38925171]
[206.82264709 342.41143799]
[204.77958679 357.32156372]
[199.86665344 371.54653931]
[192.27272034 384.53955078]
[182.28965759 395.80120850]
[170.30119324 404.89862061]
[156.76814270 411.48211670]
[142.21066284 415.29867554]
[127.18830872 416.20153809]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[28 39]
[29 38]
[30 37]
[31 36]
[40 55]
[41 54]
[42 53]
[64 130]
[65 129]
[66 128]
[67 127]
[68 126]
[69 125]
[70 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
