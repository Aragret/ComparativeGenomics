%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUACUACUGGGGGGGGGGCAACUUAAACUCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAxxxxxxxxxxCCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCCCCCCCCCCCUCCUAAUACU\
) } def
/len { sequence length } bind def

/coor [
[53.22783279 151.04399109]
[43.34899521 139.79684448]
[36.11872482 126.68909454]
[31.87505341 112.33357239]
[30.81638527 97.40142059]
[32.99221039 82.59075928]
[38.30081177 68.59402466]
[46.49399185 56.06559372]
[57.18870163 45.59119415]
[69.88494110 37.66053772]
[83.98913574 32.64439774]
[82.12152100 17.76111603]
[80.25390625 2.87783623]
[78.38629150 -12.00544357]
[76.51868439 -26.88872337]
[74.65106964 -41.77200317]
[72.78345490 -56.65528488]
[70.91584015 -71.53856659]
[69.04822540 -86.42184448]
[67.18061829 -101.30512238]
[52.20842361 -100.32206726]
[37.20428848 -100.22769928]
[22.22091293 -101.02235413]
[7.31093121 -102.70324707]
[-7.47328806 -105.26445770]
[-22.07981300 -108.69700623]
[-36.45734024 -112.98882294]
[-50.55536270 -118.12483978]
[-64.32436371 -124.08701324]
[-77.71598053 -130.85440063]
[-90.68317413 -138.40324402]
[-103.18038940 -146.70700073]
[-115.16374207 -155.73652649]
[-126.59112549 -165.46009827]
[-137.42240906 -175.84356689]
[-147.61955261 -186.85044861]
[-157.14671326 -198.44207764]
[-165.97045898 -210.57774353]
[-174.05978394 -223.21482849]
[-181.38626099 -236.30894470]
[-187.92416382 -249.81407166]
[-193.65052795 -263.68280029]
[-198.54525757 -277.86642456]
[-202.59112549 -292.31506348]
[-205.77394104 -306.97805786]
[-208.08251953 -321.80380249]
[-209.50875854 -336.74029541]
[-210.04765320 -351.73504639]
[-209.69728088 -366.73538208]
[-208.45890808 -381.68862915]
[-206.33685303 -396.54223633]
[-203.33859253 -411.24407959]
[-199.47465515 -425.74243164]
[-194.75859070 -439.98645020]
[-189.20700073 -453.92605591]
[-182.83935547 -467.51229858]
[-175.67803955 -480.69747925]
[-167.74821472 -493.43524170]
[-159.07769775 -505.68084717]
[-149.69697571 -517.39135742]
[-139.63900757 -528.52551270]
[-128.93908691 -539.04431152]
[-117.63482666 -548.91070557]
[-105.76592255 -558.09014893]
[-93.37406158 -566.55035400]
[-80.50277710 -574.26159668]
[-67.19728088 -581.19677734]
[-53.50431061 -587.33154297]
[-39.47195435 -592.64434814]
[-25.14951134 -597.11657715]
[-10.58728409 -600.73242188]
[4.16357374 -603.47924805]
[19.05125046 -605.34741211]
[34.02345276 -606.33038330]
[49.02758789 -606.42462158]
[64.01095581 -605.62982178]
[78.92092133 -603.94879150]
[93.70511627 -601.38745117]
[108.31161499 -597.95477295]
[122.68910217 -593.66284180]
[136.78707886 -588.52667236]
[150.55603027 -582.56439209]
[163.94758606 -575.79687500]
[176.91471863 -568.24792480]
[189.41186523 -559.94403076]
[201.39512634 -550.91442871]
[212.82243347 -541.19073486]
[223.65362549 -530.80718994]
[233.85066223 -519.80023193]
[243.37773132 -508.20852661]
[252.20137024 -496.07275391]
[260.29058838 -483.43560791]
[267.61694336 -470.34143066]
[274.15472412 -456.83624268]
[279.88098145 -442.96746826]
[284.77557373 -428.78381348]
[288.82131958 -414.33511353]
[292.00399780 -399.67211914]
[294.31246948 -384.84634399]
[295.73855591 -369.90982056]
[296.27731323 -354.91506958]
[295.92681885 -339.91473389]
[294.68832397 -324.96151733]
[292.56613159 -310.10791016]
[289.56774902 -295.40612793]
[285.70367432 -280.90777588]
[280.98748779 -266.66381836]
[275.43579102 -252.72424316]
[269.06802368 -239.13806152]
[261.90658569 -225.95295715]
[253.97663879 -213.21525574]
[245.30603027 -200.96971130]
[235.92520142 -189.25932312]
[225.86712646 -178.12522888]
[215.16711426 -167.60653687]
[203.86277771 -157.74020386]
[191.99378967 -148.56086731]
[179.60185242 -140.10078430]
[166.73049927 -132.38967896]
[153.42494202 -125.45461273]
[139.73191833 -119.31995392]
[125.69951630 -114.00726318]
[111.37703705 -109.53519440]
[96.81478119 -105.91944885]
[82.06389618 -103.17273712]
[83.93151093 -88.28945923]
[85.79911804 -73.40617371]
[87.66673279 -58.52289581]
[89.53434753 -43.63961792]
[91.40196228 -28.75633621]
[93.26957703 -13.87305737]
[95.13718414 1.01022303]
[97.00479889 15.89350319]
[98.87241364 30.77678299]
[113.77868652 32.15257645]
[128.04077148 36.70039368]
[140.99189758 44.20761871]
[152.02655029 54.32326889]
[160.62882996 66.57440948]
[166.39657593 80.38828278]
[169.06013489 95.11904144]
[168.49496460 110.07800293]
[164.72747803 124.56578827]
[157.93385315 137.90507507]
[148.43167114 149.47219849]
[136.66520691 158.72637939]
[123.18454742 165.23497009]
[108.61995697 168.69367981]
[93.65236664 168.94079590]
[78.98153687 165.96476746]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 134]
[12 133]
[13 132]
[14 131]
[15 130]
[16 129]
[17 128]
[18 127]
[19 126]
[20 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
