%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCAAACUAGGGGGGGGGGCGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAAGxxxxxxxxxxACCUCCAAAUAUCUCAUCAACAACCGACUAAUCACCACCCAACAAUGACUCCCCCCCCCCAAUCAAACUA\
) } def
/len { sequence length } bind def

/coor [
[93.62010193 351.36886597]
[80.39990997 344.09637451]
[69.51310730 333.64938354]
[61.70197296 320.74014282]
[57.49909210 306.24880981]
[57.19102097 291.16348267]
[60.79876328 276.51266479]
[68.07633209 263.29525757]
[78.52754211 252.41250610]
[91.43980408 244.60635376]
[105.93273926 240.40907288]
[105.62068176 225.41232300]
[105.30863190 210.41555786]
[104.99657440 195.41880798]
[104.68451691 180.42205811]
[104.37245941 165.42530823]
[104.06040192 150.42854309]
[103.74834442 135.43179321]
[103.43629456 120.43504333]
[90.74136353 112.44512177]
[77.08512115 118.65052795]
[63.42887878 124.85594177]
[49.77263641 131.06134033]
[36.11639786 137.26675415]
[30.80072975 152.15026855]
[16.48217964 158.84016418]
[1.65569007 153.36744690]
[-4.88244629 138.97895813]
[0.74673074 124.21115875]
[15.20353031 117.82551575]
[29.91098976 123.61051178]
[43.56723022 117.40510559]
[57.22347260 111.19969940]
[70.87971497 104.99429321]
[84.53595734 98.78888702]
[82.51361847 83.92583466]
[67.69586182 81.59473419]
[52.87810516 79.26362610]
[38.06034470 76.93252563]
[22.95931053 83.32711029]
[10.03572369 73.23191833]
[12.58426476 57.03201294]
[27.98321342 51.39246750]
[40.39144897 62.11476517]
[55.20920944 64.44586945]
[70.02696228 66.77697754]
[84.84472656 69.10807800]
[98.50096130 62.90267181]
[106.49088287 50.20774078]
[94.44700623 41.25378036]
[83.13321686 31.39343262]
[72.61755371 20.68599701]
[62.96326828 9.19586945]
[54.22841263 -3.00784421]
[46.46552658 -15.85174942]
[39.72129440 -29.25860023]
[34.03628159 -43.14776611]
[29.44467354 -57.43571472]
[25.97408676 -72.03651428]
[23.64539719 -86.86235046]
[22.47260666 -101.82406616]
[22.46276855 -116.83167267]
[23.61594391 -131.79490662]
[25.92519569 -146.62379456]
[29.37663651 -161.22912598]
[33.94950867 -175.52308655]
[39.61631012 -189.41969299]
[46.34296036 -202.83537292]
[54.08900070 -215.68943787]
[62.80784988 -227.90460205]
[72.44706726 -239.40736389]
[82.94867706 -250.12858582]
[94.24953461 -260.00375366]
[106.28166199 -268.97351074]
[118.97269440 -276.98385620]
[132.24630737 -283.98666382]
[146.02268982 -289.93981934]
[160.21896362 -294.80749512]
[174.74975586 -298.56039429]
[189.52766418 -301.17599487]
[204.46383667 -302.63854980]
[219.46844482 -302.93927002]
[234.45121765 -302.07632446]
[249.32206726 -300.05490112]
[263.99154663 -296.88717651]
[278.37145996 -292.59222412]
[292.37527466 -287.19583130]
[305.91882324 -280.73043823]
[318.92059326 -273.23498535]
[331.30245972 -264.75454712]
[342.98989868 -255.34007263]
[353.91262817 -245.04823303]
[364.00497437 -233.94088745]
[373.20623779 -222.08486938]
[381.46105957 -209.55148315]
[388.71981812 -196.41607666]
[394.93884277 -182.75767517]
[400.08074951 -168.65841675]
[404.11459351 -154.20309448]
[407.01614380 -139.47863770]
[408.76788330 -124.57361603]
[409.35937500 -109.57766724]
[408.78695679 -94.58097839]
[407.05416870 -79.67374420]
[404.17135620 -64.94561768]
[400.15588379 -50.48517227]
[395.03192139 -36.37938690]
[388.83026123 -22.71308517]
[381.58822632 -9.56846523]
[373.34933472 2.97541952]
[364.16314697 14.84312820]
[354.08493042 25.96328735]
[343.17529297 36.26901627]
[331.49984741 45.69833374]
[319.12878418 54.19453430]
[306.13653564 61.70651627]
[292.60125732 68.18910217]
[278.60427856 73.60330200]
[264.22985840 77.91655731]
[249.56442261 81.10292816]
[234.69615173 83.14324951]
[219.71447754 84.02524567]
[204.70951843 83.74362183]
[189.77148438 82.30006409]
[174.99024963 79.70325470]
[160.45471191 75.96881104]
[146.25225830 71.11920166]
[132.46832275 65.18358612]
[119.18581390 58.19765854]
[111.19589233 70.89258575]
[118.43304443 120.12298584]
[118.74510193 135.11973572]
[119.05715942 150.11648560]
[119.36921692 165.11325073]
[119.68126678 180.11000061]
[119.99332428 195.10675049]
[120.30538177 210.10350037]
[120.61743927 225.10026550]
[120.92949677 240.09701538]
[135.58448792 243.68777466]
[148.81030273 250.95004272]
[159.70516968 261.38864136]
[167.52626038 274.29183960]
[171.74032593 288.77990723]
[172.06005859 303.86502075]
[168.46362305 318.51861572]
[161.19625854 331.74160767]
[150.75346375 342.63244629]
[137.84722900 350.44857788]
[123.35754395 354.65704346]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[36 47]
[37 46]
[38 45]
[39 44]
[48 130]
[49 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
