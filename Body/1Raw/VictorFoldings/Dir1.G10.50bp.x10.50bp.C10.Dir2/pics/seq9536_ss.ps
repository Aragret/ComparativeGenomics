%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUCAUAUUUGGGGGGGGGGACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCAUCUCAxxxxxxxxxxACUAAUCUCCCUACAAAUCUCCUUAAUUAUAACAUUCACAGCCACAGAACCCCCCCCCCCUAAUCAUAUUU\
) } def
/len { sequence length } bind def

/coor [
[83.64753723 383.73699951]
[70.15865326 377.00546265]
[58.67315674 367.24090576]
[49.85878754 355.01098633]
[44.22800446 341.02679443]
[42.10817719 326.10131836]
[43.62254333 311.10232544]
[48.68306732 296.90182495]
[56.99553299 284.32537842]
[68.07666779 274.10424805]
[81.28221893 266.83261108]
[95.84444427 262.93322754]
[95.53646851 247.93638611]
[95.22848511 232.93955994]
[94.92050934 217.94271851]
[94.61253357 202.94587708]
[94.30455780 187.94903564]
[93.99657440 172.95220947]
[93.68859863 157.95536804]
[93.38062286 142.95852661]
[93.07264709 127.96169281]
[84.62756348 124.36252594]
[77.74360657 118.28926086]
[73.11985779 110.35867310]
[71.22586823 101.37612152]
[56.57314301 98.16712189]
[41.92042160 94.95812988]
[27.26769447 91.74913025]
[12.61497021 88.54013824]
[-2.03775454 85.33113861]
[-8.44829273 98.96392059]
[-17.73209572 110.82810211]
[-29.42349052 120.32857513]
[-42.93604279 126.98880768]
[-57.59196854 130.47471619]
[-72.65613556 130.61145020]
[-87.37292480 127.39216614]
[-101.00415039 120.97832489]
[-112.86608124 111.69164276]
[-122.36372375 99.99794769]
[-129.02067566 86.48377991]
[-132.50303650 71.82701111]
[-132.63612366 56.76281357]
[-129.41326904 42.04680634]
[-122.99612427 28.41713142]
[-113.70657349 16.55745316]
[-102.01057434 7.06264591]
[-88.49479675 0.40896526]
[-73.83718872 -3.06984258]
[-58.77295685 -3.19928193]
[-44.05772781 0.02713953]
[-30.42960930 6.44758606]
[-18.57218170 15.74001026]
[-9.08020878 27.43830872]
[-2.42980361 40.95569992]
[1.04545236 55.61415482]
[1.17124176 70.67841339]
[15.82396698 73.88741302]
[30.47669220 77.09640503]
[45.12941742 80.30540466]
[59.78214264 83.51439667]
[74.43486786 86.72339630]
[80.37374878 78.91316223]
[88.58947754 73.54920959]
[98.12892914 71.25380707]
[107.88545227 72.29325104]
[116.72718048 76.54694366]
[128.31622314 67.02360535]
[139.90527344 57.50027084]
[131.65921021 44.95298386]
[124.79357147 31.60026360]
[119.38615417 17.59340858]
[115.49824524 3.09112549]
[113.17388153 -11.74226379]
[112.43939972 -26.73868370]
[113.30313110 -41.72821808]
[115.75528717 -56.54101562]
[119.76807404 -71.00924683]
[125.29603577 -84.96896362]
[132.27653503 -98.26200104]
[140.63046265 -110.73773193]
[150.26316833 -122.25480652]
[161.06552124 -132.68270874]
[172.91511536 -141.90330505]
[185.67767334 -149.81210327]
[199.20860291 -156.31950378]
[213.35456848 -161.35176086]
[227.95529175 -164.85186768]
[242.84535217 -166.78013611]
[257.85601807 -167.11476135]
[272.81723022 -165.85191345]
[287.55941772 -163.00592041]
[301.91558838 -158.60902405]
[315.72305298 -152.71105957]
[328.82534790 -145.37882996]
[341.07406616 -136.69543457]
[352.33035278 -126.75924683]
[362.46670532 -115.68286133]
[371.36828613 -103.59178925]
[378.93420410 -90.62301636]
[385.07873535 -76.92350006]
[389.73226929 -62.64846039]
[392.84207153 -47.95964432]
[394.37289429 -33.02349091]
[394.30740356 -18.00923920]
[392.64636230 -3.08700776]
[389.40853882 11.57412052]
[384.63067627 25.80802536]
[378.36688232 39.45342255]
[370.68811035 52.35570526]
[361.68142700 64.36867523]
[351.44882202 75.35621643]
[340.10626221 85.19383240]
[327.78228760 93.77005768]
[314.61651611 100.98771667]
[300.75814819 106.76502228]
[286.36416626 111.03652191]
[271.59768677 113.75380707]
[256.62606812 114.88609314]
[241.61888123 114.42055511]
[226.74621582 112.36246490]
[212.17655945 108.73513794]
[198.07502747 103.57967377]
[184.60137939 96.95449829]
[171.90829468 88.93466949]
[160.13958740 79.61106110]
[149.42861938 69.08931732]
[137.83956909 78.61265564]
[126.25051880 88.13599396]
[126.17017365 112.04019165]
[108.06948090 127.65370941]
[108.37745667 142.65054321]
[108.68544006 157.64738464]
[108.99341583 172.64422607]
[109.30139160 187.64106750]
[109.60936737 202.63790894]
[109.91735077 217.63473511]
[110.22532654 232.63157654]
[110.53330231 247.62841797]
[110.84127808 262.62524414]
[125.55131531 265.92349243]
[139.04428101 272.64682007]
[150.53569031 282.40441895]
[159.35748291 294.62896729]
[164.99673462 308.60977173]
[167.12561035 323.53393555]
[165.62033081 338.53387451]
[160.56842041 352.73745728]
[152.26358032 365.31890869]
[141.18864441 375.54678345]
[127.98751068 382.82641602]
[113.42765045 386.73461914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[25 62]
[26 61]
[27 60]
[28 59]
[29 58]
[30 57]
[67 129]
[68 128]
[69 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
