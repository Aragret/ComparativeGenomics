%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUACCAAAAAGGGGGGGGGGCAUCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACxxxxxxxxxxAAUGCUAAAACUAAUCGUCCCAACAAUUAUAUUACUACCACUGACAUGACCCCCCCCCCCUUUCCAAAAA\
) } def
/len { sequence length } bind def

/coor [
[85.79814911 417.14422607]
[72.57794952 409.87176514]
[61.69114685 399.42477417]
[53.88001633 386.51550293]
[49.67713547 372.02420044]
[49.36906433 356.93887329]
[52.97680664 342.28802490]
[60.25437927 329.07064819]
[70.70558929 318.18786621]
[83.61785126 310.38174438]
[98.11078644 306.18444824]
[97.79872894 291.18768311]
[97.48667145 276.19094849]
[97.17461395 261.19418335]
[96.86255646 246.19743347]
[96.55050659 231.20068359]
[96.23844910 216.20391846]
[95.92639160 201.20716858]
[95.61433411 186.21041870]
[95.30227661 171.21366882]
[94.83423615 156.22096252]
[94.21025848 141.23394775]
[93.58628082 126.24693298]
[85.11071777 125.04996490]
[76.86939240 121.03148651]
[69.81385803 114.25851440]
[64.86497498 105.11878204]
[62.80589676 94.30467224]
[47.80670929 94.14863586]
[32.80752182 93.99259949]
[17.80833244 93.83656311]
[11.50818253 107.70119476]
[0.10914943 117.79980469]
[-14.41381550 122.38275146]
[-29.54452133 120.65600586]
[-42.66147995 112.91873932]
[-51.49209976 100.51148224]
[-54.50642395 85.58386993]
[-51.18220520 70.72219086]
[-42.09537506 58.50133133]
[-28.82029152 51.03862381]
[-13.65693760 49.62702560]
[0.76754171 54.51111221]
[11.95401859 64.84468079]
[17.96436882 78.83737946]
[32.96355820 78.99341583]
[47.96274567 79.14945221]
[62.96193314 79.30548859]
[68.30344391 65.28877258]
[57.00444031 55.42304993]
[45.70543671 45.55732727]
[34.40643311 35.69160461]
[18.36730766 35.33661270]
[8.75962257 22.48858070]
[12.95357227 7.00341606]
[27.73191643 0.76001221]
[41.75797653 8.54777527]
[44.27215576 24.39259911]
[55.57115936 34.25832367]
[66.87016296 44.12404633]
[78.16916656 53.98976898]
[93.12941742 52.89845657]
[102.87706757 41.49743652]
[112.62472534 30.09641647]
[122.37237549 18.69539452]
[132.12002563 7.29437399]
[121.91532898 -3.72291493]
[113.05869293 -15.85042381]
[105.66988373 -28.92414284]
[99.84884644 -42.76726151]
[95.67428589 -57.19257355]
[93.20266724 -72.00498962]
[92.46741486 -87.00418854]
[93.47846985 -101.98731995]
[96.22216034 -116.75175476]
[100.66138458 -131.09783936]
[106.73609924 -144.83152771]
[114.36415863 -157.76710510]
[123.44239807 -169.72962952]
[133.84803772 -180.55732727]
[145.44036865 -190.10375977]
[158.06260681 -198.23983765]
[171.54406738 -204.85549927]
[185.70240784 -209.86129761]
[200.34614563 -213.18952942]
[215.27726746 -214.79518127]
[230.29383850 -214.65655518]
[245.19276428 -212.77549744]
[259.77258301 -209.17745972]
[273.83609009 -203.91111755]
[287.19308472 -197.04766846]
[299.66296387 -188.67994690]
[311.07705688 -178.92111206]
[321.28103638 -167.90315247]
[330.13684082 -155.77505493]
[337.52478027 -142.70083618]
[343.34490967 -128.85733032]
[347.51849365 -114.43173981]
[349.98913574 -99.61915588]
[350.72338867 -84.61991119]
[349.71133423 -69.63684845]
[346.96664429 -54.87258911]
[342.52645874 -40.52681351]
[336.45083618 -26.79352379]
[328.82189941 -13.85845280]
[319.74285889 -1.89652967]
[309.33651733 8.93047333]
[297.74353027 18.47613335]
[285.12075806 26.61135674]
[271.63885498 33.22612381]
[257.48019409 38.23097610]
[242.83622742 41.55823135]
[227.90499878 43.16289139]
[212.88842773 43.02325439]
[197.98962402 41.14120483]
[183.41006470 37.54220200]
[169.34690857 32.27491760]
[155.99035645 25.41057968]
[143.52104187 17.04202652]
[133.77339172 28.44304657]
[124.02574158 39.84406662]
[114.27809143 51.24509048]
[104.53044128 62.64611053]
[129.05020142 82.15862274]
[128.71777344 110.43640900]
[108.57329559 125.62295532]
[109.19727325 140.60997009]
[109.82125092 155.59698486]
[113.32386780 164.10484314]
[110.29903412 170.90161133]
[110.61109161 185.89836121]
[110.92314148 200.89511108]
[111.23519897 215.89187622]
[111.54725647 230.88862610]
[111.85931396 245.88537598]
[112.17137146 260.88214111]
[112.48342896 275.87887573]
[112.79547882 290.87564087]
[113.10753632 305.87240601]
[127.76252747 309.46316528]
[140.98834229 316.72540283]
[151.88320923 327.16400146]
[159.70429993 340.06723022]
[163.91838074 354.55529785]
[164.23809814 369.64038086]
[160.64166260 384.29400635]
[153.37431335 397.51699829]
[142.93150330 408.40783691]
[130.02526855 416.22393799]
[115.53558350 420.43243408]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 128]
[22 127]
[23 126]
[28 48]
[29 47]
[30 46]
[31 45]
[49 61]
[50 60]
[51 59]
[52 58]
[62 123]
[63 122]
[64 121]
[65 120]
[66 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
