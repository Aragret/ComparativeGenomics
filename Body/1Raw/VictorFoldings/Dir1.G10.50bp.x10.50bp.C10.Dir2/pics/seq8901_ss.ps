%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUAGGCCUACUGGGGGGGGGGAACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAxxxxxxxxxxAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACCCCCCCCCCCUACUAGGCCUCCU\
) } def
/len { sequence length } bind def

/coor [
[86.53427887 539.42645264]
[72.66014099 533.57818604]
[60.30533981 524.97283936]
[50.00996780 513.98651123]
[42.22409058 501.09954834]
[37.28807449 486.87530518]
[35.41770554 471.93557739]
[36.69474792 456.93347168]
[41.06336975 442.52484131]
[48.33259964 429.33953857]
[58.18465424 417.95401001]
[70.18884277 408.86593628]
[83.82039642 402.47262573]
[98.48339844 399.05355835]
[98.18327332 384.05654907]
[97.88314056 369.05957031]
[97.58300781 354.06256104]
[97.28287506 339.06558228]
[96.98274231 324.06857300]
[96.68260956 309.07156372]
[96.38247681 294.07458496]
[96.08234406 279.07757568]
[95.78221130 264.08059692]
[81.24349213 260.53445435]
[68.10805511 253.34020996]
[57.27417755 242.98300171]
[49.48452759 230.16450500]
[45.27523041 215.75540161]
[44.93898010 200.73622131]
[48.50470734 186.13063049]
[55.73517609 172.93566895]
[66.14278412 162.05368042]
[79.02242279 154.23060608]
[93.49923706 150.00486755]
[93.19910431 135.00785828]
[77.82809448 127.93222809]
[67.44885254 114.56796265]
[64.39813995 97.92387390]
[49.94212341 93.92092133]
[35.48611069 89.91796875]
[21.03009415 85.91502380]
[9.59725857 96.27329254]
[-5.62449503 98.78362274]
[-19.77795982 92.64498138]
[-28.34681702 79.81617737]
[-28.59677505 64.39083862]
[-20.44807434 51.29113388]
[-6.50093365 44.69713211]
[8.79416275 46.71295929]
[20.55660820 56.69536591]
[25.03304482 71.45900726]
[39.48905945 75.46195221]
[53.94507599 79.46490479]
[68.40109253 83.46785736]
[81.96322632 69.23512268]
[101.00675201 64.35186768]
[104.57406616 49.78223419]
[108.14138031 35.21260071]
[94.06793976 29.97287560]
[80.69796753 23.13471985]
[68.21228027 14.79061222]
[56.77972794 5.05339622]
[46.55493164 -5.94524288]
[37.67616653 -18.05656242]
[30.26350784 -31.11676788]
[24.41720200 -44.94923782]
[20.21631241 -59.36690140]
[17.71765518 -74.17478180]
[16.95501900 -89.17260742]
[17.93871689 -104.15756226]
[20.65544891 -118.92698669]
[25.06847191 -133.28114319]
[31.11810493 -147.02590942]
[38.72253418 -159.97538757]
[47.77891541 -171.95446777]
[58.16477966 -182.80114746]
[69.73966217 -192.36872864]
[82.34702301 -200.52783203]
[95.81637573 -207.16810608]
[109.96554565 -212.19973755]
[124.60319519 -215.55470276]
[139.53135681 -217.18762207]
[154.54815674 -217.07640076]
[169.45050049 -215.22254944]
[184.03684998 -211.65113831]
[198.10993958 -206.41047668]
[211.47946167 -199.57142639]
[223.96458435 -191.22648621]
[235.39648438 -181.48851013]
[245.62054443 -170.48918152]
[254.49850464 -158.37727356]
[261.91027832 -145.31657410]
[267.75567627 -131.48371887]
[271.95559692 -117.06577301]
[274.45327759 -102.25772858]
[275.21490479 -87.25984955]
[274.23019409 -72.27495575]
[271.51248169 -57.50571442]
[267.09851074 -43.15185547]
[261.04797363 -29.40749741]
[253.44267273 -16.45851898]
[244.38548279 -4.48003960]
[233.99890137 6.36594486]
[222.42338562 15.93275452]
[209.81547546 24.09101105]
[196.34567261 30.73038101]
[182.19616699 35.76107407]
[167.55828857 39.11505890]
[152.63002014 40.74697876]
[137.61323547 40.63475418]
[122.71101379 38.77991104]
[119.14369965 53.34954834]
[115.57638550 67.91918182]
[124.54838562 74.13150024]
[131.22171021 82.76609802]
[134.97148132 93.01445770]
[135.44657898 103.91693115]
[132.60252380 114.45262909]
[126.70560455 123.63500214]
[118.30802155 130.60423279]
[108.19609833 134.70773315]
[108.49623108 149.70472717]
[123.13053131 153.34788513]
[136.31285095 160.64938354]
[147.14750671 171.10624695]
[154.90011597 184.00135803]
[159.04734802 198.45259094]
[159.31228638 213.47320557]
[155.68284607 228.03918457]
[148.41230774 241.15907288]
[138.00149536 251.94143677]
[125.16440582 259.65545654]
[110.77921295 263.78045654]
[111.07933807 278.77743530]
[111.37947083 293.77444458]
[111.67960358 308.77145386]
[111.97973633 323.76843262]
[112.27986908 338.76544189]
[112.58000183 353.76242065]
[112.88013458 368.75942993]
[113.18026733 383.75643921]
[113.48040009 398.75341797]
[128.26846313 401.58306885]
[142.14489746 407.42587280]
[154.50308228 416.02639771]
[164.80278015 427.00866699]
[172.59371948 439.89254761]
[177.53532410 454.11486816]
[179.41157532 469.05386353]
[178.14044189 484.05645752]
[173.77748108 498.46679688]
[166.51344299 511.65496826]
[156.66587830 523.04437256]
[144.66525269 532.13720703]
[131.03622437 538.53582764]
[116.37455750 541.96069336]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[34 122]
[35 121]
[38 54]
[39 53]
[40 52]
[41 51]
[56 113]
[57 112]
[58 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
