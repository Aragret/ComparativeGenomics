%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAACUUAAGGGGGGGGGGGGGUCGAAGGUGGAUUUAGCAGUAAACUAAGAGUAGAGUGCUUAGUUGAAxxxxxxxxxxACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCCCCCCCCCCCAUAAAACUUAA\
) } def
/len { sequence length } bind def

/coor [
[84.57794189 445.73825073]
[69.69460297 443.37542725]
[55.75757980 437.64343262]
[43.51847458 428.85131836]
[33.63733292 417.47329712]
[26.64702797 404.12292480]
[22.92453957 389.52017212]
[22.67061615 374.45260620]
[25.89895248 359.73272705]
[32.43545151 346.15438843]
[41.92760086 334.44989014]
[53.86350632 325.25036621]
[67.59947968 319.05200195]
[82.39475250 316.18902588]
[83.01057434 301.20169067]
[83.62640381 286.21432495]
[84.24222565 271.22695923]
[84.85805511 256.23962402]
[85.47387695 241.25227356]
[86.08970642 226.26490784]
[86.70552826 211.27755737]
[87.32135773 196.29020691]
[87.93717957 181.30285645]
[88.55300903 166.31550598]
[85.66742706 159.46089172]
[89.33847046 151.02766418]
[90.26187897 136.05612183]
[91.18529510 121.08457184]
[78.52523041 107.81617737]
[79.69464111 89.51426697]
[69.36373901 78.63894653]
[59.03283691 67.76363373]
[48.70193481 56.88832092]
[35.05824661 65.10395050]
[19.94504356 70.10639191]
[4.10741377 71.65213013]
[-11.67452908 69.66800690]
[-26.62406921 64.25465393]
[-40.00611496 55.68139267]
[-51.16334915 44.37285233]
[-59.54850388 30.88793373]
[-64.75122070 15.89217567]
[-66.51811218 0.12492338]
[-64.76512146 -15.63713360]
[-59.58149719 -30.61821556]
[-51.22527695 -44.08164215]
[-61.99395752 -54.52365112]
[-72.76263428 -64.96566010]
[-83.53131104 -75.40766907]
[-94.29999542 -85.84967804]
[-105.06867218 -96.29168701]
[-115.83734894 -106.73369598]
[-130.83612061 -103.12256622]
[-145.39869690 -108.21522522]
[-154.87818909 -120.38661194]
[-156.24975586 -135.75288391]
[-149.07569885 -149.41072083]
[-135.64526367 -157.00196838]
[-120.24404144 -156.10426331]
[-107.78650665 -147.00407410]
[-102.24781799 -132.60523987]
[-105.39533997 -117.50237274]
[-94.62666321 -107.06036377]
[-83.85798645 -96.61835480]
[-73.08930206 -86.17634583]
[-62.32062531 -75.73433685]
[-51.55194855 -65.29232788]
[-40.78326797 -54.85031891]
[-29.10874939 -62.80832291]
[-16.09113121 -68.31398010]
[-2.23924136 -71.14988708]
[11.90504837 -71.20301056]
[25.78801727 -68.46923065]
[38.86577225 -63.05357361]
[50.62556076 -55.16616440]
[60.60586548 -45.11409760]
[68.41452026 -33.28945160]
[73.74413300 -20.15402031]
[76.38415527 -6.22127151]
[76.22924042 7.96372747]
[73.28340912 21.84563446]
[67.65998840 34.88056564]
[59.57724762 46.55741882]
[69.90814972 57.43273163]
[80.23905182 68.30804443]
[90.56995392 79.18335724]
[105.34632874 77.78120422]
[117.86742401 85.75172424]
[132.01473999 80.76640320]
[146.16206360 75.78108215]
[145.48249817 65.26480103]
[149.57498169 54.45911026]
[158.46452332 45.56372833]
[171.16691589 40.70328903]
[185.77471924 41.47298813]
[198.44622803 33.44598770]
[211.11775208 25.41899300]
[223.78926086 17.39199448]
[228.69065857 2.11600304]
[243.74038696 -3.44141936]
[257.39361572 4.98290682]
[259.17672729 20.92655945]
[247.72187805 32.15893173]
[231.81625366 30.06351089]
[219.14474487 38.09050751]
[206.47323608 46.11750412]
[193.80171204 54.14450073]
[195.55628967 61.43637848]
[208.34188843 53.59235382]
[219.75294495 63.32825851]
[214.01974487 77.18936920]
[199.06546021 76.02012634]
[200.82005310 83.31200409]
[215.75605774 84.69602966]
[230.69207764 86.08005524]
[247.02153015 81.52095795]
[255.92289734 95.95016479]
[244.52172852 108.49806213]
[229.30804443 101.01606750]
[214.37203979 99.63204193]
[199.43601990 98.24801636]
[170.08354187 105.86566925]
[151.14738464 89.92839813]
[137.00006104 94.91371918]
[122.85274506 99.89904022]
[120.77516937 109.52104950]
[114.84298706 117.37653351]
[106.15684509 122.00798798]
[105.23342896 136.97953796]
[104.31002045 151.95108032]
[103.54035950 166.93132019]
[102.92453003 181.91868591]
[102.30870819 196.90603638]
[101.69287872 211.89338684]
[101.07705688 226.88073730]
[100.46123505 241.86808777]
[99.84540558 256.85543823]
[99.22958374 271.84280396]
[98.61375427 286.83013916]
[97.99793243 301.81750488]
[97.38210297 316.80487061]
[111.89262390 320.87197876]
[125.07376862 328.17639160]
[136.21470642 338.32409668]
[144.71461487 350.76791382]
[150.11509705 364.83673096]
[152.12492371 379.77182007]
[150.63569641 394.76779175]
[145.72773743 409.01589966]
[137.66571045 421.74777222]
[126.88442230 432.27679443]
[113.96526337 440.03515625]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[26 130]
[27 129]
[28 128]
[30 86]
[31 85]
[32 84]
[33 83]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[88 125]
[89 124]
[90 123]
[95 107]
[96 106]
[97 105]
[98 104]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
