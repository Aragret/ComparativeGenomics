%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUUCCCCCGGGGGGGGGGGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCCACACCCACCCAAGAACAxxxxxxxxxxGCUAACAUGACUAACACCCUUAAUUCCAUCCACCCUCCUCUCCCUAGGAGCCCCCCCCCCGCCUGCCCCCG\
) } def
/len { sequence length } bind def

/coor [
[68.16273499 353.21292114]
[55.60905457 344.85491943]
[45.52893448 333.63699341]
[38.55601120 320.26428223]
[35.12861633 305.57742310]
[35.46219254 290.49966431]
[39.53577805 275.97875977]
[47.09329605 262.92752075]
[57.65967941 252.16636658]
[70.57071686 244.37174988]
[85.01480865 240.03366089]
[84.39897919 225.04629517]
[83.78315735 210.05894470]
[83.16732788 195.07159424]
[82.55150604 180.08424377]
[81.93567657 165.09689331]
[81.31985474 150.10952759]
[80.70403290 135.12217712]
[80.08820343 120.13482666]
[87.85563660 91.55179596]
[82.43701172 77.56471252]
[77.01838684 63.57762527]
[62.83777237 57.13186264]
[57.54176712 42.86978149]
[63.77420807 29.39045334]
[58.35558319 15.40336990]
[52.93695831 1.41628683]
[38.56909561 5.75072145]
[23.91159630 8.97258186]
[9.05046940 11.06296158]
[-5.92706823 12.00959206]
[-20.93312263 11.80691910]
[-35.87963104 10.45613098]
[-50.67888260 7.96515608]
[-65.24402618 4.34861183]
[-79.48957825 -0.37227833]
[-93.33195496 -6.16980934]
[-106.68991852 -13.00995922]
[-119.48506927 -20.85258675]
[-131.64233398 -29.65166664]
[-143.09034729 -39.35556412]
[-153.76194763 -49.90732956]
[-163.59449768 -61.24504089]
[-172.53030396 -73.30216217]
[-180.51690674 -86.00794220]
[-187.50746155 -99.28781128]
[-193.46093750 -113.06384277]
[-198.34237671 -127.25518036]
[-202.12316895 -141.77854919]
[-204.78109741 -156.54873657]
[-206.30058289 -171.47903442]
[-206.67268372 -186.48184204]
[-205.89524841 -201.46911621]
[-203.97280884 -216.35290527]
[-200.91667175 -231.04585266]
[-196.74475098 -245.46174622]
[-191.48155212 -259.51596069]
[-185.15794373 -273.12606812]
[-177.81103516 -286.21215820]
[-169.48394775 -298.69744873]
[-160.22555542 -310.50866699]
[-150.09017944 -321.57650757]
[-139.13731384 -331.83599854]
[-127.43121338 -341.22695923]
[-115.04058838 -349.69424438]
[-102.03815460 -357.18820190]
[-88.50020599 -363.66485596]
[-74.50620270 -369.08615112]
[-60.13825989 -373.42031860]
[-45.48069763 -376.64190674]
[-30.61952972 -378.73199463]
[-15.64197445 -379.67834473]
[-0.63592380 -379.47537231]
[14.31055927 -378.12432861]
[29.10976219 -375.63305664]
[43.67483521 -372.01623535]
[57.92030334 -367.29507446]
[71.76257324 -361.49728394]
[85.12039948 -354.65689087]
[97.91540527 -346.81402588]
[110.07249451 -338.01470947]
[121.52033234 -328.31057739]
[132.19172668 -317.75860596]
[142.02406311 -306.42071533]
[150.95964050 -294.36343384]
[158.94599915 -281.65750122]
[165.93630981 -268.37750244]
[171.88951111 -254.60136414]
[176.77070618 -240.40992737]
[180.55120850 -225.88647461]
[183.20886230 -211.11624146]
[184.72805786 -196.18591309]
[185.09988403 -181.18310547]
[184.32215881 -166.19584656]
[182.39942932 -151.31210327]
[179.34301758 -136.61920166]
[175.17082214 -122.20339203]
[169.90734863 -108.14926147]
[163.58348083 -94.53928375]
[156.23632812 -81.45333862]
[147.90901184 -68.96820831]
[138.65039062 -57.15716171]
[128.51481628 -46.08951950]
[117.56174469 -35.83023071]
[105.85546875 -26.43949699]
[93.46468353 -17.97242928]
[80.46211243 -10.47871780]
[66.92404175 -4.00233793]
[72.34266663 9.98474503]
[77.76129150 23.97182846]
[91.44808197 29.73440361]
[97.14259338 43.84210587]
[91.00547028 58.15900040]
[96.42409515 72.14608765]
[101.84272003 86.13317108]
[112.50363159 96.68518066]
[126.54560852 101.95992279]
[140.58758545 107.23466492]
[154.62956238 112.50940704]
[168.67153931 117.78414917]
[182.95750427 111.02497101]
[197.81033325 116.42580414]
[204.41810608 130.78244019]
[198.86053467 145.57734680]
[184.43484497 152.03294373]
[169.69952393 146.31927490]
[163.39678955 131.82612610]
[149.35481262 126.55138397]
[135.31283569 121.27664185]
[121.27086639 116.00189972]
[107.22888947 110.72715759]
[95.07555389 119.51900482]
[95.69138336 134.50636292]
[96.30720520 149.49371338]
[96.92303467 164.48106384]
[97.53885651 179.46841431]
[98.15468597 194.45576477]
[98.77050781 209.44311523]
[99.38633728 224.43048096]
[100.00215912 239.41783142]
[114.75346375 242.55628967]
[128.26045227 249.26539612]
[139.67407227 259.12338257]
[148.27684021 271.51062012]
[153.52799988 285.64837646]
[155.09745789 300.64794922]
[152.88653564 315.56649780]
[147.03422546 329.46618652]
[137.90841675 341.47326660]
[126.08274841 350.83300781]
[112.30060577 356.95700073]
[97.42833710 359.46029663]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 115]
[21 114]
[22 113]
[25 110]
[26 109]
[27 108]
[116 131]
[117 130]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
