%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGCCCACUAGGGGGGGGGGAGCCAAUCACUUUAUUGACUCCUAGCCGCAGACCUCCUCAUUCUAACCUGxxxxxxxxxxGCAAUCAACCCUCAACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCCCCCCCCCCCUCACCCACUA\
) } def
/len { sequence length } bind def

/coor [
[73.96239471 436.04025269]
[62.74696350 425.97494507]
[54.15556335 413.59411621]
[48.65151978 399.56549072]
[46.53166199 384.64559937]
[47.91030502 369.63906860]
[52.71310425 355.35516357]
[60.68105316 342.56420898]
[71.38444519 331.95602417]
[84.24606323 324.10263062]
[98.57228851 319.42761230]
[97.32541656 304.47952271]
[96.07854462 289.53143311]
[94.83166504 274.58334351]
[93.58479309 259.63525391]
[92.33792114 244.68717957]
[91.09104156 229.73908997]
[89.84416962 214.79100037]
[88.59729767 199.84292603]
[87.35041809 184.89483643]
[76.57362366 171.07960510]
[84.47540283 154.48014832]
[82.91781616 139.56123352]
[70.39185333 131.30894470]
[56.06925964 135.76576233]
[41.74666214 140.22257996]
[27.42406464 144.67939758]
[20.29664993 158.78526306]
[5.25657463 163.64033508]
[-8.77314854 156.36418152]
[-13.46893597 141.27362061]
[-6.04485846 127.32160187]
[9.09450912 122.78562164]
[22.96724892 130.35679626]
[37.28984451 125.89997864]
[51.61244202 121.44316101]
[65.93504333 116.98635101]
[63.24046326 106.50664520]
[63.63330841 95.90312195]
[66.96222687 86.04920197]
[72.83886719 77.72289276]
[80.67922974 71.54548645]
[89.75987244 67.93561554]
[99.28388977 67.08216858]
[102.38221741 52.40564728]
[94.02220154 39.26228333]
[97.37341309 24.42233658]
[109.95511627 16.53334045]
[113.05344391 1.85681581]
[116.15176392 -12.81970978]
[119.25008392 -27.49623489]
[104.96436310 -32.11531067]
[91.23973083 -38.20236969]
[78.22657013 -45.69071579]
[66.06745911 -54.49830627]
[54.89561462 -64.52864075]
[44.83344269 -75.67182159]
[35.99119568 -87.80575562]
[28.46574593 -100.79749298]
[22.33955002 -114.50469971]
[17.67973137 -128.77717590]
[14.53734493 -143.45857239]
[12.94681931 -158.38800049]
[12.92558098 -173.40190125]
[14.47386360 -188.33576965]
[17.57470322 -203.02598572]
[22.19412613 -217.31159973]
[28.28151703 -231.03608704]
[35.77017975 -244.04905701]
[44.57806778 -256.20797729]
[54.60867310 -267.37957764]
[65.75209808 -277.44146729]
[77.88624573 -286.28341675]
[90.87816620 -293.80856323]
[104.58551788 -299.93441772]
[118.85811615 -304.59387207]
[133.53958130 -307.73590088]
[148.46905518 -309.32608032]
[163.48295593 -309.34695435]
[178.41679382 -307.79830933]
[193.10693359 -304.69711304]
[207.39242554 -300.07733154]
[221.11676025 -293.98962402]
[234.12956238 -286.50064087]
[246.28823853 -277.69244385]
[257.45959473 -267.66159058]
[267.52124023 -256.51791382]
[276.36288452 -244.38354492]
[283.88769531 -231.39144897]
[290.01324463 -217.68394470]
[294.67236328 -203.41122437]
[297.81402588 -188.72969055]
[299.40383911 -173.80018616]
[299.42434692 -158.78627014]
[297.87533569 -143.85247803]
[294.77377319 -129.16241455]
[290.15365601 -114.87702942]
[284.06561279 -101.15283966]
[276.57632446 -88.14022827]
[267.76782227 -75.98175812]
[257.73669434 -64.81064606]
[246.59277344 -54.74928284]
[234.45820618 -45.90791702]
[221.46591187 -38.38341522]
[207.75825500 -32.25822067]
[193.48544312 -27.59944153]
[178.80381775 -24.45812416]
[163.87426758 -22.86868668]
[148.86036682 -22.84854317]
[133.92660522 -24.39791298]
[130.82829285 -9.72138786]
[127.72996521 4.95513773]
[124.63164520 19.63166237]
[132.95101929 31.93302917]
[130.01795959 46.86125183]
[117.05873871 55.50396729]
[113.96041870 70.18049622]
[126.41952515 78.94658661]
[133.85789490 92.68636322]
[134.41500854 108.69082642]
[127.62809753 123.62530518]
[114.60060883 134.22427368]
[97.83673096 138.00364685]
[99.39431000 152.92256165]
[108.92774963 161.67283630]
[109.88587952 174.17488098]
[102.29850769 183.64796448]
[103.54537964 198.59603882]
[104.79225922 213.54412842]
[106.03913116 228.49221802]
[107.28600311 243.44030762]
[108.53288269 258.38839722]
[109.77975464 273.33648682]
[111.02662659 288.28457642]
[112.27350616 303.23266602]
[113.52037811 318.18072510]
[128.42315674 320.41766357]
[142.40814209 326.03167725]
[154.72113037 334.72000122]
[164.69808960 346.01409912]
[171.80101013 359.30490112]
[175.64678955 373.87564087]
[176.02807617 388.94055176]
[172.92428589 403.68719482]
[166.50279236 417.32028198]
[157.10992432 429.10461426]
[145.25221252 438.40469360]
[131.56912231 444.71896362]
[116.79858398 447.70687866]
[101.73713684 447.20733643]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[22 124]
[23 123]
[24 37]
[25 36]
[26 35]
[27 34]
[44 117]
[45 116]
[48 113]
[49 112]
[50 111]
[51 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
