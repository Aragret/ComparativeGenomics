%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUACCCUCGGGGGGGGGGCUACAAGCCUCAGAGUACUUCGAGUCUCCCUUCACCAUUUCCGACGGCAUxxxxxxxxxxGCAGACCUCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUAAGCUACCCCCCCCCCCCCUUUUACCAUC\
) } def
/len { sequence length } bind def

/coor [
[78.11073303 453.80691528]
[64.26479340 447.79086304]
[52.55612946 438.26144409]
[43.85360718 425.92578125]
[38.80300522 411.69927979]
[37.77911377 396.63757324]
[40.85791016 381.85842896]
[47.81093216 368.45849609]
[58.12221909 357.43215942]
[71.02659607 349.59765625]
[85.56648254 345.53634644]
[85.56648254 330.53634644]
[85.56648254 315.53634644]
[85.56648254 300.53634644]
[85.56648254 285.53634644]
[85.56648254 270.53634644]
[85.56648254 255.53634644]
[85.56648254 240.53634644]
[85.56648254 225.53634644]
[85.56648254 210.53634644]
[73.28654480 204.48139954]
[64.78350067 193.66578674]
[61.76914978 180.17425537]
[64.89024353 166.63897705]
[73.59075165 155.72604370]
[86.20993042 149.61030579]
[86.52198029 134.61355591]
[86.83403778 119.61679840]
[76.06323242 109.17698669]
[61.08351898 109.95683289]
[46.10380173 110.73667145]
[37.63284683 114.32760620]
[30.80498314 111.37363434]
[15.81228828 111.84167480]
[3.82387900 122.50270844]
[-11.96078300 119.63495636]
[-19.43305588 105.43830872]
[-12.86085224 90.80323029]
[2.71419668 86.95648956]
[15.34424591 96.84898376]
[30.33694267 96.38093567]
[45.32395935 95.75695801]
[60.30367279 94.97711945]
[75.28338623 94.19727325]
[83.00746918 81.33886719]
[76.66033936 67.74791718]
[70.31320953 54.15696716]
[55.81028748 58.12851715]
[40.84476471 59.59176636]
[25.84722710 58.50461197]
[11.24918747 54.89833450]
[-2.52934098 48.87669373]
[-15.09192276 40.61294556]
[-26.07710648 30.34485245]
[-35.16882706 18.36784744]
[-42.10549927 5.02653599]
[-46.68753815 -9.29522800]
[-48.78311157 -24.18537903]
[-48.33192062 -39.21549606]
[-45.34695435 -53.95313644]
[-39.91409302 -67.97426605]
[-32.18965149 -80.87546539]
[-22.39587593 -92.28554535]
[-10.81455326 -101.87621307]
[2.22109890 -109.37153625]
[16.33601761 -114.55584717]
[31.12409019 -117.27998352]
[46.15983200 -117.46556854]
[61.01063919 -115.10726929]
[75.24922180 -110.27292633]
[88.46590424 -103.10164642]
[100.28041840 -93.79975128]
[110.35283661 -82.63488007]
[118.39336395 -69.92826843]
[124.17064667 -56.04550552]
[127.51846313 -41.38603592]
[128.34048462 -26.37163353]
[126.61308289 -11.43429470]
[122.38593292 2.99620223]
[115.78067780 16.50466347]
[106.98734283 28.70242500]
[96.25894928 39.23852921]
[83.90416718 47.80983734]
[90.25128937 61.40078735]
[96.59841919 74.99173737]
[111.05310822 78.99948120]
[123.49255371 70.61733246]
[135.93199158 62.23519135]
[148.37142944 53.85305023]
[160.81086731 45.47090530]
[164.05833435 32.94461823]
[174.64561462 26.22684860]
[186.57241821 28.47599983]
[199.18354797 20.35445786]
[211.79467773 12.23291588]
[224.40580750 4.11137438]
[227.50526428 -11.38600922]
[240.70137024 -20.08302498]
[256.16513062 -16.81988907]
[264.72213745 -3.53256249]
[261.29568481 11.89582157]
[247.91864014 20.31187439]
[232.52734375 16.72250175]
[219.91621399 24.84404373]
[207.30508423 32.96558762]
[194.69395447 41.08712769]
[187.55892944 57.08998108]
[169.19300842 57.91034698]
[156.75357056 66.29248810]
[144.31413269 74.67462921]
[131.87469482 83.05677795]
[119.43525696 91.43891907]
[122.68608093 106.08242035]
[137.50384521 108.41352081]
[151.26730347 100.17054749]
[166.24220276 105.92656708]
[170.94108582 121.26605988]
[161.75936890 134.42187500]
[145.74047852 135.30200195]
[135.17272949 123.23128510]
[120.35497284 120.90017700]
[113.54860687 122.33193207]
[107.22242737 121.90675354]
[101.83079529 119.92885590]
[101.51873779 134.92561340]
[101.20668030 149.92236328]
[115.41732788 158.31498718]
[123.42723846 172.63758850]
[123.14183044 188.95164490]
[114.73293304 202.82508850]
[100.56648254 210.53634644]
[100.56648254 225.53634644]
[100.56648254 240.53634644]
[100.56648254 255.53634644]
[100.56648254 270.53634644]
[100.56648254 285.53634644]
[100.56648254 300.53634644]
[100.56648254 315.53634644]
[100.56648254 330.53634644]
[100.56648254 345.53634644]
[115.10637665 349.59765625]
[128.01075745 357.43215942]
[138.32203674 368.45849609]
[145.27505493 381.85842896]
[148.35385132 396.63757324]
[147.32997131 411.69927979]
[142.27937317 425.92578125]
[133.57684326 438.26144409]
[121.86817932 447.79086304]
[108.02223969 453.80691528]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 126]
[27 125]
[28 124]
[29 44]
[30 43]
[31 42]
[33 41]
[34 40]
[45 85]
[46 84]
[47 83]
[86 112]
[87 111]
[88 110]
[89 109]
[90 108]
[93 106]
[94 105]
[95 104]
[96 103]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
