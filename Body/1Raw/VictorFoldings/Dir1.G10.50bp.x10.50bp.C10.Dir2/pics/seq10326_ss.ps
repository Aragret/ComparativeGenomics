%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCAAACUGGGGGGGGGGCAAACUACGAACGCACUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUUxxxxxxxxxxUCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCCCCCCCCCCCUAACAAACU\
) } def
/len { sequence length } bind def

/coor [
[75.04644775 443.43377686]
[61.55757141 436.70223999]
[50.07207108 426.93768311]
[41.25770187 414.70779419]
[35.62691879 400.72360229]
[33.50709152 385.79812622]
[35.02145767 370.79910278]
[40.08198166 356.59860229]
[48.39444733 344.02218628]
[59.47557831 333.80102539]
[72.68112946 326.52938843]
[87.24335480 322.63003540]
[86.93537903 307.63317871]
[86.62740326 292.63635254]
[86.31942749 277.63949585]
[86.01144409 262.64266968]
[85.70346832 247.64582825]
[85.39549255 232.64898682]
[85.08751678 217.65216064]
[84.77953339 202.65531921]
[84.47155762 187.65847778]
[73.06064606 197.39454651]
[58.09367752 196.39970398]
[48.07176971 185.23899841]
[48.68730164 170.25163269]
[59.59065247 159.95031738]
[74.58879852 160.18612671]
[85.16320801 170.82585144]
[86.70050049 155.90484619]
[88.23779297 140.98382568]
[73.58599091 133.47122192]
[62.87319946 120.96720886]
[57.69697571 105.33643341]
[42.71673584 104.56677246]
[33.92353439 107.26406097]
[27.43777657 103.62439728]
[12.47649574 102.54733276]
[-2.48478484 101.47026062]
[-18.71718788 106.36367035]
[-27.91293526 92.12026215]
[-16.77180672 79.34091949]
[-1.40771508 86.50897980]
[13.55356598 87.58605194]
[28.51484680 88.66311646]
[43.48639679 89.58653259]
[58.46663666 90.35619354]
[67.90679169 71.92778778]
[84.91509247 60.11931610]
[82.15885162 45.37472153]
[79.40261078 30.63012314]
[76.64636993 15.88552761]
[73.89012146 1.14093101]
[53.27415466 -6.05175781]
[41.81636047 -26.32608414]
[46.86924362 -50.54653549]
[38.20263672 -62.78948975]
[29.53602982 -75.03244019]
[20.86942291 -87.27539825]
[5.25105858 -89.69246674]
[-4.01611614 -102.49462128]
[-1.43405080 -118.08655548]
[11.46536064 -127.21785736]
[27.02912712 -124.47109222]
[36.02354050 -111.47586060]
[33.11237717 -95.94200134]
[41.77898407 -83.69905090]
[50.44559097 -71.45609283]
[59.11219788 -59.21314240]
[73.49668121 -63.46598816]
[74.11250305 -78.45334625]
[74.72833252 -93.44069672]
[61.23604965 -100.57659912]
[52.18299103 -112.86500549]
[49.36664581 -127.86603546]
[53.34619904 -142.60122681]
[63.33150864 -154.14489746]
[77.33998871 -160.20504761]
[92.59023285 -159.57841492]
[106.05430603 -152.38943481]
[115.05890656 -140.06547546]
[117.81615448 -125.05346680]
[113.77861023 -110.33406067]
[103.74791718 -98.82980347]
[89.71568298 -92.82486725]
[89.09986115 -77.83751678]
[88.48403168 -62.85016251]
[99.82044220 -54.70838547]
[106.95025635 -43.18274689]
[109.04344177 -30.20221710]
[106.08384705 -17.80679512]
[98.82607269 -7.82734013]
[88.63471985 -1.61531174]
[91.39096069 13.12928486]
[94.14720917 27.87388039]
[96.90345001 42.61847687]
[99.65969086 57.36307526]
[105.75114441 57.75136185]
[111.72473907 59.00544357]
[117.45806122 61.09962463]
[122.83361816 63.99098587]
[127.74124908 67.62027740]
[132.08038330 71.91312408]
[135.76208496 76.78155518]
[138.71092224 82.12579346]
[140.86647034 87.83632660]
[142.18453979 93.79613495]
[157.17742920 94.25805664]
[172.17030334 94.71998596]
[178.38525391 80.84761047]
[189.43928528 70.41319275]
[203.64672852 65.00791931]
[218.84104919 65.45604706]
[232.70524597 71.68923950]
[243.12510681 82.75698090]
[248.51168823 96.97151947]
[248.04357910 112.16524506]
[241.79214478 126.02122498]
[230.71070862 136.42651367]
[216.48908997 141.79440308]
[201.29600525 141.30630493]
[187.44825745 135.03665161]
[177.05755615 123.94153595]
[171.70838928 109.71286774]
[156.71549988 109.25094604]
[141.72261047 108.78901672]
[134.26876831 125.37073517]
[120.58494568 137.34010315]
[103.15880585 142.52111816]
[101.62151337 157.44212341]
[100.08422089 172.36314392]
[99.46839905 187.35049438]
[99.77637482 202.34733582]
[100.08435059 217.34417725]
[100.39232635 232.34101868]
[100.70030975 247.33786011]
[101.00828552 262.33468628]
[101.31626129 277.33154297]
[101.62423706 292.32836914]
[101.93222046 307.32519531]
[102.24019623 322.32205200]
[116.95023346 325.62026978]
[130.44319153 332.34362793]
[141.93460083 342.10122681]
[150.75639343 354.32577515]
[156.39564514 368.30654907]
[158.52452087 383.23074341]
[157.01925659 398.23065186]
[151.96733093 412.43423462]
[143.66249084 425.01568604]
[132.58757019 435.24356079]
[119.38642120 442.52319336]
[104.82656097 446.43139648]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[28 130]
[29 129]
[30 128]
[33 46]
[34 45]
[36 44]
[37 43]
[38 42]
[48 96]
[49 95]
[50 94]
[51 93]
[52 92]
[55 68]
[56 67]
[57 66]
[58 65]
[69 86]
[70 85]
[71 84]
[106 125]
[107 124]
[108 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
