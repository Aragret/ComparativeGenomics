%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCACUAAGGGGGGGGGGACGUAAGCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUxxxxxxxxxxUAGCACUCGAAUAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCACCCCCCCCCCCCCUUACUAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 373.19613647]
[71.19830322 367.18011475]
[59.48964310 357.65069580]
[50.78712082 345.31503296]
[45.73651886 331.08850098]
[44.71262741 316.02682495]
[47.79142761 301.24768066]
[54.74444962 287.84774780]
[65.05573273 276.82141113]
[77.96011353 268.98690796]
[92.50000000 264.92559814]
[92.50000000 249.92558289]
[92.50000000 234.92558289]
[92.50000000 219.92558289]
[92.50000000 204.92558289]
[92.50000000 189.92558289]
[92.50000000 174.92558289]
[92.50000000 159.92558289]
[92.50000000 144.92558289]
[92.50000000 129.92558289]
[78.49035645 122.11618805]
[70.29449463 108.32907104]
[70.12764740 92.29071808]
[78.03491211 78.33607483]
[91.87905884 70.23692322]
[91.56700134 55.24016571]
[91.25494385 40.24341202]
[90.94288635 25.24665833]
[75.95277405 24.56681633]
[61.04036713 22.89775276]
[46.27087402 20.24676323]
[31.70887756 16.62544250]
[17.41805458 12.04962349]
[3.46089792 6.53931713]
[-10.10156250 0.11861857]
[-23.21002007 -7.18439627]
[-35.80715561 -15.33779335]
[-47.83788300 -24.30591774]
[-59.24959946 -34.04955673]
[-69.99239349 -44.52610397]
[-80.01930237 -55.68974304]
[-89.28647614 -67.49166107]
[-97.75337982 -79.88024902]
[-105.38300323 -92.80133820]
[-112.14198303 -106.19842529]
[-118.00076294 -120.01292419]
[-122.93371582 -134.18443298]
[-126.91927338 -148.65098572]
[-129.94001770 -163.34930420]
[-131.98272705 -178.21514893]
[-133.03848267 -193.18348694]
[-133.10264587 -208.18887329]
[-132.17495728 -223.16567993]
[-130.25947571 -238.04844666]
[-127.36456299 -252.77207947]
[-123.50287628 -267.27218628]
[-118.69131470 -281.48535156]
[-112.95090485 -295.34945679]
[-106.30676270 -308.80386353]
[-98.78793335 -321.78976440]
[-90.42729187 -334.25030518]
[-81.26140594 -346.13104248]
[-71.33034515 -357.38003540]
[-60.67754745 -367.94808960]
[-49.34959030 -377.78897095]
[-37.39600754 -386.85968018]
[-24.86906815 -395.12051392]
[-11.82355309 -402.53536987]
[1.68349504 -409.07183838]
[15.59301186 -414.70132446]
[29.84417343 -419.39920044]
[44.37466431 -423.14495850]
[59.12094498 -425.92214966]
[74.01853180 -427.71871948]
[89.00228119 -428.52673340]
[104.00667572 -428.34271240]
[118.96610260 -427.16744995]
[133.81513977 -425.00604248]
[148.48887634 -421.86798096]
[162.92312622 -417.76699829]
[177.05477905 -412.72100830]
[190.82205200 -406.75207520]
[204.16471863 -399.88632202]
[217.02444458 -392.15371704]
[229.34501648 -383.58813477]
[241.07254028 -374.22698975]
[252.15573120 -364.11123657]
[262.54611206 -353.28509521]
[272.19830322 -341.79589844]
[281.07003784 -329.69393921]
[289.12255859 -317.03207397]
[296.32064819 -303.86569214]
[302.63281250 -290.25238037]
[308.03143311 -276.25164795]
[312.49298096 -261.92474365]
[315.99786377 -247.33428955]
[318.53079224 -232.54408264]
[320.08068848 -217.61882019]
[320.64077759 -202.62374878]
[320.20858765 -187.62445068]
[318.78604126 -172.68650818]
[316.37936401 -157.87525940]
[312.99902344 -143.25543213]
[308.65985107 -128.89099121]
[303.38079834 -114.84472656]
[297.18499756 -101.17807770]
[290.09945679 -87.95079041]
[282.15521240 -75.22071075]
[273.38702393 -63.04351044]
[263.83319092 -51.47242737]
[253.53549194 -40.55806732]
[242.53898621 -30.34815407]
[230.89172363 -20.88733101]
[218.64466858 -12.21696949]
[205.85134888 -4.37498379]
[192.56771851 2.60433507]
[178.85185242 8.69046783]
[164.76374817 13.85680199]
[150.36500549 18.08074570]
[135.71856689 21.34382820]
[120.88850403 23.63178253]
[105.93964386 24.93460274]
[106.25170135 39.93135452]
[106.56375885 54.92810822]
[106.87580872 69.92486572]
[119.15737915 75.81766510]
[127.70401001 86.42507935]
[130.84944153 99.67906952]
[127.98042297 112.99563599]
[119.65631866 123.77855682]
[107.50000000 129.92558289]
[107.50000000 144.92558289]
[107.50000000 159.92558289]
[107.50000000 174.92558289]
[107.50000000 189.92558289]
[107.50000000 204.92558289]
[107.50000000 219.92558289]
[107.50000000 234.92558289]
[107.50000000 249.92558289]
[107.50000000 264.92559814]
[122.03988647 268.98690796]
[134.94427490 276.82141113]
[145.25555420 287.84774780]
[152.20857239 301.24768066]
[155.28736877 316.02682495]
[154.26348877 331.08850098]
[149.21287537 345.31503296]
[140.51036072 357.65069580]
[128.80169678 367.18011475]
[114.95575714 373.19613647]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 125]
[26 124]
[27 123]
[28 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
