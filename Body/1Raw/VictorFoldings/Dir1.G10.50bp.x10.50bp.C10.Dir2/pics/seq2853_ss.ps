%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAAACCCAGGGGGGGGGGCAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCUxxxxxxxxxxCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAACCCCCCCCCCACCAAACCCA\
) } def
/len { sequence length } bind def

/coor [
[49.53973007 399.18090820]
[36.31953430 391.90844727]
[25.43272972 381.46145630]
[17.62159920 368.55221558]
[13.41871738 354.06088257]
[13.11064529 338.97555542]
[16.71838570 324.32473755]
[23.99595833 311.10733032]
[34.44716644 300.22457886]
[47.35942841 292.41842651]
[61.85236359 288.22113037]
[61.54030991 273.22439575]
[61.22825241 258.22763062]
[60.91619492 243.23088074]
[60.60414124 228.23411560]
[60.29208374 213.23736572]
[59.98002625 198.24061584]
[59.66797256 183.24386597]
[59.35591507 168.24710083]
[47.46353531 159.10537720]
[32.89083099 162.66014099]
[18.31813049 166.21488953]
[3.74542713 169.76965332]
[-10.82727528 173.32441711]
[-25.39997864 176.87918091]
[-28.07915878 191.87057495]
[-36.62963486 204.47253418]
[-49.56998444 212.50167847]
[-64.65821075 214.56692505]
[-79.28019714 210.31045532]
[-90.90258026 200.46972656]
[-97.51172638 186.74969482]
[-97.96255493 171.52745056]
[-92.17695618 157.44033813]
[-81.15731812 146.92903137]
[-66.81286621 141.81468201]
[-51.62886429 142.98338318]
[-38.23602295 150.23263550]
[-28.95474052 162.30647278]
[-14.38203716 158.75170898]
[0.19066522 155.19696045]
[14.76336765 151.64219666]
[29.33607101 148.08743286]
[43.90877533 144.53266907]
[55.71910477 142.39680481]
[65.04251862 145.94520569]
[72.49742889 132.92889404]
[79.95233917 119.91258240]
[87.40724945 106.89627838]
[90.81022644 92.28738403]
[89.87460327 77.31658936]
[88.78328705 62.35634232]
[87.53641510 47.40825653]
[86.28954315 32.46016693]
[81.24078369 18.33536530]
[72.72969818 5.98379230]
[64.21860504 -6.36778021]
[50.01711655 -13.34117794]
[49.16677475 -28.21149063]
[35.20076752 -37.82330704]
[40.57077408 -53.90433121]
[57.50991440 -53.19585419]
[61.51834488 -36.72257996]
[75.11106873 -30.63265038]
[76.57017517 -14.87887001]
[85.08126831 -2.52729774]
[93.59236145 9.82427502]
[92.75640869 -5.15241337]
[95.33206177 -19.92962646]
[101.18562317 -33.74034119]
[110.01325226 -45.86770248]
[121.35675812 -55.68223190]
[134.62733459 -62.67449570]
[149.13616943 -66.48155975]
[164.13017273 -66.90580750]
[178.83105469 -63.92523193]
[192.47576904 -57.69452667]
[204.35607910 -48.53711319]
[213.85533142 -36.92830658]
[220.48043823 -23.47067261]
[223.88754272 -8.86273956]
[223.89978027 6.13725519]
[220.51651001 20.75072670]
[213.91337585 34.21915054]
[204.43307495 45.84344101]
[192.56773376 55.02022934]
[178.93319702 61.27318954]
[164.23718262 64.27774811]
[149.24252319 63.87796402]
[134.72749329 60.09457779]
[121.44552612 53.12397766]
[110.08602142 43.32796860]
[101.23762512 31.21329308]
[102.48450470 46.16138077]
[103.73137665 61.10946655]
[107.44562531 67.55539703]
[104.84539032 76.38095856]
[105.78102112 91.35175323]
[109.32411194 90.96500397]
[113.20558167 91.76208496]
[128.20477295 91.60604858]
[143.20396423 91.45001221]
[158.20314026 91.29397583]
[173.19584656 90.82593536]
[188.17555237 90.04608917]
[203.15527344 89.26624298]
[209.49589539 75.33588409]
[221.59111023 65.95695496]
[236.66152954 63.28467560]
[251.24407959 67.93311310]
[261.98779297 78.83408356]
[266.42382812 93.48263550]
[263.53286743 108.51263428]
[253.97917175 120.47029114]
[239.95814514 126.60783386]
[224.69171143 125.51489258]
[211.68797302 117.44261932]
[203.93511963 104.24596405]
[188.95539856 105.02580261]
[173.97569275 105.80564880]
[170.13298035 108.73977661]
[164.39071655 109.24749756]
[158.35917664 106.29316711]
[143.36000061 106.44920349]
[128.36080933 106.60523987]
[113.36161804 106.76127625]
[100.42356110 114.35118866]
[92.96865082 127.36749268]
[85.51374054 140.38380432]
[78.05883026 153.40011597]
[74.35266876 167.93504333]
[74.66472626 182.93180847]
[74.97678375 197.92855835]
[75.28884125 212.92530823]
[75.60089111 227.92205811]
[75.91294861 242.91882324]
[76.22500610 257.91555786]
[76.53706360 272.91232300]
[76.84912109 287.90908813]
[91.50411224 291.49984741]
[104.72991943 298.76211548]
[115.62478638 309.20071411]
[123.44588470 322.10391235]
[127.65995789 336.59197998]
[127.97967529 351.67706299]
[124.38324738 366.33068848]
[117.11589050 379.55368042]
[106.67308807 390.44451904]
[93.76685333 398.26062012]
[79.27716827 402.46911621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 44]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[46 130]
[47 129]
[48 128]
[49 127]
[50 98]
[51 97]
[52 95]
[53 94]
[54 93]
[55 67]
[56 66]
[57 65]
[59 63]
[100 126]
[101 125]
[102 124]
[103 123]
[104 120]
[105 119]
[106 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
