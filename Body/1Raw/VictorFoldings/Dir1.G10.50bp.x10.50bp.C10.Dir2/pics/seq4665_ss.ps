%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUCAUCUACGGGGGGGGGGUCUACCAUCUUUGCAGGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUxxxxxxxxxxACCCUCCUACAAGCCUCAGAGUACUUCGAGUCUCCCUUCACCAUUUCCGACCCCCCCCCCCGGCAUCUAC\
) } def
/len { sequence length } bind def

/coor [
[82.00281525 568.90917969]
[68.15687561 562.89318848]
[56.44821167 553.36376953]
[47.74568939 541.02807617]
[42.69508743 526.80157471]
[41.67119598 511.73989868]
[44.74999237 496.96072388]
[51.70301437 483.56079102]
[62.01430130 472.53445435]
[74.91867828 464.69995117]
[89.45856476 460.63864136]
[89.45856476 445.63864136]
[89.45856476 430.63864136]
[89.45856476 415.63864136]
[89.45856476 400.63864136]
[89.45856476 385.63864136]
[89.45856476 370.63864136]
[89.45856476 355.63864136]
[89.45856476 340.63864136]
[89.45856476 325.63864136]
[89.45856476 310.63864136]
[89.45856476 295.63864136]
[75.76774597 291.55706787]
[63.77365875 283.76632690]
[54.45778656 272.89321899]
[48.58548355 259.81716919]
[46.64309692 245.59915161]
[48.79770660 231.39561462]
[54.88278580 218.36439514]
[64.41104126 207.57029724]
[76.61342621 199.89817810]
[90.50119019 195.98033142]
[90.81324768 180.98358154]
[83.34239960 168.09809875]
[91.36511993 154.46186829]
[91.67717743 139.46511841]
[91.98923492 124.46836853]
[76.93366241 114.50698853]
[71.49680328 96.22808838]
[79.46076965 77.78588104]
[98.30949402 68.28797150]
[95.82437897 53.49526596]
[93.33925629 38.70256042]
[90.85414124 23.90985298]
[84.08602142 10.52356720]
[73.64620972 -0.24724098]
[63.20639801 -11.01804924]
[52.76658630 -21.78885841]
[37.19519424 -22.20056915]
[26.76117516 -33.27241898]
[27.24963951 -48.11482620]
[16.80982780 -58.88563156]
[6.37001467 -69.65644073]
[-9.21343327 -68.35637665]
[-21.95681953 -77.41950226]
[-25.84310532 -92.56647491]
[-19.03730583 -106.64536285]
[-4.75291252 -113.00854492]
[10.26542187 -108.65152740]
[18.92650032 -95.63154602]
[17.14082336 -80.09625244]
[27.58063507 -69.32544708]
[38.02044678 -58.55463791]
[52.87086868 -58.57973862]
[63.61175537 -47.80532837]
[63.53739548 -32.22867203]
[73.97721100 -21.45786285]
[84.41702271 -10.68705368]
[94.85683441 0.08375508]
[91.73311615 -14.58738613]
[91.56906128 -29.58648872]
[94.37113953 -44.32244110]
[100.02893066 -58.21450806]
[108.31945038 -70.71520233]
[118.91596985 -81.33187103]
[131.40089417 -89.64611816]
[145.28218079 -95.33028412]
[160.01278687 -98.16035461]
[175.01217651 -98.02479553]
[189.68922424 -94.92894745]
[203.46551514 -88.99481964]
[215.79812622 -80.45627594]
[226.20103455 -69.64981842]
[234.26426697 -57.00132751]
[239.67004395 -43.00927353]
[242.20532227 -28.22508430]
[241.77020264 -13.23139572]
[238.38183594 1.38089073]
[232.17373657 15.03590965]
[223.39057922 27.19551849]
[212.37849426 37.38051224]
[199.57147217 45.18950272]
[185.47424316 50.31473541]
[170.64236450 52.55422974]
[155.66035461 51.81972885]
[141.11866760 48.14017868]
[127.59036255 41.66058350]
[115.60860443 32.63631058]
[105.64684296 21.42473412]
[108.13196564 36.21744156]
[110.61708069 51.01014709]
[113.10220337 65.80285645]
[125.71333313 73.92440033]
[140.20892334 70.06723785]
[154.70452881 66.21007538]
[168.45625305 56.29412079]
[181.79154968 66.76342010]
[175.42297363 82.47576141]
[158.56167603 80.70567322]
[144.06608582 84.56283569]
[129.57049561 88.41999054]
[130.22500610 101.33274078]
[125.74536896 112.79982758]
[117.38909149 120.97922516]
[106.98598480 124.78042603]
[106.67392731 139.77717590]
[106.36187744 154.77392578]
[113.81040192 168.73208618]
[105.81000519 181.29563904]
[105.49794769 196.29238892]
[120.43332672 201.41178894]
[133.04635620 210.87608337]
[142.11462402 223.75309753]
[146.76385498 238.78056335]
[146.55224609 254.48999023]
[141.51235962 269.35003662]
[132.14688110 281.91592407]
[119.37837982 290.96975708]
[104.45856476 295.63864136]
[104.45856476 310.63864136]
[104.45856476 325.63864136]
[104.45856476 340.63864136]
[104.45856476 355.63864136]
[104.45856476 370.63864136]
[104.45856476 385.63864136]
[104.45856476 400.63864136]
[104.45856476 415.63864136]
[104.45856476 430.63864136]
[104.45856476 445.63864136]
[104.45856476 460.63864136]
[118.99845123 464.69995117]
[131.90283203 472.53445435]
[142.21412659 483.56079102]
[149.16714478 496.96072388]
[152.24594116 511.73989868]
[151.22204590 526.80157471]
[146.17144775 541.02807617]
[137.46891785 553.36376953]
[125.76026154 562.89318848]
[111.91432190 568.90917969]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[32 120]
[33 119]
[35 117]
[36 116]
[37 115]
[41 102]
[42 101]
[43 100]
[44 99]
[45 69]
[46 68]
[47 67]
[48 66]
[51 63]
[52 62]
[53 61]
[103 111]
[104 110]
[105 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
