%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACUCCAAAGGGGGGGGGGUAAAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCxxxxxxxxxxCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCCCCCCCCCCCUACUCCAAA\
) } def
/len { sequence length } bind def

/coor [
[97.77269745 418.03576660]
[83.92675781 412.01974487]
[72.21809387 402.49032593]
[63.51556778 390.15466309]
[58.46496582 375.92813110]
[57.44107437 360.86645508]
[60.51987457 346.08728027]
[67.47290039 332.68737793]
[77.78417969 321.66104126]
[90.68856049 313.82653809]
[105.22844696 309.76519775]
[105.22844696 294.76519775]
[105.22844696 279.76519775]
[105.22844696 264.76519775]
[105.22844696 249.76521301]
[105.22844696 234.76521301]
[105.22844696 219.76521301]
[105.22844696 204.76521301]
[105.22844696 189.76521301]
[105.22844696 174.76521301]
[102.06287384 168.03285217]
[105.38773346 159.45396423]
[105.69979095 144.45721436]
[106.01184082 129.46046448]
[90.46416473 125.54313660]
[80.59850311 114.89956665]
[66.47369385 119.94832611]
[56.27835846 132.79306030]
[40.09875107 130.11868286]
[34.57906342 114.67636108]
[45.39748001 102.35183716]
[61.42494202 105.82351685]
[75.54974365 100.77476501]
[76.27416992 94.04180145]
[78.81674194 87.76542664]
[82.98262024 82.42660522]
[76.35412598 68.97064209]
[69.72562408 55.51467514]
[55.57523346 60.54288101]
[40.93677139 63.89429092]
[26.00820923 65.52358246]
[10.99144173 65.40872192]
[-3.91044950 63.55125809]
[-18.49593163 59.97631454]
[-32.56775284 54.73223877]
[-45.93561172 47.88994598]
[-58.41871643 39.54197693]
[-69.84825134 29.80122566]
[-80.06964874 18.79942513]
[-88.94466400 6.68535995]
[-96.35328674 -6.37713909]
[-102.19531250 -20.21141624]
[-106.39173889 -34.63037872]
[-108.88581848 -49.43902969]
[-109.64381409 -64.43709564]
[-108.65547943 -79.42174530]
[-105.93418121 -94.19033051]
[-101.51671600 -108.54311371]
[-95.46283722 -122.28600311]
[-87.85440063 -135.23313904]
[-78.79431152 -147.20942688]
[-68.40509796 -158.05288696]
[-56.82725525 -167.61688232]
[-44.21736908 -175.77207947]
[-30.74596596 -182.40818787]
[-16.59523582 -187.43545532]
[-1.95655107 -190.78588867]
[12.97211838 -192.41418457]
[27.98887825 -192.29830933]
[42.89064789 -190.43984985]
[57.47589111 -186.86393738]
[71.54736328 -181.61892700]
[84.91476440 -174.77574158]
[97.39730835 -166.42694092]
[108.82619476 -156.68542480]
[119.04685211 -145.68293762]
[127.92106628 -133.56828308]
[135.32881165 -120.50528717]
[141.16992188 -106.67062378]
[145.36538696 -92.25138092]
[147.85847473 -77.44256592]
[148.61546326 -62.44444656]
[147.62612915 -47.45986176]
[144.90385437 -32.69146347]
[140.48542786 -18.33896828]
[134.43063354 -4.59648228]
[126.82132721 8.35014343]
[117.76044464 20.32581902]
[107.37050629 31.16859055]
[95.79202271 40.73181915]
[83.18159485 48.88617706]
[89.81008911 62.34214020]
[96.43859100 75.79810333]
[119.10868835 80.55155945]
[129.81977844 103.85254669]
[144.75407410 102.45024109]
[159.68838501 101.04793549]
[171.33354187 82.17200470]
[197.11540222 80.64336395]
[210.63958740 74.15519714]
[219.44602966 60.32123184]
[235.81587219 61.30107880]
[242.90924072 76.08676147]
[233.42906189 89.46802521]
[217.12774658 87.67938995]
[203.60356140 94.16754913]
[206.70188904 108.84407806]
[221.69458008 109.31211853]
[236.68727112 109.78015900]
[251.67997742 110.24820709]
[266.67266846 110.71624756]
[279.30270386 100.82375336]
[294.87777710 104.67049408]
[301.44998169 119.30558014]
[293.97769165 133.50222778]
[278.19302368 136.36997986]
[266.20462036 125.70894623]
[251.21192932 125.24089813]
[236.21923828 124.77285767]
[221.22653198 124.30481720]
[206.23384094 123.83677673]
[193.33399963 132.19841003]
[179.02581787 132.78150940]
[167.35063171 126.47653961]
[161.09069824 115.98224640]
[146.15638733 117.38455200]
[131.22207642 118.78684998]
[121.00859833 129.77252197]
[120.69654083 144.76927185]
[120.38448334 159.76602173]
[120.22844696 174.76521301]
[120.22844696 189.76521301]
[120.22844696 204.76521301]
[120.22844696 219.76521301]
[120.22844696 234.76521301]
[120.22844696 249.76521301]
[120.22844696 264.76519775]
[120.22844696 279.76519775]
[120.22844696 294.76519775]
[120.22844696 309.76519775]
[134.76834106 313.82653809]
[147.67271423 321.66104126]
[157.98399353 332.68737793]
[164.93702698 346.08728027]
[168.01582336 360.86645508]
[166.99192810 375.92813110]
[161.94132996 390.15466309]
[153.23880005 402.49032593]
[141.53013611 412.01974487]
[127.68420410 418.03576660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[24 128]
[26 33]
[27 32]
[36 93]
[37 92]
[38 91]
[95 127]
[96 126]
[97 125]
[99 106]
[100 105]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
