%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACAUCAUGGGGGGGGGGCGAAACCGCAAACAUAUCAUACACAAACGCCUGAGCCCUAUCUAUUACUCxxxxxxxxxxCUUCAUAAAUUAUUCAGCUUCCUACACUAUUAAAGUUUACCACAACCACCCCCCCCCCCCACCCCAUCAU\
) } def
/len { sequence length } bind def

/coor [
[93.36286926 354.55371094]
[81.47859192 345.27862549]
[72.15988922 333.42849731]
[65.94852448 319.69232178]
[63.20561981 304.86871338]
[64.09064484 289.81945801]
[68.55215454 275.41949463]
[76.33074951 262.50607300]
[86.97420502 251.82991028]
[99.86371613 244.01173401]
[114.24990082 239.50605774]
[113.31427002 224.53526306]
[112.37864685 209.56448364]
[111.44301605 194.59368896]
[110.50738525 179.62289429]
[109.57176208 164.65209961]
[108.63613129 149.68130493]
[107.70050049 134.71052551]
[106.76486969 119.73972321]
[93.44971466 112.83272552]
[80.67236328 120.69015503]
[67.89500427 128.54757690]
[60.57266998 143.22120667]
[44.18956757 143.94648743]
[35.59922791 129.97729492]
[43.63865662 115.68395996]
[60.03757858 115.77022552]
[72.81493378 107.91279602]
[85.59229279 100.05537415]
[92.49929047 86.74021912]
[91.56365967 71.76942444]
[90.62803650 56.79863358]
[89.69240570 41.82783890]
[74.68648529 41.62873840]
[59.73859406 40.29532242]
[44.93436050 37.83522797]
[30.35857964 34.26254654]
[16.09474564 29.59774017]
[2.22455716 23.86753464]
[-11.17253590 17.10474968]
[-24.01979637 9.34812069]
[-36.24363327 0.64207900]
[-47.77403259 -8.96350765]
[-58.54494858 -19.41361809]
[-68.49468231 -30.64839554]
[-77.56623840 -42.60348511]
[-85.70766449 -55.21041489]
[-92.87231445 -68.39696503]
[-99.01916504 -82.08760071]
[-104.11299896 -96.20391846]
[-108.12463379 -110.66503906]
[-111.03110504 -125.38814545]
[-112.81575012 -140.28889465]
[-113.46834564 -155.28195190]
[-112.98516846 -170.28141785]
[-111.36898041 -185.20137024]
[-108.62902832 -199.95637512]
[-104.78102112 -214.46189880]
[-99.84699249 -228.63485718]
[-93.85520172 -242.39407349]
[-86.83997345 -255.66072083]
[-78.84149170 -268.35882568]
[-69.90557861 -280.41561890]
[-60.08340073 -291.76208496]
[-49.43123627 -302.33322144]
[-38.01008987 -312.06845093]
[-25.88538551 -320.91204834]
[-13.12657452 -328.81332397]
[0.19326249 -335.72702026]
[13.99782944 -341.61355591]
[28.20805550 -346.43920898]
[42.74254227 -350.17633057]
[57.51803589 -352.80349731]
[72.44990540 -354.30572510]
[87.45262146 -354.67431641]
[102.44025421 -353.90725708]
[117.32694244 -352.00885010]
[132.02742004 -348.99005127]
[146.45748901 -344.86807251]
[160.53448486 -339.66659546]
[174.17778015 -333.41537476]
[187.30923462 -326.15020752]
[199.85362244 -317.91275024]
[211.73908997 -308.75015259]
[222.89755249 -298.71493530]
[233.26510620 -287.86453247]
[242.78234863 -276.26110840]
[251.39479065 -263.97113037]
[259.05307007 -251.06500244]
[265.71334839 -237.61665344]
[271.33746338 -223.70310974]
[275.89318848 -209.40406799]
[279.35446167 -194.80143738]
[281.70144653 -179.97885132]
[282.92065430 -165.02120972]
[283.00515747 -150.01420593]
[281.95443726 -135.04377747]
[279.77453613 -120.19570923]
[276.47793579 -105.55501556]
[272.08349609 -91.20558167]
[266.61642456 -77.22958374]
[260.10800171 -63.70708847]
[252.59553528 -50.71554565]
[244.12203979 -38.32937622]
[234.73605347 -26.61952019]
[224.49134827 -15.65305614]
[213.44659424 -5.49279928]
[201.66506958 3.80305338]
[189.21423340 12.18125439]
[176.16543579 19.59381485]
[162.59338379 25.99827576]
[148.57585144 31.35795212]
[134.19311523 35.64214325]
[119.52756500 38.82630920]
[104.66320038 40.89221191]
[105.59882355 55.86300278]
[106.53445435 70.83379364]
[107.47008514 85.80458832]
[113.43886566 72.04328156]
[124.94347382 62.41809845]
[139.54220581 58.97183609]
[154.13673401 62.43591309]
[165.62957764 72.07513428]
[171.58155823 85.84371948]
[170.72947693 100.81949615]
[163.25415039 113.82408905]
[150.74211121 122.09747314]
[135.84884644 123.88375092]
[121.73566437 118.80410004]
[122.67129517 133.77488708]
[123.60691833 148.74568176]
[124.54254913 163.71647644]
[125.47817993 178.68727112]
[126.41381073 193.65805054]
[127.34943390 208.62884521]
[128.28506470 223.59963989]
[129.22068787 238.57043457]
[144.05592346 241.24984741]
[157.81855774 247.40235901]
[169.70845032 256.67025757]
[179.03434753 268.51470947]
[185.25402832 282.24710083]
[188.00592041 297.06906128]
[187.13002014 312.11886597]
[182.67724609 326.52151489]
[174.90647888 339.43966675]
[164.26950073 350.12228394]
[151.38473511 357.94827271]
[137.00128174 362.46264648]
[121.95537567 363.40298462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 29]
[21 28]
[22 27]
[30 118]
[31 117]
[32 116]
[33 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
