%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAGCCCUAGGGGGGGGGGAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCAxxxxxxxxxxUACUCCAAAGACCACAUCAUCGAAACCGCAAACAUAUCAUACACAAACGCCCCCCCCCCCCUGAGCCCUA\
) } def
/len { sequence length } bind def

/coor [
[91.54001617 366.41021729]
[77.69407654 360.39419556]
[65.98542023 350.86477661]
[57.28289413 338.52908325]
[52.23229218 324.30258179]
[51.20840073 309.24090576]
[54.28719711 294.46173096]
[61.24021912 281.06179810]
[71.55150604 270.03546143]
[84.45588684 262.20095825]
[98.99577332 258.13964844]
[98.99577332 243.13964844]
[98.99577332 228.13964844]
[98.99577332 213.13964844]
[98.99577332 198.13964844]
[98.99577332 183.13964844]
[98.99577332 168.13964844]
[98.99577332 153.13964844]
[98.99577332 138.13964844]
[98.99577332 123.13964844]
[91.80438995 136.30339050]
[86.82259369 150.45195007]
[74.07009888 158.34967041]
[59.18389511 156.50552368]
[48.74412155 145.73466492]
[47.36547470 130.79815674]
[55.65735245 118.29837036]
[69.95433044 113.76057434]
[83.33605194 106.98343658]
[68.34336090 106.51539612]
[53.35066223 106.04735565]
[38.35796738 105.57931519]
[23.36526871 105.11126709]
[15.34284019 118.20845032]
[1.83896923 125.52562714]
[-13.51387119 125.09450531]
[-26.58584404 117.03106689]
[-33.86065292 103.50432587]
[-33.38141251 88.15290833]
[-25.27703476 75.10627747]
[-11.72755814 67.87390137]
[3.62227821 68.40126038]
[16.64344406 76.54649353]
[23.83331108 90.11857605]
[38.82600784 90.58661652]
[53.81870270 91.05465698]
[68.81140137 91.52269745]
[83.80409241 91.99074554]
[86.97766113 85.19526672]
[96.49835205 64.80883789]
[86.51562500 53.61307526]
[76.53290558 42.41730881]
[63.68315125 40.88832092]
[55.59931564 31.30340958]
[56.21993256 19.18226433]
[46.47228241 7.78124380]
[30.83898544 2.82825613]
[27.57647705 -13.24308681]
[40.04094315 -23.89996529]
[55.41001129 -18.17949677]
[57.87330246 -1.96640837]
[67.62095642 9.43461227]
[84.43965912 14.34695435]
[87.72866821 32.43458176]
[97.71139526 43.63034821]
[107.69412231 54.82611465]
[122.59602356 56.53880310]
[134.85839844 47.89968872]
[127.49721527 34.81518936]
[121.49756622 21.05309296]
[116.92101288 6.75462818]
[113.81450653 -7.93348408]
[112.20993042 -22.86051941]
[112.12375641 -37.87329865]
[113.55686188 -52.81777191]
[116.49453735 -67.54058075]
[120.90664673 -81.89064026]
[126.74791718 -95.72070312]
[133.95838928 -108.88884735]
[142.46409607 -121.25994873]
[152.17773438 -132.70704651]
[162.99963379 -143.11270142]
[174.81874084 -152.37010193]
[187.51377869 -160.38427734]
[200.95448303 -167.07298279]
[215.00289917 -172.36756897]
[229.51490784 -176.21372986]
[244.34155273 -178.57196045]
[259.33071899 -179.41809082]
[274.32858276 -178.74343872]
[289.18124390 -176.55490112]
[303.73626709 -172.87496948]
[317.84432983 -167.74137878]
[331.36065674 -161.20683289]
[344.14651489 -153.33836365]
[356.07070923 -144.21672058]
[367.01089478 -133.93551636]
[376.85482788 -122.60024261]
[385.50143433 -110.32722473]
[392.86203003 -97.24240112]
[398.86108398 -83.48004150]
[403.43701172 -69.18137360]
[406.54287720 -54.49312592]
[408.14678955 -39.56602097]
[408.23229980 -24.55323792]
[406.79852295 -9.60882950]
[403.86019897 5.11384821]
[399.44747925 19.46371651]
[393.60559082 33.29352188]
[386.39453125 46.46134949]
[377.88830566 58.83207321]
[368.17416382 70.27875519]
[357.35180664 80.68392181]
[345.53228760 89.94081116]
[332.83688354 97.95442963]
[319.39590454 104.64253235]
[305.34722900 109.93650818]
[290.83505249 113.78202057]
[276.00830078 116.13961029]
[261.01910400 116.98507690]
[246.02127075 116.30976105]
[231.16870117 114.12057495]
[216.61383057 110.44000244]
[202.50599670 105.30579376]
[188.98997498 98.77064514]
[176.20446777 90.90161133]
[164.28065491 81.77944946]
[153.34092712 71.49775696]
[143.49751282 60.16205597]
[131.23513794 68.80117035]
[113.99577332 123.13964844]
[113.99577332 138.13964844]
[113.99577332 153.13964844]
[113.99577332 168.13964844]
[113.99577332 183.13964844]
[113.99577332 198.13964844]
[113.99577332 213.13964844]
[113.99577332 228.13964844]
[113.99577332 243.13964844]
[113.99577332 258.13964844]
[128.53565979 262.20095825]
[141.44003296 270.03546143]
[151.75132751 281.06179810]
[158.70434570 294.46173096]
[161.78314209 309.24090576]
[160.75924683 324.30258179]
[155.70864868 338.52908325]
[147.00613403 350.86477661]
[135.29747009 360.39419556]
[121.45153046 366.41021729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[50 66]
[51 65]
[52 64]
[55 62]
[56 61]
[67 130]
[68 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
