%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACACCCAUGGGGGGGGGGAGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCxxxxxxxxxxCCUAAAAUCGCUCAUUGCAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGCCCCCCCCCCUAACAGCCAU\
) } def
/len { sequence length } bind def

/coor [
[115.36842346 428.83450317]
[101.52248383 422.81848145]
[89.81381989 413.28906250]
[81.11129761 400.95339966]
[76.06069183 386.72686768]
[75.03680420 371.66519165]
[78.11560059 356.88604736]
[85.06862640 343.48611450]
[95.37990570 332.45977783]
[108.28428650 324.62527466]
[122.82418060 320.56396484]
[122.82418060 305.56396484]
[122.82418060 290.56396484]
[122.82418060 275.56396484]
[122.82418060 260.56396484]
[122.82418060 245.56394958]
[122.82418060 230.56394958]
[122.82418060 215.56394958]
[122.82418060 200.56394958]
[122.82418060 185.56394958]
[118.66629028 171.15173340]
[110.67637634 158.45681763]
[102.68645477 145.76188660]
[94.69654083 133.06695557]
[80.79398346 127.43499756]
[66.22128296 130.98976135]
[51.64857864 134.54452515]
[46.71849442 149.16293335]
[34.65348434 158.77745056]
[19.30344582 160.32012939]
[5.56652164 153.29870605]
[-2.17388582 139.95367432]
[-1.44784069 124.54341125]
[7.51297903 111.98525238]
[21.84920883 106.28647614]
[36.98620605 109.26553345]
[48.09381866 119.97181702]
[62.66651917 116.41705322]
[77.23921967 112.86228943]
[75.75775146 100.66913605]
[79.95675659 90.09010315]
[88.02732849 83.40008545]
[84.32116699 68.86514282]
[80.61500549 54.33021164]
[76.90885162 39.79527283]
[73.16598511 35.97289658]
[71.47773743 31.53417969]
[71.72861481 27.38222313]
[73.45515442 24.23793602]
[70.66282654 9.50012970]
[66.58162689 4.16615248]
[65.95188904 -1.56400692]
[68.07431030 -5.90806484]
[65.89747620 -20.74926949]
[63.72063446 -35.59047699]
[48.68788147 -36.09651947]
[33.98711395 -39.27883911]
[20.09089661 -45.03513718]
[7.44594145 -53.18037415]
[-3.54127169 -63.45271301]
[-12.51754856 -75.52193451]
[-19.19433975 -89.00007629]
[-23.35701180 -103.45386505]
[-24.87175560 -118.41866302]
[-23.68987656 -133.41343689]
[-19.84936523 -147.95613098]
[-13.47368145 -161.57929993]
[-4.76777554 -173.84497070]
[5.98849392 -184.35888672]
[18.44935608 -192.78306580]
[32.21424866 -198.84669495]
[46.84068298 -202.35484314]
[61.85848236 -203.19476318]
[76.78488922 -201.33944702]
[91.14007568 -196.84852600]
[104.46258545 -189.86636353]
[116.32415009 -180.61741638]
[126.34348297 -169.39900208]
[134.19848633 -156.57174683]
[139.63665771 -142.54797363]
[142.48320007 -127.77851105]
[142.64659119 -112.73812866]
[140.12158203 -97.91031647]
[134.98934937 -83.77172089]
[127.41485596 -70.77684021]
[117.64160156 -59.34340668]
[105.98376465 -49.83896255]
[92.81607819 -42.56903076]
[78.56184387 -37.76731110]
[80.73867798 -22.92610741]
[82.91551208 -8.08490181]
[85.40063477 6.70780563]
[88.19295502 21.44561195]
[91.44378662 36.08911133]
[95.14994812 50.62405014]
[98.85610962 65.15898132]
[102.56227112 79.69392395]
[119.22969818 88.59139252]
[122.57196045 108.86796570]
[107.39147186 125.07703400]
[115.38138580 137.77197266]
[123.37129974 150.46688843]
[131.36122131 163.16181946]
[131.22715759 148.16242981]
[134.26052856 133.47233582]
[140.32478333 119.75283051]
[149.14692688 107.62147522]
[160.32984924 97.62436676]
[173.37016296 90.21151733]
[187.68084717 85.71661377]
[202.61773682 84.34197998]
[217.50842285 86.14951324]
[231.68264771 91.05783081]
[244.50233459 98.84600067]
[255.39042664 109.16343689]
[263.85678101 121.54570770]
[269.52032471 135.43542480]
[272.12609863 150.20735168]
[271.55682373 165.19654846]
[267.83807373 179.72827148]
[261.13729858 193.14839172]
[251.75608826 204.85279846]
[240.11677551 214.31463623]
[226.74327087 221.10797119]
[212.23759460 224.92701721]
[197.25268555 225.59985352]
[182.46310425 223.09620667]
[168.53459167 217.52876282]
[156.09413147 209.14814758]
[145.70172119 198.33158875]
[137.82417297 185.56394958]
[137.82417297 200.56394958]
[137.82417297 215.56394958]
[137.82417297 230.56394958]
[137.82417297 245.56394958]
[137.82417297 260.56396484]
[137.82417297 275.56396484]
[137.82417297 290.56396484]
[137.82417297 305.56396484]
[137.82417297 320.56396484]
[152.36405945 324.62527466]
[165.26844788 332.45977783]
[175.57972717 343.48611450]
[182.53274536 356.88604736]
[185.61155701 371.66519165]
[184.58766174 386.72686768]
[179.53706360 400.95339966]
[170.83453369 413.28906250]
[159.12586975 422.81848145]
[145.27993774 428.83450317]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 103]
[22 102]
[23 101]
[24 100]
[25 39]
[26 38]
[27 37]
[42 97]
[43 96]
[44 95]
[45 94]
[49 93]
[50 92]
[53 91]
[54 90]
[55 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
