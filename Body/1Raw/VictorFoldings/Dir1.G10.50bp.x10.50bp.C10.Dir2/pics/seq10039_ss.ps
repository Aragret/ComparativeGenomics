%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUCCCCACCGGGGGGGGGGUUGGCUAUCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGxxxxxxxxxxACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAACCCCCCCCCCUAACCCCACC\
) } def
/len { sequence length } bind def

/coor [
[52.81670761 387.53652954]
[38.97077179 381.52050781]
[27.26210785 371.99108887]
[18.55958366 359.65542603]
[13.50898170 345.42889404]
[12.48509026 330.36721802]
[15.56388950 315.58807373]
[22.51691055 302.18814087]
[32.82819748 291.16180420]
[45.73257828 283.32730103]
[60.27246475 279.26599121]
[60.27246475 264.26599121]
[60.27246475 249.26599121]
[60.27246475 234.26599121]
[60.27246475 219.26599121]
[60.27246475 204.26599121]
[60.27246475 189.26599121]
[60.27246475 174.26599121]
[60.27246475 159.26599121]
[60.27246475 144.26599121]
[60.27246475 129.26599121]
[60.27246475 114.26598358]
[50.52481079 102.86496735]
[35.70705414 100.53385925]
[20.88929558 98.20275879]
[7.18765497 114.94483185]
[-15.74710464 118.40532684]
[-36.39123917 104.74317932]
[-51.25428772 106.76551056]
[-66.11733246 108.78784180]
[-80.98037720 110.81018066]
[-95.84342957 112.83251190]
[-108.47204590 123.29435730]
[-123.75033569 117.33567810]
[-125.96130371 101.08625793]
[-112.83049774 91.26210785]
[-97.86576080 97.96946716]
[-83.00271606 95.94713593]
[-68.13967133 93.92479706]
[-53.27662277 91.90246582]
[-38.41357422 89.88012695]
[-36.54595947 74.99684906]
[-50.44851685 69.36489105]
[-64.35107422 63.73293686]
[-79.62570953 68.63854218]
[-92.90432739 59.63531876]
[-94.00069427 43.62977219]
[-82.07378387 32.89998627]
[-66.27288818 35.67693329]
[-58.71911621 49.83037949]
[-44.81655884 55.46233749]
[-30.91400528 61.09429550]
[-19.45891762 54.64500809]
[-6.83772564 52.92628860]
[5.13187218 55.88412857]
[14.83430672 62.81160736]
[21.07401466 72.48816681]
[23.22039986 83.38499451]
[38.03815842 85.71610260]
[52.85591507 88.04720306]
[64.65255737 78.78225708]
[65.89942932 63.83417130]
[67.14630127 48.88608170]
[60.58292007 34.49050903]
[69.35139465 22.45044708]
[70.44271088 7.49019814]
[61.85726166 -8.76618481]
[72.05003357 -23.01775551]
[72.67401123 -38.00477219]
[73.29798889 -52.99178696]
[59.80959320 -60.13503265]
[50.76322174 -72.42835999]
[47.95503616 -87.43092346]
[51.94260406 -102.16394806]
[61.93418884 -113.70218658]
[75.94596100 -119.75470734]
[91.19586945 -119.11978912]
[104.65602875 -111.92347717]
[113.65392303 -99.59462738]
[116.40300751 -84.58112335]
[112.35745239 -69.86391449]
[102.32050323 -58.36511230]
[88.28500366 -52.36780930]
[87.66102600 -37.38079453]
[87.03704834 -22.39377975]
[95.01191711 -13.24452686]
[94.57469177 -0.71345323]
[85.41349792 8.42582607]
[88.15298462 15.34253693]
[84.29948425 23.69732094]
[90.95204926 37.02370834]
[82.09439087 50.13295746]
[80.84751892 65.08104706]
[79.60063934 80.02912903]
[92.09275055 74.08289337]
[105.18935394 74.88516998]
[115.65362549 81.55215454]
[121.22633362 91.83370209]
[136.21902466 91.36566162]
[151.21173096 90.89762115]
[154.35273743 76.15321350]
[160.93168640 62.58925629]
[170.56607056 50.99433517]
[182.69575500 42.04256821]
[196.61553955 36.25439453]
[211.51614380 33.96633148]
[226.53128052 35.31140518]
[240.78797913 40.21141815]
[253.45736694 48.38148499]
[263.80285645 59.34660721]
[271.22302246 72.46929169]
[275.28640747 86.98660278]
[275.75680542 102.05452728]
[272.60684204 116.79701996]
[266.01968384 130.35699463]
[256.37826538 141.94606018]
[244.24314880 150.89047241]
[230.31985474 156.67021179]
[215.41786194 158.94923401]
[200.40354919 157.59506226]
[186.14982605 152.68641663]
[173.48539734 144.50866699]
[163.14654541 133.53726196]
[155.73434448 120.41008759]
[151.67976379 105.89031219]
[136.68707275 106.35835266]
[121.69437408 106.82640076]
[102.79526520 125.49256134]
[75.27246094 114.26598358]
[75.27246094 129.26599121]
[75.27246094 144.26599121]
[75.27246094 159.26599121]
[75.27246094 174.26599121]
[75.27246094 189.26599121]
[75.27246094 204.26599121]
[75.27246094 219.26599121]
[75.27246094 234.26599121]
[75.27246094 249.26599121]
[75.27246094 264.26599121]
[75.27246094 279.26599121]
[89.81234741 283.32730103]
[102.71672821 291.16180420]
[113.02801514 302.18814087]
[119.98104095 315.58807373]
[123.05983734 330.36721802]
[122.03594208 345.42889404]
[116.98534393 359.65542603]
[108.28282166 371.99108887]
[96.57415771 381.52050781]
[82.72821808 387.53652954]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 60]
[24 59]
[25 58]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[42 52]
[43 51]
[44 50]
[61 94]
[62 93]
[63 92]
[65 90]
[66 88]
[68 85]
[69 84]
[70 83]
[98 127]
[99 126]
[100 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
