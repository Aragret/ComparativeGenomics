%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAACCCCAGGGGGGGGGGCCCUACUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAxxxxxxxxxxACGACCAAUGAUAUGAAAAACCAUCGUUGUAUUUCAACUACAAGAACACCCCCCCCCCCCAAUGACCCCA\
) } def
/len { sequence length } bind def

/coor [
[84.52803802 472.06341553]
[71.96981812 463.71228027]
[61.88359451 452.49981689]
[54.90340042 439.13092041]
[51.46801758 424.44592285]
[51.79339218 409.36795044]
[55.85907745 394.84484863]
[63.40949631 381.78948975]
[73.97002411 371.02261353]
[86.87682343 363.22097778]
[101.31855011 358.87503052]
[100.69457245 343.88800049]
[100.07059479 328.90100098]
[99.44661713 313.91397095]
[98.82263947 298.92694092]
[98.19866180 283.93994141]
[97.57468414 268.95291138]
[96.95070648 253.96591187]
[96.32672882 238.97888184]
[95.70275116 223.99186707]
[83.18156433 218.45298767]
[74.23596191 208.00045776]
[70.66300201 194.64599609]
[73.21834564 180.99261475]
[81.45735931 169.72718811]
[93.81120300 163.09179688]
[93.49915314 148.09504700]
[78.38700867 143.45426941]
[65.56806183 134.20288086]
[56.40243912 121.32246399]
[51.86262894 106.17968750]
[52.43032455 90.38122559]
[58.04528809 75.60334015]
[68.11175537 63.41400909]
[60.12184143 50.71907806]
[52.13192368 38.02415085]
[44.14200592 25.32921982]
[28.78069496 24.17324829]
[17.18112373 14.30900288]
[13.65587807 -0.32098791]
[19.35313988 -14.05704308]
[11.36322308 -26.75197220]
[1.85486460 -38.35331345]
[-9.02396107 -48.68051910]
[-19.90278625 -59.00772476]
[-31.50412750 -68.51608276]
[-43.76649475 -77.15519714]
[-56.02886200 -85.79431152]
[-70.67105865 -80.65760040]
[-85.52642822 -85.14061737]
[-94.88279724 -97.51955414]
[-95.14243317 -113.03445435]
[-86.20551300 -125.71952820]
[-71.50846100 -130.69709778]
[-56.70259094 -126.05319214]
[-47.48106384 -113.57348633]
[-47.38974762 -98.05667877]
[-35.12738037 -89.41756439]
[-22.86501122 -80.77845001]
[-25.03605270 -95.62050629]
[-17.30841446 -108.47676849]
[-3.18279290 -113.52323914]
[10.94176769 -108.47380066]
[18.66670227 -95.61591339]
[16.49254227 -80.77431488]
[5.40420008 -70.67240143]
[-9.57558060 -69.88655090]
[1.30324435 -59.55934525]
[12.18206978 -49.23213959]
[9.35469246 -63.96326065]
[13.08248711 -78.49266052]
[22.65284920 -90.04290771]
[36.23630905 -96.40605164]
[51.23625565 -96.36571503]
[64.78530121 -89.92961884]
[74.29340363 -78.32807159]
[77.94300842 -63.77882767]
[75.03645325 -49.06312561]
[66.12934875 -36.99401093]
[52.92438126 -29.87861824]
[37.94580841 -29.07712173]
[24.05815315 -34.74188995]
[32.04806900 -22.04695892]
[46.89698792 -21.24222946]
[58.56274796 -11.73570347]
[62.43914795 2.98934078]
[56.83693695 17.33930397]
[64.82685089 30.03423309]
[72.81677246 42.72916412]
[80.80668640 55.42409134]
[98.21198273 51.50053787]
[115.85894012 54.13183212]
[131.36250305 62.96234512]
[142.62734985 76.79860687]
[156.75215149 71.74985504]
[170.87695312 66.70109558]
[185.00175476 61.65233994]
[199.12655640 56.60358429]
[213.08694458 51.11655426]
[226.86932373 45.19659042]
[240.65170288 39.27662659]
[250.02600098 25.82097054]
[266.34091187 27.48093033]
[272.81307983 42.54888535]
[262.78445435 55.52421188]
[246.57167053 53.05900955]
[232.78929138 58.97896957]
[219.00691223 64.89893341]
[217.36416626 68.08780670]
[214.06115723 70.61600494]
[209.43673706 71.69635010]
[204.17530823 70.72838593]
[190.05050659 75.77714539]
[175.92570496 80.82589722]
[161.80090332 85.87465668]
[147.67610168 90.92341614]
[148.49736023 101.84420013]
[146.84910583 112.67108154]
[142.81526184 122.85274506]
[136.60124207 131.87072754]
[128.52346802 139.26583862]
[118.99326324 144.66151428]
[108.49590302 147.78298950]
[108.80796051 162.77973938]
[123.35542297 170.57397461]
[131.95420837 184.55096436]
[132.34768677 200.86277771]
[124.52317810 215.07402039]
[110.68976593 223.36788940]
[111.31374359 238.35491943]
[111.93772125 253.34193420]
[112.56169891 268.32894897]
[113.18567657 283.31594849]
[113.80965424 298.30297852]
[114.43363190 313.28997803]
[115.05760956 328.27700806]
[115.68158722 343.26403809]
[116.30556488 358.25103760]
[131.05856323 361.38146973]
[144.56921387 368.08325195]
[155.98818970 377.93502808]
[164.59770203 390.31756592]
[169.85655212 404.45245361]
[171.43415833 419.45120239]
[169.23135376 434.37091064]
[163.38659668 448.27380371]
[154.26731873 460.28585815]
[142.44674683 469.65200806]
[128.66793823 475.78350830]
[113.79703522 478.29489136]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[26 124]
[27 123]
[34 90]
[35 89]
[36 88]
[37 87]
[41 83]
[42 82]
[43 69]
[44 68]
[45 67]
[46 59]
[47 58]
[48 57]
[94 116]
[95 115]
[96 114]
[97 113]
[98 112]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
