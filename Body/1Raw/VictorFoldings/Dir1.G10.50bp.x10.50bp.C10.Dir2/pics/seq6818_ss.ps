%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAACACCUAUUGGGGGGGGGGCUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUACCAGGCUUCGxxxxxxxxxxCCACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGACCCCCCCCCCACCAACACCUCUU\
) } def
/len { sequence length } bind def

/coor [
[74.71061707 412.73739624]
[60.43884659 407.92794800]
[47.53486633 400.16256714]
[36.60221100 389.80441284]
[28.15222359 377.33798218]
[22.58012772 363.34634399]
[20.14653778 348.48391724]
[20.96527863 333.44586182]
[24.99805641 318.93548584]
[32.05625153 305.63150024]
[41.80973434 294.15615845]
[53.80232239 285.04617310]
[67.47309875 278.72763062]
[82.18265533 275.49606323]
[82.18265533 260.49606323]
[82.18265533 245.49606323]
[82.18265533 230.49606323]
[82.18265533 215.49606323]
[82.18265533 200.49606323]
[82.18265533 185.49606323]
[82.18265533 170.49606323]
[82.18265533 155.49606323]
[82.18265533 140.49606323]
[76.74837494 135.32705688]
[75.44240570 150.27009583]
[62.94529724 158.56602478]
[48.66741180 153.96798706]
[43.36002350 139.93830872]
[51.01960754 127.04138947]
[65.87982178 124.98904419]
[60.44554520 119.82003784]
[45.46430969 120.57010651]
[30.48307419 121.32017517]
[15.51009464 122.22009277]
[0.54686666 123.26976013]
[-12.73653126 132.88659668]
[-27.59413910 125.94515228]
[-28.74172211 109.58621216]
[-14.99874783 100.63843536]
[-0.50280738 108.30653381]
[14.46042061 107.25685883]
[20.94911766 103.63130188]
[29.73300743 106.33893585]
[44.71424103 105.58887482]
[59.69547653 104.83880615]
[60.65292358 95.90586090]
[63.51441574 87.63138580]
[68.03842163 80.40397644]
[73.90824890 74.53878784]
[80.75231934 70.26406097]
[88.16661072 67.71289825]
[95.73786926 66.92060089]
[103.06639099 67.82739258]
[109.78702545 70.28635406]
[117.75842285 57.57979202]
[125.72982788 44.87322998]
[133.70123291 32.16666794]
[141.67263794 19.46010399]
[138.36024475 4.23953009]
[146.62539673 -8.53317547]
[161.15629578 -11.59722519]
[169.12770081 -24.30378723]
[163.30207825 -32.28920746]
[160.75805664 -42.23828506]
[162.13191223 -52.80327225]
[167.50845337 -62.44425964]
[176.37040710 -69.65322876]
[187.63810730 -73.18728638]
[189.43470764 -88.07930756]
[191.23129272 -102.97132874]
[193.02787781 -117.86334991]
[179.14285278 -123.81169128]
[167.49699402 -133.43200684]
[159.03437805 -145.94444275]
[154.44100952 -160.33462524]
[154.08929443 -175.43605042]
[158.00770569 -190.02450562]
[165.87861633 -202.91734314]
[177.06394958 -213.06942749]
[190.65698242 -219.65776062]
[205.55578613 -222.14825439]
[220.55256653 -220.33903503]
[234.43161011 -214.37673950]
[246.06779480 -204.74473572]
[254.51783752 -192.22381592]
[259.09674072 -177.82901001]
[259.43328857 -162.72723389]
[255.50022888 -148.14274597]
[247.61636353 -135.25781250]
[236.42083740 -125.11696625]
[222.82118225 -118.54228973]
[207.91990662 -116.06675720]
[206.12330627 -101.17473602]
[204.32672119 -86.28272247]
[202.53013611 -71.39070129]
[214.37693787 -62.18997955]
[228.36082458 -67.61683655]
[242.34472656 -73.04369354]
[256.32861328 -78.47055054]
[270.31250000 -83.89739990]
[284.29638672 -89.32425690]
[298.28027344 -94.75111389]
[299.42755127 -109.97105408]
[307.07229614 -123.18167877]
[319.69668579 -131.75999451]
[334.79412842 -134.00279236]
[349.36700439 -129.46473694]
[360.52188110 -119.04689026]
[366.04391479 -104.81770325]
[364.83673096 -89.60240173]
[357.14001465 -76.42198944]
[344.48196411 -67.89344788]
[329.37579346 -65.71012878]
[314.82089233 -70.30552673]
[303.70715332 -80.76722717]
[289.72326660 -75.34037018]
[275.73934937 -69.91351318]
[261.75546265 -64.48665619]
[247.77157593 -59.05979919]
[233.78768921 -53.63294220]
[219.80378723 -48.20608902]
[208.55265808 -20.33756256]
[181.83427429 -16.33238602]
[173.86286926 -3.62582254]
[177.42758179 10.79043102]
[169.52445984 23.79024887]
[154.37919617 27.43150711]
[146.40779114 40.13806915]
[138.43638611 52.84463501]
[130.46498108 65.55119324]
[122.49358368 78.25775909]
[134.36685181 101.18527222]
[125.09706116 127.85110474]
[97.18265533 140.49606323]
[97.18265533 155.49606323]
[97.18265533 170.49606323]
[97.18265533 185.49606323]
[97.18265533 200.49606323]
[97.18265533 215.49606323]
[97.18265533 230.49606323]
[97.18265533 245.49606323]
[97.18265533 260.49606323]
[97.18265533 275.49606323]
[111.89221191 278.72763062]
[125.56298828 285.04617310]
[137.55557251 294.15615845]
[147.30906677 305.63150024]
[154.36726379 318.93548584]
[158.40003967 333.44586182]
[159.21878052 348.48391724]
[156.78518677 363.34634399]
[151.21308899 377.33798218]
[142.76310730 389.80441284]
[131.83044434 400.16256714]
[118.92646790 407.92794800]
[104.65469360 412.73739624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[31 45]
[32 44]
[33 43]
[34 41]
[35 40]
[54 131]
[55 130]
[56 129]
[57 128]
[58 127]
[61 124]
[62 123]
[68 95]
[69 94]
[70 93]
[71 92]
[96 121]
[97 120]
[98 119]
[99 118]
[100 117]
[101 116]
[102 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
