%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUCCAUCAUAGGGGGGGGGGGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCxxxxxxxxxxCAACGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCUUCAUAGUAACCCCCCCCCCUACCCAUCAUA\
) } def
/len { sequence length } bind def

/coor [
[72.32923889 627.01074219]
[57.76937866 623.10253906]
[44.56823730 615.82293701]
[33.49330521 605.59503174]
[25.18846512 593.01361084]
[20.13655090 578.80999756]
[18.63127708 563.81011963]
[20.76015282 548.88592529]
[26.39941216 534.90515137]
[35.22119522 522.68060303]
[46.71261215 512.92297363]
[60.20557022 506.19961548]
[74.91560364 502.90139771]
[75.22358704 487.90457153]
[75.53156281 472.90771484]
[75.83953857 457.91088867]
[76.14751434 442.91406250]
[76.45549774 427.91720581]
[76.76347351 412.92037964]
[77.07144928 397.92352295]
[77.37942505 382.92669678]
[77.68740845 367.92987061]
[65.17129517 363.36419678]
[54.66357803 355.13644409]
[47.20388031 344.04272461]
[43.53578949 331.16345215]
[44.03277969 317.75842285]
[48.66022491 305.14321899]
[56.97740173 294.56042480]
[68.17944336 287.05703735]
[81.17520142 283.38092041]
[82.09860992 268.40939331]
[83.02202606 253.43783569]
[83.94544220 238.46627808]
[84.86885071 223.49473572]
[77.92973328 210.31527710]
[86.50190735 197.01760864]
[87.42532349 182.04605103]
[88.34873199 167.07450867]
[89.27214813 152.10295105]
[90.19556427 137.13140869]
[91.11897278 122.15985107]
[79.82432556 112.76219940]
[76.17203522 98.53034210]
[81.54557037 84.85517883]
[93.90947723 76.91673279]
[94.83288574 61.94518280]
[95.75630188 46.97363281]
[96.67971802 32.00208282]
[86.49118805 20.21939659]
[87.64093781 5.04927063]
[98.93672180 -4.59131765]
[99.86013031 -19.56286812]
[100.32205963 -34.55575180]
[100.32205963 -49.55575180]
[100.32205963 -64.55575562]
[99.86013031 -79.54863739]
[98.93672180 -94.52018738]
[98.01330566 -109.49173737]
[83.09092712 -111.42023468]
[68.80326843 -116.13820648]
[55.66682053 -123.47512054]
[44.15645599 -133.16574097]
[34.68827057 -144.85974121]
[27.60453224 -158.13442993]
[23.16131210 -172.50990295]
[21.51923180 -187.46650696]
[22.73764992 -202.46357727]
[26.77252197 -216.95896912]
[33.47798920 -230.42868042]
[42.61165619 -242.38580322]
[53.84334183 -252.39807129]
[66.76702881 -260.10357666]
[80.91554260 -265.22375488]
[95.77740479 -267.57351685]
[110.81539154 -267.06790161]
[125.48587036 -263.72521973]
[139.25851440 -257.66629028]
[151.63546753 -249.11015320]
[162.16929626 -238.36608887]
[170.47920227 -225.82249451]
[176.26481628 -211.93280029]
[179.31695557 -197.19914246]
[179.52531433 -182.15409851]
[176.88235474 -167.34156799]
[171.48361206 -153.29699707]
[163.52424622 -140.52809143]
[153.29197693 -129.49642944]
[141.15672302 -120.60081482]
[127.55714417 -114.16281128]
[112.98485565 -110.41515350]
[113.90827179 -95.44360352]
[114.83168030 -80.47205353]
[117.27655029 -77.85101318]
[118.54137421 -73.89250183]
[118.00115967 -69.17935181]
[115.32205963 -64.55575562]
[115.32205963 -49.55575180]
[115.32205963 -34.55575180]
[117.60093689 -31.78917694]
[118.61967468 -27.76030922]
[117.79033661 -23.08935547]
[114.83168030 -18.63945389]
[113.90827179 -3.66790390]
[123.93371582 7.28773260]
[123.21051788 22.48416710]
[111.65126801 32.92549896]
[110.72785187 47.89704895]
[109.80443573 62.86859894]
[108.88102722 77.84014893]
[120.17567444 87.23780060]
[123.82796478 101.46965790]
[118.45442963 115.14482117]
[106.09052277 123.08326721]
[105.16711426 138.05480957]
[104.24369812 153.02636719]
[103.32028198 167.99790955]
[102.39687347 182.96946716]
[101.47345734 197.94100952]
[108.34653473 212.19132996]
[99.84040070 224.41815186]
[98.91699219 239.38969421]
[97.99357605 254.36125183]
[97.07015991 269.33279419]
[96.14675140 284.30435181]
[111.37641144 291.43820190]
[122.69274139 303.82958984]
[128.39405823 319.57354736]
[127.63895416 336.26437378]
[120.57032776 351.36294556]
[108.28940582 362.58312988]
[92.68424225 368.23782349]
[92.37626648 383.23468018]
[92.06829071 398.23150635]
[91.76030731 413.22836304]
[91.45233154 428.22518921]
[91.14435577 443.22201538]
[90.83638000 458.21887207]
[90.52839661 473.21569824]
[90.22042084 488.21255493]
[89.91244507 503.20938110]
[104.47467041 507.10873413]
[117.68022156 514.38037109]
[128.76135254 524.60156250]
[137.07382202 537.17797852]
[142.13433838 551.37847900]
[143.64871216 566.37750244]
[141.52888489 581.30291748]
[135.89810181 595.28717041]
[127.08373260 607.51702881]
[115.59822845 617.28161621]
[102.10935211 624.01312256]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[31 125]
[32 124]
[33 123]
[34 122]
[35 121]
[37 119]
[38 118]
[39 117]
[40 116]
[41 115]
[42 114]
[46 110]
[47 109]
[48 108]
[49 107]
[52 104]
[53 103]
[54 99]
[55 98]
[56 97]
[57 93]
[58 92]
[59 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
