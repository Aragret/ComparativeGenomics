%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUAACCAGGGGGGGGGGACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAxxxxxxxxxxGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCACCCCCCCCCCCUACUCACCA\
) } def
/len { sequence length } bind def

/coor [
[115.79746246 352.71231079]
[101.95152283 346.69628906]
[90.24285889 337.16687012]
[81.54033661 324.83117676]
[76.48973083 310.60467529]
[75.46584320 295.54299927]
[78.54463959 280.76382446]
[85.49766541 267.36389160]
[95.80894470 256.33755493]
[108.71332550 248.50305176]
[123.25321198 244.44174194]
[123.25321198 229.44174194]
[123.25321198 214.44174194]
[123.25321198 199.44174194]
[123.25321198 184.44174194]
[123.25321198 169.44174194]
[123.25321198 154.44174194]
[123.25321198 139.44174194]
[123.25321198 124.44174194]
[123.25321198 109.44174194]
[102.52695465 122.87411499]
[82.79438019 111.91693115]
[68.22167206 115.47169495]
[66.86023712 130.55232239]
[60.67361450 144.37275696]
[50.33289337 155.43386841]
[36.95975113 162.53582764]
[22.00481033 164.90826416]
[7.09027052 162.29383850]
[-6.16605186 154.97615051]
[-16.32621002 143.74894714]
[-22.28810310 129.83009338]
[-23.40503502 114.72939301]
[-19.55584335 100.08485413]
[-11.15806484 87.48501587]
[0.87737584 78.29660034]
[15.24496269 73.51631165]
[30.38620758 73.66267395]
[44.65870285 78.71981049]
[56.51427078 88.13916779]
[64.66691589 100.89898682]
[79.23961639 97.34423065]
[85.62319183 82.92862701]
[101.03602600 76.31480408]
[117.78088379 82.28845978]
[111.71786499 68.56840515]
[105.65485382 54.84835052]
[99.59184265 41.12829590]
[93.52883148 27.40824127]
[78.88658905 30.86071396]
[63.85926819 31.56365776]
[48.95867538 29.49313354]
[34.69233322 24.71966171]
[21.54613686 17.40582466]
[9.96784782 7.80072832]
[0.35181639 -3.76847982]
[-6.97443914 -16.90775681]
[-11.76138973 -31.16958618]
[-13.84599209 -46.06821442]
[-13.15724754 -61.09619522]
[-9.71861267 -75.74169159]
[-3.64720654 -89.50586700]
[4.85018063 -101.91993713]
[15.48413086 -112.56107330]
[27.89245605 -121.06684113]
[41.65253448 -127.14753723]
[56.29570007 -130.59606934]
[71.32321167 -131.29495239]
[86.22324371 -129.22041321]
[100.48830414 -124.44309998]
[113.63253021 -117.12571716]
[125.20822906 -107.51750183]
[134.82113647 -95.94570160]
[142.14385986 -82.80445099]
[146.92695618 -68.54133606]
[149.00755310 -53.64214325]
[148.31474304 -38.61434937]
[144.87216187 -23.96978378]
[138.79705811 -10.20723915]
[130.29632568 2.20453668]
[119.65950012 12.84280491]
[107.24888611 21.34522820]
[113.31189728 35.06528091]
[119.37490845 48.78533554]
[125.43791962 62.50539017]
[131.50093079 76.22544098]
[144.81608582 83.13243866]
[159.52404785 80.18695831]
[174.23200989 77.24147797]
[186.24417114 66.94493866]
[200.24299622 72.03240204]
[214.95095825 69.08692169]
[224.55438232 51.40041733]
[248.72105408 49.72499466]
[262.50344849 43.80503082]
[276.28582764 37.88506699]
[290.06820679 31.96510315]
[290.67431641 16.71402550]
[297.84515381 3.24029160]
[310.15701294 -5.78087759]
[325.16528320 -8.55832291]
[339.89010620 -4.54058075]
[351.40786743 5.47462368]
[357.43167114 19.49876404]
[356.76550293 34.74733734]
[349.54162598 48.19272614]
[337.19436646 57.16534424]
[322.17526245 59.88366699]
[307.46636963 55.80796814]
[295.98815918 45.74748611]
[282.20578003 51.66744614]
[268.42340088 57.58740997]
[254.64102173 63.50737381]
[256.04333496 78.44168091]
[270.68682861 81.69250488]
[285.33032227 84.94333649]
[300.80081177 79.50312805]
[313.06954956 90.38477325]
[309.51550293 106.39417267]
[293.79476929 111.06221771]
[282.07949829 99.58683777]
[267.43600464 96.33600616]
[252.79249573 93.08518219]
[231.14067078 96.30435944]
[217.89643860 83.79488373]
[203.18847656 86.74036407]
[192.22833252 96.82621765]
[177.17749023 91.94944000]
[162.46952820 94.89492035]
[147.76156616 97.84040070]
[138.25321960 109.44174194]
[138.25321960 124.44174194]
[138.25321960 139.44174194]
[138.25321960 154.44174194]
[138.25321960 169.44174194]
[138.25321960 184.44174194]
[138.25321960 199.44174194]
[138.25321960 214.44174194]
[138.25321960 229.44174194]
[138.25321960 244.44174194]
[152.79310608 248.50305176]
[165.69747925 256.33755493]
[176.00877380 267.36389160]
[182.96179199 280.76382446]
[186.04058838 295.54299927]
[185.01669312 310.60467529]
[179.96609497 324.83117676]
[171.26356506 337.16687012]
[159.55490112 346.69628906]
[145.70896912 352.71231079]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 42]
[23 41]
[45 86]
[46 85]
[47 84]
[48 83]
[49 82]
[87 130]
[88 129]
[89 128]
[91 126]
[92 125]
[94 113]
[95 112]
[96 111]
[97 110]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
