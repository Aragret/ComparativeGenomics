%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGGAACAGGGGGGGGGGACAUAUGACGCACUCUCCCCUGAACUCUACACAACAUAUUUUGUCACCAAxxxxxxxxxxCUCACACGAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCCCCCCCCCCCUAGCAACA\
) } def
/len { sequence length } bind def

/coor [
[89.25927734 391.80120850]
[76.03907776 384.52874756]
[65.15227509 374.08175659]
[57.34114456 361.17248535]
[53.13826370 346.68118286]
[52.83018875 331.59585571]
[56.43793106 316.94500732]
[63.71550369 303.72763062]
[74.16670990 292.84484863]
[87.07897186 285.03872681]
[101.57190704 280.84143066]
[101.25985718 265.84466553]
[100.94779968 250.84793091]
[100.63574219 235.85116577]
[100.32368469 220.85441589]
[100.01162720 205.85766602]
[99.69956970 190.86091614]
[99.38751984 175.86415100]
[99.07546234 160.86740112]
[98.76340485 145.87065125]
[95.45845032 139.20559692]
[98.60411835 130.55940247]
[78.73847961 118.60847473]
[74.18045807 97.74169159]
[85.22061920 81.62450409]
[80.02520752 67.55298615]
[74.82978821 53.48146439]
[69.63437653 39.40994644]
[55.18694305 43.47341919]
[40.46233368 46.37618637]
[25.55364990 48.09989929]
[10.55514336 48.63365555]
[-4.43835735 47.97408295]
[-19.33205605 46.12535095]
[-34.03179169 43.09915161]
[-48.44462204 38.91461182]
[-62.47942734 33.59819031]
[-76.04747009 27.18349838]
[-89.06297302 19.71109772]
[-101.44364166 11.22822571]
[-113.11120605 1.78851712]
[-123.99188995 -8.54834652]
[-134.01690674 -19.71701050]
[-143.12287903 -31.64686394]
[-151.25222778 -44.26248169]
[-158.35356140 -57.48409653]
[-164.38197327 -71.22812653]
[-169.29936218 -85.40766907]
[-173.07463074 -99.93307495]
[-175.68391418 -114.71250916]
[-177.11070251 -129.65254211]
[-177.34599304 -144.65869141]
[-176.38829041 -159.63610840]
[-174.24363708 -174.49008179]
[-170.92561340 -189.12670898]
[-166.45518494 -203.45344543]
[-160.86062622 -217.37971497]
[-154.17730713 -230.81745911]
[-146.44746399 -243.68174744]
[-137.71998596 -255.89122009]
[-128.05003357 -267.36868286]
[-117.49877167 -278.04159546]
[-106.13288879 -287.84243774]
[-94.02425385 -296.70928955]
[-81.24941254 -304.58605957]
[-67.88914490 -311.42297363]
[-54.02791595 -317.17678833]
[-39.75336075 -321.81112671]
[-25.15572548 -325.29669189]
[-10.32730770 -327.61145020]
[4.63814449 -328.74078369]
[19.64601135 -328.67749023]
[34.60140991 -327.42202759]
[49.40978241 -324.98233032]
[63.97750473 -321.37377930]
[78.21247864 -316.61926270]
[92.02469635 -310.74874878]
[105.32684326 -303.79943848]
[118.03480530 -295.81521606]
[130.06823730 -286.84658813]
[141.35107422 -276.95022583]
[151.81198120 -266.18875122]
[161.38479614 -254.63014221]
[170.00901794 -242.34751892]
[177.63009644 -229.41851807]
[184.19989014 -215.92488098]
[189.67681885 -201.95193481]
[194.02627563 -187.58801270]
[197.22076416 -172.92391968]
[199.24008179 -158.05239868]
[200.07145691 -143.06744385]
[199.70965576 -128.06379700]
[198.15693665 -113.13633728]
[195.42312622 -98.37942505]
[191.52551270 -83.88636780]
[186.48873901 -69.74879456]
[180.34463501 -56.05609131]
[173.13208008 -42.89482117]
[164.89663696 -30.34820366]
[155.69039917 -18.49555779]
[145.57156372 -7.41182280]
[134.60409546 2.83292532]
[122.85735321 12.17391491]
[110.40559387 20.55208969]
[97.32754517 27.91447639]
[83.70589447 34.21453094]
[88.90130615 48.28604889]
[94.09672546 62.35757065]
[99.29213715 76.42908478]
[114.24691010 78.34880829]
[126.27264404 89.60404968]
[129.74884033 107.12965393]
[144.16105652 111.28754425]
[158.57327271 115.44543457]
[169.11784363 104.35171509]
[183.61384583 99.44001007]
[198.73017883 101.83898926]
[210.99322510 110.99738312]
[217.58503723 124.81066132]
[216.99085999 140.10462952]
[209.34722900 153.36485291]
[196.41058350 161.54421997]
[181.15370178 162.76318359]
[167.08247375 156.74162292]
[157.43037415 144.86326599]
[154.41539001 129.85765076]
[140.00317383 125.69976044]
[125.59095764 121.54187012]
[113.60411835 130.55940247]
[113.76015472 145.55859375]
[114.07221222 160.55534363]
[114.38426971 175.55209351]
[114.69632721 190.54885864]
[115.00838470 205.54560852]
[115.32044220 220.54235840]
[115.63249207 235.53910828]
[115.94454956 250.53587341]
[116.25660706 265.53262329]
[116.56866455 280.52938843]
[131.22366333 284.12014771]
[144.44946289 291.38241577]
[155.34432983 301.82098389]
[163.16543579 314.72421265]
[167.37950134 329.21228027]
[167.69921875 344.29736328]
[164.10279846 358.95098877]
[156.83543396 372.17398071]
[146.39263916 383.06481934]
[133.48640442 390.88092041]
[118.99671173 395.08941650]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 129]
[25 109]
[26 108]
[27 107]
[28 106]
[112 128]
[113 127]
[114 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
