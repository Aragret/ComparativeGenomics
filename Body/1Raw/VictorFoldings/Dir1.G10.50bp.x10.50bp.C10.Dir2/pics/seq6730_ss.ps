%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUCCUAGCGGGGGGGGGGUGCUGGCAUCACUAUACUACUAACAGACCGCAACCUCAACACCACCUUCUxxxxxxxxxxCACCCUCACACGAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCCCCCCCCCCCAGCCCUAGC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 350.78707886]
[71.19830322 344.77105713]
[59.48964310 335.24163818]
[50.78712082 322.90594482]
[45.73651886 308.67944336]
[44.71262741 293.61776733]
[47.79142761 278.83859253]
[54.74444962 265.43865967]
[65.05573273 254.41233826]
[77.96011353 246.57781982]
[92.50000000 242.51651001]
[92.50000000 227.51651001]
[92.50000000 212.51651001]
[92.50000000 197.51651001]
[92.50000000 182.51651001]
[92.50000000 167.51651001]
[92.50000000 152.51651001]
[92.50000000 137.51651001]
[92.50000000 122.51651001]
[92.50000000 107.51651001]
[91.56436920 92.54572296]
[89.69676208 77.66244507]
[75.70288849 67.21691895]
[73.60218811 50.22070694]
[84.20632935 37.20494080]
[82.02949524 22.36373711]
[79.85266113 7.52253151]
[77.67581940 -7.31867409]
[62.71177292 -6.19345427]
[47.70562363 -6.12659025]
[32.73213959 -7.11841631]
[17.86591911 -9.16399002]
[3.18102288 -12.25312138]
[-11.24938869 -16.37042046]
[-25.35342216 -21.49537468]
[-39.06081390 -27.60244942]
[-52.30326843 -34.66122055]
[-65.01481628 -42.63652420]
[-77.13213348 -51.48862457]
[-88.59483337 -61.17341995]
[-99.34583282 -71.64266205]
[-109.33155060 -82.84419250]
[-118.50225067 -94.72220612]
[-126.81224060 -107.21752930]
[-134.22012329 -120.26790619]
[-140.68898010 -133.80831909]
[-146.18658447 -147.77130127]
[-150.68557739 -162.08731079]
[-154.16349792 -176.68501282]
[-156.60305786 -191.49168396]
[-157.99208069 -206.43356323]
[-158.32366943 -221.43618774]
[-157.59614563 -236.42485046]
[-155.81314087 -251.32484436]
[-152.98355103 -266.06195068]
[-149.12145996 -280.56274414]
[-144.24612427 -294.75500488]
[-138.38180542 -308.56799316]
[-131.55775452 -321.93292236]
[-123.80792999 -334.78317261]
[-115.17097473 -347.05474854]
[-105.68990326 -358.68652344]
[-95.41194916 -369.62054443]
[-84.38832092 -379.80230713]
[-72.67393494 -389.18112183]
[-60.32715607 -397.71026611]
[-47.40949631 -405.34719849]
[-33.98530960 -412.05392456]
[-20.12147522 -417.79699707]
[-5.88706064 -422.54785156]
[8.64701462 -426.28274536]
[23.40834427 -428.98312378]
[38.32338715 -430.63552856]
[53.31783676 -431.23171997]
[68.31698608 -430.76873779]
[83.24611664 -429.24887085]
[98.03084564 -426.67968750]
[112.59752655 -423.07403564]
[126.87357330 -418.44979858]
[140.78787231 -412.83007812]
[154.27108765 -406.24285889]
[167.25607300 -398.72094727]
[179.67811584 -390.30181885]
[191.47534180 -381.02740479]
[202.58895874 -370.94393921]
[212.96362305 -360.10165405]
[222.54763794 -348.55453491]
[231.29324341 -336.36013794]
[239.15689087 -323.57922363]
[246.09938049 -310.27545166]
[252.08613586 -296.51507568]
[257.08734131 -282.36669922]
[261.07806396 -267.90075684]
[264.03845215 -253.18937683]
[265.95370483 -238.30580139]
[266.81433105 -223.32420349]
[266.61599731 -208.31921387]
[265.35974121 -193.36560059]
[263.05178833 -178.53784180]
[259.70364380 -163.90982056]
[255.33200073 -149.55442810]
[249.95861816 -135.54315186]
[243.61027527 -121.94582367]
[236.31860352 -108.83016968]
[228.11991882 -96.26153564]
[219.05508423 -84.30253601]
[209.16923523 -73.01275635]
[198.51165771 -62.44844055]
[187.13542175 -52.66222000]
[175.09719849 -43.70284653]
[162.45698547 -35.61495972]
[149.27775574 -28.43884850]
[135.62513733 -22.21026802]
[121.56718445 -16.96025085]
[107.17391205 -12.71494770]
[92.51702881 -9.49551105]
[94.69386292 5.34569454]
[96.87070465 20.18689919]
[99.04753876 35.02810669]
[110.38780212 41.22448730]
[116.15655518 53.00565338]
[114.03526306 66.14826202]
[104.58003998 75.79483032]
[106.44765472 90.67810822]
[116.79716492 79.82050323]
[131.78701782 79.26881409]
[142.90666199 89.33627319]
[143.84286499 104.30702209]
[134.06410217 115.68137360]
[119.12230682 117.00148773]
[107.50000000 107.51651001]
[107.50000000 122.51651001]
[107.50000000 137.51651001]
[107.50000000 152.51651001]
[107.50000000 167.51651001]
[107.50000000 182.51651001]
[107.50000000 197.51651001]
[107.50000000 212.51651001]
[107.50000000 227.51651001]
[107.50000000 242.51651001]
[122.03988647 246.57781982]
[134.94427490 254.41233826]
[145.25555420 265.43865967]
[152.20857239 278.83859253]
[155.28736877 293.61776733]
[154.26348877 308.67944336]
[149.21287537 322.90594482]
[140.51036072 335.24163818]
[128.80169678 344.77105713]
[114.95575714 350.78707886]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 124]
[22 123]
[25 119]
[26 118]
[27 117]
[28 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
