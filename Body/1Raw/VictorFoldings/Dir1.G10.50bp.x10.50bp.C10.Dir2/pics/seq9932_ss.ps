%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACCCCUCACGGGGGGGGGGAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAxxxxxxxxxxAAGUACAGCAAUCAACCCUCAACUAUCACACAUCAACUGCAACUCCAAAGCCCCCCCCCCCCACCCCUCAC\
) } def
/len { sequence length } bind def

/coor [
[105.15973663 381.63046265]
[91.13779449 376.07745361]
[78.93783569 367.21112061]
[69.32676697 355.58880615]
[62.90874100 341.94110107]
[60.08720398 327.12591553]
[61.03952026 312.07455444]
[65.70582581 297.73312378]
[73.79279327 285.00317383]
[84.79206848 274.68490601]
[98.01222229 267.42691040]
[112.62223816 263.68548584]
[112.62223816 248.68548584]
[112.62223816 233.68548584]
[112.62223816 218.68548584]
[112.62223816 203.68548584]
[112.62223816 188.68548584]
[112.62223816 173.68548584]
[112.62223816 158.68548584]
[112.62223816 143.68548584]
[112.62223816 128.68548584]
[106.92670441 123.80584717]
[101.16509247 137.65516663]
[86.21316528 136.45521545]
[82.73402405 121.86426544]
[95.53562927 114.04656982]
[89.84008789 109.16693115]
[75.01760864 111.46780396]
[60.19512558 113.76868439]
[45.37264633 116.06955719]
[38.40555573 129.93460083]
[24.60397720 137.02656555]
[9.27489853 134.61846924]
[-1.68733788 123.63625336]
[-4.06752777 108.30281067]
[3.04956031 94.51416779]
[16.92726135 87.57233429]
[32.22931290 90.14659119]
[43.07176971 101.24707031]
[57.89425278 98.94619751]
[72.71673584 96.64532471]
[87.53921509 94.34445190]
[99.50947571 85.30493164]
[105.77887726 71.67794800]
[112.04828644 58.05097198]
[98.91536713 50.78917694]
[86.35461426 42.57730865]
[74.43463898 33.46021652]
[63.22053528 23.48769760]
[52.77355957 12.71421814]
[43.15076065 1.19861937]
[34.40470505 -10.99620342]
[26.58315468 -23.80364609]
[19.72883224 -37.15375900]
[13.87917328 -50.97362518]
[9.06612492 -65.18776703]
[5.31597757 -79.71854401]
[2.64921141 -94.48660278]
[1.08039224 -109.41128540]
[0.61808848 -124.41106415]
[1.26482522 -139.40403748]
[3.01707006 -154.30828857]
[5.86525249 -169.04243469]
[9.79381752 -183.52600098]
[14.78130627 -197.67987061]
[20.80048180 -211.42675781]
[27.81846619 -224.69155884]
[35.79692841 -237.40184021]
[44.69229889 -249.48818970]
[54.45598602 -260.88458252]
[65.03466797 -271.52874756]
[76.37055969 -281.36260986]
[88.40176392 -290.33242798]
[101.06255341 -298.38919067]
[114.28378296 -305.48892212]
[127.99324799 -311.59286499]
[142.11605835 -316.66763306]
[156.57510376 -320.68551636]
[171.29138184 -323.62460327]
[186.18453979 -325.46884155]
[201.17321777 -326.20809937]
[216.17556763 -325.83840942]
[231.10964966 -324.36175537]
[245.89389038 -321.78619385]
[260.44754028 -318.12582397]
[274.69113159 -313.40060425]
[288.54684448 -307.63638306]
[301.93902588 -300.86459351]
[314.79449463 -293.12225342]
[327.04309082 -284.45166016]
[338.61785889 -274.90011597]
[349.45562744 -264.51986694]
[359.49719238 -253.36752319]
[368.68768311 -241.50405884]
[376.97692871 -228.99424744]
[384.31967163 -215.90640259]
[390.67575073 -202.31201172]
[396.01052856 -188.28533936]
[400.29479980 -173.90298462]
[403.50518799 -159.24349976]
[405.62417603 -144.38694763]
[406.64019775 -129.41447449]
[406.54766846 -114.40785980]
[405.34707642 -99.44905090]
[403.04504395 -84.61975861]
[399.65411377 -70.00097656]
[395.19281006 -55.67255020]
[389.68545532 -41.71273422]
[383.16220093 -28.19776917]
[375.65863037 -15.20147514]
[367.21572876 -2.79483247]
[357.87963867 8.95439720]
[347.70132446 19.98204231]
[336.73635864 30.22787285]
[325.04467773 39.63593292]
[312.69009399 48.15483093]
[299.74011230 55.73804474]
[286.26544189 62.34415817]
[272.33969116 67.93708801]
[258.03894043 72.48628235]
[243.44123840 75.96690369]
[228.62635803 78.35993958]
[213.67520142 79.65231323]
[198.66943359 79.83697510]
[183.69100952 78.91291046]
[168.82173157 76.88516998]
[154.14280701 73.76482391]
[139.73442078 69.56892395]
[125.67526245 64.32037354]
[119.40586090 77.94735718]
[113.13645172 91.57433319]
[127.62223816 128.68548584]
[127.62223816 143.68548584]
[127.62223816 158.68548584]
[127.62223816 173.68548584]
[127.62223816 188.68548584]
[127.62223816 203.68548584]
[127.62223816 218.68548584]
[127.62223816 233.68548584]
[127.62223816 248.68548584]
[127.62223816 263.68548584]
[142.23225403 267.42691040]
[155.45240784 274.68490601]
[166.45169067 285.00317383]
[174.53865051 297.73312378]
[179.20495605 312.07455444]
[180.15727234 327.12591553]
[177.33573914 341.94110107]
[170.91770935 355.58880615]
[161.30664062 367.21112061]
[149.10667419 376.07745361]
[135.08473206 381.63046265]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[27 42]
[28 41]
[29 40]
[30 39]
[43 131]
[44 130]
[45 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
