%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCCAAUGGGGGGGGGGAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGxxxxxxxxxxUACUACUAAUCAACGCCCAUAAUCAUACAAAGCCCCCGCACCAAUAGGAUCCCCCCCCCCCCUCCCGAAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 387.65267944]
[71.19830322 381.63665771]
[59.48964310 372.10723877]
[50.78712082 359.77157593]
[45.73651886 345.54504395]
[44.71262741 330.48336792]
[47.79142761 315.70419312]
[54.74444962 302.30426025]
[65.05573273 291.27795410]
[77.96011353 283.44342041]
[92.50000000 279.38211060]
[92.50000000 264.38211060]
[92.50000000 249.38211060]
[92.50000000 234.38211060]
[92.50000000 219.38211060]
[92.50000000 204.38211060]
[92.50000000 189.38211060]
[92.50000000 174.38211060]
[92.50000000 159.38211060]
[92.50000000 144.38211060]
[92.50000000 129.38211060]
[73.94993591 115.52265930]
[70.58951569 92.61203003]
[84.37817383 74.00927734]
[80.07059479 59.64109421]
[75.76300812 45.27291107]
[71.37400818 59.61643600]
[61.91276550 71.25623322]
[48.76851273 78.48316956]
[33.87128830 80.23609161]
[19.40852356 76.25759888]
[7.50385094 67.13188171]
[-0.09470650 54.19890213]
[-2.27141762 39.35767746]
[1.29333472 24.78741455]
[10.07612133 12.62753487]
[22.78732300 4.66353178]
[37.56049347 2.06479645]
[52.22641754 5.21291447]
[64.63162994 13.64563274]
[72.95435333 26.12412262]
[72.95435333 11.12412167]
[72.95435333 -3.87587833]
[72.95435333 -18.87587738]
[72.95435333 -33.87587738]
[57.85009384 -37.86650467]
[44.29573059 -45.61221695]
[33.20557785 -56.58392334]
[25.32600975 -70.03515625]
[21.18524933 -85.05284882]
[21.05795479 -100.61930084]
[24.94700241 -115.68117523]
[32.58369446 -129.22074890]
[43.44630432 -140.32470703]
[56.79571915 -148.24566650]
[71.72573090 -152.45263672]
[71.41367340 -167.44940186]
[71.10161591 -182.44615173]
[70.78955841 -197.44290161]
[70.47750092 -212.43965149]
[55.67214584 -215.15740967]
[41.71706390 -220.80015564]
[29.18371010 -229.13682556]
[18.58531952 -239.82601929]
[10.35588837 -252.43003845]
[4.83240700 -266.43276978]
[2.24105811 -281.26077271]
[2.68795633 -296.30685425]
[6.15480137 -310.95492554]
[12.49962711 -324.60513306]
[21.46261787 -336.69851685]
[32.67674637 -346.73983765]
[45.68279648 -354.31793213]
[59.94818497 -359.12246704]
[74.88874817 -360.95672607]
[89.89267731 -359.74557495]
[104.34558105 -355.53860474]
[117.65560913 -348.50808716]
[129.27774048 -338.94195557]
[138.73603821 -327.23190308]
[145.64320374 -313.85745239]
[149.71638489 -299.36627197]
[150.78878784 -284.35177612]
[148.81649780 -269.42883301]
[143.88029480 -255.20845032]
[136.18229675 -242.27301025]
[126.03773499 -231.15219116]
[113.86202240 -222.30137634]
[100.15374756 -216.08299255]
[85.47425842 -212.75170898]
[85.78631592 -197.75495911]
[86.09837341 -182.75820923]
[86.41042328 -167.76144409]
[86.72248077 -152.76469421]
[100.79222107 -149.56004333]
[113.68861389 -143.06513977]
[124.65438080 -133.65626526]
[133.04435730 -121.88099670]
[138.36347961 -108.42627716]
[140.29605103 -94.07836914]
[138.72434998 -79.67693329]
[133.73588562 -66.06584930]
[125.61855316 -54.04378128]
[114.84393311 -44.31733322]
[102.03997040 -37.45948792]
[87.95435333 -33.87587738]
[87.95435333 -18.87587738]
[87.95435333 -3.87587833]
[87.95435333 11.12412167]
[87.95435333 26.12412262]
[90.13119507 40.96532822]
[94.43877411 55.33351135]
[98.74636078 69.70169830]
[105.65076447 70.20691681]
[112.26065063 72.26490784]
[118.23153687 75.76840973]
[123.25222015 80.53482056]
[127.06103516 86.31573486]
[129.45947266 92.80984497]
[130.32252502 99.67869568]
[129.60522461 106.56429291]
[142.99150085 113.33240509]
[159.32649231 111.88328552]
[168.52622986 125.45887756]
[161.12681580 140.09379578]
[144.74012756 140.73287964]
[136.22338867 126.71869659]
[122.83710480 119.95057678]
[115.88468933 125.83090210]
[107.50000000 129.38211060]
[107.50000000 144.38211060]
[107.50000000 159.38211060]
[107.50000000 174.38211060]
[107.50000000 189.38211060]
[107.50000000 204.38211060]
[107.50000000 219.38211060]
[107.50000000 234.38211060]
[107.50000000 249.38211060]
[107.50000000 264.38211060]
[107.50000000 279.38211060]
[122.03988647 283.44342041]
[134.94427490 291.27795410]
[145.25555420 302.30426025]
[152.20857239 315.70419312]
[155.28736877 330.48336792]
[154.26348877 345.54504395]
[149.21287537 359.77157593]
[140.51036072 372.10723877]
[128.80169678 381.63665771]
[114.95575714 387.65267944]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 113]
[25 112]
[26 111]
[41 110]
[42 109]
[43 108]
[44 107]
[45 106]
[56 94]
[57 93]
[58 92]
[59 91]
[60 90]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
