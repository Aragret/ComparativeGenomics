%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGAAAACUGGGGGGGGGGACGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGAUUUAGCAGUAAACxxxxxxxxxxAGGCCCCAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCCCCCCCCCCCCAUAAAACU\
) } def
/len { sequence length } bind def

/coor [
[84.13760376 394.42037964]
[70.29166412 388.40435791]
[58.58300018 378.87493896]
[49.88047409 366.53927612]
[44.82987213 352.31274414]
[43.80598450 337.25106812]
[46.88478088 322.47189331]
[53.83780289 309.07196045]
[64.14908600 298.04565430]
[77.05346680 290.21112061]
[91.59335327 286.14981079]
[91.59335327 271.14981079]
[91.59335327 256.14981079]
[91.59335327 241.14982605]
[91.59335327 226.14982605]
[91.59335327 211.14982605]
[91.59335327 196.14982605]
[91.59335327 181.14982605]
[91.59335327 166.14982605]
[91.59335327 151.14982605]
[88.42778015 144.41744995]
[91.75263977 135.83857727]
[92.06469727 120.84181976]
[83.78213501 117.00048828]
[77.36563873 109.86195374]
[74.11853027 100.33273315]
[74.90641022 89.82586670]
[59.91371918 90.29390717]
[44.92102051 90.76194763]
[29.92832565 91.22998810]
[14.93562984 91.69802856]
[-0.05706667 92.16607666]
[-15.04976273 92.63411713]
[-24.57992172 105.03210449]
[-39.86078262 108.35314178]
[-53.67718887 101.02915192]
[-59.50545502 86.51828003]
[-54.59365463 71.67212677]
[-41.26099014 63.50059128]
[-25.80273438 65.86202240]
[-15.51780510 77.64141846]
[-0.52510881 77.17337799]
[14.46758747 76.70533752]
[29.46028328 76.23729706]
[44.45298004 75.76924896]
[59.44567490 75.30120850]
[74.43836975 74.83316803]
[86.96433258 66.58087921]
[93.31146240 52.98992538]
[99.65859222 39.39897537]
[106.00572205 25.80802536]
[112.35285187 12.21707439]
[118.69998169 -1.37387669]
[97.01097107 -31.10282707]
[94.21864319 -45.84063339]
[91.42632294 -60.57843781]
[76.37529755 -60.80577087]
[61.67821121 -64.05853271]
[47.93688965 -70.20352936]
[35.71403503 -78.98912811]
[25.51016617 -90.05555725]
[17.74312210 -102.94966125]
[12.73096180 -117.14343262]
[10.67892742 -132.05564880]
[11.67105007 -147.07565308]
[15.66670227 -161.58839417]
[22.50226402 -174.99957275]
[31.89782524 -186.76004028]
[43.46864319 -196.38816833]
[56.74089813 -203.48973083]
[71.17109680 -207.77391052]
[86.16834259 -209.06526184]
[101.11849976 -207.31091309]
[115.40937042 -202.58270264]
[128.45574951 -195.07424927]
[139.72338867 -185.09301758]
[148.75091553 -173.04772949]
[155.16862488 -159.43164062]
[158.71372986 -144.80232239]
[159.24105835 -129.75881958]
[156.72901917 -114.91716766]
[151.28047180 -100.88512421]
[143.11854553 -88.23728943]
[132.57745361 -77.49158478]
[120.08884430 -69.08803558]
[106.16412354 -63.37076187]
[108.95645142 -48.63295746]
[111.74877930 -33.89515305]
[118.29534912 -30.23559761]
[131.38850403 -22.91649246]
[137.93508911 -19.25694084]
[151.95179749 -24.59845352]
[165.96850586 -29.93996429]
[179.98522949 -35.28147888]
[194.00193787 -40.62298965]
[208.01864624 -45.96450424]
[222.03536987 -51.30601501]
[235.93791199 -56.93797302]
[249.72030640 -62.85793686]
[263.50268555 -68.77790070]
[277.28506470 -74.69786072]
[286.65936279 -88.15351868]
[302.97427368 -86.49356079]
[309.44644165 -71.42560577]
[299.41781616 -58.45027542]
[283.20501709 -60.91548157]
[269.42263794 -54.99551773]
[255.64025879 -49.07555389]
[241.85787964 -43.15559006]
[239.26928711 -39.07212067]
[234.05833435 -36.60692596]
[227.37687683 -37.28930283]
[213.36016846 -31.94779015]
[199.34344482 -26.60627747]
[185.32673645 -21.26476479]
[171.31002808 -15.92325211]
[157.29330444 -10.58173943]
[143.27659607 -5.24022722]
[132.29093933 4.97325277]
[125.94380188 18.56420326]
[119.59667206 32.15515518]
[113.24954224 45.74610519]
[106.90241241 59.33705521]
[100.55528259 72.92800903]
[114.32202148 78.15370941]
[122.86844635 89.49191284]
[124.01055145 103.11595154]
[117.95383453 114.78277588]
[107.06144714 121.15387726]
[106.74938965 136.15063477]
[106.59335327 151.14982605]
[106.59335327 166.14982605]
[106.59335327 181.14982605]
[106.59335327 196.14982605]
[106.59335327 211.14982605]
[106.59335327 226.14982605]
[106.59335327 241.14982605]
[106.59335327 256.14981079]
[106.59335327 271.14981079]
[106.59335327 286.14981079]
[121.13323975 290.21112061]
[134.03762817 298.04565430]
[144.34890747 309.07196045]
[151.30192566 322.47189331]
[154.38072205 337.25106812]
[153.35684204 352.31274414]
[148.30622864 366.53927612]
[139.60371399 378.87493896]
[127.89505005 388.40435791]
[114.04911041 394.42037964]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[48 124]
[49 123]
[50 122]
[51 121]
[52 120]
[53 119]
[54 88]
[55 87]
[56 86]
[91 118]
[92 117]
[93 116]
[94 115]
[95 114]
[96 113]
[97 112]
[98 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
