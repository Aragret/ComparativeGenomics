%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUUAUCAGGGGGGGGGGCAACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAxxxxxxxxxxUUACUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCCCCCCCCCCCACCCUAAUCA\
) } def
/len { sequence length } bind def

/coor [
[108.68367004 512.21289062]
[94.66172791 506.65991211]
[82.46176910 497.79357910]
[72.85070038 486.17126465]
[66.43267059 472.52355957]
[63.61113358 457.70837402]
[64.56345367 442.65698242]
[69.22975922 428.31558228]
[77.31672668 415.58560181]
[88.31599426 405.26733398]
[101.53615570 398.00936890]
[116.14617157 394.26791382]
[116.14617157 379.26791382]
[116.14617157 364.26791382]
[116.14617157 349.26791382]
[116.14617157 334.26791382]
[116.14617157 319.26791382]
[116.14617157 304.26791382]
[116.14617157 289.26791382]
[116.14617157 274.26791382]
[116.14617157 259.26791382]
[116.14617157 244.26792908]
[114.76214600 229.33190918]
[112.00589752 214.58731079]
[109.24965668 199.84272766]
[99.42568970 192.71868896]
[97.03738403 180.41148376]
[103.90950775 169.44892883]
[101.45658112 154.65084839]
[99.00365448 139.85276794]
[78.27244568 133.42378235]
[63.98217392 117.08660889]
[60.36907578 95.68425751]
[46.02901459 91.28395844]
[41.70115280 92.45413208]
[37.64578247 92.17575836]
[34.29451752 90.72119141]
[31.94201660 88.47731018]
[30.72006035 85.88928986]
[16.78934288 80.32735443]
[2.85862732 74.76541901]
[-11.07208920 69.20348358]
[-23.08630371 78.77187347]
[-38.27749252 81.03536987]
[-52.55929565 75.38510132]
[-62.08998871 63.34095001]
[-64.30585480 48.14274216]
[-58.61083984 33.87871933]
[-46.53687668 24.38582611]
[-31.33180046 22.21760941]
[-17.08569527 27.95730591]
[-7.63069773 40.06096649]
[-5.51015139 55.27276611]
[8.42056465 60.83470154]
[22.35128021 66.39663696]
[36.28199768 71.95858002]
[50.42931366 76.94390106]
[64.76937103 81.34420013]
[69.10015106 73.21862793]
[75.32051849 66.11969757]
[83.18178558 60.48910141]
[92.33179474 56.70708084]
[102.33038330 55.06821442]
[103.25379181 40.09666443]
[104.17720795 25.12511253]
[105.10062408 10.15356255]
[90.74864197 5.51981783]
[78.00036621 -2.53823733]
[67.65715790 -13.51406574]
[60.36919785 -26.71771812]
[56.59461212 -41.31920242]
[56.57067871 -56.40065765]
[60.29890060 -71.01404572]
[67.54492188 -84.24076080]
[77.85324097 -95.24936676]
[90.57588196 -103.34783936]
[104.91307831 -108.02711487]
[119.96358490 -108.99304199]
[134.78131104 -106.18490601]
[148.43481445 -99.77922058]
[160.06581116 -90.17866516]
[168.94317627 -77.98673248]
[174.50886536 -63.96981812]
[176.41300964 -49.00903320]
[174.53593445 -34.04483032]
[168.99560547 -20.01787186]
[160.14030457 -7.80990076]
[148.52668762 1.81167746]
[134.88479614 8.24204254]
[120.07217407 11.07697678]
[119.14875793 26.04852676]
[118.22534180 41.02007675]
[117.30193329 55.99162674]
[130.21463013 63.62459564]
[142.88613892 55.59759903]
[155.55766296 47.57060242]
[168.22917175 39.54360580]
[170.13061523 24.02205467]
[181.59947205 13.39193439]
[197.22048950 12.67246246]
[209.61791992 22.20335197]
[212.93806458 37.48440933]
[205.61325073 51.30038452]
[191.10203552 57.12779617]
[176.25617981 52.21512222]
[163.58465576 60.24211884]
[150.91314697 68.26911163]
[138.24162292 76.29611206]
[142.26040649 86.84767151]
[143.47602844 97.88737488]
[141.90222168 108.69528961]
[137.73165894 118.58963776]
[131.31784058 126.96975708]
[123.14688873 133.35250854]
[113.80173492 137.39984131]
[116.25466156 152.19792175]
[118.70758820 166.99600220]
[130.72689819 180.90882874]
[123.99425507 197.08647156]
[126.75049591 211.83106995]
[129.50674438 226.57566833]
[136.99507141 213.57855225]
[150.25366211 206.56359863]
[165.21171570 207.68463135]
[177.27661133 216.59744263]
[182.74404907 230.56552124]
[179.93533325 245.30020142]
[169.71284485 256.27749634]
[155.21520996 260.12698364]
[140.89367676 255.66674805]
[131.14616394 244.26792908]
[131.14616394 259.26791382]
[131.14616394 274.26791382]
[131.14616394 289.26791382]
[131.14616394 304.26791382]
[131.14616394 319.26791382]
[131.14616394 334.26791382]
[131.14616394 349.26791382]
[131.14616394 364.26791382]
[131.14616394 379.26791382]
[131.14616394 394.26791382]
[145.75617981 398.00936890]
[158.97633362 405.26733398]
[169.97561646 415.58560181]
[178.06257629 428.31558228]
[182.72888184 442.65698242]
[183.68119812 457.70837402]
[180.85966492 472.52355957]
[174.44163513 486.17126465]
[164.83056641 497.79357910]
[152.63061523 506.65991211]
[138.60867310 512.21289062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 121]
[24 120]
[25 119]
[28 117]
[29 116]
[30 115]
[33 58]
[34 57]
[39 56]
[40 55]
[41 54]
[42 53]
[63 93]
[64 92]
[65 91]
[66 90]
[94 108]
[95 107]
[96 106]
[97 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
