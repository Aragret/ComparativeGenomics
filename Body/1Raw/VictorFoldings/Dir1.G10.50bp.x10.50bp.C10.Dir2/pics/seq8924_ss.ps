%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAACACAGGGGGGGGGGCUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAxxxxxxxxxxACAAUUAUAUUACUACCACUGACAUGACUUUCCAAAAAACACAUAAUUUGCCCCCCCCCCAAUCAACACA\
) } def
/len { sequence length } bind def

/coor [
[76.27207947 431.48370361]
[62.42613602 425.46768188]
[50.71747589 415.93826294]
[42.01495361 403.60260010]
[36.96435165 389.37606812]
[35.94046021 374.31439209]
[39.01925659 359.53521729]
[45.97227859 346.13528442]
[56.28356171 335.10897827]
[69.18794250 327.27444458]
[83.72782898 323.21313477]
[83.72782898 308.21313477]
[83.72782898 293.21313477]
[83.72782898 278.21313477]
[83.72782898 263.21313477]
[83.72782898 248.21315002]
[83.72782898 233.21315002]
[83.72782898 218.21315002]
[83.72782898 203.21315002]
[83.72782898 188.21315002]
[83.72782898 173.21315002]
[75.99053192 160.48587036]
[83.72782898 146.68569946]
[83.72782898 131.68569946]
[72.12648773 122.17733765]
[57.41852951 125.12282562]
[42.71056747 128.06829834]
[28.00260544 131.01379395]
[22.46868706 145.41445923]
[10.01416874 154.51876831]
[-5.38675594 155.42156982]
[-18.81970978 147.83479309]
[-25.99828339 134.17933655]
[-24.63182259 118.81259918]
[-15.15635967 106.63807678]
[-0.59547931 101.54059601]
[14.40449429 105.14674377]
[25.05712318 116.30582428]
[39.76508331 113.36034393]
[54.47304535 110.41486359]
[69.18100739 107.46937561]
[69.87834930 95.66806793]
[74.75154114 85.42785645]
[82.76318359 78.09676361]
[92.49469757 74.48857117]
[102.38829803 74.80006409]
[108.16456604 60.95684814]
[113.94084167 47.11362839]
[119.71710968 33.27041245]
[107.95994568 22.56290436]
[100.58215332 8.50591469]
[98.45586395 -7.19950628]
[101.81895447 -22.65987396]
[110.24861908 -36.01755524]
[122.71438599 -45.67396545]
[137.70410156 -50.48088074]
[153.40731812 -49.87694550]
[158.89434814 -63.83733368]
[164.38137817 -77.79772186]
[169.86840820 -91.75811768]
[175.35543823 -105.71850586]
[170.92204285 -117.87575531]
[175.82830811 -129.41471863]
[186.92547607 -134.33001709]
[192.70175171 -148.17323303]
[198.47801208 -162.01644897]
[185.71113586 -169.95388794]
[174.38293457 -179.83659363]
[164.78681946 -191.40858459]
[157.17138672 -204.37011719]
[151.73385620 -218.38543701]
[148.61509705 -233.09155273]
[147.89590454 -248.10749817]
[149.59486389 -263.04437256]
[153.66801453 -277.51522827]
[160.00982666 -291.14523315]
[168.45603943 -303.58139038]
[178.78785706 -314.50152588]
[190.73770142 -323.62280273]
[203.99600220 -330.70895386]
[218.21936035 -335.57641602]
[233.03935242 -338.09915161]
[248.07209778 -338.21176147]
[262.92822266 -335.91134644]
[277.22290039 -331.25753784]
[290.58587646 -324.37081909]
[302.67102051 -315.42959595]
[313.16531372 -304.66549683]
[321.79690552 -292.35726929]
[328.34219360 -278.82379150]
[332.63168335 -264.41558838]
[334.55426025 -249.50585938]
[334.06011963 -234.48081970]
[331.16204834 -219.72962952]
[325.93508911 -205.63441467]
[318.51470947 -192.56024170]
[309.09304810 -180.84577942]
[297.91418457 -170.79446411]
[285.26766968 -162.66664124]
[271.48104858 -156.67283630]
[256.91146851 -152.96830750]
[241.93629456 -151.64903259]
[226.94343567 -152.74914551]
[212.32122803 -156.24017334]
[206.54496765 -142.39695740]
[200.76869202 -128.55374146]
[203.97355652 -111.32792664]
[189.31582642 -100.23147583]
[183.82879639 -86.27108002]
[178.34176636 -72.31069183]
[172.85473633 -58.35030365]
[167.36770630 -44.38991165]
[178.27891541 -35.31925583]
[185.85887146 -23.29903603]
[189.35214233 -9.50230217]
[188.40284729 4.71964645]
[183.09092712 17.96961594]
[173.92556763 28.94177246]
[161.79640198 36.55034637]
[147.88719177 40.03705978]
[133.56033325 39.04668427]
[127.78405762 52.88990402]
[122.00778198 66.73311615]
[116.23151398 80.57633972]
[127.41641998 98.73381042]
[120.97800446 120.85203552]
[98.72782898 131.68569946]
[98.72782898 146.68569946]
[106.46513367 160.48587036]
[98.72782898 173.21315002]
[98.72782898 188.21315002]
[98.72782898 203.21315002]
[98.72782898 218.21315002]
[98.72782898 233.21315002]
[98.72782898 248.21315002]
[98.72782898 263.21313477]
[98.72782898 278.21313477]
[98.72782898 293.21313477]
[98.72782898 308.21313477]
[98.72782898 323.21313477]
[113.26771545 327.27444458]
[126.17209625 335.10897827]
[136.48338318 346.13528442]
[143.43640137 359.53521729]
[146.51519775 374.31439209]
[145.49131775 389.37606812]
[140.44070435 403.60260010]
[131.73818970 415.93826294]
[120.02952576 425.46768188]
[106.18358612 431.48370361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[24 127]
[25 41]
[26 40]
[27 39]
[28 38]
[46 124]
[47 123]
[48 122]
[49 121]
[57 112]
[58 111]
[59 110]
[60 109]
[61 108]
[64 106]
[65 105]
[66 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
