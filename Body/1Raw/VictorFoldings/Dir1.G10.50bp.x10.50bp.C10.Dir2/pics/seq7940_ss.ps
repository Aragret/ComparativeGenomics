%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAGCAUUAGGGGGGGGGGACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGxxxxxxxxxxAUUCAAGCAAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCCCCCCCCCCCUUAGCAUGA\
) } def
/len { sequence length } bind def

/coor [
[83.67079926 378.44409180]
[70.45059967 371.17163086]
[59.56379700 360.72460938]
[51.75266647 347.81536865]
[47.54978561 333.32406616]
[47.24171066 318.23870850]
[50.84945297 303.58789062]
[58.12702560 290.37051392]
[68.57823181 279.48773193]
[81.49049377 271.68157959]
[95.98342896 267.48431396]
[95.67137909 252.48754883]
[95.35932159 237.49079895]
[95.04726410 222.49404907]
[94.73520660 207.49728394]
[94.42314911 192.50053406]
[94.11109161 177.50378418]
[93.79904175 162.50703430]
[93.48698425 147.51026917]
[93.17492676 132.51351929]
[85.01551056 130.76727295]
[77.32211304 126.95037842]
[70.62440491 121.19276428]
[65.41447449 113.76046753]
[62.11183929 105.04445648]
[47.88505936 109.79827118]
[33.65828323 114.55208588]
[19.43150330 119.30590057]
[6.32505894 130.06031799]
[-7.63729525 120.44319916]
[-2.26117992 104.36421204]
[14.67768764 105.07912445]
[28.90446663 100.32530975]
[43.13124466 95.57149506]
[57.35802460 90.81768036]
[62.98998260 76.91512299]
[56.08298492 63.59996414]
[49.17598343 50.28480911]
[42.26898575 36.96965408]
[31.60736084 26.41836357]
[18.22107506 19.65024948]
[4.83479023 12.88213444]
[-8.55149460 6.11401987]
[-21.93778038 -0.65409505]
[-35.18465424 7.25310707]
[-50.60281754 6.72042990]
[-63.27239227 -2.08215141]
[-69.15055847 -16.34576607]
[-66.36162567 -31.51894379]
[-55.79551697 -42.75998306]
[-40.82384872 -46.48190308]
[-26.22402382 -41.49705887]
[-16.65479279 -29.39609337]
[-15.16966438 -14.04037952]
[-1.78337979 -7.27226496]
[11.60290527 -0.50415039]
[24.98918915 6.26396418]
[38.37547302 13.03207874]
[44.68103790 8.97130775]
[33.05995560 -0.51291186]
[38.48889542 -14.49599457]
[53.46523285 -13.65375233]
[57.29216766 0.84976596]
[63.59773254 -3.21100521]
[62.97375488 -18.19802094]
[62.34977722 -33.18503571]
[61.72579956 -48.17205429]
[47.44013977 -53.36708832]
[36.23334503 -63.63724899]
[29.81436539 -77.41640472]
[29.16205025 -92.60334015]
[34.37587357 -106.88214874]
[44.66076660 -118.07542419]
[58.44835281 -124.47627258]
[73.63613129 -125.10861206]
[87.90807343 -119.87600708]
[99.08781433 -109.57640076]
[105.47051239 -95.78040314]
[106.08287048 -80.59180450]
[100.83149719 -66.32675934]
[90.51719666 -55.16058350]
[76.71281433 -48.79603195]
[77.33679199 -33.80901337]
[77.96076965 -18.82199860]
[78.58474731 -3.83498240]
[77.41867828 9.79207897]
[72.09474182 20.58146095]
[64.21368408 27.46377563]
[55.58414078 30.06265640]
[62.49114227 43.37781143]
[69.39813995 56.69296646]
[76.30513763 70.00812531]
[98.17007446 63.49011993]
[118.78253174 70.59841156]
[130.80574036 87.56145477]
[145.62348938 85.23034668]
[154.92826843 72.73799896]
[169.98878479 70.58500671]
[181.84098816 79.53267670]
[196.65875244 77.20156860]
[211.47651672 74.87046814]
[226.29426575 72.53936768]
[241.11203003 70.20825958]
[255.90473938 67.72314453]
[270.67077637 65.08427429]
[285.43685913 62.44541168]
[300.20291138 59.80654907]
[314.73129272 51.06801987]
[327.15017700 62.60958481]
[319.49755859 77.73815155]
[302.84176636 74.57260132]
[288.07571411 77.21147156]
[273.30966187 79.85033417]
[258.54360962 82.48919678]
[252.47312927 86.78978729]
[243.44313049 85.02601624]
[228.62536621 87.35712433]
[213.80761719 89.68822479]
[198.98985291 92.01933289]
[184.17210388 94.35043335]
[175.63964844 106.50498199]
[160.64555359 109.08013153]
[147.95458984 100.04811096]
[133.13684082 102.37921143]
[131.92730713 109.18463135]
[129.33573914 115.59246826]
[125.47430420 121.32534790]
[120.51015472 126.13511658]
[114.65817261 129.81356812]
[108.17167664 132.20146179]
[108.48373413 147.19821167]
[108.79579163 162.19497681]
[109.10784912 177.19172668]
[109.41990662 192.18847656]
[109.73196411 207.18522644]
[110.04401398 222.18199158]
[110.35607147 237.17874146]
[110.66812897 252.17549133]
[110.98018646 267.17224121]
[125.63517761 270.76300049]
[138.86099243 278.02526855]
[149.75585938 288.46386719]
[157.57695007 301.36706543]
[161.79101562 315.85513306]
[162.11074829 330.94024658]
[158.51431274 345.59384155]
[151.24694824 358.81686401]
[140.80415344 369.70767212]
[127.89792633 377.52380371]
[113.40823364 381.73226929]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[25 35]
[26 34]
[27 33]
[28 32]
[36 92]
[37 91]
[38 90]
[39 89]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
[64 85]
[65 84]
[66 83]
[67 82]
[95 124]
[96 123]
[99 120]
[100 119]
[101 118]
[102 117]
[103 116]
[104 114]
[105 113]
[106 112]
[107 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
