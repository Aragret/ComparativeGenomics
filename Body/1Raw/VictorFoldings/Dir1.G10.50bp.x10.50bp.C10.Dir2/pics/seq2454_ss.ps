%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCACACGGGGGGGGGGCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUxxxxxxxxxxCCCCCAUCUCAAUCAUAUACCAAAUCUCUCCCUCACUAAACGUAAGCCUUCCCCCCCCCCCUCCUCACUC\
) } def
/len { sequence length } bind def

/coor [
[107.18450928 372.15365601]
[93.33856964 366.13763428]
[81.62990570 356.60821533]
[72.92738342 344.27255249]
[67.87678528 330.04602051]
[66.85289001 314.98434448]
[69.93168640 300.20516968]
[76.88471222 286.80523682]
[87.19599915 275.77890015]
[100.10037994 267.94439697]
[114.64026642 263.88308716]
[114.64026642 248.88308716]
[114.64026642 233.88308716]
[114.64026642 218.88308716]
[114.64026642 203.88308716]
[114.64026642 188.88308716]
[114.64026642 173.88308716]
[114.64026642 158.88308716]
[114.64026642 143.88308716]
[114.64026642 128.88308716]
[108.46447754 124.62754822]
[94.91788483 131.06880188]
[96.11290741 116.11645508]
[89.93711853 111.86091614]
[75.92040253 117.20242310]
[61.90369415 122.54393768]
[47.88697815 127.88545227]
[35.23924637 139.17576599]
[20.88892174 130.14778137]
[25.59152222 113.85907745]
[42.54546738 113.86873627]
[56.56217957 108.52722168]
[70.57889557 103.18571472]
[84.59560394 97.84420013]
[83.03802490 82.92528534]
[68.22026825 80.59418488]
[53.40250778 78.26307678]
[38.58475113 75.93197632]
[25.95761871 85.43624115]
[10.32024860 83.14534760]
[0.95001519 70.41843414]
[3.40611100 54.80615997]
[16.23137856 45.57100677]
[31.81681442 48.19202805]
[40.91585541 61.11421585]
[55.73361206 63.44532013]
[70.55136871 65.77642822]
[85.36912537 68.10752869]
[99.08917999 62.04451752]
[107.34146881 49.51855469]
[115.59375763 36.99259186]
[113.76709747 24.18177032]
[120.95098877 13.90506458]
[132.82412720 11.38793373]
[141.33522034 -0.96363884]
[142.79432678 -16.71741867]
[156.38705444 -22.80734825]
[164.89813232 -35.15892029]
[173.40922546 -47.51049423]
[181.92031860 -59.86206818]
[190.43141174 -72.21363831]
[198.81355286 -84.65307617]
[207.06584167 -97.17903900]
[215.31813049 -109.70500183]
[203.86334229 -119.41814423]
[193.66288757 -130.44122314]
[184.86553955 -142.61347961]
[177.59956360 -155.75741577]
[171.97093201 -169.68135071]
[168.06173706 -184.18223572]
[165.92895508 -199.04858398]
[165.60372925 -214.06362915]
[167.09077454 -229.00840759]
[170.36840820 -243.66494751]
[175.38883972 -257.81954956]
[182.07884216 -271.26577759]
[190.34088135 -283.80755615]
[200.05445862 -295.26199341]
[211.07791138 -305.46200562]
[223.25050354 -314.25891113]
[236.39471436 -321.52438354]
[250.31884766 -327.15249634]
[264.81988525 -331.06115723]
[279.68630981 -333.19338989]
[294.70138550 -333.51806641]
[309.64608765 -332.03045654]
[324.30252075 -328.75225830]
[338.45690918 -323.73132324]
[351.90289307 -317.04080200]
[364.44436646 -308.77828979]
[375.89843750 -299.06430054]
[386.09805298 -288.04043579]
[394.89450073 -275.86752319]
[402.15948486 -262.72305298]
[407.78707886 -248.79870605]
[411.69519043 -234.29753113]
[413.82684326 -219.43101501]
[414.15097046 -204.41593933]
[412.66281128 -189.47128296]
[409.38406372 -174.81498718]
[404.36257935 -160.66076660]
[397.67156982 -147.21502686]
[389.40859985 -134.67387390]
[379.69415283 -123.22016907]
[368.66995239 -113.02095795]
[356.49670410 -104.22496796]
[343.35195923 -96.96047211]
[329.42739868 -91.33340454]
[314.92605591 -87.42582703]
[300.05947876 -85.29472351]
[285.04437256 -84.97117615]
[270.09979248 -86.45989227]
[255.44360352 -89.73917389]
[241.28956604 -94.76119232]
[227.84408569 -101.45271301]
[219.59179688 -88.92675018]
[211.33950806 -76.40078735]
[210.27914429 -69.03727722]
[202.78297424 -63.70254898]
[194.27189636 -51.35097504]
[185.76080322 -38.99940491]
[177.24971008 -26.64783096]
[168.73861694 -14.29625893]
[167.88827515 0.57405341]
[153.68678284 7.54745150]
[145.17570496 19.89902306]
[144.75337219 37.41534805]
[128.11972046 45.24488068]
[119.86743164 57.77084351]
[111.61514282 70.29680634]
[129.64025879 128.88308716]
[129.64025879 143.88308716]
[129.64025879 158.88308716]
[129.64025879 173.88308716]
[129.64025879 188.88308716]
[129.64025879 203.88308716]
[129.64025879 218.88308716]
[129.64025879 233.88308716]
[129.64025879 248.88308716]
[129.64025879 263.88308716]
[144.18014526 267.94439697]
[157.08453369 275.77890015]
[167.39581299 286.80523682]
[174.34883118 300.20516968]
[177.42764282 314.98434448]
[176.40374756 330.04602051]
[171.35314941 344.27255249]
[162.65061951 356.60821533]
[150.94195557 366.13763428]
[137.09602356 372.15365601]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 34]
[25 33]
[26 32]
[27 31]
[35 48]
[36 47]
[37 46]
[38 45]
[49 130]
[50 129]
[51 128]
[54 126]
[55 125]
[57 123]
[58 122]
[59 121]
[60 120]
[61 119]
[62 117]
[63 116]
[64 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
