%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUCCUCCUAGGGGGGGGGGGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCxxxxxxxxxxCUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUCCCCCCCCCCGCCUCUUCCUA\
) } def
/len { sequence length } bind def

/coor [
[86.53137970 388.72952271]
[71.97152710 384.82131958]
[58.77038193 377.54168701]
[47.69544983 367.31381226]
[39.39060974 354.73233032]
[34.33869553 340.52877808]
[32.83341980 325.52883911]
[34.96229935 310.60467529]
[40.60155869 296.62387085]
[49.42333984 284.39932251]
[60.91475677 274.64172363]
[74.40771484 267.91836548]
[89.11775208 264.62014771]
[89.42572784 249.62332153]
[89.73370361 234.62648010]
[90.04168701 219.62963867]
[90.34966278 204.63279724]
[90.65763855 189.63597107]
[90.96561432 174.63912964]
[91.27359772 159.64228821]
[91.58157349 144.64544678]
[91.88954926 129.64860535]
[71.00939941 110.21589661]
[75.09388733 81.98597717]
[65.45207214 70.49530792]
[55.81025696 59.00464249]
[43.39194107 50.59123230]
[29.14525032 45.89743423]
[14.85112095 41.35014343]
[0.51105934 36.94984436]
[-13.82900238 32.54954147]
[-28.16906357 28.14924240]
[-29.17399025 41.84383774]
[-39.60953140 54.93658829]
[-58.51570129 62.15505219]
[-73.42015076 60.46465683]
[-88.32460022 58.77425766]
[-99.53680420 69.67473602]
[-115.13623810 70.76636505]
[-127.75732422 61.53369904]
[-131.44078064 46.33612442]
[-124.44738007 32.34947586]
[-110.07920074 26.17781639]
[-95.12045288 30.73521614]
[-86.63420105 43.86981201]
[-71.72975159 45.56020737]
[-56.82530594 47.25060654]
[-54.11599350 40.25706482]
[-45.98805618 19.27643776]
[-58.14138794 10.48459625]
[-70.29472351 1.69275331]
[-86.65409088 0.55121857]
[-93.60102081 -14.30382156]
[-83.98910522 -27.59077454]
[-67.70626068 -25.64116287]
[-61.50288010 -10.46057987]
[-49.34954453 -1.66873729]
[-37.19621277 7.12310553]
[-23.76876259 13.80918026]
[-9.42870140 18.20948029]
[4.91135979 22.60978127]
[19.25142097 27.01008224]
[26.61400795 25.95912170]
[33.83905029 31.65074158]
[48.08574295 36.34453964]
[38.37565994 24.91150665]
[31.29685020 11.68689060]
[27.16812515 -2.73370624]
[26.17542839 -17.70082283]
[28.36347008 -32.54037857]
[33.63370514 -46.58404922]
[41.74877930 -59.19934082]
[52.34321213 -69.81809998]
[64.93985748 -77.96208191]
[78.97140503 -83.26451111]
[93.80590057 -85.48657990]
[108.77526093 -84.52821350]
[123.20528412 -80.43257141]
[136.44610596 -73.38410950]
[147.90138245 -63.70027161]
[157.05519104 -51.81719208]
[163.49530029 -38.27005005]
[166.93164062 -23.66897011]
[167.20945740 -8.67154217]
[164.31623840 6.04678917]
[158.38229370 19.82315445]
[149.67485046 32.03710175]
[138.58609009 42.13855362]
[125.61540222 49.67256546]
[111.34696198 54.29983139]
[96.42337036 55.81194687]
[81.51675415 54.14081573]
[67.30092621 49.36283112]
[76.94274139 60.85349655]
[86.58454895 72.34416199]
[90.87441254 69.12534332]
[95.86693573 66.60260773]
[101.44364929 64.92040253]
[107.45764160 64.20214844]
[113.73739624 64.54476929]
[120.09168243 66.01402283]
[126.31532288 68.64069366]
[132.19558716 72.41789246]
[146.62297058 68.31295013]
[161.05035400 64.20800018]
[175.47773743 60.10305786]
[189.05755615 49.95294952]
[202.57026672 60.19223785]
[196.47183228 76.01138306]
[179.58268738 74.53044128]
[165.15530396 78.63538361]
[150.72792053 82.74033356]
[136.30052185 86.84527588]
[135.91569519 94.33539581]
[150.40063477 90.43841553]
[158.58282471 103.01028442]
[149.15455627 114.67681122]
[135.14604187 109.31563568]
[134.76121521 116.80575562]
[148.69192505 122.36769867]
[162.62263489 127.92963409]
[177.87240601 122.94724274]
[191.19615173 131.88354492]
[192.37303162 147.88336182]
[180.50025940 158.67301941]
[164.68559265 155.97561646]
[157.06069946 141.86035156]
[143.12998962 136.29841614]
[129.19926453 130.73648071]
[121.16264343 132.17303467]
[113.60693359 131.83776855]
[106.88639069 129.95658875]
[106.57840729 144.95343018]
[106.27043152 159.95027161]
[105.96245575 174.94709778]
[105.65447998 189.94393921]
[105.34649658 204.94078064]
[105.03852081 219.93762207]
[104.73054504 234.93444824]
[104.42256927 249.93128967]
[104.11458588 264.92813110]
[118.67681122 268.82748413]
[131.88237000 276.09915161]
[142.96350098 286.32028198]
[151.27597046 298.89669800]
[156.33648682 313.09722900]
[157.85086060 328.09622192]
[155.73103333 343.02169800]
[150.10025024 357.00588989]
[141.28587341 369.23577881]
[129.80036926 379.00036621]
[116.31150055 385.73190308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[24 95]
[25 94]
[26 93]
[27 65]
[28 64]
[29 62]
[30 61]
[31 60]
[32 59]
[35 47]
[36 46]
[37 45]
[49 58]
[50 57]
[51 56]
[103 113]
[104 112]
[105 111]
[106 110]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
