%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAGAGAAAGGGGGGGGGGUAAGGCCUACUUCACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACxxxxxxxxxxCACAAUGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUUCCCCCCCCCCCACACGAGAAA\
) } def
/len { sequence length } bind def

/coor [
[84.80780792 354.70678711]
[71.58760834 347.43432617]
[60.70080566 336.98733521]
[52.88967514 324.07806396]
[48.68679428 309.58676147]
[48.37871933 294.50143433]
[51.98646164 279.85058594]
[59.26403427 266.63320923]
[69.71524048 255.75044250]
[82.62750244 247.94429016]
[97.12043762 243.74700928]
[96.80838776 228.75025940]
[96.49633026 213.75349426]
[96.18427277 198.75674438]
[95.87221527 183.75999451]
[95.56015778 168.76324463]
[95.24810028 153.76647949]
[94.93605042 138.76972961]
[94.62399292 123.77297974]
[94.31193542 108.77622223]
[90.30830383 110.62634277]
[85.61712646 111.32462311]
[70.85106659 113.96348572]
[56.08501434 116.60234833]
[41.31895828 119.24121857]
[26.55290222 121.88008118]
[11.81509686 124.67240143]
[-2.89286494 127.61788940]
[-8.42678356 142.01855469]
[-20.88130188 151.12286377]
[-36.28222656 152.02568054]
[-49.71517944 144.43888855]
[-56.89375305 130.78343201]
[-55.52729416 115.41670227]
[-46.05183029 103.24217224]
[-31.49094963 98.14469147]
[-16.49097633 101.75084686]
[-5.83834743 112.90992737]
[8.86961365 109.96443939]
[14.84929657 105.53849030]
[23.91403770 107.11402130]
[38.68009186 104.47515869]
[53.44614792 101.83629608]
[68.21220398 99.19743347]
[82.97826385 96.55857086]
[68.32038116 93.37320709]
[57.98499680 82.50215149]
[55.54372787 67.70214081]
[61.84021759 54.08765411]
[74.69857025 46.36348343]
[89.67528534 47.19888306]
[101.59483337 56.30516434]
[106.33814240 70.53545380]
[102.26586151 84.97244263]
[111.53081512 73.17579651]
[120.79576111 61.37916183]
[130.06071472 49.58251953]
[139.32566833 37.78588104]
[146.78057861 24.76957130]
[134.84312439 33.85237885]
[121.10614777 39.87694931]
[106.33837128 42.50614166]
[91.36619568 41.59283066]
[77.02748871 37.18812180]
[64.12464905 29.53850555]
[53.37971878 19.07205963]
[45.39399719 6.37449074]
[40.61436462 -7.84363651]
[39.30830002 -22.78666878]
[41.54888535 -37.61838150]
[47.21073532 -51.50879288]
[55.97701645 -63.68057632]
[67.35715485 -73.45259857]
[80.71431732 -80.27800751]
[95.30102539 -83.77485657]
[110.30100250 -83.74745941]
[124.87483215 -80.19733429]
[138.20697021 -73.32316589]
[149.55133057 -63.50963211]
[158.27307129 -51.30589676]
[163.88414001 -37.39489746]
[166.07052612 -22.55509377]
[164.70986938 -7.61693430]
[159.87864685 6.58296204]
[171.38044739 -3.04556417]
[182.88224792 -12.67409039]
[194.38404846 -22.30261612]
[199.99925232 -37.09383011]
[214.72494507 -39.33063126]
[226.22674561 -48.95915604]
[222.42764282 -63.74190140]
[225.42718506 -78.70738220]
[234.62979126 -90.88418579]
[248.20831299 -97.85460663]
[263.46670532 -98.23465729]
[277.37539673 -91.94888306]
[287.17282104 -80.24532318]
[290.91366577 -65.44773102]
[287.85522461 -50.49417877]
[278.60473633 -38.35371017]
[264.99887085 -31.43681526]
[249.73910522 -31.11685371]
[235.85528564 -37.45735168]
[224.35346985 -27.82882690]
[219.56095886 -13.72630787]
[204.01257324 -10.80081367]
[192.51077271 -1.17228699]
[181.00897217 8.45623970]
[169.50717163 18.08476639]
[160.74096680 30.25660324]
[173.05212402 21.68716621]
[187.68232727 18.37699890]
[202.48333740 20.81214523]
[215.28187561 28.63504219]
[224.19863892 40.69701767]
[227.92436218 55.22695160]
[225.91195679 70.09134674]
[218.45693970 83.10759735]
[206.65394592 92.36445618]
[192.23608398 96.50270081]
[177.32037354 94.91468811]
[164.09698486 87.83359528]
[154.50755310 76.29917908]
[149.96014404 62.00508881]
[151.12229919 47.05083084]
[141.85734558 58.84746933]
[132.59240723 70.64411163]
[123.32745361 82.44075012]
[114.06250000 94.23738861]
[109.30868530 108.46417236]
[109.62074280 123.46092224]
[109.93280029 138.45767212]
[110.24485779 153.45443726]
[110.55691528 168.45118713]
[110.86897278 183.44793701]
[111.18102264 198.44468689]
[111.49308014 213.44143677]
[111.80513763 228.43820190]
[112.11719513 243.43495178]
[126.77218628 247.02572632]
[139.99800110 254.28797913]
[150.89286804 264.72656250]
[158.71395874 277.62979126]
[162.92802429 292.11785889]
[163.24775696 307.20294189]
[159.65132141 321.85653687]
[152.38395691 335.07955933]
[141.94116211 345.97039795]
[129.03492737 353.78649902]
[114.54524231 357.99499512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 45]
[23 44]
[24 43]
[25 42]
[26 41]
[27 39]
[28 38]
[54 129]
[55 128]
[56 127]
[57 126]
[58 125]
[59 110]
[84 109]
[85 108]
[86 107]
[87 106]
[89 104]
[90 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
