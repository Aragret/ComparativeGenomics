%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCUCAACGGGGGGGGGGAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAxxxxxxxxxxCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCACCCCCCCCCCAGACCUCAAC\
) } def
/len { sequence length } bind def

/coor [
[58.64907455 383.84881592]
[44.80313492 377.83276367]
[33.09447479 368.30334473]
[24.39195061 355.96768188]
[19.34134865 341.74118042]
[18.31745720 326.67947388]
[21.39625549 311.90032959]
[28.34927750 298.50039673]
[38.66056061 287.47406006]
[51.56494141 279.63955688]
[66.10482788 275.57824707]
[66.10482788 260.57824707]
[66.10482788 245.57824707]
[66.10482788 230.57824707]
[66.10482788 215.57824707]
[66.10482788 200.57824707]
[66.10482788 185.57824707]
[66.10482788 170.57824707]
[66.10482788 155.57824707]
[66.10482788 140.57824707]
[53.84246063 131.93913269]
[39.71765900 136.98788452]
[25.59285545 142.03663635]
[11.46805286 147.08540344]
[8.79261494 162.20947266]
[-1.09870195 173.95925903]
[-15.54518223 179.17411804]
[-30.66079521 176.45129395]
[-42.37951660 166.52319336]
[-47.54907227 152.06044006]
[-44.77887344 136.95343018]
[-34.81409073 125.26588440]
[-20.33520317 120.14169312]
[-5.23695564 122.95922852]
[6.41929674 132.96060181]
[20.54409981 127.91184235]
[34.66890335 122.86308289]
[48.79370499 117.81432343]
[49.72933578 102.84353638]
[36.34304810 96.07542419]
[22.95676422 89.30730438]
[9.57047939 82.53919220]
[-3.81580520 75.77108002]
[-16.33428001 79.04852295]
[-27.36402893 73.08499908]
[-31.22036362 61.57691956]
[-44.46295166 54.53178406]
[-60.82455826 55.64076614]
[-69.73988342 41.87671661]
[-62.03760147 27.39891052]
[-45.64116287 27.10087204]
[-37.41781616 41.28919601]
[-24.17523003 48.33433151]
[-6.72523928 46.75389481]
[2.95230937 62.38479233]
[16.33859444 69.15290833]
[29.72487831 75.92102051]
[43.11116409 82.68913269]
[56.49744797 89.45725250]
[67.94551849 72.51026154]
[84.88009644 63.29901886]
[102.98200226 62.96051788]
[118.14115143 70.50762177]
[128.58096313 59.73681641]
[118.93151093 48.23498917]
[110.51584625 35.80194092]
[103.42317963 22.56947517]
[97.72870636 8.67785931]
[93.49279022 -5.72564793]
[90.76032257 -20.48835945]
[89.56027985 -35.45378494]
[89.90538025 -50.46327972]
[91.79196930 -65.35773468]
[95.20004272 -79.97926331]
[100.09346771 -94.17286682]
[106.42038727 -107.78808594]
[114.11371613 -120.68058777]
[123.09191132 -132.71371460]
[133.25979614 -143.75990295]
[144.50958252 -153.70204163]
[156.72201538 -162.43476868]
[169.76763916 -169.86549377]
[183.50816345 -175.91545105]
[197.79794312 -180.52049255]
[212.48547363 -183.63183594]
[227.41506958 -185.21646118]
[242.42848206 -185.25759888]
[257.36654663 -183.75480652]
[272.07089233 -180.72399902]
[286.38568115 -176.19732666]
[300.15917969 -170.22274780]
[313.24533081 -162.86363220]
[325.50543213 -154.19796753]
[336.80950928 -144.31761169]
[347.03778076 -133.32731628]
[356.08178711 -121.34356689]
[363.84564209 -108.49341583]
[370.24707031 -94.91307068]
[375.21820068 -80.74649048]
[378.70635986 -66.14385986]
[380.67453003 -51.25996780]
[381.10186768 -36.25258636]
[379.98385620 -21.28081131]
[377.33233643 -6.50334835]
[373.17541504 7.92315435]
[367.55712891 21.84576607]
[360.53710938 35.11690140]
[352.18969727 47.59587860]
[342.60339355 59.15040970]
[331.87985229 69.65801239]
[320.13275146 79.00730133]
[307.48657227 87.09916687]
[294.07540894 93.84783936]
[280.04141235 99.18176270]
[265.53332520 103.04441071]
[250.70500183 105.39482117]
[235.71357727 106.20809937]
[220.71800232 105.47560120]
[205.87721252 103.20510864]
[191.34854126 99.42067719]
[177.28601074 94.16243744]
[163.83866882 87.48611450]
[151.14909363 79.46249390]
[139.35177612 70.17662811]
[128.91195679 80.94743347]
[135.90071106 94.53285980]
[136.51960754 110.51790619]
[130.05125427 125.93251801]
[117.14949036 137.66221619]
[99.81702423 143.07199097]
[81.10482788 140.57824707]
[81.10482788 155.57824707]
[81.10482788 170.57824707]
[81.10482788 185.57824707]
[81.10482788 200.57824707]
[81.10482788 215.57824707]
[81.10482788 230.57824707]
[81.10482788 245.57824707]
[81.10482788 260.57824707]
[81.10482788 275.57824707]
[95.64471436 279.63955688]
[108.54909515 287.47406006]
[118.86038208 298.50039673]
[125.81340790 311.90032959]
[128.89219666 326.67947388]
[127.86830902 341.74118042]
[122.81771088 355.96768188]
[114.11518860 368.30334473]
[102.40652466 377.83276367]
[88.56058502 383.84881592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 38]
[22 37]
[23 36]
[24 35]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
[46 53]
[47 52]
[63 125]
[64 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
