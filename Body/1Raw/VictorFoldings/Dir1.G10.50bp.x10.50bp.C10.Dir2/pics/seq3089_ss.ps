%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACUUCACGGGGGGGGGGAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCCAxxxxxxxxxxCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCCCCCCCCCCCUACUCCAC\
) } def
/len { sequence length } bind def

/coor [
[85.19730377 348.55923462]
[71.35136414 342.54321289]
[59.64270401 333.01379395]
[50.94018173 320.67813110]
[45.88957977 306.45159912]
[44.86568832 291.38992310]
[47.94448853 276.61077881]
[54.89751053 263.21084595]
[65.20879364 252.18450928]
[78.11317444 244.35000610]
[92.65306091 240.28869629]
[92.65306091 225.28869629]
[92.65306091 210.28869629]
[92.65306091 195.28869629]
[92.65306091 180.28869629]
[92.65306091 165.28869629]
[92.65306091 150.28869629]
[92.65306091 135.28869629]
[92.65306091 120.28868866]
[92.65306091 105.28868866]
[90.28324890 102.15493774]
[89.33691406 97.97760010]
[90.25396729 93.43037415]
[93.15031433 89.36036682]
[94.08593750 74.38957214]
[92.68363953 59.45526505]
[88.97747803 44.92033005]
[85.27131653 30.38539314]
[81.56515503 15.85045719]
[77.85899353 1.31552088]
[74.15283203 -13.21941566]
[59.35876846 -10.69314957]
[44.40939713 -9.36551094]
[29.40167046 -9.24511051]
[14.43292332 -10.33273029]
[-0.39976716 -12.62131405]
[-15.00020313 -16.09602165]
[-29.27369499 -20.73431587]
[-43.12767029 -26.50611687]
[-56.47227859 -33.37399292]
[-69.22097778 -41.29339600]
[-81.29108429 -50.21297455]
[-92.60431671 -60.07487488]
[-103.08731079 -70.81513977]
[-112.67206573 -82.36410522]
[-121.29643250 -94.64688873]
[-128.90446472 -107.58381653]
[-135.44683838 -121.09098816]
[-140.88110352 -135.08081055]
[-145.17202759 -149.46253967]
[-148.29179382 -164.14291382]
[-150.22013855 -179.02673340]
[-150.94458008 -194.01744080]
[-150.46041870 -209.01783752]
[-148.77078247 -223.93063354]
[-145.88662720 -238.65910339]
[-141.82667542 -253.10774231]
[-136.61724854 -267.18283081]
[-130.29212952 -280.79309082]
[-122.89234924 -293.85025024]
[-114.46588898 -306.26965332]
[-105.06739807 -317.97070312]
[-94.75783539 -328.87753296]
[-83.60406494 -338.91943359]
[-71.67841339 -348.03125000]
[-59.05823517 -356.15390015]
[-45.82537460 -363.23471069]
[-32.06565475 -369.22772217]
[-17.86831093 -374.09411621]
[-3.32542038 -377.80230713]
[11.46869850 -380.32824707]
[26.41809845 -381.65554810]
[41.42582703 -381.77563477]
[56.39455032 -380.68768311]
[71.22718811 -378.39877319]
[85.82755280 -374.92373657]
[100.10093689 -370.28512573]
[113.95478821 -364.51303101]
[127.29924774 -357.64486694]
[140.04777527 -349.72515869]
[152.11767578 -340.80532837]
[163.43069458 -330.94317627]
[173.91345215 -320.20269775]
[183.49795532 -308.65350342]
[192.12203979 -296.37054443]
[199.72979736 -283.43344116]
[206.27186584 -269.92611694]
[211.70582581 -255.93618774]
[215.99644470 -241.55435181]
[219.11587524 -226.87390137]
[221.04389954 -211.99005127]
[221.76800537 -196.99932861]
[221.28350830 -181.99894714]
[219.59355164 -167.08618164]
[216.70907593 -152.35777283]
[212.64880371 -137.90922546]
[207.43907166 -123.83424377]
[201.11364746 -110.22412109]
[193.71357727 -97.16712189]
[185.28683472 -84.74792480]
[175.88809204 -73.04708099]
[165.57829285 -62.14046097]
[154.42428589 -52.09881210]
[142.49844360 -42.98725891]
[129.87808228 -34.86488724]
[116.64507294 -27.78437805]
[102.88521576 -21.79165268]
[88.68776703 -16.92557716]
[92.39392853 -2.39064026]
[96.10009003 12.14429569]
[99.80625153 26.67923164]
[103.51241302 41.21416855]
[107.21857452 55.74910355]
[112.03067017 41.54193497]
[121.57219696 29.96785736]
[134.60060120 22.53410912]
[149.41926575 20.20875359]
[164.09841919 23.29460716]
[176.72647095 31.38981438]
[185.65892029 43.44017792]
[189.73255920 57.87643433]
[188.41687012 72.81862640]
[181.88320923 86.32089233]
[170.98242188 96.62490845]
[157.13404846 102.38882446]
[142.14152527 102.86204529]
[127.95722198 97.98293304]
[116.42831421 88.38687897]
[109.05673218 75.32520294]
[108.12110138 90.29598999]
[107.65306091 105.28868866]
[107.65306091 120.28868866]
[107.65306091 135.28869629]
[107.65306091 150.28869629]
[107.65306091 165.28869629]
[107.65306091 180.28869629]
[107.65306091 195.28869629]
[107.65306091 210.28869629]
[107.65306091 225.28869629]
[107.65306091 240.28869629]
[122.19294739 244.35000610]
[135.09733582 252.18450928]
[145.40861511 263.21084595]
[152.36163330 276.61077881]
[155.44042969 291.38992310]
[154.41654968 306.45159912]
[149.36593628 320.67813110]
[140.66342163 333.01379395]
[128.95475769 342.54321289]
[115.10881805 348.55923462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 130]
[25 129]
[26 113]
[27 112]
[28 111]
[29 110]
[30 109]
[31 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
