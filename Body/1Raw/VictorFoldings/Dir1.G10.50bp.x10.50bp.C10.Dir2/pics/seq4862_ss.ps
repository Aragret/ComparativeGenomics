%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCUUCAAGGGGGGGGGGCAAUAUACUCUCCGGACAAUGAACCAUAACCAAUACUACCAAUCAAUACUxxxxxxxxxxCAGCAGUCUGCGCCCUUACACAAAAUGACAUCAAAAAAAUCGUAGCCUUCCCCCCCCCCCUCCACUUCAA\
) } def
/len { sequence length } bind def

/coor [
[79.18245697 153.38011169]
[66.07752228 146.17436218]
[55.28377151 135.82269287]
[47.53659821 123.03036499]
[43.36383057 108.66895294]
[43.04976654 93.71691132]
[46.61579895 79.19294739]
[53.81896973 66.08659363]
[64.16851807 55.29081345]
[76.95932007 47.54112625]
[91.31991577 43.36553574]
[91.00785828 28.36878395]
[90.69580078 13.37202930]
[90.38374329 -1.62472427]
[90.07168579 -16.62147713]
[89.75962830 -31.61823082]
[89.44757843 -46.61498642]
[89.13552094 -61.61174011]
[88.82346344 -76.60848999]
[88.51140594 -91.60524750]
[73.51697540 -92.14216614]
[58.57693863 -93.52653503]
[43.73915100 -95.75392151]
[29.05114365 -98.81719208]
[14.55996609 -102.70653534]
[0.31203878 -107.40949249]
[-13.64699745 -112.91099548]
[-27.27242851 -119.19342041]
[-40.52060699 -126.23664093]
[-53.34909439 -134.01809692]
[-65.71679688 -142.51287842]
[-77.58409882 -151.69374084]
[-88.91297913 -161.53131104]
[-99.66716003 -171.99404907]
[-109.81217957 -183.04844666]
[-119.31554413 -194.65908813]
[-128.14682007 -206.78880310]
[-136.27769470 -219.39871216]
[-143.68215942 -232.44844055]
[-150.33645630 -245.89616394]
[-156.21929932 -259.69882202]
[-161.31182861 -273.81219482]
[-165.59773254 -288.19107056]
[-169.06329346 -302.78939819]
[-171.69738770 -317.56042480]
[-173.49159241 -332.45678711]
[-174.44017029 -347.43081665]
[-174.54005432 -362.43453979]
[-173.79095459 -377.41986084]
[-172.19525146 -392.33880615]
[-169.75805664 -407.14358521]
[-166.48719788 -421.78674316]
[-162.39312744 -436.22143555]
[-157.48896790 -450.40136719]
[-151.79042053 -464.28112793]
[-145.31576538 -477.81625366]
[-138.08572388 -490.96340942]
[-130.12345886 -503.68048096]
[-121.45448303 -515.92669678]
[-112.10655212 -527.66284180]
[-102.10961914 -538.85137939]
[-91.49571228 -549.45635986]
[-80.29882050 -559.44390869]
[-68.55480957 -568.78198242]
[-56.30131531 -577.44067383]
[-43.57757568 -585.39221191]
[-30.42435265 -592.61120605]
[-16.88377953 -599.07452393]
[-2.99923396 -604.76141357]
[11.18481064 -609.65362549]
[25.62291718 -613.73559570]
[40.26883316 -616.99420166]
[55.07564926 -619.41894531]
[69.99592590 -621.00207520]
[84.98188019 -621.73864746]
[99.98549652 -621.62615967]
[114.95872498 -620.66497803]
[129.85359192 -618.85827637]
[144.62237549 -616.21179199]
[159.21778870 -612.73394775]
[173.59306335 -608.43597412]
[187.70216370 -603.33160400]
[201.49987793 -597.43719482]
[214.94201660 -590.77160645]
[227.98550415 -583.35614014]
[240.58859253 -575.21472168]
[252.71087646 -566.37322998]
[264.31353760 -556.86010742]
[275.35943604 -546.70581055]
[285.81314087 -535.94287109]
[295.64117432 -524.60571289]
[304.81207275 -512.73071289]
[313.29644775 -500.35589600]
[321.06713867 -487.52087402]
[328.09924316 -474.26678467]
[334.37020874 -460.63607788]
[339.85998535 -446.67242432]
[344.55099487 -432.42056274]
[348.42816162 -417.92611694]
[351.47909546 -403.23553467]
[353.69403076 -388.39590454]
[355.06582642 -373.45471191]
[355.59017944 -358.45980835]
[355.26531982 -343.45928955]
[354.09231567 -328.50119019]
[352.07495117 -313.63339233]
[349.21966553 -298.90353394]
[345.53561401 -284.35879517]
[341.03460693 -270.04580688]
[335.73101807 -256.01037598]
[329.64187622 -242.29748535]
[322.78668213 -228.95103455]
[315.18737793 -216.01380920]
[306.86834717 -203.52723694]
[297.85617065 -191.53131104]
[288.17977905 -180.06445312]
[277.87014771 -169.16342163]
[266.96029663 -158.86311340]
[255.48518372 -149.19651794]
[243.48155212 -140.19462585]
[230.98786926 -131.88626099]
[218.04414368 -124.29802704]
[204.69184875 -117.45423889]
[190.97375488 -111.37683105]
[176.93379211 -106.08525085]
[162.61694336 -101.59646606]
[148.06907654 -97.92485046]
[133.33679199 -95.08215332]
[118.46727753 -93.07749939]
[103.50816345 -91.91730499]
[103.82021332 -76.92054749]
[104.13227081 -61.92379379]
[104.44432831 -46.92704010]
[104.75638580 -31.93028831]
[105.06844330 -16.93353462]
[105.38050079 -1.93678057]
[105.69255066 13.05997276]
[106.00460815 28.05672646]
[106.31666565 43.05348206]
[120.83852386 46.62807846]
[133.94062805 53.83897781]
[144.73031616 64.19489288]
[152.47245789 76.99025726]
[156.63957214 91.35330963]
[156.94775391 106.30547333]
[153.37602234 120.82803345]
[146.16769409 133.93154907]
[135.81390381 144.72326660]
[123.02005768 152.46792603]
[108.65782166 156.63787842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
