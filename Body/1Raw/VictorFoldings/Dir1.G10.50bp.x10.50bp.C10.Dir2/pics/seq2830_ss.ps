%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUACCUAACAAACGGGGGGGGGGCCACAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGAxxxxxxxxxxACAUCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCCCCCCCCCCCGUCCCUAACAAAC\
) } def
/len { sequence length } bind def

/coor [
[82.80610657 403.86737061]
[69.36344910 397.09390259]
[57.55966949 387.75283813]
[47.87812042 376.22665405]
[40.71525955 362.98739624]
[36.36439514 348.57714844]
[35.00370026 333.58605957]
[36.68889236 318.62792969]
[41.35096359 304.31536865]
[48.79899979 291.23440552]
[58.72801590 279.92071533]
[70.73142242 270.83758545]
[84.31768799 264.35696411]
[98.93045807 260.74426270]
[98.33031464 245.75625610]
[97.73017120 230.76826477]
[97.13002777 215.78028870]
[96.52988434 200.79229736]
[95.92974091 185.80430603]
[95.32958984 170.81631470]
[94.72944641 155.82832336]
[94.12930298 140.84033203]
[93.52915955 125.85234833]
[87.39167023 123.47861481]
[82.02293396 119.67334747]
[77.75029755 114.66854095]
[74.83427429 108.76937103]
[59.85304260 109.51943970]
[44.87180710 110.26950836]
[29.89057159 111.01956940]
[14.90933704 111.76963806]
[9.45798779 125.98944092]
[-1.31037199 136.75802612]
[-15.53005981 142.20965576]
[-30.73742867 141.39982605]
[-44.29771042 134.46882629]
[-53.86150360 122.61751556]
[-57.77182007 107.89918518]
[-55.35118103 92.86387634]
[-47.01897049 80.11655426]
[-34.21879959 71.86576843]
[-19.16836929 69.54102325]
[-4.47526264 73.54507446]
[7.31485319 83.18421936]
[14.15926933 96.78840637]
[29.14050484 96.03833771]
[44.12173843 95.28826904]
[59.10297394 94.53820038]
[74.08420563 93.78813171]
[74.46405029 92.37565613]
[74.92080688 90.98613739]
[62.80321884 82.14509583]
[50.68563080 73.30405426]
[34.32643127 68.85289001]
[34.07495880 51.90081024]
[50.29493332 46.96636200]
[59.52667618 61.18646622]
[71.64426422 70.02751160]
[83.76185608 78.86855316]
[96.54352570 73.57523346]
[110.25665283 75.40291595]
[119.69257355 63.74258041]
[129.12849426 52.08224106]
[138.56440735 40.42190552]
[147.52624512 28.39337730]
[155.99964905 16.01592064]
[164.47305298 3.63846540]
[172.57118225 -8.98770809]
[180.28674316 -21.85122681]
[188.00231934 -34.71474457]
[195.71788025 -47.57826233]
[203.43344116 -60.44178009]
[211.14900208 -73.30529785]
[200.47679138 -83.94435120]
[192.66581726 -96.82072449]
[188.16641235 -111.18368530]
[187.23597717 -126.19702911]
[189.92425537 -140.98777771]
[196.07072449 -154.69697571]
[205.31411743 -166.52946472]
[217.11372375 -175.80012512]
[230.78096008 -181.97349548]
[245.51959229 -184.69467163]
[260.47207642 -183.80975342]
[274.76953125 -179.37449646]
[282.48507690 -192.23800659]
[290.20065308 -205.10153198]
[283.26904297 -218.88398743]
[284.91186523 -234.22363281]
[294.60491943 -246.22563171]
[309.25521851 -251.06019592]
[324.18783569 -247.18463135]
[334.63787842 -235.83561707]
[337.27075195 -220.63458252]
[331.24633789 -206.43211365]
[318.48699951 -197.76019287]
[303.06417847 -197.38597107]
[295.34860229 -184.52244568]
[287.63302612 -171.65893555]
[298.27777100 -161.13381958]
[306.09878540 -148.35916138]
[310.63772583 -134.07525635]
[311.62661743 -119.11109924]
[309.00369263 -104.33625031]
[302.91708374 -90.61030579]
[293.71664429 -78.73289490]
[281.93377686 -69.39709473]
[268.25067139 -63.14898300]
[253.46092224 -60.35569763]
[238.42341614 -61.18388367]
[224.01251221 -65.58972931]
[216.29695129 -52.72621536]
[208.58139038 -39.86269760]
[200.86582947 -26.99917984]
[193.15026855 -14.13566208]
[185.43470764 -1.27214503]
[185.96264648 2.26756763]
[184.76664734 6.23966932]
[181.66235352 9.81447601]
[176.85050964 12.11186981]
[168.37710571 24.48932648]
[159.90370178 36.86678314]
[160.32583618 39.69194412]
[159.62234497 42.85846710]
[157.65588379 45.92643738]
[154.45518494 48.41401291]
[150.22474670 49.85782242]
[140.78883362 61.51816177]
[131.35290527 73.17849731]
[121.91699219 84.83883667]
[125.29563904 108.38726044]
[108.51715088 125.25219727]
[109.11729431 140.24018860]
[109.71743774 155.22817993]
[110.31758118 170.21617126]
[110.91772461 185.20416260]
[111.51786804 200.19215393]
[112.11801147 215.18013000]
[112.71816254 230.16812134]
[113.31830597 245.15611267]
[113.91844940 260.14410400]
[128.77328491 262.57690430]
[142.83421326 267.95046997]
[155.52543640 276.04476929]
[166.32725525 286.52838135]
[174.79733276 298.97195435]
[180.58883667 312.86593628]
[183.46461487 327.64141846]
[183.30690002 342.69332886]
[180.12213135 357.40530396]
[174.04075623 371.17489624]
[165.31178284 383.43826294]
[154.29264832 393.69320679]
[141.43460083 401.51980591]
[127.26416779 406.59753418]
[112.36160278 408.71850586]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[51 59]
[52 58]
[53 57]
[61 130]
[62 129]
[63 128]
[64 127]
[65 122]
[66 121]
[67 120]
[68 116]
[69 115]
[70 114]
[71 113]
[72 112]
[73 111]
[85 99]
[86 98]
[87 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
