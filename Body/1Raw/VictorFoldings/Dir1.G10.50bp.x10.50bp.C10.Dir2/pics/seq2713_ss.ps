%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACAUCACGGGGGGGGGGCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUxxxxxxxxxxUCCUACUUCAGGGUCAUAAAGCCUAAAUAGCCCACACGUUCCCCUUAAAUCCCCCCCCCCAAGACAUCAC\
) } def
/len { sequence length } bind def

/coor [
[229.61181641 163.81933594]
[222.59370422 152.60455322]
[216.33525085 140.94857788]
[210.86408997 128.90278625]
[206.20436096 116.52029419]
[202.37663269 103.85569000]
[199.39779663 90.96480560]
[184.58004761 93.29590607]
[169.76228333 95.62700653]
[154.94453430 97.95811462]
[140.15182495 100.44322968]
[125.38576508 103.08209991]
[110.61971283 105.72096252]
[95.91175079 108.66644287]
[81.26824951 111.91726685]
[69.47290039 122.46147919]
[55.37126923 117.66634369]
[40.72776794 120.91716766]
[26.11887550 124.32014465]
[14.54543877 135.10745239]
[0.34710485 130.60673523]
[-14.22559834 134.16148376]
[-28.79830170 137.71624756]
[-43.37100220 141.27101135]
[-57.94370651 144.82577515]
[-60.62288666 159.81716919]
[-69.17336273 172.41912842]
[-82.11371613 180.44827271]
[-97.20194244 182.51351929]
[-111.82392120 178.25704956]
[-123.44631195 168.41632080]
[-130.05545044 154.69628906]
[-130.50628662 139.47404480]
[-124.72068024 125.38694000]
[-113.70104980 114.87563324]
[-99.35659790 109.76128387]
[-84.17259216 110.92997742]
[-70.77975464 118.17922974]
[-61.49846649 130.25306702]
[-46.92576599 126.69831085]
[-32.35306168 123.14354706]
[-17.78035927 119.58879089]
[-3.20765710 116.03402710]
[7.32344246 105.50097656]
[22.56411362 109.74744415]
[28.35450745 105.07657623]
[37.47694397 106.27366638]
[52.12044525 103.02284241]
[62.86838913 92.71115112]
[78.01741791 97.27376556]
[92.66091919 94.02294159]
[96.45211029 90.29740143]
[102.07287598 88.99676514]
[107.98084259 90.95490265]
[122.74690247 88.31604004]
[137.51295471 85.67717743]
[145.47090149 81.05949402]
[152.61341858 83.14035797]
[167.43118286 80.80924988]
[182.24894714 78.47814941]
[197.06669617 76.14704132]
[195.77008057 58.70735931]
[196.00764465 41.22158051]
[197.77749634 23.82441139]
[201.06591797 6.64985895]
[205.84751892 -10.16978455]
[212.08537292 -26.50497055]
[219.73135376 -42.22988510]
[228.72651672 -57.22343063]
[239.00148010 -71.37013245]
[250.47705078 -84.56106567]
[263.06475830 -96.69466400]
[276.66757202 -107.67749786]
[291.18066406 -117.42503357]
[306.49221802 -125.86222839]
[322.48419189 -132.92416382]
[339.03341675 -138.55650330]
[356.01232910 -142.71594238]
[373.29016113 -145.37048340]
[390.73376465 -146.49977112]
[408.20877075 -146.09516907]
[425.58059692 -144.15989685]
[442.71536255 -140.70889282]
[459.48114014 -135.76885986]
[475.74874878 -129.37788391]
[491.39294434 -121.58530426]
[506.29324341 -112.45119476]
[520.33483887 -102.04598999]
[533.40966797 -90.44991302]
[545.41705322 -77.75234222]
[557.11669922 -87.13950348]
[568.81628418 -96.52666473]
[574.73803711 -111.19786072]
[589.50708008 -113.12782288]
[592.67816162 -128.85433960]
[607.01605225 -136.05191040]
[621.52191162 -129.19914246]
[625.06805420 -113.55292511]
[614.93420410 -101.11567688]
[598.89422607 -101.42819977]
[593.80932617 -87.42843628]
[578.20349121 -84.82704163]
[566.50384521 -75.43988037]
[554.80419922 -66.05271912]
[562.32928467 -55.18174362]
[569.11645508 -43.83517838]
[575.13562012 -32.06303787]
[580.36035156 -19.91722488]
[584.76757812 -7.45127916]
[588.33782959 5.27983904]
[591.05529785 18.22000122]
[592.90802002 31.31215477]
[593.88781738 44.49857712]
[593.99029541 57.72112274]
[593.21502686 70.92149353]
[591.56536865 84.04148865]
[589.04864502 97.02323914]
[585.67584229 109.80951691]
[581.46185303 122.34393311]
[576.42523193 134.57121277]
[570.58813477 146.43742371]
[563.97631836 157.89024353]
[556.61895752 168.87915039]
[548.54840088 179.35569763]
[539.80017090 189.27366638]
[530.41296387 198.58930969]
[520.42803955 207.26153564]
[509.88946533 215.25209045]
[498.84368896 222.52572632]
[487.33938599 229.05033875]
[475.42724609 234.79714966]
[463.15985107 239.74079895]
[450.59124756 243.85946655]
[437.77682495 247.13497925]
[424.77310181 249.55284119]
[411.63742065 251.10240173]
[398.42767334 251.77679443]
[385.20214844 251.57301331]
[372.01910400 250.49194336]
[358.93670654 248.53833008]
[346.01263428 245.72076416]
[333.30389404 242.05163574]
[320.86651611 237.54710388]
[308.75531006 232.22702026]
[297.02374268 226.11482239]
[285.72354126 219.23742676]
[274.90454102 211.62515259]
[264.61444092 203.31152344]
[254.89863586 194.33320618]
[245.80000305 184.72975159]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 61]
[8 60]
[9 59]
[10 58]
[11 56]
[12 55]
[13 54]
[14 51]
[15 50]
[17 48]
[18 47]
[19 45]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[90 104]
[91 103]
[92 102]
[94 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
