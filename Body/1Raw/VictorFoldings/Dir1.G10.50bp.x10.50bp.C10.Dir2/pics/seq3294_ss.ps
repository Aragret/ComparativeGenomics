%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUACUCCUCAUGGGGGGGGGGUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAxxxxxxxxxxCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCACCCCCCCCCCUCCUAGUCCUCAU\
) } def
/len { sequence length } bind def

/coor [
[66.65803528 430.87664795]
[52.38626480 426.06723022]
[39.48228073 418.30181885]
[28.54962540 407.94369507]
[20.09963989 395.47726440]
[14.52754307 381.48562622]
[12.09395409 366.62319946]
[12.91269493 351.58511353]
[16.94547272 337.07473755]
[24.00366592 323.77078247]
[33.75714874 312.29541016]
[45.74973679 303.18542480]
[59.42051315 296.86688232]
[74.13007355 293.63534546]
[74.13007355 278.63534546]
[74.13007355 263.63534546]
[74.13007355 248.63533020]
[74.13007355 233.63533020]
[74.13007355 218.63533020]
[74.13007355 203.63533020]
[74.13007355 188.63533020]
[74.13007355 173.63533020]
[74.13007355 158.63533020]
[74.13007355 143.63533020]
[74.13007355 128.63533020]
[74.06805420 143.63520813]
[67.71961975 157.22554016]
[56.25587082 166.89935303]
[41.79152679 170.87208557]
[26.99481583 168.41091919]
[14.59529114 159.96983337]
[6.88029051 147.10598755]
[5.27300024 132.19233704]
[10.06991673 117.98004150]
[20.38615227 107.09081268]
[34.31867218 101.53339386]
[49.29734802 102.33296967]
[62.55672836 109.34005737]
[49.32349014 102.27737427]
[36.09025192 95.21469879]
[24.58822823 103.22827148]
[10.81931305 105.48149109]
[-2.50985384 101.58940125]
[-12.80404568 92.36939240]
[-18.08473396 79.67034912]
[-17.37022209 66.00205994]
[-30.45949364 58.67601013]
[-43.54876709 51.34996796]
[-56.63803864 44.02392197]
[-69.72731018 36.69787598]
[-86.50187683 34.23814392]
[-88.78193665 17.43821335]
[-73.26972961 10.59657860]
[-62.40126801 23.60860443]
[-49.31199646 30.93464851]
[-36.22272110 38.26069260]
[-23.13344955 45.58673859]
[-10.04417610 52.91278458]
[3.60790253 44.31617737]
[19.82522774 43.75808334]
[34.20106125 51.48455048]
[42.78152466 65.47760773]
[43.15292740 81.98146057]
[56.38616562 89.04413605]
[69.61940765 96.10681915]
[86.65210724 76.13984680]
[109.87826538 78.07137299]
[119.99674225 66.99813843]
[112.25708008 56.52739716]
[106.50188446 44.85216141]
[102.91286469 32.34429169]
[101.60274506 19.40187454]
[102.61174774 6.43657160]
[105.90636444 -6.13949203]
[111.38044739 -17.92681694]
[118.85863495 -28.55122375]
[128.10198975 -37.67573166]
[138.81558228 -45.01124191]
[150.65797424 -50.32571030]
[163.25202942 -53.45146942]
[176.19697571 -54.29053116]
[189.08111572 -52.81765366]
[201.49496460 -49.08109283]
[213.04421997 -43.20103455]
[223.36233521 -35.36572266]
[234.53623962 -45.37290573]
[245.71014404 -55.38008881]
[256.88406372 -65.38726807]
[268.05798340 -75.39445496]
[279.23187256 -85.40163422]
[290.40579224 -95.40882111]
[284.74185181 -109.46924591]
[284.23153687 -124.61901093]
[288.93646240 -139.02870178]
[298.28851318 -150.95829773]
[311.15835571 -158.96722412]
[325.99191284 -162.08836365]
[340.99795532 -159.94482422]
[354.36441040 -152.79547119]
[364.47726440 -141.50358582]
[370.11526489 -127.43274689]
[370.59765625 -112.28206635]
[365.86618042 -97.88106537]
[356.49215698 -85.96873474]
[343.60757446 -77.98354340]
[328.76831055 -74.88973999]
[313.76623535 -77.06092072]
[300.41299438 -84.23490906]
[289.23907471 -74.22772217]
[278.06515503 -64.22054291]
[266.89123535 -54.21335983]
[255.71733093 -44.20617676]
[244.54342651 -34.19899368]
[233.36950684 -24.19181252]
[241.74124146 -9.24890614]
[246.38462830 7.24579859]
[247.03823853 24.37673759]
[243.66218567 41.19216919]
[236.44061279 56.75704575]
[225.77154541 70.20501709]
[212.24502563 80.78663635]
[196.61047363 87.91114807]
[179.73513794 91.17943573]
[162.55601501 90.40642548]
[146.02784729 85.63151550]
[131.06997681 77.11661530]
[120.95149231 88.18984985]
[125.35926056 99.39339447]
[123.84355164 111.97587585]
[116.17545319 122.85234833]
[103.70062256 129.07887268]
[89.13007355 128.63533020]
[89.13007355 143.63533020]
[89.13007355 158.63533020]
[89.13007355 173.63533020]
[89.13007355 188.63533020]
[89.13007355 203.63533020]
[89.13007355 218.63533020]
[89.13007355 233.63533020]
[89.13007355 248.63533020]
[89.13007355 263.63534546]
[89.13007355 278.63534546]
[89.13007355 293.63534546]
[103.83963013 296.86688232]
[117.51040649 303.18542480]
[129.50299072 312.29541016]
[139.25648499 323.77078247]
[146.31466675 337.07473755]
[150.34744263 351.58511353]
[151.16618347 366.62319946]
[148.73260498 381.48562622]
[143.16050720 395.47726440]
[134.71052551 407.94369507]
[123.77786255 418.30181885]
[110.87387848 426.06723022]
[96.60211182 430.87664795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 132]
[38 65]
[39 64]
[40 63]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
[67 127]
[68 126]
[85 114]
[86 113]
[87 112]
[88 111]
[89 110]
[90 109]
[91 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
