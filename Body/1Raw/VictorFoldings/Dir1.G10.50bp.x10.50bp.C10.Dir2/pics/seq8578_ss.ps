%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUACUAGUUAGGGGGGGGGGUUAUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACGCxxxxxxxxxxAAUGACAUCAAAAAAAUCGUAGCCUUCUCCACUUCAAGUCAACUAGGACUCCCCCCCCCCCAUAAUAGUUA\
) } def
/len { sequence length } bind def

/coor [
[95.01715851 382.73745728]
[80.99521637 377.18444824]
[68.79525757 368.31811523]
[59.18418503 356.69580078]
[52.76616287 343.04812622]
[49.94462585 328.23291016]
[50.89694214 313.18154907]
[55.56324387 298.84011841]
[63.65021133 286.11016846]
[74.64949036 275.79190063]
[87.86964417 268.53393555]
[102.47966003 264.79248047]
[102.47966003 249.79248047]
[102.47966003 234.79248047]
[102.47966003 219.79248047]
[102.47966003 204.79248047]
[102.47966003 189.79248047]
[102.47966003 174.79248047]
[102.47966003 159.79248047]
[102.47966003 144.79248047]
[102.47966003 129.79248047]
[89.22541046 126.51026917]
[79.37031555 117.93659210]
[74.73074341 106.36096191]
[75.83240509 94.53284454]
[81.89974976 85.01394653]
[74.00327301 72.26068878]
[66.10678864 59.50743103]
[52.69687653 66.25071716]
[38.74346161 71.78243256]
[24.35575294 76.05928802]
[9.64635563 79.04780579]
[-5.26960850 80.72459412]
[-20.27539825 81.07653809]
[-35.25357437 80.10088348]
[-50.08690643 77.80525970]
[-64.65930176 74.20763397]
[-78.85671234 69.33615875]
[-92.56801605 63.22897720]
[-105.68590546 55.93387222]
[-118.10771942 47.50794220]
[-129.73622131 38.01713562]
[-140.48042297 27.53573036]
[-150.25621033 16.14575958]
[-158.98710632 3.93636632]
[-166.60473633 -8.99689198]
[-173.04951477 -22.55279350]
[-178.27099609 -36.62524414]
[-182.22830200 -51.10410309]
[-184.89047241 -65.87605286]
[-186.23664856 -80.82547760]
[-186.25633240 -95.83538055]
[-184.94934082 -110.78829193]
[-182.32591248 -125.56716919]
[-178.40658569 -140.05635071]
[-173.22201538 -154.14244080]
[-166.81280518 -167.71519470]
[-159.22909546 -180.66838074]
[-150.53025818 -192.90061951]
[-140.78434753 -204.31617737]
[-130.06767273 -214.82571411]
[-118.46408844 -224.34698486]
[-106.06440735 -232.80545044]
[-92.96569061 -240.13491821]
[-79.27044678 -246.27803040]
[-65.08585358 -251.18670654]
[-50.52294159 -254.82252502]
[-35.69567871 -257.15704346]
[-20.72011375 -258.17196655]
[-5.71345234 -257.85934448]
[9.20685673 -256.22167969]
[23.92403984 -253.27172852]
[38.32291031 -249.03260803]
[52.29077911 -243.53750610]
[65.71832275 -236.82939148]
[78.50045776 -228.96080017]
[90.53713226 -219.99330139]
[101.73415375 -209.99708557]
[112.00388336 -199.05038452]
[121.26594543 -187.23887634]
[129.44784546 -174.65499878]
[136.48554993 -161.39723206]
[142.32398987 -147.56935120]
[146.91746521 -133.27957153]
[150.23001099 -118.63974762]
[152.23571777 -103.76443481]
[152.91888428 -88.77007294]
[152.27415466 -73.77400970]
[150.30657959 -58.89360809]
[147.03157043 -44.24533844]
[142.47474670 -29.94383430]
[136.67176819 -16.10103416]
[129.66807556 -2.82527590]
[121.51844788 9.77953720]
[112.28668976 21.61475372]
[102.04505920 32.58774185]
[90.87369537 42.61262894]
[78.86004639 51.61095047]
[86.75652313 64.36420441]
[94.65300751 77.11746216]
[118.16022491 80.43094635]
[129.53753662 104.61249542]
[144.49880981 105.68956757]
[159.47036743 106.61298370]
[174.45060730 107.38263702]
[189.43084717 108.15229797]
[196.80271912 94.83251190]
[209.17631531 86.07001495]
[224.06642151 83.55908966]
[238.51078796 87.74494934]
[249.65934753 97.74589539]
[255.33662415 111.53842926]
[270.31686401 112.30809021]
[285.29711914 113.07775116]
[301.42562866 107.85208893]
[310.91186523 121.90368652]
[300.03546143 134.90908813]
[284.52743530 128.05799866]
[269.54721069 127.28833008]
[254.56695557 126.51866913]
[247.50604248 139.65673828]
[235.39122009 148.46244812]
[220.59391785 151.14591980]
[206.03955078 147.12219238]
[194.62915039 137.13771057]
[188.66117859 123.13253784]
[173.68093872 122.36288452]
[158.70069885 121.59322357]
[151.81683350 124.40827179]
[143.42173767 120.65084839]
[128.46046448 119.57377625]
[117.47966003 129.79248047]
[117.47966003 144.79248047]
[117.47966003 159.79248047]
[117.47966003 174.79248047]
[117.47966003 189.79248047]
[117.47966003 204.79248047]
[117.47966003 219.79248047]
[117.47966003 234.79248047]
[117.47966003 249.79248047]
[117.47966003 264.79248047]
[132.08967590 268.53393555]
[145.30982971 275.79190063]
[156.30909729 286.11016846]
[164.39607239 298.84011841]
[169.06237793 313.18154907]
[170.01469421 328.23291016]
[167.19316101 343.04812622]
[160.77513123 356.69580078]
[151.16406250 368.31811523]
[138.96409607 377.18444824]
[124.94215393 382.73745728]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[26 100]
[27 99]
[28 98]
[102 131]
[103 130]
[104 128]
[105 127]
[106 126]
[112 120]
[113 119]
[114 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
