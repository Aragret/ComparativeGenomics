%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGACCAAGGGGGGGGGGACCUACGCCAAAAUCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUCUAACxxxxxxxxxxGUCGCAUCCACCUUUAUUAUCAGUCUCUUCCCCACAACAAUAUUCAUGUGCCCCCCCCCCCCUAGACCAA\
) } def
/len { sequence length } bind def

/coor [
[83.93217468 391.00527954]
[70.71197510 383.73278809]
[59.82517242 373.28579712]
[52.01404190 360.37655640]
[47.81116104 345.88522339]
[47.50308609 330.79989624]
[51.11082840 316.14907837]
[58.38840103 302.93167114]
[68.83960724 292.04891968]
[81.75186920 284.24276733]
[96.24480438 280.04547119]
[95.93275452 265.04873657]
[95.62069702 250.05197144]
[95.30863953 235.05522156]
[94.99658203 220.05847168]
[94.68452454 205.06170654]
[94.37246704 190.06495667]
[94.06041718 175.06820679]
[93.74835968 160.07145691]
[85.74795532 147.50790405]
[93.19648743 133.54974365]
[92.88442993 118.55299377]
[78.56595612 106.40344238]
[79.81645203 85.47007751]
[65.17295074 82.21925354]
[50.52944946 78.96842957]
[35.88594818 75.71760559]
[21.24244690 72.46677399]
[6.59894514 69.21595001]
[-8.38076973 68.43610382]
[-23.28267097 70.14879608]
[-38.18457413 71.86148834]
[-49.24529266 83.48215485]
[-65.21370697 81.93642426]
[-73.84021759 68.41004944]
[-68.50730133 53.27930069]
[-53.30591583 48.15119934]
[-39.89726257 56.95958328]
[-24.99536133 55.24689102]
[-10.09345913 53.53420258]
[-23.58498955 46.97839355]
[-34.08950424 36.27067947]
[-40.38565826 22.65603828]
[-41.74139786 7.71743202]
[-37.99909210 -6.80824041]
[-29.59385872 -19.23209190]
[-17.50296783 -28.10960960]
[-3.13221312 -32.40861130]
[11.84752655 -31.62925911]
[25.69457054 -25.86216545]
[36.79893494 -15.77786636]
[43.86952591 -2.54885435]
[46.08424759 12.28674507]
[43.18560028 27.00400734]
[35.51060486 39.89177322]
[23.95162582 49.45158768]
[9.84977055 54.57244873]
[24.49327278 57.82327652]
[39.13677216 61.07410049]
[53.78027344 64.32492828]
[68.42377472 67.57575226]
[83.06727600 70.82657623]
[97.38987732 66.36975861]
[107.60335541 55.38409805]
[117.81683350 44.39843369]
[107.98949432 33.04631042]
[99.44717407 20.69819641]
[92.29001617 7.49886560]
[86.60193634 -6.39692497]
[82.44962311 -20.82625580]
[79.88176727 -35.61994934]
[78.92847443 -50.60455704]
[79.60091400 -65.60439301]
[81.89121246 -80.44358826]
[85.77250671 -94.94816589]
[91.19929504 -108.94806671]
[98.10795593 -122.27914429]
[106.41748047 -134.78511047]
[116.03044891 -146.31932068]
[126.83415222 -156.74655151]
[138.70191956 -165.94454956]
[151.49461365 -173.80548096]
[165.06225586 -180.23716736]
[179.24574280 -185.16421509]
[193.87881470 -188.52883911]
[208.78987122 -190.29159546]
[223.80412292 -190.43182373]
[238.74551392 -188.94787598]
[253.43885803 -185.85716248]
[267.71191406 -181.19589233]
[281.39730835 -175.01873779]
[294.33459473 -167.39813232]
[306.37210083 -158.42340088]
[317.36868286 -148.19976807]
[327.19540405 -136.84712219]
[335.73706055 -124.49854279]
[342.89352417 -111.29882812]
[348.58084106 -97.40273285]
[352.73236084 -82.97317505]
[355.29943848 -68.17934418]
[356.25192261 -53.19468689]
[355.57867432 -38.19488907]
[353.28756714 -23.35581398]
[349.40551758 -8.85144520]
[343.97796631 5.14816284]
[337.06857300 18.47887039]
[328.75839233 30.98438263]
[319.14480591 42.51807785]
[308.34054565 52.94473267]
[296.47225952 62.14209747]
[283.67913818 70.00233459]
[270.11117554 76.43329620]
[255.92741394 81.35956573]
[241.29417419 84.72340393]
[226.38301086 86.48536682]
[211.36875916 86.62478638]
[196.42744446 85.14003754]
[181.73425293 82.04852295]
[167.46145630 77.38648987]
[153.77639771 71.20860291]
[140.83952332 63.58729172]
[128.80250549 54.61191177]
[118.58901978 65.59757996]
[108.37554169 76.58324432]
[119.08914185 86.08952332]
[122.35855103 99.28045654]
[117.83359528 111.31524658]
[107.88118744 118.24093628]
[108.19324493 133.23768616]
[116.21596527 146.87391663]
[108.74510956 159.75939941]
[109.05716705 174.75614929]
[109.36922455 189.75289917]
[109.68128204 204.74964905]
[109.99333954 219.74641418]
[110.30538940 234.74316406]
[110.61744690 249.73991394]
[110.92950439 264.73666382]
[111.24156189 279.73342896]
[125.89655304 283.32418823]
[139.12236023 290.58645630]
[150.01722717 301.02505493]
[157.83833313 313.92825317]
[162.05239868 328.41632080]
[162.37211609 343.50140381]
[158.77569580 358.15502930]
[151.50833130 371.37802124]
[141.06553650 382.26885986]
[128.15930176 390.08499146]
[113.66960907 394.29345703]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[21 129]
[22 128]
[24 62]
[25 61]
[26 60]
[27 59]
[28 58]
[29 57]
[30 40]
[31 39]
[32 38]
[63 124]
[64 123]
[65 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
