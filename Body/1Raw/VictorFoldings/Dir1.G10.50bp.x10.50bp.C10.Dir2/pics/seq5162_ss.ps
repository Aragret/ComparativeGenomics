%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCUCACUCGGGGGGGGGGUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCxxxxxxxxxxCCCUUGACCACCAUCCUCCGUGAAAUCAAUAUCCCGCACAAGAGUGCUACCCCCCCCCCCUCUCCUCGCUC\
) } def
/len { sequence length } bind def

/coor [
[86.54190063 529.33190918]
[73.05301666 522.60034180]
[61.56751633 512.83581543]
[52.75314713 500.60589600]
[47.12236786 486.62170410]
[45.00253677 471.69622803]
[46.51690674 456.69723511]
[51.57743073 442.49670410]
[59.88989639 429.92028809]
[70.97102356 419.69912720]
[84.17658234 412.42749023]
[98.73880768 408.52813721]
[98.43082428 393.53128052]
[98.12284851 378.53445435]
[97.81487274 363.53762817]
[97.50689697 348.54077148]
[97.19891357 333.54394531]
[96.89093781 318.54711914]
[96.58296204 303.55026245]
[96.27498627 288.55343628]
[95.96700287 273.55657959]
[95.65902710 258.55975342]
[84.76856995 248.46354675]
[84.24259949 233.25900269]
[94.90627289 221.90454102]
[94.59829712 206.90769958]
[86.60131073 194.34197998]
[94.05363464 180.38584900]
[93.74565887 165.38900757]
[93.43768311 150.39218140]
[93.12969971 135.39533997]
[85.13272095 122.82961273]
[92.58504486 108.87348938]
[82.55760956 120.02922821]
[67.92195129 123.31517792]
[54.08801270 117.51671600]
[46.16938782 104.77719879]
[47.09313202 89.80567169]
[56.51778793 78.13622284]
[70.95960999 74.08238220]
[85.08031464 79.14260101]
[93.65997314 91.44538116]
[95.80855560 76.60005951]
[90.12775421 61.83390808]
[99.60830688 50.34615707]
[101.75688934 35.50083542]
[92.56936646 22.92199326]
[94.95980835 7.89733219]
[107.00843811 -0.78404218]
[109.15701294 -15.62936497]
[111.30559540 -30.47468758]
[113.45417023 -45.32001114]
[115.60275269 -60.16533279]
[115.75675201 -75.16454315]
[113.91342163 -90.05084991]
[112.07009888 -104.93715668]
[110.22677612 -119.82346344]
[108.38345337 -134.70977783]
[93.37390137 -135.80509949]
[78.86653137 -139.80789185]
[65.41895294 -146.56430054]
[53.54806900 -155.81460571]
[43.71015167 -167.20326233]
[36.28335190 -180.29254150]
[31.55313301 -194.57928467]
[29.70131302 -209.51437378]
[30.79907227 -224.52374268]
[34.80421066 -239.03047180]
[41.56278992 -252.47695923]
[50.81502151 -264.34634399]
[62.20527649 -274.18240356]
[75.29574585 -281.60708618]
[89.58325958 -286.33499146]
[104.51865387 -288.18441772]
[119.52784729 -287.08422852]
[134.03392029 -283.07672119]
[147.47930908 -276.31597900]
[159.34719849 -267.06182861]
[169.18142700 -255.66998291]
[176.60398865 -242.57830811]
[181.32958984 -228.29002380]
[183.17657471 -213.35433960]
[182.07395935 -198.34532166]
[178.06411743 -183.83988953]
[171.30119324 -170.39559937]
[162.04512024 -158.52920532]
[150.65167236 -148.69682312]
[137.55880737 -141.27638245]
[123.26976013 -136.55310059]
[125.11308289 -121.66679382]
[126.95640564 -106.78047943]
[128.79972839 -91.89417267]
[130.64305115 -77.00786591]
[137.53764343 -90.32945251]
[149.18447876 -99.78203583]
[163.63967896 -103.78795624]
[178.49061584 -101.67861938]
[191.25866699 -93.80607605]
[199.81280518 -81.48427582]
[202.72532654 -66.76975250]
[199.51011658 -52.11838531]
[190.70381165 -39.97552872]
[177.77619934 -32.36785126]
[162.88491821 -30.56508636]
[148.51536560 -34.86812210]
[137.06585693 -44.55876923]
[130.44807434 -58.01675415]
[128.29949951 -43.17143250]
[126.15091705 -28.32610893]
[124.00233459 -13.48078632]
[121.85375977 1.36453688]
[130.94659424 13.10573769]
[128.97911072 28.19161415]
[116.60221100 37.64941406]
[114.45362854 52.49473953]
[120.28810883 66.19905090]
[110.65387726 78.74863434]
[108.50529480 93.59395599]
[107.58188629 108.56550598]
[115.60089874 122.20391083]
[108.12654114 135.08735657]
[108.43451691 150.08419800]
[108.74250031 165.08103943]
[109.05047607 180.07788086]
[117.06948853 193.71627808]
[109.59513092 206.59973145]
[109.90310669 221.59655762]
[121.02394867 232.50366211]
[121.12265015 247.71696472]
[110.65586853 258.25177002]
[110.96384430 273.24862671]
[111.27182007 288.24545288]
[111.57980347 303.24227905]
[111.88777924 318.23913574]
[112.19575500 333.23596191]
[112.50373077 348.23281860]
[112.81170654 363.22964478]
[113.11968994 378.22647095]
[113.42766571 393.22332764]
[113.73564148 408.22015381]
[128.44567871 411.51837158]
[141.93864441 418.24172974]
[153.43005371 427.99932861]
[162.25183105 440.22387695]
[167.89109802 454.20465088]
[170.01997375 469.12884521]
[168.51469421 484.12878418]
[163.46278381 498.33233643]
[155.15794373 510.91381836]
[144.08300781 521.14166260]
[130.88186646 528.42132568]
[116.32201385 532.32952881]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[25 127]
[26 126]
[28 124]
[29 123]
[30 122]
[31 121]
[33 119]
[42 118]
[43 117]
[45 115]
[46 114]
[49 111]
[50 110]
[51 109]
[52 108]
[53 107]
[54 93]
[55 92]
[56 91]
[57 90]
[58 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
