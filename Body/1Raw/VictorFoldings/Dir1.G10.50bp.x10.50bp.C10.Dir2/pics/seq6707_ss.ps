%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUUCUCCUAUCGGGGGGGGGGUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACAGACCGCAACCxxxxxxxxxxAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCCCCCCCCCCCUACUUCCCCUAUC\
) } def
/len { sequence length } bind def

/coor [
[86.50989532 503.36630249]
[72.87438965 497.00473022]
[60.68938828 488.17736816]
[50.39537048 477.20333862]
[42.36445999 464.47930908]
[36.88696671 450.46524048]
[34.16090393 435.66778564]
[34.28480911 420.62182617]
[37.25420761 405.87124634]
[42.96175766 391.94931030]
[51.20112991 379.35928345]
[61.67448425 368.55624390]
[74.00321198 359.93075562]
[87.74163818 353.79461670]
[102.39311981 350.36965942]
[101.80052185 335.38134766]
[101.20792389 320.39306641]
[100.61532593 305.40478516]
[100.02272797 290.41650391]
[99.43013000 275.42819214]
[98.83753204 260.43991089]
[98.24492645 245.45161438]
[90.01085663 233.03996277]
[97.19692230 218.94488525]
[96.60432434 203.95660400]
[96.01171875 188.96830750]
[95.41912079 173.98001099]
[82.95079803 165.87576294]
[77.58190155 151.81735229]
[81.56717682 137.12139893]
[93.58057404 127.47856140]
[92.98797607 112.49027252]
[85.68724060 100.56588745]
[92.02373505 88.10232544]
[91.43113708 73.11403656]
[90.83853912 58.12574768]
[90.24594116 43.13745880]
[88.91400146 28.19671059]
[86.84597015 13.33995247]
[84.77794647 -1.51680517]
[82.70991516 -16.37356377]
[80.64188385 -31.23032188]
[78.13451385 -46.01927185]
[75.18998718 -60.72742462]
[64.89424133 -72.74025726]
[69.98262024 -86.73873901]
[67.03810120 -101.44689941]
[64.09357452 -116.15505219]
[49.12596512 -114.93559265]
[34.11798859 -115.46205139]
[19.27261353 -117.72731018]
[4.79060841 -121.70072937]
[-9.13217449 -127.32857513]
[-22.30744553 -134.53472900]
[-34.55702591 -143.22175598]
[-45.71525192 -153.27215576]
[-55.63122177 -164.55001831]
[-64.17082977 -176.90280151]
[-71.21859741 -190.16348267]
[-76.67920685 -204.15270996]
[-80.47879791 -218.68128967]
[-82.56600952 -233.55273438]
[-82.91259003 -248.56594849]
[-81.51387024 -263.51788330]
[-78.38875580 -278.20629883]
[-73.57951355 -292.43261719]
[-67.15117645 -306.00439453]
[-59.19069672 -318.73809814]
[-49.80571747 -330.46151733]
[-39.12316513 -341.01611328]
[-27.28750420 -350.25915527]
[-14.45880413 -358.06561279]
[-0.81055504 -364.32995605]
[13.47266483 -368.96740723]
[28.19769287 -371.91531372]
[43.16538620 -373.13378906]
[58.17332840 -372.60632324]
[73.01855469 -370.34005737]
[87.50028992 -366.36569214]
[101.42269897 -360.73690796]
[114.59748840 -353.52987671]
[126.84648895 -344.84204102]
[138.00404358 -334.79089355]
[147.91926575 -323.51235962]
[156.45805359 -311.15899658]
[163.50492859 -297.89785767]
[168.96459961 -283.90826416]
[172.76322937 -269.37942505]
[174.84944153 -254.50784302]
[175.19502258 -239.49461365]
[173.79530334 -224.54278564]
[170.66920471 -209.85455322]
[165.85900879 -195.62857056]
[159.42977905 -182.05722046]
[151.46844482 -169.32405090]
[142.08268738 -157.60125732]
[131.39942932 -147.04736328]
[119.56314850 -137.80511475]
[106.73392487 -129.99951172]
[93.08525848 -123.73609161]
[78.80173492 -119.09957123]
[81.74625397 -104.39141846]
[84.69077301 -89.68326569]
[94.77590942 -78.72245789]
[89.89814758 -63.67194748]
[92.84266663 -48.96379089]
[95.61169434 -46.70059204]
[97.39752197 -42.96036530]
[97.50741577 -38.23165131]
[95.49864197 -33.29835129]
[97.56667328 -18.44159126]
[99.63470459 -3.58483386]
[101.70272827 11.27192402]
[103.77075958 26.12868309]
[114.96498871 16.14423370]
[129.78341675 18.47105598]
[137.37881470 31.40588951]
[132.19126892 45.48031235]
[118.01812744 50.39171219]
[105.23423004 42.54486084]
[105.82682800 57.53314972]
[106.41942596 72.52143860]
[107.01202393 87.50972748]
[114.31275940 99.43411255]
[107.97626495 111.89767456]
[108.56886292 126.88596344]
[121.30607605 135.55023193]
[126.43917847 149.88566589]
[122.19697571 164.32406616]
[110.40740967 173.38742065]
[111.00001526 188.37570190]
[111.59261322 203.36399841]
[112.18521118 218.35229492]
[120.46166992 231.83601379]
[113.23322296 244.85902405]
[113.82582092 259.84732056]
[114.41841888 274.83560181]
[115.01101685 289.82388306]
[115.60361481 304.81219482]
[116.19621277 319.80047607]
[116.78881073 334.78875732]
[117.38141632 349.77703857]
[132.25756836 352.03457642]
[146.43756104 357.06689453]
[159.40879822 364.69207764]
[170.70237732 374.63449097]
[179.91003418 386.53472900]
[186.69892883 399.96258545]
[190.82363892 414.43267822]
[192.13505554 429.42187500]
[190.58578491 444.38839722]
[186.23182678 458.79113770]
[179.23056030 472.10952759]
[169.83509827 483.86203003]
[158.38507080 493.62387085]
[145.29438782 501.04211426]
[131.03627014 505.84863281]
[116.12613678 507.86965942]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[24 133]
[25 132]
[26 131]
[27 130]
[31 126]
[32 125]
[34 123]
[35 122]
[36 121]
[37 120]
[38 114]
[39 113]
[40 112]
[41 111]
[42 110]
[43 106]
[44 105]
[46 103]
[47 102]
[48 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
