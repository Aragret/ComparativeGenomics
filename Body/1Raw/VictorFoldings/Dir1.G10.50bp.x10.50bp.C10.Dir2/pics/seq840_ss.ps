%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAUGUAGCGGGGGGGGGGUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACAUCACxxxxxxxxxxGUACUUCGAGUCUCCCUUCACCAUUUCCGACGGCAUCUACGGCUCAACAUCCCCCCCCCCUUUUUGUAGC\
) } def
/len { sequence length } bind def

/coor [
[-5.83738661 495.52496338]
[-19.68332481 489.50894165]
[-31.39198685 479.97952271]
[-40.09451294 467.64385986]
[-45.14511490 453.41732788]
[-46.16900635 438.35565186]
[-43.09020615 423.57647705]
[-36.13718414 410.17654419]
[-25.82589912 399.15020752]
[-12.92151833 391.31570435]
[1.61836815 387.25439453]
[1.61836815 372.25439453]
[1.61836815 357.25439453]
[1.61836815 342.25439453]
[1.61836815 327.25439453]
[1.61836815 312.25439453]
[1.61836815 297.25439453]
[1.61836815 282.25439453]
[1.61836815 267.25439453]
[1.61836815 252.25439453]
[-6.25777197 265.02023315]
[-16.64983559 275.83712769]
[-29.09003067 284.21813965]
[-43.01836777 289.78604126]
[-57.80786896 292.29016113]
[-72.79279327 291.61779785]
[-87.29859924 287.79922485]
[-100.67231750 281.00631714]
[-112.31194305 271.54486084]
[-121.69351196 259.84075928]
[-128.39472961 246.42085266]
[-132.11393738 231.88925171]
[-132.68371582 216.90007019]
[-130.07841492 202.12806702]
[-124.41532898 188.23815918]
[-115.94935608 175.85562134]
[-105.06159973 165.53782654]
[-92.24216461 157.74925232]
[-78.06810760 152.84046936]
[-63.17746735 151.03245544]
[-48.24054337 152.40660095]
[-33.92970657 156.90104675]
[-20.88916016 164.31347656]
[-9.70591259 174.31022644]
[-0.88337147 186.44129944]
[5.18131971 200.16059875]
[8.21516132 214.85060120]
[8.08132553 229.85226440]
[16.07124138 217.15733337]
[24.06115913 204.46240234]
[32.05107498 191.76748657]
[40.04099274 179.07255554]
[40.27201462 164.17973328]
[54.17112732 156.62161255]
[62.16104507 143.92668152]
[62.39206696 129.03387451]
[76.29118347 121.47574615]
[84.28109741 108.78081512]
[68.71789551 71.66110229]
[68.71789551 56.66110229]
[68.71789551 41.66110229]
[68.71789551 26.66110229]
[68.71789551 11.66110325]
[54.07867813 8.06154919]
[40.72660828 1.06257582]
[29.43795395 -8.92890644]
[20.86902428 -21.33200645]
[15.51800537 -35.42562103]
[13.69599819 -50.39037323]
[15.50893211 -65.35622406]
[20.85140610 -79.45307922]
[29.41281509 -91.86137390]
[40.69540787 -101.85969543]
[54.04323578 -108.86676788]
[68.68026733 -112.47519684]
[83.75552368 -112.47519684]
[98.39255524 -108.86676788]
[111.74037933 -101.85969543]
[123.02297974 -91.86137390]
[131.58438110 -79.45307922]
[136.92686462 -65.35622406]
[138.73979187 -50.39037323]
[136.91778564 -35.42562103]
[131.56677246 -21.33200645]
[122.99783325 -8.92890644]
[111.70918274 1.06257582]
[98.35710907 8.06154919]
[83.71789551 11.66110325]
[83.71789551 26.66110229]
[83.71789551 41.66110229]
[83.71789551 56.66110229]
[83.71789551 71.66110229]
[89.93761444 75.85217285]
[102.37705231 84.23432159]
[108.59677887 88.42539215]
[122.49932861 82.79343414]
[132.38476562 70.44075012]
[147.08595276 72.83333588]
[160.98851013 67.20138550]
[163.74493408 52.02226257]
[174.28694153 40.75861740]
[189.25061035 37.00463486]
[203.86106873 41.95819855]
[213.45620728 54.03863907]
[214.97421265 69.39113617]
[207.93072510 83.11676025]
[194.57328796 90.83572388]
[179.16419983 90.08492279]
[166.62046814 81.10393524]
[152.71791077 86.73589325]
[143.82687378 98.68573761]
[128.13128662 96.69599152]
[114.22872925 102.32794189]
[128.80004883 105.88836670]
[137.22227478 118.30071259]
[135.14697266 133.15646362]
[123.64564514 142.78555298]
[108.65644073 142.21646118]
[97.91832733 131.74302673]
[96.97602844 116.77073669]
[88.98611450 129.46566772]
[88.18359375 145.26651001]
[74.85597229 151.91659546]
[66.86605835 164.61152649]
[66.06354523 180.41236877]
[52.73591995 187.06246948]
[44.74600601 199.75740051]
[36.75608826 212.45233154]
[28.76617241 225.14724731]
[20.77625465 237.84217834]
[16.61836815 252.25439453]
[16.61836815 267.25439453]
[16.61836815 282.25439453]
[16.61836815 297.25439453]
[16.61836815 312.25439453]
[16.61836815 327.25439453]
[16.61836815 342.25439453]
[16.61836815 357.25439453]
[16.61836815 372.25439453]
[16.61836815 387.25439453]
[31.15825462 391.31570435]
[44.06263733 399.15020752]
[54.37392044 410.17654419]
[61.32694244 423.57647705]
[64.40573883 438.35565186]
[63.38185120 453.41732788]
[58.33124924 467.64385986]
[49.62872314 479.97952271]
[37.92006302 489.50894165]
[24.07412338 495.52496338]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[48 130]
[49 129]
[50 128]
[51 127]
[52 126]
[54 124]
[55 123]
[57 121]
[58 120]
[59 92]
[60 91]
[61 90]
[62 89]
[63 88]
[95 113]
[96 112]
[98 110]
[99 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
