%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUCUACUGGGGGGGGGGCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUxxxxxxxxxxAGCACCAAAUCUCCACCUCCAUCAUCACCUCAACCCAAAAAGGCAUAAUUCCCCCCCCCCAAACUUUACU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 396.90652466]
[71.19830322 390.89050293]
[59.48964310 381.36108398]
[50.78712082 369.02542114]
[45.73651886 354.79891968]
[44.71262741 339.73721313]
[47.79142761 324.95806885]
[54.74444962 311.55813599]
[65.05573273 300.53179932]
[77.96011353 292.69729614]
[92.50000000 288.63598633]
[92.50000000 273.63598633]
[92.50000000 258.63598633]
[92.50000000 243.63598633]
[92.50000000 228.63598633]
[92.50000000 213.63598633]
[92.50000000 198.63598633]
[92.50000000 183.63598633]
[92.50000000 168.63598633]
[92.50000000 153.63598633]
[79.77220917 150.23847961]
[68.24121857 143.86853027]
[58.58929825 134.90304565]
[51.38750458 123.87245178]
[47.06195068 111.42940521]
[45.86856079 98.31012726]
[47.87794495 85.29082489]
[52.97121429 73.14182281]
[60.84701920 62.58192062]
[71.03937531 54.23592377]
[82.94522858 48.59763336]
[95.86016083 46.00064468]
[96.79579163 31.02985382]
[97.73141479 16.05906296]
[98.66704559 1.08827090]
[99.60267639 -13.88252068]
[98.97869873 -28.86953735]
[96.80185699 -43.71074295]
[94.62502289 -58.55194855]
[92.44818878 -73.39315033]
[90.27134705 -88.23435974]
[88.09451294 -103.07556152]
[73.09471893 -102.43500519]
[58.10857010 -103.34016418]
[43.29492188 -105.78143311]
[28.81080437 -109.73294067]
[14.80976295 -115.15280151]
[1.44021356 -121.98355103]
[-11.15611839 -130.15278625]
[-22.84570503 -139.57391357]
[-33.50462723 -150.14706421]
[-43.01990128 -161.76013184]
[-51.29065323 -174.29005432]
[-58.22921371 -187.60397339]
[-63.76202393 -201.56076050]
[-67.83043671 -216.01248169]
[-70.39132690 -230.80590820]
[-71.41754150 -245.78425598]
[-70.89820862 -260.78872681]
[-68.83882904 -275.66027832]
[-65.26123810 -290.24127197]
[-60.20335388 -304.37710571]
[-53.71879578 -317.91793823]
[-45.87630463 -330.72027588]
[-36.75901413 -342.64834595]
[-26.46357155 -353.57574463]
[-15.09911633 -363.38659668]
[-2.78611851 -371.97695923]
[10.34489822 -379.25573730]
[24.15473747 -385.14575195]
[38.49700928 -389.58459473]
[53.21967316 -392.52517700]
[68.16666412 -393.93640137]
[83.17953491 -393.80322266]
[98.09914398 -392.12710571]
[112.76732635 -388.92578125]
[127.02860260 -384.23321533]
[140.73178101 -378.09915161]
[153.73161316 -370.58859253]
[165.89028931 -361.78118896]
[177.07891846 -351.77026367]
[187.17889404 -340.66195679]
[196.08316040 -328.57400513]
[203.69731140 -315.63458252]
[209.94064331 -301.98083496]
[214.74696350 -287.75750732]
[218.06535339 -273.11535645]
[219.86059570 -258.20962524]
[220.11367798 -243.19828796]
[218.82191467 -228.24050903]
[215.99900818 -213.49481201]
[211.67486572 -199.11755371]
[205.89533997 -185.26109314]
[198.72169495 -172.07235718]
[190.22998047 -159.69113159]
[180.51019287 -148.24867249]
[169.66539001 -137.86628723]
[157.81051636 -128.65400696]
[145.07125854 -120.70949554]
[131.58264160 -114.11698914]
[117.48764801 -108.94635010]
[102.93571472 -105.25240326]
[105.11255646 -90.41119385]
[107.28939056 -75.56999207]
[109.46623230 -60.72878647]
[111.64306641 -45.88758087]
[113.81990051 -31.04637337]
[121.37527466 -44.00462723]
[134.32868958 -51.56829071]
[149.32720947 -51.77952576]
[162.48849487 -44.58366013]
[170.40579224 -31.84331894]
[171.02973938 -16.85630226]
[164.19883728 -3.50195217]
[151.68122864 4.76299667]
[136.71705627 5.79918861]
[123.17976379 -0.66159201]
[114.57346344 -12.94689178]
[113.63784027 2.02389932]
[112.70220947 16.99469185]
[111.76657867 31.96548271]
[110.83095551 46.93627548]
[126.56159210 52.80306625]
[139.73962402 63.20555115]
[149.09861755 77.14403534]
[153.73915100 93.27901459]
[153.21528625 110.05989075]
[147.57736206 125.87399292]
[137.36717224 139.20156860]
[123.56594849 148.76181030]
[107.50000000 153.63598633]
[107.50000000 168.63598633]
[107.50000000 183.63598633]
[107.50000000 198.63598633]
[107.50000000 213.63598633]
[107.50000000 228.63598633]
[107.50000000 243.63598633]
[107.50000000 258.63598633]
[107.50000000 273.63598633]
[107.50000000 288.63598633]
[122.03988647 292.69729614]
[134.94427490 300.53179932]
[145.25555420 311.55813599]
[152.20857239 324.95806885]
[155.28736877 339.73721313]
[154.26348877 354.79891968]
[149.21287537 369.02542114]
[140.51036072 381.36108398]
[128.80169678 390.89050293]
[114.95575714 396.90652466]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[32 122]
[33 121]
[34 120]
[35 119]
[36 118]
[37 107]
[38 106]
[39 105]
[40 104]
[41 103]
[42 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
