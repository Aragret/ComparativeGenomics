%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCCCUCGGGGGGGGGGCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUxxxxxxxxxxCAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCCCCCCCCCCCAACCUCCCUC\
) } def
/len { sequence length } bind def

/coor [
[74.41005707 591.41589355]
[60.56412125 585.39984131]
[48.85545731 575.87042236]
[40.15293503 563.53479004]
[35.10233307 549.30828857]
[34.07844162 534.24658203]
[37.15723801 519.46740723]
[44.11026001 506.06750488]
[54.42154694 495.04116821]
[67.32592773 487.20666504]
[81.86581421 483.14532471]
[81.86581421 468.14532471]
[81.86581421 453.14532471]
[81.86581421 438.14532471]
[81.86581421 423.14532471]
[81.86581421 408.14532471]
[81.86581421 393.14532471]
[81.86581421 378.14532471]
[81.86581421 363.14532471]
[81.86581421 348.14532471]
[68.22861481 345.62194824]
[55.24636078 340.73266602]
[43.32617950 333.62933350]
[32.84213638 324.53341675]
[24.12349319 313.72879028]
[17.44437790 301.55310059]
[13.01516056 288.38708496]
[10.97583008 274.64276123]
[11.39156818 260.75045776]
[14.25066376 247.14537048]
[19.46484756 234.25395203]
[26.87200356 222.48051453]
[36.24122620 212.19451904]
[47.28000259 203.71908569]
[59.64335251 197.32073975]
[72.94460297 193.20104980]
[86.76750183 191.49032593]
[87.70313263 176.51953125]
[88.63876343 161.54873657]
[89.57438660 146.57795715]
[78.62333679 142.67596436]
[68.94042969 136.24226379]
[61.10009003 127.65856171]
[55.56743240 117.43404388]
[52.67067337 106.17527771]
[52.58166504 94.55016327]
[55.30568695 83.24835968]
[60.68113708 72.94032288]
[68.38912201 64.23757172]
[77.97238159 57.65636826]
[88.86239624 53.58714676]
[100.41313934 52.27130508]
[102.89826202 37.47859955]
[105.38337708 22.68589020]
[100.03933716 7.79455614]
[109.77829742 -3.47495723]
[112.26342010 -18.26766396]
[114.74853516 -33.06037140]
[117.23365784 -47.85307693]
[119.71877289 -62.64578629]
[122.20389557 -77.43849182]
[124.68901062 -92.23120117]
[127.17413330 -107.02391052]
[129.65925598 -121.81661224]
[132.14436340 -136.60932922]
[130.47462463 -145.65718079]
[134.83813477 -151.68258667]
[137.63046265 -166.42039490]
[140.42277527 -181.15818787]
[126.89308167 -187.85519409]
[115.67269897 -197.95497131]
[107.59425354 -210.70806885]
[103.25723267 -225.16810608]
[102.98346710 -240.26206970]
[106.79326630 -254.86987305]
[114.40392303 -267.90753174]
[125.25067139 -278.40756226]
[138.52862549 -285.59075928]
[153.25245667 -288.92416382]
[168.32955933 -288.16033936]
[182.64111328 -283.35598755]
[195.12512207 -274.86761475]
[204.85517883 -263.32513428]
[211.10923767 -249.58508301]
[213.42321777 -234.66703796]
[211.62541199 -219.67802429]
[205.84921265 -205.73033142]
[196.52325439 -193.85897827]
[184.33959961 -184.94487000]
[170.20236206 -179.64952087]
[155.16058350 -178.36587524]
[152.36827087 -163.62806702]
[149.57594299 -148.89025879]
[146.93707275 -134.12420654]
[144.45195007 -119.33149719]
[141.96684265 -104.53878784]
[139.48171997 -89.74607849]
[136.99659729 -74.95337677]
[134.51147461 -60.16066742]
[132.02636719 -45.36796188]
[129.54124451 -30.57525253]
[127.05612946 -15.78254604]
[124.57100677 -0.98983860]
[130.09280396 12.84342194]
[120.17608643 25.17100906]
[117.69096375 39.96371460]
[115.20584869 54.75642395]
[131.22384644 63.89915848]
[142.57969666 78.43223572]
[147.57783508 96.18566895]
[145.47195435 114.50862885]
[136.57650757 130.66526794]
[122.21968842 142.24316406]
[104.54518127 147.51358032]
[103.60955048 162.48437500]
[102.67391968 177.45516968]
[101.73829651 192.42594910]
[117.38717651 196.63179016]
[131.83818054 203.95124817]
[144.47956848 214.07205200]
[154.77668762 226.56341553]
[162.29461670 240.89431763]
[166.71650696 256.45614624]
[167.85696411 272.58850098]
[165.66975403 288.60720825]
[160.24978638 303.83340454]
[151.82887268 317.62219238]
[140.76589966 329.39007568]
[127.53151703 338.63955688]
[112.68808746 344.98028564]
[96.86581421 348.14532471]
[96.86581421 363.14532471]
[96.86581421 378.14532471]
[96.86581421 393.14532471]
[96.86581421 408.14532471]
[96.86581421 423.14532471]
[96.86581421 438.14532471]
[96.86581421 453.14532471]
[96.86581421 468.14532471]
[96.86581421 483.14532471]
[111.40570068 487.20666504]
[124.31008148 495.04116821]
[134.62136841 506.06750488]
[141.57438660 519.46740723]
[144.65318298 534.24658203]
[143.62928772 549.30828857]
[138.57868958 563.53479004]
[129.87617493 575.87042236]
[118.16750336 585.39984131]
[104.32157135 591.41589355]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[37 117]
[38 116]
[39 115]
[40 114]
[52 107]
[53 106]
[54 105]
[56 103]
[57 102]
[58 101]
[59 100]
[60 99]
[61 98]
[62 97]
[63 96]
[64 95]
[65 94]
[67 93]
[68 92]
[69 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
