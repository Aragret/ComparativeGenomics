%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCUAUCAUGGGGGGGGGGAUAGUAAAACCCAGCCCAUGACCCCUAACAGGGGCCCUCUCAGCCCUCCUxxxxxxxxxxAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCACCUCCCCCCCCCCUGGCUAUCAU\
) } def
/len { sequence length } bind def

/coor [
[126.81093597 195.04975891]
[119.91583252 181.72843933]
[113.81623840 168.02459717]
[108.53327942 153.98571777]
[104.08524323 139.66038513]
[100.48753357 125.09822845]
[97.75520325 110.36633301]
[85.14408112 118.48787689]
[72.53295135 126.60942078]
[59.92182159 134.73095703]
[47.31069565 142.85250854]
[34.69956589 150.97404480]
[22.08843803 159.09558105]
[18.62705803 174.28297424]
[5.72188663 182.33972168]
[-8.73563099 178.94622803]
[-21.34675980 187.06776428]
[-33.95788574 195.18931580]
[-32.53668213 210.42869568]
[-38.37108612 224.57855225]
[-50.12039566 234.38734436]
[-65.08470154 237.60107422]
[-79.82531738 233.48127747]
[-90.95496368 222.97462463]
[-95.91611481 208.49548340]
[-93.56874847 193.37104797]
[-84.45227051 181.07681274]
[-70.66157532 174.43788147]
[-55.36566544 174.97985840]
[-42.07942963 182.57818604]
[-29.46830177 174.45664978]
[-16.85717201 166.33509827]
[-13.96567631 151.76887512]
[-1.29189336 143.35282898]
[13.96689606 146.48446655]
[26.57802391 138.36291504]
[39.18915176 130.24137878]
[51.80028152 122.11983490]
[64.41140747 113.99829102]
[77.02253723 105.87674713]
[89.63366699 97.75521088]
[88.54235077 82.79496002]
[74.88611603 76.58955383]
[61.22986984 70.38414764]
[47.57363129 64.17873383]
[33.91738892 57.97333145]
[16.99585533 56.92546463]
[13.31842327 40.37515259]
[28.20392799 32.25985336]
[40.12279510 44.31708908]
[53.77903748 50.52249527]
[67.43527985 56.72790146]
[81.09152222 62.93331146]
[94.74776459 69.13871765]
[95.31436920 54.14942169]
[96.76168060 39.21940994]
[99.08467865 24.40037918]
[102.27532959 9.74364758]
[106.32257080 -4.70002937]
[111.21240234 -18.88063622]
[116.92787170 -32.74906540]
[123.44921112 -46.25729370]
[130.75381470 -59.35853958]
[138.81640625 -72.00743866]
[147.60905457 -84.16019440]
[157.10130310 -95.77471161]
[167.26029968 -106.81077576]
[178.05085754 -117.23017883]
[189.43562317 -126.99681854]
[201.37513733 -136.07688904]
[213.82809448 -144.43894958]
[226.75134277 -152.05404663]
[240.10014343 -158.89578247]
[253.82827759 -164.94049072]
[267.88818359 -170.16723633]
[282.23120117 -174.55792236]
[296.80764771 -178.09732056]
[311.56701660 -180.77320862]
[326.45825195 -182.57629395]
[341.42977905 -183.50035095]
[356.42971802 -183.54216003]
[371.40615845 -182.70158386]
[386.30718994 -180.98155212]
[401.08126831 -178.38798523]
[415.67721558 -174.92990112]
[430.04449463 -170.61924744]
[444.13333130 -165.47097778]
[457.89492798 -159.50288391]
[471.28167725 -152.73567200]
[484.24719238 -145.19274902]
[496.74655151 -136.90023804]
[508.73651123 -127.88687134]
[520.17553711 -118.18384552]
[531.02404785 -107.82476807]
[541.24438477 -96.84551239]
[550.80126953 -85.28408813]
[559.66149902 -73.18054962]
[567.79449463 -60.57678986]
[575.17199707 -47.51646805]
[581.76855469 -34.04480743]
[587.56127930 -20.20845795]
[592.53009033 -6.05533171]
[596.65777588 8.36555767]
[599.93005371 23.00427437]
[602.33563232 37.81012344]
[603.86621094 52.73183441]
[604.51635742 67.71773529]
[604.28387451 82.71593475]
[603.16967773 97.67449188]
[601.17742920 112.54161072]
[598.31420898 127.26580048]
[594.58984375 141.79608154]
[590.01721191 156.08213806]
[584.61224365 170.07447815]
[578.39349365 183.72467041]
[571.38269043 196.98544312]
[563.60394287 209.81088257]
[555.08428955 222.15653992]
[545.85321045 233.97970581]
[535.94268799 245.23941040]
[525.38696289 255.89668274]
[514.22271729 265.91461182]
[502.48846436 275.25848389]
[490.22494507 283.89596558]
[477.47460938 291.79714966]
[464.28158569 298.93466187]
[450.69155884 305.28378296]
[436.75161743 310.82254028]
[422.51000977 315.53173828]
[408.01605225 319.39511108]
[393.31997681 322.39923096]
[378.47262573 324.53369141]
[363.52542114 325.79113770]
[348.53012085 326.16720581]
[333.53869629 325.66058350]
[318.60299683 324.27301025]
[303.77478027 322.00933838]
[289.10540771 318.87734985]
[274.64566040 314.88793945]
[260.44558716 310.05490112]
[246.55441284 304.39495850]
[233.02018738 297.92773438]
[219.88981628 290.67559814]
[207.20875549 282.66369629]
[195.02091980 273.91973877]
[183.36851501 264.47402954]
[172.29188538 254.35928345]
[161.82939148 243.61050415]
[152.01727295 232.26492310]
[142.88949585 220.36181641]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 41]
[8 40]
[9 39]
[10 38]
[11 37]
[12 36]
[13 35]
[16 32]
[17 31]
[18 30]
[42 54]
[43 53]
[44 52]
[45 51]
[46 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
