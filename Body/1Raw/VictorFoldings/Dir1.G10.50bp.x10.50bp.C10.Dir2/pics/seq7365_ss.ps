%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUAAAAUCGGGGGGGGGGUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAGCUGGUUUCAAGCCAACxxxxxxxxxxCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCAACAAACUUACCCCCCCCCCAAAUAAAAUC\
) } def
/len { sequence length } bind def

/coor [
[83.39082336 648.57476807]
[69.54488373 642.55871582]
[57.83621979 633.02929688]
[49.13369370 620.69366455]
[44.08309174 606.46710205]
[43.05920029 591.40545654]
[46.13800049 576.62628174]
[53.09102249 563.22637939]
[63.40230560 552.20001221]
[76.30668640 544.36553955]
[90.84657288 540.30419922]
[90.84657288 525.30419922]
[90.84657288 510.30419922]
[90.84657288 495.30419922]
[90.84657288 480.30419922]
[90.84657288 465.30419922]
[90.84657288 450.30419922]
[90.84657288 435.30419922]
[90.84657288 420.30419922]
[90.84657288 405.30419922]
[90.84657288 390.30419922]
[90.84657288 375.30419922]
[77.15575409 371.22262573]
[65.16166687 363.43188477]
[55.84579468 352.55877686]
[49.97348785 339.48272705]
[48.03110123 325.26470947]
[50.18571091 311.06118774]
[56.27079391 298.02993774]
[65.79904938 287.23587036]
[78.00143433 279.56375122]
[91.88919830 275.64587402]
[92.20125580 260.64913940]
[82.91727448 245.78953552]
[92.50000000 230.10032654]
[92.50000000 215.10032654]
[92.50000000 200.10032654]
[84.76270294 187.37306213]
[92.50000000 173.57289124]
[78.22488403 170.67576599]
[64.79451752 165.03686523]
[52.72990036 156.87492371]
[42.49907303 146.50659180]
[34.49893188 134.33407593]
[29.03982925 120.82962799]
[26.33354568 106.51710510]
[26.48506927 91.95176697]
[29.48851967 77.69864655]
[35.22738647 64.31067657]
[43.47903061 52.30724335]
[53.92333984 42.15399170]
[66.15514374 34.24481201]
[79.69992065 28.88652802]
[94.03221130 26.28701019]
[94.34426880 11.29025745]
[94.65632629 -3.70649672]
[94.96838379 -18.70325089]
[92.00326538 -27.41301155]
[95.44616699 -34.00786591]
[96.07013702 -48.99488449]
[85.64813995 -60.57156754]
[86.49443817 -75.76164246]
[97.59526062 -85.62609100]
[98.21923828 -100.61310577]
[98.84321594 -115.60012054]
[99.31126404 -130.59281921]
[99.62331390 -145.58956909]
[85.39989471 -150.78312683]
[73.63504791 -160.31555176]
[65.60494232 -173.15284729]
[62.18062210 -187.90251160]
[63.73353195 -202.96461487]
[70.09522247 -216.70535278]
[80.57563019 -227.63420105]
[94.03791809 -234.56570435]
[109.02178955 -236.74797058]
[123.90190887 -233.94427490]
[137.06419373 -226.45877075]
[147.08091736 -215.10340881]
[152.86550903 -201.10993958]
[153.79051208 -185.99626160]
[149.75558472 -171.40180969]
[141.19842529 -158.90966797]
[129.04722595 -149.87489319]
[114.62007141 -145.27751160]
[114.30801392 -130.28076172]
[117.33284760 -123.48399353]
[113.83023834 -114.97614288]
[113.20626068 -99.98912811]
[112.58228302 -85.00211334]
[122.82470703 -74.24905396]
[122.40540314 -59.04119873]
[111.05715942 -48.37090683]
[110.43318176 -33.38389206]
[109.96513367 -18.39119339]
[109.65308380 -3.39444041]
[109.34102631 11.60231304]
[109.02896881 26.59906769]
[124.01992798 30.05529213]
[137.97145081 36.53829575]
[150.27980042 45.76753616]
[160.41235352 57.34362411]
[167.93063354 70.76562500]
[172.50927734 85.45270538]
[173.95016479 100.76930237]
[172.19094849 116.05261230]
[167.30773926 130.64126587]
[159.51187134 143.90394592]
[149.14068604 155.26673889]
[136.64299011 164.23791504]
[122.55961609 170.42927551]
[107.50000000 173.57289124]
[115.23729706 187.37306213]
[107.50000000 200.10032654]
[107.50000000 215.10032654]
[107.50000000 230.10032654]
[116.07328796 239.79324341]
[115.72803497 252.32719421]
[107.19801331 260.96118164]
[106.88595581 275.95794678]
[121.82133484 281.07733154]
[134.43437195 290.54165649]
[143.50263977 303.41864014]
[148.15187073 318.44613647]
[147.94024658 334.15554810]
[142.90037537 349.01559448]
[133.53488159 361.58148193]
[120.76638794 370.63528442]
[105.84657288 375.30419922]
[105.84657288 390.30419922]
[105.84657288 405.30419922]
[105.84657288 420.30419922]
[105.84657288 435.30419922]
[105.84657288 450.30419922]
[105.84657288 465.30419922]
[105.84657288 480.30419922]
[105.84657288 495.30419922]
[105.84657288 510.30419922]
[105.84657288 525.30419922]
[105.84657288 540.30419922]
[120.38645935 544.36553955]
[133.29084778 552.20001221]
[143.60212708 563.22637939]
[150.55514526 576.62628174]
[153.63394165 591.40545654]
[152.61006165 606.46710205]
[147.55944824 620.69366455]
[138.85693359 633.02929688]
[127.14826965 642.55871582]
[113.30233002 648.57476807]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[32 120]
[33 119]
[35 116]
[36 115]
[37 114]
[39 112]
[54 98]
[55 97]
[56 96]
[57 95]
[59 94]
[60 93]
[63 90]
[64 89]
[65 88]
[66 86]
[67 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
