%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAAGCCCAGGGGGGGGGGUAAAAAUAAAAAAUUAUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCxxxxxxxxxxCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCCCCCCCCCCCAAAGACCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 383.25393677]
[71.19830322 377.23791504]
[59.48964310 367.70849609]
[50.78712082 355.37283325]
[45.73651886 341.14630127]
[44.71262741 326.08462524]
[47.79142761 311.30545044]
[54.74444962 297.90551758]
[65.05573273 286.87918091]
[77.96011353 279.04467773]
[92.50000000 274.98336792]
[92.50000000 259.98336792]
[92.50000000 244.98336792]
[92.50000000 229.98336792]
[92.50000000 214.98336792]
[92.50000000 199.98336792]
[92.50000000 184.98336792]
[92.50000000 169.98336792]
[92.50000000 154.98336792]
[92.50000000 139.98336792]
[86.35412598 138.32376099]
[80.54241180 135.72566223]
[75.20718384 132.25270081]
[70.47908783 127.98992157]
[66.47390747 123.04173279]
[63.28972244 117.52928162]
[48.79412460 121.38644409]
[34.29853058 125.24359894]
[19.80293274 129.10075378]
[8.57516289 141.05355835]
[-7.32614326 137.04350281]
[-11.54308510 121.19580841]
[0.26236564 109.81321716]
[15.94577312 114.60516357]
[30.44137001 110.74800110]
[44.93696594 106.89084625]
[59.43256378 103.03368378]
[62.04849625 85.35064697]
[71.99213409 70.49610901]
[87.34354401 61.33820724]
[105.13867188 59.64514542]
[109.74423218 45.36968613]
[114.34980011 31.09422493]
[118.95536041 16.81876373]
[123.56092834 2.54330349]
[119.25824738 -15.33033180]
[132.65625000 -26.62163925]
[136.96383667 -40.98982239]
[141.27142334 -55.35800934]
[145.57899475 -69.72618866]
[149.73689270 -84.13840485]
[153.74462891 -98.59309387]
[128.20210266 -130.87539673]
[124.49593353 -145.41032410]
[120.78977203 -159.94526672]
[117.08361053 -174.48019409]
[102.02380371 -174.09288025]
[87.25550079 -177.06689453]
[73.51945496 -183.25308228]
[61.50467682 -192.34114075]
[51.81381607 -203.87521362]
[44.93296051 -217.27676392]
[41.20725632 -231.87358093]
[40.82358170 -246.93347168]
[43.80117798 -261.70104980]
[49.99069214 -275.43560791]
[59.08166122 -287.44818115]
[70.61808777 -297.13626099]
[84.02130890 -304.01385498]
[98.61901855 -307.73602295]
[113.67900848 -308.11605835]
[128.44587708 -305.13488770]
[142.17892456 -298.94204712]
[154.18928528 -289.84814453]
[163.87455750 -278.30938721]
[170.74891663 -264.90451050]
[174.46754456 -250.30587769]
[174.84393311 -235.24580383]
[171.85917664 -220.47966003]
[165.66300964 -206.74812317]
[156.56622314 -194.73994446]
[145.02510071 -185.05746460]
[131.61854553 -178.18635559]
[135.32470703 -163.65142822]
[139.03086853 -149.11648560]
[142.73703003 -134.58155823]
[149.85041809 -132.20465088]
[161.08071899 -142.14851379]
[164.07719421 -127.45082855]
[171.19058228 -125.07392120]
[182.89021301 -134.46109009]
[194.58984375 -143.84825134]
[199.36505127 -151.71266174]
[206.63189697 -153.30595398]
[218.52427673 -162.44769287]
[224.28334045 -177.80233765]
[240.50256348 -180.22488403]
[250.49700928 -167.22323608]
[243.98524475 -152.17234802]
[227.66601562 -150.55531311]
[215.77363586 -141.41357422]
[203.97700500 -132.14862061]
[192.27737427 -122.76145935]
[180.57775879 -113.37429810]
[195.40409851 -115.65010071]
[208.52124023 -108.37407684]
[214.43986511 -94.59111786]
[210.68312073 -80.06917572]
[198.82315063 -70.88544464]
[183.82315063 -70.88316345]
[171.96037292 -80.06329346]
[168.19931030 -94.58535767]
[164.19157410 -80.13066864]
[165.44329834 -72.79726410]
[159.94718933 -65.41860962]
[155.63960266 -51.05042267]
[151.33201599 -36.68223953]
[147.02442932 -22.31405640]
[152.49147034 -11.47805977]
[148.97164917 0.55646831]
[137.83639526 7.14886808]
[133.23081970 21.42432785]
[128.62525940 35.69979095]
[124.01969147 49.97525024]
[119.41413116 64.25070953]
[132.04954529 74.94511414]
[139.37814331 89.78814697]
[140.18646240 106.32206726]
[134.34065247 121.80916595]
[122.80867004 133.68507385]
[107.50000000 139.98336792]
[107.50000000 154.98336792]
[107.50000000 169.98336792]
[107.50000000 184.98336792]
[107.50000000 199.98336792]
[107.50000000 214.98336792]
[107.50000000 229.98336792]
[107.50000000 244.98336792]
[107.50000000 259.98336792]
[107.50000000 274.98336792]
[122.03988647 279.04467773]
[134.94427490 286.87918091]
[145.25555420 297.90551758]
[152.20857239 311.30545044]
[155.28736877 326.08462524]
[154.26348877 341.14630127]
[149.21287537 355.37283325]
[140.51036072 367.70849609]
[128.80169678 377.23791504]
[114.95575714 383.25393677]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 37]
[27 36]
[28 35]
[29 34]
[41 125]
[42 124]
[43 123]
[44 122]
[45 121]
[47 118]
[48 117]
[49 116]
[50 115]
[51 113]
[52 112]
[53 86]
[54 85]
[55 84]
[56 83]
[90 104]
[91 103]
[92 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
