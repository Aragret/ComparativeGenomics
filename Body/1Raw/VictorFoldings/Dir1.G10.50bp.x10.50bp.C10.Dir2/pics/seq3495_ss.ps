%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACCAUCACCCUCGGGGGGGGGGUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACxxxxxxxxxxUAUCGAAGAAUUCACAAAAAACAAUAGCCUCAUCAUCCCCACCAUCAUAGCCCCCCCCCCCCACCAUCACCCUC\
) } def
/len { sequence length } bind def

/coor [
[104.12332916 200.42308044]
[95.63677979 200.41294861]
[87.18134308 199.68690491]
[78.81729126 198.25013733]
[70.60427094 196.11288452]
[62.60082245 193.29040527]
[54.86402130 189.80278015]
[47.44901657 185.67491150]
[40.40867996 180.93621826]
[33.79320145 175.62048340]
[27.64975357 169.76559448]
[22.02213287 163.41331482]
[16.95046043 156.60893250]
[3.96007872 164.10893250]
[-9.03030205 171.60893250]
[-22.02068329 179.10893250]
[-35.01106262 186.60893250]
[-48.00144577 194.10893250]
[-56.08409500 207.70971680]
[-70.97488403 207.37265015]
[-83.96526337 214.87265015]
[-92.04792023 228.47343445]
[-106.93870544 228.13636780]
[-119.92909241 235.63636780]
[-127.65560150 250.10125732]
[-144.05252075 250.37184143]
[-152.25209045 236.16976929]
[-143.81930542 222.10490417]
[-127.42909241 222.64599609]
[-114.43870544 215.14599609]
[-107.28521729 202.08164978]
[-91.46526337 201.88226318]
[-78.47488403 194.38226318]
[-71.32139587 181.31793213]
[-55.50144577 181.11854553]
[-42.51106262 173.61854553]
[-29.52068329 166.11854553]
[-16.53030205 158.61854553]
[-3.53992128 151.11854553]
[9.45045948 143.61854553]
[3.22251153 127.12774658]
[-0.02853643 109.80249023]
[-0.20268102 92.17570496]
[2.70543456 74.78959656]
[8.60635567 58.17896652]
[-4.52966833 50.93708420]
[-17.66569328 43.69520187]
[-30.77090073 51.70451736]
[-46.12539291 52.07213974]
[-59.59888840 44.69918442]
[-67.56708527 31.56893349]
[-67.88657379 16.21336555]
[-60.47142410 2.76304674]
[-47.31626129 -5.16395330]
[-31.95976830 -5.43531227]
[-18.53275681 2.02196503]
[-10.64703178 15.20190811]
[-10.42380905 30.55917740]
[2.71221471 37.80105972]
[15.84823895 45.04294586]
[32.03371048 25.95689964]
[52.43265915 11.46105385]
[75.78047943 2.45405388]
[100.62975311 -0.50572276]
[125.43997955 2.76521087]
[148.67309570 12.06407738]
[168.88879395 26.81440735]
[179.95629883 16.68966293]
[191.02378845 6.56491804]
[202.09129333 -3.55982709]
[213.15879822 -13.68457222]
[224.22628784 -23.80931664]
[215.34806824 -35.91817093]
[207.83110046 -48.91596222]
[201.76354980 -62.65029526]
[197.21652222 -76.96014404]
[194.24334717 -91.67773438]
[192.87887573 -106.63051605]
[193.13912964 -121.64315796]
[195.02101135 -136.53965759]
[198.50250244 -151.14535522]
[203.54275513 -165.28901672]
[210.08268738 -178.80480957]
[218.04562378 -191.53425598]
[227.33819580 -203.32812500]
[237.85145569 -214.04812622]
[249.46214294 -223.56860352]
[262.03411865 -231.77789307]
[275.42001343 -238.57977295]
[289.46282959 -243.89447021]
[303.99798584 -247.65969849]
[318.85501099 -249.83131409]
[333.85974121 -250.38383484]
[348.83624268 -249.31079102]
[363.60894775 -246.62475586]
[378.00460815 -242.35723877]
[391.85449219 -236.55827332]
[404.99618530 -229.29583740]
[417.27563477 -220.65507507]
[428.54882812 -210.73731995]
[438.68365479 -199.65882874]
[447.56121826 -187.54948425]
[455.07748413 -174.55130005]
[461.14428711 -160.81663513]
[465.69055176 -146.50653076]
[468.66293335 -131.78878784]
[470.02658081 -116.83593750]
[469.76553345 -101.82331085]
[467.88284302 -86.92691040]
[464.40057373 -72.32139587]
[459.35955811 -58.17800903]
[452.81890869 -44.66257477]
[444.85528564 -31.93355179]
[435.56207275 -20.14018250]
[425.04824829 -9.42073917]
[413.43704224 0.09909919]
[400.86462402 8.30771732]
[387.47836304 15.10887337]
[373.43524170 20.42282677]
[358.89990234 24.18727493]
[344.04275513 26.35808182]
[329.03799438 26.90979385]
[314.06155396 25.83594513]
[299.28900146 23.14912415]
[284.89355469 18.88083267]
[271.04397583 13.08111572]
[257.90267944 5.81796980]
[245.62370300 -2.82344651]
[234.35102844 -12.74181747]
[223.28353882 -2.61707282]
[212.21603394 7.50767231]
[201.14854431 17.63241768]
[190.08103943 27.75716209]
[179.01353455 37.88190842]
[183.97225952 44.76905060]
[188.33227539 52.04996872]
[192.06253052 59.67275238]
[195.13641357 67.58304596]
[197.53202820 75.72446442]
[199.23226929 84.03895569]
[200.22502136 92.46724701]
[200.50321960 100.94924164]
[200.06486511 109.42446136]
[198.91308594 117.83249664]
[197.05610657 126.11338806]
[194.50715637 134.20811462]
[191.28440857 142.05892944]
[187.41084290 149.60989380]
[182.91406250 156.80715942]
[177.82615662 163.59942627]
[172.18338013 169.93823242]
[166.02595520 175.77842712]
[159.39779663 181.07833862]
[152.34616089 185.80021667]
[144.92132568 189.91035461]
[137.17620850 193.37947083]
[129.16604614 196.18284607]
[120.94793701 198.30046082]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 40]
[14 39]
[15 38]
[16 37]
[17 36]
[18 35]
[20 33]
[21 32]
[23 30]
[24 29]
[45 60]
[46 59]
[47 58]
[67 134]
[68 133]
[69 132]
[70 131]
[71 130]
[72 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
