%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUAGCAGGGGGGGGGGGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCCUUACxxxxxxxxxxCAUUCAAGCAAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCCCCCCCCCCCUUAGCAUG\
) } def
/len { sequence length } bind def

/coor [
[86.49731445 417.84912109]
[75.91544342 407.06945801]
[68.80040741 393.74456787]
[65.72898865 378.95462036]
[66.95017242 363.89852905]
[72.36495972 349.79687500]
[81.53440857 337.79278564]
[93.71517944 328.85940552]
[107.91984558 323.72091675]
[106.98421478 308.75012207]
[106.04859161 293.77932739]
[105.11296082 278.80853271]
[104.17733002 263.83773804]
[103.24170685 248.86695862]
[102.30607605 233.89616394]
[101.37044525 218.92536926]
[100.43482208 203.95457458]
[91.91871643 191.73471069]
[98.78016663 177.47879028]
[97.68885040 162.51853943]
[96.44197845 147.57044983]
[95.19510651 132.62236023]
[88.69664001 130.97644043]
[82.66534424 128.05023193]
[77.35050964 123.96469116]
[72.97179413 118.88867188]
[69.71017456 113.03196716]
[54.94411850 115.67082977]
[40.17806244 118.30969238]
[25.41200638 120.94856262]
[16.58376503 134.05725098]
[1.05623043 137.00193787]
[-11.95838737 128.03559875]
[-14.73874569 112.47779846]
[-5.63530731 99.55870056]
[9.95101929 96.94298553]
[22.77314377 106.18250275]
[37.53919983 103.54364014]
[52.30525589 100.90477753]
[67.07131195 98.26590729]
[68.11116028 88.96575928]
[71.78320312 80.12548828]
[77.90642548 72.49047852]
[86.08901215 66.73914337]
[95.75218964 63.42348862]
[106.17072296 62.91796875]
[104.30310822 48.03469086]
[102.43549347 33.15140915]
[87.41540527 33.14012146]
[72.51517487 31.24635887]
[57.96979904 27.49998474]
[44.00868225 21.96008682]
[30.85201263 14.71403599]
[18.70728683 5.87611341]
[7.76604652 -4.41429424]
[-1.79915035 -15.99489212]
[-9.83744621 -28.68303871]
[-16.22206497 -42.27862167]
[-20.85231400 -56.56721878]
[-23.65516472 -71.32347870]
[-24.58641434 -86.31468201]
[-23.63137627 -101.30438232]
[-20.80510902 -116.05617523]
[-16.15219116 -130.33740234]
[-9.74600410 -143.92283630]
[-1.68758285 -156.59820557]
[7.89597988 -168.16362000]
[18.85353851 -178.43664551]
[31.01227379 -187.25527954]
[44.18042755 -194.48045349]
[58.15031815 -199.99818420]
[72.70162201 -203.72146606]
[87.60483551 -205.59158325]
[102.62492371 -205.57904053]
[117.52499390 -203.68402100]
[132.07005310 -199.93641663]
[146.03070068 -194.39533997]
[159.18676758 -187.14819336]
[171.33074951 -178.30923462]
[182.27111816 -168.01791382]
[191.83534241 -156.43650818]
[199.87257385 -143.74768066]
[206.25604248 -130.15156555]
[210.88508606 -115.86257935]
[213.68670654 -101.10607910]
[214.61668396 -86.11480713]
[213.66038513 -71.12518311]
[210.83288574 -56.37362671]
[206.17875671 -42.09278870]
[199.77143860 -28.50789261]
[191.71194458 -15.83319855]
[182.12741089 -4.26860189]
[171.16899109 6.00350666]
[159.00950623 14.82112122]
[145.84074402 22.04517555]
[131.87039185 27.56173515]
[117.31877136 31.28379631]
[119.18638611 46.16707611]
[121.05400085 61.05035782]
[132.85064697 70.31530762]
[147.75254822 68.60261536]
[162.65444946 66.88992310]
[177.55635071 65.17723846]
[192.45825195 63.46454620]
[207.34153748 61.59693527]
[222.20457458 59.57460022]
[237.06762695 57.55226517]
[251.93066406 55.52993011]
[266.80999756 47.40332794]
[278.73803711 59.45150375]
[270.46270752 74.24864197]
[253.95300293 70.39297485]
[239.08996582 72.41531372]
[224.22691345 74.43764496]
[209.36386108 76.45998383]
[203.11975098 80.50433350]
[194.17094421 78.36644745]
[179.26904297 80.07913971]
[164.36714172 81.79183197]
[149.46524048 83.50451660]
[134.56332397 85.21720886]
[136.43516541 100.41580963]
[132.11543274 114.61159515]
[122.71480560 125.47170258]
[110.14318848 131.37548828]
[111.39006805 146.32357788]
[112.63694000 161.27166748]
[116.49044037 169.62644958]
[113.75095367 176.54315186]
[122.33397675 189.83384705]
[115.40560913 203.01895142]
[116.34123993 217.98974609]
[117.27687073 232.96052551]
[118.21249390 247.93132019]
[119.14812469 262.90209961]
[120.08375549 277.87289429]
[121.01937866 292.84368896]
[121.95500946 307.81448364]
[122.89064026 322.78527832]
[137.62455750 326.11520386]
[150.82281494 333.46249390]
[161.41551208 344.23150635]
[168.54393005 357.54922485]
[171.63020325 372.33612061]
[170.42414856 387.39340210]
[165.02352905 401.50048828]
[155.86614990 413.51376343]
[143.69435120 422.45938110]
[129.49485779 427.61215210]
[114.41875458 428.55438232]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 139]
[10 138]
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[19 129]
[20 127]
[21 126]
[22 125]
[27 40]
[28 39]
[29 38]
[30 37]
[46 99]
[47 98]
[48 97]
[100 121]
[101 120]
[102 119]
[103 118]
[104 117]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
