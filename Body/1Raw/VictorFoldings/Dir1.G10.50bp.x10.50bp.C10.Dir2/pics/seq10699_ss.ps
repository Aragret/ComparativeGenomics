%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAUAUUCAUGGGGGGGGGGGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCxxxxxxxxxxCAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCCCCCCCCCCCAUAAUAUUCAU\
) } def
/len { sequence length } bind def

/coor [
[97.12454987 389.89501953]
[83.63567352 383.16348267]
[72.15016937 373.39892578]
[63.33580017 361.16903687]
[57.70502090 347.18481445]
[55.58518982 332.25936890]
[57.09955978 317.26034546]
[62.16008377 303.05984497]
[70.47254944 290.48342896]
[81.55368042 280.26226807]
[94.75923157 272.99063110]
[109.32145691 269.09124756]
[109.01348114 254.09442139]
[108.70550537 239.09757996]
[108.39752960 224.10073853]
[108.08954620 209.10391235]
[107.78157043 194.10707092]
[107.47359467 179.11022949]
[107.16561890 164.11338806]
[106.85763550 149.11656189]
[106.54965973 134.11972046]
[106.24168396 119.12287903]
[93.57016754 111.09587860]
[79.87953949 117.22505951]
[75.77442169 132.31419373]
[62.90119171 141.19190979]
[47.33819580 139.66642761]
[36.43379974 128.45803833]
[35.33673096 112.85897827]
[44.56499100 100.23467255]
[59.76127625 96.54591370]
[73.75036621 103.53443146]
[87.44099426 97.40525818]
[96.84484863 85.71904755]
[99.90324402 71.03414917]
[102.96163940 56.34925461]
[106.02003479 41.66435623]
[109.07843018 26.97945786]
[112.13682556 12.29456043]
[98.26264954 4.94937420]
[87.02138519 -5.98788357]
[79.31293488 -19.63028145]
[75.75119781 -34.87479782]
[76.61516571 -50.49149704]
[81.82711029 -65.22276306]
[90.95948792 -77.88458252]
[103.26999664 -87.46168518]
[117.76191711 -93.18898010]
[133.26480103 -94.61266327]
[136.02104187 -109.35726166]
[138.77728271 -124.10186005]
[141.38200378 -138.87397766]
[143.83493042 -153.67205811]
[130.98860168 -161.74964905]
[122.23714447 -174.09690857]
[118.88872528 -188.81430054]
[121.42322540 -203.65222168]
[129.42373657 -216.35485840]
[141.64476013 -225.00309753]
[156.20600891 -228.30450439]
[158.65893555 -243.10258484]
[161.11186218 -257.90066528]
[163.56478882 -272.69876099]
[149.37963867 -277.69400024]
[136.27748108 -285.07672119]
[124.65650940 -294.62261963]
[114.86985779 -306.04159546]
[107.21492767 -318.98657227]
[101.92434692 -333.06427002]
[99.15888977 -347.84680176]
[99.00260162 -362.88497925]
[101.46022034 -377.72180176]
[106.45706940 -391.90637207]
[113.84130096 -405.00769043]
[123.38851166 -416.62759399]
[134.80857849 -426.41293335]
[147.75445557 -434.06640625]
[161.83271790 -439.35537720]
[176.61557007 -442.11917114]
[191.65376282 -442.27374268]
[206.49031067 -439.81445312]
[220.67433167 -434.81597900]
[233.77479553 -427.43026733]
[245.39361572 -417.88174438]
[255.17767334 -406.46057129]
[262.82968140 -393.51382446]
[268.11706543 -379.43496704]
[270.87915039 -364.65179443]
[271.03204346 -349.61358643]
[268.57104492 -334.77731323]
[263.57098389 -320.59387207]
[256.18377686 -307.49423218]
[246.63394165 -295.87649536]
[235.21165466 -286.09375000]
[222.26403809 -278.44320679]
[208.18457031 -273.15740967]
[193.40109253 -270.39700317]
[178.36286926 -270.24581909]
[175.90994263 -255.44773865]
[173.45701599 -240.64965820]
[171.00408936 -225.85157776]
[183.72132874 -218.02848816]
[192.49833679 -205.89961243]
[195.97239685 -191.29496765]
[193.58383179 -176.43284607]
[185.66586304 -163.58297729]
[173.39855957 -154.71978760]
[158.63301086 -151.21913147]
[156.18008423 -136.42105103]
[158.20144653 -129.26379395]
[153.52188110 -121.34561157]
[150.76564026 -106.60102081]
[148.00939941 -91.85642242]
[160.94215393 -85.60694885]
[171.81813049 -76.20615387]
[179.88729858 -64.29398346]
[184.59103394 -50.68383789]
[185.60081482 -36.30705643]
[182.84104919 -22.14916611]
[176.49485779 -9.18234062]
[166.99176025 1.70137084]
[154.97874451 9.75140095]
[141.27616882 14.41042805]
[126.82172394 15.35295582]
[123.76332855 30.03785324]
[120.70493317 44.72275162]
[117.64653778 59.40764999]
[114.58814240 74.09254456]
[111.52974701 88.77744293]
[121.23851776 118.81490326]
[121.54650116 133.81173706]
[121.85447693 148.80857849]
[122.16245270 163.80541992]
[122.47042847 178.80224609]
[122.77841187 193.79908752]
[123.08638763 208.79592896]
[123.39436340 223.79277039]
[123.70233917 238.78961182]
[124.01032257 253.78643799]
[124.31829834 268.78329468]
[139.02833557 272.08151245]
[152.52128601 278.80487061]
[164.01271057 288.56246948]
[172.83448792 300.78701782]
[178.47375488 314.76779175]
[180.60263062 329.69198608]
[179.09735107 344.69189453]
[174.04544067 358.89547729]
[165.74060059 371.47692871]
[154.66566467 381.70480347]
[141.46452332 388.98443604]
[126.90466309 392.89263916]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 33]
[24 32]
[34 129]
[35 128]
[36 127]
[37 126]
[38 125]
[39 124]
[49 113]
[50 112]
[51 111]
[52 109]
[53 108]
[60 101]
[61 100]
[62 99]
[63 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
