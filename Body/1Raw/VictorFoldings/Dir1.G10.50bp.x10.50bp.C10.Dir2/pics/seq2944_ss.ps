%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACUACUAUGGGGGGGGGGACUCAAUUGAUCCAAUAACUUGACCAACGGAACAAGUUACCCUAGGGAUAxxxxxxxxxxCCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUCCCCCCCCCCGAACCACUAU\
) } def
/len { sequence length } bind def

/coor [
[73.80023193 463.22137451]
[59.95429230 457.20535278]
[48.24563217 447.67593384]
[39.54310608 435.34027100]
[34.49250412 421.11373901]
[33.46861267 406.05206299]
[36.54741287 391.27288818]
[43.50043488 377.87298584]
[53.81171799 366.84664917]
[66.71610260 359.01214600]
[81.25598907 354.95083618]
[81.25598907 339.95083618]
[81.25598907 324.95083618]
[81.25598907 309.95083618]
[81.25598907 294.95083618]
[81.25598907 279.95083618]
[81.25598907 264.95083618]
[81.25598907 249.95082092]
[81.25598907 234.95082092]
[81.25598907 219.95082092]
[81.25598907 204.95082092]
[81.25598907 189.95082092]
[81.25598907 174.95082092]
[70.57511139 164.63313293]
[70.36143494 149.42100525]
[81.25598907 138.28788757]
[81.25598907 123.28787994]
[84.99331665 89.79370117]
[79.21704865 75.95048523]
[73.44077301 62.10726929]
[67.66449738 48.26404953]
[51.36024094 48.31676865]
[36.37503433 42.03285599]
[25.06167603 30.44534111]
[19.17834091 15.41625595]
[19.61540794 -0.66250348]
[5.83302593 -6.58246660]
[-7.94935560 -12.50242996]
[-21.73173714 -18.42239189]
[-35.51411819 -24.34235573]
[-49.29650116 -30.26231956]
[-63.07888031 -36.18228149]
[-81.27648163 -33.56940079]
[-91.26580048 -47.96430969]
[-105.16835785 -53.59626770]
[-122.11883545 -53.93931580]
[-126.48155212 -70.32232666]
[-111.94651794 -79.04981232]
[-99.53639984 -67.49882507]
[-85.63385010 -61.86686707]
[-74.33421326 -66.29693604]
[-62.68144608 -61.66746521]
[-57.15891647 -49.96466446]
[-43.37653732 -44.04470062]
[-29.59415436 -38.12473679]
[-15.81177425 -32.20477295]
[-2.02939248 -26.28481102]
[11.75298882 -20.36484718]
[25.53536987 -14.44488525]
[30.56141281 -20.52986145]
[36.67499161 -25.52107430]
[43.64260101 -29.22788429]
[51.19812012 -31.50871468]
[59.05296707 -32.27644730]
[61.84529114 -47.01425552]
[64.63761902 -61.75205994]
[67.42993927 -76.48986816]
[53.66660309 -82.62723541]
[41.68999863 -91.77368927]
[32.14601135 -103.43598175]
[25.54933548 -116.98516846]
[22.25572205 -131.69056702]
[22.44278908 -146.75914001]
[26.10045242 -161.37825012]
[33.03145599 -174.75949097]
[42.86201859 -186.18125916]
[55.06199265 -195.02757263]
[68.97344971 -200.82138062]
[83.84616089 -203.25021362]
[98.87805939 -202.18307495]
[113.25849152 -197.67755127]
[126.21194458 -189.97659302]
[137.03985596 -179.49549866]
[145.15827942 -166.79951477]
[150.12940979 -152.57331848]
[151.68515015 -137.58412170]
[149.74160767 -122.64024353]
[144.40359497 -108.54760742]
[135.95898438 -96.06620789]
[124.86318970 -85.86915588]
[111.71457672 -78.50635529]
[97.22224426 -74.37488556]
[82.16774750 -73.69754028]
[79.37541962 -58.95973587]
[76.58309937 -44.22192764]
[73.79077148 -29.48412323]
[88.43379974 -19.78046227]
[97.61394501 -4.73338079]
[99.55658722 12.84596920]
[93.84484100 29.64800262]
[81.50772095 42.48777771]
[87.28398895 56.33099365]
[93.06026459 70.17420959]
[98.83653259 84.01743317]
[111.44766235 92.13896942]
[126.44036102 91.67092896]
[141.43305969 91.20288849]
[156.42575073 90.73484802]
[165.03862000 77.82756042]
[179.60493469 72.47944641]
[194.52363586 76.74697876]
[204.05819702 88.98919678]
[204.54237366 104.49871063]
[195.78999329 117.31181335]
[181.16651917 122.50158691]
[166.29498291 118.07247162]
[156.89379883 105.72753906]
[141.90109253 106.19558716]
[126.90840149 106.66362762]
[111.91570282 107.13166809]
[123.66756439 116.45335388]
[120.49522400 131.11405945]
[105.94094086 134.74351501]
[96.25598907 123.28787994]
[96.25598907 138.28788757]
[107.15054321 149.42100525]
[106.93685913 164.63313293]
[96.25598907 174.95082092]
[96.25598907 189.95082092]
[96.25598907 204.95082092]
[96.25598907 219.95082092]
[96.25598907 234.95082092]
[96.25598907 249.95082092]
[96.25598907 264.95083618]
[96.25598907 279.95083618]
[96.25598907 294.95083618]
[96.25598907 309.95083618]
[96.25598907 324.95083618]
[96.25598907 339.95083618]
[96.25598907 354.95083618]
[110.79587555 359.01214600]
[123.70025635 366.84664917]
[134.01153564 377.87298584]
[140.96455383 391.27288818]
[144.04336548 406.05206299]
[143.01947021 421.11373901]
[137.96887207 435.34027100]
[129.26634216 447.67593384]
[117.55767822 457.20535278]
[103.71173859 463.22137451]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[26 125]
[27 124]
[28 104]
[29 103]
[30 102]
[31 101]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[41 54]
[42 53]
[44 50]
[45 49]
[64 96]
[65 95]
[66 94]
[67 93]
[105 120]
[106 119]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
