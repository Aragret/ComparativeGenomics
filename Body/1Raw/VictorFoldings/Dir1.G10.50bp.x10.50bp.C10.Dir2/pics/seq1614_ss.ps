%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCAAGUAGGGGGGGGGGCCCACGUAAAGACGUUAGGUCAAGGUGUAGCCCAUGAGGUGGCAAGAAAUxxxxxxxxxxUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCUUAAUGGCACAUGCCCCCCCCCCCAGCGCAAGUA\
) } def
/len { sequence length } bind def

/coor [
[64.49256134 397.81918335]
[51.27236176 390.54672241]
[40.38555908 380.09973145]
[32.57442856 367.19046021]
[28.37154579 352.69915771]
[28.06347275 337.61383057]
[31.67121506 322.96298218]
[38.94878769 309.74560547]
[49.39999390 298.86282349]
[62.31225586 291.05670166]
[76.80519104 286.85940552]
[76.49314117 271.86264038]
[76.18108368 256.86590576]
[75.86902618 241.86914062]
[75.55696869 226.87239075]
[75.24491119 211.87564087]
[74.93285370 196.87889099]
[74.62080383 181.88212585]
[74.30874634 166.88537598]
[73.99668884 151.88862610]
[73.68463135 136.89187622]
[61.51279449 128.12565613]
[47.19019699 132.58247375]
[32.96341705 137.33628845]
[18.83861542 142.38505554]
[4.71381235 147.43380737]
[-9.41099072 152.48255920]
[-19.60632706 165.32730103]
[-35.78593826 162.65292358]
[-41.30562210 147.21060181]
[-30.48720741 134.88607788]
[-14.45974731 138.35775757]
[-0.33494407 133.30900574]
[13.78985882 128.26025391]
[27.91466141 123.21148682]
[30.75291634 119.29743195]
[36.10749817 117.16207886]
[42.73338318 118.25988007]
[57.05598068 113.80306244]
[58.14728928 98.84281921]
[44.62310028 92.35465240]
[31.09890938 85.86648560]
[12.80836773 87.72011566]
[3.42650008 72.92212677]
[-10.22974110 66.71672058]
[-25.69522476 70.98267365]
[-38.58782196 61.43487167]
[-39.01743698 45.39757156]
[-26.65450478 35.17321777]
[-10.98280907 38.60505676]
[-4.02433395 53.06047440]
[9.63190746 59.26588440]
[21.10604668 55.30969238]
[32.55614853 60.41989517]
[37.58707428 72.34229279]
[51.11126328 78.83045959]
[64.63545227 85.31862640]
[88.04129791 70.27919769]
[110.32923126 76.37751770]
[120.07688141 64.97649384]
[129.82453918 53.57547379]
[132.91160583 38.05836868]
[147.06321716 33.41281128]
[156.81086731 22.01178932]
[142.56076050 26.69518471]
[127.60923767 27.90019608]
[112.79300690 25.55939102]
[98.94119263 19.80375862]
[86.82895660 10.95539188]
[77.13409424 -0.49055323]
[70.39913940 -13.89355373]
[67.00099182 -28.50356865]
[67.12979889 -43.50301743]
[70.77836609 -58.05251694]
[77.74251556 -71.33787537]
[87.63252258 -82.61562347]
[99.89494324 -91.25466919]
[113.84355927 -96.77156067]
[128.69779968 -98.85755920]
[143.62641907 -97.39594269]
[157.79400635 -92.46850586]
[170.40771484 -84.35098267]
[180.76170349 -73.49763489]
[188.27651978 -60.51582718]
[192.53166199 -46.13202667]
[193.28900146 -31.15115547]
[190.50616455 -16.41155815]
[184.33885193 -2.73806596]
[175.13275146 9.10361195]
[189.14945984 3.76209927]
[203.16616821 -1.57941318]
[217.18289185 -6.92092562]
[231.14328003 -12.40795708]
[245.04583740 -18.03991318]
[258.88903809 -23.81618690]
[272.67144775 -29.73614883]
[286.45382690 -35.65611267]
[300.23620605 -41.57607651]
[314.01858521 -47.49604034]
[327.80096436 -53.41600037]
[333.42510986 -68.18571472]
[347.87973022 -74.57628632]
[362.58917236 -68.79629517]
[368.82653809 -54.27490997]
[362.89135742 -39.62741470]
[348.30484009 -33.54390717]
[333.72091675 -39.63362122]
[319.93853760 -33.71365738]
[306.15615845 -27.79369354]
[292.37377930 -21.87373161]
[278.59140015 -15.95376778]
[264.80902100 -10.03380489]
[259.87249756 -4.46816683]
[250.67779541 -4.13735771]
[236.77523804 1.49459887]
[231.72398376 6.95633411]
[222.52439880 7.09578753]
[208.50769043 12.43729973]
[194.49098206 17.77881241]
[180.47425842 23.12032509]
[168.21189880 31.75944138]
[158.46424866 43.16046143]
[156.07438660 57.86208725]
[141.22555542 63.32312393]
[131.47790527 74.72414398]
[121.73024750 86.12516785]
[129.05876160 107.25890350]
[116.74540710 129.72969055]
[88.68138885 136.57981873]
[88.99343872 151.57656860]
[89.30549622 166.57331848]
[89.61755371 181.57006836]
[89.92961121 196.56683350]
[90.24166870 211.56358337]
[90.55372620 226.56033325]
[90.86577606 241.55708313]
[91.17783356 256.55383301]
[91.48989105 271.55059814]
[91.80194855 286.54736328]
[106.45693970 290.13812256]
[119.68274689 297.40039062]
[130.57762146 307.83895874]
[138.39871216 320.74218750]
[142.61277771 335.23025513]
[142.93251038 350.31533813]
[139.33607483 364.96896362]
[132.06871033 378.19195557]
[121.62591553 389.08279419]
[108.71968842 396.89889526]
[94.22999573 401.10739136]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 39]
[23 38]
[24 35]
[25 34]
[26 33]
[27 32]
[40 57]
[41 56]
[42 55]
[44 52]
[45 51]
[59 126]
[60 125]
[61 124]
[63 122]
[64 121]
[89 120]
[90 119]
[91 118]
[92 117]
[93 115]
[94 114]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
