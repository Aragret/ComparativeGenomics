%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCAUCACCGGGGGGGGGGCCGCUAAAUCCCCUAGAAGUCCCACUCCUAAACACAUCCGUAUUACUCGCxxxxxxxxxxGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUCCCCCCCCCCAGGAAUCACC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 350.95468140]
[71.19830322 344.93865967]
[59.48964310 335.40924072]
[50.78712082 323.07357788]
[45.73651886 308.84704590]
[44.71262741 293.78536987]
[47.79142761 279.00619507]
[54.74444962 265.60629272]
[65.05573273 254.57994080]
[77.96011353 246.74543762]
[92.50000000 242.68412781]
[92.50000000 227.68412781]
[92.50000000 212.68412781]
[92.50000000 197.68412781]
[92.50000000 182.68412781]
[92.50000000 167.68412781]
[92.50000000 152.68412781]
[92.50000000 137.68412781]
[92.50000000 122.68412781]
[92.50000000 107.68412781]
[90.01488495 92.89141846]
[85.11332703 78.71485901]
[80.21177673 64.53829956]
[65.72194672 68.44081116]
[50.99518967 71.32305145]
[36.10325241 73.17097473]
[21.11868095 73.97558594]
[6.11448622 73.73295593]
[-8.83623409 72.44427490]
[-23.66064072 70.11582184]
[-38.28651047 66.75894165]
[-52.64258575 62.38997650]
[-66.65892792 57.03022385]
[-80.26724243 50.70579147]
[-93.40123749 43.44749451]
[-105.99692535 35.29069138]
[-117.99293518 26.27512360]
[-129.33082581 16.44471550]
[-139.95536804 5.84735823]
[-149.81477356 -5.46531725]
[-158.86103821 -17.43819618]
[-167.05007935 -30.01294899]
[-174.34199524 -43.12831116]
[-180.70126343 -56.72038269]
[-186.09689331 -70.72294617]
[-190.50260925 -85.06778717]
[-193.89694214 -99.68501282]
[-196.26336670 -114.50340271]
[-197.59033203 -129.45077515]
[-197.87138367 -144.45429993]
[-197.10516357 -159.44088745]
[-195.29537964 -174.33750916]
[-192.45088196 -189.07159424]
[-188.58549500 -203.57138062]
[-183.71807861 -217.76618958]
[-177.87231445 -231.58689880]
[-171.07672119 -244.96615601]
[-163.36437988 -257.83877563]
[-154.77287292 -270.14205933]
[-145.34405518 -281.81607056]
[-135.12387085 -292.80389404]
[-124.16210175 -303.05203247]
[-112.51216125 -312.51055908]
[-100.23080444 -321.13336182]
[-87.37786102 -328.87847900]
[-74.01595306 -335.70812988]
[-60.21018219 -341.58905029]
[-46.02780533 -346.49261475]
[-31.53792000 -350.39492798]
[-16.81111908 -353.27694702]
[-1.91915178 -355.12466431]
[13.06542969 -355.92904663]
[28.06962013 -355.68621826]
[43.02032089 -354.39733887]
[57.84469604 -352.06866455]
[72.47052002 -348.71157837]
[86.82653046 -344.34240723]
[100.84278870 -338.98245239]
[114.45101929 -332.65780640]
[127.58490753 -325.39932251]
[140.18048096 -317.24234009]
[152.17636108 -308.22662354]
[163.51411438 -298.39602661]
[174.13848877 -287.79852295]
[183.99775696 -276.48571777]
[193.04383850 -264.51269531]
[201.23269653 -251.93783569]
[208.52442932 -238.82237244]
[214.88349915 -225.23020935]
[220.27893066 -211.22755432]
[224.68444824 -196.88265991]
[228.07856750 -182.26538086]
[230.44477844 -167.44696045]
[231.77153015 -152.49957275]
[232.05236816 -137.49604797]
[231.28593445 -122.50946808]
[229.47593689 -107.61286926]
[226.63122559 -92.87882233]
[222.76562500 -78.37909698]
[217.89801025 -64.18434906]
[212.05204773 -50.36372375]
[205.25625610 -36.98456573]
[197.54373169 -24.11204720]
[188.95205688 -11.80888844]
[179.52307129 -0.13502865]
[169.30271912 10.85265923]
[158.34080505 21.10064125]
[146.69073486 30.55899429]
[134.40925598 39.18163300]
[121.55619812 46.92655182]
[108.19419098 53.75601578]
[94.38833618 59.63675308]
[99.28988647 73.81330872]
[104.19143677 87.98986816]
[107.66753387 73.39820099]
[115.84420013 60.82274628]
[127.77075958 51.72564316]
[142.06050110 47.16460419]
[157.05198669 47.66993713]
[171.00216675 53.18288803]
[182.28906250 63.06246948]
[189.60034180 76.15999603]
[192.08595276 90.95262146]
[189.45687866 105.72042084]
[182.01879883 118.74636078]
[170.63655090 128.51591492]
[156.63351440 133.89320374]
[141.63783264 134.25299072]
[127.39302826 129.55346680]
[115.55533600 120.34102631]
[107.50000000 107.68412781]
[107.50000000 122.68412781]
[107.50000000 137.68412781]
[107.50000000 152.68412781]
[107.50000000 167.68412781]
[107.50000000 182.68412781]
[107.50000000 197.68412781]
[107.50000000 212.68412781]
[107.50000000 227.68412781]
[107.50000000 242.68412781]
[122.03988647 246.74543762]
[134.94427490 254.57994080]
[145.25555420 265.60629272]
[152.20857239 279.00619507]
[155.28736877 293.78536987]
[154.26348877 308.84704590]
[149.21287537 323.07357788]
[140.51036072 335.40924072]
[128.80169678 344.93865967]
[114.95575714 350.95468140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 114]
[22 113]
[23 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
