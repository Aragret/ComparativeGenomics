%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUAACAGCAGGGGGGGGGGGUAAUAUUAAUAAUUUUCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAxxxxxxxxxxCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCAUGCCCCCCCCCCUCUAACAACA\
) } def
/len { sequence length } bind def

/coor [
[73.99179077 353.45416260]
[60.77159500 346.18167114]
[49.88478851 335.73468018]
[42.07365799 322.82543945]
[37.87077713 308.33410645]
[37.56270599 293.24877930]
[41.17044830 278.59796143]
[48.44802094 265.38055420]
[58.89922714 254.49778748]
[71.81149292 246.69165039]
[86.30442810 242.49436951]
[85.99237061 227.49760437]
[85.68031311 212.50085449]
[85.36825562 197.50410461]
[85.05619812 182.50735474]
[84.74414825 167.51058960]
[84.43209076 152.51383972]
[84.12003326 137.51708984]
[83.80797577 122.52033234]
[77.74496460 108.80027771]
[66.86613464 98.47307587]
[55.98731232 88.14586639]
[45.10848618 77.81866455]
[34.22966385 67.49146271]
[31.63630676 82.26557159]
[18.57195663 89.63597107]
[4.58559418 84.21548462]
[-0.09988070 69.96604919]
[7.94023466 57.30285645]
[22.82864189 55.48146057]
[13.08098984 44.08044052]
[3.33333755 32.67942047]
[-6.41431475 21.27839851]
[-19.43062401 13.82348728]
[-34.19667816 11.18462372]
[-48.96273422 8.54575920]
[-63.72879028 5.90689468]
[-78.49484253 3.26803041]
[-93.26090240 0.62916619]
[-107.19287109 8.58403015]
[-122.04478455 2.51772308]
[-126.42353821 -12.91620445]
[-116.97011566 -25.87816238]
[-100.93637848 -26.42484856]
[-90.62203979 -14.13688946]
[-75.85597992 -11.49802494]
[-61.08992767 -8.85916042]
[-46.32387161 -6.22029638]
[-31.55781555 -3.58143210]
[-16.79175949 -0.94256788]
[-12.66561508 -7.20554876]
[-19.38729858 -20.61520767]
[-4.41332579 -19.73151016]
[-0.28718135 -25.99449158]
[-8.53947067 -38.52045441]
[-16.79175949 -51.04641724]
[-25.04404831 -63.57237625]
[-33.29633713 -76.09834290]
[-41.54862595 -88.62429810]
[-56.44359207 -95.48521423]
[-57.67971039 -111.83770752]
[-43.98537064 -120.85974121]
[-29.44813538 -113.27021790]
[-29.02266502 -96.87659454]
[-20.77037621 -84.35063171]
[-12.51808739 -71.82466888]
[-4.26579762 -59.29870605]
[3.98649144 -46.77274323]
[12.23878098 -34.24678040]
[11.00198174 -49.19570541]
[23.03218079 -58.15529633]
[37.39834213 -62.46962738]
[52.37427521 -61.62030411]
[66.16053772 -55.70937729]
[77.10061646 -45.44708252]
[83.87998962 -32.06649780]
[85.68408203 -17.17538643]
[82.29611969 -2.56300449]
[74.12317657 10.01487541]
[62.14729691 19.04694366]
[47.80744934 23.44794083]
[32.82665634 22.68905830]
[19.00701714 16.86281013]
[4.98670626 11.53074551]
[14.73435879 22.93176651]
[24.48200989 34.33278656]
[34.22966385 45.73381042]
[44.55686569 56.61263275]
[55.43569183 66.93984222]
[66.31452179 77.26704407]
[77.19334412 87.59424591]
[88.07216644 97.92145538]
[90.25579834 80.11589813]
[115.05783081 71.56139374]
[129.38043213 67.10457611]
[136.77378845 53.39413834]
[151.36242676 49.07832336]
[164.38766479 56.21124268]
[178.71026611 51.75442886]
[193.03286743 47.29761124]
[195.73501587 32.23252487]
[205.13792419 20.15592766]
[219.08082581 13.84293938]
[234.35977173 14.74423599]
[247.46377563 22.65270615]
[255.38160706 35.75104141]
[256.29382324 51.02934265]
[249.99081421 64.97676086]
[237.92094421 74.38829041]
[222.85780334 77.10122681]
[208.26275635 72.49215698]
[197.48966980 61.62020874]
[183.16708374 66.07702637]
[168.84448242 70.53384399]
[162.16625977 83.79796600]
[147.70460510 88.52184296]
[133.83724976 81.42716980]
[119.51464844 85.88398743]
[118.26777649 100.83207703]
[131.65405273 107.60018921]
[145.04034424 114.36830139]
[158.42663574 121.13642120]
[174.76162720 119.68729401]
[183.96136475 133.26289368]
[176.56193542 147.89779663]
[160.17524719 148.53688049]
[151.65850830 134.52270508]
[138.27223206 127.75459290]
[124.88594818 120.98647308]
[111.49965668 114.21836090]
[98.80473328 122.20827484]
[99.11678314 137.20503235]
[99.42884064 152.20178223]
[99.74089813 167.19853210]
[100.05295563 182.19529724]
[100.36501312 197.19204712]
[100.67707062 212.18879700]
[100.98912048 227.18554688]
[101.30117798 242.18231201]
[115.95616913 245.77307129]
[129.18197632 253.03533936]
[140.07684326 263.47393799]
[147.89794922 276.37713623]
[152.11201477 290.86520386]
[152.43173218 305.95028687]
[148.83531189 320.60391235]
[141.56794739 333.82690430]
[131.12515259 344.71774292]
[118.21891785 352.53387451]
[103.72922516 356.74234009]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 92]
[21 91]
[22 90]
[23 89]
[24 88]
[30 87]
[31 86]
[32 85]
[33 84]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[94 118]
[95 117]
[98 114]
[99 113]
[100 112]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
