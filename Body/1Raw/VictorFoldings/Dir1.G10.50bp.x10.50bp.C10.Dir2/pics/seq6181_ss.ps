%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUGAAAAUCGGGGGGGGGGACCUCGGAGCUGGUAAAAAGAGGCCUAACCCCUGUCUUUAGAUUUACAGUxxxxxxxxxxAAACAAAGCAUACAUCAUUAUUCUCGCACGGACUACAACCACGACCAAUGCCCCCCCCCCAUAUGAAAAAC\
) } def
/len { sequence length } bind def

/coor [
[84.09769440 400.96359253]
[70.07574463 395.41058350]
[57.87578964 386.54425049]
[48.26472092 374.92193604]
[41.84669495 361.27423096]
[39.02515793 346.45904541]
[39.97747421 331.40768433]
[44.64377975 317.06625366]
[52.73074341 304.33630371]
[63.73001862 294.01800537]
[76.95018005 286.76004028]
[91.56018829 283.01861572]
[91.56018829 268.01861572]
[91.56018829 253.01860046]
[91.56018829 238.01860046]
[91.56018829 223.01860046]
[91.56018829 208.01860046]
[91.56018829 193.01860046]
[91.56018829 178.01860046]
[91.56018829 163.01860046]
[91.56018829 148.01860046]
[79.05615234 139.73313904]
[65.24256897 145.57992554]
[51.42898941 151.42671204]
[48.05420303 166.57235718]
[36.39930344 176.81651306]
[20.94583893 178.22012329]
[7.63598347 170.24343872]
[1.58764660 155.95367432]
[5.12653732 140.84553528]
[16.89188004 130.72840881]
[32.35966110 129.49253845]
[45.58220291 137.61312866]
[59.39578247 131.76634216]
[73.20936584 125.91954803]
[73.36335754 118.42113495]
[73.67133331 103.42429352]
[73.82532501 95.92587280]
[60.26342773 89.51689911]
[46.70153046 83.10792542]
[33.13963318 76.69894409]
[19.57773781 70.28997040]
[5.76415443 64.44318390]
[-8.27782249 59.16844177]
[-23.42207336 64.46289062]
[-36.92648697 55.80203629]
[-38.43162918 39.82974243]
[-26.78288651 28.79859161]
[-10.91617584 31.17073250]
[-3.00308061 45.12646484]
[11.03889561 50.40120697]
[13.68547058 49.31186295]
[16.93567848 49.23848724]
[20.39222717 50.42128372]
[23.57672691 52.94764709]
[25.98671341 56.72807693]
[39.54861069 63.13705063]
[53.11050415 69.54602814]
[66.67240143 75.95500183]
[80.23429871 82.36397552]
[86.52851868 78.28564453]
[105.41117859 66.05064392]
[97.39216614 52.41224289]
[104.86651611 39.52879333]
[104.55854034 24.53195572]
[104.25056458 9.53511810]
[89.71340942 5.39233446]
[77.04412079 -2.85269308]
[67.36923218 -14.46682167]
[61.54903793 -28.41732979]
[60.10105896 -43.46375275]
[63.15404510 -58.26816559]
[70.43653870 -71.51417542]
[81.30097198 -82.02394867]
[94.78129578 -88.86297607]
[109.67884827 -91.42312622]
[124.66894531 -89.47675323]
[138.41868591 -83.19692993]
[149.70544434 -73.14205170]
[157.52560425 -60.20619583]
[161.18382263 -45.53960419]
[160.35478210 -30.44642258]
[155.11222839 -16.26872635]
[145.92231750 -4.26718760]
[133.60221863 4.49102640]
[119.24739838 9.22714043]
[119.55538177 24.22397804]
[119.86335754 39.22081757]
[127.86034393 51.78654480]
[120.40801239 65.74266815]
[125.84567261 70.90811920]
[129.35494995 56.32439804]
[143.73948669 52.07175827]
[154.61457825 62.40289688]
[151.10498047 76.98654175]
[136.72097778 81.23902130]
[142.15864563 86.40447235]
[157.15153503 85.94255066]
[172.14440918 85.48062134]
[187.13729858 85.01869965]
[193.48443604 74.87956238]
[203.84631348 69.14744568]
[215.56773376 69.15795135]
[225.70903015 74.79187775]
[231.78330994 84.53427124]
[246.78251648 84.68827057]
[261.78170776 84.84226990]
[267.38232422 70.73561096]
[277.70349121 59.60737228]
[291.34939575 52.96255875]
[306.47454834 51.69982147]
[321.03338623 55.98993683]
[333.05691528 65.25270081]
[340.91909790 78.23540497]
[343.55661011 93.18224335]
[340.61276245 108.07177734]
[332.48568726 120.89031982]
[320.27450562 129.90426636]
[305.63064575 133.89456177]
[290.53463745 132.32154846]
[277.02801514 125.39795685]
[266.93750000 114.06015015]
[261.62771606 99.84147644]
[246.62850952 99.68747711]
[231.62930298 99.53348541]
[219.40855408 113.10294342]
[200.83374023 113.49993134]
[187.59922791 100.01158142]
[172.60633850 100.47351074]
[157.61344910 100.93543243]
[142.62057495 101.39736176]
[106.56018829 148.01860046]
[106.56018829 163.01860046]
[106.56018829 178.01860046]
[106.56018829 193.01860046]
[106.56018829 208.01860046]
[106.56018829 223.01860046]
[106.56018829 238.01860046]
[106.56018829 253.01860046]
[106.56018829 268.01861572]
[106.56018829 283.01861572]
[121.17020416 286.76004028]
[134.39036560 294.01800537]
[145.38963318 304.33630371]
[153.47660828 317.06625366]
[158.14291382 331.40768433]
[159.09523010 346.45904541]
[156.27368164 361.27423096]
[149.85566711 374.92193604]
[140.24459839 386.54425049]
[128.04463196 395.41058350]
[114.02268982 400.96359253]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 35]
[23 34]
[24 33]
[38 60]
[39 59]
[40 58]
[41 57]
[42 56]
[43 51]
[44 50]
[62 90]
[64 88]
[65 87]
[66 86]
[97 131]
[98 130]
[99 129]
[100 128]
[105 125]
[106 124]
[107 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
