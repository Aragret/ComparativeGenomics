%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCAACUAGGGGGGGGGGAAAAUAUUAAACACAAACUACCACCUACCUCCCUCACCAAAGCCCAUAAAxxxxxxxxxxUCUAAUUUAAACUAUUCUCUGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCCCCCCCCCCCACCCAAGUA\
) } def
/len { sequence length } bind def

/coor [
[83.95975494 373.57708740]
[70.73955536 366.30462646]
[59.85275269 355.85760498]
[52.04162216 342.94836426]
[47.83874130 328.45706177]
[47.53067017 313.37170410]
[51.13840866 298.72088623]
[58.41598511 285.50350952]
[68.86718750 274.62072754]
[81.77944946 266.81460571]
[96.27239227 262.61730957]
[95.96033478 247.62054443]
[95.64827728 232.62379456]
[95.33621979 217.62704468]
[95.02416229 202.63029480]
[94.71210480 187.63352966]
[94.40005493 172.63677979]
[94.08799744 157.64002991]
[93.77593994 142.64328003]
[93.46388245 127.64652252]
[80.29530334 120.46401215]
[67.51794434 128.32144165]
[60.19561005 142.99507141]
[43.81250763 143.72033691]
[35.22216797 129.75115967]
[43.26159668 115.45781708]
[59.66051865 115.54408264]
[72.43787384 107.68665314]
[75.20239258 93.15668488]
[84.26350403 83.45283508]
[95.66565704 80.53079987]
[98.15077209 65.73809052]
[92.80673218 50.84675598]
[102.54569244 39.57723999]
[105.03081512 24.78453445]
[107.51593018 9.99182701]
[110.00105286 -4.80087996]
[111.86865997 -19.68416023]
[113.11553955 -34.63224792]
[102.81739044 -23.72591400]
[88.48578644 -19.29814529]
[73.83042145 -22.49505806]
[62.64478683 -32.48913956]
[57.82425690 -46.69345093]
[60.61660767 -61.43125153]
[70.29904938 -72.88770294]
[84.36531067 -78.09734344]
[99.17437744 -75.71166992]
[110.89297485 -66.34820557]
[116.48776245 -52.43076324]
[120.79534912 -66.79895020]
[125.10293579 -81.16712952]
[129.41052246 -95.53531647]
[128.88029480 -104.72066498]
[133.96005249 -110.15589142]
[138.56562805 -124.43135071]
[131.61560059 -138.37174988]
[136.48965454 -152.78349304]
[149.82252502 -159.32337952]
[154.42808533 -173.59883118]
[159.03366089 -187.87429810]
[163.63922119 -202.14976501]
[152.22392273 -192.41882324]
[139.01263428 -185.31517029]
[124.60004425 -181.15858459]
[109.63493347 -180.13615417]
[94.79093933 -182.29391479]
[80.73626709 -187.53472900]
[68.10357666 -195.62269592]
[57.46151733 -206.19372559]
[49.28914261 -218.77197266]
[43.95432663 -232.79122925]
[41.69721222 -247.62043762]
[42.61940384 -262.59207153]
[46.67938232 -277.03216553]
[53.69440079 -290.29074097]
[63.34867477 -301.77093506]
[75.20762634 -310.95599365]
[88.73742676 -317.43246460]
[103.32903290 -320.90878296]
[118.32563019 -321.22848511]
[133.05213928 -318.37716675]
[146.84565735 -312.48321533]
[159.08528137 -303.81188965]
[169.22003174 -292.75357056]
[176.79373169 -279.80599976]
[181.46542358 -265.55206299]
[183.02482605 -250.63333130]
[181.40174866 -235.72140503]
[176.66828918 -221.48544312]
[188.17010498 -231.11396790]
[199.67190552 -240.74249268]
[198.47306824 -256.21319580]
[206.62530518 -269.41622925]
[220.99391174 -275.27481079]
[236.05386353 -271.53616333]
[246.01429749 -259.63787842]
[247.04522705 -244.15507507]
[238.75024414 -231.04122925]
[224.31893921 -225.33888245]
[209.30043030 -229.24069214]
[197.79862976 -219.61216736]
[186.29682922 -209.98362732]
[177.91467285 -197.54418945]
[173.30911255 -183.26873779]
[168.70355225 -168.99327087]
[164.09799194 -154.71781921]
[171.09503174 -141.61906433]
[166.62768555 -127.07611847]
[152.84107971 -119.82579041]
[148.23551941 -105.55033112]
[143.77870178 -91.22772980]
[139.47111511 -76.85954285]
[135.16352844 -62.49136353]
[130.85595703 -48.12317657]
[128.06362915 -33.38537216]
[126.81674957 -18.43728638]
[128.58947754 -16.18677902]
[129.54759216 -13.07615566]
[129.35038757 -9.42335033]
[127.78264618 -5.66658974]
[124.79375458 -2.31576157]
[122.30863953 12.47694588]
[119.82351685 27.26965332]
[117.33840179 42.06235886]
[122.86019135 55.89562225]
[112.94348145 68.22320557]
[110.45835876 83.01591492]
[124.08774567 103.04837036]
[108.46063995 127.33446503]
[108.77268982 142.33122253]
[109.08474731 157.32797241]
[109.39680481 172.32472229]
[109.70886230 187.32148743]
[110.02091980 202.31823730]
[110.33297729 217.31498718]
[110.64502716 232.31173706]
[110.95708466 247.30850220]
[111.26914215 262.30523682]
[125.92413330 265.89602661]
[139.14994812 273.15826416]
[150.04481506 283.59686279]
[157.86590576 296.50009155]
[162.07998657 310.98815918]
[162.39970398 326.07324219]
[158.80326843 340.72683716]
[151.53590393 353.94985962]
[141.09310913 364.84069824]
[128.18687439 372.65679932]
[113.69718933 376.86526489]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 28]
[22 27]
[31 128]
[32 127]
[34 125]
[35 124]
[36 123]
[37 122]
[38 117]
[39 116]
[50 115]
[51 114]
[52 113]
[53 112]
[55 111]
[56 110]
[59 107]
[60 106]
[61 105]
[62 104]
[90 103]
[91 102]
[92 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
