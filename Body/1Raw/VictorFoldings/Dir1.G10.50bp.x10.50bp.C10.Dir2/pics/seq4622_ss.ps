%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUAAGCUAGGGGGGGGGGUCGGGCCCAUACCCCGAAAAUGUUGGUUAUACCCUUCCCGUACUAAUUAAxxxxxxxxxxCUACUCAACUUAAACUCCAGCACCACGACCCUACUACUAUCUCGCACCUGCCCCCCCCCCAAACAAGCUA\
) } def
/len { sequence length } bind def

/coor [
[72.22386932 385.97817993]
[58.37793350 379.96215820]
[46.66927338 370.43273926]
[37.96674728 358.09707642]
[32.91614532 343.87057495]
[31.89225388 328.80886841]
[34.97105408 314.02972412]
[41.92407608 300.62979126]
[52.23535919 289.60345459]
[65.13973999 281.76895142]
[79.67962646 277.70764160]
[79.67962646 262.70764160]
[79.67962646 247.70764160]
[79.67962646 232.70764160]
[79.67962646 217.70764160]
[79.67962646 202.70764160]
[79.67962646 187.70764160]
[79.67962646 172.70764160]
[79.67962646 157.70764160]
[79.67962646 142.70764160]
[67.32805634 134.19654846]
[53.31134033 139.53805542]
[39.29462814 144.87957764]
[25.27791595 150.22108459]
[11.26120281 155.56259155]
[6.30550385 170.39414978]
[-7.05127907 178.52621460]
[-22.50248146 176.11906433]
[-32.75251770 164.30928040]
[-32.96163559 148.67309570]
[-23.03109169 136.59342957]
[-7.64979076 133.77394104]
[5.91969061 141.54588318]
[19.93640327 136.20437622]
[33.95311737 130.86285400]
[47.96982956 125.52134705]
[61.98654175 120.17983246]
[58.26179123 102.68986511]
[61.98173523 85.71950531]
[72.07374573 72.20800018]
[86.40043640 64.31785583]
[83.91532135 49.52514648]
[81.43019867 34.73243713]
[78.94508362 19.93973160]
[76.45996094 5.14702463]
[73.97484589 -9.64568233]
[58.97194672 -8.95982170]
[43.99576569 -10.08740425]
[29.26470566 -13.01198673]
[14.99358273 -17.69091988]
[1.39051378 -24.05597115]
[-11.34612846 -32.01432037]
[-23.03060532 -41.44990921]
[-33.49252319 -52.22513962]
[-42.57931900 -64.18287659]
[-50.15847778 -77.14874268]
[-56.11947250 -90.93366241]
[-60.37537766 -105.33660126]
[-62.86412430 -120.14752197]
[-63.54942703 -135.15045166]
[-62.42128372 -150.12658691]
[-59.49615097 -164.85754395]
[-54.81668472 -179.12847900]
[-48.45112228 -192.73132324]
[-40.49229813 -205.46766663]
[-31.05627251 -217.15177917]
[-20.28064919 -227.61329651]
[-8.32257175 -236.69964600]
[4.64357948 -244.27832031]
[18.42871857 -250.23880005]
[32.83181381 -254.49417114]
[47.64283371 -256.98236084]
[62.64578247 -257.66711426]
[77.62187958 -256.53839111]
[92.35272217 -253.61271667]
[106.62348938 -248.93270874]
[120.22608185 -242.56665039]
[132.96212769 -234.60734558]
[144.64590454 -225.17088318]
[155.10700989 -214.39486694]
[164.19291687 -202.43644714]
[171.77110291 -189.47001648]
[177.73106384 -175.68466187]
[181.98590088 -161.28140259]
[184.47354126 -146.47029114]
[185.15771484 -131.46731567]
[184.02845764 -116.49125671]
[181.10221863 -101.76052856]
[176.42169189 -87.48992920]
[170.05511475 -73.88757324]
[162.09533691 -61.15182495]
[152.65843201 -49.46840668]
[141.88201904 -39.00769424]
[129.92326355 -29.92224312]
[116.95655060 -22.34453773]
[103.17096710 -16.38508987]
[88.76754761 -12.13080120]
[91.25267029 2.66190600]
[93.73778534 17.45461273]
[96.22290802 32.24732208]
[98.70802307 47.04002762]
[101.19314575 61.83273315]
[114.33818817 64.60819244]
[125.70840454 71.76453400]
[133.89637756 82.41593933]
[137.88856506 95.24394226]
[152.84881592 96.33525085]
[167.80906677 97.42656708]
[174.96176147 83.98190308]
[186.96849060 74.61397552]
[201.74903870 70.94582367]
[216.74258423 73.61299133]
[229.35137939 82.15335846]
[237.39089966 95.08727264]
[239.46824646 110.17383575]
[235.22349548 124.79922485]
[225.39208984 136.42950439]
[211.67736816 143.04963684]
[196.45549011 143.51266479]
[182.36373901 137.73835754]
[171.84359741 126.72715759]
[166.71775818 112.38681030]
[151.75750732 111.29550171]
[136.79725647 110.20419312]
[134.59310913 117.74530792]
[130.83401489 124.80359650]
[125.62735748 131.05690002]
[119.14742279 136.20726013]
[111.62998199 139.99490356]
[103.36380005 142.21081543]
[94.67962646 142.70764160]
[94.67962646 157.70764160]
[94.67962646 172.70764160]
[94.67962646 187.70764160]
[94.67962646 202.70764160]
[94.67962646 217.70764160]
[94.67962646 232.70764160]
[94.67962646 247.70764160]
[94.67962646 262.70764160]
[94.67962646 277.70764160]
[109.21951294 281.76895142]
[122.12389374 289.60345459]
[132.43518066 300.62979126]
[139.38819885 314.02972412]
[142.46699524 328.80886841]
[141.44311523 343.87057495]
[136.39250183 358.09707642]
[127.68997955 370.43273926]
[115.98132324 379.96215820]
[102.13538361 385.97817993]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[41 102]
[42 101]
[43 100]
[44 99]
[45 98]
[46 97]
[106 124]
[107 123]
[108 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
