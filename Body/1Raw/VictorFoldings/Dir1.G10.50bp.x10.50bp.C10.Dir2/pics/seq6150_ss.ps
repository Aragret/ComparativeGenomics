%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUUCUCCGGGGGGGGGGCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUxxxxxxxxxxAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCCCCCCCCCCCUACUUCCCC\
) } def
/len { sequence length } bind def

/coor [
[72.04637146 404.18099976]
[58.20043564 398.16497803]
[46.49177170 388.63555908]
[37.78924942 376.29989624]
[32.73864746 362.07336426]
[31.71475601 347.01168823]
[34.79355240 332.23251343]
[41.74657440 318.83258057]
[52.05786133 307.80624390]
[64.96224213 299.97174072]
[79.50212860 295.91043091]
[79.50212860 280.91043091]
[79.50212860 265.91043091]
[79.50212860 250.91043091]
[79.50212860 235.91043091]
[79.50212860 220.91043091]
[79.50212860 205.91043091]
[79.50212860 190.91043091]
[79.50212860 175.91043091]
[79.50212860 160.91043091]
[79.50212860 145.91043091]
[79.50212860 130.91043091]
[69.40348053 119.81912231]
[54.46916962 118.41681671]
[39.52108383 117.16994476]
[24.56083488 116.07863617]
[9.60058594 114.98731995]
[-5.35966253 113.89601135]
[-20.31991196 112.80470276]
[-35.28015900 111.71339417]
[-25.77633286 123.31844330]
[-25.78047752 138.31843567]
[-35.29071808 149.91824341]
[-49.99882126 152.86302185]
[-63.24187088 145.81875610]
[-69.02063751 131.97657776]
[-64.71728516 117.60713196]
[-52.28087997 109.21980286]
[-66.92438507 105.96897888]
[-79.22232819 115.62789154]
[-94.84996796 115.07041168]
[-106.42841339 104.55976868]
[-108.49067688 89.05876160]
[-100.06301117 75.88649750]
[-85.12471008 71.26251984]
[-70.72918701 77.37011719]
[-63.67355728 91.32547760]
[-49.03005600 94.57630157]
[-34.18885040 96.75314331]
[-19.22859955 97.84445190]
[-4.26835155 98.93576050]
[10.69189739 100.02707672]
[25.65214539 101.11838531]
[40.61239243 102.20969391]
[47.55722809 99.54231262]
[55.87147522 103.48251343]
[70.80577850 104.88481140]
[81.16311646 82.15708160]
[102.48267365 77.84663391]
[109.11117554 64.39066315]
[115.73966980 50.93470001]
[112.33217621 38.45099640]
[118.18064117 27.35980988]
[129.64799500 23.38397026]
[136.55499268 10.06881523]
[143.46199036 -3.24634051]
[150.36898804 -16.56149673]
[157.27598572 -29.87665176]
[145.21308899 -38.84786606]
[134.74559021 -49.63802719]
[126.14460754 -61.96764374]
[119.63294983 -75.51734924]
[115.37927246 -89.93616486]
[113.49375153 -104.85062408]
[114.02523804 -119.87439728]
[116.95995331 -134.61833191]
[122.22189331 -148.70051575]
[129.67474365 -161.75621033]
[139.12548828 -173.44723511]
[150.32928467 -183.47074890]
[162.99597168 -191.56712341]
[176.79742432 -197.52664185]
[191.37617493 -201.19496155]
[206.35456848 -202.47703552]
[221.34465027 -201.33966064]
[235.95812988 -197.81231689]
[249.81649780 -191.98634338]
[262.56079102 -184.01266479]
[273.86087036 -174.09782410]
[283.42407227 -162.49861145]
[291.00265503 -149.51550293]
[296.40032959 -135.48478699]
[299.47729492 -120.76987457]
[300.15383911 -105.75193787]
[298.41244507 -90.81996918]
[294.29821777 -76.36074829]
[287.91769409 -62.74879074]
[279.43618774 -50.33668900]
[269.07339478 -39.44594574]
[257.09768677 -30.35865593]
[243.81930542 -23.31020164]
[229.58216858 -18.48315620]
[214.75508118 -16.00255203]
[199.72207642 -15.93264008]
[184.87254333 -18.27523422]
[170.59114075 -22.96965408]
[163.68414307 -9.65449715]
[156.77714539 3.66065812]
[149.87014771 16.97581291]
[142.96315002 30.29096985]
[144.72502136 47.72357559]
[129.19563293 57.56319809]
[122.56713867 71.01916504]
[115.93863678 84.47512817]
[122.14405060 98.13137054]
[136.63964844 101.98853302]
[151.13523865 105.84568787]
[166.81864929 101.05374146]
[178.62409973 112.43633270]
[174.40715027 128.28402710]
[158.50584412 132.29408264]
[147.27807617 120.34128571]
[132.78248596 116.48413086]
[118.28688812 112.62696838]
[112.34069824 117.19783783]
[121.48223114 129.09036255]
[109.58955383 138.23170471]
[100.44831848 126.33956909]
[94.50212860 130.91043091]
[94.50212860 145.91043091]
[94.50212860 160.91043091]
[94.50212860 175.91043091]
[94.50212860 190.91043091]
[94.50212860 205.91043091]
[94.50212860 220.91043091]
[94.50212860 235.91043091]
[94.50212860 250.91043091]
[94.50212860 265.91043091]
[94.50212860 280.91043091]
[94.50212860 295.91043091]
[109.04201508 299.97174072]
[121.94639587 307.80624390]
[132.25767517 318.83258057]
[139.21070862 332.23251343]
[142.28950500 347.01168823]
[141.26560974 362.07336426]
[136.21501160 376.29989624]
[127.51248169 388.63555908]
[115.80381775 398.16497803]
[101.95788574 404.18099976]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 57]
[24 56]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[38 48]
[39 47]
[59 114]
[60 113]
[61 112]
[64 110]
[65 109]
[66 108]
[67 107]
[68 106]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
