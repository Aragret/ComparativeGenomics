%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUCAUUUACGGGGGGGGGGAUAAAUAUUAUACUAGCAUUUACCAUCUCACUUCUAGGAAUACUAGUAUAxxxxxxxxxxAUAGUUUAACCAAAACAUCAGAUUGUGAAUCUGACAACAGAGGCUUACGACCCCCCCCCCCCCCUUAUUUAC\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 381.39382935]
[70.87159729 376.23883057]
[58.28185654 367.95660400]
[47.94191742 356.99383545]
[40.40940475 343.94171143]
[36.09054184 329.50411987]
[35.21823120 314.45965576]
[37.83952332 299.61965942]
[43.81304932 285.78442383]
[52.81666565 273.70007324]
[64.36482239 264.01831055]
[77.83473969 257.26123047]
[92.50000000 253.79324341]
[92.50000000 238.79324341]
[92.50000000 223.79324341]
[92.50000000 208.79324341]
[92.50000000 193.79324341]
[92.50000000 178.79324341]
[92.50000000 163.79324341]
[92.50000000 148.79324341]
[92.50000000 133.79324341]
[92.50000000 118.79325104]
[79.96637726 108.70246887]
[78.14977264 91.48777771]
[89.82773590 77.10031128]
[78.54595947 67.21488953]
[63.06750107 63.93954849]
[58.59418869 49.73255157]
[47.31241608 39.84712982]
[36.03064346 29.96170425]
[23.80666161 21.26835632]
[10.76590729 13.85629177]
[-2.27484798 6.44422674]
[-15.31560326 -0.96783835]
[-28.35635757 -8.37990379]
[-41.39711380 -15.79196835]
[-54.43787003 -23.20403290]
[-67.47862244 -30.61609840]
[-83.29956055 -30.70860100]
[-90.54115295 -43.72430801]
[-103.58190155 -51.13637161]
[-116.62265778 -58.54843903]
[-123.32061768 -58.89019012]
[-128.09182739 -62.11217117]
[-130.03291321 -66.53437042]
[-142.76257324 -74.46882629]
[-155.62910461 -66.25816345]
[-170.78495789 -64.45171356]
[-185.22090149 -69.40814972]
[-196.07067871 -80.14337921]
[-201.18005371 -94.52590179]
[-199.53457642 -109.70005798]
[-191.46093750 -122.65301514]
[-178.56216431 -130.81295776]
[-163.39932251 -132.55970764]
[-148.98301697 -127.54645538]
[-138.17559814 -116.76858521]
[-133.12289429 -102.36605835]
[-134.82810974 -87.19849396]
[-122.09844971 -79.26403046]
[-109.21059418 -71.58919525]
[-96.16983795 -64.17713165]
[-83.12908173 -56.76506424]
[-68.24091339 -57.20272064]
[-60.06655884 -43.65685272]
[-47.02580261 -36.24478912]
[-33.98504639 -28.83272362]
[-20.94429398 -21.42065811]
[-7.90353823 -14.00859356]
[5.13721704 -6.59652853]
[18.17797279 0.81553662]
[31.21872711 8.22760201]
[25.59511566 -5.67833185]
[27.54506302 -20.55104828]
[36.56337357 -32.53729248]
[50.31356430 -38.53164291]
[65.23320770 -36.98107147]
[77.45688629 -28.28730011]
[83.81766510 -14.70273304]
[82.66758728 0.25311232]
[74.30460358 12.70544338]
[60.89542389 19.42808342]
[45.91606903 18.67993164]
[57.19783783 28.56535530]
[68.47961426 38.45077896]
[83.15112305 41.01904678]
[88.43138123 55.93311691]
[99.71315765 65.81854248]
[114.37474823 68.98676300]
[128.73161316 64.64158630]
[143.08847046 60.29640579]
[157.40055847 55.80596161]
[171.66641235 51.17070389]
[172.81628418 35.16125870]
[179.99360657 20.84771347]
[192.07717896 10.40030193]
[207.20448303 5.39042139]
[223.05867004 6.55432796]
[237.22344971 13.68509197]
[247.55131531 25.66864586]
[261.72027588 20.74521828]
[275.88925171 15.82178974]
[290.05822754 10.89836121]
[304.22720337 5.97493315]
[318.39617920 1.05150509]
[332.56515503 -3.87192297]
[345.54220581 -14.78214073]
[359.61843872 -5.33249998]
[354.43478394 10.80955887]
[337.48858643 10.29705238]
[323.31961060 15.22047997]
[309.15063477 20.14390755]
[294.98165894 25.06733704]
[280.81268311 29.99076462]
[266.64370728 34.91419220]
[252.47473145 39.83761978]
[252.18635559 53.89809036]
[247.09613037 67.04008484]
[237.79879761 77.67147064]
[225.40008545 84.49676514]
[211.38523865 86.67501068]
[197.44113159 83.92332458]
[185.25317383 76.55343628]
[176.30166626 65.43655396]
[162.03581238 70.07180786]
[156.61431885 75.15973663]
[147.43365479 74.65326691]
[133.07678223 78.99844360]
[118.71993256 83.34362030]
[123.12437439 94.15498352]
[122.03934479 105.20631409]
[116.23806000 114.00032043]
[107.50000000 118.79325104]
[107.50000000 133.79324341]
[107.50000000 148.79324341]
[107.50000000 163.79324341]
[107.50000000 178.79324341]
[107.50000000 193.79324341]
[107.50000000 208.79324341]
[107.50000000 223.79324341]
[107.50000000 238.79324341]
[107.50000000 253.79324341]
[122.16526031 257.26123047]
[135.63517761 264.01831055]
[147.18333435 273.70007324]
[156.18695068 285.78442383]
[162.16047668 299.61965942]
[164.78176880 314.45965576]
[163.90945435 329.50411987]
[159.59059143 343.94171143]
[152.05809021 356.99383545]
[141.71813965 367.95660400]
[129.12840271 376.23883057]
[114.96779633 381.39382935]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[25 88]
[26 87]
[28 85]
[29 84]
[30 83]
[31 72]
[32 71]
[33 70]
[34 69]
[35 68]
[36 67]
[37 66]
[38 65]
[40 63]
[41 62]
[42 61]
[45 60]
[46 59]
[89 129]
[90 128]
[91 127]
[92 125]
[93 124]
[100 116]
[101 115]
[102 114]
[103 113]
[104 112]
[105 111]
[106 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
