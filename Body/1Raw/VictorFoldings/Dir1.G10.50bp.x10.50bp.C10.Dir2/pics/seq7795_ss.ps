%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGAAGCCCGGGGGGGGGGCCAUUCGUAUAAUAAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGUCxxxxxxxxxxGUCCCACCCUCACACGAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUCCCCCCCCCCAUUGCAGCCC\
) } def
/len { sequence length } bind def

/coor [
[110.95025635 370.79235840]
[97.10431671 364.77633667]
[85.39565277 355.24691772]
[76.69313049 342.91125488]
[71.64253235 328.68472290]
[70.61863708 313.62304688]
[73.69743347 298.84387207]
[80.65045929 285.44396973]
[90.96174622 274.41763306]
[103.86612701 266.58309937]
[118.40601349 262.52178955]
[118.40601349 247.52180481]
[118.40601349 232.52180481]
[118.40601349 217.52180481]
[118.40601349 202.52180481]
[118.40601349 187.52180481]
[118.40601349 172.52180481]
[118.40601349 157.52180481]
[118.40601349 142.52180481]
[118.40601349 127.52179718]
[112.14302826 123.39565277]
[99.61706543 115.14336395]
[93.35408783 111.01721954]
[79.57170868 116.93718719]
[65.78932190 122.85714722]
[58.53162766 137.16467285]
[42.79193115 140.26974487]
[30.64437675 129.79040527]
[31.40753555 113.76551056]
[44.49597168 104.48799133]
[59.86936188 109.07476807]
[73.65174103 103.15480042]
[87.43412018 97.23484039]
[97.29985046 85.93583679]
[101.30758667 71.48114777]
[105.31533051 57.02645874]
[93.81588745 48.56692123]
[85.92018127 36.70921707]
[82.56365204 22.89511871]
[84.13130951 8.79589462]
[90.41370392 -3.88988757]
[100.63462830 -13.64098930]
[113.54695892 -19.29591751]
[127.58484650 -20.19125366]
[131.89242554 -34.55943680]
[136.20001221 -48.92761993]
[140.50759888 -63.29580688]
[144.81518555 -77.66398621]
[146.06205750 -92.61207581]
[144.19444275 -107.49535370]
[142.32682800 -122.37863922]
[129.95599365 -126.66265869]
[121.27906036 -138.36883545]
[120.60523987 -154.41043091]
[110.39176178 -165.39610291]
[94.56595612 -169.69447327]
[90.63773346 -185.61619568]
[102.64810181 -196.78234863]
[118.24182892 -191.70616150]
[121.37742615 -175.60957336]
[131.59091187 -164.62391663]
[145.71571350 -169.67266846]
[146.65133667 -184.64346313]
[147.58695984 -199.61425781]
[148.52259827 -214.58503723]
[134.17440796 -219.23049927]
[121.43270111 -227.29895020]
[111.09844971 -238.28321838]
[103.82126617 -251.49281311]
[100.05860138 -266.09738159]
[100.04696655 -281.17883301]
[103.78711700 -295.78918457]
[111.04392242 -309.00997925]
[121.36122131 -320.01016235]
[134.09045410 -328.09826660]
[148.43147278 -332.76583862]
[163.48275757 -333.71948242]
[178.29820251 -330.89926147]
[191.94647217 -324.48245239]
[203.56962585 -314.87240601]
[212.43704224 -302.67321777]
[217.99128723 -288.65176392]
[219.88323975 -273.68945312]
[217.99394226 -258.72677612]
[212.44216919 -244.70433044]
[203.57691956 -232.50360107]
[191.95545959 -222.89149475]
[178.30831909 -216.47225952]
[163.49337769 -213.64941406]
[162.55775452 -198.67861938]
[161.62213135 -183.70782471]
[160.68649292 -168.73704529]
[172.41329956 -143.05140686]
[157.21011353 -124.24624634]
[159.07772827 -109.36296844]
[160.94534302 -94.47969055]
[167.08973694 -108.16349030]
[176.77958679 -119.61368561]
[189.25866699 -127.93668365]
[203.55311584 -132.48297119]
[218.54737854 -132.89773560]
[233.07128906 -129.14860535]
[245.99139404 -121.52817535]
[256.29940796 -110.63114166]
[263.19082642 -97.30792999]
[266.12792969 -82.59828949]
[264.88140869 -67.65016937]
[259.54861450 -53.63014221]
[250.54570007 -41.63233185]
[238.57525635 -32.59306335]
[224.57145691 -27.21777153]
[209.62719727 -25.92594528]
[194.90870667 -28.81839943]
[181.56466675 -35.66940689]
[170.63641357 -45.94430542]
[162.97683716 -58.84123611]
[159.18336487 -73.35640717]
[154.87577820 -58.98822021]
[150.56820679 -44.62003708]
[146.26062012 -30.25185204]
[141.95303345 -15.88366795]
[154.36927795 -6.08459902]
[162.10479736 7.75608206]
[163.95431519 23.54223824]
[159.60658264 38.87013245]
[149.69621277 51.39445114]
[135.71130371 59.18714142]
[119.77001953 61.03419876]
[115.76227570 75.48889160]
[111.75453186 89.94357300]
[133.40600586 127.52179718]
[133.40600586 142.52180481]
[133.40600586 157.52180481]
[133.40600586 172.52180481]
[133.40600586 187.52180481]
[133.40600586 202.52180481]
[133.40600586 217.52180481]
[133.40600586 232.52180481]
[133.40600586 247.52180481]
[133.40600586 262.52178955]
[147.94589233 266.58309937]
[160.85028076 274.41763306]
[171.16156006 285.44396973]
[178.11457825 298.84387207]
[181.19338989 313.62304688]
[180.16949463 328.68472290]
[175.11889648 342.91125488]
[166.41636658 355.24691772]
[154.70770264 364.77633667]
[140.86177063 370.79235840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 33]
[24 32]
[25 31]
[34 130]
[35 129]
[36 128]
[44 121]
[45 120]
[46 119]
[47 118]
[48 117]
[49 96]
[50 95]
[51 94]
[54 61]
[55 60]
[62 92]
[63 91]
[64 90]
[65 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
