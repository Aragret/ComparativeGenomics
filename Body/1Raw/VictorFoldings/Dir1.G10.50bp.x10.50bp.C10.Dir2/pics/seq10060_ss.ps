%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUUCCUAUUCGGGGGGGGGGUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCAxxxxxxxxxxUAUACCCUAGCCAACCCCUUAAACACCCCUCCCCACAUCAAGCCCGAAUGCCCCCCCCCCAUAUUUCCUAUUC\
) } def
/len { sequence length } bind def

/coor [
[75.79283905 432.33117676]
[61.52107239 427.52172852]
[48.61708832 419.75634766]
[37.68443298 409.39822388]
[29.23444557 396.93179321]
[23.66234970 382.94015503]
[21.22876167 368.07772827]
[22.04750252 353.03964233]
[26.08027840 338.52926636]
[33.13847351 325.22528076]
[42.89195633 313.74993896]
[54.88454437 304.63995361]
[68.55532074 298.32141113]
[83.26487732 295.08984375]
[83.26487732 280.08984375]
[83.26487732 265.08984375]
[83.26487732 250.08985901]
[83.26487732 235.08985901]
[83.26487732 220.08985901]
[83.26487732 205.08985901]
[83.26487732 190.08985901]
[83.26487732 175.08985901]
[83.26487732 160.08985901]
[83.26487732 145.08985901]
[83.26487732 130.08985901]
[80.19295502 144.77192688]
[68.06873322 153.60388184]
[53.15197754 152.02574158]
[43.14424896 140.85232544]
[43.21255112 125.85247803]
[53.32162476 114.77066040]
[68.25410461 113.32898712]
[53.34485626 111.68148804]
[38.43560791 110.03398132]
[23.52635574 108.38647461]
[8.61710739 106.73896790]
[-6.29214287 105.09146118]
[-15.92771053 117.13967133]
[-30.55470085 122.04422760]
[-45.50569534 118.24010468]
[-56.00988388 106.94118500]
[-58.71541977 91.75291443]
[-52.75897598 77.52181244]
[-40.04122925 68.78897095]
[-24.62037277 68.34101105]
[-11.41714001 76.32086945]
[-4.64463615 90.18221283]
[10.26461315 91.82971954]
[25.17386246 93.47721863]
[40.08311081 95.12472534]
[54.99236298 96.77223206]
[69.90161133 98.41973877]
[77.94165039 84.05906677]
[91.17763519 77.36755371]
[104.27913666 79.06602478]
[112.25054169 66.35945892]
[120.22194672 53.65289688]
[108.25054932 44.59888840]
[97.11382294 34.53594971]
[86.89653015 23.54066277]
[77.67642975 11.69671631]
[69.52369690 -0.90575272]
[62.50036621 -14.17082882]
[56.65990448 -27.99755478]
[52.04675674 -42.28070068]
[48.69603348 -56.91156006]
[46.63323212 -71.77877808]
[45.87405777 -86.76921082]
[46.42428970 -101.76876068]
[48.27973175 -116.66328430]
[51.42626953 -131.33940125]
[55.83995438 -145.68544006]
[61.48719025 -159.59220886]
[68.32500458 -172.95385742]
[76.30135345 -185.66870117]
[85.35552979 -197.63996887]
[95.41862488 -208.77655029]
[106.41405487 -218.99368286]
[118.25813293 -228.21362305]
[130.86071777 -236.36618042]
[144.12588501 -243.38932800]
[157.95269775 -249.22959900]
[172.23590088 -253.84254456]
[186.86680603 -257.19305420]
[201.73405457 -259.25564575]
[216.72450256 -260.01461792]
[231.72404480 -259.46417236]
[246.61854553 -257.60852051]
[261.29461670 -254.46177673]
[275.64059448 -250.04789734]
[289.54727173 -244.40046692]
[302.90884399 -237.56245422]
[315.62356567 -229.58593750]
[327.59469604 -220.53158569]
[338.73114014 -210.46833801]
[348.94812012 -199.47276306]
[358.16790771 -187.62855530]
[366.32028198 -175.02586365]
[373.34323120 -161.76058960]
[379.18331909 -147.93370056]
[383.79605103 -133.65042114]
[387.14636230 -119.01947021]
[389.20877075 -104.15219116]
[389.96749878 -89.16174316]
[389.41687012 -74.16220093]
[387.56100464 -59.26773453]
[384.41406250 -44.59169769]
[379.99996948 -30.24578476]
[374.35232544 -16.33917999]
[367.51416016 -2.97772312]
[359.53744507 9.73689651]
[350.48294067 21.70791054]
[340.41952515 32.84420776]
[329.42379761 43.06103897]
[317.57946777 52.28064346]
[304.97665405 60.43284988]
[291.71127319 67.45561981]
[277.88430786 73.29550171]
[263.60098267 77.90805054]
[248.96998596 81.25815582]
[234.10267639 83.32032776]
[219.11221313 84.07887268]
[204.11267090 83.52801514]
[189.21823120 81.67194366]
[174.54225159 78.52478790]
[160.19639587 74.11049652]
[146.28987122 68.46267700]
[132.92851257 61.62430191]
[124.95710754 74.33086395]
[116.98570251 87.03742981]
[122.74398804 112.08081055]
[98.26487732 130.08985901]
[98.26487732 145.08985901]
[98.26487732 160.08985901]
[98.26487732 175.08985901]
[98.26487732 190.08985901]
[98.26487732 205.08985901]
[98.26487732 220.08985901]
[98.26487732 235.08985901]
[98.26487732 250.08985901]
[98.26487732 265.08984375]
[98.26487732 280.08984375]
[98.26487732 295.08984375]
[112.97443390 298.32141113]
[126.64521027 304.63995361]
[138.63780212 313.74993896]
[148.39128113 325.22528076]
[155.44947815 338.52926636]
[159.48225403 353.03964233]
[160.30099487 368.07772827]
[157.86740112 382.94015503]
[152.29531860 396.93179321]
[143.84532166 409.39822388]
[132.91267395 419.75634766]
[120.00868988 427.52172852]
[105.73691559 432.33117676]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 132]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[55 130]
[56 129]
[57 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
