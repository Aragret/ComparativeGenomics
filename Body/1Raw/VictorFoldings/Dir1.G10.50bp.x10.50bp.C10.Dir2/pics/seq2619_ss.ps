%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCAACAAGGGGGGGGGGGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAxxxxxxxxxxCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCAUAUAUCCCCCCCCCCCCAAACAACAA\
) } def
/len { sequence length } bind def

/coor [
[90.21437073 391.13482666]
[76.36843109 385.11880493]
[64.65976715 375.58938599]
[55.95724487 363.25372314]
[50.90664291 349.02719116]
[49.88275146 333.96551514]
[52.96154785 319.18634033]
[59.91456985 305.78643799]
[70.22585297 294.76010132]
[83.13023376 286.92559814]
[97.67012024 282.86425781]
[97.67012024 267.86425781]
[97.67012024 252.86427307]
[97.67012024 237.86427307]
[97.67012024 222.86427307]
[97.67012024 207.86427307]
[97.67012024 192.86427307]
[97.67012024 177.86427307]
[97.67012024 162.86427307]
[97.67012024 147.86427307]
[97.67012024 132.86427307]
[76.08918762 119.23155212]
[71.87593842 95.88452911]
[85.16670227 78.44952393]
[80.56114197 64.17406464]
[75.95557404 49.89860153]
[71.35001373 35.62314224]
[66.74444580 21.34768295]
[67.27947235 36.33813858]
[59.29911041 49.03907394]
[45.56114578 55.06139755]
[30.81304741 52.32395935]
[20.15135002 41.77274323]
[17.26043892 27.05395699]
[23.13933945 13.25400925]
[35.75646210 5.14178085]
[50.75201035 5.52074671]
[36.42941284 1.06393111]
[22.10681343 -3.39288473]
[7.78421688 -7.84970045]
[-3.96957016 2.14289856]
[-19.26291466 4.17198038]
[-33.21576309 -2.40992737]
[-41.37581635 -15.50256157]
[-41.13922882 -30.92811203]
[-32.58149719 -43.76433945]
[-18.43335724 -49.91524887]
[-3.20943356 -47.41811371]
[8.23237610 -37.06975555]
[12.24103260 -22.17229843]
[26.56362915 -17.71548271]
[40.88622665 -13.25866604]
[55.20882416 -8.80185032]
[61.79311752 -12.39310551]
[62.15686035 -27.38869476]
[74.96170044 -19.57561302]
[81.54598999 -23.16686821]
[85.55372620 -37.62155533]
[89.56147003 -52.07624435]
[93.56921387 -66.53093719]
[92.27896881 -70.83171844]
[92.44814301 -74.89895630]
[93.81510162 -78.29208374]
[95.99945831 -80.70508575]
[98.55794525 -81.99407196]
[103.75335693 -96.06558990]
[108.94877625 -110.13710785]
[114.14418793 -124.20862579]
[101.26828003 -131.99369812]
[90.09856415 -142.07507324]
[81.03882599 -154.08828735]
[74.41656494 -167.59910583]
[70.47118378 -182.11911011]
[69.34529114 -197.12341309]
[71.07959747 -212.06959534]
[75.61140442 -226.41740417]
[82.77688599 -239.64813232]
[92.31702423 -251.28352356]
[103.88694000 -260.90295410]
[117.06839752 -268.15869141]
[131.38488770 -272.78845215]
[146.31887817 -274.62487793]
[161.33052063 -273.60153198]
[175.87713623 -269.75549316]
[189.43290710 -263.22573853]
[201.50776672 -254.24830627]
[211.66523743 -243.14775085]
[219.53813171 -230.32533264]
[224.84182739 -216.24459839]
[227.38462830 -201.41453552]
[227.07460022 -186.37126160]
[223.92295837 -171.65855408]
[218.04360962 -157.80828857]
[209.64910889 -145.32113647]
[199.04292297 -134.64849854]
[186.60842896 -126.17620087]
[172.79515076 -120.21048737]
[158.10241699 -116.96702576]
[143.06135559 -116.56306458]
[128.21571350 -119.01321411]
[123.02029419 -104.94169617]
[117.82488251 -90.87017059]
[112.62946320 -76.79865265]
[108.02389526 -62.52319336]
[104.01615906 -48.06850433]
[100.00841522 -33.61381531]
[96.00067902 -19.15912819]
[81.01990509 16.74211693]
[85.62547302 31.01757812]
[90.23104095 45.29303741]
[94.83660126 59.56850052]
[99.44216919 73.84396362]
[109.79935455 74.28492737]
[119.67225647 78.86189270]
[127.40589142 87.23511505]
[131.54956055 98.40594482]
[131.11604309 110.82960510]
[144.89842224 116.74956512]
[157.62629700 108.03148651]
[173.04766846 107.60140991]
[186.24163818 115.59658813]
[192.99804688 129.46577454]
[191.16096497 144.78337097]
[181.31660461 156.66157532]
[166.60624695 161.31011963]
[151.72392273 157.24565125]
[141.41851807 145.76512146]
[138.97846985 130.53195190]
[125.19608307 124.61198425]
[112.67012024 132.86427307]
[112.67012024 147.86427307]
[112.67012024 162.86427307]
[112.67012024 177.86427307]
[112.67012024 192.86427307]
[112.67012024 207.86427307]
[112.67012024 222.86427307]
[112.67012024 237.86427307]
[112.67012024 252.86427307]
[112.67012024 267.86425781]
[112.67012024 282.86425781]
[127.21000671 286.92559814]
[140.11439514 294.76010132]
[150.42567444 305.78643799]
[157.37869263 319.18634033]
[160.45748901 333.96551514]
[159.43360901 349.02719116]
[154.38299561 363.25372314]
[145.68048096 375.58938599]
[133.97181702 385.11880493]
[120.12587738 391.13482666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 112]
[25 111]
[26 110]
[27 109]
[28 108]
[37 53]
[38 52]
[39 51]
[40 50]
[57 107]
[58 106]
[59 105]
[60 104]
[65 103]
[66 102]
[67 101]
[68 100]
[117 129]
[118 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
