%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACCUAUUCGGGGGGGGGGCCCCGAGCAAUCUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCxxxxxxxxxxAGAAAAAGUCUUUAACUCCACCAUUAGCACCCAAAGCUAAGAUUCUAAUUCCCCCCCCCCUAAACUAUUC\
) } def
/len { sequence length } bind def

/coor [
[61.03738785 528.72558594]
[47.19144821 522.70953369]
[35.48278427 513.18017578]
[26.78026199 500.84448242]
[21.72966003 486.61795044]
[20.70576859 471.55627441]
[23.78456688 456.77709961]
[30.73758888 443.37719727]
[41.04887390 432.35086060]
[53.95325470 424.51635742]
[68.49314117 420.45504761]
[68.49314117 405.45504761]
[68.49314117 390.45504761]
[68.49314117 375.45504761]
[68.49314117 360.45504761]
[68.49314117 345.45504761]
[68.49314117 330.45504761]
[68.49314117 315.45504761]
[68.49314117 300.45504761]
[68.49314117 285.45504761]
[62.36195755 281.13546753]
[53.72265244 293.39770508]
[41.46055222 284.75820923]
[50.09959030 272.49636841]
[43.96840668 268.17678833]
[29.84360123 273.22555542]
[15.71879864 278.27432251]
[5.52346230 291.11904907]
[-10.65614700 288.44467163]
[-16.17583275 273.00234985]
[-5.35741758 260.67782593]
[10.67004299 264.14950562]
[24.79484558 259.10073853]
[38.91964722 254.05200195]
[49.24685287 243.17317200]
[53.55443954 228.80499268]
[57.86202240 214.43679810]
[62.16960907 200.06861877]
[66.47719574 185.70043945]
[62.72071457 171.28730774]
[74.09513855 160.29035950]
[78.40272522 145.92216492]
[82.71031189 131.55398560]
[77.49805450 128.07579041]
[72.96829987 123.74604034]
[69.25842285 118.69606781]
[66.48095703 113.07903290]
[64.72013092 107.06530762]
[64.02936554 100.83728027]
[64.42960358 94.58386230]
[65.90870667 88.49472046]
[68.42182159 82.75453949]
[71.89270782 77.53741455]
[62.38434982 65.93607330]
[52.87599182 54.33473587]
[43.36763382 42.73339462]
[27.60897255 39.72603226]
[20.26265335 25.46380615]
[26.96414375 10.88746929]
[42.57263184 7.17874193]
[55.11462021 17.18264198]
[54.96897507 33.22503281]
[64.47733307 44.82637405]
[73.98568726 56.42771530]
[83.49404907 68.02906036]
[94.68569183 59.92940903]
[109.47827911 56.15014648]
[112.27060699 41.41234207]
[101.41638184 51.76539612]
[87.18254089 56.49802780]
[72.29002380 54.70554352]
[59.58568573 46.73059464]
[51.49808502 34.09767532]
[49.57324219 19.22168732]
[54.17911530 4.94632673]
[64.43524170 -5.99953222]
[78.38106537 -11.52348042]
[93.35070801 -10.56955910]
[106.48255920 -3.32012200]
[115.26635742 8.83903122]
[118.02302551 23.58207512]
[124.37015533 9.99112415]
[130.71728516 -3.59982657]
[126.61244202 -19.10885048]
[136.29383850 -31.90143013]
[152.33473206 -32.16419220]
[162.42993164 -19.69557190]
[158.83526611 -4.06042433]
[144.30824280 2.74730277]
[137.96110535 16.33825302]
[131.61398315 29.92920494]
[127.00841522 44.20466614]
[124.21608734 58.94247055]
[129.14895630 64.59197235]
[138.66513062 52.99704361]
[148.18130493 41.40211487]
[156.35893250 28.82728195]
[171.32157898 27.76948929]
[181.18699646 39.06875992]
[178.12077332 53.75202560]
[164.55879211 60.15890503]
[151.78672791 68.02494049]
[139.01467896 75.89097595]
[143.94754028 81.54048157]
[158.92724609 80.76063538]
[173.90696716 79.98078918]
[188.88667297 79.20094299]
[203.86639404 78.42109680]
[213.13656616 65.82752991]
[228.34503174 62.18931198]
[242.31080627 69.22428894]
[248.43969727 83.61076355]
[243.83781433 98.55589294]
[230.67802429 107.00302887]
[215.17399597 104.96369934]
[204.64624023 93.40081787]
[189.66651917 94.18065643]
[174.68681335 94.96050262]
[159.70709229 95.74034882]
[144.72737122 96.52019501]
[128.53018188 128.63429260]
[97.07849121 135.86157227]
[92.77090454 150.22975159]
[88.46332550 164.59794617]
[91.91168976 180.03877258]
[80.84537506 190.00802612]
[76.53778839 204.37620544]
[72.23020935 218.74438477]
[67.92262268 233.11257935]
[63.61503601 247.48075867]
[83.49314117 285.45504761]
[83.49314117 300.45504761]
[83.49314117 315.45504761]
[83.49314117 330.45504761]
[83.49314117 345.45504761]
[83.49314117 360.45504761]
[83.49314117 375.45504761]
[83.49314117 390.45504761]
[83.49314117 405.45504761]
[83.49314117 420.45504761]
[98.03302765 424.51635742]
[110.93740845 432.35086060]
[121.24869537 443.37719727]
[128.20172119 456.77709961]
[131.28051758 471.55627441]
[130.25662231 486.61795044]
[125.20602417 500.84448242]
[116.50349426 513.18017578]
[104.79483795 522.70953369]
[90.94889832 528.72558594]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 34]
[26 33]
[27 32]
[35 130]
[36 129]
[37 128]
[38 127]
[39 126]
[41 124]
[42 123]
[43 122]
[53 65]
[54 64]
[55 63]
[56 62]
[67 93]
[68 92]
[81 91]
[82 90]
[83 89]
[104 120]
[105 119]
[106 118]
[107 117]
[108 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
