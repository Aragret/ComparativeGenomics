%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCAUCCGCUUCCGGGGGGGGGGACCCCCUAGCAGAAAAUAGCCCACUAAUCCAAACUCUAACACUAUGCUUAxxxxxxxxxxACCGCCUUUUCAUCAAUCGCCCACAUCACUCGAGACGUAAAUUAUGGCUGCCCCCCCCCCAAUCAUCCGCUACC\
) } def
/len { sequence length } bind def

/coor [
[84.67797089 391.71969604]
[70.31571960 387.21298218]
[57.15482712 379.90710449]
[45.73423004 370.10122681]
[36.52159119 358.19692993]
[29.89416313 344.68170166]
[26.12333488 330.10891724]
[25.36351776 315.07537842]
[27.64582825 300.19665527]
[32.87680435 286.08206177]
[40.84224319 273.30957031]
[51.21596527 262.40219116]
[63.57317352 253.80659485]
[77.40784454 247.87475586]
[92.15345764 244.84957886]
[92.15345764 229.84957886]
[92.15345764 214.84957886]
[92.15345764 199.84957886]
[92.15345764 184.84957886]
[92.15345764 169.84957886]
[92.15345764 154.84957886]
[92.15345764 139.84957886]
[92.15345764 124.84957886]
[92.15345764 109.84957886]
[84.23835754 122.59128571]
[72.49928284 131.92906189]
[58.30368423 136.77519226]
[43.30515671 136.56515503]
[29.25082588 131.32342529]
[17.77783775 121.66057587]
[10.22263908 108.70222473]
[7.46531153 93.95782471]
[9.82704735 79.14492035]
[17.03273392 65.98900604]
[28.24300766 56.02257538]
[42.15201950 50.40658188]
[57.13955688 49.79521179]
[71.45977020 54.25968552]
[83.44454193 63.27994919]
[91.69781494 75.80526733]
[95.25794983 90.37314606]
[99.92137909 76.11648560]
[104.58481598 61.85982132]
[109.24824524 47.60316086]
[113.91168213 33.34650040]
[100.02713013 27.65250015]
[86.59525299 20.96018028]
[73.68772125 13.30524254]
[61.37340546 4.72853374]
[49.71799850 -4.72418737]
[38.78369522 -15.00248528]
[28.62883377 -26.05152130]
[19.30759430 -37.81233978]
[10.86971092 -50.22219849]
[3.36020327 -63.21487427]
[-3.18086123 -76.72105408]
[-8.71858311 -90.66867065]
[-13.22341442 -104.98331451]
[-16.67132187 -119.58860016]
[-19.04390907 -134.40660095]
[-20.32851601 -149.35826111]
[-20.51828766 -164.36381531]
[-19.61221313 -179.34317017]
[-17.61512756 -194.21644592]
[-14.53768444 -208.90425110]
[-10.39630413 -223.32823181]
[-5.21308374 -237.41143799]
[0.98432267 -251.07872009]
[8.16284847 -264.25717163]
[16.28419304 -276.87643433]
[25.30502510 -288.86923218]
[35.17721558 -300.17153931]
[45.84808731 -310.72308350]
[57.26070786 -320.46752930]
[69.35418701 -329.35293579]
[82.06400299 -337.33184814]
[95.32233429 -344.36169434]
[109.05844116 -350.40502930]
[123.19905090 -355.42953491]
[137.66870117 -359.40844727]
[152.39018250 -362.32049561]
[167.28497314 -364.15020752]
[182.27357483 -364.88775635]
[197.27604675 -364.52923584]
[212.21231079 -363.07656860]
[227.00270081 -360.53750610]
[241.56828308 -356.92553711]
[255.83135986 -352.26000977]
[269.71582031 -346.56579590]
[283.14758301 -339.87326050]
[296.05499268 -332.21810913]
[308.36917114 -323.64120483]
[320.02441406 -314.18829346]
[330.95855713 -303.90979004]
[341.11322021 -292.86059570]
[350.43426514 -281.09963989]
[358.87194824 -268.68963623]
[366.38125610 -255.69682312]
[372.92208862 -242.19053650]
[378.45959473 -228.24282837]
[382.96417236 -213.92811584]
[386.41183472 -199.32278442]
[388.78417969 -184.50473022]
[390.06854248 -169.55305481]
[390.25808716 -154.54750061]
[389.35174561 -139.56814575]
[387.35443115 -124.69492340]
[384.27673340 -110.00716400]
[380.13513184 -95.58324432]
[374.95166016 -81.50012207]
[368.75402832 -67.83294678]
[361.57528687 -54.65462875]
[353.45373535 -42.03548431]
[344.43270874 -30.04284096]
[334.56033325 -18.74069023]
[323.88931274 -8.18933010]
[312.47653198 1.55494022]
[300.38290405 10.44013214]
[287.67294312 18.41883659]
[274.41448975 25.44848633]
[260.67828369 31.49157333]
[246.53759766 36.51585388]
[232.06788635 40.49452209]
[217.34634399 43.40634918]
[202.45153809 45.23579788]
[187.46292114 45.97311020]
[172.46046448 45.61435318]
[157.52421570 44.16143417]
[142.73387146 41.62211227]
[128.16835022 38.00992966]
[123.50491333 52.26659393]
[118.84147644 66.52325439]
[114.17804718 80.77991486]
[109.51461029 95.03657532]
[107.15345764 109.84957886]
[107.15345764 124.84957886]
[107.15345764 139.84957886]
[107.15345764 154.84957886]
[107.15345764 169.84957886]
[107.15345764 184.84957886]
[107.15345764 199.84957886]
[107.15345764 214.84957886]
[107.15345764 229.84957886]
[107.15345764 244.84957886]
[121.89907837 247.87475586]
[135.73374939 253.80659485]
[148.09095764 262.40219116]
[158.46467590 273.30957031]
[166.43011475 286.08206177]
[171.66108704 300.19665527]
[173.94340515 315.07537842]
[173.18357849 330.10891724]
[169.41275024 344.68170166]
[162.78532410 358.19692993]
[153.57269287 370.10122681]
[142.15208435 379.90710449]
[128.99119568 387.21298218]
[114.62894440 391.71969604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[41 134]
[42 133]
[43 132]
[44 131]
[45 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
