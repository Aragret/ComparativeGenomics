%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAAAAAAUUGGGGGGGGGGUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCxxxxxxxxxxACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGCCCCCCCCCCAACGAAAAAUU\
) } def
/len { sequence length } bind def

/coor [
[42.25084686 285.99945068]
[36.50960922 272.14166260]
[32.93523407 257.57376099]
[31.61033058 242.63238525]
[32.56551361 227.66284180]
[35.77870941 213.01103210]
[41.17566681 199.01557922]
[48.63165665 185.99987793]
[57.97438812 174.26475525]
[68.98085022 164.08699036]
[77.30461121 151.60841370]
[85.62837982 139.12983704]
[72.34104156 146.09017944]
[59.05369949 153.05053711]
[45.83851624 160.14694214]
[32.69688416 167.37864685]
[19.55525208 174.61035156]
[6.41362047 181.84205627]
[-6.72801113 189.07376099]
[-19.86964226 196.30545044]
[-33.01127243 203.53715515]
[-46.15290451 210.76885986]
[-49.00625992 226.14392090]
[-61.10775757 236.04785156]
[-76.74344635 235.80430603]
[-88.53062439 225.52830505]
[-90.90375519 210.07183838]
[-82.74231720 196.73298645]
[-67.89988708 191.80995178]
[-53.38460922 197.62722778]
[-40.24297714 190.39552307]
[-27.10134506 183.16383362]
[-13.95971394 175.93212891]
[-0.81808221 168.70042419]
[12.32354927 161.46871948]
[25.46518135 154.23701477]
[38.60681152 147.00531006]
[42.97766113 140.98802185]
[52.09334183 139.76319885]
[65.38068390 132.80284119]
[78.66802216 125.84249115]
[79.05285645 118.35237122]
[65.69470215 125.17584229]
[53.10638428 117.01899719]
[53.87636948 102.03877258]
[67.23466492 95.21558380]
[79.82251740 103.37212372]
[80.20734406 95.88200378]
[67.70330811 87.59653473]
[55.19927216 79.31105804]
[38.80683136 78.84211731]
[31.25588417 64.28481293]
[40.31420135 50.61444092]
[56.66335678 51.89391708]
[63.48474884 66.80702209]
[75.98878479 75.09249878]
[88.49282074 83.37796783]
[81.49176025 70.11203003]
[74.49070740 56.84608459]
[67.48965454 43.58014297]
[60.48859787 30.31420135]
[49.05826187 20.60094070]
[40.03074265 8.62162876]
[33.84371567 -5.04294872]
[30.79713631 -19.73030281]
[31.03871346 -34.72835541]
[34.55673599 -49.30997467]
[41.18063736 -62.76819992]
[50.58927917 -74.45055389]
[62.32651138 -83.79064941]
[75.82328796 -90.33566284]
[90.42524719 -93.76826477]
[105.42445374 -93.92204285]
[120.09372711 -90.78953552]
[133.72184753 -84.52262878]
[145.64811707 -75.42514038]
[155.29429626 -63.93814087]
[162.19273376 -50.61854553]
[166.00897217 -36.11212540]
[166.55799866 -21.12217522]
[163.81320190 -6.37544680]
[157.90762329 7.41310835]
[149.12760925 19.57498932]
[137.90045166 29.51941490]
[131.17324829 42.92630386]
[124.44604492 56.33319473]
[117.71884155 69.74008179]
[110.99163055 83.14697266]
[123.32291412 74.60651398]
[135.65420532 66.06605530]
[147.98548889 57.52559662]
[160.31677246 48.98513794]
[172.64805603 40.44467926]
[169.77755737 25.48873901]
[173.24468994 10.65974998]
[182.44873047 -1.47307563]
[195.79504395 -8.80765247]
[210.97126770 -10.07322121]
[225.34806824 -5.05051279]
[236.43455505 5.39025640]
[242.30993652 19.44016075]
[241.95626831 34.66497040]
[235.43481445 48.42689133]
[223.87545776 58.34159470]
[209.28092957 62.69128799]
[194.17984009 60.72237015]
[181.18850708 52.77596283]
[168.85722351 61.31642151]
[156.52593994 69.85688019]
[144.19465637 78.39733887]
[131.86337280 86.93779755]
[119.53208923 95.47825623]
[122.74108887 110.13098145]
[137.51319885 112.73570251]
[152.28532410 115.34043121]
[167.05743408 117.94515228]
[181.82955933 120.54987335]
[198.47799683 117.34582520]
[206.16557312 132.45666504]
[193.77339172 144.02691650]
[179.22483826 135.32199097]
[164.45271301 132.71726990]
[149.68060303 130.11254883]
[134.90847778 127.50782013]
[120.13636780 124.90309906]
[131.85134888 134.27108765]
[143.56632996 143.63908386]
[158.23307800 146.78338623]
[172.25373840 152.11450195]
[185.30432129 159.50924683]
[197.08323669 168.79670715]
[207.31828308 179.76229858]
[215.77291870 192.15257263]
[222.25178528 205.68122864]
[226.60514832 220.03559875]
[228.73239136 234.88400269]
[228.58439636 249.88327026]
[226.16453552 264.68679810]
[221.52876282 278.95248413]
[214.78419495 292.35064697]
[206.08670044 304.57165527]
[195.63725281 315.33312988]
[183.67736816 324.38635254]
[170.48339844 331.52212524]
[156.36024475 336.57553101]
[141.63430786 339.42977905]
[126.64588928 340.01895142]
[111.74134827 338.32937622]
[97.26512146 334.40014648]
[83.55174255 328.32205200]
[70.91812897 320.23553467]
[59.65621948 310.32748413]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 41]
[13 40]
[14 39]
[15 37]
[16 36]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[48 57]
[49 56]
[50 55]
[88 112]
[89 111]
[90 110]
[91 109]
[92 108]
[93 107]
[113 125]
[114 124]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
