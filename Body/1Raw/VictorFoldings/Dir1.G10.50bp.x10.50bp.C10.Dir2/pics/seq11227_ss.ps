%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCUACCCUGGGGGGGGGGAGCAUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAAxxxxxxxxxxUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGACCUCCUCCCCCCCCCCCAUUCUAACCU\
) } def
/len { sequence length } bind def

/coor [
[87.36486816 516.53173828]
[74.14466858 509.25927734]
[63.25786591 498.81225586]
[55.44673538 485.90301514]
[51.24385452 471.41168213]
[50.93578339 456.32635498]
[54.54352570 441.67553711]
[61.82109833 428.45812988]
[72.27230835 417.57537842]
[85.18457031 409.76922607]
[99.67750549 405.57192993]
[99.36544800 390.57519531]
[99.05339050 375.57843018]
[98.74133301 360.58169556]
[98.42927551 345.58493042]
[98.11722565 330.58816528]
[97.80516815 315.59143066]
[97.49311066 300.59466553]
[97.18105316 285.59790039]
[96.86899567 270.60116577]
[96.55693817 255.60440063]
[96.24488831 240.60765076]
[82.97470093 237.19686890]
[71.03836060 230.44366455]
[61.26181030 220.80767822]
[54.32353592 208.94827271]
[50.70749283 195.67947388]
[50.66932678 181.91401672]
[54.21833801 168.60063171]
[61.11635208 156.65859985]
[70.89373016 146.91433716]
[82.88129425 140.04411316]
[96.25615692 136.52725220]
[96.56821442 121.53050232]
[88.47856903 134.16210938]
[73.49589539 134.88298035]
[64.23091888 123.08636475]
[68.48183441 108.70131683]
[82.67079163 103.83554077]
[68.02729034 100.58471680]
[53.77647400 107.95314789]
[39.18976212 101.27426910]
[35.45682907 85.67155457]
[45.44126511 73.11406708]
[61.48386383 73.23483276]
[71.27811432 85.94121552]
[85.92161560 89.19203949]
[98.78002167 81.46795654]
[102.78775787 67.01326752]
[106.79550171 52.55857849]
[110.80323792 38.10388947]
[114.81098175 23.64920235]
[102.83889771 12.67889786]
[97.32115936 -2.50880313]
[99.43885040 -18.44846535]
[108.63964081 -31.53896713]
[122.77938080 -38.85705948]
[122.46733093 -53.85381317]
[122.15527344 -68.85056305]
[121.84321594 -83.84732056]
[120.75190735 -98.80757141]
[118.88429260 -113.69084930]
[117.01667786 -128.57412720]
[102.15561676 -131.40327454]
[88.89713287 -138.68803406]
[78.54016876 -149.71475220]
[72.09938049 -163.40312195]
[70.20578003 -178.41209412]
[73.04487610 -193.27125549]
[80.33853149 -206.52485657]
[91.37217712 -216.87443542]
[105.06485748 -223.30604553]
[120.07510376 -225.18959045]
[134.93235779 -222.34054565]
[148.18106079 -215.03800964]
[158.52325439 -203.99742126]
[164.94567871 -190.30044556]
[166.81916809 -175.28894043]
[163.96015930 -160.43359375]
[156.64875793 -147.18978882]
[145.60124207 -136.85499573]
[131.89996338 -130.44174194]
[133.76757812 -115.55846405]
[135.63517761 -100.67517853]
[147.00611877 -110.45791626]
[161.78240967 -107.87697601]
[169.16378784 -94.81882477]
[163.75505066 -80.82791138]
[149.50956726 -76.13046265]
[136.83996582 -84.15937805]
[137.15202332 -69.16262054]
[137.46408081 -54.16586685]
[137.77613831 -39.16911316]
[147.83926392 -35.28672409]
[156.13830566 -28.39723396]
[169.38088989 -35.44236755]
[182.62347412 -42.48750305]
[195.86607361 -49.53263855]
[200.24302673 -64.71874237]
[214.11640930 -72.28873444]
[229.25538635 -67.75147247]
[236.67826843 -53.79882431]
[231.98120117 -38.70866013]
[217.95086670 -31.43370247]
[202.91119385 -36.29005432]
[189.66860962 -29.24491882]
[176.42602539 -22.19978333]
[163.18344116 -15.15464783]
[163.80604553 0.44235232]
[157.24723816 14.71381378]
[144.85350037 24.51917839]
[129.26567078 27.65694237]
[125.25792694 42.11162949]
[121.25019073 56.56631851]
[117.24244690 71.02101135]
[113.23471069 85.47569275]
[122.00662994 102.78794098]
[111.56497192 121.84255981]
[111.25291443 136.83930969]
[126.79856873 142.05076599]
[139.97369385 151.77880859]
[149.50846863 165.07164001]
[154.48828125 180.63461304]
[154.44146729 196.95628357]
[149.38398743 212.45516968]
[139.81672668 225.63305664]
[126.67594910 235.21975708]
[111.24163818 240.29559326]
[111.55369568 255.29235840]
[111.86575317 270.28909302]
[112.17781067 285.28585815]
[112.48986053 300.28262329]
[112.80191803 315.27935791]
[113.11397552 330.27612305]
[113.42603302 345.27288818]
[113.73809052 360.26962280]
[114.05014801 375.26638794]
[114.36219788 390.26312256]
[114.67425537 405.25988770]
[129.32925415 408.85064697]
[142.55505371 416.11291504]
[153.44992065 426.55151367]
[161.27102661 439.45471191]
[165.48509216 453.94277954]
[165.80480957 469.02789307]
[162.20838928 483.68148804]
[154.94102478 496.90447998]
[144.49822998 507.79531860]
[131.59199524 515.61145020]
[117.10230255 519.81994629]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[33 119]
[34 118]
[39 47]
[40 46]
[48 116]
[49 115]
[50 114]
[51 113]
[52 112]
[57 93]
[58 92]
[59 91]
[60 90]
[61 84]
[62 83]
[63 82]
[95 108]
[96 107]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
