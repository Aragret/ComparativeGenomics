%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUCCUAGGGGGGGGGGGGCACAGCUCUAAGCCUCCUUAUUCGAGCCGAGCUGGGCCAGCCAGGCAACCxxxxxxxxxxACUCGCCACACUCCACGGAAGCAAUAUGAAAUGAUCUGCUGCAGUGCUCUCCCCCCCCCCGAGCCCUAGG\
) } def
/len { sequence length } bind def

/coor [
[49.41755676 345.59909058]
[37.92139435 335.78430176]
[29.83033371 323.01614380]
[25.86382866 308.42990112]
[26.37457466 293.32260132]
[31.31715775 279.03756714]
[40.25208664 266.84503174]
[52.38487625 257.82910156]
[66.63668060 252.79148865]
[66.01270294 237.80447388]
[65.38872528 222.81745911]
[64.76474762 207.83044434]
[64.14076996 192.84342957]
[63.51679611 177.85641479]
[62.89281845 162.86940002]
[62.26884079 147.88238525]
[61.64486313 132.89537048]
[61.02088547 117.90834808]
[50.35926056 107.35706329]
[35.36656189 106.88901520]
[20.37386703 106.42097473]
[6.33898878 113.72390747]
[-6.14066076 105.59324646]
[-21.13335609 105.12520599]
[-36.12605286 104.65715790]
[-51.11874771 104.18911743]
[-66.11144257 103.72107697]
[-81.10414124 103.25303650]
[-96.08385468 104.03288269]
[-110.94689941 106.05521393]
[-125.80995178 108.07754517]
[-140.67298889 110.09988403]
[-153.30160522 120.56172180]
[-168.57991028 114.60304260]
[-170.79087830 98.35362244]
[-157.66006470 88.52947235]
[-142.69532776 95.23683929]
[-127.83228302 93.21450043]
[-112.96923828 91.19216919]
[-98.10619354 89.16983032]
[-110.32199860 80.46500397]
[-115.24013519 66.29418945]
[-111.04344940 51.89322662]
[-99.28252411 42.58298111]
[-84.30279541 41.80340195]
[-71.63896942 49.84252930]
[-65.97008514 63.73006821]
[-69.39067841 78.33484650]
[-80.63610077 88.26033783]
[-65.64340210 88.72837830]
[-50.65070724 89.19641876]
[-35.65801239 89.66446686]
[-20.66531372 90.13250732]
[-5.67261839 90.60054779]
[7.28988171 83.26414490]
[20.84190941 91.42827606]
[35.83460617 91.89632416]
[50.82730103 92.36436462]
[61.59811020 81.92455292]
[61.59811020 66.92455292]
[49.21313095 57.76384354]
[44.65038300 43.23681259]
[49.45969009 28.97727013]
[61.59811020 20.38676262]
[61.59811020 5.38676310]
[61.59811020 -9.61323643]
[47.20493698 -14.27067661]
[34.95663452 -23.14954185]
[26.05316353 -35.37997437]
[21.36680031 -49.76375580]
[21.35666275 -64.89170837]
[26.02374649 -79.28176117]
[34.91081619 -91.52410889]
[47.14720917 -100.41938019]
[61.53413010 -105.09610748]
[76.66208649 -105.09610748]
[91.04901123 -100.41938019]
[103.28540039 -91.52410889]
[112.17247009 -79.28176117]
[116.83955383 -64.89170837]
[116.82942200 -49.76375580]
[112.14305878 -35.37997437]
[103.23958588 -23.14954185]
[90.99127960 -14.27067661]
[76.59810638 -9.61323643]
[76.59810638 5.38676310]
[76.59810638 20.38676262]
[88.73652649 28.97727013]
[93.54583740 43.23681259]
[88.98308563 57.76384354]
[76.59810638 66.92455292]
[76.59810638 81.92455292]
[102.66513824 73.49864960]
[121.26586914 89.53736115]
[136.12892151 87.51502991]
[150.99195862 85.49269104]
[163.62297058 75.96546173]
[177.27720642 81.91619873]
[189.90821838 72.38896942]
[203.56245422 78.33970642]
[218.42549133 76.31737518]
[233.28854370 74.29504395]
[248.15159607 72.27270508]
[251.59405518 69.38983154]
[255.39790344 67.94007874]
[259.05508423 67.85693359]
[262.13427734 68.91165161]
[264.32839966 70.75373840]
[279.30810547 69.97389221]
[291.07211304 59.06576157]
[306.91302490 61.60451508]
[314.67901611 75.64263153]
[308.41271973 90.41127777]
[292.92105103 94.58120728]
[280.08795166 84.95360565]
[265.10824585 85.73345184]
[250.17391968 87.13574982]
[235.31088257 89.15808868]
[220.44783020 91.18041992]
[205.58477783 93.20275879]
[194.01687622 102.58533478]
[179.29954529 96.77925110]
[167.73162842 106.16182709]
[153.01429749 100.35573578]
[138.15124512 102.37807465]
[123.28820038 104.40040588]
[119.75878906 115.11010742]
[111.37285614 123.43417358]
[99.61125946 127.21919250]
[86.87758636 125.18188477]
[76.00790405 117.28437042]
[76.63188171 132.27139282]
[77.25585938 147.25840759]
[77.87983704 162.24542236]
[78.50381470 177.23243713]
[79.12778473 192.21945190]
[79.75176239 207.20646667]
[80.37574005 222.19348145]
[80.99971771 237.18049622]
[81.62369537 252.16751099]
[96.24493408 256.00299072]
[109.08517456 263.97918701]
[119.00269318 275.38684082]
[125.11560822 289.21157837]
[126.88038635 304.22412109]
[124.14008331 319.08959961]
[117.13838196 332.48614502]
[106.49785614 343.22256470]
[93.16466522 350.34417725]
[78.32437897 353.21774292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 140]
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 58]
[20 57]
[21 56]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[28 49]
[29 40]
[30 39]
[31 38]
[32 37]
[59 92]
[60 91]
[64 87]
[65 86]
[66 85]
[94 126]
[95 125]
[96 124]
[98 122]
[100 120]
[101 119]
[102 118]
[103 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
