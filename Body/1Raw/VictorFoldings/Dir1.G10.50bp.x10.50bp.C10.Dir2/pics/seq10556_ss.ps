%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUCAUGCCCCCAUGGGGGGGGGGGUCUAACAACAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGxxxxxxxxxxCUUCCCUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAAAACCCCCCCCCCAACUCAUACCCCCAU\
) } def
/len { sequence length } bind def

/coor [
[54.69318390 486.87133789]
[39.96237564 483.81881714]
[26.04337692 478.11126709]
[13.41026306 469.94308472]
[2.49331450 459.59249878]
[-6.33564138 447.41201782]
[-12.77589321 433.81649780]
[-16.60808945 419.26901245]
[-17.70170784 404.26507568]
[-16.01949692 389.31567383]
[-11.61875534 374.92996216]
[-4.64936972 361.59796143]
[4.65128613 349.77374268]
[15.96643448 339.86001587]
[28.91068649 332.19442749]
[43.04316330 327.03811646]
[57.88252258 324.56665039]
[58.17519760 309.56948853]
[58.46787262 294.57235718]
[58.76055145 279.57522583]
[59.05322647 264.57806396]
[59.34590149 249.58091736]
[59.63858032 234.58378601]
[59.93125534 219.58663940]
[60.22393417 204.58949280]
[60.51660919 189.59234619]
[60.80928421 174.59519958]
[53.01172638 187.40917969]
[42.21119690 197.81823730]
[29.11820412 205.13763428]
[14.59405613 208.88584900]
[-0.40578276 208.81632996]
[-14.89455986 204.93362427]
[-27.91913986 197.49317932]
[-38.62271118 186.98445129]
[-46.30115128 174.09872437]
[-50.44932938 159.68371582]
[-50.79436874 144.68768311]
[-47.31356812 130.09713745]
[-40.23591232 116.87191010]
[-30.02699661 105.88200378]
[-17.35840797 97.85038757]
[-3.06354022 93.30541229]
[11.91722775 92.54607391]
[26.59839630 95.62231445]
[40.01417923 102.33177185]
[51.28202057 112.23307037]
[59.66068268 124.67485809]
[64.59897614 138.83865356]
[65.77222443 153.78897095]
[72.28048706 140.27442932]
[78.78874207 126.75989532]
[85.29699707 113.24536896]
[77.77853394 89.68015289]
[100.93573761 70.80258179]
[101.52098083 55.81399918]
[102.10622406 40.82542038]
[102.69146729 25.83684349]
[103.27670288 10.84826469]
[103.86194611 -4.14031410]
[89.08332062 -6.85565138]
[74.84158325 -11.64664841]
[61.42667389 -18.41576576]
[49.11170197 -27.02519417]
[38.14738846 -37.29965591]
[28.75694847 -49.02997208]
[21.13155937 -61.97733688]
[15.42646790 -75.87815094]
[11.75781918 -90.44941711]
[10.20030403 -105.39448547]
[10.78563118 -120.40908051]
[13.50188351 -135.18753052]
[18.29376221 -149.42897034]
[25.06370926 -162.84347534]
[33.67390060 -175.15791321]
[43.94903946 -186.12158203]
[55.67993927 -195.51130676]
[68.62777710 -203.13587952]
[82.52894592 -208.84011841]
[97.10043335 -212.50785828]
[112.04559326 -214.06445312]
[127.06015778 -213.47819519]
[141.83843994 -210.76103210]
[156.07958984 -205.96827698]
[169.49366760 -199.19749451]
[181.80757141 -190.58654785]
[192.77061462 -180.31072998]
[202.15959167 -168.57923889]
[209.78338623 -155.63093567]
[215.48675537 -141.72941589]
[219.15359497 -127.15769196]
[220.70925903 -112.21244049]
[220.12208557 -97.19791412]
[217.40400696 -82.41979218]
[212.61035156 -68.17894745]
[205.83874512 -54.76529312]
[197.22703552 -42.45191956]
[186.95054626 -31.48951340]
[175.21847534 -22.10125160]
[162.26969910 -14.47826767]
[148.36782837 -8.77575588]
[133.79588318 -5.10981321]
[118.85052490 -3.55507255]
[118.26528168 11.43350601]
[117.68004608 26.42208481]
[117.09480286 41.41066360]
[116.50955963 56.39924240]
[115.92431641 71.38781738]
[123.62382507 58.51468658]
[127.89790344 44.13650131]
[139.65245056 34.81821060]
[154.62658691 33.93758392]
[167.39233398 41.81384659]
[173.32228088 55.59193420]
[170.26687622 70.27745819]
[159.33367920 80.54707336]
[144.48680115 82.67832947]
[130.62849426 88.41829681]
[145.54219055 90.02503204]
[160.45590210 91.63176727]
[175.36959839 93.23849487]
[190.14131165 86.11609650]
[203.54118347 95.56995392]
[201.78457642 111.87474823]
[186.67854309 118.25750732]
[173.76286316 108.15219879]
[158.84916687 106.54546356]
[143.93545532 104.93872833]
[129.02175903 103.33199310]
[115.75009155 118.76773071]
[98.81153107 119.75362396]
[92.30327606 133.26815796]
[85.79501343 146.78268433]
[79.28675842 160.29722595]
[75.80642700 174.88787842]
[75.51375580 189.88502502]
[75.22107697 204.88217163]
[74.92839813 219.87931824]
[74.63572693 234.87644958]
[74.34304810 249.87359619]
[74.05036926 264.87075806]
[73.75769806 279.86788940]
[73.46501923 294.86502075]
[73.17234039 309.86218262]
[72.87966919 324.85931396]
[87.61129761 327.90786743]
[101.53183746 333.61166382]
[114.16715240 341.77642822]
[125.08688354 352.12408447]
[133.91912842 364.30218506]
[140.36303711 377.89596558]
[144.19915771 392.44241333]
[145.29682922 407.44607544]
[143.61863708 422.39593506]
[139.22177124 436.78280640]
[132.25598145 450.11669922]
[122.95851898 461.94342041]
[111.64604187 471.86019897]
[98.70385742 479.52926636]
[84.57276917 484.68939209]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 145]
[18 144]
[19 143]
[20 142]
[21 141]
[22 140]
[23 139]
[24 138]
[25 137]
[26 136]
[27 135]
[50 134]
[51 133]
[52 132]
[53 131]
[55 108]
[56 107]
[57 106]
[58 105]
[59 104]
[60 103]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
