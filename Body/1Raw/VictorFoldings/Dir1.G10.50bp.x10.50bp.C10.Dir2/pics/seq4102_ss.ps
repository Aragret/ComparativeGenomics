%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAUAAUAAGGGGGGGGGGACACCCUCACCACUACAAUCUUCCUAGGAACAACAUAUGACGCACUCUCCxxxxxxxxxxAACCGAAUUGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAACCCCCCCCCCAUUAUGAUAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 399.22860718]
[71.19830322 393.21255493]
[59.48964310 383.68313599]
[50.78712082 371.34747314]
[45.73651886 357.12097168]
[44.71262741 342.05926514]
[47.79142761 327.28012085]
[54.74444962 313.88018799]
[65.05573273 302.85385132]
[77.96011353 295.01934814]
[92.50000000 290.95803833]
[92.50000000 275.95803833]
[92.50000000 260.95803833]
[92.50000000 245.95803833]
[92.50000000 230.95803833]
[92.50000000 215.95803833]
[92.50000000 200.95803833]
[92.50000000 185.95803833]
[92.50000000 170.95803833]
[92.50000000 155.95803833]
[78.88330078 152.36064148]
[66.58065796 145.50494385]
[56.35764313 135.81753540]
[48.85041046 123.90128326]
[44.52613068 110.49768829]
[43.65388870 96.44084167]
[46.28796768 82.60547638]
[52.26445007 69.85254669]
[61.21143341 58.97563171]
[52.44522476 46.80379486]
[43.67901993 34.63195801]
[34.91281128 22.46012115]
[21.85195541 29.86696243]
[8.06683159 35.81822968]
[-6.28093672 40.24415207]
[-21.02313042 43.09283447]
[-35.98690033 44.33087921]
[-50.99681091 43.94377136]
[-65.87687683 41.93604660]
[-80.45262909 38.33124542]
[-94.55318451 33.17163467]
[-108.01322174 26.51770782]
[-120.67491913 18.44747543]
[-132.38983154 9.05556011]
[-143.02059937 -1.54792476]
[-152.44259644 -13.23865700]
[-160.54534912 -25.87957001]
[-167.23385620 -39.32245636]
[-172.42968750 -53.40970230]
[-176.07194519 -67.97614288]
[-178.11790466 -82.85099792]
[-178.54359436 -97.85986328]
[-177.34400940 -112.82676697]
[-174.53323364 -127.57623291]
[-170.14421082 -141.93533325]
[-164.22839355 -155.73570251]
[-156.85514832 -168.81555176]
[-148.11091614 -181.02153015]
[-138.09823608 -192.21051025]
[-126.93448639 -202.25132751]
[-114.75055695 -211.02624512]
[-101.68930054 -218.43237305]
[-87.90385437 -224.38290405]
[-73.55584717 -228.80805969]
[-58.81350327 -231.65594482]
[-43.84966660 -232.89318848]
[-28.83977699 -232.50526428]
[-13.95982075 -230.49673462]
[0.61574060 -226.89115906]
[14.71601772 -221.73078918]
[28.17569351 -215.07614136]
[40.83695602 -207.00521851]
[52.55136490 -197.61267090]
[63.18156815 -187.00862122]
[72.60293579 -175.31738281]
[80.70500183 -162.67602539]
[87.39278412 -149.23278809]
[92.58786011 -135.14526367]
[96.22933197 -120.57862091]
[98.27449799 -105.70365906]
[98.69937897 -90.69477081]
[97.49899292 -75.72792816]
[94.68741608 -60.97861481]
[90.29761505 -46.61975479]
[84.38105774 -32.81969833]
[77.00711060 -19.74024391]
[68.26222992 -7.53474188]
[58.24893951 3.65370345]
[47.08464813 13.69391441]
[55.85085678 25.86575127]
[64.61706543 38.03758621]
[73.38327026 50.20942307]
[86.92774963 45.07579803]
[101.33265686 43.55732346]
[115.64984894 45.75394821]
[128.93695068 51.52109146]
[140.31939697 60.47915268]
[149.04800415 72.03850555]
[162.95056152 66.40654755]
[176.85311890 60.77459335]
[190.75567627 55.14263535]
[198.30944824 40.98918915]
[214.11033630 38.21224213]
[226.03724670 48.94202805]
[224.94087219 64.94757080]
[211.66226196 73.95079803]
[196.38763428 69.04518890]
[182.48507690 74.67714691]
[168.58251953 80.30910492]
[154.67996216 85.94106293]
[156.38204956 97.06474304]
[155.84422302 108.30503845]
[170.25643921 112.46292877]
[184.66865540 116.62081146]
[199.08087158 120.77870178]
[213.49308777 124.93659210]
[226.36956787 116.06357574]
[241.93200684 117.59474945]
[252.83230591 128.80712891]
[253.92367554 144.40658569]
[244.69079590 157.02752686]
[229.49316406 160.71072388]
[215.50662231 153.71708679]
[209.33520508 139.34880066]
[194.92298889 135.19091797]
[180.51077271 131.03303528]
[166.09855652 126.87514496]
[151.68634033 122.71725464]
[141.10708618 138.70089722]
[125.78981018 150.22387695]
[107.50000000 155.95803833]
[107.50000000 170.95803833]
[107.50000000 185.95803833]
[107.50000000 200.95803833]
[107.50000000 215.95803833]
[107.50000000 230.95803833]
[107.50000000 245.95803833]
[107.50000000 260.95803833]
[107.50000000 275.95803833]
[107.50000000 290.95803833]
[122.03988647 295.01934814]
[134.94427490 302.85385132]
[145.25555420 313.88018799]
[152.20857239 327.28012085]
[155.28736877 342.05926514]
[154.26348877 357.12097168]
[149.21287537 371.34747314]
[140.51036072 383.68313599]
[128.80169678 393.21255493]
[114.95575714 399.22860718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 92]
[30 91]
[31 90]
[32 89]
[98 110]
[99 109]
[100 108]
[101 107]
[112 128]
[113 127]
[114 126]
[115 125]
[116 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
