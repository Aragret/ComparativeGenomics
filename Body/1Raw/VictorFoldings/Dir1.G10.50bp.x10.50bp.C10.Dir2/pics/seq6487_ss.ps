%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCUACUCGGGGGGGGGGCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUxxxxxxxxxxCUACUCAUCGCACUAAUUUACACUCACAACACCCUAGGCUCACUAAACAUCCCCCCCCCCUCUACUACUC\
) } def
/len { sequence length } bind def

/coor [
[65.80140686 380.95526123]
[51.95547104 374.93920898]
[40.24680710 365.40982056]
[31.54428291 353.07412720]
[26.49368095 338.84762573]
[25.46978951 323.78594971]
[28.54858971 309.00677490]
[35.50160980 295.60684204]
[45.81289673 284.58050537]
[58.71727753 276.74600220]
[73.25716400 272.68469238]
[73.25716400 257.68469238]
[73.25716400 242.68469238]
[73.25716400 227.68469238]
[73.25716400 212.68469238]
[73.25716400 197.68469238]
[73.25716400 182.68469238]
[73.25716400 167.68469238]
[73.25716400 152.68469238]
[73.25716400 137.68469238]
[62.59553528 127.13339996]
[47.59634781 127.28943634]
[32.59716034 127.44547272]
[17.59797096 127.60150909]
[2.59878325 127.75754547]
[-12.40040493 127.91358185]
[-27.39310074 128.38162231]
[-42.37281418 129.16146851]
[-55.75206375 137.60577393]
[-68.86438751 130.54061890]
[-83.84410095 131.32046509]
[-98.82381439 132.10031128]
[-113.80352783 132.88015747]
[-128.78324890 133.66000366]
[-142.23779297 143.03588867]
[-156.96789551 135.82781982]
[-157.82048035 119.45085144]
[-143.91848755 110.75219727]
[-129.56307983 118.68029022]
[-114.58337402 117.90044403]
[-99.60366058 117.12059784]
[-84.62394714 116.34075928]
[-69.64422607 115.56091309]
[-57.33642960 107.17238617]
[-43.15266037 114.18175507]
[-28.17294693 113.40191650]
[-24.33023453 110.46778870]
[-18.58797646 109.96006012]
[-12.55644131 112.91439819]
[2.44274688 112.75836182]
[17.44193459 112.60232544]
[32.44112396 112.44628906]
[47.44031143 112.29025269]
[62.43949890 112.13421631]
[61.16470718 100.57491302]
[63.31119919 89.33593750]
[68.58115387 79.39111328]
[76.41114044 71.56911469]
[86.03044128 66.48463440]
[96.53607178 64.49073029]
[106.97720337 65.65608978]
[113.04021454 51.93603516]
[119.10322571 38.21598053]
[125.16624451 24.49592781]
[112.42570496 16.52977753]
[100.94860840 6.83147860]
[90.96860504 -4.40152264]
[82.68888092 -16.94053650]
[76.27799225 -30.53028679]
[71.86646271 -44.89410019]
[69.54410553 -59.73955154]
[69.35819244 -74.76440430]
[71.31252289 -89.66277313]
[75.36729431 -104.13134003]
[81.43997192 -117.87555695]
[89.40690613 -130.61560059]
[99.10591888 -142.09210205]
[110.33953857 -152.07139587]
[122.87906647 -160.35035706]
[136.46920776 -166.76040649]
[150.83329773 -171.17103577]
[165.67889404 -173.49247742]
[180.70375061 -173.67745972]
[195.60200500 -171.72221375]
[210.07032776 -167.66653442]
[223.81416321 -161.59301758]
[236.55371094 -153.62528992]
[248.02960205 -143.92556763]
[258.00820923 -132.69132996]
[266.28640747 -120.15129852]
[272.69558716 -106.56075287]
[277.10534668 -92.19639587]
[279.42587280 -77.35065460]
[279.60992432 -62.32577896]
[277.65374756 -47.42765427]
[273.59719849 -32.95958328]
[267.52279663 -19.21612167]
[259.55429077 -6.47706699]
[249.85386658 4.99822998]
[238.61901855 14.97614670]
[226.07846069 23.25354576]
[212.48751831 29.66190910]
[198.12289429 34.07077408]
[183.27700806 36.39037704]
[168.25212097 36.57349396]
[153.35411072 34.61640167]
[138.88629150 30.55894089]
[132.82328796 44.27899551]
[126.76026917 57.99904633]
[120.69725800 71.71910095]
[125.92310333 76.41656494]
[130.10679626 82.06214142]
[133.08012390 88.42884827]
[134.72355652 95.26074982]
[134.97102356 102.28317261]
[149.38323975 106.44106293]
[163.79545593 110.59894562]
[178.47813416 104.13376617]
[192.61984253 111.70948029]
[195.37228394 127.51466370]
[184.62400818 139.42491150]
[168.62019348 138.30372620]
[159.63757324 125.01116180]
[145.22535706 120.85327911]
[130.81314087 116.69538879]
[126.76155090 123.75411224]
[121.08526611 129.81930542]
[114.03043365 134.51603699]
[105.92977905 137.53086853]
[97.18709564 138.63188171]
[88.25716400 137.68469238]
[88.25716400 152.68469238]
[88.25716400 167.68469238]
[88.25716400 182.68469238]
[88.25716400 197.68469238]
[88.25716400 212.68469238]
[88.25716400 227.68469238]
[88.25716400 242.68469238]
[88.25716400 257.68469238]
[88.25716400 272.68469238]
[102.79705048 276.74600220]
[115.70143127 284.58050537]
[126.01271820 295.60684204]
[132.96574402 309.00677490]
[136.04454041 323.78594971]
[135.02064514 338.84762573]
[129.97004700 353.07412720]
[121.26751709 365.40982056]
[109.55885315 374.93920898]
[95.71292114 380.95526123]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 54]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[27 46]
[28 45]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
[61 110]
[62 109]
[63 108]
[64 107]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
