%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCAAGUAGGGGGGGGGGUACUUCAAAGGACAUUUAACUAAAACCCCUACGCAUUUAUAUAGAGGAGAxxxxxxxxxxGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACCCCCCCCCCCUCCUCAAUUA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 405.94235229]
[71.01555634 400.38934326]
[58.81560135 391.52301025]
[49.20452881 379.90069580]
[42.78650284 366.25299072]
[39.96496582 351.43780518]
[40.91728210 336.38644409]
[45.58358765 322.04501343]
[53.67055511 309.31506348]
[64.66983032 298.99679565]
[77.88998413 291.73880005]
[92.50000000 287.99737549]
[92.50000000 272.99737549]
[92.50000000 257.99737549]
[92.50000000 242.99737549]
[92.50000000 227.99737549]
[92.50000000 212.99737549]
[92.50000000 197.99737549]
[92.50000000 182.99737549]
[92.50000000 167.99737549]
[92.50000000 152.99737549]
[92.50000000 137.99737549]
[92.50000000 122.99737549]
[76.98018646 112.15423584]
[73.24283600 92.19068146]
[85.31069183 74.16909027]
[74.97978973 63.29377747]
[64.64888000 52.41846466]
[54.31798172 41.54314804]
[40.82259750 34.99527740]
[25.88658333 33.61125183]
[10.95057106 32.22723007]
[1.61714625 41.98923874]
[-11.44779110 44.53650665]
[-23.40913963 39.15553665]
[-29.97178268 28.02521706]
[-44.87623215 26.33481979]
[-59.78067780 24.64442253]
[-73.17613983 33.47285461]
[-88.38517761 28.36749458]
[-93.74072266 13.24473953]
[-85.13445282 -0.29452735]
[-69.16837311 -1.86413980]
[-58.09028244 9.73997498]
[-43.18583298 11.43037224]
[-28.28138542 13.12076950]
[-15.61771774 2.09649444]
[1.43925858 3.64281607]
[12.33459663 17.29121590]
[27.27060890 18.67524147]
[42.20662308 20.05926704]
[46.90855026 14.21616173]
[56.31240845 2.52995348]
[61.01433563 -3.31315088]
[56.46704483 -17.60728073]
[41.47003555 -16.22752953]
[26.52709579 -18.10439873]
[12.33713722 -23.15010452]
[-0.43615067 -31.12865067]
[-11.19533730 -41.66686630]
[-19.43719673 -54.27185822]
[-24.77624321 -68.35406494]
[-26.96275711 -83.25484467]
[-25.89447403 -98.27725983]
[-21.62135887 -112.71867371]
[-14.34327126 -125.90364838]
[-4.40062189 -137.21549988]
[7.74155331 -146.12513733]
[21.51534271 -152.21585083]
[36.27652359 -155.20275879]
[51.33468246 -154.94616699]
[65.98552704 -151.45808411]
[79.54381561 -144.90164185]
[91.37538910 -135.58349609]
[100.92687988 -123.93946838]
[107.75153351 -110.51419067]
[111.53015137 -95.93556976]
[112.08600616 -80.88548279]
[109.39309692 -66.06784821]
[103.57736969 -52.17571259]
[94.91085052 -39.85883713]
[83.79887390 -29.69330215]
[70.76117706 -22.15457153]
[75.30846405 -7.86044121]
[78.90195465 9.36643124]
[74.41311646 23.40694618]
[65.19329834 31.21224785]
[75.52420044 42.08756256]
[85.85510254 52.96287537]
[96.18600464 63.83818817]
[111.10701752 65.37548065]
[123.43830109 56.83502197]
[135.50073242 47.91887283]
[147.28286743 38.63548660]
[159.06500244 29.35210037]
[160.67750549 13.63028717]
[172.98728943 3.71843338]
[188.69117737 5.49706507]
[198.47233582 17.91095161]
[196.52777100 33.59515381]
[184.01115417 43.24451447]
[168.34838867 41.13423538]
[156.56625366 50.41762161]
[144.78411865 59.70100784]
[144.02142334 63.20322037]
[141.48733521 66.49684906]
[137.30514526 68.73624420]
[131.97875977 69.16630554]
[119.64747620 77.70676422]
[123.85309601 87.45146179]
[124.01496124 97.09985352]
[138.73048401 100.00732422]
[153.44599915 102.91479492]
[168.16152954 105.82227325]
[178.21299744 94.20919037]
[192.72959900 89.19286346]
[207.80647278 92.12265015]
[219.38798523 102.21046448]
[224.35879517 116.74272919]
[221.38174438 131.81033325]
[211.25769043 143.36018372]
[196.70991516 148.28540039]
[181.65170288 145.26115417]
[170.13365173 135.10093689]
[165.25405884 120.53779602]
[150.53852844 117.63031769]
[135.82301331 114.72284698]
[121.10749054 111.81537628]
[115.35761261 118.68884277]
[107.50000000 122.99737549]
[107.50000000 137.99737549]
[107.50000000 152.99737549]
[107.50000000 167.99737549]
[107.50000000 182.99737549]
[107.50000000 197.99737549]
[107.50000000 212.99737549]
[107.50000000 227.99737549]
[107.50000000 242.99737549]
[107.50000000 257.99737549]
[107.50000000 272.99737549]
[107.50000000 287.99737549]
[122.11001587 291.73880005]
[135.33016968 298.99679565]
[146.32945251 309.31506348]
[154.41641235 322.04501343]
[159.08271790 336.38644409]
[160.03503418 351.43780518]
[157.21350098 366.25299072]
[150.79547119 379.90069580]
[141.18440247 391.52301025]
[128.98443604 400.38934326]
[114.96250153 405.94235229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[26 90]
[27 89]
[28 88]
[29 87]
[30 51]
[31 50]
[32 49]
[36 46]
[37 45]
[38 44]
[54 84]
[55 83]
[91 109]
[92 108]
[93 104]
[94 103]
[95 102]
[111 128]
[112 127]
[113 126]
[114 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
