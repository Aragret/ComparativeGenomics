%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAUCUCCCCGGGGGGGGGGUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCxxxxxxxxxxCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAGUCCUACUUCUCCCCCCCCCCCCUAUCUCUCC\
) } def
/len { sequence length } bind def

/coor [
[98.38082123 397.08154297]
[84.35887146 391.52853394]
[72.15892029 382.66220093]
[62.54784775 371.03988647]
[56.12982178 357.39218140]
[53.30828476 342.57699585]
[54.26060104 327.52560425]
[58.92690659 313.18417358]
[67.01387024 300.45422363]
[78.01314545 290.13595581]
[91.23330688 282.87799072]
[105.84331512 279.13653564]
[105.84331512 264.13653564]
[105.84331512 249.13655090]
[105.84331512 234.13655090]
[105.84331512 219.13655090]
[105.84331512 204.13655090]
[105.84331512 189.13655090]
[105.84331512 174.13655090]
[105.84331512 159.13655090]
[105.84331512 144.13655090]
[90.26506042 143.80072021]
[75.63632965 138.09222412]
[63.76613617 127.62770844]
[49.72415924 132.90245056]
[35.68218231 138.17718506]
[21.64020538 143.45193481]
[11.65227699 156.45858765]
[-4.56815958 154.04417419]
[-10.33491039 138.69239807]
[0.28436354 126.19588470]
[16.36546326 129.40995789]
[30.40744019 124.13520813]
[44.44941711 118.86047363]
[58.49139404 113.58573151]
[56.34281540 98.74040222]
[41.38153458 97.66333771]
[26.42025185 96.58626556]
[10.18785000 101.47967529]
[0.99210155 87.23627472]
[12.13323116 74.45693207]
[27.49732208 81.62498474]
[42.45860291 82.70205688]
[57.41988373 83.77912140]
[64.98381042 73.14540100]
[74.97679138 65.41110229]
[86.39693451 61.05274963]
[98.17866516 60.22409439]
[100.32723999 45.37877274]
[102.47582245 30.53344917]
[104.62440491 15.68812752]
[106.77297974 0.84280437]
[94.29775238 -6.09447289]
[84.96707153 -16.85747719]
[79.89083862 -30.13468361]
[79.66218567 -44.31742859]
[84.28822327 -57.69480896]
[93.19165802 -68.66007996]
[105.28277588 -75.90362549]
[119.09274292 -78.56936646]
[121.54566956 -93.36744690]
[123.99859619 -108.16551971]
[126.45153046 -122.96360016]
[128.90444946 -137.76168823]
[123.52803040 -152.64135742]
[133.24244690 -163.93202209]
[135.69537354 -178.73010254]
[138.14830017 -193.52818298]
[140.60122681 -208.32626343]
[143.05416870 -223.12434387]
[129.44557190 -229.68046570]
[118.23621368 -239.80603027]
[110.33479309 -252.68020630]
[106.38184357 -267.25933838]
[106.69780731 -282.36154175]
[111.25707245 -296.76257324]
[119.69004059 -309.29501343]
[131.31307983 -318.94287109]
[145.18399048 -324.92407227]
[160.17828369 -326.75375366]
[175.08045959 -324.28356934]
[188.68246460 -317.71377563]
[199.88163757 -307.57696533]
[207.77012634 -294.69485474]
[211.70841980 -280.11178589]
[211.37728882 -265.00988770]
[206.80355835 -250.61343384]
[198.35800171 -238.08949280]
[186.72526550 -228.45329285]
[172.84837341 -222.48602295]
[157.85223389 -220.67141724]
[155.39930725 -205.87333679]
[152.94638062 -191.07525635]
[150.49345398 -176.27717590]
[148.04052734 -161.47909546]
[153.59240723 -147.65788269]
[143.70252991 -135.30874634]
[141.24960327 -120.51067352]
[138.79667664 -105.71259308]
[136.34375000 -90.91451263]
[133.89082336 -76.11643982]
[147.44926453 -67.96801758]
[156.87567139 -55.21697235]
[160.70869446 -39.79052734]
[158.33514404 -24.03433609]
[150.08789062 -10.35584450]
[137.19955444 -0.85643399]
[121.61830139 2.99138355]
[119.46972656 17.83670616]
[117.32114410 32.68202972]
[115.17256927 47.52735138]
[113.02398682 62.37267303]
[125.72472382 68.38535309]
[135.80972290 78.63442230]
[141.88764954 92.02521515]
[143.01248169 107.01545715]
[138.82356262 121.79241943]
[152.75428772 127.35435486]
[168.43966675 125.28565979]
[177.39070129 137.19062805]
[191.32142639 142.75256348]
[205.25213623 148.31449890]
[222.20413208 148.57226562]
[226.64921570 164.93310547]
[212.15827942 173.73362732]
[199.69020081 162.24520874]
[185.75949097 156.68327332]
[171.82876587 151.12133789]
[157.13980103 153.58786011]
[147.19235229 141.28507996]
[133.26162720 135.72312927]
[120.84331512 144.13655090]
[120.84331512 159.13655090]
[120.84331512 174.13655090]
[120.84331512 189.13655090]
[120.84331512 204.13655090]
[120.84331512 219.13655090]
[120.84331512 234.13655090]
[120.84331512 249.13655090]
[120.84331512 264.13653564]
[120.84331512 279.13653564]
[135.45332336 282.87799072]
[148.67349243 290.13595581]
[159.67276001 300.45422363]
[167.75973511 313.18417358]
[172.42604065 327.52560425]
[173.37835693 342.57699585]
[170.55680847 357.39218140]
[164.13879395 371.03988647]
[154.52772522 382.66220093]
[142.32775879 391.52853394]
[128.30581665 397.08154297]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 35]
[25 34]
[26 33]
[27 32]
[36 44]
[37 43]
[38 42]
[48 112]
[49 111]
[50 110]
[51 109]
[52 108]
[60 101]
[61 100]
[62 99]
[63 98]
[64 97]
[66 95]
[67 94]
[68 93]
[69 92]
[70 91]
[117 131]
[118 130]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
