%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAAUUUAAGGGGGGGGGGCUAUUUAUAUUAUCCUAACUACUACCGCAUUCCUACUACUCAACUUAAACxxxxxxxxxxUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCCCCCCCCCCCUUAAUUUUA\
) } def
/len { sequence length } bind def

/coor [
[41.40570831 559.39270020]
[28.18551254 552.12023926]
[17.29870796 541.67321777]
[9.48757744 528.76397705]
[5.28469610 514.27264404]
[4.97662354 499.18731689]
[8.58436489 484.53649902]
[15.86193752 471.31909180]
[26.31314659 460.43634033]
[39.22540665 452.63018799]
[53.71834564 448.43289185]
[53.40628815 433.43615723]
[53.09423065 418.43939209]
[52.78217697 403.44262695]
[52.47011948 388.44589233]
[52.15806198 373.44912720]
[51.84600830 358.45239258]
[51.53395081 343.45562744]
[51.22189331 328.45886230]
[50.90983963 313.46212769]
[50.59778214 298.46536255]
[36.65557480 286.67501831]
[35.67672729 268.12402344]
[48.73976517 254.47279358]
[47.80413818 239.50199890]
[46.86850739 224.53120422]
[45.93288040 209.56040955]
[44.99724960 194.58961487]
[37.88808823 207.79794312]
[28.23355484 219.27792358]
[16.43982887 228.54658508]
[3.00309229 235.21397400]
[-11.51135349 238.99958801]
[-26.49286270 239.74415588]
[-41.31114197 237.41636658]
[-55.34276199 232.11413574]
[-67.99739075 224.06054688]
[-78.74263000 213.59442139]
[-87.12641907 201.15608215]
[-92.79602814 187.26884460]
[-95.51293182 172.51693726]
[-95.16282654 157.52102661]
[-91.76043701 142.91200256]
[-85.44892120 129.30447388]
[-76.49379730 117.27094269]
[-65.27183533 107.31768036]
[-52.25514603 99.86343384]
[-37.99136734 95.22180176]
[-23.08060265 93.58808136]
[-8.15016365 95.03099823]
[6.17180061 99.48984528]
[19.28274536 106.77703857]
[30.63107109 116.58598328]
[39.73933792 128.50401306]
[46.22434998 142.02972412]
[49.81327057 156.59405518]
[50.35470963 171.59019470]
[57.80961990 158.57388306]
[65.26453400 145.55757141]
[72.71944427 132.54125977]
[80.17435455 119.52495575]
[70.10322571 107.03403473]
[68.05927277 89.57066345]
[76.25753784 72.29376221]
[93.65597534 61.13968658]
[94.90284729 46.19160080]
[96.14971924 31.24351311]
[97.39659882 16.29542542]
[83.44038391 10.45767212]
[71.97252655 0.59139544]
[64.11652374 -12.33680725]
[60.64203262 -27.06036186]
[61.88943863 -42.13680649]
[67.73654175 -56.08910370]
[77.61050415 -67.55034637]
[90.54396820 -75.39768219]
[105.26984406 -78.86231232]
[120.34545135 -77.60479736]
[134.29382324 -71.74834442]
[145.74845886 -61.86671066]
[153.58712769 -48.92799377]
[157.04188538 -34.19979477]
[155.77426147 -19.12503433]
[149.90847778 -5.18058777]
[140.01916504 6.26741362]
[127.07519531 14.09741116]
[112.34468079 17.54230118]
[111.09780884 32.49038696]
[109.85093689 47.43847275]
[108.60405731 62.38656235]
[114.68997955 66.76966858]
[123.45637512 54.59796524]
[135.62794495 63.36454773]
[126.86181641 75.53587341]
[132.94773865 79.91897583]
[146.73011780 73.99901581]
[160.51249695 68.07904816]
[174.29487610 62.15908813]
[188.07725525 56.23912430]
[201.85963440 50.31916046]
[207.48379517 35.54944611]
[221.93841553 29.15887833]
[236.64784241 34.93886948]
[242.88522339 49.46025085]
[236.95004272 64.10774994]
[222.36352539 70.19125366]
[207.77960205 64.10153961]
[193.99722290 70.02150726]
[180.21484375 75.94146729]
[166.43246460 81.86142731]
[152.65007019 87.78139496]
[138.86769104 93.70135498]
[131.19491577 116.99740601]
[112.69396973 129.02069092]
[93.19065857 126.97986603]
[85.73574829 139.99617004]
[78.28083801 153.01248169]
[70.82592773 166.02879333]
[63.37102127 179.04510498]
[59.96804428 193.65399170]
[60.90367126 208.62478638]
[61.83929825 223.59558105]
[62.77492905 238.56636047]
[63.71055603 253.53715515]
[74.04814148 259.56271362]
[80.10522461 269.74212646]
[80.46222687 281.46160889]
[75.14613342 291.77697754]
[65.59453583 298.15332031]
[65.90659332 313.15005493]
[66.21865082 328.14682007]
[66.53070068 343.14355469]
[66.84275818 358.14031982]
[67.15481567 373.13708496]
[67.46687317 388.13381958]
[67.77893066 403.13058472]
[68.09098816 418.12734985]
[68.40303802 433.12408447]
[68.71509552 448.12084961]
[83.37008667 451.71160889]
[96.59590149 458.97387695]
[107.49076843 469.41247559]
[115.31186676 482.31567383]
[119.52593231 496.80374146]
[119.84565735 511.88885498]
[116.24922943 526.54241943]
[108.98186493 539.76544189]
[98.53906250 550.65631104]
[85.63283539 558.47241211]
[71.14314270 562.68084717]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[24 124]
[25 123]
[26 122]
[27 121]
[28 120]
[57 119]
[58 118]
[59 117]
[60 116]
[61 115]
[65 90]
[66 89]
[67 88]
[68 87]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
