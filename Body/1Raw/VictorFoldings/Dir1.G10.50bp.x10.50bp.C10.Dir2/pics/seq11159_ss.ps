%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACAAUCCCCGGGGGGGGGGCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACxxxxxxxxxxUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCCCCCCCCCCCAAUAAUCCCC\
) } def
/len { sequence length } bind def

/coor [
[77.92805481 404.80484009]
[63.90611267 399.25183105]
[51.70615387 390.38549805]
[42.09508133 378.76318359]
[35.67705536 365.11547852]
[32.85551834 350.30029297]
[33.80783463 335.24890137]
[38.47414017 320.90750122]
[46.56110764 308.17752075]
[57.56038284 297.85925293]
[70.78054047 290.60128784]
[85.39055634 286.85986328]
[85.39055634 271.85986328]
[85.39055634 256.85986328]
[85.39055634 241.85984802]
[85.39055634 226.85984802]
[85.39055634 211.85984802]
[85.39055634 196.85984802]
[85.39055634 181.85984802]
[85.39055634 166.85984802]
[85.39055634 151.85984802]
[85.39055634 136.85984802]
[85.39055634 121.85984802]
[85.02290344 95.76194763]
[74.69199371 84.88663483]
[64.36109161 74.01132202]
[51.44839478 66.37834930]
[36.93976974 62.57049179]
[22.43114471 58.76263046]
[7.92252016 54.95477295]
[-6.66122913 51.44560623]
[-21.31395340 48.23661041]
[-35.96667862 45.02761459]
[-47.56485367 55.16608047]
[-62.73168564 56.51538086]
[-75.63222504 48.76682663]
[-81.42704010 35.07164001]
[-96.07976532 31.86264420]
[-110.73249054 28.65364838]
[-125.38521576 25.44465256]
[-140.03793335 22.23565483]
[-155.49282837 27.72001648]
[-167.79258728 16.87344742]
[-164.28427124 0.85396755]
[-148.57693481 -3.85895467]
[-136.82893372 7.58293104]
[-122.17621613 10.79192734]
[-107.52349091 14.00092316]
[-92.87076569 17.20991898]
[-78.21804047 20.41891670]
[-67.22961426 10.39931679]
[-52.27133179 8.75193787]
[-39.05674744 16.31686592]
[-32.75768280 30.37488747]
[-18.10495758 33.58388519]
[-3.45223284 36.79288101]
[1.02732933 34.98104858]
[6.69594812 36.00800705]
[11.73037910 40.44614792]
[26.23900414 44.25400543]
[40.74763107 48.06186295]
[55.25625610 51.86972427]
[44.86075974 41.05613327]
[36.98125839 28.29237938]
[31.97261810 14.15330219]
[30.06041527 -0.72431499]
[31.33077049 -15.67042446]
[35.72647095 -30.01189804]
[43.04954529 -43.10283279]
[52.97018051 -54.35365295]
[65.04158783 -63.25765228]
[78.72009277 -69.41381836]
[93.38966370 -72.54489899]
[108.38962555 -72.50988007]
[123.04441833 -69.31032562]
[136.69403076 -63.09035110]
[148.72372437 -54.13007736]
[158.59170532 -42.83305359]
[165.85357666 -29.70806503]
[170.18225098 -15.34622288]
[171.38279724 -0.39434353]
[169.40113831 14.47418118]
[164.32653809 28.58971596]
[156.38751221 41.31653595]
[145.94163513 52.08146286]
[133.45935059 60.39967346]
[119.50283051 65.89653778]
[104.70063782 68.32450104]
[89.71941376 67.57420349]
[75.23641205 63.68041611]
[85.56731415 74.55573273]
[95.89821625 85.43104553]
[110.32559967 89.53598785]
[124.83422089 85.72812653]
[139.34284973 81.92027283]
[153.85147095 78.11241150]
[153.61683655 63.03897858]
[156.99702454 48.34756088]
[163.79548645 34.89229202]
[173.61700439 23.45545006]
[185.89054871 14.70195389]
[199.90254211 9.14072227]
[214.83836365 7.09507799]
[229.82965088 8.68395138]
[244.00485229 13.81496811]
[256.53982544 22.18981743]
[266.70578003 33.32159424]
[273.91171265 46.56311798]
[277.73867798 61.14453506]
[277.96417236 76.21810913]
[274.57510376 90.90747833]
[267.76846313 104.35861969]
[257.94003296 115.78950500]
[245.66117859 124.53556061]
[231.64581299 130.08828735]
[216.70875549 132.12487793]
[201.71842957 130.52691650]
[187.54634094 125.38731384]
[175.01646423 117.00486755]
[164.85723877 105.86692810]
[157.65933228 92.62104034]
[143.15071106 96.42889404]
[128.64208984 100.23675537]
[114.13345337 104.04461670]
[128.96162415 106.30855560]
[137.29135132 118.78314972]
[133.69953918 133.34677124]
[120.52463531 140.51768494]
[106.34423828 135.62725830]
[100.39055634 121.85984802]
[100.39055634 136.85984802]
[100.39055634 151.85984802]
[100.39055634 166.85984802]
[100.39055634 181.85984802]
[100.39055634 196.85984802]
[100.39055634 211.85984802]
[100.39055634 226.85984802]
[100.39055634 241.85984802]
[100.39055634 256.85986328]
[100.39055634 271.85986328]
[100.39055634 286.85986328]
[115.00056458 290.60128784]
[128.22071838 297.85925293]
[139.22000122 308.17752075]
[147.30696106 320.90750122]
[151.97326660 335.24890137]
[152.92558289 350.30029297]
[150.10404968 365.11547852]
[143.68601990 378.76318359]
[134.07495117 390.38549805]
[121.87500000 399.25183105]
[107.85305023 404.80484009]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 92]
[25 91]
[26 90]
[27 62]
[28 61]
[29 60]
[30 59]
[31 56]
[32 55]
[33 54]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[93 124]
[94 123]
[95 122]
[96 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
