%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCUCUUCUGGGGGGGGGGUAACAACAUACCCAUGGCCAACCUCCUACUCCUCAUUGUACCCAUUCUAAxxxxxxxxxxUCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACCCCCCCCCCCUUCCUAUUCU\
) } def
/len { sequence length } bind def

/coor [
[66.20288849 408.18991089]
[52.98268890 400.91741943]
[42.09588623 390.47042847]
[34.28475571 377.56118774]
[30.08187294 363.06985474]
[29.77379990 347.98452759]
[33.38154221 333.33370972]
[40.65911484 320.11630249]
[51.11032104 309.23355103]
[64.02258301 301.42739868]
[78.51551819 297.23010254]
[78.20346832 282.23336792]
[77.89141083 267.23660278]
[77.57935333 252.23985291]
[77.26729584 237.24310303]
[76.95523834 222.24633789]
[76.64318085 207.24958801]
[76.33113098 192.25283813]
[76.01907349 177.25608826]
[75.70701599 162.25932312]
[75.39495850 147.26257324]
[75.08290100 132.26582336]
[65.10017395 121.07005310]
[50.23712921 119.04772186]
[35.37408066 117.02538300]
[20.51103592 115.00305176]
[5.54024363 115.93868256]
[-8.95535278 119.79583740]
[-23.45094872 123.65299988]
[-34.67871857 135.60578918]
[-50.58002472 131.59573364]
[-54.79696655 115.74804688]
[-42.99151611 104.36545563]
[-27.30810928 109.15740204]
[-12.81251240 105.30023956]
[1.68308413 101.44308472]
[-12.69235229 97.15975952]
[-25.21273422 88.89900970]
[-34.80624771 77.36798859]
[-40.65164185 63.55381393]
[-42.24851227 48.63905716]
[-39.46016312 33.90049744]
[-32.52529144 20.59983826]
[-22.03756142 9.87568378]
[-8.89477348 2.64608192]
[5.77797508 -0.47007611]
[20.72462082 0.79396993]
[34.66564941 6.33001089]
[46.40763092 15.66413212]
[54.94539642 27.99728203]
[59.54805756 42.27367783]
[59.82161331 57.27118301]
[55.74263763 71.70593262]
[47.66031265 84.34223175]
[36.26653290 94.09834290]
[22.53336906 100.14000702]
[37.39641571 102.16233826]
[52.25946426 104.18466949]
[67.12251282 106.20700836]
[67.66822052 95.37963867]
[71.59963226 85.55631256]
[78.33560181 77.73707581]
[87.01995087 72.65847778]
[96.62756348 70.72547913]
[106.08432770 71.98294067]
[112.99132538 58.66778183]
[119.89833069 45.35262680]
[126.80532837 32.03747177]
[114.36023712 40.41122818]
[100.53914642 46.24024200]
[85.53974152 46.10675049]
[71.82458496 40.03266525]
[61.64539337 29.01522064]
[56.67336273 14.86322784]
[57.72478867 -0.09987736]
[64.62704468 -13.41749096]
[76.24694824 -22.90316200]
[90.67675781 -26.99955940]
[105.54743958 -25.03414917]
[118.41901398 -17.32826233]
[118.42913055 -2.32826519]
[125.61163330 -15.49684811]
[132.79414368 -28.66543007]
[139.97665405 -41.83401108]
[147.15916443 -55.00259399]
[146.22044373 -71.37485504]
[160.07649231 -80.14651489]
[174.47338867 -72.29404449]
[174.60084534 -55.89539337]
[160.32774353 -47.82008743]
[153.14523315 -34.65150452]
[145.96272278 -21.48292160]
[138.78021240 -8.31433868]
[131.59771729 4.85424376]
[142.47653198 15.18144894]
[155.25389099 7.32402277]
[168.03125000 -0.53340292]
[173.13577271 -15.74272346]
[188.25822449 -21.09910202]
[201.79797363 -12.49358368]
[203.36846924 3.47241521]
[191.76495361 14.55114555]
[175.88867188 12.24395466]
[163.11131287 20.10137939]
[150.33395386 27.95880508]
[140.12048340 38.94446945]
[133.21348572 52.25962448]
[126.30648041 65.57478333]
[119.39948273 78.88993835]
[125.71892548 87.33068085]
[128.55958557 97.48509979]
[143.32563782 100.12397003]
[158.09170532 102.76283264]
[172.85775757 105.40169525]
[187.62380981 108.04055786]
[202.85461426 101.96150970]
[215.56538391 112.32337952]
[212.68037415 128.46676636]
[197.16743469 133.78472900]
[184.98493958 122.80661774]
[170.21888733 120.16774750]
[155.45283508 117.52888489]
[140.68678284 114.89002228]
[125.92072296 112.25115967]
[120.82801056 121.40655518]
[112.49990082 128.43829346]
[101.82341766 132.20965576]
[90.07965851 131.95376587]
[90.39171600 146.95051575]
[90.70376587 161.94726562]
[91.01582336 176.94403076]
[91.32788086 191.94078064]
[91.63993835 206.93753052]
[91.95199585 221.93428040]
[92.26405334 236.93104553]
[92.57610321 251.92779541]
[92.88816071 266.92456055]
[93.20021820 281.92129517]
[93.51227570 296.91806030]
[108.16726685 300.50881958]
[121.39307404 307.77108765]
[132.28794861 318.20968628]
[140.10903931 331.11288452]
[144.32310486 345.60095215]
[144.64283752 360.68603516]
[141.04640198 375.33966064]
[133.77903748 388.56265259]
[123.33624268 399.45349121]
[110.43001556 407.26962280]
[95.94032288 411.47808838]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 59]
[24 58]
[25 57]
[26 56]
[27 36]
[28 35]
[29 34]
[65 109]
[66 108]
[67 107]
[68 106]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
[95 105]
[96 104]
[97 103]
[111 124]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
