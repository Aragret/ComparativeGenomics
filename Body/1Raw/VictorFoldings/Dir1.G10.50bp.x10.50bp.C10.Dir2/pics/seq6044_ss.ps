%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGCAUCAACGGGGGGGGGGUGAACGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUACUAGACCAAUGxxxxxxxxxxAAUCGUAGCCUUCUCCACUUCAAGUCAACUAGGACUCAUAAUAGUUACAACCCCCCCCCCUCGGCAUCAAC\
) } def
/len { sequence length } bind def

/coor [
[72.18957520 397.40658569]
[58.16763306 391.85357666]
[45.96767426 382.98724365]
[36.35660172 371.36492920]
[29.93857765 357.71722412]
[27.11704063 342.90203857]
[28.06935692 327.85064697]
[32.73566055 313.50924683]
[40.82262802 300.77926636]
[51.82190323 290.46099854]
[65.04206085 283.20303345]
[79.65207672 279.46160889]
[79.65207672 264.46160889]
[79.65207672 249.46159363]
[79.65207672 234.46159363]
[79.65207672 219.46159363]
[79.65207672 204.46159363]
[79.65207672 189.46159363]
[79.65207672 174.46159363]
[79.65207672 159.46159363]
[79.65207672 144.46159363]
[79.65207672 129.46159363]
[74.23345184 115.47451019]
[64.12801361 104.38937378]
[54.02257919 93.30424500]
[39.00753021 88.31837463]
[36.15115738 73.70022583]
[26.04572296 62.61508942]
[13.98502731 71.55548859]
[1.08171630 79.22982788]
[-12.53180122 85.55937195]
[-26.71582985 90.47917175]
[-41.32481766 93.93872833]
[-56.20884705 95.90254211]
[-71.21519470 96.35047150]
[-86.18985748 95.27791595]
[-100.97917938 92.69587708]
[-115.43140411 88.63085938]
[-129.39820862 83.12456512]
[-142.73628235 76.23351288]
[-155.30876160 68.02839661]
[-166.98663330 58.59343338]
[-177.65003967 48.02542877]
[-187.18957520 36.43283463]
[-195.50733948 23.93460655]
[-202.51799011 10.65899849]
[-208.14958191 -3.25776052]
[-212.34432983 -17.67286110]
[-215.05917358 -32.43838120]
[-216.26626587 -47.40280533]
[-215.95323181 -62.41257095]
[-214.12326050 -77.31365204]
[-210.79513550 -91.95314026]
[-206.00300598 -106.18080902]
[-199.79606628 -119.85066223]
[-192.23800659 -132.82241821]
[-183.40635681 -144.96298218]
[-173.39176941 -156.14775085]
[-162.29701233 -166.26196289]
[-150.23591614 -175.20182800]
[-137.33227539 -182.87561035]
[-123.71847534 -189.20454407]
[-109.53423309 -194.12371826]
[-94.92509460 -197.58262634]
[-80.04097748 -199.54579163]
[-65.03461456 -199.99305725]
[-50.05999374 -198.91984558]
[-35.27078247 -196.33715820]
[-20.81874466 -192.27149963]
[-6.85217667 -186.76460266]
[6.48559856 -179.87295532]
[19.05771446 -171.66728210]
[30.73515892 -162.23181152]
[41.39810562 -151.66333008]
[50.93712997 -140.07032776]
[59.25435257 -127.57173157]
[66.26441956 -114.29581451]
[71.89540100 -100.37880707]
[76.08950806 -85.96351624]
[78.80370331 -71.19787598]
[80.01013947 -56.23340225]
[79.69643402 -41.22365189]
[77.86580658 -26.32265282]
[74.53704071 -11.68331051]
[69.74429321 2.54414892]
[63.53675079 16.21372986]
[55.97810745 29.18515778]
[47.14593124 41.32532501]
[37.13085556 52.50965500]
[47.23628998 63.59479141]
[61.52853394 67.78777313]
[65.10771179 83.19880676]
[75.21315002 94.28394318]
[85.31858063 105.36907196]
[76.55104828 96.30372620]
[74.90728760 80.39298248]
[84.42150879 63.21180344]
[105.10227203 52.21477509]
[118.09265900 44.71477509]
[131.08303833 37.21477509]
[141.77696228 24.05892563]
[157.37904358 30.69302368]
[155.32330322 47.52187347]
[138.58303833 50.20515823]
[125.59265900 57.70515823]
[112.60227203 65.20515442]
[114.13146973 72.54760742]
[118.71906281 94.57495117]
[133.62351990 96.26535034]
[148.52795410 97.95574951]
[163.43240356 99.64614105]
[178.33685303 101.33654022]
[187.40168762 88.93798065]
[201.45782471 82.74760437]
[216.72422791 84.43060303]
[229.09431458 93.53425598]
[235.24060059 107.60971832]
[233.50975037 122.87077332]
[224.36737061 135.21226501]
[210.27270508 141.31440735]
[195.01715088 139.53573608]
[182.70437622 130.35470581]
[176.64645386 116.24098969]
[161.74200439 114.55059052]
[146.83757019 112.86019135]
[131.93312073 111.16979980]
[117.02867126 109.47940063]
[111.43451691 114.47494507]
[114.49294281 129.15983582]
[100.24622345 124.46604156]
[94.65207672 129.46159363]
[94.65207672 144.46159363]
[94.65207672 159.46159363]
[94.65207672 174.46159363]
[94.65207672 189.46159363]
[94.65207672 204.46159363]
[94.65207672 219.46159363]
[94.65207672 234.46159363]
[94.65207672 249.46159363]
[94.65207672 264.46160889]
[94.65207672 279.46160889]
[109.26208496 283.20303345]
[122.48224640 290.46099854]
[133.48152161 300.77926636]
[141.56848145 313.50924683]
[146.23478699 327.85064697]
[147.18710327 342.90203857]
[144.36557007 357.71722412]
[137.94754028 371.36492920]
[128.33647156 382.98724365]
[116.13652039 391.85357666]
[102.11457062 397.40658569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 94]
[24 93]
[25 92]
[27 90]
[28 89]
[98 106]
[99 105]
[100 104]
[108 127]
[109 126]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
