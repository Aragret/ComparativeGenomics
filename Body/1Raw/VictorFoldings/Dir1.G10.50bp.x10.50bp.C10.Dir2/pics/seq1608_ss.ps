%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAACCCUGAGGGGGGGGGGUGAAGGCUACAAAGUAAGCGCAAGUACCCACGUAAAGACGUUAGGUCAAGxxxxxxxxxxCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCUCCCCCCCCCCCAACCCCUGA\
) } def
/len { sequence length } bind def

/coor [
[92.17716980 392.40585327]
[78.33123779 386.38983154]
[66.62257385 376.86041260]
[57.92004776 364.52471924]
[52.86944580 350.29821777]
[51.84555435 335.23654175]
[54.92435455 320.45736694]
[61.87737656 307.05743408]
[72.18865967 296.03109741]
[85.09304047 288.19659424]
[99.63292694 284.13528442]
[99.63292694 269.13528442]
[99.63292694 254.13528442]
[99.63292694 239.13528442]
[99.63292694 224.13528442]
[99.63292694 209.13528442]
[99.63292694 194.13528442]
[99.63292694 179.13528442]
[99.63292694 164.13528442]
[99.63292694 149.13528442]
[94.19351196 143.97167969]
[83.86612701 154.85034180]
[72.98764801 144.52276611]
[83.31468964 133.64448547]
[77.87527466 128.48088074]
[62.89556503 129.26072693]
[54.42460632 132.85165405]
[47.59674454 129.89767456]
[32.60404968 130.36572266]
[17.61135101 130.83377075]
[11.89340305 144.94847107]
[0.92432398 155.51252747]
[-13.39542675 160.69563293]
[-28.58486557 159.59979248]
[-42.01232910 152.41487122]
[-51.35142899 140.38569641]
[-54.98411179 125.59639740]
[-52.28099060 110.60929871]
[-43.71039581 98.02101898]
[-30.75724030 90.01255035]
[-15.66573238 87.97140503]
[-1.05056787 92.25122070]
[10.55608749 102.11050415]
[17.14331055 115.84106445]
[32.13600540 115.37302399]
[47.12870026 114.90498352]
[62.11571884 114.28100586]
[77.09543610 113.50115967]
[76.98566437 102.14482117]
[81.52859497 93.32484436]
[70.43727875 83.22619629]
[59.34596634 73.12754822]
[48.25465012 63.02890015]
[32.12631989 60.06091690]
[26.88819313 44.52083588]
[37.92881012 32.39496231]
[53.89052582 36.15735245]
[58.35330200 51.93758392]
[69.44461823 62.03623199]
[80.53593445 72.13488007]
[91.62724304 82.23353577]
[120.90502930 90.13898468]
[111.35153198 124.04253387]
[122.85333252 114.41400146]
[134.35513306 104.78547668]
[145.85694885 95.15695190]
[157.35874939 85.52842712]
[148.97688293 73.07202148]
[141.94299316 59.80770111]
[136.33416748 45.88079453]
[132.21185303 31.44388962]
[129.62120056 16.65516853]
[128.59060669 1.67666423]
[129.13137817 -13.32751179]
[131.23756409 -28.19296455]
[134.88609314 -42.75682068]
[140.03700256 -56.85950851]
[146.63385010 -70.34651184]
[154.60435486 -83.07006836]
[163.86119080 -94.89075470]
[174.30293274 -105.67907715]
[185.81517029 -115.31681061]
[198.27177429 -123.69837952]
[211.53627014 -130.73193359]
[225.46331787 -136.34042358]
[239.90031433 -140.46240234]
[254.68910217 -143.05268860]
[269.66763306 -144.08290100]
[284.67178345 -143.54177856]
[299.53720093 -141.43522644]
[314.10095215 -137.78634644]
[328.20352173 -132.63508606]
[341.69036865 -126.03791809]
[354.41372681 -118.06710052]
[366.23419189 -108.80998230]
[377.02227783 -98.36798096]
[386.65972900 -86.85550690]
[395.04098511 -74.39869690]
[402.07421875 -61.13403320]
[407.68237305 -47.20685196]
[411.80398560 -32.76974869]
[414.39392090 -17.98090172]
[415.42376709 -3.00234675]
[414.88229370 12.00180244]
[412.77539062 26.86715317]
[409.12612915 41.43083191]
[403.97454834 55.53327179]
[397.37704468 69.01995850]
[389.40591431 81.74311829]
[380.14849854 93.56336212]
[369.70623779 104.35117340]
[358.19354248 113.98834991]
[345.73651123 122.36930847]
[332.47167969 129.40222168]
[318.54437256 135.01004028]
[304.10717773 139.13130188]
[289.31826782 141.72087097]
[274.33969116 142.75036621]
[259.33554077 142.20851135]
[244.47024536 140.10124207]
[229.90664673 136.45164490]
[215.80433655 131.29971313]
[202.31781006 124.70188141]
[189.59484863 116.73045349]
[177.77482605 107.47275543]
[166.98727417 97.03022766]
[155.48547363 106.65875244]
[143.98365784 116.28728485]
[132.48185730 125.91580963]
[120.98005676 135.54434204]
[114.63292694 149.13528442]
[114.63292694 164.13528442]
[114.63292694 179.13528442]
[114.63292694 194.13528442]
[114.63292694 209.13528442]
[114.63292694 224.13528442]
[114.63292694 239.13528442]
[114.63292694 254.13528442]
[114.63292694 269.13528442]
[114.63292694 284.13528442]
[129.17282104 288.19659424]
[142.07719421 296.03109741]
[152.38847351 307.05743408]
[159.34150696 320.45736694]
[162.42030334 335.23654175]
[161.39640808 350.29821777]
[156.34580994 364.52471924]
[147.64328003 376.86041260]
[135.93461609 386.38983154]
[122.08868408 392.40585327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 48]
[26 47]
[28 46]
[29 45]
[30 44]
[50 61]
[51 60]
[52 59]
[53 58]
[63 130]
[64 129]
[65 128]
[66 127]
[67 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
