%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCACUUCAAGGGGGGGGGGGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCAACCACACCUAxxxxxxxxxxAUUGUACGGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAACCCCCCCCCCUCCACAUCAA\
) } def
/len { sequence length } bind def

/coor [
[86.35652161 393.03765869]
[71.86682892 388.82919312]
[58.96060181 381.01306152]
[48.51779938 370.12222290]
[41.25043869 356.89923096]
[37.65401077 342.24563599]
[37.97373199 327.16052246]
[42.18780136 312.67245483]
[50.00889969 299.76925659]
[60.90376663 289.33065796]
[74.12957764 282.06838989]
[88.78456879 278.47763062]
[89.09662628 263.48086548]
[89.40868378 248.48413086]
[89.72074127 233.48736572]
[90.03279114 218.49061584]
[90.34484863 203.49386597]
[90.65690613 188.49711609]
[90.96896362 173.50035095]
[91.28102112 158.50360107]
[91.59307861 143.50685120]
[91.90512848 128.51010132]
[75.18248749 121.06673431]
[64.75875854 104.01797485]
[49.99270248 106.65683746]
[35.22665024 109.29570007]
[20.46059227 111.93456268]
[5.69453716 114.57343292]
[0.55039769 129.04524231]
[-11.15086555 138.99391174]
[-26.26167297 141.74328613]
[-40.71729279 136.55381775]
[-50.62923431 124.82142639]
[-53.33123398 109.70207214]
[-48.09647369 95.26279449]
[-36.33306885 85.38768005]
[-21.20532417 82.73307800]
[-6.78252363 88.01307678]
[3.05567312 99.80737305]
[17.82172775 97.16851044]
[32.58778381 94.52964783]
[47.35383987 91.89078522]
[62.11989594 89.25191498]
[68.88800812 75.86563110]
[62.25951004 62.40966797]
[55.63101196 48.95370102]
[49.00251389 35.49773407]
[42.37401581 22.04177094]
[27.88807106 26.10034943]
[12.90299416 27.42779922]
[-2.07082820 25.97890854]
[-16.52339363 21.80302811]
[-29.96245384 15.04238224]
[-41.93027878 5.92724037]
[-52.01924896 -5.23194122]
[-59.88573837 -18.05508423]
[-65.26181030 -32.10543823]
[-67.96437073 -46.90445328]
[-67.90136719 -61.94807816]
[-65.07493591 -76.72393799]
[-59.58135605 -90.72875977]
[-51.60773087 -103.48556519]
[-41.42564011 -114.55984497]
[-29.38188171 -123.57441711]
[-15.88666344 -130.22225952]
[-1.39962506 -134.27693176]
[13.58580875 -135.60034180]
[28.55924034 -134.14741516]
[43.01068115 -129.96763611]
[56.44791794 -123.20336914]
[68.41328430 -114.08499908]
[78.49924469 -102.92309570]
[86.36227417 -90.09783173]
[91.73456573 -76.04603577]
[94.43313599 -61.24628830]
[94.36607361 -46.20268250]
[91.53565979 -31.42758751]
[86.03830719 -17.42424011]
[78.06124115 -4.66959047]
[67.87616730 6.40194464]
[55.82998276 15.41327190]
[62.45848083 28.86923790]
[69.08697510 42.32520294]
[75.71547699 55.78116989]
[82.34397888 69.23713684]
[100.37567902 66.47673035]
[116.33036041 72.96870422]
[126.07817841 85.91876221]
[140.65087891 82.36399841]
[155.22358704 78.80923462]
[156.47172546 64.50252533]
[162.07766724 51.30417252]
[171.47875977 40.50479126]
[183.74197388 33.15592957]
[197.65646362 29.96768761]
[211.85314941 31.24012184]
[224.93939209 36.83505630]
[235.63558960 46.19094849]
[242.90037537 58.37922668]
[257.54388428 55.12839890]
[272.18737793 51.87757492]
[286.83087158 48.62674713]
[292.03491211 44.38109970]
[297.74261475 43.57287216]
[302.15078735 45.55871201]
[316.91683960 42.91984940]
[327.23120117 30.63188934]
[343.26492310 31.17857361]
[352.71835327 44.14053345]
[348.33959961 59.57445908]
[333.48767090 65.64076996]
[319.55572510 57.68590546]
[304.78967285 60.32476807]
[290.08169556 63.27025223]
[275.43820190 66.52107239]
[260.79470825 69.77190399]
[246.15119934 73.02272797]
[244.30740356 88.62901306]
[237.22938538 102.68958282]
[225.75302124 113.50322723]
[211.24760437 119.75460052]
[195.45242310 120.67418671]
[180.26826477 116.13299561]
[167.52861023 106.66028595]
[158.77833557 93.38194275]
[144.20564270 96.93669891]
[129.63293457 100.49146271]
[126.60471344 113.05916595]
[118.51461029 123.14220428]
[106.90188599 128.82215881]
[106.58982849 143.81890869]
[106.27777100 158.81565857]
[105.96571350 173.81240845]
[105.65366364 188.80917358]
[105.34160614 203.80592346]
[105.02954865 218.80267334]
[104.71749115 233.79942322]
[104.40543365 248.79618835]
[104.09337616 263.79293823]
[103.78132629 278.78970337]
[118.27426147 282.98696899]
[131.18652344 290.79312134]
[141.63772583 301.67590332]
[148.91529846 314.89328003]
[152.52304077 329.54409790]
[152.21496582 344.62945557]
[148.01208496 359.12075806]
[140.20095825 372.02999878]
[129.31414795 382.47702026]
[116.09395599 389.74948120]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[44 85]
[45 84]
[46 83]
[47 82]
[48 81]
[88 127]
[89 126]
[90 125]
[99 117]
[100 116]
[101 115]
[102 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
