%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAACCCUCAGGGGGGGGGGACACCCACUCCCUCUUAGCCAAUAUUGUGCCUAUUGCCAUACUAGUCUUUxxxxxxxxxxAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUAACAACAUCCCCCCCCCCAAAACCCUCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 518.27075195]
[71.19830322 512.25469971]
[59.48964310 502.72528076]
[50.78712082 490.38961792]
[45.73651886 476.16308594]
[44.71262741 461.10140991]
[47.79142761 446.32226562]
[54.74444962 432.92233276]
[65.05573273 421.89599609]
[77.96011353 414.06149292]
[92.50000000 410.00018311]
[92.50000000 395.00018311]
[92.50000000 380.00018311]
[92.50000000 365.00018311]
[92.50000000 350.00018311]
[92.50000000 335.00018311]
[92.50000000 320.00018311]
[92.50000000 305.00018311]
[92.50000000 290.00018311]
[92.50000000 275.00018311]
[92.50000000 260.00018311]
[77.80443573 257.09939575]
[63.95278549 251.38540649]
[51.47812653 243.07609558]
[40.86095047 232.48924255]
[32.51063156 220.03044128]
[26.74966240 206.17745972]
[23.80118752 191.46202087]
[23.78036499 176.44931030]
[26.68986511 161.71632385]
[32.41970444 147.82968140]
[40.75139618 135.32377625]
[51.36627960 124.68033600]
[63.85771179 116.30972290]
[77.74665070 110.53521729]
[92.50000000 107.58047485]
[91.09769440 92.64617157]
[88.30537415 77.90836334]
[85.51304626 63.17055893]
[82.72072601 48.43275452]
[72.49291229 40.50522614]
[70.49887085 28.12610054]
[77.27252960 18.05510902]
[74.78741455 3.26240277]
[72.30229187 -11.53030396]
[69.81717682 -26.32301140]
[67.33205414 -41.11571884]
[64.84693909 -55.90842438]
[62.36182022 -70.70113373]
[59.37293625 -74.05196381]
[57.80519485 -77.80872345]
[57.60797882 -81.46152496]
[58.56610107 -84.57215118]
[60.33882523 -86.82265472]
[59.09195328 -101.77074432]
[57.84507751 -116.71883392]
[42.86845016 -118.08695221]
[28.35697365 -122.03514099]
[14.75163555 -128.44340515]
[2.46588516 -137.11701965]
[-8.12692642 -147.79237366]
[-16.70489502 -160.14509583]
[-23.00734711 -173.79977417]
[-26.84275818 -188.34146118]
[-28.09457207 -203.32826233]
[-26.72475052 -218.30473328]
[-22.77491951 -232.81576538]
[-16.36511040 -246.42037964]
[-7.69010973 -258.70513916]
[2.98645878 -269.29675293]
[15.34014702 -277.87332153]
[28.99553871 -284.17422485]
[43.53766251 -288.00796509]
[58.52460098 -289.25808716]
[73.50091553 -287.88656616]
[88.01149750 -283.93508911]
[101.61538696 -277.52374268]
[113.89916992 -268.84735107]
[124.48955536 -258.16958618]
[133.06472778 -245.81491089]
[139.36407471 -232.15881348]
[143.19619751 -217.61624146]
[144.44461060 -202.62916565]
[143.07138062 -187.65299988]
[139.11827087 -173.14286804]
[132.70536804 -159.53971863]
[124.02758026 -147.25691223]
[113.34860992 -136.66773987]
[100.99298096 -128.09397888]
[87.33615875 -121.79616547]
[72.79316711 -117.96570587]
[74.04003906 -103.01761627]
[75.28691101 -88.06953430]
[77.15452576 -73.18624878]
[79.63964844 -58.39354324]
[82.12476349 -43.60083771]
[84.60988617 -28.80813026]
[87.09500122 -14.01542282]
[89.58011627 0.77728426]
[92.06523895 15.56999111]
[103.95312500 28.44158936]
[97.45852661 45.64043045]
[100.25085449 60.37823486]
[103.04317474 75.11604309]
[105.83550262 89.85384369]
[113.31525421 76.85179901]
[126.56826782 69.82629395]
[141.52735901 70.93338013]
[153.60177612 79.83329773]
[159.08602905 93.79478455]
[156.29707336 108.53322601]
[146.09080505 119.52558899]
[131.59939575 123.39846039]
[117.27008057 118.96330261]
[107.50000000 107.58047485]
[122.25334930 110.53521729]
[136.14228821 116.30972290]
[148.63372803 124.68033600]
[159.24861145 135.32377625]
[167.58029175 147.82968140]
[173.31013489 161.71632385]
[176.21963501 176.44931030]
[176.19880676 191.46202087]
[173.25033569 206.17745972]
[167.48936462 220.03044128]
[159.13905334 232.48924255]
[148.52186584 243.07609558]
[136.04721069 251.38540649]
[122.19556427 257.09939575]
[107.50000000 260.00018311]
[107.50000000 275.00018311]
[107.50000000 290.00018311]
[107.50000000 305.00018311]
[107.50000000 320.00018311]
[107.50000000 335.00018311]
[107.50000000 350.00018311]
[107.50000000 365.00018311]
[107.50000000 380.00018311]
[107.50000000 395.00018311]
[107.50000000 410.00018311]
[122.03988647 414.06149292]
[134.94427490 421.89599609]
[145.25555420 432.92233276]
[152.20857239 446.32226562]
[155.28736877 461.10140991]
[154.26348877 476.16308594]
[149.21287537 490.38961792]
[140.51036072 502.72528076]
[128.80169678 512.25469971]
[114.95575714 518.27075195]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[36 115]
[37 105]
[38 104]
[39 103]
[40 102]
[43 100]
[44 99]
[45 98]
[46 97]
[47 96]
[48 95]
[49 94]
[54 93]
[55 92]
[56 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
