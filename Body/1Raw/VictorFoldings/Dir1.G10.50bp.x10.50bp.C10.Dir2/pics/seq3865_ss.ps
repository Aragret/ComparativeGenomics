%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUACUAAUAAGGGGGGGGGGGUGGCUCCUUUAACCUCUCCACCCUUAUCACAACACAAGAACACCUCUGAxxxxxxxxxxAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCCCCCCCCCCCUUACUACUAA\
) } def
/len { sequence length } bind def

/coor [
[87.13700867 356.24063110]
[72.64731598 352.03216553]
[59.74108887 344.21603394]
[49.29829025 333.32519531]
[42.03092575 320.10220337]
[38.43449783 305.44860840]
[38.75421906 290.36349487]
[42.96829224 275.87542725]
[50.78938675 262.97222900]
[61.68425751 252.53363037]
[74.91006470 245.27136230]
[89.56505585 241.68060303]
[89.87711334 226.68385315]
[90.18917084 211.68708801]
[90.50122833 196.69033813]
[90.81328583 181.69358826]
[91.12533569 166.69683838]
[91.43739319 151.70007324]
[91.74945068 136.70332336]
[92.06150818 121.70657349]
[92.37356567 106.70981598]
[89.36363983 99.17162323]
[92.85134125 91.40519714]
[93.47531891 76.41818237]
[94.09929657 61.43116760]
[94.72327423 46.44415283]
[79.79831696 44.89839554]
[64.99683380 42.43677139]
[50.37495804 39.06862259]
[35.98816299 34.80672455]
[21.89102173 29.66724014]
[8.13701248 23.66966820]
[-5.22169352 16.83676147]
[-18.13442039 9.19443798]
[-30.55218697 0.77168775]
[-42.42788696 -8.39953899]
[-53.71647263 -18.28445053]
[-64.37512207 -28.84555244]
[-74.36339569 -40.04278183]
[-83.64341736 -51.83366394]
[-92.17997742 -64.17346954]
[-99.94069672 -77.01538849]
[-106.89612579 -90.31070709]
[-113.01989746 -104.00900269]
[-118.28876495 -118.05829620]
[-122.68275452 -132.40530396]
[-126.18518829 -146.99559021]
[-128.78279114 -161.77381897]
[-130.46569824 -176.68392944]
[-131.22752380 -191.66937256]
[-131.06539917 -206.67327881]
[-129.97991943 -221.63874817]
[-127.97520447 -236.50901794]
[-125.05886078 -251.22766113]
[-121.24195099 -265.73886108]
[-116.53896332 -279.98754883]
[-110.96772766 -293.91970825]
[-104.54937744 -307.48248291]
[-97.30825806 -320.62438965]
[-89.27185059 -333.29562378]
[-80.47062683 -345.44805908]
[-70.93798065 -357.03564453]
[-60.71006775 -368.01443481]
[-49.82569122 -378.34274292]
[-38.32613373 -387.98141479]
[-26.25502205 -396.89385986]
[-13.65814400 -405.04629517]
[-0.58328539 -412.40780640]
[12.91995621 -418.95043945]
[26.80035973 -424.64938354]
[41.00526810 -429.48303223]
[55.48080063 -433.43307495]
[70.17204285 -436.48446655]
[85.02326965 -438.62564087]
[99.97814178 -439.84851074]
[114.97993469 -440.14843750]
[129.97172546 -439.52426147]
[144.89666748 -437.97836304]
[159.69813538 -435.51660156]
[174.31997681 -432.14831543]
[188.70672607 -427.88626099]
[202.80381775 -422.74664307]
[216.55776978 -416.74893188]
[229.91641235 -409.91589355]
[242.82905579 -402.27343750]
[255.24674988 -393.85058594]
[267.12234497 -384.67922974]
[278.41085815 -374.79421997]
[289.06939697 -364.23300171]
[299.05755615 -353.03567505]
[308.33746338 -341.24468994]
[316.87390137 -328.90481567]
[324.63449097 -316.06280518]
[331.58978271 -302.76742554]
[337.71343994 -289.06906128]
[342.98214722 -275.01971436]
[347.37600708 -260.67266846]
[350.87829590 -246.08235168]
[353.47573853 -231.30409241]
[355.15850830 -216.39396667]
[355.92019653 -201.40852356]
[355.75790405 -186.40461731]
[354.67230225 -171.43916321]
[352.66741943 -156.56890869]
[349.75094604 -141.85029602]
[345.93389893 -127.33913422]
[341.23077393 -113.09047699]
[335.65939331 -99.15837097]
[329.24090576 -85.59568024]
[321.99966431 -72.45383453]
[313.96313477 -59.78269577]
[305.16177368 -47.63032913]
[295.62902832 -36.04283142]
[285.40100098 -25.06415939]
[274.51651001 -14.73595905]
[263.01687622 -5.09740734]
[250.94567871 3.81493163]
[238.34870911 11.96725082]
[225.27378845 19.32862473]
[211.77047729 25.87112999]
[197.89001465 31.56994629]
[183.68505859 36.40345764]
[169.20948792 40.35332870]
[154.51821899 43.40457916]
[139.66696167 45.54562759]
[124.71208191 46.76835632]
[109.71028900 47.06813049]
[109.08631134 62.05514526]
[108.46233368 77.04216003]
[107.83835602 92.02917480]
[107.37031555 107.02187347]
[107.05825806 122.01863098]
[106.74620819 137.01538086]
[106.43415070 152.01213074]
[106.12209320 167.00889587]
[105.81003571 182.00564575]
[105.49797821 197.00239563]
[105.18592072 211.99914551]
[104.87387085 226.99591064]
[104.56181335 241.99266052]
[119.05474854 246.18994141]
[131.96701050 253.99609375]
[142.41821289 264.87884521]
[149.69578552 278.09625244]
[153.30352783 292.74707031]
[152.99545288 307.83239746]
[148.79257202 322.32373047]
[140.98144531 335.23297119]
[130.09465027 345.67996216]
[116.87444305 352.95245361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[23 130]
[24 129]
[25 128]
[26 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
