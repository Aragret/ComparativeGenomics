%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUCAAACGGGGGGGGGGUCAAACUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCxxxxxxxxxxAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCUCCCCCCCCCCAGCAUCACAC\
) } def
/len { sequence length } bind def

/coor [
[73.46084595 375.36990356]
[59.61490250 369.35388184]
[47.90624237 359.82446289]
[39.20371628 347.48880005]
[34.15311432 333.26226807]
[33.12922287 318.20059204]
[36.20802307 303.42141724]
[43.16104507 290.02148438]
[53.47232819 278.99517822]
[66.37670898 271.16064453]
[80.91659546 267.09933472]
[80.91659546 252.09934998]
[80.91659546 237.09934998]
[80.91659546 222.09934998]
[80.91659546 207.09934998]
[80.91659546 192.09934998]
[80.91659546 177.09934998]
[80.91659546 162.09934998]
[80.91659546 147.09934998]
[80.91659546 132.09934998]
[69.82527924 122.00069427]
[54.89097595 123.40299988]
[50.35683823 137.88461304]
[40.64987946 149.49572754]
[27.27316666 156.48695374]
[12.27952957 157.82054138]
[-2.04347897 153.32429504]
[-13.52258396 143.71307373]
[-20.42853928 130.47535706]
[-35.36284637 131.87767029]
[-50.29715347 133.27996826]
[-65.23146057 134.68226624]
[-75.11881256 147.01174927]
[-90.83737946 148.65551758]
[-103.06163025 138.63836670]
[-104.53912354 122.90328979]
[-94.39329529 110.78563690]
[-78.64347839 109.47458649]
[-66.63376617 119.74796295]
[-51.69945908 118.34565735]
[-36.76514816 116.94335938]
[-21.83084297 115.54105377]
[-17.50986671 101.24915314]
[-8.02058887 89.66903687]
[5.21506023 82.58508301]
[20.19486809 81.10421753]
[34.63920975 85.48310089]
[46.33796692 95.08425903]
[53.48867035 108.46868896]
[68.42298126 107.06639099]
[70.60026550 90.52269745]
[80.44682312 78.01657104]
[94.58487701 72.57698822]
[108.75813293 75.00599670]
[117.52434540 62.83415985]
[126.29055023 50.66232300]
[135.05676270 38.49048615]
[121.25125122 44.35632706]
[106.43147278 46.67453384]
[91.49414062 45.30484009]
[77.34309387 40.33012390]
[64.83458710 32.05139542]
[54.72550583 20.96958923]
[47.62752533 7.75525236]
[43.97013855 -6.79203367]
[43.97465515 -21.79203224]
[47.64079285 -36.33711624]
[54.74671936 -49.54718018]
[64.86247253 -60.62289810]
[77.37595367 -68.89409637]
[91.52999115 -73.86029816]
[106.46814728 -75.22100830]
[121.28652954 -72.89388275]
[135.08850098 -67.01973724]
[147.03892517 -57.95400238]
[156.41468811 -46.24524689]
[162.64848328 -32.60194016]
[165.36311340 -17.84962463]
[164.39431763 -2.88094354]
[159.80070496 11.39836979]
[151.86149597 24.12275696]
[165.24778748 17.35464287]
[178.63406372 10.58652782]
[192.02035522 3.81841254]
[205.40664673 -2.94970226]
[206.59640503 -16.71863937]
[214.38642883 -28.00263786]
[226.64414978 -33.90167999]
[240.10644531 -32.96455002]
[251.24806213 -25.54429626]
[264.77224731 -32.03246307]
[278.29644775 -38.52062607]
[291.82064819 -45.00879288]
[289.79415894 -60.00040817]
[292.50152588 -74.88414001]
[299.67749023 -88.20182037]
[310.61901855 -98.64872742]
[324.25421143 -105.20137787]
[339.24716187 -107.21781158]
[354.12908936 -104.50048065]
[367.44195557 -97.31558990]
[377.88153076 -86.36705017]
[384.42504883 -72.72749329]
[386.43142700 -57.73317337]
[383.70413208 -42.85308838]
[376.51031494 -29.54503250]
[365.55477905 -19.11279488]
[351.91082764 -12.57842255]
[336.91519165 -10.58208466]
[322.03692627 -13.31936169]
[308.73370361 -20.52208519]
[298.30880737 -31.48460197]
[284.78460693 -24.99643707]
[271.26043701 -18.50827217]
[257.73623657 -12.02010727]
[255.31794739 4.18659592]
[243.61552429 15.89211369]
[227.08154297 18.36374474]
[212.17475891 10.43658257]
[198.78846741 17.20469666]
[185.40219116 23.97281265]
[172.01589966 30.74092674]
[158.62962341 37.50904083]
[147.22859192 47.25669479]
[138.46238708 59.42853165]
[129.69618225 71.60036469]
[120.92996979 83.77220154]
[127.88349152 98.03630829]
[125.54815674 114.59072876]
[113.78749084 127.64179230]
[95.91659546 132.09934998]
[95.91659546 147.09934998]
[95.91659546 162.09934998]
[95.91659546 177.09934998]
[95.91659546 192.09934998]
[95.91659546 207.09934998]
[95.91659546 222.09934998]
[95.91659546 237.09934998]
[95.91659546 252.09934998]
[95.91659546 267.09933472]
[110.45648193 271.16064453]
[123.36086273 278.99517822]
[133.67214966 290.02148438]
[140.62516785 303.42141724]
[143.70396423 318.20059204]
[142.68008423 333.26226807]
[137.62947083 347.48880005]
[128.92695618 359.82446289]
[117.21829224 369.35388184]
[103.37235260 375.36990356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 50]
[22 49]
[29 42]
[30 41]
[31 40]
[32 39]
[54 127]
[55 126]
[56 125]
[57 124]
[81 123]
[82 122]
[83 121]
[84 120]
[85 119]
[90 115]
[91 114]
[92 113]
[93 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
