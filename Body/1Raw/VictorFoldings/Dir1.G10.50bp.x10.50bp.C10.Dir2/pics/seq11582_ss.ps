%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAUUGAAAGGGGGGGGGGACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUAUAAACUAAUACACCAGUxxxxxxxxxxAAUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCACCCAAAGCUAAGAUUCCCCCCCCCCCUAAUUUAAA\
) } def
/len { sequence length } bind def

/coor [
[120.33383179 360.86041260]
[106.48789215 354.84439087]
[94.77922821 345.31497192]
[86.07670593 332.97930908]
[81.02610016 318.75277710]
[80.00221252 303.69110107]
[83.08100891 288.91192627]
[90.03403473 275.51199341]
[100.34531403 264.48565674]
[113.24969482 256.65115356]
[127.78958130 252.58984375]
[127.78958130 237.58984375]
[127.78958130 222.58984375]
[127.78958130 207.58984375]
[127.78958130 192.58984375]
[127.78958130 177.58984375]
[127.78958130 162.58984375]
[127.78958130 147.58984375]
[127.78958130 132.58984375]
[127.78958130 117.58984375]
[127.78958130 102.58984375]
[121.36705780 116.42118835]
[108.98912048 124.38217926]
[94.80508423 124.47950745]
[83.22412109 117.25084686]
[77.54481506 105.42449188]
[62.61050797 104.02218628]
[47.67620087 102.61988068]
[32.74189377 101.21758270]
[17.80758667 99.81527710]
[2.85949874 98.56840515]
[-12.10074997 97.47708893]
[-27.06099892 96.38578033]
[-33.26506805 98.95814514]
[-38.96447372 98.09323120]
[-42.61668396 94.92513275]
[-57.51858902 93.21244049]
[-72.42048645 91.49974823]
[-87.24244690 98.51698303]
[-100.57479095 88.96813202]
[-98.70234680 72.67623138]
[-83.55133057 66.40099335]
[-70.70780182 76.59784698]
[-55.80589676 78.31053925]
[-40.90399551 80.02323151]
[-25.96968842 81.42552948]
[-11.00943947 82.51684570]
[3.95080948 83.60815430]
[10.89564323 80.94077301]
[19.20989037 84.88096619]
[34.14419556 86.28327179]
[49.07850647 87.68557739]
[64.01280975 89.08788300]
[78.94712067 90.49018097]
[85.90919495 79.70862579]
[98.22756195 73.75274658]
[112.69281006 75.14319611]
[105.51029968 61.97460938]
[98.32778931 48.80602646]
[82.92288971 46.94360733]
[71.57770538 36.35746384]
[68.65469360 21.11818695]
[75.27781677 7.08558464]
[88.90033722 -0.34451756]
[104.28413391 1.68490565]
[115.51380920 12.39349937]
[118.27133179 27.66359138]
[111.49637604 41.62351990]
[118.67887878 54.79210281]
[125.86138916 67.96068573]
[125.87149811 52.96068573]
[120.79179382 38.84698868]
[123.23455811 24.04722786]
[132.58033752 12.31451893]
[146.45910645 6.62419176]
[161.35130310 8.41927052]
[173.48039246 17.24453735]
[179.77050781 30.86196709]
[178.62654114 45.81827927]
[170.33856201 58.32066727]
[157.00804138 65.19868469]
[146.80197144 76.19123077]
[161.02874756 71.43741608]
[175.25553894 66.68360138]
[168.39909363 48.71175766]
[179.28263855 25.56353378]
[190.16146851 15.23632812]
[201.04029846 4.90912342]
[205.82145691 -12.84250736]
[222.99029541 -16.33979416]
[233.65191650 -26.89108276]
[244.31353760 -37.44237518]
[248.11601257 -53.39458847]
[263.90740967 -57.81770706]
[275.44290161 -46.16160202]
[270.85574341 -30.41707611]
[254.86483765 -26.78074837]
[244.20320129 -16.22945786]
[233.54158020 -5.67816687]
[233.15248108 6.45261669]
[224.29986572 15.33238792]
[211.36749268 15.78794861]
[200.48867798 26.11515427]
[189.60984802 36.44235992]
[191.68879700 43.64846802]
[204.11087036 35.24061584]
[215.94572449 44.45669556]
[210.83772278 58.56017685]
[195.84667969 58.06068420]
[197.92562866 65.26679230]
[212.63359070 68.21227264]
[227.34155273 71.15775299]
[242.04951477 74.10324097]
[256.75747681 77.04872131]
[268.85180664 67.13605499]
[284.48767090 67.36830139]
[296.28225708 77.63579559]
[298.66656494 93.09054565]
[290.51477051 106.43527985]
[275.67587280 111.36903381]
[261.15640259 105.56224060]
[253.81198120 91.75668335]
[239.10401917 88.81120300]
[224.39605713 85.86571503]
[209.68809509 82.92023468]
[194.98013306 79.97475433]
[180.00935364 80.91037750]
[165.78256226 85.66419220]
[151.55578613 90.41800690]
[142.78958130 102.58984375]
[142.78958130 117.58984375]
[142.78958130 132.58984375]
[142.78958130 147.58984375]
[142.78958130 162.58984375]
[142.78958130 177.58984375]
[142.78958130 192.58984375]
[142.78958130 207.58984375]
[142.78958130 222.58984375]
[142.78958130 237.58984375]
[142.78958130 252.58984375]
[157.32946777 256.65115356]
[170.23385620 264.48565674]
[180.54513550 275.51199341]
[187.49815369 288.91192627]
[190.57695007 303.69110107]
[189.55307007 318.75277710]
[184.50245667 332.97930908]
[175.79994202 345.31497192]
[164.09127808 354.84439087]
[150.24533081 360.86041260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[31 48]
[32 47]
[33 46]
[36 45]
[37 44]
[38 43]
[57 70]
[58 69]
[59 68]
[82 129]
[83 128]
[84 127]
[86 104]
[87 103]
[88 102]
[90 99]
[91 98]
[92 97]
[110 126]
[111 125]
[112 124]
[113 123]
[114 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
