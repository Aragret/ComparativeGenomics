%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCGCCCUAGGGGGGGGGGUUCUUCAUAGCCGAAUACACAAACAUUAUUAUAAUAAACACCCUCACCACxxxxxxxxxxGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACCCCCCCCCCCUUCGCCUUA\
) } def
/len { sequence length } bind def

/coor [
[26.40712357 448.59976196]
[12.56118393 442.58370972]
[0.85252225 433.05429077]
[-7.85000229 420.71862793]
[-12.90060425 406.49212646]
[-13.92449570 391.43041992]
[-10.84569645 376.65127563]
[-3.89267445 363.25134277]
[6.41860962 352.22500610]
[19.32299042 344.39050293]
[33.86287689 340.32919312]
[33.86287689 325.32919312]
[33.86287689 310.32919312]
[33.86287689 295.32919312]
[33.86287689 280.32919312]
[33.86287689 265.32919312]
[33.86287689 250.32919312]
[33.86287689 235.32919312]
[33.86287689 220.32919312]
[33.86287689 205.32919312]
[33.86287689 190.32919312]
[33.86287689 175.32919312]
[26.07529449 188.14923096]
[15.49419022 198.78128052]
[2.71169066 206.63032532]
[-11.55688953 211.25717163]
[-26.51307106 212.40286255]
[-41.31989670 210.00331116]
[-55.14877319 204.19279480]
[-67.22582245 195.29644775]
[-76.87521362 183.81213379]
[-83.55694580 170.38253784]
[-86.89712524 155.75915527]
[-86.70882416 140.76033020]
[-83.00257111 126.22541809]
[-75.98578644 112.96778870]
[-66.05112457 101.72935486]
[-53.75453949 93.13901520]
[-39.78414917 87.67749786]
[-24.92174721 85.65042877]
[-9.99904156 87.17124176]
[4.14888287 92.15483856]
[16.73030090 100.32232666]
[27.04115105 111.21665955]
[34.50442886 124.22817230]
[38.70248795 138.62873840]
[39.40045547 153.61174011]
[46.58296585 140.44316101]
[53.76547241 127.27458191]
[60.94798279 114.10599518]
[68.13049316 100.93741608]
[71.22881317 86.26088715]
[69.98194122 71.31280518]
[68.73506165 56.36471558]
[67.48818970 41.41662979]
[52.50368500 40.18599319]
[37.92614365 36.50562286]
[24.15324974 30.47592354]
[11.56073952 22.26138878]
[0.49214542 12.08612061]
[-8.75057316 0.22770527]
[-15.91526699 -12.99035072]
[-20.80648041 -27.20745087]
[-23.29077530 -42.03573990]
[-23.30037880 -57.07069016]
[-20.83502960 -71.90213776]
[-15.96198368 -86.12547302]
[-8.81418133 -99.35267639]
[0.41337994 -111.22288513]
[11.46896553 -121.41229248]
[24.05097008 -129.64289856]
[37.81615067 -135.69018555]
[52.38897705 -139.38917542]
[67.37190247 -140.63896179]
[82.35617065 -139.40544128]
[96.93299866 -135.72225952]
[110.70473480 -129.68991089]
[123.29566193 -121.47294617]
[134.36228943 -111.29554749]
[143.60272217 -99.43534851]
[150.76487732 -86.21591187]
[155.65335083 -71.99787140]
[158.13478088 -57.16910553]
[158.14149475 -42.13415527]
[155.67327881 -27.30317879]
[150.79750061 -13.08078194]
[143.64715576 0.14503916]
[134.41729736 12.01347542]
[123.35974884 22.20074654]
[110.77616119 30.42893600]
[97.00981903 36.47357178]
[82.43627930 40.16975403]
[83.68315125 55.11784363]
[84.93002319 70.06592560]
[86.17690277 85.01401520]
[101.66983795 81.57144165]
[113.28125763 90.00765991]
[128.04731750 87.36879730]
[136.08081055 77.22399902]
[148.48001099 75.35884094]
[158.47999573 82.23690033]
[173.29774475 79.90579987]
[188.11550903 77.57469177]
[202.93325806 75.24359131]
[217.75102234 72.91248322]
[232.56878662 70.58138275]
[241.66781616 57.65919113]
[257.25326538 55.03816986]
[270.07852173 64.27332306]
[272.53460693 79.88559723]
[263.16439819 92.61251068]
[247.52702332 94.90340424]
[234.89988708 85.39913940]
[220.08212280 87.73023987]
[205.26437378 90.06134796]
[190.44660950 92.39244843]
[175.62884521 94.72355652]
[160.81109619 97.05465698]
[147.81652832 108.80800629]
[130.68618774 102.13484955]
[115.92012787 104.77371216]
[108.03092957 115.97066498]
[93.48257446 117.98760986]
[81.29907227 108.11992645]
[74.11656189 121.28850555]
[66.93405914 134.45709229]
[59.75154877 147.62567139]
[52.56903839 160.79425049]
[48.86287689 175.32919312]
[48.86287689 190.32919312]
[48.86287689 205.32919312]
[48.86287689 220.32919312]
[48.86287689 235.32919312]
[48.86287689 250.32919312]
[48.86287689 265.32919312]
[48.86287689 280.32919312]
[48.86287689 295.32919312]
[48.86287689 310.32919312]
[48.86287689 325.32919312]
[48.86287689 340.32919312]
[63.40276337 344.39050293]
[76.30714417 352.22500610]
[86.61843109 363.25134277]
[93.57144928 376.65127563]
[96.65025330 391.43041992]
[95.62635803 406.49212646]
[90.57575989 420.71862793]
[81.87322998 433.05429077]
[70.16457367 442.58370972]
[56.31863403 448.59976196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[47 128]
[48 127]
[49 126]
[50 125]
[51 124]
[52 95]
[53 94]
[54 93]
[55 92]
[97 121]
[98 120]
[101 118]
[102 117]
[103 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
