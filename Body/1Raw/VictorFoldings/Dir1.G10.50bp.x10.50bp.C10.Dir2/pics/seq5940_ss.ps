%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUAAUAAUGGGGGGGGGGCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCAGxxxxxxxxxxAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUCCCCCCCCCCUACUACUAAU\
) } def
/len { sequence length } bind def

/coor [
[84.15653229 386.10363770]
[71.59830475 377.75247192]
[61.51208496 366.54000854]
[54.53189087 353.17111206]
[51.09650803 338.48611450]
[51.42188263 323.40817261]
[55.48756790 308.88504028]
[63.03798676 295.82968140]
[73.59851837 285.06280518]
[86.50531006 277.26116943]
[100.94703674 272.91522217]
[100.32306671 257.92819214]
[99.69908905 242.94117737]
[99.07511139 227.95416260]
[98.45113373 212.96714783]
[97.82715607 197.98013306]
[97.20317841 182.99311829]
[96.57920074 168.00610352]
[95.79935455 153.02638245]
[94.86372375 138.05560303]
[93.92809296 123.08480835]
[92.99246979 108.11401367]
[89.89414978 93.43749237]
[84.69873047 79.36596680]
[79.50331879 65.29444885]
[67.46510315 55.02838898]
[70.31523895 40.40901947]
[65.11982727 26.33750153]
[59.92441177 12.26598167]
[54.72899628 -1.80553794]
[49.53358078 -15.87705708]
[44.33816528 -29.94857597]
[32.29994965 -40.21463776]
[35.15009308 -54.83400726]
[29.95467567 -68.90552521]
[24.75926018 -82.97704315]
[10.22831154 -79.20475769]
[-4.60603046 -76.89804840]
[-19.59633255 -76.07984924]
[-34.59360886 -76.75828552]
[-49.44881058 -78.92662048]
[-64.01428986 -82.56330109]
[-78.14528656 -87.63217926]
[-91.70135498 -94.08287811]
[-104.54777527 -101.85128784]
[-116.55685425 -110.86019897]
[-127.60925293 -121.02008057]
[-137.59510803 -132.22994995]
[-146.41519165 -144.37840271]
[-153.98182678 -157.34468079]
[-160.21983337 -170.99993896]
[-165.06718445 -185.20845032]
[-168.47572327 -199.82901001]
[-170.41156006 -214.71627808]
[-170.85546875 -229.72233582]
[-169.80302429 -244.69801331]
[-167.26470947 -259.49447632]
[-163.26571655 -273.96469116]
[-157.84582520 -287.96481323]
[-151.05888367 -301.35571289]
[-142.97235107 -314.00427246]
[-133.66659546 -325.78482056]
[-123.23409271 -336.58029175]
[-111.77854156 -346.28332520]
[-99.41380310 -354.79751587]
[-86.26274872 -362.03826904]
[-72.45609283 -367.93359375]
[-58.13105392 -372.42492676]
[-43.43000793 -375.46759033]
[-28.49905968 -377.03134155]
[-13.48660374 -377.10067749]
[1.45815253 -375.67489624]
[16.18667984 -372.76818848]
[30.55259323 -368.40936279]
[44.41311646 -362.64184570]
[57.63049316 -355.52288818]
[70.07335663 -347.12326050]
[81.61804962 -337.52642822]
[92.14981842 -326.82781982]
[101.56400299 -315.13372803]
[109.76703644 -302.56039429]
[116.67738342 -289.23275757]
[122.22637177 -275.28329468]
[126.35884857 -260.85067749]
[129.03373718 -246.07827759]
[130.22447205 -231.11294556]
[129.91920471 -216.10343933]
[128.12095642 -201.19891357]
[124.84762573 -186.54750061]
[120.13172150 -172.29481506]
[114.02013397 -158.58251953]
[106.57359314 -145.54689026]
[97.86610413 -133.31748962]
[87.98422241 -122.01586151]
[77.02614594 -111.75431824]
[65.10079193 -102.63485718]
[52.32668686 -94.74810791]
[38.83078003 -88.17246246]
[44.02619553 -74.10094452]
[49.22161102 -60.02942276]
[60.88821411 -50.76985168]
[58.40968323 -35.14399338]
[63.60509872 -21.07247353]
[68.80051422 -7.00095367]
[73.99593353 7.07056570]
[79.19134521 21.14208603]
[84.38676453 35.21360397]
[96.05336761 44.47317505]
[93.57483673 60.09903336]
[98.77024841 74.17055511]
[103.96566772 88.24207306]
[107.45143890 73.65271759]
[116.16822815 61.44543839]
[128.83610535 53.41269302]
[143.59497070 50.73397064]
[158.27774048 53.80259705]
[170.72845459 62.16799164]
[179.11891174 74.60182190]
[182.21710205 89.27837372]
[179.56811523 104.04261780]
[171.56091309 116.72664642]
[159.37121582 125.46800995]
[144.78890991 128.98315430]
[129.95516968 126.75596619]
[117.04812622 119.11344147]
[107.96325684 107.17838287]
[108.89888763 122.14917755]
[109.83451843 137.11996460]
[110.77014160 152.09075928]
[114.44899750 160.52391052]
[111.56621552 167.38212585]
[112.19019318 182.36914062]
[112.81417084 197.35615540]
[113.43814850 212.34317017]
[114.06212616 227.33018494]
[114.68610382 242.31719971]
[115.31008148 257.30422974]
[115.93405914 272.29122925]
[130.68705750 275.42169189]
[144.19769287 282.12344360]
[155.61666870 291.97521973]
[164.22619629 304.35775757]
[169.48503113 318.49264526]
[171.06263733 333.49139404]
[168.85983276 348.41113281]
[163.01509094 362.31399536]
[153.89581299 374.32604980]
[142.07524109 383.69219971]
[128.29643250 389.82369995]
[113.42552948 392.33511353]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 129]
[20 128]
[21 127]
[22 126]
[23 111]
[24 110]
[25 109]
[27 107]
[28 106]
[29 105]
[30 104]
[31 103]
[32 102]
[34 100]
[35 99]
[36 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
