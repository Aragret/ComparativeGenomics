%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUAAUAAGGGGGGGGGGCAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAxxxxxxxxxxACGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGCCGAAUACACAAACAUUCCCCCCCCCCAUUAUAAUAA\
) } def
/len { sequence length } bind def

/coor [
[69.84098053 438.26086426]
[55.99503708 432.24484253]
[44.28637695 422.71542358]
[35.58385468 410.37976074]
[30.53325081 396.15322876]
[29.50935936 381.09155273]
[32.58815765 366.31237793]
[39.54117966 352.91244507]
[49.85246277 341.88613892]
[62.75684738 334.05160522]
[77.29673004 329.99029541]
[77.29673004 314.99029541]
[77.29673004 299.99029541]
[77.29673004 284.99029541]
[77.29673004 269.99029541]
[77.29673004 254.99029541]
[77.29673004 239.99029541]
[77.29673004 224.99029541]
[77.29673004 209.99029541]
[77.29673004 194.99029541]
[65.67589569 204.47482300]
[50.73399734 203.15586853]
[40.95435715 191.78227234]
[41.88940430 176.81144714]
[53.00826645 166.74313354]
[67.99816132 167.29365540]
[78.34908295 178.15190125]
[80.21669769 163.26861572]
[82.08430481 148.38533020]
[83.95191956 133.50205994]
[85.81953430 118.61877441]
[77.72972870 90.38652039]
[68.96352386 78.21468353]
[60.19731522 66.04284668]
[51.43111038 53.87101364]
[38.27562332 61.11605453]
[24.34275055 66.72251129]
[9.83566761 70.60862732]
[-5.03406811 72.71773529]
[-20.04961205 73.01906586]
[-34.99199295 71.50823212]
[-49.64330673 68.20727539]
[-63.78989792 63.16431808]
[-77.22545624 56.45291138]
[-89.75406647 48.17092514]
[-101.19301605 38.43912888]
[-111.37549591 27.39945030]
[-120.15300751 15.21287632]
[-127.39756012 2.05712175]
[-133.00349426 -11.87596226]
[-136.88906860 -26.38319016]
[-138.99761963 -41.25300598]
[-139.29838562 -56.26856232]
[-137.78700256 -71.21088409]
[-134.48548889 -85.86207581]
[-129.44200134 -100.00847626]
[-122.73009491 -113.44378662]
[-114.44763947 -125.97208405]
[-104.71541595 -137.41067505]
[-93.67536163 -147.59274292]
[-81.48845673 -156.36979675]
[-68.33242798 -163.61384583]
[-54.39913559 -169.21926880]
[-39.89176178 -173.10429382]
[-25.02186966 -175.21229553]
[-10.00630283 -175.51249695]
[4.93596554 -174.00054932]
[19.58703232 -170.69850159]
[33.73324585 -165.65447998]
[47.16830444 -158.94207764]
[59.69629669 -150.65914917]
[71.13451385 -140.92649841]
[81.31616974 -129.88606262]
[90.09277344 -117.69882965]
[97.33633423 -104.54253387]
[102.94123077 -90.60902405]
[106.82572174 -76.10150909]
[108.93315125 -61.23153687]
[109.23280334 -46.21595764]
[107.72029877 -31.27374649]
[104.41769409 -16.62280273]
[99.37315369 -2.47677970]
[92.66024017 10.95803070]
[84.37684631 23.48571014]
[74.64376831 34.92356873]
[63.60294724 45.10480499]
[72.36915588 57.27664185]
[81.13536072 69.44847870]
[89.90156555 81.62031555]
[87.32432556 66.84338379]
[96.49585724 54.97396469]
[111.44499207 53.73970413]
[122.43902588 63.94417572]
[122.32024384 78.94370270]
[111.16640472 88.97264099]
[125.57862091 84.81475830]
[139.99082947 80.65686798]
[154.40304565 76.49897766]
[161.33969116 65.57483673]
[173.47819519 62.43224716]
[184.13832092 68.23474121]
[198.63392639 64.37757874]
[213.12951660 60.52042007]
[227.62510681 56.66325760]
[236.88232422 43.56044769]
[252.90600586 42.77243805]
[263.40417480 54.90372086]
[260.32351685 70.64821625]
[246.02726746 77.92809296]
[231.48226929 71.15885925]
[216.98667908 75.01601410]
[202.49107361 78.87317657]
[187.99548340 82.73033142]
[176.29161072 95.76948547]
[158.56094360 90.91119385]
[144.14872742 95.06908417]
[129.73651123 99.22697449]
[115.32429504 103.38485718]
[130.31863403 102.97275543]
[142.42778015 111.82534790]
[146.58427429 126.23796844]
[141.04866028 140.17916870]
[128.13752747 147.81478882]
[113.25396729 145.94943237]
[102.62650299 135.36373901]
[100.70281219 120.48638916]
[98.83519745 135.36967468]
[96.96759033 150.25294495]
[95.09997559 165.13623047]
[93.23236084 180.01951599]
[92.29673004 194.99029541]
[92.29673004 209.99029541]
[92.29673004 224.99029541]
[92.29673004 239.99029541]
[92.29673004 254.99029541]
[92.29673004 269.99029541]
[92.29673004 284.99029541]
[92.29673004 299.99029541]
[92.29673004 314.99029541]
[92.29673004 329.99029541]
[106.83661652 334.05160522]
[119.74099731 341.88613892]
[130.05229187 352.91244507]
[137.00531006 366.31237793]
[140.08410645 381.09155273]
[139.06021118 396.15322876]
[134.00961304 410.37976074]
[125.30709076 422.71542358]
[113.59842682 432.24484253]
[99.75248718 438.26086426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 130]
[28 129]
[29 128]
[30 127]
[31 126]
[32 89]
[33 88]
[34 87]
[35 86]
[95 118]
[96 117]
[97 116]
[98 115]
[101 113]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
