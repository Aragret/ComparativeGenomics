%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUUCACAAGGGGGGGGGGAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCCACAxxxxxxxxxxGUUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCAUUCGUAUAAUAAUCCCCCCCCCCUACAUCACAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 381.24517822]
[71.19830322 375.22915649]
[59.48964310 365.69973755]
[50.78712082 353.36404419]
[45.73651886 339.13754272]
[44.71262741 324.07586670]
[47.79142761 309.29669189]
[54.74444962 295.89675903]
[65.05573273 284.87042236]
[77.96011353 277.03591919]
[92.50000000 272.97460938]
[92.50000000 257.97460938]
[92.50000000 242.97460938]
[92.50000000 227.97460938]
[92.50000000 212.97460938]
[92.50000000 197.97460938]
[92.50000000 182.97460938]
[92.50000000 167.97460938]
[92.50000000 152.97460938]
[92.50000000 137.97460938]
[92.50000000 122.97460938]
[84.90041351 123.91297150]
[76.51705170 122.31511688]
[62.61449814 127.94707489]
[59.00534058 143.03858948]
[47.19304276 153.10084534]
[31.71967697 154.26473999]
[18.53507042 146.08270264]
[12.70897102 131.70089722]
[16.48163223 116.64942932]
[28.40239143 106.71589661]
[43.88747025 105.71993256]
[56.98254395 114.04451752]
[70.88510132 108.41255951]
[70.41705322 93.41986847]
[56.19027710 88.66605377]
[41.96349716 83.91223907]
[24.04607201 88.02875519]
[12.89474583 74.51402283]
[-1.42785120 70.05720520]
[-15.75044823 65.60039520]
[-28.80872917 74.20360565]
[-44.33594894 72.34900665]
[-55.00062180 60.91228485]
[-55.76722336 45.29350281]
[-46.27378464 32.86737442]
[-31.00281715 29.50114059]
[-17.16480446 36.78423309]
[-11.29363251 51.27779388]
[3.02896452 55.73461151]
[17.35156250 60.19142532]
[28.24384117 54.83740234]
[40.24110413 58.48221970]
[46.71731186 69.68545532]
[60.94409180 74.43927002]
[75.17086792 79.19308472]
[93.54336548 72.46566010]
[109.69207001 77.86074829]
[119.67479706 66.66497803]
[129.65751648 55.46921539]
[139.64024353 44.27344894]
[149.62297058 33.07768250]
[159.60569763 21.88191605]
[169.58842468 10.68615055]
[179.57115173 -0.50961566]
[165.19264221 3.76338530]
[150.19549561 3.47125983]
[135.99429321 -1.35843694]
[123.92858124 -10.27014446]
[115.13644409 -22.42326736]
[110.44721222 -36.67146301]
[110.30318451 -51.67077255]
[114.71794891 -66.00638580]
[123.27509308 -78.32609558]
[135.16744995 -87.46785736]
[149.27330017 -92.56935883]
[164.26206970 -93.14941406]
[178.71998596 -89.15330505]
[191.28327942 -80.95796967]
[200.76692200 -69.33641815]
[206.27639771 -55.38486481]
[207.29199219 -40.41928864]
[203.71791077 -25.85130692]
[195.89118958 -13.05490780]
[209.27746582 -19.82302284]
[221.88859558 -27.94456482]
[233.58822632 -37.33172607]
[245.28784180 -46.71888733]
[256.98745728 -56.10605240]
[268.68710327 -65.49320984]
[280.38671875 -74.88037109]
[291.88851929 -84.50890350]
[303.18753052 -94.37462616]
[314.48654175 -104.24034882]
[322.44085693 -119.21248627]
[339.02984619 -115.71372223]
[340.26010132 -98.80446625]
[324.35226440 -92.94134521]
[313.05325317 -83.07562256]
[301.75424194 -73.20989227]
[300.54446411 -68.52887726]
[296.34213257 -64.58279419]
[289.77386475 -63.18075180]
[278.07424927 -53.79359055]
[266.37463379 -44.40642548]
[254.67500305 -35.01926422]
[242.97538757 -25.63210297]
[231.27575684 -16.24494171]
[246.27571106 -16.28495216]
[259.35400391 -8.93931675]
[267.12533569 3.89057231]
[267.57818604 18.88373566]
[260.59527588 32.15923691]
[247.98413086 40.28075790]
[233.00910950 41.14606476]
[219.54644775 34.53117371]
[211.08091736 22.14833069]
[209.80378723 7.20279741]
[216.04557800 -6.43673801]
[202.65930176 0.33137661]
[190.76692200 9.47311115]
[180.78419495 20.66887665]
[170.80146790 31.86464310]
[160.81874084 43.06040955]
[150.83601379 54.25617599]
[140.85328674 65.45194244]
[130.87055969 76.64770508]
[120.88783264 87.84347534]
[122.58354187 108.60617828]
[107.50000000 122.97460938]
[107.50000000 137.97460938]
[107.50000000 152.97460938]
[107.50000000 167.97460938]
[107.50000000 182.97460938]
[107.50000000 197.97460938]
[107.50000000 212.97460938]
[107.50000000 227.97460938]
[107.50000000 242.97460938]
[107.50000000 257.97460938]
[107.50000000 272.97460938]
[122.03988647 277.03591919]
[134.94427490 284.87042236]
[145.25555420 295.89675903]
[152.20857239 309.29669189]
[155.28736877 324.07586670]
[154.26348877 339.13754272]
[149.21287537 353.36404419]
[140.51036072 365.69973755]
[128.80169678 375.22915649]
[114.95575714 381.24517822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 34]
[24 33]
[35 56]
[36 55]
[37 54]
[39 51]
[40 50]
[41 49]
[58 128]
[59 127]
[60 126]
[61 125]
[62 124]
[63 123]
[64 122]
[65 121]
[84 120]
[85 119]
[86 108]
[87 107]
[88 106]
[89 105]
[90 104]
[91 103]
[92 100]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
