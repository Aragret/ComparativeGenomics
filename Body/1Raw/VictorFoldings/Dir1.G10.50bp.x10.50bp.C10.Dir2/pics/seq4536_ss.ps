%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUAGGACUGGGGGGGGGGAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUxxxxxxxxxxUCCAAACAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUCCCCCCCCCCUUCCUAGGACU\
) } def
/len { sequence length } bind def

/coor [
[86.65012360 541.66607666]
[72.62817383 536.11303711]
[60.42821884 527.24670410]
[50.81715012 515.62438965]
[44.39912415 501.97671509]
[41.57758713 487.16152954]
[42.52990341 472.11013794]
[47.19620895 457.76873779]
[55.28317261 445.03875732]
[66.28244781 434.72048950]
[79.50260925 427.46252441]
[94.11261749 423.72109985]
[94.11261749 408.72109985]
[94.11261749 393.72109985]
[94.11261749 378.72109985]
[94.11261749 363.72109985]
[94.11261749 348.72109985]
[94.11261749 333.72109985]
[94.11261749 318.72109985]
[94.11261749 303.72109985]
[94.11261749 288.72109985]
[94.11261749 273.72109985]
[93.95862579 258.72186279]
[93.65064240 243.72503662]
[93.34266663 228.72819519]
[85.34568787 216.16247559]
[92.79801178 202.20634460]
[84.27127075 193.57171631]
[83.92769623 181.03962708]
[92.50000000 171.34843445]
[92.50000000 156.34843445]
[92.50000000 141.34843445]
[86.09643555 139.65644836]
[80.03825378 136.97933960]
[74.47595215 133.38360596]
[69.54769897 128.95858765]
[65.37592316 123.81420135]
[62.06426239 118.07823181]
[59.69497681 111.89317322]
[58.32691956 105.41267395]
[57.99408340 98.79771423]
[58.70473099 92.21261597]
[60.44121170 85.82097626]
[47.45082855 78.32097626]
[34.46044922 70.82097626]
[21.47006798 63.32097626]
[8.47968578 55.82097626]
[-4.51069498 48.32097626]
[-20.31687737 51.06763840]
[-32.22320557 40.31501389]
[-31.09616089 24.31159592]
[-17.80031776 15.33383942]
[-2.53510857 20.26870918]
[2.98930502 35.33059692]
[15.97968578 42.83059692]
[28.97006798 50.33059692]
[41.96044922 57.83059692]
[54.95082855 65.33059692]
[67.94120789 72.83059692]
[88.08547211 59.70128250]
[112.13056183 59.76578522]
[118.95413208 46.40768433]
[125.77770996 33.04958725]
[113.34276581 24.62629318]
[102.03723145 14.73870087]
[92.03249359 3.53670216]
[83.48021698 -8.80988312]
[76.51004791 -22.11388397]
[71.22766876 -36.17361450]
[67.71314240 -50.77593613]
[66.01975250 -65.69947815]
[66.17317963 -80.71800232]
[68.17108917 -95.60382843]
[71.98319244 -110.13130188]
[77.55170441 -124.08018494]
[84.79220581 -137.23901367]
[93.59493256 -149.40830994]
[103.82643127 -160.40357971]
[115.33160400 -170.05813599]
[127.93603516 -178.22564697]
[141.44863892 -184.78225708]
[155.66456604 -189.62858582]
[170.36831665 -192.69117737]
[185.33697510 -193.92358398]
[200.34362793 -193.30712891]
[215.16076660 -190.85115051]
[229.56378174 -186.59289551]
[243.33433533 -180.59690857]
[256.26364136 -172.95410156]
[268.15570068 -163.78031921]
[278.83026123 -153.21463013]
[288.12545776 -141.41723633]
[295.90042114 -128.56695557]
[302.03723145 -114.85859680]
[306.44290161 -100.49998474]
[309.05065918 -85.70879364]
[309.82089233 -70.70925140]
[308.74200439 -55.72874451]
[305.83029175 -40.99437332]
[301.12994385 -26.72951126]
[294.71218872 -13.15040779]
[286.67434692 -0.46291810]
[277.13821411 11.14061832]
[266.24841309 21.48429298]
[254.16999817 30.41130257]
[241.08607483 37.78631210]
[227.19500732 43.49752045]
[212.70738220 47.45834351]
[197.84280396 49.60874176]
[182.82664490 49.91611099]
[167.88653564 48.37579346]
[153.24894714 45.01114273]
[139.13580322 39.87316132]
[132.31224060 53.23125839]
[125.48865509 66.58936310]
[136.17214966 78.61032867]
[141.55786133 93.76404572]
[140.85697937 109.83107758]
[134.17216492 124.45824432]
[122.48247528 135.50325012]
[107.50000000 141.34843445]
[107.50000000 156.34843445]
[107.50000000 171.34843445]
[117.08235931 187.03947449]
[107.79484558 201.89837646]
[115.81385803 215.53677368]
[108.33950806 228.42022705]
[108.64748383 243.41705322]
[108.95545959 258.41390991]
[112.27718353 266.99072266]
[109.11261749 273.72109985]
[109.11261749 288.72109985]
[109.11261749 303.72109985]
[109.11261749 318.72109985]
[109.11261749 333.72109985]
[109.11261749 348.72109985]
[109.11261749 363.72109985]
[109.11261749 378.72109985]
[109.11261749 393.72109985]
[109.11261749 408.72109985]
[109.11261749 423.72109985]
[123.72263336 427.46252441]
[136.94279480 434.72048950]
[147.94206238 445.03875732]
[156.02903748 457.76873779]
[160.69534302 472.11013794]
[161.64765930 487.16152954]
[158.82611084 501.97671509]
[152.40809631 515.62438965]
[142.79702759 527.24670410]
[130.59706116 536.11303711]
[116.57511902 541.66607666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 129]
[24 128]
[25 127]
[27 125]
[30 123]
[31 122]
[32 121]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
[48 54]
[61 115]
[62 114]
[63 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
