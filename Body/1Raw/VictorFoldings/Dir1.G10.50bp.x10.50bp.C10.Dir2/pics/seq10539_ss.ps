%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCAUUACCGGGGGGGGGGGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACAUCAGAUUGUGAAUCxxxxxxxxxxCUAGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCAAAUCUCCACCUCCCCCCCCCCCCAUCAUCACC\
) } def
/len { sequence length } bind def

/coor [
[61.52174377 445.39633179]
[47.67580414 439.38031006]
[35.96714401 429.85089111]
[27.26461983 417.51522827]
[22.21401787 403.28869629]
[21.19012642 388.22702026]
[24.26892471 373.44784546]
[31.22194672 360.04794312]
[41.53322983 349.02160645]
[54.43761063 341.18710327]
[68.97750092 337.12576294]
[68.97750092 322.12576294]
[68.97750092 307.12576294]
[68.97750092 292.12576294]
[68.97750092 277.12576294]
[68.97750092 262.12576294]
[68.97750092 247.12577820]
[68.97750092 232.12577820]
[68.97750092 217.12577820]
[68.97750092 202.12577820]
[68.97750092 187.12577820]
[68.82146454 172.12658691]
[68.50940704 157.12983704]
[68.19734955 142.13308716]
[56.21051788 133.11555481]
[41.71492004 136.97271729]
[27.21932411 140.82986450]
[21.75924110 155.35458374]
[8.78603172 163.86782837]
[-6.71184158 163.09609985]
[-18.77512932 153.33615112]
[-22.76525116 138.34086609]
[-17.14792442 123.87624359]
[-4.08312607 115.50422668]
[11.40546322 116.44403076]
[23.36216545 126.33427429]
[37.85776138 122.47711182]
[52.35335922 118.61995697]
[53.13214874 111.16049957]
[38.21326065 109.60268402]
[39.77130127 94.68382263]
[54.68972778 96.24158478]
[55.46852112 88.78212738]
[42.08223343 82.01401520]
[28.69594955 75.24590302]
[15.30966473 68.47778320]
[-0.31988883 72.09671021]
[-12.80415249 62.02085876]
[-12.56626797 45.97956848]
[0.21128087 36.27834320]
[15.72665215 40.35913086]
[22.07777977 55.09149933]
[35.46406555 61.85961533]
[48.85034943 68.62773132]
[62.23663330 75.39584351]
[75.21136475 67.39733887]
[88.87330627 64.87947083]
[101.19275665 67.29606628]
[110.60478973 73.42755890]
[119.62231445 61.44072342]
[128.63984680 49.45389175]
[137.65737915 37.46706009]
[145.77891541 24.85593033]
[152.96142578 11.68734837]
[160.14393616 -1.48123419]
[167.32644653 -14.64981651]
[174.50895691 -27.81839943]
[181.69146729 -40.98698044]
[169.92819214 -51.02354813]
[160.49987793 -63.27260971]
[153.81278992 -77.20248413]
[150.15434265 -92.20915222]
[149.68060303 -107.64241791]
[152.40975952 -122.83412170]
[158.22138977 -137.12702942]
[166.86174011 -149.90328979]
[177.95481873 -160.61111450]
[191.01882935 -168.78866577]
[205.48696899 -174.08392334]
[220.73213196 -176.26982117]
[236.09402466 -175.25407410]
[250.90779114 -171.08296204]
[257.81478882 -184.39811707]
[264.72180176 -197.71327209]
[261.26565552 -213.37962341]
[271.47082520 -225.75840759]
[287.50875854 -225.35365295]
[297.07653809 -212.47589111]
[292.83459473 -197.00379944]
[278.03695679 -190.80627441]
[271.12994385 -177.49111938]
[264.22296143 -164.17596436]
[275.58016968 -155.04727173]
[284.93066406 -143.86543274]
[291.91000366 -131.06312561]
[296.24566650 -117.13626099]
[297.76751709 -102.62471771]
[296.41455078 -88.09146118]
[292.23730469 -74.10065460]
[285.39605713 -61.19582748]
[276.15457153 -49.87869263]
[264.86996460 -40.58967972]
[251.97891235 -33.69078064]
[237.98077393 -29.45144463]
[223.41822815 -28.03806496]
[208.85620117 -29.50743484]
[194.86004639 -33.80447388]
[187.67753601 -20.63589096]
[180.49502563 -7.46730804]
[173.31251526 5.70127487]
[166.13000488 18.86985779]
[158.94749451 32.03844070]
[173.44459534 28.18694115]
[187.09912109 34.39612198]
[193.72544861 47.85316086]
[190.32176208 62.46189117]
[178.42999268 71.60440826]
[163.43721008 71.13907623]
[152.13529968 61.27667618]
[149.64421082 46.48458862]
[140.62667847 58.47142029]
[131.60914612 70.45825195]
[122.59162140 82.44508362]
[133.34426880 107.12700653]
[118.59666443 134.94413757]
[83.19410706 141.82102966]
[83.50615692 156.81777954]
[83.81821442 171.81452942]
[87.14307404 180.39340210]
[83.97750092 187.12577820]
[83.97750092 202.12577820]
[83.97750092 217.12577820]
[83.97750092 232.12577820]
[83.97750092 247.12577820]
[83.97750092 262.12576294]
[83.97750092 277.12576294]
[83.97750092 292.12576294]
[83.97750092 307.12576294]
[83.97750092 322.12576294]
[83.97750092 337.12576294]
[98.51738739 341.18710327]
[111.42176819 349.02160645]
[121.73304749 360.04794312]
[128.68606567 373.44784546]
[131.76487732 388.22702026]
[130.74098206 403.28869629]
[125.69037628 417.51522827]
[116.98785400 429.85089111]
[105.27919006 439.38031006]
[91.43325043 445.39633179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 128]
[23 127]
[24 126]
[25 38]
[26 37]
[27 36]
[43 55]
[44 54]
[45 53]
[46 52]
[59 123]
[60 122]
[61 121]
[62 120]
[63 112]
[64 111]
[65 110]
[66 109]
[67 108]
[68 107]
[82 92]
[83 91]
[84 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
