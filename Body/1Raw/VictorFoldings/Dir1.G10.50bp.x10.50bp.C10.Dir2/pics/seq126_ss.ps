%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUUAUUUAGGGGGGGGGGUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGUUAxxxxxxxxxxUUUGAAUCAACACAACCACCCACAGCCUAAUUAUUAGCAUCAUCCCUCUACCCCCCCCCCCUAUUUUUUA\
) } def
/len { sequence length } bind def

/coor [
[90.23393250 652.80676270]
[76.38799286 646.79077148]
[64.67932892 637.26135254]
[55.97680664 624.92565918]
[50.92620468 610.69915771]
[49.90231323 595.63745117]
[52.98110962 580.85827637]
[59.93413162 567.45837402]
[70.24541473 556.43200684]
[83.14979553 548.59753418]
[97.68968201 544.53619385]
[97.68968201 529.53619385]
[97.68968201 514.53619385]
[97.68968201 499.53622437]
[97.68968201 484.53622437]
[97.68968201 469.53622437]
[97.68968201 454.53622437]
[97.68968201 439.53622437]
[97.68968201 424.53622437]
[97.68968201 409.53622437]
[97.68968201 394.53622437]
[82.61918640 391.41757202]
[68.51506042 385.24560547]
[55.98881912 376.28533936]
[45.58406448 364.92276001]
[37.75294113 351.64819336]
[32.83646011 337.03509521]
[31.04966354 321.71533203]
[32.47222137 306.35177612]
[37.04487610 291.60977173]
[44.57190323 278.12814331]
[54.72950363 266.49166870]
[67.07971191 257.20562744]
[81.08930206 250.67382812]
[96.15278625 247.18119812]
[95.84072876 232.18443298]
[95.52867126 217.18768311]
[95.21661377 202.19093323]
[94.74857330 187.19824219]
[94.12459564 172.21122742]
[91.23060608 168.33819580]
[90.78263855 162.59097290]
[93.79955292 156.59048462]
[93.79955292 141.59048462]
[93.79955292 126.59049225]
[93.79955292 111.59049225]
[76.41900635 111.96102905]
[60.65557098 94.42577362]
[50.90791702 83.02474976]
[41.16026688 71.62373352]
[31.41261292 60.22270966]
[21.66496086 48.82168961]
[11.91730881 37.42066956]
[2.16965675 26.01964760]
[-7.57799530 14.61862564]
[-17.32564735 3.21760488]
[-32.95894241 -1.73538244]
[-36.22145081 -17.80672646]
[-23.75698471 -28.46360397]
[-8.38791561 -22.74313545]
[-5.92462635 -6.53004694]
[3.82302570 4.87097406]
[13.57067776 16.27199554]
[23.31833076 27.67301559]
[33.06598282 39.07403564]
[42.81363297 50.47505951]
[52.56128693 61.87607956]
[62.30893707 73.27709961]
[72.05658722 84.67812347]
[79.53063202 84.05467987]
[76.44220734 69.37607574]
[73.35377502 54.69746399]
[70.26535034 40.01885223]
[65.41608429 25.82432365]
[73.62624359 13.27070713]
[88.57432556 12.02379322]
[98.75090027 23.04365540]
[96.32035065 37.84550858]
[95.70647430 52.83294296]
[95.09259796 67.82037354]
[94.47872162 82.80780792]
[101.95276642 82.18437195]
[109.67684937 69.32596588]
[117.40093231 56.46756744]
[111.21255493 42.23789597]
[114.60289764 27.09572983]
[126.26831818 16.86354256]
[141.72322083 15.47581863]
[155.02487183 23.46616554]
[161.05851746 37.76213074]
[157.50410461 52.86662674]
[145.72837830 62.97166443]
[130.25933838 64.19165039]
[122.53524780 77.05005646]
[114.81116486 89.90845490]
[127.08848572 81.29060364]
[142.05499268 80.28879547]
[155.37135315 87.19348145]
[163.17665100 100.00274658]
[163.20785522 115.00271606]
[155.45590210 127.84434509]
[142.16839600 134.80436707]
[127.19784546 133.86482239]
[114.88478088 125.29812622]
[108.79955292 111.59049225]
[108.79955292 126.59049225]
[108.79955292 141.59048462]
[108.79955292 156.59048462]
[109.11161041 171.58724976]
[109.73558807 186.57426453]
[113.23820496 195.08210754]
[110.21337128 201.87887573]
[110.52542877 216.87562561]
[110.83747864 231.87239075]
[111.14953613 246.86914062]
[125.55225372 249.49952698]
[139.15521240 254.90051270]
[151.43124390 262.86071777]
[161.90498352 273.06954956]
[170.17137146 285.12942505]
[175.91117859 298.57125854]
[178.90348816 312.87261963]
[179.03405762 327.47811890]
[176.29978943 341.82089233]
[170.80870056 355.34472656]
[162.77572632 367.52554321]
[152.51420593 377.89166260]
[140.42376709 386.04223633]
[126.97469330 391.66250610]
[112.68968201 394.53622437]
[112.68968201 409.53622437]
[112.68968201 424.53622437]
[112.68968201 439.53622437]
[112.68968201 454.53622437]
[112.68968201 469.53622437]
[112.68968201 484.53622437]
[112.68968201 499.53622437]
[112.68968201 514.53619385]
[112.68968201 529.53619385]
[112.68968201 544.53619385]
[127.22956848 548.59753418]
[140.13395691 556.43200684]
[150.44523621 567.45837402]
[157.39825439 580.85827637]
[160.47705078 595.63745117]
[159.45317078 610.69915771]
[154.40255737 624.92565918]
[145.70004272 637.26135254]
[133.99137878 646.79077148]
[120.14543915 652.80676270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[35 115]
[36 114]
[37 113]
[38 112]
[39 110]
[40 109]
[43 108]
[44 107]
[45 106]
[46 105]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[82 95]
[83 94]
[84 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
