%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCAACUUAGGGGGGGGGGACUUGACCGCUCUGAGCUAAACCUAGCCCCAAACCCACUCCACCUUACUAxxxxxxxxxxAAGAGAAAUAAGGCCUACUUCACAAAGCGCCUUCCCCCGUAAAUGAUAUCCCCCCCCCCCAUCUCAACUUA\
) } def
/len { sequence length } bind def

/coor [
[86.45089722 494.33050537]
[72.96201324 487.59896851]
[61.47651672 477.83441162]
[52.66214752 465.60452271]
[47.03136444 451.62033081]
[44.91153717 436.69485474]
[46.42590332 421.69583130]
[51.48642731 407.49533081]
[59.79889297 394.91891479]
[70.88002777 384.69775391]
[84.08557892 377.42611694]
[98.64780426 373.52673340]
[98.33982849 358.52990723]
[98.03184509 343.53308105]
[97.72386932 328.53622437]
[97.41589355 313.53939819]
[97.10791779 298.54257202]
[96.79993439 283.54571533]
[96.49195862 268.54888916]
[96.18398285 253.55204773]
[95.87600708 238.55520630]
[95.56802368 223.55836487]
[79.26762390 217.79000854]
[66.37928772 206.21073914]
[58.87438583 190.55570984]
[57.91454697 173.18624878]
[63.67194748 156.73355103]
[75.29916382 143.70019531]
[91.05381775 136.07945251]
[89.82320404 121.13002014]
[74.90328979 93.36104584]
[64.79785156 82.27590942]
[54.69242096 71.19077301]
[44.58698654 60.10564423]
[32.34403229 51.43903351]
[18.53044891 45.59224701]
[4.14596748 41.33940125]
[-10.62614822 38.73467636]
[-25.39826584 36.12995529]
[-40.17037964 33.52523041]
[-55.38708496 39.63946915]
[-68.12178040 29.30701256]
[-65.27409363 13.15700531]
[-49.77349091 7.80319118]
[-37.56565857 18.75311661]
[-22.79354286 21.35783768]
[-8.02142620 23.96256065]
[6.75069046 26.56728363]
[-3.51258898 15.62812996]
[-7.63872480 1.20679104]
[-4.71464586 -13.50544071]
[4.61257887 -25.25290298]
[18.27893257 -31.43600655]
[33.26019669 -30.68649292]
[46.24116898 -23.17022514]
[54.34930420 -10.55047131]
[55.79035187 4.38014746]
[50.24542236 18.31764221]
[38.94155502 28.17779350]
[24.37723732 31.77866364]
[38.19081879 37.62545395]
[29.36961746 25.49341202]
[24.07794571 11.45780659]
[22.69400787 -3.47821403]
[25.31671524 -18.24714851]
[31.75861931 -31.79343414]
[41.55930710 -43.14889526]
[54.01830673 -51.50194168]
[68.24514771 -56.25556183]
[83.22302246 -57.07000732]
[97.88143158 -53.88706970]
[111.17271423 -46.93423843]
[122.14691925 -36.70844650]
[130.01969910 -23.94054604]
[134.22837830 -9.54307938]
[134.47215271 5.45493937]
[130.73359680 19.98157883]
[123.27991486 32.99859238]
[112.64383698 43.57563400]
[99.58554077 50.95674515]
[85.03831482 54.61438370]
[70.04188538 54.28713226]
[55.67211914 50.00020599]
[65.77755737 61.08534241]
[75.88298798 72.17047882]
[85.98842621 83.25560760]
[83.43376923 68.47475433]
[94.00381470 57.83172226]
[108.80190277 60.28461456]
[115.37267303 73.76885986]
[108.18553925 86.93499756]
[121.32717133 79.70330048]
[134.46881104 72.47159576]
[147.61044312 65.23989105]
[160.75205994 58.00819016]
[173.81875610 50.64195251]
[186.80914307 43.14195251]
[187.44047546 27.72751236]
[196.32395935 15.11452961]
[210.62489319 9.32776165]
[225.77992249 12.21374607]
[236.95310974 22.85157394]
[240.57914734 37.84675217]
[235.50096130 52.41437912]
[223.33900452 61.90597153]
[207.97410583 63.29280090]
[194.30914307 56.13233185]
[181.31875610 63.63233185]
[177.07238770 69.73810577]
[167.98376465 71.14982605]
[154.84213257 78.38152313]
[141.70050049 85.61322784]
[128.55886841 92.84493256]
[115.41724396 100.07662964]
[130.23184204 102.42771912]
[136.89517212 115.86647034]
[129.79881287 129.08166504]
[114.91564941 130.95027161]
[104.77263641 119.89940643]
[106.00325012 134.84884644]
[118.49785614 137.82009888]
[129.62728882 144.19329834]
[138.48870850 153.43972778]
[144.36657715 164.79806519]
[146.79040527 177.33708191]
[145.57246399 190.03193665]
[140.82223511 201.84802246]
[132.93663025 211.82521057]
[122.56690979 219.15589905]
[110.56486511 223.25039673]
[110.87284088 238.24722290]
[111.18082428 253.24406433]
[111.48880005 268.24090576]
[111.79677582 283.23773193]
[112.10475159 298.23458862]
[112.41272736 313.23141479]
[112.72071075 328.22824097]
[113.02868652 343.22509766]
[113.33666229 358.22192383]
[113.64463806 373.21878052]
[128.35467529 376.51699829]
[141.84764099 383.24035645]
[153.33905029 392.99795532]
[162.16084290 405.22250366]
[167.80009460 419.20327759]
[169.92897034 434.12747192]
[168.42369080 449.12738037]
[163.37178040 463.33096313]
[155.06694031 475.91241455]
[143.99200439 486.14028931]
[130.79086304 493.41992188]
[116.23101044 497.32812500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[29 120]
[30 119]
[31 86]
[32 85]
[33 84]
[34 83]
[35 61]
[36 60]
[37 48]
[38 47]
[39 46]
[40 45]
[91 114]
[92 113]
[93 112]
[94 111]
[95 110]
[96 108]
[97 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
