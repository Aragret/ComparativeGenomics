%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAUCCCCUUGGGGGGGGGGGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAxxxxxxxxxxGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAGGAGCUCCCCCCCCCCUAAACCCCCUU\
) } def
/len { sequence length } bind def

/coor [
[123.60273743 533.57116699]
[109.58078766 528.01818848]
[97.38083649 519.15185547]
[87.76976013 507.52954102]
[81.35173798 493.88183594]
[78.53019714 479.06665039]
[79.48251343 464.01525879]
[84.14881897 449.67385864]
[92.23578644 436.94387817]
[103.23506165 426.62561035]
[116.45522308 419.36764526]
[131.06523132 415.62619019]
[131.06523132 400.62619019]
[131.06523132 385.62619019]
[131.06523132 370.62619019]
[131.06523132 355.62619019]
[131.06523132 340.62619019]
[131.06523132 325.62619019]
[131.06523132 310.62619019]
[131.06523132 295.62619019]
[131.06523132 280.62619019]
[131.06523132 265.62619019]
[130.29557800 250.64596558]
[128.75828552 235.72494507]
[117.71517944 222.12001038]
[125.29666138 205.37033081]
[123.45333862 190.48402405]
[121.61001587 175.59771729]
[119.76669312 160.71141052]
[117.92337036 145.82508850]
[113.95571136 139.53463745]
[116.19825745 130.61462402]
[114.66096497 115.69360352]
[105.60494995 119.94423676]
[95.96736908 119.54570770]
[87.91520691 114.91699982]
[83.10801697 107.39160156]
[82.35835266 98.85256958]
[69.21672058 91.62086487]
[56.07508850 84.38916016]
[42.93346024 77.15746307]
[29.79182625 69.92575836]
[16.65019608 62.69405365]
[3.50856400 55.46235275]
[-9.63306713 48.23064804]
[-22.77469826 40.99894714]
[-35.91633224 33.76724243]
[-51.02316284 38.41042328]
[-64.94922638 30.93777847]
[-69.43242645 15.78269958]
[-61.81296539 1.93642306]
[-46.61133194 -2.38629889]
[-32.84638596 5.37912750]
[-28.68462753 20.62561226]
[-15.54299641 27.85731506]
[-2.40136480 35.08901596]
[10.74026680 42.32072067]
[23.88189888 49.55242157]
[37.02352905 56.78412628]
[50.16516113 64.01583099]
[63.30679321 71.24752808]
[76.44842529 78.47923279]
[89.59005737 85.71093750]
[105.34427643 81.16592407]
[119.87828064 91.87061310]
[127.51125336 78.95791626]
[114.26560211 85.99729156]
[99.83277130 90.08303070]
[84.86276245 91.03112793]
[70.02979279 88.79887390]
[56.00188828 83.48682404]
[43.41083145 75.33419037]
[32.82368851 64.70816803]
[24.71727180 52.08731461]
[19.45667458 38.04003143]
[17.27881622 23.19897652]
[18.28178215 8.23254490]
[22.42040062 -6.18521595]
[29.50828362 -19.40497017]
[39.22620773 -30.83134079]
[51.13651276 -39.94971466]
[64.70278168 -46.34942245]
[79.31403351 -49.74224472]
[94.31222534 -49.97537613]
[109.02187347 -47.03831482]
[122.78049469 -41.06334305]
[134.96844482 -32.31954956]
[145.03680420 -21.20073891]
[152.53213501 -8.20766354]
[157.11686707 6.07450199]
[158.58451843 21.00252914]
[156.86897278 35.90410614]
[152.04751587 50.10810089]
[144.33891296 62.97264099]
[157.62625122 56.01228333]
[166.26046753 42.75479889]
[181.12486267 43.70291901]
[194.41220093 36.74256516]
[207.69955444 29.78220749]
[220.98689270 22.82185173]
[227.12501526 7.99946976]
[242.57995605 3.69547462]
[255.49600220 13.21152306]
[255.96507263 29.24771690]
[243.62733459 39.50246048]
[227.94725037 36.10919189]
[214.65989685 43.06954956]
[201.37255859 50.02990723]
[188.08522034 56.99026108]
[180.40139771 69.74989319]
[164.58660889 69.29962921]
[151.29927063 76.25997925]
[140.42395020 86.59088135]
[132.79098511 99.50358582]
[129.58198547 114.15631104]
[131.11927795 129.07733154]
[132.80967712 143.98176575]
[134.65299988 158.86807251]
[136.49632263 173.75437927]
[138.33964539 188.64070129]
[140.18296814 203.52700806]
[149.88124084 212.09130859]
[151.08032227 224.57063293]
[143.67929077 234.18765259]
[145.21658325 249.10867310]
[156.79066467 239.56713867]
[171.50889587 242.46083069]
[178.60926819 255.67388916]
[172.89994812 269.54486084]
[158.55561829 273.93121338]
[146.06523132 265.62619019]
[146.06523132 280.62619019]
[146.06523132 295.62619019]
[146.06523132 310.62619019]
[146.06523132 325.62619019]
[146.06523132 340.62619019]
[146.06523132 355.62619019]
[146.06523132 370.62619019]
[146.06523132 385.62619019]
[146.06523132 400.62619019]
[146.06523132 415.62619019]
[160.67524719 419.36764526]
[173.89540100 426.62561035]
[184.89468384 436.94387817]
[192.98164368 449.67385864]
[197.64794922 464.01525879]
[198.60026550 479.06665039]
[195.77873230 493.88183594]
[189.36070251 507.52954102]
[179.74963379 519.15185547]
[167.54968262 528.01818848]
[153.52772522 533.57116699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 125]
[24 124]
[26 121]
[27 120]
[28 119]
[29 118]
[30 117]
[32 116]
[33 115]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[65 114]
[66 113]
[94 112]
[95 111]
[97 109]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
