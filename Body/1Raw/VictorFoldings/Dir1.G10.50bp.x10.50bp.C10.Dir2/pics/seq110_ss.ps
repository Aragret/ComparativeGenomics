%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAUCCUAGGGGGGGGGGUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGxxxxxxxxxxCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCCCCCCCCCCCUAAUCCUA\
) } def
/len { sequence length } bind def

/coor [
[96.33110046 427.76376343]
[82.48516846 421.74774170]
[70.77650452 412.21832275]
[62.07397842 399.88262939]
[57.02337646 385.65612793]
[55.99948502 370.59445190]
[59.07828522 355.81527710]
[66.03130341 342.41534424]
[76.34259033 331.38900757]
[89.24697113 323.55450439]
[103.78685760 319.49319458]
[103.78685760 304.49319458]
[103.78685760 289.49319458]
[103.78685760 274.49319458]
[103.78685760 259.49319458]
[103.78685760 244.49319458]
[103.78685760 229.49319458]
[103.78685760 214.49319458]
[103.78685760 199.49319458]
[103.78685760 184.49319458]
[101.05648804 180.50314331]
[100.84798431 174.74224854]
[104.11190033 168.87246704]
[104.73587799 153.88545227]
[105.35985565 138.89843750]
[84.97745514 134.48265076]
[70.56986237 120.66342163]
[65.76424408 102.20632935]
[50.94648361 99.87522888]
[36.12872696 97.54412079]
[21.31096840 95.21302032]
[14.86701965 108.87509155]
[4.83401442 120.16736603]
[-7.97471666 128.17443848]
[-22.52082634 132.24719238]
[-37.62512970 132.05548096]
[-52.06318283 127.61484528]
[-64.66456604 119.28526306]
[-74.40773010 107.74198151]
[-80.50284576 93.92075348]
[-82.45581818 78.94201660]
[-80.10831451 64.02002716]
[-73.65064240 50.36443329]
[-63.60630035 39.08224106]
[-50.78953171 31.08804893]
[-36.23933792 27.02990723]
[-21.13523483 27.23679161]
[-6.70164871 31.69193077]
[5.89135647 40.03416443]
[15.62292194 51.58723068]
[21.70415306 65.41456604]
[23.64207268 80.39526367]
[38.45983124 82.72636414]
[53.27758789 85.05747223]
[68.09534454 87.38857269]
[73.37458038 78.36571503]
[81.12603760 71.35163879]
[90.62996674 66.99761200]
[101.00392914 65.70791626]
[104.71009064 51.17297745]
[108.41624451 36.63804245]
[112.12240601 22.10310555]
[115.82856750 7.56817007]
[103.24163055 -1.18246269]
[96.47614288 -16.65019798]
[98.97028351 -34.92046738]
[111.56781006 -50.45459747]
[111.87986755 -65.45134735]
[112.19192505 -80.44810486]
[112.50398254 -95.44485474]
[99.07183838 -102.78217316]
[90.59774017 -115.52768707]
[89.02897644 -130.75259399]
[94.72603607 -144.95829773]
[106.37976837 -154.88044739]
[121.31224060 -158.23899841]
[136.09207153 -154.26219177]
[147.32298279 -143.86384583]
[152.42416382 -129.43344116]
[150.22341919 -114.28698730]
[141.22647095 -101.90500641]
[127.50073242 -95.13279724]
[127.18867493 -80.13604736]
[126.87662506 -65.13928986]
[126.56456757 -50.14253998]
[133.57292175 -47.47178268]
[147.58963013 -42.13027191]
[154.59799194 -39.45951462]
[164.34564209 -50.86053467]
[174.09329224 -62.26155472]
[176.55657959 -78.47464752]
[191.92565918 -84.19511414]
[204.39012146 -73.53823853]
[201.12760925 -57.46689224]
[185.49432373 -52.51390457]
[175.74665833 -41.11288452]
[165.99900818 -29.71186256]
[163.30574036 -6.42983961]
[148.71124268 8.64397717]
[130.36351013 11.27433109]
[126.65734863 25.80926704]
[122.95118713 40.34420395]
[119.24502563 54.87913895]
[115.53886414 69.41407776]
[122.20717621 72.92773438]
[128.07029724 77.90384674]
[132.80622864 84.15537262]
[136.13697815 91.42425537]
[137.84417725 99.39186096]
[137.78228760 107.69290924]
[135.88845825 115.93218231]
[150.46116638 119.48693848]
[159.74244690 107.41310120]
[173.13528442 100.16384125]
[188.31929016 98.99514771]
[202.66374207 104.10949707]
[213.68338013 114.62080383]
[219.46897888 128.70791626]
[219.01815796 143.93016052]
[212.40901184 157.65019226]
[200.78662109 167.49092102]
[186.16464233 171.74739075]
[171.07641602 169.68214417]
[158.13606262 161.65298462]
[149.58558655 149.05104065]
[146.90640259 134.05964661]
[132.33370972 130.50488281]
[120.34687042 139.52241516]
[119.72289276 154.50942993]
[119.09891510 169.49644470]
[118.78685760 184.49319458]
[118.78685760 199.49319458]
[118.78685760 214.49319458]
[118.78685760 229.49319458]
[118.78685760 244.49319458]
[118.78685760 259.49319458]
[118.78685760 274.49319458]
[118.78685760 289.49319458]
[118.78685760 304.49319458]
[118.78685760 319.49319458]
[133.32675171 323.55450439]
[146.23112488 331.38900757]
[156.54240417 342.41534424]
[163.49543762 355.81527710]
[166.57423401 370.59445190]
[165.55033875 385.65612793]
[160.49974060 399.88262939]
[151.79721069 412.21832275]
[140.08854675 421.74774170]
[126.24261475 427.76376343]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 130]
[24 129]
[25 128]
[28 55]
[29 54]
[30 53]
[31 52]
[59 104]
[60 103]
[61 102]
[62 101]
[63 100]
[67 85]
[68 84]
[69 83]
[70 82]
[88 97]
[89 96]
[90 95]
[111 127]
[112 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
