%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGAAUAAUCUGGGGGGGGGGCCCAUAUUGUAACUUACUACUCCGGAAAAAAAGAACCAUUUGGAUACAUAxxxxxxxxxxAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCCCCCCCCCCCGGACUAAUCU\
) } def
/len { sequence length } bind def

/coor [
[64.50057983 574.82385254]
[50.47863388 569.27081299]
[38.27867508 560.40447998]
[28.66760445 548.78216553]
[22.24958038 535.13446045]
[19.42804337 520.31927490]
[20.38035965 505.26791382]
[25.04666328 490.92651367]
[33.13362885 478.19653320]
[44.13290405 467.87826538]
[57.35306549 460.62030029]
[71.96307373 456.87884521]
[71.96307373 441.87884521]
[71.96307373 426.87884521]
[71.96307373 411.87884521]
[71.96307373 396.87884521]
[71.96307373 381.87884521]
[71.96307373 366.87884521]
[71.96307373 351.87884521]
[71.96307373 336.87884521]
[71.96307373 321.87884521]
[71.96307373 306.87884521]
[71.96307373 291.87884521]
[60.35467148 301.37860107]
[45.41128159 300.07666016]
[35.62063980 288.71252441]
[36.54375839 273.74096680]
[47.65631485 263.66567993]
[62.64645767 264.20938110]
[73.00018311 275.06399536]
[74.84350586 260.17767334]
[76.68682861 245.29136658]
[62.80528641 237.70645142]
[52.86333084 225.35316467]
[48.40021133 210.09709167]
[50.12489319 194.25674438]
[57.80361557 180.25119019]
[70.29109192 170.23065186]
[85.70123291 165.74639893]
[87.23852539 150.82537842]
[88.77581787 135.90435791]
[90.31311035 120.98334503]
[91.85040283 106.06233215]
[89.46746826 98.30580902]
[93.57550812 90.85185242]
[80.11740112 83.91609192]
[69.86351013 72.81520844]
[64.03722382 58.90209198]
[63.32394791 43.86343384]
[67.79048920 29.51520920]
[76.87932587 17.58342361]
[89.47814178 9.49646950]
[104.05592346 6.21415043]
[105.89924622 -8.67215729]
[99.91647339 -23.31855392]
[109.15916443 -34.99853516]
[111.00248718 -49.88484573]
[112.84580994 -64.77114868]
[114.68913269 -79.65746307]
[116.53245544 -94.54376984]
[118.37578583 -109.43007660]
[119.91307831 -124.35108948]
[121.14368439 -139.30052185]
[122.37429810 -154.24995422]
[107.95184326 -158.57275391]
[94.74349976 -165.80001831]
[83.32668304 -175.61581421]
[74.20048523 -187.59104919]
[67.76386261 -201.20220947]
[64.29820251 -215.85426331]
[63.95499802 -230.90670776]
[66.74925995 -245.70149231]
[72.55883789 -259.59185791]
[81.12976074 -271.97058105]
[92.08734131 -282.29653931]
[104.95256042 -290.11828613]
[119.16300201 -295.09393311]
[134.09745789 -297.00592041]
[149.10305786 -295.77066040]
[163.52380371 -291.44223022]
[176.72930908 -284.20974731]
[188.14225769 -274.38946533]
[197.26374817 -262.41064453]
[203.69502258 -248.79695129]
[207.15492249 -234.14352417]
[207.49220276 -219.09095764]
[204.69210815 -204.29727173]
[198.87707520 -190.40917969]
[190.30128479 -178.03382874]
[179.33964539 -167.71218872]
[166.47134399 -159.89549255]
[152.25894165 -154.92546082]
[137.32373047 -153.01934814]
[136.09312439 -138.06991577]
[134.86250305 -123.12047577]
[137.25433350 -118.92185974]
[136.99082947 -113.16699219]
[133.26208496 -107.58675385]
[131.41876221 -92.70043945]
[129.57543945 -77.81413269]
[127.73211670 -62.92782593]
[125.88879395 -48.04151917]
[124.04547119 -33.15521240]
[130.16009521 -19.57358360]
[120.78555298 -6.82883263]
[118.94223022 8.05747509]
[132.27911377 14.79637909]
[142.52490234 25.71210670]
[148.42889404 39.50040817]
[149.26080322 54.50472260]
[144.90092468 68.91519165]
[135.85702515 80.98697662]
[123.20516968 89.25151062]
[108.46181488 92.69517517]
[106.77141571 107.59962463]
[105.23412323 122.52063751]
[103.69683075 137.44165039]
[102.15953827 152.36267090]
[100.62224579 167.28369141]
[113.37177277 173.70294189]
[123.13645935 184.07380676]
[128.75350952 197.13140869]
[129.56423950 211.29281616]
[125.49131012 224.84883118]
[117.04555511 236.17039490]
[105.26202393 243.90423584]
[91.57313538 247.13468933]
[89.72981262 262.02099609]
[87.88648987 276.90731812]
[86.96307373 291.87884521]
[86.96307373 306.87884521]
[86.96307373 321.87884521]
[86.96307373 336.87884521]
[86.96307373 351.87884521]
[86.96307373 366.87884521]
[86.96307373 381.87884521]
[86.96307373 396.87884521]
[86.96307373 411.87884521]
[86.96307373 426.87884521]
[86.96307373 441.87884521]
[86.96307373 456.87884521]
[101.57308960 460.62030029]
[114.79325104 467.87826538]
[125.79252625 478.19653320]
[133.87948608 490.92651367]
[138.54579163 505.26791382]
[139.49810791 520.31927490]
[136.67657471 535.13446045]
[130.25854492 548.78216553]
[120.64747620 560.40447998]
[108.44751740 569.27081299]
[94.42557526 574.82385254]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[30 129]
[31 128]
[32 127]
[39 119]
[40 118]
[41 117]
[42 116]
[43 115]
[45 114]
[53 106]
[54 105]
[56 103]
[57 102]
[58 101]
[59 100]
[60 99]
[61 98]
[62 95]
[63 94]
[64 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
