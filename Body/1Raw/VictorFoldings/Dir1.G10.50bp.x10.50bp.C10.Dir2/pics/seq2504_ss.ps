%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUAGUAUAAGUAGGGGGGGGGGACAUGAAAACAUUCUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAxxxxxxxxxxGUGGUUUGACUAUUUCUGUAUGUCUCCAUCUAUUGAUGAGGGUCUUACUCCCCCCCCCCCUUUUAGUAUAAAUA\
) } def
/len { sequence length } bind def

/coor [
[72.77753448 394.74746704]
[59.14202881 388.38589478]
[46.95703125 379.55853271]
[36.66301346 368.58450317]
[28.63210297 355.86047363]
[23.15461159 341.84640503]
[20.42854500 327.04895020]
[20.55245018 312.00299072]
[23.52184868 297.25241089]
[29.22939873 283.33047485]
[37.46877289 270.74044800]
[47.94212723 259.93740845]
[60.27085495 251.31192017]
[74.00927734 245.17578125]
[88.66076660 241.75080872]
[88.06816864 226.76252747]
[87.47557068 211.77423096]
[86.88296509 196.78594971]
[86.29036713 181.79765320]
[85.69776917 166.80935669]
[85.10517120 151.82107544]
[84.51257324 136.83277893]
[83.91997528 121.84449768]
[79.68106079 107.45590210]
[72.05309296 94.54024506]
[64.42512512 81.62459564]
[56.79716110 68.70893860]
[49.16919327 55.79328537]
[35.32521820 50.01882553]
[20.78039360 53.68598175]
[6.23556900 57.35314178]
[-5.14763832 69.15799713]
[-20.99511337 64.94023132]
[-25.00433159 49.03871155]
[-13.05095387 37.81156540]
[2.56840992 42.80831528]
[17.11323547 39.14115906]
[31.65806007 35.47399902]
[32.32403183 28.00362396]
[17.70290184 31.35363770]
[9.99883175 18.48323441]
[19.85876656 7.17917776]
[33.65596771 13.06287670]
[34.32193756 5.59250307]
[20.65516090 -0.58966506]
[6.98838329 -6.77183294]
[-6.67839384 -12.95400143]
[-21.37599182 -7.14399481]
[-35.84363174 -13.50504112]
[-41.49792099 -28.26324463]
[-34.98427200 -42.66282272]
[-20.16711235 -48.16076279]
[-5.83720350 -41.49523544]
[-0.49622580 -26.62077904]
[13.17055130 -20.43861008]
[26.83732796 -14.25644207]
[40.50410461 -8.07427406]
[53.10234070 -9.71226311]
[63.42987823 -6.27217245]
[64.02247620 -21.26046181]
[64.61507416 -36.24875259]
[65.20767212 -51.23704147]
[65.05948639 -66.23631287]
[64.17087555 -81.20996857]
[63.28226852 -96.18362427]
[62.39366150 -111.15727997]
[61.50505066 -126.13093567]
[52.96380997 -139.44850159]
[59.93354797 -152.61178589]
[59.04493713 -167.58544922]
[58.15633011 -182.55909729]
[43.88671494 -187.87869263]
[33.01898956 -198.54698181]
[27.43605423 -212.71562195]
[28.10518456 -227.92984009]
[34.91044998 -241.55364990]
[46.67279816 -251.22665405]
[61.35433197 -255.27294922]
[76.41138458 -252.99148560]
[89.23522949 -244.77754211]
[97.60406494 -232.05424500]
[100.06793213 -217.02595520]
[96.19995117 -202.29644775]
[86.67028046 -190.41766357]
[73.12998199 -183.44770813]
[74.01859283 -168.47406006]
[74.90720367 -153.50039673]
[83.38488770 -141.25384521]
[76.47870636 -127.01954651]
[77.36731720 -112.04588318]
[78.25592804 -97.07222748]
[79.14453125 -82.09857178]
[80.03314209 -67.12491608]
[91.98072052 -76.19439697]
[106.56919098 -72.70490265]
[113.11965179 -59.21077728]
[106.83710480 -45.58985138]
[92.32043457 -41.81277466]
[80.19596100 -50.64444351]
[79.60336304 -35.65615463]
[79.01076508 -20.66786385]
[78.41816711 -5.67957354]
[96.98406982 21.74506187]
[62.08484650 48.16531754]
[69.71281433 61.08097076]
[77.34078217 73.99662781]
[84.96875000 86.91227722]
[92.59671783 99.82793427]
[83.14478302 86.59284973]
[91.17059326 65.44100189]
[119.32796478 54.10265350]
[134.23948669 52.47578812]
[149.15100098 50.84892273]
[164.06251526 49.22205734]
[176.96453857 39.09931946]
[192.07917786 45.46168137]
[193.85778809 61.76408768]
[180.47068787 71.23602295]
[165.68937683 64.13357544]
[150.77786255 65.76043701]
[135.86634827 67.38730621]
[120.95483398 69.01416779]
[119.92081451 76.44255066]
[117.85279083 91.29930878]
[116.81877136 98.72768402]
[130.71911621 104.36509705]
[144.61946106 110.00251007]
[161.56980896 110.35221863]
[165.92608643 126.73693848]
[151.38761902 135.45872498]
[138.98205566 123.90285492]
[125.08170319 118.26544189]
[111.18135834 112.62802887]
[98.90826416 121.25189209]
[99.50086212 136.24018860]
[100.09346008 151.22846985]
[100.68605804 166.21676636]
[101.27865601 181.20504761]
[101.87126160 196.19334412]
[102.46385956 211.18164062]
[103.05645752 226.16992188]
[103.64905548 241.15821838]
[118.52521515 243.41574097]
[132.70521545 248.44805908]
[145.67645264 256.07324219]
[156.97001648 266.01565552]
[166.17768860 277.91589355]
[172.96656799 291.34375000]
[177.09127808 305.81384277]
[178.40270996 320.80303955]
[176.85342407 335.76956177]
[172.49946594 350.17230225]
[165.49819946 363.49069214]
[156.10273743 375.24319458]
[144.65270996 385.00503540]
[131.56202698 392.42327881]
[117.30390930 397.22979736]
[102.39377594 399.25082397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 108]
[25 107]
[26 106]
[27 105]
[28 104]
[29 38]
[30 37]
[31 36]
[44 57]
[45 56]
[46 55]
[47 54]
[59 102]
[60 101]
[61 100]
[62 99]
[63 93]
[64 92]
[65 91]
[66 90]
[67 89]
[69 87]
[70 86]
[71 85]
[111 122]
[112 121]
[113 120]
[114 119]
[125 133]
[126 132]
[127 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
