%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUACCCUAGGGGGGGGGGGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCAUAUCAACAAUAGGGUUUACGxxxxxxxxxxCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGCCCCCCCCCCGUUACCCAAGG\
) } def
/len { sequence length } bind def

/coor [
[52.63666534 340.98840332]
[42.10449219 330.19375610]
[34.58843231 317.11859131]
[30.56095695 302.58483887]
[30.27523422 287.50607300]
[33.74922943 272.83016968]
[40.76455688 259.47967529]
[50.88023376 248.29377747]
[63.46037674 239.97567749]
[77.71418762 235.04824829]
[76.48357391 220.09880066]
[75.25296021 205.14936829]
[74.02234650 190.19993591]
[72.79174042 175.25050354]
[71.56112671 160.30107117]
[70.33051300 145.35163879]
[69.09989929 130.40220642]
[83.73401642 89.96125031]
[76.36778259 76.89455414]
[69.00154114 63.82786179]
[61.63529968 50.76116562]
[54.26906204 37.69446945]
[53.18486786 52.65523529]
[46.55242920 66.10926056]
[35.34607315 76.08010101]
[21.21205521 81.10299683]
[6.22671080 80.44007874]
[-7.40855837 74.18872070]
[-17.69068336 63.26727676]
[-23.10918236 49.28014755]
[-22.86805916 34.28208542]
[-17.00273705 20.47636223]
[-6.37484980 9.89108753]
[7.45432568 4.08127642]
[22.45323563 3.90041089]
[36.41848373 9.37506008]
[47.29812241 19.70040512]
[43.93886566 5.08139849]
[40.57960510 -9.53760910]
[37.22034836 -24.15661621]
[33.86108780 -38.77562332]
[30.50182915 -53.39463043]
[27.14257050 -68.01364136]
[16.61765099 -75.53890991]
[14.14592648 -87.82963562]
[20.52236366 -98.15451813]
[17.46396828 -112.83941650]
[14.40557289 -127.52431488]
[7.17387056 -140.66595459]
[-3.59480858 -151.10795593]
[-18.88831329 -155.16001892]
[-22.63917732 -169.57461548]
[-33.40785599 -180.01661682]
[-44.17653656 -190.45863342]
[-60.17527008 -191.65026855]
[-69.09927368 -204.98225403]
[-64.10282135 -220.22741699]
[-49.01875687 -225.69097900]
[-35.41828537 -217.18176270]
[-33.73452377 -201.22731018]
[-22.96584702 -190.78529358]
[-12.19716740 -180.34329224]
[2.32608986 -177.03810120]
[6.84720087 -161.87663269]
[17.61587906 -151.43463135]
[31.81363297 -156.27444458]
[33.96221161 -171.11976624]
[36.11079025 -185.96508789]
[38.25936890 -200.81040955]
[24.45115280 -206.91252136]
[12.80204296 -216.51464844]
[4.17648315 -228.90425110]
[-0.78545350 -243.16194153]
[-1.71555805 -258.22970581]
[1.45518923 -272.98941040]
[8.49149799 -286.34579468]
[18.87122726 -297.30770874]
[31.82413101 -305.06173706]
[46.38901901 -309.03244019]
[61.48508072 -308.92520142]
[75.99208832 -304.74798584]
[88.83352661 -296.81069946]
[99.05646515 -285.70242310]
[105.90230560 -272.24743652]
[108.86304474 -257.44415283]
[107.71896362 -242.39112854]
[102.55496216 -228.20536804]
[93.75425720 -215.93955994]
[81.96990204 -206.50390625]
[68.07638550 -200.59858704]
[53.10469055 -198.66183472]
[50.95611191 -183.81651306]
[48.80753326 -168.97119141]
[46.65895462 -154.12586975]
[29.09047127 -130.58271790]
[32.14886475 -115.89781189]
[35.20726013 -101.21291351]
[47.58653259 -88.81137848]
[41.76157761 -71.37289429]
[45.12083817 -56.75389099]
[48.48009491 -42.13488388]
[51.83935547 -27.51587486]
[55.19861221 -12.89686775]
[58.55787277 1.72213972]
[61.91712952 16.34114647]
[67.33575439 30.32822990]
[74.70199585 43.39492416]
[82.06823730 56.46162033]
[89.43447113 69.52831268]
[96.80071259 82.59500885]
[96.55786896 67.59697723]
[105.54656219 55.58850861]
[120.00518036 51.59495163]
[133.88301086 57.28754807]
[141.37242126 70.28404236]
[139.33920288 85.14559937]
[128.63424683 95.65291595]
[113.73613739 97.40856934]
[127.66684723 102.97050476]
[141.59756470 108.53244781]
[155.52828979 114.09438324]
[170.77804565 109.11199188]
[184.10179138 118.04828644]
[185.27867126 134.04811096]
[173.40589905 144.83776855]
[157.59123230 142.14036560]
[149.96633911 128.02510071]
[136.03562927 122.46315765]
[122.10491180 116.90122223]
[108.17419434 111.33928680]
[102.14298248 115.79736328]
[84.04933167 129.17158508]
[85.27994537 144.12101746]
[86.51055908 159.07044983]
[87.74117279 174.01989746]
[88.97178650 188.96932983]
[90.20240021 203.91876221]
[91.43300629 218.86819458]
[92.66362000 233.81762695]
[107.53133392 236.34783936]
[121.30237579 242.49674988]
[133.11109924 251.87785339]
[142.21517944 263.90142822]
[148.04232788 277.81167603]
[150.22625732 292.73419189]
[148.62968445 307.73092651]
[143.35296631 321.85916138]
[134.72779846 334.23077393]
[123.29637146 344.06811523]
[109.77726746 350.75277710]
[95.02031708 353.86456299]
[79.95314789 353.20785522]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 110]
[19 109]
[20 108]
[21 107]
[22 106]
[37 105]
[38 104]
[39 103]
[40 102]
[41 101]
[42 100]
[43 99]
[46 97]
[47 96]
[48 95]
[49 65]
[50 64]
[52 62]
[53 61]
[54 60]
[66 94]
[67 93]
[68 92]
[69 91]
[118 130]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
