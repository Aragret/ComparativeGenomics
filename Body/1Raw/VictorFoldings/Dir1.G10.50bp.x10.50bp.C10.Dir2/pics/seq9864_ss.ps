%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAACAACCGGGGGGGGGGCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGxxxxxxxxxxAUCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCCCCCCCCCCCUAACAAAC\
) } def
/len { sequence length } bind def

/coor [
[85.15901947 157.80845642]
[71.25035095 152.30229187]
[59.14772797 143.51051331]
[49.61143875 131.98539734]
[43.24055481 118.45097351]
[40.43529129 103.75745392]
[41.37187576 88.82789612]
[45.99147034 74.60016632]
[54.00387573 61.96804810]
[64.90574646 51.72509384]
[78.01223755 44.51476669]
[92.50000000 40.79000854]
[92.50000000 25.79001045]
[92.50000000 10.79001045]
[92.50000000 -4.20998955]
[92.50000000 -19.20998955]
[92.50000000 -34.20999146]
[92.50000000 -49.20999146]
[92.50000000 -64.20999146]
[92.50000000 -79.20999146]
[92.50000000 -94.20999146]
[77.51963043 -95.05116272]
[62.60999298 -96.73096466]
[47.81799698 -99.24411774]
[33.19018936 -102.58271790]
[18.77258873 -106.73625183]
[4.61056042 -111.69165039]
[-9.25133514 -117.43332672]
[-22.76948547 -123.94322205]
[-35.90135193 -131.20083618]
[-48.60562515 -139.18336487]
[-60.84232712 -147.86564636]
[-72.57295227 -157.22039795]
[-83.76060486 -167.21818542]
[-94.37007141 -177.82752991]
[-104.36797333 -189.01506042]
[-113.72285461 -200.74559021]
[-122.40528107 -212.98219299]
[-130.38793945 -225.68637085]
[-137.64570618 -238.81816101]
[-144.15574646 -252.33624268]
[-149.89758301 -266.19805908]
[-154.85314941 -280.36004639]
[-159.00683594 -294.77758789]
[-162.34559631 -309.40536499]
[-164.85891724 -324.19732666]
[-166.53887939 -339.10696411]
[-167.38021851 -354.08731079]
[-167.38027954 -369.09127808]
[-166.53904724 -384.07165527]
[-164.85919189 -398.98129272]
[-162.34597778 -413.77325439]
[-159.00732422 -428.40106201]
[-154.85374451 -442.81866455]
[-149.89828491 -456.98065186]
[-144.15655518 -470.84252930]
[-137.64662170 -484.36065674]
[-130.38894653 -497.49249268]
[-122.40638733 -510.19674683]
[-113.72404480 -522.43341064]
[-104.36925507 -534.16400146]
[-94.37142944 -545.35162354]
[-83.76204681 -555.96105957]
[-72.57447052 -565.95892334]
[-60.84391022 -575.31372070]
[-48.60727310 -583.99615479]
[-35.90306473 -591.97875977]
[-22.77124786 -599.23645020]
[-9.25314713 -605.74645996]
[4.60870600 -611.48822021]
[18.77069664 -616.44372559]
[33.18826675 -620.59735107]
[47.81605148 -623.93609619]
[62.60802841 -626.44934082]
[77.51765442 -628.12927246]
[92.49801636 -628.97052002]
[107.50198364 -628.97052002]
[122.48234558 -628.12927246]
[137.39196777 -626.44934082]
[152.18394470 -623.93609619]
[166.81173706 -620.59735107]
[181.22930908 -616.44372559]
[195.39129639 -611.48822021]
[209.25314331 -605.74645996]
[222.77124023 -599.23645020]
[235.90306091 -591.97875977]
[248.60726929 -583.99615479]
[260.84390259 -575.31372070]
[272.57446289 -565.95892334]
[283.76205444 -555.96105957]
[294.37142944 -545.35162354]
[304.36926270 -534.16400146]
[313.72406006 -522.43341064]
[322.40637207 -510.19674683]
[330.38894653 -497.49249268]
[337.64660645 -484.36065674]
[344.15655518 -470.84252930]
[349.89828491 -456.98065186]
[354.85375977 -442.81866455]
[359.00732422 -428.40106201]
[362.34597778 -413.77325439]
[364.85919189 -398.98129272]
[366.53906250 -384.07165527]
[367.38027954 -369.09127808]
[367.38021851 -354.08731079]
[366.53887939 -339.10696411]
[364.85891724 -324.19732666]
[362.34558105 -309.40536499]
[359.00683594 -294.77758789]
[354.85314941 -280.36004639]
[349.89758301 -266.19805908]
[344.15576172 -252.33624268]
[337.64569092 -238.81816101]
[330.38793945 -225.68637085]
[322.40527344 -212.98219299]
[313.72283936 -200.74559021]
[304.36798096 -189.01506042]
[294.37005615 -177.82752991]
[283.76058960 -167.21818542]
[272.57296753 -157.22039795]
[260.84231567 -147.86564636]
[248.60562134 -139.18336487]
[235.90135193 -131.20083618]
[222.76948547 -123.94322205]
[209.25134277 -117.43332672]
[195.38943481 -111.69165039]
[181.22741699 -106.73625183]
[166.80981445 -102.58271790]
[152.18200684 -99.24411774]
[137.39001465 -96.73096466]
[122.48036957 -95.05116272]
[107.50000000 -94.20999146]
[107.50000000 -79.20999146]
[107.50000000 -64.20999146]
[107.50000000 -49.20999146]
[107.50000000 -34.20999146]
[107.50000000 -19.20998955]
[107.50000000 -4.20998955]
[107.50000000 10.79001045]
[107.50000000 25.79001045]
[107.50000000 40.79000854]
[121.98776245 44.51476669]
[135.09425354 51.72509384]
[145.99612427 61.96804810]
[154.00852966 74.60016632]
[158.62812805 88.82789612]
[159.56471252 103.75745392]
[156.75944519 118.45097351]
[150.38856506 131.98539734]
[140.85227966 143.51051331]
[128.74964905 152.30229187]
[114.84098053 157.80845642]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
