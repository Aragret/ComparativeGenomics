%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUAAUCGGGGGGGGGGGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGxxxxxxxxxxCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCCCCCCCCCCCUAAUAAUCGG\
) } def
/len { sequence length } bind def

/coor [
[135.44287109 435.32208252]
[123.94671631 425.50729370]
[115.85565186 412.73913574]
[111.88914490 398.15289307]
[112.39989471 383.04559326]
[117.34247589 368.76055908]
[126.27740479 356.56799316]
[138.41020203 347.55209351]
[152.66200256 342.51449585]
[152.03802490 327.52746582]
[151.41404724 312.54043579]
[150.79006958 297.55343628]
[150.16609192 282.56640625]
[149.54211426 267.57940674]
[148.91813660 252.59239197]
[148.29415894 237.60536194]
[147.67018127 222.61834717]
[147.04620361 207.63133240]
[146.42222595 192.64431763]
[145.79824829 177.65730286]
[142.24348450 163.08459473]
[135.89636230 149.49365234]
[123.50043488 141.23591614]
[124.67148590 125.45810699]
[118.32435608 111.86715698]
[104.07318115 119.99308014]
[89.37722778 115.72417450]
[82.73990631 103.16820526]
[68.24430847 99.31105042]
[53.74871445 95.45388794]
[39.25311661 91.59673309]
[23.92740250 95.52521515]
[13.61770821 84.77536011]
[4.45337248 85.59193420]
[-1.13770795 80.68423462]
[-15.54992390 76.52635193]
[-24.45953941 88.78989410]
[-37.02795410 97.26402283]
[-51.73746872 100.92543030]
[-66.81184387 99.33198547]
[-80.43077087 92.67611694]
[-90.94969940 81.76154327]
[-97.09841919 67.90625000]
[-98.13443756 52.78333664]
[-93.93265533 38.21896744]
[-85.00045776 25.97186279]
[-72.41644287 17.52091599]
[-57.70020294 13.88662148]
[-42.62879181 15.50783920]
[-29.02215385 22.18879700]
[-18.52335930 33.12273788]
[-12.40018463 46.98933792]
[-11.39203644 62.11413193]
[3.02017951 66.27201843]
[17.47486877 70.27976227]
[31.76376152 66.07538605]
[43.11027527 77.10113525]
[57.60587311 80.95829010]
[72.10147095 84.81545258]
[86.59706879 88.67261505]
[100.02104950 80.31006622]
[116.70421600 85.94366455]
[121.30978394 71.66820526]
[125.91534424 57.39274597]
[130.52090454 43.11728668]
[135.12648010 28.84182549]
[139.13421631 14.38713741]
[142.53720093 -0.22175530]
[145.94017029 -14.83064747]
[149.34315491 -29.43954086]
[136.10374451 -36.69355392]
[125.31320953 -47.25134277]
[117.77227020 -60.32944870]
[114.04051208 -74.95738220]
[114.39486694 -90.04966736]
[118.80903625 -104.48635101]
[126.95545197 -117.19612885]
[138.22959900 -127.23585510]
[151.79486084 -133.86051941]
[166.64462280 -136.57852173]
[181.67689514 -135.18817139]
[195.77621460 -129.79263306]
[207.89631653 -120.79231262]
[217.13778687 -108.85507202]
[222.81488037 -94.86674500]
[224.50628662 -79.86535645]
[222.08650208 -64.96410370]
[215.73510742 -51.26876831]
[205.92340088 -39.79562759]
[193.37948608 -31.39606476]
[179.03419495 -26.69338799]
[163.95204163 -26.03656197]
[160.54905701 -11.42766953]
[157.14608765 3.18122268]
[153.74310303 17.79011536]
[155.17047119 20.27405930]
[155.66702271 23.49079704]
[154.94178772 27.07631302]
[152.84545898 30.56579018]
[149.40193176 33.44739151]
[144.79637146 47.72285080]
[140.19081116 61.99831009]
[135.58523560 76.27377319]
[130.97967529 90.54923248]
[131.91531372 105.52002716]
[138.26243591 119.11097717]
[151.11235046 128.34083557]
[149.48730469 143.14651489]
[155.83444214 156.73747253]
[161.38117981 153.42443848]
[168.58868408 152.09579468]
[176.73979187 153.35615540]
[191.15200806 157.51405334]
[200.33134460 156.88830566]
[205.81912231 161.91125488]
[220.14172363 166.36807251]
[234.46432495 170.82489014]
[248.78691101 175.28169250]
[264.65609741 171.14630127]
[275.97781372 183.01013184]
[271.10528564 198.66868591]
[255.05093384 202.01379395]
[244.33009338 189.60429382]
[230.00750732 185.14747620]
[215.68490601 180.69065857]
[201.36230469 176.23385620]
[186.99412537 171.92626953]
[172.58190918 167.76837158]
[160.78526306 177.03332520]
[161.40924072 192.02033997]
[162.03321838 207.00735474]
[162.65719604 221.99436951]
[163.28117371 236.98138428]
[163.90515137 251.96841431]
[164.52912903 266.95541382]
[165.15310669 281.94244385]
[165.77708435 296.92944336]
[166.40106201 311.91647339]
[167.02503967 326.90350342]
[167.64901733 341.89050293]
[182.27024841 345.72598267]
[195.11050415 353.70217896]
[205.02801514 365.10980225]
[211.14093018 378.93457031]
[212.90570068 393.94711304]
[210.16540527 408.81259155]
[203.16369629 422.20913696]
[192.52317810 432.94555664]
[179.18998718 440.06716919]
[164.34970093 442.94073486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 140]
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 109]
[22 108]
[24 106]
[25 105]
[28 60]
[29 59]
[30 58]
[31 57]
[33 55]
[35 54]
[36 53]
[62 104]
[63 103]
[64 102]
[65 101]
[66 100]
[67 95]
[68 94]
[69 93]
[70 92]
[112 128]
[113 127]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
