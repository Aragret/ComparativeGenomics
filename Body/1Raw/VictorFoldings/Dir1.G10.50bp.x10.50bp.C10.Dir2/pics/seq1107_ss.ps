%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAACCUUUAGGGGGGGGGGGCAAUAAACGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUxxxxxxxxxxCACAGCACCAAAUCUCCACCUCCAUCAUCACCUCAACCCAAAAAGGCAUACCCCCCCCCCAUUAAACUUUA\
) } def
/len { sequence length } bind def

/coor [
[87.22261810 396.10748291]
[73.20067596 390.55447388]
[61.00071716 381.68814087]
[51.38964462 370.06582642]
[44.97161865 356.41812134]
[42.15008163 341.60293579]
[43.10239792 326.55154419]
[47.76870346 312.21014404]
[55.85567093 299.48019409]
[66.85494232 289.16189575]
[80.07510376 281.90393066]
[94.68511200 278.16250610]
[94.68511200 263.16250610]
[94.68511200 248.16249084]
[94.68511200 233.16249084]
[94.68511200 218.16249084]
[94.68511200 203.16249084]
[94.68511200 188.16249084]
[94.68511200 173.16249084]
[94.68511200 158.16249084]
[94.68511200 143.16249084]
[94.22319031 128.16960144]
[93.29977417 113.19805908]
[87.26856232 108.73998260]
[75.20613098 99.82382965]
[69.17491150 95.36575317]
[54.59116364 98.87492371]
[40.00741577 102.38409424]
[25.42366600 105.89325714]
[10.83991623 109.40242767]
[-0.67067558 121.08310699]
[-16.47146606 116.69367981]
[-20.30795479 100.74961090]
[-8.23349380 89.65278625]
[7.33074856 94.81867218]
[21.91449738 91.30950928]
[36.49824905 87.80033875]
[51.08199692 84.29117584]
[65.66574860 80.78200531]
[82.69277954 83.71541595]
[95.57723999 93.11734772]
[99.83008575 78.73287201]
[84.65278625 61.97776413]
[86.48606873 37.00530624]
[72.67248535 31.15851974]
[57.32363892 35.82675552]
[44.18618393 26.61878014]
[43.33805466 10.59816170]
[55.42985916 0.05454814]
[71.18580627 3.07609844]
[78.51927185 17.34493637]
[92.33285522 23.19172478]
[79.37516785 15.63537979]
[73.75423431 1.72836602]
[77.82231140 -12.70945644]
[89.87698364 -21.63609314]
[104.87356567 -21.31589317]
[116.53623199 -11.88285160]
[119.98434448 2.71545434]
[113.77405548 16.37079048]
[121.67053223 3.61753297]
[129.56701660 -9.13572407]
[137.46350098 -21.88898087]
[145.35998535 -34.64223862]
[153.25646973 -47.39549637]
[141.55450439 -56.81056595]
[131.09825134 -67.59233856]
[122.04626465 -79.57737732]
[114.53574371 -92.58397675]
[108.68054199 -106.41496277]
[104.56944275 -120.86067200]
[102.26474762 -135.70210266]
[101.80141449 -150.71426392]
[103.18645477 -165.66957092]
[106.39887238 -180.34130859]
[111.38997650 -194.50706482]
[118.08409119 -207.95207214]
[126.37974548 -220.47253418]
[136.15116882 -231.87861633]
[147.25024414 -241.99742126]
[159.50869751 -250.67555237]
[172.74070740 -257.78143311]
[186.74566650 -263.20736694]
[201.31127930 -266.87106323]
[216.21670532 -268.71701050]
[231.23602295 -268.71722412]
[246.14151001 -266.87170410]
[260.70721436 -263.20840454]
[274.71234131 -257.78286743]
[287.94451904 -250.67733765]
[300.20324707 -241.99955750]
[311.30258179 -231.88107300]
[321.07434082 -220.47525024]
[329.37033081 -207.95503235]
[336.06481934 -194.51020813]
[341.05633545 -180.34458923]
[344.26916504 -165.67294312]
[345.65463257 -150.71766663]
[345.19171143 -135.70550537]
[342.88742065 -120.86400604]
[338.77673340 -106.41818237]
[332.92190552 -92.58702850]
[325.41177368 -79.58022308]
[316.36010742 -67.59493256]
[305.90417480 -56.81286621]
[294.20245361 -47.39746857]
[281.43237305 -39.49147415]
[267.78750610 -33.21474457]
[253.47473145 -28.66242218]
[238.71098328 -25.90352821]
[223.72010803 -24.97988129]
[208.72933960 -25.90548515]
[193.96595764 -28.66630936]
[179.65376282 -33.22049713]
[166.00971985 -39.49901199]
[158.11323547 -26.74575615]
[150.21675110 -13.99249840]
[142.32028198 -1.23924148]
[134.42379761 11.51401520]
[126.52731323 24.26727295]
[140.29414368 36.14620590]
[145.45219421 52.85866165]
[141.12773132 69.08988953]
[129.34884644 80.07253265]
[114.21456909 82.98571777]
[109.96172333 97.37019348]
[108.27132416 112.27464294]
[109.19474030 127.24619293]
[112.15338898 131.69609070]
[112.98272705 136.36705017]
[111.96398926 140.39591980]
[109.68511200 143.16249084]
[109.68511200 158.16249084]
[109.68511200 173.16249084]
[109.68511200 188.16249084]
[109.68511200 203.16249084]
[109.68511200 218.16249084]
[109.68511200 233.16249084]
[109.68511200 248.16249084]
[109.68511200 263.16250610]
[109.68511200 278.16250610]
[124.29512787 281.90393066]
[137.51528931 289.16189575]
[148.51455688 299.48019409]
[156.60153198 312.21014404]
[161.26783752 326.55154419]
[162.22015381 341.60293579]
[159.39860535 356.41812134]
[152.98059082 370.06582642]
[143.36952209 381.68814087]
[131.16955566 390.55447388]
[117.14761353 396.10748291]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 128]
[23 127]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[41 126]
[42 125]
[44 52]
[45 51]
[60 120]
[61 119]
[62 118]
[63 117]
[64 116]
[65 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
