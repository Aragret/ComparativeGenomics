%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUCAACCUAGGGGGGGGGGGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUxxxxxxxxxxUAGCCCUACUAGUCUCAAUCUCCAACACAUAUGGCCUAGACUACGUACAUCCCCCCCCCCAACCUAAACCUA\
) } def
/len { sequence length } bind def

/coor [
[76.50866699 372.57330322]
[62.80651093 366.31240845]
[50.84139633 357.15905762]
[41.21348190 345.57238770]
[34.40570450 332.13357544]
[30.75953674 317.51669312]
[30.45786858 302.45492554]
[33.51583099 287.70376587]
[39.78004074 274.00311279]
[48.93628693 262.04022217]
[60.52529526 252.41513062]
[73.96576691 245.61059570]
[88.58352661 241.96797180]
[88.27952576 226.97105408]
[87.97551727 211.97413635]
[87.67151642 196.97721863]
[87.36750793 181.98030090]
[87.06350708 166.98338318]
[86.75950623 151.98646545]
[86.45549774 136.98954773]
[86.15149689 121.99262238]
[86.09568787 98.26943970]
[74.23405457 89.08784485]
[62.37241364 79.90625763]
[50.51078033 70.72467041]
[40.14942169 81.58957672]
[28.72582626 91.33152771]
[16.36108780 99.84722900]
[3.18627906 107.04643250]
[-10.65893841 112.85280609]
[-25.02779961 117.20480347]
[-39.76798248 120.05628967]
[-54.72323990 121.37704468]
[-69.73503113 121.15305328]
[-84.64422607 119.38671112]
[-99.29277039 116.09672546]
[-113.52539825 111.31797791]
[-127.19122314 105.10112000]
[-140.14538574 97.51206207]
[-152.25054932 88.63124847]
[-163.37841797 78.55282593]
[-173.41101074 67.38362122]
[-182.24198914 55.24204636]
[-189.77772522 42.25679779]
[-195.93835449 28.56553268]
[-200.65855408 14.31338310]
[-203.88829041 -0.34856796]
[-205.59332275 -15.26489639]
[-205.75559998 -30.27748108]
[-204.37338257 -45.22718048]
[-201.46131897 -59.95551682]
[-197.05029297 -74.30636597]
[-191.18704224 -88.12759399]
[-183.93374634 -101.27269745]
[-175.36727905 -113.60232544]
[-165.57846069 -124.98577881]
[-154.67105103 -135.30238342]
[-142.76066589 -144.44277954]
[-129.97357178 -152.31007385]
[-116.44532013 -158.82086182]
[-102.31932068 -163.90614319]
[-87.74530029 -167.51199341]
[-72.87777710 -169.60020447]
[-57.87433243 -170.14862061]
[-42.89402390 -169.15144348]
[-28.09564590 -166.61923218]
[-13.63607311 -162.57884216]
[0.33141738 -157.07308960]
[13.65876198 -150.16035461]
[26.20468140 -141.91390991]
[37.83618546 -132.42115784]
[48.42996979 -121.78275299]
[57.87373734 -110.11145020]
[66.06737518 -97.53098297]
[72.92403412 -84.17469788]
[78.37102509 -70.18418884]
[82.35060120 -55.70775986]
[84.82057953 -40.89886856]
[85.75478363 -25.91450119]
[85.14331055 -10.91349697]
[82.99263000 3.94512415]
[79.32554626 18.50385284]
[74.18093872 32.60835648]
[67.61334229 46.10911942]
[59.69236755 58.86302948]
[71.55400848 68.04462433]
[83.41564178 77.22621155]
[95.27727509 86.40779877]
[110.02840424 89.12887573]
[124.38526154 84.78369904]
[138.74212646 80.43852234]
[153.05421448 75.94807434]
[167.32005310 71.31282043]
[181.58590698 66.67756653]
[195.85176086 62.04230881]
[210.11759949 57.40705490]
[224.38345337 52.77180099]
[225.99514771 41.32125854]
[231.76235962 31.35817719]
[240.80772400 24.32102966]
[251.78393555 21.20899200]
[263.07434082 22.44022179]
[273.03106689 27.79610634]
[280.21548462 36.45887375]
[294.73663330 32.69908524]
[309.25778198 28.93929672]
[315.82220459 14.74624825]
[329.99584961 8.14007759]
[345.08639526 12.24001694]
[353.96853638 25.11020088]
[352.44839478 40.67372131]
[341.24374390 51.58196259]
[325.64505005 52.68438339]
[313.01757812 43.46045303]
[298.49642944 47.22024155]
[283.97528076 50.98003006]
[278.21166992 68.69618988]
[262.85281372 79.50173950]
[243.93327332 78.93261719]
[229.01870728 67.03765106]
[214.75285339 71.67290497]
[200.48701477 76.30815887]
[186.22116089 80.94341278]
[171.95532227 85.57866669]
[157.68946838 90.21392059]
[152.26797485 95.30184937]
[143.08729553 94.79537964]
[128.73043823 99.14055634]
[114.37358093 103.48574066]
[127.32242584 111.05722809]
[126.24900055 126.01876831]
[112.35189819 131.66418457]
[101.14841461 121.68862152]
[101.45241547 136.68553162]
[101.75642395 151.68246460]
[102.06042480 166.67938232]
[102.36443329 181.67630005]
[102.66843414 196.67321777]
[102.97244263 211.67013550]
[103.27644348 226.66705322]
[103.58044434 241.66397095]
[118.33382416 244.71121216]
[132.03900146 250.96545410]
[144.00856018 260.11300659]
[153.64208984 271.69500732]
[160.45637512 285.13052368]
[164.10961914 299.74563599]
[164.41859436 314.80725098]
[161.36778259 329.55990601]
[155.11021423 343.26358032]
[145.95976257 355.23089600]
[134.37541199 364.86163330]
[120.93824768 371.67266846]
[106.32225037 375.32235718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 88]
[23 87]
[24 86]
[25 85]
[89 129]
[90 128]
[91 127]
[92 125]
[93 124]
[94 123]
[95 122]
[96 121]
[97 120]
[104 116]
[105 115]
[106 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
