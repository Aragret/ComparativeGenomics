%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCCCUAUGGGGGGGGGGCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUUCCxxxxxxxxxxUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCCCCCCCCCCCUUGCCCUAU\
) } def
/len { sequence length } bind def

/coor [
[83.30456543 360.84375000]
[70.08436584 353.57128906]
[59.19756317 343.12426758]
[51.38643265 330.21502686]
[47.18355179 315.72372437]
[46.87548065 300.63836670]
[50.48321915 285.98754883]
[57.76079178 272.77017212]
[68.21199799 261.88739014]
[81.12425995 254.08123779]
[95.61720276 249.88395691]
[95.30514526 234.88720703]
[94.99308777 219.89045715]
[94.68103027 204.89369202]
[94.36897278 189.89694214]
[94.05691528 174.90019226]
[93.74486542 159.90344238]
[93.43280792 144.90667725]
[93.12075043 129.90992737]
[92.80869293 114.91317749]
[81.20735168 105.40481567]
[66.44129944 108.04367828]
[51.67523956 110.68254852]
[43.71730042 115.30023193]
[36.57477188 113.21936798]
[21.75701523 115.55046844]
[6.93925762 117.88157654]
[3.02318954 132.59837341]
[-6.54523134 144.44595337]
[-20.10821915 151.37165833]
[-35.31590271 152.17555237]
[-49.53345871 146.71835327]
[-60.29761124 135.94557190]
[-65.74340820 121.72364044]
[-64.92732239 106.51660919]
[-57.99076080 92.95917511]
[-46.13550949 83.40025330]
[-31.41557312 79.49598694]
[-16.38126564 81.92280579]
[-3.63737035 90.26025391]
[4.60815382 103.06381989]
[19.42591095 100.73271179]
[34.24367142 98.40161133]
[49.03637695 95.91648865]
[63.80243301 93.27762604]
[78.56848907 90.63876343]
[84.84117889 87.63727570]
[90.93037415 87.14197540]
[96.00617981 88.78071594]
[99.43737030 91.93661499]
[107.68965912 79.41065216]
[115.94194794 66.88468933]
[124.19423676 54.35872650]
[132.44653320 41.83276749]
[120.67965698 32.51450348]
[109.76969910 22.20614243]
[99.79970551 10.98613358]
[90.84555054 -1.06012845]
[82.97537994 -13.84096336]
[76.24908447 -27.25909996]
[70.71787262 -41.21241379]
[66.42382050 -55.59471512]
[63.39962769 -70.29653931]
[61.66830063 -85.20599365]
[61.24301910 -100.20960999]
[62.12701797 -115.19319916]
[64.31356812 -130.04272461]
[67.78603363 -144.64515686]
[72.51798248 -158.88938904]
[78.47340393 -172.66699219]
[85.60697174 -185.87310791]
[93.86438751 -198.40724182]
[103.18281555 -210.17399597]
[113.49132538 -221.08380127]
[124.71147919 -231.05363464]
[136.75785828 -240.00761414]
[149.53880310 -247.87760925]
[162.95704651 -254.60371399]
[176.91043091 -260.13473511]
[191.29278564 -264.42858887]
[205.99465942 -267.45257568]
[220.90414429 -269.18368530]
[235.90776062 -269.60876465]
[250.89134216 -268.72454834]
[265.74081421 -266.53778076]
[280.34323120 -263.06512451]
[294.58737183 -258.33297729]
[308.36489868 -252.37736511]
[321.57092285 -245.24360657]
[334.10494995 -236.98602295]
[345.87155151 -227.66741943]
[356.78121948 -217.35876465]
[366.75088501 -206.13847351]
[375.70471191 -194.09196472]
[383.57452393 -181.31089783]
[390.30044556 -167.89257812]
[395.83126831 -153.93910217]
[400.12490845 -139.55668640]
[403.14868164 -124.85478210]
[404.87960815 -109.94527435]
[405.30447388 -94.94165039]
[404.42004395 -79.95808411]
[402.23306274 -65.10861969]
[398.76019287 -50.50627518]
[394.02786255 -36.26218033]
[388.07205200 -22.48474503]
[380.93811035 -9.27882385]
[372.68032837 3.25507426]
[363.36157227 15.02155781]
[353.05276489 25.93107605]
[341.83233643 35.90059662]
[329.78570557 44.85424805]
[317.00454712 52.72388077]
[303.58612061 59.44960785]
[289.63256836 64.98023987]
[275.25009155 69.27368164]
[260.54812622 72.29725647]
[245.63861084 74.02795410]
[230.63497925 74.45260620]
[215.65142822 73.56797791]
[200.80198669 71.38079834]
[186.19969177 67.90772247]
[171.95565796 63.17517471]
[158.17831421 57.21917725]
[144.97248840 50.08505630]
[136.72019958 62.61101913]
[128.46791077 75.13697815]
[120.21562195 87.66294098]
[111.96333313 100.18890381]
[107.80545044 114.60112000]
[108.11750031 129.59786987]
[108.42955780 144.59461975]
[108.74161530 159.59138489]
[109.05367279 174.58813477]
[109.36573029 189.58488464]
[109.67778778 204.58163452]
[109.98983765 219.57839966]
[110.30189514 234.57514954]
[110.61395264 249.57189941]
[125.26894379 253.16267395]
[138.49475098 260.42492676]
[149.38961792 270.86352539]
[157.21072388 283.76672363]
[161.42478943 298.25479126]
[161.74450684 313.33990479]
[158.14808655 327.99349976]
[150.88072205 341.21649170]
[140.43792725 352.10733032]
[127.53169250 359.92346191]
[113.04199982 364.13192749]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 46]
[22 45]
[23 44]
[25 43]
[26 42]
[27 41]
[50 129]
[51 128]
[52 127]
[53 126]
[54 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
