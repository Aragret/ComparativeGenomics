%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAACAUCAGGGGGGGGGGCUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUxxxxxxxxxxCUGCUUGCAACUAUAGCAACAGCCUUCAUAGGCUAUGUCCUCCCGUGAGGCCCCCCCCCCCCAAAUAUCA\
) } def
/len { sequence length } bind def

/coor [
[88.96054077 391.15283203]
[75.11460114 385.13681030]
[63.40594482 375.60739136]
[54.70341873 363.27172852]
[49.65281677 349.04519653]
[48.62892532 333.98352051]
[51.70772552 319.20437622]
[58.66074753 305.80444336]
[68.97203064 294.77810669]
[81.87641144 286.94360352]
[96.41629791 282.88229370]
[96.41629791 267.88229370]
[96.41629791 252.88229370]
[96.41629791 237.88229370]
[96.41629791 222.88229370]
[96.41629791 207.88229370]
[96.41629791 192.88229370]
[96.41629791 177.88229370]
[96.41629791 162.88229370]
[96.41629791 147.88229370]
[96.41629791 132.88229370]
[84.70927429 128.71966553]
[75.54605103 120.63377380]
[70.14310455 109.90052032]
[69.14141846 98.13095093]
[54.81882477 102.58776855]
[40.49622726 107.04458618]
[26.17362785 111.50139618]
[15.45279503 123.91090393]
[-0.60155880 120.56579590]
[-5.47409058 104.90723419]
[5.84764290 93.04341125]
[21.71681213 97.17880249]
[36.03940964 92.72198486]
[50.36200714 88.26516724]
[64.68460846 83.80835724]
[73.45081329 71.63652039]
[73.13875580 56.63976288]
[72.82669830 41.64300919]
[64.06049347 29.47117233]
[49.93568802 24.42241669]
[35.81088638 19.37366104]
[20.21165657 22.01460266]
[10.83122540 10.44495392]
[-6.11884975 10.80731583]
[-11.15929890 -5.38003111]
[3.00010610 -14.70460129]
[15.87998104 -3.67984939]
[30.46891212 -6.68191242]
[40.85964203 5.24885750]
[54.98444748 10.29761410]
[69.10924530 15.34637070]
[59.13407135 4.14387846]
[46.72498703 -4.28314114]
[41.39877701 -18.30567551]
[45.08415985 -32.84589386]
[56.44659424 -42.63850021]
[71.37151337 -44.13740540]
[84.45432281 -36.79981995]
[90.95748138 -23.28283501]
[88.52587128 -8.48081779]
[89.78282166 6.46642542]
[95.84583282 -7.25362825]
[101.90884399 -20.97368240]
[99.48540497 -39.19747925]
[113.98345184 -49.03651810]
[119.75971985 -62.87973404]
[107.14996338 -54.75606537]
[92.34390259 -52.35177612]
[77.81152344 -56.06795502]
[65.97715759 -65.28466034]
[58.81503296 -78.46434784]
[57.51996231 -93.40833282]
[62.30798340 -107.62363434]
[72.38035583 -118.73882294]
[86.05677795 -124.89962769]
[101.05570984 -125.07829285]
[114.87500000 -119.24501801]
[125.20928192 -108.37290955]
[130.33456421 -94.27569580]
[129.39620972 -79.30646515]
[138.66116333 -91.10311127]
[147.92610168 -102.89974976]
[150.79264832 -111.64244843]
[157.50856018 -114.84278107]
[167.01692200 -126.44412231]
[176.52528381 -138.04545593]
[186.03364563 -149.64680481]
[182.96276855 -164.97990417]
[190.51159668 -178.67475891]
[205.11576843 -184.26510620]
[219.87966919 -179.11132812]
[227.83222961 -165.64689636]
[225.21847534 -150.22930908]
[213.27256775 -140.13825989]
[197.63497925 -140.13844299]
[188.12663269 -128.53710938]
[178.61827087 -116.93576050]
[169.10990906 -105.33441925]
[159.72274780 -93.63479614]
[150.45779419 -81.83815765]
[141.19284058 -70.04151917]
[133.60293579 -57.10346222]
[127.82666779 -43.26024628]
[132.13896179 -31.91513634]
[127.38851929 -20.31115913]
[115.62889862 -14.91066837]
[109.56588745 -1.19061494]
[103.50287628 12.52943897]
[101.23215485 31.69671822]
[87.82345581 41.33095551]
[88.13551331 56.32770920]
[88.44756317 71.32446289]
[98.36151123 68.81905365]
[108.65293121 69.67765808]
[118.20063782 73.87286377]
[125.94305420 81.01023102]
[130.99620056 90.36447906]
[132.75430298 100.95291901]
[130.96177673 111.63857269]
[144.34805298 118.40669250]
[157.73434448 125.17480469]
[174.06933594 123.72567749]
[183.26907349 137.30126953]
[175.86965942 151.93618774]
[159.48295593 152.57527161]
[150.96623230 138.56109619]
[137.57994080 131.79296875]
[124.19365692 125.02486420]
[111.41629791 132.88229370]
[111.41629791 147.88229370]
[111.41629791 162.88229370]
[111.41629791 177.88229370]
[111.41629791 192.88229370]
[111.41629791 207.88229370]
[111.41629791 222.88229370]
[111.41629791 237.88229370]
[111.41629791 252.88229370]
[111.41629791 267.88229370]
[111.41629791 282.88229370]
[125.95618439 286.94360352]
[138.86056519 294.77810669]
[149.17184448 305.80444336]
[156.12487793 319.20437622]
[159.20367432 333.98352051]
[158.17977905 349.04519653]
[153.12918091 363.27172852]
[144.42665100 375.60739136]
[132.71798706 385.13681030]
[118.87205505 391.15283203]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 36]
[26 35]
[27 34]
[28 33]
[37 113]
[38 112]
[39 111]
[40 52]
[41 51]
[42 50]
[44 48]
[62 109]
[63 108]
[64 107]
[66 104]
[67 103]
[81 102]
[82 101]
[83 100]
[85 99]
[86 98]
[87 97]
[88 96]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
