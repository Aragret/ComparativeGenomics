%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCUAAAAGGGGGGGGGGCUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAAGxxxxxxxxxxUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCACCCCCCCCCCCCCAAAGCUAAGA\
) } def
/len { sequence length } bind def

/coor [
[84.24642181 401.45266724]
[73.03098297 391.38732910]
[64.43959045 379.00653076]
[58.93554306 364.97790527]
[56.81568527 350.05801392]
[58.19432831 335.05148315]
[62.99712753 320.76757812]
[70.96507263 307.97662354]
[81.66846466 297.36840820]
[94.53008270 289.51504517]
[108.85631561 284.84002686]
[107.60943604 269.89193726]
[106.36256409 254.94384766]
[105.11569214 239.99575806]
[103.86881256 225.04766846]
[102.62194061 210.09957886]
[101.37506866 195.15148926]
[100.12818909 180.20339966]
[98.88131714 165.25532532]
[97.47901154 150.32101440]
[95.92143250 135.40209961]
[94.36385345 120.48318481]
[85.96674347 114.15706635]
[82.08837128 105.09822083]
[83.16426849 95.96569061]
[88.26654816 89.11979675]
[80.27662659 76.42486572]
[72.28671265 63.72993851]
[64.29679871 51.03500748]
[50.39768219 43.47688675]
[50.16666031 28.58407402]
[42.17674255 15.88914394]
[34.18682480 3.19421387]
[26.19691086 -9.50071526]
[12.68654633 -2.94836688]
[-1.46264005 2.07793427]
[-16.07889175 5.51717329]
[-30.98478127 7.32760096]
[-45.99936295 7.48724031]
[-60.94038010 5.99415302]
[-75.62644958 2.86646485]
[-89.87931061 -1.85785782]
[-103.52593994 -8.12146568]
[-116.40067291 -15.84832478]
[-128.34722900 -24.94463730]
[-139.22059631 -35.29998398]
[-148.88876343 -46.78865814]
[-157.23439026 -59.27119827]
[-164.15614319 -72.59607697]
[-169.57002258 -86.60154724]
[-173.41029358 -101.11759186]
[-175.63034058 -115.96799469]
[-176.20321655 -130.97250366]
[-175.12196350 -145.94894409]
[-172.39971924 -160.71554565]
[-168.06951904 -175.09304810]
[-162.18392944 -188.90692139]
[-154.81439209 -201.98947144]
[-146.05036926 -214.18190002]
[-135.99826050 -225.33618164]
[-124.78006744 -235.31694031]
[-112.53198242 -244.00299072]
[-99.40268707 -251.28892517]
[-85.55155182 -257.08627319]
[-71.14671326 -261.32464600]
[-56.36304474 -263.95263672]
[-41.38000107 -264.93832397]
[-26.37946320 -264.26974487]
[-11.54352093 -261.95498657]
[2.94772768 -258.02218628]
[16.91837311 -252.51907349]
[30.19882393 -245.51245117]
[42.62786865 -237.08737183]
[54.05463028 -227.34609985]
[64.34040070 -216.40690613]
[73.36031342 -204.40255737]
[81.00487518 -191.47879028]
[87.18129730 -177.79248047]
[91.81459808 -163.50976562]
[94.84853363 -148.80404663]
[96.24626923 -133.85380554]
[95.99085236 -118.84054565]
[94.08536530 -103.94651031]
[90.55294800 -89.35249329]
[85.43648529 -75.23566437]
[78.79808044 -61.76737595]
[70.71831512 -49.11112595]
[61.29528046 -37.42055130]
[50.64335251 -26.83756447]
[38.89183807 -17.49063110]
[46.88175583 -4.79570246]
[54.87167358 7.89922714]
[62.86158752 20.59415627]
[76.18920898 27.24425316]
[76.99172211 43.04509354]
[84.98164368 55.74002075]
[92.97155762 68.43495178]
[100.96147156 81.12988281]
[115.23693848 85.73544312]
[129.13949585 80.10349274]
[143.04205322 74.47153473]
[150.59582520 60.31808853]
[166.39671326 57.54113770]
[178.32362366 68.27091980]
[177.22724915 84.27646637]
[163.94863892 93.27969360]
[148.67401123 88.37409210]
[134.77145386 94.00604248]
[120.86888885 99.63800049]
[135.76963806 101.36073303]
[149.93373108 96.42328644]
[164.89439392 97.50884247]
[178.19735718 104.43931580]
[187.66024780 116.07776642]
[191.73071289 130.51490784]
[189.74099731 145.38235474]
[182.01748657 158.24111938]
[169.82723999 166.98170471]
[155.17004395 170.17024231]
[140.45042419 167.28364563]
[128.08308411 158.79547119]
[120.09690857 146.09819031]
[117.80217743 131.27143860]
[109.28276062 118.92560577]
[110.84034729 133.84451294]
[112.39792633 148.76342773]
[116.42440033 157.03623962]
[113.82940674 164.00843811]
[115.07627869 178.95652771]
[116.32315063 193.90461731]
[117.57003021 208.85270691]
[118.81690216 223.80079651]
[120.06377411 238.74888611]
[121.31065369 253.69696045]
[122.55752563 268.64505005]
[123.80439758 283.59313965]
[138.70718384 285.83004761]
[152.69216919 291.44406128]
[165.00514221 300.13238525]
[174.98211670 311.42651367]
[182.08502197 324.71731567]
[185.93081665 339.28805542]
[186.31210327 354.35296631]
[183.20829773 369.09957886]
[176.78681946 382.73266602]
[167.39395142 394.51702881]
[155.53623962 403.81707764]
[141.85314941 410.13134766]
[127.08260345 413.11929321]
[112.02115631 412.61975098]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 126]
[21 125]
[22 124]
[26 98]
[27 97]
[28 96]
[29 95]
[31 93]
[32 92]
[33 91]
[34 90]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
