%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCCUAUGGGGGGGGGGCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAxxxxxxxxxxUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCCCCCCCCCCCCACCUCCUAU\
) } def
/len { sequence length } bind def

/coor [
[83.81581116 385.41302490]
[70.59561157 378.14053345]
[59.70880508 367.69354248]
[51.89767456 354.78430176]
[47.69479370 340.29296875]
[47.38672256 325.20764160]
[50.99446487 310.55682373]
[58.27203751 297.33941650]
[68.72324371 286.45666504]
[81.63550568 278.65051270]
[96.12844086 274.45321655]
[95.81638336 259.45648193]
[95.50433350 244.45971680]
[95.19227600 229.46296692]
[94.88021851 214.46620178]
[94.56816101 199.46945190]
[94.25610352 184.47270203]
[93.94404602 169.47595215]
[93.63199615 154.47918701]
[93.31993866 139.48243713]
[85.71148682 137.40754700]
[78.65723419 133.88174438]
[72.43080139 129.04179382]
[67.27367401 123.07540131]
[63.38589478 116.21399689]
[60.91825104 108.72370911]
[45.92555237 109.19174957]
[30.93285751 109.65979004]
[15.94016171 110.12783813]
[0.94746536 110.59587860]
[-4.77048349 124.71058655]
[-15.73956299 135.27464294]
[-30.05931282 140.45774841]
[-45.24875259 139.36190796]
[-58.67621613 132.17698669]
[-68.01531219 120.14781189]
[-71.64799500 105.35850525]
[-68.94487762 90.37141418]
[-60.37428284 77.78313446]
[-47.42112732 69.77465820]
[-32.32962036 67.73351288]
[-17.71445465 72.01333618]
[-6.10779953 81.87261963]
[0.47942322 95.60317993]
[15.47211933 95.13513947]
[30.46481514 94.66709900]
[45.45751190 94.19905090]
[60.45020676 93.73101044]
[62.13494110 85.72299194]
[65.44066620 78.14327240]
[70.26223755 71.31974792]
[76.42825317 65.55510712]
[83.70700836 61.11347580]
[91.81512451 58.20842743]
[100.42852783 56.99293900]
[109.19538116 57.55170059]
[117.75050354 59.89620972]
[125.73052216 63.96286774]
[130.92593384 49.89134598]
[136.12135315 35.81982803]
[122.81059265 28.85908318]
[110.49926758 20.25329781]
[99.38953400 10.14378738]
[89.66383362 -1.30343974]
[81.48186493 -13.90041065]
[74.97798157 -27.44027138]
[70.25898743 -41.70068741]
[67.40236664 -56.44748688]
[66.45503998 -71.43851471]
[67.43254852 -86.42760468]
[70.31885529 -101.16861725]
[75.06655121 -115.41950226]
[81.59767914 -128.94624329]
[89.80500031 -141.52671814]
[99.55373383 -152.95433044]
[110.68379211 -163.04145813]
[123.01242828 -171.62243652]
[136.33717346 -178.55636597]
[150.43923950 -183.72938538]
[165.08705139 -187.05654907]
[180.04006958 -188.48323059]
[195.05276489 -187.98597717]
[209.87861633 -185.57298279]
[224.27415466 -181.28385925]
[238.00302124 -175.18904114]
[250.83973694 -167.38859558]
[262.57354736 -158.01063538]
[273.01174927 -147.20913696]
[281.98294067 -135.16148376]
[289.33981323 -122.06550598]
[294.96154785 -108.13624573]
[298.75585938 -93.60243225]
[300.66043091 -78.70273590]
[300.64395142 -63.68181610]
[298.70672607 -48.78632736]
[294.88058472 -34.26087570]
[289.22830200 -20.34397316]
[281.84274292 -7.26415110]
[272.84515381 4.76380682]
[262.38330078 15.54239082]
[250.62896729 24.89460754]
[237.77516174 32.66688538]
[224.03298950 38.73159790]
[209.62806702 42.98915100]
[194.79696655 45.36964035]
[179.78321838 45.83396912]
[164.83335876 44.37451553]
[150.19287109 41.01524353]
[144.99746704 55.08676147]
[139.80204773 69.15827942]
[147.12115479 82.25143433]
[161.82911682 85.19692230]
[176.53707886 88.14240265]
[191.24504089 91.08788300]
[203.33937073 81.17522430]
[218.97523499 81.40747070]
[230.76983643 91.67495728]
[233.15412903 107.12970734]
[225.00231934 120.47444916]
[210.16345215 125.40820312]
[195.64398193 119.60140228]
[188.29954529 105.79584503]
[173.59158325 102.85036469]
[158.88363647 99.90488434]
[144.17567444 96.95939636]
[142.41108704 109.36553192]
[137.30268860 120.54354095]
[129.39321899 129.63302612]
[119.43434906 135.97735596]
[108.31668854 139.17037964]
[108.62874603 154.16712952]
[108.94080353 169.16389465]
[109.25286102 184.16064453]
[109.56491852 199.15739441]
[109.87696838 214.15414429]
[110.18902588 229.15090942]
[110.50108337 244.14765930]
[110.81314087 259.14440918]
[111.12519836 274.14117432]
[125.78018951 277.73193359]
[139.00599670 284.99420166]
[149.90086365 295.43280029]
[157.72196960 308.33599854]
[161.93603516 322.82406616]
[162.25575256 337.90914917]
[158.65933228 352.56277466]
[151.39196777 365.78576660]
[140.94915771 376.67660522]
[128.04293823 384.49270630]
[113.55324554 388.70120239]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[58 110]
[59 109]
[60 108]
[111 125]
[112 124]
[113 123]
[114 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
