%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGCCCAUGGGGGGGGGGGCAUUUGUAAUAAUCUUCUUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUxxxxxxxxxxCACGACAACACAUAAUGACCCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCCCCCCCCCCCAGCCCAUG\
) } def
/len { sequence length } bind def

/coor [
[60.53673172 374.83190918]
[47.31851196 367.55584717]
[36.43455124 357.10589600]
[28.62693024 344.19451904]
[24.42799187 329.70205688]
[24.12402153 314.61663818]
[27.73574638 299.96679688]
[35.01691437 286.75137329]
[45.47108078 275.87145996]
[58.38546371 268.06881714]
[72.87953949 263.87548828]
[72.57156372 248.87864685]
[72.26358795 233.88180542]
[71.95561218 218.88496399]
[71.64762878 203.88812256]
[71.33965302 188.89129639]
[71.03167725 173.89445496]
[70.72370148 158.89761353]
[70.41572571 143.90077209]
[70.10774231 128.90394592]
[87.29618835 90.54543304]
[82.16589355 76.45004272]
[77.03559113 62.35465622]
[71.90528870 48.25926590]
[59.91466522 37.93765640]
[62.83236694 23.33162117]
[57.70206451 9.23623276]
[43.25214005 13.28803825]
[28.53716850 16.23540497]
[13.64143276 18.06144905]
[-1.34974456 18.75570869]
[-16.35049438 18.31421089]
[-31.27489090 16.73948479]
[-46.03744888 14.04054642]
[-60.55360794 10.23285866]
[-74.74021912 5.33823061]
[-88.51602936 -0.61530167]
[-101.80211639 -7.59363604]
[-114.52239227 -15.55680084]
[-126.60398865 -24.45918274]
[-137.97770691 -34.24979019]
[-148.57838440 -44.87254333]
[-158.34532166 -56.26659012]
[-167.22256470 -68.36667633]
[-175.15925598 -81.10347748]
[-182.10995483 -94.40405273]
[-188.03482056 -108.19221497]
[-192.89994812 -122.38896942]
[-196.67744446 -136.91302490]
[-199.34567261 -151.68115234]
[-200.88935852 -166.60879517]
[-201.29966736 -181.61042786]
[-200.57423401 -196.60012817]
[-198.71722412 -211.49203491]
[-195.73925781 -226.20085144]
[-191.65740967 -240.64231873]
[-186.49505615 -254.73371887]
[-180.28176880 -268.39431763]
[-173.05314636 -281.54592896]
[-164.85057068 -294.11312866]
[-155.72103882 -306.02401733]
[-145.71684265 -317.21032715]
[-134.89527893 -327.60800171]
[-123.31835175 -337.15744019]
[-111.05236816 -345.80398560]
[-98.16757202 -353.49810791]
[-84.73778534 -360.19573975]
[-70.83992004 -365.85848999]
[-56.55359268 -370.45394897]
[-41.96062851 -373.95578003]
[-27.14461708 -376.34393311]
[-12.19042683 -377.60470581]
[2.81628704 -377.73089600]
[17.78956604 -376.72180176]
[32.64364243 -374.58316040]
[47.29343796 -371.32723999]
[61.65502930 -366.97271729]
[75.64616394 -361.54449463]
[89.18669128 -355.07366943]
[102.19905853 -347.59732056]
[114.60872650 -339.15829468]
[126.34461975 -329.80487061]
[137.33950806 -319.59066772]
[147.53041077 -308.57418823]
[156.85896301 -296.81854248]
[165.27174377 -284.39105225]
[172.72053528 -271.36288452]
[179.16267395 -257.80868530]
[184.56127930 -243.80610657]
[188.88542175 -229.43533325]
[192.11033630 -214.77868652]
[194.21752930 -199.92010498]
[195.19494629 -184.94473267]
[195.03700256 -169.93830872]
[193.74458313 -154.98683167]
[191.32508850 -140.17590332]
[187.79238892 -125.59038544]
[183.16671753 -111.31381226]
[177.47456360 -97.42796326]
[170.74853516 -84.01237488]
[163.02717590 -71.14389038]
[154.35467529 -58.89622498]
[144.78074646 -47.33952713]
[134.36021423 -36.54000092]
[123.15276337 -26.55949783]
[111.22259521 -17.45519066]
[98.63803864 -9.27922535]
[85.47118378 -2.07843685]
[71.79745483 4.10593033]
[76.92775726 18.20132065]
[88.55142212 27.51473045]
[86.00067139 43.12896347]
[91.13097382 57.22435379]
[96.26127625 71.31974030]
[101.39157867 85.41513062]
[112.47671509 95.52056885]
[126.98534393 99.32842255]
[141.49397278 103.13628387]
[156.00259399 106.94414520]
[172.85777283 105.11675262]
[179.27972412 120.80734253]
[165.98008728 131.32191467]
[152.19473267 121.45276642]
[137.68611145 117.64490509]
[123.17748260 113.83705139]
[108.66885376 110.02919006]
[102.77778625 114.67088318]
[115.24768066 123.00765991]
[111.17231750 137.44343567]
[96.18373108 138.02841187]
[90.99565125 123.95426941]
[85.10458374 128.59596252]
[85.41255951 143.59280396]
[85.72053528 158.58964539]
[86.02851868 173.58647156]
[86.33649445 188.58331299]
[86.64447021 203.58015442]
[86.95244598 218.57699585]
[87.26042938 233.57382202]
[87.56840515 248.57066345]
[87.87638092 263.56750488]
[102.53039551 267.16226196]
[115.75422668 274.42810059]
[126.64625549 284.86965942]
[134.46385193 297.77499390]
[138.67398071 312.26422119]
[138.98959351 327.34939575]
[135.38919067 342.00201416]
[128.11822510 355.22305298]
[117.67246246 366.11105347]
[104.76410675 373.92364502]
[90.27326965 378.12820435]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 115]
[22 114]
[23 113]
[24 112]
[26 110]
[27 109]
[116 126]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
