%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUAAUCUUAUGGGGGGGGGGAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCAGUAAGUxxxxxxxxxxUCUAGGUAACGACCACAUCUACAACGUUAUCGUCACAGCCCAUGCAUUUGCCCCCCCCCCUAAUAAUCUUCU\
) } def
/len { sequence length } bind def

/coor [
[72.23465729 456.90341187]
[58.07405090 451.74841309]
[45.48430634 443.46621704]
[35.14436722 432.50341797]
[27.61185646 419.45129395]
[23.29299164 405.01370239]
[22.42068291 389.96923828]
[25.04197311 375.12924194]
[31.01549911 361.29400635]
[40.01911926 349.20965576]
[51.56727219 339.52789307]
[65.03719330 332.77081299]
[79.70245361 329.30282593]
[79.70245361 314.30282593]
[79.70245361 299.30282593]
[79.70245361 284.30282593]
[79.70245361 269.30282593]
[79.70245361 254.30284119]
[79.70245361 239.30284119]
[79.70245361 224.30284119]
[79.70245361 209.30284119]
[79.70245361 194.30284119]
[71.96514893 181.57556152]
[79.70245361 167.77539062]
[79.70245361 152.77539062]
[79.70245361 137.77539062]
[67.93447113 128.47407532]
[53.34009552 131.93878174]
[38.74572372 135.40350342]
[24.15135002 138.86820984]
[9.55697536 142.33293152]
[-4.45724869 151.87431335]
[-17.50526810 141.04908752]
[-10.71514511 125.51426697]
[6.09225941 127.73855591]
[20.68663406 124.27384186]
[35.28100586 120.80912781]
[49.87538147 117.34441376]
[64.46975708 113.87969208]
[63.16180420 104.40160370]
[64.27058411 95.16253662]
[67.59272766 86.75197601]
[72.78791046 79.67327118]
[79.40876770 74.31361389]
[72.93967438 60.78029251]
[66.47057343 47.24697113]
[53.53816986 38.13305283]
[55.02999878 23.31334496]
[48.56089783 9.78002453]
[42.09180069 -3.75329661]
[32.91021347 -15.61493301]
[21.43041039 -25.26968002]
[6.05959702 -22.39354706]
[-7.53841734 -30.11546516]
[-12.94306755 -44.78937912]
[-7.60244274 -59.48671722]
[5.96177769 -67.26784515]
[21.34498215 -64.45874786]
[31.28369522 -52.38580322]
[31.08515549 -36.74948120]
[42.56496048 -27.09473419]
[37.65793991 -41.26940155]
[36.68269348 -56.23766327]
[39.70895767 -70.92921448]
[46.52033997 -84.29354095]
[56.62978745 -95.37500763]
[69.31443024 -103.38125610]
[83.66724396 -107.73977661]
[98.66193390 -108.13893127]
[113.22629547 -104.55016327]
[126.31891632 -97.23009491]
[137.00360107 -86.70215607]
[144.51632690 -73.71913147]
[148.31991577 -59.20938492]
[148.14237976 -44.21043777]
[143.99641418 -29.79478455]
[136.17848206 -16.99322319]
[125.24761200 -6.72113085]
[111.98539734 0.28698766]
[97.34016418 3.53001499]
[82.35912323 2.77605844]
[68.11350250 -1.92097032]
[55.62512207 -10.22239399]
[62.09421921 3.31092644]
[68.56331635 16.84424782]
[81.03300476 24.99017334]
[80.00389099 40.77787399]
[86.47299194 54.31119537]
[92.94209290 67.84451294]
[109.76808929 62.96076584]
[129.19332886 67.49476624]
[142.08119202 59.81992722]
[154.96903992 52.14508820]
[167.85690308 44.47024918]
[171.84811401 29.41342354]
[185.02755737 21.81363678]
[199.35734558 25.71143723]
[212.24520874 18.03659821]
[212.66821289 2.61503530]
[221.38044739 -10.11682701]
[235.60189819 -16.09629822]
[250.79452515 -13.41534996]
[262.11044312 -2.92946315]
[265.93875122 12.01535320]
[261.05786133 26.65026283]
[249.02526855 36.30532074]
[233.68051147 37.89963150]
[219.92004395 30.92445564]
[207.03218079 38.59929276]
[203.63226318 53.05530167]
[190.67147827 61.02227020]
[175.53173828 57.35810471]
[162.64389038 65.03294373]
[149.75602722 72.70777893]
[136.86816406 80.38262177]
[137.77799988 87.82723236]
[152.66725159 86.00780487]
[154.48645020 100.89707947]
[139.59765625 102.71645355]
[140.50749207 110.16105652]
[154.86434937 114.50624084]
[170.70083618 110.24742889]
[182.11459351 122.02275085]
[177.36410522 137.71876526]
[161.33628845 141.18876648]
[150.51916504 128.86309814]
[136.16230774 124.51792145]
[116.60351562 137.39756775]
[94.70245361 137.77539062]
[94.70245361 152.77539062]
[94.70245361 167.77539062]
[102.43975067 181.57556152]
[94.70245361 194.30284119]
[94.70245361 209.30284119]
[94.70245361 224.30284119]
[94.70245361 239.30284119]
[94.70245361 254.30284119]
[94.70245361 269.30282593]
[94.70245361 284.30282593]
[94.70245361 299.30282593]
[94.70245361 314.30282593]
[94.70245361 329.30282593]
[109.36771393 332.77081299]
[122.83763123 339.52789307]
[134.38578796 349.20965576]
[143.38940430 361.29400635]
[149.36293030 375.12924194]
[151.98422241 389.96923828]
[151.11190796 405.01370239]
[146.79304504 419.45129395]
[139.26052856 432.50341797]
[128.92059326 443.46621704]
[116.33084869 451.74841309]
[102.17024994 456.90341187]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[24 131]
[25 130]
[26 129]
[27 39]
[28 38]
[29 37]
[30 36]
[31 35]
[44 89]
[45 88]
[46 87]
[48 85]
[49 84]
[50 83]
[51 61]
[52 60]
[91 115]
[92 114]
[93 113]
[94 112]
[97 109]
[98 108]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
