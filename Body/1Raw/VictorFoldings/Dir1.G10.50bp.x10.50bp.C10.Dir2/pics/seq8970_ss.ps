%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUCCAAAAAGGGGGGGGGGGGCCUUCGAUACGGGAUAAUCCUAUUUAUUACCUCAGAAGUUUUUUUCUUxxxxxxxxxxCAAUGCUAAAACUAAUCGUCCCAACAAUUAUAUUACUACCACUGACAUGACCCCCCCCCCCUUUCCAAAAA\
) } def
/len { sequence length } bind def

/coor [
[91.63038635 371.11614990]
[77.60843658 365.56314087]
[65.40848541 356.69680786]
[55.79741287 345.07449341]
[49.37938690 331.42681885]
[46.55784988 316.61163330]
[47.51016617 301.56024170]
[52.17647171 287.21881104]
[60.26343536 274.48886108]
[71.26271057 264.17059326]
[84.48287201 256.91262817]
[99.09288025 253.17117310]
[99.09288025 238.17117310]
[99.09288025 223.17117310]
[99.09288025 208.17117310]
[99.09288025 193.17117310]
[99.09288025 178.17117310]
[99.09288025 163.17117310]
[99.09288025 148.17117310]
[99.09288025 133.17117310]
[99.09288025 118.17118073]
[88.43197632 107.61916351]
[73.43276215 107.77316284]
[67.70862579 121.82698059]
[57.06862259 132.58956909]
[43.15626526 138.44277954]
[28.10365295 138.52336121]
[14.20473766 132.85017395]
[3.56572485 122.31657410]
[-2.21407318 108.54982758]
[-17.21328163 108.70382690]
[-32.21249390 108.85781860]
[-38.17739105 111.93395233]
[-43.92528915 111.54723358]
[-47.82762527 108.69750214]
[-62.82051086 108.23557281]
[-77.81339264 107.77365112]
[-93.83121490 113.32935333]
[-103.60397339 99.47549438]
[-92.99689484 86.24952698]
[-77.35147095 92.78076172]
[-62.35858536 93.24269104]
[-47.36569977 93.70461273]
[-32.36648941 93.85861206]
[-17.36727905 93.70461273]
[-2.36806989 93.55062103]
[3.12785292 79.66810608]
[13.54834843 68.91828156]
[27.32785416 62.96092987]
[42.37894821 62.73243713]
[56.40855026 68.29875946]
[67.26728821 78.84062195]
[73.27877045 92.77394867]
[88.27797699 92.61995697]
[101.77336121 86.07208252]
[111.17721558 74.38587189]
[120.58107758 62.69966507]
[125.99970245 48.71258163]
[126.92311096 33.74103546]
[127.53894043 18.75368118]
[127.84691620 3.75684237]
[128.15489197 -11.23999596]
[128.46287537 -26.23683357]
[128.77084351 -41.23367310]
[129.07882690 -56.23051071]
[114.54871368 -60.27112579]
[101.48036194 -67.79901123]
[90.69525909 -78.34094238]
[82.87136841 -91.23425293]
[78.50050354 -105.66846466]
[77.85741425 -120.73622131]
[80.98254395 -135.49035645]
[87.67942810 -149.00340271]
[97.52709961 -160.42593384]
[109.90652466 -169.03990173]
[124.03952789 -174.30384827]
[139.03768921 -175.88685608]
[153.95822144 -173.68943787]
[167.86318970 -167.84970093]
[179.87854004 -158.73474121]
[189.24896240 -146.91755676]
[195.38542175 -133.14096069]
[197.90217590 -118.27095795]
[196.64102173 -103.24230957]
[191.68124390 -88.99971771]
[183.33462524 -76.43848419]
[172.12580872 -66.34822083]
[158.75941467 -59.36320877]
[144.07566833 -55.92253113]
[143.76768494 -40.92569351]
[143.45971680 -25.92885590]
[143.15173340 -10.93201828]
[142.84375000 4.06481981]
[142.53578186 19.06165886]
[145.18153381 23.10507393]
[145.27281189 28.86524391]
[141.89466858 34.66444778]
[140.97125244 49.63599777]
[151.63215637 60.18801117]
[166.59344482 59.11094284]
[181.55471802 58.03387451]
[184.23742676 43.19292068]
[190.52740479 29.48572922]
[200.02925110 17.77394676]
[212.14566040 8.79378510]
[226.11500549 3.10974455]
[241.05914307 1.07912803]
[256.03869629 2.82958245]
[270.11199951 8.25107288]
[282.39443970 17.00279808]
[292.11389160 28.53462029]
[298.65942383 42.12163925]
[301.61953735 56.90975952]
[300.80816650 71.96939087]
[296.27633667 86.35387421]
[288.30889893 99.15898132]
[277.40670776 109.57978058]
[264.25506592 116.96120453]
[249.68074036 120.83926392]
[234.59982300 120.97016144]
[219.96035767 117.34568024]
[206.68258667 110.19365692]
[195.60115051 99.96367645]
[187.41262817 87.29879761]
[182.63179016 72.99515533]
[167.67051697 74.07221985]
[152.70922852 75.14929199]
[141.13337708 76.27529144]
[132.26728821 72.10352325]
[122.86342621 83.78973389]
[113.45957184 95.47594452]
[114.09288025 118.17118073]
[114.09288025 133.17117310]
[114.09288025 148.17117310]
[114.09288025 163.17117310]
[114.09288025 178.17117310]
[114.09288025 193.17117310]
[114.09288025 208.17117310]
[114.09288025 223.17117310]
[114.09288025 238.17117310]
[114.09288025 253.17117310]
[128.70289612 256.91262817]
[141.92304993 264.17059326]
[152.92233276 274.48886108]
[161.00929260 287.21881104]
[165.67559814 301.56024170]
[166.62791443 316.61163330]
[163.80638123 331.42681885]
[157.38835144 345.07449341]
[147.77728271 356.69680786]
[135.57733154 365.56314087]
[121.55538177 371.11614990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 54]
[23 53]
[30 46]
[31 45]
[32 44]
[35 43]
[36 42]
[37 41]
[55 131]
[56 130]
[57 129]
[58 98]
[59 97]
[60 94]
[61 93]
[62 92]
[63 91]
[64 90]
[65 89]
[99 127]
[100 126]
[101 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
