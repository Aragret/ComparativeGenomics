%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACCACCUGGGGGGGGGGCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACxxxxxxxxxxUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGGCCACCACCCCCCCCCCCACACCACCU\
) } def
/len { sequence length } bind def

/coor [
[80.07825470 501.17208862]
[66.23231506 495.15606689]
[54.52365875 485.62664795]
[45.82113266 473.29098511]
[40.77053070 459.06445312]
[39.74663925 444.00277710]
[42.82543945 429.22360229]
[49.77846146 415.82366943]
[60.08974457 404.79733276]
[72.99412537 396.96282959]
[87.53401184 392.90151978]
[87.53401184 377.90151978]
[87.53401184 362.90151978]
[87.53401184 347.90151978]
[87.53401184 332.90151978]
[87.53401184 317.90151978]
[87.53401184 302.90151978]
[87.53401184 287.90151978]
[87.53401184 272.90151978]
[87.53401184 257.90151978]
[75.15325165 246.56245422]
[74.76517487 229.44129944]
[87.09502411 217.07553101]
[86.78296661 202.07878113]
[84.78613281 200.02452087]
[83.51018524 197.03019714]
[83.32703400 193.37666321]
[84.49620056 189.47741699]
[87.12098694 185.83435059]
[88.05661011 170.86355591]
[88.99224091 155.89276123]
[89.92787170 140.92196655]
[77.02456665 135.32966614]
[66.67964935 125.80329132]
[60.04505539 113.40364075]
[57.85956192 99.51145935]
[60.36653137 85.67368317]
[67.28680420 73.43117523]
[77.84979248 64.14719391]
[72.36276245 50.18680191]
[66.87573242 36.22641373]
[61.38870239 22.26602364]
[55.90166855 8.30563354]
[50.41463852 -5.65475655]
[44.92760849 -19.61514664]
[36.28849030 -31.87751389]
[24.98948669 -41.74323654]
[13.69048119 -51.60895920]
[2.39147663 -61.47468567]
[-13.09267521 -64.72300720]
[-17.59077072 -78.92218018]
[-28.88977623 -88.78790283]
[-44.92890167 -89.14289093]
[-54.53658676 -101.99092102]
[-50.34263611 -117.47608948]
[-35.56429291 -123.71949005]
[-21.53823280 -115.93173218]
[-19.02405357 -100.08690643]
[-7.72504807 -90.22118378]
[6.95092297 -87.67852020]
[12.25719929 -72.77368927]
[23.55620384 -62.90796661]
[34.85520935 -53.04224396]
[46.15421295 -43.17652130]
[41.60469818 -57.46994019]
[40.68209457 -72.44154358]
[43.44223785 -87.18540955]
[49.71810532 -100.80941010]
[59.12995911 -112.48918152]
[71.10829926 -121.51799011]
[84.92832947 -127.34951782]
[99.75382996 -129.63090515]
[114.68771362 -128.22410583]
[128.82635498 -123.21424866]
[141.31425476 -114.90447235]
[151.39578247 -103.79758453]
[158.46090698 -90.56565857]
[162.08213806 -76.00933075]
[162.04037476 -61.00938797]
[158.33810425 -46.47345734]
[151.19938660 -33.28108978]
[141.05615234 -22.23053169]
[128.52215576 -13.99044323]
[114.35582733 -9.05941868]
[99.41433716 -7.73582697]
[84.60178375 -10.09975815]
[70.81444550 -16.00817299]
[58.88799667 -25.10217857]
[64.37503052 -11.14178848]
[69.86206055 2.81860161]
[75.34909058 16.77899170]
[80.83612061 30.73938179]
[86.32315063 44.69977188]
[91.81018829 58.66016006]
[110.29922485 59.13459396]
[126.80461884 67.47973633]
[138.14743042 82.08830261]
[152.64302063 78.23114777]
[167.13862610 74.37398529]
[181.63421631 70.51682281]
[184.00094604 55.47293854]
[192.28739929 42.69583130]
[205.05790710 34.39921188]
[220.09991455 32.02051926]
[234.80728149 35.97187805]
[246.63188171 45.56869125]
[253.52502441 59.14825058]
[254.29243469 74.35781860]
[248.80114746 88.56224823]
[238.00257874 99.30052948]
[223.76762390 104.71218872]
[208.56259155 103.85963440]
[195.02183533 96.89056396]
[185.49137878 85.01242065]
[170.99578857 88.86958313]
[156.50018311 92.72673798]
[142.00459290 96.58390045]
[141.07215881 109.44105530]
[136.29681396 121.41487122]
[128.12538147 131.38500977]
[117.32240295 138.41860962]
[104.89865875 141.85758972]
[103.96303558 156.82838440]
[103.02740479 171.79917908]
[102.09177399 186.76997375]
[101.77971649 201.76672363]
[102.09177399 216.76347351]
[112.84683990 224.93576050]
[116.85296631 237.63139343]
[112.85498810 250.12501526]
[102.53401184 257.90151978]
[102.53401184 272.90151978]
[102.53401184 287.90151978]
[102.53401184 302.90151978]
[102.53401184 317.90151978]
[102.53401184 332.90151978]
[102.53401184 347.90151978]
[102.53401184 362.90151978]
[102.53401184 377.90151978]
[102.53401184 392.90151978]
[117.07389832 396.96282959]
[129.97828674 404.79733276]
[140.28956604 415.82366943]
[147.24258423 429.22360229]
[150.32138062 444.00277710]
[149.29750061 459.06445312]
[144.24688721 473.29098511]
[135.54437256 485.62664795]
[123.83570862 495.15606689]
[109.98976898 501.17208862]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 127]
[24 126]
[29 125]
[30 124]
[31 123]
[32 122]
[39 94]
[40 93]
[41 92]
[42 91]
[43 90]
[44 89]
[45 88]
[46 64]
[47 63]
[48 62]
[49 61]
[51 59]
[52 58]
[97 117]
[98 116]
[99 115]
[100 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
