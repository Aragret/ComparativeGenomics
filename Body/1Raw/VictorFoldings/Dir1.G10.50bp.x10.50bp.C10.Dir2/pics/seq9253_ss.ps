%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCAUCUAUGGGGGGGGGGUGAUGAGGGUCUUACUCUUUUAGUAUAAAUAGUACCGUUAACUUCCAAUUxxxxxxxxxxGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCCCCCCCCCCCUCCAUAUAU\
) } def
/len { sequence length } bind def

/coor [
[81.22588348 472.64535522]
[67.37994385 466.62933350]
[55.67128372 457.09991455]
[46.96875763 444.76425171]
[41.91815567 430.53771973]
[40.89426422 415.47604370]
[43.97306442 400.69689941]
[50.92608643 387.29696655]
[61.23736954 376.27062988]
[74.14174652 368.43612671]
[88.68164062 364.37481689]
[88.68164062 349.37481689]
[88.68164062 334.37481689]
[88.68164062 319.37481689]
[88.68164062 304.37481689]
[88.68164062 289.37481689]
[88.68164062 274.37481689]
[88.68164062 259.37481689]
[88.68164062 244.37481689]
[88.68164062 229.37481689]
[85.51605988 222.64244080]
[88.84091949 214.06356812]
[89.15297699 199.06681824]
[89.46503448 184.07005310]
[89.77709198 169.07330322]
[86.75225067 162.27653503]
[90.25486755 153.76869202]
[90.87884521 138.78167725]
[91.50282288 123.79465485]
[85.02455139 120.35002136]
[79.80911255 115.18933105]
[76.29631805 108.74775696]
[74.78240204 101.56851196]
[60.20969772 98.01374817]
[45.63699341 94.45898438]
[31.06429100 90.90422821]
[19.61576080 96.93622589]
[7.52068281 93.63045502]
[1.15411282 83.29730225]
[-13.34148407 79.44013977]
[-27.83708000 75.58298492]
[-42.33267593 71.72582245]
[-59.19396973 73.49591064]
[-65.56254578 57.78356934]
[-52.22724915 47.31427002]
[-38.47551727 57.23022842]
[-23.97992134 61.08738708]
[-9.48432446 64.94454956]
[5.01127243 68.80170441]
[21.64772797 63.30368042]
[34.61905289 76.33152008]
[49.19175720 79.88628387]
[63.76445770 83.44104767]
[78.33715820 86.99580383]
[83.77862549 80.62850952]
[91.00263977 76.38993835]
[99.21537018 74.74584961]
[107.51432037 75.87693024]
[116.02540588 63.52535629]
[124.53649902 51.17378235]
[110.82502747 57.25617981]
[96.11619568 60.19729614]
[81.12009430 59.85513687]
[66.56070709 56.24622345]
[53.14091873 49.54478455]
[41.50860214 40.07434845]
[32.22533035 28.29212189]
[25.73927689 14.76691818]
[22.36357307 0.15169944]
[22.26118660 -14.84795094]
[25.43706131 -29.50789070]
[31.73787308 -43.12037659]
[40.85943985 -55.02823257]
[52.36138916 -64.65657806]
[65.68844604 -71.54058838]
[80.19721222 -75.34792328]
[95.18724060 -75.89476013]
[109.93485260 -73.15471649]
[123.72808075 -67.26006317]
[135.90101624 -58.49538040]
[145.86598206 -47.28380966]
[153.14190674 -34.16660690]
[157.37751770 -19.77704048]
[158.36833191 -4.80980062]
[156.06651306 10.01253605]
[150.58320618 23.97438622]
[142.18446350 36.40010452]
[155.84071350 30.19469833]
[169.49694824 23.98929024]
[183.15319824 17.78388405]
[180.24356079 2.99771500]
[180.82289124 -12.06087399]
[184.85993958 -26.57979202]
[192.13697815 -39.77605438]
[202.26159668 -50.93799973]
[214.68775940 -59.46367645]
[228.74534607 -64.89331818]
[243.67625427 -66.93408966]
[258.67526245 -65.47595978]
[272.93353271 -60.59754181]
[285.68206787 -52.56193542]
[296.23342896 -41.80249023]
[304.01855469 -28.89944267]
[308.61761475 -14.54864216]
[309.78256226 0.47599080]
[307.45059204 15.36419678]
[301.74746704 29.31307411]
[292.98077393 41.57037735]
[281.62322998 51.47508621]
[268.28738403 58.49304962]
[253.69239807 62.24580002]
[238.62536621 62.53095627]
[223.89884949 59.33313751]
[210.30699158 52.82480240]
[198.58282471 43.35693359]
[189.35859680 31.44012451]
[175.70236206 37.64553070]
[162.04611206 43.85094070]
[148.38987732 50.05634689]
[136.88807678 59.68487167]
[128.37698364 72.03644562]
[119.86589050 84.38801575]
[123.96390533 108.00743103]
[106.48983765 124.41863251]
[105.86585999 139.40565491]
[105.24188232 154.39266968]
[104.77384186 169.38536072]
[104.46178436 184.38211060]
[104.14972687 199.37886047]
[103.83767700 214.37562561]
[103.68164062 229.37481689]
[103.68164062 244.37481689]
[103.68164062 259.37481689]
[103.68164062 274.37481689]
[103.68164062 289.37481689]
[103.68164062 304.37481689]
[103.68164062 319.37481689]
[103.68164062 334.37481689]
[103.68164062 349.37481689]
[103.68164062 364.37481689]
[118.22152710 368.43612671]
[131.12590027 376.27062988]
[141.43719482 387.29696655]
[148.39021301 400.69689941]
[151.46900940 415.47604370]
[150.44511414 430.53771973]
[145.39451599 444.76425171]
[136.69198608 457.09991455]
[124.98332977 466.62933350]
[111.13739014 472.64535522]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[24 128]
[25 127]
[27 126]
[28 125]
[29 124]
[33 54]
[34 53]
[35 52]
[36 51]
[39 49]
[40 48]
[41 47]
[42 46]
[58 122]
[59 121]
[60 120]
[87 119]
[88 118]
[89 117]
[90 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
