%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUAACCCCGGGGGGGGGGAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUCACACGAUUAACCCAAGxxxxxxxxxxAAACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCACCCCCCCCCCAAACUAACCCC\
) } def
/len { sequence length } bind def

/coor [
[97.09521484 593.62689209]
[83.07326508 588.07391357]
[70.87331390 579.20758057]
[61.26224136 567.58526611]
[54.84421539 553.93756104]
[52.02267838 539.12237549]
[52.97499466 524.07098389]
[57.64130020 509.72955322]
[65.72826385 496.99960327]
[76.72753906 486.68133545]
[89.94770050 479.42333984]
[104.55770874 475.68191528]
[104.55770874 460.68191528]
[104.55770874 445.68191528]
[104.55770874 430.68191528]
[104.55770874 415.68191528]
[104.55770874 400.68191528]
[104.55770874 385.68191528]
[104.55770874 370.68191528]
[104.55770874 355.68191528]
[104.55770874 340.68191528]
[96.82041168 327.95465088]
[104.55770874 314.15447998]
[96.82041168 301.42721558]
[104.55770874 287.62704468]
[104.55770874 272.62704468]
[104.40371704 257.62780762]
[103.63405609 242.64758301]
[102.40344238 227.69815063]
[101.17282867 212.74870300]
[99.94221497 197.79927063]
[98.71160126 182.84983826]
[89.95623016 170.80024719]
[96.53527069 156.41181946]
[94.69194794 141.52551270]
[92.23902130 126.72743225]
[89.78608704 111.92935944]
[80.38223267 100.24314880]
[66.45151520 94.68121338]
[52.52080154 89.11927032]
[38.53371811 83.70064545]
[24.49174118 78.42590332]
[15.29463863 78.33058167]
[10.21746254 72.89601898]
[-3.71325397 67.33408356]
[-19.85695457 70.21730042]
[-30.21741486 57.50537872]
[-24.13667870 42.27525711]
[-7.87008858 40.19437408]
[1.84868336 53.40336609]
[15.77939987 58.96530533]
[29.76648331 64.38392639]
[43.80846024 69.65866852]
[51.22177887 69.06295013]
[58.08273697 75.18855286]
[72.01345825 80.75049591]
[85.94416809 86.31243134]
[98.00659943 77.39627838]
[96.77599335 62.44684601]
[95.54537964 47.49740982]
[94.31476593 32.54797745]
[93.08415222 17.59854126]
[78.19897461 15.21213627]
[64.31771088 9.33217049]
[52.24740219 0.30050060]
[42.68980026 -11.35778522]
[36.20056534 -24.96488953]
[33.15698242 -39.72971344]
[33.73599243 -54.79384995]
[37.90393829 -69.28148651]
[45.41849899 -82.35033417]
[55.84278870 -93.24059296]
[68.57075500 -101.31909943]
[82.86240387 -106.11620331]
[97.88684845 -107.35298920]
[112.77057648 -104.95755768]
[126.64826965 -99.06917572]
[138.71310425 -90.03018951]
[148.26364136 -78.36611176]
[154.74461365 -64.75507355]
[157.77925110 -49.98841095]
[157.19110107 -34.92462921]
[153.01437378 -20.43951988]
[145.49189758 -7.37522984]
[135.06100464 3.50870156]
[122.32814026 11.57949638]
[108.03358459 16.36792946]
[109.26419830 31.31736374]
[110.49481201 46.26679993]
[111.72542572 61.21623230]
[112.95603943 76.16566467]
[126.64665985 82.29483795]
[138.61692810 73.25532532]
[150.58717346 64.21580505]
[162.55743408 55.17628098]
[163.17906189 39.55105972]
[173.73715210 28.01585960]
[189.24649048 26.01725197]
[202.38404846 34.49891663]
[206.94667053 49.45607376]
[200.78002930 63.82640839]
[186.79580688 70.82469177]
[171.59695435 67.14653778]
[159.62669373 76.18605804]
[147.65643311 85.22557831]
[135.68618774 94.26509857]
[120.69365692 110.78513336]
[104.58416748 109.47642517]
[107.03709412 124.27450562]
[109.49002838 139.07258606]
[112.46661377 142.42514038]
[114.02505493 146.17944336]
[114.21676636 149.82772827]
[113.25673676 152.93377686]
[111.48470306 155.18121338]
[120.32810211 168.30007935]
[113.66104126 181.61923218]
[114.89165497 196.56866455]
[116.12226105 211.51809692]
[117.35287476 226.46752930]
[118.58348846 241.41696167]
[121.63288116 245.80519104]
[122.55794525 250.45812988]
[121.62214661 254.50706482]
[119.40055084 257.31985474]
[122.72227478 265.89666748]
[119.55770874 272.62704468]
[119.55770874 287.62704468]
[127.29501343 301.42721558]
[119.55770874 314.15447998]
[127.29501343 327.95465088]
[119.55770874 340.68191528]
[119.55770874 355.68191528]
[119.55770874 370.68191528]
[119.55770874 385.68191528]
[119.55770874 400.68191528]
[119.55770874 415.68191528]
[119.55770874 430.68191528]
[119.55770874 445.68191528]
[119.55770874 460.68191528]
[119.55770874 475.68191528]
[134.16772461 479.42333984]
[147.38787842 486.68133545]
[158.38716125 496.99960327]
[166.47412109 509.72955322]
[171.14042664 524.07098389]
[172.09274292 539.12237549]
[169.27120972 553.93756104]
[162.85317993 567.58526611]
[153.24211121 579.20758057]
[141.04216003 588.07391357]
[127.02021027 593.62689209]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 130]
[25 128]
[26 127]
[27 125]
[28 121]
[29 120]
[30 119]
[31 118]
[32 117]
[34 115]
[35 110]
[36 109]
[37 108]
[38 57]
[39 56]
[40 55]
[41 53]
[42 52]
[44 51]
[45 50]
[58 91]
[59 90]
[60 89]
[61 88]
[62 87]
[92 106]
[93 105]
[94 104]
[95 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
