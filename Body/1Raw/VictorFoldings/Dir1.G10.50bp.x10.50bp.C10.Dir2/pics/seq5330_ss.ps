%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAACUAUUUGGGGGGGGGGAUAUUAUCCUAACUACUACCGCAUUCCUACUACUCAACUUAAACUCCAGCxxxxxxxxxxAUUGAUGAGGGUCUUACUCUUUUAGUAUAAAUAGUACCGUUAACUUCCAACCCCCCCCCCUUAACUAGUU\
) } def
/len { sequence length } bind def

/coor [
[80.39620972 583.08312988]
[66.55027008 577.06713867]
[54.84160995 567.53771973]
[46.13908386 555.20202637]
[41.08848190 540.97552490]
[40.06459045 525.91381836]
[43.14339066 511.13467407]
[50.09641266 497.73474121]
[60.40769577 486.70840454]
[73.31208038 478.87390137]
[87.85196686 474.81259155]
[87.85196686 459.81259155]
[87.85196686 444.81259155]
[87.85196686 429.81259155]
[87.85196686 414.81259155]
[87.85196686 399.81259155]
[87.85196686 384.81259155]
[87.85196686 369.81259155]
[87.85196686 354.81259155]
[87.85196686 339.81259155]
[74.16114807 335.73101807]
[62.16705704 327.94027710]
[52.85118484 317.06713867]
[46.97887802 303.99108887]
[45.03649139 289.77310181]
[47.19110107 275.56954956]
[53.27618408 262.53833008]
[62.80443954 251.74424744]
[75.00682068 244.07212830]
[88.89459229 240.15426636]
[89.20664978 225.15751648]
[89.51869965 210.16076660]
[89.83075714 195.16401672]
[89.83075714 180.16401672]
[89.51869965 165.16725159]
[89.20664978 150.17050171]
[88.89459229 135.17375183]
[88.58253479 120.17699432]
[65.34138489 84.96218872]
[58.71289062 71.50622559]
[45.67373657 62.54569244]
[46.99041367 47.70939636]
[40.36191559 34.25343323]
[37.15016174 48.90555191]
[27.14475632 60.08105469]
[12.93556881 64.88719940]
[-1.79939592 62.07992172]
[-13.24603748 52.38588333]
[-18.44142723 38.31435394]
[-16.04075623 23.50770760]
[-6.66542721 11.79859829]
[7.25778151 6.21789503]
[22.12489128 8.21014404]
[34.08752823 17.25957489]
[30.38136864 2.72463965]
[26.67520714 -11.81029606]
[22.96904564 -26.34523201]
[7.89433908 -26.21616554]
[-6.77304935 -29.69914627]
[-20.18037605 -36.59167862]
[-31.54815865 -46.49303818]
[-40.21548843 -58.82757950]
[-45.67845535 -72.87818146]
[-47.61945343 -87.82796478]
[-45.92563629 -102.80776215]
[-40.69547653 -116.94667816]
[-32.23305130 -129.42268372]
[-21.03035164 -139.51045227]
[-7.73869276 -146.62347412]
[6.86916924 -150.34823608]
[21.94395065 -150.46817017]
[36.60922623 -146.97628784]
[50.01237106 -140.07563782]
[61.37414932 -130.16737366]
[70.03399658 -117.82759094]
[75.48844910 -103.77367401]
[77.42037964 -88.82272339]
[75.71748352 -73.84394836]
[70.47875214 -59.70821381]
[62.00876236 -47.23733521]
[50.79994965 -37.15636444]
[37.50398254 -30.05139351]
[41.21014404 -15.51645756]
[44.91630554 -0.98152161]
[48.62246704 13.55341434]
[53.81788254 27.62493324]
[60.44638062 41.08089828]
[73.01141357 49.07896805]
[72.16885376 64.87772369]
[78.79735565 78.33368683]
[85.95864868 80.56209564]
[90.41570282 66.23957062]
[104.73815155 70.69686890]
[100.28125000 85.01891327]
[107.44255066 87.24732208]
[120.53570557 79.92821503]
[133.62886047 72.60910797]
[146.72201538 65.29000092]
[152.45480347 50.30619049]
[167.78698730 45.58351898]
[180.95703125 54.74481964]
[181.86199951 70.76232910]
[169.80767822 81.34878540]
[154.04112244 78.38315582]
[140.94796753 85.70226288]
[127.85480499 93.02136993]
[114.76165009 100.34047699]
[129.50646973 103.09555054]
[135.80004883 116.71138000]
[128.34516907 129.72770691]
[113.41650391 131.18887329]
[103.57928467 119.86493683]
[103.89134216 134.86169434]
[104.20339966 149.85844421]
[104.51545715 164.85519409]
[104.82751465 179.85195923]
[107.96861267 185.78837585]
[107.64030457 191.54367065]
[104.82751465 195.47607422]
[104.51545715 210.47282410]
[104.20339966 225.46957397]
[103.89134216 240.46632385]
[118.82672119 245.58572388]
[131.43975830 255.05003357]
[140.50802612 267.92703247]
[145.15725708 282.95449829]
[144.94563293 298.66390991]
[139.90576172 313.52398682]
[130.54026794 326.08984375]
[117.77178192 335.14367676]
[102.85196686 339.81259155]
[102.85196686 354.81259155]
[102.85196686 369.81259155]
[102.85196686 384.81259155]
[102.85196686 399.81259155]
[102.85196686 414.81259155]
[102.85196686 429.81259155]
[102.85196686 444.81259155]
[102.85196686 459.81259155]
[102.85196686 474.81259155]
[117.39185333 478.87390137]
[130.29623413 486.70840454]
[140.60751343 497.73474121]
[147.56053162 511.13467407]
[150.63934326 525.91381836]
[149.61544800 540.97552490]
[144.56484985 555.20202637]
[135.86231995 567.53771973]
[124.15365601 577.06713867]
[110.30771637 583.08312988]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[30 122]
[31 121]
[32 120]
[33 119]
[34 116]
[35 115]
[36 114]
[37 113]
[38 112]
[39 90]
[40 89]
[42 87]
[43 86]
[54 85]
[55 84]
[56 83]
[57 82]
[95 107]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
