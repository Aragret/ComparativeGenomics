%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUUUCUCUAGGGGGGGGGGACAGCAGUAAUAUUAAUAAUUUUCAUGAUUUGAGAAGCCUUCGCUUCGAAxxxxxxxxxxUAUUCUUUAUCUGCCUCUUCCUACACAUCGGGCGAGGCCUAUAUUACGGACCCCCCCCCCUCAUUUCUCUA\
) } def
/len { sequence length } bind def

/coor [
[124.23410034 610.77404785]
[110.21215820 605.22100830]
[98.01219940 596.35467529]
[88.40113068 584.73236084]
[81.98310089 571.08465576]
[79.16156769 556.26947021]
[80.11388397 541.21813965]
[84.78018951 526.87670898]
[92.86715698 514.14672852]
[103.86643219 503.82846069]
[117.08658600 496.57049561]
[131.69659424 492.82904053]
[131.69659424 477.82904053]
[131.69659424 462.82904053]
[131.69659424 447.82904053]
[131.69659424 432.82904053]
[131.69659424 417.82904053]
[131.69659424 402.82904053]
[131.69659424 387.82904053]
[131.69659424 372.82904053]
[131.69659424 357.82904053]
[123.95929718 345.10177612]
[131.69659424 331.30160522]
[128.96838379 327.31335449]
[128.75886536 321.55627441]
[132.01722717 315.68893433]
[129.13165283 308.83435059]
[132.80268860 300.40112305]
[133.72610474 285.42956543]
[134.64952087 270.45800781]
[135.57292175 255.48646545]
[136.49633789 240.51492310]
[137.41975403 225.54336548]
[138.34317017 210.57182312]
[123.57200623 199.20700073]
[119.13361359 180.88014221]
[127.25515747 163.61927795]
[119.88892365 150.55258179]
[112.52268219 137.48588562]
[105.15644073 124.41919708]
[92.74318695 128.42216492]
[78.07593536 125.60693359]
[64.98919678 114.99417877]
[57.59786606 97.73152161]
[44.03596878 91.32254791]
[30.47407150 84.91357422]
[14.94651031 88.94772339]
[2.19816589 79.20815277]
[2.00847673 63.16622162]
[14.52295685 53.12792587]
[30.14156723 56.79378891]
[36.88304901 71.35167694]
[50.44494247 77.76065063]
[64.00684357 84.16962433]
[73.64865112 72.67896271]
[64.98204803 60.43600464]
[56.31543732 48.19305038]
[47.64883041 35.95009995]
[38.98222351 23.70714378]
[23.86612701 17.34823990]
[22.08378601 1.04623723]
[35.46871948 -8.42876148]
[50.25165558 -1.32968891]
[51.22517776 15.04053688]
[59.89178467 27.28349113]
[68.55839539 39.52644348]
[77.22499847 51.76939774]
[85.89160919 64.01235199]
[100.27609253 59.75950623]
[100.89191437 44.77215195]
[101.50773621 29.78479767]
[88.01545715 22.64889336]
[78.96240234 10.36048794]
[76.14605713 -4.64054394]
[80.12561035 -19.37573624]
[90.11091614 -30.91940689]
[104.11939240 -36.97955322]
[119.36964417 -36.35292435]
[132.83372498 -29.16394234]
[141.83831787 -16.83998108]
[144.59556580 -1.82797575]
[140.55801392 12.89143181]
[130.52732849 24.39569092]
[116.49509430 30.40062332]
[115.87926483 45.38797760]
[115.26344299 60.37533188]
[132.85723877 92.46466827]
[118.22313690 117.05295563]
[125.58937836 130.11965942]
[132.95561218 143.18635559]
[140.32185364 156.25303650]
[151.82812500 156.01423645]
[162.38031006 160.26565552]
[170.32031250 168.22724915]
[184.46762085 163.24192810]
[198.61494446 158.25660706]
[212.76225281 153.27127075]
[226.90957642 148.28594971]
[233.20082092 136.98004150]
[245.13470459 133.13897705]
[256.11239624 138.31124878]
[270.35910034 133.61744690]
[274.12005615 118.65554047]
[285.38864136 108.11879730]
[300.56903076 105.36945343]
[314.81726074 111.28481293]
[323.58676147 123.97731018]
[324.07922363 139.39682007]
[316.13748169 152.62301636]
[302.29574585 159.43548584]
[286.97082520 157.66038513]
[275.05288696 147.86413574]
[260.80621338 152.55793762]
[249.87872314 166.25592041]
[231.89489746 162.43327332]
[217.74757385 167.41859436]
[203.60026550 172.40391541]
[189.45294189 177.38923645]
[175.30563354 182.37455750]
[173.06683350 195.31765747]
[165.15104675 205.79985046]
[153.31471252 211.49522400]
[152.39131165 226.46678162]
[151.46789551 241.43832397]
[150.54447937 256.40988159]
[149.62106323 271.38143921]
[148.69764709 286.35296631]
[147.77423096 301.32452393]
[147.00457764 316.30477905]
[146.69659424 331.30160522]
[154.43389893 345.10177612]
[146.69659424 357.82904053]
[146.69659424 372.82904053]
[146.69659424 387.82904053]
[146.69659424 402.82904053]
[146.69659424 417.82904053]
[146.69659424 432.82904053]
[146.69659424 447.82904053]
[146.69659424 462.82904053]
[146.69659424 477.82904053]
[146.69659424 492.82904053]
[161.30661011 496.57049561]
[174.52677917 503.82846069]
[185.52604675 514.14672852]
[193.61300659 526.87670898]
[198.27931213 541.21813965]
[199.23162842 556.26947021]
[196.41009521 571.08465576]
[189.99206543 584.73236084]
[180.38099670 596.35467529]
[168.18104553 605.22100830]
[154.15910339 610.77404785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 130]
[26 129]
[28 128]
[29 127]
[30 126]
[31 125]
[32 124]
[33 123]
[34 122]
[37 91]
[38 90]
[39 89]
[40 88]
[44 54]
[45 53]
[46 52]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[69 86]
[70 85]
[71 84]
[94 119]
[95 118]
[96 117]
[97 116]
[98 115]
[101 113]
[102 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
