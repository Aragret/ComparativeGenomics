%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCAUGACCGGGGGGGGGGCUUGGCCAUAAUAUGAUUUAUCUCCACACUAGCAGAGACCAACCGAACCCxxxxxxxxxxCUCAUGUUCAUACACCUAUCCCCCAUUCUCCUCCUAUCCCUCAACCCCGACCCCCCCCCCCAUCAUUACC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 363.09469604]
[71.19830322 357.07864380]
[59.48964310 347.54922485]
[50.78712082 335.21356201]
[45.73651886 320.98706055]
[44.71262741 305.92535400]
[47.79142761 291.14620972]
[54.74444962 277.74627686]
[65.05573273 266.71994019]
[77.96011353 258.88543701]
[92.50000000 254.82412720]
[92.50000000 239.82412720]
[92.50000000 224.82412720]
[92.50000000 209.82412720]
[92.50000000 194.82412720]
[92.50000000 179.82412720]
[92.50000000 164.82412720]
[92.50000000 149.82412720]
[92.50000000 134.82412720]
[92.50000000 119.82412720]
[83.74762726 113.60537720]
[79.16562653 103.89548492]
[64.39956665 101.25661469]
[49.63351440 98.61775208]
[34.86745834 95.97888947]
[34.79130173 115.56748199]
[17.32735634 133.80390930]
[2.91513991 137.96179199]
[-11.49707603 142.11968994]
[-25.03954315 152.31958008]
[-38.58975220 142.12997437]
[-32.54943085 126.28854370]
[-15.65496349 127.70746613]
[-1.24274755 123.54958344]
[13.16946888 119.39169312]
[13.94825935 111.93223572]
[-0.72179377 115.06106567]
[-8.23075867 102.07585907]
[1.79852176 90.92178345]
[15.50584030 97.01332855]
[16.28462982 89.55387115]
[3.04204488 82.50873566]
[-10.20054054 75.46360016]
[-23.44312668 68.41846466]
[-36.42740631 76.62236786]
[-51.77470398 77.21898651]
[-65.35668182 70.04782867]
[-73.51984406 57.03789520]
[-74.06835175 41.68880081]
[-66.85465240 28.12937164]
[-53.81920242 20.00702477]
[-38.46846390 19.50663185]
[-24.93171120 26.76279640]
[-16.85026360 39.82364655]
[-16.39799118 55.17588043]
[-3.15540600 62.22101212]
[10.08718014 69.26615143]
[23.32976532 76.31128693]
[37.50632477 81.21283722]
[52.27238083 83.85169983]
[67.03843689 86.49056244]
[81.80448914 89.12942505]
[94.54972839 79.51731110]
[110.38661957 81.52395630]
[121.88842010 71.89543152]
[113.42626190 59.49548340]
[106.22027588 46.32580185]
[100.33985901 32.51321793]
[95.84165192 18.19075584]
[92.76896667 3.49635530]
[91.15139771 -11.42846489]
[91.00452423 -26.43996811]
[92.32975769 -41.39358139]
[95.11434174 -56.14528656]
[99.33145905 -70.55301666]
[104.94049072 -84.47801971]
[111.88741302 -97.78617096]
[120.10533142 -110.34931946]
[129.51509094 -122.04646301]
[140.02609253 -132.76493835]
[151.53706360 -142.40155029]
[163.93717957 -150.86344910]
[177.10700989 -158.06918335]
[190.91970825 -163.94932556]
[205.24226379 -168.44725037]
[219.93672180 -171.51963806]
[234.86157227 -173.13690186]
[249.87309265 -173.28347778]
[264.82666016 -171.95794678]
[279.57833862 -169.17306519]
[293.98596191 -164.95565796]
[307.91085815 -159.34634399]
[321.21887207 -152.39915466]
[333.78186035 -144.18098450]
[345.47882080 -134.77099609]
[356.19708252 -124.25978851]
[365.83346558 -112.74861145]
[374.29510498 -100.34832764]
[381.50057983 -87.17835999]
[387.38043213 -73.36553955]
[391.87808228 -59.04289627]
[394.95016479 -44.34837341]
[396.56713867 -29.42348671]
[396.71340942 -14.41197872]
[395.38757324 0.54158121]
[392.60241699 15.29317760]
[388.38470459 29.70074081]
[382.77511597 43.62551498]
[375.82766724 56.93339157]
[367.60925293 69.49620819]
[358.19900513 81.19297028]
[347.68759155 91.91104126]
[336.17623901 101.54718018]
[323.77578735 110.00859070]
[310.60565186 117.21379089]
[296.79272461 123.09337616]
[282.47000122 127.59072876]
[267.77542114 130.66253662]
[252.85049438 132.27920532]
[237.83898926 132.42517090]
[222.88545227 131.09904480]
[208.13391113 128.31356812]
[193.72642517 124.09559631]
[179.80177307 118.48572540]
[166.49403381 111.53800201]
[153.93138123 103.31933594]
[142.23480225 93.90886688]
[131.51695251 83.39723206]
[120.01514435 93.02576447]
[119.20439911 108.96867371]
[107.50000000 119.82412720]
[107.50000000 134.82412720]
[107.50000000 149.82412720]
[107.50000000 164.82412720]
[107.50000000 179.82412720]
[107.50000000 194.82412720]
[107.50000000 209.82412720]
[107.50000000 224.82412720]
[107.50000000 239.82412720]
[107.50000000 254.82412720]
[122.03988647 258.88543701]
[134.94427490 266.71994019]
[145.25555420 277.74627686]
[152.20857239 291.14620972]
[155.28736877 305.92535400]
[154.26348877 320.98706055]
[149.21287537 335.21356201]
[140.51036072 347.54922485]
[128.80169678 357.07864380]
[114.95575714 363.09469604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 62]
[23 61]
[24 60]
[25 59]
[27 35]
[28 34]
[29 33]
[41 58]
[42 57]
[43 56]
[44 55]
[64 129]
[65 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
