%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCAACACCGGGGGGGGGGACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAUACCAACACCUxxxxxxxxxxACAGCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGCCCCCCCCCCACCUCAACCCC\
) } def
/len { sequence length } bind def

/coor [
[91.70696259 470.97070312]
[77.68502045 465.41769409]
[65.48506165 456.55136108]
[55.87398911 444.92904663]
[49.45596695 431.28137207]
[46.63442993 416.46618652]
[47.58674240 401.41479492]
[52.25304794 387.07336426]
[60.34001541 374.34341431]
[71.33928680 364.02514648]
[84.55944824 356.76718140]
[99.16946411 353.02572632]
[99.16946411 338.02572632]
[99.16946411 323.02572632]
[99.16946411 308.02572632]
[99.16946411 293.02572632]
[99.16946411 278.02572632]
[99.16946411 263.02572632]
[99.16946411 248.02572632]
[99.16946411 233.02572632]
[99.16946411 218.02572632]
[86.67845917 226.33084106]
[72.33428955 221.94396973]
[66.62546539 208.07279968]
[73.72629547 194.86000061]
[88.44464111 191.96681213]
[100.01810455 201.50819397]
[101.55539703 186.58718872]
[103.09268951 171.66616821]
[101.09663391 156.79956055]
[95.67800903 142.81248474]
[90.25938416 128.82539368]
[77.67094421 120.66873169]
[62.69070435 121.43839264]
[50.91926575 132.33851624]
[35.08008957 129.78900146]
[27.32363510 115.74560547]
[33.59999466 100.98122406]
[49.09447479 96.82183075]
[61.92104340 106.45815277]
[76.90128326 105.68849182]
[80.67466736 92.97756958]
[89.75605774 86.01618195]
[86.99981689 71.27158356]
[84.24356842 56.52698898]
[81.48732758 41.78239441]
[78.73108673 27.03779602]
[63.74033737 27.96354103]
[48.74944687 27.04003525]
[33.98567581 24.28127670]
[19.67284393 19.72908974]
[6.02792358 13.45248413]
[-6.74222898 5.54661179]
[-18.44402122 -3.86867666]
[-28.90005875 -14.65064812]
[-37.95182800 -26.63585091]
[-45.46210861 -39.64258957]
[-51.31704712 -53.47369003]
[-55.42788315 -67.91947174]
[-57.73229599 -82.76094818]
[-58.19535446 -97.77311707]
[-56.81003571 -112.72840118]
[-53.59733963 -127.40007782]
[-48.60597610 -141.56573486]
[-41.91160965 -155.01062012]
[-33.61572266 -167.53092957]
[-23.84407997 -178.93682861]
[-12.74481869 -189.05543518]
[-0.48620057 -197.73332214]
[12.74593830 -204.83895874]
[26.75099945 -210.26463318]
[41.31667328 -213.92807007]
[56.22214508 -215.77374268]
[71.24145508 -215.77366638]
[86.14691162 -213.92785645]
[100.71254730 -210.26428223]
[114.71755981 -204.83848572]
[127.94963074 -197.73272705]
[140.20817566 -189.05471802]
[151.30734253 -178.93601990]
[161.07887268 -167.53001404]
[169.37464905 -155.00964355]
[176.06887817 -141.56469727]
[181.06011963 -127.39898682]
[184.27267456 -112.72727203]
[185.65785217 -97.77198029]
[185.19465637 -82.75981140]
[182.89010620 -67.91836548]
[178.77912903 -53.47261810]
[172.92407227 -39.64157104]
[165.41366577 -26.63490105]
[156.36178589 -14.64978409]
[145.90563965 -3.86791015]
[134.20376587 5.54726934]
[121.43354034 13.45302296]
[107.78855896 19.72950172]
[93.47568512 24.28155327]
[96.23192596 39.02614975]
[98.98816681 53.77074814]
[101.74441528 68.51534271]
[104.50065613 83.25994110]
[120.54390717 100.85487366]
[104.24646759 123.40677643]
[109.66509247 137.39385986]
[115.08371735 151.38093567]
[117.64280701 136.60084534]
[123.73333740 122.89299011]
[132.98661804 111.08718872]
[144.84246826 101.89813232]
[158.58317566 95.88209534]
[173.37693787 93.40327454]
[188.32818604 94.61171722]
[202.53181458 99.43427277]
[215.12797546 107.57901001]
[225.35414124 118.55286407]
[232.59126282 131.69151306]
[236.40122986 146.19958496]
[236.55337524 161.19880676]
[233.03851318 175.78118896]
[226.06942749 189.06394958]
[216.06797791 200.24299622]
[203.63963318 208.64157104]
[189.53675842 213.75128174]
[174.61311340 215.26278687]
[159.77210999 213.08457947]
[145.91217041 207.34852600]
[133.87234497 198.40187073]
[124.38148499 186.78622437]
[118.01371002 173.20346069]
[116.47641754 188.12448120]
[114.93912506 203.04548645]
[114.16946411 218.02572632]
[114.16946411 233.02572632]
[114.16946411 248.02572632]
[114.16946411 263.02572632]
[114.16946411 278.02572632]
[114.16946411 293.02572632]
[114.16946411 308.02572632]
[114.16946411 323.02572632]
[114.16946411 338.02572632]
[114.16946411 353.02572632]
[128.77947998 356.76718140]
[141.99963379 364.02514648]
[152.99890137 374.34341431]
[161.08587646 387.07336426]
[165.75218201 401.41479492]
[166.70449829 416.46618652]
[163.88296509 431.28137207]
[157.46493530 444.92904663]
[147.85386658 456.55136108]
[135.65390015 465.41769409]
[121.63195801 470.97070312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[27 131]
[28 130]
[29 129]
[30 105]
[31 104]
[32 103]
[33 41]
[34 40]
[43 101]
[44 100]
[45 99]
[46 98]
[47 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
