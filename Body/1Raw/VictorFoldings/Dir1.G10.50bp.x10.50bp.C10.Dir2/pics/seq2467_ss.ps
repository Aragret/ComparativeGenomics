%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACACCCAAUGGGGGGGGGGUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUAACAUxxxxxxxxxxUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUACCCCCCCCCCUCACACCCCAU\
) } def
/len { sequence length } bind def

/coor [
[88.86949921 489.97821045]
[74.84755707 484.42520142]
[62.64759445 475.55886841]
[53.03652573 463.93655396]
[46.61849976 450.28887939]
[43.79696274 435.47369385]
[44.74927902 420.42230225]
[49.41558456 406.08087158]
[57.50255203 393.35092163]
[68.50182343 383.03265381]
[81.72198486 375.77468872]
[96.33199310 372.03323364]
[96.33199310 357.03323364]
[96.33199310 342.03323364]
[96.33199310 327.03323364]
[96.33199310 312.03323364]
[96.33199310 297.03323364]
[96.33199310 282.03323364]
[96.33199310 267.03323364]
[96.33199310 252.03323364]
[96.33199310 237.03323364]
[96.33199310 222.03323364]
[96.17800140 207.03402710]
[95.87002563 192.03718567]
[83.25862885 180.95315552]
[82.52142334 163.84210205]
[94.59859467 151.22746277]
[93.98276520 136.24011230]
[56.38197327 116.12651062]
[56.88863754 63.83567810]
[41.89575195 64.29760742]
[26.90286636 64.75952911]
[11.90997982 65.22145844]
[-3.08290577 65.68338013]
[-13.72482109 77.36778259]
[-29.51558685 78.02146149]
[-41.08681870 67.25660706]
[-41.57351303 51.45981216]
[-30.68692207 40.00303650]
[-14.88586521 39.68338394]
[-3.54483175 50.69049454]
[11.44805431 50.22856903]
[26.44094086 49.76664352]
[41.43382645 49.30471802]
[56.42671204 48.84279251]
[59.83850098 42.16374207]
[46.45954514 35.38114929]
[31.65302849 32.97967148]
[29.33528328 18.15981865]
[42.70155334 11.35226536]
[53.32495499 21.94115067]
[66.66207123 28.80564308]
[70.07386017 22.12659454]
[61.66045380 9.70827961]
[53.24704361 -2.71003485]
[44.83363342 -15.12834930]
[36.42022324 -27.54666328]
[28.00681114 -39.96497726]
[13.86076260 -47.05016327]
[13.12772655 -61.92671967]
[-0.76203722 -71.64838409]
[4.73463297 -87.68656158]
[21.66765594 -86.84450531]
[25.54604149 -70.34013367]
[39.09030533 -64.14318848]
[40.42512512 -48.37838745]
[48.83853531 -35.96007156]
[57.25194550 -23.54175949]
[65.66535950 -11.12344456]
[74.07876587 1.29486942]
[82.49217987 13.71318340]
[89.99217987 13.71318340]
[88.56237030 -1.21851611]
[87.13256836 -16.15021515]
[79.36031342 -28.97956085]
[83.81459045 -43.30294800]
[97.49182892 -49.46194839]
[111.16929626 -43.30347061]
[115.62412262 -28.98025322]
[107.85178375 -16.15021515]
[106.42198181 -1.21851611]
[104.99217987 13.71318340]
[112.49217987 13.71318340]
[120.90558624 1.29486942]
[129.31900024 -11.12344456]
[122.03255463 -24.58325195]
[121.84741211 -39.88763809]
[128.80612183 -53.51977539]
[141.30960083 -62.34708786]
[156.48464966 -64.34113312]
[170.84417725 -59.04368973]
[181.08842468 -47.67206955]
[184.86338806 -32.83939362]
[181.30157471 -17.95409584]
[171.22146606 -6.43671274]
[156.93940735 -0.93385357]
[141.73730469 -2.71003485]
[133.32389832 9.70827961]
[124.91049194 22.12659454]
[128.79306030 28.54342079]
[141.62684631 20.77849770]
[149.39155579 33.61241150]
[136.55819702 41.37707520]
[140.44076538 47.79390335]
[155.34521484 46.10350418]
[170.24966431 44.41310501]
[185.15409851 42.72270966]
[200.05854797 41.03231049]
[214.96299744 39.34191513]
[226.04109192 27.73780060]
[242.00717163 29.30741119]
[250.61343384 42.84667969]
[245.25788879 57.96943283]
[230.04885864 63.07479095]
[216.65339661 54.24636078]
[201.74894714 55.93675995]
[186.84449768 57.62715530]
[171.94004822 59.31755447]
[157.03561401 61.00794983]
[142.13116455 62.69834900]
[149.71621704 97.92364502]
[134.65811157 125.86882019]
[108.97011566 135.62428284]
[109.58594513 150.61163330]
[120.50314331 158.56301880]
[124.76631165 171.17279053]
[121.02490234 183.74382019]
[110.86685944 191.72921753]
[111.17483521 206.72605896]
[114.49655914 215.30287170]
[111.33199310 222.03323364]
[111.33199310 237.03323364]
[111.33199310 252.03323364]
[111.33199310 267.03323364]
[111.33199310 282.03323364]
[111.33199310 297.03323364]
[111.33199310 312.03323364]
[111.33199310 327.03323364]
[111.33199310 342.03323364]
[111.33199310 357.03323364]
[111.33199310 372.03323364]
[125.94200897 375.77468872]
[139.16217041 383.03265381]
[150.16143799 393.35092163]
[158.24841309 406.08087158]
[162.91471863 420.42230225]
[163.86703491 435.47369385]
[161.04548645 450.28887939]
[154.62747192 463.93655396]
[145.01640320 475.55886841]
[132.81643677 484.42520142]
[118.79449463 489.97821045]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 129]
[24 128]
[27 124]
[28 123]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[53 71]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[60 64]
[83 99]
[84 98]
[85 97]
[104 120]
[105 119]
[106 118]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
