%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCACUCACGGGGGGGGGGGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUGCACGCGAUxxxxxxxxxxUUACUACCACUGACAUGACUUUCCAAAAAACACAUAAUUUGAAUCAACACCCCCCCCCCCAACCACCCAC\
) } def
/len { sequence length } bind def

/coor [
[109.94681549 412.38717651]
[96.10088348 406.37115479]
[84.39221954 396.84173584]
[75.68969727 384.50607300]
[70.63909149 370.27954102]
[69.61520386 355.21786499]
[72.69400024 340.43869019]
[79.64701843 327.03878784]
[89.95830536 316.01245117]
[102.86268616 308.17794800]
[117.40257263 304.11663818]
[117.40257263 289.11663818]
[117.40257263 274.11663818]
[117.40257263 259.11663818]
[117.40257263 244.11662292]
[117.40257263 229.11662292]
[117.40257263 214.11662292]
[117.40257263 199.11662292]
[117.40257263 184.11662292]
[117.40257263 169.11662292]
[117.40257263 154.11662292]
[109.66527557 141.38935852]
[117.40257263 127.58917999]
[94.93753052 127.65003967]
[81.15370178 114.20503235]
[66.92691803 118.95884705]
[61.35853958 133.57141113]
[47.67503738 141.14080811]
[32.33734512 138.09300232]
[22.58745003 125.86705780]
[23.02895546 110.23571014]
[33.45339584 98.57959747]
[48.93867111 96.40237427]
[62.17310715 104.73206329]
[76.39988708 99.97824860]
[92.84302521 72.81671906]
[128.37525940 83.91097260]
[126.19842529 69.06976318]
[124.02158356 54.22855759]
[121.84474945 39.38735199]
[119.66791534 24.54614639]
[104.07564545 21.42160797]
[90.51271057 13.17069244]
[80.60266113 0.80249405]
[75.52445221 -14.18233681]
[75.87219238 -29.97365952]
[81.58572388 -44.67050552]
[91.96003723 -56.50991058]
[105.73224640 -64.07839966]
[103.24712372 -78.87110901]
[100.76200867 -93.66381073]
[90.84529877 -105.99140167]
[96.36708832 -119.82466125]
[86.45037079 -132.15225220]
[91.97216034 -145.98550415]
[89.48704529 -160.77821350]
[77.43744659 -174.66299438]
[84.13127136 -190.85536194]
[81.33894348 -205.59317017]
[78.54662323 -220.33096313]
[63.50485229 -221.61462402]
[49.36759949 -226.90997314]
[37.18394852 -235.82406616]
[27.85799789 -247.69543457]
[22.08180046 -261.64312744]
[20.28398895 -276.63214111]
[22.59796906 -291.55017090]
[28.85203171 -305.29025269]
[38.58208084 -316.83270264]
[51.06608582 -325.32107544]
[65.37764740 -330.12542725]
[80.45475769 -330.88925171]
[95.17858887 -327.55587769]
[108.45653534 -320.37265015]
[119.30328369 -309.87261963]
[126.91394043 -296.83496094]
[130.72373962 -282.22717285]
[130.44998169 -267.13320923]
[126.11295319 -252.67315674]
[118.03451538 -239.92007446]
[106.81412506 -229.82028198]
[93.28442383 -223.12329102]
[96.07675171 -208.38548279]
[98.86907196 -193.64767456]
[108.71165466 -186.54620361]
[111.12869263 -174.24267578]
[104.27974701 -163.26333618]
[106.76486969 -148.47062683]
[116.50382996 -137.20111084]
[111.15979004 -122.30977631]
[120.89875031 -111.04026794]
[115.55471802 -96.14893341]
[118.03983307 -81.35622406]
[120.52495575 -66.56351471]
[134.54916382 -64.40650940]
[147.23658752 -58.00567245]
[157.33558655 -47.97756195]
[163.84526062 -35.29729843]
[166.11466980 -21.20375824]
[163.90786743 -7.07852554]
[157.42837524 5.68953085]
[147.30047607 15.84082508]
[134.50912476 22.36931038]
[136.68595886 37.21051407]
[138.86279297 52.05171967]
[141.03962708 66.89292908]
[143.21646118 81.73413086]
[154.41223145 91.71685791]
[169.40492249 92.18489838]
[184.39762878 92.65293884]
[194.68255615 80.87354279]
[210.14080811 78.51211548]
[223.47348022 86.68365479]
[228.38526917 101.52980042]
[222.55700684 116.04067230]
[208.74060059 123.36466980]
[193.45974731 120.04362488]
[183.92958069 107.64563751]
[168.93688965 107.17759705]
[153.94418335 106.70955658]
[148.55879211 111.92945862]
[163.43647766 113.84112549]
[171.21810913 126.66478729]
[166.04409790 140.74418640]
[151.81048584 145.47752380]
[139.23521423 137.30056763]
[137.78797913 122.36927032]
[132.40257263 127.58917999]
[140.13987732 141.38935852]
[132.40257263 154.11662292]
[132.40257263 169.11662292]
[132.40257263 184.11662292]
[132.40257263 199.11662292]
[132.40257263 214.11662292]
[132.40257263 229.11662292]
[132.40257263 244.11662292]
[132.40257263 259.11663818]
[132.40257263 274.11663818]
[132.40257263 289.11663818]
[132.40257263 304.11663818]
[146.94245911 308.17794800]
[159.84684753 316.01245117]
[170.15812683 327.03878784]
[177.11114502 340.43869019]
[180.18994141 355.21786499]
[179.16606140 370.27954102]
[174.11544800 384.50607300]
[165.41293335 396.84173584]
[153.70426941 406.37115479]
[139.85832214 412.38717651]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[25 35]
[26 34]
[37 107]
[38 106]
[39 105]
[40 104]
[41 103]
[49 94]
[50 93]
[51 92]
[53 90]
[55 88]
[56 87]
[58 84]
[59 83]
[60 82]
[108 120]
[109 119]
[110 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
