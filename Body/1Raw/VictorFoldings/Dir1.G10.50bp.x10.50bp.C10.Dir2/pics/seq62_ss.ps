%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGGGGGUAGGGGGGGGGGUGCACGCGAUAGCAUUGCGAGACGCUGGAGCCGGAGCACCCUAUGUCGCAxxxxxxxxxxAUCAAUAUCCCGCACAAGAGUGCUACUCUCCUCGCUCCGGGCCCAUAACACCCCCCCCCCCUUGGGGGUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 409.21862793]
[71.19830322 403.20260620]
[59.48964310 393.67318726]
[50.78712082 381.33752441]
[45.73651886 367.11099243]
[44.71262741 352.04931641]
[47.79142761 337.27014160]
[54.74444962 323.87023926]
[65.05573273 312.84390259]
[77.96011353 305.00939941]
[92.50000000 300.94805908]
[92.50000000 285.94805908]
[92.50000000 270.94805908]
[92.50000000 255.94807434]
[92.50000000 240.94807434]
[92.50000000 225.94807434]
[92.50000000 210.94807434]
[92.50000000 195.94807434]
[92.50000000 180.94807434]
[92.50000000 165.94807434]
[92.50000000 150.94807434]
[92.50000000 135.94807434]
[81.99601746 132.00579834]
[73.17259979 125.07597351]
[66.85334015 115.80547333]
[52.28063965 119.36023712]
[37.70793533 122.91500092]
[23.13523293 126.46975708]
[8.56253052 130.02452087]
[-6.01017189 133.57928467]
[-19.96521759 143.20700073]
[-33.07982635 132.46255493]
[-26.38575172 116.88610077]
[-9.56493378 119.00658417]
[5.00776863 115.45182037]
[19.58047104 111.89705658]
[34.15317535 108.34229279]
[48.72587585 104.78753662]
[63.29858017 101.23277283]
[64.20907593 91.78273010]
[67.51176453 82.88191986]
[72.98591614 75.12525177]
[80.26564026 69.03116608]
[88.86436462 65.00698090]
[98.20738220 63.32166290]
[107.67021942 64.08786011]
[113.73323059 50.36780548]
[119.79624176 36.64775467]
[114.33133698 22.06102753]
[120.67554474 8.23331261]
[134.61543274 3.11325383]
[140.67845154 -10.60680008]
[146.74145508 -24.32685280]
[152.80447388 -38.04690552]
[158.86749268 -51.76696014]
[164.93049622 -65.48701477]
[170.99351501 -79.20706940]
[160.47511292 -89.24134827]
[154.37214661 -102.71543884]
[153.74530029 -117.74902344]
[158.87593079 -132.16471863]
[169.19776917 -143.80345154]
[183.35321045 -150.84747314]
[199.37020874 -152.10270691]
[202.16252136 -166.84051514]
[204.95484924 -181.57832336]
[203.47369385 -190.65895081]
[207.96160889 -196.59226990]
[211.05993652 -211.26879883]
[197.60166931 -218.09065247]
[186.36827087 -228.16403198]
[178.12562561 -240.80212402]
[173.43574524 -255.14323425]
[172.61839294 -270.20956421]
[175.72929382 -284.97387695]
[182.55633545 -298.42947388]
[192.63404846 -309.65899658]
[205.27531433 -317.89675903]
[219.61824036 -322.58111572]
[234.68487549 -323.39263916]
[249.44798279 -320.27606201]
[262.90097046 -313.44381714]
[274.12658691 -303.36175537]
[282.35946655 -290.71731567]
[287.03829956 -276.37258911]
[287.84399414 -261.30563354]
[284.72171021 -246.54373169]
[277.88427734 -233.09338379]
[267.79788208 -221.87164307]
[255.15026855 -213.64364624]
[240.80372620 -208.97038269]
[225.73646545 -208.17047119]
[222.63813782 -193.49395752]
[219.69265747 -178.78599548]
[216.90032959 -164.04818726]
[214.10800171 -149.31037903]
[225.90464783 -140.04542542]
[239.56088257 -146.25083923]
[253.21713257 -152.45623779]
[266.87338257 -158.66165161]
[280.52960205 -164.86706543]
[292.44848633 -176.92430115]
[307.33398438 -168.80899048]
[303.65655518 -152.25868225]
[286.73501587 -151.21081543]
[273.07876587 -145.00541687]
[259.42254639 -138.80000305]
[245.76629639 -132.59458923]
[232.11006165 -126.38919067]
[234.38267517 -108.31314850]
[228.91088867 -91.36161041]
[217.05073547 -78.61999512]
[201.28591919 -72.25373840]
[184.71356201 -73.14405823]
[178.65055847 -59.42399979]
[172.58753967 -45.70394897]
[166.52452087 -31.98389435]
[160.46151733 -18.26383972]
[154.39849854 -4.54378653]
[148.33549500 9.17626667]
[153.93455505 22.93076134]
[147.98123169 36.93121719]
[133.51629639 42.71076584]
[127.45328522 56.43082047]
[121.39026642 70.15087128]
[134.23068237 86.70436859]
[135.93020630 107.58512878]
[125.93568420 125.99719238]
[107.50000000 135.94807434]
[107.50000000 150.94807434]
[107.50000000 165.94807434]
[107.50000000 180.94807434]
[107.50000000 195.94807434]
[107.50000000 210.94807434]
[107.50000000 225.94807434]
[107.50000000 240.94807434]
[107.50000000 255.94807434]
[107.50000000 270.94805908]
[107.50000000 285.94805908]
[107.50000000 300.94805908]
[122.03988647 305.00939941]
[134.94427490 312.84390259]
[145.25555420 323.87023926]
[152.20857239 337.27014160]
[155.28736877 352.04931641]
[154.26348877 367.11099243]
[149.21287537 381.33752441]
[140.51036072 393.67318726]
[128.80169678 403.20260620]
[114.95575714 409.21862793]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[30 34]
[46 125]
[47 124]
[48 123]
[51 120]
[52 119]
[53 118]
[54 117]
[55 116]
[56 115]
[57 114]
[64 96]
[65 95]
[66 94]
[68 93]
[69 92]
[97 109]
[98 108]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
