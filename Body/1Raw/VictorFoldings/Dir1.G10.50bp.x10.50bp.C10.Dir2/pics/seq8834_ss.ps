%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAACAGGGGGGGGGGGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUxxxxxxxxxxCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCCCCCCCCCCCUAACAGG\
) } def
/len { sequence length } bind def

/coor [
[75.51618958 427.07785034]
[64.02002716 417.26309204]
[55.92896652 404.49490356]
[51.96245956 389.90869141]
[52.47320557 374.80136108]
[57.41579056 360.51632690]
[66.35072327 348.32379150]
[78.48350525 339.30786133]
[92.73531342 334.27026367]
[92.11133575 319.28323364]
[91.48735809 304.29623413]
[90.86338043 289.30920410]
[90.23940277 274.32220459]
[89.61542511 259.33517456]
[88.99144745 244.34815979]
[88.36746979 229.36114502]
[87.74349213 214.37413025]
[87.11951447 199.38711548]
[74.26111603 191.66302490]
[60.73692703 198.15119934]
[47.21273422 204.63935852]
[33.68854523 211.12753296]
[20.16435623 217.61569214]
[16.45867920 232.80786133]
[3.82410026 242.02204895]
[-11.77372169 240.90762329]
[-22.96997070 229.99075317]
[-24.47812080 214.42605591]
[-15.58606911 201.56272888]
[-0.49237129 197.47441101]
[13.67619038 204.09150696]
[27.20038033 197.60333252]
[40.72457123 191.11517334]
[54.24876022 184.62699890]
[67.77294922 178.13883972]
[53.29357147 174.22123718]
[46.41998672 160.88880920]
[51.62727356 146.82167053]
[65.52520752 141.17832947]
[79.06547546 147.63287354]
[83.43267059 161.98262024]
[89.49568176 148.26257324]
[95.55869293 134.54252625]
[85.75664520 130.89479065]
[77.70059204 124.61402130]
[72.04917145 116.39875793]
[69.20745087 107.09529877]
[69.30019379 97.61155701]
[72.17290497 88.82877350]
[60.09291458 79.93642426]
[48.01292801 71.04407501]
[31.67274857 66.52358246]
[31.49316597 49.57058716]
[47.73392105 44.70496750]
[56.90527725 58.96408844]
[68.98526764 67.85643768]
[81.06525421 76.74878693]
[88.67420197 72.23545837]
[97.26900482 70.13890076]
[106.10153198 70.64161682]
[112.73003387 57.18564987]
[119.35852814 43.72968292]
[118.51596832 27.93092918]
[131.08100891 19.93285751]
[118.32242584 27.82074356]
[103.71446228 31.22770882]
[88.78276062 29.79793358]
[75.08677673 23.68074226]
[64.05691528 13.51501274]
[56.84511948 0.36244535]
[54.20459366 -14.40331268]
[56.41110611 -29.24013519]
[63.23421478 -42.59847260]
[73.96131897 -53.08318710]
[87.47208405 -59.59926605]
[102.35545349 -61.46616745]
[117.05701447 -58.48891830]
[130.04135132 -50.97845840]
[139.95239258 -39.71917725]
[145.75500488 -25.88698578]
[146.84321594 -10.92650986]
[143.10211182 3.60254359]
[153.98094177 -6.72466135]
[164.53222656 -17.38628769]
[174.74571228 -28.37195206]
[184.95919800 -39.35761642]
[195.17266846 -50.34328079]
[189.56256104 -64.53797913]
[190.67544556 -79.76046753]
[198.29034424 -92.98831940]
[210.89532471 -101.59513092]
[225.98767090 -103.87200928]
[240.57075500 -99.36688232]
[251.74911499 -88.97424316]
[257.30328369 -74.75756073]
[256.13046265 -59.53957367]
[248.46353149 -46.34181213]
[235.82475281 -37.78470993]
[220.72357178 -35.56728363]
[206.15834045 -40.12980270]
[195.94485474 -29.14413643]
[185.73136902 -18.15847206]
[175.51789856 -7.17280769]
[175.30427551 -3.59204650]
[173.30500793 0.05550320]
[169.51187134 2.91285396]
[164.30815125 4.15416384]
[153.42932129 14.48136902]
[144.53697205 26.56135750]
[145.85365295 41.39765167]
[132.81449890 50.35818100]
[126.18599701 63.81414795]
[119.55749512 77.27011108]
[129.54014587 88.77929688]
[132.91429138 104.44557953]
[128.10989380 120.56076813]
[142.23469543 125.60951996]
[156.35949707 130.65827942]
[170.53517151 123.67074585]
[185.47274780 128.83258057]
[192.31001282 143.08134460]
[186.99055481 157.96350098]
[172.67028809 164.64974976]
[157.84519958 159.17323303]
[151.31072998 144.78308105]
[137.18592834 139.73432922]
[123.06112671 134.68557739]
[109.27874756 140.60552979]
[103.21573639 154.32559204]
[97.15272522 168.04563904]
[102.10653687 198.76313782]
[102.73051453 213.75015259]
[103.35449219 228.73716736]
[103.97846985 243.72418213]
[104.60243988 258.71121216]
[105.22641754 273.69821167]
[105.85039520 288.68524170]
[106.47437286 303.67224121]
[107.09835052 318.65927124]
[107.72232819 333.64627075]
[122.34356689 337.48178101]
[135.18380737 345.45794678]
[145.10131836 356.86560059]
[151.21424866 370.69033813]
[152.97901917 385.70291138]
[150.23872375 400.56835938]
[143.23701477 413.96490479]
[132.59649658 424.70132446]
[119.26329803 431.82293701]
[104.42301178 434.69650269]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 140]
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[41 130]
[42 129]
[43 128]
[49 57]
[50 56]
[51 55]
[60 113]
[61 112]
[62 111]
[64 109]
[82 108]
[83 107]
[84 103]
[85 102]
[86 101]
[87 100]
[116 127]
[117 126]
[118 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
