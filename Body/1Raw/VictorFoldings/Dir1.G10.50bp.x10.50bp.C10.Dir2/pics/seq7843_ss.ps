%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAAACCAGGGGGGGGGGCUUUCACCGCUACACGACCGGGGGUAUACUACGGUCAAUGCUCUGAAAUCxxxxxxxxxxUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUCCCCCCCCCCAACCAAAACA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 360.33703613]
[71.19830322 354.32101440]
[59.48964310 344.79159546]
[50.78712082 332.45593262]
[45.73651886 318.22940063]
[44.71262741 303.16772461]
[47.79142761 288.38858032]
[54.74444962 274.98864746]
[65.05573273 263.96231079]
[77.96011353 256.12780762]
[92.50000000 252.06648254]
[92.50000000 237.06648254]
[92.50000000 222.06648254]
[92.50000000 207.06648254]
[92.50000000 192.06648254]
[92.50000000 177.06648254]
[92.50000000 162.06648254]
[92.50000000 147.06648254]
[92.50000000 132.06648254]
[92.50000000 117.06649017]
[78.81703949 102.39730072]
[85.68138885 80.74594116]
[71.35878754 76.28913116]
[57.03619003 71.83231354]
[42.71359253 67.37549591]
[28.39099693 62.91868210]
[14.52364540 70.01335144]
[0.06198359 65.28947449]
[-6.61623764 52.02535248]
[-20.93883514 47.56853485]
[-29.94520187 56.34360504]
[-41.76794052 60.40847397]
[-54.12229919 59.04300308]
[-64.64858246 52.57022858]
[-71.36286163 42.28270340]
[-73.03079987 30.18482780]
[-87.15560150 25.13607216]
[-101.28040314 20.08731651]
[-115.40521240 15.03855896]
[-129.53001404 9.98980331]
[-145.12924194 12.63074493]
[-154.50967407 1.06109607]
[-168.63447571 -3.98766041]
[-183.69183350 1.54909909]
[-197.33346558 -6.89396000]
[-199.09469604 -22.84004593]
[-187.62445068 -34.05668640]
[-171.72172546 -31.93943214]
[-163.58572388 -18.11246300]
[-149.46092224 -13.06370735]
[-134.87199402 -16.06576920]
[-124.48125458 -4.13500023]
[-110.35645294 0.91375625]
[-96.23165131 5.96251249]
[-82.10684967 11.01126862]
[-67.98204041 16.06002617]
[-53.93726349 5.43872929]
[-36.17247772 5.32443953]
[-21.74026680 15.94958210]
[-16.48201942 33.24593735]
[-2.15942192 37.70275497]
[10.86582279 30.56983185]
[25.45446205 34.88564682]
[32.84781265 48.59608459]
[47.17041016 53.05290222]
[61.49300766 57.50971603]
[75.81560516 61.96653366]
[90.13819885 66.42334747]
[76.47720337 60.22842407]
[65.32085419 50.20166397]
[57.70825577 37.27694321]
[54.34843826 22.65806580]
[55.55432510 7.70661736]
[61.21360397 -6.18483829]
[70.79917908 -17.72246361]
[83.41825104 -25.83165169]
[97.89550018 -29.75712395]
[112.88252258 -29.13326454]
[126.98343658 -24.01817703]
[138.88490295 -14.88827801]
[147.47843933 -2.59391713]
[151.96362305 11.71982002]
[151.92272949 26.71976471]
[147.35957336 41.00883484]
[138.69914246 53.25616074]
[126.74807739 62.32103729]
[112.61872864 67.35931396]
[127.26222992 64.10848999]
[141.90573120 60.85766220]
[155.62577820 54.79464722]
[167.88815308 46.15553284]
[180.15051270 37.51641846]
[192.41288757 28.87730026]
[190.95016479 13.58821869]
[197.34255981 -0.37720162]
[209.87052917 -9.26233101]
[225.16412354 -10.67711544]
[239.10943604 -4.24098444]
[247.95524597 8.31477451]
[249.32209778 23.61272621]
[242.84228516 37.53779984]
[230.25885010 46.34421539]
[214.95669556 47.66309738]
[201.05200195 41.13966751]
[188.78964233 49.77878571]
[176.52726746 58.41790009]
[164.26489258 67.05701447]
[179.23408508 66.09611511]
[193.84068298 69.50896454]
[206.83425903 77.00341034]
[217.10252380 87.93788910]
[223.76644897 101.37635040]
[226.25555420 116.16838837]
[224.35676575 131.04771423]
[218.23265076 144.74060059]
[208.40742493 156.07485962]
[195.72222900 164.08020020]
[181.26293945 168.07131958]
[166.26737976 167.70658875]
[152.01922607 163.01719666]
[139.73822021 154.40460205]
[130.47566223 142.60607910]
[125.02449799 128.63165283]
[123.85135651 113.67759705]
[127.05667114 99.02407074]
[134.36605835 85.92548370]
[145.15655518 75.50115967]
[130.51304626 78.75199127]
[115.86955261 82.00281525]
[121.06490326 103.27640533]
[107.50000000 117.06649017]
[107.50000000 132.06648254]
[107.50000000 147.06648254]
[107.50000000 162.06648254]
[107.50000000 177.06648254]
[107.50000000 192.06648254]
[107.50000000 207.06648254]
[107.50000000 222.06648254]
[107.50000000 237.06648254]
[107.50000000 252.06648254]
[122.03988647 256.12780762]
[134.94427490 263.96231079]
[145.25555420 274.98864746]
[152.20857239 288.38858032]
[155.28736877 303.16772461]
[154.26348877 318.22940063]
[149.21287537 332.45593262]
[140.51036072 344.79159546]
[128.80169678 354.32101440]
[114.95575714 360.33703613]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 68]
[23 67]
[24 66]
[25 65]
[26 64]
[29 61]
[30 60]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[42 50]
[43 49]
[87 129]
[88 128]
[89 127]
[90 107]
[91 106]
[92 105]
[93 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
