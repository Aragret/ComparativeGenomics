%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCCUUAUCAGGGGGGGGGGCAACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAxxxxxxxxxxACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCUACCCCCCCCCCCCCACCCUUAACA\
) } def
/len { sequence length } bind def

/coor [
[92.69877625 572.93060303]
[78.99662018 566.66973877]
[67.03150940 557.51635742]
[57.40359497 545.92968750]
[50.59581757 532.49084473]
[46.94964981 517.87402344]
[46.64797974 502.81222534]
[49.70594406 488.06106567]
[55.97015381 474.36044312]
[65.12639618 462.39755249]
[76.71540833 452.77243042]
[90.15587616 445.96792603]
[104.77364349 442.32528687]
[104.46963501 427.32836914]
[104.16563416 412.33145142]
[103.86162567 397.33453369]
[103.55762482 382.33761597]
[103.25361633 367.34069824]
[102.94961548 352.34378052]
[102.64560699 337.34686279]
[102.34160614 322.34994507]
[102.03759766 307.35302734]
[86.51336670 304.52169800]
[71.90011597 298.55154419]
[58.82534790 289.69647217]
[47.85099792 278.33435059]
[39.44929886 264.95086670]
[33.98243713 250.11872864]
[31.68694496 234.47323608]
[32.66348648 218.68498230]
[36.87242126 203.43112183]
[44.13542175 189.36639404]
[54.14302826 177.09497070]
[66.46781921 167.14447021]
[80.58268738 159.94338989]
[95.88336945 155.80249023]
[94.97186279 140.83020020]
[94.06034851 125.85792542]
[73.24070740 112.66390228]
[70.73291016 85.46440125]
[56.88930511 79.68906403]
[43.04570007 73.91371918]
[29.20209694 68.13837433]
[17.04226875 77.52102661]
[1.81809425 79.55082703]
[-12.37520218 73.68176270]
[-21.71969414 61.49258423]
[-23.70175934 46.26211929]
[-17.78823471 32.08729172]
[-5.56982660 22.78105164]
[9.66677380 20.84673500]
[23.82299805 26.80466270]
[33.09089279 39.05218124]
[34.97743988 54.29476929]
[48.82104492 60.07011414]
[62.66464996 65.84545898]
[76.50825500 71.62079620]
[89.76829529 64.60857391]
[92.78777313 49.91562271]
[95.80725098 35.22267151]
[84.44016266 24.98858452]
[79.75278473 10.53433514]
[82.90872192 -4.22731876]
[92.96247864 -15.35287380]
[107.13967133 -19.92154121]
[110.15914917 -34.61449051]
[113.17862701 -49.30743790]
[116.19810486 -64.00038910]
[102.40017700 -70.02622223]
[90.15682983 -78.78945160]
[80.00330353 -89.90699005]
[72.38346100 -102.89281464]
[67.63040161 -117.17924500]
[65.95192719 -132.14175415]
[67.42140198 -147.12622070]
[71.97458649 -161.47760010]
[79.41243744 -174.56851196]
[89.40979767 -185.82669067]
[101.52964020 -194.75994873]
[115.24211884 -200.97778320]
[129.94779968 -204.20837402]
[145.00379944 -204.31048584]
[159.75195312 -201.27967834]
[173.54751587 -195.24841309]
[185.78741455 -186.48036194]
[195.93655396 -175.35884094]
[203.55130005 -162.37001038]
[208.29872131 -148.08171082]
[209.97131348 -133.11854553]
[208.49595642 -118.13465881]
[203.93711853 -103.78507233]
[196.49412537 -90.69708252]
[186.49232483 -79.44284821]
[174.36897278 -70.51435089]
[160.65405273 -64.30191040]
[145.94709778 -61.07710266]
[130.89105225 -60.98091125]
[127.87158203 -46.28796005]
[124.85210419 -31.59501076]
[121.83262634 -16.90206337]
[133.05918884 -7.11279106]
[137.91073608 7.07588196]
[134.98956299 21.88578224]
[124.98194885 33.32013321]
[110.50019836 38.24214935]
[107.48072052 52.93510056]
[104.46124268 67.62805176]
[115.70556641 72.34924316]
[124.14790344 80.68592834]
[128.74560547 91.26433563]
[129.06132507 102.46387482]
[125.29429626 112.66418457]
[118.21722412 120.47948456]
[109.03262329 124.94641876]
[109.94413757 139.91870117]
[110.85565186 154.89097595]
[124.99326324 156.77117920]
[138.53262329 161.24005127]
[151.00421143 168.14091492]
[161.97586060 177.23286438]
[171.06770325 188.19902039]
[177.96534729 200.65768433]
[182.43075562 214.17559814]
[184.31040955 228.28300476]
[183.54063416 242.48994446]
[180.14974976 256.30334473]
[174.25698853 269.24401855]
[166.06838989 280.86343384]
[155.86952209 290.75912476]
[144.01550293 298.58874512]
[130.91876221 304.08175659]
[117.03452301 307.04901123]
[117.33852386 322.04592896]
[117.64253235 337.04284668]
[117.94653320 352.03976440]
[118.25053406 367.03668213]
[118.55454254 382.03359985]
[118.85854340 397.03051758]
[119.16255188 412.02743530]
[119.46655273 427.02435303]
[119.77056122 442.02127075]
[134.52394104 445.06851196]
[148.22912598 451.32278442]
[160.19866943 460.47030640]
[169.83219910 472.05233765]
[176.64648438 485.48785400]
[180.29974365 500.10296631]
[180.60870361 515.16455078]
[177.55789185 529.91723633]
[171.30032349 543.62091064]
[162.14987183 555.58819580]
[150.56553650 565.21893311]
[137.12835693 572.02996826]
[122.51235962 575.67968750]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[36 116]
[37 115]
[38 114]
[40 57]
[41 56]
[42 55]
[43 54]
[58 107]
[59 106]
[60 105]
[65 100]
[66 99]
[67 98]
[68 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
