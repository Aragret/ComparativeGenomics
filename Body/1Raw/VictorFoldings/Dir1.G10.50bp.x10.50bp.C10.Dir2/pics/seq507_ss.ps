%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCACCCCCCGGGGGGGGGGAACUAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAxxxxxxxxxxAGAGUAGAGUGCUUAGUUGAACAGGGCCCUGAAGCGCGUACACACCGCCCCCCCCCCCCCGUCACCCUCC\
) } def
/len { sequence length } bind def

/coor [
[75.13372803 370.05889893]
[62.57550812 361.70773315]
[52.48928452 350.49530029]
[45.50909042 337.12640381]
[42.07370758 322.44140625]
[42.39908600 307.36343384]
[46.46477127 292.84033203]
[54.01519012 279.78497314]
[64.57572174 269.01806641]
[77.48251343 261.21643066]
[91.92424011 256.87048340]
[91.30026245 241.88348389]
[90.67628479 226.89646912]
[90.05230713 211.90943909]
[89.42832947 196.92242432]
[88.80435181 181.93540955]
[88.18037415 166.94839478]
[87.55639648 151.96138000]
[86.93241882 136.97436523]
[86.30844116 121.98735046]
[81.11302948 107.91583252]
[71.84808350 96.11918640]
[62.58312988 84.32254791]
[53.31818008 72.52590942]
[44.05323029 60.72927094]
[34.78828430 48.93262863]
[25.40112114 37.23300552]
[15.89276218 25.63166428]
[6.38440371 14.03032398]
[-8.45977402 16.41244125]
[-22.87780571 8.48035622]
[-29.96761131 -7.93380260]
[-44.61111450 -11.18462849]
[-59.25461578 -14.43545437]
[-67.14003754 -1.50878441]
[-78.79708862 8.15516949]
[-92.96128082 13.50813293]
[-108.09620667 13.96945763]
[-122.56013489 9.48910236]
[-134.78411865 0.55306262]
[-143.44221497 -11.86934757]
[-147.59523010 -26.43063736]
[-146.79269409 -41.55130768]
[-141.12164307 -55.59117889]
[-131.19725037 -67.02731323]
[-118.09603882 -74.61920929]
[-103.23912048 -77.54334259]
[-88.23806000 -75.48253632]
[-74.72006226 -68.66032410]
[-64.15146637 -57.81673050]
[-57.67866898 -44.12799072]
[-56.00378799 -29.07895470]
[-41.36028671 -25.82812881]
[-26.71678543 -22.57730484]
[-15.94597816 -33.01711655]
[-18.73830223 -47.75492096]
[-21.53062630 -62.49272919]
[-24.32295036 -77.23053741]
[-27.11527634 -91.96833801]
[-42.16639709 -92.92465210]
[-56.50658035 -97.59476471]
[-69.23439026 -105.68510437]
[-79.54974365 -116.68711853]
[-86.80421448 -129.90921021]
[-90.54177094 -144.52020264]
[-90.52747345 -159.60166931]
[-86.76222229 -174.20556641]
[-79.48269653 -187.41387939]
[-69.14649963 -198.39631653]
[-56.40337753 -206.46250916]
[-42.05436325 -211.10542297]
[-27.00145531 -212.03320312]
[-12.19089031 -209.18750000]
[1.44632852 -202.74723816]
[13.05295277 -193.11723328]
[21.89938164 -180.90283203]
[27.42951965 -166.87185669]
[29.29573822 -151.90628052]
[27.38072586 -136.94688416]
[21.80485916 -122.93402100]
[12.91864586 -110.74853516]
[1.28067887 -101.15642548]
[-12.37747002 -94.76066589]
[-9.58514500 -80.02285767]
[-6.79282093 -65.28504944]
[-4.00049639 -50.54724503]
[-1.20817184 -35.80944061]
[21.15086555 -19.54068565]
[17.98574448 4.52196503]
[27.49410439 16.12330627]
[37.00246048 27.72464752]
[43.71837616 30.92498207]
[46.58492279 39.66767883]
[55.84987259 51.46432114]
[65.11482239 63.26095963]
[74.37976837 75.05760193]
[83.64472198 86.85424042]
[92.90966797 98.65087891]
[85.62003326 89.95755005]
[85.68569183 76.09682465]
[95.50589752 62.08197021]
[114.50233459 53.71334076]
[128.91455078 49.55545044]
[143.32676697 45.39756393]
[154.30343628 33.21377945]
[170.28472900 36.89215469]
[174.83045959 52.64869308]
[163.26435852 64.27441406]
[147.48464966 59.80978012]
[133.07243347 63.96766663]
[118.66021729 68.12555695]
[118.50419617 75.62393188]
[118.19213867 90.62068939]
[118.03610992 98.11906433]
[132.26289368 102.87287903]
[146.48966980 107.62669373]
[155.68708801 107.38333893]
[160.96116638 112.63021851]
[175.08596802 117.67897797]
[191.11343384 114.20729828]
[201.93183899 126.53182220]
[196.41215515 141.97413635]
[180.23254395 144.64851379]
[170.03721619 131.80377197]
[155.91241455 126.75502014]
[141.73585510 121.85346985]
[127.50907135 117.09965515]
[113.28229523 112.34584045]
[101.29546356 121.36337280]
[101.91944122 136.35038757]
[102.54341888 151.33740234]
[103.16739655 166.32441711]
[103.79136658 181.31143188]
[104.41534424 196.29844666]
[105.03932190 211.28546143]
[105.66329956 226.27249146]
[106.28727722 241.25950623]
[106.91125488 256.24652100]
[121.66426086 259.37695312]
[135.17489624 266.07870483]
[146.59387207 275.93051147]
[155.20338440 288.31304932]
[160.46223450 302.44793701]
[162.03984070 317.44665527]
[159.83703613 332.36639404]
[153.99229431 346.26925659]
[144.87301636 358.28131104]
[133.05244446 367.64749146]
[119.27362823 373.77899170]
[104.40273285 376.29037476]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 98]
[22 97]
[23 96]
[24 95]
[25 94]
[26 93]
[27 91]
[28 90]
[29 89]
[32 54]
[33 53]
[34 52]
[55 87]
[56 86]
[57 85]
[58 84]
[59 83]
[102 111]
[103 110]
[104 109]
[114 128]
[115 127]
[116 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
