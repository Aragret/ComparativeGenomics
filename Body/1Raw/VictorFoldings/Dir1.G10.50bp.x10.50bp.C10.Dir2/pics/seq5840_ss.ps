%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCACACUGGGGGGGGGGCAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUAAxxxxxxxxxxCCCCAUUCGUAUAAUAAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGCCCCCCCCCCUCCCCACAUU\
) } def
/len { sequence length } bind def

/coor [
[95.05211639 434.65130615]
[81.20617676 428.63528442]
[69.49752045 419.10586548]
[60.79499435 406.77020264]
[55.74439240 392.54367065]
[54.72050095 377.48199463]
[57.79929733 362.70285034]
[64.75231934 349.30291748]
[75.06360626 338.27658081]
[87.96798706 330.44207764]
[102.50787354 326.38076782]
[102.50787354 311.38076782]
[102.50787354 296.38076782]
[102.50787354 281.38076782]
[102.50787354 266.38076782]
[102.50787354 251.38075256]
[102.50787354 236.38075256]
[102.50787354 221.38075256]
[102.50787354 206.38075256]
[102.50787354 191.38075256]
[102.50787354 176.38075256]
[102.50787354 161.38075256]
[99.77749634 157.39070129]
[99.56900024 151.62980652]
[102.83291626 145.76002502]
[103.45689392 130.77301025]
[81.35850525 122.22113037]
[73.01024628 101.69965363]
[81.59681702 82.95867920]
[74.14190674 69.94236755]
[66.68699646 56.92606354]
[66.19698334 71.91805267]
[62.55516052 86.46924591]
[55.92544937 99.92461395]
[46.60629272 111.67847443]
[35.01718140 121.20173645]
[21.67979622 128.06571960]
[7.19451380 131.96142578]
[-7.78662014 132.71351624]
[-22.58923721 130.28811646]
[-36.54700470 124.79441833]
[-49.03162003 116.47971344]
[-59.48109818 105.71827698]
[-67.42505646 92.99454498]
[-72.50590515 78.88124847]
[-74.49493408 64.01371002]
[-73.30259705 49.06117249]
[-68.98258209 34.69672012]
[-61.72934341 21.56696510]
[-51.86938477 10.26292992]
[-39.84654617 1.29346371]
[-26.20202637 -4.93767834]
[-11.55003166 -8.15000439]
[3.44988871 -8.19891357]
[18.12252045 -5.08220434]
[31.80738258 1.05982685]
[43.88845825 9.95069885]
[53.82192230 21.19019508]
[61.16152954 34.27447128]
[61.78550720 19.28745461]
[62.40948486 4.30043888]
[63.03346252 -10.68657684]
[63.65744019 -25.67359352]
[64.28141785 -40.66061020]
[57.12487793 -54.77069473]
[65.38491821 -67.16509247]
[66.00889587 -82.15210724]
[66.63287354 -97.13912201]
[52.60723495 -102.88867188]
[41.39599609 -113.09082031]
[34.35296631 -126.51361847]
[32.32862473 -141.53619385]
[35.56742477 -156.34451294]
[43.67826462 -169.15037537]
[55.68171692 -178.40740967]
[70.12831116 -182.99781799]
[85.27354431 -182.36724854]
[99.28856659 -176.59185791]
[110.48098755 -166.36906433]
[117.49926758 -152.93331909]
[119.49591827 -137.90702820]
[116.22983551 -123.10471344]
[108.09541321 -110.31381989]
[96.07492065 -101.07891083]
[81.61988831 -96.51514435]
[80.99591064 -81.52812958]
[80.37193298 -66.54111481]
[87.57310486 -53.50299835]
[79.26843262 -40.03663254]
[78.64445496 -25.04961586]
[78.02047729 -10.06259918]
[77.39649963 4.92441654]
[76.77252197 19.91143227]
[76.14854431 34.89844894]
[79.70330811 49.47115326]
[87.15821838 62.48746109]
[94.61312866 75.50376892]
[103.00775146 74.11176300]
[111.70897675 75.62305450]
[119.70700073 80.07559967]
[126.00586700 87.15559387]
[129.74562073 96.21290588]
[130.31506348 106.31862640]
[145.29478455 107.09847260]
[160.27449036 107.87831879]
[175.27368164 107.72227478]
[190.23393250 106.63096619]
[205.19418335 105.53965759]
[220.15443420 104.44834900]
[233.41101074 94.79459381]
[248.28788757 101.69465637]
[249.48098755 118.05033875]
[235.76296997 127.03632355]
[221.24574280 119.40859222]
[206.28549194 120.49990845]
[191.32524109 121.59121704]
[176.36499023 122.68252563]
[186.66984558 133.58253479]
[186.44146729 148.58079529]
[175.80952454 159.16198730]
[160.81034851 159.31860352]
[149.95976257 148.96171570]
[149.41825867 133.97149658]
[159.49464417 122.85803223]
[144.51493835 122.07818604]
[129.53521729 121.29833984]
[118.44390869 131.39698792]
[117.81993103 146.38400269]
[117.50787354 161.38075256]
[117.50787354 176.38075256]
[117.50787354 191.38075256]
[117.50787354 206.38075256]
[117.50787354 221.38075256]
[117.50787354 236.38075256]
[117.50787354 251.38075256]
[117.50787354 266.38076782]
[117.50787354 281.38076782]
[117.50787354 296.38076782]
[117.50787354 311.38076782]
[117.50787354 326.38076782]
[132.04776001 330.44207764]
[144.95214844 338.27658081]
[155.26342773 349.30291748]
[162.21644592 362.70285034]
[165.29524231 377.48199463]
[164.27136230 392.54367065]
[159.22074890 406.77020264]
[150.51823425 419.10586548]
[138.80957031 428.63528442]
[124.96363068 434.65130615]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[25 128]
[26 127]
[29 97]
[30 96]
[31 95]
[59 94]
[60 93]
[61 92]
[62 91]
[63 90]
[64 89]
[66 87]
[67 86]
[68 85]
[103 126]
[104 125]
[105 124]
[106 117]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
