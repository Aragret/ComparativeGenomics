%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCUGUUCGCGGGGGGGGGGUUCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAxxxxxxxxxxAAAAUAGCCCACUAAUCCAAACUCUAACACUAUGCUUAGGCGCUAUCACCCCCCCCCCCCACUCUGUUCGC\
) } def
/len { sequence length } bind def

/coor [
[85.91723633 403.16915894]
[72.99807739 395.41082764]
[62.21678162 384.88180542]
[54.15476608 372.14990234]
[49.24680710 357.90179443]
[47.75758362 342.90585327]
[49.76740646 327.97073364]
[55.16789246 313.90191650]
[63.66779709 301.45812988]
[74.80873108 291.31039429]
[87.98987579 284.00601196]
[102.50039673 279.93887329]
[101.88456726 264.95150757]
[101.26874542 249.96417236]
[100.65291595 234.97682190]
[100.03709412 219.98945618]
[99.42127228 205.00210571]
[98.80544281 190.01475525]
[98.18962097 175.02740479]
[97.57379150 160.04005432]
[96.95796967 145.05268860]
[96.34214020 130.06533813]
[90.64660645 125.18570709]
[87.89025879 139.93028259]
[73.74286652 144.91539001]
[62.35200500 135.15586853]
[65.10867310 120.41136169]
[79.25553131 115.42642975]
[73.55999756 110.54679108]
[58.65554810 112.23719025]
[43.75109863 113.92758942]
[28.84665108 115.61798859]
[19.19920731 128.13606262]
[3.51530266 130.08303833]
[-8.90008068 120.30377960]
[-10.68111610 104.60016632]
[-0.77114671 92.28886414]
[14.95041847 90.67395782]
[27.15625381 100.71353912]
[42.06070328 99.02313995]
[56.96514893 97.33274078]
[71.86959839 95.64234161]
[73.32333374 88.28458405]
[58.60785675 85.37688446]
[61.51578140 70.66145325]
[76.23080444 73.56906128]
[77.68453979 66.21130371]
[64.54290771 58.97959900]
[48.16725540 59.85709000]
[39.44747162 45.96834183]
[47.35372162 31.60090256]
[63.75273514 31.53476715]
[71.77461243 45.83796692]
[84.91624451 53.06966782]
[99.34362793 48.96472549]
[106.70986938 35.89802933]
[114.07611084 22.83133316]
[121.44234467 9.76463890]
[128.40270996 -3.52270246]
[134.95057678 -17.01808739]
[141.49844360 -30.51346970]
[128.83944702 -38.59222794]
[117.20395660 -48.08600998]
[106.74932861 -58.86642456]
[97.61695099 -70.78767395]
[89.93032837 -83.68853760]
[83.79341125 -97.39455414]
[79.28919983 -111.72035217]
[76.47859955 -126.47219849]
[75.39962769 -141.45059204]
[76.06687164 -156.45297241]
[78.47131348 -171.27644348]
[82.58043671 -185.72053528]
[88.33866119 -199.58990479]
[95.66811371 -212.69697571]
[104.46968079 -224.86451721]
[114.62432861 -235.92794800]
[125.99472809 -245.73767090]
[138.42709351 -254.16101074]
[151.75331116 -261.08404541]
[165.79315186 -266.41317749]
[180.35673523 -270.07629395]
[195.24711609 -272.02386475]
[210.26292419 -272.22958374]
[225.20106506 -270.69064331]
[239.85952759 -267.42785645]
[254.04008484 -262.48535156]
[267.55096436 -255.92996216]
[280.20941162 -247.85035706]
[291.84426880 -238.35578918]
[302.29818726 -227.57469177]
[311.42974854 -215.65283203]
[319.11550903 -202.75144958]
[325.25152588 -189.04502869]
[329.75479126 -174.71891785]
[332.56439209 -159.96688843]
[333.64236450 -144.98841858]
[332.97412109 -129.98608398]
[330.56869507 -115.16278076]
[326.45861816 -100.71897125]
[320.69946289 -86.84998322]
[313.36911011 -73.74339294]
[304.56674194 -61.57644272]
[294.41134644 -50.51368332]
[283.04031372 -40.70471954]
[270.60736084 -32.28221130]
[257.28070068 -25.36006165]
[243.24050903 -20.03188324]
[228.67666626 -16.36973763]
[213.78616333 -14.42314720]
[198.77035522 -14.21843815]
[183.83230591 -15.75838089]
[169.17405701 -19.02214813]
[154.99383545 -23.96559906]
[148.44595337 -10.47021580]
[141.89808655 3.02516818]
[142.74069214 6.50902033]
[141.89854431 10.57846546]
[139.11340332 14.41886139]
[134.50904846 17.13087845]
[127.14279938 30.19757271]
[119.77656555 43.26426697]
[112.41032410 56.33096313]
[127.53283691 66.85243988]
[136.51823425 81.84228516]
[138.43667603 98.26214600]
[133.70701599 113.11477661]
[123.89781189 123.98887634]
[111.32949829 129.44952393]
[111.94532013 144.43687439]
[112.56114960 159.42422485]
[113.17697144 174.41157532]
[113.79279327 189.39892578]
[114.40862274 204.38627625]
[115.02444458 219.37364197]
[115.64027405 234.36099243]
[116.25609589 249.34834290]
[116.87192535 264.33569336]
[117.48774719 279.32305908]
[132.28302002 282.18600464]
[146.01899719 288.38439941]
[157.95489502 297.58389282]
[167.44705200 309.28842163]
[173.98355103 322.86672974]
[177.21188354 337.58660889]
[176.95796204 352.65420532]
[173.23547363 367.25692749]
[166.24516296 380.60729980]
[156.36402893 391.98535156]
[144.12492371 400.77743530]
[130.18789673 406.50946045]
[115.30455780 408.87228394]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[29 42]
[30 41]
[31 40]
[32 39]
[47 54]
[48 53]
[55 123]
[56 122]
[57 121]
[58 120]
[59 116]
[60 115]
[61 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
