%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUACUAUGAACGGGGGGGGGGCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUxxxxxxxxxxACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAAGUCACCCUAGCCAUCACCCCCCCCCCUUCUACUAUCAAC\
) } def
/len { sequence length } bind def

/coor [
[-34.68701935 244.77499390]
[-42.32816315 237.27011108]
[-49.55175400 229.36253357]
[-56.33659744 221.07542419]
[-62.66279602 212.43312073]
[-68.51177979 203.46096802]
[-73.86639404 194.18527222]
[-78.71093750 184.63328552]
[-83.03118134 174.83299255]
[-97.12085724 179.97895813]
[-111.21054077 185.12492371]
[-121.51880646 197.12701416]
[-136.12808228 194.22555542]
[-150.21775818 199.37152100]
[-164.30743408 204.51748657]
[-178.39710999 209.66345215]
[-192.48678589 214.80943298]
[-206.57646179 219.95539856]
[-220.66613770 225.10136414]
[-232.12112427 239.48579407]
[-249.26553345 235.85263062]
[-263.24942017 241.27949524]
[-277.23330688 246.70634460]
[-277.93237305 261.91921997]
[-284.76443481 275.52960205]
[-296.54580688 285.17944336]
[-311.23529053 289.19683838]
[-326.28781128 286.88574219]
[-339.09545898 278.64657593]
[-347.43923950 265.90682983]
[-349.87353516 250.87371826]
[-345.97656250 236.15185547]
[-336.42355347 224.29185486]
[-322.86956787 217.34855652]
[-307.66293335 216.52491760]
[-293.43829346 221.96365356]
[-282.66015625 232.72245789]
[-268.67626953 227.29559326]
[-254.69238281 221.86874390]
[-249.50369263 210.90275574]
[-237.85226440 206.28497314]
[-225.81211853 211.01168823]
[-211.72244263 205.86572266]
[-197.63275146 200.71975708]
[-183.54307556 195.57377625]
[-169.45339966 190.42781067]
[-155.36372375 185.28184509]
[-141.27404785 180.13587952]
[-131.97357178 168.50186157]
[-116.35650635 171.03524780]
[-102.26683044 165.88928223]
[-88.17715454 160.74331665]
[-94.76081848 134.18499756]
[-97.61523438 106.97210693]
[-96.68573761 79.62571716]
[-91.99012756 52.66945267]
[-83.61832428 26.61946678]
[-71.73061371 1.97456098]
[-56.55463409 -20.79336739]
[-38.38096619 -41.24835968]
[-17.55759621 -58.99874878]
[5.51674843 -73.70465088]
[-1.14560890 -87.14388275]
[-7.80796623 -100.58311462]
[-14.47032356 -114.02235413]
[-26.92259979 -125.52787781]
[-19.31384468 -140.67855835]
[-2.64894319 -137.56127930]
[-1.03109038 -120.68470764]
[5.63126707 -107.24547577]
[12.29362488 -93.80624390]
[18.95598221 -80.36700439]
[31.53141594 -85.50591278]
[44.43001556 -89.76924896]
[57.59089661 -93.13689423]
[70.95195007 -95.59294891]
[84.45010376 -97.12582397]
[98.02164459 -97.72828674]
[111.60253143 -97.39749908]
[125.12865448 -96.13500977]
[138.53617859 -93.94677734]
[151.76181030 -90.84314728]
[164.74311829 -86.83875275]
[177.41886902 -81.95249176]
[183.81098938 -95.52233887]
[190.20310974 -109.09219360]
[196.59523010 -122.66204071]
[194.69105530 -138.95025635]
[208.00477600 -148.52507019]
[222.84037781 -141.53671265]
[223.93626404 -125.17421722]
[210.16506958 -116.26992035]
[203.77294922 -102.70007324]
[197.38082886 -89.13021851]
[190.98870850 -75.56037140]
[200.36080933 -70.37635040]
[209.43846130 -64.69248199]
[218.19505310 -58.52545166]
[226.60490417 -51.89334869]
[234.64331055 -44.81563187]
[242.28672791 -37.31306458]
[249.51269531 -29.40765953]
[256.30004883 -21.12260437]
[262.62884521 -12.48220634]
[268.48056030 -3.51181626]
[273.83795166 5.76225042]
[278.68539429 15.31278515]
[283.00857544 25.11177063]
[286.79489136 35.13045883]
[290.03320312 45.33945465]
[292.71398926 55.70881271]
[294.82940674 66.20810699]
[296.37326050 76.80654144]
[297.34097290 87.47301483]
[297.72976685 98.17623901]
[297.53848267 108.88481903]
[296.76766968 119.56732941]
[295.41955566 130.19242859]
[293.49816895 140.72895813]
[291.00909424 151.14601135]
[287.95965576 161.41299438]
[284.35879517 171.49981689]
[280.21707153 181.37687683]
[275.54663086 191.01521301]
[270.36120605 200.38652039]
[264.67596436 209.46331787]
[258.50759888 218.21897888]
[251.87423706 226.62782288]
[244.79531860 234.66517639]
[237.29159546 242.30744934]
[229.38510132 249.53222656]
[221.09901428 256.31832886]
[212.45765686 262.64581299]
[203.48638916 268.49615479]
[194.21151733 273.85217285]
[184.66024780 278.69815063]
[174.86061096 283.01989746]
[164.84135437 286.80468750]
[154.63186646 290.04144287]
[144.26210022 292.72067261]
[133.76249695 294.83450317]
[123.16382599 296.37673950]
[112.49720001 297.34286499]
[101.79391479 297.73004150]
[91.08537292 297.53713989]
[80.40297699 296.76470947]
[69.77807617 295.41500854]
[59.24183273 293.49203491]
[48.82516861 291.00137329]
[38.55863571 287.95037842]
[28.47235680 284.34799194]
[18.59592247 280.20480347]
[8.95830345 275.53289795]
[-0.41222218 270.34603882]
[-9.48816490 264.65945435]
[-18.24289894 258.48977661]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 52]
[10 51]
[11 50]
[13 48]
[14 47]
[15 46]
[16 45]
[17 44]
[18 43]
[19 42]
[21 39]
[22 38]
[23 37]
[62 72]
[63 71]
[64 70]
[65 69]
[84 95]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
