%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUAUACUAGUAUGGGGGGGGGGCCUUAAUCAUUUUUAUUGCCACAACUAACCUCCUCGGACUCCUGCCUCACxxxxxxxxxxUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAACCCCCCCCCCUAUUAUACUAGCAU\
) } def
/len { sequence length } bind def

/coor [
[101.16017151 417.58166504]
[86.79791260 413.07495117]
[73.63702393 405.76907349]
[62.21643066 395.96322632]
[53.00379181 384.05892944]
[46.37636185 370.54367065]
[42.60553360 355.97088623]
[41.84571457 340.93734741]
[44.12802505 326.05862427]
[49.35900116 311.94403076]
[57.32444000 299.17153931]
[67.69816589 288.26416016]
[80.05536652 279.66857910]
[93.89003754 273.73672485]
[108.63565826 270.71154785]
[108.63565826 255.71154785]
[108.63565826 240.71154785]
[108.63565826 225.71154785]
[108.63565826 210.71154785]
[108.63565826 195.71154785]
[108.63565826 180.71154785]
[108.63565826 165.71154785]
[108.63565826 150.71154785]
[108.63565826 135.71154785]
[93.30657196 135.29182434]
[79.83055115 128.72763062]
[70.49105072 117.44760895]
[66.73833466 103.64925385]
[68.96895599 89.87416840]
[76.50331116 78.54048920]
[68.12361145 66.09940338]
[59.74390793 53.65831375]
[51.36420441 41.21722794]
[42.98450470 28.77614403]
[26.26902008 21.11012459]
[25.68073082 3.59369183]
[17.05686378 -8.67940617]
[8.43299866 -20.95250320]
[-0.19086805 -33.22560120]
[-14.45563412 -40.06863022]
[-15.44214344 -54.93053055]
[-24.06600952 -67.20362854]
[-37.44124222 -60.35897446]
[-51.63892746 -55.44248199]
[-66.38269806 -52.54984665]
[-81.38556671 -51.73737717]
[-96.35549164 -53.02088547]
[-111.00109100 -56.37538910]
[-125.03726959 -61.73559189]
[-138.19081116 -68.99715424]
[-150.20568848 -78.01873779]
[-160.84802246 -88.62471771]
[-169.91065979 -100.60865784]
[-177.21719360 -113.73728180]
[-182.62538147 -127.75503540]
[-186.02998352 -142.38906860]
[-187.36470032 -157.35452271]
[-186.60357666 -172.36007690]
[-183.76139832 -187.11366272]
[-178.89350891 -201.32807922]
[-172.09466553 -214.72665405]
[-163.49720764 -227.04858398]
[-153.26847839 -238.05400085]
[-141.60757446 -247.52868652]
[-128.74150085 -255.28820801]
[-114.92070007 -261.18154907]
[-100.41417694 -265.09396362]
[-85.50432587 -266.94931030]
[-70.48135376 -266.71148682]
[-55.63770294 -264.38510132]
[-41.26229858 -260.01544189]
[-27.63496780 -253.68757629]
[-15.02096748 -245.52465820]
[-3.66583443 -235.68560791]
[6.20940065 -224.36192322]
[14.41251278 -211.77401733]
[20.78382683 -198.16694641]
[25.19932365 -183.80555725]
[27.57305336 -168.96940613]
[27.85881233 -153.94726562]
[26.05103493 -139.03157043]
[22.18491364 -124.51264191]
[16.33570099 -110.67310333]
[8.61725330 -97.78234100]
[-0.82018453 -86.09128571]
[-11.79291248 -75.82749176]
[-3.16904593 -63.55439758]
[10.47888279 -57.58922195]
[12.08222961 -41.84946823]
[20.70609665 -29.57637024]
[29.32996178 -17.30327225]
[37.95382690 -5.03017473]
[49.84291077 -2.62529516]
[57.12195969 7.57524872]
[55.42559052 20.39644241]
[63.80529022 32.83752823]
[72.18498993 45.27861404]
[80.56469727 57.71969986]
[88.94439697 70.16078186]
[97.46315002 67.66297150]
[106.50942230 67.59604645]
[115.39027405 70.05747986]
[123.40032196 74.94760895]
[129.87767029 81.97055817]
[134.25823975 90.65097809]
[136.12406921 100.36570740]
[135.24159241 110.38842010]
[150.22329712 111.12905884]
[165.20500183 111.86969757]
[180.18670654 112.61033630]
[192.90609741 100.63760376]
[210.01402283 101.52401733]
[220.98719788 114.23705292]
[235.98060608 114.68155670]
[250.97401428 115.12605286]
[265.96743774 115.57055664]
[280.96084595 116.01505280]
[293.57534790 106.10274506]
[309.15640259 109.92502594]
[315.75158691 124.54976654]
[308.30160522 138.75813293]
[292.52148438 141.65066528]
[280.51632690 131.00846863]
[265.52291870 130.56396484]
[250.52951050 130.11947632]
[235.53610229 129.67497253]
[220.54269409 129.23046875]
[212.46913147 139.31228638]
[199.87039185 142.94143677]
[187.30250549 138.57154846]
[179.44607544 127.59204102]
[164.46437073 126.85140228]
[149.48266602 126.11076355]
[134.50096130 125.37012482]
[123.63565826 135.71154785]
[123.63565826 150.71154785]
[123.63565826 165.71154785]
[123.63565826 180.71154785]
[123.63565826 195.71154785]
[123.63565826 210.71154785]
[123.63565826 225.71154785]
[123.63565826 240.71154785]
[123.63565826 255.71154785]
[123.63565826 270.71154785]
[138.38127136 273.73672485]
[152.21594238 279.66857910]
[164.57315063 288.26416016]
[174.94686890 299.17153931]
[182.91230774 311.94403076]
[188.14329529 326.05862427]
[190.42559814 340.93734741]
[189.66578674 355.97088623]
[185.89495850 370.54367065]
[179.26751709 384.05892944]
[170.05488586 395.96322632]
[158.63429260 405.76907349]
[145.47340393 413.07495117]
[131.11114502 417.58166504]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[30 99]
[31 98]
[32 97]
[33 96]
[34 95]
[36 92]
[37 91]
[38 90]
[39 89]
[41 87]
[42 86]
[107 134]
[108 133]
[109 132]
[110 131]
[113 127]
[114 126]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
