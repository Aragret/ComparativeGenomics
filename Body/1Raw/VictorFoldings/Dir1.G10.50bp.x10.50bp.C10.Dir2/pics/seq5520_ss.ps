%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCCCCGCUAGGGGGGGGGGACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGAAUUCACAAAAAACAAxxxxxxxxxxCCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGCCCCCCCCCCUGCCCCCGAUA\
) } def
/len { sequence length } bind def

/coor [
[83.99488068 411.29214478]
[69.97293854 405.73913574]
[57.77298355 396.87280273]
[48.16191101 385.25048828]
[41.74388504 371.60281372]
[38.92234802 356.78762817]
[39.87466431 341.73623657]
[44.54096985 327.39480591]
[52.62793732 314.66485596]
[63.62721252 304.34658813]
[76.84737396 297.08862305]
[91.45738220 293.34716797]
[91.45738220 278.34716797]
[91.45738220 263.34716797]
[91.45738220 248.34716797]
[91.45738220 233.34716797]
[91.45738220 218.34716797]
[91.45738220 203.34716797]
[91.45738220 188.34716797]
[91.45738220 173.34716797]
[91.45738220 158.34716797]
[88.29282379 151.61680603]
[91.61454010 143.03999329]
[91.92252350 128.04315186]
[92.23049927 113.04631042]
[87.00949097 107.66197205]
[85.10086060 122.54004669]
[72.27879333 130.32429504]
[58.19832993 125.15316010]
[53.46209717 110.92051697]
[61.63648224 98.34358215]
[76.56748199 96.89329529]
[71.34648132 91.50894928]
[56.34727097 91.35495758]
[41.34806061 91.20095825]
[26.34885025 91.04695892]
[12.33683586 99.56726074]
[-1.91608000 91.45637512]
[-1.74771881 75.05809021]
[12.66872406 67.24155426]
[26.50284767 76.04775238]
[41.50205612 76.20175171]
[56.50126648 76.35574341]
[71.50047302 76.50974274]
[86.68183899 81.82966614]
[96.95961761 92.46587372]
[103.22901917 78.83889771]
[109.49842834 65.21191406]
[115.76782990 51.58493805]
[122.03723907 37.95795822]
[124.03329468 23.09136009]
[121.58036804 8.29328060]
[119.12743378 -6.50479794]
[104.09632874 -6.39441633]
[89.23302460 -8.63689995]
[74.90354919 -13.17702579]
[61.46078873 -19.90299034]
[49.23577118 -28.64915848]
[38.52955246 -39.20014954]
[29.60578728 -51.29613495]
[22.68422508 -64.63923645]
[17.93531799 -78.90087891]
[15.47601223 -93.72985077]
[15.36687088 -108.76097107]
[17.61058044 -123.62408447]
[22.15188980 -137.95318604]
[28.87896156 -151.39538574]
[37.62614059 -163.61968994]
[48.17801285 -174.32502747]
[60.27473450 -183.24780273]
[73.61840820 -190.16825867]
[87.88044739 -194.91600037]
[102.70961761 -197.37406921]
[117.74074554 -197.48197937]
[132.60368347 -195.23704529]
[146.93240356 -190.69454956]
[160.37405396 -183.96636963]
[172.59762573 -175.21818542]
[183.30209351 -164.66542053]
[192.22387695 -152.56796265]
[199.14323425 -139.22372437]
[203.88978577 -124.96129608]
[206.34664917 -110.13191986]
[206.45330811 -95.10078430]
[204.20713806 -80.23803711]
[199.66346741 -65.90969086]
[192.93417358 -52.46858978]
[184.18498230 -40.24573898]
[173.63134766 -29.54213333]
[161.53314209 -20.62136078]
[148.18832397 -13.70310211]
[133.92552185 -8.95772648]
[136.37844849 5.84035301]
[138.83137512 20.63843155]
[153.41072083 16.69615173]
[164.82192993 23.98078728]
[179.40568542 20.47162056]
[193.98942566 16.96245384]
[197.11958313 13.75281906]
[200.75230408 11.92882252]
[204.37739563 11.47564220]
[207.54437256 12.21016979]
[209.91323853 13.81624794]
[224.73571777 11.51537323]
[232.79425049 7.08187199]
[239.88586426 9.32267761]
[254.75245667 7.32662058]
[269.61904907 5.33056355]
[284.48565674 3.33450675]
[297.13275146 -7.10499287]
[312.40048218 -1.11931527]
[314.58273315 15.13398743]
[301.43457031 24.93491173]
[286.48171997 18.20110512]
[271.61511230 20.19716263]
[256.74853516 22.19322014]
[241.88192749 24.18927574]
[227.03660583 26.33785439]
[212.21411133 28.63873100]
[197.49859619 31.54620171]
[182.91484070 35.05537033]
[168.33110046 38.56453705]
[155.23768616 52.25518417]
[135.66421509 44.22736359]
[129.39480591 57.85434341]
[123.12540436 71.48132324]
[116.85600281 85.10829926]
[110.58659363 98.73528290]
[107.22733307 113.35428619]
[106.91935730 128.35112000]
[106.61138153 143.34796143]
[106.45738220 158.34716797]
[106.45738220 173.34716797]
[106.45738220 188.34716797]
[106.45738220 203.34716797]
[106.45738220 218.34716797]
[106.45738220 233.34716797]
[106.45738220 248.34716797]
[106.45738220 263.34716797]
[106.45738220 278.34716797]
[106.45738220 293.34716797]
[121.06739807 297.08862305]
[134.28755188 304.34658813]
[145.28683472 314.66485596]
[153.37379456 327.39480591]
[158.04010010 341.73623657]
[158.99241638 356.78762817]
[156.17088318 371.60281372]
[149.75285339 385.25048828]
[140.14178467 396.87280273]
[127.94182587 405.73913574]
[113.91988373 411.29214478]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 131]
[24 130]
[25 129]
[33 44]
[34 43]
[35 42]
[36 41]
[46 128]
[47 127]
[48 126]
[49 125]
[50 124]
[51 94]
[52 93]
[53 92]
[96 122]
[97 121]
[98 120]
[103 119]
[104 118]
[106 117]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
