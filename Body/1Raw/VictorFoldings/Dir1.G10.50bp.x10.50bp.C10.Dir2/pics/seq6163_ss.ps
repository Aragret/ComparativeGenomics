%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCCCCGGCAGGGGGGGGGGGGUUUGAAGCUGCUUCUUCGAAUUUGCAAUUCAAUAUGAAAAUCACCUCGxxxxxxxxxxAAACAAUGUUCAACCAGUAACUACUACUAAUCAACGCCCAUAAUCAUACACCCCCCCCCCAAGCCCCCGCA\
) } def
/len { sequence length } bind def

/coor [
[91.04400635 397.05261230]
[76.16066742 394.68981934]
[62.22364044 388.95779419]
[49.98453522 380.16567993]
[40.10339355 368.78765869]
[33.11308670 355.43728638]
[29.39060020 340.83453369]
[29.13667679 325.76696777]
[32.36501312 311.04708862]
[38.90151215 297.46875000]
[48.39366150 285.76425171]
[60.32956696 276.56472778]
[74.06553650 270.36636353]
[88.86080933 267.50338745]
[89.47663879 252.51603699]
[90.09246063 237.52868652]
[90.70829010 222.54133606]
[91.32411194 207.55398560]
[91.93994141 192.56663513]
[92.55576324 177.57926941]
[93.17159271 162.59191895]
[93.78741455 147.60456848]
[94.40324402 132.61721802]
[95.01906586 117.62985992]
[85.02796936 106.44156647]
[70.06668854 105.36449432]
[55.10540771 104.28742981]
[40.14412689 103.21035767]
[25.18284607 102.13328552]
[14.90113544 109.98758698]
[2.42606330 108.74504089]
[-5.57401991 99.62030029]
[-20.51003265 98.23627472]
[-35.44604492 96.85224915]
[-50.41759491 95.92884064]
[-65.41048431 95.46691132]
[-80.40336609 95.00498962]
[-96.42118073 100.56069183]
[-106.19394684 86.70683289]
[-95.58686066 73.48086548]
[-79.94144440 80.01210022]
[-64.94855499 80.47402954]
[-49.95566940 80.93595123]
[-47.12022781 78.74335480]
[-43.06189728 77.84917450]
[-38.41869736 78.82195282]
[-34.06201935 81.91623688]
[-19.12600708 83.30026245]
[-4.18999434 84.68428802]
[11.29742908 76.48769379]
[26.25991631 87.17200470]
[41.22119904 88.24907684]
[56.18247604 89.32614899]
[71.14376068 90.40321350]
[86.10504150 91.48028564]
[99.79566193 85.35111237]
[108.95760345 73.47428894]
[118.11953735 61.59746552]
[127.28147125 49.72064209]
[136.44340515 37.84381866]
[125.48250580 27.58694077]
[115.54623413 16.33460045]
[106.72457123 4.18869686]
[99.09740448 -8.74076939]
[92.73381042 -22.33670616]
[87.69142914 -36.47598267]
[84.01591492 -51.03054810]
[81.74056244 -65.86859131]
[80.88597870 -80.85572815]
[81.45989227 -95.85624695]
[83.45711517 -110.73427582]
[86.85955811 -125.35508728]
[91.63641357 -139.58627319]
[97.74440765 -153.29893494]
[105.12822723 -166.36889648]
[113.72100830 -178.67779541]
[123.44492340 -190.11413574]
[134.21191406 -200.57438660]
[145.92448425 -209.96377563]
[158.47653198 -218.19728088]
[171.75439453 -225.20034790]
[185.63783264 -230.90956116]
[200.00109863 -235.27317810]
[214.71412659 -238.25172424]
[229.64366150 -239.81819153]
[244.65449524 -239.95841980]
[259.61068726 -238.67111206]
[274.37677002 -235.96795654]
[288.81906128 -231.87339783]
[302.80673218 -226.42456055]
[316.21310425 -219.67074585]
[328.91677856 -211.67315674]
[340.80270386 -202.50421143]
[351.76321411 -192.24693298]
[361.69909668 -180.99423218]
[370.52029419 -168.84800720]
[378.14700317 -155.91825867]
[384.51010132 -142.32209778]
[389.55197144 -128.18263245]
[393.22692871 -113.62793732]
[395.50177002 -98.78981018]
[396.35580444 -83.80263519]
[395.78134155 -68.80214691]
[393.78356934 -53.92418289]
[390.38058472 -39.30349731]
[385.60321045 -25.07249069]
[379.49472046 -11.36004925]
[372.11044312 1.70964396]
[363.51721191 14.01822472]
[353.79287720 25.45422173]
[343.02548218 35.91407013]
[331.31259155 45.30303574]
[318.76022339 53.53609085]
[305.48211670 60.53867340]
[291.59848022 66.24736786]
[277.23504639 70.61047363]
[262.52191162 73.58847809]
[247.59231567 75.15440369]
[232.58148193 75.29407501]
[217.62533569 74.00623322]
[202.85934448 71.30252838]
[188.41720581 67.20745850]
[174.42973328 61.75809860]
[161.02360535 55.00380707]
[148.32023621 47.00575256]
[139.15829468 58.88257599]
[129.99635315 70.75939941]
[120.83442688 82.63622284]
[111.67248535 94.51304626]
[116.02505493 105.21944427]
[110.00641632 118.24568939]
[109.39059448 133.23304749]
[108.77477264 148.22039795]
[108.15894318 163.20774841]
[107.54312134 178.19509888]
[106.92729187 193.18244934]
[106.31147003 208.16981506]
[105.69564056 223.15716553]
[105.07981873 238.14451599]
[104.46398926 253.13186646]
[103.84816742 268.11923218]
[118.35868073 272.18634033]
[131.53982544 279.49075317]
[142.68077087 289.63845825]
[151.18066406 302.08227539]
[156.58114624 316.15109253]
[158.59097290 331.08618164]
[157.10176086 346.08215332]
[152.19378662 360.33026123]
[144.13177490 373.06213379]
[133.35047913 383.59115601]
[120.43132019 391.34951782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 55]
[26 54]
[27 53]
[28 52]
[29 51]
[32 49]
[33 48]
[34 47]
[35 43]
[36 42]
[37 41]
[56 129]
[57 128]
[58 127]
[59 126]
[60 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
