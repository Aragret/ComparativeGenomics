%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUAACCCCAUGGGGGGGGGGACCCCGAACCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUxxxxxxxxxxAAAAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAGCUGGUUUCAACCCCCCCCCCGCCAACCCCAU\
) } def
/len { sequence length } bind def

/coor [
[72.85642242 382.86315918]
[58.83447647 377.31015015]
[46.63452148 368.44381714]
[37.02344894 356.82150269]
[30.60542297 343.17379761]
[27.78388596 328.35861206]
[28.73620224 313.30725098]
[33.40250778 298.96582031]
[41.48947525 286.23587036]
[52.48875046 275.91760254]
[65.70890808 268.65960693]
[80.31892395 264.91818237]
[80.31892395 249.91818237]
[80.31892395 234.91818237]
[80.31892395 219.91818237]
[80.31892395 204.91818237]
[80.31892395 189.91818237]
[80.31892395 174.91818237]
[80.31892395 159.91818237]
[80.31892395 144.91818237]
[80.31892395 129.91818237]
[74.52795410 117.01764679]
[74.99723816 104.78363800]
[80.17055511 95.75466919]
[87.62963867 91.33834076]
[94.72865295 91.59191132]
[89.31002808 77.60482788]
[83.89140320 63.61774826]
[69.28785706 52.44782639]
[72.58055115 35.23728561]
[66.87588501 21.36440659]
[52.56591797 15.21115589]
[46.97820282 1.06081724]
[52.93257141 -12.54363251]
[47.22790909 -26.41651344]
[32.85803223 -22.07344818]
[18.13607216 -19.13756943]
[3.19948459 -17.63628960]
[-11.81226921 -17.58362198]
[-26.75902367 -18.98006248]
[-41.50122070 -21.81257057]
[-55.90121841 -26.05470085]
[-69.82455444 -31.66684151]
[-83.14123535 -38.59659576]
[-95.72692871 -46.77925873]
[-107.46411133 -56.13843155]
[-118.24319458 -66.58672333]
[-127.96353912 -78.02658844]
[-136.53437805 -90.35119629]
[-143.87570190 -103.44548798]
[-149.91896057 -117.18720245]
[-154.60771179 -131.44802856]
[-157.89820862 -146.09480286]
[-159.75968933 -160.99079895]
[-160.17480469 -175.99690247]
[-159.13964844 -190.97300720]
[-156.66392517 -205.77929688]
[-152.77072144 -220.27752686]
[-147.49638367 -234.33230591]
[-140.89018250 -247.81242371]
[-133.01379395 -260.59201050]
[-123.94074249 -272.55175781]
[-113.75575256 -283.57998657]
[-102.55392456 -293.57369995]
[-90.43984985 -302.43963623]
[-77.52662659 -310.09497070]
[-63.93483734 -316.46826172]
[-49.79138184 -321.49996948]
[-35.22831726 -325.14312744]
[-20.38162231 -327.36373901]
[-5.38991404 -328.14105225]
[9.60682774 -327.46780396]
[24.46857834 -325.35031128]
[39.05657578 -321.80828857]
[53.23461151 -316.87484741]
[66.87030792 -310.59603882]
[79.83634949 -303.03051758]
[92.01166534 -294.24887085]
[103.28258514 -284.33312988]
[113.54386139 -273.37585449]
[122.69969940 -261.47940063]
[130.66459656 -248.75477600]
[137.36419678 -235.32083130]
[142.73594666 -221.30299377]
[146.72967529 -206.83213806]
[149.30810547 -192.04338074]
[150.44715881 -177.07481384]
[150.13621521 -162.06619263]
[148.37815857 -147.15763855]
[145.18940735 -132.48837280]
[140.59973145 -118.19535065]
[134.65199280 -104.41203308]
[127.40172577 -91.26710510]
[118.91661835 -78.88330078]
[109.27590942 -67.37625885]
[98.56959534 -56.85340500]
[86.89765167 -47.41299820]
[74.36905670 -39.14318466]
[61.10078812 -32.12117767]
[66.80545044 -18.24829674]
[80.60768127 -12.76795006]
[86.59064484 1.21985829]
[80.74877167 15.65974331]
[86.45343018 29.53262329]
[97.52356720 34.50396347]
[102.37105560 46.06567764]
[97.87848663 58.19911957]
[103.29711151 72.18620300]
[108.71573639 86.17328644]
[120.40193939 95.57714844]
[135.22442627 97.87802124]
[150.04690552 100.17889404]
[164.86938477 102.47976685]
[174.43560791 90.46381378]
[188.73402405 84.85573578]
[203.91847229 87.16407776]
[215.90437317 96.76790619]
[221.46760559 111.08384705]
[219.11167908 126.26097107]
[209.47033691 138.21672058]
[195.13702393 143.73504639]
[179.96736145 141.33155823]
[168.04188538 131.65278625]
[162.56851196 117.30225372]
[147.74603271 115.00137329]
[132.92355347 112.70050049]
[118.10106659 110.39962769]
[112.40553284 115.27926636]
[122.16461945 126.67050171]
[110.77321625 136.42939758]
[101.01445770 125.03853607]
[95.31892395 129.91818237]
[95.31892395 144.91818237]
[95.31892395 159.91818237]
[95.31892395 174.91818237]
[95.31892395 189.91818237]
[95.31892395 204.91818237]
[95.31892395 219.91818237]
[95.31892395 234.91818237]
[95.31892395 249.91818237]
[95.31892395 264.91818237]
[109.92893219 268.65960693]
[123.14909363 275.91760254]
[134.14836121 286.23587036]
[142.23533630 298.96582031]
[146.90164185 313.30725098]
[147.85395813 328.35861206]
[145.03242493 343.17379761]
[138.61439514 356.82150269]
[129.00332642 368.44381714]
[116.80335999 377.31015015]
[102.78141785 382.86315918]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[26 109]
[27 108]
[28 107]
[30 104]
[31 103]
[34 100]
[35 99]
[110 127]
[111 126]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
