%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCACAGAAGCGGGGGGGGGGUGCCAUCAAGUAUUUCCUCACGCAAGCAACCGCAUCCAUAAUCCUUCUAAxxxxxxxxxxAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACCCCCCCCCCCUCCACGGAAGC\
) } def
/len { sequence length } bind def

/coor [
[84.29325867 415.18020630]
[70.80438232 408.44866943]
[59.31887817 398.68408203]
[50.50450897 386.45419312]
[44.87372589 372.47000122]
[42.75389862 357.54452515]
[44.26826859 342.54553223]
[49.32879257 328.34500122]
[57.64125443 315.76858521]
[68.72238922 305.54745483]
[81.92794037 298.27578735]
[96.49016571 294.37643433]
[96.18218994 279.37960815]
[95.87421417 264.38275146]
[95.56623077 249.38592529]
[95.25825500 234.38908386]
[94.95027924 219.39224243]
[94.64230347 204.39540100]
[94.33432007 189.39857483]
[94.02634430 174.40173340]
[93.71836853 159.40489197]
[93.41039276 144.40805054]
[93.10240936 129.41122437]
[85.41448212 126.45484924]
[78.81086731 121.53176880]
[73.78250122 115.00796509]
[70.70320129 107.36843872]
[69.80188751 99.18112946]
[71.14557648 91.05469513]
[74.63436127 83.59326935]
[80.00888062 77.35156250]
[73.18531036 63.99346161]
[59.23676682 69.54077148]
[44.83005142 73.75753021]
[30.09177399 76.60668182]
[15.15145683 78.06317902]
[0.14039820 78.11422729]
[-14.80947971 76.75937653]
[-29.56679535 74.01053619]
[-44.00185776 69.89186859]
[-57.98780823 64.43955231]
[-71.40173340 57.70152283]
[-84.12574768 49.73698425]
[-96.04803467 40.61593628]
[-107.06381226 30.41853142]
[-117.07627869 19.23439026]
[-125.99743652 7.16180038]
[-133.74888611 -5.69314051]
[-140.26251221 -19.21746063]
[-145.48104858 -33.29230499]
[-149.35867310 -47.79397964]
[-151.86126709 -62.59504318]
[-152.96685791 -77.56542206]
[-152.66572571 -92.57353973]
[-150.96052551 -107.48751831]
[-147.86624146 -122.17628479]
[-143.41004944 -136.51075745]
[-137.63111877 -150.36494446]
[-130.58024597 -163.61709595]
[-122.31939697 -176.15075684]
[-112.92115784 -187.85578918]
[-102.46812439 -198.62930298]
[-91.05216980 -208.37663269]
[-78.77361298 -217.01210022]
[-65.74035645 -224.45983887]
[-52.06694794 -230.65438843]
[-37.87355042 -235.54129028]
[-23.28489494 -239.07762146]
[-8.42919445 -241.23229980]
[6.56299829 -241.98637390]
[21.55992699 -241.33323669]
[36.42979813 -239.27862549]
[51.04192734 -235.84057617]
[65.26789856 -231.04933167]
[78.98270416 -224.94697571]
[92.06579590 -217.58714294]
[104.40220642 -209.03451538]
[115.88352203 -199.36425781]
[126.40884399 -188.66136169]
[135.88566589 -177.01986694]
[144.23071289 -164.54209900]
[151.37063599 -151.33770752]
[157.24269104 -137.52273560]
[161.79527283 -123.21858978]
[164.98837280 -108.55098724]
[166.79394531 -93.64882660]
[167.19609070 -78.64307404]
[166.19129944 -63.66559219]
[163.78840637 -48.84801865]
[160.00849915 -34.32056808]
[154.88482666 -20.21091080]
[148.46238708 -6.64304924]
[140.79765320 6.26378155]
[131.95796204 18.39615250]
[122.02101898 29.64744377]
[111.07413483 39.91877365]
[99.21352386 49.11987305]
[86.54341125 57.16988754]
[93.36698151 70.52798462]
[115.37239838 73.99450684]
[129.01855469 91.60238647]
[144.01144409 91.14046478]
[159.00433350 90.67853546]
[173.99720764 90.21661377]
[188.97744751 89.44695282]
[203.93873596 88.36988068]
[218.90000916 87.29280853]
[224.96284485 73.23931885]
[236.86949158 63.62212372]
[251.88388062 60.65119171]
[266.55584717 65.00921631]
[277.51385498 75.69475555]
[282.23980713 90.25235748]
[279.64779663 105.33678436]
[270.33337402 117.48175049]
[256.43695068 123.89642334]
[241.15182495 123.10676575]
[227.99040222 115.29423523]
[219.97708130 102.25408936]
[205.01580811 103.33116150]
[190.05451965 104.40823364]
[186.27247620 107.41577911]
[180.54530334 108.03814697]
[174.45913696 105.20949554]
[159.46624756 105.67142487]
[144.47337341 106.13334656]
[129.48048401 106.59527588]
[121.90231323 120.80589294]
[108.09925079 129.10324097]
[108.40722656 144.10008240]
[108.71520233 159.09690857]
[109.02318573 174.09375000]
[109.33116150 189.09059143]
[109.63913727 204.08743286]
[109.94711304 219.08427429]
[110.25509644 234.08110046]
[110.56307220 249.07794189]
[110.87104797 264.07476807]
[111.17902374 279.07162476]
[111.48700714 294.06845093]
[126.19703674 297.36666870]
[139.69000244 304.09002686]
[151.18141174 313.84762573]
[160.00320435 326.07217407]
[165.64245605 340.05297852]
[167.77133179 354.97714233]
[166.26605225 369.97708130]
[161.21414185 384.18066406]
[152.90930176 396.76211548]
[141.83438110 406.98999023]
[128.63322449 414.26962280]
[114.07337189 418.17782593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[31 99]
[32 98]
[101 127]
[102 126]
[103 125]
[104 124]
[105 121]
[106 120]
[107 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
