%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACAUAAUGACGGGGGGGGGGCCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAAxxxxxxxxxxCACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUCCCCCCCCCCACACAAAAUGAC\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 399.41680908]
[70.87159729 394.26181030]
[58.28185654 385.97958374]
[47.94191742 375.01681519]
[40.40940475 361.96469116]
[36.09054184 347.52709961]
[35.21823120 332.48263550]
[37.83952332 317.64263916]
[43.81304932 303.80740356]
[52.81666565 291.72305298]
[64.36482239 282.04125977]
[77.83473969 275.28421021]
[92.50000000 271.81622314]
[92.50000000 256.81622314]
[92.50000000 241.81622314]
[92.50000000 226.81622314]
[92.50000000 211.81622314]
[92.50000000 196.81622314]
[92.50000000 181.81622314]
[92.50000000 166.81622314]
[92.50000000 151.81622314]
[92.50000000 136.81622314]
[83.56819153 133.78875732]
[75.67166138 128.63243103]
[69.30792999 121.67212677]
[64.87794495 113.34638214]
[62.66082382 104.17974854]
[62.79624557 94.74976349]
[65.27568054 85.65057373]
[69.94290924 77.45546722]
[76.50388336 70.68077850]
[84.54522705 65.75333405]
[81.22858429 51.12459564]
[77.91194916 36.49586105]
[72.84518433 22.37750816]
[66.10313416 8.97807503]
[59.36108780 -4.42135715]
[52.61903763 -17.82078934]
[45.87699127 -31.22022247]
[39.13494110 -44.61965561]
[23.52191925 -54.33117676]
[25.14316940 -71.77994537]
[18.13093948 -85.03998566]
[11.11871052 -98.30002594]
[5.65442801 -102.18859863]
[3.36308670 -107.47020721]
[4.10338068 -112.24258423]
[-2.36571717 -125.77590942]
[-8.83481503 -139.30923462]
[-23.32257843 -135.27488708]
[-38.29081345 -133.81781006]
[-53.28464890 -134.98225403]
[-67.84844208 -138.73284912]
[-81.53961945 -144.95561218]
[-93.94212341 -153.46145630]
[-104.67904663 -163.99186707]
[-113.42410278 -176.22685242]
[-119.91155243 -189.79461670]
[-123.94425201 -204.28283691]
[-125.39963531 -219.25123596]
[-124.23348236 -234.24493408]
[-120.48123932 -248.80830383]
[-114.25691986 -262.49877930]
[-105.74967957 -274.90032959]
[-95.21804810 -285.63604736]
[-82.98207092 -294.37973022]
[-69.41357422 -300.86563110]
[-54.92489624 -304.89666748]
[-39.95633316 -306.35037231]
[-24.96275902 -305.18252563]
[-10.39981270 -301.42861938]
[3.28995228 -295.20275879]
[15.69052124 -286.69409180]
[26.42505455 -276.16125488]
[35.16734314 -263.92428589]
[41.65171432 -250.35505676]
[45.68112183 -235.86592102]
[47.13311005 -220.89718628]
[45.96355820 -205.90374756]
[42.20801163 -191.34123230]
[35.98058701 -177.65216064]
[27.47053909 -165.25256348]
[16.93647194 -154.51922607]
[4.69850588 -145.77832031]
[11.16760349 -132.24501038]
[17.63670158 -118.71168518]
[24.37874985 -105.31224823]
[31.39097977 -92.05221558]
[38.40320969 -78.79217529]
[49.89853287 -74.90942383]
[55.83596802 -63.86986923]
[52.53437424 -51.36170197]
[59.27642059 -37.96226883]
[66.01847076 -24.56283760]
[72.76052094 -11.16340542]
[79.50256348 2.23602676]
[86.24461365 15.63545895]
[88.50344849 0.80651194]
[96.87559509 -11.63965607]
[109.75918579 -19.32166100]
[124.68913269 -20.76967049]
[138.80882263 -15.70662975]
[149.41667175 -5.10127401]
[154.48301697 9.01722527]
[153.03851318 23.94750977]
[145.35954285 36.83290100]
[132.91534424 45.20797348]
[118.08692169 47.47029114]
[103.71147919 43.18698883]
[92.54067993 33.17922211]
[95.85732269 47.80795670]
[99.17395782 62.43669510]
[125.88613129 72.76780701]
[137.55693054 98.92243195]
[152.33488464 101.49388123]
[167.11282349 104.06533051]
[181.89076233 106.63677216]
[196.66871643 109.20822144]
[211.87161255 103.05973053]
[224.62953186 113.36348724]
[221.81823730 129.51986694]
[206.32972717 134.90856934]
[194.09725952 123.98616791]
[179.31932068 121.41471863]
[164.54136658 118.84326935]
[149.76342773 116.27182007]
[134.98548889 113.70037079]
[132.23884583 119.29615021]
[128.60482788 124.36079407]
[124.18345642 128.75491333]
[119.09644318 132.35754395]
[113.48379517 135.06953430]
[107.50000000 136.81622314]
[107.50000000 151.81622314]
[107.50000000 166.81622314]
[107.50000000 181.81622314]
[107.50000000 196.81622314]
[107.50000000 211.81622314]
[107.50000000 226.81622314]
[107.50000000 241.81622314]
[107.50000000 256.81622314]
[107.50000000 271.81622314]
[122.16526031 275.28421021]
[135.63517761 282.04125977]
[147.18333435 291.72305298]
[156.18695068 303.80740356]
[162.16047668 317.64263916]
[164.78176880 332.48263550]
[163.90945435 347.52709961]
[159.59059143 361.96469116]
[152.05809021 375.01681519]
[141.71813965 385.97958374]
[129.12840271 394.26181030]
[114.96779633 399.41680908]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[32 112]
[33 111]
[34 110]
[35 97]
[36 96]
[37 95]
[38 94]
[39 93]
[40 92]
[42 89]
[43 88]
[44 87]
[47 86]
[48 85]
[49 84]
[114 127]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
