%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUCAAGCAGGGGGGGGGGCGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGCCACACCCCCACGGGAAAxxxxxxxxxxCGUAGCCUUCUCCACUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGCCCCCCCCCCGCAUCAACCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 408.30053711]
[71.19830322 402.28451538]
[59.48964310 392.75509644]
[50.78712082 380.41943359]
[45.73651886 366.19290161]
[44.71262741 351.13122559]
[47.79142761 336.35205078]
[54.74444962 322.95211792]
[65.05573273 311.92578125]
[77.96011353 304.09127808]
[92.50000000 300.02996826]
[92.50000000 285.02996826]
[92.50000000 270.02996826]
[92.50000000 255.02996826]
[92.50000000 240.02996826]
[92.50000000 225.02996826]
[92.50000000 210.02996826]
[92.50000000 195.02996826]
[92.50000000 180.02996826]
[92.50000000 165.02996826]
[92.50000000 150.02996826]
[92.50000000 135.02996826]
[79.36756897 129.28569031]
[69.53827667 118.85292053]
[55.41347504 123.90167999]
[41.28867340 128.95043945]
[34.75421143 143.34057617]
[19.92911720 148.81709290]
[5.60886145 142.13085938]
[0.28939435 127.24868774]
[7.12666225 112.99992371]
[22.06423569 107.83809662]
[36.23991776 114.82563019]
[50.36471939 109.77687836]
[64.48952484 104.72811890]
[65.75408173 89.48496246]
[73.26162720 76.15867615]
[85.64354706 67.17864227]
[100.64263916 64.18190002]
[104.04561615 49.57300949]
[107.44859314 34.96411896]
[99.36382294 21.64968109]
[103.02303314 6.88266325]
[115.76613617 -0.74287879]
[119.16911316 -15.35177135]
[122.11459351 -30.05973244]
[124.59971619 -44.85243988]
[126.93081665 -59.67019653]
[129.10765076 -74.51140594]
[131.28450012 -89.35260773]
[133.46133423 -104.19381714]
[135.63816833 -119.03501892]
[121.60655975 -124.50492859]
[109.15006256 -132.95620728]
[98.89159393 -143.96232605]
[91.34328461 -156.96911621]
[86.88092804 -171.32264709]
[85.72525024 -186.30207825]
[87.93100739 -201.15591431]
[93.38438416 -215.13969421]
[101.80889130 -227.55322266]
[112.77935791 -237.77577209]
[125.74339294 -245.29698181]
[140.04919434 -249.74244690]
[154.97836304 -250.89227295]
[157.15519714 -265.73348999]
[159.17753601 -280.59652710]
[161.04513550 -295.47979736]
[162.91275024 -310.36309814]
[149.21147156 -316.77633667]
[138.16395569 -327.11111450]
[130.85255432 -340.35494995]
[127.99354553 -355.21029663]
[129.86703491 -370.22177124]
[136.28945923 -383.91876221]
[146.63165283 -394.95935059]
[159.88035583 -402.26190186]
[174.73760986 -405.11093140]
[189.74784851 -403.22738647]
[203.44053650 -396.79577637]
[214.47418213 -386.44619751]
[221.76783752 -373.19259644]
[224.60693359 -358.33343506]
[222.71333313 -343.32446289]
[216.27255249 -329.63610840]
[205.91557312 -318.60937500]
[192.65710449 -311.32461548]
[177.79603577 -308.49548340]
[175.92842102 -293.61218262]
[174.06080627 -278.72891235]
[176.36352539 -271.65478516]
[171.99639893 -263.55664062]
[169.81956482 -248.71543884]
[183.78968811 -243.32679749]
[196.21630859 -234.96035767]
[206.47439575 -224.03303528]
[214.04714966 -211.09065247]
[218.55198669 -196.78070068]
[219.75990295 -181.81988525]
[217.60713196 -166.95826721]
[212.19845581 -152.94166565]
[203.80212402 -140.47419739]
[192.83657837 -130.18292236]
[179.84954834 -122.58634186]
[165.49076843 -118.06820679]
[150.47937012 -116.85818481]
[148.30253601 -102.01697540]
[146.12570190 -87.17577362]
[143.94886780 -72.33456421]
[141.77201843 -57.49336243]
[143.92707825 -50.37286758]
[139.39242554 -42.36732101]
[136.90730286 -27.57461357]
[138.69888306 -24.46692657]
[139.03607178 -20.32108688]
[137.44053650 -15.84820843]
[133.77799988 -11.94879341]
[130.37503052 2.66009927]
[138.43669128 15.13187790]
[135.19369507 29.99584961]
[122.05748749 38.36709595]
[118.65450287 52.97598648]
[115.25152588 67.58487701]
[127.02989197 76.48970795]
[134.21620178 89.38865662]
[135.58958435 104.09034729]
[130.91670227 118.09712982]
[120.99145508 129.02943420]
[107.50000000 135.02996826]
[107.50000000 150.02996826]
[107.50000000 165.02996826]
[107.50000000 180.02996826]
[107.50000000 195.02996826]
[107.50000000 210.02996826]
[107.50000000 225.02996826]
[107.50000000 240.02996826]
[107.50000000 255.02996826]
[107.50000000 270.02996826]
[107.50000000 285.02996826]
[107.50000000 300.02996826]
[122.03988647 304.09127808]
[134.94427490 311.92578125]
[145.25555420 322.95211792]
[152.20857239 336.35205078]
[155.28736877 351.13122559]
[154.26348877 366.19290161]
[149.21287537 380.41943359]
[140.51036072 392.75509644]
[128.80169678 402.28451538]
[114.95575714 408.30053711]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 35]
[25 34]
[26 33]
[39 123]
[40 122]
[41 121]
[44 118]
[45 117]
[46 113]
[47 112]
[48 110]
[49 109]
[50 108]
[51 107]
[52 106]
[65 93]
[66 92]
[67 90]
[68 89]
[69 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
