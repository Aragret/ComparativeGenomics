%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUAGCAGUGGGGGGGGGGUCUACCGUACAACCCUAACAUAACCAUUCUUAAUUUAACUAUUUAUAUUAxxxxxxxxxxUGCAUACACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCCCCCCCCCCCUAACAGCAGU\
) } def
/len { sequence length } bind def

/coor [
[83.46478271 368.54345703]
[70.24458313 361.27099609]
[59.35778046 350.82397461]
[51.54664993 337.91473389]
[47.34376907 323.42343140]
[47.03569794 308.33807373]
[50.64343643 293.68725586]
[57.92101288 280.46987915]
[68.37221527 269.58709717]
[81.28447723 261.78097534]
[95.77742004 257.58367920]
[95.46536255 242.58691406]
[95.15330505 227.59016418]
[94.84124756 212.59341431]
[94.52919006 197.59666443]
[94.21713257 182.59989929]
[93.90508270 167.60314941]
[93.59302521 152.60639954]
[93.28096771 137.60964966]
[92.96891022 122.61289215]
[84.75382233 118.94717407]
[78.30468750 112.33826447]
[74.65676880 103.59642792]
[74.48613739 93.88715363]
[77.99192047 84.57614899]
[84.84397125 77.03724670]
[94.20663452 72.45024872]
[84.94168854 60.65361023]
[72.28373718 68.72473145]
[58.89561462 75.51628113]
[44.90627289 80.96283722]
[30.45042801 85.01196289]
[15.66730595 87.62464142]
[0.69928032 88.77572632]
[-14.30949593 88.45413208]
[-29.21447563 86.66294098]
[-43.87211227 83.41941833]
[-58.14124298 78.75479126]
[-71.88444519 72.71399689]
[-84.96936035 65.35520172]
[-97.26995850 56.74927902]
[-108.66779327 46.97911072]
[-119.05309296 36.13879395]
[-128.32582092 24.33272934]
[-136.39669800 11.67461586]
[-143.18797302 -1.71363723]
[-148.63426208 -15.70309067]
[-152.68309021 -30.15901566]
[-155.29547119 -44.94218826]
[-156.44625854 -59.91023636]
[-156.12435913 -74.91900635]
[-154.33287048 -89.82395172]
[-151.08905029 -104.48152161]
[-146.42414856 -118.75056458]
[-140.38307190 -132.49363708]
[-133.02401733 -145.57839966]
[-124.41785431 -157.87884521]
[-114.64745331 -169.27647400]
[-103.80693054 -179.66156006]
[-92.00067902 -188.93405151]
[-79.34240723 -197.00466919]
[-65.95401764 -203.79568481]
[-51.96445465 -209.24168396]
[-37.50844955 -213.29022217]
[-22.72522163 -215.90231323]
[-7.75715065 -217.05281067]
[7.25161314 -216.73060608]
[22.15652084 -214.93882751]
[36.81402969 -211.69471741]
[51.08297348 -207.02951050]
[64.82593536 -200.98817444]
[77.91055298 -193.62884521]
[90.21080780 -185.02243042]
[101.60825348 -175.25181580]
[111.99311829 -164.41108704]
[121.26538086 -152.60464478]
[129.33573914 -139.94621277]
[136.12648010 -126.55768585]
[141.57220459 -112.56801605]
[145.62045288 -98.11192322]
[148.23225403 -83.32865143]
[149.38244629 -68.36054993]
[149.05993652 -53.35179520]
[147.26786804 -38.44692230]
[144.02345276 -23.78948021]
[139.35797119 -9.52062988]
[133.31636047 4.22220802]
[125.95677185 17.30667877]
[117.35011292 29.60676765]
[107.57926178 41.00401688]
[96.73832703 51.38866043]
[106.00327301 63.18529892]
[120.01998901 68.52680969]
[134.78604126 65.88794708]
[149.55209351 63.24908447]
[164.31816101 60.61021805]
[179.08421326 57.97135544]
[184.37873840 43.62160873]
[196.06782532 33.91274643]
[210.94825745 31.37517738]
[225.00683594 36.59168243]
[234.50279236 48.06741333]
[249.26885986 45.42855072]
[264.03491211 42.78968430]
[278.80096436 40.15082169]
[293.56701660 37.51195908]
[303.88134766 25.22399902]
[319.91510010 25.77068329]
[329.36853027 38.73264313]
[324.98977661 54.16656876]
[310.13784790 60.23287582]
[296.20587158 52.27801132]
[281.43981934 54.91687775]
[266.67376709 57.55574036]
[251.90771484 60.19460678]
[237.14166260 62.83346939]
[232.20823669 76.88790131]
[220.82664490 86.65085602]
[205.98838806 89.42436218]
[191.66006470 84.36511230]
[181.72306824 72.73741150]
[166.95701599 75.37627411]
[152.19096375 78.01513672]
[137.42491150 80.65400696]
[122.65885162 83.29286957]
[126.32262421 92.92060852]
[126.20468140 102.89113617]
[122.56174469 111.81766510]
[116.12449646 118.54548645]
[107.96566772 122.30083466]
[108.27771759 137.29759216]
[108.58977509 152.29434204]
[108.90183258 167.29109192]
[109.21389008 182.28785706]
[109.52594757 197.28460693]
[109.83800507 212.28135681]
[110.15005493 227.27810669]
[110.46211243 242.27487183]
[110.77416992 257.27160645]
[125.42916107 260.86239624]
[138.65496826 268.12463379]
[149.54983521 278.56323242]
[157.37094116 291.46646118]
[161.58500671 305.95452881]
[161.90472412 321.03961182]
[158.30830383 335.69320679]
[151.04093933 348.91622925]
[140.59814453 359.80706787]
[127.69190979 367.62316895]
[113.20221710 371.83166504]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[27 92]
[28 91]
[93 125]
[94 124]
[95 123]
[96 122]
[97 121]
[102 116]
[103 115]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
