%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUAUACAGGGGGGGGGGACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUAxxxxxxxxxxGCCAAAUAUCAUUCUGAGGGGCCACAGUAAUUACAAACUUACUAUCCGCCCCCCCCCCCCAUCCCAUACA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 361.73852539]
[71.19830322 355.72250366]
[59.48964310 346.19308472]
[50.78712082 333.85742188]
[45.73651886 319.63088989]
[44.71262741 304.56921387]
[47.79142761 289.79006958]
[54.74444962 276.39013672]
[65.05573273 265.36380005]
[77.96011353 257.52929688]
[92.50000000 253.46797180]
[92.50000000 238.46797180]
[92.50000000 223.46797180]
[92.50000000 208.46797180]
[92.50000000 193.46797180]
[92.50000000 178.46797180]
[92.50000000 163.46797180]
[92.50000000 148.46797180]
[92.50000000 133.46797180]
[92.50000000 118.46797943]
[80.42001343 109.57563019]
[66.09741211 114.03244781]
[51.77481842 118.48925781]
[37.45222092 122.94607544]
[23.17675972 127.55164337]
[8.94997978 132.30545044]
[-5.27679920 137.05926514]
[-19.50357819 141.81307983]
[-32.61002350 152.56750488]
[-46.57237625 142.95037842]
[-41.19626236 126.87139893]
[-24.25739288 127.58630371]
[-10.03061390 122.83248901]
[4.19616508 118.07867432]
[18.42294502 113.32485962]
[23.80503273 108.18883514]
[32.99540329 108.62348175]
[47.31800079 104.16666412]
[61.64059830 99.70984650]
[75.96319580 95.25302887]
[60.99643707 94.25495911]
[51.63864517 82.53182983]
[53.98225403 67.71604156]
[66.50144196 59.45348740]
[81.04553986 63.12353134]
[88.14550781 76.33634186]
[86.27789307 61.45306015]
[84.41028595 46.56977844]
[82.54267120 31.68650055]
[75.08776093 18.67019081]
[63.19538116 9.52845573]
[46.87615204 7.91141176]
[40.36438751 -7.13946676]
[50.35882950 -20.14112663]
[66.57805634 -17.71857452]
[72.33711243 -2.36392355]
[84.22949219 6.77781057]
[97.61577606 0.00969578]
[97.30371857 -14.98705769]
[96.99166870 -29.98381233]
[96.67961121 -44.98056412]
[96.36755371 -59.97731781]
[81.63332367 -63.13945007]
[68.02574921 -69.61483765]
[56.27867126 -79.05427551]
[47.02560425 -90.94870758]
[40.76554489 -104.65666962]
[37.83609390 -119.43892670]
[38.39523315 -134.49827576]
[42.41280746 -149.02259827]
[49.67215347 -162.22860718]
[59.78178787 -173.40411377]
[72.19651031 -181.94644165]
[86.24680328 -187.39492798]
[101.17495728 -189.45571899]
[116.17591858 -188.01770020]
[130.44070435 -183.15840149]
[143.20002747 -175.13989258]
[153.76579285 -164.39460754]
[161.56820679 -151.50201416]
[166.18649292 -137.15739441]
[167.37159729 -122.13433075]
[165.05960083 -107.24301147]
[159.37518311 -93.28649902]
[150.62490845 -81.01745605]
[139.28067017 -71.09752655]
[125.95424652 -64.06169128]
[111.36430359 -60.28937531]
[111.67636108 -45.29262161]
[111.98841858 -30.29586792]
[112.30047607 -15.29911423]
[112.61253357 -0.30236045]
[113.60523224 10.24641800]
[110.63412476 19.55483437]
[104.76612091 26.31322289]
[97.42594910 29.81888580]
[99.29356384 44.70216751]
[101.16117859 59.58544540]
[103.02878571 74.46872711]
[119.57697296 93.29425049]
[134.53723145 94.38555908]
[149.49746704 95.47686768]
[160.20202637 82.42066193]
[176.41271973 78.33470154]
[191.72029114 84.63107300]
[200.19303894 98.65669250]
[215.17274475 99.43653870]
[230.15246582 100.21638489]
[245.13217163 100.99623108]
[260.11187744 101.77607727]
[269.76788330 89.62940216]
[284.72833252 85.51062775]
[299.24066162 91.00350189]
[307.72457886 103.99591064]
[306.91784668 119.49199677]
[297.13067627 131.53320312]
[282.12643433 135.48945618]
[267.67453003 129.83946228]
[259.33203125 116.75579071]
[244.35232544 115.97594452]
[229.37261963 115.19609833]
[214.39289856 114.41625214]
[199.41319275 113.63640594]
[191.98822021 124.77489471]
[179.92500305 130.82386780]
[166.34094238 130.10002136]
[154.80638123 122.68605042]
[148.40615845 110.43711853]
[133.44590759 109.34580994]
[118.48566437 108.25450134]
[107.50000000 118.46797943]
[107.50000000 133.46797180]
[107.50000000 148.46797180]
[107.50000000 163.46797180]
[107.50000000 178.46797180]
[107.50000000 193.46797180]
[107.50000000 208.46797180]
[107.50000000 223.46797180]
[107.50000000 238.46797180]
[107.50000000 253.46797180]
[122.03988647 257.52929688]
[134.94427490 265.36380005]
[145.25555420 276.39013672]
[152.20857239 289.79006958]
[155.28736877 304.56921387]
[154.26348877 319.63088989]
[149.21287537 333.85742188]
[140.51036072 346.19308472]
[128.80169678 355.72250366]
[114.95575714 361.73852539]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 40]
[22 39]
[23 38]
[24 37]
[25 35]
[26 34]
[27 33]
[28 32]
[46 99]
[47 98]
[48 97]
[49 96]
[50 57]
[51 56]
[58 92]
[59 91]
[60 90]
[61 89]
[62 88]
[100 130]
[101 129]
[102 128]
[106 123]
[107 122]
[108 121]
[109 120]
[110 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
