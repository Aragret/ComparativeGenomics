%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUUUCUUCGGGGGGGGGGCCACAACACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUAxxxxxxxxxxACAUUUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCCCCCCCCCCCAACUUUCCUC\
) } def
/len { sequence length } bind def

/coor [
[78.71746063 466.72979736]
[66.15924072 458.37863159]
[56.07301712 447.16619873]
[49.09282303 433.79727173]
[45.65744019 419.11227417]
[45.98281479 404.03433228]
[50.04850006 389.51119995]
[57.59891891 376.45587158]
[68.15944672 365.68896484]
[81.06624603 357.88732910]
[95.50797272 353.54138184]
[94.88399506 338.55435181]
[94.26001740 323.56735229]
[93.63603973 308.58032227]
[93.01206207 293.59332275]
[92.38808441 278.60629272]
[91.76410675 263.61929321]
[91.14012909 248.63226318]
[90.51615143 233.64524841]
[89.73630524 218.66554260]
[88.80068207 203.69474792]
[87.86505127 188.72395325]
[86.92942047 173.75315857]
[76.44236755 159.71672058]
[84.68776703 143.28524780]
[83.44088745 128.33715820]
[72.56206512 118.00995636]
[57.56936646 117.54191589]
[51.47767639 120.37013245]
[45.74722290 119.74304962]
[41.96638489 116.72962189]
[27.00613594 115.63831329]
[12.04588795 114.54699707]
[3.19374990 117.05529022]
[-3.21319222 113.27418518]
[-18.14749908 111.87187958]
[-33.08180618 110.46958160]
[-46.30430984 119.55500793]
[-61.60908890 114.74425507]
[-67.25563049 99.72772980]
[-58.91238785 86.02481079]
[-42.97958374 84.14721680]
[-31.67950439 95.53527069]
[-16.74519730 96.93757629]
[-1.81088877 98.33987427]
[13.13719845 99.58675385]
[28.09744644 100.67806244]
[43.05769730 101.76937103]
[58.03741074 102.54921722]
[73.03010559 103.01725769]
[74.92177582 93.68203735]
[79.77839661 86.01667786]
[86.69304657 80.86253357]
[94.56217957 78.64873505]
[102.25436401 79.36626434]
[109.16136169 66.05110931]
[116.06835938 52.73595047]
[122.97535706 39.42079544]
[129.88235474 26.10563850]
[136.22949219 12.51468754]
[134.40312195 -3.20074821]
[146.44480896 -11.96699142]
[140.67762756 -26.43686867]
[146.73278809 -40.39357758]
[160.56314087 -45.80252838]
[166.33941650 -59.64574432]
[172.11569214 -73.48896027]
[159.99186707 -64.65646362]
[146.13253784 -58.91897964]
[131.31324768 -56.59757996]
[116.36331940 -57.82217026]
[102.11935425 -62.52422714]
[89.37844086 -70.44061279]
[78.85357666 -81.12832642]
[71.13374329 -93.98928070]
[66.65093994 -108.30376434]
[65.65602875 -123.27073669]
[68.20468140 -138.05262756]
[74.15428162 -151.82225037]
[83.17188263 -163.80902100]
[94.75285339 -173.34217834]
[108.24911499 -179.88822937]
[122.90541840 -183.08087158]
[137.90158081 -182.74140930]
[152.39839172 -178.88887024]
[165.58464050 -171.73883057]
[176.72238159 -161.69142151]
[185.18836975 -149.30888367]
[190.50880432 -135.28416443]
[192.38600159 -120.40208435]
[190.71485901 -105.49546051]
[185.58927917 -91.39914703]
[197.28889465 -100.78630829]
[208.98852539 -110.17346954]
[220.68814087 -119.56063080]
[229.25840759 -134.18891907]
[245.68750000 -130.00311279]
[246.21330261 -113.05731201]
[230.07530212 -107.86100769]
[218.37568665 -98.47384644]
[206.67605591 -89.08668518]
[194.97644043 -79.69952393]
[185.95890808 -67.71269226]
[180.18263245 -53.86947250]
[174.40635681 -40.02625656]
[180.29035950 -26.39122009]
[174.62959290 -12.26994324]
[160.28802490 -6.19071865]
[162.52755737 8.53455830]
[150.07270813 18.29096031]
[151.06881714 20.97705460]
[151.02557373 24.23160744]
[149.71633911 27.64741898]
[147.07086182 30.74136353]
[143.19750977 33.01263809]
[136.29051208 46.32779312]
[129.38351440 59.64294815]
[122.47651672 72.95810699]
[115.56951904 86.27326202]
[121.52349091 110.49829865]
[98.38897705 127.09028625]
[99.63584900 142.03837585]
[108.98519135 150.98509216]
[109.68301392 163.50434875]
[101.90021515 172.81753540]
[102.83584595 187.78833008]
[103.77146912 202.75910950]
[104.70709991 217.72990417]
[108.38594818 226.16305542]
[105.50316620 233.02127075]
[106.12714386 248.00828552]
[106.75112152 262.99530029]
[107.37509918 277.98233032]
[107.99907684 292.96932983]
[108.62305450 307.95635986]
[109.24703217 322.94335938]
[109.87100983 337.93038940]
[110.49498749 352.91738892]
[125.24799347 356.04785156]
[138.75863647 362.74960327]
[150.17761230 372.60137939]
[158.78712463 384.98391724]
[164.04597473 399.11880493]
[165.62358093 414.11755371]
[163.42077637 429.03729248]
[157.57601929 442.94015503]
[148.45674133 454.95220947]
[136.63616943 464.31835938]
[122.85736084 470.44985962]
[107.98645782 472.96127319]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 128]
[21 127]
[22 126]
[23 125]
[25 122]
[26 121]
[27 50]
[28 49]
[31 48]
[32 47]
[33 46]
[35 45]
[36 44]
[37 43]
[55 119]
[56 118]
[57 117]
[58 116]
[59 115]
[60 110]
[62 108]
[65 105]
[66 104]
[67 103]
[92 102]
[93 101]
[94 100]
[95 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
