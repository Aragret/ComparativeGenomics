%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAUUUUAUGGGGGGGGGGCUUUUGGCGGUAUGCACUUUUAACAGUCACCCCCCAACUAACACAUUAUUxxxxxxxxxxCUAGACCUCAACUACCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCCCCCCCCCCCACAUUUUAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 399.23608398]
[71.19830322 393.22006226]
[59.48964310 383.69064331]
[50.78712082 371.35498047]
[45.73651886 357.12844849]
[44.71262741 342.06677246]
[47.79142761 327.28762817]
[54.74444962 313.88769531]
[65.05573273 302.86135864]
[77.96011353 295.02685547]
[92.50000000 290.96554565]
[92.50000000 275.96554565]
[92.50000000 260.96554565]
[92.50000000 245.96553040]
[92.50000000 230.96553040]
[92.50000000 215.96553040]
[92.50000000 200.96553040]
[92.50000000 185.96553040]
[92.50000000 170.96553040]
[92.50000000 155.96553040]
[92.50000000 140.96553040]
[84.76270294 128.23826599]
[92.50000000 114.43809509]
[83.73101807 100.16924286]
[92.20125580 85.72106171]
[91.88919830 70.72430420]
[91.57714081 55.72755432]
[88.25228119 47.14867401]
[91.41786194 40.41630936]
[91.41786194 25.41630745]
[78.07623291 20.33676147]
[67.29939270 11.01972771]
[60.37400055 -1.39536393]
[58.11759949 -15.40087509]
[60.78218079 -29.30402374]
[68.02619934 -41.43148804]
[78.95822144 -50.33078766]
[92.24655914 -54.94425201]
[92.55861664 -69.94100952]
[92.87066650 -84.93775940]
[93.18272400 -99.93451691]
[93.49478149 -114.93126678]
[93.80683899 -129.92802429]
[78.89407349 -131.64379883]
[64.20750427 -134.74850464]
[49.87620163 -139.21484375]
[36.02611542 -145.00358582]
[22.77895737 -152.06385803]
[10.25115108 -160.33358765]
[-1.44720793 -169.74012756]
[-12.21331120 -180.20079041]
[-21.95254326 -191.62364197]
[-30.57931519 -203.90832520]
[-38.01781082 -216.94685364]
[-44.20266342 -230.62464905]
[-49.07951355 -244.82151794]
[-52.60550308 -259.41265869]
[-54.74964905 -274.26989746]
[-55.49310303 -289.26260376]
[-54.82933426 -304.25906372]
[-52.76417542 -319.12747192]
[-49.31577682 -333.73718262]
[-44.51443863 -347.95974731]
[-38.40236664 -361.67022705]
[-31.03326416 -374.74810791]
[-22.47189903 -387.07846069]
[-12.79350758 -398.55291748]
[-2.08314681 -409.07064819]
[9.56505775 -418.53921509]
[22.04874039 -426.87539673]
[35.25819016 -434.00595093]
[49.07732010 -439.86822510]
[63.38468170 -444.41067505]
[78.05454254 -447.59338379]
[92.95798492 -449.38836670]
[107.96401978 -449.77990723]
[122.94078064 -448.76449585]
[137.75665283 -446.35107422]
[152.28141785 -442.56088257]
[166.38743591 -437.42721558]
[179.95074463 -430.99517822]
[192.85214233 -423.32128906]
[204.97824097 -414.47299194]
[216.22248840 -404.52807617]
[226.48605347 -393.57391357]
[235.67874146 -381.70678711]
[243.71977234 -369.03097534]
[250.53848267 -355.65786743]
[256.07492065 -341.70501709]
[260.28048706 -327.29501343]
[263.11813354 -312.55453491]
[264.56301880 -297.61306763]
[264.60238647 -282.60198975]
[263.23590088 -267.65316772]
[260.47555542 -252.89799500]
[256.34564209 -238.46614075]
[250.88246155 -224.48445129]
[244.13398743 -211.07577515]
[236.15954590 -198.35795593]
[227.02922058 -186.44277954]
[216.82324219 -175.43493652]
[205.63131714 -165.43118286]
[193.55177307 -156.51942444]
[180.69081116 -148.77798462]
[167.16142273 -142.27488708]
[153.08251953 -137.06730652]
[138.57783508 -133.20098877]
[123.77482605 -130.70989990]
[108.80358887 -129.61596680]
[108.49153900 -114.61920929]
[108.17948151 -99.62245941]
[107.86742401 -84.62570190]
[107.55536652 -69.62895203]
[107.24330902 -54.63219833]
[121.82631683 -48.50677109]
[132.97860718 -37.23604965]
[138.97868347 -22.51794815]
[138.88435364 -6.58564281]
[132.68054199 8.13124371]
[121.28611755 19.37716103]
[106.41786194 25.41630745]
[106.41786194 40.41630936]
[106.57389832 55.41549683]
[106.88595581 70.41224670]
[107.19801331 85.40900421]
[115.12266541 93.99886322]
[115.24423218 105.68522644]
[107.50000000 114.43809509]
[115.23729706 128.23826599]
[107.50000000 140.96553040]
[107.50000000 155.96553040]
[107.50000000 170.96553040]
[107.50000000 185.96553040]
[107.50000000 200.96553040]
[107.50000000 215.96553040]
[107.50000000 230.96553040]
[107.50000000 245.96553040]
[107.50000000 260.96554565]
[107.50000000 275.96554565]
[107.50000000 290.96554565]
[122.03988647 295.02685547]
[134.94427490 302.86135864]
[145.25555420 313.88769531]
[152.20857239 327.28762817]
[155.28736877 342.06677246]
[154.26348877 357.12844849]
[149.21287537 371.35498047]
[140.51036072 383.69064331]
[128.80169678 393.22006226]
[114.95575714 399.23608398]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[25 125]
[26 124]
[27 123]
[29 122]
[30 121]
[38 114]
[39 113]
[40 112]
[41 111]
[42 110]
[43 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
