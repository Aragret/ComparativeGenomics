%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCCCAACGGGGGGGGGGGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAAAACUCxxxxxxxxxxGAACGAAAAAUUCUAGGCUAUAUACAACUACGCAAAGGCCCCAACGUUGUCCCCCCCCCCAGGCCCCUACG\
) } def
/len { sequence length } bind def

/coor [
[68.64492035 352.71936035]
[56.76822281 343.43453979]
[47.45918655 331.57684326]
[41.25902939 317.83560181]
[38.52822495 303.00976562]
[39.42552948 287.96121216]
[43.89878464 273.56491089]
[51.68791580 260.65783691]
[62.34007645 249.99035645]
[75.23596191 242.18269348]
[89.62581635 237.68876648]
[88.70240021 222.71722412]
[87.77899170 207.74566650]
[86.85557556 192.77412415]
[85.93215942 177.80256653]
[85.00875092 162.83102417]
[84.08533478 147.85946655]
[83.16191864 132.88792419]
[71.47571564 123.48406219]
[56.65323257 125.78493500]
[41.83074951 128.08581543]
[27.00826645 130.38668823]
[12.18578529 132.68756104]
[-2.63669705 134.98843384]
[-17.45917892 137.28930664]
[-32.28166199 139.59017944]
[-47.10414505 141.89106750]
[-61.87625885 144.49578857]
[-76.59178162 147.40325928]
[-91.30730438 150.31072998]
[-106.02282715 153.21820068]
[-118.00326538 164.41647339]
[-133.61051941 159.38203430]
[-136.78919983 143.29389954]
[-124.26933289 132.70214844]
[-108.93029785 138.50268555]
[-94.21477509 135.59519958]
[-79.49925232 132.68772888]
[-64.78372955 129.78025818]
[-61.39994049 126.33074188]
[-55.79265594 125.00929260]
[-49.40501785 127.06858063]
[-34.58253479 124.76770020]
[-19.76005363 122.46682739]
[-4.93757200 120.16595459]
[9.88491058 117.86508179]
[24.70739174 115.56420135]
[39.52987289 113.26332855]
[54.35235596 110.96245575]
[69.17483521 108.66158295]
[72.67891693 87.51882172]
[88.05467987 74.61505890]
[106.76896667 74.82089233]
[114.66545105 62.06763458]
[115.35192108 46.26132965]
[128.63035583 39.51354980]
[136.52682495 26.76029015]
[133.12492371 11.55947399]
[141.31475830 -1.26165342]
[155.82737732 -4.41116858]
[163.72386169 -17.16442490]
[171.62034607 -29.91768265]
[159.80052185 -39.17807388]
[149.07116699 -49.68255997]
[139.56254578 -61.30362701]
[131.39006042 -73.90019989]
[124.65293884 -87.31938171]
[119.43295288 -101.39826202]
[115.79346466 -115.96594238]
[113.77867126 -130.84559631]
[113.41300964 -145.85656738]
[114.70093536 -160.81666565]
[117.62680054 -175.54426575]
[122.15509796 -189.86061096]
[128.23085022 -203.59190369]
[135.78031921 -216.57145691]
[144.71183777 -228.64172363]
[154.91700745 -239.65615845]
[166.27192688 -249.48106384]
[178.63877869 -257.99719238]
[191.86741638 -265.10113525]
[205.79727173 -270.70669556]
[220.25926208 -274.74578857]
[235.07780457 -277.16940308]
[250.07302856 -277.94812012]
[265.06289673 -277.07250977]
[279.86547852 -274.55313110]
[294.30102539 -270.42062378]
[308.19436646 -264.72515869]
[321.37683105 -257.53582764]
[333.68835449 -248.93995667]
[344.97952271 -239.04183960]
[355.11328125 -227.96166992]
[363.96658325 -215.83392334]
[371.43200684 -202.80584717]
[377.41885376 -189.03556824]
[381.85452271 -174.69024658]
[384.68511963 -159.94403076]
[385.87631226 -144.97592163]
[385.41363525 -129.96762085]
[383.30267334 -115.10131073]
[379.56912231 -100.55746460]
[374.25820923 -86.51261902]
[367.43447876 -73.13726807]
[359.18075562 -60.59378433]
[349.59719849 -49.03442764]
[338.80017090 -38.59951782]
[326.92074585 -29.41572571]
[314.10308838 -21.59453773]
[300.50280762 -15.23089123]
[286.28503418 -10.40203857]
[271.62231445 -7.16659498]
[256.69268799 -5.56383657]
[241.67732239 -5.61322021]
[226.75854492 -7.31414557]
[212.11743164 -10.64596558]
[197.93171692 -15.56823444]
[184.37361145 -22.02120018]
[176.47712708 -9.26794338]
[168.58064270 3.48531413]
[172.23014832 17.88033867]
[164.40365601 30.92644310]
[149.28009033 34.65677261]
[141.38360596 47.41003036]
[141.26194763 62.30413818]
[127.41870880 69.96411896]
[119.52222443 82.71737671]
[126.38842773 93.15294647]
[127.78495026 106.12217712]
[122.90494537 118.81301117]
[112.35747528 128.24479675]
[98.13346863 131.96450806]
[99.05688477 146.93605042]
[99.98030090 161.90760803]
[100.90370941 176.87915039]
[101.82712555 191.85070801]
[102.75054169 206.82225037]
[103.67395020 221.79380798]
[104.59736633 236.76535034]
[119.43041229 239.45687866]
[133.18801880 245.62060547]
[145.07034302 254.89820862]
[154.38656616 266.75027466]
[160.59506226 280.48773193]
[163.33485413 295.31195068]
[162.44667053 310.36102295]
[157.98214722 324.76000977]
[150.20083618 337.67181396]
[139.55514526 348.34576416]
[126.66400146 356.16122437]
[112.27687073 360.66387939]
[97.23020172 361.59194946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 50]
[20 49]
[21 48]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[28 39]
[29 38]
[30 37]
[31 36]
[53 127]
[54 126]
[56 124]
[57 123]
[60 120]
[61 119]
[62 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
