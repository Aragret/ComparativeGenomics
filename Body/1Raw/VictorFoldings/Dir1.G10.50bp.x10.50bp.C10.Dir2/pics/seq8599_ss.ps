%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCAUCAGGGGGGGGGGGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUAxxxxxxxxxxUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCCCCCCCCCCCAAAACAUCAG\
) } def
/len { sequence length } bind def

/coor [
[92.48873901 510.99905396]
[80.39380646 501.96493530]
[71.18566895 490.00195312]
[65.54763794 475.99783325]
[63.89809036 460.99179077]
[66.35943604 446.09735107]
[72.74901581 432.41979980]
[82.59269714 420.97406006]
[95.16000366 412.60952759]
[109.51836395 407.94689941]
[108.89438629 392.95986938]
[108.27040863 377.97286987]
[107.64643097 362.98583984]
[107.02245331 347.99884033]
[106.39847565 333.01181030]
[105.77449799 318.02481079]
[105.15052032 303.03778076]
[104.52654266 288.05078125]
[103.90256500 273.06375122]
[103.27858734 258.07675171]
[89.34186554 249.45855713]
[83.20507050 234.08631897]
[87.45944214 217.91900635]
[100.62629700 207.35084534]
[99.69066620 192.38005066]
[98.75504303 177.40925598]
[88.26798248 163.37281799]
[96.51338196 146.94134521]
[95.26650238 131.99325562]
[94.01963043 117.04517365]
[89.80799866 131.44177246]
[77.66504669 140.24794006]
[62.67239380 139.77844238]
[51.10422897 130.22975159]
[47.80163956 115.59783936]
[54.14670563 102.00592041]
[67.48412323 95.14200592]
[82.23348999 97.87913513]
[69.45613861 90.02171326]
[56.67877960 82.16428375]
[43.90142059 74.30686188]
[27.41421890 81.72206879]
[9.91836929 77.83907318]
[-1.67970264 64.38227844]
[-2.91649199 46.81702423]
[-16.00964737 39.49791718]
[-29.10280037 32.17881012]
[-44.86936951 35.14443588]
[-56.92368698 24.55798340]
[-56.01871490 8.54047394]
[-42.84866714 -0.62082821]
[-27.51648140 4.10184240]
[-21.78369522 19.08565712]
[-8.69054127 26.40476227]
[4.40261364 33.72386932]
[14.61256981 27.02331924]
[26.77790642 25.31470680]
[38.57692719 28.98656845]
[47.73113632 37.39460754]
[52.44519424 48.97381210]
[51.75884628 61.52950287]
[64.53620148 69.38693237]
[77.31356049 77.24435425]
[90.09091949 85.10178375]
[104.76744080 82.00345612]
[113.27853394 69.65188599]
[121.78962708 57.30031204]
[126.39518738 43.02485275]
[126.70724487 28.02809906]
[112.90889740 21.58406448]
[102.92941284 10.08059788]
[98.49779510 -4.48925495]
[100.38183594 -19.60117912]
[108.25513458 -32.63694382]
[120.75357819 -41.33802032]
[135.71174622 -44.19689941]
[150.53804016 -40.71825790]
[162.66371155 -31.50479507]
[169.98793030 -18.15279770]
[171.24169922 -2.97558117]
[166.20783997 11.39731121]
[155.75846863 22.47568893]
[141.70399475 28.34015656]
[141.39193726 43.33691025]
[155.17494202 49.25712967]
[168.95671082 55.17683411]
[179.61833191 44.62554550]
[190.27995300 34.07425690]
[200.94158936 23.52296448]
[196.96606445 8.68750477]
[200.95640564 -6.14397526]
[211.83920288 -16.98188210]
[226.68705750 -20.91087532]
[241.50595093 -16.87407112]
[252.30969238 -5.95735407]
[256.19213867 8.90273666]
[252.10888672 23.70890999]
[241.15837097 34.47838211]
[226.28617859 38.31421280]
[211.49287415 34.18458939]
[200.83125305 44.73588181]
[190.16961670 55.28717041]
[179.50799561 65.83846283]
[187.34997559 78.62530518]
[188.52891541 93.57890320]
[182.78759766 107.43665314]
[171.37867737 117.17505646]
[156.79135132 120.66935730]
[142.20832825 117.15717316]
[130.81135559 107.40480042]
[125.08702850 93.54002380]
[126.28430176 78.58787537]
[134.14118958 65.81140137]
[125.63010406 78.16297913]
[117.11901855 90.51454926]
[118.16342926 105.11042786]
[108.96772003 115.79830170]
[110.21459198 130.74638367]
[111.46146393 145.69447327]
[120.81080627 154.64118958]
[121.50863647 167.16044617]
[113.72583008 176.47363281]
[114.66146088 191.44442749]
[115.59709167 206.41522217]
[127.77877808 212.94250488]
[135.07235718 224.55357361]
[135.65486145 238.14442444]
[129.48072815 250.14405823]
[118.26560211 257.45275879]
[118.88957977 272.43978882]
[119.51355743 287.42678833]
[120.13753510 302.41381836]
[120.76151276 317.40081787]
[121.38549042 332.38784790]
[122.00946808 347.37484741]
[122.63344574 362.36187744]
[123.25742340 377.34887695]
[123.88140106 392.33590698]
[124.50537872 407.32293701]
[139.20162964 410.77587891]
[152.42074585 418.06680298]
[163.18177795 428.65466309]
[170.68620300 441.75375366]
[174.37712097 456.39205933]
[173.98066711 471.48327637]
[169.52622986 485.90759277]
[161.34439087 498.59460449]
[150.04226685 508.60281372]
[136.45857239 515.18963623]
[121.60129547 517.86614990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[24 124]
[25 123]
[26 122]
[28 119]
[29 118]
[30 117]
[38 64]
[39 63]
[40 62]
[41 61]
[45 55]
[46 54]
[47 53]
[65 115]
[66 114]
[67 113]
[68 84]
[69 83]
[86 103]
[87 102]
[88 101]
[89 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
