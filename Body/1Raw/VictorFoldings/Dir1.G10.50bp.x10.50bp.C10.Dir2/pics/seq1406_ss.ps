%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAAACCUCAGGGGGGGGGGACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAxxxxxxxxxxACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCUACCCCCCCCCCCCUAAAACUCA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 381.24505615]
[71.01555634 375.69204712]
[58.81560135 366.82571411]
[49.20452881 355.20339966]
[42.78650284 341.55569458]
[39.96496582 326.74050903]
[40.91728210 311.68914795]
[45.58358765 297.34771729]
[53.67055511 284.61776733]
[64.66983032 274.29949951]
[77.88998413 267.04150391]
[92.50000000 263.30007935]
[92.50000000 248.30007935]
[92.50000000 233.30007935]
[92.50000000 218.30007935]
[92.50000000 203.30007935]
[92.50000000 188.30007935]
[92.50000000 173.30007935]
[92.50000000 158.30007935]
[92.50000000 143.30007935]
[92.50000000 128.30007935]
[83.72351837 127.07308197]
[75.13127136 123.04006958]
[67.63169861 116.23904419]
[53.04795074 119.74820709]
[38.46419907 123.25737762]
[23.88045120 126.76654053]
[19.60285568 141.51774597]
[8.51164341 152.14227295]
[-6.40970325 155.78218079]
[-21.14741707 151.45837402]
[-31.73712730 140.33390808]
[-35.33025360 125.40122986]
[-30.96026802 110.67713928]
[-19.80266953 100.12235260]
[-4.85879755 96.57604980]
[9.85152054 100.99216461]
[20.37128448 112.18279266]
[34.95503235 108.67362976]
[49.53878403 105.16445923]
[64.12253571 101.65529633]
[66.57546234 86.85721588]
[53.90394592 78.83021545]
[41.23242950 70.80322266]
[28.56091309 62.77622223]
[15.88939667 54.74922562]
[3.11526299 56.80475235]
[-7.28758669 49.80817413]
[-10.01890182 37.98437881]
[-22.52293777 29.69890594]
[-38.91537857 29.22996712]
[-46.46632385 14.67265892]
[-37.40801239 1.00229073]
[-21.05885315 2.28176570]
[-14.23746300 17.19487000]
[-1.73342729 25.48034477]
[15.78894043 25.58604050]
[23.91639328 42.07770920]
[36.58790970 50.10470581]
[49.25942612 58.13170242]
[61.93094254 66.15869904]
[74.60245514 74.18569946]
[85.72135162 68.61616516]
[97.49105835 67.35102081]
[108.37880707 70.14223480]
[117.10306549 76.23806000]
[128.69210815 66.71472168]
[120.36248779 54.22488785]
[113.31786346 40.96774673]
[107.62824249 27.07505417]
[103.35018158 12.68489170]
[100.52619934 -2.05972528]
[99.18435669 -17.01225281]
[99.33798981 -32.02408218]
[100.98558044 -46.94601440]
[104.11074829 -61.62974548]
[108.68242645 -75.92933655]
[114.65518951 -89.70266724]
[121.96967316 -102.81285858]
[130.55317688 -115.12959290]
[140.32038879 -126.53047943]
[151.17425537 -136.90219116]
[163.00686646 -146.14164734]
[175.70065308 -154.15702820]
[189.12945557 -160.86868286]
[203.15979004 -166.20986938]
[217.65220642 -170.12753296]
[232.46270752 -172.58273315]
[247.44406128 -173.55107117]
[262.44738770 -173.02290344]
[277.32354736 -171.00349426]
[291.92474365 -167.51290894]
[306.10580444 -162.58584595]
[319.72579956 -156.27127075]
[332.64941406 -148.63194275]
[344.74813843 -139.74378967]
[355.90176392 -129.69514465]
[365.99942017 -118.58586884]
[374.94076538 -106.52639008]
[382.63690186 -93.63655090]
[389.01138306 -80.04447174]
[394.00082397 -65.88523865]
[397.55566406 -51.29956436]
[399.64053345 -36.43242264]
[400.23477173 -21.43157196]
[399.33239746 -6.44610119]
[396.94241333 8.37505436]
[393.08859253 22.88459206]
[387.80923462 36.93830490]
[381.15676880 50.39651489]
[373.19735718 63.12546921]
[364.01007080 74.99864960]
[353.68624878 85.89806366]
[342.32849121 95.71538544]
[330.04965210 104.35302734]
[316.97180176 111.72515869]
[303.22488403 117.75849915]
[288.94555664 122.39309692]
[274.27572632 125.58287811]
[259.36120605 127.29615021]
[244.35018921 127.51587677]
[229.39190674 126.23987579]
[214.63499451 123.48083496]
[200.22613525 119.26616669]
[186.30853271 113.63777161]
[173.02050781 106.65158081]
[160.49412537 98.37702179]
[148.85386658 88.89634705]
[138.21545410 78.30377197]
[126.62640381 87.82711029]
[126.47013855 112.50904846]
[107.50000000 128.30007935]
[107.50000000 143.30007935]
[107.50000000 158.30007935]
[107.50000000 173.30007935]
[107.50000000 188.30007935]
[107.50000000 203.30007935]
[107.50000000 218.30007935]
[107.50000000 233.30007935]
[107.50000000 248.30007935]
[107.50000000 263.30007935]
[122.11001587 267.04150391]
[135.33016968 274.29949951]
[146.32945251 284.61776733]
[154.41641235 297.34771729]
[159.08271790 311.68914795]
[160.03503418 326.74050903]
[157.21350098 341.55569458]
[150.79547119 355.20339966]
[141.18440247 366.82571411]
[128.98443604 375.69204712]
[114.96250153 381.24505615]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 41]
[25 40]
[26 39]
[27 38]
[42 62]
[43 61]
[44 60]
[45 59]
[46 58]
[49 56]
[50 55]
[66 130]
[67 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
