%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAACAUACCCGGGGGGGGGGAUGGCCAACCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUxxxxxxxxxxUAUUUUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGCCCCCCCCCCAACAGCAUACCC\
) } def
/len { sequence length } bind def

/coor [
[90.22228241 380.78512573]
[76.06168365 375.63012695]
[63.47193909 367.34793091]
[53.13199997 356.38513184]
[45.59948730 343.33300781]
[41.28062439 328.89541626]
[40.40831375 313.85095215]
[43.02960587 299.01095581]
[49.00313187 285.17572021]
[58.00675201 273.09136963]
[69.55490875 263.40960693]
[83.02482605 256.65252686]
[97.69008636 253.18455505]
[97.69008636 238.18455505]
[97.69008636 223.18455505]
[97.69008636 208.18455505]
[97.69008636 193.18455505]
[97.69008636 178.18455505]
[97.69008636 163.18455505]
[97.69008636 148.18455505]
[97.69008636 133.18455505]
[97.69008636 118.18455505]
[87.02987671 107.63182831]
[72.03064728 107.78384399]
[57.03141403 107.93585205]
[42.03218460 108.08786011]
[38.58116913 122.76280212]
[31.71786499 136.18511963]
[21.84129524 147.57444763]
[9.52566910 156.26863098]
[-4.51299620 161.76219177]
[-19.45851326 163.73576355]
[-34.44196701 162.07458496]
[-48.59224319 156.87524414]
[-61.08665848 148.44001770]
[-71.19880676 137.25932312]
[-78.34078217 123.98320007]
[-82.09735870 109.38348389]
[-82.25012970 94.30899811]
[-78.79022217 79.63615417]
[-71.91877747 66.21800232]
[-62.03530502 54.83466339]
[-49.71441269 46.14794922]
[-35.67241669 40.66289520]
[-20.72570610 38.69838715]
[-5.74326134 40.36864853]
[8.40385914 45.57656860]
[20.89315987 54.01936722]
[30.99852753 65.20618439]
[38.13245010 78.48664093]
[41.88017273 93.08863068]
[56.87940216 92.93662262]
[71.87863159 92.78461456]
[86.87786102 92.63259888]
[73.94530487 85.03332520]
[69.44712830 70.72367096]
[75.70574188 57.09173203]
[89.48982239 51.17571640]
[103.68260956 56.03007507]
[110.95633698 69.14849091]
[107.55441284 83.75959778]
[117.99856567 72.99298859]
[121.75779724 64.60196686]
[128.76516724 62.11671829]
[139.42536926 51.56399918]
[150.08558655 41.01127625]
[150.94168091 28.10306740]
[160.08726501 19.53083420]
[172.22059631 19.51333237]
[183.09249878 9.17882824]
[193.96438599 -1.15567565]
[179.33494568 2.15782189]
[164.33924866 1.79805565]
[149.88552856 -2.21318531]
[136.84916687 -9.63296223]
[126.01969147 -20.01190186]
[118.05297852 -32.72140884]
[113.43154144 -46.99173737]
[112.43526459 -61.95861435]
[115.12448883 -76.71558380]
[121.33634949 -90.36888885]
[130.69462585 -102.09162903]
[142.63253784 -111.17382812]
[156.42706299 -117.06542206]
[171.24276733 -119.40959930]
[186.18231201 -118.06436920]
[200.34092712 -113.11122131]
[212.86108398 -104.85012817]
[222.98451233 -93.78142548]
[230.09809875 -80.57547760]
[233.77099609 -66.03210449]
[233.78077698 -51.03210449]
[230.12683105 -36.48395538]
[223.03045654 -23.26874924]
[212.91868591 -12.18448353]
[227.27554321 -16.52966118]
[241.63240051 -20.87483788]
[255.98925781 -25.22001648]
[258.92495728 -28.59956741]
[262.44079590 -30.62840462]
[266.02862549 -31.29182053]
[269.22970581 -30.74570274]
[271.68737793 -29.28454018]
[286.34896851 -32.45275879]
[289.42358398 -47.36807632]
[298.30426025 -59.73955154]
[311.45239258 -67.42375946]
[326.58993530 -69.08935547]
[341.09426880 -64.44776917]
[352.45239258 -54.30318451]
[358.69647217 -40.41321182]
[358.74468994 -25.18437195]
[352.58865356 -11.25515270]
[341.29495239 -1.03887773]
[326.82028198 3.69442320]
[311.67248535 2.12467694]
[298.47601318 -5.47614908]
[289.51718140 -17.79116440]
[274.85559082 -14.62294388]
[260.33444214 -10.86315632]
[245.97758484 -6.51797867]
[231.62072754 -2.17280078]
[217.26385498 2.17237687]
[204.29888916 9.71621609]
[193.42700195 20.05072021]
[182.55509949 30.38522339]
[178.53198242 47.44108582]
[160.63830566 51.67148590]
[149.97810364 62.22420883]
[139.31788635 72.77693176]
[128.76516724 83.43714142]
[118.32101440 94.20374298]
[112.69008636 118.18455505]
[112.69008636 133.18455505]
[112.69008636 148.18455505]
[112.69008636 163.18455505]
[112.69008636 178.18455505]
[112.69008636 193.18455505]
[112.69008636 208.18455505]
[112.69008636 223.18455505]
[112.69008636 238.18455505]
[112.69008636 253.18455505]
[127.35534668 256.65252686]
[140.82525635 263.40960693]
[152.37341309 273.09136963]
[161.37702942 285.17572021]
[167.35055542 299.01095581]
[169.97184753 313.85095215]
[169.09954834 328.89541626]
[164.78067017 343.33300781]
[157.24816895 356.38513184]
[146.90823364 367.34793091]
[134.31848145 375.63012695]
[120.15788269 380.78512573]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 54]
[24 53]
[25 52]
[26 51]
[61 132]
[62 131]
[64 130]
[65 129]
[66 128]
[69 126]
[70 125]
[71 124]
[95 123]
[96 122]
[97 121]
[98 120]
[103 119]
[104 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
