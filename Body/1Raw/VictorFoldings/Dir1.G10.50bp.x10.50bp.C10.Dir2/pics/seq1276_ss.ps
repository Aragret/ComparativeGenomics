%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUCACCUGGGGGGGGGGGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAAGUGGCUUUxxxxxxxxxxGAAGCCCCGGCAGGUUUGAAGCUGCUUCUUCGAAUUUGCAAUUCAAUAUGCCCCCCCCCCAAAAUCACCU\
) } def
/len { sequence length } bind def

/coor [
[78.93710327 361.63751221]
[65.71690369 354.36505127]
[54.83010101 343.91806030]
[47.01897049 331.00881958]
[42.81608963 316.51748657]
[42.50801849 301.43215942]
[46.11575699 286.78134155]
[53.39332962 273.56393433]
[63.84453964 262.68118286]
[76.75679779 254.87503052]
[91.24974060 250.67773438]
[90.93768311 235.68098450]
[90.62562561 220.68423462]
[90.31356812 205.68748474]
[90.00151062 190.69071960]
[89.68945312 175.69396973]
[89.37740326 160.69721985]
[89.06534576 145.70046997]
[88.75328827 130.70370483]
[76.22732544 122.45142365]
[62.32476807 128.08337402]
[48.42221451 133.71533203]
[34.51965714 139.34729004]
[20.61710167 144.97924805]
[6.71454525 150.61120605]
[0.78434676 165.26071167]
[-13.80009842 171.34919739]
[-28.38609695 165.26443481]
[-34.32003403 150.61643982]
[-28.08141136 136.09559631]
[-13.37149239 130.31684875]
[1.08258879 136.70864868]
[14.98514462 131.07669067]
[28.88770103 125.44473267]
[42.79025650 119.81277466]
[56.69281387 114.18082428]
[70.59536743 108.54886627]
[78.30763245 83.97599030]
[99.64064789 76.68688202]
[104.24620819 62.41142273]
[108.85177612 48.13596344]
[113.45733643 33.86050415]
[118.06290436 19.58504295]
[108.77778625 3.12947011]
[114.30982208 -14.60451031]
[130.73287964 -22.58450317]
[134.74063110 -37.03919220]
[138.74836731 -51.49388123]
[142.75610352 -65.94857025]
[129.02363586 -59.91373062]
[114.97734070 -65.17695618]
[108.59205627 -78.75002289]
[113.49305725 -92.92677307]
[126.89778137 -99.65829468]
[141.19563293 -95.12274170]
[148.26913452 -81.89366150]
[146.44276428 -97.60909271]
[158.48445129 -106.37533569]
[164.26071167 -120.21855927]
[170.03698730 -134.06176758]
[175.81326294 -147.90499878]
[163.09426880 -160.32543945]
[158.60945129 -178.97123718]
[165.15675354 -198.48133850]
[182.13394165 -212.44598389]
[182.13394165 -227.44598389]
[182.13394165 -242.44598389]
[182.13394165 -257.44598389]
[182.13394165 -272.44598389]
[168.36007690 -279.02194214]
[158.81015015 -290.92831421]
[155.38031006 -305.80108643]
[158.75155640 -320.68722534]
[168.25451660 -332.63110352]
[182.00238037 -339.26126099]
[197.26550293 -339.26126099]
[211.01336670 -332.63110352]
[220.51632690 -320.68722534]
[223.88757324 -305.80108643]
[220.45773315 -290.92831421]
[210.90780640 -279.02194214]
[197.13394165 -272.44598389]
[197.13394165 -257.44598389]
[197.13394165 -242.44598389]
[197.13394165 -227.44598389]
[197.13394165 -212.44598389]
[203.86192322 -209.13174438]
[216.33033752 -217.47071838]
[217.31788635 -202.50323486]
[224.04586792 -199.18899536]
[235.93824768 -208.33071899]
[247.83062744 -217.47245789]
[259.72302246 -226.61419678]
[265.94863892 -241.15902710]
[280.75463867 -242.78131104]
[286.51370239 -258.13595581]
[302.73294067 -260.55853271]
[312.72735596 -247.55685425]
[306.21560669 -232.50598145]
[289.89636230 -230.88893127]
[284.52136230 -216.99798584]
[268.86474609 -214.72181702]
[256.97238159 -205.58007812]
[245.07998657 -196.43833923]
[233.18760681 -187.29661560]
[232.67848206 -166.51907349]
[222.46678162 -149.95440674]
[206.45750427 -141.43182373]
[189.65647888 -142.12872314]
[183.88020325 -128.28550720]
[178.10394287 -114.44228363]
[172.32766724 -100.59906769]
[174.56719971 -85.87378693]
[162.11235046 -76.11738586]
[157.21080017 -61.94083023]
[153.20304871 -47.48614120]
[149.19531250 -33.03145218]
[145.18757629 -18.57676315]
[152.86758423 -10.03815460]
[155.47016907 1.27087998]
[152.22860718 12.53880501]
[143.84422302 20.90604973]
[132.33836365 24.19060707]
[127.73280334 38.46606827]
[123.12723541 52.74152756]
[118.52166748 67.01699066]
[113.91610718 81.29244995]
[123.73308563 91.70040131]
[126.07363892 106.89151001]
[118.93498230 121.69451141]
[103.75003815 130.39164734]
[104.06209564 145.38841248]
[104.37415314 160.38516235]
[104.68621063 175.38191223]
[104.99826813 190.37866211]
[105.31032562 205.37542725]
[105.62237549 220.37217712]
[105.93443298 235.36892700]
[106.24649048 250.36567688]
[120.90148163 253.95645142]
[134.12728882 261.21871948]
[145.02215576 271.65731812]
[152.84326172 284.56051636]
[157.05732727 299.04858398]
[157.37704468 314.13366699]
[153.78062439 328.78729248]
[146.51325989 342.01028442]
[136.07046509 352.90112305]
[123.16423035 360.71722412]
[108.67453766 364.92572021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[39 127]
[40 126]
[41 125]
[42 124]
[43 123]
[46 118]
[47 117]
[48 116]
[49 115]
[56 114]
[58 112]
[59 111]
[60 110]
[61 109]
[65 86]
[66 85]
[67 84]
[68 83]
[69 82]
[90 105]
[91 104]
[92 103]
[93 102]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
