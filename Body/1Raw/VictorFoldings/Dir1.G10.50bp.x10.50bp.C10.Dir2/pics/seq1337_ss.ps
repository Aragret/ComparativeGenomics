%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAGCUAAGGGGGGGGGGGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACCUCAACAxxxxxxxxxxAGCUAAGCCCUUACUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUCCCCCCCCCCAACAGCUAAG\
) } def
/len { sequence length } bind def

/coor [
[72.55875397 425.33325195]
[58.71281433 419.31719971]
[47.00415421 409.78778076]
[38.30162811 397.45211792]
[33.25102615 383.22561646]
[32.22713470 368.16390991]
[35.30593491 353.38476562]
[42.25895691 339.98483276]
[52.57024002 328.95849609]
[65.47462463 321.12399292]
[80.01451111 317.06268311]
[80.01451111 302.06268311]
[80.01451111 287.06268311]
[80.01451111 272.06268311]
[80.01451111 257.06268311]
[80.01451111 242.06268311]
[80.01451111 227.06268311]
[80.01451111 212.06268311]
[80.01451111 197.06268311]
[80.01451111 182.06268311]
[80.01451111 167.06268311]
[67.31958008 159.07276917]
[53.79538727 165.56092834]
[40.27119827 172.04908752]
[26.74700928 178.53726196]
[15.08155632 190.83984375]
[0.03044439 183.03598022]
[3.36277175 166.41273499]
[20.25884438 165.01307678]
[33.78303528 158.52490234]
[47.30722427 152.03674316]
[60.83141327 145.54856873]
[59.74299622 138.12797546]
[57.56615829 123.28676605]
[56.47774124 115.86616516]
[41.65998077 113.53505707]
[26.84222412 111.20395660]
[15.97714901 122.28230286]
[0.66987634 124.82534027]
[-13.19363594 117.85520935]
[-20.28258324 104.05207825]
[-17.87112236 88.72352600]
[-6.88650894 77.76370239]
[8.44745064 75.38687134]
[22.23453331 82.50697327]
[29.17332840 96.38619995]
[43.99108505 98.71730042]
[58.80884552 101.04840851]
[69.60121918 83.28501129]
[85.51560974 75.82993317]
[81.50786591 61.37524414]
[77.50012970 46.92055511]
[73.49238586 32.46586609]
[69.48464966 18.01117706]
[65.47690582 3.55648947]
[61.46916580 -10.89819908]
[46.41046524 -10.32179451]
[31.62486267 -13.23429489]
[17.90972710 -19.47863197]
[6.00469732 -28.71805763]
[-3.44820213 -40.45429993]
[-9.93918896 -54.05444336]
[-13.11821175 -68.78504181]
[-12.81382942 -83.85169220]
[-9.04245853 -98.44187927]
[-2.00748277 -111.76876068]
[7.91170979 -123.11364746]
[20.18018913 -131.86471558]
[34.13633347 -137.55001831]
[49.02750397 -139.86297607]
[64.05063629 -138.67884827]
[78.39555359 -134.06149292]
[91.28865814 -126.25991821]
[102.03463745 -115.69484711]
[110.05396271 -102.93604279]
[114.91418457 -88.67157745]
[116.35317993 -73.67070770]
[114.29335022 -58.74242020]
[108.84577942 -44.69177246]
[100.30424500 -32.27650070]
[89.12939453 -22.16614151]
[75.92385864 -14.90593910]
[79.93159485 -0.45125091]
[83.93933868 14.00343704]
[87.94707489 28.45812607]
[91.95481873 42.91281509]
[95.96255493 57.36750412]
[99.97029877 71.82218933]
[117.62051392 74.75875092]
[131.35432434 88.52405548]
[134.78750610 109.24039459]
[124.88617706 129.50547791]
[103.71085358 141.03706360]
[118.64516449 139.63475037]
[133.57946777 138.23245239]
[148.51377869 136.83013916]
[153.20593262 120.68299103]
[163.69560242 107.58778381]
[178.36502075 99.51937103]
[194.96884155 97.68076324]
[210.97781372 102.32387543]
[223.96411133 112.71539307]
[231.96943665 127.25247955]
[246.83248901 125.23014069]
[261.69552612 123.20780945]
[276.55856323 121.18547058]
[284.74981689 107.86490631]
[299.60324097 102.97507477]
[314.10546875 108.82479858]
[321.40899658 122.65202332]
[318.06536865 137.92794800]
[305.65328979 147.43975830]
[290.03338623 146.69627380]
[278.58090210 136.04852295]
[263.71786499 138.07084656]
[248.85481262 140.09318542]
[233.99177551 142.11552429]
[231.42218018 155.19136047]
[224.92167664 166.85041809]
[215.11590576 175.94151306]
[202.95765686 181.56198120]
[189.63429260 183.14736938]
[176.45178223 180.52803040]
[164.70671082 173.94715881]
[155.55873108 164.03833008]
[149.91607666 151.76445007]
[134.98176575 153.16676331]
[120.04746246 154.56906128]
[105.11315918 155.97135925]
[95.01451111 167.06268311]
[95.01451111 182.06268311]
[95.01451111 197.06268311]
[95.01451111 212.06268311]
[95.01451111 227.06268311]
[95.01451111 242.06268311]
[95.01451111 257.06268311]
[95.01451111 272.06268311]
[95.01451111 287.06268311]
[95.01451111 302.06268311]
[95.01451111 317.06268311]
[109.55439758 321.12399292]
[122.45877838 328.95849609]
[132.77006531 339.98483276]
[139.72308350 353.38476562]
[142.80187988 368.16390991]
[141.77798462 383.22561646]
[136.72738647 397.45211792]
[128.02485657 409.78778076]
[116.31620026 419.31719971]
[102.47026062 425.33325195]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 32]
[23 31]
[24 30]
[25 29]
[35 48]
[36 47]
[37 46]
[50 88]
[51 87]
[52 86]
[53 85]
[54 84]
[55 83]
[56 82]
[93 129]
[94 128]
[95 127]
[96 126]
[103 117]
[104 116]
[105 115]
[106 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
