%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGCAAAUCGGGGGGGGGGAGCCACUUUAAUUAAGCUAAGCCCUUACUAGACCAAUGGGACUUAAACCCxxxxxxxxxxGAUUUAUCCUACACUCCAACUCAUGAGACCCACAACAAAUAGCCCUUCUACCCCCCCCCCAACGCUAAUC\
) } def
/len { sequence length } bind def

/coor [
[82.79659271 370.12854004]
[68.95065308 364.11251831]
[57.24199295 354.58309937]
[48.53946686 342.24743652]
[43.48886490 328.02090454]
[42.46497345 312.95922852]
[45.54377365 298.18008423]
[52.49679565 284.78015137]
[62.80807877 273.75381470]
[75.71246338 265.91931152]
[90.25234985 261.85800171]
[90.25234985 246.85798645]
[90.25234985 231.85798645]
[90.25234985 216.85798645]
[90.25234985 201.85798645]
[90.25234985 186.85798645]
[90.25234985 171.85798645]
[90.25234985 156.85798645]
[90.25234985 141.85798645]
[90.25234985 126.85798645]
[77.98998260 118.21887207]
[63.86517715 123.26763153]
[49.74037552 128.31639099]
[48.18415451 143.49995422]
[40.18682861 156.50016785]
[27.33627129 164.73582458]
[12.18396950 166.57171631]
[-2.26157594 161.64332581]
[-13.13219166 150.92921448]
[-18.26950836 136.55664062]
[-16.65350914 121.37931061]
[-8.60505199 108.41069031]
[4.27783775 100.22570801]
[19.43725204 98.44950104]
[33.86327744 103.43473053]
[44.69161606 114.19158173]
[58.81642151 109.14282990]
[72.94122314 104.09407043]
[82.20394135 85.19548798]
[99.37821960 81.07908630]
[104.86524963 67.11869812]
[92.12528992 59.12309265]
[81.07446289 48.92528152]
[72.08811951 36.87364197]
[65.47114563 23.37949371]
[61.44756699 8.90305042]
[60.15301132 -6.06227160]
[61.63010025 -21.00667381]
[65.82707214 -35.42133713]
[72.59958649 -48.81575775]
[81.71568298 -60.73442078]
[92.86373138 -70.77230835]
[105.66308594 -78.58863831]
[119.67706299 -83.91847992]
[134.42788696 -86.58166504]
[149.41291809 -86.48895264]
[164.12182617 -83.64495087]
[169.60885620 -97.60533905]
[175.09588623 -111.56573486]
[180.58291626 -125.52612305]
[178.42999268 -141.20016479]
[190.28671265 -150.21501160]
[195.77374268 -164.17541504]
[198.41261292 -178.94146729]
[198.10055542 -193.93821716]
[197.78849792 -208.93496704]
[197.47644043 -223.93173218]
[183.20259094 -229.09136963]
[171.75907898 -239.06184387]
[164.69354248 -252.49473572]
[162.96151733 -267.57336426]
[166.79727173 -282.25842285]
[175.68203735 -294.56393433]
[188.41421509 -302.82565308]
[203.27189636 -305.92623901]
[218.24569702 -303.44638062]
[231.31054688 -295.72146606]
[240.69950867 -283.79620361]
[245.14280701 -269.28338623]
[244.03953552 -254.14578247]
[237.53889465 -240.43060303]
[226.52005005 -229.99272156]
[212.47319031 -224.24377441]
[212.78524780 -209.24702454]
[213.09730530 -194.25027466]
[213.40936279 -179.25352478]
[220.97741699 -192.20437622]
[231.96998596 -202.41043091]
[245.44602966 -208.99798584]
[260.25195312 -211.40312195]
[275.12026978 -209.41995239]
[288.77819824 -203.21821594]
[300.05651855 -193.32885742]
[307.98974609 -180.59843445]
[311.89877319 -166.11672974]
[311.44894409 -151.12347412]
[306.67880249 -136.90217590]
[297.99664307 -124.67022705]
[286.14575195 -115.47476959]
[272.14062500 -110.10297394]
[257.18014526 -109.01470184]
[242.54504395 -112.30311584]
[229.48814392 -119.68669891]
[219.12719727 -130.53338623]
[212.34915161 -143.91464233]
[209.73413086 -158.68838501]
[204.24710083 -144.72798157]
[206.79248047 -130.05249023]
[194.54330444 -120.03909302]
[189.05627441 -106.07869720]
[183.56924438 -92.11830902]
[178.08221436 -78.15792084]
[190.79115295 -70.22552490]
[201.82899475 -60.09014130]
[210.81880188 -48.09586716]
[217.45324707 -34.65031433]
[221.50508118 -20.21074677]
[222.83486938 -5.26853323]
[221.39590454 9.66756725]
[217.23568726 24.08873749]
[210.49453735 37.50342941]
[201.40069580 49.45412445]
[190.26272583 59.53292847]
[177.45896912 67.39550781]
[163.42468262 72.77282715]
[148.63734436 75.48039246]
[133.60029602 75.42454529]
[118.82563782 72.60572815]
[113.33860779 86.56611633]
[122.15326691 106.71610260]
[105.25234985 126.85798645]
[105.25234985 141.85798645]
[105.25234985 156.85798645]
[105.25234985 171.85798645]
[105.25234985 186.85798645]
[105.25234985 201.85798645]
[105.25234985 216.85798645]
[105.25234985 231.85798645]
[105.25234985 246.85798645]
[105.25234985 261.85800171]
[119.79223633 265.91931152]
[132.69660950 273.75381470]
[143.00790405 284.78015137]
[149.96092224 298.18008423]
[153.03971863 312.95922852]
[152.01582336 328.02090454]
[146.96522522 342.24743652]
[138.26271057 354.58309937]
[126.55403900 364.11251831]
[112.70809937 370.12854004]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 38]
[22 37]
[23 36]
[40 129]
[41 128]
[57 112]
[58 111]
[59 110]
[60 109]
[62 107]
[63 106]
[64 86]
[65 85]
[66 84]
[67 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
