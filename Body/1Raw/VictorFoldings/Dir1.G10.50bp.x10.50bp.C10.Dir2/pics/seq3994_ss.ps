%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUAGCAGAGGGGGGGGGGGACCAACCGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACUAGUCUxxxxxxxxxxCUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCCCCCCCCCCCUAGCAGA\
) } def
/len { sequence length } bind def

/coor [
[126.86724091 450.68051147]
[113.64704132 443.40805054]
[102.76023865 432.96102905]
[94.94911194 420.05178833]
[90.74623108 405.56048584]
[90.43815613 390.47512817]
[94.04589844 375.82431030]
[101.32347107 362.60693359]
[111.77467346 351.72415161]
[124.68693542 343.91799927]
[139.17987061 339.72073364]
[138.86781311 324.72396851]
[138.55575562 309.72720337]
[138.24371338 294.73046875]
[137.93165588 279.73370361]
[137.61959839 264.73693848]
[137.30754089 249.74020386]
[136.99548340 234.74343872]
[136.68342590 219.74668884]
[136.37136841 204.74993896]
[136.05931091 189.75318909]
[122.01894379 180.55725098]
[116.40573883 164.49845886]
[121.80245209 148.12570190]
[113.03623962 135.95387268]
[104.27003479 123.78203583]
[95.50382996 111.61019897]
[83.24145508 102.97108459]
[68.82923889 98.81319427]
[53.42511749 102.42199707]
[43.34129333 91.45998383]
[28.92907524 87.30210114]
[14.47438717 83.29435730]
[-0.02120914 79.43720245]
[-14.51680565 75.58003998]
[-29.01240158 71.72287750]
[-43.50799942 67.86572266]
[-58.00359726 64.00856018]
[-72.49919128 60.15140152]
[-86.99478912 56.29424286]
[-99.68388367 65.43321228]
[-115.27481079 64.22613525]
[-126.40600586 53.24293900]
[-127.82166290 37.66956711]
[-118.85334778 24.85928535]
[-103.73562622 20.86071396]
[-89.60662842 27.56185913]
[-83.13762665 41.79864502]
[-68.64203644 45.65580368]
[-54.14643478 49.51296616]
[-39.65084076 53.37012482]
[-25.15524292 57.22728348]
[-10.65964603 61.08444214]
[3.83595037 64.94160461]
[18.33154678 68.79875946]
[25.65153503 67.47081757]
[33.08696365 72.88988495]
[47.49917984 77.04776764]
[61.87244797 73.14156342]
[72.98712921 84.40097809]
[87.39934540 88.55886841]
[93.61906433 84.36779022]
[92.57960510 69.40385437]
[106.05850983 75.98564911]
[112.27822876 71.79457855]
[113.83580780 56.87566757]
[115.39338684 41.95675659]
[116.95096588 27.03784180]
[118.35327148 12.10353470]
[119.60015106 -2.84455204]
[106.07247162 -9.77783585]
[96.23159027 -21.36340904]
[91.57817078 -35.83455658]
[92.82181549 -50.98453140]
[99.77288818 -64.50307465]
[111.37139893 -74.32870483]
[125.84865570 -78.96308899]
[140.99697876 -77.69951630]
[154.50637817 -70.73065948]
[164.31674194 -59.11923981]
[168.93206787 -44.63589859]
[167.64857483 -29.48924637]
[160.66195679 -15.98903751]
[149.03762817 -6.19395494]
[134.54823303 -1.59767747]
[133.30136108 13.35040951]
[135.89636230 20.32261467]
[131.86988831 28.59542274]
[130.31230164 43.51433563]
[128.75471497 58.43324661]
[127.19713593 73.35215759]
[125.90962982 89.09079742]
[118.14478302 99.60364532]
[107.67566681 102.84399414]
[116.44187164 115.01583099]
[125.20807648 127.18766785]
[133.97428894 139.35949707]
[154.09507751 140.74195862]
[167.25000000 155.49655151]
[182.21025085 154.40524292]
[197.17050171 153.31393433]
[205.56491089 149.54754639]
[212.45275879 152.35882568]
[227.43246460 151.57899475]
[242.41218567 150.79914856]
[247.83525085 136.56854248]
[258.58218384 125.77857208]
[272.79101562 120.29867554]
[287.99996948 121.07827759]
[301.57400513 127.98230743]
[311.16131592 139.81459045]
[315.10089111 154.52511597]
[312.71014404 169.56520081]
[304.40328979 182.32907104]
[291.61953735 190.60527039]
[276.57376099 192.95994568]
[261.87274170 188.98509216]
[250.06347656 179.36941528]
[243.19203186 165.77885437]
[228.21231079 166.55870056]
[213.23260498 167.33854675]
[198.26181030 168.27416992]
[183.30155945 169.36549377]
[168.34130859 170.45680237]
[166.63302612 175.53971863]
[163.91571045 180.16253662]
[160.30557251 184.12754822]
[155.95703125 187.26513672]
[151.05606079 189.44113159]
[151.36811829 204.43788147]
[151.68017578 219.43463135]
[151.99223328 234.43138123]
[152.30429077 249.42814636]
[152.61634827 264.42489624]
[152.92840576 279.42166138]
[153.24046326 294.41839600]
[153.55252075 309.41516113]
[153.86457825 324.41189575]
[154.17663574 339.40866089]
[168.83161926 342.99942017]
[182.05743408 350.26168823]
[192.95230103 360.70028687]
[200.77339172 373.60348511]
[204.98747253 388.09155273]
[205.30718994 403.17666626]
[201.71075439 417.83026123]
[194.44338989 431.05325317]
[184.00059509 441.94409180]
[171.09436035 449.76022339]
[156.60467529 453.96868896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[24 97]
[25 96]
[26 95]
[27 94]
[28 61]
[29 60]
[31 58]
[32 57]
[33 55]
[34 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[65 91]
[66 90]
[67 89]
[68 88]
[69 86]
[70 85]
[99 124]
[100 123]
[101 122]
[103 121]
[104 120]
[105 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
