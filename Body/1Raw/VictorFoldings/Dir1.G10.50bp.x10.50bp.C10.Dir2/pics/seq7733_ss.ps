%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAAAUCAAUGGGGGGGGGGUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCGGACUAAxxxxxxxxxxCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCAUCCUCCGCCCCCCCCCCUGAAAUCAAU\
) } def
/len { sequence length } bind def

/coor [
[84.94759369 403.05947876]
[71.10165405 397.04345703]
[59.39299393 387.51403809]
[50.69047165 375.17837524]
[45.63986969 360.95184326]
[44.61597824 345.89016724]
[47.69477463 331.11099243]
[54.64779663 317.71105957]
[64.95908356 306.68475342]
[77.86346436 298.85021973]
[92.40335083 294.78890991]
[92.40335083 279.78890991]
[92.40335083 264.78890991]
[92.40335083 249.78892517]
[92.40335083 234.78892517]
[92.40335083 219.78892517]
[92.40335083 204.78892517]
[92.40335083 189.78892517]
[92.40335083 174.78892517]
[92.40335083 159.78892517]
[92.40335083 144.78892517]
[92.40335083 129.78892517]
[92.40335083 114.78891754]
[84.27690887 127.39688873]
[69.79383087 131.30078125]
[56.43175125 124.48499298]
[51.08955002 110.46854401]
[56.52541351 96.48815155]
[69.93279266 89.76192474]
[84.39108276 93.76384735]
[74.40835571 82.56808472]
[64.42562866 71.37231445]
[54.44290161 60.17655182]
[41.03260803 67.87532806]
[26.32481766 72.63069916]
[10.95693684 74.23904419]
[-4.40552044 72.63304901]
[-19.09776306 67.88455200]
[-32.48448944 60.20134735]
[-43.98735809 49.91804886]
[-53.10996246 37.48155975]
[-59.45927811 23.43162727]
[-62.76257324 8.37743187]
[-62.87911987 -7.02884054]
[-59.80621338 -22.12024117]
[-53.67916107 -36.24393845]
[-44.76534271 -48.78944778]
[-54.97882080 -59.77511215]
[-65.19229889 -70.76077271]
[-80.25544739 -75.59939575]
[-83.25480652 -90.18888092]
[-98.31794739 -95.02750397]
[-101.31730652 -109.61698914]
[-111.53078461 -120.60265350]
[-121.74426270 -131.58831787]
[-137.57006836 -135.88670349]
[-141.49829102 -151.80841064]
[-129.48793030 -162.97457886]
[-113.89419556 -157.89839172]
[-110.75859833 -141.80180359]
[-100.54512024 -130.81613159]
[-90.33164215 -119.83046722]
[-75.99903107 -115.77761841]
[-72.26913452 -100.40236664]
[-57.93653107 -96.34951019]
[-54.20663834 -80.97425842]
[-43.99315643 -69.98859406]
[-33.77967834 -59.00292587]
[-21.36095047 -66.62493134]
[-7.68431330 -71.66621399]
[6.72015285 -73.92929840]
[21.29374695 -73.32442474]
[35.47081757 -69.87313080]
[48.70072937 -63.70743942]
[60.46923065 -55.06486511]
[70.31845856 -44.27922821]
[77.86473846 -31.76777649]
[82.81355286 -18.01504517]
[84.97100830 -3.55408454]
[84.25144958 11.05419922]
[80.68084717 25.24279594]
[74.39587402 38.46060181]
[65.63866425 50.19382477]
[75.62139130 61.38959122]
[85.60411835 72.58535767]
[95.58684540 83.78112030]
[109.99906158 87.93901062]
[124.41127777 83.78112030]
[138.82350159 79.62323761]
[153.23571777 75.46534729]
[167.64793396 71.30745697]
[181.49114990 65.53118896]
[194.58430481 58.21208191]
[207.67745972 50.89297485]
[220.77061462 43.57387161]
[233.86376953 36.25476456]
[234.70883179 20.85056305]
[243.76640320 8.36200619]
[258.14620972 2.77414536]
[273.25976562 5.87004757]
[284.28433228 16.66182137]
[287.70202637 31.70585060]
[282.42230225 46.20164108]
[270.12985229 55.52363968]
[254.74720764 56.69722748]
[241.18286133 49.34791946]
[228.08972168 56.66702271]
[214.99656677 63.98612976]
[201.90341187 71.30523682]
[188.81025696 78.62434387]
[203.67355347 80.64479828]
[215.96945190 89.23612213]
[222.97821045 102.49800110]
[223.14953613 117.49702454]
[216.44555664 130.91554260]
[204.34913635 139.78550720]
[189.53585815 142.14497375]
[175.28231812 137.47203064]
[164.74124146 126.80030060]
[160.24423218 112.49027252]
[162.78598022 97.70719147]
[171.80581665 85.71967316]
[157.39360046 89.87756348]
[142.98138428 94.03545380]
[128.56916809 98.19333649]
[114.15695190 102.35122681]
[112.42835236 109.16919708]
[107.40335083 114.78891754]
[107.40335083 129.78892517]
[107.40335083 144.78892517]
[107.40335083 159.78892517]
[107.40335083 174.78892517]
[107.40335083 189.78892517]
[107.40335083 204.78892517]
[107.40335083 219.78892517]
[107.40335083 234.78892517]
[107.40335083 249.78892517]
[107.40335083 264.78890991]
[107.40335083 279.78890991]
[107.40335083 294.78890991]
[121.94323730 298.85021973]
[134.84761047 306.68475342]
[145.15890503 317.71105957]
[152.11192322 331.11099243]
[155.19071960 345.89016724]
[154.16682434 360.95184326]
[149.11622620 375.17837524]
[140.41371155 387.51403809]
[128.70504761 397.04345703]
[114.85910797 403.05947876]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[30 86]
[31 85]
[32 84]
[33 83]
[47 68]
[48 67]
[49 66]
[51 64]
[53 62]
[54 61]
[55 60]
[87 126]
[88 125]
[89 124]
[90 123]
[91 122]
[92 110]
[93 109]
[94 108]
[95 107]
[96 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
