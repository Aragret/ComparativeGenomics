%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAGCAGGCGGGGGGGGGGAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACUCxxxxxxxxxxGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCCCCCCCCCCCAUAGAAGGC\
) } def
/len { sequence length } bind def

/coor [
[69.08092499 473.98376465]
[55.23498917 467.96774292]
[43.52632523 458.43832397]
[34.82380295 446.10266113]
[29.77320099 431.87612915]
[28.74930954 416.81445312]
[31.82810783 402.03530884]
[38.78113174 388.63537598]
[49.09241486 377.60903931]
[61.99679565 369.77453613]
[76.53668213 365.71322632]
[76.53668213 350.71322632]
[76.53668213 335.71322632]
[76.53668213 320.71322632]
[76.53668213 305.71322632]
[76.53668213 290.71322632]
[76.53668213 275.71322632]
[76.53668213 260.71322632]
[76.53668213 245.71321106]
[76.53668213 230.71321106]
[73.37110138 223.98085022]
[76.69596863 215.40196228]
[77.00801849 200.40521240]
[77.32007599 185.40846252]
[77.63213348 170.41171265]
[77.94419098 155.41494751]
[78.25624847 140.41819763]
[78.56830597 125.42144775]
[68.01701355 114.75981903]
[53.01782227 114.91585541]
[38.01863480 115.07189178]
[22.42996025 124.81730652]
[7.47459030 115.68840027]
[-7.51810598 116.15644836]
[-19.50651550 126.81747437]
[-35.29117584 123.94972229]
[-42.76345062 109.75308228]
[-36.19124603 95.11799622]
[-20.61619759 91.27125549]
[-7.98614788 101.16374969]
[7.00654793 100.69570923]
[15.55135059 92.07633209]
[28.08102608 91.60071564]
[37.86259842 100.07270813]
[52.86178589 99.91667175]
[67.86097717 99.76063538]
[73.20249176 85.74391937]
[62.11117172 75.64527130]
[51.01985550 65.54662323]
[39.92854309 55.44797134]
[25.31983185 60.18939972]
[10.30095196 56.97554779]
[-1.08809173 46.67092133]
[-5.78370476 32.04742050]
[-2.52279115 17.03869057]
[7.81748009 5.68200254]
[22.45562744 1.03225017]
[37.45406342 4.34019327]
[48.77828598 14.71601105]
[53.38212967 29.36866188]
[50.02719116 44.35665512]
[61.11850739 54.45530701]
[72.20982361 64.55395508]
[83.30113983 74.65260315]
[90.19232941 71.69261932]
[91.95637512 56.79671097]
[103.97470856 65.77265930]
[110.86589813 62.81267929]
[111.17795563 47.81592560]
[97.37961578 41.37189102]
[87.40012360 29.86842346]
[82.96850586 15.29857063]
[84.85255432 0.18664594]
[92.72584534 -12.84911728]
[105.22428894 -21.55019569]
[120.18245697 -24.40907288]
[135.00874329 -20.93043327]
[147.13442993 -11.71697044]
[154.45863342 1.63502681]
[155.71241760 16.81224442]
[150.67854309 31.18513680]
[140.22917175 42.26351547]
[126.17471313 48.12797928]
[125.86265564 63.12473297]
[138.64001465 70.98216248]
[151.88259888 63.93702698]
[165.12518311 56.89189148]
[178.36776733 49.84675598]
[169.40618896 39.46107483]
[167.53172302 22.83605957]
[175.79539490 4.37803745]
[187.49501038 -5.00912476]
[199.19464111 -14.39628601]
[199.35711670 -30.03302574]
[209.57188416 -41.87331772]
[225.01583862 -44.32654190]
[238.39682007 -36.23435593]
[243.39672852 -21.41764641]
[237.65476990 -6.87240934]
[223.88212585 0.53353959]
[208.58180237 -2.69666266]
[196.88217163 6.69049883]
[185.18255615 16.07766151]
[188.21406555 22.93768692]
[197.30857849 43.51776886]
[212.12634277 41.18666458]
[226.94409180 38.85556030]
[239.35232544 28.13326073]
[254.75128174 33.77280426]
[257.29983521 49.97270966]
[244.37623596 60.06790543]
[229.27519226 53.67331696]
[214.45744324 56.00442123]
[199.63967896 58.33552551]
[185.41290283 63.08934021]
[172.17031860 70.13447571]
[158.92773438 77.17961121]
[145.68515015 84.22474670]
[144.68312073 101.14270020]
[138.07868958 115.36920929]
[127.59784698 125.28413391]
[115.33734131 130.11381531]
[103.40136719 129.96783447]
[93.56505585 125.73350525]
[93.25299835 140.73025513]
[92.94094086 155.72700500]
[92.62889099 170.72377014]
[92.31683350 185.72052002]
[92.00477600 200.71726990]
[91.69271851 215.71401978]
[91.53668213 230.71321106]
[91.53668213 245.71321106]
[91.53668213 260.71322632]
[91.53668213 275.71322632]
[91.53668213 290.71322632]
[91.53668213 305.71322632]
[91.53668213 320.71322632]
[91.53668213 335.71322632]
[91.53668213 350.71322632]
[91.53668213 365.71322632]
[106.07656860 369.77453613]
[118.98094940 377.60903931]
[129.29223633 388.63537598]
[136.24525452 402.03530884]
[139.32405090 416.81445312]
[138.30017090 431.87612915]
[133.24955750 446.10266113]
[124.54703522 458.43832397]
[112.83837891 467.96774292]
[98.99243927 473.98376465]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[24 128]
[25 127]
[26 126]
[27 125]
[28 124]
[29 46]
[30 45]
[31 44]
[33 41]
[34 40]
[47 64]
[48 63]
[49 62]
[50 61]
[68 84]
[69 83]
[85 118]
[86 117]
[87 116]
[88 115]
[91 103]
[92 102]
[93 101]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
