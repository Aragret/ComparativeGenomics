%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUACGUGAGGGGGGGGGGUCUGAGUUCAGACCGGAGUAAUCCAGGUCGGUUUCUAUCUACXUUCAAAUxxxxxxxxxxUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCACCCCCCCCCCUCCUCCGUGA\
) } def
/len { sequence length } bind def

/coor [
[130.95426941 449.03598022]
[117.73406982 441.76351929]
[106.84726715 431.31652832]
[99.03613281 418.40725708]
[94.83325195 403.91595459]
[94.52517700 388.83059692]
[98.13291931 374.17977905]
[105.41049194 360.96240234]
[115.86170197 350.07962036]
[128.77397156 342.27349854]
[143.26690674 338.07620239]
[142.95484924 323.07943726]
[142.64279175 308.08270264]
[142.33073425 293.08593750]
[142.01867676 278.08917236]
[141.70661926 263.09243774]
[141.39456177 248.09567261]
[141.08250427 233.09892273]
[140.77044678 218.10217285]
[137.51962280 203.45866394]
[131.45661926 189.73861694]
[125.39360046 176.01855469]
[119.33058929 162.29850769]
[113.26757050 148.57846069]
[107.20455933 134.85839844]
[101.14154816 121.13834381]
[93.36829376 121.54457855]
[85.50460815 119.02151489]
[78.66992188 113.58376312]
[73.94986725 105.67519379]
[72.23257446 96.14200592]
[57.29826736 94.73970032]
[42.36396027 93.33740234]
[27.42965126 91.93509674]
[12.48156452 90.68821716]
[-2.47868443 89.59690857]
[-17.43893242 88.50559998]
[-31.95615578 96.13333130]
[-45.67417908 87.14734650]
[-44.48107529 70.79165649]
[-29.60420609 63.89159393]
[-16.34762192 73.54534912]
[-1.38737381 74.63666534]
[13.57287502 75.72797394]
[20.51770973 73.06059265]
[28.83195496 77.00078583]
[43.76626205 78.40309143]
[58.70056915 79.80539703]
[73.63488007 81.20769501]
[84.93388367 71.34197235]
[85.55786133 56.35495758]
[75.13585663 44.77827454]
[75.98215485 29.58819771]
[87.08298492 19.72375488]
[87.70696259 4.73673916]
[79.16497803 17.06696701]
[68.42046356 27.53384018]
[55.87088013 35.75016403]
[41.98046875 41.41199875]
[27.26305771 44.30990219]
[12.26308060 44.33666992]
[-2.46457934 41.49131775]
[-16.37511444 35.87910080]
[-28.95394516 27.70762253]
[-39.73574829 17.27916718]
[-48.32168961 4.97950649]
[-54.39414597 -8.73636913]
[-57.72849274 -23.36108017]
[-58.20137787 -38.35362244]
[-55.79531479 -53.15939331]
[-50.59930801 -67.23069763]
[-42.80556488 -80.04699707]
[-32.70239258 -91.13419342]
[-20.66353607 -100.08215332]
[-7.13433599 -106.55986023]
[7.38473415 -110.32769775]
[22.35658073 -111.24628448]
[37.22736359 -109.28163910]
[51.44697952 -104.50643921]
[64.48941040 -97.09732056]
[75.87219238 -87.32837677]
[85.17424774 -75.56097412]
[92.05147552 -62.23042297]
[96.24947357 -47.82983780]
[97.61294556 -32.89193344]
[96.09275055 -17.97575188]
[105.35770416 -29.77239227]
[114.62265015 -41.56903076]
[123.88759613 -53.36567307]
[125.67431641 -69.66719818]
[140.79211426 -76.02204132]
[153.68910217 -65.89289093]
[151.09796143 -49.69974518]
[135.68423462 -44.10072327]
[126.41928864 -32.30408478]
[117.15434265 -20.50744247]
[107.88938904 -8.71080303]
[102.69397736 5.36071634]
[102.06999969 20.34773254]
[112.31242371 31.10079193]
[111.89311981 46.30864716]
[100.54487610 56.97893524]
[99.92089844 71.96595001]
[122.74923706 90.63444519]
[114.86160278 115.07533264]
[120.92461395 128.79539490]
[126.98762512 142.51544189]
[133.05064392 156.23548889]
[139.11364746 169.95555115]
[145.17666626 183.67559814]
[151.23968506 197.39566040]
[169.46205139 188.02755737]
[182.37852478 201.31185913]
[196.60530090 206.06567383]
[210.88076782 210.67123413]
[225.20335388 215.12805176]
[239.52595520 219.58486938]
[253.84855652 224.04167175]
[269.71771240 219.90628052]
[281.03945923 231.77011108]
[276.16693115 247.42866516]
[260.11257935 250.77377319]
[249.39173889 238.36427307]
[235.06913757 233.90745544]
[220.74655151 229.45063782]
[206.42395020 224.99383545]
[199.05505371 226.01612854]
[191.85148621 220.29244995]
[177.62471008 215.53863525]
[167.75462341 220.82482910]
[155.76721191 217.79011536]
[156.07925415 232.78686523]
[156.39131165 247.78361511]
[156.70336914 262.78036499]
[157.01542664 277.77713013]
[157.32748413 292.77389526]
[157.63954163 307.77062988]
[157.95159912 322.76739502]
[158.26365662 337.76412964]
[172.91864014 341.35491943]
[186.14445496 348.61715698]
[197.03932190 359.05575562]
[204.86042786 371.95898438]
[209.07449341 386.44705200]
[209.39421082 401.53213501]
[205.79779053 416.18572998]
[198.53042603 429.40875244]
[188.08761597 440.29959106]
[175.18139648 448.11569214]
[160.69169617 452.32418823]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 111]
[21 110]
[22 109]
[23 108]
[24 107]
[25 106]
[26 105]
[31 49]
[32 48]
[33 47]
[34 46]
[35 44]
[36 43]
[37 42]
[50 103]
[51 102]
[54 99]
[55 98]
[86 97]
[87 96]
[88 95]
[89 94]
[113 129]
[114 128]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
