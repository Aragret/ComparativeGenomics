%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAUAGGCUGGGGGGGGGGAAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACxxxxxxxxxxUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCCCCCCCCCCCAUUAUUGGCU\
) } def
/len { sequence length } bind def

/coor [
[117.02886200 660.94171143]
[103.80867004 653.66925049]
[92.92186737 643.22222900]
[85.11073303 630.31298828]
[80.90785217 615.82165527]
[80.59977722 600.73632812]
[84.20751953 586.08551025]
[91.48509216 572.86810303]
[101.93630219 561.98535156]
[114.84856415 554.17919922]
[129.34150696 549.98193359]
[129.02944946 534.98516846]
[128.71739197 519.98840332]
[128.40533447 504.99166870]
[128.09327698 489.99490356]
[127.78121948 474.99816895]
[127.46916199 460.00140381]
[127.15710449 445.00463867]
[126.84504700 430.00790405]
[126.53299713 415.01113892]
[126.22093964 400.01437378]
[125.28530884 385.04360962]
[123.72772980 370.12469482]
[122.01503754 355.22277832]
[120.14742279 340.33950806]
[118.27981567 325.45620728]
[103.87082672 323.97714233]
[90.14958954 319.31320190]
[77.81111145 311.69711304]
[67.48118591 301.51113892]
[59.68458176 289.26806641]
[54.81845474 275.58523560]
[53.13207245 261.15356445]
[54.71406937 246.70248413]
[59.48777771 232.96322632]
[67.21495056 220.63175964]
[77.50764465 210.33349609]
[89.84770203 202.59167480]
[103.61282349 197.80064392]
[102.05524445 182.88172913]
[100.49766541 167.96281433]
[98.94008636 153.04391479]
[97.22739410 138.14201355]
[95.35977936 123.25872803]
[93.49216461 108.37545013]
[90.85330200 93.60939026]
[87.45032501 79.00049591]
[74.31411743 70.62924957]
[71.07112122 55.76528168]
[79.13278198 43.29350281]
[68.46643829 31.60847855]
[73.11462402 17.45773125]
[69.71164703 2.84883809]
[59.16291428 -4.64636469]
[56.65564728 -16.93182755]
[63.00450897 -27.27587318]
[59.90618515 -41.95240021]
[56.80786514 -56.62892532]
[53.70954132 -71.30545044]
[48.95572662 -85.53222656]
[42.60859680 -99.12318420]
[36.26146698 -112.71413422]
[29.91433907 -126.30508423]
[17.73377037 -138.09788513]
[25.69378471 -153.06700134]
[42.28145599 -149.56193542]
[43.50529099 -132.65220642]
[49.85242081 -119.06126404]
[56.19955063 -105.47030640]
[62.54667664 -91.87935638]
[65.64314270 -106.55627441]
[75.10627747 -118.19453430]
[88.84292603 -124.21985626]
[103.81466675 -123.29949951]
[116.70988464 -115.63703918]
[124.67628479 -102.92733765]
[125.95175934 -87.98166656]
[120.25420380 -74.10586548]
[108.84384918 -64.36914062]
[94.24456787 -60.92515945]
[79.68558502 -64.53570557]
[68.38607025 -74.40377045]
[71.48439026 -59.72724533]
[74.58271027 -45.05072021]
[77.68103027 -30.37419510]
[90.09407043 -18.00825691]
[84.32054138 -0.55413991]
[87.72351837 14.05475235]
[98.14645386 24.69485092]
[93.74166870 39.89052582]
[106.48477936 47.51606750]
[110.14398956 62.28308487]
[102.05921936 75.59751892]
[105.46219635 90.20641327]
[115.75582886 79.29582214]
[130.72024536 80.32845306]
[139.41766357 92.54953766]
[135.49096680 107.02645874]
[121.81026459 113.17774963]
[108.37545013 106.50783539]
[110.24305725 121.39111328]
[112.11067200 136.27439880]
[116.30838013 144.46163940]
[113.85899353 151.48632812]
[115.41657257 166.40524292]
[116.97415924 181.32415771]
[118.53173828 196.24305725]
[133.95146179 198.33082581]
[148.42102051 204.03063965]
[161.10780334 213.01010132]
[171.28286743 224.74818420]
[178.36280823 238.56549072]
[181.94317627 253.66365051]
[181.82164001 269.17135620]
[178.00935364 284.19464111]
[170.73008728 297.86856079]
[160.40713501 309.40676880]
[147.63867188 318.14691162]
[133.16308594 323.58862305]
[135.03070068 338.47189331]
[136.89831543 353.35516357]
[141.09602356 361.54241943]
[138.64663696 368.56710815]
[140.20422363 383.48602295]
[142.97827148 387.01675415]
[144.30863953 390.86398315]
[144.27761841 394.52197266]
[143.12733459 397.56677246]
[141.21769714 399.70233154]
[141.52975464 414.69909668]
[141.84179688 429.69583130]
[142.15385437 444.69259644]
[142.46591187 459.68933105]
[142.77796936 474.68609619]
[143.09002686 489.68286133]
[143.40208435 504.67959595]
[143.71414185 519.67633057]
[144.02619934 534.67309570]
[144.33825684 549.66986084]
[158.99324036 553.26062012]
[172.21905518 560.52288818]
[183.11392212 570.96148682]
[190.93501282 583.86468506]
[195.14909363 598.35278320]
[195.46881104 613.43786621]
[191.87239075 628.09149170]
[184.60502625 641.31445312]
[174.16221619 652.20532227]
[161.25599670 660.02142334]
[146.76629639 664.22991943]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 124]
[23 123]
[24 121]
[25 120]
[26 119]
[39 107]
[40 106]
[41 105]
[42 104]
[43 102]
[44 101]
[45 100]
[46 94]
[47 93]
[50 90]
[52 88]
[53 87]
[56 85]
[57 84]
[58 83]
[59 82]
[60 70]
[61 69]
[62 68]
[63 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
