%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAAACUAGGGGGGGGGGGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCxxxxxxxxxxAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCUCCCCCCCCCCAAUAAAAUUA\
) } def
/len { sequence length } bind def

/coor [
[86.92897797 381.65460205]
[73.08304596 375.63858032]
[61.37438202 366.10916138]
[52.67185593 353.77349854]
[47.62125397 339.54696655]
[46.59736252 324.48529053]
[49.67616272 309.70614624]
[56.62918472 296.30621338]
[66.94046783 285.27987671]
[79.84484863 277.44537354]
[94.38473511 273.38406372]
[94.38473511 258.38406372]
[94.38473511 243.38404846]
[94.38473511 228.38404846]
[94.38473511 213.38404846]
[94.38473511 198.38404846]
[94.38473511 183.38404846]
[94.38473511 168.38404846]
[94.38473511 153.38404846]
[94.38473511 138.38404846]
[94.38473511 123.38405609]
[82.03316498 114.87296295]
[68.01644897 120.21447754]
[53.99973679 125.55599213]
[47.04050064 131.57437134]
[39.63546371 130.85949707]
[25.51066017 135.90824890]
[15.31532288 148.75299072]
[-0.86428636 146.07861328]
[-6.38397312 130.63629150]
[4.43444347 118.31176758]
[20.46190262 121.78344727]
[34.58670807 116.73469543]
[48.65822601 111.53927612]
[62.67493820 106.19776154]
[76.69165039 100.85625458]
[76.61363220 93.35665894]
[63.54578400 85.99246216]
[76.45759583 78.35746765]
[76.37957764 70.85787201]
[62.25477600 65.80912018]
[48.12997437 60.76036072]
[34.00516891 55.71160507]
[18.94781685 61.24836349]
[5.30617857 52.80530548]
[3.54495096 36.85922241]
[15.01519775 25.64258194]
[30.91792679 27.75983429]
[39.05392456 41.58680344]
[53.17873001 46.63555908]
[67.30353546 51.68431473]
[81.42833710 56.73307037]
[95.65511322 51.97925568]
[103.90740204 39.45329666]
[112.15969086 26.92733383]
[120.41197968 14.40137100]
[128.66427612 1.87540925]
[116.97017670 -7.53697109]
[106.22374725 -18.01833725]
[96.52230835 -29.47376633]
[87.95372772 -41.79951477]
[80.59558868 -54.88395691]
[74.51454163 -68.60858917]
[69.76565552 -82.84912872]
[66.39193726 -97.47659302]
[64.42393494 -112.35852051]
[63.87948608 -127.36013031]
[64.76351166 -142.34556580]
[67.06800079 -157.17910767]
[70.77209473 -171.72642517]
[75.84223938 -185.85577393]
[82.23252106 -199.43917847]
[89.88507080 -212.35363770]
[98.73057556 -224.48219299]
[108.68893433 -235.71499634]
[119.66995239 -245.95031738]
[131.57418823 -255.09547424]
[144.29383850 -263.06762695]
[157.71369934 -269.79461670]
[171.71224976 -275.21545410]
[186.16268921 -279.28109741]
[200.93415833 -281.95471191]
[215.89289856 -283.21209717]
[230.90341187 -283.04183960]
[245.82978821 -281.44549561]
[260.53683472 -278.43753052]
[274.89132690 -274.04519653]
[288.76330566 -268.30822754]
[302.02716064 -261.27859497]
[314.56271362 -253.01998901]
[326.25646973 -243.60717773]
[337.00250244 -233.12542725]
[346.70352173 -221.66964722]
[355.27166748 -209.34358215]
[362.62930298 -196.25886536]
[368.70986938 -182.53401184]
[373.45822144 -168.29330444]
[376.83142090 -153.66572571]
[378.79885864 -138.78372192]
[379.34277344 -123.78208923]
[378.45822144 -108.79668427]
[376.15316772 -93.96322632]
[372.44854736 -79.41604614]
[367.37789917 -65.28688049]
[360.98712158 -51.70370483]
[353.33410645 -38.78952408]
[344.48815918 -26.66129494]
[334.52938843 -15.42885494]
[323.54797363 -5.19392920]
[311.64340210 3.95079088]
[298.92346191 11.92248726]
[285.50335693 18.64896584]
[271.50463867 24.06930733]
[257.05404663 28.13442612]
[242.28247070 30.80750465]
[227.32368469 32.06433487]
[212.31317139 31.89353752]
[197.38685608 30.29665375]
[182.67993164 27.28815079]
[168.32557678 22.89527130]
[154.45381165 17.15780067]
[141.19023132 10.12769890]
[132.93794250 22.65365982]
[124.68565369 35.17962265]
[116.43336487 47.70558548]
[108.18107605 60.23154449]
[127.41844177 75.52953339]
[132.76776123 97.06330109]
[124.76597595 115.18006897]
[109.38473511 123.38405609]
[109.38473511 138.38404846]
[109.38473511 153.38404846]
[109.38473511 168.38404846]
[109.38473511 183.38404846]
[109.38473511 198.38404846]
[109.38473511 213.38404846]
[109.38473511 228.38404846]
[109.38473511 243.38404846]
[109.38473511 258.38406372]
[109.38473511 273.38406372]
[123.92462158 277.44537354]
[136.82901001 285.27987671]
[147.14028931 296.30621338]
[154.09330750 309.70614624]
[157.17210388 324.48529053]
[156.14822388 339.54696655]
[151.09761047 353.77349854]
[142.39509583 366.10916138]
[130.68643188 375.63858032]
[116.84049225 381.65460205]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 36]
[23 35]
[24 34]
[26 33]
[27 32]
[40 52]
[41 51]
[42 50]
[43 49]
[53 126]
[54 125]
[55 124]
[56 123]
[57 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
