%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAGGCUUCAACGGGGGGGGGGAUCGAAUACGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGCCGAAUACACxxxxxxxxxxUCUCCCUUCACCAUUUCCGACGGCAUCUACGGCUCAACAUUUUUUGUAGCCCCCCCCCCCCACAGGCUUCCAC\
) } def
/len { sequence length } bind def

/coor [
[110.55647278 553.74310303]
[96.68233490 547.89483643]
[84.32752991 539.28948975]
[74.03215790 528.30316162]
[66.24627686 515.41619873]
[61.31026840 501.19195557]
[59.43989944 486.25222778]
[60.71693802 471.25012207]
[65.08556366 456.84149170]
[72.35478973 443.65618896]
[82.20684052 432.27062988]
[94.21102905 423.18255615]
[107.84259033 416.78924561]
[122.50559235 413.37020874]
[122.20545959 398.37319946]
[121.90532684 383.37619019]
[121.60519409 368.37921143]
[121.30506134 353.38220215]
[121.00492859 338.38522339]
[120.70480347 323.38821411]
[120.40467072 308.39120483]
[120.10453796 293.39422607]
[119.80440521 278.39721680]
[111.81399536 265.82730103]
[119.27362061 251.87509155]
[100.56375122 230.52789307]
[111.82983398 208.72817993]
[108.26251984 194.15853882]
[105.87636566 192.58821106]
[103.98686218 189.95162964]
[103.01335907 186.43997192]
[103.29562378 182.39611816]
[105.04241180 178.28150940]
[102.65143585 163.47329712]
[100.26045990 148.66508484]
[97.86948395 133.85687256]
[81.94502258 128.72009277]
[70.41300201 116.59626007]
[66.07895660 100.43485260]
[51.40882492 97.30638885]
[36.73869324 94.17793274]
[23.61639404 102.98592377]
[8.12567711 99.85332489]
[-0.54309189 86.63863373]
[2.75311494 71.18190002]
[16.05871582 62.65333176]
[31.47973442 66.11277008]
[39.86715317 79.50779724]
[54.53728485 82.63626099]
[69.20741272 85.76471710]
[69.36295319 79.78573608]
[70.66673279 73.56723785]
[59.29482651 63.78563309]
[47.92292023 54.00403214]
[31.88160133 53.76807404]
[22.17883873 40.99169540]
[26.25775909 25.47583199]
[40.98936462 19.12293243]
[55.07282639 26.80639458]
[57.70452118 42.63212585]
[69.07643127 52.41372681]
[80.44833374 62.19532776]
[94.77770996 57.76034546]
[98.63582611 43.26500320]
[102.49394989 28.76966286]
[106.35206604 14.27432251]
[92.63201141 8.12970448]
[80.07537842 -0.13630913]
[69.00739288 -10.30960751]
[59.71476364 -22.12667847]
[52.43817902 -35.28142929]
[47.36612701 -49.43312454]
[44.62997818 -64.21519470]
[44.30061340 -79.24475861]
[46.38656235 -94.13249969]
[50.83378983 -108.49280548]
[57.52710724 -121.95370483]
[66.29313660 -134.16651917]
[76.90481567 -144.81491089]
[89.08728790 -153.62307739]
[102.52498627 -160.36283875]
[116.86984253 -164.85963440]
[131.75028992 -166.99699402]
[146.78089905 -166.71954346]
[161.57234192 -164.03446960]
[175.74147034 -159.01132202]
[188.92126465 -151.78021240]
[200.77037048 -142.52844238]
[210.98182678 -131.49566650]
[219.29116821 -118.96765137]
[225.48312378 -105.26890564]
[229.39733887 -90.75424957]
[230.93241882 -75.79966736]
[230.04859924 -60.79249954]
[226.76876831 -46.12147522]
[221.17788696 -32.16661453]
[213.42077637 -19.28937340]
[203.69834900 -7.82330704]
[192.26245117 1.93458545]
[179.40930176 9.73155212]
[165.47183228 15.36563206]
[150.81103516 18.69088936]
[135.80668640 19.62119102]
[120.84741211 18.13244247]
[116.98928833 32.62778473]
[113.13117218 47.12312317]
[109.27304840 61.61846542]
[123.55915833 69.47541809]
[133.14645386 82.18238831]
[136.60714722 97.32389069]
[133.64195251 112.17670441]
[125.07950592 124.19915771]
[112.67770386 131.46589661]
[115.06867981 146.27410889]
[117.45965576 161.08232117]
[119.85062408 175.89053345]
[122.83216095 190.59123230]
[126.39947510 205.16087341]
[142.24095154 210.64035034]
[150.50027466 228.12019348]
[164.87330627 232.41159058]
[179.24633789 236.70298767]
[193.98834229 230.37428284]
[208.05917358 238.08085632]
[210.66488647 253.91088867]
[199.80659485 265.72091675]
[183.81385803 264.45132446]
[174.95494080 251.07601929]
[160.58190918 246.78462219]
[146.20887756 242.49322510]
[134.27061462 251.57496643]
[142.28250122 265.21755981]
[134.80140686 278.09710693]
[135.10153198 293.09408569]
[135.40167236 308.09109497]
[135.70179749 323.08807373]
[136.00192261 338.08508301]
[136.30206299 353.08209229]
[136.60218811 368.07907104]
[136.90232849 383.07608032]
[137.20245361 398.07305908]
[137.50259399 413.07006836]
[152.29064941 415.89971924]
[166.16708374 421.74252319]
[178.52526855 430.34304810]
[188.82496643 441.32528687]
[196.61590576 454.20919800]
[201.55752563 468.43151855]
[203.43376160 483.37048340]
[202.16262817 498.37307739]
[197.79968262 512.78344727]
[190.53562927 525.97161865]
[180.68806458 537.36102295]
[168.68745422 546.45379639]
[155.05841064 552.85247803]
[140.39674377 556.27734375]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[25 131]
[27 118]
[28 117]
[33 116]
[34 115]
[35 114]
[36 113]
[39 50]
[40 49]
[41 48]
[52 62]
[53 61]
[54 60]
[63 107]
[64 106]
[65 105]
[66 104]
[120 130]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
