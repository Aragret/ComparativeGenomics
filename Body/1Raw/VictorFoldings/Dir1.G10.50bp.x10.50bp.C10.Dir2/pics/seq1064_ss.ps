%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUAGCCAGGGGGGGGGGCACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUxxxxxxxxxxCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAAGUCCCCCCCCCCCACCCUAGCCA\
) } def
/len { sequence length } bind def

/coor [
[84.53820038 386.88217163]
[71.31800842 379.60968018]
[60.43120193 369.16268921]
[52.62007141 356.25344849]
[48.41719055 341.76211548]
[48.10911560 326.67678833]
[51.71685791 312.02597046]
[58.99443054 298.80856323]
[69.44564056 287.92581177]
[82.35790253 280.11965942]
[96.85083771 275.92236328]
[96.53878021 260.92562866]
[96.22672272 245.92886353]
[95.91466522 230.93211365]
[95.60261536 215.93536377]
[95.29055786 200.93859863]
[94.97850037 185.94184875]
[94.66644287 170.94509888]
[94.35438538 155.94834900]
[94.04232788 140.95158386]
[93.57428741 125.95889282]
[85.99159241 122.77978516]
[79.73311615 117.44728088]
[66.07688141 123.65268707]
[52.42063904 129.85809326]
[43.32830429 143.50585938]
[26.98238182 142.18566895]
[20.19815636 127.25562286]
[29.95465660 114.07447052]
[46.21522903 116.20185089]
[59.87147141 109.99644470]
[73.52770996 103.79103851]
[74.20495605 92.94522858]
[79.14162445 83.26434326]
[87.52255249 76.34693909]
[97.96382141 73.33526611]
[101.06214142 58.65874100]
[102.67298126 28.19663811]
[98.06741333 13.92117691]
[93.46185303 -0.35428381]
[88.85628510 -14.62974453]
[84.25072479 -28.90520477]
[79.64515686 -43.18066406]
[69.34645844 -42.99969482]
[59.24425125 -45.81403732]
[50.20631790 -51.49205399]
[43.03977966 -59.65194321]
[38.41944504 -69.68610382]
[36.82526779 -80.80587769]
[38.49457550 -92.10334015]
[43.39380646 -102.62548828]
[32.73218155 -113.17677307]
[22.07055473 -123.72806549]
[11.40892887 -134.27935791]
[-4.58197927 -137.91567993]
[-9.16912651 -153.66021729]
[2.36635113 -165.31631470]
[18.15774345 -160.89320374]
[21.96022034 -144.94097900]
[32.62184525 -134.38969421]
[43.28347015 -123.83840179]
[53.94509888 -113.28710938]
[67.84765625 -118.91906738]
[68.15971375 -133.91581726]
[68.47176361 -148.91258240]
[59.21751022 -164.79774475]
[68.80861664 -179.46098328]
[68.80861664 -194.46098328]
[54.75143051 -200.24578857]
[43.98155594 -210.97323608]
[38.14132690 -225.00749207]
[38.12133026 -240.20840454]
[43.92461777 -254.25798035]
[54.66622925 -265.01373291]
[68.70815277 -270.83547974]
[83.90908813 -270.83547974]
[97.95100403 -265.01373291]
[108.69261932 -254.25798035]
[114.49590302 -240.20840454]
[114.47590637 -225.00749207]
[108.63568115 -210.97323608]
[97.86580658 -200.24578857]
[83.80861664 -194.46098328]
[83.80861664 -179.46098328]
[92.15717316 -170.65139771]
[92.24160004 -158.11297607]
[83.46852112 -148.60052490]
[83.15646362 -133.60375977]
[82.84440613 -118.60700989]
[103.78624725 -106.52310944]
[113.60223389 -85.28840637]
[109.51987457 -63.05060959]
[93.92061615 -47.78623199]
[98.52618408 -33.51076889]
[103.13175201 -19.23530960]
[107.73731232 -4.95984840]
[112.34288025 9.31561279]
[116.94844055 23.59107208]
[129.72579956 31.44849968]
[144.54356384 29.11739540]
[159.36131287 26.78629112]
[162.24476624 11.90470886]
[170.04679871 -1.09160781]
[181.82525635 -10.63328934]
[196.15783691 -15.56813240]
[211.31382751 -15.30023003]
[225.46305847 -9.86193275]
[236.89694214 0.09005833]
[244.23478699 13.35399246]
[246.59049988 28.32818413]
[243.67962646 43.20442581]
[235.85366821 56.18634415]
[224.05763245 65.70630646]
[209.71597290 70.61472321]
[194.56051636 70.31889343]
[180.42132568 64.85453033]
[169.00579834 54.88148117]
[161.69241333 41.60404968]
[146.87466431 43.93515396]
[132.05690002 46.26625824]
[143.41082764 56.06873322]
[139.63136292 70.58478546]
[124.93869781 73.60565948]
[115.73866272 61.75706482]
[112.64034271 76.43358612]
[125.51604462 91.99466705]
[123.83714294 112.12206268]
[108.56130219 125.33491516]
[112.06391907 133.84277344]
[109.03908539 140.63954163]
[109.35114288 155.63629150]
[109.66320038 170.63304138]
[109.97525024 185.62979126]
[110.28730774 200.62655640]
[110.59936523 215.62330627]
[110.91142273 230.62005615]
[111.22348022 245.61680603]
[111.53553772 260.61355591]
[111.84758759 275.61032104]
[126.50258636 279.20108032]
[139.72839355 286.46334839]
[150.62326050 296.90194702]
[158.44435120 309.80514526]
[162.65843201 324.29321289]
[162.97814941 339.37832642]
[159.38172913 354.03192139]
[152.11436462 367.25491333]
[141.67155457 378.14575195]
[128.76533508 385.96188354]
[114.27563477 390.17034912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 128]
[23 32]
[24 31]
[25 30]
[36 125]
[37 124]
[38 98]
[39 97]
[40 96]
[41 95]
[42 94]
[43 93]
[51 62]
[52 61]
[53 60]
[54 59]
[63 89]
[64 88]
[65 87]
[67 84]
[68 83]
[99 120]
[100 119]
[101 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
