%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUUCUCCGGGGGGGGGGCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUxxxxxxxxxxCCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAGUCCCCCCCCCCCCUACUUCUCC\
) } def
/len { sequence length } bind def

/coor [
[102.75328064 366.86492920]
[89.53308105 359.59246826]
[78.64627838 349.14544678]
[70.83515167 336.23620605]
[66.63227081 321.74490356]
[66.32419586 306.65954590]
[69.93193817 292.00872803]
[77.20951080 278.79135132]
[87.66072083 267.90856934]
[100.57298279 260.10241699]
[115.06591797 255.90515137]
[114.75386047 240.90838623]
[114.44180298 225.91163635]
[114.12974548 210.91488647]
[113.81768799 195.91813660]
[113.50563812 180.92137146]
[113.19358063 165.92462158]
[112.88152313 150.92787170]
[112.56946564 135.93112183]
[112.25740814 120.93436432]
[91.96207428 120.52127075]
[81.03327179 105.75205231]
[66.09896088 104.34974670]
[51.16465759 102.94744110]
[36.21656799 101.70056915]
[21.25632095 100.60926056]
[6.29607248 99.51794434]
[-8.66417599 98.42663574]
[-23.62442589 97.33532715]
[-38.58467484 96.24401855]
[-29.08084679 107.84906769]
[-29.08499146 122.84906769]
[-38.59523010 134.44886780]
[-53.30333328 137.39364624]
[-66.54638672 130.34938049]
[-72.32515717 116.50720978]
[-68.02179718 102.13775635]
[-55.58539581 93.75043488]
[-70.22889709 90.49960327]
[-82.52684021 100.15851593]
[-98.15448761 99.60103607]
[-109.73293304 89.09039307]
[-111.79518890 73.58938599]
[-103.36752319 60.41712570]
[-88.42922974 55.79314423]
[-74.03369904 61.90074158]
[-66.97807312 75.85610199]
[-52.33456802 79.10693359]
[-37.49336243 81.28376770]
[-22.53311539 82.37507629]
[-7.57286596 83.46638489]
[7.38738298 84.55770111]
[22.34763145 85.64900970]
[37.30788040 86.74031830]
[44.25271606 84.07293701]
[52.56695938 88.01313782]
[67.50126648 89.41543579]
[82.43557739 90.81774139]
[87.11826324 83.97631836]
[94.41824341 79.44493103]
[103.22400665 78.19778442]
[112.07640839 80.68550110]
[119.41043091 86.71924591]
[123.83104706 95.46426392]
[135.33285522 85.83573151]
[146.83465576 76.20720673]
[158.33645630 66.57868195]
[169.83825684 56.95015717]
[181.34005737 47.32162857]
[173.05032349 34.80123901]
[166.21456909 21.43140030]
[160.91877747 7.38025761]
[157.22955322 -7.17548275]
[155.19326782 -22.05276680]
[154.83555603 -37.06449890]
[156.16090393 -52.02188492]
[159.15264893 -66.73682404]
[163.77316284 -81.02426147]
[169.96434021 -94.70452118]
[177.64831543 -107.60554504]
[186.72845459 -119.56510925]
[197.09057617 -130.43278503]
[208.60435486 -140.07192993]
[221.12498474 -148.36129761]
[234.49502563 -155.19664001]
[248.54632568 -160.49200439]
[263.10217285 -164.18080139]
[277.97952271 -166.21664429]
[292.99127197 -166.57389832]
[307.94860840 -165.24810791]
[322.66348267 -162.25592041]
[336.95077515 -157.63497925]
[350.63082886 -151.44340515]
[363.53164673 -143.75904846]
[375.49093628 -134.67854309]
[386.35830688 -124.31610107]
[395.99710083 -112.80203247]
[404.28607178 -100.28114319]
[411.12103271 -86.91089630]
[416.41598511 -72.85943604]
[420.10433960 -58.30347824]
[422.13973999 -43.42607117]
[422.49655151 -28.41431999]
[421.17028809 -13.45701122]
[418.17767334 1.25775111]
[413.55630493 15.54491234]
[407.36431885 29.22479820]
[399.67956543 42.12536621]
[390.59872437 54.08438110]
[380.23596191 64.95144653]
[368.72158813 74.58988953]
[356.20046997 82.87850952]
[342.83001709 89.71305847]
[328.77838135 95.00758362]
[314.22232056 98.69551086]
[299.34484863 100.73045349]
[284.33309937 101.08682251]
[269.37582397 99.76013184]
[254.66114807 96.76706696]
[240.37413025 92.14527130]
[226.69442749 85.95287323]
[213.79408264 78.26773834]
[201.83534241 69.18652344]
[190.96858215 58.82343292]
[179.46678162 68.45195770]
[167.96498108 78.08048248]
[156.46318054 87.70901489]
[144.96138000 97.33753967]
[133.45956421 106.96606445]
[127.25416565 120.62230682]
[127.56622314 135.61906433]
[127.87827301 150.61581421]
[128.19033813 165.61256409]
[128.50239563 180.60931396]
[128.81443787 195.60607910]
[129.12649536 210.60282898]
[129.43855286 225.59957886]
[129.75061035 240.59632874]
[130.06266785 255.59309387]
[144.71766663 259.18386841]
[157.94346619 266.44610596]
[168.83833313 276.88470459]
[176.65943909 289.78793335]
[180.87350464 304.27597046]
[181.19322205 319.36108398]
[177.59680176 334.01467896]
[170.32943726 347.23770142]
[159.88664246 358.12854004]
[146.98040771 365.94464111]
[132.49072266 370.15310669]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 58]
[23 57]
[24 56]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[38 48]
[39 47]
[64 129]
[65 128]
[66 127]
[67 126]
[68 125]
[69 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
