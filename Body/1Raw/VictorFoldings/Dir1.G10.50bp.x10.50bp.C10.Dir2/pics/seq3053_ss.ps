%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAAAUUCCUGGGGGGGGGGCCCUGUACGAAAGGACAAGAGAAAUAAGGCCUACUUCACAAAGCGCCUUCxxxxxxxxxxCCCUAGGCUCACUAAACAUUCUACUACUCACUCUCACUGCCCAAGAACUACCCCCCCCCCUCAAACUCCU\
) } def
/len { sequence length } bind def

/coor [
[87.37555695 382.58804321]
[73.52961731 376.57202148]
[61.82096100 367.04260254]
[53.11843491 354.70693970]
[48.06783295 340.48040771]
[47.04394150 325.41873169]
[50.12274170 310.63955688]
[57.07576370 297.23962402]
[67.38704681 286.21328735]
[80.29142761 278.37878418]
[94.83131409 274.31747437]
[94.83131409 259.31747437]
[94.83131409 244.31747437]
[94.83131409 229.31747437]
[94.83131409 214.31747437]
[94.83131409 199.31747437]
[94.83131409 184.31747437]
[94.83131409 169.31747437]
[94.83131409 154.31747437]
[94.83131409 139.31747437]
[87.33787537 134.72630310]
[81.54794312 128.87797546]
[77.62467194 122.28083801]
[75.59503937 115.44890594]
[61.27244186 119.90571594]
[46.94984436 124.36253357]
[36.07180786 135.85073853]
[21.62038612 132.24440002]
[10.89955235 144.65390015]
[-5.15480185 141.30879211]
[-10.02733421 125.65023041]
[1.29439974 113.78640747]
[17.16357040 117.92179871]
[27.01716042 106.75237274]
[42.49303055 110.03993988]
[56.81562805 105.58312225]
[71.13822174 101.12630463]
[77.28459167 82.15956879]
[94.25444031 71.69348145]
[95.19006348 56.72268677]
[96.12569427 41.75189590]
[97.06132507 26.78110313]
[96.28147888 11.80138969]
[93.79635620 -2.99131775]
[91.31124115 -17.78402519]
[84.68273926 -31.23999023]
[74.46926117 -42.22565460]
[64.25578308 -53.21131897]
[54.04230118 -64.19698334]
[43.82882309 -75.18264771]
[33.50161743 -86.06147766]
[23.06180573 -96.83228302]
[7.95829582 -93.68783569]
[-6.43940830 -99.22946930]
[-15.53705215 -111.68885803]
[-16.43161011 -127.09026337]
[-8.83763123 -140.51914978]
[4.82167149 -147.69041443]
[20.18766594 -146.31571960]
[32.35711670 -136.83374023]
[37.44680023 -122.27013397]
[33.83261490 -107.27209473]
[44.27242661 -96.50128937]
[51.23112488 -93.87028503]
[54.81448746 -85.39612579]
[65.02796936 -74.41046143]
[75.24144745 -63.42480087]
[85.45492554 -52.43913651]
[95.66840363 -41.45346832]
[92.79415894 -56.17551804]
[92.98414612 -71.17431641]
[96.23036957 -85.81884003]
[102.39624786 -99.49297333]
[111.22238922 -111.62142181]
[122.33744812 -121.69392395]
[135.27381897 -129.28672791]
[149.48721313 -134.08036804]
[164.37969971 -135.87318420]
[179.32469177 -134.58975220]
[193.69343567 -130.28407288]
[206.88143921 -123.13726807]
[218.33383179 -113.45003510]
[227.56883240 -101.62992859]
[234.19787598 -88.17423248]
[237.94207764 -73.64904785]
[238.64392090 -58.66547775]
[236.27388000 -43.85389709]
[230.93165588 -29.83745575]
[222.84201050 -17.20584297]
[212.34529114 -6.49049187]
[199.88310242 1.85778809]
[185.97973633 7.48777151]
[171.22015381 10.16259670]
[156.22531128 9.76972961]
[141.62603760 6.32569885]
[128.03656006 -0.02460025]
[116.02862549 -9.01400089]
[106.10395050 -20.26914406]
[108.58906555 -5.47643614]
[111.07418823 9.31627083]
[117.97949982 -3.99975777]
[130.20816040 -12.68653107]
[145.05528259 -14.82261562]
[159.23683167 -9.93552876]
[169.61598206 0.89375037]
[173.89695740 15.26988602]
[171.13284302 30.01300812]
[161.93502808 41.86207581]
[148.33801270 48.19618225]
[133.34930420 47.61428452]
[120.28427124 40.24509048]
[112.03211212 27.71673203]
[111.09648895 42.68752289]
[110.16085815 57.65831375]
[109.22522736 72.62910461]
[129.62055969 82.76519775]
[138.92880249 107.55828094]
[153.15557861 112.31209564]
[168.09449768 106.46328735]
[181.90882874 114.62071991]
[184.00140381 130.52671814]
[172.76699829 141.97955322]
[156.82365417 140.19358826]
[148.40176392 126.53887939]
[134.17498779 121.78506470]
[128.08906555 126.16816711]
[140.18742371 135.03552246]
[135.49249268 149.28182983]
[120.49262238 149.21885681]
[115.91723633 134.93437195]
[109.83131409 139.31747437]
[109.83131409 154.31747437]
[109.83131409 169.31747437]
[109.83131409 184.31747437]
[109.83131409 199.31747437]
[109.83131409 214.31747437]
[109.83131409 229.31747437]
[109.83131409 244.31747437]
[109.83131409 259.31747437]
[109.83131409 274.31747437]
[124.37120056 278.37878418]
[137.27558899 286.21328735]
[147.58686829 297.23962402]
[154.53988647 310.63955688]
[157.61868286 325.41873169]
[156.59480286 340.48040771]
[151.54418945 354.70693970]
[142.84167480 367.04260254]
[131.13301086 376.57202148]
[117.28707123 382.58804321]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 37]
[25 36]
[26 35]
[28 33]
[39 115]
[40 114]
[41 113]
[42 112]
[43 100]
[44 99]
[45 98]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 63]
[52 62]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
