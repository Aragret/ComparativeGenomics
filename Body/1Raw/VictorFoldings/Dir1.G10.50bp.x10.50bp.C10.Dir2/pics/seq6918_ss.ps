%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUAAUCAUGGGGGGGGGGCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGxxxxxxxxxxGAUAACCAUACACAACACUAAAGGACGAACCUGAUCUCUUAUACUAGUAUCCCCCCCCCCCCUUAAUCAU\
) } def
/len { sequence length } bind def

/coor [
[75.04843140 381.87911987]
[61.20249176 375.86306763]
[49.49382782 366.33364868]
[40.79130554 353.99798584]
[35.74070358 339.77148438]
[34.71681213 324.70977783]
[37.79560852 309.93063354]
[44.74863052 296.53070068]
[55.05991745 285.50436401]
[67.96429443 277.66986084]
[82.50418091 273.60855103]
[82.50418091 258.60855103]
[82.50418091 243.60855103]
[82.50418091 228.60855103]
[82.50418091 213.60855103]
[82.50418091 198.60855103]
[82.50418091 183.60855103]
[82.50418091 168.60855103]
[82.50418091 153.60855103]
[82.50418091 138.60855103]
[70.15261078 130.09745789]
[56.13589859 135.43896484]
[42.11918640 140.78048706]
[40.36197281 155.98478699]
[31.73066902 168.62437439]
[18.20868301 175.79476929]
[2.90326715 175.84825134]
[-10.66850376 168.77253723]
[-19.38793755 156.19358826]
[-21.25137138 141.00193787]
[-15.83060265 126.68852234]
[-4.37128401 116.54246521]
[10.49331760 112.89524078]
[25.34742546 116.58496857]
[36.77767181 126.76377106]
[50.79438400 121.42225647]
[64.81109619 116.08074951]
[62.40824127 100.29111481]
[66.57428741 85.34645844]
[76.21540070 73.78015137]
[89.34482574 67.39261627]
[103.48268890 66.97523499]
[108.38423920 52.79867554]
[113.28578949 38.62211990]
[118.18733978 24.44556046]
[123.08889008 10.26900196]
[118.15360260 -1.69330275]
[122.57561493 -13.42636395]
[133.45870972 -18.79903603]
[138.65412903 -32.87055588]
[143.25968933 -47.14601517]
[139.49084473 -62.51176834]
[150.34736633 -72.70907593]
[142.82345581 -86.34830475]
[147.09378052 -100.95032501]
[160.14306641 -108.03916931]
[164.15080261 -122.49385834]
[168.15855408 -136.94854736]
[172.01570129 -151.44413757]
[175.72186279 -165.97908020]
[161.83761597 -171.72436523]
[148.91236877 -179.38717651]
[137.20925903 -188.81150818]
[126.96655273 -199.80549622]
[118.39278412 -212.14532471]
[111.66250610 -225.57975769]
[106.91272736 -239.83529663]
[104.24015045 -254.62170410]
[103.69918823 -269.63796997]
[105.30085754 -284.57836914]
[109.01253510 -299.13873291]
[114.75867462 -313.02261353]
[122.42228699 -325.94741821]
[131.84735107 -337.64993286]
[142.84196472 -347.89193726]
[155.18232727 -356.46496582]
[168.61717224 -363.19439697]
[182.87300110 -367.94329834]
[197.65959167 -370.61495972]
[212.67588806 -371.15499878]
[227.61618042 -369.55239868]
[242.17631531 -365.83981323]
[256.05984497 -360.09280396]
[268.98416138 -352.42840576]
[280.68609619 -343.00262451]
[290.92742920 -332.00735474]
[299.49969482 -319.66647339]
[306.22830200 -306.23120117]
[310.97631836 -291.97509766]
[313.64706421 -277.18835449]
[314.18615723 -262.17202759]
[312.58264160 -247.23181152]
[308.86917114 -232.67192078]
[303.12130737 -218.78872681]
[295.45608521 -205.86489868]
[286.02960205 -194.16354370]
[275.03369141 -183.92288208]
[262.69229126 -175.35140991]
[249.25659180 -168.62361145]
[235.00018311 -163.87648010]
[220.21327209 -161.20664978]
[205.19689941 -160.66847229]
[190.25680542 -162.27291870]
[186.55064392 -147.73797607]
[187.95466614 -140.43220520]
[182.61323547 -132.94081116]
[178.60549927 -118.48612213]
[174.59776306 -104.03143311]
[182.13362122 -91.23509216]
[178.27511597 -76.51889038]
[164.80204773 -68.70133972]
[168.85755920 -54.36948395]
[157.71438599 -43.13827515]
[159.03717041 -40.59710693]
[159.39949036 -37.36249542]
[158.52574158 -33.81025314]
[156.28605652 -30.41100121]
[152.72564697 -27.67514038]
[147.53022766 -13.60362148]
[151.44888306 3.47396898]
[137.26545715 15.17055321]
[132.36390686 29.34711075]
[127.46234894 43.52367020]
[122.56079865 57.70022583]
[117.65924835 71.87678528]
[128.74179077 81.61028290]
[134.74710083 95.51799011]
[134.20605469 111.05629730]
[126.88256836 125.22178650]
[113.88372803 135.13171387]
[97.50418091 138.60855103]
[97.50418091 153.60855103]
[97.50418091 168.60855103]
[97.50418091 183.60855103]
[97.50418091 198.60855103]
[97.50418091 213.60855103]
[97.50418091 228.60855103]
[97.50418091 243.60855103]
[97.50418091 258.60855103]
[97.50418091 273.60855103]
[112.04406738 277.66986084]
[124.94844818 285.50436401]
[135.25973511 296.53070068]
[142.21275330 309.93063354]
[145.29154968 324.70977783]
[144.26766968 339.77148438]
[139.21705627 353.99798584]
[130.51454163 366.33364868]
[118.80587769 375.86306763]
[104.95993805 381.87911987]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 37]
[22 36]
[23 35]
[42 125]
[43 124]
[44 123]
[45 122]
[46 121]
[49 119]
[50 118]
[51 113]
[53 111]
[56 108]
[57 107]
[58 106]
[59 104]
[60 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
