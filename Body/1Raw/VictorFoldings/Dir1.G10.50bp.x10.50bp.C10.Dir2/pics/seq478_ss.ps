%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUAACCAGGGGGGGGGGGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACAGUCACCCCCCxxxxxxxxxxUGAGCUAAACCUAGCCCCAAACCCACUCCACCUUACUACCAGACAACCUUCCCCCCCCCCAGCCAAACCA\
) } def
/len { sequence length } bind def

/coor [
[78.45400238 377.60244751]
[64.60806274 371.58642578]
[52.89939880 362.05700684]
[44.19687271 349.72134399]
[39.14627075 335.49481201]
[38.12237930 320.43313599]
[41.20117950 305.65396118]
[48.15420151 292.25402832]
[58.46548462 281.22769165]
[71.36986542 273.39318848]
[85.90975189 269.33187866]
[85.90975189 254.33187866]
[85.90975189 239.33187866]
[85.90975189 224.33187866]
[85.90975189 209.33187866]
[85.90975189 194.33187866]
[85.90975189 179.33187866]
[85.90975189 164.33187866]
[85.90975189 149.33187866]
[85.90975189 134.33187866]
[73.47031403 125.94974518]
[59.56775665 131.58169556]
[45.66520309 137.21365356]
[43.62121582 152.43592834]
[34.22723770 164.58700562]
[20.01019096 170.39831543]
[4.79439640 168.30662537]
[-7.32717562 158.87460327]
[-13.09388351 144.63940430]
[-10.95451164 129.43023682]
[-1.48453951 117.33829498]
[12.76865673 111.61623383]
[27.97104073 113.80326843]
[40.03324509 123.31109619]
[53.93580246 117.67914581]
[67.83835602 112.04718781]
[69.13978577 90.74918365]
[82.27488708 75.68490601]
[100.55185699 72.04252625]
[104.85944366 57.67434692]
[109.16702271 43.30615997]
[105.71865845 27.86532974]
[116.78497314 17.89608192]
[120.94286346 3.48386550]
[124.95059967 -10.97082329]
[128.95834351 -25.42551231]
[132.96607971 -39.88019943]
[118.91272736 -45.15284729]
[105.38036346 -51.64691162]
[92.47491455 -59.31156540]
[80.29737091 -68.08682251]
[68.94304657 -77.90399933]
[58.50081253 -88.68626404]
[49.05238342 -100.34923553]
[40.67171097 -112.80162048]
[33.42438889 -125.94597626]
[27.36713791 -139.67941284]
[22.54736519 -153.89445496]
[19.00279045 -168.47984314]
[16.76115799 -183.32142639]
[15.84001064 -198.30305481]
[16.24655724 -213.30746460]
[17.97761726 -228.21723938]
[21.01964188 -242.91566467]
[25.34882164 -257.28771973]
[30.93127632 -271.22088623]
[37.72331238 -284.60617065]
[45.67177582 -297.33880615]
[54.71445465 -309.31909180]
[64.78057861 -320.45330811]
[75.79135895 -330.65432739]
[87.66062927 -339.84225464]
[100.29548645 -347.94519043]
[113.59705353 -354.89978027]
[127.46121216 -360.65151978]
[141.77946472 -365.15542603]
[156.43974304 -368.37628174]
[171.32731628 -370.28881836]
[186.32566833 -370.87808228]
[201.31739807 -370.13949585]
[216.18519592 -368.07879639]
[230.81266785 -364.71212769]
[245.08537292 -360.06585693]
[258.89157104 -354.17633057]
[272.12322998 -347.08966064]
[284.67675781 -338.86126709]
[296.45394897 -329.55560303]
[307.36260986 -319.24548340]
[317.31735229 -308.01156616]
[326.24029541 -295.94183350]
[334.06155396 -283.13067627]
[340.71997070 -269.67843628]
[346.16339111 -255.69033813]
[350.34924316 -241.27589417]
[353.24475098 -226.54789734]
[354.82727051 -211.62164307]
[355.08438110 -196.61392212]
[354.01409912 -181.64221191]
[351.62478638 -166.82368469]
[347.93511963 -152.27430725]
[342.97406006 -138.10797119]
[336.78033447 -124.43553162]
[329.40249634 -111.36399841]
[320.89822388 -98.99568176]
[311.33413696 -87.42738342]
[300.78503418 -76.74963379]
[289.33352661 -67.04600525]
[277.06921387 -58.39245224]
[264.08807373 -50.85668945]
[250.49171448 -44.49770355]
[236.38655090 -39.36525726]
[221.88296509 -35.49952698]
[207.09448242 -32.93075943]
[192.13685608 -31.67906761]
[177.12712097 -31.75424194]
[162.18276978 -33.15569305]
[147.42077637 -35.87245941]
[143.41302490 -21.41777039]
[139.40528870 -6.96308279]
[135.39755249 7.49160576]
[136.64927673 14.82501125]
[131.15315247 22.20366669]
[134.90963745 36.61679077]
[123.53520966 47.61374664]
[119.22762299 61.98192978]
[114.92003632 76.35011292]
[125.69431305 86.04549408]
[130.51277161 100.39455414]
[127.53562164 115.88995361]
[116.91474152 128.41419983]
[100.90975189 134.33187866]
[100.90975189 149.33187866]
[100.90975189 164.33187866]
[100.90975189 179.33187866]
[100.90975189 194.33187866]
[100.90975189 209.33187866]
[100.90975189 224.33187866]
[100.90975189 239.33187866]
[100.90975189 254.33187866]
[100.90975189 269.33187866]
[115.44963837 273.39318848]
[128.35401917 281.22769165]
[138.66531372 292.25402832]
[145.61833191 305.65396118]
[148.69712830 320.43313599]
[147.67323303 335.49481201]
[142.62263489 349.72134399]
[133.92010498 362.05700684]
[122.21144867 371.58642578]
[108.36550903 377.60244751]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 36]
[22 35]
[23 34]
[39 126]
[40 125]
[41 124]
[43 122]
[44 120]
[45 119]
[46 118]
[47 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
