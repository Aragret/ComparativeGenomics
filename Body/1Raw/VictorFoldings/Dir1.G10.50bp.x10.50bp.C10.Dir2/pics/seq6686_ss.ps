%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAAUCACAGGGGGGGGGGGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUxxxxxxxxxxGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUAGAAGUCCCACCCCCCCCCCCUCCUAAACACA\
) } def
/len { sequence length } bind def

/coor [
[77.82557678 518.48095703]
[63.80363464 512.92797852]
[51.60367584 504.06161499]
[41.99260712 492.43933105]
[35.57458115 478.79162598]
[32.75304413 463.97644043]
[33.70536041 448.92504883]
[38.37166595 434.58361816]
[46.45862961 421.85366821]
[57.45790482 411.53540039]
[70.67806244 404.27743530]
[85.28807831 400.53598022]
[85.28807831 385.53598022]
[85.28807831 370.53598022]
[85.28807831 355.53598022]
[85.28807831 340.53598022]
[85.28807831 325.53598022]
[85.28807831 310.53598022]
[85.28807831 295.53598022]
[85.28807831 280.53598022]
[85.28807831 265.53598022]
[85.28807831 250.53599548]
[74.27677155 246.08329773]
[65.40357208 238.13543701]
[59.73693085 227.61781311]
[57.96992111 215.76704407]
[60.33550262 203.98565674]
[66.57614136 193.67604065]
[75.97162628 186.07357788]
[87.42208099 182.09855652]
[88.34549713 167.12699890]
[89.26891327 152.15545654]
[90.19232178 137.18389893]
[91.11573792 122.21234894]
[92.03915405 107.24079895]
[89.73827362 92.41831970]
[84.31964874 78.43123627]
[78.90102386 64.44415283]
[63.00283432 64.86035919]
[47.94509125 59.82655716]
[35.53539276 49.96630859]
[27.25683784 36.48140717]
[24.09080696 21.00541115]
[26.40065193 5.40574503]
[33.89009476 -8.44161415]
[45.64108658 -18.87774658]
[39.93642044 -32.75062943]
[34.23175812 -46.62350845]
[28.52709579 -60.49638748]
[22.82243156 -74.36927032]
[14.28197289 -86.70055389]
[3.30117083 -96.91925812]
[-11.90135956 -93.81077576]
[-26.01362419 -100.26241302]
[-33.60916519 -113.79338837]
[-31.76734924 -129.20077515]
[-21.19638443 -140.56010437]
[-5.96102810 -143.50347900]
[8.08041763 -136.89913940]
[15.52872849 -123.28655243]
[13.51987839 -107.90006256]
[24.50068092 -97.68135834]
[20.36086464 -112.09877014]
[20.18877983 -127.09778595]
[23.99672318 -141.60638428]
[31.51253510 -154.58763123]
[42.19904709 -165.11370850]
[55.29247665 -172.43232727]
[69.85701752 -176.02038574]
[84.85170746 -175.62145996]
[99.20486450 -171.26405334]
[111.89063263 -163.25961304]
[122.00234222 -152.18019104]
[128.81729126 -138.81770325]
[131.84840393 -124.12714386]
[130.87905884 -109.15850067]
[125.97850037 -94.98159790]
[117.49700928 -82.60968018]
[106.04075623 -72.92699432]
[92.42855072 -66.62557983]
[77.63327026 -64.15580750]
[62.71237183 -65.69419861]
[48.73226166 -71.13079071]
[36.69531250 -80.07393646]
[42.39997482 -66.20104980]
[48.10464096 -52.32817078]
[53.80930328 -38.45529175]
[59.51396561 -24.58241081]
[73.66575623 -25.59022713]
[87.45568848 -22.16428566]
[99.52690887 -14.62797928]
[108.68746185 -3.70979357]
[114.02794647 9.52707672]
[115.01179504 23.78826332]
[111.52916718 37.67478943]
[103.90902710 49.82030487]
[92.88810730 59.02552414]
[98.30673218 73.01261139]
[103.72535706 86.99969482]
[106.29435730 72.22132111]
[112.68697357 58.65170670]
[122.44631195 47.26068878]
[134.87486267 38.86240768]
[149.08433533 34.05709839]
[164.05914307 33.18820572]
[178.72903442 36.31782913]
[192.04550171 43.22229385]
[203.05680847 53.40812302]
[210.97595215 66.14732361]
[215.23693848 80.52938843]
[215.53523254 95.52642822]
[211.84951782 110.06655884]
[204.44320679 123.11058044]
[193.84565735 133.72622681]
[180.81427002 141.15475464]
[166.28044128 144.86524963]
[151.28292847 144.59252930]
[136.89361572 140.35606384]
[124.14093781 132.45863342]
[113.93634796 121.46471405]
[107.01070404 108.16421509]
[106.08728790 123.13576508]
[105.16387177 138.10731506]
[104.24046326 153.07885742]
[103.31704712 168.05041504]
[102.39363098 183.02195740]
[118.08074951 192.62104797]
[126.73557281 208.75247192]
[126.06519318 226.96220398]
[116.33824158 242.27102661]
[100.28807831 250.53599548]
[100.28807831 265.53598022]
[100.28807831 280.53598022]
[100.28807831 295.53598022]
[100.28807831 310.53598022]
[100.28807831 325.53598022]
[100.28807831 340.53598022]
[100.28807831 355.53598022]
[100.28807831 370.53598022]
[100.28807831 385.53598022]
[100.28807831 400.53598022]
[114.89808655 404.27743530]
[128.11825562 411.53540039]
[139.11752319 421.85366821]
[147.20448303 434.58361816]
[151.87078857 448.92504883]
[152.82310486 463.97644043]
[150.00157166 478.79162598]
[143.58354187 492.43933105]
[133.97247314 504.06161499]
[121.77252197 512.92797852]
[107.75057983 518.48095703]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[30 126]
[31 125]
[32 124]
[33 123]
[34 122]
[35 121]
[36 99]
[37 98]
[38 97]
[46 88]
[47 87]
[48 86]
[49 85]
[50 84]
[51 62]
[52 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
