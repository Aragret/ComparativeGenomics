%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCAUUACGGGGGGGGGGUAAACCCACACUCAACAGAAACAAAGCAUACAUCAUUAUUCUCGCACGGAxxxxxxxxxxCCAAUGAUAUGAAAAACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGCCCCCCCCCCACCCCAAUAC\
) } def
/len { sequence length } bind def

/coor [
[101.21147156 544.61895752]
[87.36553192 538.60296631]
[75.65686798 529.07354736]
[66.95434570 516.73785400]
[61.90374374 502.51132202]
[60.87985229 487.44964600]
[63.95865250 472.67050171]
[70.91167450 459.27056885]
[81.22296143 448.24423218]
[94.12734222 440.40972900]
[108.66722870 436.34841919]
[108.66722870 421.34841919]
[108.66722870 406.34841919]
[108.66722870 391.34841919]
[108.66722870 376.34841919]
[108.66722870 361.34841919]
[108.66722870 346.34841919]
[108.66722870 331.34841919]
[108.66722870 316.34841919]
[108.66722870 301.34841919]
[108.66722870 286.34841919]
[94.30136108 282.17718506]
[81.68020630 274.11877441]
[71.83122253 262.81906128]
[65.55902863 249.18821716]
[63.37971115 234.32730103]
[65.47834015 219.43946838]
[71.69329834 205.73243713]
[81.52870178 194.32060242]
[94.19393921 186.13439941]
[108.66722870 181.84440613]
[108.66722870 166.84440613]
[106.64488983 151.98135376]
[102.63715363 137.52667236]
[98.62940979 123.07198334]
[94.62167358 108.61729431]
[89.57376862 102.26097870]
[90.68426514 93.82012177]
[86.97810364 79.28517914]
[71.14567566 77.79661560]
[56.79929352 70.99866486]
[45.65851974 59.72637177]
[39.05175400 45.34986115]
[37.75786591 29.60779381]
[41.91440964 14.39711285]
[51.00325394 1.54445314]
[63.91510773 -7.41320992]
[59.90736771 -21.86789894]
[55.89962769 -36.32258606]
[51.38916397 -41.29885483]
[50.28528595 -46.95683670]
[52.03926086 -51.46228409]
[48.63628387 -66.07117462]
[45.23330688 -80.68006897]
[41.83032990 -95.28896332]
[38.42734909 -109.89785767]
[35.02437210 -124.50674438]
[19.95472908 -124.55725861]
[5.30307913 -128.08230591]
[-8.14043045 -134.89175415]
[-19.65080833 -144.61842346]
[-28.60731697 -156.73773193]
[-34.52693939 -170.59611511]
[-37.09043884 -185.44621277]
[-36.15957260 -200.48715210]
[-31.78453445 -214.90782166]
[-24.20126915 -227.93052673]
[-13.81873322 -238.85296631]
[-1.19684219 -247.08610535]
[12.98372078 -252.18594360]
[27.95821762 -253.87745667]
[42.91909027 -252.06941223]
[57.05951691 -246.85932922]
[69.61692810 -238.52816772]
[79.91410828 -227.52522278]
[87.39575195 -214.44386292]
[91.65837860 -199.98957825]
[92.47211456 -184.94183350]
[89.79307556 -170.11215210]
[83.76573181 -156.30027771]
[74.71514130 -144.25106812]
[63.12938309 -134.61431885]
[49.63326645 -127.90972900]
[53.03624344 -113.30083466]
[56.43922043 -98.69194031]
[59.84219742 -84.08304596]
[63.24517822 -69.47415924]
[66.64815521 -54.86526489]
[70.35431671 -40.33032608]
[74.36205292 -25.87563896]
[78.36979675 -11.42094994]
[92.54217529 -10.73185825]
[105.82566833 -5.68306780]
[116.91137695 3.24216461]
[124.70256805 15.17792130]
[128.42317200 28.95962334]
[127.69503784 43.23764801]
[122.57638550 56.60950470]
[113.55733490 67.75759125]
[101.51303864 75.57901764]
[105.21920013 90.11396027]
[109.07636261 104.60955048]
[113.08409882 119.06423950]
[117.09184265 133.51893616]
[121.09957886 147.97361755]
[125.99874115 133.79623413]
[136.15782166 122.76023865]
[149.88204956 116.70668793]
[164.88191223 116.64543915]
[178.65512085 122.58672333]
[188.90397644 133.53939819]
[193.91874695 147.67630005]
[192.86283875 162.63909912]
[185.91242981 175.93164062]
[174.22697449 185.33644104]
[159.75588989 189.28456116]
[144.91326904 187.11738586]
[132.17520142 179.19644165]
[123.66722870 166.84440613]
[123.66722870 181.84440613]
[138.14051819 186.13439941]
[150.80574036 194.32060242]
[160.64115906 205.73243713]
[166.85610962 219.43946838]
[168.95474243 234.32730103]
[166.77542114 249.18821716]
[160.50323486 262.81906128]
[150.65423584 274.11877441]
[138.03309631 282.17718506]
[123.66722870 286.34841919]
[123.66722870 301.34841919]
[123.66722870 316.34841919]
[123.66722870 331.34841919]
[123.66722870 346.34841919]
[123.66722870 361.34841919]
[123.66722870 376.34841919]
[123.66722870 391.34841919]
[123.66722870 406.34841919]
[123.66722870 421.34841919]
[123.66722870 436.34841919]
[138.20710754 440.40972900]
[151.11149597 448.24423218]
[161.42277527 459.27056885]
[168.37579346 472.67050171]
[171.45460510 487.44964600]
[170.43070984 502.51132202]
[165.38011169 516.73785400]
[156.67758179 529.07354736]
[144.96891785 538.60296631]
[131.12298584 544.61895752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[31 120]
[32 119]
[33 105]
[34 104]
[35 103]
[36 102]
[38 101]
[39 100]
[47 91]
[48 90]
[49 89]
[52 88]
[53 87]
[54 86]
[55 85]
[56 84]
[57 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
