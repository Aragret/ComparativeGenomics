%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUAACAUGGGGGGGGGGCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCAxxxxxxxxxxUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUCCCCCCCCCCAUACUAGCAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 376.29116821]
[71.19830322 370.27511597]
[59.48964310 360.74569702]
[50.78712082 348.41003418]
[45.73651886 334.18353271]
[44.71262741 319.12182617]
[47.79142761 304.34268188]
[54.74444962 290.94274902]
[65.05573273 279.91641235]
[77.96011353 272.08190918]
[92.50000000 268.02059937]
[92.50000000 253.02059937]
[92.50000000 238.02059937]
[92.50000000 223.02059937]
[92.50000000 208.02059937]
[92.50000000 193.02059937]
[92.50000000 178.02059937]
[92.50000000 163.02059937]
[92.50000000 148.02059937]
[92.50000000 133.02059937]
[76.68693542 124.55831909]
[67.41397858 109.20658875]
[52.43426895 109.98643494]
[37.45455170 110.76628113]
[22.47483826 111.54611969]
[7.49512434 112.32596588]
[-7.48459005 113.10581207]
[-22.46430397 113.88565826]
[-26.87745667 128.38737488]
[-35.98682404 140.50328064]
[-48.69240570 148.77032471]
[-63.45994568 152.19021606]
[-78.50618744 150.34997559]
[-92.01422119 143.47184753]
[-102.35289001 132.38636780]
[-108.27375031 118.43218994]
[-109.06182861 103.29433441]
[-104.62196350 88.80077362]
[-95.49028015 76.70166779]
[-82.76948547 68.45806122]
[-67.99566650 65.06539154]
[-52.95284653 66.93334961]
[-39.45750809 73.83636475]
[-29.13928413 84.94087219]
[-23.24415016 98.90594482]
[-8.26443577 98.12609863]
[6.71527910 97.34625244]
[21.69499397 96.56640625]
[36.67470932 95.78656006]
[51.65442276 95.00672150]
[66.63414001 94.22687531]
[70.76163483 82.91995239]
[78.58362579 73.77122498]
[89.11172485 67.93669891]
[87.55414581 53.01778412]
[85.99656677 38.09887314]
[84.43898773 23.17996025]
[69.44823456 21.88611603]
[54.97333145 17.77837753]
[41.53751755 11.00523472]
[29.62649727 1.81153536]
[19.67084694 -9.47037506]
[12.03045464 -22.43266296]
[6.98151636 -36.60675049]
[4.70654869 -51.48025131]
[5.28779030 -66.51549530]
[8.70422840 -81.16897583]
[14.83236313 -94.91097260]
[23.45066452 -107.24472046]
[34.24758530 -117.72436523]
[46.83282852 -125.97107697]
[60.75143814 -131.68673706]
[75.50027466 -134.66473389]
[90.54616547 -134.79739380]
[105.34521484 -132.07995605]
[119.36245728 -126.61062622]
[132.09115601 -118.58712769]
[143.07121277 -108.29950714]
[151.90565491 -96.11965179]
[158.27517700 -82.48785400]
[161.94947815 -67.89690399]
[162.79576111 -52.87424088]
[160.78343201 -37.96293640]
[155.98522949 -23.70202065]
[148.57460022 -10.60701752]
[138.81944275 0.84869826]
[127.07240295 10.25100899]
[113.75811768 17.26002693]
[99.35789490 21.62237930]
[100.91547394 36.54129410]
[102.47306061 51.46020508]
[104.03063965 66.37911987]
[113.76253510 69.06130981]
[122.27129364 74.49315643]
[128.80072021 82.19189453]
[132.77049255 91.47332001]
[147.76319885 91.00527191]
[162.75588989 90.53723145]
[177.74858093 90.06919098]
[192.74128723 89.60115051]
[207.73397827 89.13310242]
[222.72666931 88.66506195]
[234.43469238 75.70899963]
[251.55285645 75.20642853]
[263.52026367 86.98092651]
[278.50000000 86.20108795]
[293.47970581 85.42124176]
[308.45941162 84.64139557]
[323.43911743 83.86154938]
[335.20315552 72.95342255]
[351.04406738 75.49217224]
[358.81005859 89.53029633]
[352.54373169 104.29893494]
[337.05209351 108.46886444]
[324.21896362 98.84126282]
[309.23925781 99.62110901]
[294.25955200 100.40095520]
[279.27984619 101.18080139]
[264.30010986 101.96064758]
[257.07070923 112.67196655]
[244.80183411 117.31407166]
[231.91510010 113.97340393]
[223.19471741 103.65776062]
[208.20202637 104.12580109]
[193.20932007 104.59384155]
[178.21662903 105.06188965]
[163.22393799 105.52993011]
[148.23123169 105.99797058]
[133.23854065 106.46601105]
[124.31447601 123.56726837]
[107.50000000 133.02059937]
[107.50000000 148.02059937]
[107.50000000 163.02059937]
[107.50000000 178.02059937]
[107.50000000 193.02059937]
[107.50000000 208.02059937]
[107.50000000 223.02059937]
[107.50000000 238.02059937]
[107.50000000 253.02059937]
[107.50000000 268.02059937]
[122.03988647 272.08190918]
[134.94427490 279.91641235]
[145.25555420 290.94274902]
[152.20857239 304.34268188]
[155.28736877 319.12182617]
[154.26348877 334.18353271]
[149.21287537 348.41003418]
[140.51036072 360.74569702]
[128.80169678 370.27511597]
[114.95575714 376.29116821]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[28 45]
[54 92]
[55 91]
[56 90]
[57 89]
[96 129]
[97 128]
[98 127]
[99 126]
[100 125]
[101 124]
[102 123]
[105 119]
[106 118]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
