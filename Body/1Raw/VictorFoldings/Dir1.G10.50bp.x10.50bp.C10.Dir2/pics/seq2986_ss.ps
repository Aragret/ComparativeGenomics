%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAUCCUAUUCGGGGGGGGGGUAGAGUCCAUAUCAACAAUAGGGUUUACGACCUCGAUGUUGGAUCAGGACxxxxxxxxxxUCAUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUCAACCCCCCCCCCGCAAUCCUAUAC\
) } def
/len { sequence length } bind def

/coor [
[76.54384613 429.67919922]
[62.38324738 424.52420044]
[49.79350281 416.24197388]
[39.45356369 405.27920532]
[31.92105293 392.22708130]
[27.60218620 377.78948975]
[26.72987747 362.74502563]
[29.35116768 347.90502930]
[35.32469559 334.06979370]
[44.32831192 321.98544312]
[55.87646866 312.30368042]
[69.34638214 305.54660034]
[84.01165009 302.07861328]
[84.01165009 287.07861328]
[84.01165009 272.07861328]
[84.01165009 257.07861328]
[84.01165009 242.07861328]
[84.01165009 227.07861328]
[84.01165009 212.07861328]
[84.01165009 197.07861328]
[84.01165009 182.07861328]
[84.01165009 167.07861328]
[84.01165009 152.07861328]
[76.27434540 139.35134888]
[84.01165009 125.55117035]
[84.01165009 110.55117035]
[75.94859314 97.90257263]
[62.35040665 91.57095337]
[48.75222397 85.23933411]
[35.15404129 78.90771484]
[20.46267891 84.08473969]
[6.76238203 77.46987152]
[1.91741455 63.43199539]
[-11.68076897 57.10037613]
[-25.27895355 50.76875687]
[-38.94060135 44.57526779]
[-52.66431808 38.52054214]
[-66.38803101 32.46582031]
[-80.11174011 26.41109467]
[-92.51584625 35.36014938]
[-107.63404083 36.88882446]
[-121.39608765 30.68620682]
[-130.14714050 18.50938606]
[-131.61831665 3.68706322]
[-145.34202576 -2.36766171]
[-159.06573486 -8.42238617]
[-174.48333740 -3.98646975]
[-187.48023987 -13.39178944]
[-188.08633423 -29.42338943]
[-175.83668518 -39.78319931]
[-160.12817383 -36.52405548]
[-153.01101685 -22.14609909]
[-139.28729248 -16.09137535]
[-125.56358337 -10.03664970]
[-113.62394714 -18.94230080]
[-98.73065948 -20.68754005]
[-84.87186432 -14.70420170]
[-75.80923462 -2.50725603]
[-74.05701447 12.68738079]
[-60.33330536 18.74210548]
[-46.60959244 24.79683113]
[-32.88587952 30.85155487]
[-25.45299339 30.67306900]
[-18.94733429 37.17057419]
[-5.34915018 43.50219345]
[8.24903393 49.83381271]
[22.11096382 44.50629044]
[35.99165344 50.73374176]
[41.48566055 65.30953217]
[55.08384323 71.64115143]
[68.68202972 77.97277069]
[82.28021240 84.30438995]
[73.38222504 72.22855377]
[60.82149124 64.02928162]
[54.53115845 50.41194916]
[56.43112183 35.53276443]
[65.94149017 23.93306541]
[80.15955353 19.15324974]
[94.74575806 22.65218544]
[105.24819183 33.36194611]
[108.46134949 48.01375580]
[103.40402985 62.13638687]
[103.60742188 77.13500977]
[110.61965179 63.87496948]
[117.63188171 50.61492920]
[124.64411163 37.35488892]
[131.65634155 24.09485054]
[130.50672913 7.73604679]
[144.24859619 -1.21342838]
[158.74548340 6.45287704]
[159.08424377 22.84852600]
[144.91638184 31.10707855]
[137.90414429 44.36711884]
[130.89192200 57.62715912]
[123.87969208 70.88719940]
[116.86746216 84.14723969]
[122.25076294 89.36930847]
[136.67887878 85.26693726]
[133.01736450 99.81346130]
[138.40066528 105.03553772]
[151.44142151 97.62346649]
[159.26548767 83.21111298]
[175.66386414 83.05131531]
[183.76728821 97.30847168]
[175.23968506 111.31603241]
[158.85348511 110.66422272]
[145.81272888 118.07628632]
[147.61895752 125.35554504]
[153.03761292 147.19331360]
[167.06660461 139.87908936]
[179.55279541 147.99969482]
[194.54586792 148.45565796]
[209.53892517 148.91162109]
[219.81437683 137.12394714]
[235.27072144 134.75007629]
[248.60997009 142.91087341]
[253.53372192 157.75305176]
[247.71713257 172.26861572]
[233.90663147 179.60372925]
[218.62310791 176.29499817]
[209.08296204 163.90469360]
[194.08988953 163.44873047]
[179.09683228 162.99275208]
[166.14024353 170.33959961]
[152.58164978 162.18638611]
[130.72439575 155.83142090]
[113.78581238 143.90364075]
[102.97880554 128.15008545]
[99.01165009 110.55117035]
[99.01165009 125.55117035]
[106.74894714 139.35134888]
[99.01165009 152.07861328]
[99.01165009 167.07861328]
[99.01165009 182.07861328]
[99.01165009 197.07861328]
[99.01165009 212.07861328]
[99.01165009 227.07861328]
[99.01165009 242.07861328]
[99.01165009 257.07861328]
[99.01165009 272.07861328]
[99.01165009 287.07861328]
[99.01165009 302.07861328]
[113.67691040 305.54660034]
[127.14682007 312.30368042]
[138.69497681 321.98544312]
[147.69859314 334.06979370]
[153.67211914 347.90502930]
[156.29341125 362.74502563]
[155.42111206 377.78948975]
[151.10223389 392.22708130]
[143.56973267 405.27920532]
[133.22979736 416.24197388]
[120.64004517 424.52420044]
[106.47944641 429.67919922]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[25 130]
[26 129]
[27 72]
[28 71]
[29 70]
[30 69]
[33 66]
[34 65]
[35 64]
[36 62]
[37 61]
[38 60]
[39 59]
[44 54]
[45 53]
[46 52]
[83 96]
[84 95]
[85 94]
[86 93]
[87 92]
[100 107]
[101 106]
[109 125]
[111 123]
[112 122]
[113 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
