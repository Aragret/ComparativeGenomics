%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAAAGCCCGGGGGGGGGGUCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCxxxxxxxxxxCAACAAACAAUGUUCAACCAGUAACUACUACUAAUCAACGCCCAUAAUCACCCCCCCCCCUACAAAGCCC\
) } def
/len { sequence length } bind def

/coor [
[105.79656982 465.20187378]
[91.95063019 459.18582153]
[80.24196625 449.65640259]
[71.53944397 437.32073975]
[66.48883820 423.09423828]
[65.46495056 408.03253174]
[68.54374695 393.25338745]
[75.49677277 379.85345459]
[85.80805206 368.82711792]
[98.71243286 360.99261475]
[113.25231934 356.93130493]
[113.25231934 341.93130493]
[113.25231934 326.93130493]
[113.25231934 311.93130493]
[113.25231934 296.93130493]
[113.25231934 281.93130493]
[113.25231934 266.93130493]
[113.25231934 251.93130493]
[113.25231934 236.93130493]
[113.25231934 221.93130493]
[113.25231934 206.93130493]
[105.51502228 194.20402527]
[113.25231934 180.40385437]
[105.51502228 167.67658997]
[113.25231934 153.87641907]
[113.25231934 138.87641907]
[87.83002472 132.58192444]
[75.38180542 114.33581543]
[78.08326721 96.49278259]
[64.30088806 90.57281494]
[50.51850510 84.65285492]
[36.73612213 78.73288727]
[22.95374107 72.81292725]
[7.22015619 74.47572327]
[-1.42034948 62.34349442]
[-17.15393448 64.00628662]
[-25.79443932 51.87406158]
[-39.57682037 45.95409775]
[-53.35920334 40.03413773]
[-67.14158630 34.11417389]
[-78.00467682 44.74721909]
[-92.11181641 50.40911102]
[-107.31176758 50.23644638]
[-121.28665924 44.25556183]
[-131.90541077 33.37849045]
[-137.54873657 19.26391411]
[-137.35607910 4.06420040]
[-131.35681152 -9.90280533]
[-120.46578217 -20.50723648]
[-106.34379578 -26.13199234]
[-91.14434814 -25.91934013]
[-77.18524170 -19.90170670]
[-66.59514618 -8.99673939]
[-60.98897552 5.13263607]
[-61.22162247 20.33179092]
[-47.43923950 26.25175476]
[-33.65685654 32.17171860]
[-19.87447739 38.09168243]
[-5.12669992 36.00545120]
[4.49961376 48.56111526]
[19.24739075 46.47488403]
[28.87370300 59.03054428]
[42.65608597 64.95050812]
[56.43846512 70.87047577]
[70.22084808 76.79043579]
[84.00322723 82.71039581]
[74.74623108 70.90751648]
[65.48923492 59.10463333]
[52.45958328 51.67307281]
[43.57236099 39.58930969]
[40.36023331 24.93727112]
[43.37715149 10.24379635]
[52.10282516 -1.95713031]
[65.03245544 -9.56137848]
[79.93624878 -11.25754642]
[94.24394226 -6.75311947]
[105.48809052 3.17508578]
[111.72955322 16.81488419]
[111.89196014 31.81400490]
[105.94729614 45.58575439]
[105.64534760 60.58271408]
[105.34339905 75.57967377]
[112.79830933 62.56336594]
[120.25321960 49.54705811]
[127.70812988 36.53074646]
[124.90667725 20.73418427]
[135.61795044 8.79064369]
[151.62518311 9.86218834]
[160.64898682 23.12682152]
[155.76707458 38.40904999]
[140.72444153 43.98565674]
[133.26953125 57.00196838]
[125.81462097 70.01828003]
[118.35971069 83.03458405]
[123.05329132 88.88439941]
[131.27966309 76.34140015]
[145.75079346 80.28931427]
[146.46774292 95.27217102]
[132.44044495 100.58402252]
[137.13403320 106.43383026]
[151.45663452 101.97702026]
[165.77922058 97.52020264]
[180.10182190 93.06338501]
[188.80595398 79.58683014]
[204.78300476 78.13294220]
[215.77671814 89.81701660]
[213.35368347 105.67603302]
[199.37263489 113.54431152]
[184.55863953 107.38598633]
[170.23603821 111.84279633]
[155.91343689 116.29961395]
[141.59085083 120.75643158]
[156.29681396 123.71182251]
[171.17156982 121.77746582]
[185.32476807 126.74606323]
[195.72628784 137.55384827]
[200.14921570 151.88694763]
[197.64662170 166.67671204]
[188.75430298 178.75672913]
[175.37605286 185.54071045]
[160.37608337 185.57626343]
[146.96583557 178.85575867]
[138.01635742 166.81802368]
[135.44371033 152.04014587]
[128.25231934 138.87641907]
[128.25231934 153.87641907]
[135.98962402 167.67658997]
[128.25231934 180.40385437]
[135.98962402 194.20402527]
[128.25231934 206.93130493]
[128.25231934 221.93130493]
[128.25231934 236.93130493]
[128.25231934 251.93130493]
[128.25231934 266.93130493]
[128.25231934 281.93130493]
[128.25231934 296.93130493]
[128.25231934 311.93130493]
[128.25231934 326.93130493]
[128.25231934 341.93130493]
[128.25231934 356.93130493]
[142.79220581 360.99261475]
[155.69659424 368.82711792]
[166.00787354 379.85345459]
[172.96089172 393.25338745]
[176.03968811 408.03253174]
[175.01580811 423.09423828]
[169.96519470 437.32073975]
[161.26268005 449.65640259]
[149.55401611 459.18582153]
[135.70808411 465.20187378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[25 126]
[26 125]
[29 66]
[30 65]
[31 64]
[32 63]
[33 62]
[35 60]
[37 58]
[38 57]
[39 56]
[40 55]
[82 94]
[83 93]
[84 92]
[85 91]
[100 112]
[101 111]
[102 110]
[103 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
