%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACCCCCAUGGGGGGGGGGGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACxxxxxxxxxxGACCAAUGAUAUGAAAAACCAUCGUUGUAUUUCAACUACAAGAACACCAACCCCCCCCCCUGACCCCAAU\
) } def
/len { sequence length } bind def

/coor [
[74.33108521 363.86264038]
[61.11088943 356.59017944]
[50.22408676 346.14318848]
[42.41295624 333.23391724]
[38.21007538 318.74261475]
[37.90200424 303.65728760]
[41.50974274 289.00643921]
[48.78731537 275.78906250]
[59.23852539 264.90628052]
[72.15078735 257.10015869]
[86.64372253 252.90286255]
[86.33166504 237.90611267]
[86.01960754 222.90936279]
[85.70755768 207.91259766]
[85.39550018 192.91584778]
[85.08344269 177.91909790]
[84.77138519 162.92234802]
[84.45932770 147.92558289]
[84.14727020 132.92883301]
[72.25489044 123.78710175]
[57.68218994 127.34185791]
[43.10948944 130.89662170]
[36.78261566 147.83131409]
[21.71576118 157.53555298]
[3.99269724 156.31340027]
[-9.36222935 144.83674622]
[-23.77444458 148.99462891]
[-38.18666077 153.15252686]
[-52.59887695 157.31040955]
[-66.14134216 167.51029968]
[-79.69155121 157.32069397]
[-73.65122986 141.47926331]
[-56.75676346 142.89819336]
[-42.34454727 138.74031067]
[-27.93233299 134.58241272]
[-13.52011681 130.42453003]
[-11.10081959 118.45425415]
[-3.75792527 108.60556030]
[7.15160179 102.80197144]
[19.56707382 102.20976257]
[31.11324501 107.00416565]
[39.55472565 116.32392120]
[54.12742996 112.76915741]
[68.70013428 109.21439362]
[77.15781403 81.32508087]
[102.27185822 73.71692657]
[107.75888824 59.75653458]
[103.32548523 47.59928513]
[108.23175049 36.06032944]
[119.32891846 31.14502716]
[125.10519409 17.30180931]
[130.88146973 3.45859170]
[136.65773010 -10.38462639]
[142.43400574 -24.22784424]
[148.21028137 -38.07106018]
[139.26274109 -47.64672089]
[138.45870972 -63.51029587]
[137.52308655 -78.48108673]
[136.58744812 -93.45188141]
[135.65182495 -108.42266846]
[120.76934052 -110.73042297]
[106.73106384 -116.18394470]
[94.19358826 -124.52815247]
[83.74332428 -135.37278748]
[75.86903381 -148.21060181]
[70.93901825 -162.44116211]
[69.18386841 -177.39889526]
[70.68567657 -192.38417053]
[75.37419128 -206.69612122]
[83.03012848 -219.66534424]
[93.29540253 -230.68524170]
[105.68988800 -239.24040222]
[119.63388062 -244.93067932]
[134.47518921 -247.48992920]
[149.51965332 -246.79844666]
[164.06361389 -242.88858032]
[177.42683411 -235.94320679]
[188.98429871 -226.28715515]
[198.19541931 -214.37207031]
[204.62940979 -200.75524902]
[207.98530579 -186.07356262]
[208.10615540 -171.01368713]
[204.98632812 -156.28002930]
[198.77171326 -142.56170654]
[189.75299072 -130.50032043]
[178.35200500 -120.66003418]
[165.10195923 -113.50107574]
[150.62261963 -109.35829926]
[151.55824280 -94.38750458]
[152.49388123 -79.41671753]
[153.42950439 -64.44592285]
[166.28790283 -56.72183990]
[179.94415283 -62.92724609]
[193.60038757 -69.13265228]
[207.25662231 -75.33805847]
[220.91287231 -81.54346466]
[234.36883545 -88.17196655]
[247.61141968 -95.21710205]
[260.85400391 -102.26223755]
[269.07736206 -116.45056152]
[285.47378540 -116.15251923]
[293.17608643 -101.67471313]
[284.26074219 -87.91066742]
[267.89913940 -89.01965332]
[254.65655518 -81.97451782]
[241.41397095 -74.92938232]
[240.04199219 -71.61499023]
[236.96057129 -68.82097626]
[232.44195557 -67.35997009]
[227.11827087 -67.88722229]
[213.46203613 -61.68181992]
[199.80580139 -55.47640991]
[186.14955139 -49.27100372]
[172.49331665 -43.06559753]
[162.05349731 -32.29478836]
[156.27722168 -18.45157051]
[150.50096130 -4.60835361]
[144.72468567 9.23486423]
[138.94841003 23.07808113]
[133.17213440 36.92129898]
[136.37699890 54.14711761]
[121.71928406 65.24356842]
[116.23224640 79.20395660]
[122.49567413 84.77778625]
[126.84091949 92.23046112]
[128.70954895 100.90086365]
[127.77097321 109.96448517]
[123.96910095 118.51184082]
[117.54207611 125.63959503]
[109.01198578 130.54545593]
[99.14402771 132.61677551]
[99.45608521 147.61352539]
[99.76814270 162.61029053]
[100.08019257 177.60704041]
[100.39225006 192.60379028]
[100.70430756 207.60054016]
[101.01636505 222.59730530]
[101.32842255 237.59405518]
[101.64048004 252.59080505]
[116.29547119 256.18157959]
[129.52127075 263.44384766]
[140.41615295 273.88241577]
[148.23724365 286.78564453]
[152.45130920 301.27371216]
[152.77104187 316.35879517]
[149.17460632 331.01242065]
[141.90724182 344.23541260]
[131.46444702 355.12625122]
[118.55821228 362.94235229]
[104.06851959 367.15084839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 44]
[21 43]
[22 42]
[26 36]
[27 35]
[28 34]
[29 33]
[46 123]
[47 122]
[50 120]
[51 119]
[52 118]
[53 117]
[54 116]
[55 115]
[57 91]
[58 90]
[59 89]
[60 88]
[92 114]
[93 113]
[94 112]
[95 111]
[96 110]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
