%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUACGCCCGGGGGGGGGGUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAAGUCACCxxxxxxxxxxUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUACCCUCCCUUAGCAGGGCCCCCCCCCCAACUACUCCC\
) } def
/len { sequence length } bind def

/coor [
[70.39640808 398.59646606]
[56.55046844 392.58044434]
[44.84180832 383.05102539]
[36.13928223 370.71536255]
[31.08868217 356.48883057]
[30.06479073 341.42715454]
[33.14358902 326.64801025]
[40.09661102 313.24807739]
[50.40789413 302.22174072]
[63.31227493 294.38723755]
[77.85216522 290.32592773]
[77.85216522 275.32592773]
[77.85216522 260.32592773]
[77.85216522 245.32591248]
[77.85216522 230.32591248]
[77.85216522 215.32591248]
[77.85216522 200.32591248]
[77.85216522 185.32591248]
[77.85216522 170.32591248]
[77.85216522 155.32591248]
[81.09796906 92.95327759]
[70.88448334 81.96761322]
[55.82134247 77.12899780]
[52.82198334 62.53950882]
[42.60850525 51.55384445]
[32.28129959 40.67501831]
[21.84148788 29.90421104]
[11.40167522 19.13340187]
[-2.50088096 13.50144482]
[-17.49357605 13.96948719]
[-32.48059464 14.59346485]
[-47.46030807 15.37330914]
[-62.44002151 16.15315437]
[-77.41973877 16.93300056]
[-90.87428284 26.30887985]
[-105.60438538 19.10081673]
[-106.45697021 2.72384644]
[-92.55497742 -5.97480679]
[-78.19958496 1.95328546]
[-63.21986771 1.17344034]
[-48.24015427 0.39359522]
[-33.26043701 -0.38624990]
[-26.70175362 -3.89756083]
[-17.96161842 -1.02320910]
[-2.96892309 -1.49125123]
[4.75516176 -14.34965324]
[-1.87333667 -27.80561829]
[-8.50183487 -41.26158524]
[-22.98777962 -37.20300674]
[-37.97285461 -35.87555695]
[-52.94667816 -37.32444763]
[-67.39924622 -41.50032806]
[-80.83830261 -48.26097107]
[-92.80612946 -57.37611389]
[-102.89509583 -68.53529358]
[-110.76158905 -81.35843658]
[-116.13766479 -95.40879059]
[-118.84022522 -110.20780945]
[-118.77721405 -125.25143433]
[-115.95079041 -140.02729797]
[-110.45720673 -154.03211975]
[-102.48358154 -166.78892517]
[-92.30149078 -177.86320496]
[-80.25773621 -186.87777710]
[-66.76251221 -193.52560425]
[-52.27547455 -197.58027649]
[-37.29004288 -198.90368652]
[-22.31661034 -197.45075989]
[-7.86517096 -193.27098083]
[5.57206631 -186.50672913]
[17.53743362 -177.38835144]
[27.62339401 -166.22645569]
[35.48642731 -153.40118408]
[40.85871506 -139.34938049]
[43.55728531 -124.54964447]
[43.49022293 -109.50603485]
[40.65981293 -94.73094177]
[35.16245651 -80.72759247]
[27.18539238 -67.97294617]
[17.00031662 -56.90140915]
[4.95413017 -47.89008331]
[11.58262920 -34.43411636]
[18.21112823 -20.97815132]
[24.92740250 -11.04169083]
[25.98840332 -0.24199528]
[22.17248344 8.69358921]
[32.61229706 19.46439743]
[43.05210876 30.23520660]
[50.01080704 32.86620712]
[53.59416962 41.34036255]
[63.80764771 52.32602692]
[78.14025879 56.37887955]
[81.87014771 71.75413513]
[92.08363342 82.73979950]
[87.33534241 68.51117706]
[93.35408020 54.77164078]
[107.03234863 48.61494827]
[121.30803680 53.21981049]
[128.81056213 66.20873260]
[125.66637421 80.87549591]
[113.49681854 89.64814758]
[128.20478821 86.70266724]
[142.91275024 83.75717926]
[154.92489624 73.46063995]
[168.92372131 78.54811096]
[183.63168335 75.60262299]
[195.58314514 64.37344360]
[211.20335388 69.36753082]
[214.42358398 85.44740295]
[201.93113708 96.07145691]
[186.57716370 90.31058502]
[171.86920166 93.25606537]
[160.90905762 103.34192657]
[145.85823059 98.46514130]
[131.15026855 101.41062927]
[116.44230652 104.35610962]
[115.43113708 111.78763580]
[113.40880585 126.65068054]
[112.39763641 134.08219910]
[125.78392029 140.85031128]
[139.17021179 147.61843872]
[152.55648804 154.38655090]
[168.89147949 152.93742371]
[178.09121704 166.51301575]
[170.69180298 181.14793396]
[154.30511475 181.78701782]
[145.78837585 167.77282715]
[132.40208435 161.00471497]
[119.01580811 154.23660278]
[105.62951660 147.46849060]
[92.85216522 155.32591248]
[92.85216522 170.32591248]
[92.85216522 185.32591248]
[92.85216522 200.32591248]
[92.85216522 215.32591248]
[92.85216522 230.32591248]
[92.85216522 245.32591248]
[92.85216522 260.32592773]
[92.85216522 275.32592773]
[92.85216522 290.32592773]
[107.39205170 294.38723755]
[120.29643250 302.22174072]
[130.60771179 313.24807739]
[137.56072998 326.64801025]
[140.63954163 341.42715454]
[139.61564636 356.48883057]
[134.56504822 370.71536255]
[125.86251831 383.05102539]
[114.15385437 392.58044434]
[100.30791473 398.59646606]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 94]
[22 93]
[24 91]
[25 90]
[26 88]
[27 87]
[28 86]
[29 45]
[30 44]
[31 42]
[32 41]
[33 40]
[34 39]
[46 83]
[47 82]
[48 81]
[101 116]
[102 115]
[103 114]
[105 112]
[106 111]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
