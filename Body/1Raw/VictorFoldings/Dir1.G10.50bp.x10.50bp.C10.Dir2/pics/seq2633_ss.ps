%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUACCCUCGGGGGGGGGGACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAxxxxxxxxxxCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAAAUUCUUCUUAGUAGCCCCCCCCCCCUAUUACCUUC\
) } def
/len { sequence length } bind def

/coor [
[106.24479675 357.65682983]
[92.39885712 351.64077759]
[80.69019318 342.11135864]
[71.98767090 329.77569580]
[66.93706512 315.54919434]
[65.91317749 300.48748779]
[68.99197388 285.70834351]
[75.94499969 272.30841064]
[86.25627899 261.28207397]
[99.16065979 253.44757080]
[113.70054626 249.38626099]
[113.70054626 234.38626099]
[113.70054626 219.38626099]
[113.70054626 204.38626099]
[113.70054626 189.38626099]
[113.70054626 174.38626099]
[113.70054626 159.38626099]
[113.70054626 144.38626099]
[113.70054626 129.38626099]
[113.70054626 114.38626099]
[99.82902527 118.23587799]
[88.32366180 111.80921936]
[74.09687805 116.56303406]
[59.87010193 121.31684875]
[45.64332199 126.07066345]
[41.94545746 141.04829407]
[30.72140694 151.63244629]
[15.55272770 154.44575500]
[1.27968919 148.59051514]
[-7.54323435 135.93508911]
[-8.10068035 120.51780701]
[-0.21476904 107.25823975]
[13.59813309 100.38748932]
[28.93037987 102.09796906]
[40.88950729 111.84388733]
[55.11628723 107.09007263]
[69.34306335 102.33625793]
[83.56984711 97.58244324]
[86.52342224 89.21798706]
[93.56763458 83.28414154]
[102.98194122 81.67847443]
[112.23104858 85.18121338]
[118.64756012 93.14887238]
[125.27606201 79.69290161]
[131.90455627 66.23693848]
[127.05117035 51.43550873]
[133.96508789 37.88367081]
[148.10591125 33.34792328]
[154.73440552 19.89195633]
[161.36289978 6.43599129]
[167.99140930 -7.01997423]
[172.59696960 -21.29543495]
[175.08209229 -36.08814240]
[177.56719971 -50.88084793]
[180.05232239 -65.67355347]
[182.53744507 -80.46626282]
[185.02256775 -95.25897217]
[170.68287659 -99.74082947]
[157.08705139 -106.13359070]
[144.48837280 -114.31816101]
[133.12156677 -124.14208221]
[123.19837189 -135.42233276]
[114.90364838 -147.94874573]
[108.39192963 -161.48800659]
[103.78452301 -175.78784180]
[101.16726685 -190.58189392]
[100.58890533 -205.59452820]
[102.06022644 -220.54608154]
[105.55381775 -235.15802002]
[111.00459290 -249.15811157]
[118.31100464 -262.28558350]
[127.33693695 -274.29583740]
[137.91426086 -284.96511841]
[149.84590149 -294.09472656]
[162.90959167 -301.51455688]
[176.86196899 -307.08633423]
[191.44311523 -310.70632935]
[206.38136292 -312.30706787]
[221.39843750 -311.85873413]
[236.21459961 -309.36965942]
[250.55380249 -304.88626099]
[264.14892578 -298.49203491]
[276.74670410 -290.30609131]
[288.11245728 -280.48092651]
[298.03442383 -269.19961548]
[306.32778931 -256.67230225]
[312.83804321 -243.13233948]
[317.44390869 -228.83200073]
[320.05957031 -214.03767395]
[320.63629150 -199.02497864]
[319.16336060 -184.07357788]
[315.66818237 -169.46202087]
[310.21591187 -155.46250916]
[302.90808105 -142.33584595]
[293.88082886 -130.32656860]
[283.30236816 -119.65840912]
[271.36972046 -110.53009796]
[258.30523682 -103.11170197]
[244.35224915 -97.54141235]
[229.77072144 -93.92300415]
[214.83230591 -92.32389069]
[199.81526184 -92.77384949]
[197.33015442 -77.98114777]
[194.84503174 -63.18843842]
[192.35990906 -48.39572906]
[189.87478638 -33.60302353]
[187.38967896 -18.81031609]
[197.66529846 -29.73788261]
[211.29626465 -35.99860382]
[226.28108215 -36.67319107]
[240.41946411 -31.66259193]
[251.63540649 -21.70253372]
[258.28201294 -8.25550175]
[259.38333130 6.70401430]
[254.77763367 20.97943497]
[245.14122009 32.47463608]
[231.88905334 39.50171661]
[216.96699524 41.02886200]
[202.56613159 36.83183289]
[190.80099487 27.52689552]
[183.39913940 14.48034382]
[181.44737244 -0.39147568]
[174.81887817 13.06448936]
[168.19036865 26.52045441]
[161.56187439 39.97642136]
[166.58392334 53.95192337]
[160.05335999 67.69261169]
[145.36051941 72.86544037]
[138.73202515 86.32140350]
[132.10353088 99.77736664]
[128.70054626 114.38626099]
[128.70054626 129.38626099]
[128.70054626 144.38626099]
[128.70054626 159.38626099]
[128.70054626 174.38626099]
[128.70054626 189.38626099]
[128.70054626 204.38626099]
[128.70054626 219.38626099]
[128.70054626 234.38626099]
[128.70054626 249.38626099]
[143.24043274 253.44757080]
[156.14482117 261.28207397]
[166.45610046 272.30841064]
[173.40911865 285.70834351]
[176.48791504 300.48748779]
[175.46403503 315.54919434]
[170.41342163 329.77569580]
[161.71090698 342.11135864]
[150.00224304 351.64077759]
[136.15631104 357.65682983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 38]
[23 37]
[24 36]
[25 35]
[43 130]
[44 129]
[45 128]
[48 125]
[49 124]
[50 123]
[51 122]
[52 107]
[53 106]
[54 105]
[55 104]
[56 103]
[57 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
