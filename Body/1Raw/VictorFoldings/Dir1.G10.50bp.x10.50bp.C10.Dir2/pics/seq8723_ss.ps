%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCACAAUUCUGGGGGGGGGGAAUUCUACUGACUAUCCUAGAAAUCGCUGUCGCCUUAAUCCAAGCCUACGxxxxxxxxxxCCCUUAAACACCCCUCCCCACAUCAAGCCCGAAUGAUAUUUCCUAUUCGCCCCCCCCCCCCUACACAAUUCU\
) } def
/len { sequence length } bind def

/coor [
[94.64585876 400.71636963]
[80.94370270 394.45547485]
[68.97859192 385.30212402]
[59.35067749 373.71545410]
[52.54290009 360.27664185]
[48.89673233 345.65975952]
[48.59506226 330.59799194]
[51.65302658 315.84683228]
[57.91723633 302.14620972]
[67.07348633 290.18328857]
[78.66249084 280.55819702]
[92.10295868 273.75366211]
[106.72072601 270.11105347]
[106.41671753 255.11412048]
[106.11271667 240.11720276]
[105.80870819 225.12028503]
[105.50470734 210.12336731]
[105.20069885 195.12644958]
[104.89669800 180.12953186]
[104.59268951 165.13261414]
[104.28868866 150.13569641]
[103.98468781 135.13877869]
[89.93084717 131.90965271]
[79.09116364 123.63646698]
[73.02061462 112.30726624]
[58.24267197 114.87871552]
[43.46472549 117.45016479]
[28.68678093 120.02161407]
[13.90883636 122.59306335]
[8.69870472 137.04124451]
[-3.04784012 146.93641663]
[-18.17103767 149.61680603]
[-32.60282135 144.36140442]
[-42.46111679 132.58390808]
[-45.09408951 117.45237732]
[-39.79348373 103.03713989]
[-27.98513794 93.21581268]
[-12.84543610 90.63027954]
[1.55311906 95.97604370]
[11.33738708 107.81511688]
[26.11533165 105.24366760]
[40.89327621 102.67221832]
[55.67122269 100.10076904]
[70.44916534 97.52931976]
[72.76298523 88.27391815]
[77.89592743 80.23220062]
[85.31671143 74.23651886]
[94.25727081 70.90744019]
[95.16878510 55.93516159]
[96.08029938 40.96287918]
[81.27540588 38.46340942]
[66.82007599 34.40441132]
[52.87809372 28.83187294]
[39.60742950 21.80894089]
[27.15845108 13.41518879]
[15.67221928 3.74572325]
[5.27887869 -7.08989239]
[-3.90380597 -18.96888161]
[-11.77178764 -31.75664902]
[-18.23591614 -45.30829620]
[-23.22294617 -59.47027206]
[-26.67637444 -74.08211517]
[-28.55706787 -88.97825623]
[-28.84371758 -103.98992157]
[-27.53307533 -118.94699860]
[-24.63999367 -133.68003845]
[-20.19725037 -148.02207947]
[-14.25518799 -161.81062317]
[-6.88113260 -174.88943481]
[1.84136093 -187.11032104]
[11.81346035 -198.33482361]
[22.92217445 -208.43574524]
[35.04163361 -217.29862976]
[48.03451157 -224.82307434]
[61.75359344 -230.92379761]
[76.04343414 -235.53169250]
[90.74210358 -238.59454346]
[105.68307495 -240.07763672]
[120.69704437 -239.96417236]
[135.61389160 -238.25544739]
[150.26460266 -234.97080994]
[164.48316956 -230.14747620]
[178.10847473 -223.84010315]
[190.98616028 -216.12016296]
[202.97027588 -207.07511902]
[213.92507935 -196.80746460]
[223.72639465 -185.43354797]
[232.26319885 -173.08222961]
[239.43875122 -159.89346313]
[245.17175293 -146.01669312]
[249.39723206 -131.60914612]
[252.06732178 -116.83406830]
[253.15176392 -101.85888672]
[252.63827515 -86.85327911]
[250.53266907 -71.98725891]
[246.85881042 -57.42927551]
[241.65830994 -43.34428406]
[234.99012756 -29.89187813]
[226.92977905 -17.22448158]
[217.56861877 -5.48562622]
[207.01269531 5.19167614]
[195.38163757 14.68644524]
[182.80723572 22.89109612]
[169.43194580 29.71266556]
[155.40733337 35.07386017]
[140.89230347 38.91393280]
[126.05133820 41.18936920]
[111.05257416 41.87439346]
[110.14105988 56.84667206]
[109.22955322 71.81895447]
[128.91867065 85.14929962]
[133.72688293 110.63526154]
[148.38847351 113.80348206]
[163.05006409 116.97170258]
[177.71166992 120.13992310]
[192.37326050 123.30814362]
[202.62927246 111.87530518]
[217.23263550 107.11744690]
[232.25512695 110.31439972]
[243.65576172 120.60620117]
[248.36782837 135.22441101]
[245.12379456 150.23680115]
[234.79631042 161.60511780]
[220.16340637 166.27133179]
[205.16125488 162.98027039]
[193.82536316 152.61720276]
[189.20503235 137.96974182]
[174.54344177 134.80151367]
[159.88185120 131.63330078]
[145.22026062 128.46507263]
[130.55865479 125.29685211]
[118.98160553 134.83476257]
[119.28560638 149.83169556]
[119.58961487 164.82861328]
[119.89361572 179.82553101]
[120.19762421 194.82244873]
[120.50162506 209.81936646]
[120.80562592 224.81628418]
[121.10963440 239.81320190]
[121.41363525 254.81011963]
[121.71764374 269.80703735]
[136.47102356 272.85427856]
[150.17620850 279.10852051]
[162.14575195 288.25607300]
[171.77928162 299.83807373]
[178.59356689 313.27359009]
[182.24682617 327.88870239]
[182.55578613 342.95034790]
[179.50497437 357.70297241]
[173.24740601 371.40664673]
[164.09695435 383.37396240]
[152.51261902 393.00469971]
[139.07543945 399.81573486]
[124.45944977 403.46542358]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[48 110]
[49 109]
[50 108]
[112 131]
[113 130]
[114 129]
[115 128]
[116 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
