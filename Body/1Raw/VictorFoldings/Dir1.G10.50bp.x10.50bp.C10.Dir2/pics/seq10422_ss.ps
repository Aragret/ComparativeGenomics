%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACAUACUAGGGGGGGGGGGUCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCAxxxxxxxxxxCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCCCCCCCCCCCAACAUACUCG\
) } def
/len { sequence length } bind def

/coor [
[83.84688568 390.70147705]
[70.62866211 383.42541504]
[59.74470139 372.97546387]
[51.93708038 360.06408691]
[47.73814011 345.57162476]
[47.43417358 330.48620605]
[51.04589844 315.83636475]
[58.32706451 302.62094116]
[68.78123474 291.74102783]
[81.69561768 283.93838501]
[96.18969727 279.74505615]
[95.88171387 264.74819946]
[95.57373810 249.75137329]
[95.26576233 234.75453186]
[94.95778656 219.75770569]
[94.64980316 204.76086426]
[94.34182739 189.76402283]
[94.03385162 174.76718140]
[93.72587585 159.77033997]
[93.41789246 144.77351379]
[93.10991669 129.77667236]
[78.38290405 124.12495422]
[67.70149231 111.31382751]
[64.44499969 94.03193665]
[70.29641724 76.48940277]
[84.60802460 63.39251328]
[70.67730713 57.83057404]
[56.74659348 52.26863861]
[42.81587601 46.70669937]
[28.88516045 41.14476395]
[14.95444393 35.58282471]
[1.02372801 30.02088928]
[-12.90698814 24.45895195]
[-21.27046394 36.97877502]
[-32.05447388 47.48586273]
[-44.78757858 55.52088547]
[-58.91315079 60.73259735]
[-73.81367493 62.89315414]
[-88.83776855 61.90811157]
[-103.32864380 57.82052994]
[-116.65281677 50.80910110]
[-128.22781372 41.18033600]
[-137.54762268 29.35515785]
[-144.20481873 15.85051823]
[-147.90840149 1.25677836]
[-148.49642944 -13.78808498]
[-145.94323730 -28.62637329]
[-140.36039734 -42.60942459]
[-131.99200439 -55.12595367]
[-121.20385742 -65.62879944]
[-108.46759033 -73.65881348]
[-94.33996582 -78.86496735]
[-79.43859100 -81.01966095]
[-64.41488647 -80.02870941]
[-49.92562485 -75.93542480]
[-36.60421371 -68.91875458]
[-25.03300667 -59.28543854]
[-15.71784878 -47.45659637]
[-9.06595802 -33.94933701]
[-5.36812735 -19.35414124]
[-4.78600883 -4.30904818]
[-7.34505081 10.52823544]
[6.58566523 16.09017372]
[20.51638222 21.65211105]
[34.44709778 27.21404839]
[48.37781525 32.77598572]
[62.30852890 38.33792114]
[76.23924255 43.89986038]
[90.16996002 49.46179581]
[80.61114502 37.90199661]
[66.84260559 31.94991493]
[56.91102982 20.70874786]
[52.70106506 6.31165695]
[55.01161194 -8.50932026]
[63.40421295 -20.94170952]
[76.28625488 -28.62629890]
[91.21321106 -30.10483932]
[105.35248566 -25.09675598]
[116.02096558 -14.55239964]
[121.19417572 -0.47270051]
[119.89041901 14.47053337]
[112.35557556 27.44328499]
[111.54000092 42.42109680]
[119.43648529 29.66783905]
[127.33296204 16.91458130]
[120.59671021 3.03559136]
[122.45603943 -12.27931690]
[132.31765747 -24.14321136]
[147.03475952 -28.77036858]
[161.91116333 -24.68427467]
[172.19985962 -13.18879318]
[174.61778259 2.04791403]
[168.39335632 16.16386604]
[155.51278687 24.65471649]
[140.08622742 24.81106377]
[132.18974304 37.56431961]
[124.29325867 50.31757736]
[132.05839539 63.15123367]
[147.01966858 62.07416153]
[161.98095703 60.99709320]
[176.94223022 59.92002106]
[191.90351868 58.84295273]
[206.86479187 57.76588440]
[221.82608032 56.68881226]
[236.78735352 55.61174393]
[251.74864197 54.53467560]
[256.88812256 40.19921112]
[267.41876221 29.19802666]
[281.51599121 23.43713760]
[296.73739624 23.91465569]
[310.44583130 30.54784775]
[320.26617432 42.18747330]
[324.49697876 56.81689453]
[322.40530396 71.90148163]
[314.35345459 84.82772827]
[301.73654175 93.35609436]
[286.74047852 96.00898743]
[271.96340942 92.32677460]
[259.96560669 82.94741821]
[252.82571411 69.49595642]
[237.86442566 70.57302094]
[222.90315247 71.65009308]
[207.94186401 72.72716522]
[192.98059082 73.80423737]
[178.01930237 74.88130188]
[163.05802917 75.95837402]
[148.09674072 77.03544617]
[133.13546753 78.11251068]
[136.62527466 101.64721680]
[126.27029419 120.96893311]
[108.10675812 129.46868896]
[108.41473389 144.46553040]
[108.72270966 159.46237183]
[109.03068542 174.45921326]
[109.33866882 189.45603943]
[109.64664459 204.45288086]
[109.95462036 219.44972229]
[110.26259613 234.44656372]
[110.57057953 249.44338989]
[110.87855530 264.44024658]
[111.18653107 279.43707275]
[125.84054565 283.03182983]
[139.06437683 290.29766846]
[149.95640564 300.73922729]
[157.77400208 313.64456177]
[161.98413086 328.13378906]
[162.29974365 343.21896362]
[158.69934082 357.87158203]
[151.42837524 371.09262085]
[140.98260498 381.98062134]
[128.07426453 389.79321289]
[113.58341980 393.99777222]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[26 69]
[27 68]
[28 67]
[29 66]
[30 65]
[31 64]
[32 63]
[33 62]
[83 97]
[84 96]
[85 95]
[98 128]
[99 127]
[100 126]
[101 125]
[102 124]
[103 123]
[104 122]
[105 121]
[106 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
