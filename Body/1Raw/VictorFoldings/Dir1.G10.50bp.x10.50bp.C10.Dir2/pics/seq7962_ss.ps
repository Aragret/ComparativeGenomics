%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAACACCGGGGGGGGGGUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAxxxxxxxxxxAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUCCCCCCCCCCAAUCAACACC\
) } def
/len { sequence length } bind def

/coor [
[63.87155914 359.00335693]
[50.02561951 352.98733521]
[38.31695938 343.45791626]
[29.61443520 331.12225342]
[24.56383324 316.89572144]
[23.53994179 301.83404541]
[26.61874008 287.05487061]
[33.57176208 273.65493774]
[43.88304520 262.62863159]
[56.78742599 254.79411316]
[71.32731628 250.73280334]
[71.32731628 235.73280334]
[71.32731628 220.73280334]
[71.32731628 205.73280334]
[71.32731628 190.73280334]
[71.32731628 175.73280334]
[71.32731628 160.73280334]
[71.32731628 145.73280334]
[71.32731628 130.73280334]
[71.32731628 115.73279572]
[67.31957245 101.27810669]
[59.59548950 88.41970825]
[51.87140274 75.56130219]
[44.14731979 62.70289993]
[36.42323303 49.84449768]
[24.47223282 49.25585938]
[14.40821266 43.00891113]
[8.69487762 32.77017975]
[8.66396904 21.16557884]
[14.20662403 11.10727596]
[7.02411509 -2.06130624]
[-0.15839365 -15.22988892]
[-7.34090233 -28.39847183]
[-15.72417259 -21.46602249]
[-25.93396950 -18.43636131]
[-36.28757477 -19.62258148]
[-45.14998627 -24.65766335]
[-51.19211197 -32.58117294]
[-53.58936310 -42.01738739]
[-52.13113785 -51.41242599]
[-47.22722244 -59.28985214]
[-54.95130539 -72.14825439]
[-62.67539215 -85.00666046]
[-70.39947510 -97.86505890]
[-84.80745697 -93.44966888]
[-99.84440613 -92.61151886]
[-114.63600159 -95.39499664]
[-128.32324219 -101.63404846]
[-140.11230469 -110.96203613]
[-149.32060242 -122.83335114]
[-155.41629028 -136.55525208]
[-158.04902649 -151.32836914]
[-157.07003784 -166.29316711]
[-152.54055786 -180.58007812]
[-144.72801208 -193.35990906]
[-134.09025574 -203.89207458]
[-141.81434631 -216.75048828]
[-149.53843689 -229.60888672]
[-157.26251221 -242.46728516]
[-164.98660278 -255.32569885]
[-179.58326721 -262.80026245]
[-180.13807678 -279.19003296]
[-166.08029175 -287.63458252]
[-151.87135315 -279.44689941]
[-152.12820435 -263.04977417]
[-144.40411377 -250.19137573]
[-136.68002319 -237.33297729]
[-128.95594788 -224.47456360]
[-121.23185730 -211.61616516]
[-106.93735504 -216.06089783]
[-91.98545074 -216.95571899]
[-77.24503326 -214.24432373]
[-63.57370377 -208.08000183]
[-51.76795959 -198.81715393]
[-42.51672363 -186.99079895]
[-36.36117935 -173.28567505]
[-33.66309738 -158.49670410]
[-34.58358765 -143.48275757]
[-39.07347488 -129.11682129]
[-46.87591171 -116.23526764]
[-57.54107285 -105.58914185]
[-49.81698990 -92.73074341]
[-42.09290314 -79.87233734]
[-34.36882019 -67.01393890]
[-19.58686256 -67.71881104]
[-6.07430458 -58.82028580]
[2.17798471 -71.34624481]
[2.60345387 -87.73987579]
[17.14068985 -95.32939911]
[30.83502960 -86.30736542]
[29.59891129 -69.95486450]
[14.70394611 -63.09395981]
[6.45165730 -50.56799698]
[5.82768011 -35.58097839]
[13.01018906 -22.41239738]
[20.19269753 -9.24381542]
[27.37520599 3.92476749]
[45.18044662 7.97087002]
[54.59145737 23.98743248]
[49.28163528 42.12041473]
[57.00572205 54.97881699]
[64.72980499 67.83721924]
[72.45388794 80.69561768]
[80.17797852 93.55402374]
[86.46462250 85.07181549]
[95.81793976 80.99680328]
[105.60398865 82.09132385]
[113.25214386 87.71257019]
[116.93035126 96.07591248]
[131.57385254 99.32673645]
[146.21734619 102.57756042]
[160.86085510 105.82839203]
[176.00988770 101.26577759]
[186.75782776 111.57746124]
[201.40133667 114.82828522]
[214.59671021 106.13014984]
[230.06072998 109.39196777]
[238.61888123 122.67856598]
[235.19374084 138.10723877]
[221.81739807 146.52442932]
[206.42579651 142.93637085]
[198.15049744 129.47178650]
[183.50700378 126.22096252]
[169.40538025 131.01609802]
[157.61003113 120.47189331]
[142.96652222 117.22106171]
[128.32302856 113.97023773]
[113.67951965 110.71941376]
[106.62612915 117.30909729]
[96.57343292 119.38844299]
[86.32731628 115.73279572]
[86.32731628 130.73280334]
[86.32731628 145.73280334]
[86.32731628 160.73280334]
[86.32731628 175.73280334]
[86.32731628 190.73280334]
[86.32731628 205.73280334]
[86.32731628 220.73280334]
[86.32731628 235.73280334]
[86.32731628 250.73280334]
[100.86720276 254.79411316]
[113.77158356 262.62863159]
[124.08286285 273.65493774]
[131.03588867 287.05487061]
[134.11468506 301.83404541]
[133.09078979 316.89572144]
[128.04019165 331.12225342]
[119.33766937 343.45791626]
[107.62900543 352.98733521]
[93.78306580 359.00335693]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 104]
[22 103]
[23 102]
[24 101]
[25 100]
[30 97]
[31 96]
[32 95]
[33 94]
[41 84]
[42 83]
[43 82]
[44 81]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
[86 93]
[87 92]
[109 128]
[110 127]
[111 126]
[112 125]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
