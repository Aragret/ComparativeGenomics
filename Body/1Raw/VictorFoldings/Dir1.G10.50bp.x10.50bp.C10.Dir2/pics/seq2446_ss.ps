%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUGAACUCGGGGGGGGGGCUCACACCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGxxxxxxxxxxAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCCCACUCUGCAUCCCCCCCCCCCAACUGAACGC\
) } def
/len { sequence length } bind def

/coor [
[129.42105103 402.86016846]
[115.57511902 396.84414673]
[103.86645508 387.31472778]
[95.16393280 374.97906494]
[90.11332703 360.75253296]
[89.08943939 345.69085693]
[92.16823578 330.91168213]
[99.12126160 317.51174927]
[109.43254089 306.48541260]
[122.33692169 298.65090942]
[136.87681580 294.58959961]
[136.87681580 279.58959961]
[136.87681580 264.58959961]
[136.87681580 249.58959961]
[136.87681580 234.58959961]
[136.87681580 219.58959961]
[136.87681580 204.58959961]
[136.87681580 189.58959961]
[136.87681580 174.58959961]
[132.41999817 160.26701355]
[123.90890503 147.91543579]
[115.39781189 135.56385803]
[103.02338409 141.56944275]
[88.38705444 143.06611633]
[73.18708038 139.24440002]
[59.39303589 129.94572449]
[48.99535751 115.74574280]
[34.58314133 119.90363312]
[25.60052681 133.19618225]
[9.59669876 134.31738281]
[-1.15157187 122.40712738]
[1.60086703 106.60195160]
[15.74258041 99.02622986]
[30.42525482 105.49141693]
[44.83747101 101.33352661]
[45.46090698 93.85948181]
[30.85908508 97.29266357]
[23.08188248 84.46632385]
[32.87731552 73.10632324]
[46.70778275 78.91139221]
[47.33121872 71.43735504]
[33.80702972 64.94918823]
[20.28284073 58.46102142]
[6.75865078 51.97285843]
[-6.76553917 45.48469162]
[-21.59016609 50.96246719]
[-35.91099167 44.27744675]
[-41.23172379 29.39573288]
[-34.39566803 15.14638615]
[-19.45853424 9.98328876]
[-5.28225851 16.96961594]
[-0.27737406 31.96050262]
[13.24681568 38.44866562]
[26.77100563 44.93683243]
[40.29519653 51.42499542]
[53.81938553 57.91316223]
[66.51431274 49.92324448]
[66.51431274 34.92324448]
[66.51431274 19.92324638]
[66.51431274 4.92324638]
[56.93159103 -10.76596260]
[66.21556854 -25.62555885]
[65.90351868 -40.62231445]
[65.59146118 -55.61906815]
[62.26659775 -64.19794464]
[65.43217468 -70.93031311]
[65.43217468 -85.93031311]
[51.17950439 -91.09143829]
[39.55357742 -100.81838226]
[31.95827484 -113.93658447]
[29.31077194 -128.86195374]
[31.93076515 -143.79217529]
[39.50187683 -156.92434692]
[51.10986328 -166.67269897]
[65.35299683 -171.86009216]
[80.51135254 -171.86009216]
[94.75449371 -166.67269897]
[106.36247253 -156.92434692]
[113.93358612 -143.79217529]
[116.55358124 -128.86195374]
[113.90607452 -113.93658447]
[106.31077576 -100.81838226]
[94.68484497 -91.09143829]
[80.43217468 -85.93031311]
[80.43217468 -70.93031311]
[80.58821106 -55.93112183]
[80.90026855 -40.93436813]
[81.21232605 -25.93761635]
[89.74234772 -17.30361366]
[90.08760071 -4.76966858]
[81.51431274 4.92324638]
[81.51431274 19.92324638]
[81.51431274 34.92324448]
[81.51431274 49.92324448]
[104.87733459 49.29184723]
[125.16257477 58.53269577]
[138.63723755 74.91359711]
[143.28153992 94.50207520]
[139.05938721 113.08136749]
[127.74938965 127.05277252]
[136.26048279 139.40434265]
[144.77156067 151.75592041]
[149.24166870 149.35272217]
[154.65597534 148.16590881]
[160.66419983 148.50068665]
[166.82725525 150.55894470]
[181.47076416 153.80976868]
[196.11425781 157.06059265]
[205.23669434 155.86349487]
[211.02708435 160.53436279]
[225.59979248 164.08912659]
[240.17250061 167.64389038]
[254.74519348 171.19865417]
[264.81915283 159.67590332]
[279.09829712 154.16543579]
[294.30133057 155.93351746]
[306.93475342 164.57386780]
[314.09545898 178.10098267]
[314.13800049 193.40643311]
[307.05258179 206.97312927]
[294.46740723 215.68356323]
[279.27441406 217.53613281]
[264.96490479 212.10513306]
[254.82702637 200.63856506]
[251.19044495 185.77136230]
[236.61773682 182.21659851]
[222.04502869 178.66183472]
[207.47233582 175.10707092]
[192.86343384 171.70408630]
[178.21994019 168.45326233]
[163.57643127 165.20243835]
[151.87681580 174.58959961]
[151.87681580 189.58959961]
[151.87681580 204.58959961]
[151.87681580 219.58959961]
[151.87681580 234.58959961]
[151.87681580 249.58959961]
[151.87681580 264.58959961]
[151.87681580 279.58959961]
[151.87681580 294.58959961]
[166.41670227 298.65090942]
[179.32107544 306.48541260]
[189.63237000 317.51174927]
[196.58538818 330.91168213]
[199.66418457 345.69085693]
[198.64028931 360.75253296]
[193.58969116 374.97906494]
[184.88716125 387.31472778]
[173.17849731 396.84414673]
[159.33256531 402.86016846]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 102]
[21 101]
[22 100]
[27 35]
[28 34]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[57 94]
[58 93]
[59 92]
[60 91]
[62 88]
[63 87]
[64 86]
[66 85]
[67 84]
[106 131]
[107 130]
[108 129]
[110 128]
[111 127]
[112 126]
[113 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
