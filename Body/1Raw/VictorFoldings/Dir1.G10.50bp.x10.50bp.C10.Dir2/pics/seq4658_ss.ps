%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAAUCCCCGGGGGGGGGGUGGCCCAACCCGUCAUCUACUCUACCAUCUUUGCAGGCACACUCAUCACAxxxxxxxxxxAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCCCCCCCCCCCAAUAAUCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.18311310 361.29324341]
[72.96291351 354.02075195]
[62.07611084 343.57376099]
[54.26498032 330.66452026]
[50.06209946 316.17318726]
[49.75402832 301.08786011]
[53.36176682 286.43704224]
[60.63934326 273.21963501]
[71.09054565 262.33688354]
[84.00280762 254.53073120]
[98.49575043 250.33345032]
[98.18369293 235.33668518]
[97.87163544 220.33993530]
[97.55957794 205.34318542]
[97.24752045 190.34643555]
[96.93546295 175.34967041]
[96.62341309 160.35292053]
[96.31135559 145.35617065]
[95.99929810 130.35942078]
[95.68724060 115.36266327]
[84.18544006 105.73413849]
[69.36768341 108.06523895]
[54.54992294 110.39634705]
[52.79755020 125.39073181]
[47.06365585 139.35586548]
[37.77373505 151.25544739]
[25.61715508 160.20643616]
[11.49602127 165.54461670]
[-3.54178810 166.87385559]
[-18.38036728 164.09550476]
[-31.91859245 157.41577148]
[-43.15184021 147.33029175]
[-51.24652863 134.58750916]
[-55.60197830 120.13301086]
[-55.89498520 105.03940582]
[-52.10380554 90.42675781]
[-44.50977325 77.37940979]
[-33.67641068 66.86557007]
[-20.40762901 59.66543198]
[-5.68806028 56.31328964]
[9.39000797 57.05789948]
[23.70768166 61.84400558]
[36.20249557 70.31644440]
[45.94724655 81.84650421]
[52.21881866 95.57858276]
[67.03657532 93.24748230]
[81.85433197 90.91637421]
[84.17266846 88.70553589]
[86.72100067 86.98197937]
[89.40634918 85.76111603]
[84.80078125 71.48565674]
[80.19522095 57.21019745]
[75.58965302 42.93473816]
[60.62744904 44.58314133]
[45.63972855 43.18558884]
[31.24023438 38.79930496]
[18.01861763 31.60391045]
[6.51629305 21.89404869]
[-2.79572558 10.06733227]
[-9.53611660 -3.39193988]
[-13.42886639 -17.93262100]
[-14.31456757 -32.95927811]
[-12.15695286 -47.85657883]
[-7.04437447 -62.01448822]
[0.81381106 -74.85324860]
[11.09581566 -85.84712219]
[23.38059807 -94.54592133]
[37.16510391 -100.59342194]
[51.88486481 -103.74199677]
[66.93711853 -103.86270905]
[81.70548248 -100.95060730]
[95.58519745 -95.12495422]
[108.00791168 -86.62429810]
[118.46490479 -75.79673767]
[126.52798462 -63.08565140]
[131.86697388 -49.01155472]
[134.26322937 -34.15077209]
[133.61862183 -19.11184311]
[129.95957947 -4.51060247]
[123.43590546 9.05503845]
[114.31475830 21.02957535]
[102.96963501 30.92265892]
[89.86511230 38.32917404]
[94.47068024 52.60463333]
[99.07624817 66.88009644]
[103.68180847 81.15555573]
[116.69812012 88.61046600]
[131.34161377 85.35964203]
[145.98512268 82.10881042]
[160.62861633 78.85798645]
[175.27212524 75.60716248]
[189.91561890 72.35633850]
[203.63568115 66.29331970]
[215.89804077 57.65420532]
[228.16041565 49.01509094]
[240.42279053 40.37597275]
[246.81558228 25.27418327]
[263.12155151 23.52842331]
[272.56649780 36.93458176]
[265.43426514 51.70155334]
[249.06190491 52.63834381]
[236.79953003 61.27745819]
[224.53717041 69.91657257]
[212.27479553 78.55569458]
[227.24398804 77.59478760]
[241.85057068 81.00763702]
[254.84416199 88.50208282]
[265.11242676 99.43656158]
[271.77633667 112.87502289]
[274.26544189 127.66706085]
[272.36666870 142.54640198]
[266.24255371 156.23927307]
[256.41732788 167.57353210]
[243.73211670 175.57887268]
[229.27284241 179.57000732]
[214.27726746 179.20526123]
[200.02912903 174.51586914]
[187.74812317 165.90327454]
[178.48556519 154.10475159]
[173.03439331 140.13032532]
[171.86125183 125.17627716]
[175.06657410 110.52274323]
[182.37594604 97.42415619]
[193.16645813 86.99983978]
[178.52294922 90.25066376]
[163.87945557 93.50148773]
[149.23594666 96.75231171]
[134.59245300 100.00314331]
[119.94894409 103.25396729]
[110.68399811 115.05060577]
[110.99604797 130.04736328]
[111.30810547 145.04411316]
[111.62016296 160.04086304]
[111.93222046 175.03762817]
[112.24427795 190.03437805]
[112.55633545 205.03112793]
[112.86838531 220.02787781]
[113.18044281 235.02464294]
[113.49250031 250.02139282]
[128.14749146 253.61215210]
[141.37330627 260.87442017]
[152.26817322 271.31301880]
[160.08926392 284.21621704]
[164.30334473 298.70428467]
[164.62306213 313.78939819]
[161.02662659 328.44299316]
[153.75926208 341.66598511]
[143.31646729 352.55682373]
[130.41023254 360.37295532]
[115.92054749 364.58142090]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 47]
[22 46]
[23 45]
[50 86]
[51 85]
[52 84]
[53 83]
[87 129]
[88 128]
[89 127]
[90 126]
[91 125]
[92 124]
[93 104]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
