%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCAAACCCGGGGGGGGGGCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCxxxxxxxxxxUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCUAGCCCCCCCCCCCCCCAAACCC\
) } def
/len { sequence length } bind def

/coor [
[58.75538635 254.99324036]
[49.43144226 252.20658875]
[40.29365921 248.85958862]
[31.37568665 244.96456909]
[22.71034813 240.53587341]
[14.32954693 235.58981323]
[6.26413631 230.14457703]
[-1.45619130 224.22023010]
[-8.80301476 217.83856201]
[-15.74928570 211.02308655]
[-27.04829025 220.88880920]
[-38.34729385 230.75453186]
[-49.64630127 240.62025452]
[-60.94530487 250.48597717]
[-72.24430847 260.35171509]
[-83.44007874 270.33444214]
[-94.53138733 280.43307495]
[-105.62270355 290.53173828]
[-113.26383972 305.66610718]
[-129.92202759 302.51321411]
[-131.50379944 285.63320923]
[-115.72135925 279.44039917]
[-104.63004303 269.34176636]
[-93.53872681 259.24310303]
[-90.69187927 252.36990356]
[-82.11003113 249.05270386]
[-70.81102753 239.18698120]
[-59.51202393 229.32125854]
[-48.21302032 219.45553589]
[-36.91401291 209.58981323]
[-25.61500931 199.72409058]
[-41.00271606 176.43466187]
[-52.11946106 150.83003235]
[-58.62852097 123.68578339]
[-60.33273315 95.82408142]
[-75.29298401 94.73277283]
[-90.25322723 93.64145660]
[-104.77045441 101.26918793]
[-118.48847198 92.28320312]
[-117.29537201 75.92751312]
[-102.41850281 69.02745056]
[-89.16191864 78.68121338]
[-74.20166779 79.77252197]
[-59.24142075 80.86383057]
[-57.95784378 72.19094849]
[-56.20226669 63.60116196]
[-53.97993851 55.12014008]
[-51.29750061 46.77322388]
[-48.16296768 38.58535385]
[-44.58570480 30.58100128]
[-40.57640076 22.78408051]
[-36.14704132 15.21788883]
[-31.31085587 7.90503740]
[-26.08230019 0.86737663]
[-20.47699356 -5.87406397]
[-14.51168633 -12.29913998]
[-8.20420551 -18.38865280]
[-1.57339752 -24.12440681]
[5.36092424 -29.48925972]
[12.57803917 -34.46718597]
[20.05638123 -39.04330444]
[27.77360344 -43.20394897]
[35.70664978 -46.93667984]
[43.83181000 -50.23034668]
[52.12480927 -53.07511139]
[60.56086349 -55.46246338]
[69.11476898 -57.38527679]
[77.76095581 -58.83780670]
[86.47360229 -59.81570435]
[95.22666931 -60.31605911]
[103.99399567 -60.33736801]
[112.74938965 -59.87957001]
[121.46668243 -58.94403076]
[130.11984253 -57.53354645]
[138.68298340 -55.65233612]
[147.13053894 -53.30601883]
[155.43727112 -50.50160217]
[163.57835388 -47.24746704]
[171.52944946 -43.55334091]
[179.26679993 -39.43025970]
[186.76730347 -34.89054489]
[194.00852966 -29.94776154]
[200.96884155 -24.61667824]
[207.62745667 -18.91322327]
[213.96446228 -12.85444260]
[219.96092224 -6.45843935]
[225.59893799 0.25567466]
[230.86164856 7.26783705]
[235.73332214 14.55709362]
[240.19940186 22.10166550]
[244.24655151 29.87900543]
[258.02893066 23.95904160]
[271.81130981 18.03907967]
[275.34051514 3.04404449]
[286.88754272 -6.88162708]
[301.88763428 -8.09044170]
[314.57141113 -0.32772017]
[328.35379028 -6.24768305]
[342.13619995 -12.16764641]
[355.91857910 -18.08761024]
[361.54272461 -32.85732269]
[375.99734497 -39.24789047]
[390.70675659 -33.46789932]
[396.94415283 -18.94651794]
[391.00897217 -4.29902315]
[376.42245483 1.78448677]
[361.83853149 -4.30522823]
[348.05615234 1.61473501]
[334.27377319 7.53469801]
[320.49139404 13.45466137]
[317.38879395 27.99811363]
[306.18484497 38.04476166]
[291.03628540 39.58568954]
[277.73129272 31.82146072]
[263.94891357 37.74142456]
[250.16651917 43.66138458]
[258.50238037 75.48425293]
[260.17019653 108.33847046]
[255.09985352 140.84190369]
[243.50460815 171.62715149]
[256.59777832 178.94625854]
[269.69091797 186.26536560]
[282.78408813 193.58447266]
[299.16522217 192.81611633]
[307.79226685 206.76264954]
[299.79046631 221.07708740]
[283.39135742 221.03396606]
[275.46496582 206.67762756]
[262.37182617 199.35852051]
[249.27865601 192.03941345]
[236.18550110 184.72030640]
[230.79679871 192.82359314]
[224.92657471 200.58515930]
[218.59643555 207.97642517]
[211.82969666 214.97018433]
[204.65126038 221.54067993]
[197.08755493 227.66374207]
[189.16642761 233.31680298]
[180.91705322 238.47908020]
[172.36976624 243.13154602]
[163.55607605 247.25708008]
[154.50839233 250.84049988]
[145.26004028 253.86862183]
[135.84507751 256.33026123]
[126.29814148 258.21640015]
[116.65439606 259.52008057]
[106.94933319 260.23648071]
[97.21868896 260.36297607]
[87.49829102 259.89913940]
[77.82390594 258.84661865]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 31]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[16 24]
[17 23]
[18 22]
[35 44]
[36 43]
[37 42]
[91 116]
[92 115]
[93 114]
[97 110]
[98 109]
[99 108]
[100 107]
[120 131]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
