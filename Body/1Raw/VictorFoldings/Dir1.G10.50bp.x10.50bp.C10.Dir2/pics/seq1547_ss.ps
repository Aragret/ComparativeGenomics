%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAACCUCACGGGGGGGGGGCACCUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGxxxxxxxxxxAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUCCCCCCCCCCUCAACCUCCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 373.58511353]
[71.19830322 367.56906128]
[59.48964310 358.03964233]
[50.78712082 345.70397949]
[45.73651886 331.47747803]
[44.71262741 316.41577148]
[47.79142761 301.63662720]
[54.74444962 288.23669434]
[65.05573273 277.21035767]
[77.96011353 269.37585449]
[92.50000000 265.31454468]
[92.50000000 250.31454468]
[92.50000000 235.31454468]
[92.50000000 220.31454468]
[92.50000000 205.31454468]
[92.50000000 190.31454468]
[92.50000000 175.31454468]
[92.50000000 160.31454468]
[92.50000000 145.31454468]
[92.50000000 130.31454468]
[78.93096924 124.34618378]
[69.28252411 112.50485992]
[65.98735809 97.12860870]
[70.16770935 81.50177765]
[81.30294800 69.15375519]
[70.42411804 58.82654953]
[59.54529572 48.49934387]
[48.66646957 38.17214203]
[37.78764343 27.84493637]
[17.20711136 37.65596008]
[-5.54504681 37.82045746]
[-26.18042374 28.34698677]
[-40.82635880 11.05699158]
[-46.75271225 -10.76529217]
[-61.68701935 -12.16759586]
[-71.12331390 0.03731393]
[-85.66774750 5.18155193]
[-100.67922974 1.62361097]
[-111.36765289 -9.50118351]
[-114.32238770 -24.64295006]
[-108.60058594 -38.97000504]
[-96.02805328 -47.91063690]
[-80.61663818 -48.61192703]
[-67.28406525 -40.85009003]
[-60.28471375 -27.10190392]
[-45.35040665 -25.69960022]
[-43.22355652 -32.42873001]
[-40.20571136 -38.80817413]
[-36.35238266 -44.72058105]
[-31.73445320 -50.05719376]
[-40.75198364 -62.04402542]
[-49.76951218 -74.03086090]
[-58.78704071 -86.01769257]
[-67.80457306 -98.00452423]
[-82.28385162 -104.38112640]
[-83.75203705 -119.20319366]
[-92.76956940 -131.19001770]
[-108.38948822 -134.85031128]
[-115.13616180 -149.40579224]
[-107.83411407 -163.69075012]
[-92.08486176 -166.74696350]
[-79.96987915 -156.22999573]
[-80.78273773 -140.20755005]
[-71.76520538 -128.22071838]
[-57.93092346 -122.70149994]
[-55.81774139 -107.02205658]
[-46.80020905 -95.03521729]
[-37.78268051 -83.04838562]
[-28.76515007 -71.06155396]
[-19.74761963 -59.07472229]
[-9.85723495 -63.26555252]
[0.69113135 -65.33876038]
[11.44897842 -65.20262909]
[21.95816803 -62.85944748]
[31.77042770 -58.40557861]
[40.46648407 -52.02748489]
[47.67396545 -43.99393845]
[53.08334732 -34.64468765]
[56.46125793 -24.37608910]
[57.66052628 -13.62430859]
[56.62660217 -2.84679651]
[53.40002823 7.49718142]
[48.11484909 16.96611023]
[58.99367523 27.29331589]
[69.87249756 37.62052155]
[80.75132751 47.94772339]
[91.63014984 58.27492905]
[106.62690735 57.96287537]
[117.06671906 47.19206619]
[127.50653076 36.42125702]
[137.94633484 25.65044785]
[139.13471985 9.65147018]
[152.46487427 0.72474384]
[167.71105957 5.71809053]
[173.17770386 20.80104065]
[164.67126465 34.40324783]
[148.71714783 36.09025955]
[138.27734375 46.86106873]
[127.83752441 57.63187790]
[117.39771271 68.40268707]
[126.79164886 79.64089966]
[130.39091492 92.81575012]
[145.39010620 92.97178650]
[160.38929749 93.12782288]
[175.38848877 93.28385925]
[180.69758606 79.08564758]
[190.54495239 67.56153107]
[203.74145508 60.10310364]
[218.69355774 57.61100388]
[233.59571838 60.38616562]
[246.64842224 68.09347534]
[256.27551270 79.80223846]
[261.31442261 94.09856415]
[261.15673828 109.25610352]
[255.82148743 123.44450378]
[245.95291138 134.95045471]
[232.74267578 142.38455200]
[217.78601074 144.84909058]
[202.88899231 142.04647827]
[189.85052490 134.31512451]
[180.24502563 122.58863831]
[175.23245239 108.28305054]
[160.23326111 108.12701416]
[145.23406982 107.97097778]
[130.23487854 107.81494141]
[128.35749817 113.07951355]
[125.57171631 117.92509460]
[121.96675873 122.19646454]
[117.65811920 125.75679016]
[112.78382111 128.49201965]
[107.50000000 130.31454468]
[107.50000000 145.31454468]
[107.50000000 160.31454468]
[107.50000000 175.31454468]
[107.50000000 190.31454468]
[107.50000000 205.31454468]
[107.50000000 220.31454468]
[107.50000000 235.31454468]
[107.50000000 250.31454468]
[107.50000000 265.31454468]
[122.03988647 269.37585449]
[134.94427490 277.21035767]
[145.25555420 288.23669434]
[152.20857239 301.63662720]
[155.28736877 316.41577148]
[154.26348877 331.47747803]
[149.21287537 345.70397949]
[140.51036072 358.03964233]
[128.80169678 367.56906128]
[114.95575714 373.58511353]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 87]
[26 86]
[27 85]
[28 84]
[29 83]
[34 46]
[35 45]
[50 70]
[51 69]
[52 68]
[53 67]
[54 66]
[56 64]
[57 63]
[88 100]
[89 99]
[90 98]
[91 97]
[102 125]
[103 124]
[104 123]
[105 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
