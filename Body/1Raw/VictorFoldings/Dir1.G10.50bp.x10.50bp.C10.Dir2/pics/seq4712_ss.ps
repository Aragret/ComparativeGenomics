%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUAAGCUCGCGGGGGGGGGGACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUxxxxxxxxxxCUUCAAACUCUACUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCCCCCCCCCCCGCUAACCUCGC\
) } def
/len { sequence length } bind def

/coor [
[96.02405548 381.82632446]
[81.86345673 376.67129517]
[69.27371216 368.38909912]
[58.93377304 357.42633057]
[51.40126038 344.37420654]
[47.08239365 329.93661499]
[46.21008682 314.89215088]
[48.83137894 300.05215454]
[54.80490494 286.21691895]
[63.80852127 274.13256836]
[75.35668182 264.45077515]
[88.82659149 257.69369507]
[103.49185181 254.22572327]
[103.49185181 239.22572327]
[103.49185181 224.22572327]
[103.49185181 209.22572327]
[103.49185181 194.22572327]
[103.49185181 179.22572327]
[103.49185181 164.22572327]
[103.49185181 149.22572327]
[103.49185181 134.22572327]
[103.49185181 119.22573090]
[91.53778076 110.16481781]
[77.09580994 114.21813202]
[62.65383148 118.27144623]
[60.49126816 133.34603882]
[52.37878799 146.23431396]
[39.72192001 154.70329285]
[24.71355247 157.28567505]
[9.95396996 153.53407288]
[-1.99963939 144.09843445]
[-9.07623959 130.61357117]
[-10.04976845 115.41580200]
[-4.75155449 101.13823700]
[5.90045357 90.25455475]
[20.06073189 84.65041351]
[35.27592468 85.29676056]
[48.90991211 92.08161926]
[58.60051727 103.82947540]
[73.04248810 99.77616119]
[87.48446655 95.72283936]
[98.66548157 85.72359467]
[104.30023956 71.82217407]
[109.93498993 57.92075348]
[115.56974792 44.01933289]
[120.77932739 29.95304871]
[125.55891418 15.73490810]
[130.33850098 1.51676619]
[135.11808777 -12.70137501]
[139.89767456 -26.91951752]
[144.67726135 -41.13765717]
[149.02244568 -55.49451828]
[152.92918396 -69.97682953]
[149.05317688 -85.31590271]
[159.83827209 -95.58873749]
[163.74502563 -110.07104492]
[159.86901855 -125.41011810]
[170.65409851 -135.68295288]
[166.77809143 -151.02203369]
[177.56317139 -161.29487610]
[181.46992493 -175.77717590]
[185.37667847 -190.25949097]
[189.28343201 -204.74179077]
[175.49853516 -210.72465515]
[162.73171997 -218.65093994]
[151.25506592 -228.35169983]
[141.31324768 -239.62014771]
[133.11813354 -252.21609497]
[126.84442902 -265.87106323]
[122.62585449 -280.29403687]
[120.55232239 -295.17752075]
[120.66803741 -310.20431519]
[122.97052765 -325.05410767]
[127.41071320 -339.41036987]
[133.89396667 -352.96713257]
[142.28207397 -365.43539429]
[152.39625549 -376.54937744]
[164.02091980 -386.07226562]
[176.90830994 -393.80099487]
[190.78369141 -399.57086182]
[205.35134888 -403.25888062]
[220.30073547 -404.78643799]
[235.31323242 -404.12097168]
[250.06883240 -401.27667236]
[264.25302124 -396.31414795]
[277.56347656 -389.33920288]
[289.71646118 -380.50051880]
[300.45294189 -369.98645020]
[309.54409790 -358.02111816]
[316.79611206 -344.85955811]
[322.05441284 -330.78234863]
[325.20693970 -316.08950806]
[326.18646240 -301.09423828]
[324.97213745 -286.11614990]
[321.58984375 -271.47448730]
[316.11166382 -257.48138428]
[308.65435791 -244.43505859]
[299.37689209 -232.61360168]
[288.47702026 -222.26901245]
[276.18707275 -213.62178040]
[262.76898193 -206.85620117]
[248.50880432 -202.11650085]
[233.71044922 -199.50369263]
[218.68937683 -199.07348633]
[203.76574707 -200.83503723]
[199.85899353 -186.35273743]
[195.95223999 -171.87042236]
[192.04548645 -157.38812256]
[196.20092773 -143.08491516]
[185.13641357 -131.77619934]
[189.29185486 -117.47300720]
[178.22732544 -106.16429901]
[174.32057190 -91.68198395]
[178.47602844 -77.37878418]
[167.41149902 -66.07007599]
[163.50474548 -51.58776474]
[164.98211670 -48.32511902]
[164.91673279 -44.17372131]
[162.90351868 -39.88336945]
[158.89540100 -36.35807037]
[154.11581421 -22.13993073]
[149.33622742 -7.92178822]
[144.55664062 6.29635334]
[139.77705383 20.51449394]
[134.99746704 34.73263550]
[136.27384949 38.07902908]
[135.95629883 42.21878433]
[133.68609619 46.37886810]
[129.47117615 49.65408707]
[123.83641052 63.55550766]
[118.20166016 77.45693207]
[112.56690216 91.35835266]
[118.49185181 119.22573090]
[118.49185181 134.22572327]
[118.49185181 149.22572327]
[118.49185181 164.22572327]
[118.49185181 179.22572327]
[118.49185181 194.22572327]
[118.49185181 209.22572327]
[118.49185181 224.22572327]
[118.49185181 239.22572327]
[118.49185181 254.22572327]
[133.15711975 257.69369507]
[146.62702942 264.45077515]
[158.17518616 274.13256836]
[167.17880249 286.21691895]
[173.15232849 300.05215454]
[175.77362061 314.89215088]
[174.90132141 329.93661499]
[170.58244324 344.37420654]
[163.04994202 357.42633057]
[152.71000671 368.38909912]
[140.12025452 376.67129517]
[125.95965576 381.82632446]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 41]
[24 40]
[25 39]
[42 132]
[43 131]
[44 130]
[45 129]
[46 125]
[47 124]
[48 123]
[49 122]
[50 121]
[51 120]
[52 116]
[53 115]
[55 113]
[56 112]
[58 110]
[60 108]
[61 107]
[62 106]
[63 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
