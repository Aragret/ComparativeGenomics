%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACACUCAUGGGGGGGGGGCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUAAUCUxxxxxxxxxxAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCCCCCCCCCCCUCACACUCAU\
) } def
/len { sequence length } bind def

/coor [
[87.51207733 544.86071777]
[73.35147095 539.70568848]
[60.76173019 531.42346191]
[50.42179108 520.46069336]
[42.88927841 507.40856934]
[38.57041550 492.97097778]
[37.69810486 477.92651367]
[40.31939697 463.08651733]
[46.29292297 449.25128174]
[55.29654312 437.16693115]
[66.84469604 427.48516846]
[80.31461334 420.72808838]
[94.97987366 417.26010132]
[94.97987366 402.26010132]
[94.97987366 387.26010132]
[94.97987366 372.26010132]
[94.97987366 357.26010132]
[94.97987366 342.26010132]
[94.97987366 327.26010132]
[94.97987366 312.26010132]
[94.97987366 297.26010132]
[94.97987366 282.26010132]
[94.97987366 267.26010132]
[94.97987366 252.26011658]
[80.81151581 244.54670715]
[72.40350342 230.66954041]
[72.12245941 214.35266113]
[80.13909912 200.03063965]
[94.35617065 191.64341736]
[94.05216980 176.64649963]
[93.74816132 161.64958191]
[93.44416046 146.65266418]
[93.14015961 131.65574646]
[78.27888489 124.02783966]
[69.19481659 110.00920868]
[68.30403900 93.32842255]
[75.84349060 78.42208099]
[67.27446747 66.11062622]
[58.70544434 53.79917526]
[50.13642120 41.48772430]
[36.75234985 48.31270981]
[22.56357956 53.25159454]
[7.83444071 56.21237183]
[-7.16067410 57.13988495]
[-22.14241600 56.01685333]
[-36.83168030 52.86420059]
[-50.95481873 47.74065781]
[-64.24872589 40.74167252]
[-76.46574402 31.99763107]
[-87.37827301 21.67143059]
[-96.78302765 9.95544147]
[-104.50479889 -2.93207335]
[-110.39972687 -16.75102806]
[-114.35800934 -31.24398613]
[-116.30588531 -46.14094925]
[-116.20709229 -61.16439819]
[-114.06344604 -76.03445435]
[-109.91489410 -90.47409821]
[-103.83872223 -104.21432495]
[-95.94812012 -116.99916840]
[-86.39009094 -128.59045410]
[-75.34269714 -138.77223206]
[-63.01173019 -147.35482788]
[-49.62692261 -154.17837524]
[-35.43761826 -159.11572266]
[-20.70815849 -162.07490540]
[-5.71294260 -163.00079346]
[9.26867676 -161.87614441]
[23.95760155 -158.72189331]
[38.08018494 -153.59683228]
[51.37333298 -146.59640503]
[63.58940506 -137.85104370]
[74.50081635 -127.52365875]
[83.90430450 -115.80664825]
[91.62467957 -102.91829681]
[97.51811218 -89.09870911]
[101.47482300 -74.60532379]
[103.42108917 -59.70814896]
[103.32066345 -44.68471146]
[101.17541504 -29.81488800]
[97.02529907 -15.37569332]
[90.94763947 -1.63612282]
[83.05565643 11.14786530]
[73.49637604 22.73811340]
[62.44787216 32.91870117]
[71.01689148 45.23015213]
[79.58591461 57.54160309]
[88.15493774 69.85305786]
[98.04115295 67.66880035]
[108.11875916 68.64350891]
[117.40310669 72.68195343]
[124.98706055 79.38954926]
[138.45413208 72.78363800]
[151.92118835 66.17772675]
[165.38825989 59.57181549]
[178.85533142 52.96590042]
[192.18574524 46.08840942]
[205.37405396 38.94216537]
[218.56234741 31.79591751]
[219.60997009 16.40416527]
[228.83102417 4.03583050]
[243.28309631 -1.36239576]
[258.35461426 1.93204045]
[269.23626709 12.86789703]
[272.45578003 27.95558167]
[266.98583984 42.38066864]
[254.57185364 51.54016495]
[239.17507935 52.51131058]
[225.70858765 44.98421478]
[212.52029419 52.13045883]
[199.33200073 59.27670670]
[197.12577820 63.57277298]
[192.16758728 66.49887085]
[185.46124268 66.43296814]
[171.99417114 73.03887939]
[158.52711487 79.64479065]
[145.06004333 86.25070953]
[131.59297180 92.85662079]
[131.03143311 109.28409576]
[122.47861481 123.32070923]
[108.13707733 131.35174561]
[108.44107819 146.34866333]
[108.74508667 161.34558105]
[109.04908752 176.34249878]
[109.35309601 191.33941650]
[121.96635437 197.46008301]
[130.66043091 208.37408447]
[133.77651978 221.90727234]
[130.75982666 235.39505005]
[122.25727081 246.20706177]
[109.97987366 252.26011658]
[109.97987366 267.26010132]
[109.97987366 282.26010132]
[109.97987366 297.26010132]
[109.97987366 312.26010132]
[109.97987366 327.26010132]
[109.97987366 342.26010132]
[109.97987366 357.26010132]
[109.97987366 372.26010132]
[109.97987366 387.26010132]
[109.97987366 402.26010132]
[109.97987366 417.26010132]
[124.64513397 420.72808838]
[138.11505127 427.48516846]
[149.66320801 437.16693115]
[158.66682434 449.25128174]
[164.64035034 463.08651733]
[167.26164246 477.92651367]
[166.38932800 492.97097778]
[162.07046509 507.40856934]
[154.53796387 520.46069336]
[144.19801331 531.42346191]
[131.60827637 539.70568848]
[117.44766998 544.86071777]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[29 125]
[30 124]
[31 123]
[32 122]
[33 121]
[37 88]
[38 87]
[39 86]
[40 85]
[92 118]
[93 117]
[94 116]
[95 115]
[96 114]
[97 111]
[98 110]
[99 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
