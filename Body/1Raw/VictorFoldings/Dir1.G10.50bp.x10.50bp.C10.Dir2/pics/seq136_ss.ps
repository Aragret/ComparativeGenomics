%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACGUUCAAUGGGGGGGGGGAUUACAGGCGAACAUACUUACUAAAGUGUGUUAAUUAAUUAAUGCUUGUAxxxxxxxxxxCCCGGACGUCUAAACCAAACCACUUUCACCGCUACACGACCGGGGGUAUACCCCCCCCCCCUACGGUCAAU\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 400.00836182]
[71.01555634 394.45535278]
[58.81560135 385.58901978]
[49.20452881 373.96670532]
[42.78650284 360.31900024]
[39.96496582 345.50381470]
[40.91728210 330.45245361]
[45.58358765 316.11102295]
[53.67055511 303.38107300]
[64.66983032 293.06280518]
[77.88998413 285.80480957]
[92.50000000 282.06338501]
[92.50000000 267.06338501]
[92.50000000 252.06338501]
[92.50000000 237.06338501]
[92.50000000 222.06338501]
[92.50000000 207.06338501]
[92.50000000 192.06338501]
[92.50000000 177.06338501]
[92.50000000 162.06338501]
[92.50000000 147.06338501]
[69.19287872 136.36114502]
[54.80772781 115.12845612]
[53.51059341 89.51445007]
[39.57987595 83.95251465]
[25.64916039 78.39057922]
[11.71844387 72.82864380]
[-2.21227264 67.26670074]
[-16.14298820 61.70476532]
[-30.07370567 56.14282990]
[-44.00442123 50.58089066]
[-58.43180466 46.47594833]
[-73.20391846 43.87122345]
[-87.97603607 41.26650238]
[-102.74815369 38.66178131]
[-117.52027130 36.05705643]
[-132.29238892 33.45233536]
[-147.06449890 30.84761238]
[-161.83662415 28.24288940]
[-176.60873413 25.63816643]
[-191.82543945 31.75240517]
[-204.56013489 21.41994667]
[-201.71244812 5.26993942]
[-186.21185303 -0.08387450]
[-174.00401306 10.86604977]
[-159.23190308 13.47077274]
[-144.45977783 16.07549477]
[-129.68766785 18.68021774]
[-114.91555023 21.28494072]
[-100.14343262 23.88966370]
[-85.37131500 26.49438667]
[-70.59919739 29.09910965]
[-55.82708359 31.70383072]
[-65.77084351 20.47344398]
[-68.90015411 5.80349493]
[-64.40463257 -8.50700092]
[-53.44846725 -18.75211334]
[-38.86892319 -22.27871132]
[-24.44160652 -18.17352486]
[-13.90269947 -7.49965620]
[-9.98141956 6.97872639]
[-13.69324303 21.51221848]
[-24.07693481 32.33713913]
[-38.44248581 36.65017700]
[-24.51176834 42.21211243]
[-10.58105183 47.77405167]
[3.34966445 53.33598709]
[17.28038025 58.89792633]
[31.21109772 64.45986176]
[45.14181137 70.02179718]
[59.07252884 75.58374023]
[64.11544800 68.63902283]
[70.32218170 62.71141052]
[77.49142456 57.99314499]
[85.39067078 54.63724899]
[93.76372528 52.75255966]
[102.33903503 52.40020370]
[110.83848572 53.59160614]
[118.98641968 56.28813171]
[126.51858521 60.40232086]
[133.19070435 65.80074310]
[138.78637695 72.30831909]
[152.21382141 65.62224579]
[165.64126587 58.93617249]
[179.06872559 52.25009537]
[192.49617004 45.56402206]
[201.40077209 32.48660660]
[216.24256897 33.73971939]
[229.67001343 27.05364609]
[243.09745789 20.36757088]
[239.54507446 5.72761583]
[239.33996582 -9.33577251]
[242.49243164 -24.06702232]
[248.84434509 -37.72721863]
[258.07708740 -49.63117218]
[269.72756958 -59.18178558]
[283.21136475 -65.90000916]
[297.85220337 -69.44884491]
[312.91561890 -69.65030670]
[327.64611816 -66.49427032]
[341.30477905 -60.13904953]
[353.20648193 -50.90341568]
[362.75427246 -39.25062943]
[369.46923828 -25.76518822]
[373.01452637 -11.12351418]
[373.21234131 3.93997145]
[370.05273438 18.66969109]
[363.69421387 32.32680893]
[354.45568848 44.22628784]
[342.80059814 53.77125168]
[329.31350708 60.48293686]
[314.67098999 64.02468109]
[299.60745239 64.21884155]
[284.87850952 61.05566788]
[271.22293091 54.69382858]
[259.32568359 45.45243073]
[249.78353882 33.79502106]
[236.35609436 40.48109436]
[222.92863464 47.16717148]
[214.98446655 59.76634979]
[199.18225098 58.99147034]
[185.75479126 65.67754364]
[172.32734680 72.36361694]
[158.89990234 79.04969788]
[145.47244263 85.73577118]
[147.57508850 97.20315552]
[146.83058167 108.83791351]
[143.28346252 119.94376373]
[137.14602661 129.85606384]
[128.78555298 137.98161316]
[118.70240784 143.83413696]
[107.50000000 147.06338501]
[107.50000000 162.06338501]
[107.50000000 177.06338501]
[107.50000000 192.06338501]
[107.50000000 207.06338501]
[107.50000000 222.06338501]
[107.50000000 237.06338501]
[107.50000000 252.06338501]
[107.50000000 267.06338501]
[107.50000000 282.06338501]
[122.11001587 285.80480957]
[135.33016968 293.06280518]
[146.32945251 303.38107300]
[154.41641235 316.11102295]
[159.08271790 330.45245361]
[160.03503418 345.50381470]
[157.21350098 360.31900024]
[150.79547119 373.96670532]
[141.18440247 385.58901978]
[128.98443604 394.45535278]
[114.96250153 400.00836182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 71]
[25 70]
[26 69]
[27 68]
[28 67]
[29 66]
[30 65]
[31 64]
[32 53]
[33 52]
[34 51]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[82 125]
[83 124]
[84 123]
[85 122]
[86 121]
[88 119]
[89 118]
[90 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
