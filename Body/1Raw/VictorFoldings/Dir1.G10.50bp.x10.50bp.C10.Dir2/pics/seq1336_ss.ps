%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAGCUAAGGGGGGGGGGGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACCUCAACAxxxxxxxxxxAGACCAAGAGCCUUCAAAGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUCCCCCCCCCCAACAGCUAAG\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 478.10961914]
[71.19830322 472.09359741]
[59.48964310 462.56417847]
[50.78712082 450.22851562]
[45.73651886 436.00198364]
[44.71262741 420.94030762]
[47.79142761 406.16116333]
[54.74444962 392.76123047]
[65.05573273 381.73489380]
[77.96011353 373.90039062]
[92.50000000 369.83908081]
[92.50000000 354.83908081]
[92.50000000 339.83908081]
[92.50000000 324.83908081]
[92.50000000 309.83908081]
[92.50000000 294.83908081]
[92.50000000 279.83908081]
[92.50000000 264.83908081]
[92.50000000 249.83906555]
[92.50000000 234.83906555]
[92.50000000 219.83906555]
[92.50000000 204.83906555]
[81.81912994 194.52139282]
[81.60544586 179.30924988]
[92.50000000 168.17613220]
[92.50000000 153.17613220]
[92.50000000 138.17613220]
[72.92199707 127.93651581]
[62.07648087 108.68755341]
[47.08378601 109.15559387]
[32.09108734 109.62363434]
[17.09839249 110.09167480]
[9.25512409 123.37650299]
[-4.53563118 130.29161072]
[-19.87329483 128.63038635]
[-31.86367226 118.92295837]
[-36.68067932 104.26689911]
[-32.78722763 89.33892059]
[-21.42570114 78.90248108]
[-6.22152233 76.28781128]
[7.97371054 82.32924652]
[16.63035011 95.09898376]
[31.62304688 94.63093567]
[46.61574173 94.16289520]
[61.60843658 93.69485474]
[64.18693542 84.79831696]
[68.79537201 76.76343536]
[75.17253876 70.04563141]
[82.95696259 65.02569580]
[91.70742035 61.98815918]
[91.39536285 46.99140549]
[91.08330536 31.99465370]
[90.77124786 16.99790001]
[75.85214233 15.21847725]
[61.32588959 11.37995911]
[47.47525787 5.55706215]
[34.56985092 -2.13686800]
[22.86087227 -11.55206776]
[12.57624435 -22.50526619]
[3.91616011 -34.78325653]
[-2.95081043 -48.14704514]
[-7.89099932 -62.33650208]
[-10.80824375 -77.07542419]
[-11.64575958 -92.07691193]
[-10.38724422 -107.04896545]
[-7.05719471 -121.70013428]
[-1.72043109 -135.74523926]
[5.51916456 -148.91090393]
[14.52067089 -160.94082642]
[25.10887146 -171.60084534]
[37.07766342 -180.68347168]
[50.19407272 -188.01190186]
[64.20278168 -193.44349670]
[78.83110809 -196.87252808]
[93.79431152 -198.23222351]
[108.80111694 -197.49613953]
[123.55942535 -194.67860413]
[137.78195190 -189.83445740]
[151.19186401 -183.05798340]
[163.52812195 -174.48110962]
[174.55059814 -164.27076721]
[184.04473877 -152.62570190]
[191.82572937 -139.77259827]
[197.74214172 -125.96165466]
[201.67877197 -111.46168518]
[203.55900574 -96.55494690]
[203.34625244 -81.53160858]
[201.04466248 -66.68408966]
[196.69900513 -52.30141068]
[190.39389038 -38.66353226]
[182.25204468 -26.03592300]
[172.43196106 -14.66438007]
[161.12477112 -4.77025461]
[148.55059814 3.45386124]
[134.95417786 9.84788322]
[120.60017395 14.28734875]
[105.76800537 16.68584251]
[106.08005524 31.68259621]
[106.39211273 46.67935181]
[106.70417023 61.67610550]
[113.43422699 63.48714828]
[119.73317719 66.46988678]
[125.39889526 70.52861023]
[130.24955750 75.53306580]
[134.12951660 81.32266235]
[136.91426086 87.71161652]
[138.51441956 94.49490356]
[153.49414062 95.27474976]
[168.47384644 96.05459595]
[183.45356750 96.83444214]
[198.43328857 97.61428833]
[210.00524902 86.85021210]
[225.79595947 87.50495911]
[236.43708801 99.19007874]
[235.61543274 114.97299194]
[223.81846619 125.48998260]
[208.04510498 124.50150299]
[197.65344238 112.59400177]
[182.67372131 111.81415558]
[167.69400024 111.03430939]
[152.71429443 110.25446320]
[137.73457336 109.47462463]
[126.78592682 128.21667480]
[107.50000000 138.17613220]
[107.50000000 153.17613220]
[107.50000000 168.17613220]
[118.39455414 179.30924988]
[118.18087006 194.52139282]
[107.50000000 204.83906555]
[107.50000000 219.83906555]
[107.50000000 234.83906555]
[107.50000000 249.83906555]
[107.50000000 264.83908081]
[107.50000000 279.83908081]
[107.50000000 294.83908081]
[107.50000000 309.83908081]
[107.50000000 324.83908081]
[107.50000000 339.83908081]
[107.50000000 354.83908081]
[107.50000000 369.83908081]
[122.03988647 373.90039062]
[134.94427490 381.73489380]
[145.25555420 392.76123047]
[152.20857239 406.16116333]
[155.28736877 420.94030762]
[154.26348877 436.00198364]
[149.21287537 450.22851562]
[140.51036072 462.56417847]
[128.80169678 472.09359741]
[114.95575714 478.10961914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[25 126]
[26 125]
[27 124]
[29 45]
[30 44]
[31 43]
[32 42]
[50 100]
[51 99]
[52 98]
[53 97]
[107 122]
[108 121]
[109 120]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
