%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAGUCCUGGGGGGGGGGCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGxxxxxxxxxxCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCCCCCCCCCCCUCCUAGACCU\
) } def
/len { sequence length } bind def

/coor [
[4.96209478 328.74584961]
[-8.01744938 322.91052246]
[-20.64046288 316.33944702]
[-32.86528015 309.05426025]
[-44.65155029 301.07910156]
[-55.96036911 292.44021606]
[-66.75441742 283.16613770]
[-76.99805450 273.28750610]
[-86.65748596 262.83691406]
[-95.70081329 251.84881592]
[-104.09819794 240.35954285]
[-116.70932007 248.48107910]
[-129.32044983 256.60263062]
[-141.75988770 264.98477173]
[-154.02226257 273.62387085]
[-166.28462219 282.26300049]
[-178.54699707 290.90209961]
[-190.80935669 299.54122925]
[-203.07173157 308.18032837]
[-215.33410645 316.81945801]
[-227.59646606 325.45858765]
[-237.06248474 339.52380371]
[-253.19850159 334.32138062]
[-252.66627502 317.37579346]
[-236.23558044 313.19619751]
[-223.97322083 304.55709839]
[-211.71084595 295.91796875]
[-199.44848633 287.27886963]
[-187.18611145 278.63973999]
[-174.92373657 270.00064087]
[-162.66137695 261.36151123]
[-150.39900208 252.72239685]
[-148.70970154 248.19229126]
[-144.12031555 244.70391846]
[-137.44198608 243.99148560]
[-124.83086395 235.86994934]
[-112.21973419 227.74841309]
[-120.90592957 212.05999756]
[-128.43434143 195.78427124]
[-134.76550293 179.00653076]
[-139.86624146 161.81471252]
[-143.70982361 144.29891968]
[-146.27610779 126.55094910]
[-147.55163574 108.66382599]
[-147.52972412 90.73129272]
[-146.21049500 72.84733582]
[-143.60084534 55.10569382]
[-139.71447754 37.59934616]
[-134.57174683 20.42004204]
[-128.19960022 3.65782261]
[-120.63144684 -12.59945869]
[-111.90694427 -28.26659775]
[-102.07181549 -43.26148224]
[-91.17761993 -57.50551987]
[-79.28144836 -70.92406464]
[-66.44564819 -83.44677734]
[-52.73748779 -95.00802612]
[-38.22882080 -105.54723358]
[-46.21873856 -118.24216461]
[-54.20865631 -130.93708801]
[-67.76273346 -141.12155151]
[-61.72842789 -156.96527100]
[-44.83342361 -155.55276489]
[-41.51372528 -138.92700195]
[-33.52380753 -126.23207855]
[-25.53389359 -113.53714752]
[-13.58499336 -120.12569427]
[-1.29142499 -126.04627991]
[11.30950832 -131.28092957]
[24.17956924 -135.81376648]
[37.27970505 -139.63104248]
[50.57016373 -142.72116089]
[64.01061249 -145.07475281]
[77.56027222 -146.68467712]
[91.17802429 -147.54605103]
[104.82254791 -147.65625000]
[118.45243835 -147.01493835]
[132.02633667 -145.62406921]
[145.50305176 -143.48786926]
[158.84167480 -140.61282349]
[172.00175476 -137.00762939]
[184.94335938 -132.68325806]
[197.62719727 -127.65280914]
[210.01478577 -121.93156433]
[222.06854248 -115.53687286]
[233.75189209 -108.48814392]
[245.02935791 -100.80676270]
[255.86676025 -92.51603699]
[266.23117065 -83.64113617]
[276.09118652 -74.20898438]
[285.41683960 -64.24819946]
[294.17984009 -53.78900528]
[302.35363770 -42.86314774]
[309.91339111 -31.50377655]
[316.83615112 -19.74536133]
[323.10095215 -7.62358522]
[328.68875122 4.82477140]
[342.70547485 -0.51674116]
[356.72219849 -5.85825348]
[359.08239746 -21.03471375]
[368.72714233 -32.98773193]
[383.06201172 -38.50200653]
[398.23098755 -36.09422302]
[410.15371704 -26.41206741]
[415.62304688 -12.05998898]
[413.16772461 3.10137582]
[403.44824219 14.99369621]
[389.07910156 20.41799736]
[373.92550659 17.91516876]
[362.06369019 8.15845966]
[348.04699707 13.49997139]
[334.03027344 18.84148407]
[338.30480957 32.41528702]
[341.79275513 46.21216202]
[344.48263550 60.18657684]
[346.36557007 74.29240417]
[347.43530273 88.48307800]
[347.68835449 102.71176910]
[347.12384033 116.93151093]
[345.74365234 131.09536743]
[343.55236816 145.15658569]
[340.55715942 159.06875610]
[336.76797485 172.78596497]
[332.19729614 186.26292419]
[326.86019897 199.45515442]
[320.77429199 212.31912231]
[313.95968628 224.81236267]
[306.43887329 236.89363098]
[298.23666382 248.52305603]
[289.38015747 259.66226196]
[279.89852905 270.27444458]
[269.82315063 280.32461548]
[259.18722534 289.77960205]
[248.02586365 298.60818481]
[236.37591553 306.78125000]
[224.27584839 314.27175903]
[211.76557922 321.05502319]
[198.88639832 327.10867310]
[185.68083191 332.41271973]
[172.19245911 336.94961548]
[158.46580505 340.70443726]
[144.54617310 343.66476440]
[130.47950745 345.82080078]
[116.31224060 347.16549683]
[102.09113312 347.69436646]
[87.86312103 347.40567017]
[73.67516327 346.30038452]
[59.57410049 344.38211060]
[45.60647202 341.65722656]
[31.81837654 338.13470459]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 37]
[12 36]
[13 35]
[14 32]
[15 31]
[16 30]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[58 66]
[59 65]
[60 64]
[97 112]
[98 111]
[99 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
