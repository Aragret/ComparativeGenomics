%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCCCUUAGGGGGGGGGGCGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAxxxxxxxxxxAAUAUAGUUUAACCAAAACAUCAGAUUGUGAAUCUGACAACAGAGGCUUACCCCCCCCCCCGACCCCUUA\
) } def
/len { sequence length } bind def

/coor [
[-1.82845521 464.28625488]
[-15.67439365 458.27023315]
[-27.38305473 448.74081421]
[-36.08557892 436.40515137]
[-41.13618088 422.17861938]
[-42.16007233 407.11694336]
[-39.08127594 392.33779907]
[-32.12825394 378.93786621]
[-21.81696892 367.91152954]
[-8.91258717 360.07702637]
[5.62729979 356.01571655]
[5.62729979 341.01571655]
[5.62729979 326.01571655]
[5.62729979 311.01571655]
[5.62729979 296.01571655]
[5.62729979 281.01571655]
[5.62729979 266.01571655]
[5.62729979 251.01570129]
[5.62729979 236.01570129]
[5.62729979 221.01570129]
[-4.92399073 210.35408020]
[-19.92317963 210.19804382]
[-33.80309296 217.79136658]
[-46.44918823 209.92208862]
[-60.32910156 217.51541138]
[-72.97519684 209.64614868]
[-87.97438812 209.49011230]
[-102.97357178 209.33407593]
[-117.97276306 209.17802429]
[-123.01807404 223.45471191]
[-132.42759705 235.31808472]
[-145.18066406 243.48129272]
[-159.89392090 247.05885315]
[-174.97137451 245.66271973]
[-188.77752686 239.44430542]
[-199.81480408 229.07815552]
[-206.88597107 215.68870544]
[-209.22398376 200.72833252]
[-206.57524109 185.81985474]
[-199.22706604 172.58041382]
[-187.97651672 162.44612122]
[-174.04397583 156.51626587]
[-158.94075012 155.43409729]
[-144.30509949 159.31698608]
[-131.72462463 167.74374390]
[-122.56393433 179.80029297]
[-117.81672668 194.17884827]
[-102.81753540 194.33488464]
[-87.81835175 194.49092102]
[-72.81916046 194.64695740]
[-60.01208878 187.04246521]
[-46.29315186 194.92289734]
[-33.48608017 187.31842041]
[-19.76714325 195.19885254]
[-4.76795387 195.35488892]
[0.73321205 174.93554688]
[17.36523247 163.71316528]
[36.20766068 166.00263977]
[45.71601868 154.40129089]
[55.22437668 142.79995728]
[64.73273468 131.19860840]
[56.01448822 116.80500031]
[52.91429901 100.26496887]
[55.82814407 83.69109344]
[64.38385010 69.20027161]
[77.48863983 58.64335632]
[93.46868896 53.36872864]
[93.78074646 38.37197495]
[94.09280396 23.37522125]
[80.29445648 16.93118668]
[70.31497192 5.42772055]
[65.88335419 -9.14213181]
[67.76739502 -24.25405693]
[75.64069366 -37.28982162]
[88.13913727 -45.99089813]
[103.09730530 -48.84977341]
[117.92359924 -45.37113571]
[130.04927063 -36.15767288]
[137.37348938 -22.80567551]
[138.62725830 -7.62845850]
[133.59339905 6.74443388]
[123.14402008 17.82281113]
[109.08956146 23.68727875]
[108.77750397 38.68403244]
[108.46544647 53.68078613]
[117.22431946 56.17699051]
[125.33879089 60.31273270]
[135.32151794 49.11696625]
[145.30424500 37.92119980]
[155.28697205 26.72543526]
[155.80877686 10.69087029]
[168.75605774 1.21735668]
[184.19676208 5.57216311]
[190.28610229 20.41465378]
[182.35285950 34.35894012]
[166.48272705 36.70816040]
[156.50000000 47.90392685]
[146.51727295 59.09969330]
[136.53456116 70.29545593]
[141.10067749 77.02462006]
[144.44087219 84.43907928]
[159.20692444 81.80021667]
[173.97297668 79.16134644]
[188.73904419 76.52248383]
[203.50509644 73.88362122]
[218.27114868 71.24475861]
[233.03720093 68.60589600]
[247.56561279 59.86736679]
[259.98449707 71.40892792]
[252.33186340 86.53749847]
[235.67607117 83.37194824]
[220.91001892 86.01081085]
[206.14395142 88.64967346]
[191.37789917 91.28854370]
[176.61184692 93.92740631]
[161.84579468 96.56626892]
[147.07974243 99.20513153]
[144.46118164 115.50278473]
[136.37866211 129.89524841]
[123.82545471 140.61380005]
[108.34426117 146.34120178]
[91.83761597 146.37358093]
[76.33407593 140.70697021]
[66.82571411 152.30830383]
[57.31735992 163.90965271]
[47.80900192 175.51098633]
[53.08396912 186.84559631]
[52.63558578 199.77297974]
[46.17066193 211.47427368]
[34.74918365 219.22282410]
[20.62730026 221.01570129]
[20.62730026 236.01570129]
[20.62730026 251.01570129]
[20.62730026 266.01571655]
[20.62730026 281.01571655]
[20.62730026 296.01571655]
[20.62730026 311.01571655]
[20.62730026 326.01571655]
[20.62730026 341.01571655]
[20.62730026 356.01571655]
[35.16718674 360.07702637]
[48.07156754 367.91152954]
[58.38285065 378.93786621]
[65.33587646 392.33779907]
[68.41467285 407.11694336]
[67.39077759 422.17861938]
[62.34017944 436.40515137]
[53.63765335 448.74081421]
[41.92899323 458.27023315]
[28.08305550 464.28625488]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 55]
[22 54]
[24 52]
[26 50]
[27 49]
[28 48]
[29 47]
[58 126]
[59 125]
[60 124]
[61 123]
[67 85]
[68 84]
[69 83]
[87 99]
[88 98]
[89 97]
[90 96]
[101 117]
[102 116]
[103 115]
[104 114]
[105 113]
[106 112]
[107 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
