%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCCCCUGGGGGGGGGGGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCxxxxxxxxxxGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACCCCCCCCCCCAACCCCCUAG\
) } def
/len { sequence length } bind def

/coor [
[78.58271790 365.33193970]
[66.49269867 356.29125977]
[57.29106903 344.32327271]
[51.66065216 330.31610107]
[50.01926804 315.30914307]
[52.48871231 300.41604614]
[58.88573837 286.74197388]
[68.73564148 275.30160522]
[81.30749512 266.94390869]
[95.66838837 262.28909302]
[95.05255890 247.30172729]
[94.43673706 232.31437683]
[93.82091522 217.32702637]
[93.20508575 202.33966064]
[92.58926392 187.35231018]
[91.97343445 172.36495972]
[91.35761261 157.37760925]
[90.74178314 142.39025879]
[90.12596130 127.40290070]
[77.13557434 119.90290070]
[63.84823608 126.86325836]
[50.56089401 133.82360840]
[48.44004440 149.19506836]
[37.66487503 160.36088562]
[22.37865829 163.02755737]
[8.45925713 156.16972351]
[1.25896549 142.42434692]
[3.54644251 127.07680511]
[14.44210625 116.02854156]
[29.75635147 113.52783966]
[43.60054016 120.53627014]
[56.88788223 113.57591248]
[70.17522430 106.61556244]
[70.48320007 91.61872101]
[57.49281693 84.11872101]
[44.50243759 76.61872101]
[31.51205635 69.11872101]
[18.52167511 61.61872101]
[8.18569088 72.58522034]
[-4.40106630 80.87197113]
[-18.55980873 86.03208160]
[-33.52697372 87.78726959]
[-48.49540329 86.04287720]
[-62.65786362 80.89298248]
[-75.25059509 72.61531067]
[-85.59448242 61.65626526]
[-93.13169861 48.60685730]
[-97.45577240 34.17082214]
[-98.33350372 19.12667656]
[-95.71756744 4.28573322]
[-89.74903107 -9.55165386]
[-80.74977112 -21.63925171]
[-69.20510864 -31.32519341]
[-55.73762894 -38.08712769]
[-41.07361984 -41.56038666]
[-26.00389099 -41.55767059]
[-11.34113407 -38.07912064]
[2.12390518 -31.31233215]
[13.66507530 -21.62222862]
[22.65997696 -9.53138638]
[28.62352371 4.30815220]
[31.23410988 19.15003777]
[30.35095215 34.19386292]
[26.02167511 48.62834167]
[39.01205444 56.12834167]
[52.00243759 63.62834167]
[64.99282074 71.12834167]
[77.98320007 78.62834167]
[91.12483215 71.39663696]
[91.74065399 56.40928268]
[77.93281555 50.05224228]
[67.61244202 38.89167404]
[62.35330963 24.62948799]
[62.95740509 9.44056034]
[69.33260345 -4.35890532]
[80.50673676 -14.66459179]
[94.77583313 -19.90495682]
[109.96395111 -19.28088188]
[123.75502014 -12.88753414]
[134.04598999 -1.69985354]
[139.26759338 12.57612038]
[138.62353516 27.76340675]
[132.21205139 41.54605103]
[121.01084137 51.82230377]
[106.72801208 57.02510834]
[106.11218262 72.01246643]
[118.26551819 80.80430603]
[132.30749512 75.52956390]
[126.46777344 62.97056198]
[129.93739319 45.96455002]
[144.80004883 30.82120705]
[158.08738708 23.86085129]
[171.37472534 16.90049553]
[184.66206360 9.94013882]
[182.35079956 -5.02437925]
[185.02619934 -19.92810249]
[192.39805603 -33.15438843]
[203.66670227 -43.26854324]
[217.60983276 -49.17346573]
[232.71496582 -50.22863007]
[247.34364319 -46.31958008]
[259.90902710 -37.87033844]
[269.04815674 -25.79742241]
[273.76962280 -11.41040611]
[273.56134033 3.73011398]
[268.44589233 17.98180580]
[258.97811890 29.79875565]
[246.18507385 37.89914322]
[231.45440674 41.40430832]
[216.38400269 39.93402481]
[202.60859680 33.64778900]
[191.62242126 23.22747993]
[178.33508301 30.18783569]
[165.04774475 37.14819336]
[151.76039124 44.10854721]
[153.75654602 58.97580719]
[155.75251770 73.84174347]
[170.40524292 77.05074310]
[187.17117310 74.53289795]
[194.23190308 89.94661713]
[181.37515259 100.99833679]
[167.19624329 91.70346832]
[152.54351807 88.49446869]
[137.58222961 89.57154083]
[123.54026031 94.84628296]
[124.54910278 100.31210327]
[124.28199005 105.96684265]
[122.70642853 111.51128387]
[119.86033630 116.64158630]
[115.85235596 121.06592560]
[110.85822296 124.52091980]
[105.11331177 126.78707886]
[105.72914124 141.77442932]
[106.34496307 156.76177979]
[106.96078491 171.74913025]
[107.57661438 186.73649597]
[108.19243622 201.72384644]
[108.80826569 216.71119690]
[109.42408752 231.69854736]
[110.03991699 246.68589783]
[110.65573883 261.67324829]
[125.35010529 265.13421631]
[138.56524658 272.43231201]
[149.32052612 283.02603149]
[156.81782532 296.12921143]
[160.50079346 310.76950073]
[160.09611511 325.86050415]
[155.63385010 340.28240967]
[147.44509888 352.96493530]
[136.13754272 362.96704102]
[122.55026245 369.54641724]
[107.69153595 372.21490479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 141]
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 33]
[21 32]
[22 31]
[34 68]
[35 67]
[36 66]
[37 65]
[38 64]
[69 86]
[70 85]
[87 125]
[88 124]
[91 115]
[92 114]
[93 113]
[94 112]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
