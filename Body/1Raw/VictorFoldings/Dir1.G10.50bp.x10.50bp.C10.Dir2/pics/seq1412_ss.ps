%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAACCUCAACGGGGGGGGGGAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAxxxxxxxxxxCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGCCCCCCCCCCUCAACCUCAAC\
) } def
/len { sequence length } bind def

/coor [
[66.80428314 388.99142456]
[52.78234100 383.43841553]
[40.58238220 374.57208252]
[30.97131157 362.94976807]
[24.55328560 349.30206299]
[21.73174858 334.48687744]
[22.68406487 319.43551636]
[27.35037041 305.09408569]
[35.43733597 292.36413574]
[46.43661118 282.04586792]
[59.65676880 274.78787231]
[74.26678467 271.04644775]
[74.26678467 256.04644775]
[74.26678467 241.04644775]
[74.26678467 226.04644775]
[74.26678467 211.04644775]
[74.26678467 196.04644775]
[74.26678467 181.04644775]
[74.26678467 166.04644775]
[74.26678467 151.04644775]
[74.26678467 136.04644775]
[62.11344910 127.25460052]
[47.86675644 131.94839478]
[33.62006378 136.64219666]
[19.37337303 141.33599854]
[16.32039642 156.38841248]
[6.13821936 167.88705444]
[-8.43420506 172.73886108]
[-23.47696686 169.63871765]
[-34.94363785 159.42054749]
[-39.74974442 144.83299255]
[-36.60246277 129.80001831]
[-26.34840202 118.36542511]
[-11.74584770 113.60507202]
[3.27718353 116.79945374]
[14.67957306 127.08930969]
[28.92626381 122.39550781]
[43.17295837 117.70170593]
[57.41964722 113.00791168]
[58.65026093 98.05847168]
[45.36291885 91.09812164]
[32.07557678 84.13776398]
[18.78823662 77.17740631]
[5.50089550 70.21704865]
[-7.06153870 73.31364441]
[-18.00332451 67.19411469]
[-21.69546700 55.63425827]
[-34.83709717 48.40255356]
[-51.21275330 49.28004837]
[-59.93253708 35.39129639]
[-52.02628708 21.02386093]
[-35.62727356 20.95772362]
[-27.60539627 35.26092529]
[-14.46376419 42.49262619]
[3.00820637 41.16041565]
[12.46125221 56.92970657]
[25.74859238 63.89006424]
[39.03593445 70.85041809]
[52.32327652 77.81077576]
[65.61061859 84.77113342]
[81.22891235 72.42718506]
[98.79243469 70.92382050]
[112.23127747 78.37245178]
[123.21208191 68.15373993]
[134.19288635 57.93503571]
[125.09181976 45.99613190]
[117.20481110 33.22264862]
[110.60781860 19.73760223]
[105.36437225 5.67086601]
[101.52497864 -8.84208775]
[99.12660217 -23.66148758]
[98.19235992 -38.64461136]
[98.73123169 -53.64715576]
[100.73802948 -68.52464294]
[104.19343567 -83.13378143]
[109.06417084 -97.33387756]
[115.30331421 -110.98817444]
[122.85079193 -123.96517181]
[131.63391113 -136.13989258]
[141.56806946 -147.39506531]
[152.55761719 -157.62231445]
[164.49670410 -166.72314453]
[177.27033997 -174.60990906]
[190.75552368 -181.20661926]
[204.82235718 -186.44978333]
[219.33538818 -190.28889465]
[234.15484619 -192.68696594]
[249.13798523 -193.62091064]
[264.14053345 -193.08174133]
[279.01797485 -191.07464600]
[293.62704468 -187.61894226]
[307.82702637 -182.74794006]
[321.48120117 -176.50851440]
[334.45803833 -168.96078491]
[346.63259888 -160.17741394]
[357.88757324 -150.24302673]
[368.11459351 -139.25328064]
[377.21517944 -127.31401062]
[385.10168457 -114.54021454]
[391.69815063 -101.05490112]
[396.94104004 -86.98795319]
[400.77984619 -72.47484589]
[403.17761230 -57.65535355]
[404.11126709 -42.67219162]
[403.57180786 -27.66966629]
[401.56439209 -12.79226303]
[398.10839844 1.81673837]
[393.23712158 16.01664162]
[386.99740601 29.67068863]
[379.44943237 42.64738083]
[370.66583252 54.82174683]
[360.73120117 66.07653046]
[349.74124146 76.30334473]
[337.80178833 85.40369415]
[325.02783203 93.28993225]
[311.54241943 99.88612366]
[297.47534180 105.12872314]
[282.96215820 108.96724701]
[268.14263916 111.36473083]
[253.15943909 112.29808044]
[238.15693665 111.75830841]
[223.27957153 109.75061035]
[208.67063904 106.29432678]
[194.47082520 101.42274475]
[180.81690979 95.18277740]
[167.84036255 87.63452911]
[155.66618347 78.85067749]
[144.41159058 68.91584015]
[133.43078613 79.13454437]
[122.44998932 89.35324860]
[123.70932007 120.32463074]
[89.26678467 136.04644775]
[89.26678467 151.04644775]
[89.26678467 166.04644775]
[89.26678467 181.04644775]
[89.26678467 196.04644775]
[89.26678467 211.04644775]
[89.26678467 226.04644775]
[89.26678467 241.04644775]
[89.26678467 256.04644775]
[89.26678467 271.04644775]
[103.87679291 274.78787231]
[117.09695435 282.04586792]
[128.09622192 292.36413574]
[136.18319702 305.09408569]
[140.84950256 319.43551636]
[141.80181885 334.48687744]
[138.98028564 349.30206299]
[132.56225586 362.94976807]
[122.95117950 374.57208252]
[110.75122833 383.43841553]
[96.72927856 388.99142456]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 39]
[23 38]
[24 37]
[25 36]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[47 54]
[48 53]
[63 130]
[64 129]
[65 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
