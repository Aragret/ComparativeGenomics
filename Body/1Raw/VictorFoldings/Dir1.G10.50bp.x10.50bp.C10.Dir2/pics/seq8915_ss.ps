%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUAACCAACGGGGGGGGGGACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUAxxxxxxxxxxAAUCUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGUAACUACCCCCCCCCCCUACUAAUCAAC\
) } def
/len { sequence length } bind def

/coor [
[90.92453766 482.33712769]
[76.76393890 477.18212891]
[64.17419434 468.89993286]
[53.83425522 457.93713379]
[46.30174255 444.88500977]
[41.98287964 430.44741821]
[41.11056900 415.40295410]
[43.73186111 400.56295776]
[49.70538712 386.72772217]
[58.70900345 374.64337158]
[70.25716400 364.96160889]
[83.72707367 358.20452881]
[98.39234161 354.73654175]
[98.39234161 339.73654175]
[98.39234161 324.73654175]
[98.39234161 309.73654175]
[98.39234161 294.73654175]
[98.39234161 279.73654175]
[98.39234161 264.73654175]
[98.39234161 249.73655701]
[98.39234161 234.73655701]
[98.39234161 219.73655701]
[83.63851166 207.09169006]
[82.83573914 187.37411499]
[96.93897247 173.14143372]
[96.02745819 158.16915894]
[95.11594391 143.19686890]
[75.65045929 136.01283264]
[61.73197937 120.62480927]
[56.53122711 100.53830719]
[61.23296738 80.32917786]
[74.76611328 64.60120392]
[68.29701233 51.06787872]
[61.82791519 37.53455734]
[55.35881805 24.00123787]
[48.88972092 10.46791649]
[36.66574097 1.77456939]
[21.75884438 0.10589246]
[6.85195017 -1.56278443]
[-7.94922256 5.49818707]
[-21.30970764 -4.01125574]
[-19.48538208 -20.30861282]
[-4.35295630 -26.62856102]
[8.52062702 -16.46967888]
[23.42752266 -14.80100250]
[38.33441544 -13.13232517]
[43.50166702 -18.56827164]
[29.96835899 -25.03739166]
[31.93885803 -39.90739822]
[46.68999863 -42.62840271]
[53.83617401 -29.44016266]
[59.00342560 -34.87611008]
[56.58186722 -49.67935562]
[54.16030884 -64.48259735]
[51.73875427 -79.28584290]
[49.31719589 -94.08908844]
[37.52087021 -100.66249847]
[31.76544952 -112.66294098]
[33.95867920 -125.59252167]
[43.07451248 -134.74732971]
[40.95346832 -149.59661865]
[38.83242416 -164.44589233]
[36.71138382 -179.29518127]
[21.74330902 -181.25970459]
[7.86076784 -187.19078064]
[-3.90606499 -196.64826965]
[-12.68401241 -208.93037415]
[-17.82169151 -223.12568665]
[-18.93785286 -238.18081665]
[-15.94966984 -252.97856140]
[-9.07888603 -266.42083740]
[1.16464186 -277.51016235]
[14.02077484 -285.42358398]
[28.53550339 -289.57391357]
[43.63173676 -289.65316772]
[58.18923950 -285.65542603]
[71.12773895 -277.87741089]
[81.48712158 -266.89624023]
[88.49864960 -253.52684021]
[91.64201355 -238.76127625]
[90.68396759 -223.69526672]
[85.69559479 -209.44679260]
[77.04707336 -197.07321167]
[65.38017273 -187.49270630]
[51.56066513 -181.41621399]
[53.68170929 -166.56694031]
[55.80274963 -151.71765137]
[57.92379379 -136.86837769]
[71.78474426 -127.39096832]
[74.58572388 -110.49326324]
[64.12043762 -96.51064301]
[66.54199982 -81.70739746]
[68.96355438 -66.90415955]
[71.38510895 -52.10091019]
[73.80667114 -37.29766464]
[76.96125793 -10.06682014]
[62.42304230 3.99881887]
[68.89214325 17.53214073]
[75.36123657 31.06546021]
[81.83033752 44.59878159]
[88.29943085 58.13210297]
[99.29797363 56.53356171]
[110.34239960 57.77608490]
[120.71082306 61.77846527]
[129.72554016 68.27909088]
[136.79733276 76.85306549]
[141.46395874 86.93997955]
[156.33396912 84.96952820]
[171.20399475 82.99907684]
[186.07400513 81.02862549]
[196.93185425 69.21818542]
[212.92463684 70.48719788]
[221.78405762 83.86218262]
[216.71392822 99.08300018]
[201.60360718 104.47353363]
[188.04444885 95.89863586]
[173.17443848 97.86908722]
[158.30442810 99.83953857]
[143.43441772 101.80998993]
[142.03912354 111.06963348]
[138.69320679 119.81565094]
[133.55192566 127.64221954]
[126.85384369 134.18618774]
[118.90973663 139.14390564]
[110.08821869 142.28536987]
[110.99973297 157.25764465]
[111.91124725 172.22991943]
[121.49979401 177.13706970]
[128.11099243 185.53779602]
[130.58868408 195.85351562]
[128.54553223 206.18138123]
[122.42170715 214.64526367]
[113.39234161 219.73655701]
[113.39234161 234.73655701]
[113.39234161 249.73655701]
[113.39234161 264.73654175]
[113.39234161 279.73654175]
[113.39234161 294.73654175]
[113.39234161 309.73654175]
[113.39234161 324.73654175]
[113.39234161 339.73654175]
[113.39234161 354.73654175]
[128.05760193 358.20452881]
[141.52751160 364.96160889]
[153.07566833 374.64337158]
[162.07928467 386.72772217]
[168.05281067 400.56295776]
[170.67410278 415.40295410]
[169.80180359 430.44741821]
[165.48292542 444.88500977]
[157.95042419 457.93713379]
[147.61048889 468.89993286]
[135.02073669 477.18212891]
[120.86013794 482.33712769]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[25 127]
[26 126]
[27 125]
[32 101]
[33 100]
[34 99]
[35 98]
[36 97]
[37 46]
[38 45]
[39 44]
[52 95]
[53 94]
[54 93]
[55 92]
[56 91]
[60 88]
[61 87]
[62 86]
[63 85]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
