%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUCUCCCCGGGGGGGGGGUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCxxxxxxxxxxCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCCCCCCCCCCCUAUUUCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 374.81005859]
[71.19830322 368.79403687]
[59.48964310 359.26461792]
[50.78712082 346.92895508]
[45.73651886 332.70242310]
[44.71262741 317.64074707]
[47.79142761 302.86160278]
[54.74444962 289.46166992]
[65.05573273 278.43533325]
[77.96011353 270.60083008]
[92.50000000 266.53952026]
[92.50000000 251.53950500]
[92.50000000 236.53950500]
[92.50000000 221.53950500]
[92.50000000 206.53950500]
[92.50000000 191.53950500]
[92.50000000 176.53950500]
[92.50000000 161.53950500]
[92.50000000 146.53950500]
[92.50000000 131.53950500]
[76.48796844 122.31983185]
[68.11322021 105.85012817]
[53.13350677 105.07028198]
[38.15378952 104.29043579]
[23.17407608 103.51058960]
[11.48960400 113.81160736]
[-3.69084764 112.80734253]
[-13.43928051 101.60449982]
[-28.41899490 100.82465363]
[-43.39870834 100.04480743]
[-58.37842560 99.26496124]
[-68.17063141 111.15692902]
[-82.91523743 114.95825195]
[-96.90545654 109.41410065]
[-104.85327148 96.84548187]
[-119.83299255 96.06563568]
[-134.81269836 95.28578949]
[-150.94476318 100.50048065]
[-160.42146301 86.44243622]
[-149.53622437 73.44444275]
[-134.03285217 80.30607605]
[-119.05314636 81.08592224]
[-104.07343292 81.86576080]
[-94.86346436 70.19038391]
[-80.37317657 66.12892151]
[-66.10300446 71.44075775]
[-57.59857941 84.28524780]
[-42.61886597 85.06509399]
[-27.63915062 85.84494019]
[-12.65943527 86.62478638]
[-1.80041242 76.49476624]
[13.40225697 77.07225037]
[23.95392227 88.53087616]
[38.93363571 89.31072235]
[53.91334915 90.09056854]
[68.89306641 90.87041473]
[78.79996490 75.47350311]
[95.46857452 67.89926910]
[113.58248138 70.56350708]
[122.84742737 58.76686859]
[132.11238098 46.97022629]
[141.25410461 35.07784653]
[150.27163696 23.09101486]
[136.34140015 28.65414619]
[121.49415588 30.78941727]
[106.56077576 29.37733459]
[92.37692261 24.49691963]
[79.73635101 16.42128563]
[69.34642029 5.60234833]
[61.78856659 -7.35445881]
[57.48572922 -21.72406578]
[56.67869568 -36.70233917]
[59.41263199 -51.45108795]
[65.53453827 -65.14496613]
[74.70183563 -77.01764679]
[86.40151215 -86.40474701]
[99.97885132 -92.78093719]
[114.67405701 -95.78941345]
[129.66477966 -95.26181793]
[144.11212158 -91.22768402]
[157.20761108 -83.91275024]
[168.21839905 -73.72636414]
[176.52835083 -61.23857880]
[181.67239380 -47.14820099]
[183.36270142 -32.24374008]
[181.50465393 -17.35926247]
[176.20223999 -3.32770991]
[167.75268555 9.06514263]
[181.40893555 2.85973549]
[195.06517029 -3.34567142]
[180.29867554 -5.98204470]
[167.81796265 -14.30262280]
[159.70512390 -26.91934586]
[157.31353760 -41.72746277]
[161.04219055 -56.25664902]
[170.26904297 -68.08310699]
[183.45486450 -75.23391724]
[198.39996338 -76.51616669]
[212.61114502 -71.71595001]
[223.71768188 -61.63404083]
[229.86676025 -47.95234299]
[230.03254700 -32.95325851]
[224.18742371 -19.13897514]
[213.30766296 -8.81477261]
[228.12541199 -11.14587688]
[242.94317627 -13.47698116]
[252.04222107 -26.39917183]
[267.62765503 -29.02019310]
[280.45291138 -19.78503799]
[282.90902710 -4.17276335]
[273.53878784 8.55414772]
[257.90139771 10.84504414]
[245.27427673 1.34077728]
[230.45652771 3.67188120]
[215.63876343 6.00298500]
[201.27058411 10.31056976]
[187.61433411 16.51597595]
[173.95809937 22.72138405]
[162.25846863 32.10854721]
[153.24093628 44.09537888]
[151.72334290 51.37840652]
[143.90901184 56.23517609]
[134.64407349 68.03181458]
[125.37911987 79.82846069]
[130.05096436 87.83733368]
[132.26472473 96.84107971]
[131.83930969 106.10322571]
[128.80952454 114.86613464]
[123.42320251 122.41304016]
[116.12092590 128.12661743]
[107.50000000 131.53950500]
[107.50000000 146.53950500]
[107.50000000 161.53950500]
[107.50000000 176.53950500]
[107.50000000 191.53950500]
[107.50000000 206.53950500]
[107.50000000 221.53950500]
[107.50000000 236.53950500]
[107.50000000 251.53950500]
[107.50000000 266.53952026]
[122.03988647 270.60083008]
[134.94427490 278.43533325]
[145.25555420 289.46166992]
[152.20857239 302.86160278]
[155.28736877 317.64074707]
[154.26348877 332.70242310]
[149.21287537 346.92895508]
[140.51036072 359.26461792]
[128.80169678 368.79403687]
[114.95575714 374.81005859]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 56]
[23 55]
[24 54]
[25 53]
[28 50]
[29 49]
[30 48]
[31 47]
[35 43]
[36 42]
[37 41]
[59 124]
[60 123]
[61 122]
[62 120]
[63 119]
[88 118]
[89 117]
[90 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
