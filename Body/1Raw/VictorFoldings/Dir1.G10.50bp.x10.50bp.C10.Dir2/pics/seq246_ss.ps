%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUAACAAAAGGGGGGGGGGAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACAxxxxxxxxxxAAUCAUUUUCCUUAUCUGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACCCCCCCCCCCUCACAACAAAA\
) } def
/len { sequence length } bind def

/coor [
[78.33880615 188.46878052]
[71.26814270 186.43154907]
[64.38500977 183.83021545]
[57.73431778 180.68174744]
[51.35947800 177.00669861]
[45.30210114 172.82905579]
[39.60171509 168.17608643]
[34.29552460 163.07815552]
[29.41816711 157.56854248]
[25.00147057 151.68318176]
[21.07426071 145.46052551]
[17.66217232 138.94114685]
[3.62019491 144.21589661]
[-10.42178154 149.49063110]
[-24.46375847 154.76538086]
[-38.50573349 160.04011536]
[-52.49281693 165.45874023]
[-66.42353058 171.02067566]
[-80.35424805 176.58262634]
[-94.28496552 182.14456177]
[-108.21568298 187.70649719]
[-114.51551819 201.95254517]
[-128.72247314 207.39468384]
[-142.26507568 201.30096436]
[-156.19580078 206.86289978]
[-170.12651062 212.42483521]
[-177.75140381 226.54010010]
[-193.56607056 229.23750305]
[-205.43884277 218.44784546]
[-204.26196289 202.44802856]
[-190.93821716 193.51171875]
[-175.68844604 198.49411011]
[-161.75773621 192.93217468]
[-147.82702637 187.37023926]
[-142.20526123 173.62501526]
[-128.15676880 167.78596497]
[-113.77761841 173.77577209]
[-99.84690094 168.21383667]
[-85.91619110 162.65190125]
[-71.98547363 157.08996582]
[-58.05475616 151.52803040]
[-52.97757721 146.09346008]
[-43.78047562 145.99813843]
[-29.73849869 140.72340393]
[-15.69652271 135.44865417]
[-1.65454662 130.17391968]
[12.38743019 124.89917755]
[8.96180439 97.17538452]
[14.09954262 69.71728516]
[27.31737137 45.10767746]
[47.37197876 25.66143227]
[72.37695312 13.20772552]
[99.98024750 8.91799831]
[127.58540344 13.19575405]
[133.29006958 -0.67712623]
[138.99473572 -14.55000687]
[136.09988403 -32.70628738]
[150.34051514 -42.91651917]
[155.75914001 -56.90360260]
[161.17776489 -70.89068604]
[166.59638977 -84.87776947]
[164.36676025 -100.54108429]
[176.17919922 -109.61387634]
[181.59782410 -123.60095978]
[187.01644897 -137.58804321]
[173.96739197 -145.04321289]
[162.17527771 -154.36006165]
[151.90353394 -165.33044434]
[143.38166809 -177.70925903]
[136.80004883 -191.22000122]
[132.30569458 -205.56079102]
[129.99902344 -220.41128540]
[129.93157959 -235.43968201]
[132.10484314 -250.31028748]
[136.47029114 -264.69085693]
[142.93037415 -278.26010132]
[151.34078979 -290.71493530]
[161.51364136 -301.77706909]
[173.22164917 -311.19940186]
[186.20326233 -318.77139282]
[200.16848755 -324.32391357]
[214.80529785 -327.73291016]
[229.78672791 -328.92224121]
[244.77807617 -327.86529541]
[259.44442749 -324.58572388]
[273.45816040 -319.15679932]
[286.50616455 -311.69976807]
[298.29693604 -302.38122559]
[308.56710815 -291.40939331]
[317.08721924 -279.02935791]
[323.66693115 -265.51770020]
[328.15924072 -251.17625427]
[330.46377563 -236.32543945]
[330.52908325 -221.29701233]
[328.35369873 -206.42672729]
[323.98620605 -192.04679871]
[317.52420044 -178.47845459]
[309.11199951 -166.02482605]
[298.93759155 -154.96414185]
[287.22821045 -145.54348755]
[274.24551392 -137.97332764]
[260.27951050 -132.42279053]
[245.64222717 -129.01588440]
[230.66062927 -127.82868958]
[215.66943359 -128.88775635]
[201.00354004 -132.16941833]
[195.58491516 -118.18233490]
[190.16629028 -104.19525146]
[192.78347778 -89.53238678]
[180.58346558 -79.45914459]
[175.16484070 -65.47206116]
[169.74621582 -51.48497772]
[164.32759094 -37.49789429]
[168.92977905 -26.26926804]
[164.48144531 -14.54819012]
[152.86761475 -8.84534359]
[147.16294861 5.02753687]
[141.45828247 18.90041733]
[147.86949158 22.51165390]
[153.96826172 26.62862778]
[159.71479797 31.22446823]
[165.07160950 36.26918411]
[170.00372314 41.72984695]
[174.47894287 47.57081604]
[178.46806335 53.75397491]
[181.94505310 60.23896408]
[184.88722229 66.98345947]
[187.27534485 73.94343567]
[189.09387207 81.07347870]
[190.33091736 88.32704926]
[190.97839355 95.65680695]
[191.03208923 103.01490784]
[190.49165344 110.35332489]
[189.36061096 117.62417603]
[187.64634705 124.78000641]
[185.36004639 131.77409363]
[182.51663208 138.56082153]
[179.13465881 145.09585571]
[175.23620605 151.33657837]
[170.84671021 157.24224854]
[165.99482727 162.77430725]
[160.71221924 167.89666748]
[155.03337097 172.57589722]
[148.99533081 176.78143311]
[142.63751221 180.48585510]
[136.00141907 183.66497803]
[129.13035583 186.29804993]
[122.06917572 188.36788940]
[114.86395264 189.86097717]
[107.56172180 190.76757812]
[100.21013641 191.08175659]
[92.85717773 190.80149841]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 47]
[13 46]
[14 45]
[15 44]
[16 43]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[24 34]
[25 33]
[26 32]
[54 118]
[55 117]
[56 116]
[58 113]
[59 112]
[60 111]
[61 110]
[63 108]
[64 107]
[65 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
