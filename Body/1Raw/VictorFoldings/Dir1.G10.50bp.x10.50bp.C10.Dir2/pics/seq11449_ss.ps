%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUUAUUCUGGGGGGGGGGCGCACGGACUACAACCACGACCAAUGAUAUGAAAAACCAUCGUUGUAUUUxxxxxxxxxxGAGACGUAAAUUAUGGCUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCCCCCCCCCCCUCAAUAUUCU\
) } def
/len { sequence length } bind def

/coor [
[77.10249329 415.82449341]
[64.54427338 407.47332764]
[54.45804596 396.26089478]
[47.47785187 382.89196777]
[44.04246902 368.20697021]
[44.36784744 353.12902832]
[48.43353271 338.60589600]
[55.98395157 325.55056763]
[66.54447937 314.78366089]
[79.45127106 306.98202515]
[93.89300537 302.63607788]
[93.26902771 287.64904785]
[92.64505005 272.66204834]
[92.02107239 257.67501831]
[91.39709473 242.68801880]
[90.77311707 227.70098877]
[90.14913940 212.71397400]
[89.52516174 197.72695923]
[88.90118408 182.73994446]
[88.27720642 167.75292969]
[87.65322876 152.76591492]
[87.02925110 137.77890015]
[86.40527344 122.79188538]
[80.01202393 94.99140930]
[68.92070770 84.89276123]
[57.82939148 74.79411316]
[44.89033890 74.60768890]
[35.85491562 65.91400909]
[35.21353149 53.79394531]
[24.33470726 43.46673965]
[11.98313522 34.95565033]
[-1.54105484 28.46748543]
[-15.06524467 21.97932053]
[-20.39874268 22.39570808]
[-24.88598061 20.84101105]
[-27.90861130 17.98349762]
[-29.21134186 14.64128590]
[-42.30449677 7.32218027]
[-55.39765167 0.00307452]
[-68.49080658 -7.31603098]
[-79.41697693 3.12954879]
[-92.93736267 9.88902569]
[-107.84974670 12.36135197]
[-122.82810974 10.32668877]
[-136.54060364 3.96595860]
[-147.76792908 -6.15524769]
[-155.51173401 -19.13695908]
[-159.08346558 -33.82485199]
[-158.16551208 -48.91288376]
[-152.83950806 -63.05944443]
[-143.57904053 -75.00662994]
[-131.20755005 -83.69209290]
[-116.82508087 -88.34354401]
[-101.71051788 -88.54737091]
[-87.20784760 -84.28545380]
[-74.60663605 -75.93675995]
[-65.02736664 -64.24363708]
[-59.32182312 -50.24584579]
[-57.99734497 -35.18805313]
[-61.17169952 -20.40918541]
[-48.07854462 -13.09008026]
[-34.98538971 -5.77097416]
[-21.89223480 1.54813135]
[-8.57707977 8.45512962]
[4.94711018 14.94329453]
[18.47130013 21.43145943]
[10.66632366 8.62199688]
[7.91619635 -6.12374115]
[10.57905388 -20.88548851]
[18.30812454 -33.74089432]
[30.09689140 -43.01586151]
[44.41015625 -47.50255585]
[59.38397598 -46.61669540]
[73.06838226 -40.47364044]
[83.68131256 -29.87337685]
[89.84070587 -16.19632149]
[90.74445343 -1.22357190]
[86.27486420 13.09504318]
[77.01398468 24.89488029]
[64.16782379 32.63930130]
[49.40926743 35.31979370]
[34.66191101 32.58791351]
[45.54073715 42.91511917]
[62.77861404 46.05447388]
[67.92803955 63.70279694]
[79.01935577 73.80144501]
[90.11067200 83.90009308]
[84.62906647 69.93757629]
[89.92534637 55.90370941]
[103.26503754 49.04421234]
[117.76081848 52.90066147]
[125.92849731 65.48195648]
[123.55107117 80.29235840]
[111.85406494 89.68583679]
[126.49756622 86.43500519]
[141.14106750 83.18418121]
[155.78457642 79.93335724]
[170.39346313 76.53038025]
[184.96617126 72.97561646]
[199.53886414 69.42085266]
[214.11157227 65.86609650]
[217.23602295 50.92619324]
[226.54003906 38.82669067]
[240.17631531 31.96994781]
[255.43733215 31.71737671]
[269.29302979 38.11912537]
[278.99234009 49.90412140]
[282.60946655 64.73244476]
[279.42620850 79.65992737]
[270.07461548 91.72269440]
[256.41143799 98.52568817]
[241.14953613 98.71815491]
[227.31915283 92.26189423]
[217.66633606 80.43879700]
[203.09362793 83.99356079]
[188.52091980 87.54831696]
[173.94822693 91.10308075]
[168.15783691 95.77394867]
[159.03540039 94.57685852]
[144.39189148 97.82768250]
[129.74839783 101.07850647]
[115.10488892 104.32933807]
[127.84423828 112.24823761]
[126.36659241 127.17527771]
[112.32190704 132.44279480]
[101.39228821 122.16790771]
[102.01626587 137.15492249]
[102.64024353 152.14193726]
[103.26422119 167.12895203]
[103.88819885 182.11596680]
[104.51217651 197.10298157]
[105.13615417 212.08999634]
[105.76013184 227.07701111]
[106.38410950 242.06404114]
[107.00808716 257.05105591]
[107.63206482 272.03805542]
[108.25604248 287.02508545]
[108.88002014 302.01208496]
[123.63302612 305.14254761]
[137.14366150 311.84429932]
[148.56263733 321.69607544]
[157.17214966 334.07861328]
[162.43099976 348.21350098]
[164.00860596 363.21224976]
[161.80580139 378.13198853]
[155.96105957 392.03485107]
[146.84176636 404.04690552]
[135.02119446 413.41305542]
[121.24239349 419.54455566]
[106.37149048 422.05596924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[23 126]
[24 87]
[25 86]
[26 85]
[29 83]
[30 82]
[31 66]
[32 65]
[33 64]
[37 63]
[38 62]
[39 61]
[40 60]
[94 122]
[95 121]
[96 120]
[97 119]
[98 117]
[99 116]
[100 115]
[101 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
