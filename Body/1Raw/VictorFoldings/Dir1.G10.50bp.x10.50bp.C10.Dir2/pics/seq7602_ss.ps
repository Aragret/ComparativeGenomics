%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACUAAUACUAAGGGGGGGGGGCAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAxxxxxxxxxxCCGAGCAAUCUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGCCCCCCCCCCUAACUACUACUAA\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 442.83666992]
[70.75619507 438.02725220]
[57.85220718 430.26184082]
[46.91955185 419.90371704]
[38.46956635 407.43728638]
[32.89747238 393.44564819]
[30.46388245 378.58322144]
[31.28262329 363.54513550]
[35.31539917 349.03479004]
[42.37359238 335.73080444]
[52.12707901 324.25543213]
[64.11966705 315.14544678]
[77.79044342 308.82690430]
[92.50000000 305.59536743]
[92.50000000 290.59536743]
[92.50000000 275.59536743]
[92.50000000 260.59536743]
[92.50000000 245.59535217]
[92.50000000 230.59535217]
[92.50000000 215.59535217]
[92.50000000 200.59535217]
[92.50000000 185.59535217]
[92.50000000 170.59535217]
[92.50000000 155.59535217]
[73.48645782 149.43809509]
[57.83798981 137.00619507]
[47.54069519 119.87749481]
[43.90149307 100.22595978]
[29.02819252 98.28046417]
[14.15489292 96.33497620]
[-0.71840715 94.38948059]
[-15.59170723 92.44398499]
[-30.46500778 90.49849701]
[-45.33830643 88.55300140]
[-52.30440140 102.01589203]
[-63.45706940 112.28203583]
[-77.44956970 118.11176300]
[-92.59224701 118.80108643]
[-107.05654144 114.26678467]
[-119.09582520 105.05638123]
[-127.25629425 92.28208923]
[-130.55253601 77.48645782]
[-128.58650208 62.45614243]
[-121.59561157 49.00611496]
[-110.42404175 38.76053619]
[-96.42081451 32.95660782]
[-81.27689362 32.29518890]
[-66.82098389 36.85614395]
[-54.79869080 46.08871460]
[-46.66177750 58.87802505]
[-43.39281464 73.67970276]
[-28.51951408 75.62519073]
[-13.64621449 77.57068634]
[1.22708571 79.51618195]
[16.10038567 81.46166992]
[30.97368622 83.40716553]
[45.84698486 85.35266113]
[48.63482285 76.28074646]
[52.94386292 67.73464203]
[58.67559433 59.96960449]
[65.68865204 53.22250366]
[73.80226135 47.70466232]
[82.80081940 43.59529877]
[92.43962097 41.03578186]
[102.45149994 40.12494659]
[101.85134888 25.13695526]
[101.25120544 10.14896584]
[92.96796417 -3.33058977]
[100.18985748 -16.35723686]
[99.58971405 -31.34522629]
[85.31233215 -36.56297302]
[74.12187958 -46.85094070]
[67.72482300 -60.64028549]
[67.09665680 -75.82823944]
[72.33318329 -90.09873962]
[82.63586426 -101.27565002]
[96.43360901 -107.65456390]
[111.62237549 -108.26274872]
[125.88597870 -103.00745392]
[137.04931641 -92.69007874]
[143.41007996 -78.88395691]
[143.99827576 -63.69440460]
[138.72422791 -49.43772507]
[128.39218140 -38.28796387]
[114.57769775 -31.94537163]
[115.17784882 -16.95738220]
[123.41816711 -4.54986668]
[116.23919678 9.54882240]
[116.83934021 24.53681183]
[117.43948364 39.52479935]
[131.25421143 45.36887741]
[142.42813110 35.36169815]
[137.35919189 21.03080750]
[138.16529846 5.85126114]
[144.72351074 -7.86217308]
[156.03375244 -18.01829529]
[170.37129211 -23.06837273]
[185.54977417 -22.24230194]
[199.25456238 -15.66605473]
[209.39579773 -4.34246063]
[214.42701721 10.00171375]
[213.58097839 25.17908669]
[206.98670959 38.87522125]
[195.64978027 49.00155258]
[181.29899597 54.01388931]
[166.12275696 53.14788818]
[152.43530273 46.53560638]
[141.26139832 56.54278946]
[145.97206116 62.56233597]
[149.82926941 69.06712341]
[152.78697205 75.93887329]
[154.81518555 83.05553436]
[155.90020752 90.29351044]
[156.04454041 97.52973938]
[170.98377991 98.87860107]
[185.92300415 100.22746277]
[200.86224365 101.57632446]
[214.05213928 92.44364166]
[229.37403870 97.19960022]
[235.07426453 112.19583130]
[226.78010559 125.92851257]
[210.85412598 127.86309814]
[199.51338196 116.51555634]
[184.57414246 115.16669464]
[169.63491821 113.81783295]
[154.69569397 112.46897125]
[151.72799683 121.70961761]
[147.21202087 130.30047607]
[141.28292847 137.98439026]
[134.11817932 144.53138733]
[125.93222046 149.74548340]
[116.97007751 153.47064209]
[107.50000000 155.59535217]
[107.50000000 170.59535217]
[107.50000000 185.59535217]
[107.50000000 200.59535217]
[107.50000000 215.59535217]
[107.50000000 230.59535217]
[107.50000000 245.59535217]
[107.50000000 260.59536743]
[107.50000000 275.59536743]
[107.50000000 290.59536743]
[107.50000000 305.59536743]
[122.20955658 308.82690430]
[135.88034058 315.14544678]
[147.87292480 324.25543213]
[157.62640381 335.73080444]
[164.68460083 349.03479004]
[168.71737671 363.54513550]
[169.53611755 378.58322144]
[167.10252380 393.44564819]
[161.53042603 407.43728638]
[153.08044434 419.90371704]
[142.14779663 430.26184082]
[129.24380493 438.02725220]
[114.97203827 442.83666992]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[28 57]
[29 56]
[30 55]
[31 54]
[32 53]
[33 52]
[34 51]
[65 90]
[66 89]
[67 88]
[69 86]
[70 85]
[91 108]
[92 107]
[114 126]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
