%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAUAAUAGGGGGGGGGGGGAGCUUAAACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAxxxxxxxxxxGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUCCCCCCCCCCUAAAUUAUAGG\
) } def
/len { sequence length } bind def

/coor [
[90.80622101 314.07727051]
[79.50241089 304.08294678]
[71.17129517 291.50302124]
[66.38090515 277.19515991]
[65.45786285 262.13494873]
[68.46509552 247.34916687]
[75.19756317 233.84596252]
[85.19623566 222.54602051]
[97.77939606 214.21975708]
[112.08909607 209.43490601]
[111.16567993 194.46334839]
[110.24227142 179.49180603]
[109.31885529 164.52024841]
[108.39543915 149.54870605]
[107.47203064 134.57714844]
[106.54861450 119.60559845]
[93.33343506 112.50920105]
[80.34304810 120.00920105]
[67.35266876 127.50920105]
[54.36228943 135.00920105]
[41.37191010 142.50920105]
[39.88392258 157.95475769]
[29.57624817 169.55354309]
[14.41240025 172.84555054]
[0.22318682 166.56495667]
[-7.53535080 153.12677002]
[-5.87989616 137.69825745]
[4.55299425 126.21199036]
[19.75166130 123.08467102]
[33.87191010 129.51881409]
[46.86228943 122.01881409]
[59.85266876 114.51881409]
[72.84304810 107.01881409]
[85.83343506 99.51881409]
[70.92823792 101.20263672]
[57.31064224 94.91288757]
[48.92887878 82.47319031]
[48.21313095 67.49027252]
[55.37092209 54.30823898]
[68.32694244 46.74904251]
[83.32476807 47.00436783]
[96.01598358 55.00019073]
[102.72092438 68.41822815]
[101.49644470 83.36579895]
[108.59284973 70.15061951]
[115.68925476 56.93543243]
[122.78565979 43.72024918]
[129.88206482 30.50506783]
[129.59417725 14.68648052]
[142.43202209 7.13406563]
[149.52842712 -6.08111715]
[156.62483215 -19.29630089]
[158.77340698 -34.14162445]
[155.71501160 -48.82651901]
[152.65661621 -63.51141739]
[137.61610413 -63.19872665]
[122.77427673 -65.65528107]
[108.63662720 -70.79740906]
[95.68468475 -78.44997406]
[84.35958099 -88.35234070]
[75.04705811 -100.16722107]
[68.06428528 -113.49221802]
[63.64909363 -127.87348175]
[61.95186615 -142.82119751]
[63.03041458 -157.82623291]
[66.84799957 -172.37754822]
[73.27458954 -185.97952271]
[82.09130859 -198.16886902]
[92.99785614 -208.53042603]
[105.62275696 -216.71128845]
[119.53601837 -222.43281555]
[134.26374817 -225.50012207]
[149.30433655 -225.80876160]
[164.14550781 -223.34820557]
[178.28176880 -218.20227051]
[191.23165894 -210.54621887]
[202.55409241 -200.64079285]
[211.86343384 -188.82341003]
[218.84260559 -175.49652100]
[223.25392151 -161.11407471]
[224.94711304 -146.16590881]
[223.86453247 -131.16114807]
[220.04302979 -116.61087036]
[213.61276245 -103.01063538]
[204.79275513 -90.82366180]
[193.88342285 -80.46504211]
[181.25631714 -72.28759003]
[167.34152222 -66.56981659]
[170.39991760 -51.88491440]
[173.45831299 -37.20001984]
[183.33485413 -41.11720657]
[193.08457947 -39.50568390]
[200.03515625 -33.57005692]
[214.46253967 -37.67500305]
[228.88992310 -41.77994919]
[243.31730652 -45.88489151]
[254.47325134 -57.10342407]
[268.83209229 -53.14447403]
[283.25946045 -57.24941635]
[297.68685913 -61.35436249]
[302.62908936 -65.89493561]
[308.27542114 -67.03806305]
[312.79125977 -65.31858826]
[327.37500000 -68.82775116]
[341.95874023 -72.33692169]
[356.54251099 -75.84608459]
[366.11062622 -88.72361755]
[382.14855957 -89.12794495]
[392.35342407 -76.74890900]
[388.89688110 -61.08264542]
[374.43051147 -54.14696884]
[360.05166626 -61.26233673]
[345.46792603 -57.75317001]
[330.88415527 -54.24400330]
[316.30041504 -50.73483658]
[301.79177856 -46.92697906]
[287.36441040 -42.82203293]
[272.93701172 -38.71708679]
[262.81301880 -27.79217148]
[247.42224121 -31.45750809]
[232.99485779 -27.35256386]
[218.56747437 -23.24761963]
[204.14009094 -19.14267349]
[190.88691711 -3.94107914]
[169.84001160 -12.19989681]
[162.74360657 1.01528621]
[155.64720154 14.23046875]
[156.44267273 29.10381699]
[143.09724426 37.60147095]
[136.00083923 50.81665421]
[128.90443420 64.03183746]
[121.80802917 77.24701691]
[114.71163177 90.46220398]
[121.52016449 118.68218994]
[122.44358063 133.65373230]
[123.36698914 148.62528992]
[124.29040527 163.59683228]
[125.21382141 178.56838989]
[126.13722992 193.53993225]
[127.06064606 208.51148987]
[141.84988403 211.50158691]
[155.36087036 218.21841431]
[166.67239380 228.20399475]
[175.01322937 240.77749634]
[179.81465149 255.08164978]
[180.74932861 270.14114380]
[177.75352478 284.92922974]
[171.03147888 298.43762207]
[161.04153442 309.74530029]
[148.46481323 318.08126831]
[134.15881348 322.87719727]
[119.09893799 323.80603027]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[44 133]
[45 132]
[46 131]
[47 130]
[48 129]
[50 127]
[51 126]
[52 125]
[53 90]
[54 89]
[55 88]
[93 123]
[94 122]
[95 121]
[96 120]
[98 118]
[99 117]
[100 116]
[103 115]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
