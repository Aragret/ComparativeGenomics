%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAACUCUUGGGGGGGGGGCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAUCAxxxxxxxxxxCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUAGAAUUAAUUCCCCCCCCCCCCCCUAAAAAUCUU\
) } def
/len { sequence length } bind def

/coor [
[220.38703918 183.79255676]
[209.36547852 175.59803772]
[198.83831787 166.77720642]
[188.84109497 157.35984802]
[179.40756226 147.37773132]
[170.56956482 136.86454773]
[162.35696411 125.85577393]
[154.79745483 114.38854980]
[147.91661072 102.50157928]
[141.73762512 90.23497772]
[127.95524597 96.15494537]
[114.17286682 102.07490540]
[105.65314484 113.16120148]
[91.74709320 111.70747375]
[77.96471405 117.62744141]
[64.18233490 123.54740143]
[50.72636795 130.17590332]
[37.63321304 137.49501038]
[24.54005814 144.81411743]
[11.44690418 152.13320923]
[-1.64625001 159.45231628]
[-3.34831977 174.87576294]
[-13.81587315 186.33045959]
[-29.02392197 189.41183472]
[-43.12466049 182.93504333]
[-50.69606781 169.39054871]
[-48.82678223 153.98648071]
[-38.23558426 142.64601135]
[-22.99500465 139.72979736]
[-8.96535587 146.35916138]
[4.12779903 139.04006958]
[17.22095299 131.72096252]
[30.31410789 124.40184784]
[43.40726089 117.08274841]
[30.07088852 110.21680450]
[26.91503334 95.55254364]
[36.24637222 83.80834961]
[51.24445343 83.56827545]
[60.94688797 95.00780487]
[58.26237106 109.76502228]
[72.04475403 103.84505463]
[85.82713318 97.92509460]
[94.34685516 86.83879852]
[108.25290680 88.29252625]
[122.03528595 82.37255859]
[135.81767273 76.45259857]
[130.22727966 60.55380249]
[125.78381348 44.29736710]
[122.50982666 27.76591873]
[120.42191315 11.04346943]
[119.53064728 -5.78499269]
[119.84053040 -22.63394737]
[121.34996033 -39.41777420]
[124.05120850 -56.05118179]
[127.93054199 -72.44964600]
[132.96818542 -88.52983856]
[139.13853455 -104.21006775]
[146.41017151 -119.41064453]
[154.74613953 -134.05433655]
[164.10401917 -148.06675720]
[174.43624878 -161.37672424]
[185.69027710 -173.91659546]
[197.80889893 -185.62268066]
[210.73051453 -196.43550110]
[224.38941956 -206.30017090]
[238.71618652 -215.16654968]
[253.63798523 -222.98963928]
[269.07897949 -229.72969055]
[284.96069336 -235.35249329]
[301.20236206 -239.82951355]
[317.72152710 -243.13803101]
[334.43414307 -245.26124573]
[351.25531006 -246.18843079]
[368.09957886 -245.91488647]
[384.88128662 -244.44204712]
[401.51519775 -241.77743530]
[417.91680908 -237.93461609]
[434.00271606 -232.93316650]
[449.69119263 -226.79852295]
[464.90258789 -219.56188965]
[479.55953979 -211.26008606]
[487.81182861 -223.78605652]
[496.06411743 -236.31201172]
[504.31640625 -248.83798218]
[512.56872559 -261.36395264]
[520.82098389 -273.88989258]
[517.39190674 -289.31768799]
[525.94665527 -302.60647583]
[541.40985107 -305.87225342]
[554.60748291 -297.17749023]
[557.70953369 -281.68063354]
[548.87573242 -268.57568359]
[533.34692383 -265.63760376]
[525.09466553 -253.11164856]
[516.84234619 -240.58569336]
[508.59008789 -228.05972290]
[500.33779907 -215.53376770]
[492.08551025 -203.00779724]
[503.07043457 -194.77412415]
[513.55877686 -185.91635132]
[523.51507568 -176.46435547]
[532.90576172 -166.45002747]
[541.69909668 -155.90718079]
[549.86541748 -144.87138367]
[557.37713623 -133.37988281]
[564.20886230 -121.47144318]
[570.33752441 -109.18626404]
[575.74249268 -96.56580353]
[580.40545654 -83.65265656]
[584.31066895 -70.49040985]
[587.44494629 -57.12347794]
[589.79766846 -43.59698105]
[591.36096191 -29.95657158]
[592.12945557 -16.24829102]
[592.10052490 -2.51840496]
[591.27435303 11.18674088]
[589.65368652 24.82088661]
[587.24389648 38.33801270]
[584.05322266 51.69248581]
[580.09228516 64.83923340]
[575.37457275 77.73387909]
[569.91595459 90.33289337]
[563.73486328 102.59374237]
[556.85205078 114.47502899]
[549.29089355 125.93666077]
[541.07672119 136.93992615]
[532.23742676 147.44769287]
[522.80273438 157.42448425]
[512.80450439 166.83659363]
[502.27645874 175.65226746]
[491.25411987 183.84173584]
[479.77474976 191.37734985]
[467.87701416 198.23365784]
[455.60110474 204.38749695]
[442.98843384 209.81808472]
[430.08157349 214.50711060]
[416.92407227 218.43869019]
[403.56036377 221.59957886]
[390.03555298 223.97908020]
[376.39526367 225.56913757]
[362.68551636 226.36439514]
[348.95266724 226.36215210]
[335.24298096 225.56237793]
[321.60275269 223.96778870]
[308.07806396 221.58374023]
[294.71453857 218.41825867]
[281.55731201 214.48204041]
[268.65075684 209.78833008]
[256.03845215 204.35299683]
[243.76298523 198.19433594]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 46]
[11 45]
[12 44]
[14 42]
[15 41]
[16 40]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[81 98]
[82 97]
[83 96]
[84 95]
[85 94]
[86 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
