%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCUGUCGGGGGGGGGGUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACCCCCACxxxxxxxxxxACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCUCCCCCCCCCCCAACCCCUGAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 350.96417236]
[71.19830322 344.94815063]
[59.48964310 335.41873169]
[50.78712082 323.08306885]
[45.73651886 308.85653687]
[44.71262741 293.79486084]
[47.79142761 279.01571655]
[54.74444962 265.61578369]
[65.05573273 254.58944702]
[77.96011353 246.75494385]
[92.50000000 242.69361877]
[92.50000000 227.69361877]
[92.50000000 212.69361877]
[92.50000000 197.69361877]
[92.50000000 182.69361877]
[92.50000000 167.69361877]
[92.50000000 152.69361877]
[92.50000000 137.69361877]
[92.50000000 122.69362640]
[92.50000000 107.69362640]
[89.86113739 92.92756653]
[84.66571808 78.85604858]
[79.47030640 64.78453064]
[74.27488708 50.71300888]
[69.07947540 36.64149094]
[54.65611649 40.78564835]
[39.96609116 43.85328293]
[25.08963013 45.82763672]
[10.10798073 46.69792938]
[-4.89702988 46.45940399]
[-19.84344864 45.11336899]
[-34.64963913 42.66717148]
[-49.23474121 39.13417435]
[-63.51908875 34.53367615]
[-77.42466736 28.89079666]
[-90.87553406 22.23636055]
[-103.79821014 14.60670948]
[-116.12213135 6.04351759]
[-127.77997589 -3.40644693]
[-138.70808411 -13.69157124]
[-148.84675598 -24.75568008]
[-158.14062500 -36.53834534]
[-166.53892517 -48.97521591]
[-173.99580383 -61.99835968]
[-180.47050476 -75.53665161]
[-185.92768860 -89.51615143]
[-190.33755493 -103.86049652]
[-193.67599487 -118.49135590]
[-195.92478943 -133.32881165]
[-197.07165527 -148.29183960]
[-197.11032104 -163.29869080]
[-196.04057312 -178.26742554]
[-193.86827087 -193.11627197]
[-190.60527039 -207.76414490]
[-186.26939392 -222.13102722]
[-180.88432312 -236.13845825]
[-174.47947693 -249.70993042]
[-167.08981323 -262.77133179]
[-158.75570679 -275.25131226]
[-149.52267456 -287.08172607]
[-139.44116211 -298.19793701]
[-128.56620789 -308.53924561]
[-116.95721436 -318.04916382]
[-104.67758179 -326.67575073]
[-91.79439545 -334.37188721]
[-78.37800598 -341.09555054]
[-64.50168610 -346.80999756]
[-50.24123764 -351.48406982]
[-35.67453766 -355.09216309]
[-20.88114548 -357.61462402]
[-5.94186258 -359.03768921]
[9.06171894 -359.35351562]
[24.04765320 -358.56045532]
[38.93409348 -356.66278076]
[53.63973236 -353.67089844]
[68.08425140 -349.60110474]
[82.18875885 -344.47567749]
[95.87622833 -338.32260132]
[109.07189178 -331.17544556]
[121.70367432 -323.07327271]
[133.70260620 -314.06033325]
[145.00312805 -304.18585205]
[155.54353333 -293.50378418]
[165.26625061 -282.07241821]
[174.11817932 -269.95422363]
[182.05096436 -257.21536255]
[189.02128601 -243.92546082]
[194.99107361 -230.15705872]
[199.92773438 -215.98538208]
[203.80427551 -201.48780823]
[206.59956360 -186.74353027]
[208.29829407 -171.83308411]
[208.89120483 -156.83789062]
[208.37506104 -141.83985901]
[206.75268555 -126.92091370]
[204.03292847 -112.16252136]
[200.23063660 -97.64529419]
[195.36660767 -83.44851685]
[189.46737671 -69.64974213]
[182.56517029 -56.32431793]
[174.69770813 -43.54503250]
[165.90792847 -31.38168335]
[156.24386597 -19.90069962]
[145.75827026 -9.16478920]
[134.50845337 0.76741207]
[122.55582428 9.84165764]
[109.96567535 18.00838661]
[96.80677795 25.22299385]
[83.15099335 31.44607544]
[88.34640503 45.51759338]
[93.54182434 59.58911514]
[98.73723602 73.66063690]
[103.93265533 87.73215485]
[106.99595642 73.04827881]
[114.58233643 60.10815048]
[125.89946747 50.26322937]
[139.76541138 44.54171371]
[154.73199463 43.54115295]
[169.23614502 47.36605072]
[181.76303101 55.61692810]
[191.00436401 67.43207550]
[195.99499512 81.57752228]
[196.21368408 96.57592773]
[191.63761902 110.86086273]
[182.74468994 122.94042969]
[170.46368408 131.55303955]
[156.07722473 135.79917908]
[141.08781433 135.23541260]
[127.06095886 129.92060852]
[115.46160126 120.40983582]
[107.50000000 107.69362640]
[107.50000000 122.69362640]
[107.50000000 137.69361877]
[107.50000000 152.69361877]
[107.50000000 167.69361877]
[107.50000000 182.69361877]
[107.50000000 197.69361877]
[107.50000000 212.69361877]
[107.50000000 227.69361877]
[107.50000000 242.69361877]
[122.03988647 246.75494385]
[134.94427490 254.58944702]
[145.25555420 265.61578369]
[152.20857239 279.01571655]
[155.28736877 293.79486084]
[154.26348877 308.85653687]
[149.21287537 323.08306885]
[140.51036072 335.41873169]
[128.80169678 344.94815063]
[114.95575714 350.96417236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 113]
[22 112]
[23 111]
[24 110]
[25 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
