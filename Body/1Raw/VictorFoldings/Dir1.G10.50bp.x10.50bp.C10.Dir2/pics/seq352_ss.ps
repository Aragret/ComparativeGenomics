%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUUAAACACGGGGGGGGGGAUCUCUGCCAAACCCCAAAAACAAAGAACCCUAACACCAGCCUAACCAGAxxxxxxxxxxCCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCCCCCCCCCCCACUAAAACAC\
) } def
/len { sequence length } bind def

/coor [
[67.99060822 158.68273926]
[55.73589325 150.08944702]
[45.70041656 138.98486328]
[38.38732910 125.92572021]
[34.16327286 111.56674957]
[33.24003601 96.62786865]
[35.66389847 81.85805511]
[41.31333923 67.99781036]
[49.90511703 55.74204254]
[61.00846863 45.70520401]
[74.06671906 38.39051056]
[88.42516327 34.16469574]
[87.50175476 19.19314575]
[86.57833862 4.22159481]
[85.65492249 -10.74995518]
[84.73151398 -25.72150421]
[83.80809784 -40.69305420]
[82.88468170 -55.66460419]
[81.96127319 -70.63615417]
[81.03785706 -85.60770416]
[80.11444092 -100.57925415]
[65.11037445 -100.51978302]
[50.12779236 -101.32482147]
[35.21648026 -102.99170685]
[20.42597008 -105.51489258]
[5.80539036 -108.88599396]
[-8.59668827 -113.09382629]
[-22.73242378 -118.12440491]
[-36.55485916 -123.96101379]
[-50.01807404 -130.58427429]
[-63.07734680 -137.97216797]
[-75.68930054 -146.10017395]
[-87.81202698 -154.94128418]
[-99.40527344 -164.46611023]
[-110.43051147 -174.64303589]
[-120.85112000 -185.43824768]
[-130.63249207 -196.81588745]
[-139.74212646 -208.73814392]
[-148.14976501 -221.16542053]
[-155.82746887 -234.05645752]
[-162.74974060 -247.36839294]
[-168.89360046 -261.05703735]
[-174.23860168 -275.07690430]
[-178.76702881 -289.38140869]
[-182.46382141 -303.92306519]
[-185.31668091 -318.65353394]
[-187.31616211 -333.52389526]
[-188.45561218 -348.48474121]
[-188.73123169 -363.48641968]
[-188.14212036 -378.47903442]
[-186.69023132 -393.41281128]
[-184.38038635 -408.23812866]
[-181.22026062 -422.90576172]
[-177.22035217 -437.36697388]
[-172.39393616 -451.57369995]
[-166.75706482 -465.47879028]
[-160.32846069 -479.03604126]
[-153.12945557 -492.20037842]
[-145.18399048 -504.92813110]
[-136.51846313 -517.17694092]
[-127.16162872 -528.90625000]
[-117.14459229 -540.07690430]
[-106.50063324 -550.65197754]
[-95.26509094 -560.59625244]
[-83.47530365 -569.87670898]
[-71.17044067 -578.46246338]
[-58.39136124 -586.32513428]
[-45.18052673 -593.43847656]
[-31.58181763 -599.77886963]
[-17.64041328 -605.32531738]
[-3.40262294 -610.05932617]
[11.08425713 -613.96520996]
[25.77210236 -617.03002930]
[40.61211777 -619.24353027]
[55.55501175 -620.59838867]
[70.55113983 -621.09008789]
[85.55069733 -620.71704102]
[100.50383759 -619.48046875]
[115.36090851 -617.38439941]
[130.07254028 -614.43591309]
[144.58985901 -610.64477539]
[158.86466980 -606.02355957]
[172.84951782 -600.58758545]
[186.49795532 -594.35491943]
[199.76464844 -587.34631348]
[212.60554504 -579.58508301]
[224.97795105 -571.09686279]
[236.84078979 -561.91003418]
[248.15464783 -552.05493164]
[258.88195801 -541.56445312]
[268.98703003 -530.47332764]
[278.43637085 -518.81848145]
[287.19854736 -506.63854980]
[295.24447632 -493.97409058]
[302.54739380 -480.86709595]
[309.08303833 -467.36114502]
[314.82977295 -453.50109863]
[319.76840210 -439.33297729]
[323.88259888 -424.90386963]
[327.15869141 -410.26168823]
[329.58575439 -395.45510864]
[331.15573120 -380.53329468]
[331.86343384 -365.54580688]
[331.70651245 -350.54241943]
[330.68545532 -335.57302856]
[328.80371094 -320.68728638]
[326.06747437 -305.93472290]
[322.48583984 -291.36428833]
[318.07073975 -277.02438354]
[312.83679199 -262.96267700]
[306.80145264 -249.22586060]
[299.98471069 -235.85955811]
[292.40921021 -222.90820312]
[284.10015869 -210.41479492]
[275.08514404 -198.42083740]
[265.39410400 -186.96617126]
[255.05921936 -176.08885193]
[244.11483765 -165.82501221]
[232.59730530 -156.20875549]
[220.54490662 -147.27203369]
[207.99765015 -139.04449463]
[194.99723816 -131.55351257]
[181.58683777 -124.82394409]
[167.81101990 -118.87816620]
[153.71553040 -113.73590851]
[139.34718323 -109.41426849]
[124.75373840 -105.92758942]
[109.98365021 -103.28746796]
[95.08599091 -101.50267029]
[96.00940704 -86.53112030]
[96.93282318 -71.55957031]
[97.85623169 -56.58801651]
[98.77964783 -41.61646652]
[99.70306396 -26.64491844]
[100.62647247 -11.67336845]
[101.54988861 3.29818153]
[102.47330475 18.26973152]
[103.39671326 33.24127960]
[118.16563416 35.67058182]
[132.02380371 41.32513046]
[144.27639771 49.92142105]
[154.30915833 61.02846909]
[161.61903381 74.08940887]
[165.83956909 88.44940948]
[166.75914001 103.38851929]
[164.33164978 118.15773773]
[158.67880249 132.01660156]
[150.08401489 144.27026367]
[138.97819519 154.30436707]
[125.91815186 161.61585999]
[111.55867004 165.83815002]
[96.61967468 166.75955200]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
