%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUCCUCGCGGGGGGGGGGCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCACAACAAAUAGxxxxxxxxxxUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCUAACAGGCCCCCCCCCCUCAACCUCGC\
) } def
/len { sequence length } bind def

/coor [
[89.53018188 437.78689575]
[75.68424225 431.77087402]
[63.97558212 422.24145508]
[55.27305984 409.90579224]
[50.22245789 395.67926025]
[49.19856644 380.61758423]
[52.27736282 365.83840942]
[59.23038483 352.43847656]
[69.54167175 341.41217041]
[82.44605255 333.57763672]
[96.98593903 329.51632690]
[96.98593903 314.51632690]
[96.98593903 299.51632690]
[96.98593903 284.51632690]
[96.98593903 269.51632690]
[96.98593903 254.51632690]
[96.98593903 239.51632690]
[96.98593903 224.51632690]
[96.98593903 209.51632690]
[96.98593903 194.51632690]
[96.98593903 179.51632690]
[96.51789856 164.52363586]
[95.58226776 149.55284119]
[94.64663696 134.58206177]
[93.71101379 119.61125946]
[83.04956818 114.68284607]
[76.08222961 104.03672791]
[75.76891327 90.33758545]
[60.80866241 89.24627686]
[45.84841156 88.15496063]
[31.52189064 94.86773682]
[19.39126778 86.22498322]
[4.43101931 85.13367462]
[-3.12962222 98.39260864]
[-15.69923496 107.05099487]
[-30.78211403 109.38969421]
[-45.38354492 104.94435120]
[-56.60439682 94.59760284]
[-62.21676636 80.40380096]
[-61.10631561 65.18112946]
[-53.49351883 51.95207214]
[-40.88990784 43.34325409]
[-25.79793358 41.06397247]
[-11.21412468 45.56677628]
[-0.03410250 55.95763016]
[5.52232981 70.17342377]
[20.48257828 71.26473236]
[33.73904037 64.47389984]
[46.93972397 73.19471741]
[61.89997101 74.28602600]
[76.86022186 75.37733459]
[89.79827881 67.78742981]
[96.14540863 54.19647598]
[102.49253845 40.60552597]
[108.83966827 27.01457405]
[115.18679047 13.42362309]
[102.30860138 5.70635462]
[90.29218292 -3.29417801]
[79.26490021 -13.48256397]
[69.34367371 -24.75080109]
[60.63365173 -36.97943878]
[53.22717667 -50.03884888]
[47.20275879 -63.79059219]
[42.62425995 -78.08889008]
[39.54021835 -92.78218079]
[37.98332214 -107.71469879]
[37.97007751 -122.72814941]
[39.50062180 -137.66339111]
[42.55873489 -152.36210632]
[47.11199570 -166.66845703]
[53.11214066 -180.43081665]
[60.49555969 -193.50326538]
[69.18399048 -205.74725342]
[79.08532715 -217.03297424]
[90.09460449 -227.24079895]
[102.09513092 -236.26252747]
[114.95968628 -244.00250244]
[128.55189514 -250.37869263]
[142.72769165 -255.32350159]
[157.33677673 -258.78451538]
[172.22430420 -260.72503662]
[187.23243713 -261.12451172]
[202.20211792 -259.97866821]
[216.97462463 -257.29971313]
[231.39338684 -253.11598206]
[245.30554199 -247.47186279]
[258.56359863 -240.42716980]
[271.02703857 -232.05659485]
[282.56375122 -222.44886780]
[293.05142212 -211.70582581]
[302.37887573 -199.94136047]
[310.44723511 -187.28018188]
[317.17098999 -173.85649109]
[322.47882080 -159.81260681]
[326.31451416 -145.29739380]
[328.63735962 -130.46470642]
[329.42279053 -115.47180939]
[328.66244507 -100.47760773]
[326.36437988 -85.64106750]
[322.55297852 -71.11946106]
[317.26861572 -57.06671524]
[310.56732178 -43.63180923]
[302.52014160 -30.95715141]
[293.21237183 -19.17710495]
[282.74267578 -8.41654396]
[271.22207642 1.21046352]
[258.77264404 9.60186577]
[245.52635193 16.66870880]
[231.62365723 22.33608055]
[217.21192932 26.54390526]
[202.44390869 29.24757385]
[187.47618103 30.41843033]
[172.46737671 30.04405975]
[157.57662964 28.12843132]
[142.96177673 24.69185257]
[128.77774048 19.77075195]
[122.43061829 33.36170197]
[116.08348846 46.95265579]
[109.73635864 60.54360580]
[103.38922882 74.13455963]
[120.26544189 86.67082977]
[121.57109070 106.13114929]
[108.68180084 118.67563629]
[109.61743164 133.64642334]
[110.55306244 148.61721802]
[111.48868561 163.58801270]
[114.45457458 168.04032898]
[115.28701782 172.71572876]
[114.26762390 176.74841309]
[111.98593903 179.51632690]
[111.98593903 194.51632690]
[111.98593903 209.51632690]
[111.98593903 224.51632690]
[111.98593903 239.51632690]
[111.98593903 254.51632690]
[111.98593903 269.51632690]
[111.98593903 284.51632690]
[111.98593903 299.51632690]
[111.98593903 314.51632690]
[111.98593903 329.51632690]
[126.52582550 333.57763672]
[139.43020630 341.41217041]
[149.74148560 352.43847656]
[156.69451904 365.83840942]
[159.77331543 380.61758423]
[158.74942017 395.67926025]
[153.69882202 409.90579224]
[144.99629211 422.24145508]
[133.28762817 431.77087402]
[119.44169617 437.78689575]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 126]
[23 125]
[24 124]
[25 123]
[28 51]
[29 50]
[30 49]
[32 47]
[33 46]
[52 120]
[53 119]
[54 118]
[55 117]
[56 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
