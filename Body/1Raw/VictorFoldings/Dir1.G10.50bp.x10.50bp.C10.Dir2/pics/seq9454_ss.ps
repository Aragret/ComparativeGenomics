%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACAAACAACUAAGGGGGGGGGGCCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCAUCCUAGCCCxxxxxxxxxxCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCAUAUACCCCCCCCCCUCCAAACAACAAA\
) } def
/len { sequence length } bind def

/coor [
[85.11811066 167.61401367]
[70.93198395 162.83450317]
[58.10485077 155.11734009]
[47.23641968 144.82331848]
[38.83480835 132.43370056]
[33.29281235 118.52771759]
[30.86953545 103.75553131]
[31.67826843 88.80776215]
[35.68120193 74.38325500]
[42.69119263 61.15639114]
[52.38050461 49.74555969]
[64.29613495 40.68423843]
[77.88101196 34.39606857]
[92.50000000 31.17503929]
[92.50000000 16.17503929]
[92.50000000 1.17503905]
[92.50000000 -13.82496071]
[92.50000000 -28.82496071]
[92.50000000 -43.82496262]
[92.50000000 -58.82496262]
[92.50000000 -73.82495880]
[92.50000000 -88.82495880]
[92.50000000 -103.82495880]
[77.51963043 -104.66613007]
[62.60999298 -106.34593201]
[47.81799698 -108.85909271]
[33.19018936 -112.19768524]
[18.77258873 -116.35121918]
[4.61056042 -121.30662537]
[-9.25133514 -127.04830170]
[-22.76948547 -133.55819702]
[-35.90135193 -140.81581116]
[-48.60562515 -148.79832458]
[-60.84232712 -157.48062134]
[-72.57295227 -166.83537292]
[-83.76060486 -176.83314514]
[-94.37007141 -187.44250488]
[-104.36797333 -198.63003540]
[-113.72285461 -210.36056519]
[-122.40528107 -222.59716797]
[-130.38793945 -235.30134583]
[-137.64570618 -248.43313599]
[-144.15574646 -261.95120239]
[-149.89758301 -275.81304932]
[-154.85314941 -289.97500610]
[-159.00683594 -304.39257812]
[-162.34559631 -319.02035522]
[-164.85891724 -333.81231689]
[-166.53887939 -348.72192383]
[-167.38021851 -363.70230103]
[-167.38027954 -378.70626831]
[-166.53904724 -393.68661499]
[-164.85919189 -408.59625244]
[-162.34597778 -423.38824463]
[-159.00732422 -438.01605225]
[-154.85374451 -452.43362427]
[-149.89828491 -466.59564209]
[-144.15655518 -480.45751953]
[-137.64662170 -493.97561646]
[-130.38894653 -507.10748291]
[-122.40638733 -519.81170654]
[-113.72404480 -532.04840088]
[-104.36925507 -543.77899170]
[-94.37142944 -554.96661377]
[-83.76204681 -565.57598877]
[-72.57447052 -575.57385254]
[-60.84391022 -584.92871094]
[-48.60727310 -593.61108398]
[-35.90306473 -601.59368896]
[-22.77124786 -608.85144043]
[-9.25314713 -615.36138916]
[4.60870600 -621.10321045]
[18.77069664 -626.05871582]
[33.18826675 -630.21234131]
[47.81605148 -633.55102539]
[62.60802841 -636.06433105]
[77.51765442 -637.74426270]
[92.49801636 -638.58551025]
[107.50198364 -638.58551025]
[122.48234558 -637.74426270]
[137.39196777 -636.06433105]
[152.18394470 -633.55102539]
[166.81173706 -630.21234131]
[181.22930908 -626.05871582]
[195.39129639 -621.10321045]
[209.25314331 -615.36138916]
[222.77124023 -608.85144043]
[235.90306091 -601.59368896]
[248.60726929 -593.61108398]
[260.84390259 -584.92871094]
[272.57446289 -575.57385254]
[283.76205444 -565.57598877]
[294.37142944 -554.96661377]
[304.36926270 -543.77899170]
[313.72406006 -532.04840088]
[322.40637207 -519.81170654]
[330.38894653 -507.10748291]
[337.64660645 -493.97561646]
[344.15655518 -480.45751953]
[349.89828491 -466.59564209]
[354.85375977 -452.43362427]
[359.00732422 -438.01605225]
[362.34597778 -423.38824463]
[364.85919189 -408.59625244]
[366.53906250 -393.68661499]
[367.38027954 -378.70626831]
[367.38021851 -363.70230103]
[366.53887939 -348.72192383]
[364.85891724 -333.81231689]
[362.34558105 -319.02035522]
[359.00683594 -304.39257812]
[354.85314941 -289.97500610]
[349.89758301 -275.81304932]
[344.15576172 -261.95120239]
[337.64569092 -248.43313599]
[330.38793945 -235.30134583]
[322.40527344 -222.59716797]
[313.72283936 -210.36056519]
[304.36798096 -198.63003540]
[294.37005615 -187.44250488]
[283.76058960 -176.83314514]
[272.57296753 -166.83537292]
[260.84231567 -157.48062134]
[248.60562134 -148.79832458]
[235.90135193 -140.81581116]
[222.76948547 -133.55819702]
[209.25134277 -127.04830170]
[195.38943481 -121.30662537]
[181.22741699 -116.35121918]
[166.80981445 -112.19768524]
[152.18200684 -108.85909271]
[137.39001465 -106.34593201]
[122.48036957 -104.66613007]
[107.50000000 -103.82495880]
[107.50000000 -88.82495880]
[107.50000000 -73.82495880]
[107.50000000 -58.82496262]
[107.50000000 -43.82496262]
[107.50000000 -28.82496071]
[107.50000000 -13.82496071]
[107.50000000 1.17503905]
[107.50000000 16.17503929]
[107.50000000 31.17503929]
[122.11898804 34.39606857]
[135.70385742 40.68423843]
[147.61949158 49.74555969]
[157.30880737 61.15639114]
[164.31880188 74.38325500]
[168.32173157 88.80776215]
[169.13046265 103.75553131]
[166.70718384 118.52771759]
[161.16519165 132.43370056]
[152.76358032 144.82331848]
[141.89514160 155.11734009]
[129.06802368 162.83450317]
[114.88188934 167.61401367]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
