%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUAUUCAUGGGGGGGGGGGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCxxxxxxxxxxAGACGUAAAUUAUGGCUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCCCCCCCCCCCAAUAUUCUU\
) } def
/len { sequence length } bind def

/coor [
[87.32402039 446.29174805]
[74.10382080 439.01925659]
[63.21701813 428.57226562]
[55.40588760 415.66302490]
[51.20300674 401.17169189]
[50.89493179 386.08636475]
[54.50267410 371.43554688]
[61.78024673 358.21813965]
[72.23145294 347.33538818]
[85.14371490 339.52923584]
[99.63665009 335.33193970]
[99.32460022 320.33520508]
[99.01254272 305.33843994]
[98.70048523 290.34170532]
[98.38842773 275.34494019]
[98.07637024 260.34817505]
[97.76431274 245.35142517]
[97.45226288 230.35467529]
[97.14020538 215.35792542]
[96.67216492 200.36521912]
[96.04818726 185.37820435]
[95.42420959 170.39118958]
[94.80023193 155.40417480]
[94.17625427 140.41716003]
[93.55227661 125.43014526]
[71.13192749 110.02676392]
[72.31118774 78.78024292]
[57.33147812 79.56008911]
[42.35176086 80.33993530]
[37.30561447 94.67885590]
[27.15258789 105.99188232]
[13.44095135 112.55385590]
[-1.73837411 113.36411285]
[-16.07065010 108.29910278]
[-27.37030983 98.13121033]
[-33.91423416 84.41094971]
[-34.70452881 69.23057556]
[-29.62067032 54.90497208]
[-19.43791771 43.61869812]
[-5.70906353 37.09282684]
[9.47234154 36.32250214]
[23.79124260 41.42520142]
[35.06410980 51.62279129]
[41.57191849 65.36022186]
[56.55163193 64.58037567]
[71.53134918 63.80052948]
[79.52126312 51.10559845]
[73.74498749 37.26238251]
[59.08940887 40.62719345]
[44.07596970 41.46663284]
[29.13663864 39.75654602]
[14.70125103 35.54613113]
[1.18513989 28.95653915]
[-11.02280807 20.17735863]
[-21.57134628 9.46118641]
[-30.15697289 -2.88365245]
[-36.53266144 -16.50197220]
[-40.51496887 -31.00194550]
[-41.98931885 -45.96637726]
[-40.91329193 -60.96471786]
[-37.31784821 -75.56542969]
[-31.30643082 -89.34841919]
[-23.05200386 -101.91712952]
[-12.79206276 -112.90992737]
[-0.82180679 -122.01053619]
[12.51435566 -128.95710754]
[26.83271599 -133.54975891]
[41.72130966 -135.65638733]
[56.75175476 -135.21633911]
[71.49160767 -132.24230957]
[85.51676178 -126.81985474]
[98.42369080 -119.10498810]
[109.84103394 -109.31967926]
[119.44029236 -97.74546814]
[126.94528198 -84.71538544]
[132.14006042 -70.60431671]
[134.87516785 -55.81826782]
[135.07191467 -40.78266525]
[132.72462463 -25.93011475]
[127.90084839 -11.68795204]
[120.73937225 1.53404748]
[111.44625092 13.35546112]
[100.28884888 23.43616104]
[87.58821106 31.48610878]
[93.36447906 45.32932663]
[89.26039124 30.90169716]
[94.84661865 16.98070335]
[107.78541565 9.39205456]
[122.66210175 11.31147671]
[133.25102234 21.93572426]
[135.12089539 36.81872177]
[127.48921204 49.73217392]
[113.54843140 55.27207565]
[128.04402161 51.41491318]
[142.53962708 47.55775452]
[157.03521729 43.70059586]
[171.48991394 39.69285583]
[185.90213013 35.53496933]
[200.31434631 31.37708092]
[214.72656250 27.21919250]
[217.22682190 12.16225433]
[226.01947021 -0.31380960]
[239.35870361 -7.73186588]
[254.59600830 -8.61905479]
[268.70602417 -2.79922390]
[278.88717651 8.57209492]
[283.11798096 23.23711777]
[280.55844116 38.28409576]
[271.71673584 50.72543716]
[258.34838867 58.09090424]
[243.10771179 58.91808319]
[229.02073669 53.04273224]
[218.88444519 41.63140869]
[204.47222900 45.78929520]
[190.06001282 49.94718552]
[175.64779663 54.10507202]
[170.05671692 59.01276779]
[160.89237976 58.19619370]
[146.39677429 62.05335236]
[131.90118408 65.91051483]
[117.40558624 69.76766968]
[130.70286560 90.97624969]
[125.87183380 113.36090851]
[108.53929138 124.80616760]
[109.16326904 139.79318237]
[109.78724670 154.78019714]
[110.41122437 169.76721191]
[111.03520203 184.75422668]
[111.65917969 199.74124146]
[115.16178894 208.24909973]
[112.13695526 215.04586792]
[112.44901276 230.04261780]
[112.76107025 245.03936768]
[113.07312775 260.03613281]
[113.38518524 275.03286743]
[113.69723511 290.02963257]
[114.00929260 305.02639771]
[114.32135010 320.02313232]
[114.63340759 335.01989746]
[129.28840637 338.61065674]
[142.51420593 345.87292480]
[153.40907288 356.31152344]
[161.23017883 369.21472168]
[165.44424438 383.70278931]
[165.76396179 398.78790283]
[162.16754150 413.44149780]
[154.90017700 426.66448975]
[144.45736694 437.55532837]
[131.55114746 445.37145996]
[117.06145477 449.57992554]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 129]
[21 128]
[22 127]
[23 126]
[24 125]
[25 124]
[27 46]
[28 45]
[29 44]
[47 85]
[48 84]
[93 121]
[94 120]
[95 119]
[96 118]
[97 116]
[98 115]
[99 114]
[100 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
