%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCACCUCGGGGGGGGGGAAUCACACUACUCCCCAUAUCUAACAACGUAAAAAUAAAAUGACAGUUUGxxxxxxxxxxUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACCCCCCCCCCCACUCCACCUC\
) } def
/len { sequence length } bind def

/coor [
[83.25275421 358.35397339]
[70.03256226 351.08151245]
[59.14575577 340.63449097]
[51.33462524 327.72525024]
[47.13174438 313.23394775]
[46.82367325 298.14859009]
[50.43141174 283.49777222]
[57.70898438 270.28039551]
[68.16019440 259.39761353]
[81.07245636 251.59147644]
[95.56539154 247.39418030]
[95.25333405 232.39743042]
[94.94127655 217.40068054]
[94.62922668 202.40393066]
[94.31716919 187.40716553]
[94.00511169 172.41041565]
[93.69305420 157.41366577]
[93.38099670 142.41691589]
[93.06893921 127.42015839]
[92.75688934 112.42340088]
[89.96456146 97.68560028]
[84.76914215 83.61408234]
[79.57373047 69.54255676]
[65.16479492 73.73441315]
[50.49607086 76.89942169]
[35.64062119 79.02182770]
[20.67246628 80.09105682]
[5.66617489 80.10178375]
[-9.30349350 79.05393982]
[-24.16195869 76.95276642]
[-38.83519363 73.80871582]
[-53.25010300 69.63745880]
[-67.33486176 64.45977020]
[-81.01931000 58.30145645]
[-94.23526764 51.19318771]
[-106.91688538 43.17038345]
[-119.00099182 34.27301407]
[-130.42738342 24.54540062]
[-141.13914490 14.03600883]
[-151.08288574 2.79719687]
[-160.20907593 -9.11504364]
[-168.47225952 -21.64136696]
[-175.83125305 -34.71936417]
[-182.24942017 -48.28388596]
[-187.69474792 -62.26734543]
[-192.14013672 -76.60009003]
[-195.56343079 -91.21070099]
[-197.94758606 -106.02639008]
[-199.28070068 -120.97335815]
[-199.55615234 -135.97712708]
[-198.77255249 -150.96295166]
[-196.93382263 -165.85617065]
[-194.04911804 -180.58258057]
[-190.13279724 -195.06883240]
[-185.20439148 -209.24275208]
[-179.28845215 -223.03370667]
[-172.41442871 -236.37300110]
[-164.61659241 -249.19418335]
[-155.93377686 -261.43338013]
[-146.40925598 -273.02960205]
[-136.09046936 -283.92507935]
[-125.02882385 -294.06552124]
[-113.27943420 -303.40045166]
[-100.90083313 -311.88333130]
[-87.95469666 -319.47189331]
[-74.50550842 -326.12835693]
[-60.62028503 -331.81951904]
[-46.36819458 -336.51705933]
[-31.82024765 -340.19757080]
[-17.04891968 -342.84271240]
[-2.12779927 -344.43930054]
[12.86877441 -344.97940063]
[27.86608887 -344.46029663]
[42.78942871 -342.88458252]
[57.56444550 -340.26010132]
[72.11753082 -336.59994507]
[86.37617493 -331.92236328]
[100.26934814 -326.25061035]
[113.72783661 -319.61300659]
[126.68458557 -312.04254150]
[139.07504272 -303.57699585]
[150.83747864 -294.25854492]
[161.91329956 -284.13357544]
[172.24732971 -273.25253296]
[181.78807068 -261.66964722]
[190.48799133 -249.44262695]
[198.30377197 -236.63237000]
[205.19644165 -223.30270386]
[211.13168335 -209.52003479]
[216.07991028 -195.35304260]
[220.01649475 -180.87228394]
[222.92181396 -166.14991760]
[224.78137207 -151.25927734]
[225.58593750 -136.27456665]
[225.33148193 -121.27043152]
[224.01928711 -106.32161713]
[221.65586853 -91.50260162]
[218.25302124 -76.88721466]
[213.82769775 -62.54826736]
[208.40193176 -48.55719757]
[202.00276184 -34.98371124]
[194.66206360 -21.89542770]
[186.41642761 -9.35755539]
[177.30690002 2.56744361]
[167.37889099 13.82015800]
[156.68186951 24.34452820]
[145.26908875 34.08811951]
[133.19744873 43.00239182]
[120.52706146 51.04293442]
[107.32106781 58.16968536]
[93.64524841 64.34714508]
[98.84066772 78.41866302]
[104.03607941 92.49018097]
[113.33815765 87.92186737]
[125.35752106 89.45552063]
[139.37423706 94.79703522]
[153.39094543 100.13854218]
[167.40765381 105.48005676]
[180.97714233 97.70810699]
[196.35844421 100.52761078]
[206.28898621 112.60727692]
[206.07986450 128.24345398]
[195.82983398 140.05323792]
[180.37863159 142.46038818]
[167.02185059 134.32832336]
[162.06614685 119.49677277]
[148.04943848 114.15525818]
[134.03271484 108.81374359]
[120.01600647 103.47222900]
[107.75363922 112.11135101]
[108.06569672 127.10810089]
[108.37775421 142.10485840]
[108.68981171 157.10160828]
[109.00186157 172.09835815]
[109.31391907 187.09512329]
[109.62597656 202.09187317]
[109.93803406 217.08862305]
[110.25009155 232.08537292]
[110.56214905 247.08213806]
[125.21714020 250.67289734]
[138.44294739 257.93515015]
[149.33781433 268.37374878]
[157.15890503 281.27697754]
[161.37298584 295.76501465]
[161.69270325 310.85012817]
[158.09628296 325.50372314]
[150.82891846 338.72674561]
[140.38610840 349.61758423]
[127.47988129 357.43368530]
[112.99018860 361.64215088]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 113]
[22 112]
[23 111]
[115 129]
[116 128]
[117 127]
[118 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
