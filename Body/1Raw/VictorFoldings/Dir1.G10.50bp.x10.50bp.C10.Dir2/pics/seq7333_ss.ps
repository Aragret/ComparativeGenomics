%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACCCUACCAGGGGGGGGGGCACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUxxxxxxxxxxCUAACCGCUAACAUUACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCCCCCCCCCCCGCCACCCUAGCA\
) } def
/len { sequence length } bind def

/coor [
[78.69739532 500.29913330]
[64.42562866 495.48968506]
[51.52164078 487.72430420]
[40.58898544 477.36614990]
[32.13899994 464.89974976]
[26.56690407 450.90811157]
[24.13331604 436.04568481]
[24.95205688 421.00759888]
[28.98483276 406.49722290]
[36.04302597 393.19323730]
[45.79651260 381.71789551]
[57.78910065 372.60791016]
[71.45987701 366.28936768]
[86.16943359 363.05780029]
[86.16943359 348.05780029]
[86.16943359 333.05780029]
[86.16943359 318.05780029]
[86.16943359 303.05780029]
[86.16943359 288.05780029]
[86.16943359 273.05780029]
[86.16943359 258.05780029]
[86.16943359 243.05781555]
[86.16943359 228.05781555]
[86.16943359 213.05781555]
[83.89595795 210.29382324]
[82.87847900 206.27229309]
[83.70184326 201.60989380]
[86.64661407 197.16465759]
[87.54653168 182.19166565]
[88.44644165 167.21868896]
[81.48664856 154.05015564]
[90.03794098 140.73902893]
[90.93785858 125.76605225]
[82.41757202 120.90143585]
[76.16599274 113.33985901]
[72.98976898 104.05699921]
[73.29875183 94.25066376]
[60.06550980 87.18798828]
[50.19790268 98.57122040]
[38.04437637 107.47288513]
[24.21455574 113.44647217]
[9.40213203 116.19235229]
[-5.64990759 115.57279205]
[-20.18655777 111.61886597]
[-33.47866821 104.52890778]
[-44.85951233 94.65853882]
[-53.75822830 82.50285339]
[-59.72846603 68.67158508]
[-62.47075653 53.85849762]
[-61.84754562 38.80661011]
[-57.89010239 24.27091789]
[-50.79692078 10.98052502]
[-40.92379379 -0.39792585]
[-28.76595879 -9.29369736]
[-14.93324280 -15.26058197]
[-0.11949069 -17.99928284]
[14.93224621 -17.37242699]
[29.46697998 -13.41145897]
[42.75565338 -6.31505823]
[54.13171005 3.56082320]
[63.02453613 15.72081470]
[68.98806763 29.55497551]
[71.72318268 44.36939240]
[71.09268188 59.42097473]
[67.12818909 73.95475006]
[80.36142731 81.01742554]
[94.83907318 73.17880249]
[111.19181824 75.08505249]
[120.85916138 63.61584854]
[130.52650452 52.14664841]
[116.28871918 56.86742401]
[101.41027832 58.77315521]
[86.44231415 57.79324341]
[71.93932343 53.96398926]
[58.43854523 47.42724991]
[46.44010925 38.42516327]
[36.38848495 27.29121399]
[28.65602875 14.43784332]
[23.52918243 0.34119639]
[21.19786644 -14.47652817]
[21.74844170 -29.46642113]
[25.16051292 -44.07319260]
[31.30768204 -57.75574875]
[39.96223450 -70.00722504]
[50.80356598 -80.37378693]
[63.43006897 -88.47139740]
[77.37400818 -94.00010681]
[92.11883545 -96.75508881]
[107.11835480 -96.63430786]
[121.81690216 -93.64221954]
[135.66999817 -87.88967133]
[148.16445923 -79.58975983]
[158.83743286 -69.04995728]
[167.29356384 -56.66068649]
[173.21958923 -42.88090897]
[176.39598083 -28.22108269]
[176.70507812 -13.22426796]
[174.13543701 1.55399060]
[168.78222656 15.56624413]
[160.84378052 28.29342079]
[150.61892700 39.25983810]
[165.07493591 35.25688553]
[179.53094482 31.25393486]
[193.98696899 27.25098419]
[205.22186279 16.11152077]
[219.55238342 20.17177963]
[224.02880859 5.40814018]
[235.79125977 -4.57426691]
[251.08634949 -6.59009218]
[265.03350830 0.00390744]
[273.18218994 13.10361004]
[272.93225098 28.52894783]
[264.36337280 41.35775375]
[250.20991516 47.49639893]
[234.98815918 44.98606873]
[223.55532837 34.62779617]
[213.35441589 45.48094177]
[197.98991394 41.70700073]
[183.53390503 45.70994949]
[169.07788086 49.71290207]
[154.62187195 53.71585464]
[141.99569702 61.81398392]
[132.32835388 73.28318787]
[122.66102600 84.75238800]
[127.27033997 101.52973938]
[120.81358337 117.68634033]
[105.91083527 126.66596222]
[105.01092529 141.63894653]
[111.90635681 155.87844849]
[103.41942596 168.11860657]
[102.51950836 183.09158325]
[101.61959076 198.06455994]
[101.16943359 213.05781555]
[101.16943359 228.05781555]
[101.16943359 243.05781555]
[101.16943359 258.05780029]
[101.16943359 273.05780029]
[101.16943359 288.05780029]
[101.16943359 303.05780029]
[101.16943359 318.05780029]
[101.16943359 333.05780029]
[101.16943359 348.05780029]
[101.16943359 363.05780029]
[115.87899017 366.28936768]
[129.54977417 372.60791016]
[141.54235840 381.71789551]
[151.29583740 393.19323730]
[158.35403442 406.49722290]
[162.38681030 421.00759888]
[163.20555115 436.04568481]
[160.77195740 450.90811157]
[155.19985962 464.89974976]
[146.74987793 477.36614990]
[135.81723022 487.72430420]
[122.91323853 495.48968506]
[108.64147186 500.29913330]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[28 132]
[29 131]
[30 130]
[32 128]
[33 127]
[37 66]
[38 65]
[68 124]
[69 123]
[70 122]
[101 121]
[102 120]
[103 119]
[104 118]
[106 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
