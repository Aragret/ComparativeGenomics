%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCAAAAACGGGGGGGGGGAUCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAxxxxxxxxxxUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCCCCCCCCCCCUACCUAAAAC\
) } def
/len { sequence length } bind def

/coor [
[227.58030701 383.09640503]
[224.04457092 368.50137329]
[222.22715759 353.59454346]
[222.15264893 338.57751465]
[223.82205200 323.65338135]
[227.21278381 309.02398682]
[232.27899170 294.88714600]
[238.95217896 281.43408203]
[247.14205933 268.84667969]
[256.73791504 257.29522705]
[267.60995483 246.93591309]
[258.59240723 234.94908142]
[249.57489014 222.96224976]
[240.55735779 210.97541809]
[231.53982544 198.98858643]
[222.03146362 187.38725281]
[212.04873657 176.19148254]
[202.06600952 164.99571228]
[192.08328247 153.79995728]
[182.10055542 142.60418701]
[172.11784363 131.40841675]
[159.34048462 123.55099487]
[144.84487915 119.69383240]
[130.34928894 115.83666992]
[115.85369110 111.97951508]
[98.24062347 124.53679657]
[74.31704712 114.16207886]
[59.32434845 114.63011932]
[44.33165359 115.09816742]
[29.33895683 115.56620789]
[23.62100792 129.68090820]
[12.65192890 140.24496460]
[-1.66782129 145.42807007]
[-16.85725975 144.33224487]
[-30.28472328 137.14732361]
[-39.62382507 125.11814117]
[-43.25650406 110.32883453]
[-40.55338287 95.34174347]
[-31.98279190 82.75346375]
[-19.02963448 74.74498749]
[-3.93812704 72.70384216]
[10.67703724 76.98366547]
[22.28369141 86.84294891]
[28.87091446 100.57350922]
[43.86360931 100.10546875]
[58.85630798 99.63742828]
[73.84900665 99.16938019]
[78.60282135 84.94260406]
[66.90319824 75.55544281]
[55.20357132 66.16828156]
[43.50394821 56.78112030]
[27.46393776 57.09363937]
[17.33011246 44.65639496]
[20.87627220 29.01016998]
[35.38210678 22.15741348]
[49.71998596 29.35497284]
[52.89110947 45.08149719]
[64.59073639 54.46865845]
[76.29035950 63.85581970]
[87.98998260 73.24298096]
[105.20066071 74.34570312]
[116.86366272 84.32528687]
[119.71084595 97.48391724]
[134.20645142 101.34107971]
[148.70204163 105.19823456]
[163.19763184 109.05539703]
[152.92321777 98.12670135]
[145.09472656 85.33159637]
[140.04153442 71.20838165]
[137.97622681 56.35124588]
[138.98568726 41.38525009]
[143.02745056 26.94003868]
[149.93147278 13.62334061]
[159.40730286 1.99541175]
[171.05625916 -7.45454502]
[184.38827515 -14.32895470]
[198.84242249 -18.33860207]
[213.81062317 -19.31479454]
[228.66313171 -17.21646118]
[242.77508545 -12.13188457]
[255.55276489 -4.27497816]
[266.45858765 6.02370548]
[275.03375244 18.33088493]
[280.91744995 32.12878036]
[283.86221313 46.83689117]
[283.74407959 61.83642578]
[280.56805420 76.49633026]
[274.46774292 90.19984436]
[265.69979858 102.37043762]
[254.63311768 112.49607086]
[241.73327637 120.15075684]
[227.54299927 125.01243591]
[212.65928650 126.87657928]
[197.70831299 125.66475677]
[183.31359863 121.42568970]
[193.29632568 132.62145996]
[203.27905273 143.81723022]
[213.26177979 155.01298523]
[223.24450684 166.20875549]
[233.22723389 177.40452576]
[237.54167175 178.64836121]
[240.86956787 180.99273682]
[242.98219299 183.97917175]
[243.82821655 187.12213135]
[243.52665710 189.97105408]
[252.54418945 201.95788574]
[261.56170654 213.94471741]
[270.57925415 225.93154907]
[279.59677124 237.91839600]
[292.56381226 230.34390259]
[306.32250977 224.32604980]
[320.68682861 219.94621277]
[335.46249390 217.26362610]
[350.44967651 216.31455994]
[365.44570923 217.11186218]
[380.24777222 219.64472961]
[394.65567017 223.87892151]
[408.47460938 229.75718689]
[421.51763916 237.20001221]
[433.60842896 246.10673523]
[444.58340454 256.35693359]
[454.29415894 267.81195068]
[462.60940552 280.31689453]
[469.41662598 293.70260620]
[474.62380981 307.78814697]
[478.16052246 322.38293457]
[479.97894287 337.28964233]
[480.05444336 352.30667114]
[478.38604736 367.23089600]
[474.99627686 381.86053467]
[469.93103027 395.99771118]
[463.25875854 409.45123291]
[455.06970215 422.03915405]
[445.47460938 433.59124756]
[434.60327148 443.95129395]
[422.60269165 452.97915649]
[409.63516235 460.55279541]
[395.87603760 466.56970215]
[381.51144409 470.94860840]
[366.73559570 473.63018799]
[351.74835205 474.57827759]
[336.75238037 473.77996826]
[321.95046997 471.24612427]
[307.54284668 467.01095581]
[293.72430420 461.13177490]
[280.68176270 453.68807983]
[268.59161377 444.78054810]
[257.61730957 434.52963257]
[247.90730286 423.07394409]
[239.59291077 410.56845093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 109]
[12 108]
[13 107]
[14 106]
[15 105]
[16 100]
[17 99]
[18 98]
[19 97]
[20 96]
[21 95]
[22 66]
[23 65]
[24 64]
[25 63]
[27 47]
[28 46]
[29 45]
[30 44]
[48 60]
[49 59]
[50 58]
[51 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
