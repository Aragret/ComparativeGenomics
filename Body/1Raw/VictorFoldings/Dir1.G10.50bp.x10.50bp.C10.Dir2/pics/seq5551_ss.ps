%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAAAACAAUGGGGGGGGGGAGCCUCAUCAUCCCCACCAUCAUAGCCACCAUCACCCUCCUUAACCUCUAxxxxxxxxxxUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCCCCCCCCCCCAAACAACAAU\
) } def
/len { sequence length } bind def

/coor [
[79.18784332 158.47727966]
[65.79930115 151.79817200]
[54.39799881 142.10932922]
[45.64639664 129.97372437]
[40.05301285 116.09648895]
[37.94285202 101.28397369]
[39.43852615 86.39685059]
[44.45312119 72.30013275]
[52.69527435 59.81292725]
[63.68606567 49.66078568]
[76.78688049 42.43360901]
[91.23649597 38.55133057]
[90.92852020 23.55449295]
[90.62054443 8.55765438]
[90.31256866 -6.43918419]
[90.00458527 -21.43602180]
[89.69660950 -36.43286133]
[89.38863373 -51.42969894]
[89.08065796 -66.42653656]
[88.77267456 -81.42337036]
[88.46469879 -96.42021179]
[88.15672302 -111.41705322]
[73.16285706 -111.97361755]
[58.22596359 -113.39308929]
[43.39565659 -115.67075348]
[28.72120476 -118.79903412]
[14.25135326 -122.76754761]
[0.03417026 -127.56311035]
[-13.88311672 -133.16978455]
[-27.45427513 -139.56895447]
[-40.63422012 -146.73936462]
[-53.37917328 -154.65718079]
[-65.64679718 -163.29611206]
[-77.39633179 -172.62747192]
[-88.58876038 -182.62022400]
[-99.18688965 -193.24121094]
[-109.15551758 -204.45513916]
[-118.46153259 -216.22476196]
[-127.07401276 -228.51097107]
[-134.96435547 -241.27294922]
[-142.10635376 -254.46830750]
[-148.47627258 -268.05322266]
[-154.05294800 -281.98254395]
[-158.81787109 -296.21005249]
[-162.75520325 -310.68841553]
[-165.85186768 -325.36956787]
[-168.09757996 -340.20474243]
[-169.48486328 -355.14465332]
[-170.00912476 -370.13967896]
[-169.66862488 -385.14001465]
[-168.46449280 -400.09579468]
[-166.40071106 -414.95739746]
[-163.48416138 -429.67538452]
[-159.72451782 -444.20089722]
[-155.13427734 -458.48571777]
[-149.72868347 -472.48233032]
[-143.52568054 -486.14425659]
[-136.54589844 -499.42614746]
[-128.81251526 -512.28381348]
[-120.35121155 -524.67462158]
[-111.19010162 -536.55737305]
[-101.35961914 -547.89263916]
[-90.89241791 -558.64263916]
[-79.82326508 -568.77178955]
[-68.18893433 -578.24639893]
[-56.02808380 -587.03497314]
[-43.38109970 -595.10839844]
[-30.28999519 -602.43975830]
[-16.79825974 -609.00469971]
[-2.95071220 -614.78149414]
[11.20664787 -619.75085449]
[25.62678909 -623.89636230]
[40.26181030 -627.20422363]
[55.06309891 -629.66339111]
[69.98148346 -631.26580811]
[84.96739960 -632.00604248]
[99.97106934 -631.88165283]
[114.94266510 -630.89312744]
[129.83242798 -629.04364014]
[144.59091187 -626.33941650]
[159.16909790 -622.78942871]
[173.51853943 -618.40545654]
[187.59158325 -613.20208740]
[201.34146118 -607.19653320]
[214.72251892 -600.40881348]
[227.69029236 -592.86151123]
[240.20170593 -584.57958984]
[252.21520996 -575.59057617]
[263.69088745 -565.92443848]
[274.59060669 -555.61322021]
[284.87817383 -544.69110107]
[294.51940918 -533.19451904]
[303.48226929 -521.16149902]
[311.73699951 -508.63214111]
[319.25619507 -495.64804077]
[326.01486206 -482.25225830]
[331.99053955 -468.48937988]
[337.16336060 -454.40509033]
[341.51617432 -440.04617310]
[345.03451538 -425.46029663]
[347.70669556 -410.69598389]
[349.52383423 -395.80224609]
[350.47988892 -380.82855225]
[350.57168579 -365.82464600]
[349.79891968 -350.84036255]
[348.16415405 -335.92547607]
[345.67285156 -321.12957764]
[342.33325195 -306.50177002]
[338.15646362 -292.09066772]
[333.15634155 -277.94412231]
[327.34951782 -264.10913086]
[320.75527954 -250.63168335]
[313.39553833 -237.55651855]
[305.29473877 -224.92709351]
[296.47976685 -212.78533936]
[286.97991943 -201.17160034]
[276.82678223 -190.12446594]
[266.05404663 -179.68061829]
[254.69750977 -169.87477112]
[242.79490662 -160.73947144]
[230.38575745 -152.30508423]
[217.51130676 -144.59960938]
[204.21430969 -137.64868164]
[190.53894043 -131.47535706]
[176.53062439 -126.10014343]
[162.23590088 -121.54091644]
[147.70225525 -117.81281281]
[132.97795105 -114.92820740]
[118.11193085 -112.89669800]
[103.15355682 -111.72502899]
[103.46154022 -96.72818756]
[103.76951599 -81.73135376]
[104.07749176 -66.73451233]
[104.38546753 -51.73767471]
[104.69345093 -36.74083710]
[105.00142670 -21.74399948]
[105.30940247 -6.74716139]
[105.61737823 8.24967670]
[105.92536163 23.24651527]
[106.23333740 38.24335098]
[120.83015442 41.52912903]
[134.21664429 48.21236038]
[145.61495972 57.90471268]
[154.36282349 70.04301453]
[159.95193481 83.92196655]
[162.05754089 98.73513031]
[160.55728149 113.62179565]
[155.53834534 127.71695709]
[147.29235840 140.20162964]
[136.29843140 150.35038757]
[123.19539642 157.57353210]
[108.74458313 161.45137024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
