%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCUCACCACCGGGGGGGGGGUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUAxxxxxxxxxxCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACAGACCGCCCCCCCCCCCAACCUCAACACC\
) } def
/len { sequence length } bind def

/coor [
[122.45031738 533.97210693]
[109.45853424 526.37603760]
[98.19850159 516.39117432]
[89.10301971 504.40124512]
[82.52170563 490.86712646]
[78.70751953 476.30902100]
[77.80706787 461.28652954]
[79.85496521 446.37704468]
[84.77249146 432.15368652]
[92.37062836 419.16314697]
[102.35733795 407.90472412]
[114.34873962 398.81118774]
[127.88393402 392.23205566]
[142.44264221 388.42022705]
[141.54272461 373.44723511]
[140.64280701 358.47427368]
[139.74290466 343.50128174]
[138.84298706 328.52828979]
[137.94306946 313.55532837]
[137.04315186 298.58233643]
[128.55622864 286.34219360]
[135.45166016 272.10269165]
[134.55174255 257.12969971]
[133.65182495 242.15672302]
[132.75190735 227.18373108]
[131.85198975 212.21075439]
[128.57691956 197.57266235]
[123.01042175 183.64376831]
[117.44393158 169.71485901]
[112.01095581 164.64231873]
[111.90848541 155.45115662]
[106.62180328 141.41366577]
[101.33512878 127.37618256]
[96.04845428 113.33869934]
[97.43249512 128.27470398]
[93.17016602 142.65638733]
[83.87124634 154.42626953]
[70.86604309 161.90052795]
[56.01510239 164.00991821]
[41.44301224 160.45263672]
[29.23447609 151.73760986]
[21.13606262 139.11161804]
[18.30633926 124.38095093]
[21.15012932 109.65299225]
[29.26059914 97.03473663]
[41.47745132 88.33137512]
[56.05293274 84.78802490]
[70.90185547 86.91159058]
[83.90125275 94.39943695]
[73.34784698 83.73990631]
[62.79443741 73.08038330]
[52.24102783 62.42085266]
[41.68761826 51.76132202]
[26.47996140 47.39809418]
[23.02395248 32.90998459]
[12.47054291 22.25045586]
[-3.50055194 20.73267174]
[-12.15071487 7.22140789]
[-6.84428024 -7.91864872]
[8.34810829 -13.07334232]
[21.77215195 -4.28843355]
[23.13007164 11.69704723]
[33.68348312 22.35657692]
[48.13628769 25.95736504]
[52.34714508 41.20791245]
[62.90055466 51.86744308]
[73.45396423 62.52696991]
[84.00737762 73.18650055]
[94.56078339 83.84603119]
[109.16538239 80.42465973]
[113.88619232 66.18689728]
[118.60700226 51.94913101]
[123.32781219 37.71136475]
[110.43856812 29.91295433]
[99.60816193 19.44156456]
[91.37983704 6.82243586]
[86.16632080 -7.31145906]
[84.22911835 -22.25117111]
[85.66541290 -37.24732971]
[90.40314484 -51.54773712]
[98.20468140 -64.43508911]
[108.67869568 -75.26295471]
[121.29981232 -83.48822784]
[135.43496704 -88.69831848]
[150.37515259 -90.63189697]
[165.37097168 -89.19197083]
[179.67022705 -84.45077515]
[192.55567932 -76.64611816]
[203.38101196 -66.16947937]
[211.60322571 -53.54636765]
[216.80989075 -39.40994644]
[218.73985291 -24.46929550]
[217.29629517 -9.47383404]
[212.55162048 4.82427454]
[204.74385071 17.70784187]
[194.26458740 28.53063583]
[181.63948059 36.74978638]
[167.50180054 41.95302582]
[152.56068420 43.87936401]
[137.56556702 42.43217468]
[132.84475708 56.66994095]
[128.12396240 70.90770721]
[123.40314484 85.14546967]
[120.28292084 101.09804535]
[110.08593750 108.05202484]
[115.37261963 122.08950806]
[120.65929413 136.12699890]
[125.94596863 150.16448975]
[131.37283325 164.14837646]
[136.93931580 178.07727051]
[142.50581360 192.00616455]
[145.16584778 177.24391174]
[152.63433838 164.23539734]
[164.04173279 154.49519348]
[178.05984497 149.15737915]
[193.05656433 148.84341431]
[207.28579712 153.58987427]
[219.09085083 162.84410095]
[227.09722900 175.52865601]
[230.37277222 190.16665649]
[228.53608704 205.05377197]
[221.80104065 218.45672607]
[210.95179749 228.81500244]
[197.25151062 234.92256165]
[182.29533386 236.06831360]
[167.82461548 232.11885071]
[155.52416992 223.53401184]
[146.82496643 211.31083679]
[147.72488403 226.28382874]
[148.62480164 241.25680542]
[149.52471924 256.22979736]
[150.42463684 271.20275879]
[158.97593689 284.51388550]
[152.01612854 297.68243408]
[152.91604614 312.65539551]
[153.81596375 327.62838745]
[154.71588135 342.60137939]
[155.61579895 357.57434082]
[156.51571655 372.54733276]
[157.41561890 387.52029419]
[172.32609558 389.56097412]
[186.55184937 394.47158813]
[199.54608154 402.06341553]
[210.80934143 412.04464722]
[219.90870667 424.03164673]
[226.49440002 437.56362915]
[230.31330872 452.12051392]
[231.21862793 467.14270020]
[229.17555237 482.05282593]
[224.26263428 496.27780151]
[216.66868591 509.27081299]
[206.68563843 520.53247070]
[194.69717407 529.62988281]
[181.16410828 536.21337891]
[166.60662842 540.02990723]
[151.58427429 540.93280029]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[22 132]
[23 131]
[24 130]
[25 129]
[26 128]
[27 111]
[28 110]
[29 109]
[31 108]
[32 107]
[33 106]
[34 105]
[49 69]
[50 68]
[51 67]
[52 66]
[53 65]
[55 63]
[56 62]
[70 103]
[71 102]
[72 101]
[73 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
