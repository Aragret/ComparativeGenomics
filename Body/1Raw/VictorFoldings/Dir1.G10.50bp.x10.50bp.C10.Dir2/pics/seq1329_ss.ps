%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACAAUAGCUGGGGGGGGGGAAGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACCUCAxxxxxxxxxxUGCCCAAGAACUAUCAAACUCCUGAGCCAACAACUUAAUAUGACUAGCUUCCCCCCCCCCACACAAUAGCU\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 417.61401367]
[71.01555634 412.06100464]
[58.81560135 403.19467163]
[49.20452881 391.57235718]
[42.78650284 377.92465210]
[39.96496582 363.10946655]
[40.91728210 348.05807495]
[45.58358765 333.71667480]
[53.67055511 320.98669434]
[64.66983032 310.66842651]
[77.88998413 303.41046143]
[92.50000000 299.66900635]
[92.50000000 284.66900635]
[92.50000000 269.66900635]
[92.50000000 254.66902161]
[92.50000000 239.66902161]
[92.50000000 224.66902161]
[92.50000000 209.66902161]
[92.50000000 194.66902161]
[92.50000000 179.66902161]
[92.50000000 164.66902161]
[92.50000000 149.66902161]
[92.50000000 134.66902161]
[92.50000000 119.66902161]
[87.48741913 116.92795563]
[83.39648438 112.94000244]
[69.05642700 117.34030151]
[54.71636581 121.74060059]
[40.37630463 126.14090729]
[27.00774193 136.56768799]
[13.28765106 126.60800171]
[19.06001282 110.66697693]
[35.97600174 111.80084229]
[50.31606293 107.40054321]
[64.65612793 103.00024414]
[78.99618530 98.59994507]
[81.89654541 89.25824738]
[88.70584106 82.23592377]
[97.95379639 79.04926300]
[101.91040039 64.58049774]
[105.86701202 50.11172867]
[91.72337341 45.09529495]
[77.98883057 39.04800797]
[64.73841095 32.00290298]
[52.04447174 23.99845505]
[39.97635269 15.07837963]
[28.59996605 5.29139900]
[17.97743988 -5.30903530]
[8.16679764 -16.66502571]
[-0.77838016 -28.71454811]
[-8.80923748 -41.39179230]
[-15.88191223 -54.62752151]
[-21.95777512 -68.34944153]
[-27.00364304 -82.48261261]
[-30.99195480 -96.94983673]
[-33.90092850 -111.67210388]
[-35.71467209 -126.56900024]
[-36.42328644 -141.55915833]
[-36.02289963 -156.56072998]
[-34.51569366 -171.49176025]
[-31.90990639 -186.27069092]
[-28.21976471 -200.81683350]
[-23.46542740 -215.05072021]
[-17.67285728 -228.89460754]
[-10.87369537 -242.27290344]
[-3.10507512 -255.11251831]
[5.59057379 -267.34332275]
[15.16575718 -278.89855957]
[25.56818008 -289.71505737]
[36.74102402 -299.73379517]
[48.62327194 -308.89999390]
[61.15002060 -317.16363525]
[74.25285339 -324.47958374]
[87.86020660 -330.80786133]
[101.89776611 -336.11389160]
[116.28885651 -340.36874390]
[130.95487976 -343.54916382]
[145.81573486 -345.63775635]
[160.79025269 -346.62310791]
[175.79666138 -346.49987793]
[190.75297546 -345.26870728]
[205.57752991 -342.93634033]
[220.18934631 -339.51550293]
[234.50860596 -335.02490234]
[248.45713806 -329.48901367]
[261.95870972 -322.93811035]
[274.93963623 -315.40798950]
[287.32897949 -306.93972778]
[299.05908203 -297.57958984]
[310.06588745 -287.37872314]
[320.28927612 -276.39285278]
[329.67340088 -264.68194580]
[338.16699219 -252.30995178]
[345.72369385 -239.34448242]
[352.30224609 -225.85633850]
[357.86666870 -211.91917419]
[362.38659668 -197.60913086]
[365.83734131 -183.00436401]
[368.20007324 -168.18461609]
[369.46185303 -153.23085022]
[369.61581421 -138.22473145]
[368.66113281 -123.24822235]
[366.60296631 -108.38312531]
[363.45260620 -93.71061707]
[359.22723389 -79.31084442]
[353.94992065 -65.26245117]
[347.64953613 -51.64216614]
[340.36044312 -38.52437973]
[332.12246704 -25.98073387]
[322.98059082 -14.07974339]
[312.98477173 -2.88640618]
[302.18960571 7.53814363]
[290.65402222 17.13696861]
[278.44100952 25.85764503]
[265.61734009 33.65254211]
[252.25300598 40.47908401]
[238.42100525 46.29998779]
[224.19688416 51.08346558]
[209.65834045 54.80338287]
[194.88476562 57.43943024]
[179.95684814 58.97720718]
[164.95613098 59.40831375]
[149.96455383 58.73039627]
[135.06396484 56.94715881]
[120.33577728 54.06834030]
[116.37917328 68.53710938]
[112.42256165 83.00587463]
[120.86321259 102.80119324]
[107.50000000 119.66902161]
[107.50000000 134.66902161]
[107.50000000 149.66902161]
[107.50000000 164.66902161]
[107.50000000 179.66902161]
[107.50000000 194.66902161]
[107.50000000 209.66902161]
[107.50000000 224.66902161]
[107.50000000 239.66902161]
[107.50000000 254.66902161]
[107.50000000 269.66900635]
[107.50000000 284.66900635]
[107.50000000 299.66900635]
[122.11001587 303.41046143]
[135.33016968 310.66842651]
[146.32945251 320.98669434]
[154.41641235 333.71667480]
[159.08271790 348.05807495]
[160.03503418 363.10946655]
[157.21350098 377.92465210]
[150.79547119 391.57235718]
[141.18440247 403.19467163]
[128.98443604 412.06100464]
[114.96250153 417.61401367]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 129]
[26 36]
[27 35]
[28 34]
[29 33]
[39 127]
[40 126]
[41 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
