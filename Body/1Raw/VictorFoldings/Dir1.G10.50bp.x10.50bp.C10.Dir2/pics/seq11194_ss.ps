%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAACUACCGGGGGGGGGGUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCxxxxxxxxxxUCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCCCCCCCCCCCUCAACUAUC\
) } def
/len { sequence length } bind def

/coor [
[89.31469727 542.41119385]
[75.82582092 535.67968750]
[64.34031677 525.91510010]
[55.52594757 513.68524170]
[49.89516449 499.70101929]
[47.77533722 484.77557373]
[49.28970718 469.77655029]
[54.35023117 455.57604980]
[62.66269684 442.99963379]
[73.74382782 432.77847290]
[86.94937897 425.50683594]
[101.51160431 421.60745239]
[101.20362854 406.61062622]
[100.89565277 391.61380005]
[100.58766937 376.61694336]
[100.27969360 361.62011719]
[99.97171783 346.62326050]
[99.66374207 331.62643433]
[99.35575867 316.62960815]
[99.04778290 301.63275146]
[98.73980713 286.63592529]
[98.43183136 271.63909912]
[83.37045288 267.69940186]
[70.01018524 259.67935181]
[59.43152237 248.21806335]
[52.49264908 234.23327637]
[49.75984573 218.84802246]
[51.46128082 203.30026245]
[57.46799088 188.84339905]
[67.30359650 176.64520264]
[80.18209076 167.69343567]
[95.07064819 162.71595764]
[94.45482635 147.72860718]
[93.83899689 132.74124146]
[93.22317505 117.75389099]
[78.43008423 106.64131927]
[78.56024933 85.05413055]
[65.88873291 77.02713013]
[53.21722031 69.00013733]
[40.54570389 60.97314072]
[27.87418747 52.94614029]
[15.20267105 44.91914368]
[2.53115511 36.89214706]
[-10.14036083 28.86515045]
[-22.81187630 20.83815384]
[-35.46600723 29.31122017]
[-50.47354126 31.89845467]
[-65.23433685 28.15160370]
[-77.19098663 18.71983147]
[-84.27194214 5.23725033]
[-85.25037384 -9.96020222]
[-79.95677185 -24.23947525]
[-69.30827332 -35.12659836]
[-55.14980698 -40.73530960]
[-39.93440247 -40.09386826]
[-26.29822922 -33.31341171]
[-16.60383224 -21.56868553]
[-12.53082466 -6.89454174]
[-14.78487968 8.16663742]
[-2.11336374 16.19363403]
[10.55815220 24.22063255]
[23.22966766 32.24762726]
[35.90118408 40.27462769]
[48.57270050 48.30162430]
[61.24421692 56.32862091]
[73.91573334 64.35561371]
[86.58724976 72.38261414]
[101.27214813 69.32421875]
[109.68555450 56.90590286]
[98.53946686 46.83064270]
[88.90412140 35.30215073]
[80.96706390 22.54482651]
[74.88279724 8.80700302]
[70.76975250 -5.64391375]
[68.70798492 -20.52663040]
[68.73764038 -35.55145264]
[70.85813141 -50.42591476]
[75.02819061 -64.86048126]
[81.16663361 -78.57418823]
[89.15399170 -91.30007935]
[98.83477020 -102.79045105]
[110.02053833 -112.82163239]
[122.49356079 -121.19837189]
[136.01104736 -127.75761414]
[150.30989075 -132.37167358]
[165.11172485 -134.95074463]
[180.12846375 -135.44461060]
[195.06777954 -133.84368896]
[209.63887024 -130.17910767]
[223.55813599 -124.52220917]
[236.55459595 -116.98311615]
[248.37530518 -107.70857239]
[258.79013062 -96.87911224]
[267.59640503 -84.70552826]
[274.62265015 -71.42479706]
[279.73211670 -57.29541397]
[282.82534790 -42.59241867]
[283.84216309 -27.60201454]
[282.76272583 -12.61598969]
[279.60806274 2.07394910]
[274.43960571 16.18185616]
[267.35791016 29.43311882]
[258.50088501 41.56979370]
[248.04087830 52.35564041]
[236.18151855 61.58071136]
[223.15367126 69.06542969]
[209.21089172 74.66410828]
[194.62460327 78.26777649]
[179.67872620 79.80626678]
[164.66419983 79.24964905]
[149.87326050 76.60874939]
[135.59382629 71.93498230]
[122.10386658 65.31931305]
[113.69046021 77.73763275]
[122.53835297 101.17953491]
[108.21052551 117.13806915]
[108.82635498 132.12542725]
[109.44217682 147.11277771]
[110.05800629 162.10012817]
[124.16373444 165.39367676]
[136.91996765 172.23075867]
[147.45486450 182.13688660]
[155.05023193 194.42811584]
[159.19056702 208.25817871]
[159.59794617 222.67678833]
[156.25076294 236.69490051]
[149.38468933 249.35264587]
[139.47616577 259.78491211]
[127.20930481 267.28063965]
[113.42866516 271.33111572]
[113.73664856 286.32794189]
[114.04462433 301.32476807]
[114.35260010 316.32162476]
[114.66057587 331.31845093]
[114.96855164 346.31530762]
[115.27653503 361.31213379]
[115.58451080 376.30895996]
[115.89248657 391.30581665]
[116.20046234 406.30264282]
[116.50844574 421.29949951]
[131.21847534 424.59771729]
[144.71144104 431.32107544]
[156.20285034 441.07867432]
[165.02464294 453.30322266]
[170.66389465 467.28399658]
[172.79277039 482.20819092]
[171.28749084 497.20809937]
[166.23558044 511.41168213]
[157.93074036 523.99316406]
[146.85581970 534.22100830]
[133.65466309 541.50067139]
[119.09481049 545.40881348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[32 119]
[33 118]
[34 117]
[35 116]
[37 67]
[38 66]
[39 65]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[45 59]
[68 114]
[69 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
