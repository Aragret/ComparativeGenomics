%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUACUCCUCAGGGGGGGGGGAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAUxxxxxxxxxxAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCCCCCCCCCCCAUACUCCUUA\
) } def
/len { sequence length } bind def

/coor [
[72.75994110 393.20816040]
[61.01434708 383.78186035]
[51.57008743 372.05068970]
[44.86889267 358.56335449]
[41.22417831 343.95068359]
[40.80642319 328.89614868]
[43.63516617 314.10382080]
[49.57809448 300.26562500]
[58.35725403 288.02877808]
[69.56201935 277.96563721]
[82.66833496 270.54681396]
[97.06318665 266.11938477]
[95.83257294 251.16993713]
[94.60195923 236.22050476]
[93.37135315 221.27107239]
[92.14073944 206.32164001]
[90.91012573 191.37220764]
[89.67951202 176.42277527]
[88.44889832 161.47332764]
[87.21828461 146.52389526]
[85.98767853 131.57446289]
[73.92524719 122.65831757]
[59.27251816 125.86730957]
[44.61979294 129.07630920]
[29.96706963 132.28530884]
[21.42240143 145.30937195]
[6.51674080 148.35501099]
[-5.84706116 140.12872314]
[-20.49978638 143.33772278]
[-27.59523773 157.27287292]
[-42.00814819 163.33934021]
[-56.93318176 158.67271423]
[-65.32319641 145.47644043]
[-63.21667862 129.98138428]
[-51.60826874 119.50385284]
[-35.97909546 118.99100494]
[-23.70878220 128.68499756]
[-9.05605698 125.47599792]
[-1.26223922 112.83510590]
[13.55199432 109.37199402]
[26.75807381 117.63257599]
[41.41079712 114.42358398]
[56.06352234 111.21458435]
[70.71624756 108.00559235]
[74.35607147 82.80878448]
[96.15534210 68.84845734]
[91.31552887 54.65070343]
[86.47571564 40.45294952]
[74.69953918 29.88732910]
[77.91651154 15.34427834]
[73.07669830 1.14652538]
[68.23688507 -13.05122757]
[62.47138596 -20.21745682]
[63.44670486 -27.59044647]
[58.89941406 -41.88457489]
[43.90240097 -40.50482559]
[28.95946312 -42.38169479]
[14.76950550 -47.42739868]
[1.99621749 -55.40594482]
[-8.76296902 -65.94416046]
[-17.00482941 -78.54914856]
[-22.34387398 -92.63136292]
[-24.53038979 -107.53214264]
[-23.46210670 -122.55455017]
[-19.18898964 -136.99597168]
[-11.91090298 -150.18093872]
[-1.96825385 -161.49278259]
[10.17392159 -170.40242004]
[23.94771194 -176.49313354]
[38.70888901 -179.48005676]
[53.76705170 -179.22346497]
[68.41790009 -175.73538208]
[81.97618103 -169.17892456]
[93.80776215 -159.86077881]
[103.35924530 -148.21676636]
[110.18389893 -134.79148865]
[113.96252441 -120.21286774]
[114.51837158 -105.16278076]
[111.82546234 -90.34514618]
[106.00974274 -76.45301056]
[97.34321594 -64.13613129]
[86.23124695 -53.97059631]
[73.19354248 -46.43186569]
[77.74083710 -32.13773727]
[82.43463135 -17.89104271]
[87.27445221 -3.69329095]
[92.11426544 10.50446129]
[103.54426575 20.05456543]
[100.67346191 35.61313248]
[105.51328278 49.81088638]
[110.35309601 64.00863647]
[106.92359161 49.40595245]
[112.29171753 35.39941025]
[124.60240173 26.82928848]
[139.60140991 26.65718460]
[152.10551453 34.94257355]
[157.79360962 48.82225037]
[154.70007324 63.49978638]
[143.89393616 73.90302277]
[129.10914612 76.43685150]
[144.07043457 75.35977936]
[159.03170776 74.28271484]
[147.93911743 64.18547058]
[145.76110840 49.34443283]
[153.48478699 36.48578644]
[167.60966492 31.43725777]
[181.73414612 36.48691177]
[189.45680237 49.34617233]
[187.27761841 64.18703461]
[176.18585205 74.28271484]
[191.14714050 75.35977936]
[206.10841370 76.43685150]
[221.06970215 77.51392365]
[236.03097534 78.59098816]
[250.54092407 70.94944763]
[264.26748657 79.92237091]
[263.08996582 96.27918243]
[248.21968079 103.19340515]
[234.95390320 93.55226898]
[219.99263000 92.47520447]
[205.03134155 91.39813232]
[190.07006836 90.32106018]
[175.10877991 89.24399567]
[160.10877991 89.24399567]
[145.14750671 90.32106018]
[130.18621826 91.39813232]
[124.92519379 118.21766663]
[100.93711090 130.34385681]
[102.16772461 145.29328918]
[103.39833832 160.24272156]
[104.62894440 175.19215393]
[105.85955811 190.14158630]
[107.09017181 205.09101868]
[108.32078552 220.04046631]
[109.55139923 234.98989868]
[110.78201294 249.93933105]
[112.01261902 264.88876343]
[126.93771362 266.90264893]
[141.08078003 272.07833862]
[153.78033447 280.17373657]
[164.44238281 290.81021118]
[172.56825256 303.49026489]
[177.77787781 317.62088013]
[179.82760620 332.54107666]
[178.62153625 347.55307007]
[174.21611023 361.95468140]
[166.81736755 375.07232666]
[156.77136230 386.29248047]
[144.54795837 395.09033203]
[130.71885681 401.05444336]
[115.93090057 403.90579224]
[100.87573242 403.51107788]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 44]
[23 43]
[24 42]
[25 41]
[28 38]
[29 37]
[46 91]
[47 90]
[48 89]
[50 87]
[51 86]
[52 85]
[54 84]
[55 83]
[100 126]
[101 125]
[102 124]
[110 123]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
