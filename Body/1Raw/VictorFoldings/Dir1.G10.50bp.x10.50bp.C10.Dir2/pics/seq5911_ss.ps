%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUAUCUCCCGGGGGGGGGGCUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGxxxxxxxxxxGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUAAUCCUAAUACCCCCCCCCCCCAACUAUCUCCC\
) } def
/len { sequence length } bind def

/coor [
[82.77709961 390.34255981]
[69.85794067 382.58419800]
[59.07664490 372.05517578]
[51.01462936 359.32330322]
[46.10667038 345.07519531]
[44.61744690 330.07922363]
[46.62726974 315.14413452]
[52.02775574 301.07531738]
[60.52766037 288.63150024]
[71.66859436 278.48376465]
[84.84973907 271.17938232]
[99.36026001 267.11224365]
[98.74443054 252.12490845]
[98.12860870 237.13754272]
[97.51277924 222.15019226]
[96.89695740 207.16284180]
[96.28113556 192.17549133]
[95.66530609 177.18814087]
[95.04948425 162.20077515]
[94.43365479 147.21342468]
[93.81783295 132.22607422]
[87.82016754 132.28720093]
[81.63842010 131.20062256]
[75.49592590 128.90905762]
[69.62942505 125.39902496]
[55.38273621 130.09283447]
[41.13604355 134.78663635]
[26.88935089 139.48042297]
[16.37585449 152.06607056]
[0.26821694 148.98774719]
[-4.86340475 133.41218567]
[6.25996113 121.36216736]
[22.19554901 125.23374176]
[36.44224167 120.53993988]
[50.68893433 115.84613800]
[64.93562317 111.15233612]
[63.39833450 96.23132324]
[48.49388504 94.54092407]
[33.58943939 92.85052490]
[17.16982269 97.07338715]
[8.56659031 82.46446228]
[20.22298241 70.15328979]
[35.27983475 77.94607544]
[50.18428421 79.63647461]
[65.08872986 81.32687378]
[74.18695068 72.25347137]
[85.27147675 66.92890930]
[96.94445038 65.62740326]
[107.85293579 68.13982391]
[114.67651367 54.78172684]
[121.50008392 41.42362976]
[128.32365417 28.06552887]
[135.14723206 14.70742989]
[122.43585205 6.72505331]
[110.47969818 -2.34953022]
[99.37236023 -12.44529819]
[89.20075226 -23.48323631]
[80.04449463 -35.37695694]
[71.97524261 -48.03337097]
[65.05615997 -61.35342789]
[59.34138870 -75.23287201]
[54.87565994 -89.56307983]
[51.69392395 -104.23189545]
[49.82107925 -119.12451935]
[49.27178955 -134.12437439]
[50.05035019 -149.11408997]
[52.15066910 -163.97633362]
[55.55630875 -178.59478760]
[60.24061203 -192.85504150]
[66.16692352 -206.64549255]
[73.28884888 -219.85821533]
[81.55066681 -232.38977051]
[90.88769531 -244.14210510]
[101.22687531 -255.02323914]
[112.48727417 -264.94799805]
[124.58077240 -273.83874512]
[137.41271973 -281.62582397]
[150.88267517 -288.24835205]
[164.88522339 -293.65447998]
[179.31077576 -297.80187988]
[194.04643250 -300.65811157]
[208.97686768 -302.20083618]
[223.98521423 -302.41793823]
[238.95401001 -301.30773926]
[253.76611328 -298.87893677]
[268.30560303 -295.15051270]
[282.45867920 -290.15167236]
[296.11456299 -283.92153931]
[309.16635132 -276.50888062]
[321.51196289 -267.97167969]
[333.05471802 -258.37677002]
[343.70431519 -247.79925537]
[353.37738037 -236.32191467]
[361.99822998 -224.03456116]
[369.49935913 -211.03338623]
[375.82205200 -197.42012024]
[380.91690063 -183.30133057]
[384.74395752 -168.78749084]
[387.27328491 -153.99221802]
[388.48507690 -139.03131104]
[388.36990356 -124.02182770]
[386.92861938 -109.08126831]
[384.17251587 -94.32656097]
[380.12313843 -79.87317657]
[374.81222534 -65.83423615]
[368.28134155 -52.31961823]
[360.58154297 -39.43509293]
[351.77316284 -27.28150368]
[341.92507935 -15.95396996]
[331.11441040 -5.54114389]
[319.42572021 3.87547612]
[306.95056152 12.22219181]
[293.78649902 19.43367767]
[280.03662109 25.45349121]
[265.80850220 30.23451996]
[251.21351624 33.73934555]
[236.36587524 35.94053650]
[221.38179016 36.82086563]
[206.37854004 36.37344360]
[191.47355652 34.60177231]
[176.78346252 31.51971626]
[162.42326355 27.15139771]
[148.50534058 21.53100586]
[141.68176270 34.88910294]
[134.85818481 48.24720383]
[128.03460693 61.60530472]
[121.21103668 74.96340179]
[132.46661377 95.23994446]
[127.50527191 117.89410400]
[108.80518341 131.61024475]
[109.42100525 146.59761047]
[110.03683472 161.58496094]
[110.65265656 176.57231140]
[111.26848602 191.55966187]
[111.88430786 206.54701233]
[112.50013733 221.53436279]
[113.11595917 236.52172852]
[113.73178864 251.50907898]
[114.34761047 266.49642944]
[129.14288330 269.35940552]
[142.87886047 275.55776978]
[154.81475830 284.75726318]
[164.30691528 296.46179199]
[170.84341431 310.04013062]
[174.07174683 324.75997925]
[173.81782532 339.82757568]
[170.09533691 354.43029785]
[163.10502625 367.78067017]
[153.22389221 379.15872192]
[140.98478699 387.95080566]
[127.04776001 393.68283081]
[112.16442108 396.04565430]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 36]
[26 35]
[27 34]
[28 33]
[37 45]
[38 44]
[39 43]
[49 127]
[50 126]
[51 125]
[52 124]
[53 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
