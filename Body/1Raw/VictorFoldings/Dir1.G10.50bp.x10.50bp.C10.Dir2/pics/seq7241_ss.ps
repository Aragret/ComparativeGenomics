%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGGCUCAUUGGGGGGGGGGCAUUUCUCUAACAGCAGUAAUAUUAAUAAUUUUCAUGAUUUGAGAAGCCUxxxxxxxxxxAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCCCCCCCCCCCUAGGCUCACU\
) } def
/len { sequence length } bind def

/coor [
[70.95574188 622.92724609]
[57.10980606 616.91119385]
[45.40114594 607.38177490]
[36.69861984 595.04614258]
[31.64801979 580.81958008]
[30.62412834 565.75793457]
[33.70292664 550.97875977]
[40.65594864 537.57885742]
[50.96723175 526.55249023]
[63.87161255 518.71801758]
[78.41149902 514.65667725]
[78.41149902 499.65667725]
[78.41149902 484.65667725]
[78.41149902 469.65667725]
[78.41149902 454.65667725]
[78.41149902 439.65667725]
[78.41149902 424.65667725]
[78.41149902 409.65667725]
[78.41149902 394.65667725]
[78.41149902 379.65667725]
[64.77429962 377.13330078]
[51.79204941 372.24398804]
[39.87186813 365.14068604]
[29.38782310 356.04476929]
[20.66917992 345.24014282]
[13.99006462 333.06445312]
[9.56084824 319.89843750]
[7.52151775 306.15411377]
[7.93725491 292.26181030]
[10.79635143 278.65670776]
[16.01053429 265.76531982]
[23.41769218 253.99185181]
[32.78691483 243.70587158]
[43.82569122 235.23043823]
[56.18903732 228.83207703]
[69.49029541 224.71238708]
[83.31318665 223.00167847]
[84.24881744 208.03088379]
[85.18444824 193.06008911]
[86.12007904 178.08929443]
[83.38059235 171.17259216]
[87.23409271 162.81781006]
[88.48096466 147.86972046]
[89.72783661 132.92163086]
[90.97471619 117.97354126]
[80.68092346 112.04159546]
[74.58420563 100.23680878]
[75.90666962 85.59889984]
[64.20704651 76.21173859]
[52.50742722 66.82457733]
[37.20710373 70.05477905]
[23.43445396 62.64883423]
[17.69249535 48.10359573]
[22.69240761 33.28688431]
[36.07338715 25.19470215]
[51.51733780 27.64792442]
[61.73210907 39.48821640]
[61.89458847 55.12495422]
[73.59420776 64.51211548]
[85.29383087 73.89927673]
[99.78942871 70.04212189]
[105.27646637 56.08172989]
[103.12354279 40.40769196]
[114.98025513 31.39283180]
[120.46729279 17.43244362]
[123.71811676 2.78894138]
[124.65373993 -12.18185043]
[125.58937073 -27.15264130]
[126.52500153 -42.12343216]
[127.46063232 -57.09422302]
[113.94229126 -64.10667419]
[104.44996643 -76.01531219]
[100.62826538 -90.75690460]
[103.13931274 -105.77737427]
[111.54806519 -118.47433472]
[124.39764404 -126.64796448]
[139.46179199 -128.88212585]
[154.13053894 -124.78974915]
[165.86245728 -115.07985687]
[172.62489319 -101.43473816]
[173.24624634 -86.21850586]
[167.61885071 -72.06745148]
[156.71766663 -61.43334198]
[142.43142700 -56.15859604]
[141.49578857 -41.18780518]
[140.56016541 -26.21701241]
[139.62454224 -11.24622154]
[138.68890381 3.72456980]
[147.63070679 -8.31886101]
[160.26502991 -16.40427208]
[174.94656372 -19.47873878]
[189.76342773 -17.14188766]
[202.78605652 -9.69803715]
[212.31860352 1.88343763]
[217.11968994 16.09433556]
[216.56407166 31.08404350]
[210.72413635 44.90052032]
[200.36035156 55.74451447]
[186.82238770 62.20386505]
[171.87318420 63.43740463]
[157.45953369 59.28448868]
[145.45845032 50.28593826]
[137.43276978 37.61359024]
[134.42767334 22.91947365]
[128.94064331 36.87986374]
[131.48603821 51.55536270]
[119.23685455 61.56875992]
[113.74982452 75.52915192]
[123.95424652 102.56086731]
[105.92279816 119.22042084]
[104.67592621 134.16850281]
[103.42905426 149.11659241]
[102.18217468 164.06468201]
[101.09086609 179.02493286]
[100.15523529 193.99571228]
[99.21961212 208.96650696]
[98.28398132 223.93730164]
[113.93286896 228.14314270]
[128.38386536 235.46258545]
[141.02525330 245.58340454]
[151.32237244 258.07476807]
[158.84030151 272.40567017]
[163.26220703 287.96749878]
[164.40264893 304.09985352]
[162.21545410 320.11856079]
[156.79547119 335.34472656]
[148.37455750 349.13351440]
[137.31158447 360.90139771]
[124.07720947 370.15090942]
[109.23377228 376.49160767]
[93.41149902 379.65667725]
[93.41149902 394.65667725]
[93.41149902 409.65667725]
[93.41149902 424.65667725]
[93.41149902 439.65667725]
[93.41149902 454.65667725]
[93.41149902 469.65667725]
[93.41149902 484.65667725]
[93.41149902 499.65667725]
[93.41149902 514.65667725]
[107.95138550 518.71801758]
[120.85576630 526.55249023]
[131.16705322 537.57885742]
[138.12007141 550.97875977]
[141.19886780 565.75793457]
[140.17498779 580.81958008]
[135.12437439 595.04614258]
[126.42185974 607.38177490]
[114.71319580 616.91119385]
[100.86725616 622.92724609]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[37 117]
[38 116]
[39 115]
[40 114]
[42 113]
[43 112]
[44 111]
[45 110]
[48 60]
[49 59]
[50 58]
[61 108]
[62 107]
[64 105]
[65 104]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
