%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCACAUCACGGGGGGGGGGCCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGxxxxxxxxxxUCCUAGCCAUGCACUACUCACCAGACGCCUCAACCGCCUUUUCAUCAAUCCCCCCCCCCCGCCCACAUCAC\
) } def
/len { sequence length } bind def

/coor [
[101.01845551 634.85144043]
[87.52957153 628.11993408]
[76.04407501 618.35534668]
[67.22970581 606.12542725]
[61.59892273 592.14123535]
[59.47909546 577.21575928]
[60.99346161 562.21679688]
[66.05398560 548.01629639]
[74.36645508 535.43988037]
[85.44758606 525.21868896]
[98.65313721 517.94708252]
[113.21536255 514.04766846]
[112.90738678 499.05084229]
[112.59940338 484.05401611]
[112.29142761 469.05718994]
[111.98345184 454.06033325]
[111.67547607 439.06350708]
[111.36749268 424.06665039]
[111.05951691 409.06982422]
[110.75154114 394.07299805]
[110.44356537 379.07614136]
[95.69153595 376.47769165]
[81.72548676 371.04931641]
[69.08285522 362.99789429]
[58.25054932 352.63125610]
[49.64618683 340.34652710]
[43.60200882 326.61474609]
[40.35202026 311.96295166]
[40.02296066 296.95382690]
[42.62935257 282.16421509]
[48.07286453 268.16284180]
[56.14603043 255.48852539]
[66.54014587 244.62937927]
[78.85708618 236.00405884]
[92.62452698 229.94560242]
[107.31410217 226.68858337]
[107.00612640 211.69174194]
[106.69815063 196.69490051]
[106.39017487 181.69807434]
[104.85288239 166.77705383]
[102.09664154 152.03245544]
[99.34039307 137.28785706]
[96.58415222 122.54325867]
[85.37783813 121.55688477]
[74.71072388 114.78828430]
[67.57007599 102.71437073]
[66.53036499 87.32039642]
[54.74822998 78.03701019]
[42.96609497 68.75362396]
[28.73201561 74.52307892]
[13.52243996 72.38663483]
[1.42866552 62.91899872]
[-4.29614210 48.66690445]
[-2.11203933 33.46409988]
[7.39346170 21.40006256]
[21.66342926 15.71995640]
[36.85931396 17.95170212]
[48.89349747 27.49497032]
[54.52884674 41.78267288]
[52.24948120 56.97148514]
[64.03161621 66.25487518]
[75.81375122 75.53825378]
[82.91262817 73.11834717]
[85.81979370 58.40276718]
[97.11038208 68.27853394]
[104.20925903 65.85862732]
[107.86796570 51.31167221]
[111.52667236 36.76471710]
[115.18537903 22.21776199]
[101.75646973 15.39044189]
[90.18381500 5.74568415]
[81.04788208 -6.23273373]
[74.80693054 -19.94397926]
[71.77400970 -34.70030212]
[72.10123444 -49.76153564]
[75.77220154 -64.37220764]
[82.60277557 -77.79945374]
[92.25033569 -89.36977386]
[104.23097229 -98.50279999]
[117.94372559 -104.74043274]
[132.70079041 -107.76978302]
[147.76193237 -107.43890381]
[162.37171936 -103.76439667]
[175.79731750 -96.93057251]
[187.36529541 -87.28020477]
[196.49542236 -75.29736328]
[202.72972107 -61.58309174]
[205.75549316 -46.82530212]
[205.42097473 -31.76423073]
[201.74291992 -17.15534019]
[194.90585327 -3.73140335]
[185.25268555 7.83423948]
[173.26762390 16.96146202]
[159.55184937 23.19244385]
[144.79331970 26.21464348]
[129.73233032 25.87646866]
[126.07362366 40.42342377]
[122.41491699 54.97037506]
[118.75621033 69.51733398]
[129.29208374 100.46314240]
[111.32875061 119.78701782]
[114.08499146 134.53161621]
[116.84123230 149.27621460]
[119.59748077 164.02081299]
[127.66564941 151.37547302]
[141.56694031 145.74040222]
[156.16287231 149.19856262]
[166.05816650 160.47166443]
[167.59513855 175.39271545]
[160.20564270 188.44627380]
[146.62113953 194.80720520]
[131.86303711 192.12423706]
[121.38700867 181.39009094]
[121.69499207 196.38693237]
[122.00296783 211.38377380]
[122.31094360 226.38059998]
[137.12185669 229.03179932]
[151.12641907 234.51992798]
[163.78707886 242.63230896]
[174.61825562 253.05555725]
[183.20497131 265.38775635]
[189.21871948 279.15383911]
[192.43009949 293.82397461]
[192.71751404 308.83395386]
[190.07179260 323.60684204]
[184.59646606 337.57516479]
[176.50372314 350.20278931]
[166.10614014 361.00540161]
[153.80471802 369.56909180]
[140.07330322 375.56628418]
[125.44039917 378.76815796]
[125.74838257 393.76501465]
[126.05635834 408.76184082]
[126.36433411 423.75869751]
[126.67230988 438.75552368]
[126.98028564 453.75234985]
[127.28826904 468.74920654]
[127.59624481 483.74603271]
[127.90422058 498.74288940]
[128.21220398 513.73968506]
[142.92224121 517.03796387]
[156.41519165 523.76129150]
[167.90661621 533.51892090]
[176.72839355 545.74346924]
[182.36766052 559.72424316]
[184.49653625 574.64843750]
[182.99125671 589.64831543]
[177.93934631 603.85192871]
[169.63450623 616.43334961]
[158.55957031 626.66125488]
[145.35842896 633.94085693]
[130.79856873 637.84906006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[36 116]
[37 115]
[38 114]
[39 113]
[40 104]
[41 103]
[42 102]
[43 101]
[47 62]
[48 61]
[49 60]
[66 99]
[67 98]
[68 97]
[69 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
