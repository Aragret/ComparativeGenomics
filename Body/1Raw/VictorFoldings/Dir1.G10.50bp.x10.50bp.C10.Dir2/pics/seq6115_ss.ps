%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACACUUAGGGGGGGGGGGUUAACAGCUAAGCACCCUAAUCAACUGGCUUCAAUCUACUUCUCCCGCCGxxxxxxxxxxUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACACCCCCCCCCCAAACACAUAG\
) } def
/len { sequence length } bind def

/coor [
[83.24011993 464.78012085]
[69.39418030 458.76409912]
[57.68551636 449.23468018]
[48.98299408 436.89901733]
[43.93239212 422.67248535]
[42.90850067 407.61080933]
[45.98730087 392.83166504]
[52.94031906 379.43173218]
[63.25160599 368.40539551]
[76.15598297 360.57089233]
[90.69586945 356.50958252]
[90.69586945 341.50958252]
[90.69586945 326.50958252]
[90.69586945 311.50958252]
[90.69586945 296.50958252]
[90.69586945 281.50958252]
[90.69586945 266.50958252]
[90.69586945 251.50956726]
[90.69586945 236.50956726]
[90.69586945 221.50956726]
[90.69586945 206.50956726]
[80.37489319 198.73306274]
[76.37692261 186.23944092]
[80.38304138 173.54380798]
[91.13810730 165.37153625]
[91.45016479 150.37477112]
[91.76222229 135.37802124]
[73.25071716 128.55140686]
[59.87391663 112.14589691]
[56.45514297 89.79863739]
[41.55324173 88.08594513]
[26.65133858 86.37326050]
[11.74943638 84.66056824]
[4.39742756 97.96531677]
[-7.48956776 107.43990326]
[-22.09886932 111.63951874]
[-37.20266342 109.92375946]
[-50.49773026 102.55425262]
[-59.95667267 90.65480042]
[-64.13706970 76.03999329]
[-62.40143204 60.93846893]
[-55.01444626 47.65310669]
[-43.10256577 38.20982361]
[-28.48226547 34.04866028]
[-13.38303852 35.80415726]
[-0.10740485 43.20861435]
[9.32019711 55.13290787]
[13.46212673 69.75866699]
[28.36402893 71.47135925]
[43.26593018 73.18404388]
[58.16783524 74.89673615]
[63.81733704 69.96387482]
[51.56079483 61.31649399]
[39.30425262 52.66911697]
[24.71990585 49.16242218]
[14.94539070 37.78442383]
[13.67729282 22.83812332]
[21.39518929 9.97600651]
[35.18027878 4.06234932]
[49.81922531 7.33361673]
[59.77578354 18.55265999]
[61.28439713 33.47715759]
[68.20037079 46.78765488]
[75.11634064 60.09815216]
[80.76584625 55.16529083]
[81.07789612 40.16853714]
[81.38995361 25.17178345]
[81.70201111 10.17502880]
[82.01406860 -4.82172441]
[68.21572113 -11.26575947]
[58.23623657 -22.76922607]
[53.80461502 -37.33908081]
[55.68866348 -52.45100403]
[63.56195831 -65.48676300]
[76.06040192 -74.18784332]
[91.01856995 -77.04672241]
[105.84485626 -73.56808472]
[117.97053528 -64.35462189]
[125.29474640 -51.00262070]
[126.54853058 -35.82540512]
[121.51465607 -21.45251274]
[111.06528473 -10.37413502]
[97.01081848 -4.50966835]
[96.69876862 10.48708534]
[96.38671112 25.48383904]
[96.07465363 40.48059082]
[95.76259613 55.47734451]
[106.20426941 57.40551758]
[115.50291443 61.65097809]
[123.17733002 67.78746033]
[128.88128662 75.29777527]
[132.41799927 83.61285400]
[146.91360474 79.75569916]
[161.40919495 75.89853668]
[160.98947144 60.83465576]
[164.05561829 46.08015060]
[170.44229126 32.43070984]
[179.80505371 20.62243843]
[191.63900757 11.29213619]
[205.30592346 4.94297552]
[220.06880188 1.91735911]
[235.13146973 2.37845445]
[249.68164062 6.30139494]
[262.93463135 13.47462177]
[274.17568970 23.51129150]
[282.79867554 35.87014008]
[288.33850098 49.88467026]
[290.49642944 64.79909515]
[289.15609741 79.80909729]
[284.38973999 94.10520935]
[276.45446777 106.91645813]
[265.77819824 117.55194855]
[252.93666077 125.43812561]
[238.62240601 130.14968872]
[223.60739136 131.43257141]
[208.70132446 129.21755981]
[194.70811462 123.62412262]
[182.38237000 114.95390320]
[172.38879395 103.67447662]
[165.26635742 90.39413452]
[150.77076721 94.25129700]
[136.27516174 98.10845184]
[133.07078552 115.02627563]
[122.43547821 128.56771851]
[106.75897217 135.69007874]
[106.44692230 150.68682861]
[106.13486481 165.68359375]
[118.46470642 178.04936218]
[118.07663727 195.17050171]
[105.69586945 206.50956726]
[105.69586945 221.50956726]
[105.69586945 236.50956726]
[105.69586945 251.50956726]
[105.69586945 266.50958252]
[105.69586945 281.50958252]
[105.69586945 296.50958252]
[105.69586945 311.50958252]
[105.69586945 326.50958252]
[105.69586945 341.50958252]
[105.69586945 356.50958252]
[120.23576355 360.57089233]
[133.14013672 368.40539551]
[143.45143127 379.43173218]
[150.40444946 392.83166504]
[153.48324585 407.61080933]
[152.45935059 422.67248535]
[147.40875244 436.89901733]
[138.70622253 449.23468018]
[126.99756622 458.76409912]
[113.15162659 464.78012085]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 127]
[26 126]
[27 125]
[30 51]
[31 50]
[32 49]
[33 48]
[65 87]
[66 86]
[67 85]
[68 84]
[69 83]
[92 122]
[93 121]
[94 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
