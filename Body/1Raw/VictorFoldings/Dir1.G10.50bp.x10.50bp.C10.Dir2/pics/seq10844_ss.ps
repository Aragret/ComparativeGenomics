%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGGCCUCCUGGGGGGGGGGCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCxxxxxxxxxxCCAACAUACUCGGAUUCUACCCUAGCAUCACACACCGCACAAUCCCCUAUCCCCCCCCCCCUAGGCCUUCU\
) } def
/len { sequence length } bind def

/coor [
[352.92086792 238.52993774]
[344.04638672 228.63169861]
[335.83474731 218.17684937]
[328.32067871 207.20967102]
[321.53613281 195.77665710]
[315.50982666 183.92625427]
[310.26736450 171.70866394]
[305.83096313 159.17568970]
[302.21945190 146.38044739]
[299.44815063 133.37715149]
[297.52883911 120.22091675]
[296.46966553 106.96752167]
[281.47045898 107.12152100]
[266.47125244 107.27551270]
[251.47204590 107.42951202]
[238.82487488 115.29706573]
[224.94599915 107.70185089]
[209.94679260 107.85585022]
[194.94757080 108.00984955]
[179.94836426 108.16384125]
[164.94915771 108.31784058]
[149.94995117 108.47183990]
[134.95074463 108.62583923]
[119.95153046 108.77983093]
[104.95232391 108.93383026]
[90.20772552 111.69007111]
[76.16574860 116.96481323]
[66.17781830 129.97148132]
[49.95738220 127.55705261]
[44.19063187 112.20529175]
[54.80990601 99.70877075]
[70.89100647 102.92283630]
[84.93298340 97.64809418]
[82.93682861 82.78083801]
[80.94087219 67.91490173]
[66.00485992 66.53087616]
[51.06884384 65.14685059]
[39.07171249 75.43492126]
[23.32030487 74.14314270]
[13.15965080 62.03791046]
[14.61788654 46.30104065]
[26.82986641 36.26893616]
[42.55044174 37.89347076]
[52.45286942 50.21083450]
[67.38888550 51.59486008]
[82.32489777 52.97888565]
[93.60717773 58.75904465]
[101.72677612 66.81130219]
[106.30479431 76.08338165]
[107.25813293 85.47914886]
[104.79832458 93.93462372]
[119.79753113 93.78062439]
[134.79673767 93.62662506]
[149.79595947 93.47262573]
[164.79516602 93.31863403]
[179.79437256 93.16463470]
[194.79357910 93.01063538]
[209.79278564 92.85664368]
[224.79200745 92.70264435]
[238.51200867 84.82407379]
[251.31805420 92.43029785]
[266.31726074 92.27630615]
[281.31646729 92.12230682]
[296.31567383 91.96830750]
[297.51971436 74.62447357]
[300.19451904 57.44628143]
[304.32064819 40.55823135]
[309.86813354 24.08270454]
[316.79672241 8.13908768]
[325.05609131 -7.15709162]
[334.58636475 -21.69500160]
[345.31838989 -35.36931610]
[357.17434692 -48.08096313]
[370.06826782 -59.73786545]
[383.90661621 -70.25558472]
[398.58908081 -79.55794525]
[414.00921631 -87.57757568]
[430.05523682 -94.25642395]
[446.61080933 -99.54613495]
[463.55593872 -103.40843964]
[480.76779175 -105.81540680]
[498.12158203 -106.74966431]
[515.49157715 -106.20449829]
[532.75189209 -104.18392944]
[549.77734375 -100.70266724]
[566.44470215 -95.78601074]
[582.63305664 -89.46965790]
[598.22515869 -81.79945374]
[613.10803223 -72.83103943]
[627.17382812 -62.62947464]
[640.32067871 -51.26875305]
[652.45324707 -38.83126450]
[663.48376465 -25.40719795]
[673.33233643 -11.09388542]
[686.32269287 -18.59388542]
[699.31304932 -26.09388542]
[707.39575195 -39.69467163]
[722.28649902 -39.35760880]
[735.27691650 -46.85760880]
[748.26727295 -54.35760880]
[758.96118164 -67.51345825]
[774.56329346 -60.87936020]
[772.50750732 -44.05051041]
[755.76727295 -41.36722565]
[742.77691650 -33.86722565]
[729.78649902 -26.36722755]
[722.63299561 -13.30289173]
[706.81304932 -13.10350418]
[693.82269287 -5.60350466]
[680.83233643 1.89649546]
[686.66503906 13.83464527]
[691.70867920 26.12718773]
[695.94177246 38.72202301]
[699.34637451 51.56577682]
[701.90802002 64.60401154]
[703.61590576 77.78146362]
[704.46264648 91.04228210]
[704.44476318 104.33026123]
[703.56219482 117.58907318]
[701.81872559 130.76252747]
[699.22174072 143.79475403]
[695.78216553 156.63053894]
[691.51458740 169.21546936]
[686.43707275 181.49617004]
[680.57116699 193.42059326]
[673.94165039 204.93818665]
[666.57659912 216.00012207]
[658.50732422 226.55947876]
[649.76788330 236.57151794]
[640.39538574 245.99375916]
[630.42950439 254.78627014]
[619.91247559 262.91174316]
[608.88885498 270.33575439]
[597.40539551 277.02679443]
[585.51068115 282.95645142]
[573.25524902 288.09963989]
[560.69091797 292.43450928]
[547.87103271 295.94265747]
[534.84979248 298.60919189]
[521.68255615 300.42279053]
[508.42501831 301.37576294]
[495.13339233 301.46401978]
[481.86404419 300.68719482]
[468.67321777 299.04855347]
[455.61679077 296.55499268]
[442.75015259 293.21710205]
[430.12783813 289.04898071]
[417.80331421 284.06829834]
[405.82888794 278.29611206]
[394.25531006 271.75689697]
[383.13159180 264.47836304]
[372.50497437 256.49133301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 64]
[13 63]
[14 62]
[15 61]
[17 59]
[18 58]
[19 57]
[20 56]
[21 55]
[22 54]
[23 53]
[24 52]
[25 51]
[26 33]
[27 32]
[35 46]
[36 45]
[37 44]
[94 110]
[95 109]
[96 108]
[98 106]
[99 105]
[100 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
