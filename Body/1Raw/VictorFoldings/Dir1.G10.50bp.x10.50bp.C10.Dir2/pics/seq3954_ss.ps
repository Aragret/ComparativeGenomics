%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUGCCAUGGGGGGGGGGCAUGACCCUUGGCCAUAAUAUGAUUUAUCUCCACACUAGCAGAGACCAACxxxxxxxxxxCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAUAUAAAACCCCCCCCCCCCCCCUGCCAU\
) } def
/len { sequence length } bind def

/coor [
[83.45670319 368.15527344]
[70.23651123 360.88281250]
[59.34970474 350.43582153]
[51.53857422 337.52655029]
[47.33569336 323.03524780]
[47.02761841 307.94989014]
[50.63536072 293.29907227]
[57.91293335 280.08169556]
[68.36414337 269.19891357]
[81.27640533 261.39279175]
[95.76934052 257.19549561]
[95.45728302 242.19874573]
[95.14522552 227.20198059]
[94.83316803 212.20523071]
[94.52111816 197.20848083]
[94.20906067 182.21173096]
[93.89700317 167.21496582]
[93.58494568 152.21821594]
[93.27288818 137.22146606]
[92.96083069 122.22470856]
[81.05974579 113.59243774]
[76.69144440 99.55428314]
[81.59324646 85.69338989]
[73.34095764 73.16742706]
[65.08866882 60.64146805]
[61.00041580 58.78467560]
[58.04796982 55.98215866]
[56.39110947 52.72076035]
[56.01016235 49.48829269]
[56.72196579 46.71328354]
[49.53945541 33.54470062]
[42.35694504 20.37611961]
[35.17443848 7.20753622]
[27.99192810 -5.96104622]
[12.06667614 -15.14615440]
[13.10185528 -32.63696289]
[5.64694500 -45.65327072]
[-1.80796516 -58.66958237]
[-6.43603230 -61.35297012]
[-9.24885082 -65.17925262]
[-10.11643028 -69.24729919]
[-9.29275608 -72.73857880]
[-15.92125511 -86.19454193]
[-22.54975319 -99.65051270]
[-31.18886948 -111.91287994]
[-41.62868118 -122.68368530]
[-59.42908859 -127.27993011]
[-63.10478210 -144.41145325]
[-73.76641083 -154.96273804]
[-84.42803192 -165.51403809]
[-95.08966064 -176.06532288]
[-109.88296509 -171.93569946]
[-124.75514984 -175.77153015]
[-135.70567322 -186.54100037]
[-139.78890991 -201.34718323]
[-135.90647888 -216.20727539]
[-125.10273743 -227.12399292]
[-110.28383636 -231.16079712]
[-95.43598938 -227.23179626]
[-84.55319214 -216.39389038]
[-80.56285858 -201.56240845]
[-84.53836823 -186.72694397]
[-73.87674713 -176.17565918]
[-63.21511841 -165.62437439]
[-52.55349350 -155.07307434]
[-40.41931534 -154.81019592]
[-31.44793892 -146.05043030]
[-30.85787392 -133.12350464]
[-20.41806030 -122.35269165]
[-23.30322075 -137.07260132]
[-20.77577019 -151.85813904]
[-13.16484547 -164.78384399]
[-1.46158183 -174.16645813]
[12.80996132 -178.78414917]
[27.79127121 -178.03556824]
[41.53140259 -172.01818848]
[52.24104309 -161.51564026]
[58.52553558 -147.89561462]
[59.56647110 -132.93177795]
[55.22830200 -118.57279968]
[46.07595825 -106.68858337]
[33.30131531 -98.82674408]
[18.56794548 -96.01110077]
[3.79450846 -98.60832214]
[-9.09378815 -106.27900696]
[-2.46528912 -92.82304382]
[4.16320944 -79.36708069]
[11.20834446 -66.12448883]
[18.66325378 -53.10818100]
[26.11816406 -40.09187317]
[37.74097443 -36.59650040]
[44.04574966 -25.75819969]
[41.16051102 -13.14355469]
[48.34302139 0.02502744]
[55.52552795 13.19361019]
[62.70803833 26.36219215]
[69.89054871 39.53077316]
[77.61463165 52.38917923]
[85.86692047 64.91513824]
[94.11920929 77.44110107]
[111.79614258 79.89183044]
[122.56061554 94.12580872]
[137.52087402 95.21711731]
[152.48110962 96.30843353]
[157.58950806 82.10255432]
[166.34208679 69.80236053]
[178.08938599 60.32061386]
[191.95967102 54.36091614]
[206.92366028 52.36552048]
[221.87092590 54.48249435]
[235.69230652 60.55474854]
[247.36213684 70.13168335]
[256.01443481 82.50261688]
[261.00717163 96.74954987]
[261.96984863 111.81526947]
[258.83099365 126.58179474]
[251.82356262 139.95335388]
[241.46754456 150.93768311]
[228.53143311 158.71966553]
[213.97515869 162.72184753]
[198.87890625 162.64723206]
[184.36289978 158.50134277]
[171.50434875 150.59185791]
[161.25741577 139.50569153]
[154.38252258 126.06551361]
[151.38980103 111.26867676]
[136.42955017 110.17736816]
[121.46930695 109.08605957]
[116.05041504 116.90773773]
[107.95758820 121.91265106]
[108.26964569 136.90940857]
[108.58170319 151.90615845]
[108.89375305 166.90290833]
[109.20581055 181.89967346]
[109.51786804 196.89642334]
[109.82992554 211.89317322]
[110.14198303 226.88992310]
[110.45404053 241.88668823]
[110.76609039 256.88342285]
[125.42108917 260.47421265]
[138.64689636 267.73645020]
[149.54176331 278.17504883]
[157.36285400 291.07827759]
[161.57693481 305.56634521]
[161.89665222 320.65142822]
[158.30023193 335.30502319]
[151.03286743 348.52804565]
[140.59005737 359.41888428]
[127.68383026 367.23498535]
[113.19413757 371.44348145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 100]
[24 99]
[25 98]
[30 97]
[31 96]
[32 95]
[33 94]
[34 93]
[36 90]
[37 89]
[38 88]
[42 87]
[43 86]
[44 85]
[45 69]
[46 68]
[48 65]
[49 64]
[50 63]
[51 62]
[102 128]
[103 127]
[104 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
