%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAACAAUUAGGGGGGGGGGUCAAUAUAAAACCCCCUGCCAUAACCCAAUACCAAACGCCCCUCUUCGUCxxxxxxxxxxUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCCCCCCCCCCCACAACAAAUA\
) } def
/len { sequence length } bind def

/coor [
[73.46302795 158.74172974]
[60.63259506 151.03929138]
[49.92410278 140.58578491]
[41.91474533 127.94467926]
[37.03623581 113.79732513]
[35.55152893 98.90628052]
[37.54064941 84.07418823]
[42.89638901 70.10051727]
[51.33005905 57.73844910]
[62.38708496 47.65431976]
[75.47148132 40.39166641]
[89.87798309 36.34195709]
[89.26216125 21.35460281]
[88.64633179 6.36724949]
[88.03050995 -8.62010384]
[87.41468048 -23.60745811]
[86.79885864 -38.59481049]
[86.18302917 -53.58216476]
[85.56720734 -68.56951904]
[84.95137787 -83.55686951]
[84.33555603 -98.54421997]
[83.71972656 -113.53157806]
[83.10390472 -128.51893616]
[68.10195923 -128.79199219]
[53.14253616 -129.95330811]
[38.27818298 -131.99879456]
[23.56111336 -134.92126465]
[9.04302025 -138.71044922]
[-5.22510147 -143.35304260]
[-19.19313240 -148.83274841]
[-32.81201172 -155.13029480]
[-46.03389740 -162.22357178]
[-58.81235504 -170.08767700]
[-71.10249329 -178.69496155]
[-82.86113739 -188.01521301]
[-94.04699707 -198.01570129]
[-104.62077332 -208.66127014]
[-114.54532623 -219.91455078]
[-123.78579712 -231.73599243]
[-132.30972290 -244.08409119]
[-140.08717346 -256.91546631]
[-147.09082031 -270.18505859]
[-153.29606628 -283.84622192]
[-158.68112183 -297.85104370]
[-163.22706604 -312.15023804]
[-166.91790771 -326.69363403]
[-169.74072266 -341.43014526]
[-171.68557739 -356.30801392]
[-172.74563599 -371.27493286]
[-172.91719055 -386.27838135]
[-172.19961548 -401.26565552]
[-170.59544373 -416.18408203]
[-168.11030579 -430.98129272]
[-164.75294495 -445.60528564]
[-160.53514099 -460.00469971]
[-155.47171021 -474.12893677]
[-149.58044434 -487.92843628]
[-142.88201904 -501.35467529]
[-135.39999390 -514.36053467]
[-127.16062164 -526.90032959]
[-118.19285583 -538.92993164]
[-108.52819061 -550.40716553]
[-98.20058441 -561.29174805]
[-87.24630737 -571.54534912]
[-75.70383453 -581.13201904]
[-63.61371231 -590.01806641]
[-51.01840591 -598.17230225]
[-37.96215820 -605.56604004]
[-24.49082947 -612.17333984]
[-10.65173912 -617.97094727]
[3.50650191 -622.93859863]
[17.93416214 -627.05871582]
[32.58056259 -630.31689453]
[47.39426041 -632.70172119]
[62.32321930 -634.20477295]
[77.31500244 -634.82080078]
[92.31694794 -634.54760742]
[107.27635956 -633.38616943]
[122.14069366 -631.34051514]
[136.85774231 -628.41790771]
[151.37579346 -624.62860107]
[165.64387512 -619.98590088]
[179.61186218 -614.50610352]
[193.23068237 -608.20843506]
[206.45251465 -601.11499023]
[219.23089600 -593.25079346]
[231.52095032 -584.64343262]
[243.27952576 -575.32305908]
[254.46528625 -565.32244873]
[265.03897095 -554.67681885]
[274.96343994 -543.42346191]
[284.20379639 -531.60192871]
[292.72763062 -519.25372314]
[300.50494385 -506.42230225]
[307.50848389 -493.15264893]
[313.71362305 -479.49142456]
[319.09854126 -465.48657227]
[323.64434814 -451.18731689]
[327.33508301 -436.64389038]
[330.15777588 -421.90734863]
[332.10247803 -407.02947998]
[333.16241455 -392.06253052]
[333.33383179 -377.05908203]
[332.61611938 -362.07183838]
[331.01184082 -347.15341187]
[328.52655029 -332.35623169]
[325.16906738 -317.73226929]
[320.95114136 -303.33288574]
[315.88757324 -289.20867920]
[309.99618530 -275.40924072]
[303.29766846 -261.98306274]
[295.81552124 -248.97727966]
[287.57604980 -236.43757629]
[278.60815430 -224.40802002]
[268.94338989 -212.93084717]
[258.61569214 -202.04638672]
[247.66133118 -191.79286194]
[236.11877441 -182.20629883]
[224.02857971 -173.32035828]
[211.43319702 -165.16624451]
[198.37687683 -157.77262878]
[184.90550232 -151.16545105]
[171.06636047 -145.36793518]
[156.90808105 -140.40045166]
[142.48037720 -136.28042603]
[127.83394623 -133.02235413]
[113.02022552 -130.63768005]
[98.09125519 -129.13475037]
[98.70708466 -114.14739990]
[99.32290649 -99.16004944]
[99.93873596 -84.17269897]
[100.55455780 -69.18534088]
[101.17038727 -54.19799042]
[101.78620911 -39.21063614]
[102.40203094 -24.22328186]
[103.01786041 -9.23592949]
[103.63368225 5.75142384]
[104.24951172 20.73877716]
[104.86533356 35.72613144]
[119.55551910 38.58026886]
[133.19163513 44.74498367]
[145.03869629 53.88799286]
[154.45812988 65.51647949]
[160.94223022 79.00366211]
[164.14147949 93.62255859]
[163.88345337 108.58521271]
[160.18205261 123.08511353]
[153.23678589 136.34069824]
[143.42199707 147.63749695]
[131.26673889 156.36659241]
[117.42617035 162.05747986]
[102.64631653 164.40341187]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
