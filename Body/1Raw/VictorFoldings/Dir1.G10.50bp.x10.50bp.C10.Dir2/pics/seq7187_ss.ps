%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCCACAACACGGGGGGGGGGUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCxxxxxxxxxxACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCUCUACAUAUCCCCCCCCCCUUACCACAACAC\
) } def
/len { sequence length } bind def

/coor [
[225.49319458 236.55899048]
[218.00390625 226.82434082]
[211.14802551 216.63349915]
[204.95324707 206.02758789]
[199.44461060 195.04946899]
[194.64439392 183.74345398]
[190.57199097 172.15522766]
[187.24388123 160.33154297]
[184.67350769 148.32019043]
[182.87129211 136.16967773]
[181.84452820 123.92906189]
[181.59738159 111.64778900]
[166.61662292 110.88805389]
[151.63587952 110.12831116]
[136.65513611 109.36857605]
[121.67438507 108.60884094]
[104.88926697 129.71208191]
[71.87760925 123.89305878]
[57.35645294 127.65284729]
[42.83529663 131.41264343]
[28.31414032 135.17242432]
[20.26716423 148.50973511]
[5.48708773 152.11584473]
[-7.17841148 144.36209106]
[-21.69956779 148.12187195]
[-36.22072601 151.88166809]
[-43.79712677 157.09120178]
[-51.07431030 155.56732178]
[-65.66868591 159.03202820]
[-80.26305389 162.49674988]
[-89.87036133 175.34506226]
[-105.90947723 175.70053101]
[-116.07656860 163.29045105]
[-112.57230377 147.63479614]
[-98.08486938 140.74322510]
[-83.72777557 147.90237427]
[-69.13339996 144.43765259]
[-54.53902435 140.97294617]
[-39.98051453 137.36050415]
[-25.45935631 133.60072327]
[-10.93820000 129.84092712]
[-3.62707591 116.91486359]
[11.04588223 112.89505005]
[24.55435371 120.65126801]
[39.07550812 116.89147949]
[53.59666824 113.13169098]
[68.11782074 109.37190247]
[69.47836304 101.99634552]
[72.19944000 87.24521637]
[73.55997467 79.86965179]
[61.33599472 71.17630768]
[45.34105682 72.41787720]
[34.50347900 60.58882904]
[37.13692093 44.76338959]
[51.22123337 37.08148193]
[65.95213318 43.43601227]
[70.02934265 58.95232391]
[82.25332642 67.64566803]
[93.03674316 66.06865692]
[103.13180542 67.77677155]
[111.61997986 72.22071838]
[117.84371185 78.61944580]
[121.45625305 86.06390381]
[122.43412018 93.62808990]
[137.41487122 94.38783264]
[152.39561462 95.14756775]
[167.37635803 95.90730286]
[182.35711670 96.66703796]
[185.07167053 77.42005157]
[189.70549011 58.54365921]
[196.21160889 40.22873688]
[204.52409363 22.66048050]
[214.55877686 6.01650715]
[226.21401978 -9.53491306]
[239.37188721 -23.83657837]
[253.89918518 -36.74393082]
[269.64892578 -48.12652588]
[286.46170044 -57.86934662]
[304.16748047 -65.87397003]
[322.58706665 -72.05955505]
[341.53417969 -76.36367035]
[360.81716919 -78.74289703]
[380.24096680 -79.17330933]
[399.60913086 -77.65068817]
[418.72579956 -74.19054413]
[437.39764404 -68.82800293]
[455.43588257 -61.61743164]
[472.65811157 -52.63186646]
[488.89019775 -41.96229553]
[503.96807861 -29.71673965]
[517.73931885 -16.01914215]
[529.21911621 -25.67388916]
[540.69891357 -35.32863617]
[552.17871094 -44.98338318]
[550.10656738 -60.27095032]
[556.64910889 -74.24228668]
[569.71875000 -82.43919373]
[585.14489746 -82.24607086]
[598.00518799 -73.72453308]
[604.19592285 -59.59377670]
[601.74169922 -44.36288071]
[591.42559814 -32.89196014]
[576.53948975 -28.84134865]
[561.83349609 -33.50357819]
[550.35363770 -23.84883308]
[538.87384033 -14.19408607]
[527.39404297 -4.53933954]
[534.61401367 5.38737297]
[541.18890381 15.75279045]
[547.09216309 26.51505852]
[552.29992676 37.63071442]
[556.79113770 49.05487442]
[560.54766846 60.74139786]
[563.55426025 72.64308929]
[565.79882812 84.71188354]
[567.27227783 96.89903259]
[567.96856689 109.15531921]
[567.88488770 121.43123627]
[567.02166748 133.67720032]
[565.38220215 145.84375000]
[562.97320557 157.88174438]
[559.80438232 169.74255371]
[555.88848877 181.37826538]
[551.24127197 192.74186707]
[545.88159180 203.78747559]
[539.83099365 214.47044373]
[533.11395264 224.74763489]
[525.75756836 234.57751465]
[517.79150391 243.92036438]
[509.24798584 252.73843384]
[500.16143799 260.99609375]
[490.56860352 268.66000366]
[480.50817871 275.69915771]
[470.02078247 282.08511353]
[459.14880371 287.79208374]
[447.93612671 292.79699707]
[436.42800903 297.07958984]
[424.67095947 300.62255859]
[412.71243286 303.41159058]
[400.60076904 305.43539429]
[388.38485718 306.68576050]
[376.11401367 307.15765381]
[363.83782959 306.84909058]
[351.60589600 305.76135254]
[339.46759033 303.89880371]
[327.47195435 301.26892090]
[315.66748047 297.88235474]
[304.10180664 293.75271606]
[292.82165527 288.89666748]
[281.87261963 283.33386230]
[271.29895020 277.08670044]
[261.14331055 270.18038940]
[251.44676208 262.64285278]
[242.24847412 254.50447083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 68]
[13 67]
[14 66]
[15 65]
[16 64]
[18 47]
[19 46]
[20 45]
[21 44]
[24 41]
[25 40]
[26 39]
[28 38]
[29 37]
[30 36]
[50 58]
[51 57]
[91 107]
[92 106]
[93 105]
[94 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
