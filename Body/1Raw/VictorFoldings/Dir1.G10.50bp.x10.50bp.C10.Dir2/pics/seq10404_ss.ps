%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGUUCUCCUGGGGGGGGGGGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCxxxxxxxxxxGUAUCCGACAUCUGGUUCCUACUUCAGGGUCAUAAAGCCUAAAUAGCCCACCCCCCCCCCCACGUUCCCCU\
) } def
/len { sequence length } bind def

/coor [
[61.44468307 403.63748169]
[47.42274094 398.08447266]
[35.22278214 389.21813965]
[25.61171150 377.59582520]
[19.19368553 363.94812012]
[16.37214851 349.13293457]
[17.32446480 334.08154297]
[21.99077034 319.74011230]
[30.07773590 307.01016235]
[41.07701111 296.69189453]
[54.29716873 289.43392944]
[68.90718079 285.69247437]
[68.90718079 270.69247437]
[68.90718079 255.69248962]
[68.90718079 240.69248962]
[68.90718079 225.69248962]
[68.90718079 210.69248962]
[68.90718079 195.69248962]
[68.90718079 180.69248962]
[68.90718079 165.69248962]
[68.90718079 150.69248962]
[56.15392685 142.79600525]
[42.72647476 149.48207092]
[29.29902649 156.16815186]
[22.85786819 170.86138916]
[7.31781626 174.84715271]
[-5.40012980 165.06791687]
[-5.53985119 149.02548218]
[7.00583458 139.02621460]
[22.61295128 142.74070740]
[36.04040146 136.05462646]
[49.46784973 129.36854553]
[48.54618835 121.92539978]
[33.65985107 123.76847839]
[31.81701851 108.88211060]
[46.70286179 107.03909302]
[45.78120041 99.59593964]
[31.12847710 96.38694000]
[16.47575188 93.17794800]
[1.82302701 89.96894836]
[-11.34745598 98.70473480]
[-26.82073212 95.48708344]
[-35.41678238 82.22498322]
[-32.03572083 66.78659058]
[-18.68347549 58.33123398]
[-3.28169107 61.87532806]
[5.03202343 75.31622314]
[19.68474770 78.52522278]
[34.33747101 81.73421478]
[48.99019623 84.94321442]
[57.97838593 74.05380249]
[68.87531281 66.69149780]
[80.50354004 63.03868103]
[91.73694611 62.92051697]
[91.42897034 47.92367935]
[91.12099457 32.92684174]
[78.02125549 27.53577423]
[68.00421906 17.58097267]
[62.56515121 4.59513807]
[62.49806976 -9.44020557]
[67.77999878 -22.39707184]
[77.57948303 -32.32363892]
[90.38728333 -37.73827744]
[90.38728333 -52.73827744]
[90.38728333 -67.73827362]
[75.81016541 -71.63314819]
[62.73830032 -79.16898346]
[52.06295395 -89.83197021]
[44.51198196 -102.89509583]
[40.60023117 -117.46769714]
[40.59440613 -132.55618286]
[44.49490356 -147.13179016]
[52.03578186 -160.20074463]
[62.70289230 -170.87197876]
[75.76893616 -178.41790771]
[90.34304047 -182.32402039]
[105.43152618 -182.32402039]
[120.00563049 -178.41790771]
[133.07167053 -170.87197876]
[143.73878479 -160.20074463]
[151.27966309 -147.13179016]
[155.18016052 -132.55618286]
[155.17433167 -117.46769714]
[151.26258850 -102.89509583]
[143.71160889 -89.83197021]
[133.03627014 -79.16898346]
[119.96440125 -71.63314819]
[105.38728333 -67.73827362]
[105.38728333 -52.73827744]
[105.38728333 -37.73827744]
[119.89231873 -31.10140800]
[130.09942627 -18.76793289]
[133.93440247 -3.16488814]
[130.58348083 12.60858536]
[120.66539001 25.39680290]
[106.11782837 32.61886215]
[106.42581177 47.61569977]
[106.73378754 62.61253738]
[125.87991333 72.19000244]
[136.80743408 90.59899902]
[151.78767395 89.82934570]
[166.76791382 89.05968475]
[180.15290833 80.62448120]
[193.26042175 87.69853973]
[208.24066162 86.92887878]
[216.71112061 83.34461212]
[223.53575134 86.30040741]
[238.52864075 85.83848572]
[253.52151489 85.37655640]
[267.07687378 77.21794891]
[280.03637695 84.55964661]
[292.02914429 73.90350342]
[307.81262207 76.77769470]
[315.27911377 90.97738647]
[308.70092773 105.60978699]
[293.12432861 109.45017242]
[280.49832153 99.55252838]
[268.01535034 107.67810059]
[253.98344421 100.36944580]
[238.99055481 100.83136749]
[223.99768066 101.29329681]
[209.01031494 101.90911865]
[194.03007507 102.67877960]
[181.71658325 111.05893707]
[167.53758240 104.03992462]
[152.55734253 104.80958557]
[137.57710266 105.57924652]
[136.13174438 119.43763733]
[129.42283630 132.80632019]
[117.68801880 143.66004944]
[101.94329834 150.10861206]
[83.90718079 150.69248962]
[83.90718079 165.69248962]
[83.90718079 180.69248962]
[83.90718079 195.69248962]
[83.90718079 210.69248962]
[83.90718079 225.69248962]
[83.90718079 240.69248962]
[83.90718079 255.69248962]
[83.90718079 270.69247437]
[83.90718079 285.69247437]
[98.51719666 289.43392944]
[111.73735046 296.69189453]
[122.73662567 307.01016235]
[130.82359314 319.74011230]
[135.48989868 334.08154297]
[136.44221497 349.13293457]
[133.62068176 363.94812012]
[127.20265198 377.59582520]
[117.59158325 389.21813965]
[105.39162445 398.08447266]
[91.36968231 403.63748169]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 32]
[23 31]
[24 30]
[37 50]
[38 49]
[39 48]
[40 47]
[54 98]
[55 97]
[56 96]
[63 90]
[64 89]
[65 88]
[100 127]
[101 126]
[102 125]
[104 123]
[105 122]
[107 121]
[108 120]
[109 119]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
