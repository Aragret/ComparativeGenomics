%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUACUUCUGGGGGGGGGGAACCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGxxxxxxxxxxCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCCCCCCCCCCCUACUCCU\
) } def
/len { sequence length } bind def

/coor [
[95.98732758 366.54904175]
[82.14138794 360.53302002]
[70.43273163 351.00360107]
[61.73020554 338.66793823]
[56.67960358 324.44140625]
[55.65571213 309.37973022]
[58.73451233 294.60055542]
[65.68753052 281.20065308]
[75.99881744 270.17431641]
[88.90319824 262.33981323]
[103.44308472 258.27847290]
[103.44308472 243.27848816]
[103.44308472 228.27848816]
[103.44308472 213.27848816]
[103.44308472 198.27848816]
[103.44308472 183.27848816]
[103.44308472 168.27848816]
[103.44308472 153.27848816]
[103.44308472 138.27848816]
[103.44308472 123.27848816]
[96.25170135 136.44223022]
[91.26990509 150.59078979]
[78.51741028 158.48849487]
[63.63120651 156.64434814]
[53.19143677 145.87350464]
[51.81278610 130.93699646]
[60.10466766 118.43720245]
[74.40164948 113.89941406]
[87.78336334 107.12227631]
[72.79067230 106.65423584]
[57.79797363 106.18618774]
[42.80527878 105.71814728]
[27.81258202 105.25010681]
[19.79015350 118.34729004]
[6.28628159 125.66445923]
[-9.06655884 125.23334503]
[-22.13853073 117.16989899]
[-29.41334152 103.64315796]
[-28.93409920 88.29174805]
[-20.82972336 75.24511719]
[-7.28024530 68.01274109]
[8.06959057 68.54010010]
[21.09075737 76.68532562]
[28.28062439 90.25740814]
[43.27331924 90.72544861]
[58.26601791 91.19349670]
[73.25871277 91.66153717]
[88.25141144 92.12957764]
[101.56656647 85.22257996]
[109.81885529 72.69661713]
[118.07114410 60.17065430]
[106.24316406 50.93240738]
[95.19691467 40.77235031]
[85.00404358 29.75638199]
[75.73063660 17.95594215]
[67.43685913 5.44756508]
[60.17648315 -7.68762732]
[53.99660492 -21.36444664]
[48.93729782 -35.49419403]
[45.03137970 -49.98522949]
[42.30417633 -64.74357605]
[40.77338028 -79.67350769]
[40.44891739 -94.67820740]
[41.33289337 -109.66036224]
[43.41957092 -124.52280426]
[46.69542313 -139.16914368]
[51.13919830 -153.50437927]
[56.72208023 -167.43556213]
[63.40785980 -180.87232971]
[71.15317535 -193.72753906]
[79.90779877 -205.91781616]
[89.61495209 -217.36410522]
[100.21167755 -227.99217224]
[111.62924957 -237.73307800]
[123.79361725 -246.52366638]
[136.62590027 -254.30691528]
[150.04286194 -261.03234863]
[163.95748901 -266.65634155]
[178.27954102 -271.14242554]
[192.91613770 -274.46151733]
[207.77235413 -276.59210205]
[222.75183105 -277.52032471]
[237.75743103 -277.24017334]
[252.69181824 -275.75347900]
[267.45816040 -273.06985474]
[281.96066284 -269.20675659]
[296.10528564 -264.18920898]
[309.80029297 -258.04974365]
[322.95687866 -250.82818604]
[335.48968506 -242.57138062]
[347.31747437 -233.33287048]
[358.36349487 -223.17257690]
[368.55612183 -212.15638733]
[377.82925415 -200.35574341]
[386.12277222 -187.84718323]
[393.38284302 -174.71182251]
[399.56243896 -161.03486633]
[404.62142944 -146.90501404]
[408.52703857 -132.41389465]
[411.25390625 -117.65548706]
[412.78436279 -102.72551727]
[413.10848999 -87.72080994]
[412.22418213 -72.73867798]
[410.13717651 -57.87628174]
[406.86102295 -43.23001862]
[402.41693115 -28.89487457]
[396.83374023 -14.96381855]
[390.14764404 -1.52720070]
[382.40206909 11.32783699]
[373.64715576 23.51792145]
[363.93975830 34.96399689]
[353.34280396 45.59182739]
[341.92501831 55.33248901]
[329.76046753 64.12281036]
[316.92800903 71.90577698]
[303.51089478 78.63091278]
[289.59613037 84.25460815]
[275.27398682 88.74038696]
[260.63732910 92.05915070]
[245.78105164 94.18938446]
[230.80155945 95.11727142]
[215.79597473 94.83679199]
[200.86161804 93.34976959]
[186.09533691 90.66584015]
[171.59291077 86.80241394]
[157.44839478 81.78454590]
[143.75352478 75.64478302]
[130.59710693 68.42294312]
[122.34481812 80.94890594]
[114.09252930 93.47486877]
[118.44308472 123.27848816]
[118.44308472 138.27848816]
[118.44308472 153.27848816]
[118.44308472 168.27848816]
[118.44308472 183.27848816]
[118.44308472 198.27848816]
[118.44308472 213.27848816]
[118.44308472 228.27848816]
[118.44308472 243.27848816]
[118.44308472 258.27847290]
[132.98297119 262.33981323]
[145.88735962 270.17431641]
[156.19863892 281.20065308]
[163.15165710 294.60055542]
[166.23045349 309.37973022]
[165.20657349 324.44140625]
[160.15596008 338.66793823]
[151.45344543 351.00360107]
[139.74478149 360.53302002]
[125.89884186 366.54904175]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[49 130]
[50 129]
[51 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
