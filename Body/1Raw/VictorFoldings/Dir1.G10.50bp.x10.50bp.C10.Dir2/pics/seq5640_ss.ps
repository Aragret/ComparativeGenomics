%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUCCUUAAGGGGGGGGGGCCUCUACUUCUACCUACGCCUAAUCUACUCCACCUCAAUCACACUACUCCxxxxxxxxxxAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGACCCCCCCCCCACCCUCCAUAA\
) } def
/len { sequence length } bind def

/coor [
[29.57369232 530.22583008]
[15.55174732 524.67285156]
[3.35179019 515.80651855]
[-6.25928116 504.18420410]
[-12.67730618 490.53649902]
[-15.49884319 475.72131348]
[-14.54652786 460.66992188]
[-9.88022232 446.32852173]
[-1.79325557 433.59854126]
[9.20601845 423.28027344]
[22.42617798 416.02230835]
[37.03619003 412.28085327]
[37.03619003 397.28085327]
[37.03619003 382.28085327]
[37.03619003 367.28085327]
[37.03619003 352.28085327]
[37.03619003 337.28085327]
[37.03619003 322.28085327]
[37.03619003 307.28085327]
[37.03619003 292.28085327]
[37.03619003 277.28085327]
[34.30797958 273.29263306]
[34.09845352 267.53555298]
[37.35681534 261.66821289]
[37.97264099 246.68084717]
[38.58846664 231.69349670]
[30.22187805 244.14340210]
[18.47085762 253.46614075]
[4.44436455 258.78192139]
[-10.53390312 259.58908081]
[-25.05042458 255.81143188]
[-37.73526001 247.80549622]
[-47.39131546 236.32679749]
[-53.10734558 222.45860291]
[-54.34391403 207.50965881]
[-50.98432922 192.89071655]
[-43.34563446 179.98141479]
[-32.14870834 169.99998474]
[-18.45021820 163.88841248]
[-3.54290795 162.22343445]
[11.16639709 165.16220093]
[24.28956223 172.42736816]
[34.58813477 183.33329773]
[41.09022141 196.85079956]
[43.18224716 211.70201111]
[49.17054367 197.94918823]
[55.15884018 184.19636536]
[61.14714050 170.44352722]
[67.13543701 156.69070435]
[73.12373352 142.93786621]
[56.90851974 126.62929535]
[49.57532501 104.83187866]
[52.63566589 82.03852081]
[65.45874023 62.94738388]
[85.40146637 51.49353027]
[83.25288391 36.64820862]
[81.10430908 21.80288696]
[78.95572662 6.95756340]
[76.80714417 -7.88775921]
[74.50627136 -22.71024132]
[72.05334473 -37.50831985]
[69.60041809 -52.30640030]
[54.60428619 -54.12100983]
[40.72738647 -60.08827972]
[29.09465408 -69.72447205]
[20.64909935 -82.24842072]
[16.07536888 -96.64486694]
[15.74423313 -111.74675751]
[19.68253708 -126.32984161]
[27.57101822 -139.21194458]
[38.77019501 -149.34877014]
[52.37219620 -155.91856384]
[67.27437592 -158.38874817]
[82.26866913 -156.55906677]
[96.13957214 -150.57786560]
[107.76261902 -140.92999268]
[116.19558716 -128.39756775]
[120.75485229 -113.99652863]
[121.07081604 -98.89431000]
[117.11786652 -84.31519318]
[109.21644592 -71.44101715]
[98.00708771 -61.31545258]
[84.39849854 -54.75932693]
[86.85142517 -39.96125031]
[89.30435181 -25.16316986]
[93.52691650 -19.04090500]
[91.65247345 -10.03633881]
[93.80104828 4.80898428]
[95.94963074 19.65430641]
[98.09820557 34.49962997]
[100.24678802 49.34495163]
[108.61679077 50.08261108]
[116.74971008 52.19370270]
[124.42177582 55.62014389]
[131.42189026 60.26765442]
[137.55746460 66.00836945]
[142.65968323 72.68432617]
[156.35031128 66.55515289]
[170.04093933 60.42597961]
[183.73156738 54.29680634]
[197.42219543 48.16763306]
[211.11280823 42.03845978]
[220.28109741 28.44159698]
[236.61940002 29.85289955]
[243.32028198 44.82053757]
[233.49044800 57.94709015]
[217.24198914 55.72908401]
[203.55136108 61.85825729]
[189.86073303 67.98743439]
[176.17010498 74.11660767]
[162.47949219 80.24578094]
[148.78886414 86.37495422]
[150.48977661 95.90405273]
[150.34707642 105.58271027]
[148.36595154 115.05751801]
[144.61875916 123.98250580]
[139.24232483 132.03176880]
[132.43296814 138.91140747]
[124.43931580 144.37019348]
[115.55326843 148.20881653]
[106.09930420 150.28710938]
[96.42261505 150.52917480]
[86.87656403 148.92616272]
[80.88826752 162.67900085]
[74.89997101 176.43182373]
[68.91167450 190.18466187]
[62.92337418 203.93748474]
[56.93507767 217.69030762]
[53.57582092 232.30932617]
[52.95999527 247.29667664]
[52.34416962 262.28402710]
[52.03619003 277.28085327]
[52.03619003 292.28085327]
[52.03619003 307.28085327]
[52.03619003 322.28085327]
[52.03619003 337.28085327]
[52.03619003 352.28085327]
[52.03619003 367.28085327]
[52.03619003 382.28085327]
[52.03619003 397.28085327]
[52.03619003 412.28085327]
[66.64620209 416.02230835]
[79.86636353 423.28027344]
[90.86563873 433.59854126]
[98.95260620 446.32852173]
[103.61891174 460.66992188]
[104.57122803 475.72131348]
[101.74968719 490.53649902]
[95.33166504 504.18420410]
[85.72058868 515.80651855]
[73.52062988 524.67285156]
[59.49868774 530.22583008]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 131]
[25 130]
[26 129]
[45 128]
[46 127]
[47 126]
[48 125]
[49 124]
[50 123]
[55 91]
[56 90]
[57 89]
[58 88]
[59 87]
[60 85]
[61 84]
[62 83]
[97 112]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
