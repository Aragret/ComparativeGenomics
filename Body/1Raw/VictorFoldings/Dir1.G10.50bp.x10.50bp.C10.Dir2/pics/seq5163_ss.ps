%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCACUCUCUCGGGGGGGGGGAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCxxxxxxxxxxUCAUCGCACUAAUUUACACUCACAACACCCUAGGCUCACUAAACAUUCUACCCCCCCCCCCUACUCACUCUCAC\
) } def
/len { sequence length } bind def

/coor [
[83.81600189 631.80737305]
[69.45375061 627.30065918]
[56.29286194 619.99475098]
[44.87226105 610.18890381]
[35.65962219 598.28460693]
[29.03219414 584.76934814]
[25.26136589 570.19659424]
[24.50154877 555.16302490]
[26.78385925 540.28436279]
[32.01483536 526.16973877]
[39.98027420 513.39727783]
[50.35399628 502.48986816]
[62.71120453 493.89428711]
[76.54587555 487.96243286]
[91.29148865 484.93725586]
[91.29148865 469.93725586]
[91.29148865 454.93725586]
[91.29148865 439.93725586]
[91.29148865 424.93725586]
[91.29148865 409.93725586]
[91.29148865 394.93725586]
[91.29148865 379.93725586]
[91.29148865 364.93725586]
[91.29148865 349.93725586]
[76.94467926 347.22674561]
[63.34106445 341.91256714]
[50.94890213 334.17608643]
[40.19504929 324.28192139]
[31.45025635 312.56912231]
[25.01639748 299.43951416]
[21.11604118 285.34378052]
[19.88475227 270.76617432]
[21.36638641 256.20770264]
[25.51151848 242.16909790]
[32.17910004 229.13340759]
[41.14125443 217.54951477]
[52.09106445 207.81661987]
[64.65308380 200.27046204]
[78.39621735 195.17181396]
[92.84848785 192.69738770]
[93.14484406 177.70031738]
[93.44120026 162.70324707]
[93.44120026 147.70324707]
[93.14484406 132.70616150]
[92.84848785 117.70909882]
[82.47543335 107.59247589]
[82.18915558 93.10578156]
[92.15444183 82.58725739]
[91.85808563 67.59018707]
[91.56172943 52.59311676]
[91.26537323 37.59604263]
[81.37580872 22.09211731]
[90.37802887 7.05444813]
[89.78543091 -7.93384123]
[89.19283295 -22.92213058]
[88.60023499 -37.91041946]
[85.75048828 -42.41059494]
[85.02218628 -47.08417892]
[86.11824036 -51.08132172]
[88.44326782 -53.79864502]
[88.73962402 -68.79571533]
[89.03598022 -83.79278564]
[89.33233643 -98.78986359]
[74.58804321 -101.76402283]
[60.61183548 -107.32328033]
[47.85298538 -115.28893280]
[36.72164154 -125.40489960]
[27.57562447 -137.34602356]
[20.70894814 -150.72840881]
[16.34234238 -165.12190247]
[14.61617756 -180.06379700]
[15.58594322 -195.07376099]
[19.22046471 -209.66931152]
[25.40290642 -223.38125610]
[33.93452835 -235.76879883]
[44.54107666 -246.43373108]
[56.88159561 -255.03323364]
[70.55937958 -261.29086304]
[85.13475800 -265.00546265]
[100.13918304 -266.05761719]
[115.09032440 -264.41351318]
[129.50756836 -260.12597656]
[142.92745972 -253.33288574]
[154.91860962 -244.25256348]
[165.09553528 -233.17692566]
[173.13111877 -220.46199036]
[178.76701355 -206.51651001]
[181.82208252 -191.78877258]
[182.19808960 -176.75219727]
[179.88298035 -161.89016724]
[174.95114136 -147.68043518]
[167.56112671 -134.57975769]
[157.95050049 -123.00930023]
[146.42819214 -113.34098053]
[133.36460876 -105.88561249]
[119.17968750 -100.88285065]
[104.32940674 -98.49350739]
[104.03305054 -83.49642944]
[103.73669434 -68.49935913]
[103.44033813 -53.50228882]
[103.58852386 -38.50302124]
[104.18112183 -23.51473045]
[104.77371979 -8.52644062]
[105.36631775 6.46184921]
[114.05268097 14.92830086]
[114.63889313 27.44597054]
[106.26244354 37.29968643]
[106.55879974 52.29676056]
[106.85515594 67.29383087]
[107.15151215 82.29090118]
[117.52456665 92.40752411]
[117.81084442 106.89421844]
[107.84555817 117.41274261]
[108.14191437 132.40980530]
[108.43827057 147.40689087]
[111.56441498 153.33016968]
[111.23849487 159.07109070]
[108.43827057 162.99960327]
[108.14191437 177.99667358]
[107.84555817 192.99374390]
[122.92317963 196.27020264]
[137.07327271 202.41033936]
[149.75785828 211.17877197]
[160.49499512 222.24017334]
[168.87722778 235.17214966]
[174.58692932 249.48139954]
[177.40837097 264.62246704]
[177.23594666 280.01855469]
[174.07798767 295.08352661]
[168.05648804 309.24423218]
[159.40237427 321.96224976]
[148.44660950 332.75436401]
[135.60754395 341.21099854]
[121.37499237 347.01168823]
[106.29148865 349.93725586]
[106.29148865 364.93725586]
[106.29148865 379.93725586]
[106.29148865 394.93725586]
[106.29148865 409.93725586]
[106.29148865 424.93725586]
[106.29148865 439.93725586]
[106.29148865 454.93725586]
[106.29148865 469.93725586]
[106.29148865 484.93725586]
[121.03710938 487.96243286]
[134.87178040 493.89428711]
[147.22898865 502.48986816]
[157.60270691 513.39727783]
[165.56814575 526.16973877]
[170.79911804 540.28436279]
[173.08143616 555.16302490]
[172.32160950 570.19659424]
[168.55078125 584.76934814]
[161.92335510 598.28460693]
[152.71072388 610.18890381]
[141.29011536 619.99475098]
[128.12922668 627.30065918]
[113.76697540 631.80737305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[40 120]
[41 119]
[42 118]
[43 115]
[44 114]
[45 113]
[48 110]
[49 109]
[50 108]
[51 107]
[53 104]
[54 103]
[55 102]
[56 101]
[60 100]
[61 99]
[62 98]
[63 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
