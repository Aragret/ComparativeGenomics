%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUACCCACGGGGGGGGGGAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAUAACCAUUCUxxxxxxxxxxACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCUAAUAAAAUUCCCCCCCCCCAAUUAACCAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 365.80966187]
[71.19830322 359.79364014]
[59.48964310 350.26422119]
[50.78712082 337.92855835]
[45.73651886 323.70202637]
[44.71262741 308.64035034]
[47.79142761 293.86120605]
[54.74444962 280.46127319]
[65.05573273 269.43493652]
[77.96011353 261.60043335]
[92.50000000 257.53912354]
[92.50000000 242.53912354]
[92.50000000 227.53912354]
[92.50000000 212.53912354]
[92.50000000 197.53912354]
[92.50000000 182.53912354]
[92.50000000 167.53912354]
[92.50000000 152.53912354]
[92.50000000 137.53912354]
[92.50000000 122.53911591]
[92.50000000 107.53911591]
[91.40869141 92.57886505]
[89.23184967 77.73766327]
[87.05501556 62.89645767]
[84.87818146 48.05525208]
[69.92005920 49.24708176]
[54.91588211 49.44771194]
[39.93124390 48.65626526]
[25.03167915 46.87620163]
[10.28233433 44.11530304]
[-4.25229168 40.38564682]
[-18.50864410 35.70353699]
[-32.42438126 30.08945084]
[-45.93865204 23.56793785]
[-58.99236679 16.16751289]
[-71.52843475 7.92053652]
[-83.49205017 -1.13692737]
[-94.83089447 -10.96527386]
[-105.49537659 -21.52152443]
[-115.43887329 -32.75952148]
[-124.61790466 -44.63011932]
[-132.99232483 -57.08141708]
[-140.52552795 -70.05895996]
[-147.18455505 -83.50600433]
[-152.94029236 -97.36375427]
[-157.76757812 -111.57160187]
[-161.64530945 -126.06742859]
[-164.55651855 -140.78784180]
[-166.48846436 -155.66847229]
[-167.43272400 -170.64425659]
[-167.38516235 -185.64970398]
[-166.34597778 -200.61920166]
[-164.31971741 -215.48728943]
[-161.31524658 -230.18894958]
[-157.34568787 -244.65989685]
[-152.42842102 -258.83685303]
[-146.58493042 -272.65783691]
[-139.84078979 -286.06237793]
[-132.22546387 -298.99191284]
[-123.77227020 -311.38986206]
[-114.51816559 -323.20202637]
[-104.50361633 -334.37677002]
[-93.77241516 -344.86517334]
[-82.37149048 -354.62142944]
[-70.35069275 -363.60287476]
[-57.76258850 -371.77020264]
[-44.66222000 -379.08770752]
[-31.10687256 -385.52343750]
[-17.15582085 -391.04916382]
[-2.87007117 -395.64080811]
[11.68790913 -399.27822876]
[26.45446014 -401.94555664]
[41.36501312 -403.63113403]
[56.35436630 -404.32754517]
[71.35697174 -404.03179932]
[86.30723572 -402.74514771]
[101.13977051 -400.47326660]
[115.78972626 -397.22604370]
[130.19303894 -393.01766968]
[144.28672791 -387.86657715]
[158.00915527 -381.79528809]
[171.30033875 -374.83035278]
[184.10212708 -367.00222778]
[196.35856628 -358.34512329]
[208.01605225 -348.89691162]
[219.02362061 -338.69891357]
[229.33311462 -327.79568481]
[238.89945984 -316.23495483]
[247.68084717 -304.06726074]
[255.63883972 -291.34576416]
[262.73867798 -278.12615967]
[268.94931030 -264.46621704]
[274.24353027 -250.42568970]
[278.59823608 -236.06594849]
[281.99438477 -221.44979858]
[284.41711426 -206.64114380]
[285.85583496 -191.70475769]
[286.30422974 -176.70593262]
[285.76037598 -161.71026611]
[284.22662354 -146.78334045]
[281.70971680 -131.99040222]
[278.22061157 -117.39616394]
[273.77459717 -103.06442261]
[268.39111328 -89.05786133]
[262.09368896 -75.43772888]
[254.90985107 -62.26357269]
[246.87104797 -49.59300613]
[238.01240540 -37.48143387]
[228.37268066 -25.98181534]
[217.99398804 -15.14443970]
[206.92175293 -5.01669407]
[195.20437622 4.35713530]
[182.89308167 12.93605804]
[170.04173279 20.68255997]
[156.70649719 27.56276894]
[142.94569397 33.54659653]
[128.81951904 38.60787964]
[114.38970947 42.72448730]
[99.71938324 45.87841415]
[101.89621735 60.71961975]
[104.07305908 75.56082153]
[106.24989319 90.40203094]
[115.51944733 78.60900879]
[130.16384888 75.36222839]
[143.54904175 82.13251495]
[149.61138916 95.85285950]
[145.60459900 110.30781555]
[133.34379578 118.94914246]
[118.38322449 117.86223602]
[107.50000000 107.53911591]
[107.50000000 122.53911591]
[107.50000000 137.53912354]
[107.50000000 152.53912354]
[107.50000000 167.53912354]
[107.50000000 182.53912354]
[107.50000000 197.53912354]
[107.50000000 212.53912354]
[107.50000000 227.53912354]
[107.50000000 242.53912354]
[107.50000000 257.53912354]
[122.03988647 261.60043335]
[134.94427490 269.43493652]
[145.25555420 280.46127319]
[152.20857239 293.86120605]
[155.28736877 308.64035034]
[154.26348877 323.70202637]
[149.21287537 337.92855835]
[140.51036072 350.26422119]
[128.80169678 359.79364014]
[114.95575714 365.80966187]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 122]
[23 121]
[24 120]
[25 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
