%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGCGACCUGGGGGGGGGGGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCAxxxxxxxxxxACUCAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCCCCCCCCCCCAGGCCACCU\
) } def
/len { sequence length } bind def

/coor [
[85.75579071 399.66250610]
[71.26610565 395.45401001]
[58.35987473 387.63790894]
[47.91707230 376.74707031]
[40.64970779 363.52404785]
[37.05328369 348.87045288]
[37.37300491 333.78536987]
[41.58707428 319.29730225]
[49.40817261 306.39407349]
[60.30303955 295.95547485]
[73.52884674 288.69323730]
[88.18383789 285.10247803]
[88.49589539 270.10571289]
[88.80795288 255.10896301]
[89.12001038 240.11219788]
[89.43206787 225.11544800]
[89.74412537 210.11869812]
[90.05617523 195.12194824]
[90.36823273 180.12518311]
[90.68029022 165.12843323]
[90.99234772 150.13168335]
[91.30440521 135.13493347]
[91.61646271 120.13817596]
[86.58587646 115.20085907]
[83.73570251 109.29502869]
[83.11875916 103.25780487]
[84.49617767 97.84807587]
[87.39559174 93.65314484]
[91.19640350 91.02504730]
[82.94411469 78.49908447]
[74.69182587 65.97312164]
[68.87133026 62.62210464]
[66.08355713 57.57635117]
[66.36946869 52.74998856]
[58.64538574 39.89158630]
[50.92130280 27.03318596]
[43.19721603 14.17478371]
[35.47313309 1.31638098]
[24.70232391 -9.12343121]
[11.60916901 -16.44253731]
[-1.48398519 -23.76164246]
[-14.57713985 -31.08074760]
[-27.67029381 -38.39985275]
[-40.76344681 -45.71895981]
[-54.00603485 -52.76409531]
[-67.39231873 -59.53220749]
[-80.77860260 -66.30032349]
[-97.64189911 -68.05119324]
[-100.62767792 -84.74015808]
[-85.41748047 -92.22921753]
[-74.01049042 -79.68660736]
[-60.62420273 -72.91849518]
[-47.23791885 -66.15038300]
[-42.44514847 -66.78667450]
[-37.20994568 -64.37338257]
[-33.44434357 -58.81211472]
[-20.35118866 -51.49300766]
[-7.25803375 -44.17390442]
[5.83512068 -36.85479736]
[18.92827415 -29.53569221]
[32.02143097 -22.21658516]
[24.65333366 -35.28223419]
[20.43381119 -49.67652512]
[19.58187675 -64.65231323]
[22.14175224 -79.43226624]
[27.98056412 -93.24922180]
[36.79524612 -105.38600159]
[48.12826157 -115.21263123]
[61.39136887 -122.21906281]
[75.89612579 -126.04161072]
[90.88966370 -126.48187256]
[105.59372711 -123.51699066]
[119.24509430 -117.30085754]
[131.13517761 -108.15612793]
[140.64680481 -96.55746460]
[147.28627014 -83.10691071]
[150.70896912 -68.50262451]
[150.73721313 -53.50265503]
[147.36955261 -38.88557816]
[140.78079224 -25.41011238]
[131.31292725 -13.77570724]
[119.45737457 -4.58625746]
[105.82952881 1.68125188]
[91.13673401 4.70150137]
[76.14164734 4.31772280]
[61.62258911 0.54983598]
[48.33153534 -6.40770388]
[56.05561829 6.45069838]
[63.77970505 19.30910110]
[71.50379181 32.16750336]
[79.22787476 45.02590561]
[87.21778870 57.72083664]
[95.47007751 70.24679565]
[103.72236633 82.77275848]
[117.62492371 88.40471649]
[132.26843262 85.15389252]
[146.91192627 81.90306091]
[161.55543518 78.65223694]
[168.23323059 61.85283279]
[183.49871826 52.46414185]
[201.19252014 54.05473328]
[214.30580139 65.80673981]
[228.80139160 61.94958115]
[243.29699707 58.09242249]
[252.55419922 44.98961258]
[268.57788086 44.20160294]
[279.07604980 56.33288574]
[275.99539185 72.07737732]
[261.69915771 79.35726166]
[247.15414429 72.58802032]
[232.65855408 76.44517517]
[218.16296387 80.30233765]
[215.49516296 92.21969604]
[207.94895935 101.91349792]
[196.92106628 107.48886871]
[184.49595642 107.82266235]
[173.05201721 102.78909302]
[164.80625916 93.29573822]
[150.16275024 96.54656219]
[135.51925659 99.79739380]
[120.87574768 103.04821777]
[135.85827637 102.32426453]
[148.14897156 110.92302704]
[152.60438538 125.24605560]
[147.36001587 139.29940796]
[134.61051941 147.20196533]
[119.69137573 145.64665222]
[108.84599304 135.28433228]
[106.61321259 120.45022583]
[106.30115509 135.44697571]
[105.98909760 150.44374084]
[105.67704773 165.44049072]
[105.36499023 180.43724060]
[105.05293274 195.43399048]
[104.74087524 210.43075562]
[104.42881775 225.42750549]
[104.11676025 240.42425537]
[103.80471039 255.42100525]
[103.49265289 270.41775513]
[103.18059540 285.41452026]
[117.67353058 289.61181641]
[130.58580017 297.41793823]
[141.03700256 308.30072021]
[148.31457520 321.51809692]
[151.92231750 336.16894531]
[151.61424255 351.25427246]
[147.41136169 365.74557495]
[139.60023499 378.65484619]
[128.71342468 389.10183716]
[115.49323273 396.37429810]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[29 94]
[30 93]
[31 92]
[34 91]
[35 90]
[36 89]
[37 88]
[38 87]
[39 61]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[45 53]
[46 52]
[47 51]
[95 121]
[96 120]
[97 119]
[98 118]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
