%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUAAAACUCACGGGGGGGGGGCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAAGUGGCUxxxxxxxxxxUACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCUCCCCCCCCCCACCUAAAACUCAC\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 386.67788696]
[70.75619507 381.86843872]
[57.85220718 374.10305786]
[46.91955185 363.74490356]
[38.46956635 351.27850342]
[32.89747238 337.28686523]
[30.46388245 322.42443848]
[31.28262329 307.38635254]
[35.31539917 292.87597656]
[42.37359238 279.57199097]
[52.12707901 268.09664917]
[64.11966705 258.98666382]
[77.79044342 252.66812134]
[92.50000000 249.43656921]
[92.50000000 234.43656921]
[92.50000000 219.43656921]
[92.50000000 204.43656921]
[92.50000000 189.43656921]
[92.50000000 174.43656921]
[92.50000000 159.43656921]
[92.50000000 144.43656921]
[92.50000000 129.43656921]
[92.50000000 114.43656921]
[84.75846100 105.68857574]
[84.87533569 94.00759888]
[92.79035950 85.41625977]
[93.09049225 70.41925812]
[93.39062500 55.42226410]
[92.94046021 40.42901993]
[91.74113464 25.47704315]
[90.54180908 10.52506638]
[89.34248352 -4.42690992]
[74.33711243 -4.27322865]
[59.35757446 -5.16664791]
[44.47685242 -7.10281515]
[29.76743507 -10.07229710]
[15.30099297 -14.06062794]
[1.14800406 -19.04837608]
[-12.62257957 -25.01124001]
[-25.94366837 -31.92017174]
[-38.75036240 -39.74150848]
[-50.98026657 -48.43714905]
[-62.57380295 -57.96472168]
[-73.47447968 -68.27781677]
[-83.62919617 -79.32618713]
[-92.98847961 -91.05599976]
[-101.50672913 -103.41011810]
[-109.14244080 -116.32834625]
[-115.85842133 -129.74774170]
[-121.62194824 -143.60293579]
[-126.40494537 -157.82643127]
[-130.18409729 -172.34892273]
[-132.94100952 -187.09965515]
[-134.66223145 -202.00677490]
[-135.33940125 -216.99765015]
[-134.96919250 -231.99923706]
[-133.55343628 -246.93846130]
[-131.09901428 -261.74252319]
[-127.61787415 -276.33932495]
[-123.12699890 -290.65771484]
[-117.64825439 -304.62799072]
[-111.20833588 -318.18203735]
[-103.83862305 -331.25384521]
[-95.57501221 -343.77969360]
[-86.45776367 -355.69860840]
[-76.53130341 -366.95251465]
[-65.84397888 -377.48654175]
[-54.44787979 -387.24942017]
[-42.39850998 -396.19354248]
[-29.75457764 -404.27536011]
[-16.57768440 -411.45547485]
[-2.93202877 -417.69894409]
[11.11591148 -422.97531128]
[25.49769402 -427.25891113]
[40.14324951 -430.52880859]
[54.98123169 -432.76913452]
[69.93934631 -433.96896362]
[84.94471741 -434.12243652]
[99.92424011 -433.22879028]
[114.80493927 -431.29241943]
[129.51431274 -428.32272339]
[143.98069763 -424.33419800]
[158.13362122 -419.34622192]
[171.90411377 -413.38317871]
[185.22509766 -406.47406006]
[198.03167725 -398.65252686]
[210.26145935 -389.95672607]
[221.85485840 -380.42898560]
[232.75538635 -370.11572266]
[242.90995789 -359.06719971]
[252.26907349 -347.33724976]
[260.78713989 -334.98303223]
[268.42266846 -322.06469727]
[275.13845825 -308.64520264]
[280.90179443 -294.78991699]
[285.68457031 -280.56634521]
[289.46353149 -266.04379272]
[292.22021484 -251.29302979]
[293.94122314 -236.38589478]
[294.61819458 -221.39500427]
[294.24777222 -206.39343262]
[292.83178711 -191.45422363]
[290.37713623 -176.65019226]
[286.89581299 -162.05345154]
[282.40472412 -147.73510742]
[276.92578125 -133.76492310]
[270.48565674 -120.21096802]
[263.11575317 -107.13927460]
[254.85197449 -94.61351776]
[245.73455811 -82.69473267]
[235.80793762 -71.44098663]
[225.12046814 -60.90710068]
[213.72422791 -51.14439774]
[201.67472839 -42.20044327]
[189.03067017 -34.11880875]
[175.85368347 -26.93887138]
[162.20793152 -20.69560814]
[148.15992737 -15.41943550]
[133.77807617 -11.13606071]
[119.13246918 -7.86635113]
[104.29445648 -5.62623739]
[105.49378967 9.32573986]
[106.69311523 24.27771759]
[107.89244080 39.22969437]
[119.65898132 29.92655182]
[134.31391907 33.12543869]
[141.13351440 46.48557663]
[135.12753296 60.23069000]
[120.69084167 64.30281067]
[108.38761902 55.72239685]
[108.08748627 70.71939087]
[107.78735352 85.71639252]
[116.26769257 100.16276550]
[107.50000000 114.43656921]
[107.50000000 129.43656921]
[107.50000000 144.43656921]
[107.50000000 159.43656921]
[107.50000000 174.43656921]
[107.50000000 189.43656921]
[107.50000000 204.43656921]
[107.50000000 219.43656921]
[107.50000000 234.43656921]
[107.50000000 249.43656921]
[122.20955658 252.66812134]
[135.88034058 258.98666382]
[147.87292480 268.09664917]
[157.62640381 279.57199097]
[164.68460083 292.87597656]
[168.71737671 307.38635254]
[169.53611755 322.42443848]
[167.10252380 337.28686523]
[161.53042603 351.27850342]
[153.08044434 363.74490356]
[142.14779663 374.10305786]
[129.24380493 381.86843872]
[114.97203827 386.67788696]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[26 132]
[27 131]
[28 130]
[29 124]
[30 123]
[31 122]
[32 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
