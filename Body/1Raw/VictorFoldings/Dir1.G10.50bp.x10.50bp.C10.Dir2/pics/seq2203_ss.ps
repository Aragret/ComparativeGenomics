%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCUGGUUGGGGGGGGGGGUCCAAGAUAGAAUCUUAGUUCAACUUUAAAUUUGCCCACAGAACCCUCUxxxxxxxxxxGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCCCCCCCCCCCAAAGCUGGUU\
) } def
/len { sequence length } bind def

/coor [
[82.33110046 381.44976807]
[76.19499969 367.62213135]
[74.63421631 352.57489014]
[77.80165100 337.78225708]
[85.38700104 324.69342041]
[96.64711761 314.59069824]
[110.47886658 308.46386719]
[108.92127991 293.54495239]
[99.70307922 285.64987183]
[98.31713867 273.18801880]
[106.05503082 262.81597900]
[104.80815887 247.86790466]
[103.56127930 232.91981506]
[102.31440735 217.97172546]
[101.06753540 203.02365112]
[99.82065582 188.07556152]
[98.57378387 173.12747192]
[97.32691193 158.17938232]
[96.08003235 143.23129272]
[94.83316040 128.28320312]
[93.58628845 113.33512115]
[87.41049957 109.07957458]
[73.86390686 115.52083588]
[75.05892944 100.56848907]
[68.88314056 96.31294250]
[54.47092438 100.47083282]
[40.05870819 104.62871552]
[25.64649200 108.78660583]
[11.23427486 112.94448853]
[-2.30819130 123.14439392]
[-15.85840225 112.95478058]
[-9.81807899 97.11335754]
[7.07638788 98.53227234]
[21.48860359 94.37438965]
[35.90082169 90.21649933]
[50.31303787 86.05861664]
[64.72525024 81.90072632]
[82.18581390 84.02485657]
[95.48198700 93.14620209]
[99.48973083 78.69151306]
[103.49746704 64.23682404]
[107.50521088 49.78213501]
[100.73029327 37.86089706]
[103.18169403 24.92475319]
[113.00131989 16.99612999]
[114.86893463 2.11284947]
[116.73654175 -12.77043056]
[118.60415649 -27.65371132]
[116.51893616 -32.58031464]
[116.57138824 -37.32896042]
[118.32366943 -41.10138702]
[121.08073425 -43.39617920]
[123.87306213 -58.13398743]
[126.66538239 -72.87178802]
[129.45770264 -87.60959625]
[115.15602112 -92.19667053]
[101.52644348 -98.50653076]
[88.77560425 -106.44351196]
[77.09680176 -115.88730621]
[66.66709137 -126.69474030]
[57.64456940 -138.70198059]
[50.16602707 -151.72698975]
[44.34482956 -165.57232666]
[40.26922989 -180.02809143]
[38.00101471 -194.87513733]
[37.57456207 -209.88839722]
[38.99634171 -224.84025574]
[42.24480057 -239.50405884]
[47.27069092 -253.65750122]
[53.99782562 -267.08602905]
[62.32421494 -279.58605957]
[72.12364197 -290.96810913]
[83.24754333 -301.05960083]
[95.52728271 -309.70758057]
[108.77670288 -316.78094482]
[122.79496002 -322.17245483]
[137.36952209 -325.80035400]
[152.27944946 -327.60968018]
[167.29870605 -327.57299805]
[182.19961548 -325.69082642]
[196.75628662 -321.99176025]
[210.74803162 -316.53182983]
[223.96273804 -309.39382935]
[236.20007324 -300.68594360]
[247.27453613 -290.54022217]
[257.01821899 -279.11041260]
[265.28344727 -266.56985474]
[271.94488525 -253.10862732]
[276.90155029 -238.93078613]
[280.07833862 -224.25128174]
[281.42703247 -209.29266357]
[280.92724609 -194.28166199]
[278.58651733 -179.44587708]
[274.44033813 -165.01020813]
[268.55154419 -151.19348145]
[261.00946045 -138.20515442]
[251.92837524 -126.24214935]
[241.44598389 -115.48580170]
[229.72117615 -106.09918213]
[216.93171692 -98.22459412]
[203.27146912 -91.98139954]
[188.94754028 -87.46426392]
[174.17706299 -84.74165344]
[159.18395996 -83.85483551]
[144.19551086 -84.81727600]
[141.40318298 -70.07946777]
[138.61087036 -55.34165955]
[135.81854248 -40.60385513]
[133.48744202 -25.78609657]
[131.61982727 -10.90281773]
[129.75221252 3.98046255]
[127.88459778 18.86374283]
[136.90213013 30.85057449]
[151.71987915 33.18167877]
[165.48335266 24.93869972]
[180.45825195 30.69471741]
[185.15713501 46.03421021]
[175.97541809 59.19002914]
[159.95652771 60.07015991]
[149.38877869 47.99943542]
[134.57102966 45.66833496]
[121.95989227 53.78987503]
[117.95215607 68.24456024]
[113.94441223 82.69924927]
[109.93667603 97.15393829]
[108.53437042 112.08824921]
[109.78124237 127.03633881]
[111.02812195 141.98442078]
[112.27499390 156.93251038]
[113.52187347 171.88059998]
[114.76874542 186.82868958]
[116.01561737 201.77676392]
[117.26249695 216.72485352]
[118.50936890 231.67294312]
[119.75624084 246.62103271]
[121.00312042 261.56912231]
[131.85684204 276.40747070]
[123.84019470 291.98736572]
[125.39777374 306.90628052]
[140.19676208 310.04397583]
[153.30082703 317.60299683]
[163.42616272 328.84277344]
[169.58078003 342.66217041]
[171.16172791 357.70730591]
[168.01411438 372.50418091]
[160.44631958 385.60317993]
[149.19975281 395.72097778]
[135.37623596 401.86633301]
[120.33004761 403.43719482]
[105.53527832 400.27969360]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 139]
[8 138]
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[21 126]
[25 37]
[26 36]
[27 35]
[28 34]
[29 33]
[39 125]
[40 124]
[41 123]
[42 122]
[45 112]
[46 111]
[47 110]
[48 109]
[52 108]
[53 107]
[54 106]
[55 105]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
