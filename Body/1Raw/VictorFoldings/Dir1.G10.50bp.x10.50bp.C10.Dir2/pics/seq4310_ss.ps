%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUCAUACACCGGGGGGGGGGUCCUAUGAAAAAACUUCCUACCACUCACCCUAGCAUUACUUAUAUGAUAUxxxxxxxxxxUCUCCCUAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUAUACCCCCCCCCCAACUAAUACACC\
) } def
/len { sequence length } bind def

/coor [
[97.41587830 408.86972046]
[83.25527954 403.71472168]
[70.66553497 395.43252563]
[60.32559586 384.46975708]
[52.79308319 371.41763306]
[48.47422028 356.98004150]
[47.60190964 341.93557739]
[50.22320175 327.09558105]
[56.19672775 313.26034546]
[65.20034790 301.17599487]
[76.74850464 291.49420166]
[90.21841431 284.73712158]
[104.88368225 281.26916504]
[104.88368225 266.26916504]
[104.88368225 251.26914978]
[104.88368225 236.26914978]
[104.88368225 221.26914978]
[104.88368225 206.26914978]
[104.88368225 191.26914978]
[104.88368225 176.26914978]
[104.88368225 161.26914978]
[104.88368225 146.26914978]
[104.88368225 131.26914978]
[89.94674683 128.78227234]
[78.41817474 119.85658264]
[72.72933960 107.04529572]
[73.75689697 93.62931061]
[80.72612000 82.78202057]
[72.92106628 69.97260284]
[59.46326065 76.61978149]
[45.47063446 82.05154419]
[31.05269814 86.22536469]
[16.32229805 89.10858154]
[1.39472127 90.67863464]
[-13.61320305 90.92322540]
[-28.58401489 89.84044647]
[-43.40054703 87.43876648]
[-57.94683456 83.73699188]
[-72.10903168 78.76408386]
[-85.77629852 72.55897522]
[-98.84166718 65.17021942]
[-111.20288849 56.65564346]
[-122.76320648 47.08189774]
[-133.43214417 36.52389908]
[-143.12622070 25.06429100]
[-151.76953125 12.79275322]
[-159.29446411 -0.19466645]
[-165.64210510 -13.79632378]
[-170.76278687 -27.90576363]
[-174.61640930 -42.41255951]
[-177.17283630 -57.20317841]
[-178.41204834 -72.16184998]
[-178.32435608 -87.17151642]
[-176.91043091 -102.11468506]
[-174.18135071 -116.87442017]
[-170.15847778 -131.33520508]
[-164.87327576 -145.38383484]
[-158.36714172 -158.91040039]
[-150.69096375 -171.80900574]
[-141.90483093 -183.97869873]
[-132.07752991 -195.32424927]
[-121.28594208 -205.75686646]
[-109.61454010 -215.19487000]
[-97.15467072 -223.56442261]
[-84.00386047 -230.80000305]
[-70.26501465 -236.84500122]
[-56.04567719 -241.65206909]
[-41.45712662 -245.18362427]
[-26.61354446 -247.41200256]
[-11.63110256 -248.31977844]
[3.37293887 -247.89982605]
[18.28115082 -246.15545654]
[32.97685623 -243.10031128]
[47.34503555 -238.75830078]
[61.27323532 -233.16340637]
[74.65245056 -226.35942078]
[87.37796783 -218.39959717]
[99.35018921 -209.34622192]
[110.47541809 -199.27017212]
[120.66657257 -188.25027466]
[129.84390259 -176.37281799]
[137.93557739 -163.73072815]
[144.87826538 -150.42295837]
[150.61764526 -136.55366516]
[155.10876465 -122.23139954]
[158.31651306 -107.56824493]
[160.21575928 -92.67897034]
[160.79164124 -77.68010712]
[160.03965759 -62.68903732]
[157.96568298 -47.82309341]
[154.58596802 -33.19861984]
[149.92695618 -18.93008232]
[144.02511597 -5.12914705]
[136.92662048 8.09617043]
[128.68704224 20.64236259]
[119.37085724 32.41123581]
[109.05098724 43.31068420]
[97.80819702 53.25539780]
[85.73048401 62.16754913]
[93.53553772 74.97696686]
[111.24687195 74.59946442]
[126.29643250 86.16526031]
[131.10624695 105.83193970]
[146.09931946 106.28790283]
[161.09239197 106.74387360]
[176.08544922 107.19983673]
[191.07852173 107.65580750]
[206.07543945 107.95980835]
[221.07467651 108.11181641]
[236.07389832 108.26383209]
[242.09608459 105.31211090]
[247.83142090 105.81375885]
[251.67469788 108.73828125]
[266.65545654 109.49801636]
[281.63619995 110.25775146]
[295.98092651 102.31040192]
[309.89459229 110.99038696]
[309.06399536 127.36848450]
[294.34356689 134.59631348]
[280.87646484 125.23850250]
[265.89572144 124.47876740]
[250.91496277 123.71902466]
[235.92189026 123.26306152]
[220.92266846 123.11105347]
[205.92343140 122.95903778]
[199.16331482 126.05426025]
[190.62255859 122.64887238]
[175.62948608 122.19290924]
[160.63641357 121.73693848]
[145.64335632 121.28097534]
[130.65028381 120.82500458]
[119.88368225 131.26914978]
[119.88368225 146.26914978]
[119.88368225 161.26914978]
[119.88368225 176.26914978]
[119.88368225 191.26914978]
[119.88368225 206.26914978]
[119.88368225 221.26914978]
[119.88368225 236.26914978]
[119.88368225 251.26914978]
[119.88368225 266.26916504]
[119.88368225 281.26916504]
[134.54893494 284.73712158]
[148.01885986 291.49420166]
[159.56701660 301.17599487]
[168.57063293 313.26034546]
[174.54415894 327.09558105]
[177.16545105 341.93557739]
[176.29313660 356.98004150]
[171.97427368 371.41763306]
[164.44175720 384.46975708]
[154.10182190 395.43252563]
[141.51208496 403.71472168]
[127.35147858 408.86972046]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[28 100]
[29 99]
[103 131]
[104 130]
[105 129]
[106 128]
[107 127]
[108 125]
[109 124]
[110 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
