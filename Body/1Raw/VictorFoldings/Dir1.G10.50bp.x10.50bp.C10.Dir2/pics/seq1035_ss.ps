%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAGGAACAGGGGGGGGGGAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGCCACACCxxxxxxxxxxUUUGCCCACAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCACCCCCCCCCCAAGAGGAACA\
) } def
/len { sequence length } bind def

/coor [
[70.32230377 375.81439209]
[56.47636032 369.79837036]
[44.76770020 360.26895142]
[36.06517410 347.93328857]
[31.01457405 333.70675659]
[29.99068260 318.64508057]
[33.06948090 303.86590576]
[40.02250290 290.46597290]
[50.33378601 279.43966675]
[63.23816681 271.60513306]
[77.77805328 267.54382324]
[77.77805328 252.54383850]
[77.77805328 237.54383850]
[77.77805328 222.54383850]
[77.77805328 207.54383850]
[77.77805328 192.54383850]
[77.77805328 177.54383850]
[77.77805328 162.54383850]
[77.77805328 147.54383850]
[77.77805328 132.54383850]
[67.22676849 121.88220978]
[52.22757721 121.72617340]
[37.22838974 121.57013702]
[28.68816948 136.86590576]
[13.67388535 145.71862793]
[-3.66722226 145.78678894]
[-18.59728241 137.14115906]
[-27.08225250 122.22105408]
[-42.07494736 122.68909454]
[-57.06764603 123.15713501]
[-66.48832703 132.02870178]
[-79.02693939 132.07470703]
[-87.92290497 123.81823730]
[-102.92208862 123.97427368]
[-117.92127991 124.13031006]
[-131.75421143 132.93838501]
[-146.17170715 125.12381744]
[-146.34230042 108.72555542]
[-132.09048462 100.61273193]
[-118.07731628 109.13112640]
[-103.07812500 108.97509003]
[-88.07894135 108.81905365]
[-73.51626587 99.07592773]
[-57.53568649 108.16444397]
[-42.54299164 107.69639587]
[-27.55029488 107.22835541]
[-22.77608109 95.45523071]
[-13.85502720 86.34436798]
[-2.09888101 81.28633881]
[10.74427986 81.07200623]
[22.74996758 85.76909637]
[32.10565948 94.70671082]
[37.38442612 106.57094574]
[52.38361359 106.72698212]
[67.38280487 106.88301849]
[68.64570618 92.35253143]
[75.85779572 80.21860504]
[87.23605347 72.68586731]
[100.29255676 70.91425323]
[112.37297821 74.85406494]
[122.35570526 63.65830231]
[132.33842468 52.46253586]
[117.98648071 56.82390594]
[103.01982880 57.82359314]
[88.21533203 55.40969849]
[74.34143066 49.70752716]
[62.11825180 41.01305008]
[52.18025589 29.77755928]
[45.04328156 16.58424377]
[41.07777405 2.11791253]
[40.48957062 -12.87055016]
[43.30920029 -27.60315704]
[49.39030838 -41.31520081]
[58.41725159 -53.29494476]
[69.92147827 -62.92057419]
[83.30585480 -69.69246674]
[97.87564850 -73.25911713]
[112.87461853 -73.43539429]
[127.52421570 -70.21215057]
[141.06404114 -63.75669861]
[152.79132080 -54.40410233]
[162.09732056 -42.63981628]
[168.49900818 -29.07448196]
[171.66410828 -14.41221333]
[171.42834473 0.58593345]
[167.80392456 15.14146805]
[160.97898865 28.49887466]
[151.30635071 39.96619415]
[165.53312683 35.21237946]
[179.75990295 30.45856476]
[193.98667908 25.70475006]
[192.28280640 10.74512005]
[193.72685242 -4.24182177]
[198.25567627 -18.60091209]
[205.67129517 -31.70443153]
[215.64953613 -42.97955322]
[227.75419617 -51.93337250]
[241.45611572 -58.17447281]
[256.15628052 -61.43001556]
[271.21209717 -61.55768204]
[285.96536255 -58.55189514]
[299.77114868 -52.54405212]
[312.02590942 -43.79679108]
[322.19390869 -32.69250488]
[329.83068848 -19.71662331]
[334.60235596 -5.43639898]
[336.30032349 9.52390003]
[334.85040283 24.51027298]
[330.31591797 38.86758041]
[322.89514160 51.96818161]
[312.91247559 63.23937607]
[300.80429077 72.18843079]
[287.09991455 78.42414093]
[272.39846802 81.67389679]
[257.34262085 81.79564667]
[242.59053040 78.78405762]
[228.78712463 72.77078247]
[216.53579712 64.01869965]
[206.37216187 52.91041183]
[198.74049377 39.93153000]
[184.51371765 44.68534470]
[170.28694153 49.43915939]
[156.06016541 54.19297409]
[143.53419495 62.44526291]
[133.55146790 73.64102936]
[123.56874084 84.83679199]
[128.94329834 97.11000061]
[128.08000183 110.97697449]
[120.72003937 123.34159088]
[108.10327148 131.23959351]
[92.77805328 132.54383850]
[92.77805328 147.54383850]
[92.77805328 162.54383850]
[92.77805328 177.54383850]
[92.77805328 192.54383850]
[92.77805328 207.54383850]
[92.77805328 222.54383850]
[92.77805328 237.54383850]
[92.77805328 252.54383850]
[92.77805328 267.54382324]
[107.31793976 271.60513306]
[120.22232056 279.43966675]
[130.53361511 290.46597290]
[137.48663330 303.86590576]
[140.56542969 318.64508057]
[139.54153442 333.70675659]
[134.49093628 347.93328857]
[125.78841400 360.26895142]
[114.07975006 369.79837036]
[100.23381042 375.81439209]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 55]
[22 54]
[23 53]
[28 46]
[29 45]
[30 44]
[33 42]
[34 41]
[35 40]
[60 126]
[61 125]
[62 124]
[88 123]
[89 122]
[90 121]
[91 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
