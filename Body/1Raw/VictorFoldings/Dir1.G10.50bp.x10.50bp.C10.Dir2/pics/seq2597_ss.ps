%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACAAUCAACGGGGGGGGGGCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAxxxxxxxxxxUCUUAUUAUUUGAUCUAGAAAUUGCCCUCCUUUUACCCCUACCAUGAGCCCCCCCCCCCCCUACAAACAAC\
) } def
/len { sequence length } bind def

/coor [
[82.67415619 387.83712769]
[69.75499725 380.07879639]
[58.97370148 369.54977417]
[50.91168594 356.81790161]
[46.00372314 342.56976318]
[44.51449966 327.57382202]
[46.52432251 312.63870239]
[51.92480850 298.56988525]
[60.42471313 286.12609863]
[71.56564331 275.97836304]
[84.74679565 268.67398071]
[99.25730896 264.60684204]
[98.64148712 249.61949158]
[98.02566528 234.63214111]
[97.40983582 219.64479065]
[96.79401398 204.65742493]
[96.17818451 189.67007446]
[95.56236267 174.68272400]
[94.94653320 159.69537354]
[94.33071136 144.70802307]
[93.71488190 129.72065735]
[93.09906006 114.73331451]
[85.00299072 106.30739594]
[84.64315033 94.62779999]
[92.20515442 85.71945953]
[91.89717102 70.72262573]
[76.90531158 70.09760284]
[61.98131180 68.54174805]
[47.18290710 66.06108093]
[32.56734848 62.66519928]
[18.19118690 58.36724091]
[4.11003590 53.18383026]
[-9.62162304 47.13502502]
[-22.95066643 40.24422836]
[-35.82552719 32.53809357]
[-48.19639206 24.04643631]
[-60.01539993 14.80211258]
[-71.23683167 4.84088564]
[-81.81726074 -5.79870701]
[-91.71576691 -17.07550240]
[-100.89405060 -28.94587135]
[-109.31659698 -41.36389160]
[-116.95082855 -54.28151703]
[-123.76720428 -67.64877319]
[-129.73934937 -81.41394806]
[-134.84416199 -95.52378082]
[-139.06190491 -109.92368317]
[-142.37623596 -124.55794525]
[-144.77435303 -139.36994934]
[-146.24697876 -154.30239868]
[-146.78839111 -169.29751587]
[-146.39653015 -184.29727173]
[-145.07287598 -199.24366760]
[-142.82258606 -214.07884216]
[-139.65434265 -228.74543762]
[-135.58039856 -243.18667603]
[-130.61653137 -257.34671021]
[-124.78194427 -271.17074585]
[-118.09919739 -284.60531616]
[-110.59416199 -297.59841919]
[-102.29585266 -310.09982300]
[-93.23639679 -322.06109619]
[-83.45082855 -333.43603516]
[-72.97702026 -344.18060303]
[-61.85547638 -354.25323486]
[-50.12923431 -363.61495972]
[-37.84365845 -372.22955322]
[-25.04627991 -380.06369019]
[-11.78661156 -387.08706665]
[1.88404930 -393.27249146]
[15.91281223 -398.59603882]
[30.24540329 -403.03713989]
[44.82637024 -406.57858276]
[59.59930420 -409.20669556]
[74.50704956 -410.91128540]
[89.49193573 -411.68579102]
[104.49597931 -411.52716064]
[119.46113586 -410.43603516]
[134.32951355 -408.41665649]
[149.04357910 -405.47680664]
[163.54641724 -401.62786865]
[177.78190613 -396.88476562]
[191.69499207 -391.26577759]
[205.23182678 -384.79272461]
[218.34004211 -377.49057007]
[230.96893311 -369.38763428]
[243.06962585 -360.51522827]
[254.59533691 -350.90768433]
[265.50143433 -340.60220337]
[275.74575806 -329.63858032]
[285.28863525 -318.05929565]
[294.09320068 -305.90914917]
[302.12533569 -293.23510742]
[309.35400391 -280.08624268]
[315.75122070 -266.51339722]
[321.29223633 -252.56909180]
[325.95562744 -238.30728149]
[329.72332764 -223.78312683]
[332.58081055 -209.05284119]
[334.51696777 -194.17340088]
[335.52432251 -179.20236206]
[335.59896851 -164.19766235]
[334.74063110 -149.21736145]
[332.95266724 -134.31938171]
[330.24191284 -119.56138611]
[326.61892700 -105.00046539]
[322.09768677 -90.69294739]
[316.69570923 -76.69419861]
[310.43386841 -63.05836487]
[303.33642578 -49.83820343]
[295.43078613 -37.08486557]
[286.74758911 -24.84769058]
[277.32040405 -13.17401981]
[267.18569946 -2.10901761]
[256.38269043 8.30450726]
[244.95317078 18.02626610]
[232.94136047 27.01865005]
[220.39373779 35.24686432]
[207.35882568 42.67907715]
[193.88708496 49.28653717]
[180.03060913 55.04367828]
[165.84301758 59.92823029]
[151.37919617 63.92129135]
[136.69511414 67.00741577]
[121.84757233 69.17465973]
[106.89401245 70.41464233]
[107.20198822 85.41148376]
[116.26168823 99.49898529]
[108.08641052 114.11748505]
[108.70223999 129.10484314]
[109.31806183 144.09219360]
[109.93389130 159.07954407]
[110.54971313 174.06689453]
[111.16553497 189.05424500]
[111.78136444 204.04161072]
[112.39718628 219.02896118]
[113.01301575 234.01631165]
[113.62883759 249.00366211]
[114.24466705 263.99102783]
[129.03994751 266.85397339]
[142.77590942 273.05236816]
[154.71182251 282.25186157]
[164.20396423 293.95639038]
[170.74046326 307.53469849]
[173.96879578 322.25457764]
[173.71487427 337.32217407]
[169.99238586 351.92489624]
[163.00209045 365.27526855]
[153.12094116 376.65332031]
[140.88183594 385.44540405]
[126.94480896 391.17742920]
[112.06147003 393.54025269]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[25 127]
[26 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
