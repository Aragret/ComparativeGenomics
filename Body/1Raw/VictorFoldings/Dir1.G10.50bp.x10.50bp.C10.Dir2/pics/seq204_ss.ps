%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUAACAAGGGGGGGGGGUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAUUUxxxxxxxxxxGGACAUAAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACCCCCCCCCCCAUCAUAACAA\
) } def
/len { sequence length } bind def

/coor [
[97.70025635 378.38662720]
[83.85431671 372.37057495]
[72.14565277 362.84115601]
[63.44313049 350.50549316]
[58.39252853 336.27899170]
[57.36863708 321.21728516]
[60.44743729 306.43814087]
[67.40045929 293.03820801]
[77.71174622 282.01187134]
[90.61612701 274.17736816]
[105.15601349 270.11605835]
[105.15601349 255.11605835]
[105.15601349 240.11605835]
[105.15601349 225.11605835]
[105.15601349 210.11605835]
[105.15601349 195.11605835]
[105.15601349 180.11605835]
[105.15601349 165.11605835]
[105.15601349 150.11605835]
[105.15601349 135.11605835]
[80.88799286 126.61577606]
[70.44152069 105.36371613]
[55.48126984 104.27240753]
[40.52101898 103.18109131]
[31.66888237 105.68938446]
[25.26194000 101.90827942]
[10.32763290 100.50597382]
[-4.60667515 99.10366821]
[-19.54098320 97.70137024]
[-34.47528839 96.29906464]
[-49.40959930 94.89675903]
[-55.62419510 108.70463562]
[-65.98729706 119.74478149]
[-79.37479401 126.81964111]
[-94.33451080 129.16178894]
[-109.24372864 126.51716614]
[-122.48519897 119.17263794]
[-132.62260437 107.92488861]
[-138.55628967 93.99398804]
[-139.64263916 78.89105988]
[-135.76379395 64.25434875]
[-127.34051514 51.67153549]
[-115.28649139 42.50751877]
[-100.90924835 37.75634003]
[-85.76833344 37.93336487]
[-71.50611115 43.01939774]
[-59.66964340 52.46274185]
[-51.54285812 65.23905182]
[-48.00729370 79.96245575]
[-33.07298660 81.36475372]
[-18.13867950 82.76705933]
[-3.20437121 84.16936493]
[11.72993660 85.57167053]
[26.66424370 86.97396851]
[41.61233139 88.22084808]
[56.57257843 89.31215668]
[71.53282928 90.40346527]
[75.64630127 82.41106415]
[81.94017792 75.99341583]
[89.85095978 71.72509003]
[98.67040253 69.98824310]
[101.76872253 55.31171799]
[104.86704254 40.63519287]
[90.91413116 35.02382278]
[78.14770508 27.07464600]
[66.95571136 17.02922630]
[57.67827225 5.19283390]
[50.59731293 -8.07483768]
[45.92801285 -22.37059784]
[43.81227493 -37.26001740]
[44.31438446 -52.29061890]
[47.41909027 -67.00564575]
[53.03204346 -80.95791626]
[60.98266602 -93.72344208]
[71.02935791 -104.91429138]
[82.86679840 -114.19039154]
[96.13527679 -121.26985168]
[110.43156433 -125.93752289]
[125.32122803 -128.05157471]
[140.35177612 -127.54776001]
[155.06643677 -124.44138336]
[169.01808167 -118.82685089]
[181.78269958 -110.87477875]
[192.97241211 -100.82682037]
[202.24717712 -88.98832703]
[209.32511902 -75.71904755]
[213.99118042 -61.42222595]
[216.10354614 -46.53232956]
[215.59802246 -31.50184250]
[212.48997498 -16.78752327]
[206.87385559 -2.83652425]
[198.92033386 9.92719936]
[188.87110901 21.11577225]
[177.03157043 30.38918495]
[163.76148987 37.46563339]
[149.46414185 42.13006592]
[134.57400513 44.24074173]
[119.54357147 43.73351669]
[116.44524384 58.41004181]
[113.34692383 73.08656311]
[122.81987762 78.42532349]
[130.12519836 87.11043549]
[134.08493042 98.25212097]
[133.88813782 110.55064392]
[148.70588684 112.88175201]
[163.52365112 115.21285248]
[178.34141541 117.54396057]
[193.15916443 119.87506104]
[200.22293091 106.48171234]
[211.25448608 96.10945892]
[225.05722046 89.88342285]
[240.13389587 88.47895813]
[254.84912109 92.04839325]
[267.60668945 100.20455933]
[277.02276611 112.06272888]
[282.07595825 126.33662415]
[282.21813965 141.47790527]
[277.43389893 155.84417725]
[268.24215698 167.87707520]
[255.63998413 176.27137756]
[240.99438477 180.11651611]
[225.89399719 178.99542236]
[211.97679138 173.02967834]
[200.75239563 162.86642456]
[193.43836975 149.60807800]
[190.82806396 134.69282532]
[176.01029968 132.36170959]
[161.19255066 130.03060913]
[146.37478638 127.69950867]
[131.55703735 125.36840820]
[120.15601349 135.11605835]
[120.15601349 150.11605835]
[120.15601349 165.11605835]
[120.15601349 180.11605835]
[120.15601349 195.11605835]
[120.15601349 210.11605835]
[120.15601349 225.11605835]
[120.15601349 240.11605835]
[120.15601349 255.11605835]
[120.15601349 270.11605835]
[134.69589233 274.17736816]
[147.60028076 282.01187134]
[157.91156006 293.03820801]
[164.86457825 306.43814087]
[167.94338989 321.21728516]
[166.91949463 336.27899170]
[161.86889648 350.50549316]
[153.16636658 362.84115601]
[141.45770264 372.37057495]
[127.61176300 378.38662720]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 57]
[23 56]
[24 55]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[31 49]
[61 100]
[62 99]
[63 98]
[104 130]
[105 129]
[106 128]
[107 127]
[108 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
