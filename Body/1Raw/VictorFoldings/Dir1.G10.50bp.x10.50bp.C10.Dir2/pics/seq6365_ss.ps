%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUUCAUAGGGGGGGGGGGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAxxxxxxxxxxAUCGGCAUCAACCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCCCCCCCCCCCUUCUUCAAAG\
) } def
/len { sequence length } bind def

/coor [
[109.94326019 727.74121094]
[96.72504425 720.46514893]
[85.84107971 710.01519775]
[78.03346252 697.10382080]
[73.83451843 682.61138916]
[73.53054810 667.52593994]
[77.14228058 652.87609863]
[84.42344666 639.66070557]
[94.87760925 628.78076172]
[107.79199982 620.97814941]
[122.28607178 616.78479004]
[121.97809601 601.78796387]
[121.67012024 586.79113770]
[121.36214447 571.79431152]
[121.05416107 556.79742432]
[120.74618530 541.80059814]
[120.43820953 526.80377197]
[120.13023376 511.80691528]
[119.82225037 496.81008911]
[119.51427460 481.81326294]
[119.20629883 466.81640625]
[118.89832306 451.81958008]
[104.11548615 449.38891602]
[90.02728271 444.28182983]
[77.11401367 436.67086792]
[65.81620789 426.81396484]
[56.51959610 415.04574585]
[49.54194260 401.76605225]
[45.12218094 387.42645264]
[43.41223526 372.51495361]
[44.47180176 357.53915405]
[48.26625061 343.00921631]
[54.66777802 329.42034912]
[63.45968628 317.23596191]
[74.34375000 306.87191772]
[86.95029449 298.68222046]
[100.85077667 292.94699097]
[115.57234955 289.86291504]
[115.11042786 274.87002563]
[114.49459839 259.88269043]
[113.87877655 244.89533997]
[103.69415283 230.63636780]
[112.29238129 214.38517761]
[111.36896515 199.41363525]
[110.44555664 184.44207764]
[108.29697418 169.59675598]
[104.93771362 154.97775269]
[101.57846069 140.35874939]
[98.21920013 125.73973846]
[74.51317596 115.22695160]
[69.40534973 86.16644287]
[58.42454529 75.94773102]
[47.44374084 65.72902679]
[36.46294022 55.51031876]
[20.36784744 52.36706161]
[15.29908180 36.77091980]
[26.47095490 24.76586723]
[42.39080048 28.70167160]
[46.68164444 44.52951813]
[57.66244888 54.74822235]
[68.64324951 64.96693420]
[79.62405396 75.18563843]
[93.11943817 68.63777161]
[91.88882446 53.68833160]
[77.09211731 50.64954376]
[63.75156021 43.56391907]
[52.94860077 33.00585175]
[45.55899429 19.83124161]
[42.18177795 5.10809326]
[43.09072876 -9.97005272]
[48.21216583 -24.18087959]
[57.13091278 -36.37237549]
[69.12397003 -45.55623627]
[83.21910858 -50.98796463]
[98.27370453 -52.22723389]
[113.06735229 -49.17358398]
[126.40078735 -42.07455826]
[137.19313049 -31.50564384]
[144.56950378 -18.32361603]
[147.93193054 -3.59708214]
[147.00782776 11.48014259]
[141.87211609 25.68581772]
[132.94113159 37.86834717]
[120.93885040 47.04015732]
[106.83825684 52.45772171]
[108.06887054 67.40715790]
[117.85766602 72.88645172]
[124.98690796 81.05789185]
[128.81268311 90.80465698]
[129.11981201 100.89728546]
[126.12106323 110.14739990]
[120.40450287 117.54750824]
[112.83820343 122.38047791]
[116.19746399 136.99948120]
[119.55672455 151.61849976]
[122.91598511 166.23750305]
[130.45819092 153.27159119]
[144.11642456 147.07055664]
[158.84202576 149.92655945]
[169.19180298 160.78390503]
[171.34005737 175.62928772]
[164.49269104 188.97520447]
[151.18080139 195.88848877]
[136.32498169 193.81367493]
[125.41710663 183.51867676]
[126.34051514 198.49021912]
[127.26393127 213.46177673]
[136.41658020 222.60687256]
[136.84513855 235.13633728]
[128.86611938 244.27951050]
[129.48194885 259.26687622]
[130.09777832 274.25421143]
[133.59489441 282.76104736]
[130.56918335 289.55496216]
[145.40496826 292.03201294]
[159.52919006 297.19171143]
[172.46133423 304.85696411]
[183.76171875 314.76544189]
[193.04644775 326.57858276]
[200.00045776 339.89315796]
[204.38824463 354.25506592]
[206.06173706 369.17474365]
[204.96543884 384.14389038]
[201.13810730 398.65283203]
[194.71153259 412.20779419]
[185.90591431 424.34780884]
[175.02230835 434.66021729]
[162.43238831 442.79492188]
[148.56573486 448.47607422]
[133.89515686 451.51159668]
[134.20314026 466.50845337]
[134.51110840 481.50527954]
[134.81909180 496.50210571]
[135.12707520 511.49896240]
[135.43504333 526.49578857]
[135.74302673 541.49261475]
[136.05099487 556.48944092]
[136.35897827 571.48632812]
[136.66696167 586.48315430]
[136.97492981 601.47998047]
[137.28291321 616.47680664]
[151.93692017 620.07159424]
[165.16076660 627.33740234]
[176.05279541 637.77899170]
[183.87037659 650.68432617]
[188.08050537 665.17352295]
[188.39611816 680.25872803]
[184.79571533 694.91131592]
[177.52474976 708.13238525]
[167.07899475 719.02038574]
[154.17063904 726.83294678]
[139.67979431 731.03747559]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[38 114]
[39 112]
[40 111]
[41 110]
[43 107]
[44 106]
[45 105]
[46 96]
[47 95]
[48 94]
[49 93]
[51 62]
[52 61]
[53 60]
[54 59]
[63 86]
[64 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
