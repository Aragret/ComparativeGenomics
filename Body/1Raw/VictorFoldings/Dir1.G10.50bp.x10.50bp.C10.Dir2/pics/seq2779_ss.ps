%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACCUGUAUGGGGGGGGGGGAAUGGCUCCACGAGGGUUCAGCUGUCUCUUACUUUUAACCAGUGAAAUUxxxxxxxxxxUACACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCUAUCAAUACCCCCCCCCCGGAGCUGUAU\
) } def
/len { sequence length } bind def

/coor [
[116.63514709 460.34405518]
[102.14546204 456.13555908]
[89.23922729 448.31945801]
[78.79642487 437.42861938]
[71.52906799 424.20559692]
[67.93264008 409.55200195]
[68.25235748 394.46691895]
[72.46643066 379.97885132]
[80.28752899 367.07562256]
[91.18239594 356.63702393]
[104.40820312 349.37478638]
[119.06319427 345.78399658]
[119.37525177 330.78726196]
[119.68730927 315.79049683]
[119.99936676 300.79376221]
[120.31142426 285.79699707]
[120.62347412 270.80023193]
[120.93553162 255.80349731]
[121.24758911 240.80673218]
[121.55964661 225.80998230]
[121.87170410 210.81323242]
[114.40084839 197.92774963]
[122.42357635 184.29151917]
[122.73562622 169.29476929]
[119.79014587 154.58680725]
[113.72713470 140.86676025]
[107.66412354 127.14670563]
[101.60110474 113.42665100]
[93.74208832 114.10933685]
[85.85260010 110.04001617]
[80.80219269 101.55919647]
[80.98114014 90.69271851]
[71.47277832 79.09137726]
[56.74077606 73.32260895]
[54.65728378 58.57444763]
[39.92528152 52.80568314]
[37.84178925 38.05751801]
[26.85612297 27.84403801]
[14.59375477 19.20492172]
[2.33138657 10.56580639]
[-9.93098164 1.92669034]
[-18.81088638 -0.48144940]
[-22.35605240 -7.02189684]
[-34.43603897 -15.91424656]
[-46.51602936 -24.80659676]
[-59.30590057 -16.63447189]
[-74.18498230 -13.63826370]
[-89.14100647 -16.22318268]
[-102.15129089 -24.03963852]
[-111.45629883 -36.03052139]
[-115.79760742 -50.57416153]
[-114.58808899 -65.70365143]
[-107.99131775 -79.37285614]
[-96.89945984 -89.73311615]
[-82.81259155 -95.38330841]
[-67.63584900 -95.55928040]
[-53.42176437 -90.23722839]
[-42.09267044 -80.13692474]
[-35.18074036 -66.62435150]
[-33.62075043 -51.52697372]
[-37.62368011 -36.88658524]
[-25.54368973 -27.99423409]
[-13.46370220 -19.10188484]
[-1.29186547 -10.33567810]
[10.97050285 -1.69656169]
[23.23287010 6.94255447]
[35.49523926 15.58167076]
[30.29744911 1.51102781]
[31.15909576 -13.46420383]
[37.93643951 -26.84581947]
[49.49885941 -36.40146637]
[63.91749191 -40.53704834]
[78.78698730 -38.56265259]
[91.62677002 -30.80766106]
[100.29488373 -18.56577492]
[103.34529114 -3.87921572]
[100.26911926 10.80196762]
[91.57953644 23.02862549]
[78.72615814 30.76107407]
[63.85322571 32.70937347]
[49.44313049 28.54916000]
[63.49502945 33.48812103]
[66.25862885 49.06608963]
[80.31052399 54.00505066]
[83.07411957 69.58301544]
[92.58248138 81.18435669]
[107.56219482 81.96420288]
[118.22382355 71.41291046]
[128.88545227 60.86162186]
[139.43673706 50.19999695]
[149.87655640 39.42918777]
[160.31636047 28.65838051]
[166.99859619 13.07685280]
[183.82102966 15.18455219]
[186.45260620 31.93301964]
[171.08717346 39.09819412]
[160.64735413 49.86899948]
[150.20755005 60.63980865]
[147.79495239 67.67721558]
[139.43673706 71.52324677]
[128.77511597 82.07453918]
[118.11348724 92.62583160]
[115.32115936 107.36363983]
[121.38417053 121.08368683]
[127.44718933 134.80374146]
[133.51019287 148.52380371]
[135.44201660 133.64871216]
[141.24494934 119.81665039]
[150.50445557 108.01574707]
[162.55906677 99.08901978]
[176.54762268 93.67418671]
[191.47080994 92.15806580]
[206.26254272 94.64897156]
[219.86613464 100.96894836]
[231.30978394 110.66651917]
[239.77597046 123.04891205]
[244.65991211 137.23155212]
[245.61267090 152.20126343]
[242.56622314 166.88864136]
[235.73817444 180.24446106]
[225.61630249 191.31459045]
[212.92372131 199.30822754]
[198.56713867 203.65431213]
[183.57215881 204.04237366]
[169.00999451 200.44470215]
[155.92092896 193.11827087]
[145.24002075 182.58650208]
[137.73237610 169.60682678]
[137.42033386 184.60357666]
[144.86885071 198.56173706]
[136.86845398 211.12528992]
[136.55639648 226.12203979]
[136.24433899 241.11878967]
[135.93228149 256.11553955]
[135.62022400 271.11230469]
[135.30818176 286.10903931]
[134.99612427 301.10580444]
[134.68406677 316.10256958]
[134.37200928 331.09930420]
[134.05995178 346.09606934]
[148.55288696 350.29336548]
[161.46514893 358.09948730]
[171.91635132 368.98226929]
[179.19392395 382.19964600]
[182.80166626 396.85049438]
[182.49359131 411.93582153]
[178.29071045 426.42712402]
[170.47958374 439.33639526]
[159.59278870 449.78338623]
[146.37258911 457.05584717]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[23 129]
[24 128]
[25 106]
[26 105]
[27 104]
[28 103]
[32 86]
[33 85]
[35 83]
[37 81]
[38 67]
[39 66]
[40 65]
[41 64]
[43 63]
[44 62]
[45 61]
[87 102]
[88 101]
[89 100]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
