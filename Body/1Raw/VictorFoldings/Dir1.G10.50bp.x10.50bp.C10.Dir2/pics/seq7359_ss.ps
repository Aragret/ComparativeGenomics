%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACAUAAAAUCGGGGGGGGGGUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAGCUGGUUUCAAGCCAACxxxxxxxxxxCCAGCCACCAUGAAUAUUGUACGGUACCAUAAAUACUUGACCACCUGUAGCCCCCCCCCCUACAUAAAAAC\
) } def
/len { sequence length } bind def

/coor [
[77.08355713 525.60369873]
[63.06161499 520.05072021]
[50.86165619 511.18438721]
[41.25058365 499.56207275]
[34.83256149 485.91436768]
[32.01102448 471.09918213]
[32.96333694 456.04779053]
[37.62964249 441.70639038]
[45.71660995 428.97640991]
[56.71588516 418.65814209]
[69.93604279 411.40017700]
[84.54605865 407.65875244]
[84.54605865 392.65875244]
[84.54605865 377.65875244]
[84.54605865 362.65875244]
[84.54605865 347.65875244]
[84.54605865 332.65875244]
[84.54605865 317.65875244]
[84.54605865 302.65875244]
[84.54605865 287.65875244]
[84.54605865 272.65875244]
[84.54605865 257.65875244]
[76.19839478 248.85086060]
[76.11220551 236.31436157]
[84.88167572 226.80120850]
[85.18965912 211.80436707]
[85.49763489 196.80752563]
[72.83874512 204.85443115]
[58.58766937 200.17396545]
[53.16484451 186.18850708]
[60.53546906 173.12428284]
[75.31011200 170.53390503]
[86.68523407 180.31089783]
[88.52855682 165.42459106]
[81.32655334 155.65763855]
[82.78160095 143.20556641]
[92.65366364 134.84219360]
[94.80224609 119.99687195]
[85.79257202 131.98960876]
[70.86156464 133.42654419]
[59.73010635 123.37216187]
[59.64539719 108.37240601]
[70.66258240 98.19293213]
[85.60848236 99.46092987]
[73.10444641 91.17545319]
[60.60041046 82.88998413]
[48.09637833 74.60450745]
[34.38361359 81.52228546]
[19.05003357 80.64085388]
[6.22029448 72.19731903]
[-0.65446830 58.46293640]
[0.27502137 43.13219452]
[8.75873566 30.32898521]
[22.51459694 23.49730682]
[37.84235001 24.47484589]
[50.61890411 32.99864960]
[57.40743256 46.77585983]
[56.38185120 62.10047150]
[68.88588715 70.38594818]
[81.38992310 78.67141724]
[93.89395905 86.95689392]
[108.63855743 84.20065308]
[117.30516052 71.95769501]
[125.97177124 59.71474457]
[134.63838196 47.47179031]
[143.30497742 35.22883606]
[132.18145752 25.13801765]
[122.35539246 13.77995110]
[113.97006226 1.32027185]
[107.14775848 -12.05932236]
[101.98796844 -26.16371536]
[98.56594086 -40.78722763]
[96.93157196 -55.71660233]
[97.10870361 -70.73412323]
[99.09474945 -85.62079620]
[102.86074066 -100.15952301]
[108.35176849 -114.13829041]
[115.48775482 -127.35324860]
[124.16463470 -139.61167908]
[134.25585938 -150.73483276]
[145.61430359 -160.56047058]
[158.07429504 -168.94534302]
[171.45414734 -175.76713562]
[185.55873108 -180.92640686]
[200.18237305 -184.34788513]
[215.11180115 -185.98168945]
[230.12931824 -185.80400085]
[245.01591492 -183.81739807]
[259.55450439 -180.05085754]
[273.53308105 -174.55931091]
[286.74777222 -167.42283630]
[299.00585938 -158.74549866]
[310.12863159 -148.65385437]
[319.95385742 -137.29504395]
[328.33825684 -124.83473969]
[335.15954590 -111.45463562]
[340.31829834 -97.34985352]
[343.73922729 -82.72608948]
[345.37246704 -67.79659271]
[345.19421387 -52.77908325]
[343.20706177 -37.89255905]
[339.43997192 -23.35411263]
[333.94790649 -9.37575531]
[326.81094360 3.83866835]
[318.13314819 16.09645271]
[308.04107666 27.21884155]
[296.68191528 37.04364014]
[284.22128296 45.42757034]
[270.84094238 52.24837112]
[256.73596191 57.40657806]
[242.11206055 60.82696915]
[227.18251038 62.45965958]
[212.16500854 62.28084564]
[197.27854919 60.29313278]
[182.74024963 56.52550507]
[168.76210022 51.03290939]
[155.54794312 43.89544678]
[146.88133240 56.13839722]
[138.21472168 68.38135529]
[129.54811096 80.62430573]
[120.88150787 92.86725616]
[109.64756775 122.14544678]
[107.49898529 136.99076843]
[114.73497009 153.89257812]
[103.41486359 167.26791382]
[101.57154083 182.15422058]
[100.49446869 197.11550903]
[100.18649292 212.11235046]
[99.87851715 227.10917664]
[109.13668823 242.99366760]
[99.54605865 257.65875244]
[99.54605865 272.65875244]
[99.54605865 287.65875244]
[99.54605865 302.65875244]
[99.54605865 317.65875244]
[99.54605865 332.65875244]
[99.54605865 347.65875244]
[99.54605865 362.65875244]
[99.54605865 377.65875244]
[99.54605865 392.65875244]
[99.54605865 407.65875244]
[114.15606689 411.40017700]
[127.37622833 418.65814209]
[138.37550354 428.97640991]
[146.46246338 441.70639038]
[151.12876892 456.04779053]
[152.08108521 471.09918213]
[149.25955200 485.91436768]
[142.84152222 499.56207275]
[133.23045349 511.18438721]
[121.03050232 520.05072021]
[107.00855255 525.60369873]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[25 129]
[26 128]
[27 127]
[33 126]
[34 125]
[37 123]
[38 122]
[44 61]
[45 60]
[46 59]
[47 58]
[62 121]
[63 120]
[64 119]
[65 118]
[66 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
