%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCGGCUUUUGGGGGGGGGGUGCCCAAAUGGGCCAUUAUCGAAGAAUUCACAAAAAACAAUAGCCUCAUCxxxxxxxxxxCAAAUCACCACAGGACUAUUCCUAGCCAUGCACUACUCACCAGACGCCUCCCCCCCCCCCAACCGCCUUUU\
) } def
/len { sequence length } bind def

/coor [
[83.76966858 389.68429565]
[70.28079224 382.95275879]
[58.79528809 373.18820190]
[49.98092270 360.95828247]
[44.35013962 346.97409058]
[42.23031235 332.04861450]
[43.74467850 317.04962158]
[48.80520248 302.84912109]
[57.11766815 290.27267456]
[68.19879913 280.05154419]
[81.40435028 272.77990723]
[95.96657562 268.88052368]
[95.65859985 253.88368225]
[95.35062408 238.88685608]
[95.04264832 223.89001465]
[94.73466492 208.89317322]
[94.42668915 193.89633179]
[94.11871338 178.89950562]
[93.81073761 163.90266418]
[93.50275421 148.90582275]
[93.19477844 133.90898132]
[81.19338226 129.02484131]
[71.83168030 120.06678772]
[58.01809311 125.91357422]
[44.20451355 131.76036072]
[30.39092827 137.60714722]
[20.94541168 151.01290894]
[4.63952494 149.26644897]
[-1.75263095 134.16438293]
[8.34464455 121.24241638]
[24.54414177 123.79357147]
[38.35772324 117.94677734]
[52.17130661 112.09999084]
[65.98488617 106.25320435]
[65.52922821 97.19001770]
[67.44673920 88.32028198]
[71.60542297 80.25466156]
[77.71897125 73.54842377]
[85.36647034 68.66327667]
[94.02143860 65.93554688]
[103.08801270 65.55301666]
[107.63529968 51.25888824]
[93.70953369 45.66601562]
[80.23484802 39.05995941]
[67.28482819 31.47679710]
[54.93021774 22.95794487]
[43.23849106 13.54993439]
[32.27349854 3.30414724]
[22.09512901 -7.72345734]
[12.75897884 -19.47264862]
[4.31603575 -31.87925720]
[-3.18758607 -44.87552261]
[-9.71090508 -58.39046097]
[-15.21829128 -72.35025787]
[-19.67966652 -86.67866516]
[-23.07066345 -101.29743195]
[-25.37276077 -116.12671661]
[-26.57338524 -131.08551025]
[-26.66597939 -146.09213257]
[-25.65003967 -161.06462097]
[-23.53111076 -175.92117310]
[-20.32077026 -190.58067322]
[-16.03654861 -204.96304321]
[-10.70184612 -218.98974609]
[-4.34579945 -232.58415222]
[2.99687624 -245.67201233]
[11.28607750 -258.18185425]
[20.47653198 -270.04537964]
[30.51804161 -281.19775391]
[41.35576630 -291.57806396]
[52.93051147 -301.12963867]
[65.17905426 -309.80029297]
[78.03450775 -317.54266357]
[91.42665100 -324.31451416]
[105.28234100 -330.07879639]
[119.52590179 -334.80407715]
[134.07954407 -338.46450806]
[148.86376953 -341.04010010]
[163.79785156 -342.51681519]
[178.80020142 -342.88659668]
[193.78887939 -342.14736938]
[208.68205261 -340.30322266]
[223.39834595 -337.36419678]
[237.85739136 -333.34634399]
[251.98023987 -328.27163696]
[265.68972778 -322.16775513]
[278.91098022 -315.06808472]
[291.57180786 -307.01135254]
[303.60302734 -298.04159546]
[314.93896484 -288.20779419]
[325.51770020 -277.56362915]
[335.28143311 -266.16729736]
[344.17684937 -254.08099365]
[352.15536499 -241.37074280]
[359.17340088 -228.10595703]
[365.19262695 -214.35910034]
[370.18017578 -200.20524597]
[374.10879517 -185.72169495]
[376.95703125 -170.98756409]
[378.70935059 -156.08331299]
[379.35614014 -141.09034729]
[378.89389038 -126.09056854]
[377.32513428 -111.16588593]
[374.65841675 -96.39781189]
[370.90835571 -81.86701965]
[366.09533691 -67.65285492]
[360.24575806 -53.83296585]
[353.39147949 -40.48282623]
[345.56997681 -27.67535400]
[336.82397461 -15.48049545]
[327.20123291 -3.96485758]
[316.75427246 6.80866385]
[305.54022217 16.78122711]
[293.62026978 25.89836693]
[281.05957031 34.11028671]
[267.92666626 41.37213135]
[254.29333496 47.64424896]
[240.23402405 52.89237213]
[225.82551575 57.08784103]
[211.14649963 60.20774460]
[196.27716064 62.23503876]
[181.29870605 63.15865326]
[166.29293823 62.97354126]
[151.34182739 61.68071747]
[136.52700806 59.28723907]
[121.92942810 55.80617905]
[117.38214111 70.10031128]
[131.13851929 84.94933319]
[134.22848511 104.95392609]
[125.59355164 123.26155853]
[108.19161987 133.60101318]
[108.49959564 148.59783936]
[108.80757141 163.59468079]
[109.11554718 178.59152222]
[109.42353058 193.58836365]
[109.73150635 208.58520508]
[110.03948212 223.58203125]
[110.34745789 238.57887268]
[110.65544128 253.57571411]
[110.96341705 268.57254028]
[125.67345428 271.87078857]
[139.16641235 278.59411621]
[150.65782166 288.35171509]
[159.47961426 300.57626343]
[165.11886597 314.55706787]
[167.24774170 329.48123169]
[165.74247742 344.48117065]
[160.69055176 358.68475342]
[152.38571167 371.26620483]
[141.31079102 381.49407959]
[128.10964966 388.77371216]
[113.54978180 392.68191528]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[23 34]
[24 33]
[25 32]
[26 31]
[41 127]
[42 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
