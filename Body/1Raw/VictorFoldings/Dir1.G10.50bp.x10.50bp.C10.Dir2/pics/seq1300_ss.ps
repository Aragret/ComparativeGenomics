%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACACAAAAUGGGGGGGGGGAGACUACGAAAGUGGCUUUAACAUAUCUGAACACACAAUAGCUAAGACCCxxxxxxxxxxAACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCCCCCCCCCCCUUACACAAAAU\
) } def
/len { sequence length } bind def

/coor [
[88.72805023 392.82458496]
[76.39494324 384.17346191]
[66.29649353 372.99450684]
[58.93923950 359.84844971]
[54.69222260 345.39471436]
[53.76846313 330.35827637]
[56.21430206 315.49337769]
[61.90705490 301.54559326]
[70.56117249 289.21459961]
[81.74257660 279.11883545]
[94.89041138 271.76477051]
[109.34517670 267.52127075]
[108.42176056 252.54971313]
[107.49835205 237.57815552]
[106.57493591 222.60661316]
[105.65151978 207.63505554]
[104.72811127 192.66351318]
[103.80469513 177.69195557]
[102.88127899 162.72041321]
[101.95787048 147.74885559]
[101.03445435 132.77731323]
[87.53009796 129.13577271]
[77.21363068 120.41003418]
[71.78032684 108.55924988]
[71.89590454 95.99755859]
[77.13756561 85.10555267]
[86.14815521 77.77919006]
[82.19154358 63.31042099]
[78.23493958 48.84165573]
[67.40994263 41.75482941]
[64.43570709 29.57594109]
[70.38287354 18.99797630]
[66.72417450 4.45102310]
[63.06546402 -10.09593105]
[59.40675735 -24.64288521]
[55.74805450 -39.18983841]
[50.28019333 -25.22192955]
[39.37463379 -14.92295837]
[25.11698914 -10.26253223]
[10.23393345 -12.13192368]
[-2.42825580 -20.17362595]
[-10.44802284 -32.84972000]
[-12.29164410 -47.73598862]
[-7.60653925 -61.98554611]
[2.71129799 -72.87325287]
[16.68865395 -78.31692505]
[31.65245628 -77.27548981]
[44.74098587 -69.94811249]
[53.45168304 -57.73485184]
[53.45168304 -72.73485565]
[53.45168304 -87.73485565]
[43.19731522 -76.78734589]
[28.49727249 -73.80258179]
[14.78530407 -79.88385773]
[7.12991524 -92.78327942]
[8.36085606 -107.73268127]
[18.02311897 -119.20616150]
[32.54513550 -122.96263123]
[46.55896378 -117.61355591]
[54.88421631 -105.13721466]
[57.33714294 -119.93529510]
[59.79007339 -134.73336792]
[62.24300003 -149.53144836]
[64.23905945 -164.39805603]
[65.77635193 -179.31906128]
[67.31364441 -194.24008179]
[68.85093689 -209.16110229]
[54.70129776 -214.38015747]
[42.29459381 -222.95480347]
[32.41071701 -234.34602356]
[25.67097664 -247.83773804]
[22.49903870 -262.58187866]
[23.09429550 -277.65161133]
[27.41932678 -292.09960938]
[35.20225906 -305.01770020]
[45.95384598 -315.59381104]
[58.99824142 -323.16311646]
[73.51545715 -327.24984741]
[88.59293365 -327.59704590]
[103.28288269 -324.18295288]
[116.66188812 -317.22210693]
[127.88893127 -307.15213013]
[136.25827026 -294.60601807]
[141.24378967 -280.37243652]
[142.53211975 -265.34606934]
[140.04226685 -250.47155762]
[133.93074036 -236.68388367]
[124.58170319 -224.84976196]
[112.58287048 -215.71308899]
[98.68847656 -209.84822083]
[83.77194977 -207.62380981]
[82.23465729 -192.70278931]
[80.69736481 -177.78176880]
[79.16007233 -162.86076355]
[81.14341736 -159.87519836]
[81.74388123 -155.76313782]
[80.44020844 -151.20176697]
[77.04107666 -147.07852173]
[74.58815002 -132.28044128]
[72.13522339 -117.48236847]
[69.68229675 -102.68428802]
[68.45168304 -87.73485565]
[68.45168304 -72.73485565]
[68.45168304 -57.73485184]
[70.29500580 -42.84854507]
[73.95371246 -28.30158997]
[77.61241913 -13.75463676]
[81.27112579 0.79231721]
[84.92983246 15.33927155]
[97.80780792 27.22212410]
[92.70370483 44.88504410]
[96.66031647 59.35381317]
[100.61692810 73.82257843]
[123.47509003 82.15257263]
[131.79714966 108.02265167]
[146.22454834 112.12760162]
[160.65193176 116.23254395]
[175.07931519 120.33748627]
[189.50669861 124.44243622]
[205.26989746 119.91989136]
[216.87860107 131.50306702]
[212.39076233 147.27619934]
[196.42308044 151.01321411]
[185.40174866 138.86981201]
[170.97436523 134.76487732]
[156.54698181 130.65992737]
[142.11959839 126.55498505]
[127.69221497 122.45004272]
[116.00600433 131.85389709]
[116.92942047 146.82543945]
[117.85282898 161.79699707]
[118.77624512 176.76853943]
[119.69966125 191.74009705]
[120.62306976 206.71163940]
[121.54648590 221.68319702]
[122.46990204 236.65473938]
[123.39331055 251.62629700]
[124.31672668 266.59783936]
[139.18341064 269.03286743]
[153.13531494 274.71548462]
[165.47262573 283.36065674]
[175.57647705 294.53469849]
[182.94010925 307.67718506]
[187.19413757 322.12887573]
[188.12516785 337.16485596]
[185.68653870 352.03094482]
[180.00054932 365.98147583]
[171.35240173 378.31668091]
[160.17588806 388.41784668]
[147.03163147 395.77828979]
[132.57891846 400.02880859]
[117.54270935 400.95620728]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[27 113]
[28 112]
[29 111]
[32 109]
[33 108]
[34 107]
[35 106]
[36 105]
[49 104]
[50 103]
[51 102]
[60 101]
[61 100]
[62 99]
[63 98]
[64 94]
[65 93]
[66 92]
[67 91]
[115 128]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
