%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCACCAUGGGGGGGGGGCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCxxxxxxxxxxUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCAACCUCCCCCCCCCCCCCUCACCAU\
) } def
/len { sequence length } bind def

/coor [
[45.90106201 227.32519531]
[33.89262772 221.52455139]
[22.49851799 214.59458923]
[11.82461548 206.59973145]
[1.97011399 197.61425781]
[-6.97341204 187.72166443]
[-14.92285252 177.01388550]
[-21.80433273 165.59043884]
[-27.55390549 153.55746460]
[-41.67870712 158.60621643]
[-55.80351257 163.65496826]
[-69.92831421 168.70373535]
[-84.05311584 173.75248718]
[-98.17791748 178.80123901]
[-112.24944305 183.99665833]
[-126.26615143 189.33816528]
[-140.28286743 194.67968750]
[-154.29957581 200.02119446]
[-168.31629944 205.36270142]
[-182.33300781 210.70422363]
[-170.13421631 219.43287659]
[-169.13987732 234.39988708]
[-180.07678223 244.66557312]
[-194.95092773 242.72654724]
[-202.89051819 230.00007629]
[-198.09281921 215.78866577]
[-212.58840942 219.64582825]
[-227.08401489 223.50299072]
[-234.79203796 237.30015564]
[-250.02105713 241.52537537]
[-263.73596191 233.67190552]
[-267.79992676 218.39906311]
[-259.80191040 204.76795959]
[-244.48695374 200.86569214]
[-230.94117737 209.00738525]
[-216.44557190 205.15023804]
[-201.94998169 201.29307556]
[-187.67451477 196.68751526]
[-173.65780640 191.34599304]
[-159.64109802 186.00448608]
[-145.62437439 180.66296387]
[-131.60766602 175.32145691]
[-117.59095001 169.97994995]
[-112.42717743 164.62448120]
[-103.22667694 164.67643738]
[-89.10187531 159.62768555]
[-74.97707367 154.57893372]
[-60.85226822 149.53016663]
[-46.72746658 144.48141479]
[-32.60266113 139.43266296]
[-37.75479126 112.72861481]
[-37.58304977 85.53264618]
[-32.09407806 58.89579773]
[-21.50000191 33.84752274]
[-6.21026134 11.35587502]
[13.18423462 -7.70990372]
[4.41802692 -19.88174057]
[-4.34818029 -32.05357742]
[-19.51565552 -38.28894043]
[-21.43094254 -54.57585907]
[-8.12375927 -64.15974426]
[6.71660566 -57.18152237]
[7.82365656 -40.81978607]
[16.58986473 -28.64794731]
[25.35607147 -16.47611046]
[33.87850952 -21.51686668]
[42.73966980 -25.93512344]
[51.89416122 -29.70824432]
[61.29508591 -32.81690598]
[70.89428711 -35.24517822]
[80.64258575 -36.98062134]
[90.49005127 -38.01435089]
[100.38623810 -38.34106827]
[110.28044128 -37.95909882]
[120.12197876 -36.87039948]
[129.86044312 -35.08054733]
[139.44593811 -32.59871292]
[148.82934570 -29.43761063]
[157.96263123 -25.61343002]
[166.79898071 -21.14576340]
[175.29313660 -16.05749893]
[183.40159607 -10.37470150]
[191.08279419 -4.12648153]
[198.29740906 2.65515113]
[205.00846863 9.93545723]
[211.18159485 17.67714119]
[216.78517151 25.84054375]
[221.79048157 34.38384628]
[226.17189026 43.26328278]
[229.90695190 52.43336868]
[232.97653198 61.84712601]
[235.36491394 71.45632935]
[237.05984497 81.21176147]
[238.05265808 91.06343079]
[253.05184937 90.90739441]
[268.05105591 90.75135803]
[283.05023193 90.59532166]
[298.04940796 90.43928528]
[300.92105103 75.66300201]
[306.70864868 61.76737213]
[315.17523193 49.32141876]
[325.97412109 38.83479309]
[338.66305542 30.73692131]
[352.72247314 25.35939980]
[367.57662964 22.92243958]
[382.61727905 23.52582932]
[397.22848511 27.14486313]
[410.81195068 33.63134003]
[422.81143188 42.71964645]
[432.73556519 54.03762054]
[440.17794800 67.12180328]
[444.83383179 81.43639374]
[446.51257324 96.39523315]
[445.14538574 111.38574982]
[440.78829956 125.79410553]
[433.61972046 139.03028870]
[423.93319702 150.55226135]
[412.12539673 159.88824463]
[398.67980957 166.65589905]
[384.14706421 170.57812500]
[369.12222290 171.49427795]
[354.22058105 169.36686707]
[340.05233765 164.28300476]
[327.19766235 156.45086670]
[316.18298340 146.19116211]
[307.45928955 133.92404175]
[301.38385010 120.15182495]
[298.20544434 105.43847656]
[283.20626831 105.59451294]
[268.20709229 105.75054932]
[253.20788574 105.90658569]
[238.20869446 106.06262207]
[236.98277283 119.34219360]
[234.48388672 132.44203186]
[230.73526001 145.24038696]
[225.77172852 157.61831665]
[219.63943481 169.46083069]
[212.39533997 180.65783691]
[204.10678101 191.10531616]
[194.85076904 200.70616150]
[184.71333313 209.37117004]
[173.78865051 217.01980591]
[162.17828369 223.58099365]
[149.99009705 228.99375916]
[137.33735657 233.20780945]
[124.33764648 236.18399048]
[111.11177826 237.89462280]
[97.78263855 238.32383728]
[84.47411346 237.46762085]
[71.30986786 235.33393860]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 50]
[10 49]
[11 48]
[12 47]
[13 46]
[14 45]
[15 43]
[16 42]
[17 41]
[18 40]
[19 39]
[20 38]
[26 37]
[27 36]
[28 35]
[56 65]
[57 64]
[58 63]
[94 132]
[95 131]
[96 130]
[97 129]
[98 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
