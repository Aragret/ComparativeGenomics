%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCUAAUAGGGGGGGGGGCUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUxxxxxxxxxxCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCCCCCCCCCCCUAAUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 394.31518555]
[71.19830322 388.29916382]
[59.48964310 378.76974487]
[50.78712082 366.43408203]
[45.73651886 352.20755005]
[44.71262741 337.14587402]
[47.79142761 322.36669922]
[54.74444962 308.96676636]
[65.05573273 297.94046021]
[77.96011353 290.10592651]
[92.50000000 286.04461670]
[92.50000000 271.04461670]
[92.50000000 256.04461670]
[92.50000000 241.04463196]
[92.50000000 226.04463196]
[92.50000000 211.04463196]
[92.50000000 196.04463196]
[92.50000000 181.04463196]
[92.50000000 166.04463196]
[92.50000000 151.04463196]
[83.64003754 148.93011475]
[75.29002380 145.29040527]
[67.71023560 140.23896790]
[61.13694382 133.93327332]
[55.77503586 126.56983948]
[51.79164886 118.37821198]
[49.31094742 109.61372375]
[48.41025543 100.54956818]
[33.54720688 98.52723694]
[18.66392899 96.65962219]
[3.76202631 94.94692993]
[-11.13987637 93.23424530]
[-17.89460564 106.80441284]
[-28.88538551 117.24369049]
[-42.78502274 123.29149628]
[-57.91506577 124.21751404]
[-72.44849396 119.90993500]
[-84.63032532 110.88890839]
[-92.98954010 98.24378204]
[-96.51672363 83.50150299]
[-94.78594971 68.44227600]
[-88.00622559 54.88458252]
[-76.99623108 44.46557236]
[-63.08546829 38.44339371]
[-47.95374298 37.54525757]
[-33.42827606 41.87961578]
[-21.26309395 50.92307281]
[-12.92719650 63.58358765]
[-9.42718601 78.33234406]
[5.47471571 80.04502869]
[20.37661743 81.75772095]
[27.42639923 79.38153839]
[35.56954193 83.66419220]
[50.43259048 85.68652344]
[61.14118195 66.06188202]
[79.14619446 52.80971909]
[101.06687927 48.41836166]
[122.78723907 53.71236038]
[131.29832458 41.36079025]
[123.53765106 33.98328400]
[120.51089478 21.28514290]
[118.64328766 6.40186214]
[116.77567291 -8.48141766]
[114.90805817 -23.36469841]
[100.12369537 -26.71109581]
[87.37715149 -34.91484070]
[78.20763397 -46.98529434]
[73.72241211 -61.46488571]
[74.46309662 -76.60513306]
[80.34024048 -90.57778931]
[90.64415741 -101.69557190]
[104.13059235 -108.61596680]
[119.17099762 -110.50329590]
[133.94917297 -107.12965393]
[146.68057251 -98.90243530]
[155.82781982 -86.81510925]
[160.28636169 -72.32727051]
[159.51777649 -57.18841171]
[153.61488342 -43.22661591]
[143.29049683 -32.12783813]
[129.79133606 -25.23231125]
[131.65895081 -10.34903049]
[133.52656555 4.53424883]
[135.39418030 19.41752815]
[148.56275940 26.60003853]
[162.08694458 20.11187172]
[175.61114502 13.62370777]
[189.13533020 7.13554239]
[202.65951538 0.64737731]
[215.90209961 -6.39775753]
[228.84016418 -13.98766613]
[241.77821350 -21.57757378]
[239.01811218 -36.48252869]
[241.52531433 -51.43209839]
[248.99707031 -64.62105560]
[260.53112793 -74.45677185]
[274.73471069 -79.75153351]
[289.89263916 -79.86596680]
[304.17453003 -74.78625488]
[315.85577393 -65.12580872]
[323.52581787 -52.05116272]
[326.25842285 -37.14115143]
[323.72369385 -22.19622231]
[316.22763062 -9.02105618]
[304.67547607 0.79338473]
[290.46215820 6.06195831]
[275.30404663 6.14845943]
[261.03155518 1.04244149]
[249.36811829 -8.63951778]
[236.43006897 -1.04960990]
[223.49201965 6.54029846]
[222.67323303 9.28564548]
[220.68214417 11.86043835]
[217.58242798 13.80301476]
[213.60838318 14.68507576]
[209.14768982 14.17156696]
[195.62348938 20.65973282]
[182.09930420 27.14789772]
[168.57511902 33.63606262]
[155.05091858 40.12422943]
[143.64990234 49.87187958]
[135.13880920 62.22345352]
[143.38154602 72.07428741]
[148.93544006 83.65599060]
[151.45625305 96.25070953]
[150.78776550 109.07781219]
[146.97138977 121.34226227]
[140.24368286 132.28390503]
[131.02162170 141.22454834]
[119.87680054 147.61004639]
[107.50000000 151.04463196]
[107.50000000 166.04463196]
[107.50000000 181.04463196]
[107.50000000 196.04463196]
[107.50000000 211.04463196]
[107.50000000 226.04463196]
[107.50000000 241.04463196]
[107.50000000 256.04461670]
[107.50000000 271.04461670]
[107.50000000 286.04461670]
[122.03988647 290.10592651]
[134.94427490 297.94046021]
[145.25555420 308.96676636]
[152.20857239 322.36669922]
[155.28736877 337.14587402]
[154.26348877 352.20755005]
[149.21287537 366.43408203]
[140.51036072 378.76974487]
[128.80169678 388.29916382]
[114.95575714 394.31518555]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 54]
[29 53]
[30 51]
[31 50]
[32 49]
[58 122]
[59 121]
[61 84]
[62 83]
[63 82]
[64 81]
[85 120]
[86 119]
[87 118]
[88 117]
[89 116]
[90 111]
[91 110]
[92 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
