%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAAUCAUCGGGGGGGGGGCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCUCUUCCUxxxxxxxxxxCUACACAUCGGGCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCCCCCCCCCCCUGAAACAUC\
) } def
/len { sequence length } bind def

/coor [
[83.50619507 370.53369141]
[70.28599548 363.26123047]
[59.39919281 352.81423950]
[51.58806229 339.90496826]
[47.38518143 325.41366577]
[47.07711029 310.32833862]
[50.68485260 295.67749023]
[57.96242523 282.46011353]
[68.41363525 271.57733154]
[81.32589722 263.77120972]
[95.81883240 259.57391357]
[95.50677490 244.57716370]
[95.19471741 229.58041382]
[94.88265991 214.58364868]
[94.57060242 199.58689880]
[94.25855255 184.59014893]
[93.94649506 169.59339905]
[93.63443756 154.59663391]
[93.32238007 139.59988403]
[93.01032257 124.60313416]
[87.57091522 119.43952942]
[80.65493774 132.75003052]
[80.07306671 147.73873901]
[70.48471832 159.27406311]
[55.85489273 162.58587646]
[42.23334122 156.30468750]
[35.25288391 143.02789307]
[37.80008698 128.24574280]
[48.82162857 118.07099915]
[63.75914764 116.71095276]
[76.69208527 109.11232758]
[71.25267792 103.94872284]
[56.25997925 104.41676331]
[41.26728058 104.88480377]
[26.27458572 105.35285187]
[10.63182831 111.89047241]
[0.01935445 98.66883087]
[9.78646088 84.81098175]
[25.80654335 90.36015320]
[40.79924011 89.89211273]
[55.79193497 89.42406464]
[70.78462982 88.95602417]
[81.33592224 78.29440308]
[81.64797974 63.29764557]
[70.98739624 51.94028473]
[71.51749420 36.73588562]
[82.41070557 26.64264107]
[82.72276306 11.64588737]
[83.03482056 -3.35086632]
[71.93955994 6.74345112]
[56.95962906 7.51915693]
[44.88108444 -1.37515163]
[41.17562103 -15.91026592]
[47.52185059 -29.50163651]
[61.04487228 -35.99224091]
[75.61862183 -32.44176865]
[84.64116669 -20.45823669]
[87.12628937 -35.25094223]
[78.22676849 -48.03516388]
[80.95775604 -63.00167084]
[93.20040131 -71.40721893]
[95.68552399 -86.19992828]
[98.17063904 -100.99263000]
[100.65576172 -115.78533936]
[103.14087677 -130.57804871]
[96.29193878 -141.55738831]
[98.70897675 -153.86091614]
[108.55155182 -160.96240234]
[111.34387970 -175.70019531]
[97.81417847 -182.39720154]
[86.59378815 -192.49697876]
[78.51535034 -205.25006104]
[74.17832947 -219.71011353]
[73.90455627 -234.80407715]
[77.71436310 -249.41188049]
[85.32501984 -262.44952393]
[96.17176819 -272.94955444]
[109.44971466 -280.13278198]
[124.17354584 -283.46615601]
[139.25065613 -282.70233154]
[153.56221008 -277.89797974]
[166.04621887 -269.40963745]
[175.77627563 -257.86715698]
[182.03033447 -244.12709045]
[184.34431458 -229.20904541]
[182.54650879 -214.22003174]
[176.77030945 -200.27233887]
[167.44435120 -188.40097046]
[155.26069641 -179.48687744]
[141.12345886 -174.19152832]
[126.08168030 -172.90788269]
[123.28936005 -158.17007446]
[129.98318481 -141.97770691]
[117.93358612 -128.09292603]
[115.44846344 -113.30022430]
[112.96334839 -98.50751495]
[110.47822571 -83.71480560]
[107.99311066 -68.92210388]
[116.81700134 -56.97745514]
[114.50746155 -41.94014359]
[101.91899109 -32.76582336]
[99.43387604 -17.97311783]
[98.03157043 -3.03881025]
[97.71951294 11.95794392]
[97.40745544 26.95469666]
[107.87137604 37.49234772]
[107.76853943 52.70563507]
[96.64472961 63.60970306]
[96.33267975 78.60645294]
[104.22124481 77.98323822]
[112.06273651 80.26461792]
[118.79170227 85.32624054]
[123.43016815 92.65552521]
[125.22766876 101.40006256]
[139.35247803 106.44882202]
[153.47727966 111.49758148]
[167.60208130 116.54633331]
[181.72688293 121.59509277]
[195.90255737 114.60755920]
[210.84013367 119.76938629]
[217.67739868 134.01814270]
[212.35794067 148.90031433]
[198.03768921 155.58654785]
[183.21258545 150.11004639]
[176.67813110 135.71989441]
[162.55332947 130.67114258]
[148.42852783 125.62238312]
[134.30371094 120.57362366]
[120.17891693 115.52487183]
[108.00708008 124.29107666]
[108.31913757 139.28782654]
[108.63118744 154.28457642]
[108.94324493 169.28134155]
[109.25530243 184.27809143]
[109.56735992 199.27484131]
[109.87941742 214.27159119]
[110.19147491 229.26835632]
[110.50352478 244.26510620]
[110.81558228 259.26187134]
[125.47057343 262.85263062]
[138.69638062 270.11489868]
[149.59124756 280.55346680]
[157.41235352 293.45669556]
[161.62641907 307.94476318]
[161.94613647 323.02984619]
[158.34971619 337.68347168]
[151.08235168 350.90646362]
[140.63955688 361.79730225]
[127.73332214 369.61340332]
[113.24362946 373.82189941]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[32 42]
[33 41]
[34 40]
[35 39]
[43 109]
[44 108]
[47 105]
[48 104]
[49 103]
[57 102]
[58 101]
[61 98]
[62 97]
[63 96]
[64 95]
[65 94]
[68 92]
[69 91]
[114 129]
[115 128]
[116 127]
[117 126]
[118 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
