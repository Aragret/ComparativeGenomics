%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAGUCUACGGGGGGGGGGCCUCCCUUAGCAGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACxxxxxxxxxxUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCUAGGCUCACUACCCCCCCCCCAACAUUCUAC\
) } def
/len { sequence length } bind def

/coor [
[80.29917145 407.51538086]
[66.45323944 401.49935913]
[54.74457550 391.96994019]
[46.04204941 379.63427734]
[40.99144745 365.40774536]
[39.96755600 350.34606934]
[43.04635620 335.56689453]
[49.99937820 322.16699219]
[60.31066132 311.14065552]
[73.21504211 303.30615234]
[87.75492859 299.24481201]
[87.75492859 284.24481201]
[87.75492859 269.24481201]
[87.75492859 254.24482727]
[87.75492859 239.24482727]
[87.75492859 224.24482727]
[87.75492859 209.24482727]
[87.75492859 194.24482727]
[87.75492859 179.24482727]
[87.75492859 164.24482727]
[76.87207031 174.56777954]
[61.91152191 175.65495300]
[49.65055466 167.01385498]
[45.64350891 152.55897522]
[51.70561600 138.83851624]
[65.09068298 132.06799316]
[79.73513794 135.31449890]
[89.00503540 147.10774231]
[91.18186951 132.26654053]
[93.35871124 117.42533112]
[84.34117889 105.43849945]
[69.47813416 103.41616058]
[54.61508560 101.39382935]
[39.75203705 99.37149048]
[24.88899040 97.34915924]
[16.06599045 109.85568237]
[2.43625689 116.81908417]
[-12.86819458 116.63922882]
[-26.33051300 109.35742950]
[-34.85715866 96.64700317]
[-36.48876572 81.42871094]
[-30.85040855 67.19960022]
[-19.23773766 57.22942734]
[-4.31925964 53.80924988]
[10.47686863 57.72501373]
[21.75060463 68.07689667]
[26.91132545 82.48611450]
[41.77437210 84.50844574]
[56.63742065 86.53077698]
[71.50046539 88.55311584]
[86.36351013 90.57544708]
[99.95446777 84.22831726]
[107.94438171 71.53339386]
[115.93429565 58.83845901]
[123.92420959 46.14353180]
[131.91412354 33.44860077]
[139.90405273 20.75367165]
[128.02981567 11.56900883]
[117.09746552 1.28118205]
[107.20909119 -10.01375294]
[98.45700836 -22.21033478]
[90.92294312 -35.19468689]
[84.67723846 -48.84556961]
[79.77819824 -63.03553009]
[76.27158356 -77.63207245]
[74.19012451 -92.49891663]
[73.55325317 -107.49725342]
[74.36692047 -122.48703003]
[76.62353516 -137.32829285]
[80.30201721 -151.88247681]
[85.36802673 -166.01368713]
[91.77426147 -179.58998108]
[99.46089935 -192.48458862]
[108.35618591 -204.57713318]
[118.37705231 -215.75468445]
[129.42993164 -225.91290283]
[141.41165161 -234.95690918]
[154.21029663 -242.80229187]
[167.70640564 -249.37577820]
[181.77394104 -254.61599731]
[196.28155518 -258.47402954]
[211.09381104 -260.91384888]
[226.07240295 -261.91265869]
[241.07745361 -261.46115112]
[255.96887207 -259.56353760]
[270.60763550 -256.23754883]
[284.85705566 -251.51420593]
[298.58404541 -245.43763733]
[311.66049194 -238.06457520]
[323.96429443 -229.46386719]
[335.38055420 -219.71580505]
[345.80267334 -208.91140747]
[355.13333130 -197.15155029]
[363.28546143 -184.54606628]
[370.18289185 -171.21260071]
[375.76123047 -157.27569580]
[379.96841431 -142.86544800]
[382.76516724 -128.11642456]
[384.12536621 -113.16633606]
[384.03628540 -98.15474701]
[382.49877930 -83.22184753]
[379.52719116 -68.50704956]
[375.14929199 -54.14775085]
[369.40594482 -40.27802277]
[362.35073853 -27.02736664]
[354.04962158 -14.51949978]
[344.58004761 -2.87121129]
[334.03042603 7.80874014]
[322.49929810 17.42063713]
[310.09432983 25.87473297]
[296.93127441 33.09209061]
[283.13311768 39.00532532]
[268.82867432 43.55922318]
[254.15147400 46.71126556]
[239.23857117 48.43202209]
[224.22921753 48.70542526]
[209.26354980 47.52892303]
[194.48129272 44.91349792]
[180.02047729 40.88357544]
[166.01611328 35.47677612]
[152.59896851 28.74358749]
[144.60905457 41.43851852]
[136.61914062 54.13344574]
[128.62922668 66.82837677]
[120.63931274 79.52330780]
[112.64939117 92.21823883]
[117.18086243 105.53276062]
[108.19991302 119.60216522]
[106.02307892 134.44337463]
[103.84623718 149.28457642]
[102.75492859 164.24482727]
[102.75492859 179.24482727]
[102.75492859 194.24482727]
[102.75492859 209.24482727]
[102.75492859 224.24482727]
[102.75492859 239.24482727]
[102.75492859 254.24482727]
[102.75492859 269.24481201]
[102.75492859 284.24481201]
[102.75492859 299.24481201]
[117.29481506 303.30615234]
[130.19920349 311.14065552]
[140.51048279 322.16699219]
[147.46350098 335.56689453]
[150.54229736 350.34606934]
[149.51841736 365.40774536]
[144.46780396 379.63427734]
[135.76528931 391.96994019]
[124.05662537 401.49935913]
[110.21068573 407.51538086]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 130]
[29 129]
[30 128]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[52 126]
[53 125]
[54 124]
[55 123]
[56 122]
[57 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
