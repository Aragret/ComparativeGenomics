%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUAACAAUGGGGGGGGGGUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAUUUCxxxxxxxxxxUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGCCCCCCCCCCUAAUAACCAU\
) } def
/len { sequence length } bind def

/coor [
[77.82378387 394.07934570]
[63.97784424 388.06332397]
[52.26918411 378.53390503]
[43.56665802 366.19824219]
[38.51605606 351.97171021]
[37.49216461 336.91003418]
[40.57096481 322.13088989]
[47.52398682 308.73095703]
[57.83526993 297.70462036]
[70.73965454 289.87011719]
[85.27954102 285.80880737]
[85.27954102 270.80880737]
[85.27954102 255.80879211]
[85.27954102 240.80879211]
[85.27954102 225.80879211]
[85.27954102 210.80879211]
[85.27954102 195.80879211]
[85.27954102 180.80879211]
[85.27954102 165.80879211]
[85.27954102 150.80879211]
[74.83972931 140.03799438]
[59.84703064 139.56994629]
[44.85433197 139.10189819]
[36.11420059 141.97625732]
[29.55551529 138.46495056]
[14.57579994 137.68510437]
[-0.40391418 136.90525818]
[-15.38362885 136.12541199]
[-30.36334229 135.34556580]
[-45.34305573 134.56571960]
[-50.97789001 148.62016296]
[-60.87276840 160.08184814]
[-73.95437622 167.70747375]
[-88.80371094 170.66990662]
[-103.81003571 168.64776611]
[-117.34556580 161.86042786]
[-127.94207764 151.04411316]
[-134.45013428 137.37210083]
[-136.16380310 122.32743073]
[-132.89718628 107.54203033]
[-125.00462341 94.61972046]
[-113.34223938 84.96220398]
[-99.17508698 79.61706543]
[-84.03990936 79.16410065]
[-69.57846069 83.65244293]
[-57.35940933 92.59523773]
[-48.70818710 105.02242279]
[-44.56321335 119.58600616]
[-29.58349800 120.36585236]
[-14.60378361 121.14569855]
[0.37593094 121.92553711]
[15.35564518 122.70538330]
[30.33535957 123.48522949]
[45.32237625 124.10920715]
[60.31507111 124.57724762]
[75.30776978 125.04529572]
[67.17910767 105.01515198]
[72.43079376 85.32199860]
[87.51676178 73.53175354]
[105.42733002 73.24948883]
[112.33432770 59.93433380]
[111.05231476 41.59486008]
[126.13584137 32.67930222]
[132.76434326 19.22333527]
[139.39283752 5.76736975]
[146.02133179 -7.68859577]
[152.64984131 -21.14456177]
[159.27833557 -34.60052490]
[165.90682983 -48.05649185]
[153.14825439 -40.16860962]
[138.54029846 -36.76164246]
[123.60858917 -38.19141769]
[109.91260529 -44.30860901]
[98.88274384 -54.47433853]
[91.67095184 -67.62690735]
[89.03041840 -82.39266205]
[91.23693848 -97.22948456]
[98.06004333 -110.58782196]
[108.78714752 -121.07254028]
[122.29791260 -127.58861542]
[137.18128967 -129.45552063]
[151.88284302 -126.47827148]
[164.86718750 -118.96781158]
[174.77821350 -107.70852661]
[180.58084106 -93.87633514]
[181.66903687 -78.91586304]
[177.92794800 -64.38681030]
[188.80677795 -74.71401215]
[199.68559265 -85.04121399]
[210.56442261 -95.36842346]
[207.57725525 -110.50382233]
[213.26835632 -124.84310150]
[225.82171631 -133.81065369]
[241.23159790 -134.54493713]
[254.58076477 -126.81168365]
[261.60952759 -113.07852173]
[260.07507324 -97.72766113]
[250.46702576 -85.65750122]
[235.85125732 -80.71958923]
[220.89163208 -84.48959351]
[210.01280212 -74.16239166]
[199.13397217 -63.83518600]
[188.25515747 -53.50798035]
[179.36279297 -41.42799377]
[172.73429871 -27.97202873]
[166.10580444 -14.51606274]
[159.47731018 -1.06009734]
[152.84880066 12.39586830]
[146.22030640 25.85183334]
[139.59181213 39.30780029]
[143.18804932 50.89979553]
[137.72305298 62.18486786]
[125.64948273 66.84133148]
[118.74248505 80.15648651]
[127.34328461 89.57195282]
[131.11970520 102.65873718]
[128.56579590 116.92211914]
[119.46263123 129.29469299]
[132.98681641 135.78285217]
[146.06632996 127.60178375]
[161.49224854 127.81358337]
[174.34219360 136.35069275]
[180.51583862 150.48892212]
[178.04315186 165.71684265]
[167.71319580 177.17526245]
[152.82218933 181.20783997]
[138.12182617 176.52781677]
[128.30291748 164.62854004]
[126.49865723 149.30705261]
[112.97446442 142.81887817]
[100.27954102 150.80879211]
[100.27954102 165.80879211]
[100.27954102 180.80879211]
[100.27954102 195.80879211]
[100.27954102 210.80879211]
[100.27954102 225.80879211]
[100.27954102 240.80879211]
[100.27954102 255.80879211]
[100.27954102 270.80880737]
[100.27954102 285.80880737]
[114.81942749 289.87011719]
[127.72380829 297.70462036]
[138.03509521 308.73095703]
[144.98811340 322.13088989]
[148.06690979 336.91003418]
[147.04301453 351.97171021]
[141.99241638 366.19824219]
[133.28988647 378.53390503]
[121.58123016 388.06332397]
[107.73529053 394.07934570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 56]
[22 55]
[23 54]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 48]
[60 114]
[61 113]
[63 110]
[64 109]
[65 108]
[66 107]
[67 106]
[68 105]
[69 104]
[87 103]
[88 102]
[89 101]
[90 100]
[118 130]
[119 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
