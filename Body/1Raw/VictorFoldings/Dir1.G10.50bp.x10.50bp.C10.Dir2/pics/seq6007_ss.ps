%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAACAGCUAGGGGGGGGGGAGGACUGCAAAACCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACUUUxxxxxxxxxxACCUAAAAUCGCUCAUUGCAUACUCUUCAAUCAGCCACAUAGCCCUCGUACCCCCCCCCCGUAACAGCCA\
) } def
/len { sequence length } bind def

/coor [
[92.13728333 436.12377930]
[78.29134369 430.10775757]
[66.58267975 420.57833862]
[57.88015747 408.24267578]
[52.82955551 394.01614380]
[51.80566406 378.95446777]
[54.88446045 364.17529297]
[61.83748245 350.77539062]
[72.14876556 339.74905396]
[85.05314636 331.91455078]
[99.59303284 327.85321045]
[99.59303284 312.85321045]
[99.59303284 297.85321045]
[99.59303284 282.85321045]
[99.59303284 267.85321045]
[99.59303284 252.85322571]
[99.59303284 237.85322571]
[99.59303284 222.85322571]
[99.59303284 207.85322571]
[99.59303284 192.85322571]
[98.96905518 177.86621094]
[97.72218323 162.91812134]
[96.47531128 147.97003174]
[77.69645691 142.61572266]
[62.59362411 130.23756409]
[53.65603256 112.87572479]
[38.75413132 114.58841705]
[23.85222816 116.30110931]
[8.95032501 118.01379395]
[3.49095440 132.31253052]
[-7.99569941 142.42764282]
[-22.87008858 146.03474426]
[-37.71418381 142.30494690]
[-49.11692429 132.09533691]
[-54.45804596 117.75200653]
[-52.51019287 102.57095337]
[-43.72096634 90.04066467]
[-30.11007309 83.04051208]
[-14.80519295 83.17907715]
[-1.32327414 90.42452240]
[7.23763514 103.11189270]
[22.13953781 101.39920807]
[37.04143906 99.68651581]
[51.94334412 97.97382355]
[55.09485626 82.76411438]
[62.92928696 69.35183716]
[74.62962341 59.13569260]
[88.97569275 53.18106842]
[104.47143555 52.10893631]
[108.17759705 37.57400131]
[111.88375854 23.03906441]
[115.58992004 8.50412750]
[117.92102051 -6.31363058]
[111.05957794 -20.56954575]
[119.57567596 -32.78942108]
[120.51130676 -47.76021194]
[121.44692993 -62.73100281]
[122.38256073 -77.70179749]
[112.34403992 -86.73980713]
[109.40710449 -99.72450256]
[114.42977142 -111.84255981]
[125.36145782 -118.73422241]
[126.60832977 -133.68231201]
[127.85520172 -148.63040161]
[113.49555969 -153.18542480]
[100.50978851 -160.82202148]
[89.54926300 -171.15715027]
[81.16375732 -183.67237854]
[75.77388000 -197.73995972]
[73.64998627 -212.65426636]
[74.89860535 -227.66722107]
[79.45711517 -242.02577209]
[87.09685516 -255.00967407]
[97.43463135 -265.96771240]
[109.95188904 -274.35018921]
[124.02078247 -279.73666382]
[138.93560791 -281.85693359]
[153.94825745 -280.60467529]
[168.30569458 -276.04269409]
[181.28776550 -268.39978027]
[192.24327087 -258.05935669]
[200.62271118 -245.54006958]
[206.00578308 -231.46987915]
[208.12245178 -216.55453491]
[206.86654663 -201.54219055]
[202.30108643 -187.18586731]
[194.65504456 -174.20564270]
[184.31196594 -163.25263977]
[171.79064941 -154.87623596]
[157.71914673 -149.49658203]
[142.80328369 -147.38352966]
[141.55641174 -132.43544006]
[140.30953979 -117.48735046]
[151.70489502 -105.15837097]
[150.66842651 -88.06422424]
[137.35334778 -76.76616669]
[136.41772461 -61.79537582]
[135.48210144 -46.82458115]
[134.54646301 -31.85379219]
[141.47483826 -18.66868591]
[132.89181519 -5.37800217]
[143.35217285 -16.12885284]
[157.93013000 -19.66201401]
[172.15188599 -14.89320087]
[181.65296936 -3.28590250]
[183.51762390 11.59774876]
[177.17359924 25.19015121]
[164.56781006 33.31996918]
[149.56880188 33.49226379]
[136.77957153 25.65416336]
[130.12484741 12.21028900]
[126.41869354 26.74522400]
[122.71253204 41.28016281]
[119.00637054 55.81509781]
[129.33016968 61.87797165]
[137.83677673 70.30274963]
[143.99914551 80.56746674]
[147.43548584 92.03615570]
[147.93289185 103.99826050]
[145.46054077 115.71263885]
[140.17161560 126.45352173]
[132.39379883 135.55543518]
[122.60898590 142.45446777]
[111.42339325 146.72315979]
[112.67027283 161.67124939]
[113.91714478 176.61933899]
[116.61714935 180.20701599]
[117.86717987 184.08110046]
[117.76007843 187.73765564]
[116.54669952 190.75785828]
[114.59303284 192.85322571]
[114.59303284 207.85322571]
[114.59303284 222.85322571]
[114.59303284 237.85322571]
[114.59303284 252.85322571]
[114.59303284 267.85321045]
[114.59303284 282.85321045]
[114.59303284 297.85321045]
[114.59303284 312.85321045]
[114.59303284 327.85321045]
[129.13291931 331.91455078]
[142.03730774 339.74905396]
[152.34858704 350.77539062]
[159.30160522 364.17529297]
[162.38040161 378.95446777]
[161.35652161 394.01614380]
[156.30590820 408.24267578]
[147.60339355 420.57833862]
[135.89472961 430.10775757]
[122.04878998 436.12377930]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 126]
[22 125]
[23 124]
[26 44]
[27 43]
[28 42]
[29 41]
[49 114]
[50 113]
[51 112]
[52 111]
[53 101]
[55 99]
[56 98]
[57 97]
[58 96]
[62 93]
[63 92]
[64 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
