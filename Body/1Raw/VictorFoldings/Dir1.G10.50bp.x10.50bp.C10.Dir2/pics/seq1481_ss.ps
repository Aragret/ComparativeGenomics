%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCUUAAAACGGGGGGGGGGUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAxxxxxxxxxxAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAUAAGCCUGCGUCCCCCCCCCCCAGAUUAAAAC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 374.61828613]
[71.01555634 369.06527710]
[58.81560135 360.19894409]
[49.20452881 348.57662964]
[42.78650284 334.92892456]
[39.96496582 320.11373901]
[40.91728210 305.06234741]
[45.58358765 290.72094727]
[53.67055511 277.99099731]
[64.66983032 267.67269897]
[77.88998413 260.41473389]
[92.50000000 256.67330933]
[92.50000000 241.67329407]
[92.50000000 226.67329407]
[92.50000000 211.67329407]
[92.50000000 196.67329407]
[92.50000000 181.67329407]
[92.50000000 166.67329407]
[92.50000000 151.67329407]
[92.50000000 136.67329407]
[92.50000000 121.67329407]
[80.80126190 114.42437744]
[74.93972778 101.28025818]
[77.58226013 86.49320221]
[88.51007080 75.28902435]
[73.79454803 78.19649506]
[59.07902527 81.10396576]
[47.04030991 91.36943817]
[33.05467987 86.24581909]
[18.33915710 89.15329742]
[3.62363386 92.06076813]
[-8.35680389 103.25903320]
[-23.96406364 98.22460175]
[-27.14273453 82.13646698]
[-14.62287235 71.54472351]
[0.71616161 77.34524536]
[15.43168449 74.43777466]
[30.14720726 71.53029633]
[41.13337326 61.47279358]
[56.17155457 66.38844299]
[70.88707733 63.48097229]
[85.60260010 60.57350159]
[70.77947998 62.87027740]
[56.36012268 58.73722076]
[45.00446320 48.93676376]
[38.80728149 35.27678680]
[38.91176605 20.27715111]
[45.29864883 6.70483637]
[56.78973770 -2.93647480]
[71.26527405 -6.86824942]
[86.05495453 -4.36519384]
[98.43053436 4.11095381]
[106.10908508 16.99659920]
[107.67414856 31.91472816]
[102.83860016 46.11077881]
[108.25722504 32.12369537]
[113.67584991 18.13661385]
[119.09447479 4.14952946]
[124.51309967 -9.83755398]
[129.93171692 -23.82463646]
[123.79460144 -38.14153290]
[129.48910522 -52.24923325]
[143.17590332 -58.01181030]
[148.59452820 -71.99889374]
[154.01315308 -85.98597717]
[159.14346313 -100.08136749]
[163.98327637 -114.27912140]
[152.21394348 -104.97950745]
[137.90971375 -100.46407318]
[122.93421936 -101.32112885]
[109.23854065 -107.43899536]
[98.60700989 -118.02061462]
[92.42477417 -131.68736267]
[91.49726868 -146.65866089]
[95.94535065 -160.98397827]
[105.18948364 -172.79692078]
[118.02530670 -180.55847168]
[132.78050232 -183.25740051]
[147.53268433 -180.54208374]
[160.35987854 -172.76626587]
[169.59088135 -160.94303894]
[174.02302551 -146.61279297]
[173.07894897 -131.64279175]
[181.99510193 -143.70523071]
[190.91125488 -155.76765442]
[199.82740784 -167.83009338]
[208.74356079 -179.89251709]
[217.65969849 -191.95495605]
[219.64062500 -207.65165710]
[233.42788696 -213.28732300]
[237.98059082 -229.61854553]
[254.93389893 -229.76470947]
[259.76748657 -213.51438904]
[245.49031067 -204.37117004]
[244.14714050 -189.53724670]
[229.72213745 -183.03880310]
[220.80598450 -170.97636414]
[211.88983154 -158.91394043]
[202.97367859 -146.85150146]
[194.05754089 -134.78907776]
[185.14138794 -122.72664642]
[178.18103027 -109.43930054]
[173.34121704 -95.24154663]
[174.63668823 -90.58634186]
[172.97744751 -85.06956482]
[168.00024414 -80.56735229]
[162.58161926 -66.58026886]
[157.16299438 -52.59318542]
[163.39543152 -39.11385727]
[158.09942627 -24.85177612]
[143.91880798 -18.40601158]
[138.50018311 -4.41892862]
[133.08155823 9.56815434]
[127.66293335 23.55523872]
[122.24430847 37.54232025]
[116.82568359 51.52940369]
[122.95485687 65.22003174]
[136.99682617 70.49477386]
[151.03880310 75.76951599]
[165.08078003 81.04425812]
[179.36676025 74.28507233]
[194.21958923 79.68591309]
[200.82734680 94.04254913]
[195.26977539 108.83744812]
[180.84408569 115.29305267]
[166.10877991 109.57937622]
[159.80604553 95.08623505]
[145.76406860 89.81149292]
[131.72209167 84.53675079]
[117.68011475 79.26200867]
[124.65824127 104.65055084]
[107.50000000 121.67329407]
[107.50000000 136.67329407]
[107.50000000 151.67329407]
[107.50000000 166.67329407]
[107.50000000 181.67329407]
[107.50000000 196.67329407]
[107.50000000 211.67329407]
[107.50000000 226.67329407]
[107.50000000 241.67329407]
[107.50000000 256.67330933]
[122.11001587 260.41473389]
[135.33016968 267.67269897]
[146.32945251 277.99099731]
[154.41641235 290.72094727]
[159.08271790 305.06234741]
[160.03503418 320.11373901]
[157.21350098 334.92892456]
[150.79547119 348.57662964]
[141.18440247 360.19894409]
[128.98443604 369.06527710]
[114.96250153 374.61828613]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[25 42]
[26 41]
[27 40]
[29 38]
[30 37]
[31 36]
[55 116]
[56 115]
[57 114]
[58 113]
[59 112]
[60 111]
[63 108]
[64 107]
[65 106]
[66 103]
[67 102]
[83 101]
[84 100]
[85 99]
[86 98]
[87 97]
[88 96]
[90 94]
[117 130]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
