%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUCUCCAUAGGGGGGGGGGCCCAUUACAAUCUCCAGCAUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUxxxxxxxxxxUCCACCCCUUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCCCCCCCCCCCUUUCUCCAUA\
) } def
/len { sequence length } bind def

/coor [
[80.31699371 362.40026855]
[68.43272400 353.12515259]
[59.11401367 341.27505493]
[52.90264893 327.53887939]
[50.15974808 312.71527100]
[51.04477692 297.66598511]
[55.50628281 283.26605225]
[63.28488159 270.35263062]
[73.92832947 259.67645264]
[86.81784058 251.85827637]
[101.20402527 247.35260010]
[100.26840210 232.38182068]
[99.33277130 217.41102600]
[98.39714050 202.44023132]
[97.46151733 187.46943665]
[96.52588654 172.49864197]
[95.59025574 157.52786255]
[94.65463257 142.55706787]
[93.71900177 127.58627319]
[92.78337097 112.61548615]
[88.28928375 126.92642975]
[77.85707855 137.70460510]
[63.70032120 142.66305542]
[48.82285690 140.74966431]
[36.38146210 132.37042236]
[29.01600838 119.30328369]
[28.28933525 104.32089996]
[34.35563278 90.60229492]
[45.92772675 81.05836487]
[60.55018616 77.71417236]
[75.12035370 81.27931213]
[86.54653931 90.99716187]
[79.36402893 77.82857513]
[72.18152618 64.65999603]
[61.96804428 53.67432785]
[49.35691452 45.55278778]
[36.74578857 37.43124390]
[24.05085754 29.44132805]
[11.27350044 21.58390236]
[-1.74280930 14.12899303]
[-14.98539448 7.08385801]
[-28.22797966 0.03872297]
[-39.93734741 9.73197651]
[-54.46630859 14.20161629]
[-69.59930420 12.76605511]
[-83.02866364 5.64420557]
[-92.70651245 -6.07790232]
[-97.15703583 -20.61273193]
[-95.70156860 -35.74382782]
[-88.56205750 -49.16380692]
[-76.82722473 -58.82622147]
[-62.28655624 -63.25762177]
[-47.15738678 -61.78224945]
[-33.74681091 -54.62509537]
[-24.09984398 -42.87756348]
[-19.68757439 -28.33107758]
[-21.18284607 -13.20386219]
[-7.94025993 -6.15872765]
[5.30232573 0.88640720]
[8.81760788 0.17207220]
[12.85660076 1.16616285]
[16.59325218 4.09700298]
[19.13092613 8.80654621]
[31.90828323 16.66397095]
[39.30129242 17.49406052]
[44.86732864 24.82011604]
[57.47845840 32.94165802]
[70.08958435 41.06320190]
[63.52771759 27.57461739]
[60.31790924 12.92207146]
[60.63978577 -2.07447481]
[64.47533417 -16.57580566]
[71.60991669 -29.77041626]
[81.64427185 -40.91992950]
[94.01687622 -49.40041351]
[108.03535461 -54.73729706]
[122.91522217 -56.63191986]
[137.82379150 -54.97826385]
[151.92677307 -49.86886215]
[164.43495178 -41.58964539]
[174.64836121 -30.60392189]
[181.99546814 -17.52645683]
[186.06510925 -3.08907390]
[186.62954712 11.90030289]
[183.65719604 26.60285950]
[177.31439209 40.19583130]
[167.95610046 51.91854858]
[156.10597229 61.11500168]
[142.42718506 67.27055359]
[127.68521118 70.04073334]
[112.70499420 69.27052307]
[98.32485199 65.00302124]
[85.35010529 57.47748566]
[92.53261566 70.64606476]
[99.71512604 83.81465149]
[112.95771027 90.85978699]
[127.89201355 89.45748138]
[142.82632446 88.05517578]
[157.76063538 86.65287781]
[172.69494629 85.25057220]
[175.37918091 70.39468384]
[181.97299194 56.81439209]
[191.98706055 45.51744843]
[204.67828369 37.34215927]
[219.10488892 32.89518356]
[234.19633484 32.50652313]
[248.83271790 36.20501328]
[261.92791748 43.71620178]
[272.51022339 54.48270798]
[279.79431152 67.70558929]
[283.23968506 82.40361786]
[282.59063721 97.48609924]
[277.89538574 111.83382416]
[269.50228882 124.38208008]
[258.03424072 134.19972229]
[244.34217834 140.55819702]
[229.44218445 142.98567200]
[214.43992615 141.30201721]
[200.44865417 135.63215637]
[188.50665283 126.39685059]
[179.50006104 114.28141022]
[174.09724426 100.18487549]
[159.16293335 101.58718109]
[144.22862244 102.98948669]
[129.29432678 104.39179230]
[114.36001587 105.79409027]
[111.43264008 109.32317352]
[107.75416565 111.67985535]
[108.68978882 126.65065002]
[109.62541962 141.62144470]
[110.56105042 156.59222412]
[111.49668121 171.56301880]
[112.43230438 186.53381348]
[113.36793518 201.50460815]
[114.30356598 216.47540283]
[115.23918915 231.44618225]
[116.17481995 246.41697693]
[131.01005554 249.09640503]
[144.77268982 255.24890137]
[156.66258240 264.51678467]
[165.98846436 276.36126709]
[172.20816040 290.09365845]
[174.96005249 304.91561890]
[174.08415222 319.96542358]
[169.63137817 334.36807251]
[161.86059570 347.28622437]
[151.22363281 357.96881104]
[138.33885193 365.79483032]
[123.95540619 370.30920410]
[108.90950012 371.24954224]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[32 95]
[33 94]
[34 93]
[35 68]
[36 67]
[37 66]
[38 64]
[39 63]
[40 59]
[41 58]
[42 57]
[96 126]
[97 125]
[98 124]
[99 123]
[100 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
