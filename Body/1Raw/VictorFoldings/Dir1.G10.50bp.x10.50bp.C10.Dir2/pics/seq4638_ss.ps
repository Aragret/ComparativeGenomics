%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUACCCUUCGGGGGGGGGGCCGUACUAAUUAAUCCCCUGGCCCAACCCGUCAUCUACUCUACCAUCUUUxxxxxxxxxxUACCGCUAACAACCUAUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGAACCCCCCCCCCUUAUAUCCUUC\
) } def
/len { sequence length } bind def

/coor [
[86.44497681 449.79513550]
[72.42302704 444.24212646]
[60.22307205 435.37579346]
[50.61199951 423.75347900]
[44.19397354 410.10580444]
[41.37244034 395.29061890]
[42.32475281 380.23922729]
[46.99105835 365.89779663]
[55.07802582 353.16784668]
[66.07730103 342.84957886]
[79.29746246 335.59161377]
[93.90747070 331.85015869]
[93.90747070 316.85015869]
[93.90747070 301.85015869]
[93.90747070 286.85015869]
[93.90747070 271.85015869]
[93.90747070 256.85015869]
[93.90747070 241.85015869]
[93.90747070 226.85015869]
[93.90747070 211.85015869]
[93.90747070 196.85015869]
[84.31684113 182.18508911]
[93.57501221 166.30061340]
[85.57802582 153.73487854]
[93.03035736 139.77876282]
[92.72237396 124.78192139]
[92.41439819 109.78507996]
[84.38137054 122.45277405]
[72.17309570 131.16816711]
[57.58302307 134.65093994]
[42.75447845 132.38946533]
[29.86583328 124.71595764]
[20.81047058 112.75767517]
[16.91865730 98.27134705]
[18.76211548 83.38505554]
[26.07003403 70.28565216]
[37.76885223 60.89749146]
[52.13997650 56.59972000]
[67.07223511 58.02370071]
[80.37202454 64.96024323]
[90.08555603 76.39034271]
[94.78579712 90.63418579]
[98.74240875 76.16542053]
[102.69901276 61.69665146]
[106.65562439 47.22788239]
[100.94319916 35.61875534]
[104.58024597 23.62112045]
[115.08259583 17.54142189]
[118.74130249 2.99446750]
[121.79969788 -11.69042969]
[124.85809326 -26.37532806]
[110.54534149 -30.90700150]
[96.76448822 -36.86344147]
[83.65695953 -44.18352509]
[71.35725403 -52.79213715]
[59.99158096 -62.60093689]
[49.67658234 -73.50926971]
[40.51809692 -85.40520477]
[32.61011124 -98.16666412]
[26.03377724 -111.66268921]
[20.85657120 -125.75479889]
[17.13162422 -140.29838562]
[14.89716053 -155.14419556]
[14.17610741 -170.13989258]
[14.97586536 -185.13160706]
[17.28822708 -199.96548462]
[21.08946609 -214.48931885]
[26.34057236 -228.55406189]
[32.98765945 -242.01538086]
[40.96252441 -254.73515320]
[50.18332672 -266.58285522]
[60.55544281 -277.43688965]
[71.97244263 -287.18588257]
[84.31716919 -295.72982788]
[97.46295166 -302.98098755]
[111.27487183 -308.86502075]
[125.61122131 -313.32150269]
[140.32487488 -316.30471802]
[155.26483154 -317.78402710]
[170.27781677 -317.74429321]
[185.20973206 -316.18591309]
[199.90739441 -313.12484741]
[214.21994019 -308.59255981]
[228.00053406 -302.63549805]
[241.10774231 -295.31484985]
[253.40707397 -286.70568848]
[264.77230835 -276.89639282]
[275.08682251 -265.98760986]
[284.24478149 -254.09127808]
[292.15222168 -241.32946777]
[298.72796631 -227.83314514]
[303.90454102 -213.74081421]
[307.62884521 -199.19706726]
[309.86267090 -184.35115051]
[310.58303833 -169.35542297]
[309.78262329 -154.36373901]
[307.46960449 -139.52996826]
[303.66775513 -125.00630188]
[298.41601562 -110.94179535]
[291.76834106 -97.48076630]
[283.79290771 -84.76134491]
[274.57159424 -72.91406250]
[264.19900513 -62.06047821]
[252.78155518 -52.31197357]
[240.43646240 -43.76858902]
[227.29035950 -36.51799011]
[213.47817993 -30.63457680]
[199.14163208 -26.17872810]
[184.42785645 -23.19616318]
[169.48782349 -21.71749306]
[154.47485352 -21.75788689]
[139.54299927 -23.31693268]
[136.48460388 -8.63203430]
[133.42620850 6.05286312]
[134.90861511 8.50102043]
[135.47967529 11.70150852]
[134.84109497 15.29858208]
[132.83309937 18.83291817]
[129.46708679 21.79426765]
[134.50628662 38.57672882]
[121.12438965 51.18449402]
[117.16778564 65.65325928]
[113.21117401 80.12203217]
[109.25456238 94.59079742]
[107.41123962 109.47710419]
[107.71921539 124.47394562]
[108.02719116 139.47077942]
[116.04620361 153.10917664]
[108.57185364 165.99263000]
[117.34132385 175.50578308]
[117.25513458 188.04228210]
[108.90747070 196.85015869]
[108.90747070 211.85015869]
[108.90747070 226.85015869]
[108.90747070 241.85015869]
[108.90747070 256.85015869]
[108.90747070 271.85015869]
[108.90747070 286.85015869]
[108.90747070 301.85015869]
[108.90747070 316.85015869]
[108.90747070 331.85015869]
[123.51748657 335.59161377]
[136.73764038 342.84957886]
[147.73692322 353.16784668]
[155.82388306 365.89779663]
[160.49018860 380.23922729]
[161.44250488 395.29061890]
[158.62097168 410.10580444]
[152.20294189 423.75347900]
[142.59187317 435.37579346]
[130.39192200 444.24212646]
[116.36997223 449.79513550]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 129]
[25 127]
[26 126]
[27 125]
[42 124]
[43 123]
[44 122]
[45 121]
[48 119]
[49 114]
[50 113]
[51 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
