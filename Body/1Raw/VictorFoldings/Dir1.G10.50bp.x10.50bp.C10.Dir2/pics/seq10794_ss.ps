%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACACAGCAGGGGGGGGGGGCCAUUCAAGCAAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCAUCCUxxxxxxxxxxUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCAUAUAUCCAAACCCCCCCCCCCAACAAAGCA\
) } def
/len { sequence length } bind def

/coor [
[86.59817505 361.73590088]
[72.75223541 355.71987915]
[61.04357147 346.19046021]
[52.34104919 333.85476685]
[47.29044724 319.62826538]
[46.26655579 304.56658936]
[49.34535217 289.78741455]
[56.29837418 276.38748169]
[66.60965729 265.36114502]
[79.51403809 257.52664185]
[94.05392456 253.46533203]
[94.05392456 238.46533203]
[94.05392456 223.46533203]
[94.05392456 208.46533203]
[94.05392456 193.46533203]
[94.05392456 178.46533203]
[94.05392456 163.46533203]
[94.05392456 148.46533203]
[94.05392456 133.46533203]
[94.05392456 118.46533203]
[83.28311920 108.02552032]
[68.29042053 108.49356079]
[53.29772568 108.96160889]
[38.58976746 111.90708923]
[24.57305336 117.24860382]
[10.55633926 122.59011078]
[2.70975399 136.58334351]
[-13.14548683 139.03097534]
[-24.84659958 128.05538940]
[-23.41749001 112.07611847]
[-9.95445156 103.35108948]
[5.21482706 108.57340240]
[19.23154068 103.23188782]
[33.24825287 97.89037323]
[32.78043747 90.40497589]
[19.34740067 83.73014069]
[31.84481049 75.43418884]
[31.37699699 67.94879150]
[16.80429268 64.39402771]
[2.23159051 60.83926773]
[-12.34111214 57.28450775]
[-27.92143631 62.40169144]
[-39.96113205 51.26716232]
[-36.07479477 35.33516693]
[-20.26035309 30.99517822]
[-8.78635025 42.71180344]
[5.78635263 46.26656723]
[20.35905457 49.82132721]
[34.93175888 53.37609100]
[54.07413864 73.24928284]
[52.82968521 93.96891022]
[67.82238007 93.50086975]
[82.81507874 93.03282166]
[95.98365784 85.85031891]
[104.49475098 73.49874115]
[113.00583649 61.14717102]
[121.51692963 48.79559708]
[130.02801514 36.44402695]
[131.03938293 18.08763695]
[147.11560059 11.11946487]
[155.36788940 -1.40649688]
[143.79560852 -10.97359943]
[133.32556152 -21.73582268]
[124.08052063 -33.56698608]
[116.16886902 -46.32837296]
[109.68336487 -59.87036514]
[104.70005798 -74.03418732]
[101.27736664 -88.65377808]
[99.45542908 -103.55773163]
[99.25559235 -118.57129669]
[100.68020630 -133.51846313]
[103.71257782 -148.22396851]
[108.31713867 -162.51541138]
[114.43991089 -176.22521973]
[122.00910950 -189.19265747]
[130.93597412 -201.26570129]
[141.11587524 -212.30278015]
[152.42942810 -222.17449951]
[164.74398804 -230.76510620]
[177.91519165 -237.97390747]
[191.78858948 -243.71635437]
[206.20155334 -247.92514038]
[220.98507690 -250.55090332]
[235.96583557 -251.56288147]
[250.96818542 -250.94918823]
[265.81625366 -248.71702576]
[280.33590698 -244.89256287]
[294.35696411 -239.52062988]
[307.71499634 -232.66423035]
[320.25338745 -224.40374756]
[331.82516479 -214.83602905]
[342.29461670 -204.07324219]
[351.53903198 -192.24157715]
[359.45001221 -179.47976685]
[365.93478394 -165.93742371]
[370.91732788 -151.77333069]
[374.33923340 -137.15356445]
[376.16036987 -122.24951172]
[376.35937500 -107.23592377]
[374.93395996 -92.28884125]
[371.90081787 -77.58349609]
[367.29547119 -63.29230118]
[361.17196655 -49.58282089]
[353.60208130 -36.61578751]
[344.67456055 -24.54323387]
[334.49407959 -13.50670433]
[323.17999268 -3.63559532]
[310.86495972 4.95435810]
[297.69335938 12.16244411]
[283.81964111 17.90415001]
[269.40646362 22.11215973]
[254.62280273 24.73713493]
[239.64198303 25.74829865]
[224.63966370 25.13379478]
[209.79173279 22.90083122]
[195.27226257 19.07558632]
[181.25151062 13.70290947]
[167.89384460 6.84579229]
[159.64155579 19.37175369]
[161.76652527 31.32130814]
[154.93898010 41.83813477]
[142.37959290 44.95511627]
[133.86849976 57.30669022]
[125.35741425 69.65826416]
[116.84632111 82.00983429]
[108.33523560 94.36140442]
[111.77705383 96.95734406]
[114.20760345 101.26940918]
[114.86775208 106.83753204]
[113.21786499 112.89372253]
[109.05392456 118.46533203]
[109.05392456 133.46533203]
[109.05392456 148.46533203]
[109.05392456 163.46533203]
[109.05392456 178.46533203]
[109.05392456 193.46533203]
[109.05392456 208.46533203]
[109.05392456 223.46533203]
[109.05392456 238.46533203]
[109.05392456 253.46533203]
[123.59381104 257.52664185]
[136.49819946 265.36114502]
[146.80947876 276.38748169]
[153.76249695 289.78741455]
[156.84129333 304.56658936]
[155.81741333 319.62826538]
[150.76679993 333.85476685]
[142.06428528 346.19046021]
[130.35562134 355.71987915]
[116.50968170 361.73590088]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 53]
[22 52]
[23 51]
[24 34]
[25 33]
[26 32]
[38 49]
[39 48]
[40 47]
[41 46]
[54 126]
[55 125]
[56 124]
[57 123]
[58 122]
[60 119]
[61 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
