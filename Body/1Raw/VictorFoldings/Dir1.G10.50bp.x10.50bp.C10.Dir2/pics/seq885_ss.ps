%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACAUCACCGGGGGGGGGGCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAxxxxxxxxxxACUUUACUUCCUCUCUUUCUUCUUCCCACUCAUCCUAACCCUACUCCUAACCCCCCCCCCUCACAUAACC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 360.58718872]
[71.19830322 354.57116699]
[59.48964310 345.04174805]
[50.78712082 332.70608521]
[45.73651886 318.47955322]
[44.71262741 303.41787720]
[47.79142761 288.63873291]
[54.74444962 275.23880005]
[65.05573273 264.21246338]
[77.96011353 256.37796021]
[92.50000000 252.31665039]
[92.50000000 237.31665039]
[92.50000000 222.31665039]
[92.50000000 207.31665039]
[92.50000000 192.31665039]
[92.50000000 177.31665039]
[92.50000000 162.31665039]
[92.50000000 147.31665039]
[92.50000000 132.31665039]
[92.50000000 117.31664276]
[80.42001343 108.42429352]
[66.09741211 112.88111115]
[51.77481842 117.33792877]
[44.45373535 122.91049957]
[37.10770416 121.73513031]
[22.69548798 125.89302063]
[11.58080578 137.15243530]
[-2.79246187 133.24623108]
[-11.77507877 146.53878784]
[-27.77890587 147.65997314]
[-38.52717590 135.74972534]
[-35.77473831 119.94454193]
[-21.63302422 112.36882782]
[-6.95034933 118.83400726]
[3.13347530 107.87199402]
[18.53760147 111.48080444]
[32.94981766 107.32291412]
[47.31800079 103.01532745]
[61.64059830 98.55851746]
[75.96319580 94.10169983]
[77.12874603 86.69281769]
[62.31102753 84.36146545]
[64.64262390 69.54378510]
[79.45985413 71.87506104]
[80.62540436 64.46617889]
[68.36303711 55.82706451]
[56.10066605 47.18795013]
[42.19597626 53.71137619]
[26.89381409 52.39249802]
[14.31038952 43.58607864]
[7.83057833 29.66100693]
[9.19741726 14.36305618]
[18.04323387 1.80729640]
[31.98854828 -4.62883472]
[47.28214264 -3.21405053]
[59.81011200 5.67107916]
[66.20249939 19.63649940]
[64.73978424 34.92558289]
[77.00215149 43.56469727]
[89.26451874 52.20381546]
[103.51296997 71.44712067]
[103.83968353 92.36139679]
[115.13868713 82.49567413]
[126.43769073 72.62995148]
[137.73669434 62.76422882]
[129.03721619 50.52913666]
[121.59918976 37.48863983]
[115.49656677 23.77235222]
[110.78999329 9.51659107]
[107.52623749 -5.13695860]
[105.73773956 -20.04265976]
[105.44227600 -35.05236435]
[106.64279175 -50.01690292]
[109.32734680 -64.78754425]
[113.46926117 -79.21748352]
[119.02736664 -93.16330719]
[125.94642639 -106.48641205]
[134.15768433 -119.05438995]
[143.57951355 -130.74232483]
[154.11827087 -141.43405151]
[165.66923523 -151.02331543]
[178.11758423 -159.41479492]
[191.33961487 -166.52511597]
[205.20390320 -172.28358459]
[219.57266235 -176.63299561]
[234.30308533 -179.53010559]
[249.24877930 -180.94610596]
[264.26116943 -180.86695862]
[279.19110107 -179.29342651]
[293.89016724 -176.24114990]
[308.21224976 -171.74046326]
[322.01504517 -165.83612061]
[335.16137695 -158.58677673]
[347.52053833 -150.06448364]
[358.96975708 -140.35394287]
[369.39517212 -129.55168152]
[378.69323730 -117.76505280]
[386.77151489 -105.11119080]
[393.54968262 -91.71585846]
[398.96041870 -77.71220398]
[402.94995117 -63.23938751]
[405.47860718 -48.44126129]
[406.52124023 -33.46489716]
[406.06753540 -18.45913887]
[404.12194824 -3.57312655]
[400.70385742 11.04519176]
[395.84722900 25.25053024]
[389.60028076 38.90170288]
[382.02517700 51.86304092]
[373.19714355 64.00572205]
[363.20397949 75.20906067]
[352.14492798 85.36170959]
[340.12997437 94.36277008]
[327.27847290 102.12277985]
[313.71817017 108.56462097]
[299.58386230 113.62425232]
[285.01602173 117.25141144]
[270.15939331 119.41002655]
[255.16168213 120.07865906]
[240.17192078 119.25065613]
[225.33909607 116.93424988]
[210.81060791 113.15246582]
[196.73088074 107.94288635]
[183.23983765 101.35728455]
[170.47154236 93.46111298]
[158.55291748 84.33285522]
[147.60241699 74.06323242]
[136.30342102 83.92895508]
[125.00440979 93.79467773]
[113.70540619 103.66040039]
[107.50000000 117.31664276]
[107.50000000 132.31665039]
[107.50000000 147.31665039]
[107.50000000 162.31665039]
[107.50000000 177.31665039]
[107.50000000 192.31665039]
[107.50000000 207.31665039]
[107.50000000 222.31665039]
[107.50000000 237.31665039]
[107.50000000 252.31665039]
[122.03988647 256.37796021]
[134.94427490 264.21246338]
[145.25555420 275.23880005]
[152.20857239 288.63873291]
[155.28736877 303.41787720]
[154.26348877 318.47955322]
[149.21287537 332.70608521]
[140.51036072 345.04174805]
[128.80169678 354.57116699]
[114.95575714 360.58718872]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 40]
[22 39]
[23 38]
[25 37]
[26 36]
[28 34]
[45 60]
[46 59]
[47 58]
[62 130]
[63 129]
[64 128]
[65 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
