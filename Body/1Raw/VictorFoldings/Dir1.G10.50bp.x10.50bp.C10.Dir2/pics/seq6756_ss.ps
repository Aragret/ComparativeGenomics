%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUAACAGGGGGGGGGGGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCxxxxxxxxxxGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCCCCCCCCCCCUACUUACAG\
) } def
/len { sequence length } bind def

/coor [
[83.81524658 381.90863037]
[70.94197083 374.00573730]
[60.81767654 362.79525757]
[54.26309204 349.18591309]
[51.80957413 334.28097534]
[53.65600967 319.28872681]
[59.65272141 305.42453003]
[69.31358337 293.81228638]
[81.85543060 285.39331055]
[96.26155090 280.85015869]
[95.94949341 265.85342407]
[95.63744354 250.85665894]
[95.32538605 235.85990906]
[95.01332855 220.86314392]
[94.70127106 205.86639404]
[94.38921356 190.86964417]
[94.07715607 175.87289429]
[93.76510620 160.87612915]
[93.45304871 145.87937927]
[93.14099121 130.88262939]
[92.82893372 115.88587189]
[88.81558228 130.33900452]
[76.14648438 138.36981201]
[61.36272812 135.83198547]
[52.09719849 124.03580475]
[53.13370895 109.07166290]
[63.93710709 98.66557312]
[78.93151093 98.19091034]
[64.43591309 94.33375549]
[49.94031525 90.47659302]
[35.44472122 86.61943054]
[28.32227898 99.89978027]
[18.32871628 111.17919922]
[6.00296783 119.84941864]
[-7.99025154 125.44285583]
[-22.89630508 127.65786743]
[-37.91133118 126.37499237]
[-52.22558212 121.66342163]
[-65.06711578 113.77725220]
[-75.74340057 103.14176178]
[-83.67868042 90.33051300]
[-88.44500732 76.03440094]
[-89.78534698 61.02439499]
[-87.62741852 46.10997009]
[-82.08759308 32.09543991]
[-73.46462250 19.73659134]
[-62.22353745 9.69992161]
[-48.97055817 2.52669477]
[-34.42039490 -1.39624596]
[-19.35771942 -1.85734117]
[-4.59484911 1.16827536]
[9.07207775 7.51743603]
[20.90601921 16.84773827]
[30.26878548 28.65601158]
[36.65545654 42.30545044]
[39.72160721 57.05995560]
[39.30187988 72.12384033]
[53.79747772 75.98099518]
[68.29307556 79.83815765]
[82.78866577 83.69531250]
[92.24894714 82.50495911]
[99.68455505 85.44111633]
[103.64700317 90.70011902]
[114.73831940 80.60147095]
[125.82962799 70.50282288]
[113.66156006 79.27425385]
[99.33614349 83.72200775]
[84.33994293 83.38454437]
[70.22911072 78.29687500]
[58.46792984 68.98695374]
[50.27686310 56.42086792]
[46.50590515 41.90261078]
[47.54636002 26.93873787]
[53.29026413 13.08205891]
[63.14157104 1.77048242]
[76.07800293 -5.82218599]
[90.75715637 -8.90805244]
[105.65576172 -7.16689777]
[119.22778320 -0.77940023]
[130.06486511 9.59160709]
[137.04273987 22.87086105]
[148.34173584 13.00513840]
[159.64074707 3.13941526]
[170.93974304 -6.72630787]
[182.23875427 -16.59203148]
[193.53775024 -26.45775414]
[179.07078552 -30.42093849]
[172.95401001 -44.11711121]
[179.65830994 -57.53547287]
[194.28335571 -60.86829376]
[206.13945007 -51.67954636]
[206.56100464 -36.68606567]
[218.82336426 -45.32518387]
[231.08573914 -53.96429825]
[231.17706299 -69.48110199]
[240.39859009 -81.96081543]
[255.20445251 -86.60471344]
[269.90151978 -81.62714386]
[278.83843994 -68.94207001]
[278.57879639 -53.42716980]
[269.22241211 -41.04823303]
[254.36705017 -36.56521606]
[239.72485352 -41.70193100]
[227.46249390 -33.06281281]
[215.20011902 -24.42369843]
[203.40347290 -15.15874958]
[192.10447693 -5.29302597]
[180.80546570 4.57269716]
[169.50646973 14.43842030]
[158.20745850 24.30414391]
[146.90846252 34.16986465]
[150.46337891 48.74321365]
[154.01797485 63.31527328]
[168.59068298 66.87003326]
[183.16339111 70.42479706]
[197.73608398 73.97956085]
[212.13711548 66.90919495]
[226.58172607 73.89008331]
[229.98925781 89.56707764]
[219.74572754 101.91413879]
[203.70912170 101.45964813]
[194.18132019 88.55226135]
[179.60862732 84.99749756]
[165.03591919 81.44273376]
[150.46321106 77.88797760]
[135.92828369 81.59413910]
[124.83696747 91.69278717]
[113.74565125 101.79143524]
[107.82568359 115.57381439]
[108.13774109 130.57057190]
[108.44979858 145.56732178]
[108.76185608 160.56407166]
[109.07391357 175.56083679]
[109.38597107 190.55758667]
[109.69802856 205.55433655]
[110.01007843 220.55108643]
[110.32213593 235.54785156]
[110.63419342 250.54460144]
[110.94625092 265.54135132]
[111.25830841 280.53811646]
[125.84095001 284.47805786]
[138.72215271 292.36801147]
[148.85771179 303.56832886]
[155.42594910 317.17108154]
[157.89445496 332.07354736]
[156.06307983 347.06762695]
[150.08029175 360.93783569]
[140.43110657 372.55981445]
[127.89772034 380.99133301]
[113.49617004 385.54898071]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[28 60]
[29 59]
[30 58]
[31 57]
[63 128]
[64 127]
[65 126]
[81 111]
[82 110]
[83 109]
[84 108]
[85 107]
[86 106]
[92 105]
[93 104]
[94 103]
[113 125]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
