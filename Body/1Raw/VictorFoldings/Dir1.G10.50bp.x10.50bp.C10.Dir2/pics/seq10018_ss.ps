%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACAGAACUAGGGGGGGGGGAUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCACCUUGGCUAUxxxxxxxxxxAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCCCCCCCCCCCACAGGACUA\
) } def
/len { sequence length } bind def

/coor [
[83.84236145 368.51647949]
[69.82041168 362.96347046]
[57.62045670 354.09713745]
[48.00938797 342.47482300]
[41.59136200 328.82711792]
[38.76982498 314.01193237]
[39.72214127 298.96057129]
[44.38844681 284.61914062]
[52.47541046 271.88919067]
[63.47468567 261.57092285]
[76.69484711 254.31292725]
[91.30485535 250.57150269]
[91.30485535 235.57150269]
[91.30485535 220.57150269]
[91.30485535 205.57150269]
[91.30485535 190.57150269]
[91.30485535 175.57150269]
[91.30485535 160.57150269]
[91.30485535 145.57150269]
[91.30485535 130.57150269]
[91.30485535 115.57149506]
[86.52622223 106.65673065]
[87.90389252 98.24883270]
[75.93363190 89.20931244]
[63.96337509 80.16979218]
[51.99311829 71.13027191]
[41.68163300 82.04524231]
[30.23197937 91.75959015]
[17.78314018 100.15540314]
[4.48623562 107.13075256]
[-9.49732208 112.60097504]
[-23.99778557 116.49965668]
[-38.83913422 118.77947235]
[-53.84120560 119.41275787]
[-68.82189178 118.39182281]
[-83.59933472 115.72904968]
[-97.99414825 111.45676422]
[-111.83160400 105.62683868]
[-124.94372559 98.31004333]
[-137.17132568 89.59518433]
[-148.36599731 79.58805847]
[-158.39184570 68.41014099]
[-167.12713623 56.19712830]
[-174.46586609 43.09726715]
[-180.31892395 29.26958466]
[-184.61528015 14.88193226]
[-187.30276489 0.10896385]
[-188.34877014 -14.86999035]
[-187.74058533 -29.87310028]
[-185.48559570 -44.71824265]
[-181.61116028 -59.22520828]
[-176.16435242 -73.21789551]
[-169.21124268 -86.52645111]
[-160.83627319 -98.98931122]
[-151.14109802 -110.45520020]
[-140.24339294 -120.78493500]
[-128.27545166 -129.85310364]
[-115.38256836 -137.54963684]
[-101.72123718 -143.78111267]
[-87.45730591 -148.47187805]
[-72.76390839 -151.56500244]
[-57.81942368 -153.02291870]
[-42.80525970 -152.82794189]
[-27.90367126 -150.98243713]
[-13.29555321 -147.50881958]
[0.84176534 -142.44923401]
[14.33667088 -135.86509705]
[27.02534676 -127.83636475]
[38.75376511 -118.46047211]
[49.37955475 -107.85123444]
[58.77372742 -96.13745117]
[66.82224274 -83.46131134]
[73.42740631 -69.97669220]
[78.50903320 -55.84727859]
[82.00543213 -41.24459457]
[83.87416840 -26.34590340]
[84.09255981 -11.33205891]
[82.65794373 3.61468220]
[79.58774567 18.31288147]
[74.91922760 32.58411407]
[68.70906067 46.25514603]
[61.03263855 59.16001892]
[73.00289154 68.19953918]
[84.97315216 77.23905945]
[96.94341278 86.27857208]
[111.65893555 89.18605042]
[126.16755676 85.37818909]
[140.67617798 81.57032776]
[142.79951477 66.54477692]
[150.49301147 53.51201248]
[162.55751038 44.44218063]
[177.13581848 40.69249344]
[191.99871826 42.80419159]
[204.88569641 50.42464828]
[213.84881592 62.36582184]
[228.35743713 58.55796051]
[239.74137878 47.57084656]
[254.01589966 51.82377625]
[268.52450562 48.01591873]
[283.03314209 44.20806122]
[270.89773560 35.39150620]
[268.36352539 20.60712624]
[276.86996460 8.25234318]
[291.58541870 5.34458113]
[304.15164185 13.53542805]
[307.43112183 28.17254257]
[299.56045532 40.94261551]
[314.42706299 38.94655609]
[329.29367065 36.95050049]
[341.94076538 26.51100159]
[357.20849609 32.49667740]
[359.39071655 48.74998093]
[346.24258423 58.55090332]
[331.28973389 51.81710052]
[316.42312622 53.81315613]
[301.55651855 55.80921173]
[286.84100342 58.71668625]
[272.33236694 62.52454376]
[257.82376099 66.33240509]
[247.47756958 77.04714966]
[232.16529846 73.06658936]
[217.65667725 76.87444305]
[215.71287537 91.67819214]
[208.22914124 104.64504242]
[196.31890869 113.78347778]
[181.77813721 117.67623901]
[166.81455994 115.70005035]
[153.71249390 108.12517548]
[144.48403931 96.07895660]
[129.97541809 99.88681793]
[115.46679688 103.69467163]
[106.30485535 115.57149506]
[106.30485535 130.57150269]
[106.30485535 145.57150269]
[106.30485535 160.57150269]
[106.30485535 175.57150269]
[106.30485535 190.57150269]
[106.30485535 205.57150269]
[106.30485535 220.57150269]
[106.30485535 235.57150269]
[106.30485535 250.57150269]
[120.91487122 254.31292725]
[134.13502502 261.57092285]
[145.13430786 271.88919067]
[153.22126770 284.61914062]
[157.88757324 298.96057129]
[158.83988953 314.01193237]
[156.01835632 328.82711792]
[149.60032654 342.47482300]
[139.98925781 354.09713745]
[127.78929901 362.96347046]
[113.76735687 368.51647949]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 85]
[24 84]
[25 83]
[26 82]
[86 131]
[87 130]
[88 129]
[95 122]
[96 121]
[98 119]
[99 118]
[100 117]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
