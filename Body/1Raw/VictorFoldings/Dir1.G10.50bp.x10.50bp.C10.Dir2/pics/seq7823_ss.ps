%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCAUGAGCGGGGGGGGGGUGUCCCCACAUUAGGCUUAAAAACAGAUGCAAUUCCCGGACGUCUAAACCxxxxxxxxxxAGGCUCACUAAACAUUCUACUACUCACUCUCACUGCCCAAGAACUAUCAACCCCCCCCCCACUCCUGAGC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 424.69354248]
[71.19830322 418.67752075]
[59.48964310 409.14810181]
[50.78712082 396.81243896]
[45.73651886 382.58590698]
[44.71262741 367.52423096]
[47.79142761 352.74508667]
[54.74444962 339.34515381]
[65.05573273 328.31881714]
[77.96011353 320.48431396]
[92.50000000 316.42300415]
[92.50000000 301.42300415]
[92.50000000 286.42300415]
[92.50000000 271.42300415]
[92.50000000 256.42300415]
[92.50000000 241.42298889]
[92.50000000 226.42298889]
[92.50000000 211.42298889]
[92.50000000 196.42298889]
[92.50000000 181.42298889]
[92.50000000 166.42298889]
[77.90982819 163.08952332]
[64.42700195 156.59352112]
[52.72736740 147.26057434]
[43.39741898 135.55856323]
[36.90484238 122.07408142]
[33.57509613 107.48306274]
[33.57509613 92.51693726]
[36.90484238 77.92591858]
[43.39741898 64.44142914]
[52.72736740 52.73941803]
[64.42700195 43.40648651]
[77.90982819 36.91047287]
[92.50000000 33.57700729]
[92.50000000 18.57700539]
[92.50000000 3.57700539]
[77.53843689 2.39980483]
[62.71536255 0.05235520]
[48.12216187 -3.45087075]
[33.84881210 -8.08827400]
[19.98330879 -13.83126259]
[6.61114168 -20.64443016]
[-6.18524456 -28.48576927]
[-18.32695389 -37.30693436]
[-29.73913002 -47.05353928]
[-40.35140991 -57.66549683]
[-50.09836578 -69.07736969]
[-58.91990280 -81.21881104]
[-66.76163483 -94.01496124]
[-73.57521057 -107.38691711]
[-79.31862640 -121.25224304]
[-83.95646667 -135.52545166]
[-87.46013641 -150.11854553]
[-89.80804443 -164.94154358]
[-90.98570251 -179.90307617]
[-90.98585510 -194.91087341]
[-89.80850220 -209.87242126]
[-87.46089935 -224.69548035]
[-83.95752716 -239.28863525]
[-79.31997681 -253.56195068]
[-73.57684326 -267.42739868]
[-66.76354218 -280.79949951]
[-58.92207336 -293.59579468]
[-50.10078430 -305.73742676]
[-40.35406113 -317.14947510]
[-29.74199677 -327.76165771]
[-18.33002090 -337.50851440]
[-6.18848991 -346.32992554]
[6.60773563 -354.17150879]
[19.97976303 -360.98495483]
[33.84514999 -366.72824097]
[48.11840820 -371.36593628]
[62.71153641 -374.86944580]
[77.53456116 -377.21719360]
[92.49610138 -378.39471436]
[107.50389862 -378.39471436]
[122.46543884 -377.21719360]
[137.28846741 -374.86944580]
[151.88159180 -371.36593628]
[166.15484619 -366.72824097]
[180.02023315 -360.98495483]
[193.39225769 -354.17150879]
[206.18849182 -346.32992554]
[218.33001709 -337.50851440]
[229.74198914 -327.76165771]
[240.35406494 -317.14947510]
[250.10078430 -305.73742676]
[258.92205811 -293.59579468]
[266.76354980 -280.79949951]
[273.57684326 -267.42739868]
[279.31997681 -253.56195068]
[283.95751953 -239.28863525]
[287.46090698 -224.69548035]
[289.80850220 -209.87242126]
[290.98587036 -194.91087341]
[290.98568726 -179.90307617]
[289.80804443 -164.94154358]
[287.46014404 -150.11854553]
[283.95645142 -135.52545166]
[279.31863403 -121.25224304]
[273.57522583 -107.38691711]
[266.76162720 -94.01496124]
[258.91989136 -81.21881104]
[250.09837341 -69.07736969]
[240.35140991 -57.66549683]
[229.73913574 -47.05353928]
[218.32695007 -37.30693436]
[206.18524170 -28.48576927]
[193.38885498 -20.64443016]
[180.01669312 -13.83126259]
[166.15118408 -8.08827400]
[151.87783813 -3.45087075]
[137.28463745 0.05235520]
[122.46156311 2.39980483]
[107.50000000 3.57700539]
[107.50000000 18.57700539]
[107.50000000 33.57700729]
[122.09017181 36.91047287]
[135.57299805 43.40648651]
[147.27262878 52.73941803]
[156.60258484 64.44142914]
[163.09515381 77.92591858]
[166.42491150 92.51693726]
[166.42491150 107.48306274]
[163.09515381 122.07408142]
[156.60258484 135.55856323]
[147.27262878 147.26057434]
[135.57299805 156.59352112]
[122.09017181 163.08952332]
[107.50000000 166.42298889]
[107.50000000 181.42298889]
[107.50000000 196.42298889]
[107.50000000 211.42298889]
[107.50000000 226.42298889]
[107.50000000 241.42298889]
[107.50000000 256.42300415]
[107.50000000 271.42300415]
[107.50000000 286.42300415]
[107.50000000 301.42300415]
[107.50000000 316.42300415]
[122.03988647 320.48431396]
[134.94427490 328.31881714]
[145.25555420 339.34515381]
[152.20857239 352.74508667]
[155.28736877 367.52423096]
[154.26348877 382.58590698]
[149.21287537 396.81243896]
[140.51036072 409.14810181]
[128.80169678 418.67752075]
[114.95575714 424.69354248]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[34 117]
[35 116]
[36 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
