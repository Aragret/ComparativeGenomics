%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCGACUCCGGGGGGGGGGUUGACGUUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCAUUCGUAUAxxxxxxxxxxCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCACACAUCAACCCCCCCCCCCUGCAACUCC\
) } def
/len { sequence length } bind def

/coor [
[81.09034729 504.88217163]
[67.24440765 498.86611938]
[55.53574371 489.33673096]
[46.83322144 477.00103760]
[41.78261948 462.77453613]
[40.75872803 447.71286011]
[43.83752441 432.93368530]
[50.79054642 419.53375244]
[61.10183334 408.50741577]
[74.00621033 400.67291260]
[88.54609680 396.61160278]
[88.54609680 381.61160278]
[88.54609680 366.61160278]
[88.54609680 351.61160278]
[88.54609680 336.61160278]
[88.54609680 321.61160278]
[88.54609680 306.61160278]
[88.54609680 291.61160278]
[88.54609680 276.61160278]
[88.54609680 261.61160278]
[88.54609680 246.61160278]
[88.54609680 231.61160278]
[88.54609680 216.61160278]
[88.54609680 201.61160278]
[80.80879974 188.88433838]
[88.54609680 175.08415222]
[88.54609680 160.08415222]
[88.39006042 145.08497620]
[88.07800293 130.08821106]
[87.76595306 115.09146118]
[78.01829529 103.69044495]
[63.25224304 101.05157471]
[48.48618698 98.41271210]
[33.72013092 95.77384949]
[18.95407677 93.13498688]
[4.18802071 90.49612427]
[-10.62973690 88.16501617]
[-25.49278450 86.14268494]
[-40.35583115 84.12034607]
[-56.86553192 87.97601318]
[-65.14085388 73.17887878]
[-53.21283340 61.13069916]
[-38.33349609 69.25730133]
[-23.47044945 71.27963257]
[-8.60740280 73.30197144]
[-4.28565836 71.13447571]
[1.45074201 71.70457458]
[6.82688522 75.73006439]
[21.59294128 78.36892700]
[36.35899734 81.00779724]
[51.12505341 83.64665985]
[65.89110565 86.28552246]
[80.65716553 88.92438507]
[91.20845032 78.26276398]
[88.41613007 63.52495575]
[85.62380219 48.78714752]
[82.83148193 34.04934311]
[67.77746582 33.61252594]
[53.16942215 29.94931412]
[39.69058990 23.23104286]
[27.97140121 13.77194023]
[18.55998039 2.01442242]
[11.89651680 -11.49158859]
[8.29267406 -26.11439323]
[7.91701126 -41.17005539]
[10.78709698 -55.95439148]
[16.76869392 -69.77591705]
[25.58203125 -81.98817444]
[36.81489182 -92.01996613]
[49.94189453 -99.40209961]
[64.34906769 -103.78928375]
[79.36256409 -104.97633362]
[94.28016663 -102.90773010]
[108.40415955 -97.68021393]
[121.07393646 -89.53829956]
[131.69691467 -78.86278534]
[139.77621460 -66.15299225]
[144.93399048 -52.00337982]
[146.92897034 -37.07575226]
[145.66786194 -22.06829643]
[141.20964050 -7.68294334]
[133.76283264 5.40747929]
[123.67574310 16.59070969]
[111.42015839 25.34368706]
[97.56928253 31.25701714]
[100.36161041 45.99482346]
[103.15393066 60.73263168]
[105.94625854 75.47043610]
[112.29372406 79.46539307]
[110.62516022 64.55848694]
[121.23939514 53.95952225]
[136.14387512 55.64954376]
[144.11550903 68.35595703]
[139.15164185 82.51081085]
[124.98865509 87.45530701]
[131.33612061 91.45027161]
[145.83171082 87.59310913]
[160.32731628 83.73594666]
[161.37472534 68.63026428]
[167.27249146 54.68411636]
[177.38085938 43.41027451]
[190.60336304 36.03163910]
[205.50570679 33.34859467]
[220.47140503 35.65217590]
[233.87710571 42.69250488]
[244.26863098 53.70589828]
[250.51879883 67.49771118]
[251.94963074 82.57190704]
[248.40594482 97.29335785]
[240.27209473 110.06517792]
[228.43041992 119.50197601]
[214.16539001 124.58013153]
[199.02436829 124.74880219]
[184.64976501 119.98967743]
[172.60079956 110.81900787]
[164.18446350 98.23154449]
[149.68887329 102.08870697]
[135.19328308 105.94586182]
[118.09045410 117.77788544]
[102.76270294 114.77940369]
[103.07476044 129.77615356]
[103.38681793 144.77291870]
[106.71167755 153.35179138]
[103.54609680 160.08415222]
[103.54609680 175.08415222]
[111.28340149 188.88433838]
[103.54609680 201.61160278]
[103.54609680 216.61160278]
[103.54609680 231.61160278]
[103.54609680 246.61160278]
[103.54609680 261.61160278]
[103.54609680 276.61160278]
[103.54609680 291.61160278]
[103.54609680 306.61160278]
[103.54609680 321.61160278]
[103.54609680 336.61160278]
[103.54609680 351.61160278]
[103.54609680 366.61160278]
[103.54609680 381.61160278]
[103.54609680 396.61160278]
[118.08598328 400.67291260]
[130.99037170 408.50741577]
[141.30165100 419.53375244]
[148.25466919 432.93368530]
[151.33346558 447.71286011]
[150.30958557 462.77453613]
[145.25897217 477.00103760]
[136.55645752 489.33673096]
[124.84779358 498.86611938]
[111.00185394 504.88217163]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[24 127]
[26 125]
[27 124]
[28 122]
[29 121]
[30 120]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[37 45]
[38 44]
[39 43]
[54 88]
[55 87]
[56 86]
[57 85]
[96 118]
[97 117]
[98 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
