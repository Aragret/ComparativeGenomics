%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCACAUACGGGGGGGGGGCAAGGCCACCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAUAAUxxxxxxxxxxACCUUGGCUAUCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCCCCCCCCCCCAGGCACAUAC\
) } def
/len { sequence length } bind def

/coor [
[35.96839905 376.27032471]
[22.74820137 368.99786377]
[11.86139774 358.55084229]
[4.05026770 345.64160156]
[-0.15261364 331.15029907]
[-0.46068609 316.06494141]
[3.14705515 301.41412354]
[10.42462826 288.19674683]
[20.87583542 277.31396484]
[33.78809738 269.50781250]
[48.28103256 265.31054688]
[47.96897888 250.31378174]
[47.65692139 235.31703186]
[47.34486389 220.32026672]
[47.03281021 205.32351685]
[46.72075272 190.32676697]
[46.40869522 175.33001709]
[46.09664154 160.33325195]
[45.78458405 145.33650208]
[45.47252655 130.33975220]
[45.16047287 115.34299469]
[34.72066116 104.57218933]
[19.74094582 103.79234314]
[4.76123095 103.01249695]
[-10.21848392 102.23265076]
[-25.19819832 101.45280457]
[-40.17791367 100.67296600]
[-48.09603500 115.84766388]
[-61.78702545 126.02815247]
[-78.49063110 129.22171021]
[-94.86513519 124.83825684]
[-107.65587616 113.79870605]
[-114.34217834 98.34199524]
[-129.34136963 98.18595886]
[-144.34054565 98.02992249]
[-156.76206970 108.18302155]
[-172.41377258 104.66113281]
[-179.28901672 90.16594696]
[-172.11370850 75.81692505]
[-156.39212036 72.62140656]
[-144.18450928 83.03073120]
[-129.18533325 83.18676758]
[-114.18614197 83.34280396]
[-109.36498260 71.20661926]
[-100.67034149 61.42031860]
[-89.12977600 55.17341232]
[-76.11848450 53.23516464]
[-63.19543076 55.85992050]
[-51.91656113 62.75397491]
[-43.64747238 73.10826111]
[-39.39806747 85.69324493]
[-24.41835213 86.47309113]
[-9.43863869 87.25293732]
[5.54107571 88.03278351]
[20.52079010 88.81262970]
[35.50050354 89.59247589]
[42.54563904 76.34989166]
[33.52811050 64.36305237]
[19.17435646 55.34052277]
[23.87076950 39.05003357]
[40.82471466 39.05325317]
[45.51494217 55.34552383]
[54.53247070 67.33235931]
[68.54918671 61.99084473]
[67.30230713 47.04275894]
[52.66994858 43.08425140]
[40.27570343 34.35736847]
[31.61623764 21.91592598]
[27.73722649 7.26229000]
[29.10707855 -7.83404446]
[35.56037521 -21.55012131]
[46.31785583 -32.22965622]
[60.08049774 -38.58304214]
[75.18639374 -39.84308243]
[89.81143188 -35.85761261]
[102.18957520 -27.10790634]
[110.82610321 -14.65052700]
[114.67810059 0.01023393]
[113.28042603 15.10401821]
[106.80186462 28.80817795]
[96.02472687 39.46786880]
[82.25039673 45.79588318]
[83.49726868 60.74397278]
[102.10604095 61.44623566]
[116.82212830 69.72033691]
[125.11499786 82.40299988]
[139.13171387 77.06148529]
[153.14842224 71.71997833]
[156.71736145 50.38233566]
[174.89924622 35.98104477]
[199.60328674 37.57641602]
[211.49566650 28.43468285]
[223.38804626 19.29294777]
[235.28042603 10.15121365]
[247.17280579 1.00947988]
[252.93186951 -14.34517002]
[269.15109253 -16.76772308]
[279.14553833 -3.76606345]
[272.63375854 11.28481483]
[256.31454468 12.90185928]
[244.42216492 22.04359436]
[232.52978516 31.18532753]
[220.63740540 40.32706070]
[208.74502563 49.46879578]
[214.52130127 63.31201553]
[229.38433838 61.28968048]
[244.24739075 59.26734543]
[255.06396484 47.41908264]
[271.06106567 48.63227463]
[279.96713257 61.97626114]
[274.95013428 77.21468353]
[259.85873413 82.65792084]
[246.26972961 74.13039398]
[231.40667725 76.15272522]
[216.54362488 78.17506409]
[209.80868530 89.46456146]
[199.71078491 97.22864532]
[187.85409546 100.61078644]
[175.99185181 99.42149353]
[165.76812744 94.12571716]
[158.48994446 85.73668671]
[144.47322083 91.07820129]
[130.45651245 96.41971588]
[130.49024963 111.68455505]
[122.88863373 125.99909210]
[108.66608429 135.58494568]
[90.66851044 137.46667480]
[73.01545715 130.33135986]
[60.15722656 115.03093719]
[60.46928024 130.02769470]
[60.78133774 145.02444458]
[61.09339523 160.02119446]
[61.40544891 175.01795959]
[61.71750641 190.01470947]
[62.02956390 205.01145935]
[62.34161758 220.00820923]
[62.65367508 235.00497437]
[62.96573257 250.00172424]
[63.27778625 264.99847412]
[77.93277740 268.58923340]
[91.15859222 275.85150146]
[102.05345917 286.29010010]
[109.87455750 299.19329834]
[114.08862305 313.68136597]
[114.40834808 328.76647949]
[110.81192017 343.42007446]
[103.54455566 356.64306641]
[93.10175323 367.53390503]
[80.19552612 375.35003662]
[65.70583344 379.55850220]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 56]
[23 55]
[24 54]
[25 53]
[26 52]
[27 51]
[33 43]
[34 42]
[35 41]
[57 63]
[58 62]
[64 83]
[65 82]
[86 123]
[87 122]
[88 121]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
