%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUACUCACGGGGGGGGGGUCUCACUGCCCAAGAACUAUCAAACUCCUGAGCCAACAACUUAAUAUGACxxxxxxxxxxAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACACCCCCCCCCCUACUAGUCAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 419.48611450]
[71.19830322 413.47009277]
[59.48964310 403.94067383]
[50.78712082 391.60501099]
[45.73651886 377.37847900]
[44.71262741 362.31680298]
[47.79142761 347.53765869]
[54.74444962 334.13772583]
[65.05573273 323.11138916]
[77.96011353 315.27688599]
[92.50000000 311.21557617]
[92.50000000 296.21557617]
[92.50000000 281.21557617]
[92.50000000 266.21557617]
[92.50000000 251.21556091]
[92.50000000 236.21556091]
[92.50000000 221.21556091]
[92.50000000 206.21556091]
[92.50000000 191.21556091]
[92.50000000 176.21556091]
[92.50000000 161.21556091]
[80.80000305 158.60848999]
[69.82530975 153.78739929]
[59.99052048 146.93438721]
[51.66714859 138.30836487]
[45.16962433 128.23518372]
[40.74340820 117.09537506]
[38.55569839 105.30976105]
[38.68914795 93.32356262]
[41.13870621 81.58956909]
[45.81184387 70.55107117]
[52.53202820 60.62504578]
[61.04538345 52.18647003]
[53.05546951 39.49153900]
[45.06555176 26.79661179]
[37.07563782 14.10168171]
[29.08572006 1.40675175]
[15.48814869 7.78528500]
[1.20977926 12.44444561]
[-13.53293324 15.31360149]
[-28.51649094 16.34925842]
[-43.51375198 15.53571320]
[-58.29735565 12.88530159]
[-72.64318848 8.43820286]
[-86.33377075 2.26183295]
[-99.16156006 -5.55017519]
[-110.93208313 -14.87939453]
[-121.46691132 -25.58439445]
[-130.60633850 -37.50289154]
[-138.21179199 -50.45420456]
[-144.16801453 -64.24199677]
[-148.38467407 -78.65724182]
[-150.79786682 -93.48141479]
[-151.37100220 -108.48978424]
[-150.09539795 -123.45482635]
[-146.99038696 -138.14967346]
[-142.10304260 -152.35156250]
[-135.50746155 -165.84518433]
[-127.30361938 -178.42597961]
[-117.61588287 -189.90324402]
[-106.59112549 -200.10296631]
[-94.39647675 -208.87052917]
[-81.21680450 -216.07301331]
[-67.25190735 -221.60124207]
[-52.71349716 -225.37139893]
[-37.82196045 -227.32633972]
[-22.80305481 -227.43641663]
[-7.88446379 -225.69996643]
[6.70765114 -222.14331055]
[20.75207710 -216.82035828]
[34.03590393 -209.81182861]
[46.35775375 -201.22395325]
[57.53083038 -191.18692017]
[67.38574982 -179.85289001]
[75.77311707 -167.39369202]
[82.56578064 -153.99818420]
[87.66076660 -139.86947632]
[90.98082733 -125.22171021]
[92.47564697 -110.27697754]
[92.12255859 -95.26181793]
[89.92691040 -80.40386963]
[85.92198944 -65.92835999]
[80.16851044 -52.05475235]
[72.75370026 -38.99335098]
[63.78995514 -26.94217300]
[53.41316986 -16.08390808]
[41.78065109 -6.58316469]
[49.77056503 6.11176538]
[57.76048279 18.80669403]
[65.75039673 31.50162506]
[73.74031067 44.19655228]
[100.36765289 38.32779694]
[126.92313385 44.51359940]
[148.21617126 61.54486847]
[160.99353027 53.68744278]
[173.77087402 45.83001709]
[186.54823303 37.97259140]
[191.65275574 22.76327133]
[206.77522278 17.40689278]
[220.31495667 26.01241302]
[221.88545227 41.97840881]
[210.28195190 53.05714035]
[194.40567017 50.74995041]
[181.62831116 58.60737610]
[168.85095215 66.46479797]
[156.07359314 74.32222748]
[158.56686401 80.67338562]
[160.34332275 87.26108551]
[161.38121033 94.00469971]
[161.66781616 100.82170105]
[176.53086853 102.84403229]
[191.39392090 104.86637115]
[206.25695801 106.88870239]
[218.68363953 97.12380219]
[234.36528015 99.08889008]
[243.99826050 111.61811066]
[241.86749268 127.27809906]
[229.23712158 136.77806091]
[213.60052490 134.48185730]
[204.23463440 121.75174713]
[189.37158203 119.72941589]
[174.50852966 117.70708466]
[159.64549255 115.68474579]
[156.12574768 125.56357574]
[150.98313904 134.70324707]
[144.36637878 142.83947754]
[136.46676636 149.73701477]
[127.51273346 155.19642639]
[117.76317596 159.05984497]
[107.50000000 161.21556091]
[107.50000000 176.21556091]
[107.50000000 191.21556091]
[107.50000000 206.21556091]
[107.50000000 221.21556091]
[107.50000000 236.21556091]
[107.50000000 251.21556091]
[107.50000000 266.21557617]
[107.50000000 281.21557617]
[107.50000000 296.21557617]
[107.50000000 311.21557617]
[122.03988647 315.27688599]
[134.94427490 323.11138916]
[145.25555420 334.13772583]
[152.20857239 347.53765869]
[155.28736877 362.31680298]
[154.26348877 377.37847900]
[149.21287537 391.60501099]
[140.51036072 403.94067383]
[128.80169678 413.47009277]
[114.95575714 419.48611450]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[33 91]
[34 90]
[35 89]
[36 88]
[37 87]
[94 106]
[95 105]
[96 104]
[97 103]
[110 123]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
