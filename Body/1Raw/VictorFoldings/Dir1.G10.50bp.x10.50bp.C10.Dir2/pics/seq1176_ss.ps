%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGGUUGGUGGGGGGGGGGCAAUUUCGUGCCAGCCACCGCGGUCACACGAUUAACCCAAGUCAAUAGAAxxxxxxxxxxCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCCACACCCACCCAAGAACCCCCCCCCCCAGGGUUUGU\
) } def
/len { sequence length } bind def

/coor [
[95.92607880 366.54711914]
[82.08014679 360.53109741]
[70.37148285 351.00167847]
[61.66895676 338.66601562]
[56.61835480 324.43948364]
[55.59446335 309.37780762]
[58.67326355 294.59866333]
[65.62628174 281.19873047]
[75.93756866 270.17239380]
[88.84194946 262.33789062]
[103.38183594 258.27658081]
[103.38183594 243.27658081]
[103.38183594 228.27658081]
[103.38183594 213.27658081]
[103.38183594 198.27658081]
[103.38183594 183.27658081]
[103.38183594 168.27658081]
[103.38183594 153.27658081]
[103.38183594 138.27658081]
[103.38183594 123.27657318]
[99.01435089 137.62666321]
[85.47393036 144.08088684]
[71.57613373 138.43721008]
[66.36917877 124.36994934]
[73.24308777 111.03768158]
[87.72212219 107.12036133]
[72.72942352 106.65232086]
[57.73672485 106.18428040]
[42.74403000 105.71623993]
[27.75133324 105.24819183]
[12.75133419 105.24819183]
[-2.24136209 105.71623993]
[-10.78518963 109.13015747]
[-17.55012131 106.03478241]
[-32.54930878 106.19081879]
[-46.38223648 114.99889374]
[-60.79973984 107.18431854]
[-60.97033310 90.78606415]
[-46.71852112 82.67324066]
[-32.70534515 91.19163513]
[-17.70615768 91.03559875]
[-2.70940423 90.72354126]
[12.28329182 90.25550079]
[14.97867203 87.88855743]
[18.97758102 86.74382782]
[23.67668533 87.42998505]
[28.21937561 90.25550079]
[43.21207047 90.72354126]
[58.20476913 91.19158173]
[73.19746399 91.65962219]
[88.19016266 92.12767029]
[101.71434784 85.63950348]
[110.73188019 73.65267181]
[99.51342773 63.68275833]
[89.14494324 52.83161163]
[79.69544220 41.17143631]
[71.22780609 28.77983093]
[63.79837799 15.73926258]
[57.45660782 2.13651443]
[52.24469757 -11.93788815]
[48.19733429 -26.39027977]
[45.34144974 -41.12448120]
[43.69604874 -56.04243851]
[43.27208710 -71.04487610]
[44.07238388 -86.03194427]
[46.09160995 -100.90391541]
[49.31632996 -115.56181335]
[53.72508240 -129.90809631]
[59.28852844 -143.84727478]
[65.96964264 -157.28660583]
[73.72396851 -170.13664246]
[82.49989319 -182.31185913]
[92.23901367 -193.73123169]
[102.87652588 -204.31878662]
[114.34162903 -214.00404358]
[126.55802155 -222.72254944]
[139.44441223 -230.41629028]
[152.91503906 -237.03407288]
[166.88026428 -242.53182983]
[181.24714661 -246.87300110]
[195.92005920 -250.02868652]
[210.80137634 -251.97787476]
[225.79203796 -252.70761108]
[240.79231262 -252.21302795]
[255.70236206 -250.49742126]
[270.42294312 -247.57220459]
[284.85614014 -243.45684814]
[298.90585327 -238.17874146]
[312.47857666 -231.77299500]
[325.48403931 -224.28227234]
[337.83563232 -215.75637817]
[349.45120239 -206.25209045]
[360.25341797 -195.83264160]
[370.17041016 -184.56738281]
[379.13616943 -172.53126526]
[387.09103394 -159.80441284]
[393.98205566 -146.47149658]
[399.76339722 -132.62126160]
[404.39654541 -118.34587860]
[407.85070801 -103.74034882]
[410.10290527 -88.90187073]
[411.13809204 -73.92919159]
[410.94943237 -58.92195129]
[409.53814697 -43.98002625]
[406.91366577 -29.20285416]
[403.09341431 -14.68877506]
[398.10284424 -0.53437865]
[391.97512817 13.16613865]
[384.75109863 26.32159996]
[376.47882080 38.84445572]
[367.21331787 50.65137100]
[357.01623535 61.66376495]
[345.95550537 71.80835724]
[334.10467529 81.01763916]
[321.54263306 89.23030853]
[308.35299683 96.39172363]
[294.62350464 102.45422363]
[280.44555664 107.37746429]
[265.91348267 111.12867737]
[251.12399292 113.68289948]
[236.17552185 115.02313995]
[221.16755676 115.14046478]
[206.19996643 114.03411102]
[191.37236023 111.71142578]
[176.78341675 108.18787384]
[162.53021240 103.48690033]
[148.70762634 97.63979340]
[135.40762329 90.68547058]
[122.71871185 82.67019653]
[113.70117950 94.65702820]
[118.38183594 123.27657318]
[118.38183594 138.27658081]
[118.38183594 153.27658081]
[118.38183594 168.27658081]
[118.38183594 183.27658081]
[118.38183594 198.27658081]
[118.38183594 213.27658081]
[118.38183594 228.27658081]
[118.38183594 243.27658081]
[118.38183594 258.27658081]
[132.92172241 262.33789062]
[145.82611084 270.17239380]
[156.13739014 281.19873047]
[163.09040833 294.59866333]
[166.16920471 309.37780762]
[165.14532471 324.43948364]
[160.09471130 338.66601562]
[151.39219666 351.00167847]
[139.68353271 360.53109741]
[125.83759308 366.54711914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[31 43]
[32 42]
[34 41]
[35 40]
[52 130]
[53 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
