%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACUACAAUGGGGGGGGGGCUUCCUAGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACACAACAUxxxxxxxxxxCCAUUAUGUAAAAUCCAUUGUCGCAUCCACCUUUAUUAUCAGUCUCUUCCCCCCCCCCCCCCACAACAAU\
) } def
/len { sequence length } bind def

/coor [
[84.96763611 351.85992432]
[71.12169647 345.84390259]
[59.41303253 336.31448364]
[50.71050644 323.97882080]
[45.65990448 309.75228882]
[44.63601303 294.69061279]
[47.71481323 279.91143799]
[54.66783524 266.51150513]
[64.97911835 255.48518372]
[77.88349915 247.65068054]
[92.42338562 243.58935547]
[92.42338562 228.58935547]
[92.42338562 213.58935547]
[92.42338562 198.58935547]
[92.42338562 183.58935547]
[92.42338562 168.58935547]
[92.42338562 153.58935547]
[92.42338562 138.58935547]
[92.42338562 123.58936310]
[92.42338562 108.58936310]
[81.54052734 118.91231537]
[66.57997894 119.99949646]
[54.31901550 111.35839081]
[50.31196594 96.90351105]
[56.37407303 83.18305206]
[69.75914001 76.41252899]
[84.40359497 79.65904236]
[93.67349243 91.45227814]
[95.85032654 76.61106873]
[98.02716827 61.76986694]
[100.20400238 46.92866135]
[85.52961731 43.79477692]
[71.08885956 39.71759415]
[56.94229889 34.71421051]
[43.14928055 28.80561256]
[29.76765251 22.01658249]
[16.85354233 14.37559700]
[4.46111631 5.91470480]
[-7.35764647 -3.33060575]
[-18.55317307 -13.32155609]
[-29.07850647 -24.01624107]
[-38.88949966 -35.36980057]
[-47.94499969 -47.33461761]
[-56.20702362 -59.86050415]
[-63.64092255 -72.89492035]
[-70.21550751 -86.38320160]
[-75.90321350 -100.26876831]
[-80.68017578 -114.49337769]
[-84.52635956 -128.99737549]
[-87.42562866 -143.71990967]
[-89.36582947 -158.59924316]
[-90.33882141 -173.57296753]
[-90.34053040 -188.57826233]
[-89.37093353 -203.55220032]
[-87.43410492 -218.43196106]
[-84.53817749 -233.15516663]
[-80.69528961 -247.66001892]
[-75.92155457 -261.88571167]
[-70.23699951 -275.77258301]
[-63.66547775 -289.26235962]
[-56.23453903 -302.29846191]
[-47.97535706 -314.82620239]
[-38.92257309 -326.79309082]
[-29.11415863 -338.14886475]
[-18.59125328 -348.84594727]
[-7.39799356 -358.83944702]
[4.41867018 -368.08743286]
[16.80917549 -376.55114746]
[29.72154999 -384.19506836]
[43.10163879 -390.98712158]
[56.89331436 -396.89886475]
[71.03873444 -401.90545654]
[85.47856903 -405.98590088]
[100.15224457 -409.12310791]
[114.99822235 -411.30392456]
[129.95422363 -412.51916504]
[144.95753479 -412.76376343]
[159.94520569 -412.03671265]
[174.85437012 -410.34100342]
[189.62251282 -407.68377686]
[204.18768311 -404.07617188]
[218.48880005 -399.53335571]
[232.46585083 -394.07434082]
[246.06022644 -387.72204590]
[259.21490479 -380.50308228]
[271.87472534 -372.44778442]
[283.98657227 -363.58990479]
[295.49963379 -353.96658325]
[306.36566162 -343.61822510]
[316.53903198 -332.58819580]
[325.97708130 -320.92279053]
[334.64025879 -308.67089844]
[342.49218750 -295.88397217]
[349.49996948 -282.61557007]
[355.63415527 -268.92138672]
[360.86907959 -254.85887146]
[365.18273926 -240.48698425]
[368.55706787 -225.86601257]
[370.97790527 -211.05728149]
[372.43511963 -196.12290955]
[372.92254639 -181.12553406]
[372.43817139 -166.12805176]
[370.98403931 -151.19338989]
[368.56622314 -136.38417053]
[365.19485474 -121.76250458]
[360.88412476 -107.38973999]
[355.65206909 -93.32614899]
[349.52066040 -79.63072205]
[342.51562500 -66.36090088]
[334.66629028 -53.57234955]
[326.00561523 -41.31870651]
[316.56994629 -29.65136528]
[306.39883423 -18.61926651]
[295.53494263 -8.26867962]
[284.02383423 1.35697877]
[271.91378784 10.21733570]
[259.25561523 18.27522850]
[246.10240173 25.49685669]
[232.50932312 31.85193253]
[218.53337097 37.31379700]
[204.23320007 41.85954666]
[189.66876221 45.47011185]
[174.90116882 48.13034821]
[159.99234009 49.82909775]
[145.00480652 50.55923462]
[130.00146484 50.31769562]
[115.04521179 49.10549927]
[112.86837006 63.94670105]
[110.69153595 78.78791046]
[108.51469421 93.62911224]
[107.42338562 108.58936310]
[107.42338562 123.58936310]
[107.42338562 138.58935547]
[107.42338562 153.58935547]
[107.42338562 168.58935547]
[107.42338562 183.58935547]
[107.42338562 198.58935547]
[107.42338562 213.58935547]
[107.42338562 228.58935547]
[107.42338562 243.58935547]
[121.96327209 247.65068054]
[134.86766052 255.48518372]
[145.17893982 266.51150513]
[152.13195801 279.91143799]
[155.21075439 294.69061279]
[154.18687439 309.75228882]
[149.13626099 323.97882080]
[140.43374634 336.31448364]
[128.72508240 345.84390259]
[114.87914276 351.85992432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 130]
[29 129]
[30 128]
[31 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
