%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCUCAUUCGGGGGGGGGGACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCAUUCUCCUCCUxxxxxxxxxxCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACCCCCCCCCCCAACCAUCAUUC\
) } def
/len { sequence length } bind def

/coor [
[75.22972107 387.94665527]
[61.74084091 381.21511841]
[50.25534058 371.45056152]
[41.44097137 359.22067261]
[35.81018829 345.23648071]
[33.69036102 330.31100464]
[35.20473099 315.31198120]
[40.26525116 301.11148071]
[48.57771683 288.53506470]
[59.65884781 278.31390381]
[72.86440277 271.04226685]
[87.42662811 267.14288330]
[87.11865234 252.14605713]
[86.81067657 237.14921570]
[86.50269318 222.15238953]
[86.19471741 207.15554810]
[85.88674164 192.15870667]
[85.57876587 177.16186523]
[85.27078247 162.16503906]
[84.96280670 147.16819763]
[84.65483093 132.17135620]
[72.77800751 123.00942230]
[58.19425583 126.51858521]
[43.61050797 130.02775574]
[32.00338745 140.77882385]
[17.81920052 136.23370361]
[3.23545146 139.74287415]
[-11.34829807 143.25204468]
[-17.15440178 157.64192200]
[-30.32762337 165.84228516]
[-45.80258942 164.69990540]
[-57.62886047 154.65406799]
[-61.25899506 139.56759644]
[-55.29713058 125.24153900]
[-42.03572845 117.18456268]
[-26.57406235 118.49475098]
[-14.85746479 128.66828918]
[-0.27371588 125.15911865]
[14.31003380 121.64995575]
[24.87402344 111.14988708]
[40.10134125 115.44400787]
[54.68508911 111.93483734]
[69.26883698 108.42567444]
[72.35305786 92.47190857]
[82.26165009 81.76167297]
[75.43807983 68.40357208]
[68.61450195 55.04547119]
[54.26102829 59.52719116]
[39.35657883 61.51852417]
[24.32998657 60.96218109]
[9.61359406 57.87416840]
[-4.36917686 52.34333420]
[-17.21601486 44.52881241]
[-28.55728912 34.65544128]
[-38.06669235 23.00729561]
[-45.47061539 9.91951752]
[-50.55603790 -4.23133039]
[-53.17663574 -19.03810120]
[-53.25701523 -34.07477570]
[-50.79485703 -48.90871429]
[-45.86101151 -63.11312103]
[-38.59742737 -76.27930450]
[-29.21309280 -88.02844238]
[-17.97801971 -98.02249908]
[-5.21545792 -105.97391510]
[8.70738602 -111.65392303]
[23.38992310 -114.89908600]
[38.40970993 -115.61603546]
[53.33459473 -113.78415680]
[67.73516083 -109.45613861]
[81.19707489 -102.75652313]
[93.33300781 -93.87805939]
[103.79379272 -83.07621002]
[112.27844238 -70.66175079]
[118.54283905 -56.99188232]
[122.40675354 -42.45991135]
[123.75899506 -27.48394775]
[122.56066895 -12.49488354]
[118.84625244 2.07601595]
[112.72261810 15.80951786]
[104.36595154 28.31048203]
[94.01668549 39.21923065]
[81.97260284 48.22189713]
[88.79617310 61.57999802]
[95.61975098 74.93809509]
[110.15687561 76.67354584]
[121.33068848 86.13322449]
[135.75807190 82.02828217]
[143.48475647 68.50289917]
[158.17465210 64.54541779]
[171.02142334 71.99498749]
[185.44880676 67.89004517]
[199.87619019 63.78510284]
[214.30357361 59.68015671]
[228.64364624 55.27985764]
[242.89033508 50.58605576]
[257.13702393 45.89225388]
[245.34031677 36.62739563]
[245.01831055 21.63085175]
[256.40646362 11.86815834]
[271.17770386 14.47783756]
[278.53125000 27.55167961]
[273.09060669 41.52961349]
[287.74331665 38.32061386]
[302.39605713 35.11161804]
[317.04876709 31.90262222]
[331.70150757 28.69362640]
[343.44949341 17.25174141]
[359.15682983 21.96466446]
[362.66513062 37.98414230]
[350.36538696 48.83071136]
[334.91049194 43.34635162]
[320.25778198 46.55534744]
[305.60504150 49.76434326]
[290.95233154 52.97333908]
[276.29959106 56.18233490]
[261.83084106 60.13894653]
[247.58413696 64.83274841]
[233.33744812 69.52655029]
[230.40319824 73.36574554]
[225.00080872 75.36625671]
[218.40852356 74.10754395]
[203.98114014 78.21248627]
[189.55375671 82.31742859]
[175.12637329 86.42237854]
[168.12551880 99.51908112]
[153.55258179 103.88760376]
[139.86302185 96.45566559]
[125.43563080 100.56060791]
[119.92439270 120.59233856]
[99.65166473 131.86337280]
[99.95964813 146.86021423]
[100.26762390 161.85705566]
[100.57559967 176.85389709]
[100.88357544 191.85072327]
[101.19155884 206.84756470]
[101.49953461 221.84440613]
[101.80751038 236.84124756]
[102.11548615 251.83808899]
[102.42346954 266.83493042]
[117.13349915 270.13314819]
[130.62646484 276.85650635]
[142.11787415 286.61410522]
[150.93966675 298.83865356]
[156.57891846 312.81942749]
[158.70779419 327.74362183]
[157.20251465 342.74353027]
[152.15060425 356.94711304]
[143.84576416 369.52856445]
[132.77084351 379.75643921]
[119.56969452 387.03607178]
[105.00983429 390.94427490]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 43]
[23 42]
[24 41]
[26 39]
[27 38]
[28 37]
[45 85]
[46 84]
[47 83]
[87 129]
[88 128]
[91 125]
[92 124]
[93 123]
[94 122]
[95 119]
[96 118]
[97 117]
[103 116]
[104 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
