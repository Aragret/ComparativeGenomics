%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAACUUAAGGGGGGGGGGUAUGACUAGCUUACACAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGAxxxxxxxxxxCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUCCCCCCCCCCAACAACAUAA\
) } def
/len { sequence length } bind def

/coor [
[93.17752075 372.44171143]
[79.33158112 366.42568970]
[67.62291718 356.89627075]
[58.92039490 344.56060791]
[53.86979294 330.33407593]
[52.84590149 315.27239990]
[55.92470169 300.49322510]
[62.87772369 287.09329224]
[73.18901062 276.06698608]
[86.09339142 268.23245239]
[100.63327789 264.17114258]
[100.63327789 249.17115784]
[100.63327789 234.17115784]
[100.63327789 219.17115784]
[100.63327789 204.17115784]
[100.63327789 189.17115784]
[100.63327789 174.17115784]
[100.63327789 159.17115784]
[100.63327789 144.17115784]
[100.63327789 129.17115784]
[69.83901978 116.62253571]
[54.93711853 118.33522797]
[40.03521347 120.04791260]
[25.13331223 121.76060486]
[10.23141003 123.47329712]
[1.58077765 133.09724426]
[-10.91061783 134.18536377]
[-20.46210670 126.69695282]
[-35.39641571 128.09925842]
[-50.33072281 129.50155640]
[-65.26502991 130.90386963]
[-73.05603027 144.32324219]
[-87.26039124 150.56951904]
[-102.41622925 147.24085999]
[-112.69583893 135.61720276]
[-114.14647675 120.16808319]
[-106.21035767 106.83400726]
[-91.93907928 100.74218750]
[-76.82023621 104.23506927]
[-66.66733551 115.96955109]
[-51.73302460 114.56725311]
[-36.79871750 113.16494751]
[-21.86441040 111.76264191]
[-8.16203213 100.84272003]
[8.51872063 108.57138824]
[23.42062187 106.85870361]
[38.32252502 105.14601135]
[53.22442627 103.43331909]
[68.12632751 101.72063446]
[73.61336517 87.76024628]
[63.86571121 76.35922241]
[54.11805725 64.95819855]
[44.37040329 53.55717850]
[34.62275314 42.15615845]
[24.87510109 30.75513840]
[15.12744904 19.35411644]
[-0.50584728 14.40112972]
[-3.76835585 -1.67021346]
[8.69611263 -12.32709217]
[24.06518173 -6.60662365]
[26.52846909 9.60646534]
[36.27612305 21.00748634]
[46.02377319 32.40850830]
[55.77142715 43.80952835]
[65.51908112 55.21054840]
[75.26673126 66.61157227]
[85.01438141 78.01258850]
[99.69091034 74.91426849]
[103.99848938 60.54608536]
[90.88937378 53.12322998]
[79.76102448 42.96904373]
[71.17163086 30.59285545]
[65.55203247 16.61544800]
[63.18411255 1.73792565]
[64.18664551 -13.29346371]
[68.50933838 -27.72475243]
[75.93536377 -40.83206940]
[86.09224701 -51.95796204]
[98.47052002 -60.54435730]
[112.44928741 -66.16056824]
[127.32738495 -68.52487946]
[142.35852051 -67.51870728]
[156.78877258 -63.19252014]
[169.89428711 -55.76331329]
[181.01771545 -45.60373688]
[189.60112000 -33.22338486]
[195.21392822 -19.24325752]
[197.57464600 -4.36458921]
[196.56483459 10.66631317]
[192.23515320 25.09550476]
[184.80276489 38.19922256]
[174.64048767 49.32019043]
[162.25805664 57.90058899]
[148.27658081 63.51002121]
[133.39733887 65.86712646]
[118.36667633 64.85366821]
[114.05908966 79.22185516]
[117.98780823 85.61053467]
[123.07837677 71.50074768]
[137.28372192 66.68326569]
[149.90715027 74.78566742]
[151.44317627 89.70681763]
[140.73513794 100.21101379]
[125.84523010 98.38788605]
[129.77394104 104.77656555]
[144.53999329 107.41543579]
[159.30606079 110.05429840]
[174.07211304 112.69316101]
[189.01823425 107.50431824]
[200.18582153 117.35998535]
[214.95187378 119.99884796]
[223.84843445 107.59667206]
[237.24917603 100.29030609]
[252.49337769 99.53044128]
[266.55426025 105.46794128]
[276.64007568 116.92391968]
[280.74822998 131.62376404]
[278.06307983 146.64883423]
[269.11773682 159.01588440]
[255.68833923 166.26942444]
[240.44128418 166.96925354]
[226.40386963 160.97642517]
[216.36326599 149.48081970]
[212.31301880 134.76490784]
[197.54696655 132.12603760]
[183.65701294 137.50363159]
[171.43324280 127.45921326]
[156.66719055 124.82035065]
[141.90113831 122.18148804]
[127.13507843 119.54262543]
[115.63327789 129.17115784]
[115.63327789 144.17115784]
[115.63327789 159.17115784]
[115.63327789 174.17115784]
[115.63327789 189.17115784]
[115.63327789 204.17115784]
[115.63327789 219.17115784]
[115.63327789 234.17115784]
[115.63327789 249.17115784]
[115.63327789 264.17114258]
[130.17315674 268.23245239]
[143.07754517 276.06698608]
[153.38882446 287.09329224]
[160.34184265 300.49322510]
[163.42065430 315.27239990]
[162.39675903 330.33407593]
[157.34616089 344.56060791]
[148.64363098 356.89627075]
[136.93496704 366.42568970]
[123.08902740 372.44171143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 49]
[22 48]
[23 47]
[24 46]
[25 45]
[28 43]
[29 42]
[30 41]
[31 40]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[68 97]
[69 96]
[105 130]
[106 129]
[107 128]
[108 127]
[110 125]
[111 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
