%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACUAAUAGGGGGGGGGGCUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCxxxxxxxxxxGGACUUCACGUCAUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUCCGCCCCCCCCCCCCAACUAAUA\
) } def
/len { sequence length } bind def

/coor [
[84.94629669 647.89819336]
[71.10035706 641.88214111]
[59.39169693 632.35272217]
[50.68917084 620.01708984]
[45.63856888 605.79052734]
[44.61467743 590.72888184]
[47.69347763 575.94970703]
[54.64649963 562.54980469]
[64.95778656 551.52343750]
[77.86216736 543.68896484]
[92.40205383 539.62762451]
[92.40205383 524.62762451]
[92.40205383 509.62762451]
[92.40205383 494.62762451]
[92.40205383 479.62762451]
[92.40205383 464.62762451]
[92.40205383 449.62762451]
[92.40205383 434.62762451]
[92.40205383 419.62762451]
[92.40205383 404.62762451]
[92.40205383 389.62762451]
[78.16531372 385.05859375]
[66.02142334 376.30093384]
[57.16704178 364.20217896]
[52.47945404 349.93972778]
[52.42968369 334.90643311]
[57.03519058 320.57449341]
[65.85692596 308.35134888]
[78.04114532 299.44140625]
[92.40205383 294.72738647]
[92.40205383 279.72738647]
[92.40205383 264.72738647]
[92.40205383 249.72740173]
[78.91899109 243.34989929]
[69.50325775 231.70286560]
[66.06406403 217.06274414]
[69.33570099 202.32109070]
[78.72154999 190.41340637]
[92.40205383 183.73468018]
[92.40205383 168.73468018]
[92.40205383 153.73468018]
[92.40205383 138.73468018]
[92.40205383 123.73468781]
[92.40205383 108.73468781]
[82.12973785 119.66535950]
[67.42523193 122.62805176]
[53.72155762 116.52810669]
[46.08195114 103.61933136]
[47.32909012 88.67127228]
[57.00218582 77.20692444]
[71.52722168 73.46214294]
[85.53748322 78.82055664]
[93.85621643 91.30148315]
[96.34133911 76.50877380]
[94.67159271 67.46091461]
[99.03510284 61.43551254]
[101.82743073 46.69770813]
[104.61975098 31.95990181]
[92.49219513 40.78726578]
[77.49320221 40.96085358]
[65.16459656 32.41653061]
[60.06155777 18.31124687]
[64.06954956 3.85662937]
[75.70771027 -5.60662985]
[90.67596436 -6.58204508]
[103.44384003 1.29078054]
[109.29377747 15.10212231]
[114.48919678 1.03060257]
[119.68460846 -13.04091644]
[106.89953613 -20.98614693]
[95.97576904 -31.34260750]
[87.36064148 -43.68620682]
[81.40692902 -57.51147842]
[78.35842896 -72.25228882]
[78.33998871 -87.30501556]
[81.35235596 -102.05325317]
[87.27217865 -115.89307404]
[95.85704041 -128.25775146]
[106.75539398 -138.64094543]
[119.52096558 -146.61747742]
[133.63101196 -151.86070251]
[148.50773621 -154.15594482]
[163.54193115 -153.40919495]
[178.11798096 -149.65101624]
[191.63897705 -143.03533936]
[203.55126953 -133.83303833]
[213.36705017 -122.42096710]
[220.68435669 -109.26643372]
[225.20356750 -94.90810394]
[226.73960876 -79.93394470]
[225.22958374 -64.95713806]
[220.73533630 -50.59097290]
[213.44090271 -37.42374420]
[203.64495850 -25.99463081]
[191.74867249 -16.77165222]
[178.23918152 -10.13248444]
[163.66969299 -6.34899616]
[148.63681030 -5.57611895]
[133.75613403 -7.84550142]
[128.56071472 6.22601795]
[123.36529541 20.29753685]
[119.35755920 34.75222778]
[116.56523132 49.49003220]
[113.77291107 64.22783661]
[111.13404846 78.99389648]
[108.64892578 93.78659821]
[107.40205383 108.73468781]
[107.40205383 123.73468781]
[107.40205383 138.73468018]
[107.40205383 153.73468018]
[107.40205383 168.73468018]
[107.40205383 183.73468018]
[121.08255005 190.41340637]
[130.46839905 202.32109070]
[133.74003601 217.06274414]
[130.30084229 231.70286560]
[120.88511658 243.34989929]
[107.40205383 249.72740173]
[107.40205383 264.72738647]
[107.40205383 279.72738647]
[107.40205383 294.72738647]
[121.76295471 299.44140625]
[133.94717407 308.35134888]
[142.76892090 320.57449341]
[147.37442017 334.90643311]
[147.32464600 349.93972778]
[142.63705444 364.20217896]
[133.78268433 376.30093384]
[121.63879395 385.05859375]
[107.40205383 389.62762451]
[107.40205383 404.62762451]
[107.40205383 419.62762451]
[107.40205383 434.62762451]
[107.40205383 449.62762451]
[107.40205383 464.62762451]
[107.40205383 479.62762451]
[107.40205383 494.62762451]
[107.40205383 509.62762451]
[107.40205383 524.62762451]
[107.40205383 539.62762451]
[121.94194031 543.68896484]
[134.84631348 551.52343750]
[145.15760803 562.54980469]
[152.11062622 575.94970703]
[155.18942261 590.72888184]
[154.16552734 605.79052734]
[149.11492920 620.01708984]
[140.41241455 632.35272217]
[128.70375061 641.88214111]
[114.85780334 647.89819336]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[30 121]
[31 120]
[32 119]
[33 118]
[39 112]
[40 111]
[41 110]
[42 109]
[43 108]
[44 107]
[53 106]
[54 105]
[56 104]
[57 103]
[58 102]
[67 101]
[68 100]
[69 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
