%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAACCUCCGAGGGGGGGGGGGCAGUACAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAUACUCAAUUxxxxxxxxxxAAACUUUACAGUCAGAGGUUCAAUUCCUCUUCUUAACAACAUACCCAUGGCCCCCCCCCCCCAACCUCCUA\
) } def
/len { sequence length } bind def

/coor [
[108.70707703 469.50033569]
[94.68513489 463.94732666]
[82.48517609 455.08099365]
[72.87409973 443.45867920]
[66.45607758 429.81100464]
[63.63454056 414.99581909]
[64.58685303 399.94442749]
[69.25315857 385.60299683]
[77.34012604 372.87304688]
[88.33940125 362.55477905]
[101.55956268 355.29681396]
[116.16957092 351.55535889]
[116.16957092 336.55535889]
[116.16957092 321.55535889]
[116.16957092 306.55535889]
[116.16957092 291.55535889]
[116.16957092 276.55535889]
[116.16957092 261.55535889]
[116.16957092 246.55535889]
[116.16957092 231.55535889]
[116.16957092 216.55535889]
[108.43227386 203.82809448]
[116.16957092 190.02792358]
[116.16957092 175.02792358]
[115.70764923 160.03503418]
[114.78423309 145.06347656]
[113.86082458 130.09193420]
[94.05263519 130.46269226]
[78.89114380 119.80461884]
[73.37140656 103.45629883]
[58.54891968 101.15542603]
[43.72644043 98.85455322]
[28.90395737 96.55367279]
[16.23145485 105.61156464]
[1.23212612 103.06700134]
[-7.32509375 90.92988586]
[-22.14757538 88.62901306]
[-36.97005844 86.32813263]
[-51.79254150 84.02725983]
[-65.53916168 92.29829407]
[-80.52577209 86.57283783]
[-85.25593567 71.24295807]
[-76.10107422 58.06843948]
[-60.08400726 57.15563583]
[-49.49166489 69.20478058]
[-34.66918182 71.50565338]
[-19.84670067 73.80652618]
[-5.02421904 76.10740662]
[6.80971432 67.13558197]
[21.87459564 69.25784302]
[31.20483208 81.73119354]
[46.02731323 84.03206635]
[60.84979630 86.33293915]
[75.67227936 88.63381958]
[81.70717621 80.34292603]
[90.41000366 74.91893005]
[89.17938995 59.96949387]
[87.94877625 45.02006149]
[72.98384094 43.48207855]
[58.55638504 39.22025681]
[45.15779877 32.37975311]
[33.24443436 23.19354439]
[23.22205544 11.97451687]
[15.43202305 -0.89521676]
[10.13966084 -14.97731686]
[7.52522564 -29.79215431]
[7.67776394 -44.83513641]
[10.59208012 -59.59391022]
[16.16891289 -73.56579590]
[24.21831894 -86.27491760]
[34.46613693 -97.28839874]
[46.56333160 -106.23114014]
[60.09787750 -112.79853821]
[74.60878754 -116.76692200]
[89.60182953 -118.00112152]
[104.56635284 -116.45910645]
[118.99266052 -112.19339752]
[132.38940430 -105.34928131]
[144.30029297 -96.15986633]
[154.31964111 -84.93813324]
[162.10620117 -72.06629944]
[167.39477539 -57.98277664]
[170.00521851 -43.16723251]
[169.84861755 -28.12429237]
[166.93032837 -13.36630344]
[161.34973145 0.60407776]
[153.29689026 13.31102657]
[143.04611206 24.32174873]
[130.94650269 33.26122665]
[117.41019440 39.82497787]
[102.89820862 43.78944778]
[104.12882233 58.73888397]
[105.35943604 73.68831635]
[122.12400055 79.75128937]
[132.92137146 96.28113556]
[146.20870972 89.32077789]
[159.49606323 82.36042023]
[172.78340149 75.40007019]
[186.07073975 68.43971252]
[189.23916626 53.12648010]
[201.54145813 43.47311020]
[217.16885376 44.03762436]
[228.74256897 54.55347824]
[230.79785156 70.05541229]
[222.36425781 83.22387695]
[207.42387390 87.84113312]
[193.03109741 81.72705078]
[179.74375916 88.68740845]
[166.45642090 95.64776611]
[153.16906738 102.60812378]
[139.88172913 109.56848145]
[153.23950195 102.74426270]
[168.23907471 102.63168335]
[181.69778442 109.25462341]
[190.75987244 121.20780945]
[193.50251770 135.95494080]
[189.34375000 150.36689758]
[179.16603088 161.38569641]
[165.12889099 166.67330933]
[150.21081543 165.10777283]
[137.57717896 157.02128601]
[129.90866089 144.12966919]
[128.83236694 129.16851807]
[129.75578308 144.14007568]
[130.67919922 159.11161804]
[133.63784790 163.56152344]
[134.46719360 168.23248291]
[133.44845581 172.26133728]
[131.16957092 175.02792358]
[131.16957092 190.02792358]
[138.90687561 203.82809448]
[131.16957092 216.55535889]
[131.16957092 231.55535889]
[131.16957092 246.55535889]
[131.16957092 261.55535889]
[131.16957092 276.55535889]
[131.16957092 291.55535889]
[131.16957092 306.55535889]
[131.16957092 321.55535889]
[131.16957092 336.55535889]
[131.16957092 351.55535889]
[145.77958679 355.29681396]
[158.99974060 362.55477905]
[169.99902344 372.87304688]
[178.08598328 385.60299683]
[182.75228882 399.94442749]
[183.70460510 414.99581909]
[180.88307190 429.81100464]
[174.46504211 443.45867920]
[164.85397339 455.08099365]
[152.65402222 463.94732666]
[138.63208008 469.50033569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 130]
[24 129]
[25 125]
[26 124]
[27 123]
[30 54]
[31 53]
[32 52]
[33 51]
[36 48]
[37 47]
[38 46]
[39 45]
[56 93]
[57 92]
[58 91]
[95 111]
[96 110]
[97 109]
[98 108]
[99 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
