%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACAACACGGGGGGGGGGAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAAUAUGAxxxxxxxxxxGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCAUUCGUAUAAUAAUUACCCCCCCCCCCAUCACAAGAC\
) } def
/len { sequence length } bind def

/coor [
[83.43872070 367.29098511]
[70.21852112 360.01852417]
[59.33171844 349.57150269]
[51.52058792 336.66226196]
[47.31770706 322.17095947]
[47.00963593 307.08560181]
[50.61737442 292.43478394]
[57.89495087 279.21740723]
[68.34615326 268.33462524]
[81.25841522 260.52847290]
[95.75135803 256.33120728]
[95.43930054 241.33444214]
[95.12724304 226.33769226]
[94.81518555 211.34092712]
[94.50312805 196.34417725]
[94.19107056 181.34742737]
[93.87902069 166.35067749]
[93.56696320 151.35391235]
[93.25490570 136.35716248]
[92.94284821 121.36041260]
[88.21595001 119.16263580]
[84.12180328 115.93591309]
[70.59761047 122.42407990]
[57.07342148 128.91224670]
[50.41718292 143.50930786]
[34.82027054 147.26643372]
[22.24731064 137.30148315]
[22.34319687 121.25871277]
[35.03437424 111.44476318]
[50.58525848 115.38805389]
[64.10945129 108.89989471]
[77.63363647 102.41172791]
[82.30817413 86.10504150]
[97.04254913 77.69923401]
[100.14087677 63.02270889]
[103.23919678 48.34618378]
[106.33751678 33.66965866]
[99.21181488 29.11243629]
[93.44652557 22.97020340]
[89.38230896 15.63046169]
[87.25324249 7.55066252]
[87.17340088 -0.77030373]
[89.13085175 -8.82290173]
[76.51972198 -16.94444466]
[63.90859604 -25.06598663]
[51.29746628 -33.18752670]
[37.67617798 -26.09133339]
[22.33239746 -26.77252579]
[9.39353085 -35.04786682]
[2.34006667 -48.69133759]
[3.06935120 -64.03290558]
[11.38521004 -76.94577026]
[25.05072021 -83.95643616]
[40.38992691 -83.17906189]
[53.27666092 -74.82276917]
[60.24445724 -61.13535309]
[59.41901016 -45.79865646]
[72.03013611 -37.67711258]
[84.64126587 -29.55557251]
[97.25239563 -21.43403053]
[104.04237366 -26.54186058]
[111.90075684 -29.77291298]
[120.31987000 -30.91845703]
[128.75584412 -29.90448952]
[136.66371155 -26.79651451]
[146.64643860 -37.99227905]
[156.62916565 -49.18804550]
[166.61189270 -60.38381195]
[176.59460449 -71.57957458]
[186.57733154 -82.77534485]
[178.57345581 -94.31891632]
[173.36550903 -107.35626221]
[171.21557617 -121.22174835]
[172.22972107 -135.20832825]
[176.35273743 -148.60359192]
[183.37115479 -160.72602844]
[192.92431641 -170.95970154]
[204.52285767 -178.78558350]
[217.57380676 -183.80784607]
[231.41090393 -185.77386475]
[245.32856750 -184.58697510]
[258.61795044 -180.31115723]
[270.60296631 -173.16764832]
[281.04278564 -183.93846130]
[291.48260498 -194.70927429]
[301.92242432 -205.48007202]
[312.36221313 -216.25088501]
[322.80203247 -227.02169800]
[333.01550293 -238.00735474]
[342.99822998 -249.20312500]
[352.98095703 -260.39889526]
[359.00924683 -276.24490356]
[375.90478516 -274.83880615]
[379.23080444 -258.21432495]
[364.17672729 -250.41616821]
[354.19400024 -239.22039795]
[344.21127319 -228.02462769]
[343.59375000 -223.22940063]
[339.91540527 -218.79081726]
[333.57284546 -216.58187866]
[323.13302612 -205.81106567]
[312.69320679 -195.04026794]
[302.25341797 -184.26945496]
[291.81359863 -173.49864197]
[281.37377930 -162.72784424]
[289.77053833 -149.09347534]
[294.38644409 -133.74952698]
[294.90649414 -117.72406769]
[291.29031372 -102.09231567]
[283.77523804 -87.90447998]
[272.86068726 -76.11521149]
[259.27508545 -67.51936340]
[243.92713928 -62.69839096]
[227.84515381 -61.98104858]
[212.10807800 -65.42094421]
[197.77310181 -72.79261780]
[187.79037476 -61.59685135]
[177.80764771 -50.40108490]
[167.82492065 -39.20531845]
[157.84219360 -28.00955391]
[147.85946655 -16.81378746]
[154.08923340 6.15992212]
[143.43208313 27.66375351]
[121.01404572 36.76798248]
[117.91571808 51.44450760]
[114.81739807 66.12103271]
[111.71907806 80.79755402]
[121.62901306 93.81483459]
[120.09954834 110.10339355]
[107.93960571 121.04835510]
[108.25165558 136.04510498]
[108.56371307 151.04187012]
[108.87577057 166.03862000]
[109.18782806 181.03536987]
[109.49988556 196.03211975]
[109.81194305 211.02888489]
[110.12399292 226.02563477]
[110.43605042 241.02238464]
[110.74810791 256.01913452]
[125.40309906 259.60989380]
[138.62890625 266.87216187]
[149.52377319 277.31076050]
[157.34487915 290.21395874]
[161.55894470 304.70202637]
[161.87866211 319.78713989]
[158.28224182 334.44073486]
[151.01487732 347.66375732]
[140.57208252 358.55456543]
[127.66584778 366.37069702]
[113.17615509 370.57916260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 32]
[23 31]
[24 30]
[34 127]
[35 126]
[36 125]
[37 124]
[43 60]
[44 59]
[45 58]
[46 57]
[65 121]
[66 120]
[67 119]
[68 118]
[69 117]
[70 116]
[83 105]
[84 104]
[85 103]
[86 102]
[87 101]
[88 100]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
