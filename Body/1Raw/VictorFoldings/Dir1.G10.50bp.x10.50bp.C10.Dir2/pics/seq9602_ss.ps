%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUAUGCCUAGGGGGGGGGGGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCUCAAxxxxxxxxxxCACACUCAUUCUCAACCCCCUGACAAAACACAUAGCCUACCCCUUCCUUGCCCCCCCCCCUACUAUCCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 365.14846802]
[71.01555634 359.59545898]
[58.81560135 350.72912598]
[49.20452881 339.10684204]
[42.78650284 325.45913696]
[39.96496582 310.64395142]
[40.91728210 295.59255981]
[45.58358765 281.25112915]
[53.67055511 268.52117920]
[64.66983032 258.20291138]
[77.88998413 250.94493103]
[92.50000000 247.20350647]
[92.50000000 232.20350647]
[92.50000000 217.20350647]
[92.50000000 202.20350647]
[92.50000000 187.20350647]
[92.50000000 172.20350647]
[92.50000000 157.20350647]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[92.50000000 42.79650116]
[92.50000000 27.79650116]
[92.50000000 12.79650021]
[77.52563477 11.83527756]
[62.64361572 9.91661453]
[47.91510391 7.04839706]
[33.40062714 3.24241018]
[19.15981865 -1.48570609]
[5.25120354 -7.11652279]
[-8.26806545 -13.62690163]
[-21.34243584 -20.99008942]
[-33.91817856 -29.17582893]
[-45.94361877 -38.15048218]
[-57.36934280 -47.87717438]
[-68.14839935 -58.31593323]
[-78.23648834 -69.42385864]
[-87.59216309 -81.15531158]
[-96.17697906 -93.46208954]
[-103.95565033 -106.29360962]
[-110.89622498 -119.59714508]
[-116.97016907 -133.31803894]
[-122.15253448 -147.39990234]
[-126.42201233 -161.78486633]
[-129.76107788 -176.41381836]
[-132.15599060 -191.22665405]
[-133.59692383 -206.16249084]
[-134.07794189 -221.15997314]
[-133.59709167 -236.15745544]
[-132.15632629 -251.09330750]
[-129.76156616 -265.90615845]
[-126.42267609 -280.53515625]
[-122.15335083 -294.92016602]
[-116.97113800 -309.00207520]
[-110.89734650 -322.72305298]
[-103.95692444 -336.02667236]
[-96.17839050 -348.85827637]
[-87.59371948 -361.16513062]
[-78.23817444 -372.89669800]
[-68.15019989 -384.00473022]
[-57.37126541 -394.44360352]
[-45.94564819 -404.17044067]
[-33.92030716 -413.14520264]
[-21.34465408 -421.33108521]
[-8.27036667 -428.69442749]
[5.24883032 -435.20495605]
[19.15738297 -440.83593750]
[33.39813614 -445.56420898]
[47.91257477 -449.37036133]
[62.64105225 -452.23873901]
[77.52304840 -454.15756226]
[92.49740601 -455.11895752]
[107.50259399 -455.11895752]
[122.47695160 -454.15756226]
[137.35894775 -452.23873901]
[152.08741760 -449.37036133]
[166.60186768 -445.56420898]
[180.84262085 -440.83593750]
[194.75117493 -435.20495605]
[208.27037048 -428.69442749]
[221.34465027 -421.33108521]
[233.92030334 -413.14520264]
[245.94564819 -404.17044067]
[257.37127686 -394.44360352]
[268.15020752 -384.00473022]
[278.23815918 -372.89669800]
[287.59371948 -361.16513062]
[296.17840576 -348.85827637]
[303.95693970 -336.02667236]
[310.89733887 -322.72305298]
[316.97113037 -309.00207520]
[322.15335083 -294.92016602]
[326.42266846 -280.53515625]
[329.76156616 -265.90615845]
[332.15631104 -251.09330750]
[333.59707642 -236.15745544]
[334.07794189 -221.15997314]
[333.59692383 -206.16249084]
[332.15600586 -191.22665405]
[329.76107788 -176.41381836]
[326.42202759 -161.78486633]
[322.15252686 -147.39990234]
[316.97015381 -133.31803894]
[310.89620972 -119.59714508]
[303.95565796 -106.29360962]
[296.17697144 -93.46208954]
[287.59216309 -81.15531158]
[278.23648071 -69.42385864]
[268.14840698 -58.31593323]
[257.36935425 -47.87717438]
[245.94361877 -38.15048218]
[233.91818237 -29.17582893]
[221.34243774 -20.99008942]
[208.26806641 -13.62690163]
[194.74879456 -7.11652279]
[180.84017944 -1.48570609]
[166.59938049 3.24241018]
[152.08489990 7.04839706]
[137.35638428 9.91661453]
[122.47436523 11.83527756]
[107.50000000 12.79650021]
[107.50000000 27.79650116]
[107.50000000 42.79650116]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[107.50000000 157.20350647]
[107.50000000 172.20350647]
[107.50000000 187.20350647]
[107.50000000 202.20350647]
[107.50000000 217.20350647]
[107.50000000 232.20350647]
[107.50000000 247.20350647]
[122.11001587 250.94493103]
[135.33016968 258.20291138]
[146.32945251 268.52117920]
[154.41641235 281.25112915]
[159.08271790 295.59255981]
[160.03503418 310.64395142]
[157.21350098 325.45913696]
[150.79547119 339.10684204]
[141.18440247 350.72912598]
[128.98443604 359.59545898]
[114.96250153 365.14846802]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 130]
[24 129]
[25 128]
[26 127]
[27 126]
[28 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
