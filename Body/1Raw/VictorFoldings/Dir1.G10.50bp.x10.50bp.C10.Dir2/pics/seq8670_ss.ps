%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUAAUUGGGGGGGGGGGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCUUCCCUCUACACUUAUCAxxxxxxxxxxUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGACCCCCCCCCCACCGAAUUGG\
) } def
/len { sequence length } bind def

/coor [
[66.64095306 345.79928589]
[56.05908585 335.01965332]
[48.94404602 321.69473267]
[45.87262726 306.90478516]
[47.09381104 291.84869385]
[52.50860214 277.74703979]
[61.67804718 265.74298096]
[73.85882568 256.80957031]
[88.06349182 251.67108154]
[87.12786102 236.70028687]
[86.19223022 221.72949219]
[85.25659943 206.75871277]
[84.32097626 191.78791809]
[83.38534546 176.81712341]
[82.44971466 161.84632874]
[81.51409149 146.87553406]
[80.57846069 131.90475464]
[69.59279633 121.69126892]
[54.59360886 121.84730530]
[39.59441757 122.00334167]
[24.59523010 122.15937805]
[9.59604263 122.31541443]
[-5.40314627 122.47145081]
[-8.37474823 137.23164368]
[-14.35059261 151.05130005]
[-23.06944084 163.32629395]
[-34.15014267 173.52000427]
[-47.10829926 181.18681335]
[-61.37742996 185.99154663]
[-76.33375549 187.72418213]
[-91.32344818 186.30897522]
[-105.69122314 181.80776978]
[-118.80897522 174.41735840]
[-130.10327148 164.46081543]
[-139.08035278 152.37339783]
[-145.34779358 138.68351746]
[-148.63159180 123.98963165]
[-148.78822327 108.93409729]
[-145.81080627 94.17507935]
[-139.82952881 80.35777283]
[-131.10585022 68.08621216]
[-120.02114105 57.89686203]
[-107.05996704 50.23515320]
[-92.78894806 45.43602753]
[-77.83193970 43.70927429]
[-62.84280777 45.13038635]
[-48.47680664 49.63723755]
[-35.36196136 57.03280640]
[-24.07158852 66.99378967]
[-15.09926128 79.08473969]
[-8.83720875 92.77708435]
[-5.55918264 107.47226715]
[9.44000530 107.31623077]
[24.43919373 107.16019440]
[39.43838120 107.00415802]
[54.43757248 106.84812164]
[69.43675995 106.69208527]
[72.35025787 80.54763794]
[95.32472229 63.97574234]
[93.45710754 49.09246063]
[91.58949280 34.20918274]
[76.64086151 32.15958023]
[62.73244858 26.30993271]
[50.81254578 17.05907631]
[41.69387436 5.03775072]
[35.99816513 -8.93441010]
[34.11375427 -23.90476036]
[36.16912460 -38.85260010]
[42.02414322 -52.75875473]
[51.27960205 -64.67508698]
[63.30444717 -73.78911591]
[77.27880859 -79.47943115]
[92.24988556 -81.35806274]
[107.19692993 -79.29691315]
[121.10082245 -73.43653107]
[133.01358032 -64.17646790]
[142.12295532 -52.14810562]
[147.80787659 -38.17155075]
[149.68072510 -23.19975090]
[147.61381531 -8.25350475]
[141.74806213 5.64812613]
[132.48339844 17.55730438]
[120.45152283 26.66204453]
[106.47277832 32.34156799]
[108.34038544 47.22484970]
[110.20800018 62.10812759]
[116.15419006 66.67899323]
[121.17372894 52.54378128]
[136.16822815 52.94981003]
[140.41545105 67.33595276]
[128.04656982 75.82073212]
[133.99276733 80.39159393]
[148.85580444 78.36926270]
[163.71885681 76.34692383]
[178.58189392 74.32459259]
[193.44494629 72.30226135]
[208.30799866 70.27992249]
[222.56199646 58.66943741]
[238.53761292 65.86524963]
[253.35536194 63.53414536]
[268.17312622 61.20304108]
[273.76501465 46.96654510]
[285.65356445 37.50296021]
[300.58355713 35.27550888]
[314.53060913 40.78335953]
[323.78576660 52.45415878]
[338.60351562 50.12305450]
[351.01174927 39.40075684]
[366.41070557 45.04029846]
[368.95922852 61.24020386]
[356.03564453 71.33540344]
[340.93463135 64.94081116]
[326.11685181 67.27191925]
[320.89212036 81.22066498]
[309.30987549 90.74473572]
[294.41714478 93.20894623]
[280.19717407 87.85270691]
[270.50421143 76.02079773]
[255.68646240 78.35190582]
[240.86871338 80.68300629]
[233.46357727 90.29920959]
[221.09062195 92.33116150]
[210.33032227 85.14296722]
[195.46728516 87.16530609]
[180.60423279 89.18763733]
[165.74119568 91.20997620]
[150.87814331 93.23230743]
[136.01509094 95.25464630]
[130.66975403 116.11704254]
[114.99224091 129.36077881]
[95.54925537 130.96911621]
[96.48487854 145.93991089]
[97.42050934 160.91070557]
[98.35614014 175.88150024]
[99.29176331 190.85229492]
[100.22739410 205.82307434]
[101.16302490 220.79386902]
[102.09864807 235.76466370]
[103.03427887 250.73545837]
[117.76819611 254.06538391]
[130.96646118 261.41265869]
[141.55915833 272.18167114]
[148.68757629 285.49942017]
[151.77384949 300.28628540]
[150.56779480 315.34356689]
[145.16717529 329.45065308]
[136.00979614 341.46395874]
[123.83799744 350.40957642]
[109.63849640 355.56234741]
[94.56239319 356.50454712]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 139]
[10 138]
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 57]
[19 56]
[20 55]
[21 54]
[22 53]
[23 52]
[59 86]
[60 85]
[61 84]
[92 128]
[93 127]
[94 126]
[95 125]
[96 124]
[97 123]
[99 120]
[100 119]
[101 118]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
