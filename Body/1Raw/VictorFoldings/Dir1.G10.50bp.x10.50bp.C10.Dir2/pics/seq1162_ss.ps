%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUAACCCCGGGGGGGGGGAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUCACACGAUUAACCCAAGxxxxxxxxxxUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCCCCCCCCCCCUACUAAACCC\
) } def
/len { sequence length } bind def

/coor [
[81.97706604 558.95916748]
[68.13112640 552.94311523]
[56.42246246 543.41369629]
[47.71993637 531.07806396]
[42.66933441 516.85150146]
[41.64544678 501.78982544]
[44.72424316 487.01068115]
[51.67726517 473.61074829]
[61.98854828 462.58441162]
[74.89292908 454.74990845]
[89.43281555 450.68859863]
[89.43281555 435.68859863]
[89.43281555 420.68859863]
[89.43281555 405.68859863]
[89.43281555 390.68859863]
[89.43281555 375.68859863]
[89.43281555 360.68859863]
[89.43281555 345.68859863]
[89.43281555 330.68859863]
[89.43281555 315.68859863]
[86.26724243 308.95623779]
[89.59210205 300.37734985]
[89.90415955 285.38058472]
[90.21620941 270.38385010]
[90.52826691 255.38708496]
[81.24428558 240.52748108]
[90.82701111 224.83828735]
[90.82701111 209.83828735]
[90.82701111 194.83828735]
[82.47845459 186.02868652]
[82.39402771 173.49028015]
[91.16710663 163.97781372]
[91.47916412 148.98106384]
[91.79122162 133.98431396]
[92.10327911 118.98755646]
[82.94621277 111.49145508]
[79.43669891 100.18983459]
[65.41998291 94.84832001]
[51.40327454 89.50681305]
[37.33175278 84.31139374]
[23.20695114 79.26264191]
[14.00645351 79.31459808]
[8.84267521 73.95912933]
[-5.17403841 68.61762238]
[-21.27025414 71.75511932]
[-31.82993126 59.20819855]
[-25.99018288 43.88405609]
[-9.75843716 41.54685211]
[0.16747431 54.60090637]
[14.18418694 59.94242096]
[28.25570679 65.13783264]
[42.38050842 70.18659210]
[49.78554916 69.47171783]
[56.74478531 75.49009705]
[70.76149750 80.83161163]
[84.77821350 86.17311859]
[92.47757721 80.86106873]
[101.73339844 79.50901031]
[108.36189270 66.05303955]
[109.36077881 56.90678406]
[115.27082062 52.38825989]
[122.17781830 39.07310104]
[129.08480835 25.75794601]
[135.99182129 12.44279099]
[123.69660950 3.81079578]
[112.66168213 -6.38301849]
[103.08396912 -17.95673180]
[95.13439178 -30.70379639]
[88.95481873 -44.39672852]
[84.65554047 -58.79115677]
[82.31327057 -73.63020325]
[81.96981812 -88.64904022]
[83.63130951 -103.57964325]
[87.26809692 -118.15555573]
[92.81526947 -132.11665344]
[100.17383575 -145.21379089]
[109.21247864 -157.21322632]
[119.76988220 -167.90081787]
[131.65765381 -177.08583069]
[144.66362000 -184.60435486]
[158.55569458 -190.32220459]
[173.08593750 -194.13734436]
[187.99505615 -195.98167419]
[203.01698303 -195.82231140]
[217.88360596 -193.66206360]
[232.32965088 -189.53952026]
[246.09727478 -183.52821350]
[258.94082642 -175.73544312]
[270.63104248 -166.30029297]
[280.95932007 -155.39111328]
[289.74133301 -143.20262146]
[296.82037354 -129.95231628]
[302.07009888 -115.87666321]
[305.39682007 -101.22687531]
[306.74118042 -86.26438141]
[306.07916260 -71.25621033]
[303.42257690 -56.47020340]
[298.81887817 -42.17022705]
[292.35018921 -28.61148453]
[284.13195801 -16.03594780]
[274.31085205 -4.66804266]
[263.06213379 5.28935909]
[250.58656311 13.65855503]
[237.10676575 20.29018593]
[222.86331177 25.06590462]
[208.11039734 27.90048218]
[193.11129761 28.74333191]
[178.13368225 27.57941055]
[163.44487000 24.42949295]
[149.30697632 19.34978867]
[142.39997864 32.66494370]
[135.49296570 45.98010254]
[128.58596802 59.29525757]
[121.81785583 72.68154144]
[115.18936157 86.13750458]
[119.97837830 104.87338257]
[107.10002899 119.29960632]
[106.78797913 134.29635620]
[106.47592163 149.29312134]
[106.16386414 164.28987122]
[115.41812134 180.17503357]
[105.82701111 194.83828735]
[105.82701111 209.83828735]
[105.82701111 224.83828735]
[114.40029907 234.53118896]
[114.05504608 247.06513977]
[105.52502441 255.69914246]
[105.21296692 270.69589233]
[104.90090942 285.69265747]
[104.58885193 300.68939209]
[104.43281555 315.68859863]
[104.43281555 330.68859863]
[104.43281555 345.68859863]
[104.43281555 360.68859863]
[104.43281555 375.68859863]
[104.43281555 390.68859863]
[104.43281555 405.68859863]
[104.43281555 420.68859863]
[104.43281555 435.68859863]
[104.43281555 450.68859863]
[118.97270203 454.74990845]
[131.87709045 462.58441162]
[142.18836975 473.61074829]
[149.14138794 487.01068115]
[152.22018433 501.78982544]
[151.19630432 516.85150146]
[146.14569092 531.07806396]
[137.44317627 543.41369629]
[125.73451233 552.94311523]
[111.88857269 558.95916748]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[24 128]
[25 127]
[27 124]
[28 123]
[29 122]
[32 120]
[33 119]
[34 118]
[35 117]
[37 56]
[38 55]
[39 54]
[40 52]
[41 51]
[43 50]
[44 49]
[58 115]
[59 114]
[61 113]
[62 112]
[63 111]
[64 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
