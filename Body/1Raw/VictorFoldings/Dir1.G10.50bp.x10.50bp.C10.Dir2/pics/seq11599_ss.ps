%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGUACAUAGUACAUGGGGGGGGGGAAAGCCAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCUUCUCGUCCCxxxxxxxxxxUACCAACAAACCUACCCACCCUUAACAGUACAUAGUACAUAAAGCCAUUUCCCCCCCCCCACCGUACAUAGCACAU\
) } def
/len { sequence length } bind def

/coor [
[86.18666840 482.22573853]
[71.68753052 478.22390747]
[58.13604355 471.69726562]
[45.96783829 462.85562134]
[35.57406998 451.98321533]
[27.28885460 439.42953491]
[21.37852859 425.59814453]
[18.03308296 410.93362427]
[17.36006165 395.90740967]
[19.38109779 381.00256348]
[24.03122520 366.69815063]
[31.16096115 353.45401001]
[40.54111481 341.69595337]
[51.87014771 331.80187988]
[64.78388977 324.08984375]
[78.86720276 318.80780029]
[93.66738129 316.12551880]
[93.66738129 301.12551880]
[93.66738129 286.12551880]
[93.66738129 271.12551880]
[93.66738129 256.12551880]
[93.66738129 241.12553406]
[93.66738129 226.12553406]
[93.66738129 211.12553406]
[93.66738129 196.12553406]
[93.66738129 181.12553406]
[93.66738129 166.12553406]
[93.66738129 151.12553406]
[93.66738129 136.12553406]
[93.37829590 121.12831879]
[92.80023193 106.13945770]
[89.82476044 101.75693512]
[89.54397583 96.01515198]
[92.50000000 90.56418610]
[92.50000000 75.56418610]
[92.50000000 60.56418228]
[92.50000000 45.56418228]
[83.93225861 35.88094711]
[84.26805115 23.35744858]
[92.77959442 14.71991825]
[93.06867981 -0.27729541]
[93.35776520 -15.27450943]
[93.64685059 -30.27172279]
[78.71202087 -31.75190735]
[63.94200516 -34.41399384]
[49.43018341 -38.24115372]
[35.26830673 -43.20919037]
[21.54591560 -49.28668976]
[8.34976292 -56.43523407]
[-4.23671579 -64.60962677]
[-16.13394547 -73.75817871]
[-27.26670647 -83.82305145]
[-37.56461334 -94.74061584]
[-46.96255875 -106.44184113]
[-55.40112305 -118.85275269]
[-62.82695770 -131.89488220]
[-69.19311523 -145.48576355]
[-74.45933533 -159.53948975]
[-78.59233093 -173.96717834]
[-81.56597137 -188.67764282]
[-83.36145782 -203.57785034]
[-83.96743774 -218.57360840]
[-83.38007355 -233.57011414]
[-81.60308838 -248.47254944]
[-78.64770508 -263.18667603]
[-74.53262329 -277.61950684]
[-69.28385162 -291.67974854]
[-62.93457031 -305.27850342]
[-55.52493286 -318.32986450]
[-47.10177994 -330.75122070]
[-37.71836853 -342.46411133]
[-27.43402100 -353.39443970]
[-16.31376076 -363.47314453]
[-4.42789698 -372.63644409]
[8.14842606 -380.82644653]
[21.33569336 -387.99136353]
[35.05053329 -394.08590698]
[49.20623016 -399.07153320]
[63.71328735 -402.91668701]
[78.47998810 -405.59710693]
[93.41297150 -407.09582520]
[108.41781616 -407.40338135]
[123.39966583 -406.51782227]
[138.26379395 -404.44473267]
[152.91622925 -401.19720459]
[167.26432800 -396.79583740]
[181.21737671 -391.26840210]
[194.68716431 -384.64987183]
[207.58851624 -376.98205566]
[219.83987427 -368.31347656]
[231.36376953 -358.69891357]
[242.08737183 -348.19915771]
[251.94284058 -336.88061523]
[260.86788940 -324.81481934]
[268.80609131 -312.07806396]
[275.70727539 -298.75088501]
[281.52777100 -284.91751099]
[286.23080444 -270.66543579]
[289.78662109 -256.08474731]
[292.17276001 -241.26765442]
[293.37411499 -226.30781555]
[293.38311768 -211.29981995]
[292.19967651 -196.33854675]
[289.83132935 -181.51860046]
[286.29296875 -166.93367004]
[281.60705566 -152.67596436]
[275.80313110 -138.83563232]
[268.91793823 -125.50017548]
[260.99502563 -112.75391388]
[252.08444214 -100.67742157]
[242.24253845 -89.34706116]
[231.53153992 -78.83446503]
[220.01916504 -69.20610046]
[207.77821350 -60.52283096]
[194.88606262 -52.83956909]
[181.42422485 -46.20488358]
[167.47781372 -40.66072464]
[153.13500977 -36.24214554]
[138.48648071 -32.97707748]
[123.62483978 -30.88616943]
[108.64406586 -29.98263741]
[108.35498047 -14.98542404]
[108.06589508 0.01179031]
[107.77680969 15.00900459]
[117.08066559 29.86461258]
[107.50000000 45.56418228]
[107.50000000 60.56418228]
[107.50000000 75.56418610]
[107.50000000 90.56418610]
[107.78908539 105.56139374]
[108.36714935 120.55025482]
[111.59983826 126.40624237]
[111.38559723 132.14570618]
[108.66738129 136.12553406]
[108.66738129 151.12553406]
[108.66738129 166.12553406]
[108.66738129 181.12553406]
[108.66738129 196.12553406]
[108.66738129 211.12553406]
[108.66738129 226.12553406]
[108.66738129 241.12553406]
[108.66738129 256.12551880]
[108.66738129 271.12551880]
[108.66738129 286.12551880]
[108.66738129 301.12551880]
[108.66738129 316.12551880]
[123.46755219 318.80780029]
[137.55087280 324.08984375]
[150.46459961 331.80187988]
[161.79364014 341.69595337]
[171.17379761 353.45401001]
[178.30352783 366.69815063]
[182.95365906 381.00256348]
[184.97470093 395.90740967]
[184.30166626 410.93362427]
[180.95622253 425.59814453]
[175.04589844 439.42953491]
[166.76068115 451.98321533]
[156.36691284 462.85562134]
[144.19871521 471.69726562]
[130.64723206 478.22390747]
[116.14808655 482.22573853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 146]
[18 145]
[19 144]
[20 143]
[21 142]
[22 141]
[23 140]
[24 139]
[25 138]
[26 137]
[27 136]
[28 135]
[29 134]
[30 131]
[31 130]
[34 129]
[35 128]
[36 127]
[37 126]
[40 124]
[41 123]
[42 122]
[43 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
