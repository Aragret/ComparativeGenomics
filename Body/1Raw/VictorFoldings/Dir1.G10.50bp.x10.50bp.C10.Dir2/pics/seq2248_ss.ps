%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAUCCCCUGGGGGGGGGGUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAxxxxxxxxxxCUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUAGAAUCCCCCCCCCCUAAUUCCCCU\
) } def
/len { sequence length } bind def

/coor [
[79.40416718 405.19326782]
[65.55823517 399.17724609]
[53.84957123 389.64782715]
[45.14704514 377.31213379]
[40.09644318 363.08563232]
[39.07255173 348.02395630]
[42.15135193 333.24478149]
[49.10437393 319.84484863]
[59.41565704 308.81851196]
[72.32003784 300.98400879]
[86.85992432 296.92269897]
[86.85992432 281.92269897]
[86.85992432 266.92269897]
[86.85992432 251.92269897]
[86.85992432 236.92269897]
[86.85992432 221.92269897]
[86.85992432 206.92269897]
[86.85992432 191.92269897]
[86.85992432 176.92269897]
[86.85992432 161.92269897]
[74.35945129 170.21354675]
[60.01948166 165.81292725]
[54.32138443 151.93734741]
[61.43000031 138.72872925]
[76.14950562 135.84150696]
[87.72085571 145.38540649]
[89.27844238 130.46649170]
[90.83602142 115.54757690]
[79.74470520 105.44892883]
[65.03674316 108.39441681]
[50.32878113 111.33989716]
[35.98531723 120.37877655]
[23.32901382 109.09807587]
[30.66524887 93.81356812]
[47.38330078 96.63193512]
[62.09125900 93.68645477]
[76.79922485 90.74096680]
[79.28433990 75.94826508]
[66.34628296 68.35835266]
[53.40822983 60.76844406]
[40.47017288 53.17853928]
[27.53211594 45.58863068]
[14.59406090 37.99872208]
[1.65600479 30.40881348]
[-11.28205109 22.81890488]
[-24.22010803 15.22899628]
[-37.15816498 7.63908768]
[-52.38682175 11.86560726]
[-66.10239410 4.01330423]
[-70.16767120 -11.25918961]
[-62.17079544 -24.89097404]
[-46.85617447 -28.79455376]
[-33.30970001 -20.65400505]
[-29.56825447 -5.29896832]
[-16.63019943 2.29094005]
[-3.69214296 9.88084793]
[9.24591351 17.47075653]
[22.18396950 25.06066513]
[35.12202454 32.65057373]
[48.06008148 40.24048233]
[60.99813843 47.83039093]
[73.93619537 55.42029953]
[86.87425232 63.01020813]
[100.18296814 76.36955261]
[102.79621124 92.49099731]
[114.09521484 82.62527466]
[125.39421844 72.75955200]
[136.69322205 62.89383316]
[147.99223328 53.02811050]
[159.29122925 43.16238403]
[153.19519043 31.63523102]
[149.67291260 19.08737373]
[148.88044739 6.08562756]
[150.85058594 -6.78334093]
[155.49156189 -18.93947601]
[162.59126282 -29.83548355]
[171.82698059 -38.98146820]
[182.78002930 -45.96696091]
[194.95474243 -50.47933960]
[207.80090332 -52.31781769]
[220.73864746 -51.40238571]
[233.18457031 -47.77726746]
[244.57806396 -41.60882187]
[254.40660095 -33.17788315]
[266.48660278 -42.07023239]
[278.56658936 -50.96258163]
[290.64657593 -59.85493088]
[302.72656250 -68.74728394]
[307.82479858 -76.40625763]
[315.15164185 -77.69586945]
[327.41400146 -86.33498383]
[339.67636108 -94.97409821]
[351.93872070 -103.61321259]
[364.20111084 -112.25233459]
[376.46347046 -120.89144897]
[378.91558838 -136.50434875]
[391.73849487 -145.74278259]
[407.32458496 -143.12573242]
[416.42694092 -130.20587158]
[413.64526367 -114.64830017]
[400.62988281 -105.68306732]
[385.10256958 -108.62908173]
[372.84020996 -99.98996735]
[360.57785034 -91.35084534]
[348.31549072 -82.71173096]
[336.05310059 -74.07261658]
[323.79074097 -65.43350220]
[311.61889648 -56.66729355]
[299.53890991 -47.77494431]
[287.45892334 -38.88259125]
[275.37893677 -29.99024391]
[263.29895020 -21.09789467]
[269.53182983 -5.18108702]
[271.10299683 11.85315990]
[267.88183594 28.66682816]
[260.11453247 43.93723297]
[248.40504456 56.46106720]
[233.66841125 65.24923706]
[217.05906677 69.60494995]
[199.88047791 69.17899323]
[183.48283386 63.99768448]
[169.15695190 54.46139145]
[157.85795593 64.32711029]
[146.55894470 74.19283295]
[135.25993347 84.05856323]
[123.96093750 93.92428589]
[112.66193390 103.79000854]
[105.75492859 117.10516357]
[104.19734955 132.02407837]
[102.63977051 146.94299316]
[101.85992432 161.92269897]
[101.85992432 176.92269897]
[101.85992432 191.92269897]
[101.85992432 206.92269897]
[101.85992432 221.92269897]
[101.85992432 236.92269897]
[101.85992432 251.92269897]
[101.85992432 266.92269897]
[101.85992432 281.92269897]
[101.85992432 296.92269897]
[116.39981079 300.98400879]
[129.30419922 308.81851196]
[139.61547852 319.84484863]
[146.56849670 333.24478149]
[149.64729309 348.02395630]
[148.62341309 363.08563232]
[143.57279968 377.31213379]
[134.87028503 389.64782715]
[123.16162109 399.17724609]
[109.31568146 405.19326782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 130]
[27 129]
[28 128]
[29 37]
[30 36]
[31 35]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[65 127]
[66 126]
[67 125]
[68 124]
[69 123]
[70 122]
[84 112]
[85 111]
[86 110]
[87 109]
[88 108]
[90 107]
[91 106]
[92 105]
[93 104]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
