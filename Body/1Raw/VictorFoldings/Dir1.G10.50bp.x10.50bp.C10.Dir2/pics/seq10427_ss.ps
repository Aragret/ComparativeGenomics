%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCACAGCCCUAGGGGGGGGGGUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCAxxxxxxxxxxCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCCCCCCCCCCCAGUCUCAGCCCUA\
) } def
/len { sequence length } bind def

/coor [
[79.34973145 395.16052246]
[66.81711578 386.83404541]
[56.08696747 376.28604126]
[47.54716492 363.89782715]
[41.50642395 350.11718750]
[38.18311310 335.44232178]
[37.69736481 320.40368652]
[40.06674194 305.54492188]
[45.20559311 291.40316772]
[52.92814636 278.48968506]
[62.95524597 267.27120972]
[74.92440796 258.15335083]
[88.40296173 251.46566772]
[102.90366364 247.44993591]
[101.70433807 232.49795532]
[100.50501251 217.54597473]
[99.30568695 202.59399414]
[98.10636139 187.64202881]
[96.90702820 172.69004822]
[95.70770264 157.73806763]
[94.50837708 142.78608704]
[93.30905151 127.83411407]
[92.10972595 112.88214111]
[85.31320953 126.25402832]
[76.08085632 138.07620239]
[64.75466919 147.91070557]
[51.75422287 155.39323425]
[37.56110001 160.24661255]
[22.70107651 162.29104614]
[7.72462845 161.45079041]
[-6.81345224 157.75698853]
[-20.37461472 151.34645081]
[-32.45649719 142.45668030]
[-42.61153793 131.41697693]
[-50.46355057 118.63629150]
[-55.72166061 104.58807373]
[-58.19108963 89.79273987]
[-57.78036118 74.79836273]
[-54.50468445 60.16040421]
[-48.48540878 46.42110443]
[-39.94551468 34.08943176]
[-29.20134926 23.62220001]
[-16.65092468 15.40716076]
[-2.75916338 9.74863243]
[11.95932865 6.85623074]
[26.95931625 6.83710241]
[41.68513870 9.69195557]
[55.59128571 15.31503582]
[68.16262054 23.49803925]
[78.93344879 33.93783569]
[87.50476837 46.24768829]
[93.55906677 59.97158813]
[96.87206268 74.60115051]
[97.32145691 89.58808136]
[104.77809143 76.57276154]
[112.23472595 63.55743790]
[119.69136047 50.54211426]
[127.14799500 37.52679443]
[134.60462952 24.51147270]
[122.34735870 15.84521866]
[110.96937561 6.05306435]
[100.57373047 -4.77630711]
[91.25456238 -16.54482269]
[83.09628296 -29.14590073]
[76.17276001 -42.46541977]
[70.54670715 -56.38275909]
[66.26907349 -70.77187347]
[63.37859726 -85.50244904]
[61.90145874 -100.44108582]
[61.85102844 -115.45248413]
[63.22777176 -130.40071106]
[66.01921082 -145.15037537]
[70.20007324 -159.56790161]
[75.73249817 -173.52272034]
[82.56636810 -186.88845825]
[90.63980865 -199.54406738]
[99.87969208 -211.37492371]
[110.20234680 -222.27389526]
[121.51428223 -232.14227295]
[133.71305847 -240.89068604]
[146.68818665 -248.43991089]
[160.32217407 -254.72155762]
[174.49154663 -259.67877197]
[189.06796265 -263.26660156]
[203.91943359 -265.45263672]
[218.91143799 -266.21701050]
[233.90823364 -265.55282593]
[248.77397156 -263.46609497]
[263.37405396 -259.97570801]
[277.57623291 -255.11331177]
[291.25189209 -248.92291260]
[304.27716064 -241.46055603]
[316.53411865 -232.79385376]
[327.91174316 -223.00129700]
[338.30700684 -212.17153931]
[347.62573242 -200.40267944]
[355.78356934 -187.80131531]
[362.70660400 -174.48153687]
[368.33215332 -160.56399536]
[372.60925293 -146.17472839]
[375.49917603 -131.44404602]
[376.97579956 -116.50535583]
[377.02566528 -101.49394989]
[375.64837646 -86.54577637]
[372.85641479 -71.79621887]
[368.67501831 -57.37883759]
[363.14208984 -43.42421722]
[356.30770874 -30.05872917]
[348.23382568 -17.40341759]
[338.99349976 -5.57289457]
[328.67044067 5.32570076]
[317.35815430 15.19366550]
[305.15905762 23.94163132]
[292.18365479 31.49037361]
[278.54943848 37.77153015]
[264.37988281 42.72821426]
[249.80334473 46.31553650]
[234.95179749 48.50101089]
[219.95974731 49.26483917]
[204.96299744 48.60011292]
[190.09732056 46.51284409]
[175.49737549 43.02193832]
[161.29537964 38.15901566]
[147.61994934 31.96810722]
[140.16331482 44.98342896]
[132.70668030 57.99875259]
[125.25004578 71.01406860]
[117.79341125 84.02939606]
[110.33677673 97.04471588]
[107.06169891 111.68280792]
[108.26102448 126.63478851]
[109.46035004 141.58676147]
[110.65968323 156.53874207]
[111.85900879 171.49072266]
[113.05833435 186.44270325]
[114.25765991 201.39466858]
[115.45699310 216.34664917]
[116.65631866 231.29862976]
[117.85564423 246.25061035]
[132.81105042 247.90361023]
[147.18327332 252.35731506]
[160.45277405 259.45074463]
[172.13987732 268.92745972]
[181.82208252 280.44491577]
[189.14939880 293.58670044]
[193.85694885 307.87780762]
[195.77453613 322.80160522]
[194.83287048 337.81857300]
[191.06597900 352.38589478]
[184.61003113 365.97695923]
[175.69839478 378.10046387]
[164.65324402 388.31817627]
[151.87384033 396.26065063]
[137.82214355 401.64086914]
[123.00614166 404.26428223]
[107.96138763 404.03604126]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[54 129]
[55 128]
[56 127]
[57 126]
[58 125]
[59 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
