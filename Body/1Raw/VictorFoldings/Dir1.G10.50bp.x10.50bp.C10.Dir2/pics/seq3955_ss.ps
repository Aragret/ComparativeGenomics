%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCAUCAUGGGGGGGGGGGACCCUUGGCCAUAAUAUGAUUUAUCUCCACACUAGCAGAGACCAACCGAAxxxxxxxxxxAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCUCGUUCCACAGAAGCCCCCCCCCCCUGCCAUCAAG\
) } def
/len { sequence length } bind def

/coor [
[83.51102448 374.34692383]
[70.29280090 367.07086182]
[59.40884018 356.62091064]
[51.60122299 343.70953369]
[47.40228271 329.21707153]
[47.09831238 314.13165283]
[50.71003723 299.48181152]
[57.99120331 286.26641846]
[68.44537354 275.38647461]
[81.35975647 267.58383179]
[95.85383606 263.39050293]
[95.54585266 248.39366150]
[95.23787689 233.39682007]
[94.92990112 218.39999390]
[94.62192535 203.40315247]
[94.31394958 188.40631104]
[94.00596619 173.40946960]
[93.69799042 158.41264343]
[93.39001465 143.41580200]
[93.08203888 128.41896057]
[86.73767853 126.06925964]
[81.10289764 122.32476044]
[76.47917938 117.38581085]
[73.11390686 111.51666260]
[71.18713379 105.03133392]
[70.80194855 98.27680206]
[56.55525970 93.58300781]
[42.30856705 88.88920593]
[28.06187439 84.19540405]
[25.21771240 103.62666321]
[5.28437757 119.23897552]
[-9.58222103 121.23503113]
[-24.44882011 123.23108673]
[-39.34249878 131.33137512]
[-51.24920654 119.26213074]
[-42.94773483 104.47964478]
[-26.44487762 108.36449432]
[-11.57827759 106.36843109]
[3.28832078 104.37237549]
[5.11767340 97.09889984]
[-9.84791660 98.11433411]
[-15.43809891 84.19493103]
[-3.92729926 74.57715607]
[8.77637959 82.55194855]
[10.60573196 75.27846527]
[-1.54760075 66.48662567]
[-13.70093346 57.69478226]
[-25.85426712 48.90294266]
[-39.83947754 55.25191116]
[-55.12394333 53.74170303]
[-67.59621429 44.77855682]
[-73.90131378 30.77351189]
[-72.34320831 15.49385548]
[-63.34100723 3.04974008]
[-49.31626892 -3.21143103]
[-34.04157257 -1.60543442]
[-21.62573624 7.43572521]
[-15.40855694 21.48002052]
[-17.06242371 36.74960709]
[-4.90909147 45.54145050]
[7.24424171 54.33329391]
[19.39757538 63.12513733]
[32.75567245 69.94870758]
[47.00236511 74.64250946]
[61.24905777 79.33631134]
[75.49575043 84.03011322]
[96.54487610 67.99317932]
[124.66458130 74.97511292]
[134.54028320 63.68483353]
[144.41598511 52.39455032]
[129.81997681 55.85232544]
[115.14410400 52.75088501]
[103.19504547 43.68336105]
[96.25797272 30.38385010]
[95.65954590 15.39579201]
[101.51421356 1.58554709]
[112.70230865 -8.40577316]
[127.08419037 -12.66739750]
[141.90942383 -10.38432217]
[154.34278870 -1.99316871]
[162.00648499 10.90131474]
[163.43490601 25.83314705]
[158.35411072 39.94787598]
[161.30352783 24.65282249]
[173.93086243 16.16724586]
[188.49418640 19.07332230]
[200.82546997 10.53286266]
[213.15675354 1.99240410]
[225.48803711 -6.54805470]
[237.81932068 -15.08851337]
[250.15060425 -23.62897301]
[246.01789856 -38.19604111]
[246.84152222 -53.31557465]
[252.53213501 -67.34752655]
[262.47247314 -78.76980591]
[275.58425903 -86.34342194]
[290.44525146 -89.24683380]
[305.44342041 -87.16510010]
[318.95190430 -80.32404327]
[329.50534058 -69.46572113]
[335.95904541 -55.76796722]
[337.61294556 -40.71660995]
[334.28762817 -25.94430733]
[326.34378052 -13.05344868]
[314.64312744 -3.44233823]
[300.45486450 1.84648287]
[285.31799316 2.23932266]
[270.87448120 -2.30643082]
[258.69107056 -11.29768848]
[246.35977173 -2.75722980]
[234.02848816 5.78322887]
[221.69720459 14.32368755]
[209.36592102 22.86414719]
[197.03463745 31.40460587]
[194.63392639 46.05971146]
[182.24990845 54.89661789]
[166.89456177 52.27915955]
[155.70626831 62.27025986]
[145.83056641 73.56053925]
[135.95486450 84.85081482]
[139.01325989 99.53571320]
[152.57514954 105.94469452]
[166.13705444 112.35366821]
[182.42762756 110.46974182]
[191.98587036 123.79534912]
[184.97909546 138.62225342]
[168.61524963 139.69779968]
[159.72807312 125.91556549]
[146.16616821 119.50658417]
[132.60427856 113.09761047]
[121.57209015 123.89601135]
[108.07887268 128.11097717]
[108.38684845 143.10781860]
[108.69483185 158.10466003]
[109.00280762 173.10150146]
[109.31078339 188.09832764]
[109.61875916 203.09516907]
[109.92674255 218.09201050]
[110.23471832 233.08885193]
[110.54269409 248.08569336]
[110.85066986 263.08251953]
[125.50468445 266.67727661]
[138.72851562 273.94314575]
[149.62054443 284.38470459]
[157.43814087 297.29003906]
[161.64826965 311.77923584]
[161.96388245 326.86441040]
[158.36347961 341.51705933]
[151.09251404 354.73806763]
[140.64675903 365.62606812]
[127.73839569 373.43869019]
[113.24755859 377.64321899]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[26 66]
[27 65]
[28 64]
[29 63]
[31 39]
[32 38]
[33 37]
[45 62]
[46 61]
[47 60]
[48 59]
[68 120]
[69 119]
[70 118]
[83 117]
[86 114]
[87 113]
[88 112]
[89 111]
[90 110]
[91 109]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
