%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAACCACAGGGGGGGGGGAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAxxxxxxxxxxCAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCCCCCCCCCCCACAAACCCCA\
) } def
/len { sequence length } bind def

/coor [
[93.17407227 454.26397705]
[81.95863342 444.19863892]
[73.36724091 431.81784058]
[67.86319733 417.78921509]
[65.74333191 402.86932373]
[67.12197876 387.86279297]
[71.92478180 373.57888794]
[79.89272308 360.78793335]
[90.59611511 350.17971802]
[103.45773315 342.32635498]
[117.78396606 337.65133667]
[116.53708649 322.70324707]
[115.29021454 307.75515747]
[114.04334259 292.80706787]
[112.79646301 277.85897827]
[111.54959106 262.91088867]
[110.30271912 247.96281433]
[109.05583954 233.01472473]
[107.80896759 218.06663513]
[106.56209564 203.11854553]
[103.92322540 188.35249329]
[99.91548920 173.89781189]
[95.90774536 159.44311523]
[85.05122375 149.24580383]
[88.82007599 133.88005066]
[75.88201904 126.29014587]
[61.30931473 129.84490967]
[49.73587799 140.63221741]
[35.53754425 136.13148499]
[26.00975418 149.03887939]
[9.97313881 149.49336243]
[-0.27037936 137.14630127]
[3.13714862 121.46930695]
[17.58175850 114.48842621]
[31.98278427 121.55878448]
[42.51388168 111.02573395]
[57.75455475 115.27220154]
[72.32725525 111.71744537]
[75.01298523 89.56055450]
[91.08541870 77.59972382]
[90.14978790 62.62892914]
[89.21416473 47.65813828]
[88.27853394 32.68734741]
[87.34290314 17.71655464]
[86.40727997 2.74576283]
[78.98278046 1.02627039]
[72.07651520 -2.60152531]
[66.18081665 -7.98122787]
[61.74079132 -14.82922554]
[59.12145996 -22.74893951]
[58.57921219 -31.25352859]
[60.23968124 -39.79575729]
[64.08386230 -47.80320358]
[53.42223358 -58.35449600]
[37.43132782 -61.99082184]
[32.84417725 -77.73535156]
[44.37965775 -89.39145660]
[60.17104721 -84.96833801]
[63.97352600 -69.01612091]
[74.63515472 -58.46483231]
[89.00333405 -62.77241516]
[92.10165405 -77.44894409]
[95.19998169 -92.12546539]
[97.37681580 -106.96667480]
[98.62368774 -121.91475677]
[99.87056732 -136.86283875]
[85.66765594 -141.95596313]
[73.26744843 -150.55230713]
[63.51540756 -162.06578064]
[57.07644272 -175.71138000]
[54.38957214 -190.55870056]
[55.63799667 -205.59545898]
[60.73659515 -219.79638672]
[69.33773041 -232.19328308]
[80.85497284 -241.94087219]
[94.50304413 -248.37457275]
[109.35140991 -251.05570984]
[124.38768005 -249.80148315]
[138.58665466 -244.69740295]
[150.98020935 -236.09147644]
[160.72335815 -224.57048035]
[167.15179443 -210.91990662]
[169.82719421 -196.07051086]
[168.56715393 -181.03472900]
[163.45759583 -166.83773804]
[154.84687805 -154.44749451]
[143.32212830 -144.70878601]
[129.66908264 -138.28564453]
[114.81864929 -135.61596680]
[113.57177734 -120.66788483]
[112.32490540 -105.71979523]
[124.69391632 -114.20551300]
[139.47447205 -111.64907837]
[148.27484131 -99.50191498]
[146.09857178 -84.66062927]
[134.18125916 -75.55141449]
[119.28900909 -77.34606934]
[109.87650299 -89.02714539]
[106.77818298 -74.35061646]
[103.67986298 -59.67409515]
[122.78812408 -39.53915405]
[120.84483337 -13.38468838]
[101.37806702 1.81013429]
[102.31369781 16.78092575]
[103.24932861 31.75171661]
[104.18495178 46.72250748]
[105.12058258 61.69330215]
[106.05621338 76.66409302]
[118.31593323 82.55046082]
[125.92869568 94.59584045]
[125.99449921 109.49504089]
[117.80746460 122.71466827]
[103.27476501 129.87231445]
[114.41794586 141.10351562]
[110.36243439 155.43537903]
[114.37017822 169.89006042]
[118.37791443 184.34475708]
[124.75099182 170.76594543]
[137.37414551 162.66310120]
[152.37348938 162.52288818]
[165.14591980 170.38832092]
[171.77174377 183.84559631]
[170.21757507 198.76486206]
[160.96035767 210.56758118]
[146.84103394 215.63165283]
[132.19264221 212.40296936]
[121.51017761 201.87167358]
[122.75705719 216.81976318]
[124.00392914 231.76785278]
[125.25080109 246.71592712]
[126.49768066 261.66403198]
[127.74455261 276.61212158]
[128.99142456 291.56018066]
[130.23829651 306.50827026]
[131.48518372 321.45635986]
[132.73205566 336.40444946]
[147.63482666 338.64138794]
[161.61981201 344.25537109]
[173.93280029 352.94372559]
[183.90977478 364.23782349]
[191.01268005 377.52862549]
[194.85847473 392.09936523]
[195.23974609 407.16427612]
[192.13595581 421.91088867]
[185.71447754 435.54400635]
[176.32159424 447.32833862]
[164.46388245 456.62841797]
[150.78079224 462.94265747]
[136.01025391 465.93060303]
[120.94880676 465.43106079]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[21 117]
[22 116]
[23 115]
[25 113]
[26 38]
[27 37]
[29 35]
[40 108]
[41 107]
[42 106]
[43 105]
[44 104]
[45 103]
[53 60]
[54 59]
[61 100]
[62 99]
[63 98]
[64 91]
[65 90]
[66 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
