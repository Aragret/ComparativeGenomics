%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUAAAAAAGGGGGGGGGGUUAUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUxxxxxxxxxxAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUCCCCCCCCCCAAAUUAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[82.21276093 559.26019287]
[68.19081116 553.70721436]
[55.99085617 544.84088135]
[46.37978363 533.21856689]
[39.96175766 519.57086182]
[37.14022446 504.75567627]
[38.09253693 489.70431519]
[42.75884247 475.36288452]
[50.84580994 462.63293457]
[61.84508514 452.31466675]
[75.06524658 445.05667114]
[89.67525482 441.31524658]
[89.67525482 426.31524658]
[89.67525482 411.31524658]
[89.67525482 396.31524658]
[89.67525482 381.31524658]
[89.67525482 366.31524658]
[89.67525482 351.31524658]
[89.67525482 336.31524658]
[89.67525482 321.31524658]
[89.67525482 306.31524658]
[75.47032928 303.26007080]
[62.21114349 297.30316162]
[50.48349762 288.70492554]
[40.80610657 277.84246826]
[33.60765839 265.19320679]
[29.20783043 251.31373596]
[27.80308342 236.81538391]
[29.45789719 222.33731079]
[34.10181808 208.51834106]
[41.53244400 195.96870422]
[51.42425537 185.24317932]
[63.34286880 176.81649780]
[76.76411438 171.06237793]
[91.09709167 168.23690796]
[91.40507507 153.24006653]
[91.71305084 138.24322510]
[79.70888519 135.50555420]
[68.66539001 128.94642639]
[59.80870438 118.92125702]
[54.22891998 106.17951965]
[52.75405121 91.81188202]
[55.84440994 77.15753174]
[63.51988220 63.67937851]
[75.32962799 52.81871414]
[64.99872589 41.94340134]
[54.66782379 31.06808662]
[44.33691788 20.19277382]
[34.00601578 9.31746006]
[23.67511368 -1.55785406]
[13.23310471 -12.32653332]
[2.68108988 -22.98744202]
[-7.87092543 -33.64834976]
[-18.42294121 -44.30925751]
[-34.22631836 -44.13974762]
[-45.46226120 -55.25411606]
[-45.46468353 -71.05840302]
[-34.23214340 -82.17620850]
[-18.42871094 -82.01153564]
[-7.43028402 -70.66207886]
[-7.76203156 -54.86127472]
[2.78998351 -44.20036697]
[13.34199905 -33.53945541]
[23.89401436 -22.87854767]
[30.87774467 -20.32126427]
[34.55042648 -11.88875675]
[44.88133240 -1.01344287]
[55.21223450 9.86187077]
[65.54313660 20.73718452]
[75.87403870 31.61249924]
[86.20494080 42.48781204]
[93.65716553 41.64261246]
[89.80484772 27.14572906]
[85.95252991 12.64884472]
[82.10021210 -1.84803939]
[74.96091461 -15.04009628]
[79.18547821 -29.43290710]
[92.32218170 -36.67356491]
[106.74709320 -32.55993652]
[114.08867645 -19.47937202]
[110.08526611 -5.02198172]
[109.57737732 9.96941757]
[109.06949615 24.96081734]
[108.56161499 39.95221710]
[116.01383972 39.10701752]
[123.64680481 26.19431877]
[131.27976990 13.28162098]
[130.90698242 -3.11328840]
[145.05767822 -11.40123367]
[159.17481995 -3.05628705]
[158.73593140 13.33698559]
[144.19247437 20.91459084]
[136.55950928 33.82728958]
[128.92652893 46.73998642]
[138.91763306 57.92828369]
[152.60826111 51.79911041]
[162.04223633 39.09830093]
[176.82008362 40.95969009]
[190.51069641 34.83051682]
[192.00494385 19.54448128]
[200.95504761 7.06285095]
[214.95350647 0.74312019]
[230.23477173 2.28526449]
[242.68829346 11.27445507]
[248.96411133 25.29264450]
[247.37406921 40.56901169]
[238.34588623 52.99428558]
[224.30810547 59.22613907]
[209.03678894 57.58822632]
[196.63987732 48.52114105]
[182.94924927 54.65031433]
[174.49450684 66.91272736]
[158.73742676 65.48973846]
[145.04679871 71.61891174]
[148.33583069 104.42774963]
[132.22486877 129.71565247]
[106.70988464 138.55120850]
[106.40190887 153.54803467]
[106.09393311 168.54487610]
[121.15042877 172.26524353]
[135.00219727 179.22599792]
[146.96206665 189.07836914]
[156.43751526 201.33024597]
[162.95994568 215.37072754]
[166.20794678 230.50057983]
[166.02307129 245.96708679]
[162.41760254 261.00146484]
[155.57374573 274.85708618]
[145.83445740 286.84658813]
[133.68626404 296.37597656]
[119.73492432 302.97390747]
[104.67525482 306.31524658]
[104.67525482 321.31524658]
[104.67525482 336.31524658]
[104.67525482 351.31524658]
[104.67525482 366.31524658]
[104.67525482 381.31524658]
[104.67525482 396.31524658]
[104.67525482 411.31524658]
[104.67525482 426.31524658]
[104.67525482 441.31524658]
[119.28527069 445.05667114]
[132.50543213 452.31466675]
[143.50469971 462.63293457]
[151.59167480 475.36288452]
[156.25798035 489.70431519]
[157.21029663 504.75567627]
[154.38874817 519.57086182]
[147.97073364 533.21856689]
[138.35964966 544.84088135]
[126.15969849 553.70721436]
[112.13775635 559.26019287]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[35 119]
[36 118]
[37 117]
[45 71]
[46 70]
[47 69]
[48 68]
[49 67]
[50 66]
[51 64]
[52 63]
[53 62]
[54 61]
[85 94]
[86 93]
[87 92]
[95 114]
[96 113]
[98 111]
[99 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
