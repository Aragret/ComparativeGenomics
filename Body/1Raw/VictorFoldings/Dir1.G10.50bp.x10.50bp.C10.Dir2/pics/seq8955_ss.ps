%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCACAUAGGGGGGGGGGCCAAGGCCACCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAUAAxxxxxxxxxxAAACUAAUCGUCCCAACAAUUAUAUUACUACCACUGACAUGACUUUCCAACCCCCCCCCCAAAACACAUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 368.91412354]
[71.19830322 362.89810181]
[59.48964310 353.36868286]
[50.78712082 341.03302002]
[45.73651886 326.80648804]
[44.71262741 311.74481201]
[47.79142761 296.96566772]
[54.74444962 283.56573486]
[65.05573273 272.53939819]
[77.96011353 264.70489502]
[92.50000000 260.64358521]
[92.50000000 245.64358521]
[92.50000000 230.64358521]
[92.50000000 215.64358521]
[92.50000000 200.64358521]
[92.50000000 185.64358521]
[92.50000000 170.64358521]
[92.50000000 155.64358521]
[92.50000000 140.64358521]
[92.50000000 125.64357758]
[77.79459381 120.39227295]
[67.08680725 106.65326691]
[65.15809631 87.52032471]
[50.22379303 86.11801910]
[35.28948593 84.71572113]
[20.35517693 83.31341553]
[5.42086887 81.91110992]
[-9.51343822 80.50881195]
[-18.05595207 95.34098816]
[-32.15858459 104.94314575]
[-48.98058319 107.43909454]
[-65.15856171 102.37828064]
[-77.47900391 90.81620789]
[-83.51654053 75.09473419]
[-98.49625397 74.31488800]
[-113.47596741 73.53504181]
[-126.30908203 83.16264343]
[-141.80073547 78.99271393]
[-148.06704712 64.22407532]
[-140.30105591 50.18595505]
[-124.46015167 47.64720154]
[-112.69612122 58.55533218]
[-97.71640778 59.33517456]
[-82.73669434 60.11502075]
[-77.41487122 48.18989182]
[-68.32065582 38.77374649]
[-56.53022003 33.01231766]
[-43.44956207 31.61700058]
[-30.64687920 34.77706528]
[-19.66455460 42.13433456]
[-11.83334446 52.82363892]
[-8.11113453 65.57450104]
[6.82317257 66.97680664]
[21.75748062 68.37910461]
[36.69178772 69.78141022]
[51.62609482 71.18371582]
[66.56040192 72.58602142]
[74.15031433 59.64796448]
[65.63922119 47.29639053]
[51.67321396 37.68457413]
[57.04322433 21.60354996]
[73.98236084 22.31202507]
[77.99079132 38.78530121]
[86.50188446 51.13687134]
[101.36492920 53.15920639]
[112.86673737 43.53068161]
[124.36853790 33.90215302]
[115.98667145 21.44575119]
[108.95278931 8.18142986]
[103.34396362 -5.74547815]
[99.22164154 -20.18238258]
[96.63099670 -34.97110367]
[95.60041046 -49.94960785]
[96.14116669 -64.95378113]
[98.24735260 -79.81923676]
[101.89588928 -94.38309479]
[107.04679871 -108.48577881]
[113.64364624 -121.97278595]
[121.61415100 -134.69633484]
[130.87098694 -146.51702881]
[141.31272888 -157.30534363]
[152.82496643 -166.94308472]
[165.28157043 -175.32464600]
[178.54606628 -182.35821533]
[192.47311401 -187.96670532]
[206.91011047 -192.08866882]
[221.69889832 -194.67895508]
[236.67742920 -195.70918274]
[251.68159485 -195.16806030]
[266.54699707 -193.06150818]
[281.11074829 -189.41261292]
[295.21331787 -184.26136780]
[308.70016479 -177.66418457]
[321.42352295 -169.69337463]
[333.24398804 -160.43624878]
[344.03204346 -149.99424744]
[353.66952515 -138.48178101]
[362.05078125 -126.02496338]
[369.08401489 -112.76030731]
[374.69216919 -98.83312225]
[378.81378174 -84.39601898]
[381.40371704 -69.60717010]
[382.43356323 -54.62862015]
[381.89208984 -39.62446976]
[379.78518677 -24.75911903]
[376.13592529 -10.19544029]
[370.98434448 3.90699887]
[364.38684082 17.39368439]
[356.41571045 30.11684799]
[347.15829468 41.93709183]
[336.71603394 52.72489929]
[325.20333862 62.36207962]
[312.74630737 70.74304199]
[299.48147583 77.77595520]
[285.55416870 83.38376617]
[271.11697388 87.50503540]
[256.32806396 90.09460449]
[241.34947205 91.12409973]
[226.34533691 90.58224487]
[211.48004150 88.47497559]
[196.91644287 84.82537842]
[182.81413269 79.67343903]
[169.32760620 73.07561493]
[156.60462952 65.10417938]
[144.78462219 55.84648514]
[133.99707031 45.40395737]
[122.49526215 55.03248596]
[110.99345398 64.66101074]
[130.69631958 86.38822937]
[127.34777069 112.68955231]
[107.50000000 125.64357758]
[107.50000000 140.64358521]
[107.50000000 155.64358521]
[107.50000000 170.64358521]
[107.50000000 185.64358521]
[107.50000000 200.64358521]
[107.50000000 215.64358521]
[107.50000000 230.64358521]
[107.50000000 245.64358521]
[107.50000000 260.64358521]
[122.03988647 264.70489502]
[134.94427490 272.53939819]
[145.25555420 283.56573486]
[152.20857239 296.96566772]
[155.28736877 311.74481201]
[154.26348877 326.80648804]
[149.21287537 341.03302002]
[140.51036072 353.36868286]
[128.80169678 362.89810181]
[114.95575714 368.91412354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 57]
[24 56]
[25 55]
[26 54]
[27 53]
[28 52]
[34 44]
[35 43]
[36 42]
[58 64]
[59 63]
[65 128]
[66 127]
[67 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
