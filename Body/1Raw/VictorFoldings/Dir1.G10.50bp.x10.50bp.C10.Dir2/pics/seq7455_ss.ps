%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAAUGGCAGGGGGGGGGGCAUGCAGCGCAAGUAGGUCUACAAGACGCUACUUCCCCUAUCAUAGAAGAxxxxxxxxxxCCUUACUACACAAUCAAAGACGCCCUCGGCUUACUUCUCUUCCUUCUCUCCCCCCCCCCCCUUAAUGACA\
) } def
/len { sequence length } bind def

/coor [
[83.49507904 360.46520996]
[70.27487946 353.19274902]
[59.38807678 342.74572754]
[51.57695007 329.83648682]
[47.37406540 315.34518433]
[47.06599426 300.25982666]
[50.67373657 285.60900879]
[57.95130920 272.39163208]
[68.40251923 261.50885010]
[81.31478119 253.70271301]
[95.80771637 249.50541687]
[95.49565887 234.50866699]
[95.18360138 219.51191711]
[94.87154388 204.51516724]
[94.55948639 189.51840210]
[94.24743652 174.52165222]
[93.93537903 159.52490234]
[93.62332153 144.52815247]
[93.31126404 129.53138733]
[92.99920654 114.53463745]
[88.08559418 109.56933594]
[85.95441437 103.30972290]
[71.31091309 100.05889893]
[56.66741180 96.80807495]
[39.27429962 102.76285553]
[26.77990341 90.47912598]
[12.07194233 87.53364563]
[0.65760666 97.87864685]
[-14.48256302 99.49996185]
[-27.52009964 91.98419952]
[-33.55979156 78.39522552]
[-48.26775360 75.44974518]
[-62.97571182 72.50426483]
[-77.68367767 69.55877686]
[-92.39163971 66.61329651]
[-107.09960175 63.66781616]
[-121.83740234 60.87549210]
[-136.60345459 58.23662567]
[-151.36952209 55.59776306]
[-166.13557434 52.95889664]
[-182.79136658 56.12445068]
[-190.44400024 40.99587631]
[-178.02511597 29.45431519]
[-163.49670410 38.19284439]
[-148.73065186 40.83170700]
[-133.96459961 43.47056961]
[-119.19853973 46.10943604]
[-112.01427460 44.17761612]
[-104.15411377 48.95985413]
[-89.44615173 51.90533829]
[-74.73818970 54.85081863]
[-60.03023148 57.79630280]
[-45.32226944 60.74178314]
[-30.61430740 63.68726730]
[-19.80748558 53.47205353]
[-4.88118267 51.55645752]
[8.46705341 58.88298416]
[15.01742458 72.82568359]
[29.72538567 75.77116394]
[40.00283051 69.31504822]
[52.31370926 71.69437408]
[59.91823959 82.16457367]
[74.56173706 85.41539764]
[89.20523834 88.66622162]
[103.33004761 83.61746979]
[112.59499359 71.82082367]
[121.85994720 60.02418518]
[131.12489319 48.22754669]
[140.38984680 36.43090820]
[126.34688568 41.70303345]
[111.45843506 43.52896118]
[96.55765533 41.80651474]
[82.47840881 36.63208008]
[70.00856781 28.29522133]
[59.84596634 17.26247597]
[52.55929947 4.15124178]
[48.55633545 -10.30476952]
[48.06108093 -25.29659081]
[51.10124969 -39.98527145]
[57.50671768 -53.54882812]
[66.91902924 -65.22822571]
[78.81146240 -74.36989594]
[92.51850891 -80.46224976]
[107.27312469 -83.16436005]
[122.24962616 -82.32501984]
[136.60990906 -77.99118805]
[149.55038452 -70.40540314]
[160.34689331 -59.99216461]
[168.39523315 -47.33419800]
[173.24504089 -33.13985443]
[174.62490845 -18.20345688]
[172.45761108 -3.36085391]
[166.86444092 10.55735302]
[158.15890503 22.77173996]
[162.48161316 17.63154793]
[167.93911743 15.77492428]
[172.63990784 16.90545273]
[186.65661621 11.56394005]
[200.67332458 6.22242737]
[210.81361389 -5.92192698]
[225.46183777 -3.22401786]
[239.47854614 -8.56553078]
[249.40446472 -21.61958313]
[265.63619995 -19.28238297]
[271.47595215 -3.95824051]
[260.91629028 8.58868027]
[244.82006836 5.45118284]
[230.80334473 10.79269505]
[221.66563416 22.55498886]
[206.01484680 20.23913956]
[191.99812317 25.58065224]
[177.98141479 30.92216492]
[164.07885742 36.55412292]
[152.18647766 45.69585800]
[142.92153931 57.49249649]
[133.65658569 69.28913879]
[124.39163208 81.08577728]
[115.12668610 92.88241577]
[126.94741058 83.64820862]
[141.65328979 80.69234467]
[156.12394714 84.64199829]
[167.28895569 94.65911865]
[172.77925110 108.61822510]
[171.42987061 123.55741119]
[163.52714539 136.30679321]
[150.74789429 144.16116333]
[135.80371094 145.45393372]
[121.86550140 139.91079712]
[111.89075470 128.70791626]
[107.99596405 114.22258759]
[108.30802155 129.21934509]
[108.62007141 144.21609497]
[108.93212891 159.21284485]
[109.24418640 174.20959473]
[109.55624390 189.20635986]
[109.86830139 204.20310974]
[110.18035889 219.19985962]
[110.49240875 234.19660950]
[110.80446625 249.19337463]
[125.45945740 252.78413391]
[138.68527222 260.04638672]
[149.58013916 270.48498535]
[157.40122986 283.38821411]
[161.61531067 297.87625122]
[161.93502808 312.96136475]
[158.33860779 327.61495972]
[151.07124329 340.83798218]
[140.62843323 351.72882080]
[127.72220612 359.54492188]
[113.23251343 363.75338745]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 64]
[23 63]
[24 62]
[26 59]
[27 58]
[31 54]
[32 53]
[33 52]
[34 51]
[35 50]
[36 49]
[37 47]
[38 46]
[39 45]
[40 44]
[65 118]
[66 117]
[67 116]
[68 115]
[69 114]
[94 113]
[97 112]
[98 111]
[99 110]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
