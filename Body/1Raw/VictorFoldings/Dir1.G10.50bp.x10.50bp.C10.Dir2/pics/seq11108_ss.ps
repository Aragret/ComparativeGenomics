%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUACUAACAGGGGGGGGGGUUAACGAAAAUAACCCCACCCUACUAAACCCCAUUAAACGCCUGGCAGCCxxxxxxxxxxCUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCCCCCCCCCCCAUUACUAACA\
) } def
/len { sequence length } bind def

/coor [
[72.92252350 381.44378662]
[58.90057755 375.89077759]
[46.70062256 367.02444458]
[37.08955002 355.40213013]
[30.67152405 341.75442505]
[27.84998703 326.93923950]
[28.80230331 311.88787842]
[33.46860886 297.54644775]
[41.55557632 284.81649780]
[52.55485153 274.49819946]
[65.77500916 267.24023438]
[80.38502502 263.49880981]
[80.38502502 248.49880981]
[80.38502502 233.49880981]
[80.38502502 218.49880981]
[80.38502502 203.49880981]
[80.38502502 188.49880981]
[80.38502502 173.49880981]
[80.38502502 158.49880981]
[80.38502502 143.49880981]
[80.38502502 128.49880981]
[70.16631317 117.51799774]
[55.20503235 116.44093323]
[40.24375153 115.36386108]
[25.28247261 114.28678894]
[21.20629883 128.77711487]
[14.29637432 142.15014648]
[4.83565760 153.85824585]
[-6.78844213 163.42199707]
[-20.09992409 170.44975281]
[-34.55369186 174.65373230]
[-49.55787659 175.86178589]
[-64.49806213 174.02445984]
[-78.76245117 169.21696472]
[-91.76693726 161.63618469]
[-102.97899628 151.59254456]
[-111.93948364 139.49731445]
[-118.28149414 125.84580994]
[-121.74531555 111.19702148]
[-122.18910217 96.15083313]
[-119.59469604 81.32335663]
[-114.06832123 67.32178497]
[-105.83628845 54.71946335]
[-95.23568726 44.03245163]
[-82.70061493 35.69837570]
[-68.74436951 30.05851364]
[-53.93844986 27.34381104]
[-38.88914871 27.66543388]
[-24.21272659 31.01021385]
[-10.51017570 37.24118042]
[1.65739572 46.10318375]
[11.79173279 57.23332596]
[19.47784042 70.17584229]
[24.40097618 84.40073395]
[26.35954285 99.32550812]
[41.32082367 100.40258026]
[56.28210449 101.47965240]
[71.24338531 102.55671692]
[82.30572510 76.76551819]
[110.34429932 72.33057404]
[115.18411255 58.13281631]
[112.31331635 42.57424927]
[123.74330902 33.02414703]
[128.58312988 18.82639313]
[133.42294312 4.62864017]
[130.55213928 -10.92992973]
[141.98214722 -20.48003197]
[146.82196045 -34.67778397]
[151.66177368 -48.87553787]
[138.63594055 -56.41303253]
[127.33108521 -66.34714508]
[118.18173981 -78.29602051]
[111.53958130 -91.80039215]
[107.65991974 -106.34117889]
[106.69187164 -121.35946655]
[108.67265320 -136.27799988]
[113.52612305 -150.52336121]
[121.06572723 -163.54797363]
[131.00166321 -174.85122681]
[142.95202637 -183.99862671]
[156.45747375 -190.63859558]
[170.99888611 -194.51591492]
[186.01733398 -195.48152161]
[200.93554688 -193.49833679]
[215.18011475 -188.64256287]
[228.20350647 -181.10084534]
[239.50514221 -171.16308594]
[248.65061951 -159.21124268]
[255.28840637 -145.70471191]
[259.16336060 -131.16267395]
[260.12655640 -116.14407349]
[258.14093018 -101.22618103]
[253.28285217 -86.98239899]
[245.73904419 -73.96022797]
[235.79943848 -62.66019821]
[223.84611511 -53.51665497]
[210.33853149 -46.88105774]
[195.79586792 -43.00845337]
[180.77709961 -42.04769897]
[165.85952759 -44.03572083]
[161.01971436 -29.83796883]
[156.17988586 -15.64021587]
[159.39686584 -1.09716463]
[147.62069702 9.46845627]
[142.78088379 23.66621017]
[137.94107056 37.86396027]
[141.15803528 52.40701294]
[129.38186646 62.97263336]
[124.54205322 77.17038727]
[132.04205322 90.16076660]
[146.75756836 93.06823730]
[161.47309875 95.97571564]
[176.51127625 91.06005859]
[187.49743652 101.11756897]
[202.21296692 104.02503967]
[216.92848206 106.93251038]
[229.91682434 97.92815399]
[245.45291138 100.82743073]
[254.31944275 113.91024780]
[251.25607300 129.41481018]
[238.08024597 138.14251709]
[222.60894775 134.91540527]
[214.02101135 121.64803314]
[199.30549622 118.74056244]
[184.58996582 115.83309174]
[170.60433960 120.95670319]
[158.56562805 110.69123840]
[143.85009766 107.78376007]
[129.13458252 104.87628937]
[122.65372467 118.60832977]
[110.28401184 127.21506500]
[95.38502502 128.49880981]
[95.38502502 143.49880981]
[95.38502502 158.49880981]
[95.38502502 173.49880981]
[95.38502502 188.49880981]
[95.38502502 203.49880981]
[95.38502502 218.49880981]
[95.38502502 233.49880981]
[95.38502502 248.49880981]
[95.38502502 263.49880981]
[109.99503326 267.24023438]
[123.21519470 274.49819946]
[134.21446228 284.81649780]
[142.30143738 297.54644775]
[146.96774292 311.88787842]
[147.92005920 326.93923950]
[145.09852600 341.75442505]
[138.68049622 355.40213013]
[129.06942749 367.02444458]
[116.86946106 375.89077759]
[102.84751892 381.44378662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 58]
[23 57]
[24 56]
[25 55]
[60 109]
[61 108]
[63 106]
[64 105]
[65 104]
[67 102]
[68 101]
[69 100]
[110 129]
[111 128]
[112 127]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
