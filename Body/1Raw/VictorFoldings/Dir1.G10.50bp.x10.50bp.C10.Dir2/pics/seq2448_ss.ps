%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUCCUCACGGGGGGGGGGACCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAxxxxxxxxxxCAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAACCCCCCCCCCAACUCUUCAC\
) } def
/len { sequence length } bind def

/coor [
[84.82099152 392.18460083]
[70.97505188 386.16857910]
[59.26638794 376.63916016]
[50.56386566 364.30349731]
[45.51326370 350.07696533]
[44.48937225 335.01528931]
[47.56817245 320.23611450]
[54.52119446 306.83621216]
[64.83247375 295.80987549]
[77.73685455 287.97537231]
[92.27674866 283.91403198]
[92.27674866 268.91403198]
[92.27674866 253.91404724]
[92.27674866 238.91404724]
[92.27674866 223.91404724]
[92.27674866 208.91404724]
[92.27674866 193.91404724]
[92.27674866 178.91404724]
[92.27674866 163.91404724]
[92.27674866 148.91404724]
[81.39241791 140.68957520]
[74.21656036 130.53524780]
[70.90442657 119.78858185]
[71.18181610 109.70861816]
[74.40348816 101.34860992]
[79.64673615 95.45561218]
[65.00323486 92.20478821]
[50.35973740 88.95396423]
[35.71623611 85.70314026]
[21.07273293 82.45230865]
[7.84311867 90.67514801]
[-6.96116495 87.16974640]
[-14.71885300 74.50665283]
[-26.03941917 80.77552032]
[-38.20064926 77.72209930]
[-44.78081131 67.52362823]
[-59.35351181 63.96886444]
[-73.92621613 60.41410065]
[-88.49891663 56.85934067]
[-103.07162476 53.30457687]
[-116.44509125 61.72632217]
[-131.83792114 58.14349747]
[-140.11779785 44.68173218]
[-136.37243652 29.32765198]
[-122.82387543 21.19055939]
[-107.51025391 25.09804916]
[-99.51686096 38.73187256]
[-84.94416046 42.28663635]
[-70.37145233 45.84139633]
[-55.79875183 49.39616013]
[-41.22604752 52.95092010]
[-24.70757294 47.10798645]
[-11.46802807 59.86315536]
[0.91921496 51.67219543]
[15.81611729 54.76039124]
[24.32355881 67.80880737]
[38.96706009 71.05963898]
[53.61056137 74.31046295]
[68.25406647 77.56128693]
[82.89756775 80.81211090]
[93.98887634 70.71346283]
[92.12126923 55.83018494]
[90.25365448 40.94690323]
[75.39259338 38.11776352]
[62.13411331 30.83299255]
[51.77714157 19.80628014]
[45.33635330 6.11791182]
[43.44275284 -8.89106750]
[46.28184891 -23.75022888]
[53.57550430 -37.00382614]
[64.60915375 -47.35340500]
[78.30183411 -53.78501892]
[93.31208038 -55.66856384]
[108.16933441 -52.81950760]
[121.41804504 -45.51697922]
[131.76022339 -34.47639465]
[138.18266296 -20.77940750]
[140.05615234 -5.76790428]
[137.19714355 9.08744049]
[129.88572693 22.33125114]
[118.83821869 32.66603088]
[105.13693237 39.07928848]
[107.00454712 53.96257019]
[108.87216187 68.84584808]
[122.59221649 74.90886688]
[134.85458374 66.26974487]
[147.11694336 57.63063049]
[159.37931824 48.99151611]
[171.64169312 40.35239792]
[183.90405273 31.71328354]
[196.16642761 23.07416725]
[208.24641418 14.18181705]
[220.13879395 5.04008245]
[232.03117371 -4.10165167]
[243.92355347 -13.24338531]
[249.68260193 -28.59803581]
[265.90182495 -31.02058792]
[275.89627075 -18.01892853]
[269.38452148 -2.96805048]
[253.06527710 -1.35100603]
[241.17289734 7.79072809]
[229.28051758 16.93246269]
[217.38813782 26.07419586]
[215.88874817 30.67064285]
[211.44844055 34.34691620]
[204.80554199 35.33653641]
[192.54316711 43.97565079]
[180.28080750 52.61476517]
[168.01843262 61.25388336]
[155.75607300 69.89299774]
[143.49369812 78.53211212]
[131.23132324 87.17123413]
[132.39688110 94.58010864]
[147.21467590 92.24923706]
[149.54531860 107.06706238]
[134.72798157 109.39786530]
[135.89353943 116.80674744]
[150.21614075 121.26356506]
[166.08531189 117.12816620]
[177.40704346 128.99198914]
[172.53450012 144.65055847]
[156.48014832 147.99566650]
[145.75932312 135.58616638]
[131.43672180 131.12934875]
[125.39672852 135.57551575]
[139.13768005 141.59101868]
[140.79846191 156.49879456]
[128.71829224 165.39088440]
[114.97747040 159.37507629]
[113.31674194 144.46786499]
[107.27674866 148.91404724]
[107.27674866 163.91404724]
[107.27674866 178.91404724]
[107.27674866 193.91404724]
[107.27674866 208.91404724]
[107.27674866 223.91404724]
[107.27674866 238.91404724]
[107.27674866 253.91404724]
[107.27674866 268.91403198]
[107.27674866 283.91403198]
[121.81663513 287.97537231]
[134.72100830 295.80987549]
[145.03230286 306.83621216]
[151.98532104 320.23611450]
[155.06411743 335.01528931]
[154.04022217 350.07696533]
[148.98962402 364.30349731]
[140.28709412 376.63916016]
[128.57844543 386.16857910]
[114.73249817 392.18460083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 60]
[27 59]
[28 58]
[29 57]
[30 56]
[33 53]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[61 84]
[62 83]
[63 82]
[85 112]
[86 111]
[87 110]
[88 109]
[89 108]
[90 107]
[91 106]
[92 103]
[93 102]
[94 101]
[95 100]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
