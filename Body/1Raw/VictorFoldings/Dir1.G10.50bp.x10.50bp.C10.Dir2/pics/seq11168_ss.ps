%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUACCUAGGGGGGGGGGAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGAxxxxxxxxxxUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCCCCCCCCCCCUCUUCCUA\
) } def
/len { sequence length } bind def

/coor [
[88.67854309 393.90762329]
[74.83260345 387.89160156]
[63.12394333 378.36218262]
[54.42142105 366.02651978]
[49.37081909 351.79998779]
[48.34692764 336.73831177]
[51.42572784 321.95916748]
[58.37874603 308.55923462]
[68.69003296 297.53289795]
[81.59441376 289.69839478]
[96.13430023 285.63708496]
[96.13430023 270.63708496]
[96.13430023 255.63706970]
[96.13430023 240.63706970]
[96.13430023 225.63706970]
[96.13430023 210.63706970]
[96.13430023 195.63706970]
[96.13430023 180.63706970]
[96.13430023 165.63706970]
[96.13430023 150.63706970]
[84.63249969 141.00854492]
[69.86643982 143.64741516]
[55.10038376 146.28628540]
[48.26137161 160.08969116]
[34.76360321 167.13693237]
[19.88038445 164.91122437]
[9.28841496 154.47340393]
[-5.47764063 157.11227417]
[-20.24369621 159.75112915]
[-35.00975037 162.38999939]
[-49.77580643 165.02886963]
[-61.95829391 176.00697327]
[-77.47122955 170.68901062]
[-80.35623932 154.54562378]
[-67.64546967 144.18376160]
[-52.41467285 150.26280212]
[-37.64861679 147.62394714]
[-22.88256073 144.98507690]
[-8.11650467 142.34622192]
[6.64955091 139.70735168]
[12.97063541 126.24697113]
[26.16170692 119.00406647]
[41.26486969 120.93999481]
[52.46152115 131.52021790]
[67.22757721 128.88136292]
[81.99362946 126.24249268]
[62.37204742 106.65586853]
[63.68373871 74.11331177]
[53.93608856 62.71228790]
[44.18843460 51.31126785]
[34.44078445 39.91024780]
[24.69313049 28.50922585]
[9.95070553 32.46190643]
[-5.04516554 29.61820984]
[-17.31704140 20.54276085]
[-24.42833519 7.03749180]
[-24.96709061 -8.21611404]
[-18.82633781 -22.18944359]
[-7.22532988 -32.10808182]
[7.53254604 -36.00267410]
[22.51710320 -33.09994888]
[34.75314713 -23.97624207]
[41.81119919 -10.44307327]
[42.28988266 4.81253576]
[36.09415054 18.76157379]
[45.84180450 30.16259575]
[55.58945465 41.56361771]
[65.33710480 52.96463776]
[75.08476257 64.36566162]
[82.57826996 64.05367279]
[79.48983765 49.37505722]
[76.40141296 34.69644928]
[69.27658081 21.49657059]
[73.91960907 7.23325348]
[87.44948578 0.75695145]
[101.47084808 6.08624220]
[107.28337860 19.91427422]
[101.28044891 33.66062164]
[99.42286682 48.54515839]
[97.56528473 63.42969131]
[105.05879211 63.11770248]
[113.82499695 50.94586563]
[122.59120941 38.77402878]
[131.35740662 26.60219383]
[124.02361298 13.21645069]
[123.23251343 -2.02615190]
[129.14120483 -16.09918404]
[140.57649231 -26.20843506]
[155.26789856 -30.34670448]
[170.29843140 -27.69233894]
[182.68377686 -18.77236176]
[189.96481323 -5.35784292]
[190.69587708 9.88775635]
[184.73182678 23.93741035]
[173.25680542 34.00155258]
[158.54922485 38.08193588]
[143.52925110 35.36840057]
[134.76304626 47.54023743]
[125.99683380 59.71207428]
[117.23062897 71.88391113]
[125.99683380 84.05574799]
[140.31942749 79.59893036]
[154.64202881 75.14211273]
[168.96463013 70.68530273]
[182.29196167 60.20587540]
[196.05122375 70.11138153]
[190.34176636 86.07504272]
[173.42144775 85.00789642]
[159.09884644 89.46471405]
[144.77624512 93.92153168]
[130.45365906 98.37834167]
[130.14166260 105.87185669]
[142.80882263 113.90571594]
[129.51768494 120.85887146]
[129.20570374 128.35237122]
[143.10824585 133.98432922]
[157.06864929 139.47135925]
[171.08535767 144.81288147]
[185.10206604 150.15438843]
[200.27134705 144.93208313]
[213.73439026 153.65710449]
[215.16349792 169.63638306]
[203.46238708 180.61196899]
[187.60714722 178.16433716]
[179.76055908 164.17109680]
[165.74385071 158.82958984]
[151.72712708 153.48808289]
[144.30882263 154.04873657]
[137.47630310 147.88688660]
[123.57373810 142.25492859]
[111.13430023 150.63706970]
[111.13430023 165.63706970]
[111.13430023 180.63706970]
[111.13430023 195.63706970]
[111.13430023 210.63706970]
[111.13430023 225.63706970]
[111.13430023 240.63706970]
[111.13430023 255.63706970]
[111.13430023 270.63708496]
[111.13430023 285.63708496]
[125.67418671 289.69839478]
[138.57856750 297.53289795]
[148.88984680 308.55923462]
[155.84288025 321.95916748]
[158.92167664 336.73831177]
[157.89778137 351.79998779]
[152.84718323 366.02651978]
[144.14465332 378.36218262]
[132.43598938 387.89160156]
[118.59005737 393.90762329]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 46]
[22 45]
[23 44]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[81 100]
[82 99]
[83 98]
[84 97]
[101 111]
[102 110]
[103 109]
[104 108]
[115 130]
[116 129]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
