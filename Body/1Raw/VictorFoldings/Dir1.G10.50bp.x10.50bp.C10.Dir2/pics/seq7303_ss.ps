%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUCCAUAGGGGGGGGGGAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACACAUUCGAAGAxxxxxxxxxxGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCCCCCCCCCCCAUCCUCCAUA\
) } def
/len { sequence length } bind def

/coor [
[85.04977417 390.27154541]
[73.83434296 380.20623779]
[65.24294281 367.82540894]
[59.73889923 353.79678345]
[57.61903763 338.87692261]
[58.99768066 323.87036133]
[63.80047989 309.58648682]
[71.76842499 296.79553223]
[82.47181702 286.18731689]
[95.33343506 278.33392334]
[109.65966797 273.65890503]
[108.41279602 258.71081543]
[107.16591644 243.76274109]
[105.91904449 228.81465149]
[104.67217255 213.86656189]
[103.42529297 198.91847229]
[102.17842102 183.97038269]
[100.93154907 169.02229309]
[99.68466949 154.07421875]
[98.43779755 139.12612915]
[97.19092560 124.17803955]
[84.02233887 116.99552917]
[70.77975464 124.04066467]
[64.73648834 138.90197754]
[49.30937195 143.30465698]
[36.33276749 133.87135315]
[35.76121521 117.83847809]
[48.03316116 107.50509644]
[63.73461914 110.79808044]
[76.97720337 103.75294495]
[61.97812653 103.58679962]
[47.18543625 106.07202911]
[34.11769867 98.70764160]
[28.58224297 84.76638031]
[33.03903580 70.44377899]
[45.50746918 62.10482407]
[60.44654846 63.45536804]
[71.21733856 73.89529419]
[83.66242981 82.26905060]
[76.75543213 68.95389557]
[69.84843445 55.63873672]
[62.94143295 42.32358170]
[56.03443527 29.00842667]
[49.12743759 15.69327068]
[42.22043610 2.37811494]
[27.93902969 7.07253456]
[13.08950424 9.41512775]
[-1.94350255 9.34521675]
[-16.77059746 6.86461115]
[-31.00772667 2.03756571]
[-44.28610992 -5.01088810]
[-56.26180649 -14.09817791]
[-66.62461853 -24.98892212]
[-75.10612488 -37.40102386]
[-81.48663330 -51.01297760]
[-85.60086823 -65.47220612]
[-87.34226990 -80.40417480]
[-86.66572571 -95.42211151]
[-83.58876038 -110.13701630]
[-78.19107056 -124.16773987]
[-70.61248016 -137.15084839]
[-61.04928970 -148.75004578]
[-49.74920654 -158.66490173]
[-37.00492859 -166.63858032]
[-23.14656258 -172.46455383]
[-8.53307629 -175.99189758]
[6.45700550 -177.12927246]
[21.43540573 -175.84718323]
[36.01414490 -172.17887878]
[49.81560135 -166.21934509]
[62.48228455 -158.12297058]
[73.68609619 -148.09945679]
[83.13682556 -136.40844727]
[90.58968353 -123.35275269]
[95.85162354 -109.27056122]
[98.78633881 -94.52662659]
[99.31781769 -79.50285339]
[97.43230438 -64.58840179]
[93.17862701 -50.16957855]
[86.66696167 -36.61987686]
[78.06598663 -24.29026031]
[67.59848785 -13.50009918]
[55.53559113 -4.52888346]
[62.44259262 8.78627205]
[69.34958649 22.10142708]
[76.25659180 35.41658401]
[83.16358948 48.73173904]
[90.07058716 62.04689407]
[96.97758484 75.36205292]
[110.82080078 81.13832092]
[125.14340210 76.68151093]
[139.46600342 72.22469330]
[153.78858948 67.76787567]
[152.74259949 52.73449326]
[155.19232178 37.86521149]
[161.00567627 23.96191216]
[169.86912537 11.77438354]
[181.30470276 1.95988274]
[194.69567871 -4.95230579]
[209.31991577 -8.58941650]
[224.38873291 -8.75530434]
[239.08949280 -5.44102478]
[252.62939453 1.17468929]
[264.27825928 10.73505974]
[273.40786743 22.72450829]
[279.52587891 36.49645615]
[282.30236816 51.30820465]
[281.58758545 66.36096954]
[277.42007446 80.84297943]
[270.02459717 93.97323608]
[259.79995728 105.04364014]
[247.29760742 113.45717621]
[233.19174194 118.76011658]
[218.24307251 120.66648102]
[203.25778198 119.07346344]
[189.04399109 114.06696320]
[176.36824036 105.91698456]
[165.91412354 95.06304169]
[158.24540710 82.09047699]
[143.92280579 86.54728699]
[129.60021973 91.00410461]
[115.27761841 95.46092224]
[118.41247559 101.00231171]
[119.30848694 108.10815430]
[117.30074310 115.82089996]
[112.13900757 122.93116760]
[113.38588715 137.87925720]
[114.63275909 152.82733154]
[115.87963104 167.77542114]
[117.12651062 182.72351074]
[118.37338257 197.67160034]
[119.62025452 212.61968994]
[120.86713409 227.56777954]
[122.11400604 242.51585388]
[123.36087799 257.46395874]
[124.60775757 272.41204834]
[139.51054382 274.64895630]
[153.49551392 280.26296997]
[165.80850220 288.95129395]
[175.78547668 300.24539185]
[182.88838196 313.53619385]
[186.73417664 328.10693359]
[187.11544800 343.17184448]
[184.01165771 357.91848755]
[177.59017944 371.55157471]
[168.19729614 383.33590698]
[156.33958435 392.63598633]
[142.65649414 398.95025635]
[127.88595581 401.93817139]
[112.82450867 401.43862915]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[21 126]
[22 30]
[23 29]
[39 89]
[40 88]
[41 87]
[42 86]
[43 85]
[44 84]
[45 83]
[90 122]
[91 121]
[92 120]
[93 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
