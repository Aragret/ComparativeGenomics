%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAGACACCCGGGGGGGGGGCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUxxxxxxxxxxGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCACCCUUACUACACAAUCCCCCCCCCCCAAAGACGCCC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 387.38272095]
[71.01555634 381.82971191]
[58.81560135 372.96337891]
[49.20452881 361.34109497]
[42.78650284 347.69338989]
[39.96496582 332.87820435]
[40.91728210 317.82681274]
[45.58358765 303.48538208]
[53.67055511 290.75543213]
[64.66983032 280.43716431]
[77.88998413 273.17919922]
[92.50000000 269.43774414]
[92.50000000 254.43775940]
[92.50000000 239.43775940]
[92.50000000 224.43775940]
[92.50000000 209.43775940]
[92.50000000 194.43775940]
[92.50000000 179.43775940]
[92.50000000 164.43775940]
[92.50000000 149.43775940]
[92.50000000 134.43775940]
[83.41132355 131.09701538]
[75.57479858 125.40901947]
[69.58193970 117.80310059]
[65.88509369 108.85336304]
[64.76331329 99.23535156]
[50.17956161 95.72618866]
[35.59581375 92.21701813]
[31.34819984 93.65139771]
[27.28338051 93.62319946]
[23.84892845 92.37770081]
[21.36275482 90.28290558]
[19.98379517 87.77501678]
[5.73710346 83.08121490]
[-8.50958824 78.38741302]
[-22.75628090 73.69361115]
[-37.09634018 69.29331207]
[-51.52372742 65.18836975]
[-65.95111084 61.08342361]
[-80.37849426 56.97847748]
[-91.88420105 67.25575256]
[-107.12330627 69.65851593]
[-121.23306274 63.42007065]
[-129.71110535 50.53106689]
[-129.85211182 35.10435104]
[-121.61110687 22.06252289]
[-107.61774445 15.56718636]
[-92.33726501 17.69098091]
[-80.64561462 27.75620842]
[-76.27355194 42.55109406]
[-61.84616470 46.65604019]
[-47.41878128 50.76098251]
[-32.99139786 54.86592865]
[-28.40879250 53.33329773]
[-22.81414604 54.70727158]
[-18.06247902 59.44692230]
[-3.81578779 64.14072418]
[10.43090439 68.83452606]
[24.67759705 73.52832031]
[39.10498047 77.63327026]
[53.68873215 81.14243317]
[68.27247620 84.65160370]
[75.65561676 74.51353455]
[86.12129211 67.60262299]
[98.34431458 64.79393005]
[110.77698517 66.44309998]
[121.84504700 72.34131622]
[133.43409729 62.81798172]
[145.02314758 53.29464340]
[136.77706909 40.74735641]
[129.91143799 27.39463806]
[124.50402832 13.38778210]
[120.61611176 -1.11450088]
[118.29174805 -15.94788933]
[117.55727386 -30.94431114]
[118.42100525 -45.93384171]
[120.87315369 -60.74664307]
[124.88594818 -75.21486664]
[130.41390991 -89.17459106]
[137.39439392 -102.46762848]
[145.74833679 -114.94335938]
[155.38104248 -126.46042633]
[166.18339539 -136.88833618]
[178.03298950 -146.10893250]
[190.79554749 -154.01773071]
[204.32646179 -160.52513123]
[218.47244263 -165.55738831]
[233.07316589 -169.05749512]
[247.96322632 -170.98576355]
[262.97390747 -171.32038879]
[277.93508911 -170.05754089]
[292.67727661 -167.21154785]
[307.03344727 -162.81465149]
[320.84091187 -156.91668701]
[333.94323730 -149.58445740]
[346.19192505 -140.90106201]
[357.44821167 -130.96487427]
[367.58459473 -119.88848877]
[376.48617554 -107.79741669]
[384.05206299 -94.82864380]
[390.19662476 -81.12912750]
[394.85012817 -66.85408783]
[397.95993042 -52.16527176]
[399.49075317 -37.22911835]
[399.42529297 -22.21486473]
[397.76422119 -7.29263401]
[394.52642822 7.36849451]
[389.74853516 21.60239792]
[383.48474121 35.24779892]
[375.80599976 48.15007782]
[366.79928589 60.16304779]
[356.56668091 71.15058899]
[345.22415161 80.98820496]
[332.90014648 89.56443024]
[319.73440552 96.78208923]
[305.87600708 102.55939484]
[291.48202515 106.83089447]
[276.71557617 109.54817963]
[261.74392700 110.68046570]
[246.73675537 110.21492767]
[231.86408997 108.15683746]
[217.29443359 104.52951050]
[203.19290161 99.37404633]
[189.71925354 92.74887085]
[177.02616882 84.72904205]
[165.25746155 75.40543365]
[154.54647827 64.88368988]
[142.95744324 74.40702820]
[131.36839294 83.93036652]
[134.91714478 104.79603577]
[125.87394714 123.93214417]
[107.50000000 134.43775940]
[107.50000000 149.43775940]
[107.50000000 164.43775940]
[107.50000000 179.43775940]
[107.50000000 194.43775940]
[107.50000000 209.43775940]
[107.50000000 224.43775940]
[107.50000000 239.43775940]
[107.50000000 254.43775940]
[107.50000000 269.43774414]
[122.11001587 273.17919922]
[135.33016968 280.43716431]
[146.32945251 290.75543213]
[154.41641235 303.48538208]
[159.08271790 317.82681274]
[160.03503418 332.87820435]
[157.21350098 347.69338989]
[150.79547119 361.34109497]
[141.18440247 372.96337891]
[128.98443604 381.82971191]
[114.96250153 387.38272095]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[26 62]
[27 61]
[28 60]
[33 59]
[34 58]
[35 57]
[36 56]
[37 53]
[38 52]
[39 51]
[40 50]
[67 129]
[68 128]
[69 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
