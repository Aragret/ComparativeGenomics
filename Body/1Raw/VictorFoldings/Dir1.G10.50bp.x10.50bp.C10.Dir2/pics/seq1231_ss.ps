%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUCCCCAGGGGGGGGGGAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUxxxxxxxxxxCGCAAAACUAACCCCCUAAUAAAAUUAAUUAACCACUCAUUCAUCGACCUCCCCCCCCCCCCCCACCCCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 384.70889282]
[71.19830322 378.69287109]
[59.48964310 369.16345215]
[50.78712082 356.82778931]
[45.73651886 342.60125732]
[44.71262741 327.53958130]
[47.79142761 312.76043701]
[54.74444962 299.36050415]
[65.05573273 288.33416748]
[77.96011353 280.49966431]
[92.50000000 276.43835449]
[92.50000000 261.43835449]
[92.50000000 246.43833923]
[92.50000000 231.43833923]
[92.50000000 216.43833923]
[92.50000000 201.43833923]
[92.50000000 186.43833923]
[92.50000000 171.43833923]
[92.50000000 156.43833923]
[92.50000000 141.43833923]
[92.50000000 126.43833923]
[87.13096619 126.39973450]
[81.56667328 125.24320984]
[76.04202271 122.90414429]
[70.80751801 119.36717987]
[56.23481369 122.92194366]
[52.59822464 137.78915405]
[42.46036148 149.25572205]
[28.15082550 154.68672180]
[12.95784760 152.83415222]
[0.37266219 144.12371826]
[-6.71274805 130.55700684]
[-6.67020702 115.25156403]
[0.49050891 101.72445679]
[13.12392044 93.08411407]
[28.32696152 91.31602478]
[42.60608673 96.82649231]
[52.68005371 108.34924316]
[67.25275421 104.79447937]
[68.49962616 89.84638977]
[54.71724701 83.92642975]
[40.93486786 78.00646973]
[27.15248489 72.08650208]
[13.37010384 66.16654205]
[-1.21382248 72.25625610]
[-15.80033875 66.17274475]
[-21.73552322 51.52524948]
[-15.49813652 37.00386810]
[-0.78870857 31.22387695]
[13.66591644 37.61444473]
[19.29006767 52.38415909]
[33.07244873 58.30412292]
[46.85483170 64.22408295]
[60.63721085 70.14405060]
[74.41959381 76.06401062]
[87.48347473 69.98994446]
[100.84922791 70.01342773]
[111.99723053 75.27547455]
[121.97995758 64.07970428]
[131.96269226 52.88394165]
[141.94540405 41.68817520]
[151.92813110 30.49240875]
[141.77297974 19.43567085]
[132.76919556 7.42273855]
[125.00628662 -5.42699671]
[118.56137848 -18.98582458]
[113.49854279 -33.11898804]
[109.86808777 -47.68601990]
[107.70610809 -62.54214478]
[107.03408051 -77.53971100]
[107.85868835 -92.52966309]
[110.17173767 -107.36301422]
[113.95023346 -121.89234924]
[119.15663147 -135.97326660]
[125.73918152 -149.46580505]
[133.63246155 -162.23588562]
[142.75801086 -174.15657043]
[153.02516174 -185.10939026]
[164.33184814 -194.98548889]
[176.56570435 -203.68672180]
[189.60513306 -211.12660217]
[203.32055664 -217.23118591]
[217.57563782 -221.93978882]
[232.22872925 -225.20564270]
[247.13417053 -226.99626160]
[262.14382935 -227.29385376]
[277.10855103 -226.09547424]
[291.87957764 -223.41302490]
[306.31008911 -219.27316284]
[320.25671387 -213.71704102]
[333.58081055 -206.79988098]
[346.14996338 -198.59042358]
[357.83923340 -189.17025757]
[368.53247070 -178.63302612]
[378.12335205 -167.08341980]
[386.51663208 -154.63626099]
[393.62881470 -141.41525269]
[399.38928223 -127.55178070]
[403.74072266 -113.18363953]
[406.63992310 -98.45362854]
[408.05807495 -83.50814819]
[407.98104858 -68.49572754]
[406.40963745 -53.56558228]
[403.35946655 -38.86608887]
[398.86083984 -24.54335213]
[392.95843506 -10.73971272]
[385.71096802 2.40763521]
[377.19042969 14.76802444]
[367.48153687 26.21860886]
[356.68075562 36.64558411]
[344.89544678 45.94531631]
[332.24273682 54.02538681]
[318.84838867 60.80548096]
[304.84548950 66.21821594]
[290.37326050 70.20980072]
[275.57546997 72.74055481]
[260.59927368 73.78533936]
[245.59344482 73.33375549]
[230.70715332 71.39030457]
[216.08834839 67.97428894]
[201.88232422 63.11967087]
[188.23025513 56.87469482]
[175.26783752 49.30142593]
[163.12390137 40.47513580]
[153.14117432 51.67090225]
[143.15844727 62.86666489]
[133.17572021 74.06243134]
[123.19300079 85.25820160]
[125.68006897 109.78620148]
[107.50000000 126.43833923]
[107.50000000 141.43833923]
[107.50000000 156.43833923]
[107.50000000 171.43833923]
[107.50000000 186.43833923]
[107.50000000 201.43833923]
[107.50000000 216.43833923]
[107.50000000 231.43833923]
[107.50000000 246.43833923]
[107.50000000 261.43835449]
[107.50000000 276.43835449]
[122.03988647 280.49966431]
[134.94427490 288.33416748]
[145.25555420 299.36050415]
[152.20857239 312.76043701]
[155.28736877 327.53958130]
[154.26348877 342.60125732]
[149.21287537 356.82778931]
[140.51036072 369.16345215]
[128.80169678 378.69287109]
[114.95575714 384.70889282]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 39]
[26 38]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[58 128]
[59 127]
[60 126]
[61 125]
[62 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
