%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAAACAAAGGGGGGGGGGACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCxxxxxxxxxxUCAACACAACCACCCACAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUUCCCCCCCCCCUUUAACCAAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 376.75122070]
[71.19830322 370.73519897]
[59.48964310 361.20578003]
[50.78712082 348.87011719]
[45.73651886 334.64358521]
[44.71262741 319.58190918]
[47.79142761 304.80276489]
[54.74444962 291.40283203]
[65.05573273 280.37649536]
[77.96011353 272.54199219]
[92.50000000 268.48068237]
[92.50000000 253.48066711]
[92.50000000 238.48066711]
[92.50000000 223.48066711]
[92.50000000 208.48066711]
[92.50000000 193.48066711]
[92.50000000 178.48066711]
[92.50000000 163.48066711]
[92.50000000 148.48066711]
[92.50000000 133.48066711]
[92.50000000 118.48066711]
[79.88887024 110.35913086]
[66.23262787 116.56453705]
[52.57638931 122.76994324]
[38.92014694 128.97534180]
[29.82781410 142.62310791]
[13.48189354 141.30291748]
[6.69766760 126.37287903]
[16.45416641 113.19172668]
[32.71474075 115.31910706]
[46.37098312 109.11370087]
[60.02722549 102.90829468]
[73.68346405 96.70288849]
[74.07338715 89.21302795]
[59.09367371 88.43318176]
[44.11397171 87.65310669]
[44.89427948 72.67341614]
[59.87351990 73.45346832]
[74.85323334 74.23331451]
[75.24315643 66.74346161]
[62.30509949 59.15354919]
[49.36704254 51.56364059]
[36.42898560 43.97373199]
[23.49093056 36.38382339]
[14.44158173 34.72216034]
[10.36501122 28.49904060]
[-2.41234612 20.64161491]
[-15.18970299 12.78418922]
[-27.96706009 4.92676401]
[-44.62645721 1.78019297]
[-46.21463394 -15.09920406]
[-30.43454170 -21.29799652]
[-20.10963440 -7.85059357]
[-7.33227777 0.00683235]
[5.44507980 7.86425829]
[18.22243690 15.72168350]
[31.08083916 23.44576836]
[44.01889420 31.03567696]
[56.95695114 38.62558365]
[69.89500427 46.21549225]
[82.83306122 53.80540085]
[98.30159760 64.57209015]
[105.56731415 79.07194519]
[104.21860504 93.38791656]
[115.72040558 83.75939178]
[125.81905365 72.66807556]
[134.33013916 60.31650162]
[142.84123230 47.96492767]
[151.35232544 35.61335754]
[140.35037231 25.37739754]
[130.95610046 13.64856625]
[123.36975098 0.67685956]
[117.75302887 -13.26122856]
[114.22565460 -27.86860657]
[112.86280823 -42.83391571]
[113.69355011 -57.83817291]
[116.70017242 -72.56156158]
[121.81857300 -86.69024658]
[128.93966675 -99.92308044]
[137.91166687 -111.97799683]
[148.54333496 -122.59805298]
[160.60804749 -131.55688477]
[173.84864807 -138.66351318]
[187.98292542 -143.76647949]
[202.70957947 -146.75701904]
[217.71473694 -147.57136536]
[232.67854309 -146.19218445]
[247.28205872 -142.64884949]
[261.21401978 -137.01690674]
[274.17742920 -129.41639709]
[285.89599609 -120.00930786]
[296.11990356 -108.99617767]
[304.63128662 -96.61174774]
[311.24868774 -83.11997223]
[315.83108521 -68.80845642]
[318.28076172 -53.98223114]
[318.54553223 -38.95732498]
[316.61975098 -24.05399704]
[312.54443359 -9.58991146]
[306.40649414 4.12663126]
[298.33676147 16.80326080]
[288.50720215 28.16977310]
[277.12734985 37.98389053]
[264.43975830 46.03642654]
[250.71490479 52.15573883]
[236.24530029 56.21139526]
[221.33937073 58.11694717]
[206.31483459 57.83177948]
[191.49195862 55.36196899]
[177.18667603 50.76016235]
[163.70390320 44.12444687]
[155.19281006 56.47602081]
[146.68171692 68.82759094]
[138.17062378 81.17916107]
[152.18644714 75.83528900]
[167.16983032 76.54110718]
[180.62121582 83.17887878]
[190.29663086 94.64127350]
[194.58197021 109.01610565]
[192.76235962 123.90533447]
[185.14135742 136.82508850]
[172.99029541 145.62008667]
[158.33627319 148.82310486]
[143.62388611 145.89981079]
[131.30749512 137.33789062]
[123.44174957 124.56565094]
[121.33884430 109.71379089]
[125.34893036 95.26119232]
[113.84712982 104.88971710]
[107.50000000 118.48066711]
[107.50000000 133.48066711]
[107.50000000 148.48066711]
[107.50000000 163.48066711]
[107.50000000 178.48066711]
[107.50000000 193.48066711]
[107.50000000 208.48066711]
[107.50000000 223.48066711]
[107.50000000 238.48066711]
[107.50000000 253.48066711]
[107.50000000 268.48068237]
[122.03988647 272.54199219]
[134.94427490 280.37649536]
[145.25555420 291.40283203]
[152.20857239 304.80276489]
[155.28736877 319.58190918]
[154.26348877 334.64358521]
[149.21287537 348.87011719]
[140.51036072 361.20578003]
[128.80169678 370.73519897]
[114.95575714 376.75122070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 33]
[23 32]
[24 31]
[25 30]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[46 56]
[47 55]
[48 54]
[49 53]
[64 129]
[65 128]
[66 114]
[67 113]
[68 112]
[69 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
