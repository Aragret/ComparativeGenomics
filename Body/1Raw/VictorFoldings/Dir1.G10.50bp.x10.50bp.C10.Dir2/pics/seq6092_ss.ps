%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAACCCACAGGGGGGGGGGAACACUUAGUUAACAGCUAAGCACCCUAAUCAACUGGCUUCAAUCUACUUxxxxxxxxxxAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUACCCCCCCCCCUUAAACCCAUA\
) } def
/len { sequence length } bind def

/coor [
[84.98070526 361.38046265]
[70.95876312 355.82745361]
[58.75880814 346.96112061]
[49.14773560 335.33880615]
[42.72970963 321.69110107]
[39.90817261 306.87591553]
[40.86048889 291.82455444]
[45.52679443 277.48312378]
[53.61376190 264.75317383]
[64.61303711 254.43489075]
[77.83319092 247.17692566]
[92.44320679 243.43548584]
[92.44320679 228.43548584]
[92.44320679 213.43548584]
[92.44320679 198.43548584]
[92.44320679 183.43548584]
[92.44320679 168.43548584]
[92.44320679 153.43548584]
[92.44320679 138.43548584]
[92.44320679 123.43548584]
[92.44320679 108.43548584]
[80.83480072 117.93521881]
[65.89141083 116.63327789]
[56.10076904 105.26915741]
[57.02388763 90.29758453]
[68.13644409 80.22231293]
[83.12658691 80.76602173]
[93.48031616 91.62060547]
[95.32363892 76.73429871]
[97.16696167 61.84799194]
[99.01028442 46.96168518]
[100.85360718 32.07537842]
[86.11438751 29.26154518]
[71.59076691 25.48974419]
[57.34492111 20.77612305]
[43.43786621 15.14086723]
[29.92915344 8.60810947]
[16.87662697 1.20582378]
[4.33618355 -7.03429222]
[-7.63847876 -16.07695198]
[-18.99608231 -25.88343620]
[-29.68799019 -36.41174698]
[-39.66841888 -47.61680222]
[-48.89463043 -59.45062256]
[-57.32711792 -71.86253357]
[-64.92976379 -84.79937744]
[-71.67002869 -98.20575714]
[-77.51902771 -112.02427673]
[-82.45173645 -126.19575500]
[-86.44701385 -140.65950012]
[-89.48776245 -155.35357666]
[-91.56095886 -170.21508789]
[-92.65772247 -185.18035889]
[-92.77335358 -200.18531799]
[-91.90737152 -215.16571045]
[-90.06346893 -230.05740356]
[-87.24954987 -244.79660034]
[-83.47766113 -259.32022095]
[-78.76395416 -273.56600952]
[-73.12861633 -287.47305298]
[-66.59577942 -300.98171997]
[-59.19342041 -314.03421021]
[-50.95322800 -326.57458496]
[-41.91049576 -338.54919434]
[-32.10394669 -349.90673828]
[-21.57557297 -360.59860229]
[-10.37045765 -370.57894897]
[1.46341622 -379.80508423]
[13.87537289 -388.23751831]
[26.81226349 -395.84008789]
[40.21868896 -402.58026123]
[54.03723907 -408.42919922]
[68.20874023 -413.36181641]
[82.67251587 -417.35699463]
[97.36661530 -420.39767456]
[112.22812653 -422.47076416]
[127.19340515 -423.56744385]
[142.19836426 -423.68298340]
[157.17875671 -422.81692505]
[172.07043457 -420.97293091]
[186.80961609 -418.15893555]
[201.33320618 -414.38696289]
[215.57899475 -409.67315674]
[229.48597717 -404.03775024]
[242.99461365 -397.50482178]
[256.04705811 -390.10238647]
[268.58740234 -381.86212158]
[280.56195068 -372.81930542]
[291.91943359 -363.01269531]
[302.61123657 -352.48425293]
[312.59152222 -341.27908325]
[321.81759644 -329.44515991]
[330.24993896 -317.03314209]
[337.85244751 -304.09622192]
[344.59252930 -290.68975830]
[350.44137573 -276.87118530]
[355.37390137 -262.69964600]
[359.36901855 -248.23583984]
[362.40960693 -233.54171753]
[364.48260498 -218.68020630]
[365.57919312 -203.71492004]
[365.69467163 -188.70994568]
[364.82849121 -173.72956848]
[362.98440552 -158.83790588]
[360.17031860 -144.09873962]
[356.39825439 -129.57516479]
[351.68438721 -115.32941437]
[346.04888916 -101.42245483]
[339.51589966 -87.91385651]
[332.11337280 -74.86146545]
[323.87304688 -62.32116699]
[314.83016968 -50.34666443]
[305.02349854 -38.98923492]
[294.49499512 -28.29751205]
[283.28976440 -18.31728172]
[271.45578003 -9.09127998]
[259.04370117 -0.65901428]
[246.10673523 6.94340706]
[232.70022583 13.68342876]
[218.88160706 19.53218842]
[204.71005249 24.46464157]
[190.24623108 28.45966530]
[175.55209351 31.50015259]
[160.69055176 33.57308578]
[145.72526550 34.66958237]
[130.72030640 34.78495407]
[115.73992157 33.91870117]
[113.89659119 48.80501175]
[112.05326843 63.69131851]
[110.20994568 78.57762909]
[108.36662292 93.46393585]
[107.44320679 108.43548584]
[107.44320679 123.43548584]
[107.44320679 138.43548584]
[107.44320679 153.43548584]
[107.44320679 168.43548584]
[107.44320679 183.43548584]
[107.44320679 198.43548584]
[107.44320679 213.43548584]
[107.44320679 228.43548584]
[107.44320679 243.43548584]
[122.05322266 247.17692566]
[135.27337646 254.43489075]
[146.27265930 264.75317383]
[154.35961914 277.48312378]
[159.02592468 291.82455444]
[159.97824097 306.87591553]
[157.15670776 321.69110107]
[150.73867798 335.33880615]
[141.12760925 346.96112061]
[128.92764282 355.82745361]
[114.90570831 361.38046265]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[28 131]
[29 130]
[30 129]
[31 128]
[32 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
