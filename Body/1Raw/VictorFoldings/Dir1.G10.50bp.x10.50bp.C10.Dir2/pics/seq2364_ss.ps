%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCAAUUAGGGGGGGGGGAGAAAGCGUUCAAGCUCAACACCCACUACCUAAAAAAUCCCAAACAUAUAxxxxxxxxxxUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCUAGCCCCUACCCCCCCCCCCCCCCCAAUUA\
) } def
/len { sequence length } bind def

/coor [
[140.90034485 514.86926270]
[127.68013763 507.59680176]
[116.79333496 497.14981079]
[108.98220825 484.24057007]
[104.77932739 469.74923706]
[104.47125244 454.66390991]
[108.07899475 440.01309204]
[115.35656738 426.79568481]
[125.80777740 415.91293335]
[138.72003174 408.10678101]
[153.21296692 403.90948486]
[152.90090942 388.91275024]
[152.58886719 373.91598511]
[152.27680969 358.91925049]
[151.96475220 343.92248535]
[151.65269470 328.92572021]
[151.34063721 313.92898560]
[151.02857971 298.93222046]
[150.71652222 283.93545532]
[150.40446472 268.93872070]
[149.93643188 253.94601440]
[149.31245422 238.95899963]
[145.75769043 224.38630676]
[139.41055298 210.79534912]
[133.06343079 197.20439148]
[126.71630096 183.61344910]
[120.99933624 178.85298157]
[120.38179016 169.67309570]
[114.31877136 155.95303345]
[108.25576019 142.23298645]
[102.19274902 128.51292419]
[96.12973785 114.79287720]
[83.95790100 106.02666473]
[69.02359009 104.62436676]
[60.72847748 117.48709106]
[47.40021133 125.01143646]
[32.10152435 125.46837616]
[18.34794617 118.75289154]
[9.29994869 106.40816498]
[7.03669310 91.27091980]
[12.07826138 76.81958008]
[23.26613617 66.37496185]
[38.02942657 62.33716202]
[52.97563934 65.63404083]
[64.67023468 75.50798798]
[70.42589569 89.69005585]
[85.36019897 91.09236145]
[90.85303497 85.98561859]
[77.74477386 78.69360352]
[80.62939453 63.97358704]
[95.52038574 62.16847992]
[101.83869934 75.77214050]
[107.33152771 70.66539764]
[107.01947784 55.66864777]
[106.70742035 40.67189407]
[106.39536285 25.67513847]
[106.08330536 10.67838478]
[105.77124786 -4.31836843]
[105.45919037 -19.31512260]
[105.14714050 -34.31187439]
[90.34178162 -37.02963638]
[76.38669586 -42.67238235]
[63.85334396 -51.00904465]
[53.25495148 -61.69824600]
[45.02552032 -74.30226898]
[39.50204086 -88.30498505]
[36.91069031 -103.13298798]
[37.35758972 -118.17909241]
[40.82443619 -132.82716370]
[47.16926193 -146.47735596]
[56.13225174 -158.57073975]
[67.34638214 -168.61206055]
[80.35243225 -176.19015503]
[94.61782074 -180.99468994]
[109.55838013 -182.82894897]
[124.56230927 -181.61778259]
[139.01521301 -177.41082764]
[152.32524109 -170.38032532]
[163.94737244 -160.81417847]
[173.40567017 -149.10412598]
[180.31283569 -135.72966003]
[184.38601685 -121.23849487]
[185.45841980 -106.22400665]
[183.48612976 -91.30104065]
[178.54992676 -77.08067322]
[170.85192871 -64.14523315]
[160.70736694 -53.02440643]
[148.53164673 -44.17359161]
[134.82337952 -37.95521927]
[120.14389038 -34.62393188]
[120.45594788 -19.62717819]
[120.76800537 -4.63042498]
[121.08006287 10.36632919]
[121.39211273 25.36308289]
[121.70417023 40.35983658]
[122.01622772 55.35659027]
[122.32828522 70.35334015]
[125.01230621 97.48925781]
[109.84978485 108.72985840]
[115.91280365 122.44991302]
[121.97581482 136.16996765]
[128.03883362 149.89001465]
[134.10183716 163.61007690]
[140.30725098 177.26631165]
[146.65437317 190.85726929]
[153.00151062 204.44821167]
[159.34863281 218.03916931]
[161.03616333 203.13439941]
[166.96543884 189.35601807]
[176.62889099 177.88354492]
[189.19926453 169.69906616]
[203.60047913 165.50323486]
[218.59971619 165.65522766]
[232.91294861 170.14202881]
[245.31488037 178.57954407]
[254.74386597 190.24549866]
[260.39273071 204.14118958]
[261.77786255 219.07710266]
[258.78073120 233.77462769]
[251.65788269 246.97558594]
[241.01908875 257.54989624]
[227.77507019 264.59231567]
[213.05960083 267.50003052]
[198.13238525 266.02410889]
[184.27128601 260.29086304]
[172.66288757 250.79112244]
[164.29946899 238.33502197]
[164.92344666 253.32203674]
[168.42605591 261.82989502]
[165.40121460 268.62664795]
[165.71327209 283.62341309]
[166.02532959 298.62017822]
[166.33738708 313.61691284]
[166.64944458 328.61367798]
[166.96150208 343.61041260]
[167.27355957 358.60717773]
[167.58561707 373.60394287]
[167.89767456 388.60067749]
[168.20973206 403.59744263]
[182.86471558 407.18820190]
[196.09053040 414.45046997]
[206.98539734 424.88906860]
[214.80648804 437.79226685]
[219.02056885 452.28033447]
[219.34028625 467.36544800]
[215.74386597 482.01904297]
[208.47650146 495.24203491]
[198.03369141 506.13287354]
[185.12747192 513.94897461]
[170.63777161 518.15747070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 128]
[22 127]
[23 107]
[24 106]
[25 105]
[26 104]
[28 103]
[29 102]
[30 101]
[31 100]
[32 99]
[33 47]
[34 46]
[53 97]
[54 96]
[55 95]
[56 94]
[57 93]
[58 92]
[59 91]
[60 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
