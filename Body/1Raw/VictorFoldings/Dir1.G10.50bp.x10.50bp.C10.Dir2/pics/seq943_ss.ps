%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUCCUAGCCGGGGGGGGGGUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUUCCAGUxxxxxxxxxxCAAUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGCCCCCCCCCCUGGGCCUAGCC\
) } def
/len { sequence length } bind def

/coor [
[94.27702332 376.99194336]
[79.71717072 373.08374023]
[66.51602173 365.80410767]
[55.44108963 355.57623291]
[47.13625336 342.99475098]
[42.08433914 328.79119873]
[40.57906342 313.79125977]
[42.70793915 298.86709595]
[48.34719849 284.88629150]
[57.16898346 272.66174316]
[68.66040039 262.90414429]
[82.15335846 256.18078613]
[96.86339569 252.88256836]
[97.17137146 237.88574219]
[97.47934723 222.88890076]
[97.78732300 207.89205933]
[98.09530640 192.89521790]
[98.40328217 177.89839172]
[98.71125793 162.90155029]
[99.01923370 147.90470886]
[99.32721710 132.90786743]
[91.74347687 130.19523621]
[85.41707611 125.86489105]
[80.65687561 120.35733795]
[77.63570404 114.16086578]
[63.20831680 118.26580811]
[48.78093338 122.37075043]
[43.57050323 136.98687744]
[30.74505234 145.72114563]
[15.23623276 145.21505737]
[3.00749922 135.66322327]
[-1.23895001 120.73849487]
[4.12973118 106.17975616]
[17.04917526 97.58512878]
[32.55159378 98.25942993]
[44.67598724 107.94336700]
[59.10337448 103.83842468]
[73.53075409 99.73347473]
[78.55294800 84.48498535]
[91.46410370 74.94345856]
[90.84828186 59.95610428]
[90.23245239 44.96875000]
[89.61663055 29.98139763]
[89.00080109 14.99404335]
[74.58966827 10.35243416]
[62.65849686 1.07778645]
[54.63545609 -11.69527245]
[51.47253036 -26.41485023]
[53.53259659 -41.30033493]
[60.54789734 -54.55778503]
[71.65467072 -64.59614563]
[85.49946594 -70.21816254]
[84.88363647 -85.20551300]
[84.26781464 -100.19287109]
[83.65198517 -115.18022156]
[82.57491302 -130.14149475]
[81.03762817 -145.06251526]
[79.50033569 -159.98353577]
[64.51136017 -161.29776001]
[50.04204941 -165.42518616]
[36.61545944 -172.21658325]
[24.71695328 -181.42648315]
[14.77665329 -192.72190857]
[7.15389395 -205.69458008]
[2.12423491 -219.87551880]
[-0.13050526 -234.75210571]
[0.47118068 -249.78654480]
[3.90754223 -264.43536377]
[10.05435753 -278.16900635]
[18.68942261 -290.49102783]
[29.50058365 -300.95599365]
[42.09702682 -309.18557739]
[56.02339935 -314.88229370]
[70.77626801 -317.84024048]
[85.82232666 -317.95245361]
[100.61766815 -315.21487427]
[114.62745667 -309.72650146]
[127.34524536 -301.68569946]
[138.31129456 -291.38314819]
[147.12918091 -279.19128418]
[153.48013306 -265.55084229]
[157.13459778 -250.95491028]
[157.96046448 -235.93112183]
[155.92785645 -221.02256775]
[151.11026001 -206.76818848]
[143.68183899 -193.68327332]
[133.91111755 -182.24082947]
[122.15129089 -172.85450745]
[108.82749176 -165.86360168]
[94.42134857 -161.52082825]
[95.95864105 -146.59980774]
[97.49593353 -131.67878723]
[100.04634857 -129.16033936]
[101.47261810 -125.25709534]
[101.12635803 -120.52574158]
[98.63934326 -115.79604340]
[99.25516510 -100.80869293]
[99.87099457 -85.82134247]
[100.48681641 -70.83398438]
[114.74617004 -66.36676025]
[126.63906097 -57.27344894]
[134.71836853 -44.63623047]
[137.99270630 -29.96993637]
[136.04804993 -15.04048920]
[129.09996033 -1.65227163]
[117.96990967 8.56995487]
[103.98815918 14.37821770]
[104.60398102 29.36557198]
[105.21981049 44.35292435]
[105.83563232 59.34027863]
[106.45146179 74.32762909]
[126.01324463 85.68338013]
[131.26080322 110.30255127]
[145.50749207 114.99634552]
[159.75419617 119.69014740]
[174.00088501 124.38394928]
[188.24757385 129.07774353]
[197.44084167 128.79541016]
[202.73684692 134.01693726]
[216.88417053 139.00225830]
[231.03147888 143.98757935]
[247.97976685 143.54916382]
[253.09280396 159.71372986]
[238.97537231 169.10174561]
[226.04615784 158.13490295]
[211.89884949 153.14958191]
[197.75152588 148.16426086]
[183.55377197 143.32444763]
[169.30708313 138.63064575]
[155.06039429 133.93684387]
[140.81370544 129.24304199]
[126.56700897 124.54924011]
[114.32405090 133.21585083]
[114.01607513 148.21269226]
[113.70809937 163.20951843]
[113.40012360 178.20635986]
[113.09214020 193.20320129]
[112.78416443 208.20004272]
[112.47618866 223.19686890]
[112.16821289 238.19371033]
[111.86022949 253.19055176]
[126.42245483 257.08990479]
[139.62800598 264.36157227]
[150.70913696 274.58270264]
[159.02160645 287.15911865]
[164.08212280 301.35964966]
[165.59649658 316.35864258]
[163.47666931 331.28411865]
[157.84588623 345.26831055]
[149.03152466 357.49819946]
[137.54602051 367.26278687]
[124.05713654 373.99432373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[25 38]
[26 37]
[27 36]
[40 111]
[41 110]
[42 109]
[43 108]
[44 107]
[52 99]
[53 98]
[54 97]
[55 96]
[56 92]
[57 91]
[58 90]
[113 132]
[114 131]
[115 130]
[116 129]
[117 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
