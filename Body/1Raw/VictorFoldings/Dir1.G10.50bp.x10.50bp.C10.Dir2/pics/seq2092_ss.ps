%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCUAUAGGGGGGGGGGCCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGxxxxxxxxxxAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUACCCCCCCCCCAACCCAUAUA\
) } def
/len { sequence length } bind def

/coor [
[86.56493378 360.18115234]
[72.71899414 354.16513062]
[61.01033020 344.63571167]
[52.30780792 332.30004883]
[47.25720596 318.07351685]
[46.23331451 303.01184082]
[49.31211472 288.23269653]
[56.26513672 274.83276367]
[66.57641602 263.80642700]
[79.48079681 255.97192383]
[94.02069092 251.91059875]
[94.02069092 236.91059875]
[94.02069092 221.91059875]
[94.02069092 206.91059875]
[94.02069092 191.91059875]
[94.02069092 176.91059875]
[94.02069092 161.91059875]
[94.02069092 146.91059875]
[94.02069092 131.91059875]
[94.02069092 116.91060638]
[84.03796387 105.71483612]
[69.13605499 104.00215149]
[54.23415756 102.28945923]
[47.92845154 104.60151672]
[42.26995850 103.50026703]
[38.75269699 100.18298340]
[23.93493652 97.85187531]
[9.11717892 95.52077484]
[-5.70057917 93.18966675]
[-11.53143597 107.09162903]
[-20.52038002 119.19379425]
[-32.14480591 128.79255676]
[-45.72888565 135.32984924]
[-60.48285675 138.42561340]
[-75.54895020 137.89985657]
[-90.05123138 133.78314209]
[-103.14656067 126.31483459]
[-114.07359314 115.92910767]
[-122.19705200 103.22978210]
[-127.04464722 88.95517731]
[-128.33453369 73.93520355]
[-125.99173737 59.04309845]
[-120.15245056 45.14467621]
[-111.15617371 33.04796600]
[-99.52593231 23.45625687]
[-85.93788910 16.92719841]
[-71.18204498 13.84038258]
[-56.11627579 14.37527180]
[-41.61649323 18.50076866]
[-28.52569008 25.97702026]
[-17.60495186 36.36936951]
[-9.48919678 49.07361984]
[-4.65026093 63.35115814]
[-3.36947536 78.37191010]
[11.44828320 80.70301819]
[26.26604080 83.03411865]
[41.08379745 85.36522675]
[55.94684601 87.38755798]
[70.84874725 89.10025024]
[85.75064850 90.81293488]
[99.92720795 85.91138458]
[104.29345703 70.70459747]
[118.78225708 67.25147247]
[129.44387817 56.70018005]
[120.01667023 45.01605988]
[111.81990051 32.43814087]
[104.93769836 19.09549141]
[99.44067383 5.12503099]
[95.38524628 -9.32988167]
[92.81302643 -24.12091637]
[91.75040436 -39.09629059]
[92.20829010 -54.10233307]
[94.18199158 -68.98506165]
[97.65123749 -83.59175110]
[102.58044434 -97.77250671]
[108.91902161 -111.38182068]
[116.60192871 -124.28003693]
[125.55032349 -136.33479309]
[135.67237854 -147.42239380]
[146.86424255 -157.42906189]
[159.01104736 -166.25210571]
[171.98814392 -173.80099487]
[185.66239929 -179.99827576]
[199.89344788 -184.78031921]
[214.53529358 -188.09808350]
[229.43766785 -189.91751099]
[244.44764709 -190.21994019]
[259.41119385 -189.00224304]
[274.17480469 -186.27694702]
[288.58694458 -182.07200623]
[302.49969482 -176.43057251]
[315.77035522 -169.41052246]
[328.26269531 -161.08392334]
[339.84854126 -151.53617859]
[350.40899658 -140.86529541]
[359.83569336 -129.18075562]
[368.03189087 -116.60247803]
[374.91351318 -103.25952911]
[380.40991211 -89.28882599]
[384.46472168 -74.83373260]
[387.03628540 -60.04258728]
[388.09823608 -45.06716537]
[387.63970947 -30.06114197]
[385.66534424 -15.17850208]
[382.19546509 -0.57196742]
[377.26562500 13.60857582]
[370.92645264 27.21761131]
[363.24298096 40.11548996]
[354.29403687 52.16985321]
[344.17150879 63.25701141]
[332.97918701 73.26318359]
[320.83200073 82.08569336]
[307.85458374 89.63401794]
[294.18005371 95.83068085]
[279.94879150 100.61210632]
[265.30679321 103.92922211]
[250.40434265 105.74799347]
[235.39434814 106.04975891]
[220.43084717 104.83141327]
[205.66737366 102.10546875]
[191.25541687 97.89989471]
[177.34289551 92.25784302]
[164.07257080 85.23721313]
[151.58059692 76.91004944]
[139.99517822 67.36180115]
[129.33354187 77.91309357]
[125.72988129 92.36518097]
[110.47850037 96.57301331]
[113.58518219 102.04667664]
[113.43643951 109.49426270]
[109.02069092 116.91060638]
[109.02069092 131.91059875]
[109.02069092 146.91059875]
[109.02069092 161.91059875]
[109.02069092 176.91059875]
[109.02069092 191.91059875]
[109.02069092 206.91059875]
[109.02069092 221.91059875]
[109.02069092 236.91059875]
[109.02069092 251.91059875]
[123.56057739 255.97192383]
[136.46495056 263.80642700]
[146.77624512 274.83276367]
[153.72926331 288.23269653]
[156.80805969 303.01184082]
[155.78416443 318.07351685]
[150.73356628 332.30004883]
[142.03103638 344.63571167]
[130.32238770 354.16513062]
[116.47644043 360.18115234]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 60]
[22 59]
[23 58]
[26 57]
[27 56]
[28 55]
[29 54]
[61 128]
[63 126]
[64 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
