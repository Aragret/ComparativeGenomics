%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUCCUUAGGGGGGGGGGCACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACxxxxxxxxxxUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACCCCCCCCCCCUUCUCCAUA\
) } def
/len { sequence length } bind def

/coor [
[93.15798950 365.37478638]
[79.31204987 359.35876465]
[67.60339355 349.82934570]
[58.90086746 337.49368286]
[53.85026550 323.26715088]
[52.82637405 308.20547485]
[55.90517426 293.42633057]
[62.85819626 280.02639771]
[73.16947937 269.00006104]
[86.07386017 261.16555786]
[100.61374664 257.10424805]
[100.61374664 242.10423279]
[100.61374664 227.10423279]
[100.61374664 212.10423279]
[100.61374664 197.10423279]
[100.61374664 182.10423279]
[100.61374664 167.10423279]
[100.61374664 152.10423279]
[100.61374664 137.10423279]
[100.61374664 122.10423279]
[87.91881561 114.11431885]
[74.39463043 120.60248566]
[60.87043762 127.09064484]
[47.34624863 133.57881165]
[33.82205582 140.06697083]
[22.15660477 152.36956787]
[7.10549259 144.56568909]
[10.43782043 127.94245911]
[27.33389282 126.54278564]
[40.85808182 120.05462646]
[54.38227081 113.56645966]
[67.90646362 107.07829285]
[81.43064880 100.59012604]
[90.69560242 88.79348755]
[93.79392242 74.11695862]
[96.89224243 59.44043732]
[82.70027161 50.86483383]
[72.29920197 37.98368073]
[66.92226410 22.35199356]
[67.19752502 5.84923410]
[73.07456207 -9.54669094]
[83.83261108 -21.99646950]
[98.16889954 -30.01912689]
[114.35643005 -32.66818619]
[116.84154510 -47.46089554]
[119.32666779 -62.25360107]
[121.81178284 -77.04631042]
[124.29690552 -91.83901215]
[126.78202057 -106.63172150]
[129.26713562 -121.42443085]
[131.75225830 -136.21713257]
[121.74153900 -125.04639435]
[109.77742767 -115.99874115]
[96.30249786 -109.40886688]
[81.81523132 -105.52055359]
[66.85153198 -104.47763062]
[51.96494293 -106.31867981]
[37.70615005 -110.97559357]
[24.60262108 -118.27610779]
[13.13908291 -127.95015717]
[3.73959541 -139.63987732]
[-3.24813223 -152.91285706]
[-7.56560898 -167.27806091]
[-9.05312252 -182.20413208]
[-7.65564489 -197.13888550]
[-3.42487359 -211.52987671]
[3.48268700 -224.84474182]
[12.81151009 -236.59092712]
[24.21650314 -246.33393860]
[37.27576828 -253.71333313]
[51.50621796 -258.45614624]
[66.38143921 -260.38693237]
[81.35115051 -259.43426514]
[95.86161041 -255.63339233]
[109.37602234 -249.12489319]
[121.39447784 -240.14955139]
[131.47238159 -229.03938293]
[139.23692322 -216.20536804]
[144.40087891 -202.12228394]
[146.77323914 -187.31106567]
[146.26622009 -172.31964111]
[142.90068054 -157.70880127]
[153.56230164 -168.26008606]
[164.22392273 -178.81138611]
[174.88555908 -189.36267090]
[168.07150269 -202.86911011]
[165.76669312 -217.82046509]
[168.19689941 -232.75195312]
[175.12405396 -246.20072937]
[185.86950684 -256.84924316]
[199.38050842 -263.65423584]
[214.33340454 -265.94903564]
[229.26325989 -263.50881958]
[242.70739746 -256.57263184]
[253.34869385 -245.82006836]
[260.14462280 -232.30450439]
[262.42941284 -217.35008240]
[259.97918701 -202.42185974]
[253.03401184 -188.98237610]
[242.27430725 -178.34828186]
[228.75419617 -171.56140137]
[213.79824829 -169.28665161]
[198.87167358 -171.74687195]
[185.43684387 -178.70104980]
[174.77522278 -168.14974976]
[164.11358643 -157.59846497]
[153.45196533 -147.04718018]
[146.54496765 -133.73202515]
[144.05984497 -118.93930817]
[141.57472229 -104.14660645]
[139.08961487 -89.35389709]
[136.60449219 -74.56118774]
[134.11936951 -59.76848221]
[131.63424683 -44.97577667]
[129.14913940 -30.18306732]
[141.24908447 -24.11910629]
[151.15260315 -14.86938667]
[158.04470825 -3.18206096]
[161.35450745 9.99359417]
[160.80256653 23.58427811]
[156.42437744 36.48009491]
[148.56837463 47.62519455]
[137.86805725 56.10422897]
[125.19107819 61.21751022]
[111.56877136 62.53875732]
[108.47045135 77.21528625]
[105.37212372 91.89180756]
[112.33730316 93.25558472]
[118.39246368 99.72559357]
[120.25949097 110.30247498]
[115.61374664 122.10423279]
[115.61374664 137.10423279]
[115.61374664 152.10423279]
[115.61374664 167.10423279]
[115.61374664 182.10423279]
[115.61374664 197.10423279]
[115.61374664 212.10423279]
[115.61374664 227.10423279]
[115.61374664 242.10423279]
[115.61374664 257.10424805]
[130.15364075 261.16555786]
[143.05801392 269.00006104]
[153.36929321 280.02639771]
[160.32232666 293.42633057]
[163.40112305 308.20547485]
[162.37722778 323.26715088]
[157.32662964 337.49368286]
[148.62409973 349.82934570]
[136.91543579 359.35876465]
[123.06950378 365.37478638]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[34 127]
[35 126]
[36 125]
[44 115]
[45 114]
[46 113]
[47 112]
[48 111]
[49 110]
[50 109]
[51 108]
[82 107]
[83 106]
[84 105]
[85 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
