%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCUUACAGGGGGGGGGGCCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAxxxxxxxxxxCUUAUCCAGUGAACCACUAUCACGAAAAAAACUCUACCUCUCUAUACUAACCCCCCCCCCUCUCCCUACA\
) } def
/len { sequence length } bind def

/coor [
[104.32863617 415.76956177]
[90.48269653 409.75354004]
[78.77404022 400.22412109]
[70.07151031 387.88845825]
[65.02091217 373.66192627]
[63.99702072 358.60025024]
[67.07582092 343.82110596]
[74.02883911 330.42117310]
[84.34012604 319.39483643]
[97.24450684 311.56033325]
[111.78439331 307.49902344]
[111.78439331 292.49902344]
[111.78439331 277.49902344]
[111.78439331 262.49902344]
[111.78439331 247.49900818]
[111.78439331 232.49900818]
[111.78439331 217.49900818]
[111.78439331 202.49900818]
[111.78439331 187.49900818]
[111.78439331 172.49900818]
[103.43583679 163.68942261]
[103.35140991 151.15100098]
[112.12448883 141.63854980]
[112.43654633 126.64179230]
[112.74860382 111.64503479]
[100.37013245 115.83066559]
[89.83097076 110.20047760]
[75.25826263 113.75523376]
[60.68556213 117.30999756]
[51.15776825 130.21739197]
[35.12115479 130.67187500]
[24.87763786 118.32481384]
[28.28516579 102.64781952]
[42.72977448 95.66693115]
[57.13079834 102.73729706]
[71.70350647 99.18253326]
[86.27620697 95.62776947]
[99.05292511 84.19335175]
[115.70827484 92.83174896]
[120.01586151 78.46356964]
[124.32344818 64.09538269]
[116.59707642 53.01563263]
[116.68249512 39.70320892]
[124.32336426 29.04058838]
[136.53349304 24.80862999]
[141.13906860 10.53316975]
[145.74462891 -3.74229097]
[150.35018921 -18.01775169]
[154.95574951 -32.29321289]
[141.73097229 -42.29613113]
[132.72369385 -56.18768692]
[128.99900818 -72.29320526]
[130.98640442 -88.67816925]
[138.43035889 -103.38059998]
[150.42301941 -114.64598083]
[165.51487732 -121.13660431]
[181.88996887 -122.09045410]
[185.89772034 -136.54513550]
[189.90545654 -150.99983215]
[193.91319275 -165.45451355]
[182.87821960 -155.29434204]
[170.00236511 -147.59938049]
[155.82734680 -142.69337463]
[140.94952393 -140.78271484]
[125.99484253 -141.94779968]
[111.59246063 -146.13961792]
[98.34830475 -153.18179321]
[86.81957245 -162.77806091]
[77.49130249 -174.52470398]
[70.75595093 -187.92750549]
[66.89688110 -202.42259216]
[66.07644653 -217.40013123]
[68.32917023 -232.23001099]
[73.56027222 -246.28829956]
[81.54966736 -258.98355103]
[91.96124268 -269.78167725]
[104.35695648 -278.22833252]
[118.21530914 -283.96820068]
[132.95326233 -286.75976562]
[147.95075989 -286.48562622]
[162.57682800 -283.15725708]
[176.21614075 -276.91473389]
[188.29486084 -268.02066040]
[198.30484009 -256.84927368]
[205.82492065 -243.87048340]
[210.53871155 -229.63040161]
[212.24792480 -214.72810364]
[210.88064575 -199.79054260]
[206.49208069 -185.44070435]
[217.79107666 -195.30642700]
[229.09008789 -205.17214966]
[240.38908386 -215.03787231]
[239.90097046 -230.66784668]
[249.61434937 -242.92280579]
[264.94290161 -246.01635742]
[278.64889526 -238.48779297]
[284.26083374 -223.89190674]
[279.12890625 -209.12039185]
[265.67626953 -201.14793396]
[250.25480652 -203.73887634]
[238.95581055 -193.87315369]
[227.65679932 -184.00743103]
[216.35780334 -174.14170837]
[208.36788940 -161.44677734]
[204.36013794 -146.99208069]
[200.35240173 -132.53739929]
[196.34466553 -118.08271027]
[207.74951172 -110.79508972]
[216.63902283 -100.56700134]
[222.28027344 -88.22718811]
[224.20404053 -74.77907562]
[222.24383545 -61.31917191]
[216.55024719 -48.94769287]
[207.57940674 -38.67859650]
[196.05648804 -31.35650635]
[182.91708374 -27.58722878]
[169.23121643 -27.68764687]
[164.62565613 -13.41218758]
[160.02008057 0.86327350]
[155.41452026 15.13873386]
[150.80895996 29.41419411]
[159.11016846 44.00692368]
[154.22267151 60.42022324]
[138.69163513 68.40296936]
[134.38404846 82.77114868]
[130.07646179 97.13933563]
[127.74535370 111.95709229]
[127.43330383 126.95384979]
[127.12124634 141.95060730]
[136.37550354 157.83576965]
[126.78439331 172.49900818]
[126.78439331 187.49900818]
[126.78439331 202.49900818]
[126.78439331 217.49900818]
[126.78439331 232.49900818]
[126.78439331 247.49900818]
[126.78439331 262.49902344]
[126.78439331 277.49902344]
[126.78439331 292.49902344]
[126.78439331 307.49902344]
[141.32427979 311.56033325]
[154.22866821 319.39483643]
[164.53994751 330.42117310]
[171.49296570 343.82110596]
[174.57176208 358.60025024]
[173.54788208 373.66192627]
[168.49726868 387.88845825]
[159.79475403 400.22412109]
[148.08609009 409.75354004]
[134.24014282 415.76956177]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 129]
[24 128]
[25 127]
[27 37]
[28 36]
[29 35]
[39 126]
[40 125]
[41 124]
[45 121]
[46 120]
[47 119]
[48 118]
[49 117]
[57 107]
[58 106]
[59 105]
[60 104]
[89 103]
[90 102]
[91 101]
[92 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
