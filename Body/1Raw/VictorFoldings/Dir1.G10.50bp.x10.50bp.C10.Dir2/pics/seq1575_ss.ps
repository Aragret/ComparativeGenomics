%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCACCUCUUGGGGGGGGGGGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAAAxxxxxxxxxxACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCCCCCCCCCCCAACACCUCUU\
) } def
/len { sequence length } bind def

/coor [
[101.35474396 457.67489624]
[87.33280182 452.12188721]
[75.13284302 443.25555420]
[65.52176666 431.63323975]
[59.10374451 417.98553467]
[56.28220749 403.17034912]
[57.23452377 388.11898804]
[61.90082932 373.77755737]
[69.98779297 361.04760742]
[80.98706818 350.72933960]
[94.20722961 343.47134399]
[108.81723785 339.72991943]
[108.81723785 324.72991943]
[108.81723785 309.72991943]
[108.81723785 294.72991943]
[108.81723785 279.72991943]
[108.81723785 264.72991943]
[108.81723785 249.72991943]
[108.81723785 234.72991943]
[108.81723785 219.72991943]
[108.81723785 204.72991943]
[108.81723785 189.72991943]
[108.50926208 174.73307800]
[107.89344025 159.74572754]
[107.27761078 144.75837708]
[48.47805023 92.40697479]
[34.23135757 87.71317291]
[19.98466682 83.01937103]
[5.73797464 78.32556915]
[-8.50871754 73.63176727]
[0.08181942 85.92822266]
[2.09971452 100.79187012]
[-2.90157104 114.93354797]
[-13.81530571 125.22385406]
[-28.22639465 129.38565063]
[-42.94581223 126.49797058]
[-54.71631241 117.19982910]
[-60.93319702 103.54881287]
[-60.22074509 88.56574249]
[-52.73660660 75.56621552]
[-40.13694763 67.42689514]
[-25.20703125 65.94932556]
[-38.04068375 58.18418884]
[-53.85320663 57.66003418]
[-60.73695374 44.45157623]
[-73.57061005 36.68644333]
[-86.40425873 28.92130661]
[-99.23791504 21.15617180]
[-114.52263641 25.17522430]
[-128.13017273 17.13714600]
[-131.98739624 1.81078494]
[-123.80590057 -11.71099949]
[-108.43961334 -15.40597343]
[-95.00508881 -7.08197451]
[-91.47277832 8.32251740]
[-78.63912964 16.08765221]
[-65.80547333 23.85278893]
[-52.97182083 31.61792374]
[-38.07724762 31.58666801]
[-30.27555084 45.35053635]
[-17.44189644 53.11567307]
[-3.81491709 59.38507843]
[10.43177509 64.07888031]
[24.67846680 68.77268219]
[38.92515945 73.46647644]
[53.17185211 78.16027832]
[65.32518768 69.36843872]
[65.32518768 54.36843872]
[65.32518768 39.36843872]
[51.26799774 33.58363724]
[40.49812317 22.85618210]
[34.65789413 8.82193279]
[34.63789749 -6.37898922]
[40.44118500 -20.42855453]
[51.18279648 -31.18430710]
[65.22471619 -37.00607300]
[80.42565155 -37.00607300]
[94.46757507 -31.18430710]
[105.20918274 -20.42855453]
[111.01247406 -6.37898922]
[110.99247742 8.82193279]
[105.15224457 22.85618210]
[94.38237000 33.58363724]
[80.32518768 39.36843872]
[80.32518768 54.36843872]
[80.32518768 69.36843872]
[87.29054260 72.14940643]
[99.07266235 62.86599731]
[101.22126007 77.71134186]
[108.18661499 80.49230957]
[118.51751709 69.61699677]
[128.84841919 58.74168396]
[139.17932129 47.86637115]
[145.70443726 32.21839142]
[162.54722595 34.15670776]
[165.34719849 50.87784576]
[150.05464172 58.19727325]
[139.72373962 69.07258606]
[129.39283752 79.94789886]
[119.06192780 90.82321167]
[122.19663239 97.63670349]
[131.60073853 118.07717133]
[146.58097839 117.30751038]
[161.56121826 116.53784943]
[176.54145813 115.76819611]
[189.92645264 107.33298492]
[203.03396606 114.40705109]
[218.01420593 113.63739014]
[232.99444580 112.86772919]
[247.97468567 112.09806824]
[258.37445068 100.19763947]
[274.14846802 99.21987915]
[285.93829346 109.74488831]
[286.74920654 125.52835846]
[276.10015869 137.20623779]
[260.30899048 137.85025024]
[248.74435425 127.07831573]
[233.76411438 127.84796906]
[218.78385925 128.61763000]
[203.80361938 129.38729858]
[191.49012756 137.76744080]
[177.31112671 130.74842834]
[162.33088684 131.51809692]
[147.35064697 132.28775024]
[132.37040710 133.05741882]
[122.26496887 144.14254761]
[122.88079071 159.12989807]
[123.49662018 174.11724854]
[126.75497437 179.98458862]
[126.54545593 185.74166870]
[123.81723785 189.72991943]
[123.81723785 204.72991943]
[123.81723785 219.72991943]
[123.81723785 234.72991943]
[123.81723785 249.72991943]
[123.81723785 264.72991943]
[123.81723785 279.72991943]
[123.81723785 294.72991943]
[123.81723785 309.72991943]
[123.81723785 324.72991943]
[123.81723785 339.72991943]
[138.42726135 343.47134399]
[151.64741516 350.72933960]
[162.64668274 361.04760742]
[170.73365784 373.77755737]
[175.39996338 388.11898804]
[176.35227966 403.17034912]
[173.53073120 417.98553467]
[167.11271667 431.63323975]
[157.50164795 443.25555420]
[145.30168152 452.12188721]
[131.27973938 457.67489624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 128]
[24 127]
[25 126]
[26 66]
[27 65]
[28 64]
[29 63]
[30 62]
[42 61]
[43 60]
[45 58]
[46 57]
[47 56]
[48 55]
[67 86]
[68 85]
[69 84]
[90 100]
[91 99]
[92 98]
[93 97]
[102 125]
[103 124]
[104 123]
[105 122]
[107 120]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
