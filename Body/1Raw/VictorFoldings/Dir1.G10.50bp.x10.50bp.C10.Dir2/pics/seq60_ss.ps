%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUUUGGUAGGGGGGGGGGUUUUCGUCUGGGGGGUAUGCACGCGAUAGCAUUGCGAGACGCUGGAGCCGxxxxxxxxxxCACUUUACAUCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCUGAUACUGCCCCCCCCCCGCAUUUUGUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 398.36636353]
[71.19830322 392.35034180]
[59.48964310 382.82092285]
[50.78712082 370.48526001]
[45.73651886 356.25872803]
[44.71262741 341.19705200]
[47.79142761 326.41787720]
[54.74444962 313.01794434]
[65.05573273 301.99163818]
[77.96011353 294.15710449]
[92.50000000 290.09579468]
[92.50000000 275.09579468]
[92.50000000 260.09579468]
[92.50000000 245.09580994]
[92.50000000 230.09580994]
[92.50000000 215.09580994]
[92.50000000 200.09580994]
[92.50000000 185.09580994]
[92.50000000 170.09580994]
[92.50000000 155.09580994]
[92.50000000 140.09580994]
[79.03579712 134.99179077]
[68.18387604 125.52758789]
[61.29644012 112.88246918]
[59.23172379 98.63211823]
[44.58822250 95.38129425]
[29.94471931 92.13047028]
[15.30121803 88.87963867]
[0.65771681 85.62881470]
[-14.49131393 90.19142914]
[-25.23926163 79.87974548]
[-40.38829041 84.44235992]
[-51.13623810 74.13066864]
[-56.23620987 75.74618530]
[-60.95915222 75.25002289]
[-64.55123901 73.15274811]
[-66.57823944 70.19322205]
[-80.99045563 66.03533173]
[-95.40267181 61.87744904]
[-109.81488800 57.71956253]
[-121.97475433 67.35891724]
[-137.47953796 67.97629547]
[-150.36734009 59.33429337]
[-155.68254089 44.75594330]
[-151.38131714 29.84691238]
[-139.11759949 20.34003258]
[-123.60702515 19.89089012]
[-110.81372833 28.67218971]
[-105.65699768 43.30734634]
[-91.24478149 47.46523285]
[-76.83256531 51.62311935]
[-62.42034912 55.78100586]
[-47.88541412 59.48716736]
[-33.78378296 54.69203186]
[-21.98843575 65.23624420]
[-7.88680601 60.44110489]
[3.90854263 70.98531342]
[18.55204391 74.23613739]
[33.19554520 77.48696899]
[47.83904648 80.73779297]
[62.48254776 83.98861694]
[76.16104889 66.89972687]
[96.70404053 59.34215546]
[98.26161957 44.42324448]
[99.81920624 29.50433159]
[101.37678528 14.58541965]
[87.23426056 9.34712505]
[74.83922577 0.75561959]
[64.97084808 -10.64902592]
[58.24945831 -24.14990616]
[55.09757233 -38.89834595]
[55.71332169 -53.96724319]
[60.05799484 -68.40935516]
[67.85848999 -81.31684113]
[78.62445068 -91.87831879]
[91.67912292 -99.42989349]
[106.20188141 -103.49686432]
[121.27981567 -103.82357788]
[135.96511841 -100.38948822]
[149.33464050 -93.41048431]
[160.54797363 -83.32524872]
[168.90023804 -70.76776886]
[173.86640930 -56.52740097]
[175.13430786 -41.49932098]
[172.62422180 -26.62819672]
[166.49394226 -12.84884357]
[157.12884521 -1.02744436]
[145.11758423 8.09290028]
[131.21524048 13.93887615]
[116.29570007 16.14300156]
[114.73811340 31.06191254]
[113.18053436 45.98082352]
[111.62295532 60.89973831]
[121.14591980 65.11771393]
[129.29029846 71.60982513]
[135.52511597 79.95280457]
[139.44389343 89.60274506]
[154.40414429 88.51143646]
[169.36439514 87.42012024]
[184.32464600 86.32881165]
[187.94021606 83.66627502]
[191.82708740 82.45661163]
[195.48233032 82.60174561]
[198.48976135 83.84647369]
[200.56468201 85.82183075]
[215.56387329 85.97786713]
[230.56306458 86.13390350]
[241.80891418 75.35575104]
[257.01800537 75.72766113]
[267.22399902 86.51528931]
[282.22320557 86.67132568]
[296.23638916 78.15293121]
[310.48818970 86.26575470]
[310.31759644 102.66401672]
[295.90008545 110.47858429]
[282.06716919 101.67050934]
[267.06796265 101.51447296]
[256.63973999 112.08744049]
[241.42620850 112.14286804]
[230.40702820 101.13309479]
[215.40783691 100.97705841]
[200.40864563 100.82102203]
[185.41595459 101.28906250]
[170.45570374 102.38037109]
[155.49545288 103.47167969]
[140.53520203 104.56299591]
[137.06858826 117.02479553]
[129.87457275 127.77468872]
[119.67656708 135.73171997]
[107.50000000 140.09580994]
[107.50000000 155.09580994]
[107.50000000 170.09580994]
[107.50000000 185.09580994]
[107.50000000 200.09580994]
[107.50000000 215.09580994]
[107.50000000 230.09580994]
[107.50000000 245.09580994]
[107.50000000 260.09579468]
[107.50000000 275.09579468]
[107.50000000 290.09579468]
[122.03988647 294.15710449]
[134.94427490 301.99163818]
[145.25555420 313.01794434]
[152.20857239 326.41787720]
[155.28736877 341.19705200]
[154.26348877 356.25872803]
[149.21287537 370.48526001]
[140.51036072 382.82092285]
[128.80169678 392.35034180]
[114.95575714 398.36636353]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 61]
[26 60]
[27 59]
[28 58]
[29 57]
[31 55]
[33 53]
[37 52]
[38 51]
[39 50]
[40 49]
[63 93]
[64 92]
[65 91]
[66 90]
[97 126]
[98 125]
[99 124]
[100 123]
[105 122]
[106 121]
[107 120]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
