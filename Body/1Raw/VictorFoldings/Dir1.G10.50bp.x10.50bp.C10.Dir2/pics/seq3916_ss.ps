%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUCACAACAGGGGGGGGGGCAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAAUAUGxxxxxxxxxxCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUCCCCCCCCCCUCAUCACAACA\
) } def
/len { sequence length } bind def

/coor [
[5.59125137 512.97143555]
[-7.32790565 505.21307373]
[-18.10920334 494.68405151]
[-26.17121887 481.95217896]
[-31.07917786 467.70407104]
[-32.56840134 452.70809937]
[-30.55857849 437.77301025]
[-25.15809441 423.70419312]
[-16.65818977 411.26037598]
[-5.51725626 401.11264038]
[7.66389132 393.80825806]
[22.17440987 389.74111938]
[21.55858421 374.75378418]
[20.94275856 359.76641846]
[20.32693291 344.77908325]
[19.71110725 329.79171753]
[19.09528351 314.80435181]
[18.47945786 299.81701660]
[17.86363220 284.82965088]
[6.08149481 275.54626465]
[-8.63402748 278.45373535]
[-23.34955025 281.36120605]
[-38.06507111 284.26867676]
[-52.44955444 288.52154541]
[-66.38027191 294.08346558]
[-80.31098938 299.64541626]
[-87.93587494 313.76068115]
[-103.75054169 316.45809937]
[-115.62331390 305.66842651]
[-114.44642639 289.66860962]
[-101.12268829 280.73229980]
[-85.87292480 285.71469116]
[-71.94220734 280.15277100]
[-58.01148987 274.59082031]
[-72.21358490 269.76376343]
[-81.66543579 258.11633301]
[-83.46501160 243.22467041]
[-77.05979156 229.66101074]
[-64.41638184 221.58981323]
[-49.41671753 221.48921204]
[-36.66618347 229.39009094]
[-30.07960510 242.86662292]
[-31.67927361 257.78106689]
[-40.97254562 269.55316162]
[-26.25702286 266.64569092]
[-11.54150009 263.73822021]
[3.17402244 260.83074951]
[2.76136780 246.41500854]
[8.32359982 233.55667114]
[18.49704361 224.53404236]
[31.13882446 220.78375244]
[43.77219009 222.67863464]
[51.66867065 209.92538452]
[59.56515503 197.17211914]
[59.00945663 194.36459351]
[59.56746674 191.16180420]
[61.39781952 188.00007629]
[64.49352264 185.36566162]
[68.66938782 183.73414612]
[77.58554077 171.67170715]
[86.50169373 159.60928345]
[95.41783905 147.54684448]
[104.33399200 135.48442078]
[76.65451813 125.16780090]
[67.12706757 98.47212219]
[80.81936646 75.02733612]
[81.74278259 60.05578613]
[67.48049164 55.10708618]
[55.08288574 46.49303055]
[45.46995163 34.85284042]
[39.35502625 21.05029297]
[37.19188690 6.10963106]
[39.14104462 -8.86045074]
[45.05786514 -22.74907303]
[54.50328064 -34.52560806]
[66.77637482 -43.31615448]
[80.96640015 -48.46840286]
[96.02037048 -49.60001373]
[110.82118225 -46.62702179]
[124.27050781 -39.77003860]
[135.37031555 -29.53789902]
[143.29695129 -16.68989372]
[147.46217346 -2.17943287]
[147.55691528 12.91671276]
[143.57412720 27.47830772]
[135.80938721 40.42478561]
[124.83886719 50.79543304]
[111.47666168 57.82067490]
[96.71433258 60.97919846]
[95.79091644 75.95074463]
[109.14901733 82.77432251]
[120.73806763 73.25098419]
[132.32711792 63.72764969]
[143.91616821 54.20431137]
[155.50521851 44.68097305]
[167.09425354 35.15763474]
[175.49287415 20.43012047]
[191.96978760 24.42352676]
[192.69372559 41.36201096]
[176.61759949 46.74668503]
[165.02854919 56.27002335]
[153.43949890 65.79335785]
[141.85044861 75.31669617]
[130.26139832 84.84003448]
[118.67235565 94.36337280]
[121.30973053 101.38436127]
[126.58447266 115.42633820]
[129.22183228 122.44732666]
[144.21472168 121.98539734]
[159.20761108 121.52347565]
[168.74282837 109.12937164]
[184.02503967 105.81456757]
[197.83845520 113.14419556]
[203.66081238 127.65744019]
[198.74295044 142.50158691]
[185.40695190 150.66769409]
[169.94966125 148.29995728]
[159.66954041 136.51635742]
[144.67665100 136.97828674]
[129.68376160 137.44021606]
[116.39642334 144.40057373]
[107.48027039 156.46299744]
[98.56412506 168.52543640]
[89.64797211 180.58786011]
[80.73181915 192.65029907]
[72.31841278 205.06860352]
[64.42192841 217.82186890]
[56.52544403 230.57511902]
[65.25443268 245.81413269]
[63.74860001 264.01925659]
[51.74433899 278.71151733]
[32.85098648 284.21383667]
[33.46681213 299.20117188]
[34.08263779 314.18853760]
[34.69845963 329.17590332]
[35.31428528 344.16323853]
[35.93011093 359.15060425]
[36.54593658 374.13793945]
[37.16176224 389.12530518]
[51.95703888 391.98828125]
[65.69300842 398.18664551]
[77.62891388 407.38613892]
[87.12106323 419.09066772]
[93.65756226 432.66900635]
[96.88589478 447.38885498]
[96.63197327 462.45645142]
[92.90948486 477.05917358]
[85.91918182 490.40954590]
[76.03804016 501.78759766]
[63.79893494 510.57968140]
[49.86190796 516.31170654]
[34.97856903 518.67456055]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 47]
[21 46]
[22 45]
[23 44]
[24 34]
[25 33]
[26 32]
[52 128]
[53 127]
[54 126]
[59 125]
[60 124]
[61 123]
[62 122]
[63 121]
[66 90]
[67 89]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
[96 100]
[108 120]
[109 119]
[110 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
