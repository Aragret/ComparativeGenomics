%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAACACACAAGGGGGGGGGGUAGCUAAGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAAxxxxxxxxxxUCAAUCACACUACUCCCCAUAUCUAACAACGUAAAAAUAAAAUGACAGUUCCCCCCCCCCUGAACAUACAA\
) } def
/len { sequence length } bind def

/coor [
[80.31704712 320.39559937]
[68.57145691 310.96929932]
[59.12720108 299.23812866]
[52.42600250 285.75079346]
[48.78129196 271.13812256]
[48.36353683 256.08358765]
[51.19227600 241.29127502]
[57.13520432 227.45307922]
[65.91436768 215.21623230]
[77.11913300 205.15306091]
[90.22544861 197.73426819]
[104.62030029 193.30680847]
[103.38968658 178.35737610]
[102.15907288 163.40794373]
[100.92845917 148.45851135]
[99.69784546 133.50907898]
[98.46723938 118.55963898]
[86.87818909 109.03630066]
[71.97373962 110.72669983]
[57.06929398 112.41709900]
[42.16484451 114.10749054]
[27.26039696 115.79788971]
[12.35595036 117.48828888]
[-0.48437202 126.73148346]
[-14.00251007 120.47775269]
[-28.90695763 122.16814423]
[-43.81140518 123.85854340]
[-58.71585083 125.54894257]
[-67.37927246 135.15876770]
[-79.87025452 136.22967529]
[-89.41078186 128.73030090]
[-104.34679413 130.11433411]
[-119.28280640 131.49835205]
[-134.21882629 132.88238525]
[-149.43249512 140.36437988]
[-160.83366394 127.81648254]
[-151.93229675 113.38727570]
[-135.60284424 117.94637299]
[-120.66683197 116.56234741]
[-105.73081970 115.17832184]
[-90.79480743 113.79429626]
[-77.07720947 102.89144897]
[-60.40625000 110.64449310]
[-45.50180435 108.95410156]
[-30.59735489 107.26370239]
[-15.69290733 105.57330322]
[-3.91865134 96.45101166]
[10.66555214 102.58383942]
[25.56999969 100.89344025]
[40.47444916 99.20304871]
[55.37889481 97.51264954]
[70.28334045 95.82225037]
[85.18778992 94.13185120]
[98.17816925 86.63185120]
[107.09432220 74.56941986]
[116.01047516 62.50699234]
[104.75187683 52.58099365]
[94.38825226 41.72388840]
[84.99632263 30.01606369]
[76.64563751 17.54419708]
[69.39801788 4.40062761]
[63.30711746 -9.31733131]
[58.41803741 -23.50811386]
[54.76697540 -38.06665802]
[52.38095856 -52.88517380]
[51.27766037 -67.85394287]
[51.46524429 -82.86215210]
[52.94232178 -97.79867554]
[55.69795609 -112.55292511]
[59.71174622 -127.01567078]
[64.95397949 -141.07981873]
[71.38583374 -154.64126587]
[78.95970154 -167.59957886]
[87.61949158 -179.85884094]
[97.30110168 -191.32827759]
[107.93284607 -201.92295837]
[119.43601227 -211.56446838]
[131.72543335 -220.18139648]
[144.71011353 -227.70997620]
[158.29393005 -234.09443665]
[172.37631226 -239.28753662]
[186.85298157 -243.25079346]
[201.61676025 -245.95489502]
[216.55834961 -247.37982178]
[231.56712341 -247.51499939]
[246.53195190 -246.35943604]
[261.34204102 -243.92169189]
[275.88775635 -240.21981812]
[290.06137085 -235.28121948]
[303.75799561 -229.14245605]
[316.87615967 -221.84898376]
[329.31878662 -213.45480347]
[340.99377441 -204.02206421]
[351.81460571 -193.62059021]
[361.70123291 -182.32740784]
[370.58044434 -170.22610474]
[378.38647461 -157.40631104]
[385.06155396 -143.96292114]
[390.55624390 -129.99546814]
[394.82989502 -115.60737610]
[397.85083008 -100.90515137]
[399.59671021 -85.99765778]
[400.05459595 -70.99526215]
[399.22109985 -56.00904465]
[397.10235596 -41.14995956]
[393.71411133 -26.52801323]
[389.08145142 -12.25147057]
[383.23861694 1.57397079]
[376.22891235 14.84595108]
[368.10421753 27.46620560]
[358.92468262 39.34130096]
[348.75830078 50.38330841]
[337.68032837 60.51048660]
[325.77276611 69.64784241]
[313.12377930 77.72773743]
[299.82702637 84.69034576]
[285.98095703 90.48411560]
[271.68807983 95.06615448]
[257.05422974 98.40253448]
[242.18771362 100.46855927]
[227.19862366 101.24892426]
[212.19795227 100.73786163]
[197.29675293 98.93914795]
[182.60533142 95.86609650]
[168.23246765 91.54147339]
[154.28459167 85.99728394]
[140.86494446 79.27458191]
[128.07290649 71.42314148]
[119.15675354 83.48557281]
[110.24060059 95.54800415]
[116.02307129 104.10736847]
[113.41667175 117.32902527]
[114.64728546 132.27845764]
[115.87789917 147.22789001]
[117.10850525 162.17732239]
[118.33911896 177.12677002]
[119.56973267 192.07620239]
[134.49482727 194.09008789]
[148.63789368 199.26576233]
[161.33744812 207.36116028]
[171.99949646 217.99763489]
[180.12536621 230.67771912]
[185.33499146 244.80831909]
[187.38470459 259.72851562]
[186.17864990 274.74050903]
[181.77322388 289.14212036]
[174.37448120 302.25976562]
[164.32847595 313.47991943]
[152.10505676 322.27777100]
[138.27597046 328.24185181]
[123.48801422 331.09323120]
[108.43283844 330.69848633]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[23 48]
[25 46]
[26 45]
[27 44]
[28 43]
[31 41]
[32 40]
[33 39]
[34 38]
[54 130]
[55 129]
[56 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
