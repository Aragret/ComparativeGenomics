%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGACACAAAGGGGGGGGGGAUAGACUACGAAAGUGGCUUUAACAUAUCUGAACACACAAUAGCUAAGACxxxxxxxxxxUAACAUGGUAAGUGUACUGGAAAGUGCACUUGGACGAACCAGAGUGUAGCCCCCCCCCCCUUAACACAAA\
) } def
/len { sequence length } bind def

/coor [
[111.45767212 362.82528687]
[96.96797943 358.61682129]
[84.06175232 350.80072021]
[73.61894989 339.90988159]
[66.35158539 326.68685913]
[62.75516129 312.03326416]
[63.07488251 296.94818115]
[67.28895569 282.46011353]
[75.11004639 269.55688477]
[86.00492096 259.11828613]
[99.23072815 251.85603333]
[113.88571930 248.26527405]
[114.19777679 233.26852417]
[114.50983429 218.27175903]
[114.82189178 203.27500916]
[115.13394165 188.27825928]
[115.44599915 173.28150940]
[115.75805664 158.28474426]
[116.07011414 143.28799438]
[116.38217163 128.29124451]
[110.34217834 123.84506989]
[101.44962311 135.92491150]
[89.36993408 127.03215790]
[98.26218414 114.95272064]
[92.22219086 110.50654602]
[77.99541473 115.26036072]
[63.76863480 120.01417542]
[55.34674454 133.66888428]
[39.40340805 135.45484924]
[28.16899300 124.00201416]
[30.26157761 108.09601593]
[44.07591248 99.93858337]
[59.01482010 105.78739166]
[73.24160004 101.03357697]
[87.46837616 96.27976227]
[98.13000488 85.72846985]
[103.03155518 71.55191803]
[107.93310547 57.37535858]
[112.83465576 43.19879913]
[100.75617218 52.09318542]
[86.12890625 55.41632462]
[71.39302826 52.61384201]
[59.00680923 44.15325165]
[51.03654861 31.44597435]
[48.81186295 16.61186600]
[52.70388031 2.12559009]
[62.06332397 -9.59621811]
[75.32883453 -16.59809875]
[90.28741455 -17.71197891]
[104.44364929 -12.75203991]
[115.43595886 -2.54571033]
[121.43058014 11.20436478]
[121.42775726 26.20297432]
[129.93884277 13.85140228]
[138.44993591 1.49982929]
[146.96102905 -10.85174370]
[148.42013550 -26.60552216]
[162.01286316 -32.69545364]
[148.28393555 -26.65255165]
[133.58914185 -23.64203453]
[118.58997345 -23.79942131]
[103.96159363 -27.11762619]
[90.36249542 -33.44728088]
[78.40483856 -42.50345993]
[68.62688446 -53.87850571]
[61.46878815 -67.06037903]
[57.25276947 -81.45569611]
[56.16860580 -96.41646576]
[58.26509857 -111.26923370]
[63.44788361 -125.34540558]
[71.48365021 -138.01136780]
[82.01068115 -148.69694519]
[94.55509949 -156.92114258]
[108.55223083 -162.31376648]
[123.37200165 -164.63203430]
[138.34730530 -163.77163696]
[152.80403137 -159.77125549]
[166.09143066 -152.81100464]
[177.61137390 -143.20417786]
[186.84527588 -131.38323975]
[193.37750244 -117.88027191]
[196.91400146 -103.30312347]
[197.29557800 -88.30798340]
[194.50506592 -73.56983185]
[188.66806030 -59.75211334]
[180.04580688 -47.47510147]
[193.82818604 -53.39506531]
[207.61056519 -59.31502914]
[221.39295959 -65.23499298]
[234.77923584 -72.00310516]
[247.71730042 -79.59301758]
[260.65536499 -87.18292236]
[273.59341431 -94.77283478]
[286.53146362 -102.36273956]
[299.46951294 -109.95265198]
[312.40756226 -117.54255676]
[325.34564209 -125.13246155]
[338.28369141 -132.72236633]
[345.90969849 -147.24049377]
[362.30435181 -147.62478638]
[370.60220337 -133.47990417]
[362.26718140 -119.35691071]
[345.87359619 -119.78431702]
[332.93554688 -112.19441223]
[319.99749756 -104.60449982]
[307.05941772 -97.01459503]
[294.12136841 -89.42468262]
[281.18331909 -81.83477783]
[268.24526978 -74.24486542]
[255.30720520 -66.65496063]
[242.36914062 -59.06505203]
[256.42996216 -53.84076309]
[262.85284424 -40.28543854]
[257.99111938 -26.09516525]
[244.60510254 -19.32653236]
[230.29473877 -23.82245445]
[223.18478394 -37.03035736]
[227.31291199 -51.45261002]
[213.53053284 -45.53264618]
[199.74815369 -39.61268616]
[185.96577454 -33.69272232]
[174.36442566 -24.18436241]
[173.51408386 -9.31405067]
[159.31260681 -2.34065318]
[150.80151367 10.01091957]
[142.29042053 22.36249161]
[133.77932739 34.71406555]
[127.01121521 48.10034943]
[122.10966492 62.27690887]
[117.20811462 76.45346832]
[112.30656433 90.63002014]
[131.37892151 128.60330200]
[131.06686401 143.60005188]
[130.75480652 158.59680176]
[130.44274902 173.59355164]
[130.13069153 188.59031677]
[129.81864929 203.58706665]
[129.50659180 218.58381653]
[129.19453430 233.58056641]
[128.88247681 248.57733154]
[143.37541199 252.77461243]
[156.28767395 260.58074951]
[166.73887634 271.46353149]
[174.01644897 284.68090820]
[177.62419128 299.33172607]
[177.31611633 314.41708374]
[173.11323547 328.90838623]
[165.30210876 341.81762695]
[154.41529846 352.26464844]
[141.19511414 359.53710938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[25 35]
[26 34]
[27 33]
[36 131]
[37 130]
[38 129]
[39 128]
[53 127]
[54 126]
[55 125]
[56 124]
[58 122]
[86 121]
[87 120]
[88 119]
[89 118]
[90 111]
[91 110]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
