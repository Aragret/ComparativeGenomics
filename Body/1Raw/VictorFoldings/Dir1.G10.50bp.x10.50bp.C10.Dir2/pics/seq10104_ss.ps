%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACAACACCGGGGGGGGGGCUAGGCUCACUAAACAUUCUACUACUCACUCUCACUGCCCAAGAACUAUCxxxxxxxxxxUACUCCUCCUAGACCUAACCUGACUAGAAAAGCUAUUACCUAAAACAAUUCCCCCCCCCCUCACAGCACC\
) } def
/len { sequence length } bind def

/coor [
[72.13556671 364.11987305]
[58.28962708 358.10385132]
[46.58096695 348.57443237]
[37.87844086 336.23873901]
[32.82783890 322.01223755]
[31.80394745 306.95056152]
[34.88274765 292.17138672]
[41.83576965 278.77145386]
[52.14705276 267.74511719]
[65.05142975 259.91061401]
[79.59132385 255.84930420]
[79.59132385 240.84930420]
[79.59132385 225.84930420]
[79.59132385 210.84930420]
[79.59132385 195.84930420]
[79.59132385 180.84930420]
[79.59132385 165.84930420]
[79.59132385 150.84930420]
[79.59132385 135.84930420]
[79.59132385 120.84930420]
[79.33679199 98.88311005]
[92.44840240 90.40371704]
[90.27156830 75.56250763]
[88.09473419 60.72130585]
[85.91789246 45.88010025]
[70.95977783 47.07192993]
[55.95559692 47.27256012]
[40.97096252 46.48111343]
[26.07139587 44.70104980]
[11.32205105 41.94015121]
[-3.21257520 38.21049500]
[-17.46892738 33.52838516]
[-31.38466454 27.91430092]
[-44.89893723 21.39278793]
[-57.95264816 13.99236202]
[-70.48872375 5.74538612]
[-82.45233154 -3.31207776]
[-93.79117584 -13.14042377]
[-104.45566559 -23.69667435]
[-114.39916229 -34.93466949]
[-123.57818604 -46.80527115]
[-131.95260620 -59.25656509]
[-139.48580933 -72.23410797]
[-146.14483643 -85.68115234]
[-151.90057373 -99.53890228]
[-156.72787476 -113.74674988]
[-160.60559082 -128.24258423]
[-163.51679993 -142.96299744]
[-165.44876099 -157.84362793]
[-166.39302063 -172.81941223]
[-166.34544373 -187.82485962]
[-165.30625916 -202.79435730]
[-163.27999878 -217.66242981]
[-160.27552795 -232.36408997]
[-156.30596924 -246.83505249]
[-151.38870239 -261.01199341]
[-145.54521179 -274.83297729]
[-138.80107117 -288.23754883]
[-131.18574524 -301.16705322]
[-122.73255157 -313.56500244]
[-113.47844696 -325.37716675]
[-103.46389771 -336.55191040]
[-92.73270416 -347.04034424]
[-81.33177185 -356.79660034]
[-69.31097412 -365.77801514]
[-56.72287369 -373.94534302]
[-43.62250137 -381.26287842]
[-30.06715584 -387.69857788]
[-16.11610413 -393.22433472]
[-1.83035481 -397.81594849]
[12.72762585 -401.45336914]
[27.49417686 -404.12072754]
[42.40472794 -405.80627441]
[57.39408112 -406.50271606]
[72.39669037 -406.20693970]
[87.34694672 -404.92031860]
[102.17948914 -402.64840698]
[116.82944489 -399.40118408]
[131.23275757 -395.19281006]
[145.32644653 -390.04174805]
[159.04887390 -383.97045898]
[172.34005737 -377.00552368]
[185.14184570 -369.17736816]
[197.39828491 -360.52026367]
[209.05577087 -351.07205200]
[220.06332397 -340.87405396]
[230.37283325 -329.97082520]
[239.93917847 -318.41009521]
[248.72055054 -306.24240112]
[256.67855835 -293.52093506]
[263.77838135 -280.30133057]
[269.98901367 -266.64138794]
[275.28326416 -252.60083008]
[279.63796997 -238.24108887]
[283.03411865 -223.62493896]
[285.45684814 -208.81629944]
[286.89553833 -193.87989807]
[287.34396362 -178.88107300]
[286.80010986 -163.88542175]
[285.26635742 -148.95848083]
[282.74942017 -134.16555786]
[279.26034546 -119.57131195]
[274.81433105 -105.23957825]
[269.43081665 -91.23301697]
[263.13339233 -77.61287689]
[255.94956970 -64.43872070]
[247.91076660 -51.76815414]
[239.05212402 -39.65658188]
[229.41238403 -28.15696526]
[219.03370667 -17.31958961]
[207.96147156 -7.19184399]
[196.24409485 2.18198466]
[183.93280029 10.76090717]
[171.08145142 18.50741005]
[157.74621582 25.38761711]
[143.98541260 31.37144661]
[129.85923767 36.43273163]
[115.42942810 40.54933548]
[100.75910187 43.70326233]
[102.93593597 58.54446793]
[105.11277771 73.38567352]
[107.28961182 88.22688293]
[115.54190063 100.75283813]
[128.31925964 108.61026764]
[144.71818542 108.52400208]
[152.75759888 122.81734467]
[144.16726685 136.78652954]
[127.78416443 136.06126404]
[120.46183014 121.38762665]
[107.68447113 113.53019714]
[94.59132385 120.84930420]
[94.59132385 135.84930420]
[94.59132385 150.84930420]
[94.59132385 165.84930420]
[94.59132385 180.84930420]
[94.59132385 195.84930420]
[94.59132385 210.84930420]
[94.59132385 225.84930420]
[94.59132385 240.84930420]
[94.59132385 255.84930420]
[109.13121033 259.91061401]
[122.03559113 267.74511719]
[132.34687805 278.77145386]
[139.29989624 292.17138672]
[142.37869263 306.95056152]
[141.35479736 322.01223755]
[136.30419922 336.23873901]
[127.60167694 348.57443237]
[115.89301300 358.10385132]
[102.04707336 364.11987305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 122]
[23 121]
[24 120]
[25 119]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
