%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGGCAUCAGGGGGGGGGGACCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCAAAxxxxxxxxxxUCGGGCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGAAACCCCCCCCCCCAUCGGCAUUA\
) } def
/len { sequence length } bind def

/coor [
[71.86511993 379.12841797]
[58.64492416 371.85595703]
[47.75812149 361.40893555]
[39.94699097 348.49969482]
[35.74411011 334.00839233]
[35.43603516 318.92303467]
[39.04377747 304.27221680]
[46.32135010 291.05484009]
[56.77256012 280.17205811]
[69.68482208 272.36590576]
[84.17775726 268.16864014]
[83.86569977 253.17187500]
[83.55364227 238.17512512]
[83.24158478 223.17837524]
[82.92953491 208.18161011]
[82.61747742 193.18486023]
[82.30541992 178.18811035]
[81.99336243 163.19136047]
[81.68130493 148.19459534]
[81.36924744 133.19784546]
[74.45327759 146.50834656]
[67.53730774 159.81884766]
[65.46332550 174.67477417]
[57.15029907 187.16050720]
[44.24396133 194.80421448]
[29.29940033 196.09268188]
[15.27521706 190.77081299]
[4.94780016 179.89219666]
[0.36168343 165.61047363]
[2.42478752 150.75302124]
[10.72867680 138.26121521]
[23.62941742 130.60804749]
[38.57433319 129.30882263]
[52.22638702 123.09421539]
[65.87844086 116.87960815]
[50.91819382 115.78829956]
[35.95794678 114.69698334]
[21.44072342 122.32471466]
[7.72270107 113.33872986]
[8.91580582 96.98304749]
[23.79267311 90.08298492]
[37.04925537 99.73674011]
[52.00950623 100.82804871]
[66.96975708 101.91935730]
[70.11808777 87.18363953]
[79.36292267 75.61846161]
[92.56733704 69.52185822]
[106.84201813 69.96975708]
[106.84201813 54.96975708]
[106.84201813 39.96975708]
[106.84201813 24.96975708]
[106.84201813 9.96975708]
[106.84201813 -5.03024292]
[105.75070953 -19.99049187]
[103.57386780 -34.83169556]
[93.68468475 -43.17782211]
[92.20732117 -55.62918472]
[99.39405823 -65.40968323]
[97.52644348 -80.29296112]
[95.65883636 -95.17623901]
[93.79122162 -110.05952454]
[78.84259033 -112.10912323]
[64.93417358 -117.95877075]
[53.01427078 -127.20962524]
[43.89559937 -139.23095703]
[38.19989014 -153.20310974]
[36.31547928 -168.17346191]
[38.37084961 -183.12130737]
[44.22586823 -197.02746582]
[53.48132706 -208.94378662]
[65.50617218 -218.05781555]
[79.48052979 -223.74813843]
[94.45160675 -225.62677002]
[109.39865112 -223.56561279]
[123.30254364 -217.70523071]
[135.21530151 -208.44517517]
[144.32469177 -196.41680908]
[150.00961304 -182.44026184]
[151.88246155 -167.46846008]
[149.81553650 -152.52220154]
[143.94978333 -138.62057495]
[134.68513489 -126.71139526]
[122.65325165 -117.60665894]
[108.67449951 -111.92713165]
[110.54211426 -97.04385376]
[112.40972900 -82.16057587]
[114.27733612 -67.27729797]
[125.61949921 -53.92232132]
[118.41507721 -37.00853348]
[120.59191132 -22.16732788]
[129.86146545 -33.96035004]
[144.50587463 -37.20713043]
[157.89105225 -30.43684387]
[163.95341492 -16.71649742]
[159.94662476 -2.26154494]
[147.68582153 6.37978172]
[132.72525024 5.29287624]
[121.84201813 -5.03024292]
[121.84201813 9.96975708]
[121.84201813 24.96975708]
[121.84201813 39.96975708]
[121.84201813 54.96975708]
[121.84201813 69.96975708]
[131.94067383 81.06107330]
[146.87496948 82.46337891]
[161.80928040 83.86567688]
[176.76953125 84.95699310]
[191.74925232 85.73683929]
[206.72895813 86.51667786]
[221.70867920 87.29652405]
[236.68838501 88.07637024]
[248.26034546 77.31229401]
[264.05105591 77.96704865]
[274.69219971 89.65216064]
[273.87054443 105.43508148]
[262.07357788 115.95206451]
[246.30021667 114.96358490]
[235.90853882 103.05608368]
[220.92883301 102.27623749]
[205.94911194 101.49639130]
[190.96940613 100.71655273]
[175.98968506 99.93670654]
[171.86306763 102.45594788]
[166.09913635 102.36465454]
[160.40698242 98.79998779]
[145.47267151 97.39768219]
[130.53836060 95.99537659]
[128.09140015 114.38834381]
[115.31763458 128.46411133]
[96.36600494 132.88578796]
[96.67806244 147.88253784]
[96.99011993 162.87930298]
[97.30216980 177.87605286]
[97.61422729 192.87280273]
[97.92628479 207.86955261]
[98.23834229 222.86631775]
[98.55039978 237.86306763]
[98.86245728 252.85981750]
[99.17450714 267.85656738]
[113.82950592 271.44732666]
[127.05531311 278.70959473]
[137.95018005 289.14819336]
[145.77127075 302.05139160]
[149.98535156 316.53945923]
[150.30506897 331.62457275]
[146.70864868 346.27816772]
[139.44128418 359.50119019]
[128.99847412 370.39199829]
[116.09224701 378.20812988]
[101.60255432 382.41659546]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[35 44]
[36 43]
[37 42]
[48 103]
[49 102]
[50 101]
[51 100]
[52 99]
[53 98]
[54 90]
[55 89]
[58 87]
[59 86]
[60 85]
[61 84]
[104 127]
[105 126]
[106 125]
[107 122]
[108 121]
[109 120]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
