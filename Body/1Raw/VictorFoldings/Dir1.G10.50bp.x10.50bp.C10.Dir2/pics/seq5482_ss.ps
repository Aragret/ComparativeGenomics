%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCCACCCUGGGGGGGGGGCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGxxxxxxxxxxUAACCCUAACAAAAAAAACUCAUACCCCCAUUAUGUAAAAUCCAUUGUCGCCCCCCCCCCCAUCCACCUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 397.05456543]
[71.19830322 391.03854370]
[59.48964310 381.50912476]
[50.78712082 369.17346191]
[45.73651886 354.94692993]
[44.71262741 339.88525391]
[47.79142761 325.10610962]
[54.74444962 311.70617676]
[65.05573273 300.67984009]
[77.96011353 292.84533691]
[92.50000000 288.78402710]
[92.50000000 273.78402710]
[92.50000000 258.78402710]
[92.50000000 243.78401184]
[92.50000000 228.78401184]
[92.50000000 213.78401184]
[92.50000000 198.78401184]
[92.50000000 183.78401184]
[92.50000000 168.78401184]
[92.50000000 153.78401184]
[92.50000000 138.78401184]
[81.28732300 136.88787842]
[70.60408020 131.68769836]
[61.43546677 123.35121918]
[47.41875458 128.69273376]
[33.40204239 134.03424072]
[19.38532829 139.37576294]
[6.73759699 150.66607666]
[-7.61272955 141.63809204]
[-2.91012907 125.34938049]
[14.04381561 125.35903931]
[28.06052971 120.01753235]
[42.07723999 114.67601776]
[56.09395599 109.33450317]
[55.46997833 94.34748840]
[41.05776215 90.18959808]
[26.64554596 86.03171539]
[17.19087791 97.93455505]
[3.89845777 105.30883789]
[-11.20471859 107.03002930]
[-25.81552696 102.83565521]
[-37.70592499 93.36534119]
[-45.06270981 80.06323242]
[-46.76403046 64.95780182]
[-42.55044556 50.35252762]
[-33.06449509 38.47459793]
[-19.75271988 31.13531494]
[-4.64506817 29.45386696]
[9.95465469 33.68666077]
[21.82009506 43.18822861]
[29.14185905 56.50964737]
[30.80343246 71.61949921]
[45.21564865 75.77738190]
[59.62786484 79.93527222]
[83.91201019 60.88649368]
[112.76726532 62.61756516]
[120.22217560 49.60125351]
[127.67708588 36.58494568]
[135.13200378 23.56863594]
[142.58691406 10.55232620]
[150.04182434 -2.46398306]
[145.03051758 -15.00768566]
[148.13383484 -27.95362473]
[157.99446106 -36.60478210]
[170.84629822 -37.95634460]
[178.57038879 -50.81474686]
[186.29447937 -63.67314911]
[194.01855469 -76.53154755]
[201.74264526 -89.38995361]
[209.46673584 -102.24835205]
[198.02667236 -112.00411224]
[188.34849548 -123.50988770]
[180.69624329 -136.45179749]
[175.27865601 -150.47676086]
[172.24356079 -165.20217896]
[171.67372131 -180.22633362]
[173.58470154 -195.13934326]
[177.92436218 -209.53437805]
[184.57432556 -223.01873779]
[193.35316467 -235.22454834]
[204.02139282 -245.81883240]
[216.28797913 -254.51257324]
[229.81825256 -261.06857300]
[244.24313354 -265.30801392]
[259.16906738 -267.11523438]
[274.18890381 -266.44091797]
[288.89285278 -263.30346680]
[302.87979126 -257.78845215]
[315.76815796 -250.04638672]
[327.20635986 -240.28842163]
[336.88229370 -228.78077698]
[344.53207397 -215.83740234]
[349.94692993 -201.81138611]
[352.97921753 -187.08538818]
[353.54614258 -172.06112671]
[351.63229370 -157.14848328]
[347.28985596 -142.75427246]
[340.63729858 -129.27119446]
[331.85610962 -117.06707764]
[321.18585205 -106.47485352]
[308.91760254 -97.78348541]
[295.38604736 -91.23007965]
[280.96035767 -86.99341583]
[266.03405762 -85.18907928]
[251.01435852 -85.86629486]
[236.31101990 -89.00657654]
[222.32513428 -94.52426910]
[214.60104370 -81.66587067]
[206.87696838 -68.80746460]
[199.15287781 -55.94906235]
[191.42878723 -43.09066010]
[183.70471191 -30.23225784]
[188.47889709 -14.13675976]
[179.99522400 0.73977554]
[163.05813599 4.99092722]
[155.60322571 18.00723648]
[148.14831543 31.02354622]
[140.69340515 44.03985596]
[133.23849487 57.05616379]
[125.78357697 70.07247162]
[131.78590393 76.54566193]
[136.20082092 84.19017792]
[138.80783081 92.62424469]
[139.47676086 101.42666626]
[138.17417908 110.15783691]
[134.96514893 118.38171387]
[130.00994873 125.68759918]
[123.55601501 131.71063232]
[115.92567444 136.14999390]
[107.50000000 138.78401184]
[107.50000000 153.78401184]
[107.50000000 168.78401184]
[107.50000000 183.78401184]
[107.50000000 198.78401184]
[107.50000000 213.78401184]
[107.50000000 228.78401184]
[107.50000000 243.78401184]
[107.50000000 258.78402710]
[107.50000000 273.78402710]
[107.50000000 288.78402710]
[122.03988647 292.84533691]
[134.94427490 300.67984009]
[145.25555420 311.70617676]
[152.20857239 325.10610962]
[155.28736877 339.88525391]
[154.26348877 354.94692993]
[149.21287537 369.17346191]
[140.51036072 381.50912476]
[128.80169678 391.03854370]
[114.95575714 397.05456543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 34]
[25 33]
[26 32]
[27 31]
[35 54]
[36 53]
[37 52]
[56 120]
[57 119]
[58 118]
[59 117]
[60 116]
[61 115]
[65 112]
[66 111]
[67 110]
[68 109]
[69 108]
[70 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
