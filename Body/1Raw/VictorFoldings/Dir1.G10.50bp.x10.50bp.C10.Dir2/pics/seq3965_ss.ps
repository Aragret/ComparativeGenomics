%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCAUGACCCGGGGGGGGGGUUGGCCAUAAUAUGAUUUAUCUCCACACUAGCAGAGACCAACCGAACCCCxxxxxxxxxxCCAAGCCUACGUUUUCACACUUCUAGUAAGCCUCUACCUGCACGACAACACCCCCCCCCCCAUAAUGACCC\
) } def
/len { sequence length } bind def

/coor [
[69.20816803 406.70260620]
[55.18622208 401.14959717]
[42.98626328 392.28326416]
[33.37519455 380.66094971]
[26.95716858 367.01324463]
[24.13563156 352.19805908]
[25.08794594 337.14666748]
[29.75425148 322.80526733]
[37.84121704 310.07528687]
[48.84049225 299.75701904]
[62.06065369 292.49905396]
[76.67066193 288.75759888]
[76.67066193 273.75759888]
[76.67066193 258.75759888]
[76.67066193 243.75761414]
[76.67066193 228.75761414]
[76.67066193 213.75761414]
[76.67066193 198.75761414]
[76.67066193 183.75761414]
[76.67066193 168.75761414]
[76.67066193 153.75761414]
[76.67066193 138.75761414]
[65.27959442 128.99833679]
[50.45710754 131.29920959]
[35.63462830 133.60008240]
[26.30438995 146.07344055]
[11.23950958 148.19569397]
[-0.59442413 139.22387695]
[-15.41690636 141.52474976]
[-30.23938751 143.82562256]
[-45.06187057 146.12649536]
[-54.18724823 159.03010559]
[-69.77799988 161.61932373]
[-82.58440399 152.35803223]
[-85.00865173 136.74078369]
[-75.61247253 124.03301239]
[-59.97046661 121.77401733]
[-47.36274338 131.30401611]
[-32.54026413 129.00314331]
[-17.71778107 126.70227051]
[-2.89529896 124.40139771]
[5.66192102 112.26428223]
[20.66124916 109.71971130]
[33.33375168 118.77760315]
[48.15623474 116.47673035]
[62.97871780 114.17585754]
[61.15691376 100.28057098]
[64.27716827 86.90984344]
[71.74600983 75.72926331]
[82.44164276 68.05912781]
[94.87847137 64.71942902]
[107.41195679 65.94532776]
[113.68135834 52.31834793]
[119.95075989 38.69137192]
[126.22016907 25.06439209]
[113.25137329 17.50357437]
[101.07286072 8.72636986]
[89.79833984 -1.18526793]
[79.53306580 -12.13879585]
[70.37290192 -24.03194046]
[62.40336990 -36.75365829]
[55.69887924 -50.18516159]
[50.32203293 -64.20104980]
[46.32303238 -78.67044830]
[43.73921585 -93.45825958]
[42.59470749 -108.42641449]
[42.90019608 -123.43515015]
[44.65282822 -138.34432983]
[47.83624268 -153.01475525]
[52.42070770 -167.30944824]
[58.36342621 -181.09494019]
[65.60890961 -194.24250793]
[74.08950043 -206.62939453]
[83.72602844 -218.13995361]
[94.42851257 -228.66670227]
[106.09701538 -238.11135864]
[118.62259674 -246.38572693]
[131.88830566 -253.41256714]
[145.77027893 -259.12625122]
[160.13891602 -263.47344971]
[174.86003113 -266.41357422]
[189.79617310 -267.91915894]
[204.80792236 -267.97613525]
[219.75508118 -266.58398438]
[234.49809265 -263.75573730]
[248.89930725 -259.51773071]
[262.82424927 -253.90960693]
[276.14294434 -246.98368835]
[288.73095703 -238.80464172]
[300.47085571 -229.44885254]
[311.25292969 -219.00366211]
[320.97656250 -207.56658936]
[329.55096436 -195.24444580]
[336.89605713 -182.15226746]
[342.94326782 -168.41229248]
[347.63610840 -154.15281677]
[350.93081665 -139.50698853]
[352.79660034 -124.61153412]
[353.21603394 -109.60555267]
[352.18518066 -94.62914276]
[349.71371460 -79.82213593]
[345.82467651 -65.32279205]
[340.55438232 -51.26649094]
[333.95205688 -37.78447342]
[326.07934570 -25.00261879]
[317.00973511 -13.04027271]
[306.82794189 -2.00912595]
[295.62896729 7.98782301]
[283.51745605 16.85723305]
[270.60644531 24.51629257]
[257.01647949 30.89348602]
[242.87446594 35.92927551]
[228.31245422 39.57663345]
[213.46640015 41.80151367]
[198.47491455 42.58313751]
[183.47798157 41.91420746]
[168.61561584 39.80096817]
[154.02659607 36.26315308]
[139.84715271 31.33379745]
[133.57774353 44.96077728]
[127.30833435 58.58775330]
[121.03893280 72.21473694]
[128.75463867 79.37928009]
[134.07565308 88.64898682]
[136.44078064 99.23554993]
[135.54495239 110.20578003]
[131.37487793 120.56382751]
[124.21869659 129.34156799]
[114.64778900 135.68894958]
[103.47185516 138.95584106]
[91.67066193 138.75761414]
[91.67066193 153.75761414]
[91.67066193 168.75761414]
[91.67066193 183.75761414]
[91.67066193 198.75761414]
[91.67066193 213.75761414]
[91.67066193 228.75761414]
[91.67066193 243.75761414]
[91.67066193 258.75759888]
[91.67066193 273.75759888]
[91.67066193 288.75759888]
[106.28067780 292.49905396]
[119.50083923 299.75701904]
[130.50010681 310.07528687]
[138.58708191 322.80526733]
[143.25338745 337.14666748]
[144.20570374 352.19805908]
[141.38415527 367.01324463]
[134.96614075 380.66094971]
[125.35506439 392.28326416]
[113.15510559 401.14959717]
[99.13316345 406.70260620]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 46]
[24 45]
[25 44]
[28 41]
[29 40]
[30 39]
[31 38]
[52 122]
[53 121]
[54 120]
[55 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
