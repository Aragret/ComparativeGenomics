%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUCAUCAGGGGGGGGGGUUAAUAAUCAUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCAxxxxxxxxxxAUAACAAGCUCCAUCUGCCUACGACAAACAGACCUAAAAUCGCUCAUUGCCCCCCCCCCCAUACUCUUCA\
) } def
/len { sequence length } bind def

/coor [
[9.87774563 541.07653809]
[-3.96819329 535.06054688]
[-15.67685509 525.53112793]
[-24.37937927 513.19543457]
[-29.42998123 498.96893311]
[-30.45387268 483.90725708]
[-27.37507439 469.12808228]
[-20.42205238 455.72814941]
[-10.11076736 444.70181274]
[2.79361320 436.86730957]
[17.33349991 432.80599976]
[17.33349991 417.80599976]
[17.33349991 402.80599976]
[17.33349991 387.80599976]
[17.33349991 372.80599976]
[17.33349991 357.80599976]
[17.33349991 342.80599976]
[17.33349991 327.80599976]
[17.33349991 312.80599976]
[17.33349991 297.80599976]
[9.55400848 310.63095093]
[-1.34469652 320.93719482]
[-14.58403397 327.98843384]
[-29.21821594 331.28094482]
[-44.20180893 330.57955933]
[-58.46441650 325.93432617]
[-70.98715210 317.67715454]
[-80.87541199 306.39785767]
[-87.42281342 292.90225220]
[-90.16161346 278.15438843]
[-88.89616394 263.20788574]
[-83.71685791 249.13041687]
[-74.99370575 236.92768860]
[-63.34986115 227.47142029]
[-49.61713791 221.43716431]
[-34.77657318 219.25598145]
[-19.88834000 221.08367920]
[-6.01602268 226.78971863]
[5.84937000 235.96646118]
[14.86020184 247.95832825]
[20.37275696 261.90866089]
[21.99337578 276.81536865]
[28.34050369 263.22442627]
[34.68763351 249.63346863]
[41.03476334 236.04252625]
[47.38189316 222.45156860]
[35.14687347 208.82798767]
[30.02455711 191.19541931]
[33.07253647 173.03752136]
[43.72966385 157.96157837]
[59.91875076 148.98187256]
[78.45133209 147.91700745]
[83.64674377 133.84548950]
[88.84216309 119.77396393]
[94.03757477 105.70244598]
[84.81845856 105.96174622]
[75.63265991 99.64116669]
[70.17640686 87.26245880]
[71.57543945 71.16508484]
[70.95146179 56.17806625]
[70.32748413 41.19105148]
[55.51243973 38.45934677]
[41.67690659 32.49900055]
[29.51486969 23.60897255]
[19.63636971 12.23518753]
[12.53691101 -1.05185223]
[8.57259750 -15.58567333]
[7.94227791 -30.63726616]
[10.67756939 -45.45164871]
[16.64126968 -59.28573608]
[25.53424454 -71.44561768]
[36.91042328 -81.32136536]
[50.19918060 -88.41760254]
[64.73396301 -92.37839508]
[79.78570557 -93.00506592]
[94.59942627 -90.26618958]
[108.43206787 -84.29913330]
[120.58979797 -75.40321350]
[130.46278381 -64.02464294]
[137.55580139 -50.73416519]
[141.51307678 -36.19842148]
[142.13609314 -21.14652634]
[139.39363098 -6.33347225]
[133.42321777 7.49772501]
[124.52436066 19.65329742]
[113.14339447 29.52352524]
[99.85119629 36.61332321]
[85.31449890 40.56707382]
[85.93847656 55.55408859]
[86.56245422 70.54110718]
[92.95113373 74.46981812]
[106.14453125 67.33298492]
[105.72849274 82.32723999]
[112.11717224 86.25595856]
[125.77341461 80.05055237]
[139.42965698 73.84513855]
[153.08589172 67.63973236]
[153.89131165 52.35543442]
[161.71740723 39.20207977]
[174.76580811 31.20221519]
[190.03808594 30.19415474]
[204.02478027 36.40953827]
[213.51185608 48.42012405]
[216.31924438 63.46595764]
[211.80183411 78.08962250]
[200.99768066 88.93070984]
[186.38952637 93.49800873]
[171.33419800 90.74199677]
[159.29130554 81.29597473]
[145.63505554 87.50138092]
[131.97882080 93.70678711]
[118.32257843 99.91220093]
[108.10910034 110.89786530]
[102.91368103 124.96938324]
[97.71826935 139.04089355]
[92.52285004 153.11242676]
[101.74705505 160.61758423]
[108.46766663 170.40466309]
[112.14748383 181.67199707]
[112.49781036 193.50047302]
[109.50109863 204.92837524]
[103.41147614 215.02970886]
[94.73323059 222.98910522]
[84.17907715 228.16772461]
[72.61161804 230.15449524]
[60.97284317 228.79869080]
[54.62571335 242.38964844]
[48.27858353 255.98060608]
[41.93145370 269.57156372]
[35.58432770 283.16250610]
[32.33349991 297.80599976]
[32.33349991 312.80599976]
[32.33349991 327.80599976]
[32.33349991 342.80599976]
[32.33349991 357.80599976]
[32.33349991 372.80599976]
[32.33349991 387.80599976]
[32.33349991 402.80599976]
[32.33349991 417.80599976]
[32.33349991 432.80599976]
[46.87338638 436.86730957]
[59.77776718 444.70181274]
[70.08905029 455.72814941]
[77.04207611 469.12808228]
[80.12087250 483.90725708]
[79.09698486 498.96893311]
[74.04637909 513.19543457]
[65.34385681 525.53112793]
[53.63519287 535.06054688]
[39.78925705 541.07653809]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[42 130]
[43 129]
[44 128]
[45 127]
[46 126]
[52 116]
[53 115]
[54 114]
[55 113]
[59 90]
[60 89]
[61 88]
[94 112]
[95 111]
[96 110]
[97 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
