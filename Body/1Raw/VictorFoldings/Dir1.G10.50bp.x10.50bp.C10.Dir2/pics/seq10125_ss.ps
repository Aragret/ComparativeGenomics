%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAAGAACUGGGGGGGGGGAUCAAACUCCUGAGCCAACAACUUAAUAUGACUAGCUUACACAAUAGCUUxxxxxxxxxxUUGUGAAUCUGACAACAGAGGCUUACGACCCCUUAUUUACCGAGAAAGCUCCCCCCCCCCCACAAGAACU\
) } def
/len { sequence length } bind def

/coor [
[90.04212952 426.00613403]
[76.19618988 419.99011230]
[64.48752594 410.46069336]
[55.78500366 398.12503052]
[50.73440170 383.89849854]
[49.71051025 368.83682251]
[52.78930664 354.05767822]
[59.74232864 340.65774536]
[70.05361176 329.63140869]
[82.95799255 321.79690552]
[97.49787903 317.73559570]
[97.49787903 302.73559570]
[97.49787903 287.73559570]
[97.49787903 272.73559570]
[97.49787903 257.73559570]
[97.49787903 242.73558044]
[97.49787903 227.73558044]
[97.49787903 212.73558044]
[97.49787903 197.73558044]
[97.49787903 182.73558044]
[97.49787903 167.73558044]
[96.87390137 152.74856567]
[95.62702942 137.80047607]
[86.35432434 135.52175903]
[77.94084167 131.00633240]
[70.91635132 124.53855896]
[65.72315979 116.52567291]
[62.68826675 107.47221375]
[62.00276566 97.94825745]
[63.70982361 88.55349731]
[67.70195007 79.87947845]
[73.72777557 72.47238159]
[81.40787506 66.79860687]
[76.80231476 52.52315140]
[72.19674683 38.24768829]
[67.59117889 23.97222900]
[47.41146469 23.12589645]
[31.85973358 0.83815199]
[23.34864426 -11.51342010]
[14.83755398 -23.86499214]
[6.32646370 -36.21656418]
[-7.24938011 -30.91289520]
[-21.65964317 -28.77810860]
[-36.17504501 -29.91684151]
[-50.06175232 -34.26814651]
[-62.61845779 -41.60874939]
[-73.21181488 -51.56450272]
[-81.30838776 -63.62944794]
[-86.50149536 -77.19154358]
[-88.53163147 -91.56368256]
[-87.29946136 -106.01855469]
[-82.87066650 -119.82539368]
[-75.47241211 -132.28695679]
[-65.48177338 -142.77473450]
[-73.73406219 -155.30070496]
[-81.98635101 -167.82666016]
[-90.23863983 -180.35263062]
[-105.74504089 -180.92807007]
[-117.93093109 -190.53450012]
[-122.11058807 -205.47807312]
[-116.67684937 -220.01264954]
[-103.71910095 -228.54940796]
[-88.21985626 -227.80578613]
[-76.13888550 -218.06771851]
[-72.12158203 -203.07969666]
[-77.71267700 -188.60491943]
[-69.46038818 -176.07894897]
[-61.20809937 -163.55299377]
[-52.95581055 -151.02702332]
[-38.41713333 -156.29783630]
[-23.03249931 -157.95222473]
[-7.68832588 -155.89070129]
[6.73030710 -150.22798157]
[19.39070511 -141.28665161]
[29.56065559 -129.57873535]
[36.65076447 -115.77641296]
[40.24862289 -100.67345428]
[40.14278793 -85.13951874]
[36.33521652 -70.07009888]
[29.04136658 -56.33490372]
[18.67803574 -44.72765732]
[27.18912697 -32.37608337]
[35.70021820 -20.02451134]
[44.21130753 -7.67293835]
[51.69142914 -7.12728310]
[60.11640167 -19.53775787]
[66.65167999 -6.03597260]
[74.13180542 -5.49031687]
[84.34528351 -16.47598267]
[94.55876160 -27.46164703]
[104.77224731 -38.44731140]
[107.90783691 -54.54389572]
[123.50157166 -59.62008286]
[135.51193237 -48.45392609]
[131.58370972 -32.53221130]
[115.75791168 -28.23383141]
[105.54442596 -17.24816704]
[95.33094788 -6.26250172]
[85.11746979 4.72316265]
[81.86664581 19.36666489]
[86.47220612 33.64212418]
[91.07777405 47.91758347]
[95.68333435 62.19304657]
[114.54034424 64.83499146]
[129.75657654 76.28195190]
[137.52201843 93.66770935]
[152.51470947 94.13574982]
[159.10192871 80.40518951]
[170.70858765 70.54590607]
[185.32374573 66.26608276]
[200.41525269 68.30722809]
[213.36840820 76.31570435]
[221.93901062 88.90398407]
[224.64213562 103.89108276]
[221.00944519 118.68038177]
[211.67034912 130.70956421]
[198.24288940 137.89448547]
[183.05345154 138.99031067]
[168.73368835 133.80720520]
[157.76461792 123.24315643]
[152.04666138 109.12844849]
[137.05397034 108.66040802]
[127.59783173 126.19845581]
[110.57511902 136.55360413]
[111.82199097 151.50169373]
[114.52199554 155.08937073]
[115.77202606 158.96345520]
[115.66492462 162.62001038]
[114.45154572 165.64022827]
[112.49787903 167.73558044]
[112.49787903 182.73558044]
[112.49787903 197.73558044]
[112.49787903 212.73558044]
[112.49787903 227.73558044]
[112.49787903 242.73558044]
[112.49787903 257.73559570]
[112.49787903 272.73559570]
[112.49787903 287.73559570]
[112.49787903 302.73559570]
[112.49787903 317.73559570]
[127.03776550 321.79690552]
[139.94215393 329.63140869]
[150.25343323 340.65774536]
[157.20645142 354.05767822]
[160.28524780 368.83682251]
[159.26136780 383.89849854]
[154.21075439 398.12503052]
[145.50823975 410.46069336]
[133.79957581 419.99011230]
[119.95363617 426.00613403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 125]
[23 124]
[33 103]
[34 102]
[35 101]
[36 100]
[38 84]
[39 83]
[40 82]
[41 81]
[54 69]
[55 68]
[56 67]
[57 66]
[88 99]
[89 98]
[90 97]
[91 96]
[106 122]
[107 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
