%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCCCAAAGGGGGGGGGGAACAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGxxxxxxxxxxAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGCCCCCCCCCCAAACCGCAAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 392.61032104]
[71.19830322 386.59429932]
[59.48964310 377.06488037]
[50.78712082 364.72921753]
[45.73651886 350.50268555]
[44.71262741 335.44100952]
[47.79142761 320.66186523]
[54.74444962 307.26193237]
[65.05573273 296.23559570]
[77.96011353 288.40109253]
[92.50000000 284.33978271]
[92.50000000 269.33978271]
[92.50000000 254.33976746]
[92.50000000 239.33976746]
[92.50000000 224.33976746]
[92.50000000 209.33976746]
[92.50000000 194.33976746]
[92.50000000 179.33976746]
[92.50000000 164.33976746]
[92.50000000 149.33976746]
[73.12404633 142.05171204]
[58.37237167 127.52822876]
[50.78314209 108.26824188]
[51.66216660 87.58562469]
[60.85819626 69.03902435]
[76.78896332 55.81956863]
[71.88741302 41.64300919]
[66.98586273 27.46645164]
[62.08430862 13.28989315]
[50.26227188 2.77561474]
[53.41593552 -11.78129768]
[48.51438522 -25.95785522]
[43.61283493 -40.13441467]
[31.44156837 -40.26486588]
[19.85880661 -44.59976959]
[10.29487705 -52.74560165]
[3.97833252 -63.83039856]
[1.77899885 -76.59593201]
[4.09040451 -89.54022217]
[10.76727104 -101.09419250]
[21.12736320 -109.81185150]
[13.13744640 -122.50677490]
[-0.64727092 -117.77243042]
[-15.13386440 -116.23893738]
[-29.58933449 -117.98050690]
[-43.28301239 -122.90570831]
[-55.52349091 -130.76229858]
[-65.69353485 -141.15010071]
[-73.28121948 -153.54141235]
[-77.90566254 -167.30778503]
[-79.33618164 -181.75193787]
[-77.50378418 -196.14305115]
[-72.50447083 -209.75369263]
[-64.59424591 -221.89672852]
[-54.17597198 -231.95982361]
[-61.90005875 -244.81823730]
[-69.62414551 -257.67663574]
[-77.34822845 -270.53503418]
[-92.81726837 -271.75503540]
[-104.59300232 -281.86004639]
[-108.14741516 -296.96456909]
[-102.11376190 -311.26052856]
[-88.81210327 -319.25085449]
[-73.35720825 -317.86315918]
[-61.69179153 -307.63095093]
[-58.30144501 -292.48880005]
[-64.48982239 -278.25912476]
[-56.76573944 -265.40072632]
[-49.04165649 -252.54231262]
[-41.31756973 -239.68391418]
[-26.57222176 -244.34536743]
[-11.13208485 -245.35835266]
[4.11305141 -242.66032410]
[18.28364372 -236.40270996]
[30.56113815 -226.94245911]
[40.23525238 -214.82162476]
[46.74506760 -200.73631287]
[49.71155167 -185.49676514]
[48.95962143 -169.98068237]
[44.52848053 -155.08268738]
[36.66958237 -141.66279602]
[25.83237648 -130.49668884]
[33.82229233 -117.80176544]
[48.80930710 -117.17778778]
[57.82683945 -129.16461182]
[66.84436798 -141.15145874]
[75.86190033 -153.13829041]
[84.87942505 -165.12512207]
[84.06656647 -181.14756775]
[96.18154907 -191.66453552]
[111.93080902 -188.60830688]
[119.23284912 -174.32336426]
[112.48617554 -159.76788330]
[96.86625671 -156.10758972]
[87.84873199 -144.12075806]
[78.83119965 -132.13392639]
[69.81366730 -120.14708710]
[60.79614258 -108.16025543]
[73.27599335 -93.14202881]
[76.77408600 -74.50772858]
[70.94772339 -57.06204224]
[57.78939056 -45.03596497]
[62.69094086 -30.85940552]
[67.59249115 -16.68284798]
[79.06393433 -7.18257236]
[76.26086426 8.38834190]
[81.16241455 22.56489944]
[86.06397247 36.74145889]
[90.96552277 50.91801834]
[101.81721497 50.12655258]
[112.58252716 51.70566177]
[122.74977112 55.58028793]
[131.83567810 61.56626129]
[139.40838623 69.37905884]
[145.10794067 78.64732361]
[148.66343689 88.93051910]
[149.90586853 99.73986816]
[148.77618408 110.56157684]
[162.79289246 115.90309143]
[177.96217346 110.68077850]
[191.42521667 119.40580750]
[192.85432434 135.38508606]
[181.15321350 146.36067200]
[165.29797363 143.91304016]
[157.45138550 129.91979980]
[143.43467712 124.57829285]
[138.30070496 131.99560547]
[131.91540527 138.36756897]
[124.48737335 143.48599243]
[116.25929260 147.18367004]
[107.50000000 149.33976746]
[107.50000000 164.33976746]
[107.50000000 179.33976746]
[107.50000000 194.33976746]
[107.50000000 209.33976746]
[107.50000000 224.33976746]
[107.50000000 239.33976746]
[107.50000000 254.33976746]
[107.50000000 269.33978271]
[107.50000000 284.33978271]
[122.03988647 288.40109253]
[134.94427490 296.23559570]
[145.25555420 307.26193237]
[152.20857239 320.66186523]
[155.28736877 335.44100952]
[154.26348877 350.50268555]
[149.21287537 364.72921753]
[140.51036072 377.06488037]
[128.80169678 386.59429932]
[114.95575714 392.61032104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 109]
[27 108]
[28 107]
[29 106]
[31 104]
[32 103]
[33 102]
[41 83]
[42 82]
[55 70]
[56 69]
[57 68]
[58 67]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
