%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAGCCCUCGGGGGGGGGGAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCCCxxxxxxxxxxCUACGACAAACAGACCUAAAAUCGCUCAUUGCAUACUCUUCAAUCAGCCACCCCCCCCCCCAUAGCCCUC\
) } def
/len { sequence length } bind def

/coor [
[142.15376282 611.96893311]
[128.30781555 605.95288086]
[116.59915924 596.42346191]
[107.89663696 584.08782959]
[102.84603119 569.86126709]
[101.82214355 554.79962158]
[104.90093994 540.02044678]
[111.85396576 526.62054443]
[122.16524506 515.59417725]
[135.06962585 507.75967407]
[149.60951233 503.69836426]
[149.60951233 488.69836426]
[149.60951233 473.69836426]
[149.60951233 458.69836426]
[149.60951233 443.69836426]
[149.60951233 428.69836426]
[149.60951233 413.69836426]
[149.60951233 398.69836426]
[149.60951233 383.69836426]
[149.60951233 368.69836426]
[147.58717346 353.83532715]
[143.57943726 339.38061523]
[139.57170105 324.92593384]
[135.56396484 310.47125244]
[132.62568665 308.41357422]
[130.56588745 304.79986572]
[130.11888123 300.07202148]
[131.78735352 294.98913574]
[128.68904114 280.31259155]
[125.59071350 265.63607788]
[122.49239349 250.95954895]
[119.39407349 236.28302002]
[116.29575348 221.60650635]
[101.78614807 218.15151978]
[90.16770935 208.70051575]
[83.77870178 195.08650208]
[83.93482971 179.98696899]
[90.65868378 166.39738464]
[102.66464233 157.03692627]
[99.56632233 142.36039734]
[96.46799469 127.68386841]
[93.36967468 113.00734711]
[83.74114990 101.50553894]
[69.83859253 95.87358093]
[55.93603897 90.24163055]
[38.98556137 89.89857483]
[34.62284470 73.51556396]
[49.15788269 64.78807831]
[61.56799316 76.33907318]
[75.47055054 81.97103119]
[89.37310791 87.60298157]
[95.63608551 83.47683716]
[94.75234985 68.50289917]
[108.16204834 75.22454834]
[114.42503357 71.09840393]
[114.73708344 56.10165405]
[115.04914093 41.10490036]
[107.60060883 27.14674759]
[115.60101318 14.58319569]
[115.91307068 -0.41355807]
[116.22512817 -15.41031170]
[101.54563904 -18.74160004]
[87.83736420 -24.95997047]
[75.66165161 -33.81078720]
[65.51708984 -44.93161011]
[57.81909180 -57.86705399]
[52.88288116 -72.08741760]
[50.91059875 -87.01038361]
[51.98300552 -102.02487183]
[56.05618668 -116.51604462]
[62.96334839 -129.89050293]
[72.42164612 -141.60055542]
[84.04376984 -151.16670227]
[97.35380554 -158.19720459]
[111.80670166 -162.40417480]
[126.81063843 -163.61532593]
[141.75120544 -161.78108215]
[156.01658630 -156.97653198]
[169.02264404 -149.39843750]
[180.23677063 -139.35711670]
[189.19975281 -127.26374054]
[195.54458618 -113.61353302]
[199.01142883 -98.96546936]
[199.45832825 -83.91936493]
[196.86697388 -69.09136200]
[191.34349060 -55.08864594]
[183.11405945 -42.48462296]
[172.51567078 -31.79542351]
[159.98231506 -23.45876122]
[146.02723694 -17.81601524]
[131.22187805 -15.09825516]
[130.90982056 -0.10150185]
[130.59776306 14.89525223]
[138.06861877 27.78073502]
[130.04589844 41.41695404]
[129.73384094 56.41370773]
[129.42178345 71.41046143]
[126.84783936 101.58213806]
[108.04620361 109.90901947]
[111.14452362 124.58554840]
[114.24284363 139.26206970]
[117.34116364 153.93859863]
[132.10617065 157.64752197]
[143.74920654 167.35972595]
[149.99525452 181.10771179]
[149.65420532 196.14248657]
[142.84727478 209.48321533]
[130.97227478 218.50817871]
[134.07060242 233.18470764]
[137.16891479 247.86122131]
[140.26724243 262.53775024]
[143.36557007 277.21429443]
[146.46388245 291.89080811]
[150.01864624 306.46350098]
[154.02638245 320.91818237]
[158.03413391 335.37289429]
[162.04187012 349.82757568]
[166.94102478 335.65017700]
[177.10009766 324.61419678]
[190.82432556 318.56063843]
[205.82420349 318.49938965]
[219.59741211 324.44067383]
[229.84626770 335.39334106]
[234.86103821 349.53024292]
[233.80513000 364.49304199]
[226.85472107 377.78558350]
[215.16926575 387.19039917]
[200.69818115 391.13851929]
[185.85556030 388.97134399]
[173.11749268 381.05038452]
[164.60951233 368.69836426]
[164.60951233 383.69836426]
[164.60951233 398.69836426]
[164.60951233 413.69836426]
[164.60951233 428.69836426]
[164.60951233 443.69836426]
[164.60951233 458.69836426]
[164.60951233 473.69836426]
[164.60951233 488.69836426]
[164.60951233 503.69836426]
[179.14939880 507.75967407]
[192.05378723 515.59417725]
[202.36506653 526.62054443]
[209.31808472 540.02044678]
[212.39688110 554.79962158]
[211.37300110 569.86126709]
[206.32238770 584.08782959]
[197.61987305 596.42346191]
[185.91120911 605.95288086]
[172.06527710 611.96893311]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 117]
[22 116]
[23 115]
[24 114]
[28 113]
[29 112]
[30 111]
[31 110]
[32 109]
[33 108]
[39 102]
[40 101]
[41 100]
[42 99]
[43 51]
[44 50]
[45 49]
[55 97]
[56 96]
[57 95]
[59 93]
[60 92]
[61 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
