%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCGCCUGGGGGGGGGGGUUUACCAAAAACAUCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGxxxxxxxxxxUGGCAUCACUAUACUACUAACAGACCGCAACCUCAACACCACCUUCUUCGCCCCCCCCCCACCCCGCCGG\
) } def
/len { sequence length } bind def

/coor [
[83.27172852 355.78833008]
[70.39845276 347.88543701]
[60.27415848 336.67495728]
[53.71957397 323.06561279]
[51.26605606 308.16067505]
[53.11249161 293.16842651]
[59.10920334 279.30422974]
[68.77006531 267.69198608]
[81.31191254 259.27304077]
[95.71803284 254.72987366]
[95.40597534 239.73310852]
[95.09392548 224.73635864]
[94.78186798 209.73960876]
[94.46981049 194.74285889]
[94.15775299 179.74609375]
[93.84569550 164.74934387]
[93.53363800 149.75259399]
[93.22158813 134.75584412]
[92.90953064 119.75908661]
[79.97147369 112.16917419]
[66.72888947 119.21430969]
[53.48630142 126.25944519]
[40.24371719 133.30458069]
[34.20045090 148.16589355]
[18.77333260 152.56857300]
[5.79672766 143.13526917]
[5.22517538 127.10239410]
[17.49712181 116.76901245]
[33.19858170 120.06199646]
[46.44116592 113.01686096]
[59.68375015 105.97172546]
[72.92633820 98.92658997]
[72.84832001 91.42699432]
[57.84912872 91.58278656]
[57.69358826 76.58358765]
[72.69228363 76.42781067]
[72.61426544 68.92821503]
[59.22797775 62.16009903]
[45.84169388 55.39198303]
[32.45541000 48.62387085]
[19.06912422 41.85575485]
[5.68284035 35.08763885]
[-6.09557915 44.74106979]
[-20.78382111 48.76294327]
[-35.83705902 46.45643997]
[-48.64722443 38.22118378]
[-56.99488449 25.48397636]
[-59.43375778 10.45161724]
[-55.54128647 -4.27144480]
[-45.99187088 -16.13435173]
[-32.44000626 -23.08178329]
[-17.23362923 -23.91005325]
[-3.00734162 -18.47566223]
[7.77406836 -7.72014713]
[13.24265575 6.49303150]
[12.45095539 21.70135498]
[25.83724022 28.46946907]
[39.22352600 35.23758316]
[52.60980988 42.00569916]
[65.99609375 48.77381516]
[79.38237762 55.54192734]
[94.39155579 61.66557693]
[104.07800293 71.81463623]
[107.63719940 83.46320343]
[105.25271606 94.03045654]
[117.14509583 84.88872528]
[109.20607758 72.14749908]
[102.55416870 58.68945694]
[97.25342560 44.64421082]
[93.35490417 30.14702797]
[90.89614105 15.33752823]
[89.90081787 0.35833809]
[90.37853241 -14.64628029]
[92.32466888 -29.53182220]
[95.72049713 -44.15492630]
[100.53329468 -58.37475967]
[106.71672821 -72.05437469]
[114.21124268 -85.06203461]
[122.94465637 -97.27245331]
[132.83285522 -108.56803131]
[143.78062439 -118.84000397]
[155.68251038 -127.98941803]
[168.42388916 -135.92817688]
[181.88206482 -142.57981873]
[195.92741394 -147.88027954]
[210.42468262 -151.77851868]
[225.23422241 -154.23698425]
[240.21343994 -155.23200989]
[255.21804810 -154.75399780]
[270.10354614 -152.80755615]
[284.72659302 -149.41143799]
[298.94631958 -144.59835815]
[312.62582397 -138.41464233]
[325.63333130 -130.91987610]
[337.84356689 -122.18621826]
[349.13894653 -112.29778290]
[359.41070557 -101.34981537]
[368.55987549 -89.44774628]
[376.49838257 -76.70620728]
[383.14974976 -63.24789810]
[388.44995117 -49.20243835]
[392.34790039 -34.70510101]
[394.80606079 -19.89550209]
[395.80078125 -4.91627312]
[395.32247925 10.08832645]
[393.37573242 24.97378922]
[389.97930908 39.59675980]
[385.16595459 53.81640244]
[378.98196411 67.49577332]
[371.48693848 80.50312805]
[362.75302124 92.71319580]
[352.86437988 104.00838470]
[341.91619873 114.27991486]
[330.01394653 123.42885590]
[317.27224731 131.36711121]
[303.81381226 138.01820374]
[289.76824951 143.31809998]
[275.27084351 147.21575928]
[260.46118164 149.67362976]
[245.48193359 150.66806030]
[230.47734070 150.18943787]
[215.59191895 148.24241638]
[200.96902466 144.84571838]
[186.74946594 140.03205872]
[173.07022095 133.84779358]
[160.06301880 126.35250854]
[147.85313416 117.61836243]
[136.55813599 107.72948456]
[126.28682709 96.78110504]
[114.39444733 105.92283630]
[107.90628052 119.44702911]
[108.21833801 134.44378662]
[108.53039551 149.44053650]
[108.84245300 164.43728638]
[109.15451050 179.43403625]
[109.46656036 194.43080139]
[109.77861786 209.42755127]
[110.09067535 224.42430115]
[110.40273285 239.42105103]
[110.71479034 254.41781616]
[125.29743195 258.35775757]
[138.17863464 266.24771118]
[148.31419373 277.44802856]
[154.88244629 291.05078125]
[157.35093689 305.95324707]
[155.51956177 320.94732666]
[149.53677368 334.81753540]
[139.88758850 346.43951416]
[127.35420227 354.87106323]
[112.95265198 359.42868042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 32]
[21 31]
[22 30]
[23 29]
[37 61]
[38 60]
[39 59]
[40 58]
[41 57]
[42 56]
[65 130]
[66 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
