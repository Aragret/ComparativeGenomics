%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUAGCAUCACGGGGGGGGGGCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCCGCGGUxxxxxxxxxxAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCCCCCCCCCCCUAGCAUCAC\
) } def
/len { sequence length } bind def

/coor [
[87.34412384 529.74279785]
[73.18352509 524.58776855]
[60.59377670 516.30554199]
[50.25384140 505.34277344]
[42.72132874 492.29064941]
[38.40246582 477.85305786]
[37.53015518 462.80859375]
[40.15144730 447.96859741]
[46.12497330 434.13336182]
[55.12858963 422.04901123]
[66.67675018 412.36724854]
[80.14665985 405.61016846]
[94.81192017 402.14218140]
[94.81192017 387.14218140]
[94.81192017 372.14218140]
[94.81192017 357.14218140]
[94.81192017 342.14218140]
[94.81192017 327.14218140]
[94.81192017 312.14218140]
[94.81192017 297.14218140]
[94.81192017 282.14218140]
[94.81192017 267.14218140]
[87.07462311 254.41491699]
[94.81192017 240.61474609]
[94.81192017 225.61474609]
[87.07462311 212.88748169]
[94.81192017 199.08731079]
[94.81192017 184.08731079]
[94.81192017 169.08731079]
[87.07462311 156.36003113]
[94.81192017 142.55986023]
[94.81192017 127.55986023]
[94.81192017 112.55986023]
[87.19691467 111.44960785]
[80.04721069 105.74231720]
[75.99833679 95.89961243]
[63.77435684 87.20626831]
[51.55037689 78.51291656]
[39.32639313 69.81957245]
[27.10241318 61.12622452]
[14.23853302 62.49566269]
[4.22537279 54.95500183]
[2.12811279 43.00428009]
[-9.91716957 34.06497574]
[-21.96245193 25.12567139]
[-34.28012848 33.90804291]
[-48.70944595 38.45226669]
[-63.83676529 38.31315231]
[-78.18006897 33.50432205]
[-90.33414459 24.49690247]
[-99.10826111 12.17334461]
[-103.64281464 -2.25901461]
[-103.49356842 -17.38623810]
[-98.67512512 -31.72631645]
[-89.65956116 -43.87435532]
[-77.33013153 -52.64020920]
[-62.89473343 -57.16509247]
[-47.76761246 -57.00570679]
[-33.43076706 -52.17765808]
[-21.28877449 -43.15395737]
[-12.53118229 -30.81865311]
[-8.01597118 -16.38022995]
[-8.18549633 -1.25321889]
[-13.02314758 13.08038902]
[-0.97786510 22.01969337]
[11.06741714 30.95899773]
[28.56047440 31.99867249]
[35.79576111 48.90224457]
[48.01974106 57.59559250]
[60.24372101 66.28894043]
[72.46770477 74.98228455]
[84.69168854 83.67563629]
[78.13194275 70.18601227]
[67.89183044 59.22517395]
[64.96772766 44.51294708]
[70.23813629 30.46934128]
[82.11965179 21.31349373]
[97.04270172 19.79610252]
[110.52394867 26.37303925]
[118.51319885 39.06838989]
[118.61022949 54.06807709]
[110.78626251 66.86539459]
[107.07624817 81.39934540]
[117.30004120 70.42328644]
[127.52384186 59.44721985]
[137.74763489 48.47115707]
[147.97143555 37.49509430]
[158.19523621 26.51902962]
[168.41902161 15.54296684]
[162.42190552 1.54459226]
[162.64341736 -13.68271255]
[169.04516602 -27.50072670]
[180.51802063 -37.51539230]
[195.07423401 -41.99161148]
[210.19184875 -40.15385056]
[223.25166321 -32.32051468]
[231.99098206 -19.84877396]
[234.89564514 -4.89943266]
[231.46243286 9.93744278]
[222.28614807 22.09127617]
[208.95663452 29.45634079]
[193.78334045 30.75659561]
[179.39509583 25.76676369]
[169.17129517 36.74282837]
[158.94749451 47.71889114]
[148.72369385 58.69495392]
[138.49990845 69.67102051]
[128.27610779 80.64707947]
[118.05230713 91.62314606]
[129.98063660 82.52835846]
[144.62380981 79.27611542]
[159.28063965 82.46634674]
[171.24734497 91.51055908]
[178.31646729 104.74036407]
[179.18392944 119.71525574]
[173.68972778 133.67282104]
[162.84736633 144.03831482]
[148.65696716 148.89961243]
[133.73619080 147.35993958]
[120.83749390 139.70333862]
[112.34029388 127.34220886]
[109.81192017 112.55986023]
[109.81192017 127.55986023]
[109.81192017 142.55986023]
[117.54922485 156.36003113]
[109.81192017 169.08731079]
[109.81192017 184.08731079]
[109.81192017 199.08731079]
[117.54922485 212.88748169]
[109.81192017 225.61474609]
[109.81192017 240.61474609]
[117.54922485 254.41491699]
[109.81192017 267.14218140]
[109.81192017 282.14218140]
[109.81192017 297.14218140]
[109.81192017 312.14218140]
[109.81192017 327.14218140]
[109.81192017 342.14218140]
[109.81192017 357.14218140]
[109.81192017 372.14218140]
[109.81192017 387.14218140]
[109.81192017 402.14218140]
[124.47718811 405.61016846]
[137.94709778 412.36724854]
[149.49525452 422.04901123]
[158.49887085 434.13336182]
[164.47239685 447.96859741]
[167.09368896 462.80859375]
[166.22138977 477.85305786]
[161.90251160 492.29064941]
[154.37001038 505.34277344]
[144.03007507 516.30554199]
[131.44032288 524.58776855]
[117.27972412 529.74279785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[24 131]
[25 130]
[27 128]
[28 127]
[29 126]
[31 124]
[32 123]
[33 122]
[36 72]
[37 71]
[38 70]
[39 69]
[40 68]
[43 66]
[44 65]
[45 64]
[83 109]
[84 108]
[85 107]
[86 106]
[87 105]
[88 104]
[89 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
