%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUAAACAGGGGGGGGGGAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGxxxxxxxxxxAUAUAUACACCAACAAACAAUGUUCAACCAGUAACUACUACUAAUCAACGCCCCCCCCCCCCCAUAAUCA\
) } def
/len { sequence length } bind def

/coor [
[70.38211060 380.73300171]
[56.53617096 374.71697998]
[44.82751083 365.18756104]
[36.12498474 352.85189819]
[31.07438278 338.62536621]
[30.05049133 323.56369019]
[33.12929153 308.78454590]
[40.08231354 295.38461304]
[50.39359665 284.35827637]
[63.29797745 276.52377319]
[77.83786774 272.46246338]
[77.83786774 257.46246338]
[77.83786774 242.46244812]
[77.83786774 227.46244812]
[77.83786774 212.46244812]
[77.83786774 197.46244812]
[77.83786774 182.46244812]
[77.83786774 167.46244812]
[77.83786774 152.46244812]
[77.83786774 137.46244812]
[66.43684387 127.71480560]
[51.61908722 130.04591370]
[36.80132675 132.37701416]
[21.98357010 134.70811462]
[7.16581154 137.03921509]
[1.80593419 149.77777100]
[-9.07242107 158.12489319]
[-22.54929352 159.97541809]
[-35.07358551 154.95011902]
[-43.39874649 144.46739197]
[-58.26179123 146.48973083]
[-73.12483978 148.51205444]
[-85.75345612 158.97390747]
[-101.03174591 153.01522827]
[-103.24271393 136.76580811]
[-90.11190796 126.94165039]
[-75.14717102 133.64901733]
[-60.28412628 131.62667847]
[-45.42107773 129.60433960]
[-38.14353943 114.92297363]
[-23.41233444 107.37594604]
[-6.91810322 110.10025787]
[4.83470726 122.22145844]
[19.65246582 119.89035797]
[34.47022247 117.55924988]
[49.28798294 115.22814941]
[64.10574341 112.89704132]
[62.70753860 99.01367950]
[66.37805176 85.87096405]
[74.39792633 75.21372223]
[85.48680878 68.37169647]
[98.00341797 66.09500885]
[110.18692780 68.47683716]
[117.91101074 55.61843872]
[125.63509369 42.76003647]
[133.35917664 29.90163231]
[141.08326721 17.04323006]
[148.80734253 4.18482780]
[156.26225281 -8.83148193]
[163.44476318 -22.00006485]
[164.82325745 -31.09685516]
[170.91615295 -35.36561966]
[178.37106323 -48.38193130]
[185.82597351 -61.39823914]
[193.28088379 -74.41455078]
[186.13943481 -89.71330261]
[189.46731567 -106.09642792]
[201.76541138 -117.17446136]
[218.07592773 -118.74689484]
[225.25843811 -131.91548157]
[212.28775024 -124.38146210]
[197.78474426 -120.55223846]
[182.78549194 -120.70136261]
[168.36148071 -124.81818390]
[155.54316711 -132.60859680]
[145.24623108 -143.51608276]
[138.20626831 -156.76141357]
[134.92620850 -171.39839172]
[135.64036560 -186.38137817]
[140.29772949 -200.64002991]
[148.56558228 -213.15573120]
[159.85328674 -223.03437805]
[173.35447693 -229.57028198]
[188.10464478 -232.29652405]
[203.05009460 -231.01834106]
[217.12312317 -225.82704163]
[229.31842041 -217.09350586]
[238.76477051 -205.44160461]
[244.78732300 -191.70375061]
[246.95587158 -176.86132812]
[245.11547852 -161.97465515]
[239.40039062 -148.11195374]
[251.48037720 -157.00430298]
[263.56036377 -165.89665222]
[275.64035034 -174.78900146]
[279.46292114 -190.37001038]
[294.08779907 -196.96490479]
[308.29602051 -189.51464844]
[311.18826294 -173.73446655]
[300.54583740 -161.72952271]
[284.53271484 -162.70901489]
[272.45272827 -153.81666565]
[260.37271118 -144.92431641]
[248.29273987 -136.03196716]
[238.42701721 -124.73296356]
[231.24450684 -111.56438446]
[238.07546997 -100.05204773]
[238.31143188 -86.55924225]
[231.78309631 -74.62478638]
[220.10935974 -67.43195343]
[206.29718018 -66.95964050]
[198.84226990 -53.94332886]
[191.38735962 -40.92702103]
[183.93244934 -27.91070938]
[176.61335754 -14.81755543]
[169.43084717 -1.64897299]
[169.91728210 3.16131783]
[167.34181213 8.31867027]
[161.66575623 11.90891266]
[153.94166565 24.76731491]
[146.21757507 37.62571716]
[138.49349976 50.48411942]
[130.76940918 63.34252167]
[123.04532623 76.20092773]
[130.68383789 85.71910858]
[134.47650146 97.59239960]
[133.74073792 110.29557800]
[128.38867188 122.12587738]
[118.96342468 131.43121338]
[106.58898163 136.84025574]
[92.83786774 137.46244812]
[92.83786774 152.46244812]
[92.83786774 167.46244812]
[92.83786774 182.46244812]
[92.83786774 197.46244812]
[92.83786774 212.46244812]
[92.83786774 227.46244812]
[92.83786774 242.46244812]
[92.83786774 257.46246338]
[92.83786774 272.46246338]
[107.37775421 276.52377319]
[120.28213501 284.35827637]
[130.59341431 295.38461304]
[137.54643250 308.78454590]
[140.62524414 323.56369019]
[139.60134888 338.62536621]
[134.55075073 352.85189819]
[125.84822083 365.18756104]
[114.13955688 374.71697998]
[100.29361725 380.73300171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 47]
[22 46]
[23 45]
[24 44]
[25 43]
[30 39]
[31 38]
[32 37]
[53 124]
[54 123]
[55 122]
[56 121]
[57 120]
[58 119]
[59 116]
[60 115]
[62 114]
[63 113]
[64 112]
[65 111]
[69 106]
[70 105]
[92 104]
[93 103]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
