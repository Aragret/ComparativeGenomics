%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAACAUAUAGGGGGGGGGGACUGAACUCCUCACACCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACxxxxxxxxxxUCUGACAUCCGGCCUGCUUCUUCUCACAUGACAAAAACUAGCCCCCAUCUCCCCCCCCCCCAAUCAUAUA\
) } def
/len { sequence length } bind def

/coor [
[74.15418243 586.13916016]
[60.30824661 580.12316895]
[48.59958267 570.59375000]
[39.89706039 558.25805664]
[34.84645844 544.03155518]
[33.82256699 528.96984863]
[36.90136337 514.19073486]
[43.85438538 500.79080200]
[54.16567230 489.76446533]
[67.07005310 481.92996216]
[81.60993958 477.86862183]
[81.60993958 462.86862183]
[81.60993958 447.86862183]
[81.60993958 432.86862183]
[81.60993958 417.86862183]
[81.60993958 402.86862183]
[81.60993958 387.86862183]
[81.60993958 372.86862183]
[81.60993958 357.86862183]
[81.60993958 342.86862183]
[81.60993958 327.86862183]
[78.87956238 323.87857056]
[78.67106628 318.11767578]
[81.93498230 312.24789429]
[82.55895996 297.26089478]
[68.73583221 293.99630737]
[55.75471115 288.22146606]
[44.06720734 280.13552856]
[34.08023453 270.01809692]
[26.14187622 258.21951294]
[20.52922440 245.14877319]
[17.43872452 231.25932312]
[16.97929001 217.03332520]
[19.16847420 202.96492004]
[23.93180084 189.54310608]
[31.10529137 177.23466492]
[40.44112015 166.46798706]
[51.61616898 157.61816406]
[64.24320984 150.99385071]
[77.88432312 146.82661438]
[92.06608582 145.26271057]
[93.31296539 130.31463623]
[94.55983734 115.36653900]
[86.83575439 102.50814056]
[73.05336761 96.58817291]
[56.84057236 99.05338287]
[46.81196594 86.07805634]
[53.28412247 71.01010132]
[69.59904480 69.35013580]
[78.97333527 82.80579376]
[92.75571442 88.72576141]
[99.55119324 85.55219269]
[113.14214325 79.20506287]
[119.93761444 76.03150177]
[124.24520111 61.66331482]
[128.55278015 47.29513168]
[118.79277802 38.72964478]
[113.03855133 27.14089966]
[112.12072754 14.28178692]
[116.14135742 2.08230972]
[124.46396637 -7.64007902]
[135.81401062 -13.45123005]
[148.47398376 -14.51179409]
[153.37553406 -28.68835258]
[158.27708435 -42.86491013]
[163.17863464 -57.04146957]
[168.08018494 -71.21802521]
[172.98173523 -85.39458466]
[177.88328552 -99.57114410]
[164.98449707 -107.33740234]
[153.98252869 -117.61605072]
[145.35836792 -129.95774841]
[139.48901367 -143.82296753]
[136.63104248 -158.60557556]
[136.90939331 -173.65936279]
[140.31190491 -188.32621765]
[146.68983459 -201.96496582]
[155.76437378 -213.97940063]
[167.13879395 -223.84429932]
[180.31588745 -231.12838745]
[194.71958923 -235.51325989]
[209.72023010 -236.80723572]
[224.66204834 -234.95372009]
[238.89186096 -230.03375244]
[251.78761292 -222.26242065]
[262.78552246 -211.97944641]
[271.40481567 -199.63435364]
[277.26873779 -185.76683044]
[280.12088013 -170.98309326]
[279.83660889 -155.92941284]
[276.42831421 -141.26390076]
[270.04504395 -127.62765503]
[260.96578979 -115.61679840]
[249.58746338 -105.75637817]
[236.40751648 -98.47747040]
[222.00209045 -94.09825897]
[207.00094604 -92.81019592]
[192.05984497 -94.66959381]
[187.15829468 -80.49303436]
[182.25674438 -66.31647491]
[177.35519409 -52.13991928]
[172.45364380 -37.96335983]
[167.55209351 -23.78680038]
[162.65054321 -9.61024284]
[174.37579346 2.92462087]
[178.19494629 19.74923515]
[172.97744751 36.28696442]
[160.06346130 47.99286652]
[142.92097473 51.60271454]
[138.61338806 65.97090149]
[134.30580139 80.33908081]
[109.50792694 116.61341858]
[108.26104736 131.56150818]
[107.01417542 146.50959778]
[122.21334839 150.99029541]
[136.15953064 158.50181580]
[148.25616455 168.72033691]
[157.98634338 181.20623779]
[164.93489075 195.42311096]
[168.80606079 210.76075745]
[169.43615723 226.56140137]
[166.80038452 242.14787292]
[161.01393127 256.85263062]
[152.32682800 270.04638672]
[141.11320496 281.16500854]
[127.85516357 289.73364258]
[113.12203979 295.38696289]
[97.54597473 297.88485718]
[96.92199707 312.87188721]
[96.60993958 327.86862183]
[96.60993958 342.86862183]
[96.60993958 357.86862183]
[96.60993958 372.86862183]
[96.60993958 387.86862183]
[96.60993958 402.86862183]
[96.60993958 417.86862183]
[96.60993958 432.86862183]
[96.60993958 447.86862183]
[96.60993958 462.86862183]
[96.60993958 477.86862183]
[111.14982605 481.92996216]
[124.05420685 489.76446533]
[134.36549377 500.79080200]
[141.31851196 514.19073486]
[144.39730835 528.96984863]
[143.37341309 544.03155518]
[138.32281494 558.25805664]
[129.62030029 570.59375000]
[117.91162872 580.12316895]
[104.06569672 586.13916016]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 129]
[25 128]
[41 114]
[42 113]
[43 112]
[44 51]
[45 50]
[54 111]
[55 110]
[56 109]
[63 104]
[64 103]
[65 102]
[66 101]
[67 100]
[68 99]
[69 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
