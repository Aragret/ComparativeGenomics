%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAACAACGGGGGGGGGGAUAAGCUUCUGACUCUUACCUCCCUCUCUCCUACUCCUGCUCGCAUCUGCxxxxxxxxxxGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCACCCAAGUAUUGACUCACCCCCCCCCCCCCAUCAACAAC\
) } def
/len { sequence length } bind def

/coor [
[76.34080505 422.57803345]
[63.78258133 414.22686768]
[53.69635773 403.01443481]
[46.71616364 389.64550781]
[43.28078079 374.96054077]
[43.60615540 359.88256836]
[47.67184067 345.35943604]
[55.22225952 332.30410767]
[65.78279114 321.53720093]
[78.68958282 313.73556519]
[93.13130951 309.38961792]
[92.50733185 294.40261841]
[91.88336182 279.41558838]
[91.25938416 264.42858887]
[90.63540649 249.44155884]
[90.01142883 234.45454407]
[89.38745117 219.46752930]
[88.76347351 204.48051453]
[88.13949585 189.49349976]
[87.51551819 174.50648499]
[85.80282593 159.60456848]
[83.01050568 144.86677551]
[80.21817780 130.12896729]
[69.66688538 119.46733856]
[54.95892715 116.52185822]
[40.25096512 113.57637024]
[34.64026260 127.53469086]
[26.56006050 140.22425842]
[16.28556442 151.21286011]
[4.16671848 160.12622070]
[-9.38371277 166.66078186]
[-23.90420723 170.59396362]
[-38.90019989 171.79180908]
[-53.86093521 170.21350098]
[-68.27685547 165.91282654]
[-81.65695953 159.03623962]
[-93.54553223 149.81796265]
[-103.53763580 138.57196045]
[-111.29296112 125.68128967]
[-116.54736328 111.58497620]
[-119.12186432 96.76315308]
[-118.92879486 81.72063446]
[-115.97471619 66.96976471]
[-110.36025238 53.01295853]
[-102.27663422 40.32557678]
[-91.99917603 29.33974457]
[-79.87792206 20.42963791]
[-66.32572937 13.89873123]
[-51.80418015 9.96946430]
[-36.80786514 8.77566814]
[-21.84755325 10.35800076]
[-7.43279266 14.66256905]
[5.94545794 21.54276276]
[17.83154106 30.76424217]
[27.82061768 42.01292801]
[35.57246780 54.90569687]
[40.82306671 69.00342560]
[43.39357376 83.82594299]
[43.19644547 98.86840820]
[57.90440750 101.81389618]
[72.61237335 104.75937653]
[72.81852722 91.50051880]
[79.23209381 79.52963257]
[90.68382263 71.64956665]
[104.79145813 69.85527039]
[109.69300842 55.67871475]
[114.59455872 41.50215530]
[119.49610901 27.32559776]
[124.39765930 13.14904022]
[129.29920959 -1.02751815]
[117.46469116 8.18899059]
[103.12939453 12.60479069]
[88.16014099 11.64483452]
[74.50630951 5.43413162]
[63.94596481 -5.21852827]
[57.85433578 -18.92589951]
[57.02470016 -33.90293884]
[61.56510544 -48.19925690]
[70.88426971 -59.95311737]
[83.76860046 -67.63386536]
[98.54024506 -70.24127960]
[113.27555084 -67.43581390]
[126.05561829 -59.58279419]
[135.21615601 -47.70489502]
[139.56423950 -33.34891510]
[138.53407288 -18.38608360]
[147.55160522 -30.37291527]
[156.56913757 -42.35974884]
[155.75627136 -58.38219452]
[167.87126160 -68.89916229]
[183.62051392 -65.84293365]
[190.92256165 -51.55799103]
[184.17588806 -37.00251007]
[168.55596924 -33.34221649]
[159.53843689 -21.35538483]
[150.52090454 -9.36855316]
[143.47576904 3.87403250]
[138.57421875 18.05059052]
[133.67266846 32.22714996]
[128.77111816 46.40370560]
[123.86956787 60.58026505]
[118.96801758 74.75682068]
[128.47637939 86.35816193]
[143.33941650 84.33583069]
[158.20246887 82.31349182]
[173.06552124 80.29116058]
[187.92855835 78.26882935]
[202.79161072 76.24649048]
[217.67094421 68.11988831]
[229.59896851 80.16806793]
[221.32363892 94.96520233]
[204.81394958 91.10953522]
[189.95089722 93.13187408]
[175.08784485 95.15420532]
[160.22480774 97.17654419]
[145.36175537 99.19887543]
[130.49870300 101.22121429]
[118.20319366 122.78125763]
[94.95598602 127.33663940]
[97.74830627 142.07444763]
[100.54063416 156.81225586]
[109.31159210 144.64384460]
[123.80825043 140.79067993]
[137.46348572 146.99830627]
[144.09133911 160.45458984]
[140.68933105 175.06370544]
[128.79859924 184.20758057]
[113.80576324 183.74395752]
[102.50253296 173.88250732]
[103.12651062 188.86952209]
[103.75048828 203.85653687]
[104.37446594 218.84355164]
[104.99844360 233.83056641]
[105.62242126 248.81758118]
[106.24639893 263.80459595]
[106.87037659 278.79162598]
[107.49435425 293.77862549]
[108.11833191 308.76565552]
[122.87133026 311.89608765]
[136.38197327 318.59783936]
[147.80094910 328.44964600]
[156.41046143 340.83215332]
[161.66931152 354.96707153]
[163.24691772 369.96578979]
[161.04411316 384.88552856]
[155.19937134 398.78839111]
[146.08007812 410.80044556]
[134.25950623 420.16662598]
[120.48070526 426.29809570]
[105.60980225 428.80950928]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 121]
[22 120]
[23 119]
[24 61]
[25 60]
[26 59]
[65 102]
[66 101]
[67 100]
[68 99]
[69 98]
[70 97]
[86 96]
[87 95]
[88 94]
[103 117]
[104 116]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
