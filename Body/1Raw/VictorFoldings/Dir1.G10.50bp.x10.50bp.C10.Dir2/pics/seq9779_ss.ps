%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACCACCCGGGGGGGGGGACAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUUUUUAACCAAAUCAACxxxxxxxxxxUCAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUACCCCCCCCCCACAACCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 350.98458862]
[71.19830322 344.96856689]
[59.48964310 335.43914795]
[50.78712082 323.10348511]
[45.73651886 308.87695312]
[44.71262741 293.81527710]
[47.79142761 279.03610229]
[54.74444962 265.63616943]
[65.05573273 254.60984802]
[77.96011353 246.77534485]
[92.50000000 242.71401978]
[92.50000000 227.71401978]
[92.50000000 212.71401978]
[92.50000000 197.71401978]
[92.50000000 182.71401978]
[92.50000000 167.71401978]
[92.50000000 152.71401978]
[92.50000000 137.71401978]
[92.50000000 122.71402740]
[92.50000000 107.71402740]
[88.34210968 93.30181122]
[80.35219574 80.60688019]
[72.36228180 67.91194916]
[64.37236023 55.21702194]
[56.38244629 42.52209091]
[43.05574036 49.42610931]
[29.19805717 55.19075394]
[14.90659809 59.77559280]
[0.28160921 63.14846039]
[-14.57432365 65.28570557]
[-29.55699539 66.17232513]
[-44.56130981 65.80211639]
[-59.48202515 64.17766571]
[-74.21447754 61.31036377]
[-88.65532684 57.22033310]
[-102.70328522 51.93625641]
[-116.25981140 45.49520111]
[-129.22981262 37.94234467]
[-141.52230835 29.33066940]
[-153.05108643 19.72057724]
[-163.73527527 9.17948055]
[-173.49992371 -2.21868443]
[-182.27655029 -14.39396477]
[-190.00357056 -27.26095772]
[-196.62681580 -40.72941208]
[-202.09980774 -54.70484924]
[-206.38415527 -69.08924866]
[-209.44982910 -83.78170013]
[-211.27528381 -98.67916107]
[-211.84776306 -113.67712402]
[-211.16320801 -128.67037964]
[-209.22645569 -143.55378723]
[-206.05107117 -158.22291565]
[-201.65931702 -172.57489014]
[-196.08203125 -186.50903320]
[-189.35832214 -199.92761230]
[-181.53533936 -212.73649597]
[-172.66795349 -224.84584045]
[-162.81838989 -236.17070007]
[-152.05572510 -246.63165283]
[-140.45544434 -256.15530396]
[-128.09892273 -264.67486572]
[-115.07283020 -272.13058472]
[-101.46854401 -278.47012329]
[-87.38149261 -283.64907837]
[-72.91047668 -287.63104248]
[-58.15700150 -290.38815308]
[-43.22456360 -291.90106201]
[-28.21790123 -292.15911865]
[-13.24227524 -291.16052246]
[1.59726918 -288.91232300]
[16.19664001 -285.43023682]
[30.45343399 -280.73870850]
[44.26764679 -274.87066650]
[57.54238129 -267.86721802]
[70.18451691 -259.77755737]
[82.10539246 -250.65837097]
[93.22137451 -240.57366943]
[103.45449066 -229.59414673]
[112.73297882 -217.79684448]
[120.99173737 -205.26451111]
[128.17285156 -192.08505249]
[134.22593689 -178.35090637]
[139.10853577 -164.15841675]
[142.78640747 -149.60713196]
[145.23374939 -134.79913330]
[146.43339539 -119.83826447]
[146.37693787 -104.82949066]
[145.06475830 -89.87808228]
[142.50608826 -75.08890533]
[138.71884155 -60.56570435]
[133.72959900 -46.41035461]
[127.57334900 -32.72213745]
[120.29328918 -19.59707642]
[111.94047546 -7.12723207]
[102.57349396 4.59992790]
[92.25805664 15.50214291]
[81.06652069 25.50294304]
[69.07737732 34.53217697]
[77.06729126 47.22710419]
[85.05721283 59.92203522]
[93.04712677 72.61696625]
[101.03704071 85.31189728]
[100.90298462 70.31249237]
[103.93635559 55.62240601]
[110.00060272 41.90289688]
[118.82274628 29.77154541]
[130.00567627 19.77443695]
[143.04598999 12.36158657]
[157.35667419 7.86667967]
[172.29354858 6.49205160]
[187.18424988 8.29958153]
[201.35845947 13.20790386]
[214.17814636 20.99607277]
[225.06623840 31.31350708]
[233.53260803 43.69577408]
[239.19615173 57.58549500]
[241.80192566 72.35742950]
[241.23263550 87.34661865]
[237.51390076 101.87834167]
[230.81311035 115.29846191]
[221.43191528 127.00286865]
[209.79260254 136.46470642]
[196.41909790 143.25804138]
[181.91342163 147.07708740]
[166.92851257 147.74992371]
[152.13893127 145.24627686]
[138.21041870 139.67883301]
[125.76995087 131.29821777]
[115.37754059 120.48165894]
[107.50000000 107.71402740]
[107.50000000 122.71402740]
[107.50000000 137.71401978]
[107.50000000 152.71401978]
[107.50000000 167.71401978]
[107.50000000 182.71401978]
[107.50000000 197.71401978]
[107.50000000 212.71401978]
[107.50000000 227.71401978]
[107.50000000 242.71401978]
[122.03988647 246.77534485]
[134.94427490 254.60984802]
[145.25555420 265.63616943]
[152.20857239 279.03610229]
[155.28736877 293.81527710]
[154.26348877 308.87695312]
[149.21287537 323.10348511]
[140.51036072 335.43914795]
[128.80169678 344.96856689]
[114.95575714 350.98458862]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 103]
[22 102]
[23 101]
[24 100]
[25 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
