%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUAUGCCUGGGGGGGGGGAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCUCAxxxxxxxxxxGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACCCCCCCCCCCUACUAGGCCU\
) } def
/len { sequence length } bind def

/coor [
[67.94485474 381.79226685]
[53.92290878 376.23925781]
[41.72294998 367.37292480]
[32.11188126 355.75061035]
[25.69385338 342.10290527]
[22.87231636 327.28771973]
[23.82463264 312.23632812]
[28.49093819 297.89492798]
[36.57790375 285.16494751]
[47.57717896 274.84667969]
[60.79733658 267.58871460]
[75.40734863 263.84725952]
[75.40734863 248.84727478]
[75.40734863 233.84727478]
[75.40734863 218.84727478]
[75.40734863 203.84727478]
[75.40734863 188.84727478]
[75.40734863 173.84727478]
[75.40734863 158.84727478]
[75.40734863 143.84727478]
[75.40734863 128.84727478]
[81.37205505 88.77432251]
[74.00582123 75.70762634]
[66.63957977 62.64093018]
[59.27333832 49.57423401]
[51.90710068 36.50754166]
[44.54085922 23.44084549]
[27.14004135 33.83820343]
[12.49260998 22.95440102]
[-2.46867061 21.87733078]
[-17.42995071 20.80026054]
[-32.39123154 19.72319031]
[-47.35251236 18.64612198]
[-62.33275223 17.87646103]
[-77.32563782 17.41453552]
[-87.60575867 29.19812965]
[-103.06305695 31.56586456]
[-116.39905548 23.39976692]
[-121.31690979 8.55562019]
[-115.49456024 -5.95762491]
[-101.68114471 -13.28725719]
[-86.39893341 -9.97244835]
[-76.86371613 2.42164946]
[-61.87082672 2.88357544]
[-57.80046082 0.27947542]
[-52.03965759 0.24734046]
[-46.27544403 3.68484044]
[-31.31416130 4.76191044]
[-16.35288239 5.83898020]
[-1.39160073 6.91604996]
[13.56968021 7.99311972]
[23.93661118 -0.73230177]
[38.79969406 1.56598043]
[38.79969406 -13.43401909]
[38.79969406 -28.43401909]
[38.79969406 -43.43402100]
[23.93868637 -45.67189407]
[9.57723141 -50.09978867]
[-3.96382999 -56.61878586]
[-16.38198662 -65.08324432]
[-27.39981079 -75.30406952]
[-36.77116013 -87.05291748]
[-44.28667831 -100.06731415]
[-49.77846146 -114.05652618]
[-53.12382126 -128.70802307]
[-54.24802780 -143.69447327]
[-53.12595749 -158.68109131]
[-49.78268051 -173.33305359]
[-44.29289246 -187.32304382]
[-36.77922821 -200.33851624]
[-27.40955162 -212.08869934]
[-16.39318275 -222.31109619]
[-3.97623253 -230.77732849]
[9.56390095 -237.29824829]
[23.92472458 -241.72817993]
[38.78541565 -243.96818542]
[53.81397629 -243.96818542]
[68.67466736 -241.72817993]
[83.03549194 -237.29824829]
[96.57562256 -230.77732849]
[108.99257660 -222.31109619]
[120.00894165 -212.08869934]
[129.37861633 -200.33851624]
[136.89228821 -187.32304382]
[142.38208008 -173.33305359]
[145.72534180 -158.68109131]
[146.84741211 -143.69447327]
[145.72322083 -128.70802307]
[142.37785339 -114.05652618]
[136.88606262 -100.06731415]
[129.37054443 -87.05291748]
[119.99919891 -75.30406952]
[108.98137665 -65.08324432]
[96.56322479 -56.61878586]
[83.02215576 -50.09978867]
[68.66070557 -45.67189407]
[53.79969406 -43.43402100]
[53.79969406 -28.43401909]
[53.79969406 -13.43401909]
[53.79969406 1.56598043]
[57.60755539 16.07460594]
[64.97379303 29.14130020]
[72.34003448 42.20799637]
[79.70627594 55.27468872]
[87.07250977 68.34138489]
[94.43875122 81.40808105]
[97.84752655 66.80053711]
[111.73004150 61.11936951]
[124.40158081 69.14633179]
[125.19667053 84.12524414]
[113.44602203 93.44857788]
[128.40730286 94.52564240]
[143.36859131 95.60271454]
[155.15196228 85.07048798]
[170.92655945 86.03858948]
[181.33361816 97.93265533]
[180.19880676 113.69614410]
[168.19537354 123.97686768]
[152.44476318 122.67544556]
[142.29151917 110.56399536]
[127.33023834 109.48692322]
[112.36895752 108.40985870]
[106.87855530 113.51921082]
[119.49193573 121.63724518]
[133.75987244 126.26609039]
[139.95477295 139.92709351]
[134.03608704 153.71002197]
[119.86420441 158.62510681]
[106.68260193 151.46652222]
[103.08913422 136.90165710]
[95.89775085 123.73791504]
[90.40734863 128.84727478]
[90.40734863 143.84727478]
[90.40734863 158.84727478]
[90.40734863 173.84727478]
[90.40734863 188.84727478]
[90.40734863 203.84727478]
[90.40734863 218.84727478]
[90.40734863 233.84727478]
[90.40734863 248.84727478]
[90.40734863 263.84725952]
[105.01736450 267.58871460]
[118.23752594 274.84667969]
[129.23680115 285.16494751]
[137.32376099 297.89492798]
[141.99006653 312.23632812]
[142.94238281 327.28771973]
[140.12084961 342.10290527]
[133.70281982 355.75061035]
[124.09175110 367.37292480]
[111.89179230 376.23925781]
[97.86985016 381.79226685]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 106]
[23 105]
[24 104]
[25 103]
[26 102]
[27 101]
[29 51]
[30 50]
[31 49]
[32 48]
[33 47]
[34 44]
[35 43]
[53 100]
[54 99]
[55 98]
[56 97]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
