%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUAGCAGCAGGGGGGGGGGGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAxxxxxxxxxxCCAAACAACAAAGCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACCCCCCCCCCCUCCUAGCCGCAG\
) } def
/len { sequence length } bind def

/coor [
[65.42491913 436.45681763]
[51.72438812 430.19238281]
[39.76163483 421.03594971]
[30.13671494 409.44680786]
[23.33240509 396.00622559]
[19.69001198 381.38839722]
[19.39223289 366.32656860]
[22.45400620 351.57620239]
[28.72175217 337.87716675]
[37.88108444 325.91665649]
[49.47257996 316.29452515]
[62.91480255 309.49346924]
[77.53350830 305.85461426]
[77.23337555 290.85763550]
[76.93324280 275.86062622]
[76.63311005 260.86364746]
[76.33297729 245.86663818]
[76.03284454 230.86964417]
[75.73271179 215.87265015]
[75.43258667 200.87564087]
[75.13245392 185.87864685]
[74.83232117 170.88165283]
[66.84191132 158.31173706]
[74.30153656 144.35951233]
[74.00140381 129.36251831]
[81.55389404 86.85129547]
[75.43457031 73.15626526]
[69.31524658 59.46123123]
[63.05921173 45.82810974]
[56.66709137 32.25826263]
[50.27496719 18.68841362]
[43.88284683 5.11856461]
[38.49724960 19.11839867]
[25.45514488 26.52808571]
[10.67197514 23.98684883]
[0.85287255 12.64730644]
[0.45144153 -2.34732151]
[9.64975643 -14.19599247]
[24.27578163 -17.52456093]
[37.69646835 -10.82246399]
[33.26148605 -25.15183640]
[28.82650185 -39.48120880]
[24.39151764 -53.81058121]
[12.91990471 -64.70611572]
[16.54826546 -79.15202332]
[10.99150753 -86.47393799]
[12.17099857 -93.81265259]
[8.02361584 -108.22789764]
[-6.83101559 -105.99296570]
[-21.85028267 -105.71612549]
[-36.77718353 -107.40213013]
[-51.35630417 -111.02211761]
[-65.33817291 -116.51414490]
[-78.48354340 -123.78424072]
[-90.56747437 -132.70800781]
[-101.38320923 -143.13273621]
[-110.74565887 -154.88005066]
[-118.49462891 -167.74894714]
[-124.49752045 -181.51921082]
[-128.65162659 -195.95523071]
[-130.88584900 -210.80996704]
[-131.16197205 -225.82923889]
[-129.47526550 -240.75607300]
[-125.85458374 -255.33500671]
[-120.36188507 -269.31661987]
[-113.09116364 -282.46163940]
[-104.16682434 -294.54516602]
[-93.74158478 -305.36038208]
[-81.99382019 -314.72229004]
[-69.12454987 -322.47064209]
[-55.35400009 -328.47286987]
[-40.91778946 -332.62628174]
[-26.06294441 -334.85980225]
[-11.04365158 -335.13522339]
[3.88309026 -333.44778442]
[18.46186447 -329.82641602]
[32.44321060 -324.33306885]
[45.58788681 -317.06170654]
[57.67097092 -308.13681030]
[68.48571014 -297.71102905]
[77.84704590 -285.96282959]
[85.59478760 -273.09320068]
[91.59637451 -259.32235718]
[95.74909973 -244.88595581]
[97.98191071 -230.03100586]
[98.25659943 -215.01168823]
[96.56847382 -200.08503723]
[92.94640350 -185.50642395]
[87.45237732 -171.52534485]
[80.18040466 -158.38101196]
[71.25491333 -146.29835510]
[60.82863998 -135.48411560]
[49.07998657 -126.12333679]
[36.20998383 -118.37620544]
[22.43885803 -112.37527466]
[26.58624077 -97.96003723]
[30.87763786 -83.58700562]
[42.03203201 -73.71640778]
[38.72089005 -58.24556732]
[43.15587234 -43.91619492]
[47.59085846 -29.58682060]
[52.02584076 -15.25744820]
[57.45269775 -1.27355599]
[63.84481812 12.29629230]
[70.23693848 25.86614227]
[76.62905884 39.43598938]
[82.35657501 44.17344666]
[83.01027679 53.34190750]
[89.12960052 67.03694153]
[95.24892426 80.73197174]
[99.75209045 66.42387390]
[114.02431488 61.80830002]
[126.05286407 70.77010345]
[125.71347046 85.76626587]
[113.29171753 94.17472839]
[128.16502380 96.12021637]
[143.03831482 98.06571198]
[154.43562317 87.35891724]
[170.05146790 86.53470612]
[182.51252747 95.98223877]
[185.93507385 111.24068451]
[178.70309448 125.10546875]
[164.23127747 131.03007507]
[149.35281372 126.21706390]
[141.09281921 112.93901062]
[126.21952057 110.99351501]
[111.34622192 109.04802704]
[105.75926971 114.05162048]
[108.83908844 128.73204041]
[94.58535767 124.05879974]
[88.99839783 129.06239319]
[89.29853058 144.05938721]
[97.31040955 157.70198059]
[89.82931519 170.58152771]
[90.12944794 185.57852173]
[90.42958069 200.57551575]
[90.72971344 215.57250977]
[91.02984619 230.56950378]
[91.32997894 245.56651306]
[91.63011169 260.56350708]
[91.93024445 275.56048584]
[92.23036957 290.55749512]
[92.53050232 305.55450439]
[107.28308868 308.60552979]
[120.98666382 314.86334229]
[132.95385742 324.01397705]
[142.58438110 335.59844971]
[149.39520264 349.03573608]
[153.04467773 363.65179443]
[153.34976196 378.71350098]
[150.29513550 393.46533203]
[144.03402710 407.16738892]
[134.88049316 419.13235474]
[123.29366302 428.76010132]
[109.85473633 435.56765747]
[95.23780060 439.21359253]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 143]
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[24 132]
[25 131]
[26 110]
[27 109]
[28 108]
[29 106]
[30 105]
[31 104]
[32 103]
[40 102]
[41 101]
[42 100]
[43 99]
[45 97]
[47 96]
[48 95]
[115 127]
[116 126]
[117 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
