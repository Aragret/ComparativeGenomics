%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUUGCUCAUCGGGGGGGGGGAGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUCAAGCAAUxxxxxxxxxxACCCCAGUCUCAGCCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCCCCCCCCCCCUUCUUACUCAUC\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 411.24285889]
[70.75619507 406.43341064]
[57.85220718 398.66802979]
[46.91955185 388.30987549]
[38.46956635 375.84344482]
[32.89747238 361.85180664]
[30.46388245 346.98937988]
[31.28262329 331.95132446]
[35.31539917 317.44094849]
[42.37359238 304.13696289]
[52.12707901 292.66162109]
[64.11966705 283.55163574]
[77.79044342 277.23309326]
[92.50000000 274.00152588]
[92.50000000 259.00152588]
[92.50000000 244.00152588]
[92.50000000 229.00152588]
[92.50000000 214.00152588]
[92.50000000 199.00152588]
[92.50000000 184.00152588]
[92.50000000 169.00152588]
[92.50000000 154.00152588]
[92.50000000 139.00152588]
[92.50000000 124.00152588]
[68.87021637 102.98677063]
[82.26131439 67.07497406]
[67.97703552 62.49684525]
[53.69274902 57.91872025]
[39.40846634 53.34059525]
[25.07909393 48.90560913]
[10.70606709 44.61421204]
[11.61867142 52.39825439]
[9.55914783 60.86333466]
[4.33580017 69.05965424]
[-3.96725297 76.00045013]
[-14.98627949 80.73727417]
[-29.98552895 80.58720398]
[-43.99531555 89.11116791]
[-58.25035095 81.00401306]
[-58.08628082 64.60568237]
[-43.67188263 56.78537750]
[-29.83545494 65.58795166]
[-14.83620644 65.73802948]
[-12.76251507 58.53040695]
[-6.54144192 36.90754318]
[-22.35044289 36.28619766]
[-29.15287018 23.03567696]
[-41.93854904 15.19180107]
[-54.72423172 7.34792566]
[-69.49788666 12.47366333]
[-84.09142303 6.85560942]
[-91.61423492 -6.85356188]
[-88.51426697 -22.18079948]
[-76.25523376 -31.88905144]
[-60.62547684 -31.39437485]
[-49.00488663 -20.93034554]
[-46.88035583 -5.43775415]
[-34.09467316 2.40612125]
[-21.30899429 10.24999714]
[-6.41451120 10.31029606]
[1.30243349 24.12186241]
[14.99746418 30.24118614]
[29.37049103 34.53258514]
[36.72063828 33.42657471]
[43.98659134 39.05630875]
[58.27087402 43.63443756]
[72.55516052 48.21256256]
[86.83944702 52.79068756]
[99.70296478 45.07512283]
[102.38975525 30.31771278]
[88.58284760 24.27899361]
[76.54109955 15.21847343]
[66.91390228 3.62477756]
[60.22043991 -9.87686157]
[56.82167816 -24.55831718]
[56.90091324 -39.62783813]
[60.45386887 -54.27274323]
[67.28894043 -67.70324707]
[77.03752136 -79.19506836]
[89.17388153 -88.12846375]
[103.04351807 -94.02165985]
[117.89846802 -96.55685425]
[132.93762207 -95.59732056]
[147.34992981 -91.19480896]
[160.35815430 -83.58673859]
[171.26078796 -73.18340302]
[179.46984863 -60.54584503]
[184.54264832 -46.35558701]
[186.20561218 -31.37789345]
[184.36906433 -16.42049599]
[179.13203430 -2.29002285]
[170.77696228 10.25148392]
[159.75440979 20.52767754]
[146.65882874 27.98437691]
[132.19642639 32.21944809]
[117.14716339 33.00450516]
[114.46037292 47.76191330]
[119.35117340 53.44786835]
[127.14383698 40.63091278]
[141.74154663 44.08154297]
[142.97071838 59.03109741]
[129.13278198 64.81977081]
[134.02357483 70.50572968]
[149.01681519 70.05556488]
[164.01007080 69.60540771]
[179.41003418 59.55705643]
[194.53979492 68.40129089]
[209.52102661 67.65122223]
[224.49401855 66.75130463]
[239.45724487 65.70162964]
[254.42047119 64.65195465]
[261.74212646 51.07268143]
[275.25405884 43.62746429]
[290.64465332 44.69205093]
[303.00280762 53.92673111]
[308.38510132 68.38475800]
[305.07406616 83.45262146]
[294.12622070 94.32221985]
[279.03500366 97.52511597]
[264.61596680 92.03926086]
[255.47013855 79.61518097]
[240.50691223 80.66485596]
[225.54368591 81.71453094]
[219.05499268 85.34009552]
[210.27110291 82.63245392]
[195.28987122 83.38252258]
[186.91362000 92.15827942]
[174.40095520 92.87445831]
[164.46022034 84.59864807]
[149.46697998 85.04881287]
[134.47373962 85.49897003]
[128.36190796 113.17522430]
[107.50000000 124.00152588]
[107.50000000 139.00152588]
[107.50000000 154.00152588]
[107.50000000 169.00152588]
[107.50000000 184.00152588]
[107.50000000 199.00152588]
[107.50000000 214.00152588]
[107.50000000 229.00152588]
[107.50000000 244.00152588]
[107.50000000 259.00152588]
[107.50000000 274.00152588]
[122.20955658 277.23309326]
[135.88034058 283.55163574]
[147.87292480 292.66162109]
[157.62640381 304.13696289]
[164.68460083 317.44094849]
[168.71737671 331.95132446]
[169.53611755 346.98937988]
[167.10252380 361.85180664]
[161.53042603 375.84344482]
[153.08044434 388.30987549]
[142.14779663 398.66802979]
[129.24380493 406.43341064]
[114.97203827 411.24285889]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[26 68]
[27 67]
[28 66]
[29 65]
[30 63]
[31 62]
[36 43]
[37 42]
[45 61]
[47 59]
[48 58]
[49 57]
[69 97]
[70 96]
[103 131]
[104 130]
[105 129]
[107 126]
[108 125]
[109 123]
[110 122]
[111 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
