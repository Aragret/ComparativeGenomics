%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAAGAUUAGGGGGGGGGGCACAUGCAAGCAUCCCCGUUCCAGUGAGUUCACCCUCUAAAUCACCACGAxxxxxxxxxxACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCCCCCCCCCCCAGUAAUAUUA\
) } def
/len { sequence length } bind def

/coor [
[79.20977783 471.15625000]
[65.98958588 463.88378906]
[55.10277939 453.43679810]
[47.29164886 440.52752686]
[43.08876801 426.03622437]
[42.78069687 410.95086670]
[46.38843536 396.30004883]
[53.66601181 383.08267212]
[64.11721802 372.19989014]
[77.02947998 364.39376831]
[91.52241516 360.19647217]
[91.21035767 345.19970703]
[90.89830017 330.20297241]
[90.58625031 315.20620728]
[90.27419281 300.20944214]
[89.96213531 285.21270752]
[89.65007782 270.21594238]
[89.33802032 255.21919250]
[89.02596283 240.22244263]
[88.71391296 225.22569275]
[88.40185547 210.22892761]
[86.06307983 207.50907898]
[84.96000671 203.49847412]
[85.69500732 198.80676270]
[88.56762695 194.29371643]
[89.19160461 179.30670166]
[78.94918060 168.55363464]
[79.36848450 153.34577942]
[90.71672821 142.67549133]
[91.34070587 127.68847656]
[82.72727203 124.06053925]
[75.55230713 117.77433777]
[70.62775421 109.38008881]
[68.56046295 99.67267609]
[69.67980957 89.61672211]
[73.99216461 80.25077057]
[81.16815186 72.58007050]
[90.56515503 67.46902466]
[82.31286621 54.94306183]
[72.44714355 43.64405823]
[61.14813614 33.77833557]
[43.75167465 35.29508972]
[30.87251472 24.00742912]
[30.12509155 7.23544931]
[18.62328911 -2.39307690]
[7.12148523 -12.02160358]
[-4.38031816 -21.65012932]
[-19.92869568 -24.57562447]
[-24.72121429 -38.67814255]
[-36.22301865 -48.30666733]
[-51.24152374 -44.40486145]
[-65.67283630 -50.10721588]
[-73.96781921 -63.22105789]
[-72.93688965 -78.70384979]
[-62.97645187 -90.60214233]
[-47.91650009 -94.34078979]
[-33.54789734 -88.48222351]
[-25.39566040 -75.27916718]
[-26.59449196 -59.80847168]
[-15.09268856 -50.17994690]
[-0.36699674 -47.94314957]
[5.24820805 -33.15193176]
[16.75001144 -23.52340698]
[28.25181389 -13.89488029]
[39.75362015 -4.26635408]
[52.34160233 -7.18858767]
[64.48785400 -2.23450279]
[71.65115356 8.98668289]
[71.01386261 22.47933006]
[82.31286621 32.34505081]
[78.60424805 17.81074142]
[81.01625061 3.00593615]
[89.14648438 -9.59959030]
[101.63864899 -17.90295410]
[116.40876770 -20.51896477]
[130.99285889 -17.01121712]
[142.95796204 -7.96487904]
[150.30804443 5.11091614]
[151.81692505 20.03483200]
[147.23289490 34.31722641]
[137.32069397 45.57546997]
[123.73387146 51.93144226]
[108.73903656 52.32482147]
[94.83882904 46.69077301]
[103.09111786 59.21673584]
[117.58670807 63.07389450]
[130.97299194 56.30577850]
[144.35928345 49.53766632]
[157.74555969 42.76955032]
[171.13185120 36.00143433]
[172.08251953 20.73567200]
[180.49113464 8.07897663]
[194.01605225 1.37504566]
[208.98052979 2.33458877]
[221.37200928 10.59997463]
[234.75830078 3.83186030]
[248.14457703 -2.93625450]
[261.53085327 -9.70436954]
[274.91714478 -16.47248459]
[281.26828003 -31.20485497]
[296.78366089 -35.28564072]
[309.56118774 -25.58441353]
[309.79907227 -9.54312515]
[297.31481934 0.53272283]
[281.68527222 -3.08619928]
[268.29898071 3.68191552]
[254.91270447 10.45003033]
[241.52641296 17.21814537]
[228.14012146 23.98625946]
[227.45054626 38.86544037]
[219.35202026 51.48565292]
[205.93522644 58.40347290]
[190.75755310 57.67201996]
[177.89996338 49.38771820]
[164.51368713 56.15583420]
[151.12739563 62.92395020]
[137.74110413 69.69206238]
[124.35482788 76.46018219]
[130.96612549 88.88827515]
[131.82687378 102.53031921]
[127.11817169 114.92742157]
[117.99561310 123.98211670]
[106.32772064 128.31245422]
[105.70374298 143.29946899]
[116.12574768 154.87615967]
[115.27944946 170.06622314]
[104.17861938 179.93067932]
[103.55464172 194.91769409]
[103.39860535 209.91687012]
[103.71066284 224.91363525]
[104.02272034 239.91038513]
[104.33477783 254.90713501]
[104.64683533 269.90390015]
[104.95888519 284.90063477]
[105.27094269 299.89739990]
[105.58300018 314.89416504]
[105.89505768 329.89089966]
[106.20711517 344.88766479]
[106.51917267 359.88439941]
[121.17416382 363.47518921]
[134.39997864 370.73742676]
[145.29484558 381.17602539]
[153.11593628 394.07925415]
[157.33000183 408.56732178]
[157.64973450 423.65240479]
[154.05329895 438.30599976]
[146.78593445 451.52902222]
[136.34313965 462.41986084]
[123.43690491 470.23596191]
[108.94721985 474.44445801]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[25 128]
[26 127]
[29 124]
[30 123]
[38 85]
[39 84]
[40 70]
[41 69]
[44 65]
[45 64]
[46 63]
[47 62]
[49 60]
[50 59]
[86 118]
[87 117]
[88 116]
[89 115]
[90 114]
[95 109]
[96 108]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
