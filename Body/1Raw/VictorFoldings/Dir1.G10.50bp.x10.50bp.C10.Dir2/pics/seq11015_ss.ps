%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACUACUCAGGGGGGGGGGAAACCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAxxxxxxxxxxCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUCCCCCCCCCCGCACUACUCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 382.02191162]
[71.19830322 376.00588989]
[59.48964310 366.47647095]
[50.78712082 354.14080811]
[45.73651886 339.91427612]
[44.71262741 324.85260010]
[47.79142761 310.07345581]
[54.74444962 296.67352295]
[65.05573273 285.64718628]
[77.96011353 277.81268311]
[92.50000000 273.75137329]
[92.50000000 258.75137329]
[92.50000000 243.75135803]
[92.50000000 228.75135803]
[92.50000000 213.75135803]
[92.50000000 198.75135803]
[92.50000000 183.75135803]
[92.50000000 168.75135803]
[92.50000000 153.75135803]
[92.50000000 138.75135803]
[92.50000000 123.75136566]
[79.14543152 115.72315216]
[72.68215942 100.74065399]
[76.31525421 84.07963562]
[89.51835632 72.15934753]
[79.53562927 60.96358490]
[82.04634857 75.75196838]
[81.58631897 90.74491119]
[78.17366791 105.35154724]
[71.94288635 118.99623108]
[63.13953781 131.14123535]
[52.11054611 141.30790710]
[39.29057312 149.09561157]
[25.18484306 154.19741821]
[10.34926319 156.41226196]
[-4.63150215 155.65286255]
[-19.16706276 151.94915771]
[-32.68457794 145.44709778]
[-44.65132141 136.40292358]
[-54.59569168 125.17308044]
[-62.12578201 112.20011902]
[-66.94483185 97.99530029]
[-68.86292267 83.11844635]
[-67.80447388 68.15583801]
[-63.81118011 53.69714737]
[-57.04042816 40.31219864]
[-47.75904846 28.52847862]
[-36.33282089 18.81038666]
[-23.21204758 11.54091072]
[-8.91381454 7.00653601]
[5.99838638 5.38596296]
[20.93687057 6.74305773]
[35.31291580 11.02433681]
[48.55996323 18.06107712]
[60.15595245 27.57596207]
[69.64270782 39.19223022]
[67.77509308 24.30895042]
[65.90747833 9.42567062]
[61.70977020 1.23841774]
[64.15915680 -5.78626442]
[62.60157776 -20.70517731]
[61.04399490 -35.62408829]
[51.91553116 -48.54622650]
[58.28942108 -62.00812912]
[56.73183823 -76.92704010]
[42.07850266 -80.88231659]
[29.84579849 -89.86704254]
[21.68809891 -102.66612244]
[18.70866585 -117.54857635]
[21.31044197 -132.50167847]
[29.14155960 -145.50314331]
[41.14292526 -154.79461670]
[55.69145203 -159.11953735]
[70.81956482 -157.89295959]
[84.48132324 -151.28077698]
[94.82907867 -140.17724609]
[100.46338654 -126.08402252]
[100.62224579 -110.90709686]
[95.28417206 -96.69901276]
[85.17110443 -85.38131714]
[71.65074921 -78.48461914]
[73.20832825 -63.56571198]
[82.22538757 -51.71067047]
[75.96290588 -37.18167114]
[77.52049255 -22.26275826]
[79.07807159 -7.34384537]
[80.79075623 7.55805683]
[82.65837097 22.44133759]
[84.52598572 37.32461548]
[90.73139191 50.98085785]
[100.71411896 62.17662430]
[115.35762024 65.42745209]
[129.13999939 59.50748825]
[142.92237854 53.58752441]
[156.70475769 47.66756058]
[155.82191467 32.53493500]
[160.17094421 18.01385498]
[169.22668457 5.85781431]
[181.89561462 -2.46528649]
[196.64790344 -5.95039320]
[211.70213318 -4.17666149]
[225.24043274 2.64172125]
[235.62797546 13.68140221]
[241.61044312 27.60928726]
[242.46539307 42.74351501]
[238.08961487 57.25655365]
[229.01148987 69.39588928]
[216.32723999 77.69562531]
[201.56855774 81.15354156]
[186.51762390 79.35206604]
[172.99191284 72.50875092]
[162.62472534 61.44994354]
[148.84234619 67.36990356]
[135.05996704 73.28987122]
[121.27758026 79.20983124]
[125.49633789 90.16384888]
[124.88993073 100.93192291]
[139.01473999 105.98067474]
[153.13954163 111.02943420]
[169.16699219 107.55775452]
[179.98541260 119.88227844]
[174.46572876 135.32460022]
[158.28611755 137.99896240]
[148.09077454 125.15423584]
[133.96597290 120.10548401]
[119.84117889 115.05672455]
[117.29774475 117.92108154]
[114.34517670 120.36155701]
[111.05330658 122.32042694]
[107.50000000 123.75136566]
[107.50000000 138.75135803]
[107.50000000 153.75135803]
[107.50000000 168.75135803]
[107.50000000 183.75135803]
[107.50000000 198.75135803]
[107.50000000 213.75135803]
[107.50000000 228.75135803]
[107.50000000 243.75135803]
[107.50000000 258.75137329]
[107.50000000 273.75137329]
[122.03988647 277.81268311]
[134.94427490 285.64718628]
[145.25555420 296.67352295]
[152.20857239 310.07345581]
[155.28736877 324.85260010]
[154.26348877 339.91427612]
[149.21287537 354.14080811]
[140.51036072 366.47647095]
[128.80169678 376.00588989]
[114.95575714 382.02191162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 91]
[26 90]
[56 89]
[57 88]
[58 87]
[60 86]
[61 85]
[62 84]
[64 82]
[65 81]
[92 115]
[93 114]
[94 113]
[95 112]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
