%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUACUAAUAAUGGGGGGGGGGUAUUACAUUUUGACUACCACAACUCAACGGCUACAUAGAAAAAUCCACCCxxxxxxxxxxGAGCAAUCUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGUACCCCCCCCCCACUACUACUAAU\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 430.11349487]
[70.87159729 424.95846558]
[58.28185654 416.67626953]
[47.94191742 405.71350098]
[40.40940475 392.66137695]
[36.09054184 378.22378540]
[35.21823120 363.17932129]
[37.83952332 348.33932495]
[43.81304932 334.50408936]
[52.81666565 322.41973877]
[64.36482239 312.73794556]
[77.83473969 305.98086548]
[92.50000000 302.51290894]
[92.50000000 287.51290894]
[92.50000000 272.51290894]
[92.50000000 257.51290894]
[92.50000000 242.51289368]
[92.50000000 227.51289368]
[92.50000000 212.51289368]
[92.50000000 197.51289368]
[92.50000000 182.51289368]
[92.50000000 167.51289368]
[92.50000000 152.51289368]
[92.50000000 137.51289368]
[92.50000000 122.51290131]
[92.50000000 107.51290131]
[91.58848572 92.54061890]
[89.76882935 77.65139771]
[87.94917297 62.76218033]
[86.12951660 47.87296295]
[84.30985260 32.98374176]
[82.18881226 18.13446236]
[79.76725769 3.33121657]
[77.34569550 -11.47202873]
[62.39034653 -10.21843624]
[47.38274002 -10.14209938]
[32.41540527 -11.24348927]
[17.58062935 -13.51581478]
[2.96986794 -16.94506645]
[-11.32679462 -21.51009941]
[-25.22121429 -27.18277168]
[-38.62772369 -33.92810822]
[-51.46367264 -41.70451736]
[-63.64991379 -50.46406174]
[-75.11132050 -60.15272903]
[-85.77722168 -70.71078491]
[-95.58187103 -82.07313538]
[-104.46480560 -94.16973114]
[-112.37126160 -106.92598724]
[-119.25248718 -120.26325226]
[-125.06607056 -134.09930420]
[-129.77616882 -148.34883118]
[-133.35371399 -162.92399597]
[-135.77668762 -177.73490906]
[-137.03012085 -192.69027710]
[-137.10630798 -207.69789124]
[-136.00476074 -222.66520691]
[-133.73228455 -237.49996948]
[-130.30288696 -252.11068726]
[-125.73770905 -266.40731812]
[-120.06489563 -280.30166626]
[-113.31942749 -293.70809937]
[-105.54288483 -306.54397583]
[-96.78321838 -318.73013306]
[-87.09442902 -330.19143677]
[-76.53626251 -340.85723877]
[-65.17381287 -350.66177368]
[-53.07712936 -359.54455566]
[-40.32079315 -367.45089722]
[-26.98345375 -374.33200073]
[-13.14734173 -380.14544678]
[1.10223794 -384.85537720]
[15.67743015 -388.43280029]
[30.48837471 -390.85559082]
[45.44375229 -392.10888672]
[60.45136261 -392.18490601]
[75.41867065 -391.08322144]
[90.25340271 -388.81060791]
[104.86408997 -385.38104248]
[119.16065979 -380.81570435]
[133.05496216 -375.14276123]
[146.46133423 -368.39715576]
[159.29711914 -360.62048340]
[171.48318481 -351.86068726]
[182.94439697 -342.17178345]
[193.61009216 -331.61352539]
[203.41450500 -320.25097656]
[212.29718018 -308.15417480]
[220.20338440 -295.39776611]
[227.08433533 -282.06036377]
[232.89764404 -268.22418213]
[237.60743713 -253.97456360]
[241.18469238 -239.39933777]
[243.60736084 -224.58836365]
[244.86050415 -209.63296509]
[244.93637085 -194.62536621]
[243.83453369 -179.65806580]
[241.56175232 -164.82334900]
[238.13204956 -150.21270752]
[233.56657410 -135.91618347]
[227.89347839 -122.02193451]
[221.14773560 -108.61563110]
[213.37092590 -95.77992249]
[204.61100769 -83.59394836]
[194.92199707 -72.13283539]
[184.36361694 -61.46725464]
[173.00096130 -51.66296005]
[160.90409851 -42.78039551]
[148.14759827 -34.87433243]
[134.81011963 -27.99350739]
[120.97388458 -22.18034935]
[106.72421265 -17.47069550]
[92.14894104 -13.89358521]
[94.57050323 0.90965950]
[96.99205780 15.71290493]
[100.32597351 19.20699120]
[101.46253967 24.85091209]
[99.19907379 31.16408539]
[101.01873016 46.05330658]
[102.83839417 60.94252396]
[104.65805054 75.83174133]
[106.47770691 90.72096252]
[116.83412170 79.86994171]
[131.82450867 79.33283997]
[142.93093872 89.41485596]
[143.84248352 104.38713074]
[134.04116821 115.74205017]
[119.09634399 117.02746582]
[107.50000000 107.51290131]
[107.50000000 122.51290131]
[107.50000000 137.51289368]
[107.50000000 152.51289368]
[107.50000000 167.51289368]
[107.50000000 182.51289368]
[107.50000000 197.51289368]
[107.50000000 212.51289368]
[107.50000000 227.51289368]
[107.50000000 242.51289368]
[107.50000000 257.51290894]
[107.50000000 272.51290894]
[107.50000000 287.51290894]
[107.50000000 302.51290894]
[122.16526031 305.98086548]
[135.63517761 312.73794556]
[147.18333435 322.41973877]
[156.18695068 334.50408936]
[162.16047668 348.33932495]
[164.78176880 363.17932129]
[163.90945435 378.22378540]
[159.59059143 392.66137695]
[152.05809021 405.71350098]
[141.71813965 416.67626953]
[129.12840271 424.95846558]
[114.96779633 430.11349487]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 130]
[26 129]
[27 122]
[28 121]
[29 120]
[30 119]
[31 118]
[32 115]
[33 114]
[34 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
