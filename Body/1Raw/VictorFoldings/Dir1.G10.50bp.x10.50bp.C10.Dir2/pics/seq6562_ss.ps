%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUAACCAUCGGGGGGGGGGUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUxxxxxxxxxxAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUCCCCCCCCCCACCUAACCAAC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 408.74755859]
[71.01555634 403.19454956]
[58.81560135 394.32821655]
[49.20452881 382.70590210]
[42.78650284 369.05822754]
[39.96496582 354.24304199]
[40.91728210 339.19165039]
[45.58358765 324.85021973]
[53.67055511 312.12026978]
[64.66983032 301.80200195]
[77.88998413 294.54403687]
[92.50000000 290.80258179]
[92.50000000 275.80258179]
[92.50000000 260.80258179]
[92.50000000 245.80258179]
[92.50000000 230.80258179]
[92.50000000 215.80258179]
[92.50000000 200.80258179]
[92.50000000 185.80258179]
[92.50000000 170.80258179]
[92.50000000 155.80258179]
[84.83314514 154.22309875]
[77.45944214 151.59556580]
[70.52141571 147.97073364]
[64.15317535 143.41870117]
[58.47780991 138.02745056]
[53.60501480 131.90116882]
[49.62897491 125.15827179]
[46.62654114 117.92910004]
[44.65575027 110.35338593]
[29.67550850 111.12304688]
[14.69526672 111.89270782]
[-0.28497407 112.66236877]
[-15.26521492 113.43202972]
[-30.24545670 114.20169067]
[-45.75348282 121.05278015]
[-56.62987900 108.04738617]
[-47.14362717 93.99578857]
[-31.01511574 99.22145081]
[-16.03487587 98.45178986]
[-1.05463409 97.68212891]
[13.92560673 96.91246796]
[28.90584755 96.14280701]
[43.88608932 95.37314606]
[48.85137558 76.46286011]
[59.98404312 60.39063263]
[75.94174194 49.09440994]
[94.80033875 43.93626785]
[114.28588867 45.53815842]
[119.99055481 31.66527939]
[125.69522095 17.79239845]
[131.39988708 3.91951776]
[123.75703430 -3.50595546]
[118.73246765 -12.86260033]
[116.77710724 -23.26522064]
[118.05266571 -33.73701096]
[122.41848755 -43.30126190]
[129.44671631 -51.07248688]
[138.46411133 -56.33835983]
[136.01118469 -71.13643646]
[133.55825806 -85.93451691]
[131.10531616 -100.73259735]
[116.10919189 -102.54721069]
[102.23229218 -108.51448059]
[90.59956360 -118.15067291]
[82.15400696 -130.67462158]
[77.58027649 -145.07106018]
[77.24913788 -160.17295837]
[81.18744659 -174.75604248]
[89.07592773 -187.63813782]
[100.27510071 -197.77496338]
[113.87710571 -204.34475708]
[128.77928162 -206.81494141]
[143.77357483 -204.98526001]
[157.64447021 -199.00405884]
[169.26751709 -189.35618591]
[177.70048523 -176.82376099]
[182.25975037 -162.42272949]
[182.57571411 -147.32051086]
[178.62277222 -132.74139404]
[170.72134399 -119.86721802]
[159.51199341 -109.74165344]
[145.90339661 -103.18552399]
[148.35632324 -88.38744354]
[150.80926514 -73.58937073]
[153.26219177 -58.79129028]
[162.25726318 -57.03927231]
[170.46063232 -52.95447922]
[177.27951050 -46.83207703]
[190.56686401 -53.79243469]
[203.85420227 -60.75279236]
[217.14154053 -67.71315002]
[230.42887878 -74.67350006]
[215.97306824 -78.67715454]
[206.50791931 -90.31378174]
[205.53218079 -105.28201294]
[213.40649414 -118.04896545]
[227.22019958 -123.89545441]
[241.86718750 -120.66036224]
[251.93331909 -109.53952789]
[253.69773865 -94.64366150]
[246.50901794 -81.47964478]
[260.75570679 -86.17343903]
[275.00241089 -90.86724091]
[283.48178101 -104.48633575]
[299.43249512 -106.20507050]
[310.61853027 -94.70497894]
[308.45892334 -78.80794525]
[294.61032104 -70.70881653]
[279.69619751 -76.62055206]
[265.44952393 -71.92675018]
[251.20281982 -67.23294830]
[237.38923645 -61.38616180]
[224.10189819 -54.42580414]
[210.81455994 -47.46545029]
[197.52722168 -40.50509262]
[184.23986816 -33.54473877]
[182.84790039 -11.13412857]
[167.74705505 5.72334623]
[145.27276611 9.62418079]
[139.56809998 23.49706078]
[133.86343384 37.36994171]
[128.15876770 51.24282455]
[140.38095093 60.76280594]
[149.54591370 73.25340271]
[154.95980835 87.76896667]
[156.21273804 103.21053314]
[153.20983887 118.40902710]
[146.17846680 132.21379089]
[135.65095520 143.57968140]
[122.42433929 151.64617920]
[107.50000000 155.80258179]
[107.50000000 170.80258179]
[107.50000000 185.80258179]
[107.50000000 200.80258179]
[107.50000000 215.80258179]
[107.50000000 230.80258179]
[107.50000000 245.80258179]
[107.50000000 260.80258179]
[107.50000000 275.80258179]
[107.50000000 290.80258179]
[122.11001587 294.54403687]
[135.33016968 301.80200195]
[146.32945251 312.12026978]
[154.41641235 324.85021973]
[159.08271790 339.19165039]
[160.03503418 354.24304199]
[157.21350098 369.05822754]
[150.79547119 382.70590210]
[141.18440247 394.32821655]
[128.98443604 403.19454956]
[114.96250153 408.74755859]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[49 123]
[50 122]
[51 121]
[52 120]
[59 86]
[60 85]
[61 84]
[62 83]
[89 117]
[90 116]
[91 115]
[92 114]
[93 113]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
