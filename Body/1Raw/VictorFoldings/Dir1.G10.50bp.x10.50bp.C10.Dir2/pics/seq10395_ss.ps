%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCACUAUGGGGGGGGGGUAACCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAxxxxxxxxxxAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAAAAAACUCAUACCCCCCCCCCCCCCCAUUAU\
) } def
/len { sequence length } bind def

/coor [
[90.30200195 394.01998901]
[76.45606232 388.00396729]
[64.74739838 378.47454834]
[56.04487610 366.13885498]
[50.99427414 351.91235352]
[49.97038269 336.85067749]
[53.04917908 322.07150269]
[60.00220108 308.67156982]
[70.31348419 297.64523315]
[83.21786499 289.81072998]
[97.75775146 285.74942017]
[97.75775146 270.74942017]
[97.75775146 255.74942017]
[97.75775146 240.74942017]
[97.75775146 225.74942017]
[97.75775146 210.74942017]
[97.75775146 195.74942017]
[97.75775146 180.74942017]
[97.75775146 165.74942017]
[97.75775146 150.74942017]
[97.75775146 135.74942017]
[97.75775146 120.74942017]
[95.33876038 135.55308533]
[85.01973724 146.43968201]
[70.36666870 149.64707947]
[56.44324112 144.06692505]
[48.06101227 131.62754822]
[48.11664581 116.62764740]
[56.59091949 104.25078583]
[70.55535889 98.77406311]
[85.18453979 102.09026337]
[71.28198242 96.45830536]
[57.37942886 90.82634735]
[43.47687149 85.19438934]
[29.57431602 79.56243134]
[15.67175961 73.93048096]
[1.76920378 68.29852295]
[4.75998926 82.99733734]
[-4.70279932 94.63587952]
[-19.70262909 94.70731354]
[-29.27583885 83.15942383]
[-26.42518616 68.43279266]
[-13.23492527 61.29141998]
[-26.47751045 54.24628448]
[-39.72009659 47.20115280]
[-53.60879135 54.12096024]
[-68.90674591 51.52243423]
[-79.73157501 40.40475845]
[-81.92091370 25.04290962]
[-74.63292694 11.34383011]
[-60.66997910 4.57509518]
[-45.40111542 7.33942223]
[-34.69752884 18.57386971]
[-32.67496109 33.95856476]
[-19.43237686 41.00370026]
[-6.18979025 48.04883575]
[7.40116072 54.39596558]
[21.30371666 60.02791977]
[35.20627213 65.65988159]
[49.10882950 71.29183197]
[63.01138306 76.92378998]
[76.91394043 82.55574799]
[90.81649780 88.18770599]
[105.60920715 85.70258331]
[116.90821075 75.83686066]
[128.20721436 65.97113800]
[119.54724121 53.70700836]
[112.19419861 40.61743927]
[106.22603607 26.84119225]
[101.70600891 12.52429962]
[98.68203735 -2.18146920]
[97.18618011 -17.12022591]
[97.23429108 -32.13360977]
[98.82585907 -47.06247330]
[101.94402313 -61.74855804]
[106.55570984 -76.03618622]
[112.61204529 -89.77390289]
[120.04882812 -102.81607819]
[128.78723145 -115.02445221]
[138.73460388 -126.26962280]
[149.78550720 -136.43237305]
[161.82279968 -145.40496826]
[174.71887207 -153.09231567]
[188.33703613 -159.41290283]
[202.53291321 -164.29972839]
[217.15602112 -167.70101929]
[232.05134583 -169.58067322]
[247.06100464 -169.91880798]
[262.02587891 -168.71180725]
[276.78732300 -165.97248840]
[291.18884277 -161.72987366]
[305.07781982 -156.02894592]
[318.30697632 -148.93013000]
[330.73611450 -140.50869751]
[342.23345947 -130.85389709]
[352.67712402 -120.06808472]
[361.95642090 -108.26560211]
[369.97299194 -95.57154846]
[376.64181519 -82.12049866]
[381.89221191 -68.05503082]
[385.66854858 -53.52426147]
[387.93078613 -38.68221283]
[388.65490723 -23.68622589]
[387.83331299 -8.69526291]
[385.47460938 6.13176250]
[381.60388184 20.63767624]
[376.26214600 34.66870499]
[369.50601196 48.07611465]
[361.40710449 60.71778107]
[352.05126953 72.45968628]
[341.53768921 83.17737579]
[329.97781372 92.75721741]
[317.49420166 101.09767151]
[304.21914673 108.11032104]
[290.29342651 113.72082520]
[275.86459351 117.86972046]
[261.08566284 120.51301575]
[246.11326599 121.62268829]
[231.10612488 121.18698120]
[216.22332764 119.21051788]
[201.62265015 115.71424103]
[187.45884705 110.73521423]
[173.88206482 104.32622528]
[161.03623962 96.55519867]
[149.05754089 87.50452423]
[138.07293701 77.27014160]
[126.77393341 87.13587189]
[115.47492981 97.00159454]
[112.75775146 120.74942017]
[112.75775146 135.74942017]
[112.75775146 150.74942017]
[112.75775146 165.74942017]
[112.75775146 180.74942017]
[112.75775146 195.74942017]
[112.75775146 210.74942017]
[112.75775146 225.74942017]
[112.75775146 240.74942017]
[112.75775146 255.74942017]
[112.75775146 270.74942017]
[112.75775146 285.74942017]
[127.29763794 289.81072998]
[140.20202637 297.64523315]
[150.51330566 308.67156982]
[157.46632385 322.07150269]
[160.54512024 336.85067749]
[159.52124023 351.91235352]
[154.47062683 366.13885498]
[145.76811218 378.47454834]
[134.05944824 388.00396729]
[120.21350861 394.01998901]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[31 63]
[32 62]
[33 61]
[34 60]
[35 59]
[36 58]
[37 57]
[43 56]
[44 55]
[45 54]
[64 128]
[65 127]
[66 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
