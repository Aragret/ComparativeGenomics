%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACCAACACACUGGGGGGGGGGAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGxxxxxxxxxxCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCCCCCCCCCCCUAACCAACAAACU\
) } def
/len { sequence length } bind def

/coor [
[120.11591339 404.70077515]
[106.10118103 399.21682739]
[93.42575836 391.10388184]
[82.57685089 380.67376709]
[73.97148132 368.32736206]
[67.94039917 354.53924561]
[64.71542358 339.83938599]
[64.42052460 324.79281616]
[67.06703186 309.97787476]
[72.55322266 295.96401978]
[80.66822052 283.28991699]
[91.10010529 272.44271851]
[103.44789886 263.83932495]
[117.23699951 257.81048584]
[131.93737793 254.58789062]
[131.64102173 239.59082031]
[131.34466553 224.59375000]
[131.04830933 209.59667969]
[130.75195312 194.59960938]
[130.45559692 179.60252380]
[130.15924072 164.60545349]
[129.86286926 149.60838318]
[129.56651306 134.61131287]
[129.27015686 119.61424255]
[110.79084015 133.67312622]
[87.49358368 133.20846558]
[69.46219635 118.31880951]
[54.72566986 121.11788177]
[39.98914719 123.91696167]
[25.25262070 126.71603394]
[19.57576752 141.06095886]
[7.03132772 150.04096985]
[-8.37781334 150.79057312]
[-21.73465538 143.07058716]
[-28.77707863 129.34440613]
[-27.25787163 113.99202728]
[-17.66180801 101.91233063]
[-3.05095530 96.95989990]
[11.91241455 100.71504211]
[22.45354652 111.97950745]
[37.19007111 109.18043518]
[51.92659760 106.38136292]
[66.66312408 103.58228302]
[68.43721771 88.68756866]
[54.77044296 82.50540161]
[42.33849335 91.52439117]
[27.06095314 93.10312653]
[13.04741001 86.81694031]
[4.06743383 74.35677338]
[2.53659344 59.07436371]
[8.86667728 45.08059311]
[21.35492325 36.13971710]
[36.64205933 34.65678787]
[50.61591721 41.03070450]
[59.51760483 53.54691696]
[60.95261002 68.83862305]
[74.61938477 75.02079010]
[101.37955475 64.60424042]
[126.95969391 77.31441498]
[127.25605011 62.31734467]
[127.55241394 47.32027435]
[127.84877014 32.32320023]
[128.14512634 17.32612991]
[118.87579346 1.44360244]
[128.46507263 -13.22667885]
[128.46507263 -28.22667885]
[128.46507263 -43.22667694]
[113.82585907 -46.82623291]
[100.47378540 -53.82520676]
[89.18513489 -63.81668854]
[80.61620331 -76.21978760]
[75.26518250 -90.31340790]
[73.44317627 -105.27815247]
[75.25611115 -120.24400330]
[80.59857941 -134.34086609]
[89.15998840 -146.74916077]
[100.44258881 -156.74748230]
[113.79041290 -163.75454712]
[128.42744446 -167.36297607]
[143.50270081 -167.36297607]
[158.13973999 -163.75454712]
[171.48756409 -156.74748230]
[182.77015686 -146.74916077]
[191.33155823 -134.34086609]
[196.67404175 -120.24400330]
[198.48696899 -105.27815247]
[196.66496277 -90.31340790]
[191.31394958 -76.21978760]
[182.74501038 -63.81668854]
[171.45635986 -53.82520676]
[158.10429382 -46.82623291]
[143.46507263 -43.22667694]
[143.46507263 -28.22667885]
[143.46507263 -13.22667885]
[151.81016541 -4.42366791]
[151.90139771 8.10738850]
[143.14219666 17.62248611]
[142.84584045 32.61956024]
[142.54948425 47.61663055]
[142.25312805 62.61370468]
[141.95677185 77.61077881]
[153.78907776 86.83011627]
[168.25862122 82.87631226]
[182.72814941 78.92250824]
[197.19767761 74.96869659]
[211.66722107 71.01489258]
[214.38000488 55.99478531]
[223.34808350 43.64422226]
[236.79081726 36.41540909]
[252.03913879 35.74363327]
[266.06549072 41.76227570]
[276.08493042 53.27633286]
[280.10809326 67.99967957]
[277.33618164 83.00897980]
[268.31954956 95.32413483]
[254.84844971 102.49995422]
[239.59759521 103.11167908]
[225.59504700 97.03784943]
[215.62103271 85.48442078]
[201.15148926 89.43823242]
[186.68196106 93.39203644]
[172.21241760 97.34584808]
[157.74288940 101.29965210]
[172.33665466 104.76692200]
[187.33444214 105.02513885]
[199.99398804 113.07099152]
[206.59539795 126.54026031]
[205.19889832 141.47511292]
[196.21482849 153.48704529]
[182.28309631 159.04643250]
[167.49743652 156.51971436]
[156.20251465 146.64930725]
[151.71728516 132.33697510]
[144.26722717 119.31788635]
[144.56359863 134.31495667]
[144.85995483 149.31202698]
[145.15631104 164.30909729]
[145.45266724 179.30616760]
[145.74902344 194.30323792]
[146.04537964 209.30032349]
[146.34173584 224.29739380]
[146.63809204 239.29446411]
[146.93444824 254.29153442]
[161.75067139 256.93084717]
[175.76718140 262.41021729]
[188.44522095 270.51907349]
[199.29750061 280.94567871]
[207.90687561 293.28930664]
[213.94241333 307.07546997]
[217.17214966 321.77429199]
[217.47192383 336.82077026]
[214.83021545 351.63653564]
[209.34855652 365.65216064]
[201.23767090 378.32891846]
[190.80929565 389.17950439]
[178.46427917 397.78686523]
[164.67713928 403.82019043]
[149.97779846 407.04754639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[27 43]
[28 42]
[29 41]
[30 40]
[44 57]
[45 56]
[59 101]
[60 100]
[61 99]
[62 98]
[63 97]
[65 94]
[66 93]
[67 92]
[102 123]
[103 122]
[104 121]
[105 120]
[106 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
