%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCUCCUAGGGGGGGGGGAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCAxxxxxxxxxxCAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACUACUAGGCCCCCCCCCCCCUCCUCCUA\
) } def
/len { sequence length } bind def

/coor [
[38.84278107 234.41676331]
[28.76609993 229.35919189]
[19.10463905 223.54760742]
[9.91471291 217.01585388]
[1.24989176 209.80203247]
[-6.83931923 201.94818115]
[-14.30576706 193.50006104]
[-21.10593224 184.50694275]
[-27.20017433 175.02124023]
[-32.55297089 165.09823608]
[-46.33535385 171.01820374]
[-60.11773300 176.93815613]
[-73.90011597 182.85812378]
[-87.68249512 188.77809143]
[-97.30880737 201.33375549]
[-112.05658722 199.24751282]
[-125.83896637 205.16748047]
[-139.62135315 211.08744812]
[-153.40373230 217.00741577]
[-167.18611145 222.92736816]
[-166.60894775 238.09416199]
[-171.55332947 252.44398499]
[-181.35058594 264.03616333]
[-194.67568970 271.30291748]
[-209.72654724 273.26153564]
[-224.46765137 269.64706421]
[-236.90538025 260.94839478]
[-245.35765076 248.34188843]
[-248.68135071 233.53251648]
[-246.42698669 218.52311707]
[-238.89942932 205.34358215]
[-227.11671448 195.77632141]
[-212.67237854 191.11524963]
[-197.51989746 191.99073792]
[-183.70849609 198.28436279]
[-173.10607910 209.14498901]
[-159.32369995 203.22502136]
[-145.54130554 197.30506897]
[-131.75892639 191.38510132]
[-117.97654724 185.46513367]
[-109.33604431 173.33291626]
[-93.60246277 174.99571228]
[-79.82007599 169.07574463]
[-66.03769684 163.15577698]
[-52.25531769 157.23580933]
[-38.47293472 151.31585693]
[-44.53274536 130.30438232]
[-47.42327118 108.62840271]
[-47.08112717 86.76322174]
[-43.51381683 65.18829346]
[-36.79956055 44.37670517]
[-27.08559036 24.78482056]
[-14.58491039 6.84223747]
[0.42836571 -9.05759907]
[17.62502861 -22.56604195]
[9.90094471 -35.42444229]
[2.17685962 -48.28284836]
[-5.54722548 -61.14125061]
[-21.01626778 -62.36123657]
[-32.79199982 -72.46627045]
[-36.34640884 -87.57077026]
[-30.31275749 -101.86673737]
[-17.01110458 -109.85707855]
[-1.55620730 -108.46936035]
[10.10921097 -98.23717499]
[13.49955750 -83.09500885]
[7.31117725 -68.86533356]
[15.03526211 -56.00693130]
[22.75934601 -43.14852905]
[30.48343277 -30.29012680]
[40.16485596 -35.01046371]
[50.16457748 -39.01259232]
[60.42941284 -42.27522278]
[70.90474701 -44.78099442]
[81.53485870 -46.51658249]
[92.26319885 -47.47275162]
[103.03269196 -47.64441299]
[113.78605652 -47.03065872]
[124.46608734 -45.63475418]
[135.01596069 -43.46411896]
[145.37956238 -40.53030014]
[155.50175476 -36.84891129]
[165.32870483 -32.43953323]
[174.80813599 -27.32562065]
[183.88960266 -21.53437996]
[192.52479553 -15.09661770]
[200.66780090 -8.04657936]
[208.27528381 -0.42177075]
[219.77709961 -10.05029678]
[231.27890015 -19.67882347]
[242.78070068 -29.30735016]
[240.05213928 -44.42192841]
[245.26153564 -58.87038422]
[257.00756836 -68.76615143]
[272.13061523 -71.44731903]
[286.56268311 -66.19266510]
[296.42156982 -54.41566849]
[299.05532837 -39.28427887]
[293.75546265 -24.86876678]
[281.94763184 -15.04683018]
[266.80804443 -12.46052265]
[252.40922546 -17.80554581]
[240.90742493 -8.17702007]
[229.40562439 1.45150638]
[217.90380859 11.08003235]
[228.73316956 27.64089203]
[237.25128174 45.50086975]
[243.30522156 64.33930969]
[246.78628540 83.81799316]
[247.63198853 103.58721161]
[245.82713318 123.29201508]
[241.40412903 142.57864380]
[255.52893066 147.62741089]
[269.65374756 152.67616272]
[283.77853394 157.72491455]
[294.60687256 146.96806335]
[309.03289795 141.98283386]
[324.19232178 143.75904846]
[337.07522583 151.94403076]
[345.12365723 164.91264343]
[346.73968506 180.08996582]
[341.60235596 194.46253967]
[330.73175049 205.17666626]
[316.28619385 210.10505676]
[301.13388062 208.26916504]
[288.28332520 200.03350830]
[280.28601074 187.03329468]
[278.72979736 171.84971619]
[264.60498047 166.80096436]
[250.48017883 161.75221252]
[236.35537720 156.70344543]
[231.63195801 166.94100952]
[226.14125061 176.78837585]
[219.91528320 186.18815613]
[212.99032593 195.08552551]
[205.40675354 203.42866516]
[197.20875549 211.16891479]
[188.44415283 218.26116943]
[179.16400146 224.66407776]
[169.42240906 230.34031677]
[159.27615356 235.25682068]
[148.78437805 239.38491821]
[138.00825500 242.70053101]
[127.01056671 245.18437195]
[115.85543823 246.82191467]
[104.60789490 247.60365295]
[93.33348846 247.52500916]
[82.09793854 246.58644104]
[70.96674347 244.79344177]
[60.00477600 242.15643311]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 46]
[11 45]
[12 44]
[13 43]
[14 42]
[16 40]
[17 39]
[18 38]
[19 37]
[20 36]
[55 70]
[56 69]
[57 68]
[58 67]
[88 105]
[89 104]
[90 103]
[91 102]
[112 131]
[113 130]
[114 129]
[115 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
