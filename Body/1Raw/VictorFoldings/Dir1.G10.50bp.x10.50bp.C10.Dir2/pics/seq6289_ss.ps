%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAUACCUAGGGGGGGGGGUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACAGCUCUAAGCCUCCUUAUxxxxxxxxxxAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGCCCCCCCCCCACUAUUCCUA\
) } def
/len { sequence length } bind def

/coor [
[168.28872681 448.29348755]
[153.79902649 444.08499146]
[140.89280701 436.26889038]
[130.44999695 425.37805176]
[123.18263245 412.15505981]
[119.58621216 397.50143433]
[119.90592957 382.41635132]
[124.12000275 367.92828369]
[131.94110107 355.02505493]
[142.83596802 344.58645630]
[156.06178284 337.32421875]
[170.71676636 333.73345947]
[171.02882385 318.73669434]
[171.34088135 303.73992920]
[171.65293884 288.74319458]
[171.96499634 273.74642944]
[172.27705383 258.74966431]
[172.58911133 243.75292969]
[172.90116882 228.75616455]
[173.21321106 213.75941467]
[162.40037537 211.35748291]
[153.31010437 205.50112915]
[146.97001648 197.06813049]
[144.02075195 187.21241760]
[144.65420532 177.20783997]
[148.61082458 168.28387451]
[155.23384094 161.47463989]
[149.17083740 147.75459290]
[143.10781860 134.03454590]
[137.04479980 120.31448364]
[130.98179626 106.59442902]
[110.86319733 126.68193817]
[85.61491394 121.58756256]
[76.92673492 100.19779205]
[62.69995880 95.44397736]
[48.47317886 90.69016266]
[34.24639893 85.93634796]
[20.01962090 81.18253326]
[5.79284191 76.42871857]
[-6.11747646 81.48818207]
[-17.89590263 77.18846130]
[-23.38149643 66.36183929]
[-37.50629807 61.31308746]
[-52.56365204 66.84984589]
[-66.20529175 58.40678787]
[-67.96651459 42.46070099]
[-56.49626923 31.24406242]
[-40.59354019 33.36131287]
[-32.45754242 47.18828201]
[-18.33273888 52.23704147]
[-1.29683673 48.14094925]
[10.54665661 62.20194244]
[24.77343559 66.95575714]
[39.00021362 71.70957184]
[53.22699356 76.46338654]
[67.45377350 81.21720123]
[81.68054962 85.97101593]
[87.08399963 77.50265503]
[96.40623474 71.41644287]
[108.48015594 69.48041534]
[108.16809845 54.48366165]
[107.85604095 39.48690796]
[107.54398346 24.49015427]
[92.85929871 21.05347061]
[79.49100494 14.07209492]
[68.27945709 3.98487997]
[59.92940903 -8.57408237]
[54.96575546 -22.81532478]
[53.70052338 -37.84363174]
[56.21323776 -52.71430969]
[62.34595108 -66.49257660]
[71.71315002 -78.31231689]
[83.72602081 -87.43053436]
[97.62940216 -93.27405548]
[112.54933167 -95.47554016]
[127.54792786 -93.89660645]
[141.68235779 -88.63650513]
[154.06413269 -80.02590179]
[163.91490173 -68.60604858]
[170.61546326 -55.09482193]
[173.74459839 -40.34153748]
[173.10562134 -25.27360916]
[168.73867798 -10.83821297]
[160.91828918 2.05722761]
[150.13606262 12.60209465]
[137.06974792 20.13352966]
[122.54074097 24.17809868]
[122.85279846 39.17485046]
[123.16484833 54.17160416]
[123.47690582 69.16835785]
[137.32012939 74.94463348]
[148.19894409 64.61742401]
[150.05183411 48.68173218]
[163.74179077 40.31724548]
[178.76705933 45.94049072]
[183.60153198 61.23778915]
[174.53663635 74.47436523]
[158.52615356 75.49625397]
[147.64732361 85.82345581]
[144.70184326 100.53141785]
[150.76486206 114.25147247]
[156.82788086 127.97152710]
[162.89088440 141.69157410]
[168.95390320 155.41163635]
[194.47538757 162.54859924]
[203.25743103 190.16302490]
[217.90093994 193.41384888]
[232.54443359 196.66467285]
[247.18794250 199.91549683]
[261.83145142 203.16632080]
[269.95877075 190.37092590]
[281.97412109 181.12933350]
[296.42663574 176.55755615]
[311.57104492 177.20762634]
[325.57861328 183.00105286]
[336.75784302 193.23825073]
[343.75881958 206.68302917]
[345.73611450 221.71186829]
[342.45098877 236.50996399]
[334.30007935 249.29037476]
[322.26770020 258.50979614]
[307.80682373 263.05493164]
[292.66363525 262.37695312]
[278.66674805 256.55773926]
[267.50640869 246.29994202]
[260.53021240 232.84228516]
[258.58062744 217.80982971]
[243.93711853 214.55900574]
[229.29360962 211.30816650]
[214.65011597 208.05734253]
[200.00660706 204.80651855]
[188.20997620 214.07147217]
[187.89791870 229.06822205]
[187.58586121 244.06497192]
[187.27380371 259.06173706]
[186.96174622 274.05847168]
[186.64968872 289.05523682]
[186.33763123 304.05200195]
[186.02557373 319.04873657]
[185.71351624 334.04550171]
[200.20645142 338.24279785]
[213.11871338 346.04891968]
[223.56993103 356.93170166]
[230.84750366 370.14907837]
[234.45524597 384.79992676]
[234.14717102 399.88525391]
[229.94429016 414.37655640]
[222.13316345 427.28582764]
[211.24635315 437.73281860]
[198.02615356 445.00527954]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[27 104]
[28 103]
[29 102]
[30 101]
[31 100]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[39 52]
[42 50]
[43 49]
[60 90]
[61 89]
[62 88]
[63 87]
[91 99]
[92 98]
[106 131]
[107 130]
[108 129]
[109 128]
[110 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
