%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACCCUAGCAGGGGGGGGGGUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCxxxxxxxxxxGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCCCCCCCCCCCUCAUCCUAGCA\
) } def
/len { sequence length } bind def

/coor [
[76.76325989 419.81832886]
[63.06110382 413.55746460]
[51.09598923 404.40411377]
[41.46807480 392.81741333]
[34.66029739 379.37860107]
[31.01412773 364.76171875]
[30.71246147 349.69995117]
[33.77042389 334.94882202]
[40.03463364 321.24816895]
[49.19087982 309.28527832]
[60.77988815 299.66015625]
[74.22035980 292.85565186]
[88.83811951 289.21301270]
[88.53411865 274.21609497]
[88.23011017 259.21917725]
[87.92610931 244.22225952]
[87.62210083 229.22534180]
[87.31809998 214.22842407]
[87.01409149 199.23150635]
[86.71009064 184.23458862]
[86.40608978 169.23767090]
[86.10208130 154.24075317]
[76.08952332 165.40985107]
[61.45781326 168.71331787]
[47.61772537 162.92955017]
[39.68731689 150.19735718]
[40.59923935 135.22509766]
[50.01626205 123.54949951]
[64.45598602 119.48817444]
[78.57862091 124.54299927]
[87.16123199 136.84342957]
[89.28227234 121.99414062]
[91.40332031 107.14485931]
[93.37377167 92.27484131]
[95.19342804 77.38562775]
[97.01308441 62.49640656]
[96.55712128 47.50333786]
[93.83604431 32.75221252]
[91.11496735 18.00108528]
[88.39389038 3.24995804]
[85.67281342 -11.50116920]
[82.95173645 -26.25229645]
[80.23065948 -41.00342178]
[65.26456451 -39.81175613]
[50.25526810 -40.16526031]
[35.36186981 -42.06018066]
[20.74225044 -45.47643661]
[6.55138826 -50.37780762]
[-7.06028700 -56.71234512]
[-19.94848442 -64.41288757]
[-31.97657967 -73.39781952]
[-43.01707077 -83.57188416]
[-52.95292282 -94.82723236]
[-61.67880630 -107.04455566]
[-69.10222626 -120.09433746]
[-75.14448547 -133.83825684]
[-79.74153900 -148.13059998]
[-82.84465027 -162.81987000]
[-84.42092896 -177.75035095]
[-84.45365906 -192.76377869]
[-82.94250488 -207.70098877]
[-79.90347290 -222.40365601]
[-75.36878204 -236.71591187]
[-69.38650513 -250.48603821]
[-62.02005768 -263.56808472]
[-53.34753036 -275.82333374]
[-43.46084976 -287.12188721]
[-32.46482849 -297.34399414]
[-20.47602272 -306.38128662]
[-7.62152672 -314.13796997]
[5.96239805 -320.53179932]
[20.13175392 -325.49499512]
[34.73633575 -328.97497559]
[49.62133026 -330.93481445]
[64.62894440 -331.35375977]
[79.60009003 -330.22735596]
[94.37606812 -327.56756592]
[108.80024719 -323.40255737]
[122.71971130 -317.77648926]
[135.98690796 -310.74902344]
[148.46121216 -302.39462280]
[160.01037598 -292.80187988]
[170.51197815 -282.07247925]
[179.85469055 -270.32012939]
[187.93948364 -257.66943359]
[194.68063354 -244.25447083]
[200.00671387 -230.21748352]
[203.86123657 -215.70726013]
[206.20335388 -200.87760925]
[207.00822449 -185.88574219]
[206.26733398 -170.89056396]
[203.98854065 -156.05105591]
[200.19598389 -141.52450562]
[194.92987061 -127.46492004]
[188.24601746 -114.02132416]
[180.21530151 -101.33623505]
[170.92283630 -89.54411316]
[160.46711731 -78.76997375]
[148.95899963 -69.12802124]
[136.52046204 -60.72046661]
[123.28337860 -53.63643646]
[109.38805389 -47.95102310]
[94.98178864 -43.72449875]
[97.70286560 -28.97337151]
[100.42394257 -14.22224522]
[103.14501190 0.52888173]
[105.86608887 15.28000832]
[108.58716583 30.03113556]
[111.30824280 44.78226089]
[116.99050903 30.90019226]
[127.23197937 19.94061661]
[140.69773865 13.33205223]
[155.63262939 11.93588161]
[170.08995056 15.93408775]
[182.18530273 24.80553055]
[190.34213257 37.39387131]
[193.49722290 52.05829620]
[191.23934937 66.88739014]
[183.86280823 79.94826508]
[172.32908630 89.53852844]
[158.14152527 94.40814209]
[143.14938354 93.92238617]
[129.30680847 88.14456940]
[118.41809082 77.82779694]
[111.90230560 64.31606293]
[110.08264923 79.20528412]
[108.26298523 94.09450531]
[110.49810791 101.89226532]
[106.25260162 109.26589966]
[104.13155365 124.11518097]
[102.01051331 138.96446228]
[101.09899902 153.93675232]
[101.40300751 168.93367004]
[101.70700836 183.93058777]
[102.01101685 198.92750549]
[102.31501770 213.92442322]
[102.61901855 228.92134094]
[102.92302704 243.91825867]
[103.22702789 258.91519165]
[103.53103638 273.91210938]
[103.83503723 288.90902710]
[118.58841705 291.95626831]
[132.29359436 298.21051025]
[144.26315308 307.35806274]
[153.89668274 318.94006348]
[160.71096802 332.37557983]
[164.36421204 346.99069214]
[164.67318726 362.05230713]
[161.62237549 376.80493164]
[155.36479187 390.50860596]
[146.21435547 402.47595215]
[134.63000488 412.10665894]
[121.19284058 418.91769409]
[106.57684326 422.56741333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[31 131]
[32 130]
[33 129]
[34 127]
[35 126]
[36 125]
[37 109]
[38 108]
[39 107]
[40 106]
[41 105]
[42 104]
[43 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
