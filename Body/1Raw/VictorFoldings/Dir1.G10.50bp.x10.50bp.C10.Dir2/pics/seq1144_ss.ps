%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAACUAAGCUAGGGGGGGGGGUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUCACACGAxxxxxxxxxxCUAAGGACUGCAAAACCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACCCCCCCCCCCUUUAAUUAAGCUA\
) } def
/len { sequence length } bind def

/coor [
[84.12308502 418.94406128]
[70.24895477 413.09579468]
[57.89414978 404.49041748]
[47.59877396 393.50411987]
[39.81289673 380.61715698]
[34.87688446 366.39288330]
[33.00651550 351.45315552]
[34.28355408 336.45108032]
[38.65217972 322.04244995]
[45.92140579 308.85714722]
[55.77346039 297.47158813]
[67.77764893 288.38351440]
[81.40920258 281.99020386]
[96.07221222 278.57113647]
[95.77207947 263.57415771]
[95.47194672 248.57716370]
[95.17181396 233.58015442]
[94.87168121 218.58316040]
[94.57154846 203.58616638]
[94.27141571 188.58917236]
[93.97128296 173.59217834]
[93.67115021 158.59516907]
[93.37101746 143.59817505]
[93.07088470 128.60118103]
[70.60068512 113.92521667]
[67.89023590 84.55237579]
[91.10776520 62.30023193]
[76.50317383 65.72159576]
[61.89857483 69.14296722]
[47.29397583 72.56433105]
[32.68938065 75.98569489]
[21.10872459 87.59691620]
[5.33462763 83.11251068]
[1.59412801 67.14564514]
[13.73513031 56.12166977]
[29.26801300 61.38109970]
[43.87260818 57.95973206]
[58.47720718 54.53836823]
[73.08180237 51.11700058]
[87.68640137 47.69563293]
[93.80572510 34.00060272]
[86.61100006 20.83868790]
[79.41628265 7.67677450]
[67.24930573 3.28681111]
[61.53865814 -7.86972332]
[64.87284088 -19.53414154]
[57.94291306 -32.83737946]
[49.46950912 -45.21483612]
[39.57461929 -56.48830795]
[29.67973137 -67.76177979]
[19.78484344 -79.03525543]
[9.88995647 -90.30873108]
[-0.33879933 -101.28017426]
[-10.89220905 -111.93969727]
[-19.20309067 -115.86618042]
[-21.54747009 -122.91967773]
[-31.88548088 -133.78823853]
[-47.75923920 -137.90597534]
[-51.86865997 -153.78189087]
[-39.98632431 -165.08419800]
[-24.33576012 -160.18605042]
[-21.01692581 -144.12625122]
[-10.67891312 -133.25769043]
[-0.23267995 -122.49311066]
[10.32072926 -111.83358002]
[13.88097191 -111.46892548]
[17.43342209 -109.32693481]
[20.12858772 -105.43437958]
[21.16342926 -100.20361328]
[31.05831718 -88.93014526]
[40.95320511 -77.65666962]
[50.84809113 -66.38319397]
[60.74298096 -55.10972214]
[59.16830444 -70.02684021]
[64.11264038 -84.18852997]
[74.62957764 -94.88404846]
[88.70602417 -100.06610870]
[103.64753723 -98.74279785]
[116.59410095 -91.16741180]
[125.06755829 -78.78999329]
[127.44596863 -63.97975540]
[123.27407074 -49.57159042]
[113.35041809 -38.32342911]
[99.57454681 -32.38832855]
[84.58335876 -32.90235519]
[71.24614716 -39.76730728]
[78.17607880 -26.46406937]
[93.45784760 -17.88516045]
[92.57819366 0.48205328]
[99.77291870 13.64396763]
[106.96763611 26.80588150]
[121.66833496 29.78741264]
[133.42250061 20.46862793]
[145.17665100 11.14984322]
[156.93081665 1.83105850]
[154.02241516 -13.19557953]
[158.44149780 -27.84925842]
[169.17257690 -38.76267242]
[183.74972534 -43.42799759]
[198.82322693 -40.77317810]
[210.92930603 -31.40826797]
[217.28605652 -17.48525810]
[216.43276978 -2.20355439]
[208.56550598 10.92522049]
[195.49211121 18.88417053]
[180.21675110 19.84438515]
[166.24960327 13.58521748]
[154.49543762 22.90400124]
[142.74127197 32.22278595]
[130.98712158 41.54157257]
[132.84356689 48.80817795]
[147.37684631 45.09550095]
[151.08929443 59.62883377]
[136.55647278 63.34139633]
[138.41291809 70.60800171]
[153.19647217 73.14701080]
[167.98002625 75.68601990]
[182.76358032 78.22503662]
[194.58013916 67.98281097]
[210.21646118 67.78404236]
[222.28955078 77.72257996]
[225.09887695 93.10574341]
[217.31794739 106.67007446]
[202.62068176 112.01091766]
[187.94668579 106.60648346]
[180.22457886 93.00858307]
[165.44102478 90.46957397]
[150.65747070 87.93056488]
[135.87391663 85.39155579]
[135.09912109 106.14147949]
[124.17230225 121.76995850]
[108.06788635 128.30104065]
[108.36801910 143.29804993]
[108.66815186 158.29504395]
[108.96828461 173.29203796]
[109.26841736 188.28903198]
[109.56854248 203.28602600]
[109.86867523 218.28303528]
[110.16880798 233.28002930]
[110.46894073 248.27702332]
[110.76907349 263.27401733]
[111.06920624 278.27102661]
[125.85726929 281.10067749]
[139.73370361 286.94348145]
[152.09188843 295.54397583]
[162.39158630 306.52624512]
[170.18252563 319.41015625]
[175.12414551 333.63244629]
[177.00038147 348.57144165]
[175.72924805 363.57403564]
[171.36628723 377.98440552]
[164.10224915 391.17254639]
[154.25468445 402.56198120]
[142.25405884 411.65478516]
[128.62503052 418.05343628]
[113.96337128 421.47827148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[24 132]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[41 91]
[42 90]
[43 89]
[46 87]
[47 86]
[48 73]
[49 72]
[50 71]
[51 70]
[52 69]
[53 65]
[54 64]
[56 63]
[57 62]
[92 110]
[93 109]
[94 108]
[95 107]
[115 129]
[116 128]
[117 127]
[118 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
