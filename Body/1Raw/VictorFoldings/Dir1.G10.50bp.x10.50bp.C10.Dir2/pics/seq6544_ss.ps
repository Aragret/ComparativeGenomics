%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCCACCCGGGGGGGGGGUGGAGCCUCCGUAGACCUAACCAUCUUCUCCUUACACCUAGCAGGUGUCUxxxxxxxxxxACCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGCCCCCCCCCCACUCCUACCC\
) } def
/len { sequence length } bind def

/coor [
[89.00341034 344.43502808]
[74.51371765 340.22656250]
[61.60749054 332.41043091]
[51.16469193 321.51959229]
[43.89732742 308.29660034]
[40.30089951 293.64297485]
[40.62062073 278.55789185]
[44.83469391 264.06982422]
[52.65578842 251.16661072]
[63.55065536 240.72801208]
[76.77646637 233.46575928]
[91.43145752 229.87500000]
[91.74351501 214.87823486]
[92.05557251 199.88148499]
[92.36763000 184.88473511]
[92.67967987 169.88798523]
[92.99173737 154.89122009]
[93.30379486 139.89447021]
[93.61585236 124.89772034]
[93.92790985 109.90096283]
[89.79315186 110.08285522]
[85.33207703 108.75070953]
[70.35236359 109.53055573]
[55.37265015 110.31040192]
[40.39293671 111.09024811]
[37.26119232 125.85014343]
[30.41515350 139.29611206]
[20.32159233 150.51139832]
[7.66870499 158.73130798]
[-6.68081474 163.39538574]
[-21.74859047 164.18565369]
[-36.50727844 161.04820251]
[-49.95060730 154.19697571]
[-61.16198730 144.09909058]
[-69.37700653 131.44302368]
[-74.03555298 117.09170532]
[-74.81999969 102.02362823]
[-71.67685699 87.26615143]
[-64.82043457 73.82546997]
[-54.71821594 62.61799240]
[-42.05898285 54.40785980]
[-27.70586777 49.75485611]
[-12.63748550 48.97622681]
[2.11877584 52.12506485]
[15.55680847 58.98667526]
[26.76038551 69.09322357]
[34.96562958 81.75562286]
[39.61309052 96.11053467]
[54.59280396 95.33068848]
[69.57251740 94.55084229]
[84.55223083 93.77099609]
[70.23738098 89.28936768]
[60.32179642 78.03409576]
[57.68037033 63.26849747]
[63.07895279 49.27366257]
[74.95229340 40.10721207]
[89.85787201 38.42683411]
[103.47401428 44.71973038]
[111.85290527 57.16136169]
[112.56520081 72.14443970]
[105.40606689 85.32306671]
[116.70507050 75.45734406]
[128.00407410 65.59162140]
[139.30308533 55.72589493]
[150.60208130 45.86017227]
[161.90109253 35.99444962]
[173.09686279 26.01172256]
[184.18817139 15.91307259]
[175.38478088 3.74835873]
[167.99877930 -9.32554913]
[162.12306213 -23.14423180]
[157.83152771 -37.53390884]
[155.17814636 -52.31360626]
[154.19627380 -67.29746246]
[154.89826965 -82.29703522]
[157.27531433 -97.12369537]
[161.29748535 -111.59097290]
[166.91421509 -125.51692963]
[174.05488586 -138.72642517]
[182.62966919 -151.05335999]
[192.53073120 -162.34268188]
[203.63357544 -172.45242310]
[215.79855347 -181.25546265]
[228.87268066 -188.64106750]
[242.69154358 -194.51637268]
[257.08132935 -198.80746460]
[271.86111450 -201.46041870]
[286.84500122 -202.44183350]
[301.84457397 -201.73939514]
[316.67114258 -199.36190796]
[331.13830566 -195.33930969]
[345.06408691 -189.72215271]
[358.27337646 -182.58110046]
[370.60003662 -174.00595093]
[381.88906860 -164.10453796]
[391.99850464 -153.00140381]
[400.80114746 -140.83615112]
[408.18637085 -127.76181030]
[414.06124878 -113.94277191]
[418.35192871 -99.55284119]
[421.00442505 -84.77297974]
[421.98541260 -69.78907013]
[421.28253174 -54.78953552]
[418.90460205 -39.96302032]
[414.88156128 -25.49598503]
[409.26397705 -11.57036400]
[402.12252808 1.63871205]
[393.54702759 13.96512508]
[383.64526367 25.25385666]
[372.54183960 35.36294174]
[360.37631226 44.16524506]
[347.30175781 51.55006790]
[333.48254395 57.42454147]
[319.09249878 61.71478653]
[304.31253052 64.36684418]
[289.32861328 65.34737396]
[274.32910156 64.64402771]
[259.50265503 62.26566696]
[245.03573608 58.24219131]
[231.11027527 52.62420273]
[217.90141296 45.48235703]
[205.57525635 36.90646744]
[194.28681946 27.00438690]
[183.19551086 37.10303879]
[180.34866333 43.97625351]
[171.76681519 47.29345322]
[160.46780396 57.15917587]
[149.16880798 67.02490234]
[137.86979675 76.89062500]
[126.57079315 86.75634766]
[115.27178955 96.62207031]
[108.92465973 110.21302032]
[108.61260223 125.20977020]
[108.30055237 140.20652771]
[107.98849487 155.20327759]
[107.67643738 170.20002747]
[107.36437988 185.19679260]
[107.05232239 200.19354248]
[106.74026489 215.19029236]
[106.42821503 230.18704224]
[120.92115021 234.38433838]
[133.83340454 242.19047546]
[144.28462219 253.07324219]
[151.56219482 266.29064941]
[155.16993713 280.94146729]
[154.86186218 296.02679443]
[150.65898132 310.51812744]
[142.84785461 323.42736816]
[131.96104431 333.87435913]
[118.74084473 341.14685059]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[22 51]
[23 50]
[24 49]
[25 48]
[61 131]
[62 130]
[63 129]
[64 128]
[65 127]
[66 126]
[67 124]
[68 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
