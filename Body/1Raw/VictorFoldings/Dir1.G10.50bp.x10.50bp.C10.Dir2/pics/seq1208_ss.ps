%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUCACCCCCUCGGGGGGGGGGCCCAAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAxxxxxxxxxxGUCUACAAGACGCUACUUCCCCUAUCAUAGAAGAGCUUAUCACCUUUCAUCCCCCCCCCCGAUCACGCCCUC\
) } def
/len { sequence length } bind def

/coor [
[118.55752563 545.82409668]
[104.39692688 540.66912842]
[91.80718231 532.38690186]
[81.46724701 521.42413330]
[73.93473053 508.37197876]
[69.61586761 493.93438721]
[68.74356079 478.88992310]
[71.36484528 464.04992676]
[77.33837891 450.21469116]
[86.34199524 438.13034058]
[97.89015198 428.44857788]
[111.36006927 421.69149780]
[126.02532959 418.22351074]
[126.02532959 403.22351074]
[126.02532959 388.22351074]
[126.02532959 373.22351074]
[126.02532959 358.22351074]
[126.02532959 343.22351074]
[126.02532959 328.22351074]
[126.02532959 313.22351074]
[126.02532959 298.22351074]
[126.02532959 283.22351074]
[108.78556824 277.67745972]
[94.41458130 266.62005615]
[84.61119080 251.33905029]
[80.54079437 233.62257385]
[82.69687653 215.54997253]
[90.84120178 199.24765015]
[104.03005981 186.63899231]
[120.72357178 179.21736145]
[119.20604706 164.29431152]
[117.68852234 149.37127686]
[116.17099762 134.44824219]
[114.65347290 119.52519989]
[102.59510803 131.77880859]
[81.79600525 134.89390564]
[59.53885651 123.57711792]
[44.81606293 120.70668793]
[30.09326935 117.83626556]
[15.37047577 114.96584320]
[0.64768171 112.09542084]
[-14.67670441 117.93453217]
[-27.22318649 107.37432861]
[-24.08501816 91.27824402]
[-8.49047947 86.20454407]
[3.51810622 97.37261963]
[18.24090004 100.24304962]
[32.96369553 103.11347198]
[47.68648911 105.98389435]
[62.40928268 108.85432434]
[68.60277557 95.19267273]
[56.74113464 86.01107788]
[40.70902252 86.60343170]
[30.35972404 74.34490204]
[33.63233948 58.63918304]
[48.01639557 51.53436279]
[62.47767639 58.48064804]
[65.92272949 74.14944458]
[77.78436279 83.33103180]
[91.04440308 76.31880951]
[90.13288879 61.34652710]
[78.58193207 50.89601135]
[77.87081909 35.69900513]
[87.90496826 24.75134277]
[86.99345398 9.77906322]
[78.43185425 -3.52542901]
[85.38144684 -16.69935608]
[84.46993256 -31.67163658]
[83.55842590 -46.64391708]
[69.28068542 -51.94166565]
[58.39665604 -62.59331894]
[52.79205322 -76.75341797]
[53.43791199 -91.96862793]
[60.22232819 -105.60283661]
[71.96986389 -115.29382324]
[86.64519501 -119.36257172]
[101.70571899 -117.10414886]
[114.54211426 -108.90982819]
[122.93039703 -96.19934082]
[125.41725159 -81.17484283]
[121.57180786 -66.43943024]
[112.06031799 -54.54609299]
[98.53070068 -47.55542755]
[99.44221497 -32.58314896]
[100.35372925 -17.61087036]
[108.85013580 -5.37729597]
[101.96573639 8.86754990]
[102.87725067 23.83982849]
[114.16536713 33.48939133]
[115.30305481 48.66042709]
[105.10516357 60.43501282]
[106.01667786 75.40729523]
[112.38151550 79.37451935]
[115.99397278 64.81601715]
[130.95625305 63.75286865]
[136.59094238 77.65431976]
[125.11117554 87.30898285]
[131.47601318 91.27621460]
[145.31961060 85.50086975]
[159.16322327 79.72552490]
[173.00682068 73.95018005]
[174.89337158 58.70759583]
[184.16127014 46.46007538]
[198.31748962 40.50214767]
[213.55409241 42.43646622]
[225.77249146 51.74270248]
[231.68601990 65.91753387]
[229.70396423 81.14799500]
[220.35946655 93.33717346]
[206.16616821 99.20623779]
[190.94200134 97.17643738]
[178.78216553 87.79378510]
[164.93856812 93.56912994]
[151.09495544 99.34447479]
[137.25135803 105.11981964]
[129.57650757 118.00767517]
[131.09403992 132.93070984]
[132.61155701 147.85375977]
[134.12908936 162.77679443]
[135.64660645 177.69982910]
[147.60348511 179.59216309]
[158.81625366 184.13055420]
[168.70797729 191.07699585]
[176.77072144 200.06965637]
[182.59156799 210.64175415]
[185.87388611 222.24584961]
[186.45234680 234.28205872]
[184.30125427 246.12919617]
[179.53572083 257.17675781]
[172.40547180 266.85641479]
[163.28175354 274.67120361]
[152.63800049 280.22113037]
[141.02532959 283.22351074]
[141.02532959 298.22351074]
[141.02532959 313.22351074]
[141.02532959 328.22351074]
[141.02532959 343.22351074]
[141.02532959 358.22351074]
[141.02532959 373.22351074]
[141.02532959 388.22351074]
[141.02532959 403.22351074]
[141.02532959 418.22351074]
[155.69058228 421.69149780]
[169.16050720 428.44857788]
[180.70866394 438.13034058]
[189.71228027 450.21469116]
[195.68580627 464.04992676]
[198.30709839 478.88992310]
[197.43478394 493.93438721]
[193.11592102 508.37197876]
[185.58340454 521.42413330]
[175.24346924 532.38690186]
[162.65373230 540.66912842]
[148.49311829 545.82409668]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[30 120]
[31 119]
[32 118]
[33 117]
[34 116]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[51 59]
[52 58]
[60 92]
[61 91]
[64 88]
[65 87]
[67 85]
[68 84]
[69 83]
[98 115]
[99 114]
[100 113]
[101 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
