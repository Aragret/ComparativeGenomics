%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCACUCUCGGGGGGGGGGUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAxxxxxxxxxxAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCCCCCCCCCCCUCACACUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 357.76602173]
[71.19830322 351.74996948]
[59.48964310 342.22058105]
[50.78712082 329.88488770]
[45.73651886 315.65838623]
[44.71262741 300.59671021]
[47.79142761 285.81753540]
[54.74444962 272.41760254]
[65.05573273 261.39126587]
[77.96011353 253.55676270]
[92.50000000 249.49545288]
[92.50000000 234.49545288]
[92.50000000 219.49545288]
[92.50000000 204.49545288]
[92.50000000 189.49545288]
[92.50000000 174.49545288]
[92.50000000 159.49545288]
[92.50000000 144.49545288]
[92.50000000 129.49545288]
[92.50000000 114.49545288]
[81.40868378 104.39680481]
[66.47438049 105.79911041]
[51.54006958 107.20140839]
[36.60576248 108.60371399]
[28.29151535 112.54391479]
[21.34668159 109.87653351]
[6.38643312 110.96784210]
[2.54533172 125.61450195]
[-5.84548759 138.21897888]
[-17.87585068 147.41403198]
[-32.24079514 152.20225525]
[-47.38211823 152.06425476]
[-61.65740585 147.01501465]
[-73.51817322 137.60220337]
[-81.67786407 124.84688568]
[-85.25136566 110.13264465]
[-83.85105896 95.05558014]
[-77.62883759 81.25113678]
[-67.25963593 70.21672058]
[-53.86823273 63.14925385]
[-38.90722656 60.81536865]
[-23.99947548 63.46822739]
[-10.76205921 70.82006836]
[-0.63087523 82.07341766]
[5.29512262 96.00759125]
[20.25537109 94.91628265]
[35.20345688 93.66940308]
[50.13776398 92.26710510]
[65.07207489 90.86479950]
[80.00637817 89.46249390]
[88.34978485 86.20558167]
[95.78953552 87.16163635]
[100.60491180 91.05394745]
[109.86985779 79.25730896]
[112.30877686 63.62521362]
[126.25489044 58.39499283]
[135.51983643 46.59835052]
[144.78479004 34.80171204]
[154.04974365 23.00507164]
[156.48864746 7.37298107]
[170.43476868 2.14275789]
[179.69970703 -9.65388203]
[188.96466064 -21.45052147]
[198.22961426 -33.24716187]
[184.19204712 -27.96068764]
[169.28866577 -26.26096535]
[154.42123413 -28.25084496]
[140.48937988 -33.80991745]
[128.33609009 -42.60181808]
[118.69673920 -54.09455109]
[112.15459442 -67.59271240]
[109.10552216 -82.27954865]
[109.73400879 -97.26638031]
[114.00202942 -111.64636993]
[121.65132904 -124.54940033]
[132.21905518 -135.19473267]
[145.06578064 -142.93823242]
[159.41415405 -147.31134033]
[174.39598083 -148.04946899]
[189.10472107 -145.10794067]
[202.65039062 -138.66473389]
[214.21334839 -129.10972595]
[223.09393311 -117.02108765]
[228.75479126 -103.13027954]
[230.85339355 -88.27780914]
[229.26277161 -73.36238098]
[224.07913208 -59.28651810]
[215.61749268 -46.90340424]
[224.98051453 -59.65661240]
[239.76849365 -57.87764359]
[253.42474365 -64.08304596]
[267.08099365 -70.28845978]
[280.73721313 -76.49386597]
[294.39346313 -82.69927216]
[307.91766357 -89.18743896]
[321.30392456 -95.95555115]
[334.69021606 -102.72366333]
[336.17535400 -118.07937622]
[345.74456787 -130.18034363]
[360.34439087 -135.16519165]
[375.31607056 -131.44326782]
[385.88217163 -120.20223236]
[388.67111206 -105.02905273]
[382.79293823 -90.76543427]
[370.12338257 -81.96285248]
[354.70520020 -81.43017578]
[341.45834351 -89.33737946]
[328.07205200 -82.56926727]
[314.68576050 -75.80114746]
[312.35693359 -71.56417084]
[307.30987549 -68.77873993]
[300.59887695 -69.04302979]
[286.94262695 -62.83762360]
[273.28637695 -56.63221359]
[259.63015747 -50.42680740]
[245.97390747 -44.22140121]
[237.58766174 -31.91204453]
[221.82289124 -33.24716187]
[210.02624512 -23.98221207]
[200.76130676 -12.18557262]
[191.49635315 -0.38893268]
[182.23139954 11.40770721]
[180.45518494 26.19602394]
[165.84637451 32.27001953]
[156.58142090 44.06666183]
[147.31648254 55.86330032]
[138.05152893 67.65994263]
[136.27529907 82.44825745]
[121.66650391 88.52225494]
[112.40155029 100.31889343]
[107.50000000 114.49545288]
[107.50000000 129.49545288]
[107.50000000 144.49545288]
[107.50000000 159.49545288]
[107.50000000 174.49545288]
[107.50000000 189.49545288]
[107.50000000 204.49545288]
[107.50000000 219.49545288]
[107.50000000 234.49545288]
[107.50000000 249.49545288]
[122.03988647 253.55676270]
[134.94427490 261.39126587]
[145.25555420 272.41760254]
[152.20857239 285.81753540]
[155.28736877 300.59671021]
[154.26348877 315.65838623]
[149.21287537 329.88488770]
[140.51036072 342.22058105]
[128.80169678 351.74996948]
[114.95575714 357.76602173]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 50]
[22 49]
[23 48]
[24 47]
[26 46]
[27 45]
[53 130]
[54 129]
[56 127]
[57 126]
[58 125]
[59 124]
[61 122]
[62 121]
[63 120]
[64 119]
[88 118]
[90 116]
[91 115]
[92 114]
[93 113]
[94 112]
[95 109]
[96 108]
[97 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
