%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUUUCACCGGGGGGGGGGGCUACACGACCGGGGGUAUACUACGGUCAAUGCUCUGAAAUCUGUGGAGCxxxxxxxxxxAUUCAGCUUCCUACACUAUUAAAGUUUACCACAACCACCACCCCAUCAUACCCCCCCCCCCUCUUUCACC\
) } def
/len { sequence length } bind def

/coor [
[74.64734650 376.81002808]
[60.80140686 370.79400635]
[49.09274673 361.26458740]
[40.39022064 348.92892456]
[35.33961868 334.70239258]
[34.31572723 319.64071655]
[37.39452744 304.86157227]
[44.34754944 291.46163940]
[54.65883255 280.43530273]
[67.56321716 272.60079956]
[82.10310364 268.53948975]
[82.10310364 253.53947449]
[82.10310364 238.53947449]
[82.10310364 223.53947449]
[82.10310364 208.53947449]
[82.10310364 193.53947449]
[82.10310364 178.53947449]
[82.10310364 163.53947449]
[82.10310364 148.53947449]
[82.10310364 133.53947449]
[81.26737213 148.51617432]
[71.43884277 159.84754944]
[56.73059464 162.79159546]
[43.29779053 156.11628723]
[36.76184082 142.61512756]
[39.85793304 127.93813324]
[51.29040527 118.22738647]
[66.27616882 117.54703522]
[51.27697754 117.39099884]
[36.27779007 117.23496246]
[21.27860069 117.07892609]
[6.27941275 116.92288971]
[-7.60049963 124.51622009]
[-20.24659538 116.64694214]
[-35.24578476 116.49090576]
[-47.66730118 126.64401245]
[-63.31900406 123.12212372]
[-70.19425201 108.62693024]
[-63.01893616 94.27790833]
[-47.29735184 91.08239746]
[-35.08974838 101.49171448]
[-20.09055901 101.64775085]
[-7.28348970 94.04326630]
[6.43544912 101.92370605]
[21.43463707 102.07974243]
[36.43382645 102.23577881]
[51.43301392 102.39181519]
[66.43220520 102.54785156]
[80.63273621 77.53897858]
[105.68332672 74.98616028]
[113.13823700 61.96985245]
[120.59314728 48.95354462]
[109.91576385 38.30324554]
[102.36498260 25.26211548]
[98.45030975 10.72212791]
[98.43280029 -4.32401323]
[102.30763245 -18.85065651]
[109.80487823 -31.86911583]
[120.40826416 -42.49496841]
[133.39074707 -50.00812149]
[147.86434937 -53.90163422]
[162.84088135 -53.91589355]
[177.29945374 -50.05593872]
[184.75436401 -63.07224655]
[192.20927429 -76.08855438]
[199.66418457 -89.10486603]
[207.11909485 -102.12117767]
[182.40901184 -135.75184631]
[183.96659851 -150.67076111]
[185.52418518 -165.58967590]
[172.00381470 -172.48635864]
[161.89074707 -183.80406189]
[156.55268860 -198.01214600]
[156.71154785 -213.18907166]
[162.34585571 -227.28230286]
[172.69360352 -238.38583374]
[186.35536194 -244.99800110]
[201.48347473 -246.22457886]
[216.03199768 -241.89967346]
[228.03337097 -232.60818481]
[235.86448669 -219.60671997]
[238.46626282 -204.65362549]
[235.48683167 -189.77116394]
[227.32913208 -176.97209167]
[215.09642029 -167.98736572]
[200.44308472 -164.03208923]
[198.88551331 -149.11317444]
[197.32792664 -134.19425964]
[203.67539978 -130.19931030]
[216.94218445 -137.19876099]
[216.37031555 -122.20938873]
[222.71778870 -118.21443176]
[235.49514771 -126.07186127]
[243.19744873 -139.89160156]
[258.09185791 -139.96768188]
[270.86920166 -147.82511902]
[283.64657593 -155.68254089]
[288.75109863 -170.89186096]
[303.87353516 -176.24822998]
[317.41329956 -167.64271545]
[318.98379517 -151.67671204]
[307.38027954 -140.59799194]
[291.50399780 -142.90518188]
[278.72662354 -135.04776001]
[265.94927979 -127.19033051]
[259.16088867 -113.93260193]
[243.35256958 -113.29450226]
[230.57521057 -105.43707275]
[220.13540649 -94.66626740]
[212.68049622 -81.64995575]
[205.22558594 -68.63364410]
[197.77067566 -55.61733627]
[190.31576538 -42.60102844]
[200.96105957 -32.08309174]
[208.52679443 -19.15805817]
[212.49205017 -4.70394993]
[212.58073425 10.29553413]
[208.78079224 24.81796455]
[201.34544373 37.87187576]
[190.77632141 48.56445694]
[177.78961182 56.16260529]
[163.26753235 60.14319992]
[148.19842529 60.22910309]
[133.60945129 56.40845490]
[126.15454865 69.42475891]
[118.69963837 82.44107056]
[126.25368500 92.68409729]
[128.22012329 106.02709961]
[123.44113159 119.44925690]
[112.36785126 129.58026123]
[97.10310364 133.53947449]
[97.10310364 148.53947449]
[97.10310364 163.53947449]
[97.10310364 178.53947449]
[97.10310364 193.53947449]
[97.10310364 208.53947449]
[97.10310364 223.53947449]
[97.10310364 238.53947449]
[97.10310364 253.53947449]
[97.10310364 268.53948975]
[111.64299011 272.60079956]
[124.54737091 280.43530273]
[134.85865784 291.46163940]
[141.81167603 304.86157227]
[144.89047241 319.64071655]
[143.86657715 334.70239258]
[138.81597900 348.92892456]
[130.11346436 361.26458740]
[118.40479279 370.79400635]
[104.55885315 376.81002808]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[34 42]
[35 41]
[50 126]
[51 125]
[52 124]
[63 113]
[64 112]
[65 111]
[66 110]
[67 109]
[68 88]
[69 87]
[70 86]
[92 108]
[93 107]
[95 105]
[96 104]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
