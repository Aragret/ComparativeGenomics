%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAUCCUAGGGGGGGGGGGAAAUCGCUGUCGCCUUAAUCCAAGCCUACGUUUUCACACUUCUAGUAAGCxxxxxxxxxxCCUUCCAAACAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCCCCCCCCCCCACUUUCCUAG\
) } def
/len { sequence length } bind def

/coor [
[96.79179382 409.74172974]
[83.91851807 401.83886719]
[73.79422760 390.62835693]
[67.23963928 377.01901245]
[64.78612518 362.11410522]
[66.63256073 347.12185669]
[72.62927246 333.25765991]
[82.29013062 321.64538574]
[94.83197784 313.22644043]
[109.23809814 308.68328857]
[108.92604828 293.68652344]
[108.61399078 278.68978882]
[108.30193329 263.69302368]
[107.98987579 248.69627380]
[107.67781830 233.69950867]
[107.36576080 218.70275879]
[107.05371094 203.70600891]
[106.74165344 188.70925903]
[106.42959595 173.71249390]
[106.11753845 158.71574402]
[105.80548096 143.71899414]
[93.49294281 142.64744568]
[82.23139191 138.25395203]
[72.87554932 131.03456116]
[66.08913422 121.69275665]
[62.29852295 111.07308960]
[47.36421585 112.47539520]
[32.42990875 113.87769318]
[27.98460388 128.41412354]
[18.31097221 140.13970947]
[4.88417149 147.26637268]
[-10.24830914 148.70736694]
[-24.77887535 144.24295044]
[-36.49172211 134.55390930]
[-43.60072708 121.11773682]
[-45.02181625 105.98337555]
[-40.53828430 91.45869446]
[-30.83383560 79.75860596]
[-17.38833237 72.66728210]
[-2.25211239 71.26610565]
[12.26665878 75.76873779]
[23.95397377 85.48857117]
[31.02760315 98.94338989]
[45.96191025 97.54108429]
[60.89622116 96.13877869]
[63.87588120 84.53834534]
[70.21170044 74.37438965]
[79.31503296 66.59121704]
[90.34013367 61.91192245]
[102.26268768 60.77124786]
[105.96884918 46.23631287]
[109.67501068 31.70137596]
[113.38117218 17.16644096]
[117.08733368 2.63150430]
[103.04348755 -2.68360114]
[89.68305969 -9.53772736]
[77.17407990 -17.84467506]
[65.67385864 -27.49997711]
[55.32701874 -38.38220978]
[46.26368713 -50.35451126]
[38.59784317 -63.26632309]
[32.42589569 -76.95526123]
[27.82546043 -91.24917603]
[24.85439491 -105.96830750]
[23.55006218 -120.92754364]
[23.92886543 -135.93875122]
[25.98604202 -150.81317139]
[29.69571877 -165.36370850]
[35.01124573 -179.40739441]
[41.86576843 -192.76762390]
[50.17309189 -205.27635193]
[59.82873917 -216.77629089]
[70.71128082 -227.12280273]
[82.68385315 -236.18577576]
[95.59589386 -243.85122681]
[109.28501892 -250.02276611]
[123.57907104 -254.62277222]
[138.29829407 -257.59341431]
[153.25756836 -258.89727783]
[168.26876831 -258.51803589]
[183.14311218 -256.46041870]
[197.69354248 -252.75030518]
[211.73707581 -247.43435669]
[225.09709167 -240.57943726]
[237.60557556 -232.27172852]
[249.10522461 -222.61573792]
[259.45141602 -211.73289490]
[268.51403809 -199.76005554]
[276.17910767 -186.84777832]
[282.35021973 -173.15847778]
[286.94979858 -158.86428833]
[289.91998291 -144.14497375]
[291.22341919 -129.18565369]
[290.84371948 -114.17446899]
[288.78567505 -99.30018616]
[285.07510376 -84.74986267]
[279.75875854 -70.70648956]
[272.90341187 -57.34667969]
[264.59536743 -44.83844376]
[254.93902588 -33.33908844]
[244.05586243 -22.99322510]
[232.08274841 -13.93096733]
[219.17024231 -6.26628304]
[205.48075867 -0.09556282]
[191.18643188 4.50358963]
[176.46702576 7.47333527]
[161.50767517 8.77632618]
[146.49649048 8.39617634]
[131.62226868 6.33766556]
[127.91611481 20.87260246]
[124.20995331 35.40753937]
[120.50379181 49.94247437]
[116.79763031 64.47740936]
[130.37071228 73.21271515]
[139.62738037 87.02219391]
[142.72766113 103.84777832]
[138.78576660 120.99328613]
[152.68832397 126.62524414]
[166.59088135 132.25720215]
[180.49343872 137.88916016]
[196.65144348 135.08720398]
[206.94781494 147.85108948]
[200.79052734 163.05043030]
[184.51367188 165.04943848]
[174.86148071 151.79171753]
[160.95892334 146.15975952]
[147.05636597 140.52780151]
[133.15380859 134.89584351]
[120.80223846 143.40693665]
[121.11429596 158.40368652]
[121.42634583 173.40043640]
[121.73840332 188.39720154]
[122.05046082 203.39395142]
[122.36251831 218.39070129]
[122.67457581 233.38745117]
[122.98663330 248.38421631]
[123.29868317 263.38095093]
[123.61074066 278.37771606]
[123.92279816 293.37448120]
[124.23485565 308.37121582]
[138.81748962 312.31118774]
[151.69869995 320.20111084]
[161.83425903 331.40145874]
[168.40251160 345.00421143]
[170.87100220 359.90664673]
[169.03962708 374.90075684]
[163.05683899 388.77096558]
[153.40765381 400.39291382]
[140.87426758 408.82446289]
[126.47271729 413.38211060]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[26 45]
[27 44]
[28 43]
[50 113]
[51 112]
[52 111]
[53 110]
[54 109]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
