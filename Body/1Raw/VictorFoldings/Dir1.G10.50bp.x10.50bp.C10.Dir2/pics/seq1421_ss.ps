%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUCAACAGGGGGGGGGGGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAAxxxxxxxxxxGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCCCCCCCCCCCAACCUCACCA\
) } def
/len { sequence length } bind def

/coor [
[118.30445862 527.62298584]
[104.45851898 521.60693359]
[92.74986267 512.07751465]
[84.04733276 499.74185181]
[78.99673462 485.51531982]
[77.97284698 470.45364380]
[81.05164337 455.67449951]
[88.00466156 442.27456665]
[98.31594849 431.24822998]
[111.22032928 423.41372681]
[125.76021576 419.35241699]
[125.76021576 404.35241699]
[125.76021576 389.35241699]
[125.76021576 374.35241699]
[125.76021576 359.35241699]
[125.76021576 344.35241699]
[125.76021576 329.35241699]
[125.76021576 314.35241699]
[125.76021576 299.35241699]
[125.76021576 284.35241699]
[125.76021576 269.35241699]
[115.66333771 267.31652832]
[106.77770233 262.45858765]
[99.85508728 255.30635071]
[95.44598389 246.57597351]
[93.85655212 237.10092163]
[95.12909698 227.75282288]
[99.04728699 219.36132812]
[105.16465759 212.64039612]
[112.85320282 208.12785339]
[110.06088257 193.39004517]
[107.26855469 178.65223694]
[97.29725647 167.58776855]
[102.33033752 152.58848572]
[99.53801727 137.85067749]
[96.74568939 123.11286926]
[75.24258423 115.50769806]
[66.60511780 89.23917389]
[52.94887924 83.03376770]
[39.29263687 76.82835388]
[25.63639832 70.62294769]
[11.98015594 64.41754150]
[-0.39114520 68.21290588]
[-11.65942097 62.71336365]
[-15.99113750 51.37565994]
[-29.51532745 44.88749313]
[-45.81663895 46.67613602]
[-55.29681015 33.29486465]
[-48.20345306 18.50918579]
[-31.83360481 17.52933884]
[-23.02716255 31.36330414]
[-9.50297260 37.85147095]
[7.86616945 35.54650879]
[18.18556404 50.76130295]
[31.84180450 56.96670914]
[45.49804688 63.17211533]
[59.15428543 69.37752533]
[72.81053162 75.58293152]
[79.67055511 72.55142212]
[73.60777283 58.83126831]
[87.32802582 52.76871109]
[93.39060974 66.48841095]
[100.25063324 63.45690536]
[104.85620117 49.18144226]
[109.46176147 34.90598297]
[98.09733582 44.69626999]
[84.81185913 51.66018295]
[70.29492950 55.43626022]
[55.30005646 55.82849503]
[40.60556412 52.81653595]
[26.97418022 46.55671310]
[15.11345005 37.37395477]
[5.63901567 25.74489212]
[-0.95734650 12.27314281]
[-4.33324718 -2.34203076]
[-4.31345749 -17.34201813]
[-0.89900512 -31.94823265]
[5.73288059 -45.40253067]
[15.23796654 -57.00654984]
[27.12288475 -66.15798187]
[40.77073669 -72.38181305]
[55.47312546 -75.35499573]
[70.46691132 -74.92319489]
[84.97382355 -71.10882568]
[98.24088287 -64.10987854]
[109.57943726 -54.28964233]
[118.40096283 -42.15783691]
[124.24757385 -28.34417725]
[126.81578064 -13.56566906]
[125.97229767 1.41059649]
[121.76011658 15.80910397]
[132.85142517 5.71045399]
[143.94274902 -4.38819551]
[148.40551758 -20.16842651]
[164.36723328 -23.93081665]
[175.40785217 -11.80494308]
[170.16972351 3.73513675]
[154.04139709 6.70311975]
[142.95008850 16.80176926]
[131.85876465 26.90041924]
[123.73722839 39.51154709]
[119.13166046 53.78700638]
[114.52609253 68.06246948]
[128.58140564 87.56122589]
[125.84663391 108.65055084]
[111.48349762 120.32054138]
[114.27582550 135.05834961]
[117.06814575 149.79615784]
[127.23917389 161.91476440]
[122.00636292 175.85990906]
[124.79868317 190.59771729]
[127.59101105 205.33552551]
[152.41122437 217.26936340]
[158.07133484 246.58848572]
[172.19613647 251.63725281]
[186.32095337 256.68600464]
[200.44575500 261.73477173]
[213.18319702 252.87265015]
[228.69630432 253.22358704]
[241.01995850 262.65264893]
[245.41548157 277.53414917]
[240.19268799 292.14584351]
[227.35984802 300.86926270]
[211.85145569 300.35006714]
[199.63081360 290.78787231]
[195.39698792 275.85955811]
[181.27218628 270.81079102]
[167.14738464 265.76205444]
[153.02258301 260.71328735]
[140.76022339 269.35241699]
[140.76022339 284.35241699]
[140.76022339 299.35241699]
[140.76022339 314.35241699]
[140.76022339 329.35241699]
[140.76022339 344.35241699]
[140.76022339 359.35241699]
[140.76022339 374.35241699]
[140.76022339 389.35241699]
[140.76022339 404.35241699]
[140.76022339 419.35241699]
[155.30010986 423.41372681]
[168.20448303 431.24822998]
[178.51576233 442.27456665]
[185.46879578 455.67449951]
[188.54759216 470.45364380]
[187.52369690 485.51531982]
[182.47309875 499.74185181]
[173.77056885 512.07751465]
[162.06190491 521.60693359]
[148.21597290 527.62298584]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[30 112]
[31 111]
[32 110]
[34 108]
[35 107]
[36 106]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[45 52]
[46 51]
[63 103]
[64 102]
[65 101]
[91 100]
[92 99]
[93 98]
[114 129]
[115 128]
[116 127]
[117 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
