%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACUAAAACGGGGGGGGGGCCCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGxxxxxxxxxxUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCCCCCCCCCCCUACCUAAAAC\
) } def
/len { sequence length } bind def

/coor [
[84.60591125 353.41693115]
[70.75997162 347.40090942]
[59.05131149 337.87149048]
[50.34878540 325.53579712]
[45.29818726 311.30929565]
[44.27429581 296.24761963]
[47.35309219 281.46844482]
[54.30611420 268.06851196]
[64.61740112 257.04217529]
[77.52178192 249.20767212]
[92.06166840 245.14636230]
[92.06166840 230.14636230]
[92.06166840 215.14636230]
[92.06166840 200.14636230]
[92.06166840 185.14636230]
[92.06166840 170.14636230]
[92.06166840 155.14636230]
[92.06166840 140.14636230]
[92.06166840 125.14636230]
[92.06166840 110.14636230]
[84.10205841 122.86032104]
[72.50331116 132.37184143]
[58.47679520 137.68756104]
[43.48743057 138.25230408]
[29.10069656 134.00708008]
[16.81913567 125.39527893]
[7.92542553 113.31629181]
[3.34842110 99.03164673]
[3.56614137 84.03322601]
[8.55584812 69.88745117]
[17.79641914 58.07170868]
[30.32277489 49.82001877]
[44.82667160 45.99418259]
[59.79332733 46.99377060]
[73.65963745 52.71438599]
[84.97740936 62.55857468]
[92.56462860 75.49820709]
[95.62901306 90.18489075]
[100.82442474 76.11337280]
[106.01984406 62.04185486]
[111.21525574 47.97033691]
[97.54920959 41.77058411]
[84.36614990 34.60087585]
[71.73480988 26.49859428]
[59.72104263 17.50597954]
[48.38748169 7.66991472]
[37.79321671 -2.95831728]
[27.99348259 -14.32330513]
[19.03937149 -26.36579895]
[10.97756386 -39.02301025]
[3.85009289 -52.22895432]
[-2.30588245 -65.91477203]
[-7.45826721 -80.00912476]
[-11.58019829 -94.43852234]
[-14.65018749 -109.12773132]
[-16.65222740 -124.00017548]
[-17.57588005 -138.97831726]
[-17.41633224 -153.98405457]
[-16.17441368 -168.93916321]
[-13.85659981 -183.76568604]
[-10.47497368 -198.38629150]
[-6.04716778 -212.72477722]
[-0.59626532 -226.70639038]
[5.84931421 -240.25822449]
[13.25596619 -253.30963135]
[21.58507729 -265.79257202]
[30.79321861 -277.64196777]
[40.83238602 -288.79602051]
[51.65024185 -299.19656372]
[63.19038010 -308.78942871]
[75.39263916 -317.52456665]
[88.19339752 -325.35644531]
[101.52592468 -332.24423218]
[115.32070160 -338.15200806]
[129.50581360 -343.04898071]
[144.00730896 -346.90960693]
[158.74957275 -349.71377563]
[173.65576172 -351.44686890]
[188.64813232 -352.09982300]
[203.64854431 -351.66928101]
[218.57878113 -350.15744019]
[233.36102295 -347.57220459]
[247.91816711 -343.92703247]
[262.17434692 -339.24096680]
[276.05520630 -333.53842163]
[289.48840332 -326.84912109]
[302.40393066 -319.20794678]
[314.73437500 -310.65472412]
[326.41549683 -301.23403931]
[337.38641357 -290.99505615]
[347.58987427 -279.99111938]
[356.97274780 -268.27957153]
[365.48605347 -255.92153931]
[373.08544922 -242.98139954]
[379.73129272 -229.52664185]
[385.38891602 -215.62741089]
[390.02890015 -201.35615540]
[393.62695312 -186.78730774]
[396.16439819 -171.99679565]
[397.62796021 -157.06173706]
[398.01000977 -142.06001282]
[397.30859375 -127.06983185]
[395.52734375 -112.16932678]
[392.67550659 -97.43620300]
[388.76803589 -82.94727325]
[383.82522583 -68.77806091]
[377.87289429 -55.00245285]
[370.94204712 -41.69226456]
[363.06881714 -28.91688728]
[354.29428101 -16.74293137]
[344.66415405 -5.23386478]
[334.22869873 5.55030966]
[323.04223633 15.55336666]
[311.16314697 24.72315407]
[298.65335083 33.01186752]
[285.57806396 40.37628937]
[272.00546265 46.77802277]
[258.00631714 52.18369675]
[243.65357971 56.56512833]
[229.02210999 59.89947128]
[214.18817139 62.16934204]
[199.22912598 63.36290741]
[184.22294617 63.47394562]
[169.24787903 62.50187683]
[154.38198853 60.45176697]
[139.70277405 57.33430862]
[125.28678131 53.16575241]
[120.09136200 67.23727417]
[114.89595032 81.30879211]
[109.70053101 95.38031006]
[107.06166840 110.14636230]
[107.06166840 125.14636230]
[107.06166840 140.14636230]
[107.06166840 155.14636230]
[107.06166840 170.14636230]
[107.06166840 185.14636230]
[107.06166840 200.14636230]
[107.06166840 215.14636230]
[107.06166840 230.14636230]
[107.06166840 245.14636230]
[121.60155487 249.20767212]
[134.50593567 257.04217529]
[144.81721497 268.06851196]
[151.77024841 281.46844482]
[154.84904480 296.24761963]
[153.82514954 311.30929565]
[148.77455139 325.53579712]
[140.07202148 337.87149048]
[128.36335754 347.40090942]
[114.51742554 353.41693115]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[38 130]
[39 129]
[40 128]
[41 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
