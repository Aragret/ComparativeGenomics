%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCAUUAAGGGGGGGGGGCCUUCCCUCUACACUUAUCAUCUUCACAAUUCUAAUUCUACUGACUAUCCxxxxxxxxxxCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUGAUAUAUAAACUCAGACCCCCCCCCCCCCAAACAUUAA\
) } def
/len { sequence length } bind def

/coor [
[66.49767303 501.88528442]
[53.93944931 493.53414917]
[43.85322571 482.32168579]
[36.87303162 468.95278931]
[33.43764877 454.26779175]
[33.76302719 439.18981934]
[37.82870865 424.66671753]
[45.37913132 411.61135864]
[55.93965912 400.84448242]
[68.84645081 393.04284668]
[83.28818512 388.69689941]
[82.66420746 373.70986938]
[82.04022980 358.72283936]
[81.41625214 343.73583984]
[80.79227448 328.74880981]
[80.16829681 313.76181030]
[79.54431915 298.77478027]
[78.92034149 283.78778076]
[78.29636383 268.80075073]
[77.67238617 253.81373596]
[67.22837067 264.58047485]
[52.32599258 266.28903198]
[39.71618271 258.16546631]
[35.11130142 243.88977051]
[40.59741211 229.92901611]
[53.68924713 222.60755920]
[68.45607758 225.24206543]
[78.20853424 236.63948059]
[79.76611328 221.72056580]
[81.32369232 206.80166626]
[69.18750763 198.16577148]
[62.96200180 184.52395630]
[64.41023254 169.49835205]
[73.24293518 157.13388062]
[87.16946411 150.80938721]
[88.72704315 135.89047241]
[90.28462219 120.97155762]
[91.84220123 106.05265045]
[89.46931458 98.29034424]
[93.59052277 90.84071350]
[95.45813751 75.95743561]
[88.15840149 65.27250671]
[90.06153870 52.87907791]
[99.60018921 45.37430954]
[101.77702332 30.53310585]
[103.95386505 15.69189930]
[106.13069916 0.85069424]
[108.30753326 -13.99051094]
[95.74109650 -22.58387947]
[88.18267822 -35.72759628]
[87.08502197 -50.78798676]
[92.61241150 -64.77401733]
[103.61871338 -74.93131256]
[117.88455963 -79.28459930]
[120.06140137 -94.12580872]
[122.23823547 -108.96701050]
[124.41506958 -123.80821991]
[126.59191132 -138.64942932]
[128.76875305 -153.49063110]
[130.94558716 -168.33183289]
[129.08796692 -177.34300232]
[133.32518005 -183.45787048]
[135.81030273 -198.25057983]
[138.29542542 -213.04328918]
[124.22391510 -218.37985229]
[111.46405792 -226.35934448]
[100.50631714 -236.67506409]
[91.77186584 -248.93049622]
[85.59643555 -262.65457153]
[82.21739960 -277.31979370]
[81.76464081 -292.36242676]
[84.25554657 -307.20431519]
[89.59439087 -321.27496338]
[97.57595062 -334.03353882]
[107.89344025 -344.98959351]
[120.15028381 -353.72207642]
[133.87536621 -359.89526367]
[148.54112244 -363.27194214]
[163.58384705 -363.72225952]
[178.42532349 -361.22894287]
[192.49510193 -355.88784790]
[205.25238037 -347.90420532]
[216.20677185 -337.58493042]
[224.93725586 -325.32669067]
[231.10824585 -311.60061646]
[234.48252869 -296.93429565]
[234.93043518 -281.89151001]
[232.43470764 -267.05044556]
[227.09132385 -252.98152161]
[219.10562134 -240.22554016]
[208.78459167 -229.27281189]
[196.52491760 -220.54431152]
[182.79783630 -214.37554932]
[168.13099670 -211.00363159]
[153.08813477 -210.55816650]
[150.60301208 -195.76545715]
[148.11788940 -180.97276306]
[145.78678894 -166.15499878]
[143.60995483 -151.31379700]
[141.43312073 -136.47257996]
[139.25627136 -121.63137817]
[137.07943726 -106.79017639]
[134.90260315 -91.94896698]
[132.72576904 -77.10776520]
[145.14057922 -68.84108734]
[152.76638794 -55.95091629]
[154.04455566 -40.96668243]
[148.66821289 -26.85586929]
[137.65364075 -16.43634796]
[123.14874268 -11.81367397]
[120.97190857 3.02753115]
[118.79506683 17.86873627]
[116.61823273 32.70994186]
[114.44139099 47.55114746]
[121.80300140 63.45104218]
[110.34141541 77.82505035]
[108.47380829 92.70832825]
[106.76111603 107.61022949]
[105.20353699 122.52914429]
[103.64595795 137.44805908]
[102.08837128 152.36695862]
[114.40821838 161.43165588]
[120.49649811 175.35392761]
[118.80989075 190.35466003]
[109.90086365 202.41638184]
[96.24260712 208.35923767]
[94.68502045 223.27815247]
[93.12744141 238.19706726]
[92.65940094 253.18975830]
[93.28337860 268.17678833]
[93.90735626 283.16378784]
[94.53133392 298.15081787]
[95.15531158 313.13781738]
[95.77928925 328.12484741]
[96.40326691 343.11184692]
[97.02724457 358.09887695]
[97.65122223 373.08587646]
[98.27519989 388.07290649]
[113.02820587 391.20333862]
[126.53884125 397.90509033]
[137.95780945 407.75689697]
[146.56733704 420.13943481]
[151.82617188 434.27432251]
[153.40377808 449.27307129]
[151.20097351 464.19277954]
[145.35623169 478.09567261]
[136.23695374 490.10772705]
[124.41638184 499.47387695]
[110.63757324 505.60537720]
[95.76667023 508.11676025]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[28 128]
[29 127]
[30 126]
[35 121]
[36 120]
[37 119]
[38 118]
[40 117]
[41 116]
[44 114]
[45 113]
[46 112]
[47 111]
[48 110]
[54 104]
[55 103]
[56 102]
[57 101]
[58 100]
[59 99]
[60 98]
[62 97]
[63 96]
[64 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
