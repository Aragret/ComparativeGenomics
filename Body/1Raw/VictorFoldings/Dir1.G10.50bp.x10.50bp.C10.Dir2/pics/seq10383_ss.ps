%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUCGCCUGGGGGGGGGGUACCCCCCACUAUUAACCUACUGGGAGAACUCUCUGUGCUAGUAACCACGxxxxxxxxxxCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCUAACAGGUCCCCCCCCCCCAACCUCGCUU\
) } def
/len { sequence length } bind def

/coor [
[83.46883392 401.28930664]
[70.24863434 394.01684570]
[59.36183167 383.56982422]
[51.55070114 370.66058350]
[47.34782028 356.16925049]
[47.03974915 341.08392334]
[50.64749146 326.43310547]
[57.92506409 313.21572876]
[68.37627411 302.33294678]
[81.28853607 294.52679443]
[95.78147125 290.32949829]
[95.46941376 275.33276367]
[95.15735626 260.33599854]
[94.84529877 245.33924866]
[94.53324127 230.34249878]
[94.22119141 215.34574890]
[93.90913391 200.34898376]
[93.59707642 185.35223389]
[93.28501892 170.35548401]
[92.97296143 155.35873413]
[89.66801453 148.69367981]
[92.81368256 140.04748535]
[92.81368256 125.04748535]
[92.81368256 110.04748535]
[89.23788452 110.65514374]
[85.30792236 110.28802490]
[70.37361908 111.69033051]
[55.43930817 113.09262848]
[40.50500107 114.49493408]
[35.24551392 128.82324219]
[24.28408051 139.44444275]
[9.79710102 144.24966431]
[-5.33902264 142.28485107]
[-18.11900330 133.94009399]
[-26.00536537 120.87226868]
[-27.43226624 105.67600250]
[-22.11639595 91.36850739]
[-11.11322117 80.79056549]
[3.39256811 76.04242706]
[18.52083778 78.06683350]
[31.26785660 86.46184540]
[39.10269547 99.56063080]
[54.03700638 98.15832520]
[68.97131348 96.75601959]
[83.90561676 95.35371399]
[94.89128113 85.14023590]
[97.37640381 70.34752655]
[99.86151886 55.55482101]
[102.34664154 40.76211548]
[90.34835052 28.88385010]
[87.79576874 12.36217117]
[95.49562836 -2.28972769]
[110.25190735 -9.41415215]
[112.42874908 -24.25535774]
[105.22431946 -41.16914368]
[116.56648254 -54.52412033]
[118.43409729 -69.40740204]
[120.30171204 -84.29067993]
[122.16931915 -99.17395782]
[124.03693390 -114.05723572]
[125.90454865 -128.94052124]
[111.53348541 -133.37263489]
[98.15046692 -140.23309326]
[86.16217804 -149.31341553]
[75.93294525 -160.33764648]
[67.77362061 -172.97079468]
[61.93214417 -186.82894897]
[58.58604431 -201.49096680]
[57.83700180 -216.51129150]
[59.70777512 -231.43347168]
[64.14151764 -245.80403137]
[71.00349426 -259.18627930]
[80.08517456 -271.17352295]
[91.11057281 -281.40148926]
[103.74465179 -289.55938721]
[117.60346222 -295.39929199]
[132.26585388 -298.74374390]
[147.28627014 -299.49108887]
[162.20822144 -297.61862183]
[176.57829285 -293.18322754]
[189.95974731 -286.31973267]
[201.94596863 -277.23669434]
[212.17269897 -266.21014404]
[220.32916260 -253.57514954]
[226.16749573 -239.71566772]
[229.51026917 -225.05290222]
[230.25590515 -210.03240967]
[228.38174438 -195.11065674]
[223.94474792 -180.74110413]
[217.07974243 -167.36041260]
[207.99534607 -155.37522888]
[196.96762085 -145.14973450]
[184.33169556 -136.99470520]
[170.47155762 -131.15794373]
[155.80841064 -127.81684113]
[140.78782654 -127.07290649]
[138.92021179 -112.18962860]
[137.05259705 -97.30634308]
[135.18498230 -82.42306519]
[133.31738281 -67.53978729]
[131.44976807 -52.65650558]
[138.63650513 -42.87600708]
[137.15913391 -30.42464638]
[127.26995087 -22.07852173]
[125.09311676 -7.23731518]
[135.48867798 1.19643915]
[140.38342285 13.77232933]
[138.39280701 27.22922325]
[129.93296814 38.02015686]
[117.13935089 43.24723434]
[114.65422821 58.03993988]
[112.16911316 72.83264923]
[109.68399048 87.62535858]
[118.05669403 75.17955780]
[130.65605164 67.03976440]
[145.44342041 64.52304840]
[160.02610779 68.03662872]
[172.04455566 77.01197815]
[179.55409241 89.99684143]
[181.33966064 104.89018250]
[177.11233521 119.28218079]
[167.55609131 130.84413147]
[154.21722412 137.70521545]
[139.25402832 138.75529480]
[125.08763123 133.82446289]
[114.01024628 123.71053314]
[107.81368256 110.04748535]
[107.81368256 125.04748535]
[107.81368256 140.04748535]
[107.96971893 155.04667664]
[108.28177643 170.04342651]
[108.59382629 185.04017639]
[108.90588379 200.03694153]
[109.21794128 215.03369141]
[109.52999878 230.03044128]
[109.84205627 245.02719116]
[110.15411377 260.02395630]
[110.46616364 275.02069092]
[110.77822113 290.01745605]
[125.43321228 293.60821533]
[138.65902710 300.87048340]
[149.55389404 311.30908203]
[157.37498474 324.21228027]
[161.58906555 338.70034790]
[161.90878296 353.78546143]
[158.31234741 368.43905640]
[151.04499817 381.66204834]
[140.60218811 392.55288696]
[127.69596100 400.36901855]
[113.20626831 404.57748413]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 129]
[23 128]
[24 127]
[26 45]
[27 44]
[28 43]
[29 42]
[46 113]
[47 112]
[48 111]
[49 110]
[53 105]
[54 104]
[56 101]
[57 100]
[58 99]
[59 98]
[60 97]
[61 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
