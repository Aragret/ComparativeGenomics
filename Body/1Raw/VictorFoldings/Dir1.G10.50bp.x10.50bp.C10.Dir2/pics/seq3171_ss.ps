%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCACCCAAGGGGGGGGGGGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAACUUAAAxxxxxxxxxxUUUUAUUGCCACAACUAACCUCCUCGGACUCCUGCCUCACUCAUUUACACCCCCCCCCCCCAACCACCCAA\
) } def
/len { sequence length } bind def

/coor [
[74.24755859 408.31271362]
[60.22561264 402.75970459]
[48.02565765 393.89337158]
[38.41458511 382.27105713]
[31.99655914 368.62335205]
[29.17502213 353.80816650]
[30.12733841 338.75680542]
[34.79364395 324.41537476]
[42.88061142 311.68542480]
[53.87988663 301.36712646]
[67.10004425 294.10916138]
[81.71006012 290.36773682]
[81.71006012 275.36773682]
[81.71006012 260.36773682]
[81.71006012 245.36773682]
[81.71006012 230.36773682]
[81.71006012 215.36773682]
[81.71006012 200.36773682]
[81.71006012 185.36773682]
[81.71006012 170.36773682]
[81.71006012 155.36773682]
[81.71006012 140.36773682]
[69.29174042 131.95431519]
[55.36102676 137.51625061]
[41.43030930 143.07820129]
[27.49959373 148.64013672]
[19.87470245 162.75538635]
[4.06004238 165.45280457]
[-7.81273508 154.66314697]
[-6.63584995 138.66331482]
[6.68789196 129.72702026]
[21.93765640 134.70941162]
[35.86837387 129.14747620]
[49.79908752 123.58554077]
[63.72980499 118.02360535]
[61.81628418 93.36360931]
[74.35683441 73.31256104]
[95.35228729 65.04235840]
[96.58290100 50.09292221]
[94.15767670 41.22082520]
[97.99534607 34.85023117]
[99.53263855 19.92921257]
[101.06993103 5.00819635]
[102.60722351 -9.91281986]
[104.14451599 -24.83383560]
[105.52853394 -39.76984787]
[106.75914764 -54.71928406]
[100.18010712 -69.10771179]
[108.93548584 -81.15730286]
[110.16609955 -96.10673523]
[111.39670563 -111.05617523]
[111.24271393 -126.05538177]
[109.70542145 -140.97639465]
[95.78750610 -147.31982422]
[86.97162628 -159.69628906]
[85.54383087 -174.72386169]
[91.78787231 -188.35719299]
[103.93579865 -196.97657776]
[102.39850616 -211.89758301]
[100.86121368 -226.81860352]
[99.17081451 -241.72305298]
[97.32749176 -256.60937500]
[95.48416138 -271.49566650]
[93.64083862 -286.38198853]
[91.79751587 -301.26828003]
[77.01863098 -304.63879395]
[64.28549194 -312.86334229]
[55.13568497 -324.94873047]
[50.67409515 -339.43563843]
[51.43948364 -354.57464600]
[57.33942032 -368.53768921]
[67.66146088 -379.63864136]
[81.15917206 -386.53701782]
[96.20263672 -388.39981079]
[110.97528839 -385.00207520]
[123.69324493 -376.75405884]
[132.82077026 -364.65182495]
[137.25564575 -350.15673828]
[136.46237183 -335.01916504]
[130.53671265 -321.06701660]
[120.19422150 -309.98510742]
[106.68382263 -303.11160278]
[108.52714539 -288.22531128]
[110.37047577 -273.33898926]
[112.21379852 -258.45269775]
[114.05712128 -243.56637573]
[118.02478027 -237.27590942]
[115.78222656 -228.35589600]
[117.31951904 -213.43487549]
[118.85681152 -198.51387024]
[132.50697327 -192.55242920]
[141.39959717 -180.47860718]
[143.06581116 -165.47560120]
[136.95858765 -151.56163025]
[124.62643433 -142.51368713]
[126.16372681 -127.59267426]
[134.69309998 -139.93162537]
[148.48251343 -145.83518982]
[163.29817200 -143.49076843]
[174.59118652 -133.61819458]
[178.89424133 -119.24864197]
[174.88615417 -104.79405212]
[163.79753113 -94.69244385]
[149.03295898 -92.04532623]
[135.12561035 -97.66546631]
[126.34614563 -109.82556152]
[125.11553192 -94.87612152]
[123.88491821 -79.92668915]
[130.55198669 -66.60755157]
[121.70858765 -53.48867035]
[120.47797394 -38.53923798]
[123.07970428 -31.57194138]
[119.06552887 -23.29654312]
[117.52823639 -8.37552738]
[115.99094391 6.54548883]
[114.45365143 21.46650505]
[112.91635895 36.38752365]
[111.53233337 51.32353592]
[110.30171967 66.27297211]
[118.36516571 69.38422394]
[125.52247620 74.41570282]
[131.31857300 81.11007690]
[135.37007141 89.10279846]
[137.39044189 97.94180298]
[137.20965576 107.11301422]
[134.78723145 116.07025909]
[130.21775818 124.26778412]
[123.72804260 131.19345093]
[115.66640472 136.40068054]
[106.48406982 139.53704834]
[96.71006012 140.36773682]
[96.71006012 155.36773682]
[96.71006012 170.36773682]
[96.71006012 185.36773682]
[96.71006012 200.36773682]
[96.71006012 215.36773682]
[96.71006012 230.36773682]
[96.71006012 245.36773682]
[96.71006012 260.36773682]
[96.71006012 275.36773682]
[96.71006012 290.36773682]
[111.32006836 294.10916138]
[124.54022980 301.36712646]
[135.53950500 311.68542480]
[143.62646484 324.41537476]
[148.29277039 338.75680542]
[149.24508667 353.80816650]
[146.42355347 368.62335205]
[140.00552368 382.27105713]
[130.39445496 393.89337158]
[118.19449615 402.75970459]
[104.17255402 408.31271362]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 35]
[24 34]
[25 33]
[26 32]
[38 119]
[39 118]
[41 117]
[42 116]
[43 115]
[44 114]
[45 113]
[46 111]
[47 110]
[49 108]
[50 107]
[51 106]
[52 96]
[53 95]
[58 90]
[59 89]
[60 88]
[61 86]
[62 85]
[63 84]
[64 83]
[65 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
