%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCACAGCCGGGGGGGGGGUAAUUAUUAGCAUCAUCCCUCUACUAUUUUUUAACCAAAUCAACAACAACxxxxxxxxxxAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCUACCUAAACCCCCCCCCCACUCACAGCC\
) } def
/len { sequence length } bind def

/coor [
[85.00264740 366.56961060]
[71.15670776 360.55358887]
[59.44804764 351.02416992]
[50.74552155 338.68850708]
[45.69491959 324.46197510]
[44.67102814 309.40029907]
[47.74982834 294.62112427]
[54.70285034 281.22119141]
[65.01413727 270.19488525]
[77.91851807 262.36035156]
[92.45840454 258.29904175]
[92.45840454 243.29904175]
[92.45840454 228.29904175]
[92.45840454 213.29904175]
[92.45840454 198.29904175]
[92.45840454 183.29904175]
[92.45840454 168.29904175]
[92.45840454 153.29904175]
[92.45840454 138.29904175]
[92.45840454 123.29904938]
[92.45840454 108.29904938]
[79.95792389 116.58988953]
[65.61795807 112.18927765]
[59.91986084 98.31370544]
[67.02847290 85.10508728]
[81.74798584 82.21785736]
[93.31933594 91.76174927]
[94.87691498 76.84284210]
[96.43449402 61.92392731]
[97.99208069 47.00501633]
[83.20002747 44.48427963]
[68.60216522 41.01133728]
[54.25971985 36.60076141]
[40.23284912 31.27104568]
[26.58039093 25.04454803]
[13.35960484 17.94738388]
[0.62594575 10.00932121]
[-11.56717777 1.26365674]
[-23.16862297 -8.25292873]
[-34.12972641 -18.50051689]
[-44.40451813 -29.43612862]
[-53.94989777 -41.01389313]
[-62.72583008 -53.18524933]
[-70.69550323 -65.89914703]
[-77.82549286 -79.10225677]
[-84.08589172 -92.73920441]
[-89.45043945 -106.75279236]
[-93.89663696 -121.08423615]
[-97.40583801 -135.67341614]
[-99.96331787 -150.45916748]
[-101.55834961 -165.37944031]
[-102.18424988 -180.37168884]
[-101.83839417 -195.37298584]
[-100.52221680 -210.32044983]
[-98.24125671 -225.15136719]
[-95.00507355 -239.80354309]
[-90.82723999 -254.21549988]
[-85.72528076 -268.32681274]
[-79.72059631 -282.07827759]
[-72.83837128 -295.41220093]
[-65.10747528 -308.27270508]
[-56.56033325 -320.60577393]
[-47.23279190 -332.35977173]
[-37.16397858 -343.48532104]
[-26.39612198 -353.93576050]
[-14.97438908 -363.66732788]
[-2.94668603 -372.63912964]
[9.63653755 -380.81356812]
[22.72250366 -388.15634155]
[36.25632477 -394.63665771]
[50.18123245 -400.22735596]
[64.43882751 -404.90496826]
[78.96929932 -408.64987183]
[93.71170807 -411.44635010]
[108.60420990 -413.28268433]
[123.58435059 -414.15118408]
[138.58929443 -414.04821777]
[153.55610657 -412.97418213]
[168.42199707 -410.93359375]
[183.12463379 -407.93499756]
[197.60234070 -403.99099731]
[211.79437256 -399.11813354]
[225.64123535 -393.33685303]
[239.08483887 -386.67135620]
[252.06878662 -379.14965820]
[264.53860474 -370.80328369]
[276.44204712 -361.66723633]
[287.72912598 -351.77981567]
[298.35250854 -341.18255615]
[308.26766968 -329.91983032]
[317.43301392 -318.03894043]
[325.81005859 -305.58969116]
[333.36370850 -292.62429810]
[340.06225586 -279.19714355]
[345.87762451 -265.36456299]
[350.78540039 -251.18455505]
[354.76501465 -236.71661377]
[357.79977417 -222.02140808]
[359.87695312 -207.16058350]
[360.98785400 -192.19645691]
[361.12777710 -177.19181824]
[360.29614258 -162.20957947]
[358.49645996 -147.31259155]
[355.73626709 -132.56335449]
[352.02716064 -118.02370453]
[347.38464355 -103.75463867]
[341.82824707 -89.81600952]
[335.38125610 -76.26628113]
[328.07073975 -63.16227722]
[319.92727661 -50.55897141]
[310.98510742 -38.50922012]
[301.28173828 -27.06356621]
[290.85778809 -16.27001762]
[279.75708008 -6.17384577]
[268.02609253 3.18260074]
[255.71408081 11.76007843]
[242.87265015 19.52260971]
[229.55569458 26.43763733]
[215.81906128 32.47615433]
[201.72035217 37.61283493]
[187.31872559 41.82612991]
[172.67457581 45.09837341]
[157.84930420 47.41583633]
[142.90513611 48.76879883]
[127.90472412 49.15158844]
[112.91098785 48.56259918]
[111.35340881 63.48151016]
[109.79582977 78.40042114]
[108.23824310 93.31933594]
[107.45840454 108.29904938]
[107.45840454 123.29904938]
[107.45840454 138.29904175]
[107.45840454 153.29904175]
[107.45840454 168.29904175]
[107.45840454 183.29904175]
[107.45840454 198.29904175]
[107.45840454 213.29904175]
[107.45840454 228.29904175]
[107.45840454 243.29904175]
[107.45840454 258.29904175]
[121.99829102 262.36035156]
[134.90266418 270.19488525]
[145.21395874 281.22119141]
[152.16697693 294.62112427]
[155.24577332 309.40029907]
[154.22187805 324.46197510]
[149.17127991 338.68850708]
[140.46875000 351.02416992]
[128.76010132 360.55358887]
[114.91415405 366.56961060]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[27 129]
[28 128]
[29 127]
[30 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
