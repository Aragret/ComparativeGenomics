%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCCCUGUAGGGGGGGGGGGCAUUGUUCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUGAUAUAUAAACxxxxxxxxxxACCAAGACCUCAACCCCUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCCCCCCCCCCCAUCGCUGUAG\
) } def
/len { sequence length } bind def

/coor [
[101.30141449 474.10351562]
[88.08319855 466.82745361]
[77.19923401 456.37747192]
[69.39161682 443.46612549]
[65.19267273 428.97366333]
[64.88870239 413.88824463]
[68.50042725 399.23840332]
[75.78159332 386.02297974]
[86.23576355 375.14306641]
[99.15014648 367.34042358]
[113.64422607 363.14706421]
[113.33625031 348.15023804]
[113.02826691 333.15341187]
[112.72029114 318.15655518]
[112.41231537 303.15972900]
[112.10433960 288.16287231]
[111.79635620 273.16604614]
[111.48838043 258.16921997]
[111.18040466 243.17237854]
[110.87242889 228.17553711]
[110.56444550 213.17869568]
[110.25646973 198.18185425]
[109.79454803 183.18898010]
[109.17871857 168.20161438]
[108.56289673 153.21426392]
[107.94706726 138.22691345]
[93.88430786 137.92439270]
[81.07045746 132.70071411]
[71.13771820 123.39718628]
[65.28775787 111.36261749]
[64.14749146 98.25937653]
[67.70540619 85.83428192]
[75.33432007 75.68574524]
[85.89489746 69.05830383]
[82.83650208 54.37340927]
[79.77810669 39.68851089]
[76.71971130 25.00361252]
[73.66131592 10.31871605]
[58.74617767 12.01081467]
[43.73853302 12.31948471]
[28.76642990 11.24209309]
[13.95760727 8.78783131]
[-0.56158942 4.97763968]
[-14.66728497 -0.15597542]
[-28.23913193 -6.56921387]
[-41.16133499 -14.20735931]
[-53.32365036 -23.00524521]
[-64.62230682 -32.88780594]
[-74.96089935 -43.77072906]
[-84.25123596 -55.56116486]
[-92.41404724 -68.15851593]
[-99.37968445 -81.45529938]
[-105.08871460 -95.33808136]
[-109.49244690 -109.68840790]
[-112.55329132 -124.38384247]
[-114.24514008 -139.29901123]
[-114.55355835 -154.30665588]
[-113.47592163 -169.27874756]
[-111.02140808 -184.08752441]
[-107.21097565 -198.60665894]
[-102.07712555 -212.71226501]
[-95.66366577 -226.28401184]
[-88.02529907 -239.20608521]
[-79.22721100 -251.36825562]
[-69.34445953 -262.66674805]
[-58.46136856 -273.00515747]
[-46.67078018 -282.29528809]
[-34.07329178 -290.45788574]
[-20.77639008 -297.42330933]
[-6.89351511 -303.13211060]
[7.45688343 -307.53561401]
[22.15237236 -310.59622192]
[37.06756973 -312.28781128]
[52.07522202 -312.59597778]
[67.04728699 -311.51809692]
[81.85603333 -309.06332397]
[96.37509918 -305.25265503]
[110.48062897 -300.11856079]
[124.05226135 -293.70489502]
[136.97421265 -286.06631470]
[149.13623047 -277.26800537]
[160.43455505 -267.38507080]
[170.77279663 -256.50180054]
[180.06272888 -244.71105957]
[188.22511292 -232.11344910]
[195.19030762 -218.81642151]
[200.89888000 -204.93345642]
[205.30213928 -190.58297729]
[208.36248779 -175.88745117]
[210.05384827 -160.97221375]
[210.36177063 -145.96455383]
[209.28363037 -130.99250793]
[206.82862854 -116.18380737]
[203.01770020 -101.66480255]
[197.88339233 -87.55936432]
[191.46946716 -73.98783875]
[183.83067322 -61.06601334]
[175.03218079 -48.90414047]
[165.14906311 -37.60597992]
[154.26560974 -27.26792526]
[142.47471619 -17.97817993]
[129.87696838 -9.81600285]
[116.57982635 -2.85103130]
[102.69676208 2.85731077]
[88.34621429 7.26032019]
[91.40460968 21.94521713]
[94.46300507 36.63011551]
[97.52140045 51.31501389]
[100.57979584 65.99990845]
[113.48900604 67.68981934]
[125.17658997 74.23895264]
[133.83395386 84.95415497]
[138.00598145 98.47902679]
[136.82942200 112.96326447]
[151.60154724 115.56798553]
[166.37365723 118.17271423]
[181.14576721 120.77743530]
[197.79420471 117.57338715]
[205.48178101 132.68423462]
[193.08961487 144.25447083]
[178.54104614 135.54954529]
[163.76893616 132.94482422]
[148.99682617 130.34010315]
[134.22470093 127.73538208]
[122.93442535 137.61108398]
[123.55024719 152.59843445]
[124.16607666 167.58580017]
[124.78189850 182.57315063]
[128.27902222 191.07997131]
[125.25331116 197.87388611]
[125.56128693 212.87071228]
[125.86926270 227.86755371]
[126.17724609 242.86439514]
[126.48522186 257.86123657]
[126.79319763 272.85806274]
[127.10117340 287.85491943]
[127.40914917 302.85174561]
[127.71713257 317.84857178]
[128.02510071 332.84542847]
[128.33308411 347.84225464]
[128.64106750 362.83911133]
[143.29507446 366.43386841]
[156.51890564 373.69970703]
[167.41093445 384.14126587]
[175.22853088 397.04660034]
[179.43865967 411.53582764]
[179.75427246 426.62100220]
[176.15386963 441.27362061]
[168.88290405 454.49465942]
[158.43714905 465.38265991]
[145.52879333 473.19525146]
[131.03794861 477.39978027]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 128]
[24 127]
[25 126]
[26 125]
[34 109]
[35 108]
[36 107]
[37 106]
[38 105]
[114 124]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
