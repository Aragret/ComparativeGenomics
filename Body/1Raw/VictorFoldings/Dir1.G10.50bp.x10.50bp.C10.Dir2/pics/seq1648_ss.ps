%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAUAGCCCUGGGGGGGGGGUAUGAAACUUAAGGGUCGAAGGUGGAUUUAGCAGUAAACUAAGAGUAGAGxxxxxxxxxxCCUUAUCCCCAUACUAGUUAUUAUCGAAACCAUCAGCCUACUCAUUCAACCCCCCCCCCCCAAUAGCCCU\
) } def
/len { sequence length } bind def

/coor [
[83.48200989 550.62573242]
[70.26181793 543.35327148]
[59.37501144 532.90625000]
[51.56388092 519.99700928]
[47.36100006 505.50570679]
[47.05292892 490.42037964]
[50.66066742 475.76956177]
[57.93824387 462.55215454]
[68.38945007 451.66940308]
[81.30171204 443.86325073]
[95.79464722 439.66595459]
[95.48258972 424.66921997]
[95.17053223 409.67245483]
[94.85848236 394.67568970]
[94.54642487 379.67895508]
[94.23436737 364.68218994]
[93.92230988 349.68542480]
[93.61025238 334.68869019]
[93.29819489 319.69192505]
[92.98614502 304.69519043]
[92.67408752 289.69842529]
[89.36913300 283.03335571]
[92.51480103 274.38717651]
[92.51480103 259.38717651]
[92.51480103 244.38717651]
[92.51480103 229.38717651]
[79.03173828 223.00967407]
[69.61600494 211.36264038]
[66.17681885 196.72253418]
[69.44845581 181.98086548]
[78.83430481 170.07319641]
[92.51480103 163.39447021]
[92.51480103 148.39447021]
[92.51480103 133.39447021]
[84.77750397 120.66719818]
[92.51480103 106.86702728]
[89.34870911 99.39307404]
[92.67408752 91.55577850]
[92.98614502 76.55902863]
[85.53761292 62.60087585]
[93.53800964 50.03732300]
[93.85006714 35.04056931]
[94.16212463 20.04381561]
[91.36979675 5.30600882]
[85.59352875 -8.53720856]
[79.81725311 -22.38042641]
[74.04098511 -36.22364426]
[65.27477264 -48.39548111]
[53.97577286 -58.26120377]
[42.67676544 -68.12693024]
[31.37776184 -77.99265289]
[15.95631313 -75.40171051]
[2.50365949 -83.37417603]
[-2.62826824 -98.14567566]
[2.98366928 -112.74157715]
[16.68968773 -120.27012634]
[32.01822281 -117.17658234]
[41.73160934 -104.92161560]
[41.24348450 -89.29165649]
[52.54248810 -79.42593384]
[63.84149551 -69.56021118]
[75.14049530 -59.69448471]
[70.58738708 -73.98676300]
[69.81499481 -88.96686554]
[72.87400818 -103.65163422]
[79.56367493 -117.07729340]
[89.44493866 -128.36271667]
[101.86927795 -136.76721191]
[116.02128601 -141.73921204]
[130.97215271 -142.95237732]
[145.74063110 -140.32710266]
[159.35745239 -134.03567505]
[170.92893982 -124.49101257]
[179.69564819 -112.31953430]
[185.08221436 -98.32007599]
[186.73510742 -83.41142273]
[184.54585266 -68.57204437]
[178.65811157 -54.77586365]
[169.45832825 -42.92833328]
[157.55027771 -33.80701828]
[143.71549988 -28.01055527]
[128.86198425 -25.91937447]
[113.96458435 -27.67072105]
[100.00100708 -33.14965057]
[87.88420105 -41.99991608]
[93.66047668 -28.15669823]
[99.43674469 -14.31348133]
[105.21302032 -0.47026342]
[107.47796631 -15.29827785]
[113.75624847 -28.92116737]
[123.55790710 -40.27579117]
[136.11801147 -48.47602844]
[150.45635986 -52.88191605]
[165.45396423 -53.14962387]
[179.94041443 -49.25825500]
[192.78517151 -41.51149750]
[202.98582458 -30.51391411]
[209.74627686 -17.12376595]
[212.53898621 -2.38603067]
[211.14596558 12.54914570]
[205.67593384 26.51621056]
[196.55580139 38.42515945]
[184.49728394 47.34661102]
[170.44145203 52.58432388]
[155.48524475 53.72954559]
[140.79583740 50.69289780]
[127.51959991 43.71137238]
[116.69264221 33.32980347]
[109.15888214 20.35587120]
[108.84682465 35.35262299]
[108.53476715 50.34937668]
[116.00561523 63.23485947]
[107.98289490 76.87107849]
[107.67083740 91.86783600]
[107.51480103 106.86702728]
[115.25210571 120.66719818]
[107.51480103 133.39447021]
[107.51480103 148.39447021]
[107.51480103 163.39447021]
[121.19530487 170.07319641]
[130.58114624 181.98086548]
[133.85279846 196.72253418]
[130.41360474 211.36264038]
[120.99786377 223.00967407]
[107.51480103 229.38717651]
[107.51480103 244.38717651]
[107.51480103 259.38717651]
[107.51480103 274.38717651]
[107.67083740 289.38635254]
[107.98289490 304.38311768]
[108.29495239 319.37988281]
[108.60700989 334.37661743]
[108.91906738 349.37338257]
[109.23111725 364.37014771]
[109.54317474 379.36688232]
[109.85523224 394.36364746]
[110.16728973 409.36038208]
[110.47934723 424.35714722]
[110.79140472 439.35391235]
[125.44639587 442.94467163]
[138.67221069 450.20693970]
[149.56707764 460.64553833]
[157.38816833 473.54873657]
[161.60223389 488.03680420]
[161.92196655 503.12188721]
[158.32553101 517.77551270]
[151.05816650 530.99853516]
[140.61537170 541.88934326]
[127.70913696 549.70544434]
[113.21945190 553.91394043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[23 128]
[24 127]
[25 126]
[26 125]
[32 119]
[33 118]
[34 117]
[36 115]
[38 114]
[39 113]
[41 111]
[42 110]
[43 109]
[44 88]
[45 87]
[46 86]
[47 85]
[48 62]
[49 61]
[50 60]
[51 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
