%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAGACGAGGGGGGGGGGGCUACCUAAGAACAGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGxxxxxxxxxxGCCAUCAUCCUAGUCCUCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUCCCCCCCCCCAACAGACGAG\
) } def
/len { sequence length } bind def

/coor [
[70.76451111 364.01602173]
[57.89123917 356.11312866]
[47.76694489 344.90264893]
[41.21236420 331.29330444]
[38.75884247 316.38836670]
[40.60527802 301.39611816]
[46.60198975 287.53192139]
[56.26285172 275.91967773]
[68.80470276 267.50073242]
[83.21082306 262.95755005]
[82.89876556 247.96080017]
[82.58670807 232.96405029]
[82.27465057 217.96730042]
[81.96259308 202.97055054]
[81.65054321 187.97378540]
[81.33848572 172.97703552]
[81.02642822 157.98028564]
[80.71437073 142.98353577]
[80.40231323 127.98677826]
[70.30366516 116.89546204]
[55.40176392 115.18276978]
[40.49986267 113.47007751]
[25.59795952 111.75739288]
[10.69605637 110.04470062]
[1.14836586 119.59976196]
[-11.97146225 121.85765839]
[-23.81199837 116.21176910]
[-30.12601280 104.93657684]
[-44.98905945 102.91423798]
[-59.85210419 100.89190674]
[-72.78794861 116.03402710]
[-92.08121490 120.36200714]
[-109.98548889 112.31336212]
[-119.41687775 95.26004028]
[-134.39659119 94.48019409]
[-149.37631226 93.70034790]
[-162.20942688 103.32794952]
[-177.70108032 99.15802002]
[-183.96739197 84.38938141]
[-176.20140076 70.35125732]
[-160.36048889 67.81250763]
[-148.59646606 78.72063446]
[-133.61674500 79.50048065]
[-118.63703918 80.28032684]
[-113.98970795 70.88207245]
[-106.42926788 63.56280136]
[-96.81539917 59.19067001]
[-86.25339508 58.29667282]
[-75.96712494 61.01029587]
[-67.15718842 67.04148102]
[-60.86082077 75.71141815]
[-57.82977295 86.02885437]
[-42.96672440 88.05119324]
[-28.10367775 90.07352448]
[-15.19892693 79.33456421]
[1.81821585 81.25834656]
[12.40874577 95.14279938]
[27.31064796 96.85549164]
[42.21255112 98.56817627]
[57.11445236 100.28086853]
[72.01635742 101.99356079]
[85.87300110 79.32054138]
[109.45027161 80.09566498]
[120.11190033 69.54437256]
[130.77352905 58.99308395]
[121.38523102 47.27653122]
[113.27309418 34.64280701]
[106.52600861 21.23033333]
[101.21788788 7.18606091]
[97.40689087 -7.33613062]
[95.13478088 -22.17712975]
[94.42645264 -37.17432785]
[95.28965759 -52.16341019]
[97.71495056 -66.98014832]
[101.67574310 -81.46219635]
[107.12865448 -95.45088959]
[114.01393127 -108.79295349]
[122.25613403 -121.34220886]
[131.76495361 -132.96115112]
[142.43621826 -143.52249146]
[154.15299988 -152.91050720]
[166.78691101 -161.02233887]
[180.19955444 -167.76910400]
[194.24395752 -173.07688904]
[208.76623535 -176.88752747]
[223.60729980 -179.15927124]
[238.60450745 -179.86723328]
[253.59356689 -179.00366211]
[268.41024780 -176.57801819]
[282.89221191 -172.61686707]
[296.88076782 -167.16362000]
[310.22265625 -160.27801514]
[322.77172852 -152.03550720]
[334.39044189 -142.52641296]
[344.95150757 -131.85488892]
[354.33923340 -120.13787842]
[362.45077515 -107.50376129]
[369.19720459 -94.09095764]
[374.50463867 -80.04643250]
[378.31494141 -65.52405548]
[380.58630371 -50.68294525]
[381.29391479 -35.68571091]
[380.42999268 -20.69667053]
[378.00396729 -5.88005209]
[374.04248047 8.60180664]
[368.58889771 22.59023285]
[361.70297241 35.93196487]
[353.46014404 48.48081970]
[343.95077515 60.09930420]
[333.27899170 70.66012573]
[321.56173706 80.04756927]
[308.92742920 88.15878296]
[295.51446533 94.90489960]
[281.46981812 100.21199036]
[266.94732666 104.02192688]
[252.10617065 106.29295349]
[237.10893250 107.00019073]
[222.11990356 106.13589478]
[207.30334473 103.70952606]
[192.82157898 99.74767303]
[178.83329773 94.29374695]
[165.49172974 87.40749359]
[152.94306946 79.16438293]
[141.32481384 69.65470886]
[130.66319275 80.20600128]
[120.00156403 90.75729370]
[123.23798370 100.01886749]
[122.17105103 110.28894806]
[116.57312775 119.57199097]
[107.13437653 125.88524628]
[95.39907074 127.67472076]
[95.71112823 142.67147827]
[96.02317810 157.66822815]
[96.33523560 172.66497803]
[96.64729309 187.66172791]
[96.95935059 202.65849304]
[97.27140808 217.65524292]
[97.58346558 232.65199280]
[97.89551544 247.64874268]
[98.20757294 262.64550781]
[112.79021454 266.58544922]
[125.67142487 274.47540283]
[135.80697632 285.67572021]
[142.37522888 299.27847290]
[144.84371948 314.18093872]
[143.01234436 329.17501831]
[137.02955627 343.04522705]
[127.38037109 354.66720581]
[114.84699249 363.09875488]
[100.44543457 367.65637207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[28 54]
[29 53]
[30 52]
[34 44]
[35 43]
[36 42]
[63 126]
[64 125]
[65 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
