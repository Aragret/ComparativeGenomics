%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUCCUAUCUCUCGGGGGGGGGGCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACAGACCGCAACCUCAAxxxxxxxxxxCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCAUUCCCCCCCCCCCUCCUCCUAUCCCUC\
) } def
/len { sequence length } bind def

/coor [
[85.02166748 413.18167114]
[70.58479309 408.94219971]
[57.21125412 402.04690552]
[45.38450623 392.74505615]
[35.53207397 381.37289429]
[28.01011658 368.34152222]
[23.09054756 354.12200928]
[20.95120811 339.22839355]
[21.66943169 324.19906616]
[25.21925735 309.57733154]
[31.47235870 295.89175415]
[40.20269394 283.63705444]
[51.09466171 273.25622559]
[63.75452805 265.12454224]
[77.72463989 259.53594971]
[92.50000000 256.69247437]
[92.50000000 241.69248962]
[92.50000000 226.69248962]
[92.50000000 211.69248962]
[92.50000000 196.69248962]
[92.50000000 181.69248962]
[92.50000000 166.69248962]
[92.50000000 151.69248962]
[92.50000000 136.69248962]
[92.50000000 121.69248199]
[86.40043640 118.48960876]
[81.52611542 113.62091827]
[67.20697784 118.08883667]
[52.88784027 122.55675507]
[38.56870270 127.02468109]
[27.85749626 139.44248962]
[11.80055332 136.10983276]
[6.91588211 120.45505524]
[18.22841263 108.58245087]
[34.10078430 112.70554352]
[48.41992188 108.23761749]
[62.73905945 103.76969910]
[77.05819702 99.30178070]
[83.22554016 84.33374786]
[97.73780823 77.15932465]
[101.21813965 62.56867218]
[104.69847107 47.97801208]
[90.38018799 43.48672485]
[76.41008759 38.00757980]
[62.85622787 31.56727219]
[49.78463745 24.19717979]
[37.25900650 15.93320942]
[25.34035110 6.81562090]
[14.08674431 -3.11116433]
[3.55301237 -13.79878330]
[-6.20952606 -25.19516754]
[-15.15330791 -37.24479294]
[-23.23476028 -49.88895798]
[-30.41450882 -63.06605530]
[-36.65757751 -76.71189117]
[-41.93354797 -90.75997925]
[-46.21671677 -105.14188385]
[-49.48621368 -119.78753662]
[-51.72611618 -134.62557983]
[-52.92550659 -149.58372498]
[-53.07854080 -164.58911133]
[-52.18447876 -179.56860352]
[-50.24766922 -194.44924927]
[-47.27755737 -209.15853882]
[-43.28860474 -223.62480164]
[-38.30024719 -237.77758789]
[-32.33678818 -251.54791260]
[-25.42728615 -264.86871338]
[-17.60539627 -277.67504883]
[-8.90923214 -289.90460205]
[0.61884218 -301.49771118]
[10.93240547 -312.39794922]
[21.98121071 -322.55218506]
[33.71142960 -331.91098022]
[46.06591034 -340.42868042]
[58.98446655 -348.06384277]
[72.40415192 -354.77923584]
[86.25959778 -360.54217529]
[100.48329926 -365.32455444]
[115.00595093 -369.10308838]
[129.75680542 -371.85937500]
[144.66398621 -373.57995605]
[159.65489197 -374.25646973]
[174.65646362 -373.88562012]
[189.59562683 -372.46920776]
[204.39959717 -370.01416016]
[218.99623108 -366.53237915]
[233.31445312 -362.04089355]
[247.28446960 -356.56155396]
[260.83825684 -350.12106323]
[273.90972900 -342.75076294]
[286.43524170 -334.48663330]
[298.35375977 -325.36886597]
[309.60723877 -315.44192505]
[320.14080811 -304.75415039]
[329.90319824 -293.35763550]
[338.84680176 -281.30786133]
[346.92807007 -268.66360474]
[354.10763550 -255.48638916]
[360.35049438 -241.84046936]
[365.62625122 -227.79229736]
[369.90924072 -213.41032410]
[373.17852783 -198.76463318]
[375.41821289 -183.92655945]
[376.61737061 -168.96839905]
[376.77020264 -153.96301270]
[375.87591553 -138.98352051]
[373.93890381 -124.10291290]
[370.96856689 -109.39366913]
[366.97943115 -94.92745209]
[361.99084473 -80.77474976]
[356.02719116 -67.00450897]
[349.11752319 -53.68381882]
[341.29544067 -40.87757111]
[332.59909058 -28.64816666]
[323.07086182 -17.05517769]
[312.75714111 -6.15508986]
[301.70819092 3.99899387]
[289.97784424 13.35760307]
[277.62322998 21.87514305]
[264.70455933 29.51011848]
[251.28477478 36.22533035]
[237.42926025 41.98806000]
[223.20549011 46.77023697]
[208.68278503 50.54856110]
[193.93188477 53.30462265]
[179.02467346 55.02499771]
[164.03376770 55.70130157]
[149.03219604 55.33023834]
[134.09306335 53.91362000]
[119.28912354 51.45834351]
[115.80879211 66.04900360]
[112.32846069 80.63965607]
[122.20130157 94.17624664]
[120.24420166 110.81601715]
[107.50000000 121.69248199]
[107.50000000 136.69248962]
[107.50000000 151.69248962]
[107.50000000 166.69248962]
[107.50000000 181.69248962]
[107.50000000 196.69248962]
[107.50000000 211.69248962]
[107.50000000 226.69248962]
[107.50000000 241.69248962]
[107.50000000 256.69247437]
[122.27536011 259.53594971]
[136.24546814 265.12454224]
[148.90533447 273.25622559]
[159.79730225 283.63705444]
[168.52763367 295.89175415]
[174.78074646 309.57733154]
[178.33056641 324.19906616]
[179.04879761 339.22839355]
[176.90945435 354.12200928]
[171.98988342 368.34152222]
[164.46792603 381.37289429]
[154.61549377 392.74505615]
[142.78874207 402.04690552]
[129.41520691 408.94219971]
[114.97833252 413.18167114]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 145]
[17 144]
[18 143]
[19 142]
[20 141]
[21 140]
[22 139]
[23 138]
[24 137]
[25 136]
[27 38]
[28 37]
[29 36]
[30 35]
[40 133]
[41 132]
[42 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
