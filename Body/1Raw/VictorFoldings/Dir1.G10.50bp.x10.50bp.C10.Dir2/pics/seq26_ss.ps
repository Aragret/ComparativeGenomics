%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUAUUAAGGGGGGGGGGCCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUGxxxxxxxxxxACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCCCCCCCCCCCACCCUACUAA\
) } def
/len { sequence length } bind def

/coor [
[85.40077972 378.60668945]
[73.06767273 369.95556641]
[62.96922302 358.77661133]
[55.61196899 345.63055420]
[51.36494827 331.17681885]
[50.44118881 316.14038086]
[52.88702774 301.27545166]
[58.57978058 287.32769775]
[67.23390198 274.99667358]
[78.41530609 264.90093994]
[91.56313324 257.54687500]
[106.01790619 253.30335999]
[105.09449005 238.33180237]
[104.17107391 223.36026001]
[103.24766541 208.38870239]
[102.32424927 193.41716003]
[101.40083313 178.44560242]
[100.47742462 163.47406006]
[99.55400848 148.50250244]
[98.63059235 133.53096008]
[97.70718384 118.55940247]
[86.31610870 108.80013275]
[71.38009644 110.18415833]
[56.44408035 111.56818390]
[41.82507324 114.92743683]
[27.78309822 120.20217896]
[13.74112225 125.47692108]
[3.75319386 138.48358154]
[-12.46724319 136.06916809]
[-18.23399353 120.71739960]
[-7.61472034 108.22087860]
[8.46638012 111.43494415]
[22.50835609 106.16020203]
[36.55033493 100.88545990]
[21.98547173 97.29870605]
[10.07048798 88.18645477]
[2.79401922 75.06955719]
[1.37052405 60.13725662]
[6.03758669 45.88178253]
[16.01626396 34.68240738]
[29.64109421 28.40833092]
[44.63806152 28.10671234]
[58.50413895 33.82788849]
[68.92504883 44.61698914]
[74.16152191 58.67328262]
[73.33956909 73.65074158]
[66.59638977 87.04960632]
[55.06005859 96.63217163]
[69.99607086 95.24814606]
[84.93208313 93.86412048]
[97.52052307 85.70745087]
[104.88676453 72.64075470]
[112.25299835 59.57406235]
[119.61923981 46.50736618]
[126.98548126 33.44067383]
[134.35171509 20.37397766]
[141.71795654 7.30728245]
[149.08419800 -5.75941277]
[156.45043945 -18.82610703]
[146.28900146 -46.50606155]
[171.83972168 -71.32541656]
[175.19898987 -85.94441986]
[178.55824280 -100.56343079]
[181.91751099 -115.18244171]
[185.27676392 -129.80145264]
[187.72969055 -144.59951782]
[189.26698303 -159.52053833]
[190.80427551 -174.44155884]
[176.75718689 -179.97161865]
[164.72367859 -189.08740234]
[155.59672546 -201.11244202]
[150.05363464 -215.15438843]
[148.50570679 -230.17126465]
[151.06781006 -245.04870605]
[157.54985046 -258.68270874]
[167.47077942 -270.06152344]
[180.09442139 -278.34078979]
[194.48400879 -282.90612793]
[209.57174683 -283.41873169]
[224.23802185 -279.84060669]
[237.39450073 -272.43722534]
[248.06486511 -261.75802612]
[255.45733643 -248.59542847]
[259.02331543 -233.92619324]
[258.49819946 -218.83888245]
[253.92095947 -204.45307922]
[245.63124084 -191.83630371]
[234.24420166 -181.92478943]
[220.60484314 -175.45405579]
[205.72529602 -172.90426636]
[204.18800354 -157.98324585]
[202.65071106 -143.06222534]
[215.17158508 -151.32225037]
[229.90284729 -148.49566650]
[238.47727966 -136.18797302]
[236.02464294 -121.38985443]
[223.93801880 -112.50651550]
[209.08253479 -114.58364105]
[199.89576721 -126.44218445]
[196.53651428 -111.82318115]
[193.17726135 -97.20417023]
[189.81799316 -82.58516693]
[186.45874023 -67.96615601]
[191.67974854 -62.58181763]
[206.22668457 -66.24055481]
[202.12174988 -51.81313705]
[207.34275818 -46.42879868]
[222.05827332 -49.33627319]
[236.42504883 -58.33806610]
[249.05216980 -47.02469635]
[241.67646790 -31.75920296]
[224.96574402 -34.62075043]
[210.25022888 -31.71327782]
[206.06179810 -22.71800423]
[199.83027649 -15.68822002]
[192.29277039 -11.01816273]
[184.23664856 -8.85533333]
[176.42300415 -9.10546780]
[169.51713562 -11.45986843]
[162.15089417 1.60682690]
[154.78465271 14.67352200]
[147.41841125 27.74021721]
[140.05216980 40.80691147]
[132.68592834 53.87360764]
[125.31969452 66.94029999]
[117.95345306 80.00699615]
[110.58721924 93.07369232]
[116.89567566 103.14575195]
[112.67873383 117.63599396]
[113.60214233 132.60754395]
[114.52555847 147.57908630]
[115.44897461 162.55064392]
[116.37238312 177.52218628]
[117.29579926 192.49374390]
[118.21921539 207.46528625]
[119.14262390 222.43684387]
[120.06604004 237.40838623]
[120.98945618 252.37994385]
[135.85614014 254.81497192]
[149.80804443 260.49758911]
[162.14533997 269.14273071]
[172.24920654 280.31680298]
[179.61283875 293.45928955]
[183.86685181 307.91094971]
[184.79789734 322.94696045]
[182.35926819 337.81304932]
[176.67327881 351.76358032]
[168.02513123 364.09878540]
[156.84861755 374.19995117]
[143.70436096 381.56036377]
[129.25164795 385.81088257]
[114.21543884 386.73831177]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 50]
[23 49]
[24 48]
[25 34]
[26 33]
[27 32]
[51 127]
[52 126]
[53 125]
[54 124]
[55 123]
[56 122]
[57 121]
[58 120]
[59 119]
[61 103]
[62 102]
[63 101]
[64 100]
[65 99]
[66 92]
[67 91]
[68 90]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
