%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUCCCCAGGGGGGGGGGAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUxxxxxxxxxxAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCCCCCCCCCCCUCCCCA\
) } def
/len { sequence length } bind def

/coor [
[89.07174683 469.80053711]
[75.22580719 463.78448486]
[63.51714325 454.25506592]
[54.81461716 441.91940308]
[49.76401520 427.69290161]
[48.74012375 412.63119507]
[51.81892395 397.85205078]
[58.77194595 384.45211792]
[69.08322906 373.42578125]
[81.98760986 365.59127808]
[96.52749634 361.52996826]
[96.52749634 346.52996826]
[96.52749634 331.52996826]
[96.52749634 316.52996826]
[96.52749634 301.52996826]
[96.52749634 286.52996826]
[96.52749634 271.52996826]
[96.52749634 256.52996826]
[96.52749634 241.52996826]
[96.52749634 226.52996826]
[86.93639374 211.86672974]
[96.19065094 195.98155212]
[86.29656219 181.52102661]
[95.21834564 165.44676208]
[94.59436798 150.45974731]
[93.97039032 135.47273254]
[86.03340149 134.50846863]
[78.25114441 131.73677063]
[71.04055023 127.18504333]
[64.81249237 120.97765350]
[59.94911194 113.33422089]
[44.94992447 113.49025726]
[29.95073509 113.64630127]
[14.95154667 113.80233765]
[-0.04764217 113.95837402]
[-13.88056850 122.76644897]
[-28.29807281 114.95187378]
[-28.46866417 98.55361176]
[-14.21685219 90.44078827]
[-0.20367873 98.95918274]
[14.79550934 98.80314636]
[29.79469872 98.64710999]
[44.79388809 98.49107361]
[59.79307556 98.33503723]
[63.19605255 83.72614288]
[49.80976868 76.95803070]
[34.18021393 80.57695007]
[21.69594955 70.50110626]
[21.93383408 54.45981216]
[34.71138382 44.75858688]
[50.22675323 48.83937454]
[56.57788086 63.57174301]
[69.96416473 70.33985901]
[78.13530731 65.35670471]
[86.96717834 62.47904968]
[95.94396210 61.74057007]
[104.57009888 63.05389786]
[112.39752197 66.22171783]
[120.38743591 53.52678680]
[128.37734985 40.83185577]
[136.36726379 28.13692665]
[124.61576080 18.78999329]
[113.96382904 8.20700550]
[104.54079437 -3.48356867]
[96.46102905 -16.13981628]
[89.82262421 -29.60810471]
[84.70616150 -43.72493744]
[81.17374420 -58.31895065]
[79.26825714 -73.21298981]
[79.01284027 -88.22624969]
[80.41057587 -103.17648315]
[83.44451141 -117.88220978]
[88.07781219 -132.16491699]
[94.25423431 -145.85122681]
[101.89879608 -158.77499390]
[110.91870880 -170.77934265]
[121.20447540 -181.71855164]
[132.63124084 -191.45980835]
[145.06028748 -199.88490295]
[158.34074402 -206.89152527]
[172.31138611 -212.39463806]
[186.80262756 -216.32743835]
[201.63856506 -218.64218140]
[216.63911438 -219.31076050]
[231.62216187 -218.32508850]
[246.40582275 -215.69709778]
[260.81066895 -211.45870972]
[274.66180420 -205.66136169]
[287.79110718 -198.37544250]
[300.03918457 -189.68937683]
[311.25738525 -179.70863342]
[321.30947876 -168.55433655]
[330.07351685 -156.36190796]
[337.44305420 -143.27935791]
[343.32864380 -129.46549988]
[347.65884399 -115.08798981]
[350.38107300 -100.32138824]
[351.46234131 -85.34494019]
[350.88943481 -70.34043884]
[348.66940308 -55.49003220]
[344.82913208 -40.97398758]
[339.41525269 -26.96851921]
[332.49349976 -13.64363861]
[324.14788818 -1.16109788]
[314.47970581 10.32757664]
[303.60635376 20.68292236]
[291.65979004 29.77923393]
[278.78503418 37.50609207]
[265.13842773 43.76970291]
[250.88555908 48.49402237]
[236.19949341 51.62171173]
[221.25846863 53.11479950]
[206.24389648 52.95515823]
[191.33799744 51.14473343]
[176.72175598 47.70549393]
[162.57255554 42.67919159]
[149.06219482 36.12684250]
[141.07228088 48.82177353]
[133.08236694 61.51670074]
[125.09245300 74.21163177]
[135.82611084 96.65921021]
[129.42790222 120.70434570]
[108.95741272 134.84875488]
[109.58138275 149.83576965]
[110.20536041 164.82278442]
[119.17443848 174.15068054]
[119.35088348 186.68814087]
[111.18740082 195.66949463]
[119.96047974 205.18196106]
[119.87606049 217.72036743]
[111.52749634 226.52996826]
[111.52749634 241.52996826]
[111.52749634 256.52996826]
[111.52749634 271.52996826]
[111.52749634 286.52996826]
[111.52749634 301.52996826]
[111.52749634 316.52996826]
[111.52749634 331.52996826]
[111.52749634 346.52996826]
[111.52749634 361.52996826]
[126.06738281 365.59127808]
[138.97177124 373.42578125]
[149.28305054 384.45211792]
[156.23606873 397.85205078]
[159.31486511 412.63119507]
[158.29098511 427.69290161]
[153.24037170 441.91940308]
[144.53785706 454.25506592]
[132.82919312 463.78448486]
[118.98325348 469.80053711]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 128]
[24 125]
[25 124]
[26 123]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[45 53]
[46 52]
[58 120]
[59 119]
[60 118]
[61 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
