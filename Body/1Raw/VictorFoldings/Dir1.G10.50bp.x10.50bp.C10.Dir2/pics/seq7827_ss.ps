%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUCCCCACAGGGGGGGGGGUUAGGCUUAAAAACAGAUGCAAUUCCCGGACGUCUAAACCAAACCACUUUxxxxxxxxxxUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUCCCCCCCCCCUGCCCCCACA\
) } def
/len { sequence length } bind def

/coor [
[80.72187805 333.73461914]
[68.16365051 325.38345337]
[58.07743073 314.17098999]
[51.09723663 300.80209351]
[47.66185379 286.11709595]
[47.98723221 271.03915405]
[52.05291367 256.51602173]
[59.60333633 243.46067810]
[70.16386414 232.69378662]
[83.07065582 224.89215088]
[97.51239014 220.54620361]
[96.88841248 205.55918884]
[96.26443481 190.57215881]
[95.64045715 175.58514404]
[95.01647949 160.59812927]
[94.39250183 145.61111450]
[93.76852417 130.62409973]
[93.14454651 115.63708496]
[87.65751648 101.67669678]
[77.90985870 90.27567291]
[68.16220856 78.87465668]
[58.41455841 67.47363281]
[48.31590652 56.38231659]
[37.87609482 45.61150742]
[27.43628311 34.84070206]
[15.69925308 44.20006180]
[3.11369848 52.38293076]
[-10.20287132 59.31290054]
[-24.12611961 64.92527008]
[-38.52604675 69.16763306]
[-53.26819992 72.00038147]
[-68.21492767 73.39706421]
[-83.22668457 73.34463501]
[-98.16329956 71.84359741]
[-112.88530731 68.90795898]
[-127.25524902 64.56512451]
[-141.13896179 58.85565567]
[-154.40681458 51.83284760]
[-166.93490601 43.56227875]
[-178.60627747 34.12117386]
[-189.31196594 23.59767723]
[-198.95198059 12.09005165]
[-207.43634033 -0.29425949]
[-214.68582153 -13.43962288]
[-220.63272095 -27.22330284]
[-225.22154236 -41.51659775]
[-228.40940857 -56.18605804]
[-230.16658020 -71.09471130]
[-230.47662354 -86.10335541]
[-229.33666992 -101.07185364]
[-226.75733948 -115.86045074]
[-222.76274109 -130.33106995]
[-217.39015198 -144.34858704]
[-210.68974304 -157.78211975]
[-202.72407532 -170.50625610]
[-193.56753540 -182.40219116]
[-183.30558777 -193.35884094]
[-172.03407288 -203.27389526]
[-159.85823059 -212.05480957]
[-146.89173889 -219.61956787]
[-133.25566101 -225.89755249]
[-119.07733154 -230.83013916]
[-104.48912048 -234.37126160]
[-89.62724304 -236.48788452]
[-74.63046265 -237.16023254]
[-59.63880157 -236.38201904]
[-44.79223633 -234.16052246]
[-30.22939301 -230.51646423]
[-16.08624077 -225.48390198]
[-2.49483347 -219.10980225]
[10.41792488 -211.45367432]
[22.53146935 -202.58702087]
[33.73269653 -192.59262085]
[43.91702271 -181.56379700]
[52.98935318 -169.60351562]
[60.86497879 -156.82345581]
[67.47037506 -143.34294128]
[72.74385834 -129.28784180]
[76.63619232 -114.78938293]
[79.11103058 -99.98294067]
[80.14527893 -85.00676727]
[79.72926331 -70.00068665]
[77.86688232 -55.10480881]
[74.57551575 -40.45822525]
[69.88590240 -26.19768524]
[63.84182358 -12.45633793]
[56.49971390 0.63751358]
[47.92812347 12.96161175]
[38.20709229 24.40088844]
[48.64690399 35.17169571]
[59.08671570 45.94250488]
[62.65152740 46.34199905]
[66.19020844 48.52819443]
[68.84648895 52.46475983]
[69.81557465 57.72597885]
[79.56323242 69.12699890]
[89.31088257 80.52802277]
[99.05853271 91.92904663]
[104.16307831 82.89838409]
[115.14736938 77.55699158]
[129.70217896 78.69715881]
[144.69488525 79.16519928]
[159.68757629 79.63324738]
[174.68026733 80.10128784]
[189.67297363 80.56932831]
[204.66566467 81.03736877]
[219.66241455 81.34942627]
[234.66160583 81.50546265]
[249.66079712 81.66149902]
[264.65997314 81.81753540]
[275.77416992 70.58140564]
[291.57846069 70.57871246]
[302.69644165 81.81106567]
[302.53204346 97.61449432]
[291.18276978 108.61312103]
[275.38195801 108.28163910]
[264.50393677 96.81672668]
[249.50476074 96.66069031]
[234.50556946 96.50465393]
[219.50637817 96.34861755]
[212.74145508 99.44399261]
[204.19761658 96.03006744]
[189.20492554 95.56202698]
[174.21223450 95.09397888]
[159.21952820 94.62593842]
[144.22683716 94.15789795]
[129.23414612 93.68985748]
[123.95849609 99.02066803]
[127.91638947 113.48908234]
[113.40720367 109.68229675]
[108.13156128 115.01310730]
[108.75553894 130.00012207]
[109.37951660 144.98713684]
[110.00349426 159.97415161]
[110.62747192 174.96116638]
[111.25144958 189.94818115]
[111.87542725 204.93521118]
[112.49940491 219.92222595]
[127.25241089 223.05265808]
[140.76304626 229.75442505]
[152.18202209 239.60620117]
[160.79153442 251.98873901]
[166.05038452 266.12362671]
[167.62799072 281.12237549]
[165.42518616 296.04211426]
[159.58044434 309.94497681]
[150.46115112 321.95703125]
[138.64057922 331.32318115]
[124.86177826 337.45468140]
[109.99087524 339.96609497]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 98]
[20 97]
[21 96]
[22 95]
[23 91]
[24 90]
[25 89]
[101 127]
[102 126]
[103 125]
[104 124]
[105 123]
[106 122]
[107 120]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
