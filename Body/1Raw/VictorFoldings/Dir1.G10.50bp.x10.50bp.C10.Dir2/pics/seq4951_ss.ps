%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUAAUCAUAAUGGGGGGGGGGAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGxxxxxxxxxxGAAUUGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUACCCCCCCCCCUGAUAAUCAUAUU\
) } def
/len { sequence length } bind def

/coor [
[84.93266296 388.59970093]
[70.66088867 383.79025269]
[57.75690842 376.02487183]
[46.82425308 365.66671753]
[38.37426758 353.20028687]
[32.80216980 339.20867920]
[30.36858177 324.34625244]
[31.18732262 309.30816650]
[35.22010040 294.79779053]
[42.27829361 281.49380493]
[52.03177643 270.01846313]
[64.02436829 260.90847778]
[77.69514465 254.58993530]
[92.40470123 251.35836792]
[92.40470123 236.35836792]
[92.40470123 221.35836792]
[92.40470123 206.35836792]
[92.40470123 191.35836792]
[92.40470123 176.35836792]
[92.40470123 161.35836792]
[92.40470123 146.35836792]
[92.40470123 131.35836792]
[92.40470123 116.35837555]
[87.85144043 111.05631256]
[86.03395844 104.95000458]
[86.81340027 99.24584198]
[89.58045197 94.90399170]
[79.68556213 83.63051605]
[69.79067993 72.35704803]
[59.89579010 61.08357239]
[44.97729492 55.81582642]
[42.39671707 41.14647675]
[32.50182724 29.87300301]
[22.60694122 18.59953117]
[12.71205330 7.32605696]
[0.31335959 15.80130100]
[-13.01653099 22.72021484]
[-27.08322906 27.98190117]
[-41.68160248 31.50963020]
[-56.59876251 33.25195312]
[-71.61717224 33.18346786]
[-86.51782227 31.30516624]
[-101.08341217 27.64444351]
[-115.10153961 22.25468445]
[-128.36776733 15.21448517]
[-140.68865967 6.62651443]
[-151.88450623 -3.38399124]
[-161.79206848 -14.67104816]
[-170.26684570 -27.07005882]
[-177.18525696 -40.40020752]
[-182.44642639 -54.46710205]
[-185.97360229 -69.06560516]
[-187.71537781 -83.98283386]
[-187.64631653 -99.00124359]
[-185.76747131 -113.90181732]
[-182.10620117 -128.46726990]
[-176.71591187 -142.48519897]
[-169.67521667 -155.75117493]
[-161.08679199 -168.07173157]
[-151.07586670 -179.26721191]
[-139.78843689 -189.17434692]
[-127.38910675 -197.64866638]
[-114.05870056 -204.56657410]
[-99.99160767 -209.82720947]
[-85.39297485 -213.35385132]
[-70.47568512 -215.09506226]
[-55.45727539 -215.02545166]
[-40.55676651 -213.14604187]
[-25.99144936 -209.48422241]
[-11.97372723 -204.09341431]
[1.29198015 -197.05223083]
[13.61221886 -188.46333313]
[24.80732346 -178.45199585]
[34.71403885 -167.16418457]
[43.18788910 -154.76454163]
[50.10530853 -141.43388367]
[55.36541748 -127.36659241]
[58.89151001 -112.76782227]
[60.63216019 -97.85046387]
[60.56198883 -82.83206177]
[58.68201447 -67.93162537]
[55.01966095 -53.36644363]
[49.62832642 -39.34892273]
[42.58663940 -26.08347893]
[33.99728775 -13.76356125]
[23.98552704 -2.56883073]
[33.88041306 8.70464230]
[43.77530289 19.97811508]
[53.67018890 31.25158882]
[67.88093567 35.71297836]
[71.16925812 51.18868256]
[81.06414795 62.46215820]
[90.95903778 73.73563385]
[100.85392761 85.00910187]
[114.94360352 90.15507507]
[129.77499390 87.91236877]
[144.60639954 85.66967010]
[159.43778992 83.42697144]
[174.26918030 81.18427277]
[189.10058594 78.94156647]
[203.93197632 76.69886780]
[218.76336670 74.45616913]
[222.41581726 60.77256393]
[230.99017334 49.55495071]
[243.16069031 42.48320389]
[257.06631470 40.60037231]
[270.59524536 44.15896606]
[281.70565796 52.58764648]
[288.73379517 64.58267975]
[303.60711670 62.63718414]
[318.48040771 60.69169235]
[333.35369873 58.74619675]
[346.03622437 48.34976578]
[361.28350830 54.38732529]
[363.41046143 70.64794922]
[350.22906494 80.40411377]
[335.29919434 73.61949921]
[320.42590332 75.56498718]
[305.55258179 77.51048279]
[290.67929077 79.45597839]
[285.97827148 94.70158386]
[275.06942749 106.42259216]
[260.09182739 112.24654388]
[244.01469421 110.96461487]
[230.04901123 102.78210449]
[221.00607300 89.28756714]
[206.17468262 91.53026581]
[191.34327698 93.77296448]
[176.51188660 96.01566315]
[161.68049622 98.25836945]
[146.84909058 100.50106812]
[132.01770020 102.74376678]
[117.18630219 104.98646545]
[107.40470123 116.35837555]
[107.40470123 131.35836792]
[107.40470123 146.35836792]
[107.40470123 161.35836792]
[107.40470123 176.35836792]
[107.40470123 191.35836792]
[107.40470123 206.35836792]
[107.40470123 221.35836792]
[107.40470123 236.35836792]
[107.40470123 251.35836792]
[122.11425781 254.58993530]
[135.78503418 260.90847778]
[147.77761841 270.01846313]
[157.53111267 281.49380493]
[164.58929443 294.79779053]
[168.62207031 309.30816650]
[169.44081116 324.34625244]
[167.00723267 339.20867920]
[161.43513489 353.20028687]
[152.98515320 365.66671753]
[142.05249023 376.02487183]
[129.14851379 383.79025269]
[114.87673950 388.59970093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[27 94]
[28 93]
[29 92]
[30 91]
[32 89]
[33 88]
[34 87]
[35 86]
[95 133]
[96 132]
[97 131]
[98 130]
[99 129]
[100 128]
[101 127]
[102 126]
[109 120]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
