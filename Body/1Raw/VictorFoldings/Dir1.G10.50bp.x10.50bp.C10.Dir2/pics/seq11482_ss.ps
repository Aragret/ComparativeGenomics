%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUCCAAAUGGGGGGGGGGCACCACAGGACUAUUCCUAGCCAUGCACUACUCACCAGACGCCUCAACCGxxxxxxxxxxGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCCCCCCCCCCCAUCCUCCAUAU\
) } def
/len { sequence length } bind def

/coor [
[43.70165634 371.07559204]
[32.53437805 360.97680664]
[23.71110535 348.77664185]
[17.61755753 335.00848389]
[14.52011871 320.27416992]
[14.55419350 305.21786499]
[17.71829224 290.49774170]
[23.87409592 276.75729370]
[32.75249863 264.59722900]
[43.96537399 254.54907227]
[57.02254105 247.05213928]
[71.35320282 242.43414307]
[69.81591034 227.51313782]
[68.27861786 212.59211731]
[66.74132538 197.67109680]
[65.20403290 182.75007629]
[63.66674042 167.82907104]
[62.12944794 152.90805054]
[60.59215546 137.98703003]
[59.05486298 123.06601715]
[47.08460236 114.02649689]
[32.31248856 116.63121796]
[17.54037094 119.23593903]
[10.66946602 133.02349854]
[-2.84455585 140.03953552]
[-17.72259140 137.77941895]
[-28.29040337 127.31714630]
[-43.03499985 130.07337952]
[-57.75052261 132.98086548]
[-72.46604156 135.88833618]
[-87.18156433 138.79580688]
[-99.16200256 149.99406433]
[-114.76926422 144.95964050]
[-117.94793701 128.87150574]
[-105.42807770 118.27975464]
[-90.08904266 124.08028412]
[-75.37351990 121.17280579]
[-60.65799332 118.26533508]
[-45.94247055 115.35786438]
[-39.95314789 110.94876099]
[-30.89512634 112.54502869]
[-24.54294205 99.09929657]
[-11.33516312 91.88690186]
[3.76348567 93.85774231]
[14.93564796 104.46382904]
[29.70776367 101.85910034]
[44.47988129 99.25437927]
[30.26735878 94.45810699]
[15.33452702 95.87603760]
[1.63310587 89.77103424]
[-7.29822731 77.71984100]
[-9.15277004 62.83492661]
[-3.45154953 48.96063232]
[8.33297634 39.68027878]
[23.15720940 37.39071655]
[37.19248581 42.68326569]
[46.81389999 54.19101715]
[49.53654099 68.94158936]
[58.03916168 81.29899597]
[56.50186920 66.37797546]
[54.96457672 51.45695877]
[53.42728424 36.53594208]
[51.88999176 21.61492729]
[50.35269928 6.69391012]
[48.81540680 -8.22710609]
[47.27811432 -23.14812279]
[32.63016891 -27.12331772]
[20.40969467 -36.12467575]
[12.26940632 -48.93483353]
[9.31021309 -63.82132339]
[11.93232059 -78.77087402]
[19.78111076 -91.76167297]
[31.79509926 -101.03682709]
[46.34949112 -105.34194946]
[61.47592926 -104.09480286]
[75.12868500 -97.46405792]
[85.46132660 -86.34646606]
[91.07646179 -72.24559021]
[91.21468353 -57.06845856]
[85.85729980 -42.86765289]
[75.72885132 -31.56371880]
[62.19913101 -24.68541527]
[63.73642349 -9.76439857]
[65.27371216 5.15661764]
[66.81100464 20.07763481]
[68.34829712 34.99864960]
[69.88558960 49.91966629]
[71.42288208 64.84068298]
[72.96017456 79.76170349]
[100.56922913 69.84803772]
[121.83262634 84.91032410]
[136.07931519 80.21652222]
[150.32600403 75.52272034]
[164.57270813 70.82891846]
[163.27745056 55.81495667]
[165.48017883 40.90708542]
[171.06208801 26.90925980]
[179.72213745 14.57637215]
[190.99333191 4.57351732]
[204.26780701 -2.55986333]
[218.82968140 -6.43907547]
[233.89367676 -6.85491848]
[248.64738464 -3.78496599]
[262.29516602 2.60522342]
[274.10104370 11.97103500]
[283.42828369 23.80738068]
[289.77392578 37.47594452]
[292.79574585 52.23959351]
[292.33074951 67.30214691]
[288.40405273 81.85130310]
[281.22741699 95.10243225]
[271.18786621 106.34092712]
[258.82678223 114.96070862]
[244.81082153 120.49692535]
[229.89584351 122.65100861]
[214.88618469 121.30680084]
[200.59130859 116.53678131]
[187.78210449 108.59820557]
[177.14936829 97.91917419]
[169.26649475 85.07561493]
[155.01980591 89.76941681]
[140.77311707 94.46321106]
[126.52642822 99.15701294]
[125.01930237 112.54180145]
[116.85390472 124.13081360]
[103.48929596 130.68307495]
[87.91265106 129.98309326]
[73.97587585 121.52872467]
[75.51316833 136.44973755]
[77.05046082 151.37075806]
[78.58775330 166.29177856]
[80.12504578 181.21278381]
[81.66233826 196.13380432]
[83.19963074 211.05482483]
[84.73692322 225.97584534]
[86.27421570 240.89685059]
[101.24541473 242.49591064]
[115.55686188 247.17309570]
[128.58293152 254.72393799]
[139.75419617 264.81832886]
[148.58226013 277.01501465]
[154.68122864 290.78076172]
[157.78445435 305.51385498]
[157.75630188 320.57015991]
[154.59800720 335.29153442]
[148.44760132 349.03442383]
[139.57398987 361.19799805]
[128.36506653 371.25054932]
[115.31084442 378.75259399]
[100.98200226 383.37625122]
[86.00493622 384.91931152]
[71.03437042 383.31436157]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 47]
[22 46]
[23 45]
[27 41]
[28 39]
[29 38]
[30 37]
[31 36]
[59 89]
[60 88]
[61 87]
[62 86]
[63 85]
[64 84]
[65 83]
[66 82]
[91 123]
[92 122]
[93 121]
[94 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
