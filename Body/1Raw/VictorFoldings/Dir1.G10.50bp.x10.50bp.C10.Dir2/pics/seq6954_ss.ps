%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACACUCCACGGGGGGGGGGGGAAGCAAUAUGAAAUGAUCUGCUGCAGUGCUCUGAGCCCUAGGAUUCAUxxxxxxxxxxAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGGCCACCCCCCCCCCCCACACACCAC\
) } def
/len { sequence length } bind def

/coor [
[96.75157166 413.66705322]
[82.72962952 408.11404419]
[70.52967072 399.24771118]
[60.91859818 387.62539673]
[54.50057220 373.97769165]
[51.67903519 359.16250610]
[52.63135147 344.11114502]
[57.29765701 329.76971436]
[65.38462067 317.03976440]
[76.38389587 306.72149658]
[89.60405731 299.46350098]
[104.21406555 295.72207642]
[104.21406555 280.72207642]
[104.21406555 265.72207642]
[104.21406555 250.72207642]
[104.21406555 235.72207642]
[104.21406555 220.72207642]
[104.21406555 205.72207642]
[104.21406555 190.72207642]
[104.21406555 175.72207642]
[104.21406555 160.72207642]
[104.06007385 145.72286987]
[103.75209808 130.72602844]
[82.68118286 122.22705078]
[74.79847717 103.17832184]
[82.09867859 86.16473389]
[73.94201660 73.57629395]
[53.87598419 66.10714722]
[51.15486526 45.58381271]
[40.38618851 35.14180374]
[28.41592979 26.10228539]
[15.42554855 18.60228539]
[2.43516779 11.10228443]
[-10.55521297 3.60228467]
[-23.54559517 -3.89771533]
[-35.17855072 5.79246807]
[-49.39824295 10.90836620]
[-64.48190308 10.85068607]
[-78.60911560 5.64568949]
[-90.08148193 -4.06030369]
[-97.52683258 -17.08110619]
[-100.06330872 -31.83560944]
[-97.40380096 -46.53976822]
[-110.39418030 -54.03976822]
[-123.38455963 -61.53976822]
[-132.44227600 -63.13779831]
[-136.56239319 -69.32946777]
[-149.39604187 -77.09460449]
[-162.22970581 -84.85974121]
[-178.62757874 -84.65528870]
[-186.76980591 -98.89031982]
[-178.28036499 -112.92105103]
[-161.89245605 -112.31387329]
[-154.46456909 -97.69338989]
[-141.63092041 -89.92825317]
[-128.79725647 -82.16312408]
[-115.88455963 -74.53015137]
[-102.89418030 -67.03015137]
[-89.90380096 -59.53015137]
[-78.49937439 -69.18543243]
[-64.45336151 -74.36602783]
[-49.45434189 -74.42857361]
[-35.31252289 -69.34620667]
[-23.74125862 -59.71418381]
[-16.14947510 -46.68018723]
[-13.47012806 -31.80762482]
[-16.04559517 -16.88809586]
[-3.05521345 -9.38809586]
[9.93516731 -1.88809621]
[22.92554855 5.61190367]
[35.91593170 13.11190414]
[29.69456482 -0.53707474]
[29.89253998 -15.53576851]
[36.47199631 -29.01578140]
[48.17465591 -38.39915848]
[62.76246643 -41.89139557]
[77.44561768 -38.82462311]
[89.41605377 -29.78533936]
[96.38452148 -16.50224876]
[97.01834106 -1.51564622]
[91.19630432 12.30838680]
[80.03183746 22.32610130]
[65.66005707 26.62167931]
[50.82819748 24.37312508]
[61.59687805 34.81513596]
[67.67234039 33.25170517]
[73.93164062 33.67214966]
[82.59824371 21.42919731]
[91.26485443 9.18624306]
[92.23837280 -7.18398237]
[107.02130890 -14.28305435]
[120.40624237 -4.80805635]
[118.62390137 11.49394608]
[103.50780487 17.85284996]
[94.84120178 30.09580421]
[86.17459106 42.33875656]
[89.92430878 53.61186218]
[86.53045654 65.41962433]
[94.68711853 78.00806427]
[116.00642395 78.51819611]
[130.91078186 98.35957336]
[145.73326111 96.05870056]
[160.55574036 93.75782013]
[175.37821960 91.45694733]
[179.32431030 76.74816132]
[188.91687012 64.92012024]
[202.49395752 58.02210617]
[217.70324707 57.24923325]
[231.90963745 62.73541641]
[242.65179443 73.53013611]
[248.06857300 87.76313782]
[247.22148132 102.96847534]
[240.25727844 116.51173401]
[228.38255310 126.04645538]
[213.65467834 129.92068481]
[198.62535095 127.46321106]
[185.89849854 119.09978485]
[177.67909241 106.27942657]
[162.85661316 108.58030701]
[148.03413391 110.88117981]
[133.21165466 113.18205261]
[148.20153809 112.63132477]
[160.39202881 121.37156677]
[164.68161011 135.74513245]
[159.27514648 149.73692322]
[146.43516541 157.49160767]
[131.53498840 155.76394653]
[120.81010437 145.27697754]
[118.74893188 130.41806030]
[119.05690765 145.41488647]
[122.37863159 153.99171448]
[119.21406555 160.72207642]
[119.21406555 175.72207642]
[119.21406555 190.72207642]
[119.21406555 205.72207642]
[119.21406555 220.72207642]
[119.21406555 235.72207642]
[119.21406555 250.72207642]
[119.21406555 265.72207642]
[119.21406555 280.72207642]
[119.21406555 295.72207642]
[133.82408142 299.46350098]
[147.04423523 306.72149658]
[158.04351807 317.03976440]
[166.13047791 329.76971436]
[170.79678345 344.11114502]
[171.74909973 359.16250610]
[168.92756653 373.97769165]
[162.50953674 387.62539673]
[152.89846802 399.24771118]
[140.69851685 408.11404419]
[126.67656708 413.66705322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 130]
[23 129]
[26 99]
[27 98]
[29 85]
[30 84]
[31 71]
[32 70]
[33 69]
[34 68]
[35 67]
[43 59]
[44 58]
[45 57]
[47 56]
[48 55]
[49 54]
[87 96]
[88 95]
[89 94]
[101 121]
[102 120]
[103 119]
[104 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
