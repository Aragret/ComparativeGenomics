%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUACAAUCGGGGGGGGGGUCCAGCAUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUxxxxxxxxxxACCCACCCUUAACAGUACAUAGUACAUAAAGCCAUUUACCGUACAUAGCACCCCCCCCCCCAUUACAGUC\
) } def
/len { sequence length } bind def

/coor [
[82.02974701 414.24267578]
[68.18380737 408.22662354]
[56.47514725 398.69723511]
[47.77262497 386.36154175]
[42.72202301 372.13504028]
[41.69813156 357.07336426]
[44.77692795 342.29418945]
[51.72994995 328.89425659]
[62.04123688 317.86791992]
[74.94561768 310.03341675]
[89.48550415 305.97210693]
[89.48550415 290.97210693]
[89.48550415 275.97210693]
[89.48550415 260.97210693]
[89.48550415 245.97210693]
[89.48550415 230.97210693]
[89.48550415 215.97210693]
[89.48550415 200.97210693]
[89.48550415 185.97210693]
[89.48550415 170.97210693]
[89.48550415 155.97210693]
[87.20381927 153.20417786]
[86.18442535 149.17150879]
[87.01686859 144.49609375]
[89.98275757 140.04377747]
[90.91838074 125.07299042]
[80.65959930 118.35972595]
[74.48876953 107.76580048]
[59.48957825 107.92183685]
[44.49039078 108.07787323]
[38.85213089 122.19447327]
[28.23728943 133.07536316]
[14.26455307 139.06126404]
[-0.93533903 139.23937988]
[-15.04451275 133.58256531]
[-25.91142082 122.95341492]
[-31.87894058 108.97281647]
[-32.03706741 93.77270508]
[-26.36168861 79.67098236]
[-15.71825790 68.81806183]
[-1.72982073 62.86894226]
[13.47048664 62.73081207]
[27.56472969 68.42473602]
[38.40363693 79.08243561]
[44.33435440 93.07868195]
[59.33354187 92.92264557]
[74.33273315 92.76660919]
[84.34759521 75.07214355]
[105.59812164 68.28816223]
[105.28606415 53.29140854]
[104.97400665 38.29465485]
[104.66195679 23.29789925]
[104.34989929 8.30114555]
[103.88185883 -6.69155025]
[103.25788116 -21.67856598]
[102.63390350 -36.66558075]
[94.32923126 -50.13195038]
[101.53039551 -63.17006683]
[100.90641785 -78.15708160]
[100.28244781 -93.14409637]
[85.43671417 -95.65369415]
[71.43732452 -101.19541931]
[58.89625931 -109.52700806]
[48.36176300 -120.28424072]
[40.29436111 -132.99685669]
[35.04672241 -147.10911560]
[32.84825134 -162.00410461]
[33.79505539 -177.03065491]
[37.84574890 -191.53187561]
[44.82324600 -204.87385559]
[54.42252731 -216.47331238]
[66.22394562 -225.82318115]
[79.71160126 -232.51473999]
[94.29586792 -236.25543213]
[109.33918762 -236.88175964]
[124.18392944 -234.36631775]
[138.18113708 -228.81909180]
[150.71893311 -220.48257446]
[161.24919128 -209.72119141]
[169.31158447 -197.00540161]
[174.55368042 -182.89106750]
[176.74629211 -167.99522400]
[175.79356384 -152.96905518]
[171.73716736 -138.46942139]
[164.75442505 -125.13019562]
[155.15058899 -113.53450775]
[143.34548950 -104.18927765]
[129.85519409 -97.50303650]
[115.26946259 -93.76807404]
[115.89344025 -78.78105927]
[116.51741791 -63.79404068]
[124.77745056 -51.39964676]
[117.62091827 -37.28955841]
[118.24489594 -22.30254364]
[118.86887360 -7.31552792]
[122.31176758 -0.72067189]
[119.34664917 7.98908949]
[119.65870667 22.98584366]
[119.97076416 37.98259735]
[120.28282166 52.97935104]
[120.59487915 67.97610474]
[131.36569214 78.41591644]
[146.36486816 78.25988007]
[161.36405945 78.10384369]
[176.36325073 77.94780731]
[191.95191956 68.20239258]
[206.90728760 77.33129883]
[221.89999390 76.86325836]
[236.89268494 76.39521027]
[251.88537598 75.92716980]
[265.53207397 66.83322906]
[280.10903931 74.34616852]
[280.62072754 90.73733521]
[266.54077148 99.14488983]
[252.35342407 90.91986847]
[237.36073303 91.38790894]
[222.36802673 91.85594940]
[207.37533569 92.32399750]
[198.83053589 100.94337463]
[186.30085754 101.41899109]
[176.51928711 92.94699860]
[161.52009583 93.10303497]
[146.52090454 93.25907135]
[131.52172852 93.41510773]
[130.30616760 105.59548950]
[124.76368713 115.91086578]
[116.09677887 122.97264099]
[105.88917542 126.00862122]
[104.95354462 140.97941589]
[104.48550415 155.97210693]
[104.48550415 170.97210693]
[104.48550415 185.97210693]
[104.48550415 200.97210693]
[104.48550415 215.97210693]
[104.48550415 230.97210693]
[104.48550415 245.97210693]
[104.48550415 260.97210693]
[104.48550415 275.97210693]
[104.48550415 290.97210693]
[104.48550415 305.97210693]
[119.02539062 310.03341675]
[131.92976379 317.86791992]
[142.24105835 328.89425659]
[149.19407654 342.29418945]
[152.27287292 357.07336426]
[151.24897766 372.13504028]
[146.19837952 386.36154175]
[137.49586487 398.69723511]
[125.78719330 408.22662354]
[111.94126129 414.24267578]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 129]
[26 128]
[28 47]
[29 46]
[30 45]
[49 101]
[50 100]
[51 99]
[52 98]
[53 97]
[54 95]
[55 94]
[56 93]
[58 91]
[59 90]
[60 89]
[102 124]
[103 123]
[104 122]
[105 121]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
