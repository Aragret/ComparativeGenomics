%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAACUAACACGGGGGGGGGGAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUACAACCCCxxxxxxxxxxGUACUGGAAAGUGCACUUGGACGAACCAGAGUGUAGCUUAACACAAAGCACCCCCCCCCCCCCAACUUACAC\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 401.04830933]
[70.87159729 395.89331055]
[58.28185654 387.61111450]
[47.94191742 376.64834595]
[40.40940475 363.59622192]
[36.09054184 349.15859985]
[35.21823120 334.11416626]
[37.83952332 319.27416992]
[43.81304932 305.43893433]
[52.81666565 293.35458374]
[64.36482239 283.67279053]
[77.83473969 276.91571045]
[92.50000000 273.44775391]
[92.50000000 258.44775391]
[92.50000000 243.44773865]
[92.50000000 228.44773865]
[92.50000000 213.44773865]
[92.50000000 198.44773865]
[92.50000000 183.44773865]
[92.50000000 168.44773865]
[92.50000000 153.44773865]
[92.50000000 138.44773865]
[80.06872559 133.72273254]
[69.93470001 125.11089325]
[63.26597595 113.60478973]
[60.83116913 100.53061676]
[62.91091919 87.39528656]
[69.26551056 75.71276093]
[59.49492645 64.33138275]
[49.72433853 52.95001221]
[39.95375061 41.56864166]
[30.18316460 30.18726921]
[17.78374481 38.65589142]
[4.52794838 45.70905304]
[-9.42331028 51.26113129]
[-23.90067673 55.24472809]
[-38.72840881 57.61149216]
[-53.72651291 58.33268356]
[-68.71292114 57.39955902]
[-83.50571442 54.82343674]
[-97.92532349 50.63559341]
[-111.79670715 44.88686371]
[-124.95148468 37.64703369]
[-137.22994995 29.00398636]
[-148.48307800 19.06264114]
[-158.57426453 7.94367599]
[-167.38098145 -4.21793365]
[-174.79635620 -17.27455902]
[-180.73036194 -31.06770134]
[-185.11096191 -45.42992783]
[-187.88497925 -60.18689346]
[-189.01875305 -75.15946198]
[-188.49850464 -90.16587830]
[-186.33055115 -105.02397919]
[-182.54121399 -119.55339813]
[-177.17649841 -133.57777405]
[-170.30151367 -146.92684937]
[-161.99972534 -159.43858337]
[-152.37190247 -170.96109009]
[-141.53492737 -181.35450745]
[-129.62034607 -190.49266052]
[-116.77278137 -198.26463318]
[-103.14820862 -204.57606506]
[-88.91201019 -209.35034180]
[-74.23699188 -212.52952576]
[-59.30130768 -214.07499695]
[-44.28625870 -213.96801758]
[-29.37411118 -212.20988464]
[-14.74588585 -208.82192993]
[-0.57915753 -203.84527588]
[12.95410347 -197.34036255]
[25.68961525 -189.38612366]
[37.47278214 -180.07911682]
[48.16056442 -169.53234863]
[57.62322617 -157.87382507]
[65.74589539 -145.24507141]
[72.42996979 -131.79939270]
[77.59431458 -117.69999695]
[81.17623901 -103.11805725]
[83.13226318 -88.23057556]
[83.43863678 -73.21826935]
[82.09164429 -58.26337433]
[79.10763550 -43.54743576]
[74.52283478 -29.24908638]
[68.39289856 -15.54189491]
[60.79224014 -2.59225655]
[51.81311798 9.44263363]
[41.56453705 20.41668320]
[51.33512497 31.79805374]
[61.10570908 43.17942810]
[70.87629700 54.56079865]
[80.64688873 65.94216919]
[98.81056976 60.84563828]
[117.25011444 64.83023834]
[131.68882751 76.97180939]
[145.28700256 70.64019012]
[158.88519287 64.30857086]
[172.48336792 57.97695541]
[186.08155823 51.64533615]
[199.61488342 45.17623901]
[213.08193970 38.57032394]
[226.54901123 31.96441269]
[233.07765198 17.30984116]
[248.64118958 13.41677952]
[261.30059814 23.27165413]
[261.34469604 39.31464767]
[248.73962402 49.23894501]
[233.15492249 45.43148041]
[219.68785095 52.03739166]
[206.22079468 58.64330673]
[201.57321167 64.44672394]
[192.41317749 65.24352264]
[178.81498718 71.57513428]
[165.21681213 77.90675354]
[151.61862183 84.23837280]
[138.02044678 90.56999207]
[139.12214661 98.01595306]
[138.77938843 105.53515625]
[152.94836426 110.45858765]
[167.11734009 115.38201141]
[181.28631592 120.30544281]
[195.39953613 113.19260406]
[210.38224792 118.22190094]
[217.34547424 132.40953064]
[212.15806580 147.33824158]
[197.89759827 154.15107727]
[183.02456665 148.80610657]
[176.36288452 134.47441101]
[162.19390869 129.55099487]
[148.02493286 124.62756348]
[133.85595703 119.70413208]
[122.70263672 131.92286682]
[107.50000000 138.44773865]
[107.50000000 153.44773865]
[107.50000000 168.44773865]
[107.50000000 183.44773865]
[107.50000000 198.44773865]
[107.50000000 213.44773865]
[107.50000000 228.44773865]
[107.50000000 243.44773865]
[107.50000000 258.44775391]
[107.50000000 273.44775391]
[122.16526031 276.91571045]
[135.63517761 283.67279053]
[147.18333435 293.35458374]
[156.18695068 305.43893433]
[162.16047668 319.27416992]
[164.78176880 334.11416626]
[163.90945435 349.15859985]
[159.59059143 363.59622192]
[152.05809021 376.64834595]
[141.71813965 387.61111450]
[129.12840271 395.89331055]
[114.96779633 401.04830933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[28 92]
[29 91]
[30 90]
[31 89]
[32 88]
[95 116]
[96 115]
[97 114]
[98 113]
[99 112]
[100 110]
[101 109]
[102 108]
[118 131]
[119 130]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
