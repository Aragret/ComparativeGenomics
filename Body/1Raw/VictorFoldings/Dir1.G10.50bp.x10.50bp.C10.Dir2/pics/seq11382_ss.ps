%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACCCCCAUGGGGGGGGGGGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACxxxxxxxxxxAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCUUCUCGUCCCCAUGGACCCCCCCCCCUGACCCCCCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 424.34204102]
[71.19830322 418.32601929]
[59.48964310 408.79660034]
[50.78712082 396.46093750]
[45.73651886 382.23440552]
[44.71262741 367.17272949]
[47.79142761 352.39355469]
[54.74444962 338.99362183]
[65.05573273 327.96731567]
[77.96011353 320.13278198]
[92.50000000 316.07147217]
[92.50000000 301.07147217]
[92.50000000 286.07147217]
[92.50000000 271.07147217]
[92.50000000 256.07147217]
[92.50000000 241.07147217]
[92.50000000 226.07147217]
[92.50000000 211.07147217]
[92.50000000 196.07147217]
[92.50000000 181.07147217]
[84.76270294 168.34420776]
[92.50000000 154.54403687]
[92.50000000 139.54403687]
[78.91320801 134.28305054]
[68.08958435 124.52970123]
[61.44743347 111.56202698]
[59.85712814 97.07928467]
[45.36153030 93.22212982]
[30.86593437 89.36496735]
[16.37033844 85.50781250]
[1.79763544 81.95304871]
[-12.84586620 78.70222473]
[-27.48936653 75.45139313]
[-22.10469246 89.45158386]
[-29.50850105 102.49703217]
[-44.28920364 105.05256653]
[-55.64330673 95.25030518]
[-55.27187729 80.25490570]
[-43.44704437 71.02693176]
[-57.67382431 66.27311707]
[-71.90060425 61.51930618]
[-86.12738037 56.76549149]
[-100.35416412 52.01167297]
[-116.30593109 55.81603622]
[-127.37840271 43.71924210]
[-122.18116760 28.16543770]
[-106.06069183 25.15504456]
[-95.60034943 37.78489685]
[-81.37356567 42.53871155]
[-67.14678955 47.29252625]
[-52.92000961 52.04634094]
[-38.69322968 56.80015564]
[-24.23854065 60.80789566]
[-9.59504032 64.05872345]
[5.04846144 67.30954742]
[9.53542233 65.50879669]
[15.20458031 66.55375671]
[20.22749710 71.01221466]
[34.72309494 74.86936951]
[49.21869278 78.72653198]
[63.71428680 82.58369446]
[74.00682831 69.26995087]
[88.84328461 61.32819748]
[105.63006592 60.14673233]
[121.43264771 65.93209076]
[131.64613342 54.94642639]
[141.85960388 43.96076202]
[132.12203979 32.52851105]
[123.77755737 20.04307747]
[116.93899536 6.67331171]
[111.69884491 -7.39997292]
[108.12797546 -21.98645210]
[106.27466583 -36.88886261]
[106.16399384 -51.90566254]
[107.79745483 -66.83376312]
[111.15294647 -81.47129059]
[116.18510437 -95.62028503]
[122.82585907 -109.08939362]
[130.98541260 -121.69645691]
[140.55342102 -133.27099609]
[151.40048218 -143.65646362]
[163.37988281 -152.71240234]
[176.32965088 -160.31636047]
[190.07463074 -166.36549377]
[204.42895508 -170.77799988]
[219.19847107 -173.49418640]
[234.18345642 -174.47734070]
[249.18125916 -173.71415710]
[263.98904419 -171.21496582]
[278.40655518 -167.01354980]
[292.23883057 -161.16673279]
[305.29876709 -153.75360107]
[317.40975952 -144.87438965]
[328.40802002 -134.64920044]
[338.14480591 -123.21629333]
[346.48846436 -110.73030853]
[353.32614136 -97.36008453]
[358.56533813 -83.28645325]
[362.13525391 -68.69972992]
[363.98754883 -53.79719925]
[364.09722900 -38.78039169]
[362.46276855 -23.85239601]
[359.10632324 -9.21509361]
[354.07321167 4.93356133]
[347.43154907 18.40222549]
[339.27114868 31.00874901]
[329.70239258 42.58264160]
[318.85461426 52.96738434]
[306.87460327 62.02253342]
[293.92434692 69.62562561]
[280.17895508 75.67384338]
[265.82434082 80.08538055]
[251.05464172 82.80059052]
[236.06958008 83.78274536]
[221.07183838 83.01856232]
[206.26422119 80.51837158]
[191.84698486 76.31600189]
[178.01512146 70.46826172]
[164.95567322 63.05425644]
[152.84527588 54.17424393]
[142.63179016 65.15990448]
[132.41831970 76.14556885]
[138.47406006 88.17934418]
[140.21961975 101.53736877]
[137.45942688 114.72315979]
[130.50273132 126.25954437]
[120.12886810 134.85411072]
[107.50000000 139.54403687]
[107.50000000 154.54403687]
[115.23729706 168.34420776]
[107.50000000 181.07147217]
[107.50000000 196.07147217]
[107.50000000 211.07147217]
[107.50000000 226.07147217]
[107.50000000 241.07147217]
[107.50000000 256.07147217]
[107.50000000 271.07147217]
[107.50000000 286.07147217]
[107.50000000 301.07147217]
[107.50000000 316.07147217]
[122.03988647 320.13278198]
[134.94427490 327.96731567]
[145.25555420 338.99362183]
[152.20857239 352.39355469]
[155.28736877 367.17272949]
[154.26348877 382.23440552]
[149.21287537 396.46093750]
[140.51036072 408.79660034]
[128.80169678 418.32601929]
[114.95575714 424.34204102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[27 61]
[28 60]
[29 59]
[30 58]
[31 55]
[32 54]
[33 53]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[65 122]
[66 121]
[67 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
