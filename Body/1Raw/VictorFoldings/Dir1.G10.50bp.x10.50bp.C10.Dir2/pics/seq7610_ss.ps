%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAUACUAAGGGGGGGGGGCAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAxxxxxxxxxxUCCAACACAUAUGGCCUAGACUACGUACAUAACCUAAACCUACUCCAAUGCCCCCCCCCCCUAAAACUAA\
) } def
/len { sequence length } bind def

/coor [
[116.97269440 402.86944580]
[103.12676239 396.85339355]
[91.41809845 387.32397461]
[82.71557617 374.98831177]
[77.66497040 360.76181030]
[76.64108276 345.70010376]
[79.71987915 330.92095947]
[86.67289734 317.52102661]
[96.98418427 306.49468994]
[109.88856506 298.66018677]
[124.42845154 294.59887695]
[124.42845154 279.59887695]
[124.42845154 264.59887695]
[124.42845154 249.59887695]
[124.42845154 234.59887695]
[124.42845154 219.59887695]
[124.42845154 204.59887695]
[124.42845154 189.59887695]
[124.42845154 174.59887695]
[124.42845154 159.59887695]
[124.42845154 144.59887695]
[124.42845154 129.59887695]
[124.42845154 114.59887695]
[96.55827332 125.22987366]
[78.33041382 105.93918610]
[63.37016296 104.84787750]
[48.40991592 103.75656891]
[33.44966507 102.66526031]
[18.48941803 101.57394409]
[3.52916908 100.48263550]
[-11.43107986 99.39132690]
[-17.61546516 113.23073578]
[-28.16247177 124.11817932]
[-41.79849625 130.73895264]
[-56.87692642 132.29354858]
[-71.57696533 128.59426880]
[-84.12351227 120.08780670]
[-93.00150299 107.80134583]
[-97.13889313 93.21855927]
[-96.03606415 78.10037231]
[-89.82617950 64.27238464]
[-79.25913239 53.40439606]
[-65.61092377 46.80876541]
[-50.52965927 45.28194809]
[-35.83646393 49.00831604]
[-23.30561638 57.53789139]
[-14.45027542 69.84068298]
[-10.33976936 84.43107605]
[4.62047958 85.52238464]
[19.58072853 86.61370087]
[34.54097748 87.70500946]
[49.50122452 88.79631805]
[64.46147156 89.88762665]
[79.42172241 90.97894287]
[88.07556152 78.63746643]
[103.67747498 73.79497528]
[120.17458344 79.92856598]
[119.23896027 64.95777130]
[118.30332947 49.98698044]
[109.14213562 40.84770203]
[108.70491028 28.31662750]
[116.67977905 19.16737556]
[116.05580139 4.18035889]
[101.32927704 0.89524662]
[87.95524597 -6.09029293]
[76.84557343 -16.29997444]
[68.75773621 -29.03768539]
[64.24317169 -43.43494415]
[63.60969543 -58.51012802]
[66.90048981 -73.23538208]
[73.89119720 -86.60671234]
[84.10516357 -97.71244049]
[96.84600067 -105.79536438]
[111.24500275 -110.30436707]
[126.32042694 -110.93202209]
[141.04440308 -107.63554382]
[154.41304016 -100.63967896]
[165.51481628 -90.42141724]
[173.59281921 -77.67746735]
[178.09626770 -63.27672195]
[178.71810913 -48.20105743]
[175.41593933 -33.47834778]
[168.41491699 -20.11242104]
[158.19236755 -9.01458263]
[145.44529724 -0.94150311]
[131.04281616 3.55638146]
[131.66679382 18.54339790]
[141.85957336 32.79496765]
[133.27412415 49.05135345]
[134.20974731 64.02214050]
[135.14537048 78.99293518]
[146.84500122 88.38009644]
[161.66276550 86.04899597]
[176.48051453 83.71788788]
[185.78529358 71.22553253]
[200.84580994 69.07254791]
[212.69802856 78.02021790]
[227.51577759 75.68910980]
[242.33354187 73.35800934]
[244.27145386 58.37731552]
[250.35269165 44.54997635]
[260.08425903 32.99691010]
[272.67724609 24.65467453]
[287.11083984 20.19953537]
[302.21493530 19.99265099]
[316.76513672 24.05079460]
[329.58190918 32.04498672]
[339.62625122 43.32717896]
[346.08392334 56.98276901]
[348.43142700 71.90476227]
[346.47845459 86.88349915]
[340.38333130 100.70472717]
[330.64016724 112.24800873]
[318.03878784 120.57758331]
[303.60073853 125.01822662]
[288.49642944 125.20993042]
[273.95031738 121.13717651]
[261.14160156 113.13011169]
[251.10859680 101.83783722]
[244.66464233 88.17576599]
[229.84687805 90.50686646]
[215.02912903 92.83797455]
[206.49667358 104.99251556]
[191.50257874 107.56767273]
[178.81161499 98.53564453]
[163.99386597 100.86675262]
[149.17610168 103.19785309]
[139.42845154 114.59887695]
[139.42845154 129.59887695]
[139.42845154 144.59887695]
[139.42845154 159.59887695]
[139.42845154 174.59887695]
[139.42845154 189.59887695]
[139.42845154 204.59887695]
[139.42845154 219.59887695]
[139.42845154 234.59887695]
[139.42845154 249.59887695]
[139.42845154 264.59887695]
[139.42845154 279.59887695]
[139.42845154 294.59887695]
[153.96833801 298.66018677]
[166.87272644 306.49468994]
[177.18400574 317.52102661]
[184.13702393 330.92095947]
[187.21582031 345.70010376]
[186.19194031 360.76181030]
[181.14132690 374.98831177]
[172.43881226 387.32397461]
[160.73014832 396.85339355]
[146.88420105 402.86944580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[57 91]
[58 90]
[59 89]
[62 87]
[63 86]
[92 127]
[93 126]
[94 125]
[97 122]
[98 121]
[99 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
