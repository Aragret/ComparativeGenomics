%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUUAACAAGGGGGGGGGGCAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUxxxxxxxxxxCGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACACCCCCCCCCCACCUUAACAA\
) } def
/len { sequence length } bind def

/coor [
[71.57322693 556.26763916]
[57.72728348 550.25158691]
[46.01862335 540.72216797]
[37.31610107 528.38653564]
[32.26549911 514.15997314]
[31.24160576 499.09829712]
[34.32040405 484.31915283]
[41.27342606 470.91921997]
[51.58470917 459.89288330]
[64.48908997 452.05838013]
[79.02897644 447.99707031]
[79.02897644 432.99707031]
[79.02897644 417.99707031]
[79.02897644 402.99707031]
[79.02897644 387.99707031]
[79.02897644 372.99707031]
[79.02897644 357.99707031]
[79.02897644 342.99707031]
[79.02897644 327.99707031]
[79.02897644 312.99707031]
[65.82209015 310.50109863]
[53.26233673 305.70437622]
[41.74723816 298.75720215]
[31.64151573 289.87805176]
[23.26553535 279.34655762]
[16.88515091 267.49478149]
[12.70326233 254.69671631]
[10.85337543 241.35652161]
[11.39532948 227.89569092]
[14.31336498 214.73980713]
[19.51658249 202.30505371]
[26.84176826 190.98501587]
[36.05851746 181.13830566]
[46.87647629 173.07711792]
[58.95449448 167.05738831]
[71.91138458 163.27064514]
[85.33795166 161.83790588]
[86.58482361 146.88981628]
[79.93225861 133.56343079]
[88.78991699 120.45418549]
[90.03678894 105.50609589]
[87.39792633 90.74004364]
[81.05079651 77.14909363]
[74.70366669 63.55813980]
[68.35653687 49.96718979]
[58.72801208 38.46538544]
[46.46564484 29.82627106]
[34.20327759 21.18715477]
[21.94090843 12.54803848]
[6.41362381 15.49404907]
[-6.60175657 6.52881527]
[-9.38343906 -9.02874851]
[-0.28109962 -21.94861603]
[15.30500412 -24.56565857]
[28.12791443 -15.32723141]
[30.58002472 0.28567040]
[42.84239197 8.92478657]
[55.10475922 17.56390190]
[67.36712646 26.20301819]
[61.39558411 12.44290733]
[58.69355774 -2.31172037]
[59.40129471 -17.29501534]
[63.48206329 -31.72925568]
[70.72404480 -44.86522675]
[80.75134277 -56.02108765]
[93.04347992 -64.61779785]
[106.96242523 -70.20912170]
[121.78570557 -72.50485229]
[136.74391174 -71.38581848]
[151.06060791 -66.91011047]
[163.99270630 -59.31004333]
[174.86892700 -48.98010254]
[183.12475586 -36.45646667]
[188.33164978 -22.38919067]
[190.21934509 -7.50844479]
[188.68986511 7.41337442]
[183.82258606 21.60173988]
[175.87017822 34.32019043]
[165.24537659 44.90856934]
[152.49969482 52.81727600]
[138.29470825 57.63580704]
[123.36772919 59.11404800]
[108.49354553 57.17527390]
[94.44422913 51.92011642]
[81.94748688 43.62005997]
[88.29461670 57.21100998]
[94.64174652 70.80196381]
[100.98887634 84.39291382]
[108.05127716 86.91728973]
[113.10027313 72.79257202]
[127.22490692 77.84179688]
[122.17608643 91.96604919]
[129.23847961 94.49042511]
[142.76268005 88.00225830]
[156.28686523 81.51409912]
[169.74282837 74.88559723]
[183.12911987 68.11748505]
[196.51539612 61.34936905]
[209.90168762 54.58125305]
[216.25280762 39.84888458]
[231.76818848 35.76809692]
[244.54573059 45.46932220]
[244.78361511 61.51061249]
[232.29934692 71.58645630]
[216.66979980 67.96753693]
[203.28350830 74.73564911]
[189.89723206 81.50376892]
[176.51094055 88.27188110]
[171.93118286 94.13459778]
[162.77502441 95.03828430]
[149.25083923 101.52645111]
[135.72665405 108.01461792]
[118.85099030 112.29117584]
[104.98487854 106.75297546]
[103.73800659 121.70105743]
[110.30139160 136.09663391]
[101.53291321 148.13670349]
[100.28603363 163.08477783]
[116.24549866 167.91390991]
[130.76092529 176.10647583]
[143.13389587 187.26516724]
[152.76976013 200.85000610]
[159.20625305 216.20449829]
[162.13557434 232.58740234]
[161.41921997 249.20843506]
[157.09445190 265.26644897]
[149.37239075 279.98800659]
[138.62774658 292.66470337]
[125.38056946 302.68719482]
[110.27113342 309.57449341]
[94.02897644 312.99707031]
[94.02897644 327.99707031]
[94.02897644 342.99707031]
[94.02897644 357.99707031]
[94.02897644 372.99707031]
[94.02897644 387.99707031]
[94.02897644 402.99707031]
[94.02897644 417.99707031]
[94.02897644 432.99707031]
[94.02897644 447.99707031]
[108.56886292 452.05838013]
[121.47324371 459.89288330]
[131.78453064 470.91921997]
[138.73754883 484.31915283]
[141.81634521 499.09829712]
[140.79246521 514.15997314]
[135.74185181 528.38653564]
[127.03933716 540.72216797]
[115.33067322 550.25158691]
[101.48473358 556.26763916]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[37 118]
[38 117]
[40 115]
[41 114]
[42 88]
[43 87]
[44 86]
[45 85]
[46 59]
[47 58]
[48 57]
[49 56]
[93 112]
[94 111]
[95 110]
[96 108]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
