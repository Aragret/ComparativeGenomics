%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACACAAACAGGGGGGGGGGUUAUUAUAAUAAACACCCUCACCACUACAAUCUUCCUAGGAACAACAUAUxxxxxxxxxxACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCACCCUUACCCCCCCCCCCUACACAAUCA\
) } def
/len { sequence length } bind def

/coor [
[66.69318390 399.05758667]
[53.47298813 391.78512573]
[42.58618164 381.33810425]
[34.77505112 368.42886353]
[30.57217216 353.93756104]
[30.26409912 338.85220337]
[33.87184143 324.20138550]
[41.14941406 310.98400879]
[51.60062027 300.10122681]
[64.51288605 292.29510498]
[79.00582123 288.09780884]
[78.69376373 273.10104370]
[78.38170624 258.10430908]
[78.06964874 243.10754395]
[77.75759125 228.11079407]
[77.44554138 213.11404419]
[77.13348389 198.11727905]
[76.82142639 183.12052917]
[76.50936890 168.12377930]
[76.19731140 153.12702942]
[75.88525391 138.13026428]
[68.27639771 151.05718994]
[58.11161423 162.08792114]
[45.84846878 170.72593689]
[32.03898239 176.58239746]
[17.30477524 179.39366150]
[2.30910778 179.03318787]
[-12.27300167 175.51721191]
[-25.78514481 169.00399780]
[-37.61908340 159.78672791]
[-47.24211502 148.28033447]
[-54.22106171 135.00274658]
[-58.24177551 120.55165863]
[-59.12326431 105.57758331]
[-56.82584763 90.75456238]
[-51.45294189 76.74985504]
[-43.24640656 64.19387054]
[-32.57565308 53.65180969]
[-19.92102051 45.59822083]
[-5.85215282 40.39562988]
[8.99764919 38.27822876]
[23.95992851 39.34133530]
[38.36116791 43.53708649]
[51.55309677 50.67662048]
[62.94189835 60.43855286]
[72.01490021 72.38345337]
[78.36369324 85.97362518]
[81.70248413 100.59732056]
[81.88076782 115.59853363]
[89.60485077 102.74012756]
[94.80027008 88.66860962]
[97.28538513 73.87590027]
[97.59744263 58.87914658]
[95.72982788 43.99586868]
[93.86221313 29.11258888]
[91.99460602 14.22930908]
[90.12699127 -0.65397125]
[88.25937653 -15.53725147]
[86.39176178 -30.42053032]
[84.52415466 -45.30381012]
[69.55067444 -47.05266190]
[55.43107605 -52.33473969]
[42.98624802 -60.84295273]
[32.93971634 -72.08264160]
[25.87557411 -85.40035248]
[22.20452118 -100.02180481]
[22.13998604 -115.09692383]
[25.68572426 -129.74926758]
[32.63558578 -143.12696838]
[42.58552170 -154.45225525]
[54.95705032 -163.06671143]
[69.03090668 -168.46948242]
[83.98886108 -170.34646606]
[98.96127319 -168.58853149]
[113.07766724 -163.29789734]
[125.51733398 -154.78213501]
[135.55705261 -143.53636169]
[142.61311340 -130.21437073]
[146.27531433 -115.59069824]
[146.33070374 -100.51554108]
[142.77607727 -85.86534882]
[135.81811523 -72.49186707]
[125.86131287 -61.17260742]
[113.48456573 -52.56566238]
[99.40743256 -47.17142487]
[101.27504730 -32.28814316]
[103.14265442 -17.40486526]
[105.01026917 -2.52158451]
[106.87788391 12.36169529]
[108.74549866 27.24497604]
[110.61311340 42.12825394]
[112.48072052 57.01153564]
[119.18542480 43.59337616]
[130.44433594 33.68192673]
[144.60426331 28.73252678]
[159.58602905 29.47192192]
[173.18978882 35.79154587]
[183.41804504 46.76345444]
[188.76893616 60.77659225]
[188.45674133 75.77334595]
[182.52732849 89.55166626]
[171.85133362 100.08841705]
[157.99636841 105.83643341]
[142.99681091 105.95172119]
[129.05513000 100.41733551]
[118.21843719 90.04592896]
[112.07809448 76.36102295]
[109.59297180 91.15372467]
[119.48585510 79.87849426]
[132.33398438 72.13732910]
[146.92546082 68.66041565]
[161.88394165 69.77571106]
[175.79846191 75.37801361]
[187.35655212 84.93889618]
[195.46800232 97.55652618]
[199.36767578 112.04074097]
[198.68775940 127.02532196]
[193.49237061 141.09684753]
[184.27156067 152.92803955]
[171.89511108 161.40289307]
[157.53039551 165.72203064]
[142.53237915 165.47805786]
[128.31575012 160.69398499]
[116.22148132 151.82106018]
[107.39037323 139.69622803]
[102.65541077 125.46316528]
[102.46325684 110.46421051]
[94.73917389 123.32261658]
[90.88201141 137.81820679]
[91.19406891 152.81497192]
[91.50612640 167.81172180]
[91.81817627 182.80847168]
[92.13023376 197.80522156]
[92.44229126 212.80198669]
[92.75434875 227.79873657]
[93.06640625 242.79548645]
[93.37846375 257.79223633]
[93.69051361 272.78900146]
[94.00257111 287.78573608]
[108.65756226 291.37652588]
[121.88337708 298.63876343]
[132.77824402 309.07736206]
[140.59933472 321.98059082]
[144.81341553 336.46865845]
[145.13313293 351.55374146]
[141.53671265 366.20733643]
[134.26934814 379.43035889]
[123.82653809 390.32119751]
[110.92031097 398.13729858]
[96.43061829 402.34579468]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[49 128]
[50 127]
[51 108]
[52 107]
[53 92]
[54 91]
[55 90]
[56 89]
[57 88]
[58 87]
[59 86]
[60 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
