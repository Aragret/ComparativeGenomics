%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACACCAGGGGGGGGGGGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACAGUxxxxxxxxxxAUGCAUACACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCCCCCCCCCCCUAACAGCAG\
) } def
/len { sequence length } bind def

/coor [
[117.05884552 476.75814819]
[104.18557739 468.85528564]
[94.06127930 457.64477539]
[87.50669861 444.03543091]
[85.05317688 429.13049316]
[86.89961243 414.13824463]
[92.89632416 400.27404785]
[102.55718994 388.66180420]
[115.09903717 380.24285889]
[129.50515747 375.69967651]
[129.19309998 360.70294189]
[128.88104248 345.70617676]
[128.56898499 330.70944214]
[128.25692749 315.71267700]
[127.94487762 300.71591187]
[127.63282013 285.71917725]
[127.32076263 270.72241211]
[127.00870514 255.72566223]
[126.69664764 240.72891235]
[124.51981354 225.88769531]
[120.51206970 211.43301392]
[116.50433350 196.97831726]
[112.49658966 182.52363586]
[108.48885345 168.06895447]
[104.79166412 164.95344543]
[103.05152893 159.45770264]
[104.62848663 152.92924500]
[101.22550964 138.32035828]
[97.82253265 123.71146393]
[94.41955566 109.10256958]
[89.51800537 94.92601013]
[83.17087555 81.33506012]
[76.82374573 67.74411011]
[70.47661591 54.15316010]
[64.12948608 40.56221008]
[60.61360550 55.14434052]
[50.37787628 66.10927582]
[36.07177734 70.61877441]
[21.39840126 67.50556183]
[10.15590954 57.57548904]
[5.25438452 43.39892197]
[7.96257114 28.64542198]
[17.57946396 17.13389015]
[31.61575890 11.84404850]
[46.43820572 14.14515877]
[58.20999146 23.44149971]
[47.54365540 11.75647449]
[52.19183731 -2.39427280]
[48.78886032 -17.00316620]
[45.38588333 -31.61205864]
[34.83714676 -39.10726166]
[32.32988358 -51.39272308]
[38.67874146 -61.73677063]
[35.58042145 -76.41329193]
[32.48209763 -91.08982086]
[29.38377571 -105.76634979]
[26.28545570 -120.44287109]
[23.18713379 -135.11940002]
[20.08881187 -149.79592896]
[5.02154303 -150.59582520]
[-9.32498932 -155.26908875]
[-21.97261620 -163.49708557]
[-32.05899811 -174.71882629]
[-38.89643478 -188.16917419]
[-42.01873398 -202.93107605]
[-41.21301270 -217.99803162]
[-36.53420639 -232.34275818]
[-28.30132675 -244.98719788]
[-17.07570076 -255.06925964]
[-3.62271261 -261.90148926]
[11.14039040 -265.01809692]
[26.20703697 -264.20654297]
[40.54995728 -259.52221680]
[53.19122314 -251.28445435]
[63.26893997 -240.05493164]
[70.09598541 -226.59930420]
[73.20688629 -211.83500671]
[72.38952637 -196.76867676]
[67.69964600 -182.42756653]
[59.45700455 -169.78947449]
[48.22359848 -159.71609497]
[34.76533508 -152.89424133]
[37.86365891 -138.21771240]
[40.96197891 -123.54119110]
[44.06030273 -108.86466980]
[47.15862274 -94.18814087]
[50.25694656 -79.51161957]
[53.35526657 -64.83509064]
[65.76830292 -52.46915436]
[59.99477386 -35.01503754]
[63.39775085 -20.40614319]
[66.80072784 -5.79725075]
[77.22366333 4.84284830]
[72.81888580 20.03852081]
[77.72043610 34.21508026]
[84.06756592 47.80603027]
[90.41469574 61.39698029]
[96.76182556 74.98793030]
[103.10895538 88.57888031]
[106.62483215 73.99674988]
[116.86056519 63.03181458]
[131.16665649 58.52231979]
[145.84004211 61.63553238]
[157.08253479 71.56560516]
[161.98405457 85.74217224]
[159.27586365 100.49566650]
[149.65896606 112.00720215]
[135.62268066 117.29704285]
[120.80023193 114.99593353]
[109.02844238 105.69959259]
[112.43142700 120.30848694]
[115.83440399 134.91737366]
[119.23738098 149.52627563]
[122.94354248 164.06120300]
[126.95127869 178.51589966]
[130.95901489 192.97058105]
[134.96676636 207.42527771]
[138.97450256 221.87995911]
[144.13642883 207.79612732]
[154.81375122 197.26071167]
[168.96539307 192.28768921]
[183.88612366 193.82768250]
[196.72370911 201.58631897]
[205.02412415 214.08044434]
[207.20063782 228.92169189]
[202.83720398 243.27302551]
[192.76792908 254.39102173]
[178.91766357 260.15036011]
[163.93402100 259.45013428]
[150.68125916 252.42413330]
[141.69340515 240.41685486]
[142.00546265 255.41360474]
[142.31752014 270.41036987]
[142.62957764 285.40710449]
[142.94163513 300.40386963]
[143.25367737 315.40060425]
[143.56573486 330.39736938]
[143.87779236 345.39413452]
[144.18984985 360.39086914]
[144.50190735 375.38763428]
[159.08454895 379.32757568]
[171.96575928 387.21752930]
[182.10130310 398.41784668]
[188.66955566 412.02059937]
[191.13804626 426.92306519]
[189.30668640 441.91714478]
[183.32389832 455.78738403]
[173.67471313 467.40933228]
[161.14132690 475.84088135]
[146.73977661 480.39849854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 118]
[21 117]
[22 116]
[23 115]
[24 114]
[27 113]
[28 112]
[29 111]
[30 110]
[31 99]
[32 98]
[33 97]
[34 96]
[35 95]
[46 94]
[48 92]
[49 91]
[50 90]
[53 88]
[54 87]
[55 86]
[56 85]
[57 84]
[58 83]
[59 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
