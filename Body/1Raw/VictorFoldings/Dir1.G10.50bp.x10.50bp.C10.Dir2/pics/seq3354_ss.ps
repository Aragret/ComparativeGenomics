%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUCCUAAUGGGGGGGGGGGCUUACCGAACGAAAAAUUCUAGGCUAUAUACAACUACGCAAAGGCCCCAxxxxxxxxxxACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAUAACCCCCCCCCCCCAUUCUUAAU\
) } def
/len { sequence length } bind def

/coor [
[83.69956207 430.47155762]
[69.85362244 424.45553589]
[58.14496231 414.92611694]
[49.44243622 402.59045410]
[44.39183426 388.36392212]
[43.36794281 373.30224609]
[46.44674301 358.52307129]
[53.39976501 345.12313843]
[63.71104813 334.09683228]
[76.61543274 326.26229858]
[91.15531921 322.20098877]
[91.15531921 307.20098877]
[91.15531921 292.20098877]
[91.15531921 277.20098877]
[91.15531921 262.20098877]
[91.15531921 247.20098877]
[91.15531921 232.20098877]
[91.15531921 217.20098877]
[91.15531921 202.20098877]
[91.15531921 187.20098877]
[91.15531921 172.20098877]
[87.98973846 165.46862793]
[91.31459808 156.88975525]
[91.62665558 141.89300537]
[91.93871307 126.89624786]
[75.68380737 114.03977203]
[72.67620087 93.53453064]
[84.55440521 76.55163574]
[79.94884491 62.27617264]
[75.34327698 48.00070953]
[70.73770905 33.72525024]
[58.29827118 25.34310722]
[43.33802414 26.43441772]
[28.37777519 27.52572823]
[13.02051353 34.70840454]
[1.86722481 21.93967438]
[11.04941177 7.68752432]
[27.28646469 12.56548023]
[42.24671173 11.47416973]
[57.20696259 10.38285828]
[62.08078766 4.68234825]
[57.08101273 -9.45986652]
[71.82843781 -6.71867275]
[76.70226288 -12.41918278]
[75.45539093 -27.36726952]
[74.20851898 -42.31535721]
[72.96163940 -57.26344299]
[71.71476746 -72.21153259]
[70.31246185 -87.14583588]
[68.75488281 -102.06475067]
[59.62641907 -114.98689270]
[66.00030518 -128.44879150]
[64.44272614 -143.36770630]
[53.28265762 -157.97703552]
[60.97344971 -173.72035217]
[59.10583496 -188.60362244]
[57.23822403 -203.48690796]
[42.22690964 -204.55773926]
[27.71302223 -208.53684998]
[14.25444031 -215.27130127]
[2.36847377 -224.50222778]
[-7.48801327 -235.87483215]
[-14.93616295 -248.95195007]
[-19.68968773 -263.23095703]
[-21.56587601 -278.16302490]
[-20.49261093 -293.17416382]
[-16.51114655 -307.68740845]
[-9.77452087 -321.14489746]
[-0.54166967 -333.02935791]
[10.83251953 -342.88400269]
[23.91085434 -350.33004761]
[38.19063568 -355.08126831]
[53.12298965 -356.95501709]
[68.13395691 -355.87933350]
[82.64655304 -351.89550781]
[96.10295868 -345.15670776]
[107.98593140 -335.92193604]
[117.83873749 -324.54617310]
[125.28265381 -311.46661377]
[130.03155518 -297.18606567]
[131.90290833 -282.25341797]
[130.82478333 -267.24261475]
[126.83862305 -252.73066711]
[120.09764099 -239.27536011]
[110.86094666 -227.39387512]
[99.48356628 -217.54290771]
[86.40282440 -210.10110474]
[72.12150574 -205.35452271]
[73.98911285 -190.47123718]
[75.85672760 -175.58795166]
[85.23718262 -167.88638306]
[86.88208008 -155.45603943]
[79.36164093 -144.92527771]
[80.91921997 -130.00637817]
[89.93627930 -118.15133667]
[83.67379761 -103.62232971]
[85.23137665 -88.70342255]
[89.07892609 -82.33615875]
[86.66285706 -73.45840454]
[87.90972900 -58.51031876]
[89.15660095 -43.56223297]
[90.40348053 -28.61414528]
[91.65035248 -13.66605759]
[99.08201599 13.02136230]
[85.01317596 29.11968613]
[89.61873627 43.39514542]
[94.22430420 57.67060852]
[98.82986450 71.94606781]
[107.61334229 72.97354126]
[115.64160156 76.68193054]
[122.11828613 82.70336151]
[126.40093231 90.44055176]
[128.06471252 99.12599182]
[142.63742065 102.68075562]
[153.74502563 91.97447205]
[168.88203430 88.99541473]
[183.21826172 94.69419098]
[192.17907715 107.25234985]
[192.90512085 122.66262054]
[185.16471863 136.00764465]
[171.42779541 143.02906799]
[156.07775879 141.48638916]
[144.01274109 131.87187195]
[139.08265686 117.25346375]
[124.50995636 113.69869995]
[117.11230469 122.26120758]
[106.93546295 127.20829773]
[106.62341309 142.20504761]
[106.31135559 157.20181274]
[106.15531921 172.20098877]
[106.15531921 187.20098877]
[106.15531921 202.20098877]
[106.15531921 217.20098877]
[106.15531921 232.20098877]
[106.15531921 247.20098877]
[106.15531921 262.20098877]
[106.15531921 277.20098877]
[106.15531921 292.20098877]
[106.15531921 307.20098877]
[106.15531921 322.20098877]
[120.69520569 326.26229858]
[133.59957886 334.09683228]
[143.91087341 345.12313843]
[150.86389160 358.52307129]
[153.94268799 373.30224609]
[152.91879272 388.36392212]
[147.86819458 402.59045410]
[139.16567993 414.92611694]
[127.45700836 424.45553589]
[113.61106873 430.47155762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 129]
[24 128]
[25 127]
[28 108]
[29 107]
[30 106]
[31 105]
[32 40]
[33 39]
[34 38]
[44 103]
[45 102]
[46 101]
[47 100]
[48 99]
[49 97]
[50 96]
[52 94]
[53 93]
[55 90]
[56 89]
[57 88]
[113 125]
[114 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
