%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCCAUCCUAAGGGGGGGGGGAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGUUGGUxxxxxxxxxxUAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUAAUUCCCCCCCCCCCCCCCCAUCCUUA\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 498.21191406]
[70.75619507 493.40249634]
[57.85220718 485.63708496]
[46.91955185 475.27896118]
[38.46956635 462.81253052]
[32.89747238 448.82089233]
[30.46388245 433.95846558]
[31.28262329 418.92037964]
[35.31539917 404.41003418]
[42.37359238 391.10604858]
[52.12707901 379.63067627]
[64.11966705 370.52069092]
[77.79044342 364.20214844]
[92.50000000 360.97061157]
[92.50000000 345.97061157]
[92.50000000 330.97061157]
[92.50000000 315.97061157]
[92.50000000 300.97061157]
[92.50000000 285.97061157]
[92.50000000 270.97061157]
[92.50000000 255.97059631]
[92.50000000 240.97059631]
[92.50000000 225.97059631]
[92.50000000 210.97059631]
[92.50000000 195.97059631]
[92.50000000 180.97059631]
[84.76270294 168.24333191]
[92.50000000 154.44316101]
[92.50000000 139.44316101]
[92.50000000 124.44315338]
[85.15451050 120.81656647]
[79.33300781 115.05301666]
[75.63310242 107.74417877]
[60.63385391 107.89424896]
[45.63460541 108.04432678]
[30.63535690 108.19439697]
[18.42361450 118.59886169]
[2.70330119 115.39710236]
[-4.46630621 101.04522705]
[2.41470194 86.55277252]
[18.06780624 83.03710938]
[30.48528290 93.19514465]
[45.48453140 93.04507446]
[60.48377991 92.89499664]
[75.48303223 92.74492645]
[75.65205383 92.19645691]
[75.83333588 91.65192413]
[63.71575165 82.81088257]
[51.59816360 73.96984100]
[39.48057175 65.12879181]
[27.36298561 56.28775024]
[12.22680187 60.21584702]
[-1.87082708 53.44895172]
[-8.27343082 39.18218231]
[-3.95789719 24.15187454]
[9.03811169 15.45487785]
[24.57827759 17.19764900]
[35.32500839 28.55730438]
[36.20402908 44.17016220]
[48.32161713 53.01120758]
[60.43920517 61.85224915]
[72.55679321 70.69329071]
[84.67438507 79.53433990]
[96.43037415 74.68250275]
[109.06957245 76.09475708]
[118.27029419 64.24794769]
[124.25228882 50.49238205]
[126.64326477 35.68416595]
[129.03424072 20.87595177]
[130.97973633 6.00265169]
[132.47799683 -8.92233467]
[133.97625732 -23.84732246]
[135.47450256 -38.77230835]
[121.92684174 -45.61519623]
[111.76885986 -56.89260101]
[106.37435150 -71.07934570]
[106.47286987 -86.25679016]
[112.05110168 -100.37229919]
[122.35463715 -111.51688385]
[135.98999023 -118.18331909]
[151.11311340 -119.47002411]
[165.67872620 -115.20298767]
[177.71693420 -105.95928955]
[185.59967041 -92.98905945]
[188.26087952 -78.04642487]
[185.34063721 -63.15224457]
[177.23388672 -50.32083893]
[165.03698730 -41.28754807]
[150.39949036 -37.27405167]
[148.90124512 -22.34906387]
[147.40298462 -7.42407656]
[145.90472412 7.50090981]
[147.89074707 10.47815228]
[148.50144958 14.58121014]
[147.21650696 19.13805008]
[143.84245300 23.26692581]
[141.45147705 38.07514191]
[139.06050110 52.88335800]
[148.67451477 41.36940765]
[160.64657593 32.33229065]
[174.35443115 26.24174118]
[189.08554077 23.41433334]
[204.07421875 23.99703789]
[218.54136658 27.95956230]
[231.73501587 35.09593964]
[242.96934509 45.03523636]
[251.66044617 57.26081467]
[257.35656738 71.13721466]
[259.76159668 85.94315338]
[258.75054932 100.90904236]
[254.37597656 115.25697327]
[246.86524963 128.24116516]
[236.60879517 139.18670654]
[224.13970947 147.52467346]
[210.10610962 152.82167053]
[195.23745728 154.80236816]
[180.30659485 153.36381531]
[166.08961487 148.58076477]
[153.32550049 140.70185852]
[142.67768860 130.13661194]
[134.69966125 117.43421173]
[129.80610657 103.25489044]
[128.25137329 88.33568573]
[130.11709595 73.44866943]
[120.91637421 85.29547119]
[124.18693542 108.28915405]
[107.50000000 124.44315338]
[107.50000000 139.44316101]
[107.50000000 154.44316101]
[115.23729706 168.24333191]
[107.50000000 180.97059631]
[107.50000000 195.97059631]
[107.50000000 210.97059631]
[107.50000000 225.97059631]
[107.50000000 240.97059631]
[107.50000000 255.97059631]
[107.50000000 270.97061157]
[107.50000000 285.97061157]
[107.50000000 300.97061157]
[107.50000000 315.97061157]
[107.50000000 330.97061157]
[107.50000000 345.97061157]
[107.50000000 360.97061157]
[122.20955658 364.20214844]
[135.88034058 370.52069092]
[147.87292480 379.63067627]
[157.62640381 391.10604858]
[164.68460083 404.41003418]
[168.71737671 418.92037964]
[169.53611755 433.95846558]
[167.10252380 448.82089233]
[161.53042603 462.81253052]
[153.08044434 475.27896118]
[142.14779663 485.63708496]
[129.24380493 493.40249634]
[114.97203827 498.21191406]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 132]
[26 131]
[28 129]
[29 128]
[30 127]
[33 45]
[34 44]
[35 43]
[36 42]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[65 125]
[66 124]
[67 98]
[68 97]
[69 96]
[70 92]
[71 91]
[72 90]
[73 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
