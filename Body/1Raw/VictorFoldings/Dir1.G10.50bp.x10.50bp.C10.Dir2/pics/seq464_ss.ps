%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAACACCAGGGGGGGGGGGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACAGxxxxxxxxxxACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUAAUCCCCCCCCCCCCUAAUACCA\
) } def
/len { sequence length } bind def

/coor [
[80.93294525 364.29092407]
[67.71274567 357.01846313]
[56.82594681 346.57147217]
[49.01481628 333.66223145]
[44.81193542 319.17089844]
[44.50386047 304.08557129]
[48.11160278 289.43475342]
[55.38917542 276.21734619]
[65.84038544 265.33459473]
[78.75264740 257.52844238]
[93.24558258 253.33114624]
[92.93352509 238.33439636]
[92.62146759 223.33764648]
[92.30941010 208.34088135]
[91.99736023 193.34413147]
[91.68530273 178.34738159]
[91.37324524 163.35063171]
[91.06118774 148.35386658]
[90.74913025 133.35711670]
[77.50654602 126.31198883]
[64.89541626 134.43353271]
[60.10841370 149.74574280]
[45.10066223 155.41557312]
[31.38482285 147.09359741]
[29.48251534 131.16372681]
[40.85302734 119.84599304]
[56.77387619 121.82240295]
[69.38500214 113.70085907]
[73.28689575 86.32958984]
[94.63652039 74.07421112]
[95.88339233 59.12612534]
[97.13026428 44.17803574]
[98.37714386 29.22994995]
[92.39540100 30.44728661]
[85.66100311 29.70501137]
[70.95304108 26.75952911]
[56.24507904 23.81404686]
[41.53711700 20.86856461]
[30.22060394 31.48535156]
[14.82079411 33.38942719]
[1.25922930 25.84863281]
[-5.24939346 11.76255894]
[-2.20237517 -3.45241070]
[9.22864342 -13.94581032]
[24.64820290 -15.68271446]
[38.12716675 -7.99524736]
[44.48259735 6.16060305]
[59.19055939 9.10608578]
[73.89852142 12.05156803]
[88.60648346 14.99705029]
[100.77832031 6.23084354]
[102.64593506 -8.65243626]
[104.51354980 -23.53571701]
[106.38115692 -38.41899490]
[104.33648682 -47.38956833]
[108.44557190 -53.59126663]
[110.62240601 -68.43247223]
[112.79924011 -83.27368164]
[114.97608185 -98.11488342]
[116.99841309 -112.97792816]
[118.86602783 -127.86121368]
[120.73364258 -142.74449158]
[122.60124969 -157.62777710]
[116.64238739 -172.28390503]
[125.90412140 -183.94879150]
[116.33778381 -172.39521790]
[103.44569397 -164.72749329]
[88.72679901 -161.83714294]
[73.89244843 -164.06024170]
[60.66742706 -171.13829041]
[50.58939743 -182.24835205]
[44.83011627 -196.09864807]
[44.05921936 -211.07882690]
[48.36632919 -225.44714355]
[57.25066757 -237.53303528]
[69.67926025 -245.93124390]
[84.20703888 -249.66535950]
[99.14488220 -248.30119324]
[112.75596619 -241.99736023]
[123.45775604 -231.48680115]
[130.00595093 -217.99157715]
[131.63902283 -203.07786560]
[138.26751709 -216.53382874]
[144.89601135 -229.98979187]
[143.27703857 -246.30883789]
[156.75621033 -255.64929199]
[171.46730042 -248.40251160]
[172.27680969 -232.02336121]
[158.35197449 -223.36129761]
[151.72348022 -209.90533447]
[145.09498596 -196.44937134]
[140.78739929 -182.08117676]
[146.87985229 -168.48959351]
[137.48452759 -155.76016235]
[135.61691284 -140.87687683]
[133.74931335 -125.99359894]
[131.88169861 -111.11032104]
[134.18440247 -104.03620148]
[129.81729126 -95.93804932]
[127.64044952 -81.09683990]
[125.46360779 -66.25563812]
[123.28677368 -51.41442871]
[121.26444244 -36.55138397]
[119.39682770 -21.66810417]
[117.52921295 -6.78482342]
[115.66159821 8.09845638]
[123.55843353 -4.65458488]
[135.43089294 -13.82216930]
[149.76664734 -18.23650360]
[164.73954773 -17.33527374]
[178.44230652 -11.23328495]
[189.12944031 -0.70782399]
[195.43955994 12.90034389]
[196.56889343 27.85777092]
[192.37358093 42.25913239]
[183.38801575 54.26994705]
[170.75682068 62.36023712]
[156.08897400 65.49943542]
[141.25294495 63.28767014]
[128.13854980 56.00667191]
[118.41637421 44.58392334]
[113.32522583 30.47682571]
[112.07835388 45.42491150]
[110.83148193 60.37299728]
[109.58460236 75.32108307]
[119.90603638 80.80603790]
[127.23672485 90.54812622]
[129.86047363 102.97015381]
[126.87064362 115.82734680]
[118.41559601 126.61283875]
[105.74588776 133.04505920]
[106.05794525 148.04182434]
[106.36999512 163.03857422]
[106.68205261 178.03532410]
[106.99411011 193.03207397]
[107.30616760 208.02883911]
[107.61822510 223.02558899]
[107.93028259 238.02233887]
[108.24233246 253.01908875]
[122.89733124 256.60986328]
[136.12313843 263.87213135]
[147.01800537 274.31069946]
[154.83909607 287.21392822]
[159.05317688 301.70199585]
[159.37289429 316.78707886]
[155.77647400 331.44070435]
[148.50910950 344.66369629]
[138.06629944 355.55453491]
[125.16007233 363.37063599]
[110.67037964 367.57913208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 28]
[21 27]
[30 125]
[31 124]
[32 123]
[33 122]
[35 50]
[36 49]
[37 48]
[38 47]
[51 106]
[52 105]
[53 104]
[54 103]
[56 102]
[57 101]
[58 100]
[59 99]
[60 97]
[61 96]
[62 95]
[63 94]
[65 92]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
