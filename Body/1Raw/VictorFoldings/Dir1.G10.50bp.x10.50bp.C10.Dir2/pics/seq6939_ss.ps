%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUCCCCACCGGGGGGGGGGGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGAAGCAAUAUGAAxxxxxxxxxxUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACUCCCCCCCCCCUAUCCCCACC\
) } def
/len { sequence length } bind def

/coor [
[66.87512207 384.83483887]
[53.02918625 378.81881714]
[41.32052231 369.28939819]
[32.61800003 356.95373535]
[27.56739807 342.72720337]
[26.54350662 327.66552734]
[29.62230492 312.88635254]
[36.57532883 299.48645020]
[46.88661194 288.46011353]
[59.79099274 280.62561035]
[74.33087921 276.56427002]
[74.33087921 261.56427002]
[74.33087921 246.56428528]
[74.33087921 231.56428528]
[74.33087921 216.56428528]
[74.33087921 201.56428528]
[74.33087921 186.56428528]
[74.33087921 171.56428528]
[74.33087921 156.56428528]
[74.33087921 141.56428528]
[62.92985916 131.81663513]
[48.11209869 134.14773560]
[33.29434204 136.47883606]
[18.47658348 138.80993652]
[3.71052837 141.44880676]
[-10.99743271 144.39428711]
[-25.70539474 147.33976746]
[-29.95728874 162.04283142]
[-40.56336975 173.07775879]
[-55.08644104 177.90881348]
[-70.18920135 175.42584229]
[-82.40115356 166.19941711]
[-88.91607666 152.34971619]
[-88.23689270 137.05928040]
[-80.51966095 123.84175110]
[-67.53776550 115.73442078]
[-52.27433395 114.60028839]
[-38.23679733 120.69997406]
[-28.65087700 132.63180542]
[-13.94291592 129.68632507]
[0.76504600 126.74084473]
[4.14127064 123.28012085]
[9.74905586 121.94444275]
[16.14547920 123.99218750]
[30.96323776 121.66107941]
[45.78099442 119.32997894]
[60.59875488 116.99887085]
[58.06154633 106.40243530]
[58.29106140 95.63314056]
[61.20944214 85.39337921]
[66.56552124 76.33511353]
[73.95512390 69.01837158]
[82.85099792 63.87674713]
[92.64015198 61.19192886]
[102.66596222 61.07883072]
[112.27217865 63.48199081]
[119.72708893 50.46568298]
[126.90959930 37.29710007]
[133.81658936 23.98194313]
[140.72360229 10.66678810]
[147.63059998 -2.64836740]
[146.34858704 -20.98784256]
[161.43211365 -29.90340233]
[167.49511719 -43.62345505]
[172.98214722 -57.58384705]
[178.46919250 -71.54423523]
[183.95622253 -85.50462341]
[189.44325256 -99.46501160]
[194.93028259 -113.42540741]
[182.26451111 -121.55342102]
[171.42803955 -131.99644470]
[162.83735657 -144.35308838]
[156.82267761 -158.14837646]
[153.61520386 -172.85205078]
[153.33819580 -187.89897156]
[156.00233459 -202.71073914]
[161.50518799 -216.71804810]
[169.63525391 -229.38249207]
[180.08003235 -240.21730042]
[192.43806458 -248.80596924]
[206.23431396 -254.81842041]
[220.93852234 -258.02352905]
[235.98547363 -258.29806519]
[250.79681396 -255.63154602]
[264.80325317 -250.12643433]
[277.46636963 -241.99430847]
[288.29946899 -231.54777527]
[296.88616943 -219.18835449]
[302.89636230 -205.39112854]
[306.09909058 -190.68640137]
[306.37121582 -175.63940430]
[303.70230103 -160.82849121]
[298.19488525 -146.82296753]
[290.06072998 -134.16114807]
[279.61242676 -123.32974243]
[267.25164795 -114.74505615]
[253.45343018 -108.73708344]
[238.74818420 -105.53674316]
[223.70114136 -105.26705170]
[208.89067078 -107.93837738]
[203.40364075 -93.97798157]
[197.91661072 -80.01759338]
[192.42958069 -66.05720520]
[186.94255066 -52.09681320]
[181.45550537 -38.13642502]
[182.50729370 -35.47163391]
[182.53176880 -32.21688843]
[181.29386902 -28.77457619]
[178.71333313 -25.62626648]
[174.88807678 -23.27490425]
[178.48431396 -11.68290615]
[173.01931763 -0.39783430]
[160.94575500 4.25863123]
[154.03875732 17.57378769]
[147.13175964 30.88894272]
[140.22474670 44.20409775]
[140.81115723 49.00322723]
[138.34353638 54.21304321]
[132.74339294 57.92059326]
[125.28849030 70.93690491]
[131.87275696 77.65753174]
[136.68922424 85.85207367]
[139.41291809 95.05959320]
[139.83810425 104.74891663]
[137.89306641 114.34924316]
[133.64712524 123.28376770]
[127.30915833 131.00431824]
[119.21777344 137.02497864]
[109.82341003 140.95245361]
[99.66331482 142.51162720]
[89.33087921 141.56428528]
[89.33087921 156.56428528]
[89.33087921 171.56428528]
[89.33087921 186.56428528]
[89.33087921 201.56428528]
[89.33087921 216.56428528]
[89.33087921 231.56428528]
[89.33087921 246.56428528]
[89.33087921 261.56427002]
[89.33087921 276.56427002]
[103.87076569 280.62561035]
[116.77514648 288.46011353]
[127.08643341 299.48645020]
[134.03945923 312.88635254]
[137.11825562 327.66552734]
[136.09436035 342.72720337]
[131.04376221 356.95373535]
[122.34123230 369.28939819]
[110.63257599 378.81881714]
[96.78663635 384.83483887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 47]
[22 46]
[23 45]
[24 44]
[25 41]
[26 40]
[27 39]
[56 120]
[57 119]
[58 116]
[59 115]
[60 114]
[61 113]
[63 110]
[64 105]
[65 104]
[66 103]
[67 102]
[68 101]
[69 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
