%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCUACUCGGGGGGGGGGCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGxxxxxxxxxxAUAACCAUUCUUAAUUUAACUAUUUAUAUUAUCCUAACUACUACCGCAUUCCCCCCCCCCCCUACUACUC\
) } def
/len { sequence length } bind def

/coor [
[82.95443726 344.01739502]
[69.73423767 336.74493408]
[58.84743500 326.29791260]
[51.03630447 313.38867188]
[46.83342361 298.89736938]
[46.52535248 283.81201172]
[50.13309479 269.16119385]
[57.41066742 255.94381714]
[67.86187744 245.06103516]
[80.77413940 237.25489807]
[95.26707458 233.05761719]
[94.95501709 218.06085205]
[94.64295959 203.06410217]
[94.33090210 188.06735229]
[94.01884460 173.07060242]
[93.70679474 158.07383728]
[93.39473724 143.07708740]
[93.08267975 128.08033752]
[92.77062225 113.08358002]
[81.36959839 103.33592987]
[66.50655365 105.35826111]
[58.36341095 109.64091492]
[51.31362915 107.26473236]
[36.41172791 108.97742462]
[21.50982475 110.69010925]
[6.60792351 112.40280151]
[-8.29397869 114.11549377]
[-23.19588089 115.82817841]
[-27.72075653 130.36933899]
[-37.77373505 141.80863953]
[-51.61308289 148.16413879]
[-66.84104156 148.33471680]
[-80.81928253 142.29081726]
[-91.12598419 131.07958984]
[-95.97545624 116.64343262]
[-94.52748871 101.48351288]
[-87.03295898 88.22636414]
[-74.79033661 79.16887665]
[-59.92073059 75.88031769]
[-45.00038910 78.93043518]
[-32.61434937 87.79079437]
[-24.90857124 100.92627716]
[-10.00666904 99.21358490]
[4.89523363 97.50090027]
[19.79713631 95.78820801]
[34.69903946 94.07551575]
[49.60094070 92.36283112]
[64.48422241 90.49521637]
[79.34726715 88.47288513]
[70.57299805 76.30685425]
[72.22973633 61.39863205]
[83.46094513 51.45579910]
[98.46006012 51.61883545]
[109.47249603 61.80345154]
[110.80477905 76.74416351]
[101.76702881 88.71727753]
[111.74975586 77.52151489]
[121.73248291 66.32574463]
[131.71520996 55.12998199]
[141.69793701 43.93421555]
[131.47819519 32.93914795]
[122.33297729 21.03539085]
[114.34264374 8.32755947]
[107.57740784 -5.07266760]
[102.09673309 -19.04752731]
[97.94878387 -33.47420120]
[95.17000580 -48.22591019]
[93.78482819 -63.17300797]
[93.80541992 -78.18414307]
[95.23160553 -93.12738037]
[98.05084229 -107.87140656]
[102.23836517 -122.28665161]
[107.75736237 -136.24641418]
[114.55934143 -149.62803650]
[122.58451080 -162.31388855]
[131.76235962 -174.19250488]
[142.01222229 -185.15950012]
[153.24401855 -195.11846924]
[165.35905457 -203.98190308]
[178.25083923 -211.67192078]
[191.80609131 -218.12091064]
[205.90568542 -223.27223206]
[220.42570496 -227.08058167]
[235.23854065 -229.51251221]
[250.21401978 -230.54664612]
[265.22055054 -230.17390442]
[280.12622070 -228.39753723]
[294.80004883 -225.23316956]
[309.11306763 -220.70861816]
[322.93951416 -214.86364746]
[336.15786743 -207.74960327]
[348.65197754 -199.42903137]
[360.31201172 -189.97502136]
[371.03552246 -179.47070312]
[380.72824097 -168.00834656]
[389.30502319 -155.68872070]
[396.69046021 -142.62007141]
[402.81967163 -128.91725159]
[407.63879395 -114.70068359]
[411.10546875 -100.09532166]
[413.18920898 -85.22950745]
[413.87173462 -70.23388672]
[413.14703369 -55.24024582]
[411.02145386 -40.38035202]
[407.51370239 -25.78479576]
[402.65463257 -11.58185005]
[396.48687744 2.10366893]
[389.06469727 15.15148926]
[380.45327759 27.44694328]
[370.72833252 38.88197708]
[359.97534180 49.35609436]
[348.28875732 58.77724838]
[335.77130127 67.06264496]
[322.53295898 74.13946533]
[308.69012451 79.94551849]
[294.36444092 84.42978668]
[279.68176270 87.55284882]
[264.77114868 89.28726959]
[249.76364136 89.61780548]
[234.79112244 88.54154205]
[219.98518372 86.06794739]
[205.47593689 82.21875000]
[191.39089966 77.02779388]
[177.85385132 70.54067993]
[164.98374939 62.81443024]
[152.89369202 53.91694260]
[142.91096497 65.11270905]
[132.92823792 76.30847168]
[122.94551849 87.50424194]
[112.96279144 98.70000458]
[107.76737976 112.77152252]
[108.07942963 127.76828003]
[108.39148712 142.76502991]
[108.70354462 157.76177979]
[109.01560211 172.75854492]
[109.32765961 187.75529480]
[109.63971710 202.75204468]
[109.95176697 217.74879456]
[110.26382446 232.74555969]
[124.91881561 236.33631897]
[138.14462280 243.59858704]
[149.03948975 254.03717041]
[156.86059570 266.94039917]
[161.07466125 281.42843628]
[161.39437866 296.51354980]
[157.79795837 311.16714478]
[150.53059387 324.39016724]
[140.08779907 335.28100586]
[127.18156433 343.09710693]
[112.69187164 347.30557251]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 49]
[21 48]
[23 47]
[24 46]
[25 45]
[26 44]
[27 43]
[28 42]
[56 130]
[57 129]
[58 128]
[59 127]
[60 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
