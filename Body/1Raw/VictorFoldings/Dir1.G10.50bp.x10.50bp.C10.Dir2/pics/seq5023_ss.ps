%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUUUCACUGGGGGGGGGGUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGCCUGCUUxxxxxxxxxxUGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCAAACCUACGCCAAAAUCCCCCCCCCCCCAUUUCACU\
) } def
/len { sequence length } bind def

/coor [
[104.76054382 402.48822021]
[90.91460419 396.47219849]
[79.20594025 386.94277954]
[70.50341797 374.60711670]
[65.45281982 360.38058472]
[64.42892456 345.31890869]
[67.50772095 330.53973389]
[74.46074677 317.13980103]
[84.77203369 306.11349487]
[97.67641449 298.27896118]
[112.21630096 294.21765137]
[112.21630096 279.21765137]
[112.21630096 264.21765137]
[112.21630096 249.21765137]
[112.21630096 234.21765137]
[112.21630096 219.21765137]
[112.21630096 204.21765137]
[112.21630096 189.21765137]
[112.21630096 174.21765137]
[112.21630096 159.21765137]
[109.42397308 144.47985840]
[103.93694305 130.51947021]
[98.44991302 116.55907440]
[86.84857178 107.05071259]
[72.08251190 104.41184998]
[57.28980637 101.92673492]
[42.47204971 99.59562683]
[36.07562637 101.64337158]
[30.46784019 100.30769348]
[27.09161568 96.84696960]
[12.38365364 93.90148163]
[-2.32430816 90.95600128]
[-17.03227043 88.01052094]
[-31.74023056 85.06504059]
[-46.44819260 82.11955261]
[-54.88071442 94.76712036]
[-67.51414490 103.22080994]
[-82.42198181 106.19149780]
[-97.33087921 103.22616577]
[-109.96734619 94.77701569]
[-118.40440369 82.13247681]
[-121.35547638 67.22074890]
[-118.37053680 52.31576157]
[-109.90476990 39.69042206]
[-97.24914551 31.26999855]
[-82.33354187 28.33854675]
[-67.43250275 31.34309006]
[-54.81830597 39.82545853]
[-46.41453934 52.49215317]
[-43.50270844 67.41159058]
[-28.79474831 70.35707855]
[-14.08678722 73.30255890]
[0.62117434 76.24803925]
[15.32913589 79.19351959]
[30.03709793 82.13900757]
[44.80315399 84.77787018]
[59.62091064 87.10897064]
[66.76343536 85.02811432]
[74.72138214 89.64579773]
[89.48743439 92.28466034]
[91.08787537 89.28231049]
[93.55023193 86.63713074]
[96.78584290 84.59472656]
[100.79358673 70.14003754]
[104.80132294 55.68535233]
[108.80906677 41.23066330]
[112.81680298 26.77597618]
[99.41552734 19.92100143]
[87.66869354 10.50842190]
[78.05731201 -1.07632434]
[70.97498322 -14.35884857]
[66.71170807 -28.79524040]
[65.44207764 -43.79433823]
[67.21807098 -58.74193573]
[71.96696472 -73.02593994]
[79.49430084 -86.06143951]
[89.49183655 -97.31462097]
[101.55018616 -106.32468414]
[115.17555237 -112.72267151]
[129.80999756 -116.24658966]
[144.85423279 -116.75213623]
[159.69223022 -114.21861267]
[173.71636963 -108.74975586]
[186.35237122 -100.56951904]
[197.08280945 -90.01287842]
[205.46826172 -77.51211548]
[211.16537476 -63.57913589]
[213.94082642 -48.78448486]
[213.68096924 -33.73398972]
[210.39646912 -19.04396439]
[204.22178650 -5.31595230]
[195.40980530 6.88789177]
[184.32135010 17.06782913]
[171.41049194 24.80699539]
[157.20593262 29.78847694]
[142.28932190 31.80828857]
[127.27149200 30.78371620]
[123.26375580 45.23840332]
[119.25601196 59.69309235]
[115.24827576 74.14778137]
[111.24053192 88.60247040]
[120.93714905 77.15801239]
[135.38880920 73.13939667]
[149.60144043 77.93535614]
[158.66354370 89.88853455]
[159.44348145 104.86824036]
[151.67175293 117.69790649]
[138.03405762 123.94394684]
[123.24318695 121.44790649]
[112.41030121 111.07204437]
[117.89733124 125.03243256]
[123.38436127 138.99282837]
[126.05874634 124.23315430]
[133.08627319 110.98122406]
[143.80407715 100.48699951]
[157.20120239 93.74035645]
[172.01396179 91.37767029]
[186.84513855 93.62180328]
[200.29579163 100.26107788]
[211.09718323 110.66923523]
[218.23048401 123.86454010]
[221.02284241 138.60234070]
[219.21086121 153.49249268]
[212.96545410 167.13049316]
[202.87573242 178.22993469]
[189.89340210 185.74385071]
[175.24301147 188.96351624]
[160.30647278 187.58522034]
[146.49266052 181.73896790]
[135.10456848 171.97621155]
[127.21630096 159.21765137]
[127.21630096 174.21765137]
[127.21630096 189.21765137]
[127.21630096 204.21765137]
[127.21630096 219.21765137]
[127.21630096 234.21765137]
[127.21630096 249.21765137]
[127.21630096 264.21765137]
[127.21630096 279.21765137]
[127.21630096 294.21765137]
[141.75617981 298.27896118]
[154.66056824 306.11349487]
[164.97184753 317.13980103]
[171.92486572 330.53973389]
[175.00367737 345.31890869]
[173.97978210 360.38058472]
[168.92918396 374.60711670]
[160.22665405 386.94277954]
[148.51799011 396.47219849]
[134.67205811 402.48822021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 112]
[22 111]
[23 110]
[24 60]
[25 59]
[26 57]
[27 56]
[30 55]
[31 54]
[32 53]
[33 52]
[34 51]
[35 50]
[63 101]
[64 100]
[65 99]
[66 98]
[67 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
