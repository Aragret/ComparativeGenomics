%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUCUUAGGGGGGGGGGGUUCAACUUUAAAUUUGCCCACAGAACCCUCUAAAUCCCCUUGUAAAUUUAxxxxxxxxxxUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCCCCCCCCCCCAAAAUCUUAG\
) } def
/len { sequence length } bind def

/coor [
[83.81349945 381.82473755]
[70.94022369 373.92187500]
[60.81592941 362.71136475]
[54.26134872 349.10202026]
[51.80782700 334.19708252]
[53.65426254 319.20483398]
[59.65097427 305.34063721]
[69.31183624 293.72839355]
[81.85368347 285.30944824]
[96.25980377 280.76626587]
[95.94775391 265.76953125]
[95.63569641 250.77276611]
[95.32363892 235.77601624]
[95.01158142 220.77926636]
[94.69952393 205.78251648]
[94.38746643 190.78575134]
[94.07541656 175.78900146]
[93.76335907 160.79225159]
[93.45130157 145.79550171]
[93.13924408 130.79873657]
[92.82718658 115.80198669]
[80.18279266 97.31369019]
[96.46763611 77.63405609]
[88.74354553 64.77565765]
[81.01946259 51.91725159]
[73.29537964 39.05884933]
[70.11830139 53.71852875]
[59.03881454 63.83015060]
[44.15055847 65.65766907]
[30.95445061 58.52585983]
[24.32619095 45.06977844]
[26.71478844 30.26117897]
[37.23770523 19.57154655]
[52.00693130 16.95048714]
[65.56489563 23.36583138]
[60.07786179 9.40544224]
[54.59082794 -4.55494785]
[49.10379791 -18.51533699]
[34.61782074 -14.56518269]
[19.78967094 -12.20442200]
[4.79319954 -11.46073151]
[-10.19576740 -12.34283352]
[-25.00149155 -14.84038353]
[-39.45038605 -18.92410088]
[-53.37303925 -24.54610443]
[-66.60621643 -31.64048004]
[-78.99477386 -40.12405014]
[-90.39345551 -49.89734650]
[-100.66860962 -60.84578705]
[-109.69978333 -72.84100342]
[-117.38107300 -85.74236298]
[-123.62243652 -99.39859009]
[-128.35067749 -113.64958954]
[-131.51037598 -128.32826233]
[-133.06448364 -143.26252747]
[-132.99476624 -158.27726746]
[-131.30206299 -173.19644165]
[-128.00619507 -187.84515381]
[-123.14582825 -202.05162048]
[-116.77793884 -215.64932251]
[-108.97718048 -228.47879028]
[-99.83501434 -240.38963318]
[-89.45863342 -251.24218750]
[-77.96969604 -260.90921021]
[-65.50289917 -269.27740479]
[-52.20441818 -276.24859619]
[-38.23015976 -281.74105835]
[-23.74397087 -285.69042969]
[-8.91569328 -288.05041504]
[6.08081818 -288.79327393]
[21.06973839 -287.91036987]
[35.87532806 -285.41201782]
[50.32400131 -281.32754517]
[64.24635315 -275.70477295]
[77.47914886 -268.60971069]
[89.86724854 -260.12545776]
[101.26540375 -250.35154724]
[111.53997040 -239.40255737]
[120.57049561 -227.40686035]
[128.25109863 -214.50508118]
[134.49171448 -200.84851074]
[139.21919250 -186.59725952]
[142.37811279 -171.91841125]
[143.93141174 -156.98408508]
[143.86088562 -141.96934509]
[142.16737366 -127.05025482]
[138.87072754 -112.40172577]
[134.00959778 -98.19551086]
[127.64096832 -84.59815979]
[119.83951569 -71.76911163]
[110.69671631 -59.85876083]
[100.31974792 -49.00675964]
[88.83029175 -39.34034348]
[76.36304474 -30.97284698]
[63.06418991 -24.00236893]
[68.55121613 -10.04197884]
[74.03825378 3.91841054]
[79.52528381 17.87880135]
[86.15377808 31.33476639]
[93.87786865 44.19316864]
[101.60195160 57.05157089]
[109.32603455 69.90997314]
[122.18444061 77.63405609]
[137.16415405 78.41390228]
[151.34791565 71.40453339]
[163.65571594 79.79305267]
[178.63543701 80.57289886]
[193.61515808 81.35274506]
[209.78134155 72.59865570]
[224.13816833 82.64263153]
[239.13087463 83.11067200]
[251.76092529 73.21817780]
[267.33596802 77.06491852]
[273.90817261 91.70000458]
[266.43591309 105.89664459]
[250.65122986 108.76439667]
[238.66282654 98.10337067]
[223.67013550 97.63532257]
[214.60433960 105.70493317]
[202.06938171 105.39808655]
[192.83531189 96.33245850]
[177.85559082 95.55261230]
[162.87586975 94.77277374]
[149.76354980 101.83792114]
[136.38430786 93.39361572]
[121.40459442 92.61376953]
[120.65735626 103.04120636]
[115.50727844 111.17941284]
[107.82394409 115.48992920]
[108.13600159 130.48667908]
[108.44805145 145.48344421]
[108.76010895 160.48019409]
[109.07216644 175.47694397]
[109.38422394 190.47369385]
[109.69628143 205.47045898]
[110.00833893 220.46720886]
[110.32038879 235.46395874]
[110.63244629 250.46070862]
[110.94450378 265.45745850]
[111.25656128 280.45422363]
[125.83920288 284.39416504]
[138.72041321 292.28411865]
[148.85595703 303.48443604]
[155.42420959 317.08718872]
[157.89270020 331.98965454]
[156.06132507 346.98373413]
[150.07855225 360.85397339]
[140.42935181 372.47592163]
[127.89597321 380.90747070]
[113.49442291 385.46508789]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[23 102]
[24 101]
[25 100]
[26 99]
[35 98]
[36 97]
[37 96]
[38 95]
[103 126]
[104 125]
[106 123]
[107 122]
[108 121]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
