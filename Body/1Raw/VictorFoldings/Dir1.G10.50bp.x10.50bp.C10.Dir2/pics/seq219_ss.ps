%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCACUUUCCGGGGGGGGGGACACAGACAUCAUAACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUxxxxxxxxxxCCCCCUUCCAAACAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUCCCCCCCCCCGUCACUUUCC\
) } def
/len { sequence length } bind def

/coor [
[-48.80540466 240.67091370]
[-60.02469635 227.76325989]
[-70.12778473 213.96443176]
[-79.04419708 199.37066650]
[-86.71173859 184.08377075]
[-93.07691956 168.21038818]
[-98.09535217 151.86120605]
[-101.73202515 135.15029907]
[-103.96157837 118.19419861]
[-104.76845551 101.11119080]
[-119.76114655 100.64315033]
[-134.75384521 100.17510223]
[-149.74653625 99.70706177]
[-164.73924255 99.23902130]
[-179.73193359 98.77098083]
[-194.72868347 98.45892334]
[-209.72787476 98.30288696]
[-224.72706604 98.14685059]
[-239.72625732 97.99081421]
[-254.72543335 97.83477783]
[-257.41778564 112.62866974]
[-262.57177734 126.75469208]
[-270.03906250 139.80642700]
[-279.60482788 151.40832520]
[-290.99383545 161.22659302]
[-303.87841797 168.97874451]
[-317.88781738 174.44171143]
[-332.61901855 177.45834351]
[-347.64813232 177.94181824]
[-362.54275513 175.87825012]
[-376.87432861 171.32699585]
[-390.23052979 164.41900635]
[-402.22702026 155.35304260]
[-412.51870728 144.38993835]
[-420.80941772 131.84513855]
[-426.86065674 118.07958221]
[-430.49829102 103.48932648]
[-431.61767578 88.49416351]
[-430.18658447 73.52552795]
[-426.24618530 59.01410294]
[-419.90991211 45.37741470]
[-411.35998535 33.00780869]
[-400.84246826 22.26119041]
[-388.65994263 13.44676018]
[-375.16293335 6.81812477]
[-360.73977661 2.56600428]
[-345.80545044 0.81274098]
[-330.78967285 1.60877955]
[-316.12442017 4.93121624]
[-302.23165894 10.68445778]
[-289.51116943 18.70297241]
[-278.32885742 28.75605202]
[-269.00653076 40.55444717]
[-261.81237793 53.75869751]
[-256.95339966 67.98889160]
[-254.56939697 82.83558655]
[-239.57022095 82.99162292]
[-224.57102966 83.14765930]
[-209.57183838 83.30369568]
[-194.57264709 83.45973206]
[-187.80772400 80.36435699]
[-179.26388550 83.77828217]
[-164.27119446 84.24632263]
[-149.27850342 84.71437073]
[-134.28579712 85.18241119]
[-119.29310608 85.65045166]
[-104.30040741 86.11849213]
[-102.94876099 72.73915100]
[-100.72187042 59.47737503]
[-97.62934875 46.39035416]
[-93.68452454 33.53453445]
[-88.90441895 20.96535110]
[-83.30963135 8.73701668]
[-76.92430878 -3.09773707]
[-69.77597809 -14.48786926]
[-61.89546204 -25.38426018]
[-53.31676102 -35.73991776]
[-44.07686234 -45.51017761]
[-34.21561432 -54.65291214]
[-23.77554512 -63.12868500]
[-12.80168056 -70.90094757]
[-1.34134626 -77.93618011]
[10.55603409 -84.20404816]
[22.83915138 -89.67750549]
[35.45503616 -94.33296204]
[48.34927750 -98.15033722]
[61.46626663 -101.11316681]
[74.74943542 -103.20867157]
[88.14150238 -104.42781067]
[101.58470917 -104.76533508]
[115.02108765 -104.21978760]
[128.39268494 -102.79351807]
[141.64183044 -100.49267578]
[154.71139526 -97.32718658]
[167.54499817 -93.31069946]
[180.08732605 -88.46054077]
[192.28425598 -82.79762268]
[204.08319092 -76.34636688]
[215.43327332 -69.13460541]
[226.28552246 -61.19342041]
[236.59315491 -52.55707932]
[246.31172180 -43.26281357]
[255.39929199 -33.35071182]
[263.81668091 -22.86351967]
[271.52761841 -11.84646416]
[278.49880981 -0.34705856]
[284.70019531 11.58510494]
[290.10504150 23.89856911]
[294.69003296 36.54022980]
[298.43542480 49.45556641]
[301.32501221 62.58888245]
[303.34637451 75.88353729]
[304.49078369 89.28219604]
[304.75329590 102.72708130]
[304.13281250 116.16020203]
[302.63195801 129.52363586]
[300.25723267 142.75973511]
[297.01889038 155.81143188]
[292.93084717 168.62243652]
[288.01080322 181.13749695]
[282.27990723 193.30264282]
[295.37307739 200.62174988]
[308.46621704 207.94085693]
[324.84738159 207.17250061]
[333.47442627 221.11904907]
[325.47262573 235.43348694]
[309.07351685 235.39035034]
[301.14712524 221.03401184]
[288.05395508 213.71490479]
[274.96081543 206.39579773]
[265.47244263 220.62432861]
[254.82984924 234.01145935]
[243.10728455 246.46383667]
[230.38652039 257.89462280]
[216.75628662 268.22402954]
[202.31166077 277.38003540]
[187.15338135 285.29879761]
[171.38717651 291.92504883]
[155.12304688 297.21258545]
[138.47441101 301.12451172]
[121.55741882 303.63357544]
[104.49005127 304.72222900]
[87.39136505 304.38290405]
[70.38063049 302.61798096]
[53.57649231 299.43975830]
[37.09617233 294.87036133]
[21.05461884 288.94174194]
[5.56372595 281.69519043]
[-9.26845360 273.18127441]
[-23.33846283 263.45941162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 67]
[11 66]
[12 65]
[13 64]
[14 63]
[15 62]
[16 60]
[17 59]
[18 58]
[19 57]
[20 56]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
