%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCAAAACGGGGGGGGGGAAAUGAUAACCAUACACAACACUAAAGGACGAACCUGAUCUCUUAUACUAxxxxxxxxxxGUACGGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCCCCCCCCCCCACAUCAAAAC\
) } def
/len { sequence length } bind def

/coor [
[84.66989899 479.36834717]
[72.11167908 471.01718140]
[62.02545166 459.80474854]
[55.04525757 446.43582153]
[51.60987473 431.75085449]
[51.93525314 416.67288208]
[56.00093842 402.14974976]
[63.55135727 389.09442139]
[74.11188507 378.32751465]
[87.01867676 370.52587891]
[101.46041107 366.17993164]
[100.83643341 351.19293213]
[100.21245575 336.20590210]
[99.58847809 321.21890259]
[98.96450043 306.23187256]
[98.34052277 291.24487305]
[97.71654510 276.25784302]
[97.09256744 261.27081299]
[96.46858978 246.28381348]
[95.84461212 231.29679871]
[95.22063446 216.30978394]
[86.51284027 207.85510254]
[85.90690613 195.33105469]
[94.27668762 185.46188354]
[93.96463013 170.46511841]
[80.88304901 168.09039307]
[68.47707367 163.30928040]
[57.18515778 156.29075623]
[47.40635681 147.28285217]
[39.48626709 136.60392761]
[33.70479584 124.63138580]
[30.26626205 111.78834534]
[29.29218864 98.52869415]
[30.81700134 85.32103729]
[34.78680801 72.63215637]
[41.06131744 60.91047668]
[49.41877747 50.57026291]
[59.56382751 41.97694397]
[71.13793182 35.43421555]
[83.73205566 31.17331123]
[96.90110016 29.34480858]
[97.83673096 14.37401676]
[98.77235413 -0.59677434]
[99.70798492 -15.56756592]
[92.84654236 -29.82348251]
[101.36264038 -42.04335403]
[102.29827118 -57.01414490]
[103.23389435 -71.98493958]
[88.43305206 -74.50825500]
[73.98427582 -78.59053040]
[60.05128860 -84.18551636]
[46.79195404 -91.22981262]
[34.35651398 -99.64360809]
[22.88586998 -109.33156586]
[12.50999546 -120.18390656]
[3.34645700 -132.07766724]
[-4.50091648 -144.87809753]
[-10.94320869 -158.44013977]
[-15.90742207 -172.61012268]
[-19.33730888 -187.22750854]
[-21.19400597 -202.12666321]
[-21.45647621 -217.13876343]
[-20.12174416 -232.09371948]
[-17.20493507 -246.82206726]
[-12.73909664 -261.15695190]
[-6.77483225 -274.93588257]
[0.62027979 -288.00280762]
[9.36244678 -300.20965576]
[19.35261345 -311.41806030]
[30.47758293 -321.50106812]
[42.61130142 -330.34442139]
[55.61628342 -337.84793091]
[69.34517670 -343.92654419]
[83.64241028 -348.51141357]
[98.34600067 -351.55059814]
[113.28934479 -353.00961304]
[128.30310059 -352.87197876]
[143.21717834 -351.13922119]
[157.86257935 -347.83099365]
[172.07336426 -342.98477173]
[185.68849182 -336.65545654]
[198.55372620 -328.91479492]
[210.52326965 -319.85046387]
[221.46150208 -309.56515503]
[231.24449158 -298.17547607]
[239.76139832 -285.81042480]
[246.91569519 -272.61010742]
[252.62632751 -258.72412109]
[256.82861328 -244.30978394]
[259.47488403 -229.53042603]
[260.53521729 -214.55352783]
[259.99755859 -199.54875183]
[257.86801147 -184.68614197]
[254.17070007 -170.13410950]
[248.94752502 -156.05751038]
[242.25767517 -142.61585999]
[234.17692566 -129.96145630]
[224.79687500 -118.23770142]
[214.22377014 -107.57741547]
[202.57743835 -98.10139465]
[189.98982239 -89.91700745]
[176.60357666 -83.11698914]
[162.57034302 -77.77838898]
[148.04914856 -73.96170807]
[133.20452881 -71.71017456]
[118.20468903 -71.04930878]
[117.26905823 -56.07851791]
[116.33343506 -41.10772705]
[123.26180267 -27.92262268]
[114.67877960 -14.63193703]
[113.74314880 0.33885410]
[112.80751801 15.30964565]
[111.87189484 30.28043747]
[127.91948700 35.02106857]
[142.40414429 43.39922333]
[154.51501465 54.94589233]
[163.57412720 69.01469421]
[169.07437134 84.81805420]
[170.70780945 101.47130585]
[168.38302612 118.04219055]
[162.23016357 133.60307312]
[152.59364319 147.28285217]
[140.01292419 158.31573486]
[125.19229126 166.08409119]
[108.96138763 170.15306091]
[109.27344513 185.14982605]
[119.18048859 200.63627625]
[110.20764923 215.68580627]
[110.83162689 230.67282104]
[111.45560455 245.65983582]
[112.07958221 260.64685059]
[112.70355988 275.63385010]
[113.32753754 290.62088013]
[113.95151520 305.60791016]
[114.57549286 320.59490967]
[115.19947052 335.58193970]
[115.82344818 350.56893921]
[116.44742584 365.55596924]
[131.20042419 368.68640137]
[144.71105957 375.38815308]
[156.13005066 385.23995972]
[164.73956299 397.62246704]
[169.99839783 411.75738525]
[171.57600403 426.75610352]
[169.37319946 441.67584229]
[163.52845764 455.57870483]
[154.40917969 467.59075928]
[142.58860779 476.95693970]
[128.80979919 483.08840942]
[113.93889618 485.59982300]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[24 126]
[25 125]
[41 113]
[42 112]
[43 111]
[44 110]
[46 108]
[47 107]
[48 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
