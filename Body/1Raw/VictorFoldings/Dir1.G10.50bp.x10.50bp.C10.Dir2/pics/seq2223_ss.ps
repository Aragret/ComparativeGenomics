%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACAGAACCGGGGGGGGGGCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUxxxxxxxxxxAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCUCGUUCCCCCCCCCCCCACAGAAGC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 360.70831299]
[71.19830322 354.69229126]
[59.48964310 345.16287231]
[50.78712082 332.82717896]
[45.73651886 318.60067749]
[44.71262741 303.53900146]
[47.79142761 288.75982666]
[54.74444962 275.35989380]
[65.05573273 264.33355713]
[77.96011353 256.49905396]
[92.50000000 252.43774414]
[92.50000000 237.43774414]
[92.50000000 222.43774414]
[92.50000000 207.43774414]
[92.50000000 192.43774414]
[92.50000000 177.43774414]
[92.50000000 162.43774414]
[92.50000000 147.43774414]
[92.50000000 132.43774414]
[92.50000000 117.43774414]
[86.74909973 112.62348175]
[72.65975189 117.77036285]
[75.24729156 102.99495697]
[69.49639130 98.18069458]
[54.73033905 100.81955719]
[39.96428299 103.45841980]
[25.19822693 106.09729004]
[10.43217087 108.73615265]
[5.28803158 123.20796204]
[-6.41323233 133.15663147]
[-21.52403831 135.90602112]
[-35.97965622 130.71653748]
[-45.89159775 118.98414612]
[-48.59360123 103.86479950]
[-43.35883713 89.42551422]
[-31.59543610 79.55039978]
[-16.46769142 76.89579773]
[-2.04488969 82.17579651]
[7.79330683 93.97009277]
[22.55936241 91.33123016]
[37.32541656 88.69236755]
[52.09147263 86.05350494]
[66.85752869 83.41463470]
[68.72514343 68.53135681]
[55.06890106 62.32595062]
[41.41265869 56.12054443]
[24.49112511 55.07267761]
[20.81369400 38.52236557]
[35.69919968 30.40706635]
[47.61806488 42.46430206]
[61.27430725 48.66970825]
[74.93054962 54.87511826]
[90.19386292 64.75422668]
[99.23266602 78.46573639]
[101.29439545 93.61857605]
[111.04204559 82.21755219]
[114.12911987 66.70044708]
[128.28073120 62.05488968]
[138.02838135 50.65386963]
[147.77603149 39.25284958]
[157.52369690 27.85182762]
[152.54022217 15.75868225]
[154.63511658 2.01326632]
[164.04023743 -9.32212734]
[178.71740723 -14.47262287]
[180.89424133 -29.31382942]
[183.07107544 -44.15503311]
[185.24792480 -58.99623871]
[171.45133972 -65.12462616]
[159.82054138 -74.74890900]
[151.21858215 -87.15491486]
[146.28379822 -101.42201996]
[145.38237000 -116.49153137]
[148.58122253 -131.24517822]
[155.64294434 -144.58813477]
[166.04351807 -155.53027344]
[179.01116943 -163.25962830]
[193.58358765 -167.20260620]
[208.67941284 -167.06663513]
[223.17843628 -162.86177063]
[236.00474548 -154.90008545]
[246.20651245 -143.77235413]
[253.02673340 -130.30435181]
[255.95927429 -115.49547577]
[254.78654480 -100.44464874]
[249.59555054 -86.26875305]
[240.77149963 -74.01971436]
[228.96920776 -64.60651398]
[215.06448364 -58.72765732]
[200.08912659 -56.81940079]
[197.91229248 -41.97819901]
[195.73545837 -27.13699150]
[193.55860901 -12.29578590]
[204.54428101 -2.08230615]
[219.18777466 -5.33313179]
[233.83128357 -8.58395767]
[248.47477722 -11.83478355]
[263.11828613 -15.08560944]
[277.76177979 -18.33643532]
[279.43667603 -33.38547134]
[285.90945435 -47.07421112]
[296.47805786 -57.91780090]
[309.99606323 -64.74001312]
[324.99710083 -66.80081940]
[339.85403442 -63.87668610]
[352.95526123 -56.28479385]
[362.87963867 -44.84865952]
[368.55068970 -30.80878639]
[369.35321045 -15.68811703]
[365.20019531 -1.12682688]
[356.54211426 11.29558277]
[344.31811523 20.23162270]
[329.85421753 24.71197891]
[314.71926880 24.25065422]
[300.55508423 18.89768982]
[288.89804077 9.23373604]
[281.01260376 -3.69293356]
[266.36911011 -0.44210792]
[251.72561646 2.80871773]
[237.08210754 6.05954361]
[222.43861389 9.31036949]
[207.79510498 12.56119537]
[194.01557922 37.12693405]
[168.92471313 37.59947968]
[159.17706299 49.00049973]
[149.42941284 60.40151978]
[139.68174744 71.80254364]
[137.29190063 86.50417328]
[122.44306946 91.96520233]
[112.69541931 103.36622620]
[107.50000000 117.43774414]
[107.50000000 132.43774414]
[107.50000000 147.43774414]
[107.50000000 162.43774414]
[107.50000000 177.43774414]
[107.50000000 192.43774414]
[107.50000000 207.43774414]
[107.50000000 222.43774414]
[107.50000000 237.43774414]
[107.50000000 252.43774414]
[122.03988647 256.49905396]
[134.94427490 264.33355713]
[145.25555420 275.35989380]
[152.20857239 288.75982666]
[155.28736877 303.53900146]
[154.26348877 318.60067749]
[149.21287537 332.82717896]
[140.51036072 345.16287231]
[128.80169678 354.69229126]
[114.95575714 360.70831299]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[44 52]
[45 51]
[46 50]
[55 130]
[56 129]
[58 127]
[59 126]
[60 125]
[61 124]
[65 93]
[66 92]
[67 91]
[68 90]
[94 122]
[95 121]
[96 120]
[97 119]
[98 118]
[99 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
