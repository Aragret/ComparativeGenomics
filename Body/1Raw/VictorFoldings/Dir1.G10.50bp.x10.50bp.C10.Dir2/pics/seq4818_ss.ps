%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGCAAGCAGGGGGGGGGGACCGCAUCCAUAAUCCUUCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCxxxxxxxxxxCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCCCCCCCCCCCACUCAAGCA\
) } def
/len { sequence length } bind def

/coor [
[81.22505188 345.82009888]
[68.66683197 337.46896362]
[58.58060455 326.25650024]
[51.60041046 312.88760376]
[48.16502762 298.20260620]
[48.49040604 283.12463379]
[52.55608749 268.60153198]
[60.10651016 255.54618835]
[70.66703796 244.77928162]
[83.57382965 236.97766113]
[98.01556396 232.63169861]
[97.39158630 217.64468384]
[96.76760864 202.65766907]
[96.14363098 187.67065430]
[95.51965332 172.68363953]
[94.89567566 157.69662476]
[94.27169800 142.70960999]
[93.64772034 127.72258759]
[93.02374268 112.73557281]
[90.69263458 97.91781616]
[86.68489838 83.46312714]
[82.67715454 69.00843811]
[68.63840485 69.48751831]
[54.85759354 66.80717468]
[42.03624344 61.10743713]
[30.82622719 52.68196869]
[21.79661751 41.96289825]
[15.40481281 29.49869347]
[11.97335911 15.92606640]
[11.67367935 1.93746889]
[14.51751328 -11.75424385]
[20.35649681 -24.45213699]
[28.88989830 -35.51067352]
[39.68010712 -44.36853027]
[52.17507553 -50.57709122]
[48.77209854 -65.18598938]
[45.36911774 -79.79487610]
[41.96614075 -94.40377045]
[38.56316376 -109.01266479]
[35.16018677 -123.62155914]
[31.75720787 -138.23045349]
[19.54604912 -144.00498962]
[13.00397873 -155.59934998]
[14.33511639 -168.64933777]
[22.82724762 -178.38999939]
[19.72892761 -193.06652832]
[16.63060570 -207.74305725]
[1.65357959 -206.58386230]
[-13.34661674 -207.38954163]
[-28.11331177 -210.14630127]
[-42.39382553 -214.80697632]
[-55.94380569 -221.29182434]
[-68.53138733 -229.48985291]
[-79.94118500 -239.26080322]
[-89.97795868 -250.43748474]
[-98.46996307 -262.82864380]
[-105.27190399 -276.22225952]
[-110.26737213 -290.38912964]
[-113.37090302 -305.08685303]
[-114.52938080 -320.06393433]
[-113.72299194 -335.06408691]
[-110.96552277 -349.83065796]
[-106.30416870 -364.11096191]
[-99.81868744 -377.66061401]
[-91.62004852 -390.24780273]
[-81.84854889 -401.65713501]
[-70.67139435 -411.69338989]
[-58.27983093 -420.18481445]
[-44.88590240 -426.98611450]
[-30.71879005 -431.98089600]
[-16.02091789 -435.08374023]
[-1.04378188 -436.24148560]
[13.95633793 -435.43438721]
[28.72277069 -432.67620850]
[43.00284195 -428.01419067]
[56.55220032 -421.52804565]
[69.13899994 -413.32882690]
[80.54786682 -403.55679321]
[90.58358002 -392.37915039]
[99.07440948 -379.98718262]
[105.87506866 -366.59292603]
[110.86919403 -352.42556763]
[113.97132111 -337.72753906]
[115.12837219 -322.75036621]
[114.32055664 -307.75027466]
[111.56168365 -292.98397827]
[106.89897156 -278.70413208]
[100.41219330 -265.15509033]
[92.21236420 -252.56866455]
[82.43978119 -241.16026306]
[71.26166534 -231.12509155]
[58.86929321 -222.63484192]
[45.47471619 -215.83482361]
[31.30713081 -210.84138489]
[34.40545273 -196.16485596]
[37.50377274 -181.48832703]
[51.95968628 -172.95108032]
[55.87584305 -156.27931213]
[46.36610031 -141.63342285]
[49.76907730 -127.02453613]
[53.17205429 -112.41564178]
[56.57503510 -97.80674744]
[59.97801208 -83.19785309]
[63.38098907 -68.58896637]
[66.78396606 -53.98007202]
[82.79325104 -53.65743637]
[98.19277954 -49.23045349]
[111.94762421 -40.99092484]
[123.13196564 -29.48706055]
[130.99133301 -15.48700237]
[134.99353027 0.07245174]
[134.86468506 16.14854813]
[130.60794067 31.66245079]
[122.50367737 45.57164001]
[111.09098816 56.93997955]
[97.13184357 65.00069427]
[101.13958740 79.45538330]
[105.14732361 93.91007233]
[111.65504456 90.47359467]
[119.40796661 89.36222076]
[127.75082397 90.87909698]
[140.99340820 97.92422485]
[156.69487000 94.63124084]
[168.96681213 104.96463013]
[168.39526367 120.99749756]
[155.41865540 130.43080139]
[139.99153137 126.02812195]
[133.94827271 111.16681671]
[120.70568848 104.12168121]
[108.01075745 112.11159515]
[108.63473511 127.09860992]
[109.25871277 142.08563232]
[109.88269043 157.07264709]
[110.50666809 172.05966187]
[111.13064575 187.04667664]
[111.75462341 202.03369141]
[112.37860107 217.02070618]
[113.00257874 232.00772095]
[127.75558472 235.13816833]
[141.26622009 241.83992004]
[152.68519592 251.69171143]
[161.29470825 264.07424927]
[166.55355835 278.20913696]
[168.13116455 293.20788574]
[165.92835999 308.12759399]
[160.08361816 322.03048706]
[150.96432495 334.04254150]
[139.14375305 343.40869141]
[125.36495209 349.54019165]
[110.49404907 352.05157471]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 118]
[21 117]
[22 116]
[35 105]
[36 104]
[37 103]
[38 102]
[39 101]
[40 100]
[41 99]
[45 96]
[46 95]
[47 94]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
