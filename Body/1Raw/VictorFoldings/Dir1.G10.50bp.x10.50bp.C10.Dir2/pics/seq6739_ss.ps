%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAUACUACUGGGGGGGGGGAACAGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGxxxxxxxxxxAACUGACACUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAACCCCCCCCCCACUAGACUACU\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 381.40856934]
[71.01555634 375.85556030]
[58.81560135 366.98922729]
[49.20452881 355.36691284]
[42.78650284 341.71920776]
[39.96496582 326.90402222]
[40.91728210 311.85266113]
[45.58358765 297.51123047]
[53.67055511 284.78128052]
[64.66983032 274.46301270]
[77.88998413 267.20501709]
[92.50000000 263.46359253]
[92.50000000 248.46359253]
[92.50000000 233.46359253]
[92.50000000 218.46359253]
[92.50000000 203.46359253]
[92.50000000 188.46359253]
[92.50000000 173.46359253]
[92.50000000 158.46359253]
[92.50000000 143.46359253]
[92.50000000 128.46359253]
[78.10559082 119.67386627]
[70.89939117 104.42496490]
[73.24726868 87.72329712]
[61.65822220 78.19995880]
[50.06917191 68.67662811]
[38.79113388 78.05287933]
[25.97917747 85.18316650]
[12.07475376 89.82353210]
[-2.44336414 91.81581879]
[-17.07556725 91.09299469]
[-31.31860924 87.68144989]
[-44.68290329 81.70002747]
[-56.70936966 73.35586548]
[-66.98517609 62.93724442]
[-75.15795135 50.80361938]
[-80.94781494 37.37321854]
[-84.15702057 23.10863686]
[-84.67665863 8.50088024]
[-82.49037933 -5.94750977]
[-77.67489624 -19.73976135]
[-70.39729309 -32.40194321]
[-81.78836823 -42.16121674]
[-97.30231476 -45.26411819]
[-101.93343353 -59.42045975]
[-113.32450867 -69.17973328]
[-124.71558380 -78.93901062]
[-136.10665894 -88.69828033]
[-147.49772644 -98.45755768]
[-163.04048157 -97.42759705]
[-174.45362854 -107.48715973]
[-175.33975220 -122.31113434]
[-186.73081970 -132.07040405]
[-202.94139099 -134.55023193]
[-208.64617920 -149.92512512]
[-197.97659302 -162.37872314]
[-181.90858459 -159.09982300]
[-176.97154236 -143.46148682]
[-165.58047485 -133.70220947]
[-150.79600525 -135.10044861]
[-139.10481262 -125.36542511]
[-137.73846436 -109.84863281]
[-126.34738159 -100.08935547]
[-114.95631409 -90.33007812]
[-103.56523895 -80.57080841]
[-92.17416382 -70.81153107]
[-77.47498322 -68.40667725]
[-72.02909088 -53.55229187]
[-60.63801575 -43.79301834]
[-48.60599136 -53.34200668]
[-34.94493484 -60.37555313]
[-20.17385292 -64.62442017]
[-4.85431576 -65.92520142]
[10.43089104 -64.22660828]
[25.09993935 -59.59148407]
[38.59410095 -52.19448471]
[50.39903259 -42.31550598]
[60.06438446 -30.32908249]
[67.22096252 -16.69018555]
[71.59486389 -1.91696858]
[73.01791382 13.42893314]
[71.43418121 28.76374435]
[66.90213776 43.50376511]
[59.59251022 57.08757782]
[71.18155670 66.61091614]
[82.77060699 76.13425446]
[92.07756805 71.65108490]
[102.36034393 70.65967560]
[112.35239410 73.28213501]
[120.82299042 79.19545746]
[126.72880554 87.67129517]
[141.50091553 85.06656647]
[156.27304077 82.46184540]
[142.29824829 77.01156616]
[130.49980164 67.74891663]
[121.88819122 55.46722031]
[117.20097351 41.21836472]
[116.83959198 26.22271729]
[120.83499146 11.76461411]
[128.84500122 -0.91765189]
[140.18356323 -10.73788452]
[153.87957764 -16.85500908]
[168.76000977 -18.74511337]
[183.55041504 -16.24631500]
[196.98402405 -9.57262993]
[207.91029358 0.70436221]
[215.39343262 13.70446777]
[218.79251099 28.31426811]
[217.81642151 43.28247452]
[212.54876709 57.32711029]
[203.44068909 69.24529266]
[191.27229309 78.01626587]
[177.08358765 82.88921356]
[191.73631287 86.09821320]
[206.38903809 89.30720520]
[221.04176331 92.51620483]
[233.31207275 82.82221222]
[248.94125366 83.33506775]
[260.54965210 93.81259918]
[262.65618896 109.30765533]
[254.26615906 122.50392914]
[239.34112549 127.17055511]
[224.92822266 121.10408783]
[217.83276367 107.16893005]
[203.18003845 103.95993042]
[188.52731323 100.75093842]
[173.87458801 97.54193878]
[158.87776184 97.23396301]
[144.10563660 99.83868408]
[129.33352661 102.44340515]
[122.54860687 118.92052460]
[107.50000000 128.46359253]
[107.50000000 143.46359253]
[107.50000000 158.46359253]
[107.50000000 173.46359253]
[107.50000000 188.46359253]
[107.50000000 203.46359253]
[107.50000000 218.46359253]
[107.50000000 233.46359253]
[107.50000000 248.46359253]
[107.50000000 263.46359253]
[122.11001587 267.20501709]
[135.33016968 274.46301270]
[146.32945251 284.78128052]
[154.41641235 297.51123047]
[159.08271790 311.85266113]
[160.03503418 326.90402222]
[157.21350098 341.71920776]
[150.79547119 355.36691284]
[141.18440247 366.98922729]
[128.98443604 375.85556030]
[114.96250153 381.40856934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 86]
[25 85]
[26 84]
[42 69]
[43 68]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[52 59]
[53 58]
[91 130]
[92 129]
[93 128]
[113 127]
[114 126]
[115 125]
[116 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
