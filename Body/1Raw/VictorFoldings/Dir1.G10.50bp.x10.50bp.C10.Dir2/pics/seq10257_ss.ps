%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCCCUCGGGGGGGGGGGUAGUAACAGCCAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCxxxxxxxxxxCACUCACCAAGACCUCAACCCCUGACCCCCAUGCCUCAGGAUACUCCUCACCCCCCCCCCAUAGCCAUCG\
) } def
/len { sequence length } bind def

/coor [
[91.99722290 449.44473267]
[78.15128326 443.42871094]
[66.44262695 433.89929199]
[57.74010086 421.56359863]
[52.68949890 407.33709717]
[51.66560745 392.27542114]
[54.74440384 377.49624634]
[61.69742584 364.09631348]
[72.00871277 353.06997681]
[84.91309357 345.23547363]
[99.45298004 341.17416382]
[99.45298004 326.17416382]
[99.45298004 311.17416382]
[99.45298004 296.17416382]
[99.45298004 281.17416382]
[99.45298004 266.17416382]
[99.45298004 251.17416382]
[99.45298004 236.17416382]
[99.45298004 221.17416382]
[99.45298004 206.17416382]
[99.45298004 191.17416382]
[98.82900238 176.18714905]
[97.58213043 161.23905945]
[96.33525085 146.29096985]
[95.08837891 131.34289551]
[81.91353607 126.06492615]
[72.35837555 115.57052612]
[68.33520508 101.95996094]
[53.56914902 99.32109833]
[38.80309296 96.68223572]
[32.36545181 98.59646606]
[26.78666878 97.14440918]
[23.48316956 93.61419678]
[8.83966827 90.36337280]
[-5.80383253 87.11254120]
[-14.19916916 99.75701904]
[-26.59755516 108.51170349]
[-41.32221222 112.19259644]
[-56.38174820 110.30187988]
[-69.73948669 103.09526825]
[-79.58890533 91.54739380]
[-84.59794617 77.22000885]
[-84.08917999 62.05077744]
[-78.13141632 48.09121323]
[-67.53038788 37.22922897]
[-53.71979904 30.93382454]
[-38.56742477 30.05639648]
[-24.12248802 34.71561432]
[-12.33855629 44.28135300]
[-4.80930567 57.45992661]
[-2.55300689 72.46903992]
[12.09049416 75.71987152]
[26.73399544 78.97069550]
[41.44195557 81.91617584]
[56.20801163 84.55503845]
[70.97406769 87.19390869]
[74.10597992 80.08377838]
[78.99704742 73.76144409]
[85.44320679 68.66486359]
[93.13110352 65.17776489]
[101.65277100 63.60230637]
[110.52718353 64.13594818]
[113.93016052 49.52705383]
[100.07136536 43.69252777]
[87.39804077 35.59963226]
[76.27483368 25.48122215]
[67.02178192 13.62841797]
[59.90510178 0.38225198]
[55.12956619 -13.87615871]
[52.83257294 -28.73657036]
[53.08021164 -43.77141953]
[55.86535645 -58.54812241]
[61.10787201 -72.64152527]
[68.65692139 -85.64613342]
[78.29531097 -97.18777466]
[89.74571228 -106.93437958]
[102.67868042 -114.60551453]
[116.72211456 -119.98046875]
[131.47193909 -122.90458679]
[146.50379944 -123.29373932]
[161.38517761 -121.13673401]
[175.68789673 -116.49562836]
[189.00047302 -109.50395966]
[200.93984985 -100.36288452]
[211.16252136 -89.33541870]
[219.37435913 -76.73883820]
[225.33908081 -62.93557739]
[228.88508606 -48.32277679]
[229.91033936 -33.32088089]
[228.38533020 -18.36152458]
[224.35397339 -3.87511492]
[217.93222046 9.72154331]
[209.30485535 22.03724861]
[198.72009277 32.71765137]
[186.48249817 41.45545578]
[172.94416809 47.99925995]
[158.49459839 52.16078186]
[143.54956055 53.82028961]
[128.53906250 52.93003082]
[125.13607788 67.53892517]
[135.11880493 78.73468781]
[150.02070618 77.02200317]
[164.92260742 75.30931091]
[179.82450867 73.59661865]
[194.72640991 71.88393402]
[200.76321411 57.76116562]
[213.06225586 48.56173706]
[228.31512451 46.76025009]
[242.41889954 52.84129333]
[251.57972717 65.16909790]
[253.33340454 80.42754364]
[247.20817566 94.51219177]
[234.85171509 103.63433838]
[219.58784485 105.34016418]
[205.52247620 99.17082214]
[196.43910217 86.78583527]
[181.53720093 88.49852753]
[166.63529968 90.21121216]
[151.73339844 91.92390442]
[136.83149719 93.63659668]
[129.65417480 117.73189545]
[110.03646851 130.09600830]
[111.28334045 145.04409790]
[112.53021240 159.99218750]
[113.77709198 174.94027710]
[116.47708893 178.52795410]
[117.72712708 182.40203857]
[117.62001801 186.05859375]
[116.40664673 189.07881165]
[114.45298004 191.17416382]
[114.45298004 206.17416382]
[114.45298004 221.17416382]
[114.45298004 236.17416382]
[114.45298004 251.17416382]
[114.45298004 266.17416382]
[114.45298004 281.17416382]
[114.45298004 296.17416382]
[114.45298004 311.17416382]
[114.45298004 326.17416382]
[114.45298004 341.17416382]
[128.99285889 345.23547363]
[141.89724731 353.06997681]
[152.20852661 364.09631348]
[159.16156006 377.49624634]
[162.24035645 392.27542114]
[161.21646118 407.33709717]
[156.16586304 421.56359863]
[147.46333313 433.89929199]
[135.75466919 443.42871094]
[121.90873718 449.44473267]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 125]
[23 124]
[24 123]
[25 122]
[28 56]
[29 55]
[30 54]
[33 53]
[34 52]
[35 51]
[62 100]
[63 99]
[101 120]
[102 119]
[103 118]
[104 117]
[105 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
