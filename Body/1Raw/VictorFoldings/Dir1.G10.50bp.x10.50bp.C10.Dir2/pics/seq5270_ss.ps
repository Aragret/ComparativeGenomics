%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUACCCACAUAGGGGGGGGGGGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAUAACCAUUCUUAAxxxxxxxxxxCCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUCCCCCCCCCCAAUUACCCCCAUA\
) } def
/len { sequence length } bind def

/coor [
[85.37081909 465.34884644]
[70.46826172 463.22787476]
[56.29782104 458.15011597]
[43.43977356 450.32351685]
[32.42065048 440.06860352]
[23.69167519 427.80523682]
[17.61029243 414.03564453]
[14.42553329 399.32366943]
[14.26781178 384.27175903]
[17.14358521 369.49627686]
[22.93509293 355.60226440]
[31.40517616 343.15869141]
[42.20699310 332.67510986]
[54.89820862 324.58081055]
[68.95913696 319.20721436]
[83.81398010 316.77444458]
[84.41412354 301.78643799]
[85.01426697 286.79846191]
[85.61441040 271.81045532]
[86.21455383 256.82247925]
[86.81469727 241.83448792]
[87.41484070 226.84649658]
[88.01499176 211.85850525]
[88.61513519 196.87052917]
[89.21527863 181.88253784]
[89.81542206 166.89454651]
[90.41556549 151.90655518]
[91.01570892 136.91856384]
[80.81754303 132.79833984]
[72.22682953 125.92968750]
[65.96344757 116.88818359]
[62.55224991 106.43148804]
[62.27909851 95.43584442]
[65.16687775 84.82266235]
[70.97359467 75.48131561]
[79.21266937 68.19458008]
[73.64617920 54.26568222]
[68.07968140 40.33678818]
[55.77364349 30.39334869]
[58.23536301 15.70358467]
[52.66887283 1.77468741]
[47.10237885 -12.15420914]
[40.97798920 -19.00839424]
[41.56693268 -26.41791725]
[36.28025818 -40.45540237]
[24.17563629 -50.64307785]
[26.93078995 -65.28064728]
[21.64411163 -79.31813812]
[16.35743523 -93.35562134]
[1.66129279 -90.21221161]
[-13.33921337 -89.29434967]
[-28.30896759 -90.62255859]
[-42.91353989 -94.16715240]
[-56.82665634 -99.84895325]
[-69.73749542 -107.54102325]
[-81.35762024 -117.07151794]
[-91.42743683 -128.22752380]
[-99.72198486 -140.75981140]
[-106.05595398 -154.38839722]
[-110.28784180 -168.80882263]
[-112.32311249 -183.69892883]
[-112.11629486 -198.72607422]
[-109.67200470 -213.55453491]
[-105.04484558 -227.85302734]
[-98.33820343 -241.30213928]
[-89.70189667 -253.60140991]
[-79.32887268 -264.47604370]
[-67.45085907 -273.68313599]
[-54.33321381 -281.01696777]
[-40.26899719 -286.31372070]
[-25.57240868 -289.45504761]
[-10.57177162 -290.37075806]
[4.39779329 -289.04040527]
[19.00185966 -285.49374390]
[32.91416550 -279.80996704]
[45.82390976 -272.11605835]
[57.44268036 -262.58389282]
[67.51091003 -251.42646790]
[75.80366516 -238.89299011]
[82.13569641 -225.26350403]
[86.36553192 -210.84246826]
[88.39868164 -195.95207214]
[88.18972015 -180.92497253]
[85.74331665 -166.09686279]
[81.11412811 -151.79901123]
[74.40557098 -138.35086060]
[65.76750946 -126.05282593]
[55.39293671 -115.17965698]
[43.51361084 -105.97426605]
[30.39492226 -98.64229584]
[35.68159866 -84.60481262]
[40.96827698 -70.56732178]
[52.69475937 -61.38370514]
[50.31774521 -45.74208069]
[55.60441971 -31.70459366]
[61.03127670 -17.72070122]
[66.59777069 -3.79180455]
[72.16426086 10.13709259]
[84.07215118 19.08424187]
[82.00858307 34.77029419]
[87.57507324 48.69919205]
[93.14156342 62.62808990]
[119.21707153 67.22192383]
[135.96109009 87.73223877]
[150.83439636 85.78675079]
[165.70768738 83.84125519]
[154.75672913 73.59058380]
[154.07667542 58.60600281]
[164.05410767 47.40552521]
[179.01736450 46.35607147]
[190.46052551 56.05420685]
[191.87875366 70.98700714]
[182.46633911 82.66563416]
[197.46559143 82.51555634]
[212.46482849 82.36548615]
[226.30126953 73.56291199]
[240.71566772 81.38321686]
[240.87973022 97.78153992]
[226.62469482 105.88869476]
[212.61491394 97.36473846]
[197.61566162 97.51480865]
[182.61640930 97.66487885]
[167.65318298 98.71455383]
[152.77987671 100.66004944]
[137.90658569 102.60554504]
[136.38169861 110.95762634]
[133.04031372 118.76261139]
[128.04925537 125.63079071]
[121.65771484 131.21925354]
[114.18482208 135.24894714]
[106.00370026 137.51870728]
[105.40355682 152.50669861]
[104.80341339 167.49468994]
[104.20326233 182.48268127]
[103.60311890 197.47067261]
[103.00297546 212.45864868]
[102.40283203 227.44664001]
[101.80268860 242.43463135]
[101.20254517 257.42263794]
[100.60240173 272.41061401]
[100.00225830 287.39859009]
[99.40211487 302.38659668]
[98.80197144 317.37457275]
[113.41474152 320.98730469]
[127.00100708 327.46792603]
[139.00440979 336.55105591]
[148.93342590 347.86471558]
[156.38146973 360.94567871]
[161.04353333 375.25827026]
[162.72872925 390.21636963]
[161.36802673 405.20748901]
[157.01716614 419.61773682]
[149.85430908 432.85699463]
[140.17276001 444.38317871]
[128.36897278 453.72424316]
[114.92632294 460.49771118]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[26 133]
[27 132]
[28 131]
[36 102]
[37 101]
[38 100]
[40 98]
[41 97]
[42 96]
[44 95]
[45 94]
[47 92]
[48 91]
[49 90]
[104 125]
[105 124]
[106 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
