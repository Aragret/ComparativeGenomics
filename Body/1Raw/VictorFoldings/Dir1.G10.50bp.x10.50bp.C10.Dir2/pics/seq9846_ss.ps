%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACCCCCUAGGGGGGGGGGACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUxxxxxxxxxxAAUAUAGUUUAACCAAAACAUCAGAUUGUGAAUCUGACAACAGAGGCUUACCCCCCCCCCCGACCCCUUA\
) } def
/len { sequence length } bind def

/coor [
[39.66383362 224.37536621]
[40.31525803 209.38951111]
[44.65322495 195.03047180]
[52.40813446 182.19062805]
[63.09917450 171.66709900]
[69.15293884 157.94296265]
[75.20670319 144.21882629]
[81.26046753 130.49468994]
[87.31423187 116.77055359]
[75.42185211 125.91229248]
[63.52947235 135.05403137]
[51.63709259 144.19575500]
[39.74471283 153.33749390]
[27.85233116 162.47923279]
[15.95995235 171.62095642]
[4.06757259 180.76269531]
[-7.82480717 189.90443420]
[-19.71718788 199.04615784]
[-31.60956764 208.18789673]
[-35.10717773 223.84504700]
[-49.59168625 230.74276733]
[-63.95182037 223.58972168]
[-67.17171478 207.87310791]
[-56.78133774 195.64936829]
[-40.75130081 196.29551697]
[-28.85892105 187.15377808]
[-16.96654129 178.01205444]
[-5.07416201 168.87031555]
[6.81821775 159.72857666]
[18.71059799 150.58685303]
[30.60297775 141.44511414]
[42.49535751 132.30337524]
[54.38773727 123.16164398]
[66.28011322 114.01991272]
[78.17249298 104.87817383]
[65.86573029 113.45392609]
[51.93660355 119.01983643]
[37.10887909 121.28669739]
[22.15302658 120.13672638]
[7.84616184 115.62966156]
[-5.06831741 107.99970245]
[-15.91936207 97.64331055]
[-24.14314270 85.09861755]
[-29.31234360 71.01744843]
[-31.15836906 56.13147354]
[-29.58529663 41.21418762]
[-24.67486763 27.04070091]
[-16.68222809 14.34748554]
[-6.02268696 3.79408956]
[6.74987936 -4.07112217]
[20.97179604 -8.83946609]
[35.90407944 -10.26317501]
[50.77083206 -8.26827145]
[64.79956818 -2.95841312]
[77.26133728 5.39049578]
[87.50861359 16.34463882]
[95.00894928 29.33482742]
[99.37261200 43.68608093]
[100.37286377 58.65269089]
[97.95772552 73.45698547]
[92.25324249 87.32874298]
[98.60037231 73.73779297]
[104.94749451 60.14683914]
[111.29462433 46.55588913]
[117.64175415 32.96493912]
[123.98888397 19.37398720]
[130.33601379 5.78303576]
[136.68315125 -7.80791521]
[142.74615479 -21.52796936]
[148.52243042 -35.37118530]
[136.21694946 -26.79358482]
[121.74485779 -22.84916115]
[106.78880310 -23.99652863]
[93.08772278 -30.10228348]
[82.23461914 -40.45651627]
[75.49137878 -53.85535049]
[73.64202881 -68.74091339]
[76.90160370 -83.38246918]
[84.89109802 -96.07765961]
[96.68159485 -105.35042572]
[110.90221405 -110.12263489]
[125.89954376 -109.83941650]
[139.92984009 -104.53371429]
[151.36183167 -94.82240295]
[158.86633301 -81.83461761]
[161.57078552 -67.08042908]
[159.15980530 -52.27257156]
[169.14253235 -63.46833801]
[179.12525940 -74.66410065]
[189.10797119 -85.85987091]
[189.62979126 -101.89443207]
[202.57707214 -111.36794281]
[218.01777649 -107.01313782]
[224.10711670 -92.17064667]
[216.17385864 -78.22636414]
[200.30374146 -75.87714386]
[190.32101440 -64.68137360]
[180.33828735 -53.48561096]
[170.35556030 -42.28984451]
[162.36564636 -29.59491348]
[156.58937073 -15.75169659]
[157.57267761 -11.01792049]
[155.54666138 -5.62101460]
[150.27409363 -1.46078587]
[143.92697144 12.13016510]
[137.57983398 25.72111511]
[131.23271179 39.31206512]
[124.88558197 52.90301895]
[118.53845215 66.49396515]
[112.19132233 80.08492279]
[105.84419250 93.67587280]
[116.43595123 84.26274109]
[128.16159058 76.15676880]
[142.80509949 79.40759277]
[157.44859314 82.65842438]
[172.09210205 85.90924835]
[187.56259155 80.46903992]
[199.83132935 91.35069275]
[196.27726746 107.36008453]
[180.55654907 112.02813721]
[168.84127808 100.55274963]
[154.19776917 97.30192566]
[139.55427551 94.05109406]
[124.91076660 90.80027008]
[118.70536041 104.45651245]
[130.78535461 113.34886169]
[147.13468933 114.62605286]
[153.95816040 129.53820801]
[144.23635864 142.74497986]
[127.97024536 140.66036987]
[121.89299774 125.42884827]
[109.81301117 116.53649902]
[116.15097809 130.13172913]
[122.48894501 143.72695923]
[128.82691956 157.32217407]
[135.16488647 170.91740417]
[146.07162476 181.21513367]
[154.09226990 193.89065552]
[158.72836304 208.15623474]
[159.69177246 223.12527466]
[156.92262268 237.86744690]
[150.59300232 251.46656799]
[141.09629822 263.07745361]
[129.02273560 271.97851562]
[115.12264252 277.61654663]
[100.25990295 279.64117432]
[85.35822296 277.92654419]
[71.34371948 272.57922363]
[59.08737946 263.93157959]
[49.35091019 252.52099609]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 35]
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[61 111]
[62 110]
[63 109]
[64 108]
[65 107]
[66 106]
[67 105]
[68 104]
[69 101]
[70 100]
[87 99]
[88 98]
[89 97]
[90 96]
[113 124]
[114 123]
[115 122]
[116 121]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
