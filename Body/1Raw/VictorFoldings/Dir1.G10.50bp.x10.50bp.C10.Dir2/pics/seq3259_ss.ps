%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCCAUGGCCAACCGGGGGGGGGGUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUxxxxxxxxxxCGGACUCCUGCCUCACUCAUUUACACCAACCACCCAACUAUCUAUAAACCCCCCCCCCCCUAGCCAUGGCCAUCC\
) } def
/len { sequence length } bind def

/coor [
[177.43382263 359.26773071]
[162.54162598 357.47253418]
[148.44363403 352.34939575]
[135.87330627 344.16482544]
[125.48464203 333.34469604]
[117.81811523 320.45187378]
[113.27259827 306.15719604]
[112.08441162 291.20910645]
[105.57615662 304.72366333]
[107.34056854 321.02758789]
[93.94522858 330.48788452]
[79.17010498 323.37255859]
[78.21458435 307.00125122]
[92.06162262 298.21539307]
[98.56987762 284.70086670]
[101.62171936 270.01458740]
[101.03647614 255.02601624]
[100.45123291 240.03744507]
[99.86599731 225.04885864]
[99.28075409 210.06028748]
[98.69551086 195.07170105]
[98.11026764 180.08312988]
[97.52503204 165.09454346]
[96.93978882 150.10597229]
[96.35454559 135.11738586]
[95.76930237 120.12880707]
[95.25009155 135.11982727]
[87.03218079 147.66836548]
[73.49822998 154.13613892]
[58.57223892 152.64793396]
[46.58179855 143.63519287]
[41.00337601 129.71107483]
[43.45436478 114.91266632]
[53.22413254 103.53059387]
[67.48006439 98.86492157]
[82.08669281 102.26722717]
[67.76755524 97.79930878]
[53.44841385 93.33139038]
[39.12927628 88.86347198]
[24.81014061 84.39555359]
[10.49100304 79.92763519]
[0.46579245 91.39127350]
[-13.35810089 97.78031921]
[-28.58560371 97.98782349]
[-42.57845688 91.97783661]
[-52.91231918 80.79163361]
[-57.79678345 66.36727905]
[-56.38558578 51.20389175]
[-48.92322540 37.92861176]
[-36.70260239 28.84146309]
[-21.84101105 25.51685143]
[-6.91331625 28.53078270]
[5.49417210 37.36108017]
[13.23178101 50.47783661]
[14.95892239 65.60849762]
[29.27805901 70.07641602]
[43.59719849 74.54433441]
[57.91633606 79.01225281]
[72.23547363 83.48017120]
[86.55461121 87.94808960]
[95.90695953 76.22061920]
[88.36474609 63.25469971]
[80.82254028 50.28877640]
[73.28033447 37.32285690]
[65.73812866 24.35693550]
[52.54756927 13.70585537]
[59.13088989 -1.91772306]
[75.96633911 0.08328252]
[78.70404816 16.81472778]
[86.24625397 29.78064919]
[93.78845978 42.74657059]
[101.33067322 55.71249008]
[108.87287903 68.67841339]
[123.64215851 71.29914856]
[135.18492126 61.71975708]
[126.92429352 49.18080902]
[120.09321594 35.80921173]
[114.77461243 21.76728630]
[111.03305054 7.22548962]
[108.91394043 -7.63965607]
[108.44300842 -22.64770126]
[109.62597656 -37.61646271]
[112.44847870 -52.36423111]
[116.87625122 -66.71198273]
[122.85555267 -80.48554993]
[130.31379700 -93.51773071]
[139.16044617 -105.65033722]
[149.28810120 -116.73607635]
[160.57383728 -126.64038849]
[172.88064575 -135.24304199]
[186.05914307 -142.43960571]
[199.94934082 -148.14271545]
[214.38264465 -152.28314209]
[229.18382263 -154.81063843]
[244.17321777 -155.69450378]
[259.16885376 -154.92402649]
[273.98873901 -152.50854492]
[288.45294189 -148.47740173]
[302.38586426 -142.87950134]
[315.61840820 -135.78282166]
[327.98992920 -127.27349091]
[339.35025024 -117.45481873]
[349.56146240 -106.44599152]
[358.49963379 -94.38063812]
[366.05621338 -81.40523529]
[372.13952637 -67.67728424]
[376.67568970 -53.36343002]
[379.60964966 -38.63743210]
[380.90579224 -23.67804718]
[380.54837036 -8.66686916]
[378.54174805 6.21387863]
[374.91027832 20.78355789]
[369.69802856 34.86530685]
[362.96826172 48.28818512]
[354.80270386 60.88925171]
[345.30047607 72.51554108]
[334.57690430 83.02591705]
[322.76214600 92.29280090]
[309.99966431 100.20369720]
[296.44436646 106.66257477]
[282.26080322 111.59102631]
[267.62115479 114.92922974]
[252.70310974 116.63666534]
[237.68778992 116.69259644]
[222.75744629 115.09634399]
[208.09332275 111.86729431]
[193.87342834 107.04463959]
[180.27040100 100.68692780]
[167.44934082 92.87133026]
[155.56588745 83.69271851]
[144.76431274 73.26251984]
[133.22155762 82.84190369]
[110.75788116 119.54357147]
[111.34312439 134.53215027]
[111.92836761 149.52072144]
[112.51361084 164.50930786]
[113.09884644 179.49787903]
[113.68408966 194.48646545]
[114.26933289 209.47503662]
[114.85457611 224.46362305]
[115.43981171 239.45219421]
[116.02505493 254.44078064]
[116.61029816 269.42935181]
[123.65817261 256.18823242]
[133.52322388 244.88862610]
[145.69218445 236.11845398]
[159.53198242 230.33395386]
[174.32254028 227.83610535]
[189.29437256 228.75485229]
[203.66854858 233.04240417]
[216.69723511 240.47567749]
[227.70257568 250.66795349]
[236.11199951 263.08895874]
[241.48800659 277.09246826]
[243.55090332 291.94995117]
[242.19334412 306.88839722]
[237.48597717 321.13061523]
[229.67370605 333.93560791]
[219.16296387 344.63723755]
[206.50061035 352.67868042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 15]
[9 14]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[26 133]
[36 60]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[61 73]
[62 72]
[63 71]
[64 70]
[65 69]
[74 132]
[75 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
