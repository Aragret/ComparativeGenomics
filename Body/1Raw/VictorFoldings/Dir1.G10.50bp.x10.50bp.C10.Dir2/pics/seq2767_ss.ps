%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAUCACUUGGGGGGGGGGGUUCCUUAAAUAGGGACCUGUAUGAAUGGCUCCACGAGGGUUCAGCUGUCxxxxxxxxxxGCUACUUCCCCUAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCUCCCCCCCCCCCAUAAUCAUUU\
) } def
/len { sequence length } bind def

/coor [
[93.51802826 358.53234863]
[79.49608612 352.97933960]
[67.29612732 344.11300659]
[57.68505859 332.49069214]
[51.26703262 318.84298706]
[48.44549561 304.02780151]
[49.39781189 288.97644043]
[54.06411743 274.63500977]
[62.15108490 261.90505981]
[73.15036011 251.58677673]
[86.37052155 244.32881165]
[100.98052979 240.58737183]
[100.98052979 225.58737183]
[100.98052979 210.58737183]
[100.98052979 195.58737183]
[100.98052979 180.58737183]
[100.98052979 165.58737183]
[100.98052979 150.58737183]
[100.98052979 135.58737183]
[100.98052979 120.58737183]
[88.73757935 111.92076111]
[74.59026337 116.90608215]
[60.44294357 121.89140320]
[46.29562759 126.87673187]
[32.14831161 131.86204529]
[18.00099373 136.84736633]
[3.85367799 141.83268738]
[-4.34428644 155.62301636]
[-20.25635719 157.66888428]
[-31.67615318 146.40087891]
[-29.84338760 130.46286011]
[-16.16399956 122.08110809]
[-1.13164401 127.68537903]
[13.01567268 122.70005798]
[27.16298866 117.71473694]
[41.31030655 112.72941589]
[55.45762253 107.74408722]
[69.60494232 102.75876617]
[83.75225830 97.77344513]
[84.06016541 90.27976990]
[84.98390961 67.79873657]
[71.29328156 61.66956711]
[58.94530106 65.53364563]
[47.64754486 60.09930420]
[43.25077057 48.78866577]
[29.68887520 42.37968826]
[14.16131306 46.41384506]
[1.41296864 36.67427063]
[1.22327960 20.63233948]
[13.73775959 10.59404564]
[29.35637093 14.25990963]
[36.09785080 28.81779289]
[49.65974808 35.22676849]
[67.01656342 32.82149506]
[77.42245483 47.97893906]
[91.11308289 54.10811234]
[105.79797363 51.04971695]
[115.90341187 39.96458435]
[126.00885010 28.87945175]
[136.11428833 17.79431725]
[146.21971130 6.70918369]
[156.32514954 -4.37595034]
[152.80125427 -24.54444313]
[163.80265808 -41.51755142]
[183.17240906 -46.41488266]
[188.87707520 -60.28776169]
[194.58174133 -74.16064453]
[200.28640747 -88.03352356]
[188.11561584 -79.26586914]
[173.78379822 -74.83878326]
[158.78851318 -75.21486664]
[144.69664001 -80.35482025]
[132.98066711 -89.72155762]
[124.86479187 -102.33634186]
[121.19708252 -116.88102722]
[122.36077118 -131.83581543]
[128.23426819 -145.63807678]
[138.20382690 -156.84556580]
[151.22772217 -164.28720093]
[165.94506836 -167.18540955]
[180.81803894 -165.23733521]
[194.29251099 -158.64654541]
[204.96052551 -148.10171509]
[211.70738220 -134.70469666]
[213.82804871 -119.85536194]
[211.10115051 -105.10581207]
[221.20658875 -116.19094086]
[231.31202698 -127.27607727]
[241.41744995 -138.36120605]
[236.68496704 -152.97282410]
[239.90800476 -167.98973083]
[250.21960449 -179.37246704]
[264.84597778 -184.05912781]
[279.85269165 -180.78903198]
[291.20306396 -170.44181824]
[295.84387207 -155.80082703]
[292.52673340 -140.80441284]
[282.14398193 -129.48654175]
[267.48852539 -124.89167023]
[252.50259399 -128.25578308]
[242.39715576 -117.17064667]
[232.29171753 -106.08551025]
[222.18627930 -95.00037384]
[214.15928650 -82.32885742]
[208.45462036 -68.45597839]
[202.74995422 -54.58309937]
[197.04530334 -40.71021652]
[203.13183594 -33.94794083]
[206.64523315 -25.55565262]
[221.62547302 -24.78599358]
[236.60571289 -24.01633263]
[251.58595276 -23.24667358]
[262.10583496 -34.81671524]
[277.60848999 -36.86658096]
[290.77401733 -28.42839432]
[295.38604736 -13.48640347]
[289.26693726 0.90423852]
[275.30596924 7.94871092]
[260.09503174 4.32082891]
[250.81628418 -8.26643181]
[235.83604431 -9.03609180]
[220.85580444 -9.80575180]
[205.87556458 -10.57541275]
[200.08717346 -0.54137832]
[190.57102966 6.25108671]
[178.98913574 8.50596142]
[167.41027832 5.72948456]
[157.30485535 16.81461906]
[147.19941711 27.89975166]
[137.09397888 38.98488617]
[126.98854828 50.07001877]
[116.88311005 61.15515518]
[115.98052979 120.58737183]
[115.98052979 135.58737183]
[115.98052979 150.58737183]
[115.98052979 165.58737183]
[115.98052979 180.58737183]
[115.98052979 195.58737183]
[115.98052979 210.58737183]
[115.98052979 225.58737183]
[115.98052979 240.58737183]
[130.59054565 244.32881165]
[143.81069946 251.58677673]
[154.80998230 261.90505981]
[162.89694214 274.63500977]
[167.56324768 288.97644043]
[168.51556396 304.02780151]
[165.69403076 318.84298706]
[159.27600098 332.49069214]
[149.66493225 344.11300659]
[137.46498108 352.97933960]
[123.44303131 358.53234863]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 39]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
[41 56]
[42 55]
[45 53]
[46 52]
[57 132]
[58 131]
[59 130]
[60 129]
[61 128]
[62 127]
[65 107]
[66 106]
[67 105]
[68 104]
[86 103]
[87 102]
[88 101]
[89 100]
[109 123]
[110 122]
[111 121]
[112 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
