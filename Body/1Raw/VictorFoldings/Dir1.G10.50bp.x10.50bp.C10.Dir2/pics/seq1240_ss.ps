%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCCAAUAGGGGGGGGGGAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGAxxxxxxxxxxACUAAAACACUCACCAAGACCUCAACCCCUGACCCCCAUGCCUCAGGAUACCCCCCCCCCCUCCUCAAUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 381.05084229]
[71.19830322 375.03482056]
[59.48964310 365.50540161]
[50.78712082 353.16973877]
[45.73651886 338.94320679]
[44.71262741 323.88153076]
[47.79142761 309.10235596]
[54.74444962 295.70242310]
[65.05573273 284.67611694]
[77.96011353 276.84158325]
[92.50000000 272.78027344]
[92.50000000 257.78027344]
[92.50000000 242.78028870]
[92.50000000 227.78028870]
[92.50000000 212.78028870]
[92.50000000 197.78028870]
[92.50000000 182.78028870]
[92.50000000 167.78028870]
[92.50000000 152.78028870]
[92.50000000 137.78028870]
[76.44354248 134.00856018]
[62.41961670 123.31024170]
[48.40290070 128.65174866]
[46.64569092 143.85606384]
[38.01438522 156.49565125]
[24.49239922 163.66603088]
[9.18698406 163.71951294]
[-4.38478661 156.64381409]
[-13.10422039 144.06486511]
[-14.96765423 128.87321472]
[-9.54688549 114.55979919]
[1.91243339 104.41373444]
[16.77703476 100.76651001]
[31.63114166 104.45623779]
[43.06138992 114.63504028]
[57.07810211 109.29353333]
[56.45412445 94.30651093]
[42.04190826 90.14862823]
[27.62969398 85.99073792]
[13.21747684 81.83285522]
[-1.19473898 77.67496490]
[-14.90696812 85.53310394]
[-30.13742447 81.31306458]
[-37.85014725 67.51851654]
[-33.46931839 52.33353043]
[-19.59400177 44.76708221]
[-4.45617962 49.30821228]
[2.96314836 63.26274872]
[17.37536430 67.42063904]
[31.78758049 71.57852173]
[46.19979858 75.73641205]
[60.61201096 79.89429474]
[71.82411194 68.42172241]
[85.82877350 62.14641571]
[100.46543884 61.48528671]
[103.56375885 46.80876160]
[106.66207886 32.13223648]
[109.76039886 17.45570946]
[112.85871887 2.77918363]
[98.74748993 -2.38355899]
[85.51466370 -9.50206470]
[73.42964935 -18.43140984]
[62.73848343 -28.98980331]
[53.65882111 -40.96229172]
[46.37551117 -54.10512543]
[41.03683472 -68.15074158]
[37.75148010 -82.81318665]
[36.58633041 -97.79394531]
[37.56511307 -112.78803253]
[40.66789627 -127.49019623]
[45.83151245 -141.60110474]
[52.95083618 -154.83349609]
[61.88092804 -166.91795349]
[72.43998718 -177.60845947]
[84.41303253 -186.68739319]
[97.55632019 -193.96989441]
[111.60226440 -199.30769348]
[126.26490784 -202.59214783]
[141.24574280 -203.75636292]
[156.23977661 -202.77665710]
[170.94174194 -199.67295837]
[185.05233765 -194.50846863]
[198.28427124 -187.38832092]
[210.36817932 -178.45748901]
[221.05804443 -167.89776611]
[230.13623047 -155.92416382]
[237.41790771 -142.78042603]
[242.75485229 -128.73414612]
[246.03839111 -114.07129669]
[247.20169067 -99.09039307]
[246.22105408 -84.09642029]
[243.11643982 -69.39464569]
[237.95108032 -55.28437424]
[230.83012390 -42.05287170]
[221.89852905 -29.96951675]
[211.33815002 -19.28030777]
[199.36398315 -10.20286655]
[186.21978760 -2.92199683]
[172.17318726 2.41407204]
[157.51013184 5.69670439]
[142.52915955 6.85907030]
[127.53524780 5.87750530]
[124.43692780 20.55403137]
[121.33860779 35.23055649]
[118.24028015 49.90708160]
[115.14196014 64.58361053]
[131.94242859 78.47603607]
[138.51048279 99.26344299]
[153.27653503 101.90230560]
[168.04258728 104.54116821]
[182.80865479 107.18003082]
[197.57470703 109.81890106]
[207.41290283 98.02460480]
[221.83570862 92.74460602]
[236.96345520 95.39920044]
[248.72685242 105.27432251]
[253.96160889 119.71360016]
[251.25961304 134.83294678]
[241.34767151 146.56533813]
[226.89204407 151.75482178]
[211.78125000 149.00543213]
[200.07998657 139.05676270]
[194.93583679 124.58495331]
[180.16978455 121.94609070]
[165.40373230 119.30722809]
[150.63768005 116.66835785]
[135.87161255 114.02949524]
[131.27418518 122.48388672]
[124.72446442 129.53472900]
[116.63134003 134.74188232]
[107.50000000 137.78028870]
[107.50000000 152.78028870]
[107.50000000 167.78028870]
[107.50000000 182.78028870]
[107.50000000 197.78028870]
[107.50000000 212.78028870]
[107.50000000 227.78028870]
[107.50000000 242.78028870]
[107.50000000 257.78027344]
[107.50000000 272.78027344]
[122.03988647 276.84158325]
[134.94427490 284.67611694]
[145.25555420 295.70242310]
[152.20857239 309.10235596]
[155.28736877 323.88153076]
[154.26348877 338.94320679]
[149.21287537 353.16973877]
[140.51036072 365.50540161]
[128.80169678 375.03482056]
[114.95575714 381.05084229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 36]
[23 35]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[55 106]
[56 105]
[57 104]
[58 103]
[59 102]
[108 127]
[109 126]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
