%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUCAAACUACGGGGGGGGGGGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAAGUxxxxxxxxxxAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCAACUAAAAAUAUUCCCCCCCCCCAAACACAAACUAC\
) } def
/len { sequence length } bind def

/coor [
[81.12644958 361.91964722]
[67.68379211 355.14617920]
[55.88001251 345.80511475]
[46.19846344 334.27896118]
[39.03560257 321.03967285]
[34.68474197 306.62945557]
[33.32404709 291.63833618]
[35.00923538 276.68023682]
[39.67130661 262.36764526]
[47.11934280 249.28668213]
[57.04835892 237.97299194]
[69.05176544 228.88987732]
[82.63803101 222.40925598]
[97.25080109 218.79653931]
[96.65065765 203.80854797]
[96.05051422 188.82055664]
[95.45037079 173.83256531]
[94.85022736 158.84457397]
[94.25008392 143.85658264]
[93.64994049 128.86860657]
[93.04978943 113.88060760]
[81.97656250 103.76213074]
[66.99532318 104.51219940]
[52.01409149 105.26226807]
[37.03285599 106.01233673]
[21.83702850 116.36680603]
[6.53332710 107.82707977]
[-8.42990017 108.87675476]
[-23.39312744 109.92642212]
[-36.61802673 118.61047363]
[-49.85554123 111.78276825]
[-64.81877136 112.83244324]
[-79.78199768 113.88211823]
[-87.88733673 127.11401367]
[-102.23506927 133.02352905]
[-117.30818939 129.33831787]
[-127.31077576 117.47544861]
[-128.39663696 101.99641418]
[-120.14822388 88.85321808]
[-105.73723602 83.09970093]
[-90.70497894 86.94820404]
[-80.83167267 98.91889191]
[-65.86844635 97.86921692]
[-50.90521622 96.81954193]
[-38.75058746 88.21057892]
[-24.44280243 94.96319580]
[-9.47957420 93.91352081]
[5.48365307 92.86385345]
[13.68262768 83.92224884]
[26.17846107 82.95584869]
[36.28278732 91.03110504]
[51.26402283 90.28103638]
[66.24526215 89.53096771]
[81.22649384 88.78089905]
[92.44087219 85.96012878]
[100.44423676 89.98925781]
[109.40607452 77.96073151]
[98.15197754 68.03073120]
[87.75634003 57.20528793]
[78.29016876 45.55834961]
[69.81813812 33.16947556]
[62.39811707 20.12329483]
[56.08079147 6.50892878]
[50.90931702 -7.58062029]
[46.91902161 -22.04910660]
[44.13716125 -36.79769135]
[42.58274078 -51.72562790]
[42.26638031 -66.73094177]
[43.19023514 -81.71112823]
[45.34799957 -96.56385803]
[48.72493362 -111.18767548]
[53.29796600 -125.48266602]
[59.03585815 -139.35119629]
[65.89941406 -152.69851685]
[73.84175110 -165.43347168]
[82.80861664 -177.46903992]
[92.73874664 -188.72302246]
[103.56430817 -199.11853027]
[115.21136475 -208.58456421]
[127.60034180 -217.05644226]
[140.64660645 -224.47630310]
[154.26104736 -230.79347229]
[168.35066223 -235.96478271]
[182.81919861 -239.95489502]
[197.56781006 -242.73658752]
[212.49577332 -244.29083252]
[227.50108337 -244.60700989]
[242.48126221 -243.68296814]
[257.33395386 -241.52503967]
[271.95773315 -238.14793396]
[286.25268555 -233.57472229]
[300.12115479 -227.83666992]
[313.46838379 -220.97294617]
[326.20324707 -213.03045654]
[338.23870850 -204.06346130]
[349.49255371 -194.13319397]
[359.88793945 -183.30749512]
[369.35382080 -171.66033936]
[377.82556152 -159.27125549]
[385.24526978 -146.22489929]
[391.56228638 -132.61038208]
[396.73342896 -118.52071381]
[400.72335815 -104.05213165]
[403.50488281 -89.30348206]
[405.05892944 -74.37550354]
[405.37493896 -59.37018585]
[404.45074463 -44.39001846]
[402.29260254 -29.53734016]
[398.91534424 -14.91360950]
[394.34194946 -0.61872286]
[388.60372925 13.24967003]
[381.73986816 26.59683228]
[373.79721069 39.33158875]
[364.83007812 51.36694336]
[354.89965820 62.62068558]
[344.07385254 73.01593781]
[332.42657471 82.48168945]
[320.03741455 90.95327759]
[306.99096680 98.37283325]
[293.37637329 104.68967438]
[279.28662109 109.86064148]
[264.81799316 113.85041809]
[250.06932068 116.63175201]
[235.14132690 118.18563843]
[220.13600159 118.50146484]
[205.15583801 117.57707214]
[190.30319214 115.41877747]
[175.67950439 112.04132080]
[161.38467407 107.46778107]
[147.51634216 101.72939301]
[134.16926575 94.86535645]
[121.43460083 86.92256165]
[112.47276306 98.95109558]
[108.03778076 113.28046417]
[108.63792419 128.26844788]
[109.23806763 143.25643921]
[109.83821106 158.24443054]
[110.43836212 173.23242188]
[111.03850555 188.22041321]
[111.63864899 203.20840454]
[112.23879242 218.19639587]
[127.09363556 220.62918091]
[141.15455627 226.00276184]
[153.84577942 234.09706116]
[164.64759827 244.58065796]
[173.11767578 257.02423096]
[178.90917969 270.91824341]
[181.78495789 285.69372559]
[181.62724304 300.74563599]
[178.44247437 315.45761108]
[172.36109924 329.22720337]
[163.63212585 341.49053955]
[152.61299133 351.74548340]
[139.75494385 359.57208252]
[125.58451080 364.64981079]
[110.68194580 366.77081299]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 54]
[23 53]
[24 52]
[25 51]
[27 48]
[28 47]
[29 46]
[31 44]
[32 43]
[33 42]
[56 133]
[57 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
