%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGACACCCCGGGGGGGGGGCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAxxxxxxxxxxAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCCCCCCCCCCCAAGGCACCCC\
) } def
/len { sequence length } bind def

/coor [
[75.08259583 367.87960815]
[63.86716461 357.81430054]
[55.27576828 345.43347168]
[49.77172470 331.40484619]
[47.65186310 316.48495483]
[49.03050613 301.47842407]
[53.83330917 287.19451904]
[61.80125427 274.40356445]
[72.50464630 263.79537964]
[85.36626434 255.94198608]
[99.69249725 251.26696777]
[98.44561768 236.31887817]
[97.19874573 221.37078857]
[95.95187378 206.42269897]
[94.70499420 191.47462463]
[93.45812225 176.52653503]
[92.21124268 161.57844543]
[90.96437073 146.63035583]
[89.71749878 131.68226624]
[76.85909271 123.95818329]
[63.07671356 129.87814331]
[53.45040131 142.43380737]
[38.70262146 140.34757996]
[24.92024231 146.26754761]
[11.13786030 152.18751526]
[3.88016438 166.49504089]
[-11.85953426 169.60009766]
[-24.00708580 159.12075806]
[-23.24392891 143.09587097]
[-10.15549088 133.81835938]
[5.21789742 138.40512085]
[19.00027847 132.48516846]
[32.78266144 126.56520081]
[41.42316437 114.43297577]
[57.15674973 116.09577179]
[70.93913269 110.17580414]
[72.69816589 92.09529114]
[83.81315613 79.58267975]
[98.77594757 76.34410095]
[102.78369141 61.88941193]
[106.79142761 47.43472290]
[110.79917145 32.98003387]
[114.80690765 18.52534676]
[118.05773163 3.88184476]
[120.54285431 -10.91086197]
[123.02796936 -25.70356941]
[125.51309204 -40.49627686]
[127.84419250 -55.31403351]
[130.02102661 -70.15524292]
[132.19786072 -84.99644470]
[120.44801331 -75.67223358]
[105.46922302 -74.87486267]
[92.79586029 -82.89894104]
[87.11048126 -96.77973175]
[90.51371765 -111.38856506]
[101.74813843 -121.32775879]
[116.66286469 -122.92498779]
[129.74717712 -115.59010315]
[136.16659546 -102.03406525]
[140.77215576 -116.30952454]
[145.37771606 -130.58499146]
[149.98329163 -144.86044312]
[154.58885193 -159.13591003]
[139.85809326 -173.39527893]
[138.31629944 -196.57966614]
[154.33155823 -217.03372192]
[155.26718140 -232.00451660]
[156.20281982 -246.97531128]
[157.13844299 -261.94610596]
[143.34289551 -268.27438354]
[132.76777649 -279.16162109]
[126.84329987 -293.13534546]
[126.37068939 -308.30572510]
[131.41384888 -322.62115479]
[141.29075623 -334.14550781]
[154.66563416 -341.32028198]
[169.72962952 -343.17507935]
[184.44548035 -339.45913696]
[196.82296753 -330.67492676]
[205.18814087 -318.01046753]
[208.40969849 -303.17855835]
[206.05192566 -288.18502808]
[198.43371582 -275.05767822]
[186.58535767 -265.57186890]
[172.10923767 -261.01046753]
[171.17359924 -246.03967285]
[170.23797607 -231.06887817]
[169.30235291 -216.09809875]
[176.09782410 -212.92453003]
[189.68878174 -206.57739258]
[196.48425293 -203.40383911]
[207.36306763 -213.73103333]
[209.21595764 -229.66673279]
[222.90591431 -238.03121948]
[237.93118286 -232.40797424]
[242.76567078 -217.11067200]
[233.70075989 -203.87409973]
[217.69027710 -202.85221863]
[206.81144714 -192.52500916]
[204.87361145 -174.92149353]
[195.69909668 -161.40626526]
[182.46171570 -154.42832947]
[168.86430359 -154.53034973]
[164.25874329 -140.25488281]
[159.65318298 -125.97942352]
[155.04762268 -111.70396423]
[150.44204712 -97.42850494]
[147.03907776 -82.81961060]
[144.86224365 -67.97840118]
[142.68539429 -53.13719940]
[144.84045410 -46.01670456]
[140.30580139 -38.01115799]
[137.82067871 -23.21845055]
[135.33555603 -8.42574406]
[132.85044861 6.36696339]
[146.55174255 0.26170605]
[159.96447754 6.97727203]
[163.28500366 21.60512543]
[154.08628845 33.45349121]
[139.09185791 33.86217117]
[129.26159668 22.53308678]
[125.25386047 36.98777390]
[121.24611664 51.44246292]
[117.23837280 65.89714813]
[113.23063660 80.35183716]
[125.63804626 95.35550690]
[123.13732910 116.50874329]
[104.66558075 130.43539429]
[105.91246033 145.38348389]
[107.15933228 160.33157349]
[108.40620422 175.27966309]
[109.65308380 190.22773743]
[110.89995575 205.17582703]
[112.14683533 220.12391663]
[113.39370728 235.07200623]
[114.64057922 250.02009583]
[129.54336548 252.25701904]
[143.52833557 257.87103271]
[155.84132385 266.55935669]
[165.81829834 277.85345459]
[172.92120361 291.14425659]
[176.76699829 305.71499634]
[177.14828491 320.77990723]
[174.04447937 335.52655029]
[167.62300110 349.15963745]
[158.23013306 360.94396973]
[146.37240601 370.24404907]
[132.68933105 376.55831909]
[117.91878510 379.54623413]
[102.85733795 379.04669189]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 36]
[21 35]
[23 33]
[24 32]
[25 31]
[39 125]
[40 124]
[41 123]
[42 122]
[43 121]
[44 115]
[45 114]
[46 113]
[47 112]
[48 110]
[49 109]
[50 108]
[59 107]
[60 106]
[61 105]
[62 104]
[63 103]
[66 88]
[67 87]
[68 86]
[69 85]
[91 99]
[92 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
