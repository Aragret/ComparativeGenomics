%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUCAAAGCGGGGGGGGGGGAACUACUAUACUCAAUUGAUCCAAUAACUUGACCAACGGAACAAGUUACxxxxxxxxxxCCCUUAACAGUACAUAGUACAUAAAGCCAUUUACCGUACAUAGCACAUUACCCCCCCCCCCAGUCAAAUC\
) } def
/len { sequence length } bind def

/coor [
[82.25659180 603.70416260]
[68.41065979 597.68817139]
[56.70199585 588.15875244]
[47.99946976 575.82305908]
[42.94886780 561.59655762]
[41.92497635 546.53485107]
[45.00377655 531.75567627]
[51.95679855 518.35577393]
[62.26808167 507.32943726]
[75.17246246 499.49493408]
[89.71234894 495.43362427]
[89.71234894 480.43362427]
[89.71234894 465.43362427]
[89.71234894 450.43362427]
[89.71234894 435.43362427]
[89.71234894 420.43362427]
[89.71234894 405.43362427]
[89.71234894 390.43362427]
[89.71234894 375.43362427]
[89.71234894 360.43362427]
[81.97505188 347.70635986]
[89.71234894 333.90618896]
[89.71234894 318.90618896]
[76.14619446 309.71569824]
[70.65417480 294.10150146]
[75.57740021 278.12515259]
[89.17247009 268.11386108]
[88.86042023 253.11711121]
[88.54836273 238.12036133]
[88.23630524 223.12359619]
[77.16076660 217.69964600]
[69.34340668 208.16152954]
[66.19991302 196.23655701]
[51.55641174 192.98573303]
[36.91291046 189.73489380]
[22.26940918 186.48406982]
[7.50335407 183.84521484]
[-7.35969305 181.82287598]
[-22.22274017 179.80053711]
[-38.73244095 183.65620422]
[-47.00776672 168.85906982]
[-35.07974243 156.81089783]
[-20.20040512 164.93750000]
[-5.33735847 166.95982361]
[9.52568817 168.98216248]
[11.86531448 167.32884216]
[15.02154350 166.53373718]
[18.65915680 166.92059326]
[22.32933044 168.68151855]
[25.52023506 171.84057617]
[40.16373825 175.09140015]
[54.80723953 178.34222412]
[69.45073700 181.59304810]
[74.98934174 173.83509827]
[82.80186462 168.23846436]
[92.07888794 165.44511414]
[101.83890533 165.80329895]
[108.74590302 152.48814392]
[115.65290070 139.17298889]
[122.55989838 125.85782623]
[103.98969269 131.85220337]
[86.51354218 126.67041779]
[75.84756470 113.50482178]
[74.63059235 97.89099884]
[81.86515808 85.46290588]
[93.73992920 79.92598724]
[94.67556000 64.95520020]
[95.61119080 49.98440552]
[96.54681396 35.01361465]
[82.75127411 28.68531609]
[72.17615509 17.79810333]
[66.25167847 3.82437968]
[65.77906036 -11.34602165]
[70.82222748 -25.66142845]
[80.69913483 -37.18579865]
[94.07401276 -44.36055756]
[109.13800812 -46.21537781]
[123.85385132 -42.49940872]
[136.23133850 -33.71520615]
[144.59652710 -21.05076218]
[147.81806946 -6.21883535]
[145.46031189 8.77467537]
[137.84208679 21.90202141]
[125.99372864 31.38783646]
[111.51760864 35.94924545]
[110.58197784 50.92003632]
[109.64635468 65.89082336]
[108.71072388 80.86161804]
[113.61525726 75.90965271]
[119.42471313 71.71118164]
[130.30354309 61.38397980]
[141.18235779 51.05677414]
[152.06118774 40.72957230]
[159.38581848 25.43950081]
[176.10600281 28.24516487]
[178.03858948 45.08860397]
[162.38839722 51.60839462]
[151.50956726 61.93560028]
[140.63073730 72.26280212]
[129.75192261 82.59001160]
[136.93475342 95.75917816]
[144.11692810 108.92717743]
[158.68963623 105.37241364]
[173.26234436 101.81764984]
[187.83503723 98.26289368]
[199.30905151 86.54626465]
[215.12348938 90.88625336]
[219.00982666 106.81824493]
[206.97012329 117.95277405]
[191.38980103 112.83559418]
[176.81710815 116.39035797]
[162.24440002 119.94511414]
[147.67169189 123.49987793]
[135.87506104 132.76483154]
[128.96806335 146.07998657]
[122.06105804 159.39514160]
[115.15406036 172.71029663]
[124.51876831 191.14353943]
[119.67288971 211.01593018]
[103.23305511 222.81153870]
[103.54511261 237.80830383]
[103.85717010 252.80505371]
[104.16922760 267.80181885]
[116.06884766 274.83020020]
[122.87311554 286.73458862]
[122.88975525 300.33792114]
[116.22179413 312.07034302]
[104.71234894 318.90618896]
[104.71234894 333.90618896]
[112.44965363 347.70635986]
[104.71234894 360.43362427]
[104.71234894 375.43362427]
[104.71234894 390.43362427]
[104.71234894 405.43362427]
[104.71234894 420.43362427]
[104.71234894 435.43362427]
[104.71234894 450.43362427]
[104.71234894 465.43362427]
[104.71234894 480.43362427]
[104.71234894 495.43362427]
[119.25223541 499.49493408]
[132.15661621 507.32943726]
[142.46789551 518.35577393]
[149.42092896 531.75567627]
[152.49972534 546.53485107]
[151.47583008 561.59655762]
[146.42523193 575.82305908]
[137.72270203 588.15875244]
[126.01404572 597.68817139]
[112.16810608 603.70416260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[27 123]
[28 122]
[29 121]
[30 120]
[33 53]
[34 52]
[35 51]
[36 50]
[37 45]
[38 44]
[39 43]
[57 117]
[58 116]
[59 115]
[60 114]
[66 88]
[67 87]
[68 86]
[69 85]
[90 100]
[91 99]
[92 98]
[93 97]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
