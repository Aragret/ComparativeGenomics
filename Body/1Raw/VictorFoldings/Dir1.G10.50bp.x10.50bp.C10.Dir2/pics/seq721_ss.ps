%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUAACCCCAGGGGGGGGGGUACCCCGAACCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUxxxxxxxxxxGAAUAGACGUAGACACACGAGCAUAUUUCACCUCCGCUACCAUAAUCAUCCCCCCCCCCCGCUAUCCCCA\
) } def
/len { sequence length } bind def

/coor [
[83.38467407 364.69369507]
[70.16447449 357.42123413]
[59.27767563 346.97424316]
[51.46654510 334.06497192]
[47.26366425 319.57366943]
[46.95558929 304.48831177]
[50.56333160 289.83749390]
[57.84090424 276.62011719]
[68.29211426 265.73733521]
[81.20437622 257.93121338]
[95.69731140 253.73391724]
[95.38525391 238.73716736]
[95.07319641 223.74040222]
[94.76113892 208.74365234]
[94.44908905 193.74690247]
[94.13703156 178.75015259]
[93.82497406 163.75338745]
[93.51291656 148.75663757]
[93.20085907 133.75988770]
[92.88880157 118.76313019]
[78.64013672 106.82624817]
[79.40528107 86.21440125]
[64.54223633 84.19206238]
[60.02887726 98.53562164]
[53.15621567 111.91001892]
[44.12199402 123.93045044]
[33.18613815 134.25106812]
[20.66329956 142.57492065]
[6.91378355 148.66252136]
[-7.66680813 152.33869934]
[-22.65896225 153.49771118]
[-37.63132858 152.10618591]
[-52.15311432 148.20417786]
[-65.80651093 141.90394592]
[-78.19866943 133.38676453]
[-88.97304535 122.89769745]
[-97.81964874 110.73851776]
[-104.48394012 97.25907898]
[-108.77416992 82.84720612]
[-110.56690216 67.91757202]
[-109.81055450 52.89971542]
[-106.52689362 38.22573853]
[-100.81039429 24.31784058]
[-92.82553101 11.57617760]
[-82.80204010 0.36735356]
[-71.02832794 -8.98613167]
[-57.84313965 -16.21515846]
[-43.62584305 -21.11173439]
[-28.78549576 -23.53497696]
[-13.74908543 -23.41516113]
[1.05076170 -20.75573540]
[15.18822384 -15.63321781]
[28.25653648 -8.19499302]
[39.87969971 1.34492636]
[49.72329330 12.71205807]
[57.50409698 25.57934761]
[62.99823761 39.57657623]
[66.04764557 54.30101776]
[66.56456757 69.32901764]
[81.42761993 71.35134888]
[95.49913788 66.15593719]
[105.48186493 54.96017075]
[115.46459198 43.76440430]
[125.44731903 32.56863785]
[135.43003845 21.37287331]
[145.29576111 10.07386780]
[155.04341125 -1.32715309]
[164.79107666 -12.72817421]
[174.53872681 -24.12919426]
[167.15049744 -34.61857986]
[162.32177734 -46.49598312]
[160.29776001 -59.14781952]
[161.17886353 -71.92145538]
[164.91577148 -84.15886688]
[171.31211853 -95.23055267]
[180.03488159 -104.56789398]
[190.63162231 -111.69239044]
[202.55407715 -116.24013519]
[215.18640137 -117.98044586]
[227.87704468 -116.82752228]
[239.97235107 -112.84471130]
[250.85023499 -106.24100494]
[261.51187134 -116.79229736]
[272.17349243 -127.34358978]
[282.83511353 -137.89488220]
[293.38641357 -148.55650330]
[297.42498779 -166.49165344]
[314.43347168 -170.70011902]
[324.64697266 -181.68577576]
[334.86044312 -192.67144775]
[334.03475952 -208.45414734]
[344.67288208 -220.14198303]
[360.46343994 -220.80076599]
[372.03814697 -210.03964233]
[372.52993774 -194.24301147]
[361.64706421 -182.78271484]
[345.84609985 -182.45796204]
[335.63262939 -171.47230530]
[325.41915894 -160.48663330]
[325.53500366 -148.35015869]
[317.05944824 -139.10983276]
[304.15722656 -138.11668396]
[301.74462891 -131.07928467]
[293.38641357 -127.23325348]
[282.72479248 -116.68196106]
[272.06317139 -106.13066864]
[261.40151978 -95.57938385]
[269.61349487 -80.33298492]
[272.78402710 -63.29095078]
[270.60031128 -46.07730865]
[263.26034546 -30.33569908]
[251.45494080 -17.57241440]
[236.30270386 -9.01228333]
[219.24415588 -5.48112154]
[201.90469360 -7.32608032]
[185.93974304 -14.38154316]
[176.19209290 -2.98052192]
[166.44444275 8.42049885]
[156.69679260 19.82151985]
[154.72785950 26.99570656]
[146.62580872 31.35559845]
[136.64308167 42.55136490]
[126.66035461 53.74713135]
[116.67762756 64.94289398]
[106.69490051 76.13866425]
[116.53324890 82.82547760]
[121.79338074 92.98083496]
[121.59281158 103.95705414]
[116.41389465 113.11334991]
[107.88555908 118.45107269]
[108.19761658 133.44783020]
[108.50967407 148.44458008]
[108.82172394 163.44132996]
[109.13378143 178.43809509]
[109.44583893 193.43484497]
[109.75789642 208.43159485]
[110.06995392 223.42834473]
[110.38201141 238.42510986]
[110.69406128 253.42185974]
[125.34906006 257.01263428]
[138.57485962 264.27487183]
[149.46972656 274.71347046]
[157.29083252 287.61669922]
[161.50489807 302.10476685]
[161.82461548 317.18984985]
[158.22819519 331.84344482]
[150.96083069 345.06646729]
[140.51803589 355.95730591]
[127.61180115 363.77340698]
[113.12210846 367.98190308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 60]
[23 59]
[61 125]
[62 124]
[63 123]
[64 122]
[65 121]
[66 119]
[67 118]
[68 117]
[69 116]
[82 107]
[83 106]
[84 105]
[85 104]
[86 102]
[88 99]
[89 98]
[90 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
