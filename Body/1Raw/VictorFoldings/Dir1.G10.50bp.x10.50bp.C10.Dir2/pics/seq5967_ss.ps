%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAAUACAGAGGGGGGGGGGCCAAGAGCCUUCAAAGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACxxxxxxxxxxUAAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCACAUUAGGCCCCCCCCCCCUUAAAAACAGA\
) } def
/len { sequence length } bind def

/coor [
[86.02200317 614.26074219]
[72.53311920 607.52917480]
[61.04761887 597.76464844]
[52.23324966 585.53472900]
[46.60246658 571.55053711]
[44.48263931 556.62506104]
[45.99700928 541.62603760]
[51.05753326 527.42553711]
[59.36999512 514.84912109]
[70.45112610 504.62796021]
[83.65668488 497.35632324]
[98.21891022 493.45697021]
[97.91092682 478.46011353]
[97.60295105 463.46328735]
[97.29497528 448.46646118]
[96.98699951 433.46960449]
[96.67901611 418.47277832]
[96.37104034 403.47595215]
[96.06306458 388.47909546]
[95.75508881 373.48226929]
[95.44710541 358.48541260]
[95.13912964 343.48858643]
[94.83115387 328.49176025]
[80.16213989 325.48809814]
[66.52282715 319.29232788]
[54.59859085 310.21228027]
[44.98940277 298.70074463]
[38.17966461 285.33303833]
[34.51376343 270.77810669]
[34.17867279 255.76512146]
[37.19441605 241.04695129]
[43.41289139 227.36241150]
[52.52515793 215.39912415]
[64.07676697 205.75904846]
[77.49044800 198.92810059]
[92.09491730 195.25177002]
[91.78693390 180.25492859]
[91.47895813 165.25810242]
[88.66943359 161.32670593]
[88.34175110 155.57514954]
[91.47895813 149.64213562]
[91.78693390 134.64529419]
[92.09491730 119.64846039]
[82.26993561 111.58435822]
[78.83098602 99.34778595]
[83.01670837 87.34613800]
[93.31948853 79.90216064]
[93.93531036 64.91480255]
[94.55113220 49.92745209]
[91.76371002 41.16240311]
[95.33660126 34.63962173]
[96.26000977 19.66807365]
[97.18342590 4.69652271]
[98.10684204 -10.27502728]
[91.23376465 -24.52534103]
[99.73989105 -36.75215912]
[100.66330719 -51.72370911]
[85.94794464 -57.44868851]
[73.73077393 -67.42095184]
[65.19548035 -80.65888214]
[61.16423798 -95.86521912]
[62.01856613 -111.55419159]
[67.66320801 -126.19668579]
[77.53662872 -138.36927795]
[90.66680908 -146.89260864]
[105.76697540 -150.94564819]
[106.38280487 -165.93299866]
[106.99862671 -180.92034912]
[107.61445618 -195.90771484]
[108.23027802 -210.89506531]
[94.42243958 -217.25210571]
[84.10206604 -228.41267395]
[78.84293365 -242.67485046]
[79.44702911 -257.86376953]
[85.82222748 -271.66323853]
[96.99636078 -281.96893311]
[111.26545715 -287.20928955]
[126.45357513 -286.58523560]
[140.24464417 -280.19189453]
[150.53561401 -269.00421143]
[155.75720215 -254.72822571]
[155.11315918 -239.54093933]
[148.70167542 -225.75830078]
[137.50045776 -215.48204041]
[123.21763611 -210.27923584]
[122.60180664 -195.29188538]
[121.98598480 -180.30453491]
[121.37015533 -165.31716919]
[120.75433350 -150.32981873]
[134.26470947 -145.69026184]
[145.92797852 -137.41499329]
[154.78945923 -126.17034149]
[160.12068176 -112.86609650]
[161.47932434 -98.58196259]
[158.74580383 -84.47990417]
[152.13380432 -71.70961761]
[142.17358398 -61.31483459]
[129.66944885 -54.14797974]
[115.63485718 -50.80029297]
[114.71144104 -35.82874298]
[121.65056610 -22.64929581]
[113.07839203 -9.35161304]
[112.15497589 5.61993647]
[111.23155975 20.59148598]
[110.30815125 35.56303787]
[109.53849030 50.54327774]
[108.92266083 65.53063202]
[108.30683899 80.51798248]
[119.75561523 92.36665344]
[119.24822998 108.83504486]
[107.09175110 119.95644379]
[106.78377533 134.95327759]
[106.47579956 149.95011902]
[106.47579956 164.95011902]
[106.78377533 179.94696045]
[107.09175110 194.94378662]
[121.83483887 198.01744080]
[135.51765442 204.29191589]
[147.45529175 213.44961548]
[157.05104065 225.02871704]
[163.82608032 238.44642639]
[167.44354248 253.02836609]
[167.72509766 268.04244995]
[164.65983582 282.73562622]
[158.40464783 296.37164307]
[149.27616882 308.26794434]
[137.73477173 317.82989502]
[124.36132050 324.58041382]
[109.82798767 328.18377686]
[110.13597107 343.18060303]
[110.44394684 358.17745972]
[110.75192261 373.17428589]
[111.05989838 388.17111206]
[111.36788177 403.16796875]
[111.67585754 418.16479492]
[111.98383331 433.16165161]
[112.29180908 448.15847778]
[112.59979248 463.15530396]
[112.90776825 478.15216064]
[113.21574402 493.14898682]
[127.92578125 496.44720459]
[141.41874695 503.17056274]
[152.91015625 512.92816162]
[161.73193359 525.15270996]
[167.37120056 539.13348389]
[169.50007629 554.05767822]
[167.99479675 569.05761719]
[162.94288635 583.26116943]
[154.63804626 595.84265137]
[143.56311035 606.07049561]
[130.36196899 613.35015869]
[115.80211639 617.25836182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[36 116]
[37 115]
[38 114]
[41 113]
[42 112]
[43 111]
[47 108]
[48 107]
[49 106]
[51 105]
[52 104]
[53 103]
[54 102]
[56 100]
[57 99]
[66 89]
[67 88]
[68 87]
[69 86]
[70 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
