%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAAGAACCCGGGGGGGGGGUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACACAUUxxxxxxxxxxCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACACAUCCCCCCCCCCUCGAAGAACCC\
) } def
/len { sequence length } bind def

/coor [
[25.82229996 239.24072266]
[14.19241905 232.39097595]
[3.19056702 224.57225037]
[-7.10273266 215.84176636]
[-16.61214256 206.26344299]
[-25.26806259 195.90736389]
[-33.00714111 184.84934998]
[-39.77273560 173.17030334]
[-45.51532745 160.95573425]
[-50.19288635 148.29501343]
[-53.77117538 135.28082275]
[-56.22400665 122.00841522]
[-71.16001892 123.39244080]
[-86.09603119 124.77646637]
[-99.12342834 133.75407410]
[-112.51031494 127.22411346]
[-127.44632721 128.60813904]
[-142.38233948 129.99215698]
[-157.31835938 131.37619019]
[-172.25436401 132.76020813]
[-187.19038391 134.14424133]
[-202.09483337 135.83464050]
[-216.96142578 137.83068848]
[-231.82801819 139.82675171]
[-246.69462585 141.82279968]
[-261.56121826 143.81886292]
[-276.42782593 145.81492615]
[-279.95004272 160.57833862]
[-288.57080078 173.07020569]
[-301.12420654 181.60112000]
[-315.91250610 185.01734924]
[-330.93569946 182.85685730]
[-344.16204834 175.41183472]
[-353.80279541 163.68917847]
[-358.55407715 149.27426147]
[-357.77334595 134.11659241]
[-351.56616211 120.26612854]
[-340.77203369 109.59601593]
[-326.85076904 103.54930115]
[-311.68508911 102.94376373]
[-297.32604980 107.86129761]
[-285.71557617 117.63683319]
[-278.42388916 130.94831848]
[-263.55728149 128.95227051]
[-248.69067383 126.95620728]
[-233.82408142 124.96015167]
[-218.95748901 122.96409607]
[-204.09088135 120.96804047]
[-200.50115967 117.73336792]
[-194.82315063 116.75961304]
[-188.57440186 119.20822906]
[-173.63839722 117.82420349]
[-158.70237732 116.44017792]
[-143.76637268 115.05615234]
[-128.83035278 113.67212677]
[-113.89434052 112.28810120]
[-101.93527222 103.40947723]
[-87.48005676 109.84045410]
[-72.54404449 108.45642853]
[-57.60803223 107.07240295]
[-57.56391144 92.00468445]
[-56.08256149 77.00989532]
[-53.17750168 62.22481155]
[-48.87522125 47.78429794]
[-43.21496964 33.82006836]
[-36.24837875 20.45950508]
[-28.03899193 7.82447243]
[-18.66168976 -3.96977687]
[-8.20201111 -14.81566143]
[3.24463773 -24.61424828]
[15.57384491 -33.27616119]
[28.67314911 -40.72239304]
[42.42306519 -46.88501358]
[56.69816971 -51.70782089]
[71.36825562 -55.14681625]
[86.29950714 -57.17063141]
[101.35572815 -57.76081085]
[116.39958191 -56.91196442]
[131.29385376 -54.63183975]
[145.90266418 -50.94123459]
[160.09277344 -45.87381363]
[173.73475647 -39.47579575]
[181.36772156 -52.38849258]
[189.00068665 -65.30119324]
[196.63366699 -78.21389008]
[204.26663208 -91.12658691]
[200.09086609 -106.36924744]
[207.98883057 -120.05857849]
[223.27478027 -124.07295227]
[236.87983704 -116.03070831]
[240.73237610 -100.70316315]
[232.54673767 -87.18388367]
[217.17932129 -83.49362183]
[209.54635620 -70.58091736]
[201.91339111 -57.66822052]
[194.28042603 -44.75552368]
[186.64744568 -31.84282684]
[201.29339600 -20.95436859]
[214.58392334 -8.44739437]
[226.34117126 5.51073551]
[236.40782166 20.73324585]
[244.64916992 37.01644135]
[250.95494080 54.14242935]
[255.24075317 71.88204956]
[257.44924927 89.99792480]
[257.55090332 108.24763489]
[255.54432678 126.38697815]
[270.19705200 129.59597778]
[284.84979248 132.80497742]
[299.50250244 136.01397705]
[314.15524292 139.22296143]
[322.00372314 126.27383423]
[333.63311768 116.57662964]
[347.78195190 111.18324280]
[362.91549683 110.67869568]
[377.39218140 115.11772919]
[389.64163208 124.01882935]
[398.33514404 136.41645813]
[402.52972412 150.96583557]
[401.77038574 166.08872986]
[396.13946533 180.14474487]
[386.24777222 191.60917664]
[373.16827393 199.23844910]
[358.31976318 202.20498657]
[343.31286621 200.18702698]
[329.77545166 193.40345764]
[319.17593384 182.59008789]
[312.66409302 168.91987610]
[310.94622803 153.87568665]
[296.29351807 150.66668701]
[281.64077759 147.45770264]
[266.98806763 144.24870300]
[252.33532715 141.03970337]
[248.27006531 153.91009521]
[243.11961365 166.38591003]
[236.92164612 178.37583923]
[229.72155762 189.79214478]
[221.57202148 200.55125427]
[212.53269958 210.57441711]
[202.66975403 219.78828430]
[192.05534363 228.12542725]
[180.76719666 235.52479553]
[168.88790894 241.93226624]
[156.50440979 247.30091858]
[143.70736694 251.59147644]
[130.59042358 254.77253723]
[117.24959564 256.82080078]
[103.78250885 257.72128296]
[90.28774261 257.46740723]
[76.86405945 256.06100464]
[63.60970688 253.51240540]
[50.62169647 249.84022522]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 60]
[13 59]
[14 58]
[16 56]
[17 55]
[18 54]
[19 53]
[20 52]
[21 51]
[22 48]
[23 47]
[24 46]
[25 45]
[26 44]
[27 43]
[82 97]
[83 96]
[84 95]
[85 94]
[86 93]
[107 133]
[108 132]
[109 131]
[110 130]
[111 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
