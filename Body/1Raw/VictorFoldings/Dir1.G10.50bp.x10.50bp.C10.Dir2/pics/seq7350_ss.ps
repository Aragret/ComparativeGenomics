%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACCACACAGGGGGGGGGGUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCGAAxxxxxxxxxxACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGGCCCCCCCCCCCCACCACACA\
) } def
/len { sequence length } bind def

/coor [
[100.70171356 362.27111816]
[86.85577393 356.25509644]
[75.14711761 346.72567749]
[66.44458771 334.38998413]
[61.39398575 320.16348267]
[60.37009811 305.10180664]
[63.44889450 290.32263184]
[70.40191650 276.92269897]
[80.71320343 265.89636230]
[93.61758423 258.06185913]
[108.15747070 254.00054932]
[108.15747070 239.00054932]
[108.15747070 224.00054932]
[108.15747070 209.00054932]
[108.15747070 194.00054932]
[108.15747070 179.00054932]
[108.15747070 164.00054932]
[108.15747070 149.00054932]
[108.15747070 134.00054932]
[108.15747070 119.00054932]
[95.14115906 111.54563904]
[82.20310211 119.13555145]
[69.26504517 126.72545624]
[58.66262054 139.95515442]
[43.01490021 133.42941284]
[44.95389175 116.58671570]
[61.67514038 113.78739929]
[74.61319733 106.19749451]
[87.55125427 98.60758209]
[96.19036865 86.34521484]
[98.98268890 71.60741425]
[99.29474640 56.61065674]
[97.11791229 41.76945114]
[94.94107819 26.92824554]
[83.18293762 12.79579735]
[90.21217346 -3.25380611]
[87.72705841 -18.04651260]
[85.24193573 -32.83922195]
[82.75682068 -47.63192749]
[80.27169800 -62.42463303]
[65.29448700 -61.40000916]
[50.28896332 -61.84835815]
[35.39964294 -63.76536560]
[20.76992226 -67.13256836]
[6.54069614 -71.91754150]
[-7.15099430 -78.07419586]
[-20.17328835 -85.54323578]
[-32.40077209 -94.25273895]
[-43.71568298 -104.11882019]
[-54.00905228 -115.04646301]
[-63.18174362 -126.93042755]
[-71.14541626 -139.65625000]
[-77.82337952 -153.10137939]
[-83.15131378 -167.13633728]
[-87.07791138 -181.62594604]
[-89.56535339 -196.43064880]
[-90.58967590 -211.40788269]
[-90.14102936 -226.41340637]
[-88.22372437 -241.30268860]
[-84.85622406 -255.93234253]
[-80.07096863 -270.16146851]
[-73.91404724 -283.85302734]
[-66.44474030 -296.87518311]
[-57.73498917 -309.10247803]
[-47.86868286 -320.41720581]
[-36.94083405 -330.71035767]
[-25.05669022 -339.88281250]
[-12.33070374 -347.84622192]
[1.11456299 -354.52392578]
[15.14962292 -359.85156250]
[29.63930511 -363.77789307]
[44.44406509 -366.26501465]
[59.42132187 -367.28906250]
[74.42682648 -366.84011841]
[89.31607056 -364.92251587]
[103.94565582 -361.55471802]
[118.17469025 -356.76916504]
[131.86613464 -350.61196899]
[144.88813782 -343.14239502]
[157.11526489 -334.43240356]
[168.42977905 -324.56588745]
[178.72271729 -313.63781738]
[187.89492798 -301.75350952]
[195.85809326 -289.02734375]
[202.53552246 -275.58193970]
[207.86289978 -261.54678345]
[211.78890991 -247.05702209]
[214.27575684 -232.25221252]
[215.29948425 -217.27493286]
[214.85023499 -202.26943970]
[212.93234253 -187.38023376]
[209.56425476 -172.75071716]
[204.77842712 -158.52177429]
[198.62095642 -144.83045959]
[191.15112305 -131.80860901]
[182.44088745 -119.58164978]
[172.57412720 -108.26733398]
[161.64587402 -97.97461700]
[149.76136780 -88.80263519]
[137.03504944 -80.83972931]
[123.58952332 -74.16257477]
[109.55425262 -68.83547974]
[95.06440735 -64.90975189]
[97.54953003 -50.11704636]
[100.03464508 -35.32434082]
[102.51976776 -20.53163147]
[105.00488281 -5.73892450]
[114.69759369 1.56577766]
[116.85814667 13.91693020]
[109.78227997 24.75140953]
[111.95911407 39.59261322]
[114.13595581 54.43381882]
[120.26759338 40.74430084]
[130.64231873 29.91078758]
[144.05387878 23.19288635]
[158.94291687 21.37168121]
[173.57827759 24.65892220]
[186.25834656 32.67240143]
[195.50881958 44.48040390]
[200.25413513 58.71001816]
[199.94256592 73.70678711]
[194.61035156 87.72703552]
[184.87744141 99.14064789]
[171.87550354 106.62058258]
[157.11622620 109.29713440]
[142.31568909 106.85911560]
[129.19471741 99.58999634]
[119.27888489 88.33493805]
[113.72049713 74.39973450]
[110.92817688 89.13754272]
[123.15747070 119.00054932]
[123.15747070 134.00054932]
[123.15747070 149.00054932]
[123.15747070 164.00054932]
[123.15747070 179.00054932]
[123.15747070 194.00054932]
[123.15747070 209.00054932]
[123.15747070 224.00054932]
[123.15747070 239.00054932]
[123.15747070 254.00054932]
[137.69735718 258.06185913]
[150.60173035 265.89636230]
[160.91302490 276.92269897]
[167.86604309 290.32263184]
[170.94483948 305.10180664]
[169.92094421 320.16348267]
[164.87034607 334.38998413]
[156.16783142 346.72567749]
[144.45916748 356.25509644]
[130.61322021 362.27111816]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 29]
[22 28]
[23 27]
[30 130]
[31 129]
[32 112]
[33 111]
[34 110]
[36 107]
[37 106]
[38 105]
[39 104]
[40 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
