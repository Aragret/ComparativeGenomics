%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACAUACUUGGGGGGGGGGCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAxxxxxxxxxxACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCUCCCCCCCCCCCUACAUAUUU\
) } def
/len { sequence length } bind def

/coor [
[90.08013153 525.76068115]
[76.23419189 519.74468994]
[64.52552795 510.21524048]
[55.82300568 497.87957764]
[50.77240372 483.65304565]
[49.74851227 468.59136963]
[52.82730865 453.81222534]
[59.78033066 440.41229248]
[70.09161377 429.38595581]
[82.99599457 421.55145264]
[97.53588104 417.49014282]
[97.53588104 402.49014282]
[97.53588104 387.49014282]
[97.53588104 372.49014282]
[97.53588104 357.49014282]
[97.53588104 342.49014282]
[97.53588104 327.49014282]
[97.53588104 312.49014282]
[97.53588104 297.49014282]
[97.53588104 282.49014282]
[82.80607605 279.75646973]
[68.82569885 274.36120605]
[56.07141876 266.48672485]
[44.97837448 256.39993286]
[35.92534637 244.44329834]
[29.22181702 231.02313232]
[25.09740639 216.59584045]
[23.69398308 201.65234375]
[25.06080437 186.70146179]
[29.15278053 172.25248718]
[35.83196259 158.79792786]
[44.87218857 146.79664612]
[55.96674728 136.65824890]
[68.73878479 128.72909546]
[82.75408936 123.28047943]
[97.53588104 120.49933624]
[88.30077362 132.31935120]
[73.31632996 131.63638306]
[65.19475555 119.02526855]
[70.77187347 105.10062408]
[85.35356903 101.58264160]
[71.69732666 95.37723541]
[55.93255615 96.71234894]
[47.54631805 84.40299225]
[33.89007568 78.19758606]
[18.42459297 82.46354675]
[5.53199530 72.91574097]
[5.10238075 56.87844467]
[17.46531296 46.65408707]
[33.13700867 50.08592606]
[40.09548187 64.54135132]
[53.75172424 70.74675751]
[68.53971100 68.96778870]
[77.90273285 81.72099304]
[91.55897522 87.92639923]
[85.13605499 74.37110138]
[94.46041870 62.62136459]
[109.12039948 65.79704285]
[112.74618530 80.35326385]
[119.37467957 66.89730072]
[126.00318146 53.44133377]
[132.63168335 39.98537064]
[138.40794373 26.14215279]
[143.30949402 11.96559429]
[148.21105957 -2.21096373]
[153.11260986 -16.38752174]
[158.01416016 -30.56407928]
[144.93972778 -38.00544739]
[133.45541382 -47.72270966]
[123.95236969 -59.38490677]
[116.75427246 -72.59482574]
[112.10626984 -86.90254211]
[110.16668701 -101.82074738]
[111.00157928 -116.84131622]
[114.58251190 -131.45266724]
[120.78751373 -145.15713501]
[129.40525818 -157.48796082]
[140.14221191 -168.02516174]
[152.63269043 -176.40982056]
[166.45126343 -182.35639954]
[181.12727356 -185.66232300]
[196.16087341 -186.21501160]
[211.04002380 -183.99562073]
[225.25793457 -179.07977295]
[238.33036804 -171.63488770]
[249.81205750 -161.91453552]
[259.31195068 -150.24977112]
[266.50650024 -137.03791809]
[271.15063477 -122.72894287]
[273.08618164 -107.81021881]
[272.24725342 -92.78987122]
[268.66238403 -78.17948914]
[262.45367432 -64.47668457]
[253.83262634 -52.14818573]
[243.09283447 -41.61388779]
[230.60009766 -33.23258591]
[216.77992249 -27.28974533]
[202.10301208 -23.98777580]
[187.06925964 -23.43914223]
[172.19070435 -25.66252899]
[167.28915405 -11.48597145]
[162.38760376 2.69058704]
[157.48605347 16.86714554]
[152.58450317 31.04370308]
[166.66665649 25.87718391]
[180.35731506 32.00629807]
[185.88354492 45.95121765]
[180.10780334 59.79466248]
[166.30931091 65.67695618]
[152.32218933 60.25840378]
[146.08764648 46.61386871]
[139.45915222 60.06983566]
[132.83064270 73.52580261]
[126.20214844 86.98176575]
[112.53588104 120.49933624]
[127.31768036 123.28047943]
[141.33299255 128.72909546]
[154.10502625 136.65824890]
[165.19958496 146.79664612]
[174.23980713 158.79792786]
[180.91899109 172.25248718]
[185.01095581 186.70146179]
[186.37779236 201.65234375]
[184.97436523 216.59584045]
[180.84994507 231.02313232]
[174.14642334 244.44329834]
[165.09339905 256.39993286]
[154.00035095 266.48672485]
[141.24606323 274.36120605]
[127.26569366 279.75646973]
[112.53588104 282.49014282]
[112.53588104 297.49014282]
[112.53588104 312.49014282]
[112.53588104 327.49014282]
[112.53588104 342.49014282]
[112.53588104 357.49014282]
[112.53588104 372.49014282]
[112.53588104 387.49014282]
[112.53588104 402.49014282]
[112.53588104 417.49014282]
[127.07576752 421.55145264]
[139.98014832 429.38595581]
[150.29144287 440.41229248]
[157.24446106 453.81222534]
[160.32325745 468.59136963]
[159.29936218 483.65304565]
[154.24876404 497.87957764]
[145.54623413 510.21524048]
[133.83757019 519.74468994]
[119.99163818 525.76068115]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[36 115]
[41 55]
[42 54]
[44 52]
[45 51]
[59 114]
[60 113]
[61 112]
[62 111]
[63 104]
[64 103]
[65 102]
[66 101]
[67 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
