%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUUAUCCGGGGGGGGGGCCAUACUAGUUAUUAUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCxxxxxxxxxxCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCCCCCCCCCCCACUUAUCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 396.96484375]
[71.19830322 390.94882202]
[59.48964310 381.41940308]
[50.78712082 369.08374023]
[45.73651886 354.85720825]
[44.71262741 339.79553223]
[47.79142761 325.01635742]
[54.74444962 311.61642456]
[65.05573273 300.59008789]
[77.96011353 292.75558472]
[92.50000000 288.69427490]
[92.50000000 273.69427490]
[92.50000000 258.69427490]
[92.50000000 243.69427490]
[92.50000000 228.69427490]
[92.50000000 213.69427490]
[92.50000000 198.69427490]
[92.50000000 183.69427490]
[92.50000000 168.69427490]
[92.50000000 153.69427490]
[92.50000000 138.69427490]
[79.60931396 133.73007202]
[69.22318268 124.62285614]
[62.61730576 112.49125671]
[60.60307693 98.82539368]
[63.42789459 85.30379486]
[70.74479675 73.58731079]
[61.72726440 61.60047531]
[52.70973587 49.61364365]
[43.69220734 37.62680817]
[34.67467499 25.63997650]
[25.65714645 13.65314388]
[11.17786694 7.27654314]
[9.70967770 -7.54552460]
[0.69214791 -19.53235817]
[-8.32538223 -31.51918983]
[-21.38449860 -24.09707451]
[-35.28554153 -18.40591049]
[-49.80023956 -14.53914738]
[-64.69024658 -12.56028366]
[-79.71106720 -12.50181389]
[-94.61602783 -14.36469746]
[-109.16039276 -18.11834526]
[-123.10531616 -23.70111656]
[-136.22181702 -31.02134132]
[-148.29452515 -39.95881271]
[-159.12515259 -50.36676407]
[-168.53590393 -62.07429886]
[-176.37220764 -74.88916016]
[-182.50540161 -88.60091400]
[-186.83476257 -102.98441315]
[-189.28919983 -117.80345154]
[-189.82843018 -132.81469727]
[-188.44357300 -147.77165222]
[-185.15737915 -162.42871094]
[-180.02381897 -176.54518127]
[-173.12718201 -189.88926697]
[-164.58070374 -202.24185181]
[-154.52474976 -213.40007019]
[-143.12443542 -223.18072510]
[-130.56695557 -231.42318726]
[-117.05854034 -237.99212646]
[-102.82098389 -242.77964783]
[-88.08809662 -245.70716858]
[-73.10179901 -246.72659302]
[-58.10818100 -245.82118225]
[-43.35345459 -243.00581360]
[-29.07989883 -238.32672119]
[-15.52190304 -231.86071777]
[-2.90210128 -223.71400452]
[8.57227802 -214.02035522]
[18.71281624 -202.93893433]
[27.35299492 -190.65171814]
[34.35093689 -177.36048889]
[39.59172440 -163.28346252]
[42.98930359 -148.65182495]
[44.48788452 -133.70584106]
[44.06285477 -118.69092560]
[41.72119522 -103.85363770]
[37.50135803 -89.43762970]
[31.47263908 -75.67961884]
[23.73403358 -62.80552673]
[14.41261482 -51.02675247]
[3.66145062 -40.53672028]
[12.67898083 -28.54988670]
[21.69651031 -16.56305504]
[35.53079605 -11.04383183]
[37.64397812 4.63561440]
[46.66150665 16.62244606]
[55.67903900 28.60927963]
[64.69657135 40.59611130]
[73.71409607 52.58294296]
[82.73162842 64.56977844]
[102.92736816 58.83370209]
[124.19011688 64.29711151]
[140.48808289 80.40190125]
[154.90029907 76.24401093]
[169.31251526 72.08612823]
[170.32066345 56.96133041]
[176.44383240 43.09473038]
[186.94264221 32.16078949]
[200.54927063 25.47983170]
[215.62068176 23.85861397]
[230.33692932 27.49290848]
[242.92092896 35.94385529]
[251.85313416 48.19095993]
[256.05493164 62.75532913]
[255.01890564 77.87824249]
[248.87017822 91.73352814]
[238.35125732 102.64810944]
[224.73233032 109.30397797]
[209.65794373 110.89741516]
[194.94844055 107.23600769]
[182.38002014 98.76188660]
[173.47039795 86.49834442]
[159.05818176 90.65622711]
[144.64596558 94.81411743]
[143.86613464 109.79383087]
[157.76867676 115.42578888]
[171.67123413 121.05774689]
[187.82923889 118.25579071]
[198.12561035 131.01966858]
[191.96832275 146.21900940]
[175.69146729 148.21801758]
[166.03927612 134.96029663]
[152.13673401 129.32833862]
[138.23417664 123.69638824]
[129.11532593 131.81439209]
[118.55413055 136.86431885]
[107.50000000 138.69427490]
[107.50000000 153.69427490]
[107.50000000 168.69427490]
[107.50000000 183.69427490]
[107.50000000 198.69427490]
[107.50000000 213.69427490]
[107.50000000 228.69427490]
[107.50000000 243.69427490]
[107.50000000 258.69427490]
[107.50000000 273.69427490]
[107.50000000 288.69427490]
[122.03988647 292.75558472]
[134.94427490 300.59008789]
[145.25555420 311.61642456]
[152.20857239 325.01635742]
[155.28736877 339.79553223]
[154.26348877 354.85720825]
[149.21287537 369.08374023]
[140.51036072 381.41940308]
[128.80169678 390.94882202]
[114.95575714 396.96484375]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[27 93]
[28 92]
[29 91]
[30 90]
[31 89]
[32 88]
[34 86]
[35 85]
[36 84]
[96 117]
[97 116]
[98 115]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
