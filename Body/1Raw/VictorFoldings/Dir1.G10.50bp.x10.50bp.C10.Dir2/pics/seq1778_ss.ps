%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGGACGAAGGGGGGGGGGCCAGAGUGUAGCUUAACACAAAGCACCCAACUUACACUUAGGAGAUUUCAxxxxxxxxxxUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCCACCUCCUAUUCCCCCCCCCCCUUGCACGAA\
) } def
/len { sequence length } bind def

/coor [
[89.64200592 365.20751953]
[75.79607391 359.19149780]
[64.08740997 349.66207886]
[55.38488388 337.32641602]
[50.33428192 323.09988403]
[49.31039047 308.03820801]
[52.38919067 293.25906372]
[59.34221268 279.85913086]
[69.65349579 268.83279419]
[82.55787659 260.99829102]
[97.09776306 256.93698120]
[97.09776306 241.93696594]
[97.09776306 226.93696594]
[97.09776306 211.93696594]
[97.09776306 196.93696594]
[97.09776306 181.93696594]
[97.09776306 166.93696594]
[97.09776306 151.93696594]
[97.09776306 136.93696594]
[97.09776306 121.93697357]
[89.54057312 134.89416504]
[74.60086060 136.23767090]
[64.85317993 124.83666992]
[68.50202179 110.28723907]
[82.47628784 104.83544159]
[67.65853119 102.50434113]
[52.84077072 100.17323303]
[38.02301025 97.84213257]
[23.20525360 95.51102448]
[8.38749504 93.17992401]
[-6.57275343 92.08860779]
[-21.57194138 92.24465179]
[-36.57112885 92.40068817]
[-51.57032013 92.55672455]
[-62.44833374 104.02163696]
[-78.24914551 104.35311890]
[-89.59841156 93.35449219]
[-89.76281738 77.55106354]
[-78.64482117 66.31871033]
[-62.84053040 66.32140350]
[-51.72635651 77.55753326]
[-36.72716522 77.40149689]
[-21.72797775 77.24546051]
[-6.72879028 77.08942413]
[-17.76572609 66.93137360]
[-20.88122177 52.25848007]
[-14.92415905 38.49209595]
[-2.09555650 30.71861649]
[12.86467266 31.81019211]
[24.42902184 41.36350632]
[28.32469559 55.84880066]
[23.11231804 69.91404724]
[10.71859932 78.36216736]
[25.53635788 80.69326782]
[40.35411453 83.02436829]
[55.17187500 85.35547638]
[69.98963165 87.68657684]
[84.80738831 90.01768494]
[98.98394775 85.11613464]
[109.19742584 74.13047028]
[119.41090393 63.14480209]
[129.62438965 52.15913773]
[139.83786011 41.17347336]
[150.05134583 30.18780899]
[140.18379211 18.87193871]
[131.55313110 6.58660269]
[124.25393677 -6.53359413]
[118.36619568 -20.34490013]
[113.95439911 -34.69598770]
[111.06689453 -49.42962646]
[109.73531342 -64.38437653]
[109.97425079 -79.39639282]
[111.78108978 -94.30119324]
[115.13602448 -108.93547058]
[120.00230408 -123.13888550]
[126.32660675 -136.75581360]
[134.03964233 -149.63706970]
[143.05691528 -161.64152527]
[153.27960205 -172.63761902]
[164.59570312 -182.50491333]
[176.88125610 -191.13526917]
[190.00163269 -198.43414307]
[203.81307983 -204.32154846]
[218.16427612 -208.73300171]
[232.89797974 -211.62014771]
[247.85276794 -212.95135498]
[262.86477661 -212.71206665]
[277.76953125 -210.90486145]
[292.40371704 -207.54957581]
[306.60702515 -202.68293762]
[320.22381592 -196.35830688]
[333.10488892 -188.64495850]
[345.10910034 -179.62739563]
[356.10494995 -169.40444946]
[365.97195435 -158.08810425]
[374.60202026 -145.80233765]
[381.90057373 -132.68179321]
[387.78765869 -118.87020111]
[392.19876099 -104.51889801]
[395.08554077 -89.78511810]
[396.41638184 -74.83029938]
[396.17672729 -59.81829834]
[394.36917114 -44.91358566]
[391.01351929 -30.27947044]
[386.14654541 -16.07629204]
[379.82159424 -2.45966530]
[372.10791016 10.42121601]
[363.09008789 22.42522240]
[352.86685181 33.42082977]
[341.55026245 43.28757095]
[329.26428223 51.91733170]
[316.14355469 59.21556091]
[302.33184814 65.10230255]
[287.98040771 69.51305389]
[273.24658203 72.39948273]
[258.29171753 73.72997284]
[243.27972412 73.48993683]
[228.37506104 71.68202209]
[213.74102783 68.32601166]
[199.53796387 63.45870209]
[185.92149353 57.13340378]
[173.04080200 49.41942596]
[161.03701782 40.40128708]
[150.82353210 51.38695526]
[140.61004639 62.37261963]
[130.39657593 73.35828400]
[120.18309021 84.34394836]
[109.96961212 95.32961273]
[115.65846252 100.99626923]
[117.20307922 110.90998077]
[112.09776306 121.93697357]
[112.09776306 136.93696594]
[112.09776306 151.93696594]
[112.09776306 166.93696594]
[112.09776306 181.93696594]
[112.09776306 196.93696594]
[112.09776306 211.93696594]
[112.09776306 226.93696594]
[112.09776306 241.93696594]
[112.09776306 256.93698120]
[126.63764954 260.99829102]
[139.54203796 268.83279419]
[149.85331726 279.85913086]
[156.80633545 293.25906372]
[159.88513184 308.03820801]
[158.86125183 323.09988403]
[153.81063843 337.32641602]
[145.10812378 349.66207886]
[133.39945984 359.19149780]
[119.55352020 365.20751953]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 58]
[26 57]
[27 56]
[28 55]
[29 54]
[30 53]
[31 44]
[32 43]
[33 42]
[34 41]
[59 128]
[60 127]
[61 126]
[62 125]
[63 124]
[64 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
