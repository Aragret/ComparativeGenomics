%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUAGCAAUAAAGGGGGGGGGGCGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCxxxxxxxxxxAACCAUAACCAAUACUACCAAUCAAUACUCAUCAUUAAUAAUCAUAAUAGCCCCCCCCCCCUAUAGCAAUAAA\
) } def
/len { sequence length } bind def

/coor [
[62.63258743 415.63140869]
[48.36081696 410.82196045]
[35.45683289 403.05657959]
[24.52417946 392.69842529]
[16.07419395 380.23199463]
[10.50209713 366.24035645]
[8.06850815 351.37792969]
[8.88724899 336.33987427]
[12.92002583 321.82949829]
[19.97821999 308.52551270]
[29.73170471 297.05017090]
[41.72429276 287.94018555]
[55.39506912 281.62164307]
[70.10462952 278.39007568]
[70.10462952 263.39007568]
[70.10462952 248.39007568]
[70.10462952 233.39007568]
[70.10462952 218.39007568]
[70.10462952 203.39007568]
[70.10462952 188.39007568]
[70.10462952 173.39007568]
[70.10462952 158.39007568]
[70.10462952 143.39007568]
[70.10462952 128.39007568]
[87.30192566 89.94747162]
[82.58111572 75.70970917]
[68.54695129 63.82819366]
[72.69298553 46.80055237]
[67.68824005 32.66009521]
[62.68349075 18.51963615]
[57.53752518 4.42995930]
[52.25084686 -9.60752773]
[49.65864563 5.16679049]
[43.39518356 18.79650307]
[33.87213135 30.38578606]
[21.71540260 39.17293167]
[7.72399902 44.58039093]
[-7.18248224 46.25276566]
[-22.02430344 44.08012772]
[-35.82597733 38.20528030]
[-47.68037796 29.01435280]
[-56.80836868 17.11142159]
[-62.61000824 3.27881575]
[-64.70397949 -11.57430840]
[-62.95265198 -26.47171974]
[-57.47113419 -40.43427658]
[-48.61970520 -52.54428101]
[-36.98012924 -62.00579453]
[-23.31742287 -68.19695282]
[-8.52957726 -70.71083832]
[6.41146660 -69.38223267]
[20.52369881 -64.29844666]
[32.87958527 -55.79361725]
[42.66702652 -44.42673492]
[49.24215698 -30.94662285]
[50.44148254 -45.89860153]
[51.64081192 -60.85057831]
[52.84013748 -75.80255127]
[54.03946304 -90.75453186]
[55.23879242 -105.70650482]
[56.43811798 -120.65848541]
[41.82665253 -124.18716431]
[27.94713402 -129.95825195]
[15.14135647 -137.82962036]
[3.72467422 -147.60745239]
[-6.02176666 -159.05093384]
[-13.85795116 -171.87828064]
[-19.59090614 -185.77359009]
[-23.07945251 -200.39468384]
[-24.23768044 -215.38151550]
[-23.03706932 -230.36500549]
[-19.50718498 -244.97618103]
[-13.73495483 -258.85522461]
[-5.86252260 -271.66033936]
[3.91624403 -283.07623291]
[15.36053467 -292.82171631]
[28.18852234 -300.65686035]
[42.08430862 -306.38867188]
[56.70569611 -309.87600708]
[71.69261932 -311.03298950]
[86.67601013 -309.83114624]
[101.28689575 -306.30004883]
[115.16545868 -300.52667236]
[127.96994019 -292.65319824]
[139.38500977 -282.87347412]
[149.12956238 -271.42837524]
[156.96362305 -258.59976196]
[162.69429016 -244.70349121]
[166.18041992 -230.08181763]
[167.33618164 -215.09480286]
[166.13310242 -200.11151123]
[162.60079956 -185.50091553]
[156.82627869 -171.62283325]
[148.95173645 -158.81900024]
[139.17108154 -147.40473938]
[127.72518158 -137.66113281]
[114.89590454 -129.82812500]
[100.99916840 -124.09860229]
[86.37721252 -120.61367798]
[71.39009857 -119.45915985]
[70.19076538 -104.50717926]
[68.99143982 -89.55520630]
[67.79211426 -74.60322571]
[66.59278870 -59.65124893]
[65.39346313 -44.69927216]
[64.19412994 -29.74729538]
[66.28833771 -14.89420509]
[71.57501221 -0.85671741]
[76.90540314 4.32351589]
[76.82395172 13.51489162]
[81.82869720 27.65534973]
[86.83344269 41.79580688]
[97.63877106 47.31125259]
[101.90480804 59.09601974]
[96.81888580 70.98889923]
[101.53969574 85.22666168]
[112.51113892 95.45542145]
[127.04434967 99.16831970]
[141.57756042 102.88122559]
[156.11077881 106.59412384]
[168.70841980 97.32949066]
[184.31057739 98.38156128]
[195.55038452 109.25358582]
[197.12074280 124.81211853]
[188.28019714 137.71090698]
[173.20295715 141.85952759]
[159.00805664 135.29913330]
[152.39788818 121.12734222]
[137.86466980 117.41443634]
[123.33145142 113.70153809]
[108.79823303 109.98863220]
[102.87483215 114.58899689]
[85.10462952 128.39007568]
[85.10462952 143.39007568]
[85.10462952 158.39007568]
[85.10462952 173.39007568]
[85.10462952 188.39007568]
[85.10462952 203.39007568]
[85.10462952 218.39007568]
[85.10462952 233.39007568]
[85.10462952 248.39007568]
[85.10462952 263.39007568]
[85.10462952 278.39007568]
[99.81418610 281.62164307]
[113.48496246 287.94018555]
[125.47754669 297.05017090]
[135.23103333 308.52551270]
[142.28923035 321.82949829]
[146.32200623 336.33987427]
[147.14074707 351.37792969]
[144.70715332 366.24035645]
[139.13505554 380.23199463]
[130.68507385 392.69842529]
[119.75241852 403.05657959]
[106.84843445 410.82196045]
[92.57666779 415.63140869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 116]
[26 115]
[28 112]
[29 111]
[30 110]
[31 108]
[32 107]
[55 106]
[56 105]
[57 104]
[58 103]
[59 102]
[60 101]
[61 100]
[117 131]
[118 130]
[119 129]
[120 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
