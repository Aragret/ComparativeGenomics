%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCAUAAUCCUGGGGGGGGGGUCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAACCAUAAxxxxxxxxxxUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACCCCCCCCCCCCCUCCAUAAACCU\
) } def
/len { sequence length } bind def

/coor [
[38.43023682 534.90313721]
[26.09712601 526.25201416]
[15.99867725 515.07299805]
[8.64142418 501.92697144]
[4.39440441 487.47323608]
[3.47064590 472.43679810]
[5.91648436 457.57189941]
[11.60923767 443.62411499]
[20.26335907 431.29312134]
[31.44476128 421.19735718]
[44.59259033 413.84329224]
[59.04735947 409.59979248]
[58.12394714 394.62823486]
[57.20053101 379.65667725]
[56.27711868 364.68511963]
[55.35370636 349.71359253]
[54.43029022 334.74203491]
[53.50687790 319.77047729]
[52.58346558 304.79891968]
[51.66004944 289.82739258]
[50.73663712 274.85583496]
[49.81322479 259.88427734]
[42.11162186 272.75616455]
[29.90496826 281.47381592]
[15.23058414 284.58227539]
[0.53765482 281.56271362]
[-11.72153759 272.91906738]
[-19.50090599 260.09405518]
[-21.50205994 245.22813416]
[-17.39099693 230.80249023]
[-7.85386801 219.22479248]
[5.51756239 212.42738342]
[20.49157143 211.54475403]
[34.56896591 216.72422791]
[45.40019608 227.10133362]
[51.17694473 240.94119263]
[54.23534012 226.25630188]
[57.29373550 211.57139587]
[60.35213089 196.88650513]
[63.41052628 182.20159912]
[50.66310501 190.10749817]
[35.79257965 188.14093018]
[25.53848839 177.19316101]
[24.54813957 162.22589111]
[33.27037430 150.02250671]
[47.75214767 146.11375427]
[61.43010330 152.27116394]
[68.10498047 165.70231628]
[73.23528290 151.60691833]
[78.36558533 137.51153564]
[83.49588776 123.41614532]
[74.01381683 112.05901337]
[71.46266937 97.48555756]
[76.52288055 83.58273315]
[87.84481049 74.05866241]
[102.40872192 71.45355225]
[107.53902435 57.35816193]
[112.66932678 43.26277542]
[117.79962921 29.16738510]
[113.05888367 17.12873840]
[117.66796112 5.46993446]
[128.63369751 0.27235267]
[116.61780548 9.25112057]
[103.10496521 15.76289940]
[88.59527588 19.56669807]
[73.62570953 20.52174568]
[58.75027084 18.59269714]
[44.51946640 13.85094261]
[31.45995903 6.47196674]
[20.05505943 -3.27114654]
[10.72684288 -15.01782131]
[3.82053018 -28.33333206]
[-0.40828684 -42.72489548]
[-1.80310690 -57.65990448]
[-0.31231007 -72.58563995]
[4.00893164 -86.94972229]
[11.00069714 -100.22056580]
[20.40423203 -111.90702820]
[31.87152672 -121.57662964]
[44.97819901 -128.87150574]
[59.23918915 -133.52168274]
[74.12672424 -135.35507202]
[89.08983612 -134.30381775]
[103.57477570 -130.40681458]
[117.04547882 -123.80831146]
[129.00340271 -114.75248718]
[139.00602722 -103.57449341]
[146.68315125 -90.68799591]
[151.75067139 -76.56990814]
[154.02102661 -61.74272537]
[153.41023254 -46.75516891]
[149.94085693 -32.16189957]
[143.73916626 -18.49926758]
[156.24319458 -26.78474045]
[168.74723816 -35.07021713]
[181.25126648 -43.35569000]
[193.75531006 -51.64116669]
[206.25933838 -59.92663956]
[213.08073425 -74.83974457]
[229.42988586 -76.11921692]
[238.48820496 -62.44885254]
[230.93725586 -47.89154053]
[214.54481506 -47.42260361]
[202.04078674 -39.13713074]
[189.53674316 -30.85165405]
[177.03271484 -22.56617928]
[164.52867126 -14.28070545]
[152.02464294 -5.99523115]
[142.62078857 5.69097757]
[146.26614380 22.83028412]
[131.89501953 34.29768753]
[126.76471710 48.39307785]
[121.63441467 62.48846436]
[116.50411224 76.58385468]
[125.98618317 87.94098663]
[128.53732300 102.51444244]
[123.47711945 116.41726685]
[112.15518951 125.94133759]
[97.59127808 128.54644775]
[92.46097565 142.64183044]
[87.33067322 156.73722839]
[82.20037079 170.83261108]
[78.09542847 185.25999451]
[75.03703308 199.94490051]
[71.97863770 214.62979126]
[68.92024231 229.31469727]
[65.86183929 243.99958801]
[64.78477478 258.96087646]
[65.70818329 273.93243408]
[66.63159943 288.90396118]
[67.55501556 303.87551880]
[68.47842407 318.84707642]
[69.40184021 333.81863403]
[70.32525635 348.79016113]
[71.24866486 363.76171875]
[72.17208099 378.73327637]
[73.09549713 393.70483398]
[74.01890564 408.67636108]
[88.88559723 411.11138916]
[102.83750153 416.79400635]
[115.17480469 425.43917847]
[125.27866364 436.61322021]
[132.64228821 449.75570679]
[136.89631653 464.20739746]
[137.82736206 479.24337769]
[135.38871765 494.10946655]
[129.70272827 508.05999756]
[121.05458832 520.39520264]
[109.87807465 530.49633789]
[96.73381042 537.85681152]
[82.28110504 542.10729980]
[67.24488831 543.03472900]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[36 127]
[37 126]
[38 125]
[39 124]
[40 123]
[48 122]
[49 121]
[50 120]
[51 119]
[56 114]
[57 113]
[58 112]
[59 111]
[62 109]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
