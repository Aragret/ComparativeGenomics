%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGAUAACAGCGGGGGGGGGGGCAAUCCUAUUCUAGAGUCCAUAUCAACAAUAGGGUUUACGACCUCGAUGxxxxxxxxxxACUGCUAACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUACCCCCCCCCCAAGGAUAACAGC\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 374.66506958]
[70.87159729 369.51004028]
[58.28185654 361.22784424]
[47.94191742 350.26507568]
[40.40940475 337.21295166]
[36.09054184 322.77536011]
[35.21823120 307.73089600]
[37.83952332 292.89089966]
[43.81304932 279.05566406]
[52.81666565 266.97131348]
[64.36482239 257.28952026]
[77.83473969 250.53245544]
[92.50000000 247.06446838]
[92.50000000 232.06446838]
[92.50000000 217.06446838]
[92.50000000 202.06446838]
[92.50000000 187.06446838]
[92.50000000 172.06446838]
[92.50000000 157.06446838]
[92.50000000 142.06446838]
[92.50000000 127.06447601]
[92.50000000 112.06447601]
[85.89408875 98.59740448]
[74.03245544 89.41581726]
[62.17081451 80.23423004]
[48.32720947 74.45888519]
[33.45719528 72.48843384]
[18.58718109 70.51798248]
[3.71716785 68.54753113]
[-11.15284634 66.57707977]
[-26.02285957 64.60662842]
[-40.89287567 62.63617325]
[-55.76288986 60.66572189]
[-62.49921036 74.22672272]
[-73.27553558 84.86389923]
[-86.92294312 91.42340088]
[-101.96105194 93.19371033]
[-116.75864410 89.98279572]
[-129.71058655 82.13895416]
[-139.41195679 70.51303101]
[-144.81040955 56.36610413]
[-145.32037354 41.23274231]
[-140.88652039 26.75449371]
[-131.98982239 14.50185013]
[-119.59529877 5.80388594]
[-105.04742432 1.60409272]
[-89.92425537 2.35803199]
[-75.86623383 7.98392248]
[-64.39826202 17.87150955]
[-56.76430511 30.94826126]
[-53.79243851 45.79570770]
[-38.92242432 47.76615906]
[-24.05240822 49.73661041]
[-9.18239498 51.70706177]
[5.68761921 53.67751694]
[20.55763435 55.64796829]
[35.42764664 57.61841965]
[50.29766083 59.58887100]
[38.57135391 50.23506165]
[29.17212296 38.54513168]
[22.55416870 25.08397865]
[19.03729248 10.50208664]
[18.79144478 -4.49589872]
[21.82850266 -19.18522453]
[28.00170708 -32.85605240]
[37.01274490 -44.84776306]
[48.42617798 -54.58087921]
[61.69047165 -61.58506393]
[76.16464233 -65.52185059]
[91.14926147 -66.20100403]
[105.92021942 -63.58969498]
[119.76372528 -57.81412125]
[132.01081848 -49.15337753]
[142.06970215 -38.02597427]
[149.45425415 -24.96962547]
[153.80766296 -10.61525822]
[154.91955566 4.34347486]
[152.73617554 19.18372154]
[147.36306763 33.18834686]
[139.05984497 45.68060684]
[128.22776794 56.05683136]
[115.39026642 63.81560898]
[101.16769409 68.58200073]
[86.24733734 70.12569427]
[71.35240173 68.37258911]
[83.21404266 77.55418396]
[95.07567596 86.73577118]
[112.92179871 85.68167877]
[127.44295502 81.92189026]
[141.96411133 78.16210938]
[142.25245667 61.41042328]
[147.19821167 45.41687775]
[156.40162659 31.44893265]
[169.12585449 20.61134529]
[184.35591125 13.75878906]
[200.87969971 11.42846012]
[217.38438416 13.79796696]
[232.56082153 20.67181587]
[245.20724487 31.49752426]
[254.32458496 45.41000748]
[268.59045410 40.77475357]
[282.85629272 36.13949585]
[297.12213135 31.50424194]
[311.38796997 26.86898613]
[325.65383911 22.23373222]
[332.60461426 8.03999329]
[347.58291626 2.99755812]
[361.70236206 10.09801388]
[366.58615112 25.12878609]
[359.33682251 39.17238235]
[344.25524902 43.89699173]
[330.28909302 36.49958038]
[316.02322388 41.13483429]
[301.75738525 45.77008820]
[287.49154663 50.40534592]
[273.22570801 55.04059982]
[258.95983887 59.67585373]
[259.97470093 72.99752808]
[257.96661377 86.21438599]
[253.03480530 98.64884949]
[245.42842102 109.66261292]
[235.53405762 118.68939209]
[223.85601807 125.26404572]
[210.99069214 129.04656982]
[197.59602356 129.83961487]
[184.35794067 127.59888458]
[171.95516968 122.43547058]
[161.02444458 114.61043549]
[152.12785339 104.52159119]
[145.72390747 92.68326569]
[131.20274353 96.44305420]
[116.68158722 100.20283508]
[107.50000000 112.06447601]
[107.50000000 127.06447601]
[107.50000000 142.06446838]
[107.50000000 157.06446838]
[107.50000000 172.06446838]
[107.50000000 187.06446838]
[107.50000000 202.06446838]
[107.50000000 217.06446838]
[107.50000000 232.06446838]
[107.50000000 247.06446838]
[122.16526031 250.53245544]
[135.63517761 257.28952026]
[147.18333435 266.97131348]
[156.18695068 279.05566406]
[162.16047668 292.89089966]
[164.78176880 307.73089600]
[163.90945435 322.77536011]
[159.59059143 337.21295166]
[152.05809021 350.26507568]
[141.71813965 361.22784424]
[129.12840271 369.51004028]
[114.96779633 374.66506958]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 87]
[24 86]
[25 85]
[26 58]
[27 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[88 132]
[89 131]
[90 130]
[100 117]
[101 116]
[102 115]
[103 114]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
