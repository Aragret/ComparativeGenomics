%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUAGCCGGGGGGGGGGAUCAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACxxxxxxxxxxACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCCCCCCCCCCCAGCCUAGCC\
) } def
/len { sequence length } bind def

/coor [
[66.77694702 398.91815186]
[53.55674744 391.64569092]
[42.66994476 381.19866943]
[34.85881424 368.28942871]
[30.65593338 353.79812622]
[30.34786034 338.71276855]
[33.95560074 324.06195068]
[41.23317337 310.84457397]
[51.68438339 299.96179199]
[64.59664154 292.15563965]
[79.08958435 287.95837402]
[78.77752686 272.96160889]
[78.46546936 257.96487427]
[78.15341187 242.96810913]
[77.84135437 227.97135925]
[77.52929688 212.97459412]
[77.21724701 197.97784424]
[76.90518951 182.98109436]
[76.59313202 167.98434448]
[76.28107452 152.98757935]
[75.96901703 137.99082947]
[68.36016083 150.91775513]
[58.19537735 161.94848633]
[45.93223190 170.58650208]
[32.12274170 176.44294739]
[17.38853645 179.25421143]
[2.39286900 178.89375305]
[-12.18924046 175.37777710]
[-25.70138359 168.86456299]
[-37.53532028 159.64729309]
[-47.15835190 148.14089966]
[-54.13730240 134.86331177]
[-58.15801620 120.41222382]
[-59.03950500 105.43814850]
[-56.74208450 90.61512756]
[-51.36917877 76.61042023]
[-43.16264343 64.05443573]
[-32.49188995 53.51237106]
[-19.83725929 45.45878220]
[-5.76839113 40.25619125]
[9.08141041 38.13879013]
[24.04368973 39.20189667]
[38.44492722 43.39764786]
[51.63685989 50.53718185]
[63.02565765 60.29911423]
[72.09866333 72.24401093]
[78.44744873 85.83418274]
[81.78624725 100.45787811]
[81.96453094 115.45909119]
[89.68861389 102.60069275]
[96.45672607 89.21440887]
[102.23300171 75.37118530]
[108.00927734 61.52796936]
[113.78554535 47.68475342]
[101.50159454 56.29314423]
[87.79682922 62.39065170]
[73.17823792 65.75170898]
[58.18658066 66.25198364]
[43.37644196 63.87297440]
[29.29567146 58.70267868]
[16.46515465 50.93236160]
[5.35951662 40.84946442]
[-3.61041832 28.82697487]
[-10.11283302 15.30963135]
[-13.90718937 0.79746866]
[-14.85312653 -14.17267513]
[-12.91565037 -29.04702187]
[-8.16643333 -43.27533722]
[-0.78115958 -56.33128357]
[8.96697330 -67.73189545]
[20.71736145 -77.05543518]
[34.03533173 -83.95700073]
[48.42822266 -88.18130493]
[63.36360931 -89.57205963]
[78.28900146 -88.07783508]
[92.65226746 -83.75389862]
[105.92209625 -76.76020050]
[117.60758972 -67.35545349]
[127.27648163 -55.88756561]
[134.57110596 -42.78075409]
[139.22160339 -28.51987076]
[141.05595398 -13.63245583]
[140.00630188 1.33077347]
[136.11146545 15.81629276]
[129.51899719 29.28264618]
[142.29634094 21.42522049]
[155.07369995 13.56779480]
[167.85105896 5.71036863]
[180.62841797 -2.14705682]
[176.47154236 -16.65991020]
[176.38548279 -31.75610733]
[180.37663269 -46.31541061]
[188.14881897 -59.25742340]
[199.12528992 -69.62175751]
[212.49153137 -76.63932037]
[227.25567627 -79.78935242]
[242.32211304 -78.83811188]
[256.57284546 -73.85617065]
[268.95031738 -65.21323395]
[278.53610229 -53.55066681]
[284.61883545 -39.73390198]
[286.74713135 -24.78823471]
[284.76306152 -9.82273865]
[278.81387329 4.05205107]
[269.34103394 15.80653095]
[257.04748535 24.56844139]
[242.84547424 29.68759155]
[227.78890991 30.78410339]
[212.99507141 27.77661324]
[199.56176758 20.88829041]
[188.48583984 10.63030052]
[175.70848083 18.48772621]
[162.93113708 26.34515190]
[150.15377808 34.20257950]
[137.37641907 42.06000519]
[127.62876129 53.46102524]
[121.85249329 67.30424500]
[116.07621765 81.14746094]
[110.29994965 94.99067688]
[124.31874084 89.65464020]
[138.54420471 94.41238403]
[146.53207397 107.10861206]
[144.66374207 121.99179840]
[133.78559875 132.31971741]
[118.82554626 133.41372681]
[106.56063080 124.77822876]
[102.54701996 110.32477570]
[94.82292938 123.18317413]
[90.96577454 137.67877197]
[91.27783203 152.67552185]
[91.58988190 167.67228699]
[91.90193939 182.66903687]
[92.21399689 197.66578674]
[92.52605438 212.66253662]
[92.83811188 227.65930176]
[93.15016937 242.65605164]
[93.46221924 257.65280151]
[93.77427673 272.64956665]
[94.08633423 287.64630127]
[108.74132538 291.23709106]
[121.96713257 298.49932861]
[132.86199951 308.93792725]
[140.68310547 321.84115601]
[144.89717102 336.32919312]
[145.21688843 351.41430664]
[141.62046814 366.06790161]
[134.35310364 379.29092407]
[123.91030121 390.18176270]
[111.00407410 397.99786377]
[96.51438141 402.20632935]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[49 128]
[50 127]
[51 119]
[52 118]
[53 117]
[54 116]
[85 115]
[86 114]
[87 113]
[88 112]
[89 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
