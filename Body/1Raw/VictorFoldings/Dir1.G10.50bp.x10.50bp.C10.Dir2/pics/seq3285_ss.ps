%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCUACUCGGGGGGGGGGCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGxxxxxxxxxxAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCCCCCCCCCCCACCUACUC\
) } def
/len { sequence length } bind def

/coor [
[31.42921066 361.36938477]
[17.58327293 355.35336304]
[5.87461090 345.82394409]
[-2.82791376 333.48828125]
[-7.87851572 319.26174927]
[-8.90240669 304.20007324]
[-5.82360792 289.42092896]
[1.12941384 276.02099609]
[11.44069767 264.99465942]
[24.34507942 257.16015625]
[38.88496780 253.09884644]
[38.88496780 238.09884644]
[38.88496780 223.09884644]
[38.88496780 208.09884644]
[38.88496780 193.09884644]
[38.88496780 178.09884644]
[38.88496780 163.09884644]
[38.88496780 148.09884644]
[38.88496780 133.09884644]
[38.88496780 118.09883881]
[38.88496780 103.09883881]
[38.88496780 88.09883881]
[27.68919945 78.11611176]
[12.78729820 79.82880402]
[-2.11460447 81.54149628]
[-17.01650620 83.25418091]
[-31.91840935 84.96687317]
[-46.82031250 86.67956543]
[-51.34518814 101.22072601]
[-61.39816666 112.66001892]
[-75.23751068 119.01551819]
[-90.46547699 119.18609619]
[-104.44371033 113.14220428]
[-114.75041962 101.93096924]
[-119.59988403 87.49481201]
[-118.15192413 72.33489227]
[-110.65739441 59.07774734]
[-98.41477203 50.02025986]
[-83.54515839 46.73169708]
[-68.62481689 49.78181839]
[-56.23878098 58.64217758]
[-48.53300095 71.77765656]
[-33.63109970 70.06497192]
[-18.72919655 68.35227966]
[-3.82729435 66.63958740]
[11.07460785 64.92690277]
[25.97651100 63.21421051]
[30.13439751 48.80199432]
[18.43477440 39.41483307]
[6.73515081 30.02767181]
[-4.96447325 20.64050865]
[-16.66409683 11.25334740]
[-32.80208588 6.05704069]
[-32.27629471 -10.88875198]
[-15.84719658 -15.07456970]
[-7.27693462 -0.44627619]
[4.42268896 8.94088554]
[16.12231255 18.32804680]
[27.82193565 27.71520996]
[39.52156067 37.10237122]
[46.24954224 33.78812027]
[35.78747940 23.03892708]
[42.77777863 9.76731491]
[57.55992126 12.31451797]
[59.70550919 27.15962410]
[66.43348694 23.84537315]
[66.12143707 8.84862041]
[65.80937958 -6.14813328]
[51.75491714 -12.01259995]
[41.30554199 -23.09097862]
[36.27167130 -37.46387100]
[37.52545547 -52.64108658]
[44.84966660 -65.99308777]
[56.97533798 -75.20655060]
[71.80163574 -78.68518829]
[86.75979614 -75.82630920]
[99.25823975 -67.12522888]
[107.13153839 -54.08946991]
[109.01558685 -38.97754288]
[104.58396149 -24.40769196]
[94.60447693 -12.90422440]
[80.80612946 -6.46018982]
[81.11818695 8.53656387]
[81.43024445 23.53331757]
[87.69322205 27.65946198]
[88.57704163 12.68552303]
[101.98681641 5.96406078]
[114.51259613 14.21662235]
[113.62844849 29.19054222]
[100.21918488 35.91175079]
[106.48217010 40.03789520]
[120.38472748 34.40594101]
[134.28727722 28.77398300]
[148.18983459 23.14202690]
[151.99212646 5.46843863]
[165.49118042 -6.31960869]
[183.20397949 -7.68241167]
[198.08305359 1.73465335]
[211.73928833 -4.47075367]
[225.39552307 -10.67616081]
[232.35400391 -25.13158035]
[248.02569580 -28.56341934]
[260.38864136 -18.33906364]
[259.95901489 -2.30176377]
[247.06642151 7.24603558]
[231.60093689 2.98008037]
[217.94470215 9.18548775]
[204.28845215 15.39089489]
[203.63192749 27.58554649]
[197.79603577 38.39559555]
[187.84422302 45.72096634]
[175.64613342 48.10866547]
[163.52641296 45.04063034]
[153.82179260 37.04458237]
[139.91923523 42.67654037]
[126.01667786 48.30849457]
[112.11412811 53.94045258]
[134.03919983 77.84830475]
[133.17079163 105.34552765]
[147.07334900 110.97748566]
[163.23135376 108.17552948]
[173.52772522 120.93941498]
[167.37043762 136.13874817]
[151.09358215 138.13777161]
[141.44139099 124.88004303]
[127.53884125 119.24808502]
[101.25261688 138.25399780]
[66.48139954 126.85565948]
[53.88496780 88.09883881]
[53.88496780 103.09883881]
[53.88496780 118.09883881]
[53.88496780 133.09884644]
[53.88496780 148.09884644]
[53.88496780 163.09884644]
[53.88496780 178.09884644]
[53.88496780 193.09884644]
[53.88496780 208.09884644]
[53.88496780 223.09884644]
[53.88496780 238.09884644]
[53.88496780 253.09884644]
[68.42485046 257.16015625]
[81.32923126 264.99465942]
[91.64051819 276.02099609]
[98.59353638 289.42092896]
[101.67234039 304.20007324]
[100.64844513 319.26174927]
[95.59784698 333.48828125]
[86.89532471 345.82394409]
[75.18666077 355.35336304]
[61.34072113 361.36938477]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 47]
[24 46]
[25 45]
[26 44]
[27 43]
[28 42]
[48 60]
[49 59]
[50 58]
[51 57]
[52 56]
[66 84]
[67 83]
[68 82]
[91 117]
[92 116]
[93 115]
[94 114]
[98 108]
[99 107]
[100 106]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
