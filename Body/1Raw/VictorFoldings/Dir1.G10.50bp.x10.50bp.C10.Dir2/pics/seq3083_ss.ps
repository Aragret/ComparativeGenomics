%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUACUUCGGGGGGGGGGACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCxxxxxxxxxxCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCCCCCCCCCCCGGCCUGCUUC\
) } def
/len { sequence length } bind def

/coor [
[64.17605591 381.73089600]
[51.61782837 373.37973022]
[41.53160858 362.16729736]
[34.55141449 348.79837036]
[31.11602974 334.11337280]
[31.44140625 319.03543091]
[35.50709152 304.51229858]
[43.05751038 291.45697021]
[53.61803818 280.69006348]
[66.52483368 272.88842773]
[80.96656036 268.54248047]
[80.34258270 253.55546570]
[79.71860504 238.56845093]
[79.09462738 223.58143616]
[78.47064972 208.59442139]
[77.84667206 193.60739136]
[77.22270203 178.62037659]
[76.59872437 163.63336182]
[75.97474670 148.64634705]
[75.35076904 133.65933228]
[74.72679138 118.67231750]
[68.95051575 104.82910156]
[58.73703766 93.84343719]
[48.40983200 82.96460724]
[37.97002029 72.19380188]
[27.53020668 61.42299271]
[15.76394272 70.74681091]
[3.12778354 78.85274506]
[-10.25268269 85.66021729]
[-24.24447060 91.10158539]
[-38.70852280 95.12276459]
[-53.50107956 97.68378448]
[-68.47512817 98.75919342]
[-83.48184204 98.33830261]
[-98.37207794 96.42530060]
[-112.99783325 93.03919983]
[-127.21376801 88.21364594]
[-140.87857056 81.99660492]
[-153.85646057 74.44985962]
[-166.01841736 65.64842987]
[-177.24359131 55.67977524]
[-187.42041016 44.64297867]
[-196.44773865 32.64773178]
[-204.23585510 19.81324577]
[-210.70733643 6.26708651]
[-215.79788208 -7.85611868]
[-219.45690918 -22.41600227]
[-221.64802551 -37.26785660]
[-222.34947205 -52.26407623]
[-221.55426025 -67.25561523]
[-219.27030945 -82.09348297]
[-215.52032471 -96.63019562]
[-210.34155273 -110.72129822]
[-203.78549194 -124.22672272]
[-195.91726685 -137.01225281]
[-186.81510925 -148.95082092]
[-176.56947327 -159.92376709]
[-165.28218079 -169.82202148]
[-153.06541443 -178.54724121]
[-140.04060364 -186.01268005]
[-126.33718109 -192.14414978]
[-112.09135437 -196.88070679]
[-97.44470215 -200.17527771]
[-82.54280090 -201.99513245]
[-67.53375244 -202.32217407]
[-52.56671906 -201.15315247]
[-37.79046249 -198.49967957]
[-23.35184288 -194.38813782]
[-9.39435291 -188.85937500]
[3.94328213 -181.96836853]
[16.52850533 -173.78358459]
[28.23623466 -164.38636780]
[38.95011139 -153.87011719]
[48.56365585 -142.33935547]
[56.98131561 -129.90869141]
[64.11943817 -116.70164490]
[69.90706635 -102.84950256]
[74.28669739 -88.48992157]
[77.21478271 -73.76562500]
[78.66223907 -58.82295227]
[78.61466980 -43.81041336]
[77.07254791 -28.87721252]
[74.05120850 -14.17176723]
[69.58067322 0.15976830]
[63.70537186 13.97495747]
[56.48370361 27.13649559]
[47.98743820 39.51357269]
[38.30101395 50.98318100]
[48.74082947 61.75399017]
[59.18064117 72.52479553]
[66.13933563 75.15579987]
[69.72270203 83.62995148]
[79.93618011 94.61561584]
[96.98140717 81.63805389]
[113.68096161 90.87826538]
[128.58287048 89.16557312]
[134.19963074 85.48325348]
[139.96041870 85.27207947]
[144.13854980 87.70492554]
[159.09880066 86.61360931]
[174.05905151 85.52230072]
[189.01930237 84.43099213]
[203.97953796 83.33968353]
[218.93978882 82.24836731]
[223.68655396 67.80757141]
[233.60202026 56.28577042]
[247.17417908 49.43996811]
[262.33337402 48.31409836]
[276.76791382 53.07984161]
[288.27664185 63.01046371]
[295.10458374 76.59161377]
[296.21051025 91.75226593]
[291.42578125 106.18052673]
[281.48004150 117.67620087]
[267.88992310 124.48627472]
[252.72782898 125.57225800]
[238.30587769 120.76855469]
[226.82328796 110.80768585]
[220.03109741 97.20861816]
[205.07086182 98.29992676]
[190.11061096 99.39124298]
[175.15036011 100.48255157]
[160.19010925 101.57386017]
[145.22985840 102.66516876]
[130.29554749 104.06747437]
[115.39365387 105.78016663]
[106.32467651 117.50061035]
[89.71380615 118.04833984]
[90.33778381 133.03535461]
[90.96176147 148.02236938]
[91.58573914 163.00938416]
[92.20971680 177.99639893]
[92.83369446 192.98341370]
[93.45767212 207.97044373]
[94.08164978 222.95745850]
[94.70562744 237.94447327]
[95.32960510 252.93148804]
[95.95357513 267.91848755]
[110.70658112 271.04895020]
[124.21721649 277.75070190]
[135.63619995 287.60247803]
[144.24571228 299.98501587]
[149.50456238 314.11990356]
[151.08216858 329.11865234]
[148.87936401 344.03839111]
[143.03460693 357.94125366]
[133.91532898 369.95330811]
[122.09476471 379.31945801]
[108.31594849 385.45095825]
[93.44505310 387.96237183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 93]
[23 92]
[24 90]
[25 89]
[26 88]
[95 126]
[96 125]
[99 124]
[100 123]
[101 122]
[102 121]
[103 120]
[104 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
