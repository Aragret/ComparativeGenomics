%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAACUAACGGGGGGGGGGUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCxxxxxxxxxxAAAAACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCCCCCCCCCCCAAAACUAAC\
) } def
/len { sequence length } bind def

/coor [
[81.27983093 375.75860596]
[67.43389893 369.74258423]
[55.72523499 360.21316528]
[47.02270889 347.87750244]
[41.97210693 333.65097046]
[40.94821548 318.58929443]
[44.02701569 303.81011963]
[50.98003769 290.41018677]
[61.29132080 279.38388062]
[74.19570160 271.54934692]
[88.73558807 267.48803711]
[88.73558807 252.48805237]
[88.73558807 237.48805237]
[88.73558807 222.48805237]
[88.73558807 207.48805237]
[88.73558807 192.48805237]
[88.73558807 177.48805237]
[88.73558807 162.48805237]
[88.73558807 147.48805237]
[88.73558807 132.48805237]
[88.73558807 117.48804474]
[77.09552765 126.94895935]
[62.11098099 126.26825714]
[51.37665558 115.79093170]
[50.33309937 100.82727814]
[59.50921631 88.96141052]
[74.25422668 86.20737457]
[87.09497070 93.96121216]
[78.32876587 81.78937531]
[69.56255341 69.61753845]
[58.06075287 59.98900986]
[43.31060791 64.99610901]
[29.68758392 58.22352600]
[25.00498199 44.13066483]
[11.48079205 37.64249802]
[-2.04339767 31.15433311]
[-15.56758785 24.66616821]
[-29.09177780 18.17800331]
[-42.61596680 11.68983746]
[-56.14015579 5.20167208]
[-66.95840454 15.81964588]
[-80.75707245 22.09439468]
[-95.86991882 23.26820946]
[-110.47197723 19.19935036]
[-122.79998779 10.37914944]
[-131.36528015 -2.12731075]
[-135.13356018 -16.80981445]
[-133.64978027 -31.89537621]
[-127.09311676 -45.56234360]
[-116.25532532 -56.16036224]
[-102.44510651 -62.40967178]
[-87.33013153 -63.55563354]
[-72.73559570 -59.45987320]
[-60.42385864 -50.61696625]
[-51.88162613 -38.09474182]
[-48.14041519 -23.40532112]
[-49.65199280 -8.32251740]
[-36.12780380 -1.83435249]
[-22.60361290 4.65381241]
[-9.07942295 11.14197731]
[4.44476748 17.63014221]
[17.96895790 24.11830711]
[31.49314690 30.60647392]
[45.41564941 25.43931770]
[59.22352982 31.82658195]
[64.54891968 46.46482086]
[56.35867691 33.89819717]
[51.34949493 19.75931358]
[49.80168152 4.83938408]
[51.80186081 -10.02666092]
[57.23809433 -24.00690842]
[65.80617523 -36.31901932]
[77.02661896 -46.27399826]
[90.27153015 -53.31475449]
[104.79972076 -57.04729462]
[119.79817200 -57.26273346]
[134.42756653 -53.94901657]
[147.86924744 -47.29158783]
[159.37098694 -37.66299438]
[168.28916931 -25.60205841]
[174.12469482 -11.78371811]
[176.55104065 3.01874352]
[175.43240356 17.97697449]
[170.83139038 32.25390244]
[163.00546265 45.05057907]
[152.39259338 55.65090179]
[139.58665466 63.46166611]
[125.30429077 68.04577637]
[110.34474945 69.14670563]
[95.54516602 66.70285034]
[81.73439026 60.85132980]
[90.50060272 73.02316284]
[99.26680756 85.19499969]
[112.85775757 91.54212952]
[127.81800842 90.45082092]
[142.77825928 89.35951233]
[157.73851013 88.26820374]
[172.69874573 87.17688751]
[187.60066223 85.46420288]
[202.41841125 83.13309479]
[217.23617554 80.80199432]
[220.11962891 65.92041016]
[227.92164612 52.92409515]
[239.70010376 43.38241196]
[254.03269958 38.44757080]
[269.18869019 38.71547318]
[283.33792114 44.15377045]
[294.77178955 54.10575867]
[302.10964966 67.36968994]
[304.46536255 82.34388733]
[301.55447388 97.22013092]
[293.72851562 110.20204163]
[281.93249512 119.72200775]
[267.59085083 124.63042450]
[252.43536377 124.33459473]
[238.29618835 118.87023163]
[226.88066101 108.89718628]
[219.56727600 95.61975098]
[204.74951172 97.95085144]
[189.93176270 100.28195953]
[188.16546631 102.53752136]
[185.37051392 104.20552063]
[181.77502441 104.87957764]
[177.75375366 104.24678802]
[173.79006958 102.13713837]
[158.82981873 103.22844696]
[143.86956787 104.31976318]
[128.90931702 105.41107178]
[113.94906616 106.50238037]
[103.73558807 117.48804474]
[103.73558807 132.48805237]
[103.73558807 147.48805237]
[103.73558807 162.48805237]
[103.73558807 177.48805237]
[103.73558807 192.48805237]
[103.73558807 207.48805237]
[103.73558807 222.48805237]
[103.73558807 237.48805237]
[103.73558807 252.48805237]
[103.73558807 267.48803711]
[118.27547455 271.54934692]
[131.17985535 279.38388062]
[141.49113464 290.41018677]
[148.44416809 303.81011963]
[151.52296448 318.58929443]
[150.49906921 333.65097046]
[145.44847107 347.87750244]
[136.74594116 360.21316528]
[125.03728485 369.74258423]
[111.19134521 375.75860596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[28 93]
[29 92]
[30 91]
[31 66]
[34 63]
[35 62]
[36 61]
[37 60]
[38 59]
[39 58]
[40 57]
[94 129]
[95 128]
[96 127]
[97 126]
[98 125]
[99 120]
[100 119]
[101 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
