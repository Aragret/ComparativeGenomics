%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCAAACUCGGGGGGGGGGAAACUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUxxxxxxxxxxAUAAAUUAUUCAGCUUCCUACACUAUUAAAGUUUACCACAACCACCACCCCCCCCCCCCCCAUCAUACUC\
) } def
/len { sequence length } bind def

/coor [
[114.53812408 425.36959839]
[102.65385437 416.09451294]
[93.33514404 404.24438477]
[87.12377930 390.50823975]
[84.38087463 375.68460083]
[85.26590729 360.63534546]
[89.72740936 346.23541260]
[97.50601196 333.32196045]
[108.14945984 322.64581299]
[121.03897095 314.82760620]
[135.42515564 310.32196045]
[134.48953247 295.35116577]
[133.55389404 280.38037109]
[132.61827087 265.40957642]
[131.68264771 250.43878174]
[130.74700928 235.46798706]
[129.81138611 220.49720764]
[128.87576294 205.52641296]
[127.94013214 190.55561829]
[127.00450134 175.58482361]
[124.05902100 160.87686157]
[119.15747070 146.70030212]
[114.25592041 132.52374268]
[109.35437012 118.34719086]
[104.45281982 104.17063141]
[105.50891113 126.87359619]
[80.39582062 144.64968872]
[65.62976837 147.28854370]
[50.86370850 149.92741394]
[36.09765244 152.56626892]
[27.26941299 165.67495728]
[11.74187756 168.61964417]
[-1.27274048 159.65330505]
[-4.05309868 144.09550476]
[5.05033970 131.17642212]
[20.63666534 128.56069946]
[33.45878983 137.80021667]
[48.22484589 135.16136169]
[62.99090195 132.52249146]
[77.75695801 129.88362122]
[78.61330414 122.43267822]
[81.18233490 100.07981873]
[67.39995575 94.15985870]
[53.61757278 88.23989105]
[39.83518982 82.31993103]
[23.62239456 84.78513336]
[13.59378910 71.80980682]
[20.06594467 56.74185562]
[36.38086319 55.08189392]
[45.75515366 68.53755188]
[59.53753662 74.45751190]
[73.31991577 80.37747955]
[87.10230255 86.29743958]
[99.45387268 77.78634644]
[98.82989502 62.79933167]
[98.20591736 47.81231689]
[83.28557587 45.95941162]
[68.87374878 41.67582321]
[55.36360168 35.07841110]
[43.12370682 26.34716034]
[32.48796844 15.72026253]
[23.74654198 3.48762798]
[17.13790131 -10.01702785]
[12.84233284 -24.42528725]
[10.97702217 -39.34408188]
[11.59285831 -54.36642075]
[14.67303944 -69.08248138]
[20.13353729 -83.09078979]
[27.82538223 -96.00920105]
[37.53873825 -107.48529053]
[49.00862122 -117.20597076]
[61.92211533 -124.90607452]
[75.92694092 -130.37551880]
[90.64102173 -133.46510315]
[105.66296387 -134.09053040]
[120.58294678 -132.23474121]
[134.99395752 -127.94837952]
[148.50282288 -121.34836578]
[160.74104309 -112.61476135]
[171.37472534 -101.98580933]
[180.11380005 -89.75149536]
[186.71983337 -76.24556732]
[191.01263428 -61.83647919]
[192.87506104 -46.91732407]
[192.25633240 -31.89510536]
[189.17332458 -17.17964172]
[183.71012878 -3.17238045]
[176.01579285 9.74454880]
[166.30021667 21.21876335]
[154.82847595 30.93723869]
[141.91348267 38.63484955]
[127.90761566 44.10159302]
[113.19293213 47.18833923]
[113.81690979 62.17535400]
[114.44088745 77.16236877]
[118.73937988 62.79146576]
[128.06788635 51.04501724]
[141.09185791 43.60349274]
[155.94805908 41.53147888]
[170.51115417 45.12540054]
[182.69772339 53.87111282]
[190.76434326 66.51744080]
[193.55699158 81.25518799]
[190.67616272 95.97594452]
[182.53396606 108.57375336]
[170.29525757 117.24635315]
[155.71090698 120.75302887]
[140.86738586 118.59210968]
[127.88819885 111.07274628]
[118.62937164 99.26908112]
[123.53092194 113.44564056]
[128.43247986 127.62220001]
[133.33403015 141.79875183]
[138.23558044 155.97531128]
[142.24087524 141.51994324]
[151.69180298 129.87176514]
[165.01171875 122.97395325]
[179.97856140 121.97720337]
[194.09553528 127.04781342]
[205.00759888 137.33987427]
[210.89439392 151.13645935]
[210.77386475 166.13598633]
[204.66610718 179.83616638]
[193.59004211 189.95153809]
[179.39340210 194.79461670]
[164.44450378 193.55747986]
[151.23716736 186.44648743]
[141.97529602 174.64920044]
[142.91091919 189.61999512]
[143.84655762 204.59077454]
[144.78218079 219.56156921]
[145.71780396 234.53236389]
[146.65344238 249.50315857]
[147.58906555 264.47393799]
[148.52468872 279.44473267]
[149.46032715 294.41552734]
[150.39595032 309.38632202]
[165.23118591 312.06573486]
[178.99382019 318.21826172]
[190.88371277 327.48614502]
[200.20959473 339.33059692]
[206.42929077 353.06298828]
[209.18118286 367.88497925]
[208.30528259 382.93475342]
[203.85249329 397.33740234]
[196.08172607 410.25555420]
[185.44474792 420.93817139]
[172.55998230 428.76416016]
[158.17652893 433.27853394]
[143.13063049 434.21887207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 114]
[22 113]
[23 112]
[24 111]
[25 110]
[27 40]
[28 39]
[29 38]
[30 37]
[42 53]
[43 52]
[44 51]
[45 50]
[54 95]
[55 94]
[56 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
