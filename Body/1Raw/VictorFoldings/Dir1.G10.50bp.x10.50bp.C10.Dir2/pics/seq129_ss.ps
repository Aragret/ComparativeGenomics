%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUAUUUAUCGGGGGGGGGGGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGUUAAUxxxxxxxxxxCGUAAAUUAUGGCUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAACCCCCCCCCCUAUUCUUUAUC\
) } def
/len { sequence length } bind def

/coor [
[25.87779045 492.25073242]
[11.31793213 488.34252930]
[-1.88321114 481.06289673]
[-12.95814323 470.83502197]
[-21.26298141 458.25357056]
[-26.31489563 444.04998779]
[-27.82017136 429.05004883]
[-25.69129372 414.12588501]
[-20.05203438 400.14508057]
[-11.23025322 387.92053223]
[0.26116508 378.16293335]
[13.75412369 371.43960571]
[28.46415901 368.14135742]
[28.77213669 353.14453125]
[29.08011436 338.14770508]
[29.38809204 323.15084839]
[29.69606972 308.15402222]
[30.00404739 293.15716553]
[30.31202507 278.16033936]
[30.62000275 263.16351318]
[30.92798042 248.16665649]
[31.23595810 233.16983032]
[22.83967018 245.59971619]
[10.57743549 254.23902893]
[-3.95316005 257.96215820]
[-18.85899734 256.28408813]
[-32.19807053 249.42338562]
[-42.23249817 238.27392578]
[-47.65494156 224.28833008]
[-47.75894165 209.28869629]
[-42.53094482 195.22924805]
[-32.65208435 183.94172668]
[-19.40942574 176.89672852]
[-4.52828932 175.01210022]
[10.05253506 178.53340149]
[22.43338585 187.00184631]
[31.00122070 199.31413269]
[34.63976669 213.86587524]
[39.47958374 199.66812134]
[34.42028427 188.63789368]
[38.38365936 176.74407959]
[49.75357437 170.56922913]
[54.88387680 156.47384644]
[60.01417923 142.37844849]
[65.14447784 128.28306580]
[70.27478027 114.18767548]
[67.06578827 99.53495026]
[56.51377106 88.87404633]
[45.96175385 78.21313477]
[35.40974045 67.55222321]
[24.85772514 56.89131546]
[14.30570984 46.23040771]
[3.75369501 35.56949997]
[-6.79832029 24.90859032]
[-17.35033607 14.24768066]
[-33.30281067 10.44628906]
[-37.72700119 -5.34480238]
[-26.07168007 -16.88107300]
[-10.32684231 -12.29499531]
[-6.68942642 3.69566560]
[3.86258864 14.35657406]
[14.41460419 25.01748276]
[24.96661949 35.67839050]
[35.51863480 46.33930206]
[46.07064819 57.00020981]
[56.62266541 67.66111755]
[67.17468262 78.32202911]
[77.72669220 88.98293304]
[92.12203979 79.32516479]
[107.25627136 82.00737000]
[117.80828857 71.34646606]
[103.25308990 74.97222137]
[88.27151489 74.22891235]
[74.14669800 69.18019104]
[62.08838654 60.25847626]
[53.12933731 48.22787476]
[48.03686142 34.11877441]
[47.24711609 19.13957787]
[50.82774353 4.57320881]
[58.47207260 -8.33276844]
[69.52539062 -18.47299385]
[83.04100800 -24.97899055]
[97.86136627 -27.29353905]
[112.71713257 -25.21840286]
[126.33596039 -18.93131447]
[137.55143738 -8.97074127]
[145.40299988 3.81022191]
[149.21817017 18.31692505]
[148.67021179 33.30691147]
[143.80603027 47.49633789]
[135.04072571 59.67148590]
[148.85430908 53.82469559]
[162.66789246 47.97790909]
[176.48147583 42.13112259]
[190.23429871 36.14282608]
[203.92492676 30.01365089]
[217.61555481 23.88447571]
[231.30618286 17.75530243]
[231.67994690 2.49676251]
[238.64479065 -11.08461666]
[250.81781006 -20.29224205]
[265.78204346 -23.29793167]
[280.56634521 -19.50490570]
[292.23529053 -9.66627121]
[298.47198486 4.26450396]
[298.03811646 19.52145386]
[291.01986694 33.07530212]
[278.81066895 42.23491669]
[263.83471680 45.18165588]
[249.06544495 41.33043671]
[237.43534851 31.44592857]
[223.74472046 37.57510376]
[210.05410767 43.70427704]
[196.36347961 49.83345032]
[191.51370239 55.47187424]
[182.32826233 55.94470215]
[168.51467896 61.79149246]
[154.70109558 67.63828278]
[140.88751221 73.48506927]
[128.46919250 81.89847565]
[117.91718292 92.55938721]
[118.74079132 109.94670868]
[104.60524750 122.56786346]
[84.37017059 119.31797791]
[79.23986816 133.41336060]
[74.10956573 147.50875854]
[68.97926331 161.60414124]
[63.84896088 175.69953918]
[67.48677826 193.72166443]
[53.67733383 204.50793457]
[48.83751678 218.70568848]
[46.23279572 233.47779846]
[45.92481995 248.47463989]
[45.61684036 263.47146606]
[45.30886459 278.46832275]
[45.00088501 293.46514893]
[44.69290924 308.46200562]
[44.38492966 323.45883179]
[44.07695389 338.45565796]
[43.76897430 353.45251465]
[43.46099854 368.44934082]
[58.02322006 372.34872437]
[71.22877502 379.62036133]
[82.30990601 389.84149170]
[90.62237549 402.41793823]
[95.68289185 416.61843872]
[97.19726562 431.61743164]
[95.07743835 446.54290771]
[89.44665527 460.52709961]
[80.63228607 472.75701904]
[69.14678192 482.52157593]
[55.65790558 489.25311279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[38 131]
[39 130]
[42 128]
[43 127]
[44 126]
[45 125]
[46 124]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[70 121]
[71 120]
[91 119]
[92 118]
[93 117]
[94 116]
[95 114]
[96 113]
[97 112]
[98 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
