%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAAAACCCGGGGGGGGGGCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGGAxxxxxxxxxxUCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUAACAUGCCCCCCCCCCACUAACACCC\
) } def
/len { sequence length } bind def

/coor [
[93.03538513 668.51562500]
[79.18944550 662.49957275]
[67.48078156 652.97015381]
[58.77825928 640.63452148]
[53.72765732 626.40795898]
[52.70376587 611.34631348]
[55.78256607 596.56713867]
[62.73558807 583.16723633]
[73.04686737 572.14086914]
[85.95124817 564.30639648]
[100.49114227 560.24505615]
[100.49114227 545.24505615]
[100.49114227 530.24505615]
[100.49114227 515.24505615]
[100.49114227 500.24505615]
[100.49114227 485.24505615]
[100.49114227 470.24505615]
[100.49114227 455.24505615]
[100.49114227 440.24505615]
[100.49114227 425.24505615]
[100.49114227 410.24505615]
[85.76132965 407.51138306]
[71.78095245 402.11611938]
[59.02667618 394.24163818]
[47.93362808 384.15484619]
[38.88059998 372.19821167]
[32.17707443 358.77804565]
[28.05265999 344.35076904]
[26.64923859 329.40725708]
[28.01605988 314.45639038]
[32.10803604 300.00741577]
[38.78721619 286.55285645]
[47.82744217 274.55157471]
[58.92200089 264.41317749]
[71.69403839 256.48400879]
[85.70934296 251.03540039]
[100.49114227 248.25425720]
[100.49114227 233.25425720]
[100.49114227 218.25425720]
[99.86716461 203.26724243]
[98.62028503 188.31915283]
[97.37341309 173.37106323]
[88.32144928 165.28593445]
[87.19506073 152.79792786]
[95.14705658 142.58912659]
[94.21142578 127.61833954]
[93.27580261 112.64755249]
[85.70394897 100.89346313]
[91.75341034 88.28807831]
[90.81777954 73.31728363]
[87.85189819 68.86496735]
[87.01944733 64.18956757]
[88.03884125 60.15688324]
[90.32052612 57.38896179]
[82.58322906 43.58879089]
[90.32052612 30.86151695]
[90.32052612 15.86151791]
[90.32052612 0.86151755]
[81.74723816 -8.83139706]
[82.09249115 -21.36534119]
[90.62252045 -29.99934387]
[90.93457794 -44.99609756]
[91.24662781 -59.99285126]
[78.91678619 -72.35861969]
[79.30485535 -89.47976685]
[91.68562317 -100.81884003]
[91.68562317 -115.81884003]
[91.68562317 -130.81883240]
[91.68562317 -145.81883240]
[91.68562317 -160.81883240]
[78.34449005 -168.42869568]
[70.60951996 -181.69767761]
[70.56137848 -197.05648804]
[78.21301270 -210.37370300]
[91.50617218 -218.06703186]
[106.86506653 -218.06703186]
[120.15822601 -210.37370300]
[127.80986023 -197.05648804]
[127.76171875 -181.69767761]
[120.02674866 -168.42869568]
[106.68562317 -160.81883240]
[106.68562317 -145.81883240]
[106.68562317 -130.81883240]
[106.68562317 -115.81884003]
[106.68562317 -100.81884003]
[117.00659943 -93.04232788]
[121.00457001 -80.54870605]
[116.99845123 -67.85308075]
[106.24338531 -59.68079376]
[105.93132782 -44.68404007]
[105.61927032 -29.68728828]
[114.90325165 -14.82769108]
[105.32052612 0.86151755]
[105.32052612 15.86151791]
[105.32052612 30.86151695]
[113.05783081 43.58879089]
[105.32052612 57.38896179]
[105.78857422 72.38166046]
[106.72419739 87.35244751]
[114.29605103 99.10653687]
[108.24658966 111.71192169]
[109.18222046 126.68271637]
[110.11785126 141.65350342]
[120.66053009 156.71443176]
[112.32150269 172.12419128]
[113.56837463 187.07228088]
[114.81524658 202.02037048]
[117.51525116 205.60804749]
[118.76528168 209.48213196]
[118.65818024 213.13868713]
[117.44480133 216.15888977]
[115.49114227 218.25425720]
[115.49114227 233.25425720]
[115.49114227 248.25425720]
[130.27293396 251.03540039]
[144.28823853 256.48400879]
[157.06027222 264.41317749]
[168.15483093 274.55157471]
[177.19505310 286.55285645]
[183.87423706 300.00741577]
[187.96621704 314.45639038]
[189.33303833 329.40725708]
[187.92961121 344.35076904]
[183.80520630 358.77804565]
[177.10168457 372.19821167]
[168.04864502 384.15484619]
[156.95559692 394.24163818]
[144.20132446 402.11611938]
[130.22094727 407.51138306]
[115.49114227 410.24505615]
[115.49114227 425.24505615]
[115.49114227 440.24505615]
[115.49114227 455.24505615]
[115.49114227 470.24505615]
[115.49114227 485.24505615]
[115.49114227 500.24505615]
[115.49114227 515.24505615]
[115.49114227 530.24505615]
[115.49114227 545.24505615]
[115.49114227 560.24505615]
[130.03102112 564.30639648]
[142.93540955 572.14086914]
[153.24668884 583.16723633]
[160.19970703 596.56713867]
[163.27851868 611.34631348]
[162.25462341 626.40795898]
[157.20402527 640.63452148]
[148.50149536 652.97015381]
[136.79283142 662.49957275]
[122.94689178 668.51562500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[37 114]
[38 113]
[39 112]
[40 107]
[41 106]
[42 105]
[45 103]
[46 102]
[47 101]
[49 99]
[50 98]
[54 97]
[56 95]
[57 94]
[58 93]
[61 91]
[62 90]
[63 89]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
