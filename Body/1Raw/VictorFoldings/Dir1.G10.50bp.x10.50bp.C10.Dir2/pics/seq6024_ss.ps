%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACCCCACUCUGGGGGGGGGGGCAUCAACUGAACGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUACUAxxxxxxxxxxCACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAACCCCCCCCCCAUAACCCCACCCU\
) } def
/len { sequence length } bind def

/coor [
[85.40228271 453.17538452]
[70.74062347 449.75054932]
[57.11158752 443.35186768]
[45.11097336 434.25906372]
[35.26340103 422.86965942]
[27.99935913 409.68148804]
[23.63640594 395.27114868]
[22.36526680 380.26855469]
[24.24151230 365.32955933]
[29.18312073 351.10723877]
[36.97406769 338.22335815]
[47.27376175 327.24108887]
[59.63195038 318.64056396]
[73.50838470 312.79779053]
[88.29644775 309.96810913]
[88.59658051 294.97113037]
[88.89670563 279.97412109]
[89.19683838 264.97714233]
[89.49697113 249.98013306]
[89.79710388 234.98313904]
[90.09723663 219.98614502]
[90.39736938 204.98913574]
[90.69750214 189.99214172]
[90.99763489 174.99514771]
[80.52534485 164.46582031]
[80.61608124 149.25245667]
[91.73121643 138.33955383]
[92.03134918 123.34255219]
[85.60343170 120.02780151]
[80.41326904 114.99113464]
[76.90711212 108.66558838]
[61.92587280 109.41565704]
[46.94463730 110.16572571]
[31.96340370 110.91579437]
[22.66821671 123.49090576]
[7.45255232 127.09889221]
[-6.49921942 120.03616333]
[-12.59949780 105.63753510]
[-7.96791744 90.70159149]
[5.20863008 82.28062439]
[20.70858192 84.35076904]
[31.21333694 95.93455505]
[46.19457245 95.18448639]
[61.17580414 94.43442535]
[76.15704346 93.68435669]
[78.34780884 88.18659210]
[81.78511810 83.36893463]
[86.27108765 79.50875854]
[91.54744720 76.82828522]
[97.31043243 75.48183441]
[103.22825623 75.54693604]
[109.62037659 61.97708511]
[116.01249695 48.40723801]
[122.40461731 34.83738708]
[128.79673767 21.26753807]
[134.50230408 7.39503145]
[139.50704956 -6.74542570]
[144.51179504 -20.88588333]
[149.51654053 -35.02634048]
[145.72044373 -53.01850128]
[159.43936157 -63.92361069]
[163.58674622 -78.33885193]
[167.15405273 -92.90849304]
[170.72135925 -107.47812653]
[174.28868103 -122.04776001]
[176.67965698 -136.85597229]
[177.87898254 -151.80795288]
[179.07830811 -166.75993347]
[164.77375793 -171.51844788]
[152.02404785 -179.56257629]
[141.57040405 -190.42465210]
[134.02059937 -203.47317505]
[129.81356812 -217.94950867]
[129.19389343 -233.01202393]
[132.19763184 -247.78501892]
[138.65011597 -261.40957642]
[148.17622375 -273.09362793]
[160.22210693 -282.15783691]
[174.08744812 -288.07522583]
[188.96614075 -290.50180054]
[203.99313354 -289.29647827]
[218.29478455 -284.52929688]
[231.03962708 -276.47741699]
[241.48667908 -265.60900879]
[249.02857971 -252.55590820]
[253.22682190 -238.07702637]
[253.83735657 -223.01412964]
[250.82467651 -208.24298096]
[244.36393738 -194.62231445]
[234.83074951 -182.94406128]
[222.77935791 -173.88714600]
[208.91043091 -167.97814941]
[194.03028870 -165.56060791]
[192.83096313 -150.60862732]
[191.63163757 -135.65664673]
[202.69639587 -145.78437805]
[217.58270264 -147.62773132]
[230.78359985 -140.50477600]
[237.41563416 -127.05056000]
[235.02539062 -112.24222565]
[224.49710083 -101.55787659]
[209.72554016 -98.95002747]
[196.17520142 -105.38339233]
[188.85830688 -118.48044586]
[185.29100037 -103.91081238]
[181.72369385 -89.34117889]
[178.15637207 -74.77154541]
[179.54713440 -72.27644348]
[180.00480652 -69.06516266]
[179.24583435 -65.50099182]
[177.12724304 -62.04496384]
[173.67712402 -59.20280457]
[178.82795715 -48.21898270]
[174.96865845 -36.29482651]
[163.65699768 -30.02159500]
[158.65225220 -15.88113785]
[153.64750671 -1.74068069]
[148.64276123 12.39977646]
[163.18090820 8.70620918]
[175.25588989 17.60535431]
[176.03186035 32.58526993]
[164.94099426 42.68441772]
[150.09902954 40.51275253]
[142.36659241 27.65966034]
[135.97447205 41.22950745]
[129.58235168 54.79935837]
[123.19022369 68.36920929]
[116.79810333 81.93905640]
[124.01506042 105.62592316]
[107.02834320 123.64268494]
[106.72821045 138.63967896]
[117.39782715 149.98855591]
[116.87980652 165.19337463]
[105.99462891 175.29527283]
[105.69449615 190.29228210]
[105.39436340 205.28927612]
[105.09423828 220.28627014]
[104.79410553 235.28326416]
[104.49397278 250.28025818]
[104.19384003 265.27725220]
[103.89370728 280.27426147]
[103.59357452 295.27127075]
[103.29344177 310.26824951]
[117.95645142 313.68731689]
[131.58799744 320.08062744]
[143.59219360 329.16870117]
[153.44424438 340.55426025]
[160.71347046 353.73953247]
[165.08209229 368.14816284]
[166.35913086 383.15026855]
[164.48876953 398.08999634]
[159.55274963 412.31423950]
[151.76687622 425.20120239]
[141.47149658 436.18753052]
[129.11669922 444.79290771]
[115.24256897 450.64114380]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[27 131]
[28 130]
[31 45]
[32 44]
[33 43]
[34 42]
[51 128]
[52 127]
[53 126]
[54 125]
[55 124]
[56 118]
[57 117]
[58 116]
[59 115]
[61 112]
[62 107]
[63 106]
[64 105]
[65 104]
[66 95]
[67 94]
[68 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
