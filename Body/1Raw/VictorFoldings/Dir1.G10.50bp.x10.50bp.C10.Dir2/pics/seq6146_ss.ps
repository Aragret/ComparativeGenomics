%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUACUUCUCGGGGGGGGGGCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUxxxxxxxxxxCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACCCCCCCCCCCUCUACCUCUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 342.16091919]
[71.19830322 336.14489746]
[59.48964310 326.61547852]
[50.78712082 314.27978516]
[45.73651886 300.05328369]
[44.71262741 284.99160767]
[47.79142761 270.21243286]
[54.74444962 256.81250000]
[65.05573273 245.78617859]
[77.96011353 237.95166016]
[92.50000000 233.89035034]
[92.50000000 218.89035034]
[92.50000000 203.89035034]
[92.50000000 188.89035034]
[92.50000000 173.89035034]
[92.50000000 158.89035034]
[92.50000000 143.89035034]
[92.50000000 128.89035034]
[92.50000000 113.89035034]
[81.83837128 103.33905792]
[66.83918762 103.49509430]
[51.83999634 103.65113068]
[36.84080887 103.80716705]
[21.92189598 105.36475372]
[7.21393490 108.31023407]
[-7.49402666 111.25571442]
[-22.20198822 114.20120239]
[-36.90995026 117.14668274]
[-42.44387054 131.54734802]
[-54.89838791 140.65167236]
[-70.29930878 141.55447388]
[-83.73226166 133.96768188]
[-90.91084290 120.31222534]
[-89.54438019 104.94549561]
[-80.06891632 92.77096558]
[-65.50803375 87.67348480]
[-50.50806046 91.27964020]
[-39.85543060 102.43872070]
[-25.14747047 99.49324036]
[-10.43950939 96.54775238]
[4.26845217 93.60227203]
[18.97641373 90.65679169]
[5.89726114 83.31269073]
[-1.26572299 70.13347626]
[-0.31430981 55.16368103]
[8.45952415 42.99734116]
[22.36320114 37.36815262]
[37.12985992 40.00363922]
[48.22779846 50.09500885]
[52.25120544 64.54534149]
[47.96534729 78.92002106]
[36.68477249 88.80798340]
[51.68395996 88.65194702]
[66.68315125 88.49591064]
[81.68233490 88.33987427]
[93.82218170 85.00833130]
[102.36114502 89.54798126]
[112.80096436 78.77717590]
[123.24077606 68.00636292]
[133.68058777 57.23555756]
[144.12039185 46.46474838]
[140.78073120 16.75895500]
[170.63166809 -2.21216702]
[174.63940430 -16.66685486]
[178.64715576 -31.12154388]
[167.57995605 -20.99646378]
[153.86155701 -14.92970657]
[138.92469788 -13.55487823]
[124.32936859 -17.01556778]
[111.59989929 -24.95034027]
[102.06575012 -36.53049469]
[96.72265625 -50.54660797]
[96.12865448 -65.53484344]
[100.34577942 -79.92983246]
[108.93359375 -92.22818756]
[120.99519348 -101.14546204]
[135.27087402 -105.75034332]
[150.26968384 -105.56190491]
[164.42517090 -100.59982300]
[176.25894165 -91.38233948]
[184.53506470 -78.87211609]
[188.38920593 -64.37571716]
[187.41816711 -49.40420151]
[196.18437195 -61.57603836]
[204.95057678 -73.74787140]
[213.71678162 -85.91970825]
[208.73266602 -100.61454773]
[213.36996460 -115.42248535]
[225.84556580 -124.64956665]
[241.36233521 -124.74780273]
[253.95375061 -115.67941284]
[258.77816772 -100.93137360]
[253.98049927 -86.17461395]
[241.40553284 -77.08340454]
[225.88862610 -77.15350342]
[217.12242126 -64.98166656]
[208.35621643 -52.80982971]
[199.58999634 -40.63799286]
[193.10183716 -27.11380386]
[189.09410095 -12.65911484]
[185.08634949 1.79557323]
[189.53253174 7.83556747]
[198.27342224 -4.35446739]
[212.56790161 0.19170316]
[212.66145325 15.19141102]
[198.42488098 19.91555595]
[202.87104797 25.95554924]
[217.86375427 26.42359161]
[232.85644531 26.89163399]
[247.84913635 27.35967636]
[258.13406372 15.58027649]
[273.59231567 13.21884823]
[286.92498779 21.39038467]
[291.83679199 36.23653793]
[286.00851440 50.74740601]
[272.19210815 58.07140350]
[256.91125488 54.75035858]
[247.38110352 42.35237122]
[232.38841248 41.88433075]
[217.39570618 41.41628647]
[202.40301514 40.94824600]
[197.03999329 50.62790680]
[189.32151794 57.78736877]
[180.24064636 61.95155334]
[170.84536743 62.99903870]
[162.12171936 61.14779663]
[154.89120483 56.90456009]
[144.45140076 67.67536926]
[134.01158142 78.44617462]
[123.57176971 89.21698761]
[113.13195801 99.98779297]
[107.50000000 113.89035034]
[107.50000000 128.89035034]
[107.50000000 143.89035034]
[107.50000000 158.89035034]
[107.50000000 173.89035034]
[107.50000000 188.89035034]
[107.50000000 203.89035034]
[107.50000000 218.89035034]
[107.50000000 233.89035034]
[122.03988647 237.95166016]
[134.94427490 245.78617859]
[145.25555420 256.81250000]
[152.20857239 270.21243286]
[155.28736877 284.99160767]
[154.26348877 300.05328369]
[149.21287537 314.27978516]
[140.51036072 326.61547852]
[128.80169678 336.14489746]
[114.95575714 342.16091919]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 55]
[21 54]
[22 53]
[23 52]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[57 131]
[58 130]
[59 129]
[60 128]
[61 127]
[63 101]
[64 100]
[65 99]
[83 98]
[84 97]
[85 96]
[86 95]
[107 121]
[108 120]
[109 119]
[110 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
