%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAACCCUGGGGGGGGGGCGUUCCACAGAAGCUGCCAUCAAGUAUUUCCUCACGCAAGCAACCGCAUCxxxxxxxxxxAAUCAACGCCCAUAAUCAUACAAAGCCCCCGCACCAAUAGGAUCCUCCCGCCCCCCCCCCAAUCAACCCU\
) } def
/len { sequence length } bind def

/coor [
[84.70133209 427.00259399]
[70.85539246 420.98657227]
[59.14673233 411.45715332]
[50.44421005 399.12149048]
[45.39360809 384.89498901]
[44.36971664 369.83328247]
[47.44851685 355.05413818]
[54.40153885 341.65420532]
[64.71282196 330.62786865]
[77.61720276 322.79336548]
[92.15708923 318.73205566]
[92.15708923 303.73205566]
[92.15708923 288.73205566]
[92.15708923 273.73205566]
[92.15708923 258.73205566]
[92.15708923 243.73205566]
[92.15708923 228.73205566]
[92.15708923 213.73205566]
[92.15708923 198.73205566]
[92.15708923 183.73205566]
[92.15708923 168.73205566]
[92.15708923 153.73205566]
[79.54595947 145.61050415]
[65.88971710 151.81591797]
[52.23347855 158.02131653]
[43.14114380 171.66908264]
[26.79522324 170.34889221]
[20.01099777 155.41885376]
[29.76749802 142.23770142]
[46.02807236 144.36508179]
[59.68431473 138.15966797]
[73.34055328 131.95426941]
[62.04917145 106.10528564]
[70.05768585 81.37443542]
[90.56864166 69.33090973]
[89.63301849 54.36011505]
[88.69738770 39.38932419]
[73.69191742 39.06911850]
[58.76587677 37.49440384]
[44.02394867 34.67622375]
[29.56954575 30.63434219]
[15.50405693 25.39711380]
[1.92614162 19.00127602]
[-11.06895924 11.49168873]
[-23.39009285 2.92102885]
[-34.95083237 -6.65058613]
[-45.67008972 -17.15601730]
[-55.47267532 -28.52157402]
[-64.28982544 -40.66753769]
[-72.05970001 -53.50870514]
[-78.72779083 -66.95500946]
[-84.24732971 -80.91213226]
[-88.57959747 -95.28217316]
[-91.69420624 -109.96432495]
[-93.56931305 -124.85561371]
[-94.19176483 -139.85159302]
[-93.55719757 -154.84704590]
[-91.67005157 -169.73681641]
[-88.54357147 -184.41645813]
[-84.19968414 -198.78297424]
[-78.66886139 -212.73564148]
[-71.98990631 -226.17654419]
[-64.20965576 -239.01142883]
[-55.38268661 -251.15025330]
[-45.57091904 -262.50790405]
[-34.84317398 -273.00463867]
[-23.27469826 -282.56692505]
[-10.94664097 -291.12762451]
[2.05452657 -298.62670898]
[15.63760853 -305.01156616]
[29.70732689 -310.23739624]
[44.16499329 -314.26760864]
[58.90919113 -317.07385254]
[73.83650208 -318.63650513]
[88.84222412 -318.94458008]
[103.82109833 -317.99594116]
[118.66805267 -315.79718018]
[133.27894592 -312.36376953]
[147.55130005 -307.71978760]
[161.38499451 -301.89779663]
[174.68298340 -294.93865967]
[187.35202026 -286.89117432]
[199.30322266 -277.81176758]
[210.45274353 -267.76416016]
[220.72239685 -256.81881714]
[230.04014587 -245.05249023]
[238.34063721 -232.54776001]
[245.56562805 -219.39230347]
[251.66445923 -205.67840576]
[256.59432983 -191.50227356]
[260.32067871 -176.96333313]
[262.81735229 -162.16355896]
[264.06686401 -147.20677185]
[264.06042480 -132.19789124]
[262.79809570 -117.24219513]
[260.28872681 -102.44457245]
[256.54989624 -87.90883636]
[251.60784912 -73.73693085]
[245.49726868 -60.02827835]
[238.26098633 -46.87902451]
[229.94976807 -34.38141251]
[220.62193298 -22.62309837]
[210.34289551 -11.68656445]
[199.18473816 -1.64852130]
[187.22575378 7.42061901]
[174.54983521 15.45724201]
[161.24586487 22.40497589]
[147.40718079 28.21508789]
[133.13084412 32.84682083]
[118.51701355 36.26768875]
[103.66817474 38.45369720]
[104.60380554 53.42448807]
[105.53943634 68.39527893]
[116.02433777 70.64067841]
[125.58573151 76.39850616]
[133.04161072 85.28508759]
[137.36956787 96.51937866]
[137.83949280 108.98892212]
[134.11938477 121.35951233]
[126.34018707 132.21794128]
[139.86437988 138.70611572]
[153.38856506 145.19427490]
[170.28463745 146.59394836]
[173.61695862 163.21717834]
[158.56585693 171.02104187]
[146.90040588 158.71846008]
[133.37620544 152.23030090]
[119.85202026 145.74214172]
[107.15708923 153.73205566]
[107.15708923 168.73205566]
[107.15708923 183.73205566]
[107.15708923 198.73205566]
[107.15708923 213.73205566]
[107.15708923 228.73205566]
[107.15708923 243.73205566]
[107.15708923 258.73205566]
[107.15708923 273.73205566]
[107.15708923 288.73205566]
[107.15708923 303.73205566]
[107.15708923 318.73205566]
[121.69697571 322.79336548]
[134.60136414 330.62786865]
[144.91264343 341.65420532]
[151.86566162 355.05413818]
[154.94445801 369.83328247]
[153.92057800 384.89498901]
[148.86996460 399.12149048]
[140.16744995 411.45715332]
[128.45878601 420.98657227]
[114.61284637 427.00259399]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 32]
[24 31]
[25 30]
[35 113]
[36 112]
[37 111]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
