%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACAACACGGGGGGGGGGUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCxxxxxxxxxxUCCUACACUAUUAAAGUUUACCACAACCACCACCCCAUCAUACUCUUUCACCCCCCCCCCCCCACAGCAC\
) } def
/len { sequence length } bind def

/coor [
[65.78069305 407.27935791]
[51.93475342 401.26333618]
[40.22609329 391.73391724]
[31.52356720 379.39825439]
[26.47296524 365.17172241]
[25.44907570 350.11004639]
[28.52787399 335.33087158]
[35.48089600 321.93096924]
[45.79217911 310.90463257]
[58.69655991 303.07012939]
[73.23645020 299.00878906]
[73.23645020 284.00878906]
[73.23645020 269.00878906]
[73.23645020 254.00880432]
[73.23645020 239.00880432]
[73.23645020 224.00880432]
[73.23645020 209.00880432]
[73.23645020 194.00880432]
[73.23645020 179.00880432]
[73.23645020 164.00880432]
[73.23645020 149.00880432]
[61.15645981 140.11645508]
[46.83386230 144.57327271]
[32.51126480 149.03009033]
[25.19018173 154.60266113]
[17.84415245 153.42729187]
[3.43193626 157.58517456]
[-10.98027992 161.74305725]
[-19.96289635 175.03561401]
[-35.96672440 176.15681458]
[-46.71499634 164.24655151]
[-43.96255493 148.44137573]
[-29.82084274 140.86566162]
[-15.13816738 147.33084106]
[-0.72595114 143.17295837]
[13.68626499 139.01507568]
[28.05444908 134.70748901]
[42.37704468 130.25067139]
[56.69964218 125.79385376]
[53.50378036 117.29631805]
[51.92841339 108.50028992]
[51.97530746 99.70706177]
[53.59151459 91.20864105]
[56.67281723 83.27806091]
[43.73476028 75.68815613]
[30.79670525 68.09825134]
[17.85865021 60.50833893]
[2.62999010 64.73485565]
[-11.08558083 56.88255692]
[-15.15085793 41.61006165]
[-7.15398407 27.97827721]
[8.16063690 24.07469749]
[21.70711136 32.21524811]
[25.44855881 47.57028198]
[38.38661575 55.16019058]
[51.32466888 62.75009918]
[64.26272583 70.34001160]
[69.37947845 65.08222198]
[75.26037598 60.69581604]
[81.75865936 57.29026413]
[88.71216583 54.95055389]
[95.94736481 53.73506546]
[103.28369904 53.67414093]
[110.53808594 54.76929474]
[117.52948761 56.99319839]
[124.08344269 60.29035568]
[133.83108521 48.88933563]
[143.57875061 37.48831558]
[153.32640076 26.08729362]
[143.75740051 13.99005985]
[136.72087097 0.26952586]
[132.48292542 -14.55149269]
[131.20303345 -29.90863800]
[132.92813110 -45.21749878]
[137.59077454 -59.89585495]
[145.01187134 -73.38581085]
[154.90750122 -85.17502594]
[166.89981079 -94.81611633]
[180.53144836 -101.94370270]
[195.28292847 -106.28821564]
[210.59255981 -107.68608093]
[225.87770081 -106.08592224]
[240.55703735 -101.55039978]
[254.07261658 -94.25379181]
[263.58096313 -105.85513306]
[266.34457397 -121.43310547]
[280.39645386 -126.37206268]
[289.90481567 -137.97340393]
[299.41317749 -149.57473755]
[299.26754761 -165.61714172]
[311.80950928 -175.62103271]
[327.41799927 -171.91230774]
[334.11950684 -157.33596802]
[326.77319336 -143.07374573]
[311.01452637 -140.06639099]
[301.50616455 -128.46504211]
[291.99780273 -116.86370087]
[289.91430664 -102.11553955]
[275.18231201 -96.34677124]
[265.67395020 -84.74542999]
[275.05502319 -73.55031586]
[282.20916748 -60.81163025]
[286.88891602 -46.96689987]
[288.93182373 -32.49195480]
[288.26608276 -17.88458824]
[284.91308594 -3.64743662]
[278.98669434 9.72932816]
[270.68939209 21.78486443]
[260.30541992 32.10353851]
[248.19094849 40.32926178]
[234.76191711 46.17776108]
[220.47973633 49.44642639]
[205.83543396 50.02130890]
[191.33277893 47.88111115]
[177.47097778 43.09794617]
[164.72741699 35.83494568]
[154.97976685 47.23596573]
[145.23211670 58.63698578]
[135.48446655 70.03800964]
[141.65797424 78.66836548]
[145.75015259 88.54725647]
[147.51461792 99.17652893]
[146.82339478 110.01104736]
[143.67541504 120.48664093]
[138.19850159 130.04946899]
[130.64454651 138.18533325]
[121.37810516 144.44721985]
[110.85893250 148.47979736]
[99.61917114 150.03948975]
[88.23645020 149.00880432]
[88.23645020 164.00880432]
[88.23645020 179.00880432]
[88.23645020 194.00880432]
[88.23645020 209.00880432]
[88.23645020 224.00880432]
[88.23645020 239.00880432]
[88.23645020 254.00880432]
[88.23645020 269.00878906]
[88.23645020 284.00878906]
[88.23645020 299.00878906]
[102.77633667 303.07012939]
[115.68071747 310.90463257]
[125.99199677 321.93096924]
[132.94502258 335.33087158]
[136.02381897 350.11004639]
[134.99992371 365.17172241]
[129.94932556 379.39825439]
[121.24680328 391.73391724]
[109.53813934 401.26333618]
[95.69219971 407.27935791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 39]
[23 38]
[24 37]
[26 36]
[27 35]
[28 34]
[44 57]
[45 56]
[46 55]
[47 54]
[66 119]
[67 118]
[68 117]
[69 116]
[84 100]
[85 99]
[87 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
