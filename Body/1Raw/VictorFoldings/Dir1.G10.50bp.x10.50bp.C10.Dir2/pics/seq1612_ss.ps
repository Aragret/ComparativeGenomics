%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCUACAAAGGGGGGGGGGGUAAGCGCAAGUACCCACGUAAAGACGUUAGGUCAAGGUGUAGCCCAUGAxxxxxxxxxxAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAUAGGUAGCCCCCCCCCCAGGCGACAAA\
) } def
/len { sequence length } bind def

/coor [
[91.56757355 602.81469727]
[77.72163391 596.79870605]
[66.01296997 587.26928711]
[57.31044769 574.93359375]
[52.25984573 560.70709229]
[51.23595428 545.64538574]
[54.31475449 530.86621094]
[61.26777649 517.46630859]
[71.57906342 506.43997192]
[84.48344421 498.60546875]
[99.02333069 494.54415894]
[99.02333069 479.54415894]
[99.02333069 464.54415894]
[99.02333069 449.54415894]
[99.02333069 434.54415894]
[99.02333069 419.54415894]
[99.02333069 404.54415894]
[99.02333069 389.54415894]
[99.02333069 374.54415894]
[99.02333069 359.54415894]
[91.28602600 346.81686401]
[99.02333069 333.01669312]
[99.02333069 318.01669312]
[83.50466156 314.07052612]
[69.51099396 306.26535034]
[57.98404312 295.12017822]
[49.70114899 281.37890625]
[45.22283554 265.96087646]
[44.85488892 249.89916992]
[48.62748337 234.27146912]
[56.29279709 220.12777710]
[67.34126282 208.41983032]
[81.03546143 199.93704224]
[96.45932770 195.25334167]
[95.83535004 180.26632690]
[95.21137238 165.27931213]
[94.58740234 150.29229736]
[93.96342468 135.30528259]
[77.59440613 127.94445038]
[66.85124969 113.56700134]
[64.43148041 95.78298950]
[70.94266510 79.05783081]
[84.74991608 67.59107971]
[81.34693909 52.98218918]
[77.94396210 38.37329865]
[74.54098511 23.76440430]
[71.13800812 9.15551186]
[64.20558929 22.45745277]
[51.25629807 30.02817726]
[36.26410294 29.54432678]
[23.82991982 21.15439034]
[17.76963806 7.43312979]
[19.94308090 -7.40857315]
[29.68324852 -18.81598854]
[44.00100708 -23.28832817]
[58.50241852 -19.45308685]
[68.73754883 -8.48653507]
[68.11357117 -23.47355080]
[67.48959351 -38.46056747]
[66.86561584 -53.44758224]
[66.24163818 -68.43460083]
[62.73902130 -76.94245148]
[65.76385498 -83.73921967]
[65.45179749 -98.73596954]
[50.83057022 -102.49391937]
[37.76599503 -110.05827332]
[27.22755241 -120.86770630]
[19.99726677 -134.12008667]
[16.61167336 -148.83200073]
[17.32200241 -163.91171265]
[22.07554626 -178.24023438]
[30.51955986 -190.75427246]
[42.02743912 -200.52522278]
[55.74522781 -206.82798767]
[70.65496826 -209.19488525]
[85.65026093 -207.45025635]
[99.61836243 -201.72358704]
[111.52273560 -192.43980408]
[120.48000336 -180.28785706]
[125.82547760 -166.16947937]
[127.16249084 -151.13237000]
[124.39181519 -136.29235840]
[117.71907043 -122.75067902]
[107.63940430 -111.51221466]
[94.90080261 -103.41094208]
[80.44855499 -99.04802704]
[80.76061249 -84.05126953]
[81.22865295 -69.05857849]
[81.85263062 -54.07155991]
[82.47660828 -39.08454514]
[83.10058594 -24.09752846]
[83.72456360 -9.11051273]
[85.74689484 5.75253439]
[89.14987183 20.36142731]
[92.55285645 34.97031784]
[95.95583344 49.57921219]
[99.35881042 64.18810272]
[115.15594482 67.54695129]
[127.87167358 77.50393677]
[141.25796509 70.73582458]
[152.66494751 58.19321823]
[167.87515259 65.68227386]
[164.88937378 82.37123871]
[148.02607727 84.12210846]
[134.63978577 90.89022064]
[135.81710815 100.19351196]
[134.53933716 109.48353577]
[130.89404297 118.12350464]
[125.13109589 125.52118683]
[117.64552307 131.16950989]
[108.95043945 134.68130493]
[109.57441711 149.66831970]
[110.19839478 164.65533447]
[110.82237244 179.64234924]
[111.44635010 194.62936401]
[125.22774506 197.34767151]
[138.04115295 203.08451843]
[149.23513794 211.54435730]
[158.24140930 222.29331970]
[164.60380554 234.78140259]
[168.00125122 248.37069702]
[168.26408386 262.36791992]
[165.38243103 276.05975342]
[159.50656128 288.74929810]
[150.93911743 299.79144287]
[140.11941528 308.62573242]
[127.60101318 314.80468750]
[114.02333069 318.01669312]
[114.02333069 333.01669312]
[121.76062775 346.81686401]
[114.02333069 359.54415894]
[114.02333069 374.54415894]
[114.02333069 389.54415894]
[114.02333069 404.54415894]
[114.02333069 419.54415894]
[114.02333069 434.54415894]
[114.02333069 449.54415894]
[114.02333069 464.54415894]
[114.02333069 479.54415894]
[114.02333069 494.54415894]
[128.56321716 498.60546875]
[141.46759033 506.43997192]
[151.77888489 517.46630859]
[158.73190308 530.86621094]
[161.81069946 545.64538574]
[160.78680420 560.70709229]
[155.73620605 574.93359375]
[147.03367615 587.26928711]
[135.32502747 596.79870605]
[121.47908020 602.81469727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[34 115]
[35 114]
[36 113]
[37 112]
[38 111]
[43 97]
[44 96]
[45 95]
[46 94]
[47 93]
[57 92]
[58 91]
[59 90]
[60 89]
[61 88]
[63 87]
[64 86]
[99 105]
[100 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
