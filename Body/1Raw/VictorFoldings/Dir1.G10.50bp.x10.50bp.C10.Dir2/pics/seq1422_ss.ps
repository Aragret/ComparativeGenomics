%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUCAACAGGGGGGGGGGGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAAxxxxxxxxxxUUUAACACCCAUAGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCCCCCCCCCCCAAGCUCAACA\
) } def
/len { sequence length } bind def

/coor [
[75.61522675 411.13928223]
[61.76928711 405.12326050]
[50.06062317 395.59384155]
[41.35810089 383.25817871]
[36.30749893 369.03164673]
[35.28360748 353.96997070]
[38.36240387 339.19079590]
[45.31542587 325.79086304]
[55.62671280 314.76455688]
[68.53108978 306.93002319]
[83.07097626 302.86871338]
[83.07097626 287.86871338]
[83.07097626 272.86871338]
[83.07097626 257.86871338]
[83.07097626 242.86872864]
[83.07097626 227.86872864]
[83.07097626 212.86872864]
[83.07097626 197.86872864]
[83.07097626 182.86872864]
[83.07097626 167.86872864]
[83.07097626 152.86872864]
[74.33375549 165.06138611]
[61.22971725 172.36097717]
[46.26383972 173.37214661]
[32.29698944 167.90158081]
[21.99907494 156.99502563]
[17.33864212 142.73738098]
[19.20657539 127.85414124]
[27.24580574 115.19037628]
[39.91955185 107.16690063]
[54.80510330 105.31747437]
[69.05693817 109.99563599]
[79.95067596 120.30710602]
[85.40365601 134.27928162]
[89.10981750 119.74434662]
[92.81597900 105.20941162]
[84.56595612 106.03249359]
[75.90004730 102.85217285]
[62.24380493 96.64676666]
[48.58756256 90.44136047]
[34.93132019 84.23594666]
[21.27507973 78.03054047]
[8.90377808 81.82590485]
[-2.36449742 76.32636261]
[-6.69621372 64.98866272]
[-20.22040367 58.50049591]
[-36.52171707 60.28913498]
[-46.00188828 46.90786362]
[-38.90852737 32.12218475]
[-22.53868103 31.14233780]
[-13.73223877 44.97630310]
[-0.20804873 51.46446991]
[17.16109276 49.15950775]
[27.48048592 64.37429810]
[41.13672638 70.57971191]
[54.79296875 76.78511810]
[68.44921112 82.99052429]
[82.10545349 89.19593048]
[74.75328064 76.12131500]
[81.15386963 62.55545425]
[95.91991425 59.91654968]
[106.62304688 70.42573547]
[104.25453186 85.23763275]
[114.91616058 74.68634033]
[125.57778931 64.13505554]
[136.23941040 53.58376312]
[126.89281464 41.83266449]
[118.87154388 29.13989067]
[112.26965332 15.65425873]
[107.16454315 1.53388059]
[103.61606598 -13.05568981]
[101.66583252 -27.94339561]
[101.33669281 -42.95468903]
[102.63252258 -57.91356659]
[105.53812408 -72.64464569]
[110.01943207 -86.97521210]
[116.02389526 -100.73725128]
[123.48112488 -113.76940155]
[132.30369568 -125.91886902]
[142.38813782 -137.04321289]
[153.61625671 -147.01200867]
[165.85636902 -155.70837402]
[178.96499634 -163.03033447]
[192.78843689 -168.89205933]
[207.16461182 -173.22482300]
[221.92497253 -175.97782898]
[236.89645386 -177.11877441]
[251.90354919 -176.63432312]
[266.77026367 -174.53012085]
[281.32232666 -170.83084106]
[295.38912964 -165.57987976]
[308.80572510 -158.83879089]
[321.41479492 -150.68659973]
[333.06854248 -141.21888733]
[343.63031006 -130.54667664]
[352.97628784 -118.79506683]
[360.99685669 -106.10186768]
[367.59802246 -92.61587524]
[372.70239258 -78.49522400]
[376.25009155 -63.90546417]
[378.19952393 -49.01765060]
[378.52783203 -34.00634003]
[377.23120117 -19.04753113]
[374.32479858 -4.31660795]
[369.84274292 10.01371765]
[363.83752441 23.77543068]
[356.37960815 36.80717850]
[347.55639648 48.95617676]
[337.47134399 60.07997894]
[326.24267578 70.04816437]
[314.00210571 78.74386597]
[300.89306641 86.06512451]
[287.06933594 91.92610931]
[272.69293213 96.25809479]
[257.93240356 99.01029968]
[242.96086121 100.15045166]
[227.95379639 99.66518402]
[213.08718872 97.56018066]
[198.53532410 93.86013031]
[184.46881104 88.60841370]
[171.05258179 81.86659241]
[158.44393921 73.71372223]
[146.79071045 64.24539185]
[136.12907410 74.79667664]
[125.46745300 85.34796906]
[114.80582428 95.89926147]
[107.35091400 108.91557312]
[103.64475250 123.45050812]
[99.93859100 137.98544312]
[98.07097626 152.86872864]
[98.07097626 167.86872864]
[98.07097626 182.86872864]
[98.07097626 197.86872864]
[98.07097626 212.86872864]
[98.07097626 227.86872864]
[98.07097626 242.86872864]
[98.07097626 257.86871338]
[98.07097626 272.86871338]
[98.07097626 287.86871338]
[98.07097626 302.86871338]
[112.61086273 306.93002319]
[125.51524353 314.76455688]
[135.82653809 325.79086304]
[142.77955627 339.19079590]
[145.85835266 353.96997070]
[144.83445740 369.03164673]
[139.78385925 383.25817871]
[131.08132935 395.59384155]
[119.37267303 405.12326050]
[105.52673340 411.13928223]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[34 129]
[35 128]
[36 127]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[45 52]
[46 51]
[63 126]
[64 125]
[65 124]
[66 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
