%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUUUCCUAGGGGGGGGGGACACUCACAACAAAACUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUxxxxxxxxxxUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCCCCCCCCCCCUCUUCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.05905151 350.13757324]
[71.21311188 344.12155151]
[59.50444794 334.59213257]
[50.80192184 322.25646973]
[45.75131989 308.02993774]
[44.72742844 292.96826172]
[47.80622864 278.18911743]
[54.75925064 264.78918457]
[65.07053375 253.76284790]
[77.97491455 245.92832947]
[92.51480103 241.86701965]
[92.51480103 226.86701965]
[92.51480103 211.86701965]
[92.51480103 196.86701965]
[92.51480103 181.86701965]
[92.51480103 166.86701965]
[92.51480103 151.86701965]
[92.51480103 136.86701965]
[92.51480103 121.86702728]
[92.51480103 106.86702728]
[89.34870911 99.39307404]
[92.67408752 91.55577850]
[92.98614502 76.55902863]
[78.02920532 75.36716461]
[63.16799927 73.29956818]
[48.45374680 70.36335754]
[33.93717575 66.56867218]
[19.66832924 61.92857361]
[5.69639397 56.45906830]
[-7.93046713 50.17900848]
[-21.16527748 43.11004639]
[-33.96241379 35.27654266]
[-46.27776337 26.70550537]
[-58.06887054 17.42648315]
[-69.29508972 7.47145891]
[-79.91771698 -3.12524772]
[-89.90014648 -14.32710838]
[-99.20794678 -26.09550858]
[-107.80905151 -38.38987732]
[-115.67379761 -51.16783524]
[-122.77507782 -64.38533783]
[-129.08842468 -77.99681091]
[-134.59204102 -91.95533752]
[-139.26699829 -106.21280670]
[-143.09713745 -120.72006226]
[-146.06929016 -135.42709351]
[-148.17318726 -150.28320312]
[-149.40159607 -165.23718262]
[-149.75027466 -180.23748779]
[-149.21800232 -195.23239136]
[-147.80664062 -210.17021179]
[-145.52104187 -224.99945068]
[-142.36909485 -239.66900635]
[-138.36164856 -254.12828064]
[-133.51252747 -268.32745361]
[-127.83844757 -282.21755981]
[-121.35896301 -295.75076294]
[-114.09642029 -308.88034058]
[-106.07585144 -321.56106567]
[-97.32489777 -333.74923706]
[-87.87373352 -345.40280151]
[-77.75493622 -356.48162842]
[-67.00338745 -366.94750977]
[-55.65615082 -376.76437378]
[-43.75234222 -385.89837646]
[-31.33300018 -394.31802368]
[-18.44093132 -401.99426270]
[-5.12058210 -408.90069580]
[8.58213139 -415.01348877]
[22.61997223 -420.31155396]
[36.94454956 -424.77664185]
[51.50648117 -428.39334106]
[66.25556946 -431.14923096]
[81.14097595 -433.03475952]
[96.11138153 -434.04342651]
[111.11518097 -434.17181396]
[126.10065460 -433.41940308]
[141.01614380 -431.78884888]
[155.81022644 -429.28573608]
[170.43191528 -425.91873169]
[184.83078003 -421.69937134]
[198.95722961 -416.64227295]
[212.76252747 -410.76486206]
[226.19909668 -404.08734131]
[239.22061157 -396.63278198]
[251.78219604 -388.42687988]
[263.84054565 -379.49789429]
[275.35409546 -369.87661743]
[286.28314209 -359.59625244]
[296.59002686 -348.69216919]
[306.23919678 -337.20199585]
[315.19741821 -325.16534424]
[323.43377686 -312.62371826]
[330.91989136 -299.62033081]
[337.63000488 -286.19998169]
[343.54089355 -272.40899658]
[348.63226318 -258.29486084]
[352.88653564 -243.90626526]
[356.28903198 -229.29280090]
[358.82800293 -214.50483704]
[360.49475098 -199.59335327]
[361.28350830 -184.60974121]
[361.19155884 -169.60568237]
[360.21917725 -154.63287354]
[358.36978149 -139.74293518]
[355.64971924 -124.98719788]
[352.06832886 -110.41653442]
[347.63803101 -96.08116150]
[342.37402344 -82.03050995]
[336.29452515 -68.31300354]
[329.42044067 -54.97593689]
[321.77548218 -42.06528091]
[313.38598633 -29.62554550]
[304.28091431 -17.69960976]
[294.49160767 -6.32858849]
[284.05184937 4.44832230]
[272.99758911 14.59397125]
[261.36697388 24.07338524]
[249.20008850 32.85388184]
[236.53884888 40.90520096]
[223.42694092 48.19958115]
[209.90951538 54.71187973]
[196.03321838 60.41964340]
[181.84585571 65.30320740]
[167.39633179 69.34571838]
[152.73448181 72.53325653]
[137.91081238 74.85483551]
[122.97646332 76.30243683]
[107.98289490 76.87107849]
[107.67083740 91.86783600]
[107.51480103 106.86702728]
[107.51480103 121.86702728]
[107.51480103 136.86701965]
[107.51480103 151.86701965]
[107.51480103 166.86701965]
[107.51480103 181.86701965]
[107.51480103 196.86701965]
[107.51480103 211.86701965]
[107.51480103 226.86701965]
[107.51480103 241.86701965]
[122.05468750 245.92832947]
[134.95907593 253.76284790]
[145.27035522 264.78918457]
[152.22337341 278.18911743]
[155.30216980 292.96826172]
[154.27828979 308.02993774]
[149.22767639 322.25646973]
[140.52516174 334.59213257]
[128.81649780 344.12155151]
[114.97055817 350.13757324]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
