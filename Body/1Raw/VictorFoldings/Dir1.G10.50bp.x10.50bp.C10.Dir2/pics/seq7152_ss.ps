%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCACUAUGGGGGGGGGGCAUAUUCAUCGGCGUAAAUCUAACUUUCUUCCCACAACACUUUCUCGGCCxxxxxxxxxxGUCAUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUCCGCCAACUAAUCCCCCCCCCCAUUUCACUUU\
) } def
/len { sequence length } bind def

/coor [
[85.19730377 348.55923462]
[71.35136414 342.54321289]
[59.64270401 333.01379395]
[50.94018173 320.67813110]
[45.88957977 306.45159912]
[44.86568832 291.38992310]
[47.94448853 276.61077881]
[54.89751053 263.21084595]
[65.20879364 252.18450928]
[78.11317444 244.35000610]
[92.65306091 240.28869629]
[92.65306091 225.28869629]
[92.65306091 210.28869629]
[92.65306091 195.28869629]
[92.65306091 180.28869629]
[92.65306091 165.28869629]
[92.65306091 150.28869629]
[92.65306091 135.28869629]
[92.65306091 120.28868866]
[92.65306091 105.28868866]
[90.28324890 102.15493774]
[89.33691406 97.97760010]
[90.25396729 93.43037415]
[93.15031433 89.36036682]
[94.08593750 74.38957214]
[95.02156830 59.41878128]
[82.33531189 50.87442017]
[75.67314911 37.21746445]
[76.73429108 22.15956306]
[85.13386536 9.73767948]
[98.53308105 3.23179674]
[99.46871185 -11.73899460]
[100.40434265 -26.70978546]
[101.33996582 -41.68057632]
[86.46915436 -43.69467926]
[71.78243256 -46.77658081]
[57.35638809 -50.91021729]
[43.26622391 -56.07403183]
[29.58539963 -62.24110413]
[16.38524246 -69.37928772]
[3.73457336 -77.45135498]
[-8.30065250 -86.41522980]
[-19.65768814 -96.22418213]
[-30.27732468 -106.82706451]
[-40.10419083 -118.16860199]
[-49.08705902 -130.18965149]
[-57.17909241 -142.82756042]
[-64.33810425 -156.01643372]
[-70.52677155 -169.68750000]
[-75.71282959 -183.76950073]
[-79.86923218 -198.18901062]
[-82.97431946 -212.87083435]
[-85.01189423 -227.73844910]
[-85.97134399 -242.71434021]
[-85.84765625 -257.72042847]
[-84.64148712 -272.67846680]
[-82.35911560 -287.51046753]
[-79.01244354 -302.13912964]
[-74.61891174 -316.48815918]
[-69.20144653 -330.48275757]
[-62.78826904 -344.04995728]
[-55.41283035 -357.11901855]
[-47.11357880 -369.62182617]
[-37.93378067 -381.49319458]
[-27.92130089 -392.67120361]
[-17.12833405 -403.09759521]
[-5.61115503 -412.71801758]
[6.57019234 -421.48226929]
[19.35219955 -429.34472656]
[32.66822433 -436.26434326]
[46.44884491 -442.20507812]
[60.62221527 -447.13592529]
[75.11444092 -451.03121948]
[89.84996033 -453.87060547]
[104.75195312 -455.63931274]
[119.74272919 -456.32809448]
[134.74412537 -455.93341064]
[149.67794800 -454.45724487]
[164.46630859 -451.90734863]
[179.03211975 -448.29699707]
[193.29945374 -443.64501953]
[207.19392395 -437.97564697]
[220.64308167 -431.31848145]
[233.57679749 -423.70819092]
[245.92765808 -415.18444824]
[257.63128662 -405.79174805]
[268.62661743 -395.57897949]
[278.85635376 -384.59945679]
[288.26718140 -372.91040039]
[296.80999756 -360.57272339]
[304.44030762 -347.65078735]
[311.11828613 -334.21194458]
[316.80914307 -320.32629395]
[321.48318481 -306.06616211]
[325.11605835 -291.50595093]
[327.68884277 -276.72155762]
[329.18807983 -261.79003906]
[329.60601807 -246.78926086]
[328.94039917 -231.79743958]
[327.19476318 -216.89273071]
[324.37817383 -202.15283203]
[320.50531006 -187.65460205]
[315.59637451 -173.47361755]
[309.67700195 -159.68382263]
[302.77798462 -146.35710144]
[294.93530273 -133.56295776]
[286.18988037 -121.36805725]
[276.58731079 -109.83600616]
[266.17764282 -99.02692413]
[255.01512146 -88.99716187]
[243.15798950 -79.79901123]
[230.66802979 -71.48042297]
[217.61038208 -64.08477783]
[204.05311584 -57.65061951]
[190.06692505 -52.21150208]
[175.72470093 -47.79578400]
[161.10124207 -44.42648315]
[146.27278137 -42.12116623]
[131.31663513 -40.89184952]
[116.31076050 -40.74494934]
[115.37512970 -25.77415848]
[114.43949890 -10.80336666]
[113.50387573 4.16742516]
[125.98880005 12.29098701]
[132.77638245 25.66202164]
[131.95445251 40.73487091]
[123.64373779 53.45606995]
[109.99236298 60.35440826]
[109.05673218 75.32520294]
[108.12110138 90.29598999]
[107.65306091 105.28868866]
[107.65306091 120.28868866]
[107.65306091 135.28869629]
[107.65306091 150.28869629]
[107.65306091 165.28869629]
[107.65306091 180.28869629]
[107.65306091 195.28869629]
[107.65306091 210.28869629]
[107.65306091 225.28869629]
[107.65306091 240.28869629]
[122.19294739 244.35000610]
[135.09733582 252.18450928]
[145.40861511 263.21084595]
[152.36163330 276.61077881]
[155.44042969 291.38992310]
[154.41654968 306.45159912]
[149.36593628 320.67813110]
[140.66342163 333.01379395]
[128.95475769 342.54321289]
[115.10881805 348.55923462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 130]
[25 129]
[26 128]
[31 123]
[32 122]
[33 121]
[34 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
