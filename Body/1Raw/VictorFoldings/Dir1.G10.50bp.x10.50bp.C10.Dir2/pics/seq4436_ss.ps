%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUUACAAGGGGGGGGGGUCUCCAGCAUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUAxxxxxxxxxxAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCCCCCCCCCCCAUUACUA\
) } def
/len { sequence length } bind def

/coor [
[95.97799683 405.96621704]
[82.75780487 398.69375610]
[71.87100220 388.24673462]
[64.05986786 375.33749390]
[59.85698700 360.84616089]
[59.54891586 345.76083374]
[63.15665436 331.11001587]
[70.43422699 317.89260864]
[80.88543701 307.00985718]
[93.79769897 299.20370483]
[108.29063416 295.00640869]
[107.97857666 280.00967407]
[107.66651917 265.01290894]
[107.35446930 250.01615906]
[107.04241180 235.01940918]
[106.73035431 220.02265930]
[106.41829681 205.02589417]
[106.10623932 190.02914429]
[105.79418182 175.03239441]
[105.48213196 160.03564453]
[105.17007446 145.03887939]
[102.53121185 130.27282715]
[97.62965393 116.09627533]
[87.45037842 110.35449219]
[83.74652100 99.26993561]
[88.42922974 88.56208801]
[83.82366943 74.28662872]
[79.21810150 60.01116562]
[67.61736298 49.25321960]
[71.07318115 34.76506805]
[66.46761322 20.48960686]
[61.86204910 6.21414566]
[50.72678375 -0.37825400]
[47.20697021 -12.41278172]
[52.67400742 -23.24877739]
[48.36642075 -37.61696243]
[44.05883789 -51.98514557]
[29.32574081 -49.10371399]
[14.38115597 -47.68027496]
[-0.63098758 -47.72853470]
[-15.56611156 -49.24802399]
[-30.28038025 -52.22411728]
[-44.63208008 -56.62814331]
[-58.48299789 -62.41769791]
[-71.69972992 -69.53701782]
[-84.15499878 -77.91753387]
[-95.72884369 -87.47853851]
[-106.30980682 -98.12796021]
[-115.79597473 -109.76322174]
[-124.09599304 -122.27227783]
[-131.12992859 -135.53465271]
[-136.83003235 -149.42262268]
[-141.14141846 -163.80242920]
[-144.02255249 -178.53558350]
[-145.44569397 -193.48019409]
[-145.39714050 -208.49234009]
[-143.87734985 -223.42742920]
[-140.90095520 -238.14163208]
[-136.49664307 -252.49325562]
[-130.70681763 -266.34405518]
[-123.58722687 -279.56063843]
[-115.20645905 -292.01574707]
[-105.64522552 -303.58938599]
[-94.99559021 -314.17013550]
[-83.36013794 -323.65606689]
[-70.85091400 -331.95584106]
[-57.58840179 -338.98953247]
[-43.70032120 -344.68936157]
[-29.32043076 -349.00042725]
[-14.58721924 -351.88128662]
[0.35742226 -353.30413818]
[15.36956406 -353.25527954]
[30.30462837 -351.73516846]
[45.01877594 -348.75848389]
[59.37030029 -344.35388184]
[73.22098541 -338.56378174]
[86.43743896 -331.44393921]
[98.89237213 -323.06292725]
[110.46583557 -313.50146484]
[121.04636383 -302.85162354]
[130.53207397 -291.21597290]
[138.83158875 -278.70657349]
[145.86499023 -265.44393921]
[151.56454468 -251.55572510]
[155.87535095 -237.17575073]
[158.75588989 -222.44248962]
[160.17843628 -207.49781799]
[160.12928772 -192.48567200]
[158.60888672 -177.55064392]
[155.63191223 -162.83654785]
[151.22703552 -148.48512268]
[145.43664551 -134.63455200]
[138.31652832 -121.41823578]
[129.93527222 -108.96347046]
[120.37356567 -97.39019775]
[109.72351074 -86.80988312]
[98.08767700 -77.32440948]
[85.57812500 -69.02513885]
[72.31533051 -61.99200439]
[58.42702103 -56.29273224]
[62.73460770 -41.92454529]
[67.04219055 -27.55636215]
[80.44018555 -16.26505470]
[76.13751221 1.60858107]
[80.74307251 15.88404179]
[85.34864044 30.15950203]
[96.61995697 39.89636993]
[93.49356079 55.40560150]
[98.09912872 69.68106079]
[102.70468903 83.95652008]
[115.43118286 94.84373474]
[111.80621338 111.19472504]
[116.70776367 125.37127686]
[120.32224274 110.81327057]
[128.86865234 98.48611450]
[141.23403931 89.99510956]
[155.80812073 86.44599915]
[170.69297791 88.30096436]
[183.95024109 95.31845093]
[193.85346985 106.58460236]
[199.11300659 120.63227844]
[199.04394531 135.63211060]
[193.65527344 149.63076782]
[183.64872742 160.80525208]
[170.32742310 167.70036316]
[155.42611694 169.41819763]
[140.88533020 165.73504639]
[128.59864807 157.13053894]
[120.16682434 144.72683716]
[120.47888184 159.72358704]
[120.79093933 174.72033691]
[121.10299683 189.71708679]
[121.41505432 204.71385193]
[121.72710419 219.71060181]
[122.03916168 234.70735168]
[122.35121918 249.70410156]
[122.66327667 264.70086670]
[122.97533417 279.69760132]
[123.28739166 294.69436646]
[137.94238281 298.28512573]
[151.16818237 305.54739380]
[162.06306458 315.98599243]
[169.88415527 328.88919067]
[174.09822083 343.37725830]
[174.41795349 358.46237183]
[170.82151794 373.11596680]
[163.55415344 386.33895874]
[153.11135864 397.22979736]
[140.20512390 405.04592896]
[125.71543121 409.25439453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 113]
[23 112]
[26 110]
[27 109]
[28 108]
[30 106]
[31 105]
[32 104]
[35 102]
[36 101]
[37 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
