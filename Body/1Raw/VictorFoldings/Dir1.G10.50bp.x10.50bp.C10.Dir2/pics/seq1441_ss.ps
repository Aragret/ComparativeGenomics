%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUCAACAAAAGGGGGGGGGGCUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGCxxxxxxxxxxAACCACCCACAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUUUUUAACCCCCCCCCCCCAAAUCAACAACA\
) } def
/len { sequence length } bind def

/coor [
[87.52128601 373.53717041]
[74.82580566 365.44281006]
[64.09093475 354.88552856]
[55.78595734 342.32684326]
[50.27393723 328.31570435]
[47.79582977 313.46469116]
[48.45996857 298.42300415]
[52.23731995 283.84817505]
[58.96275711 270.37741089]
[68.34226990 258.59951782]
[79.96582794 249.02943420]
[93.32530212 242.08549500]
[107.83666229 238.07127380]
[106.92514801 223.09899902]
[106.01364136 208.12670898]
[105.10212708 193.15443420]
[104.19061279 178.18215942]
[103.27909851 163.20988464]
[102.36758423 148.23759460]
[101.45606995 133.26531982]
[100.54455566 118.29303741]
[89.16318512 108.52245331]
[74.22553253 109.88867188]
[59.28787994 111.25489044]
[44.39866257 113.07454681]
[29.57163811 115.34596252]
[14.74461269 117.61737823]
[-0.08241226 119.88879395]
[-14.90943718 122.16020966]
[-23.18928146 132.09997559]
[-35.62685013 133.65942383]
[-45.45321655 126.54177856]
[-60.32323074 128.51223755]
[-72.98828125 138.92993164]
[-88.24568176 132.91796875]
[-90.39993286 116.66093445]
[-77.23491669 106.88266754]
[-62.29368210 113.64221954]
[-47.42366791 111.67176819]
[-34.14371109 100.23800659]
[-17.18085289 107.33318329]
[-2.35382891 105.06176758]
[12.47319603 102.79035187]
[27.30022049 100.51893616]
[42.12724686 98.24752045]
[44.51594925 95.57888794]
[48.34051895 93.96301270]
[53.07845306 94.07313538]
[57.92166519 96.31723785]
[72.85931396 94.95101929]
[87.79696655 93.58480072]
[100.52663422 85.65033722]
[108.33168030 72.84091949]
[116.13673401 60.03150558]
[123.94178009 47.22208786]
[131.74684143 34.41267014]
[139.55187988 21.60325050]
[127.49657440 12.65983009]
[116.30448914 2.65720439]
[106.06837463 -8.32173824]
[96.87305450 -20.18602180]
[88.79470825 -32.83733368]
[81.90029907 -46.17083740]
[76.24694824 -60.07604599]
[71.88149261 -74.43773651]
[68.84012604 -89.13689423]
[67.14803314 -104.05171967]
[66.81924438 -119.05862427]
[67.85648346 -134.03324890]
[70.25115204 -148.85150146]
[73.98341370 -163.39060974]
[79.02233124 -177.53007507]
[85.32615662 -191.15274048]
[92.84265137 -204.14572144]
[101.50952911 -216.40135193]
[111.25497437 -227.81806946]
[121.99822998 -238.30128479]
[133.65026855 -247.76411438]
[146.11454773 -256.12814331]
[159.28776550 -263.32406616]
[173.06077576 -269.29226685]
[187.31945801 -273.98330688]
[201.94561768 -277.35824585]
[216.81809998 -279.38919067]
[231.81364441 -280.05923462]
[246.80798340 -279.36291504]
[261.67687988 -277.30593872]
[276.29711914 -273.90536499]
[290.54754639 -269.18939209]
[304.31008911 -263.19708252]
[317.47070312 -255.97808838]
[329.92028809 -247.59223938]
[341.55575562 -238.10902405]
[352.28063965 -227.60700989]
[362.00607300 -216.17323303]
[370.65145874 -203.90245056]
[378.14520264 -190.89633179]
[384.42514038 -177.26263428]
[389.43930054 -163.11436462]
[393.14608765 -148.56875610]
[395.51480103 -133.74632263]
[396.52581787 -118.76990509]
[396.17074585 -103.76360321]
[394.45254517 -88.85176086]
[391.38543701 -74.15795135]
[386.99484253 -59.80392838]
[381.31713867 -45.90864182]
[374.39938354 -32.58723450]
[366.29888916 -19.95008850]
[357.08279419 -8.10192871]
[346.82748413 2.85907054]
[335.61788940 12.84207916]
[323.54693604 21.76437378]
[310.71463013 29.55201912]
[297.22732544 36.14048386]
[283.19677734 41.47517014]
[268.73925781 45.51187515]
[253.97453308 48.21715164]
[239.02499390 49.56857681]
[224.01449585 49.55495071]
[209.06742859 48.17639542]
[194.30764771 45.44432449]
[179.85746765 41.38138199]
[165.83662415 36.02123642]
[152.36129761 29.40830040]
[144.55625916 42.21772003]
[136.75120544 55.02713776]
[128.94615173 67.83655548]
[121.14109802 80.64597321]
[113.33605194 93.45539093]
[115.51683807 117.38152313]
[116.42835236 132.35380554]
[117.33986664 147.32608032]
[118.25137329 162.29837036]
[119.16288757 177.27064514]
[120.07440186 192.24291992]
[120.98591614 207.21519470]
[121.89743042 222.18748474]
[122.80894470 237.15975952]
[137.70010376 239.38395691]
[151.80328369 244.65596008]
[164.50195312 252.74531555]
[175.24096680 263.29837036]
[183.55088806 275.85382080]
[189.06842041 289.86276245]
[191.55236816 304.71279907]
[190.89414978 319.75476074]
[187.12252808 334.33105469]
[180.40238953 347.80447388]
[171.02751160 359.58605957]
[159.40771484 369.16070557]
[146.05097961 376.10989380]
[131.54119873 380.12982178]
[116.51267242 381.04476929]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 51]
[23 50]
[24 49]
[25 45]
[26 44]
[27 43]
[28 42]
[29 41]
[32 39]
[33 38]
[52 130]
[53 129]
[54 128]
[55 127]
[56 126]
[57 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
