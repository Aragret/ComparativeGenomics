%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUCCCCAGGGGGGGGGGUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCxxxxxxxxxxAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCCCCCCCCCCCACCCCA\
) } def
/len { sequence length } bind def

/coor [
[15.73016930 305.69332886]
[2.06114244 299.54733276]
[-11.16266918 292.49420166]
[-23.88115120 284.56600952]
[-36.03648758 275.79882812]
[-47.57342529 266.23248291]
[-58.43951416 255.91046143]
[-68.58535767 244.87969971]
[-80.28498077 254.26686096]
[-91.98460388 263.65402222]
[-103.68422699 273.04119873]
[-115.38385010 282.42834473]
[-127.08347321 291.81552124]
[-138.78309631 301.20266724]
[-150.48272705 310.58984375]
[-156.72294617 327.88259888]
[-174.12306213 329.94061279]
[-185.62487793 339.56915283]
[-197.12667847 349.19766235]
[-205.39076233 364.00109863]
[-221.90338135 360.15795898]
[-222.78160095 343.22677612]
[-206.75520325 337.69586182]
[-195.25340271 328.06735229]
[-183.75160217 318.43881226]
[-182.35546875 306.38235474]
[-172.79536438 298.26919556]
[-159.86988831 298.89022827]
[-148.17025757 289.50305176]
[-136.47064209 280.11590576]
[-124.77101135 270.72872925]
[-113.07138824 261.34155273]
[-101.37176514 251.95440674]
[-89.67214203 242.56724548]
[-77.97251892 233.18008423]
[-89.87638092 215.57730103]
[-100.04499817 196.91827393]
[-108.38542938 177.37353516]
[-114.82147217 157.12168884]
[-119.29429626 136.34782410]
[-121.76303101 115.24176788]
[-122.20510864 93.99642944]
[-120.61649323 72.80595398]
[-117.01170349 51.86400604]
[-111.42367554 31.36195946]
[-103.90348816 11.48718548]
[-94.51986694 -7.57868576]
[-83.35855865 -25.66141510]
[-95.43854523 -34.55376434]
[-107.51853180 -43.44611359]
[-119.59852600 -52.33846283]
[-135.93870544 -56.85895538]
[-136.11828613 -73.81195068]
[-119.87753296 -78.67757416]
[-110.70617676 -64.41844940]
[-98.62618256 -55.52610397]
[-86.54619598 -46.63375092]
[-74.46620941 -37.74140167]
[-67.32929993 -46.32859802]
[-59.77017975 -54.54656982]
[-51.80792236 -62.37458801]
[-43.46261978 -69.79290009]
[-34.75533295 -76.78278351]
[-25.70802498 -83.32660675]
[-16.34352875 -89.40785217]
[-6.68547058 -95.01118469]
[3.24177814 -100.12245941]
[13.41316986 -104.72878265]
[23.80303955 -108.81851959]
[34.38516998 -112.38137054]
[45.13286209 -115.40833282]
[56.01899719 -117.89176941]
[67.01610565 -119.82541656]
[78.09643555 -121.20439911]
[89.23204041 -122.02523041]
[100.39481354 -122.28584290]
[111.55658722 -121.98558044]
[122.68920135 -121.12519836]
[133.76457214 -119.70686340]
[144.75473022 -117.73416138]
[155.63198853 -115.21206665]
[166.36885071 -112.14694977]
[176.93826294 -108.54653168]
[187.31353760 -104.41990662]
[197.46850586 -99.77748108]
[207.37753296 -94.63098145]
[217.01562500 -88.99337769]
[226.35845947 -82.87889862]
[235.38246155 -76.30297852]
[244.06486511 -69.28221130]
[252.38375854 -61.83430099]
[260.31817627 -53.97804642]
[267.84805298 -45.73327255]
[274.95440674 -37.12078094]
[281.61932373 -28.16230392]
[287.82595825 -18.88044357]
[300.76400757 -26.47035217]
[313.70208740 -34.06026077]
[321.32809448 -48.57838440]
[337.72274780 -48.96266937]
[346.02059937 -34.81779861]
[337.68554688 -20.69479942]
[321.29199219 -21.12220383]
[308.35391235 -13.53229618]
[295.41586304 -5.94238758]
[301.87075806 6.94440126]
[307.47695923 20.22241592]
[312.21087646 33.83583069]
[316.05261230 47.72741699]
[318.98602295 61.83876801]
[320.99874878 76.11055756]
[322.08236694 90.48278046]
[322.23229980 104.89501190]
[321.44790649 119.28667450]
[319.73251343 133.59724426]
[317.09332275 147.76657104]
[313.54141235 161.73506165]
[309.09173584 175.44401550]
[303.76300049 188.83578491]
[297.57757568 201.85408020]
[310.67074585 209.17318726]
[323.76388550 216.49229431]
[338.90133667 211.94987488]
[352.77728271 219.51513672]
[357.15939331 234.69975281]
[349.44784546 248.49494934]
[334.21774292 252.71629333]
[320.50485229 244.85931396]
[316.44479370 229.58544922]
[303.35162354 222.26634216]
[290.25848389 214.94723511]
[282.08035278 227.50645447]
[273.07452393 239.48605347]
[263.28192139 250.83157349]
[252.74707031 261.49145508]
[241.51785278 271.41717529]
[229.64530945 280.56369019]
[217.18341064 288.88937378]
[204.18882751 296.35641479]
[190.72061157 302.93081665]
[176.83999634 308.58276367]
[162.61007690 313.28649902]
[148.09553528 317.02066040]
[133.36236572 319.76831055]
[118.47753143 321.51687622]
[103.50870514 322.25851440]
[88.52392578 321.98974609]
[73.59131622 320.71188354]
[58.77875519 318.43066406]
[44.15357971 315.15652466]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 35]
[9 34]
[10 33]
[11 32]
[12 31]
[13 30]
[14 29]
[15 28]
[17 25]
[18 24]
[19 23]
[48 58]
[49 57]
[50 56]
[51 55]
[96 105]
[97 104]
[98 103]
[120 131]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
