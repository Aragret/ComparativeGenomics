%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCACAAUUGGGGGGGGGGCUAAUUCUACUGACUAUCCUAGAAAUCGCUGUCGCCUUAAUCCAAGCCUAxxxxxxxxxxCUGGGUCUCUAUUUUACCCUCCUACAAGCCUCAGAGUACUUCGAGUCUCCCCCCCCCCCCCUUCACCAUU\
) } def
/len { sequence length } bind def

/coor [
[82.57947540 378.35144043]
[70.02125549 370.00027466]
[59.93503189 358.78784180]
[52.95483780 345.41891479]
[49.51945496 330.73394775]
[49.84482956 315.65597534]
[53.91051483 301.13284302]
[61.46093369 288.07751465]
[72.02146149 277.31060791]
[84.92826080 269.50897217]
[99.36998749 265.16302490]
[98.74600983 250.17601013]
[98.12203217 235.18899536]
[97.49805450 220.20198059]
[96.87407684 205.21496582]
[96.25009918 190.22795105]
[95.62612152 175.24093628]
[95.00214386 160.25392151]
[94.37816620 145.26690674]
[93.75418854 130.27987671]
[87.93630219 128.46662903]
[82.58708954 125.54744720]
[77.91435242 121.63574982]
[74.09964752 116.88352203]
[71.29116058 111.47536469]
[56.42811203 113.49769592]
[41.56506729 115.52003479]
[26.70201874 117.54236603]
[11.83897305 119.56470490]
[6.09728003 133.80999756]
[-6.00770473 143.26330566]
[-21.21980095 145.38171387]
[-35.44703293 139.59539795]
[-44.86234665 127.46084595]
[-46.93306732 112.24217987]
[-41.10218430 98.03315735]
[-28.93817329 88.65592957]
[-13.71309471 86.63291931]
[0.47758266 92.50830841]
[9.81663799 104.70165253]
[24.67968559 102.67932129]
[39.54273224 100.65698242]
[54.40578079 98.63465118]
[69.26882935 96.61231995]
[73.11187744 82.44739532]
[83.33963776 71.16379547]
[98.09143066 65.55690002]
[114.33035278 67.31465912]
[116.19796753 52.43137741]
[118.06557465 37.54809570]
[119.77826691 22.64619446]
[121.33584595 7.72728157]
[104.58722687 -1.02411377]
[94.19777679 -18.18961525]
[94.19841766 -39.42275620]
[105.78759003 -58.59430313]
[97.27649689 -70.94587708]
[88.76540375 -83.29744720]
[73.31127167 -87.60433960]
[67.17592621 -102.42787170]
[75.06587982 -116.39669800]
[90.92863464 -118.79513550]
[102.59564972 -107.78330231]
[101.11698151 -91.80854034]
[109.62806702 -79.45697021]
[118.13916016 -67.10539246]
[125.63753510 -66.94936371]
[124.09001160 -81.86932373]
[122.54248810 -96.78928375]
[120.99496460 -111.70924377]
[119.44743347 -126.62920380]
[112.64284515 -139.99697876]
[115.86699677 -154.64637756]
[127.65514374 -163.92213440]
[142.65190125 -163.61024475]
[154.04420471 -153.85238647]
[156.65647888 -139.08161926]
[149.30162048 -126.00798798]
[147.13479614 -111.16532135]
[144.96795654 -96.32264709]
[142.80111694 -81.47998047]
[140.63429260 -66.63731384]
[148.13267517 -66.48128510]
[157.15019226 -78.46811676]
[166.16772461 -90.45494843]
[175.18525696 -102.44178009]
[169.73182678 -116.87312317]
[172.96862793 -131.95710754]
[183.86280823 -142.88049316]
[198.93806458 -146.15766907]
[213.38395691 -140.74290466]
[222.59085083 -128.36401367]
[223.62083435 -112.97106934]
[216.14527893 -99.47590637]
[202.54957581 -92.18477631]
[187.17208862 -93.42424774]
[178.15455627 -81.43741608]
[169.13702393 -69.45058441]
[160.11950684 -57.46375275]
[170.22300720 -40.83552170]
[171.67819214 -22.24435806]
[164.89392090 -5.74548864]
[152.00111389 5.38214540]
[136.25476074 9.28486252]
[134.69717407 24.20377541]
[137.14656067 31.22845650]
[132.94885254 39.41571045]
[131.08123779 54.29898834]
[129.21363831 69.18226624]
[138.10598755 81.26226044]
[152.87203979 83.90112305]
[167.63809204 86.53998566]
[176.70283508 84.96445465]
[182.68251038 89.39040375]
[197.39047241 92.33588409]
[211.48492432 84.67258453]
[226.20742798 91.04655457]
[230.26414490 106.56822968]
[220.54310608 119.33071899]
[204.50146484 119.54372406]
[194.44499207 107.04384613]
[179.73703003 104.09836578]
[164.99922180 101.30603790]
[150.23316956 98.66717529]
[135.46711731 96.02831268]
[133.52841187 108.11267853]
[127.74085999 118.42658234]
[119.06143188 125.84040833]
[108.74121094 129.65589905]
[109.36518097 144.64292908]
[109.98915863 159.62994385]
[110.61313629 174.61695862]
[111.23711395 189.60397339]
[111.86109161 204.59098816]
[112.48506927 219.57800293]
[113.10904694 234.56501770]
[113.73302460 249.55203247]
[114.35700226 264.53906250]
[129.11001587 267.66949463]
[142.62065125 274.37124634]
[154.03962708 284.22305298]
[162.64913940 296.60556030]
[167.90798950 310.74047852]
[169.48559570 325.73919678]
[167.28279114 340.65893555]
[161.43803406 354.56179810]
[152.31875610 366.57385254]
[140.49818420 375.94003296]
[126.71937561 382.07150269]
[111.84847260 384.58291626]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[48 109]
[49 108]
[50 107]
[51 105]
[52 104]
[56 66]
[57 65]
[58 64]
[83 99]
[84 98]
[85 97]
[86 96]
[110 125]
[111 124]
[112 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
