%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCUUCUUCGGGGGGGGGGUCACAUGACAAAAACUAGCCCCCAUCUCAAUCAUAUACCAAAUCUCUCCCxxxxxxxxxxGGCUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCCCCCCCCCCCUGCCUCUUC\
) } def
/len { sequence length } bind def

/coor [
[77.73508453 366.43222046]
[63.88914490 360.41619873]
[52.18048096 350.88677979]
[43.47795868 338.55111694]
[38.42735672 324.32461548]
[37.40346527 309.26290894]
[40.48226166 294.48376465]
[47.43528366 281.08383179]
[57.74657059 270.05749512]
[70.65094757 262.22299194]
[85.19083405 258.16168213]
[85.19083405 243.16168213]
[85.19083405 228.16168213]
[85.19083405 213.16168213]
[85.19083405 198.16168213]
[85.19083405 183.16168213]
[85.19083405 168.16168213]
[85.19083405 153.16168213]
[85.19083405 138.16168213]
[85.19083405 123.16167450]
[80.37771606 114.49658203]
[79.47392273 105.69498444]
[81.87555695 98.27307129]
[86.46348572 93.28265381]
[91.85726929 91.16283417]
[96.70000458 91.71105194]
[94.83238983 76.82776642]
[92.96477509 61.94448853]
[76.17105865 54.26757431]
[66.72085571 38.56074524]
[67.78923798 20.39616776]
[78.85068512 6.11832094]
[73.36365509 -7.84206867]
[59.15165329 -14.21833611]
[53.78589249 -28.45432091]
[59.95227432 -41.96399689]
[54.46524048 -55.92438889]
[48.97821045 -69.88478088]
[43.49117661 -83.84516907]
[28.98899460 -79.95072174]
[14.14195538 -77.70452118]
[-0.86322600 -77.13482666]
[-15.83784103 -78.24878693]
[-30.59356880 -81.03240204]
[-44.94483948 -85.45066071]
[-58.71117401 -91.44799805]
[-71.71944427 -98.94899750]
[-83.80605316 -107.85931396]
[-94.81900787 -118.06690979]
[-104.61979675 -129.44338989]
[-113.08517456 -141.84570312]
[-120.10868073 -155.11787415]
[-125.60197449 -169.09298706]
[-129.49598694 -183.59529114]
[-131.74174500 -198.44239807]
[-132.31098938 -213.44758606]
[-131.19657898 -228.42216492]
[-128.41253662 -243.17781067]
[-123.99384308 -257.52896118]
[-117.99609375 -271.29510498]
[-110.49470520 -284.30316162]
[-101.58402252 -296.38949585]
[-91.37609863 -307.40213013]
[-79.99932098 -317.20260620]
[-67.59675598 -325.66760254]
[-54.32437515 -332.69070435]
[-40.34910202 -338.18359375]
[-25.84668732 -342.07717896]
[-10.99951267 -344.32247925]
[4.00570250 -344.89129639]
[18.98025131 -343.77642822]
[33.73581314 -340.99194336]
[48.08681870 -336.57281494]
[61.85279465 -330.57464600]
[74.86061096 -323.07287598]
[86.94669342 -314.16183472]
[97.95903015 -303.95358276]
[107.75914764 -292.57650757]
[116.22378540 -280.17367554]
[123.24649048 -266.90109253]
[128.73895264 -252.92565918]
[132.63209534 -238.42312622]
[134.87696838 -223.57588196]
[135.44531250 -208.57064819]
[134.33001709 -193.59614563]
[131.54507446 -178.84066772]
[127.12553406 -164.48979187]
[121.12695312 -150.72398376]
[113.62479401 -137.71640015]
[104.71338654 -125.63058472]
[94.50480652 -114.61854553]
[83.12744141 -104.81877899]
[70.72436523 -96.35450745]
[57.45156860 -89.33219910]
[62.93859863 -75.37181091]
[68.42562866 -61.41141891]
[73.91266632 -47.45103073]
[87.62750244 -41.75552368]
[93.39100647 -27.67586899]
[87.32404327 -13.32910061]
[92.81107330 0.63128954]
[105.55192566 1.73333275]
[116.71464539 7.97332144]
[124.32741547 18.24900246]
[139.09347534 15.61013699]
[153.85952759 12.97127342]
[168.62557983 10.33240891]
[183.15399170 1.59388161]
[195.57286072 13.13544369]
[187.92024231 28.26401520]
[171.26445007 25.09846497]
[156.49839783 27.73732948]
[141.73233032 30.37619209]
[126.96627808 33.01505661]
[124.29548645 44.17496109]
[117.63268280 53.65700912]
[107.84806061 60.07687378]
[109.71566772 74.96015167]
[111.58328247 89.84343719]
[120.09437561 102.19500732]
[133.33695984 109.24014282]
[146.57954407 116.28527832]
[162.28100586 112.99229431]
[174.55294800 123.32567596]
[173.98139954 139.35855103]
[161.00479126 148.79185486]
[145.57768250 144.38917542]
[139.53440857 129.52786255]
[126.29182434 122.48272705]
[113.04924011 115.43759155]
[100.19083405 123.16167450]
[100.19083405 138.16168213]
[100.19083405 153.16168213]
[100.19083405 168.16168213]
[100.19083405 183.16168213]
[100.19083405 198.16168213]
[100.19083405 213.16168213]
[100.19083405 228.16168213]
[100.19083405 243.16168213]
[100.19083405 258.16168213]
[114.73072052 262.22299194]
[127.63510132 270.05749512]
[137.94639587 281.08383179]
[144.89941406 294.48376465]
[147.97821045 309.26290894]
[146.95431519 324.32461548]
[141.90371704 338.55111694]
[133.20118713 350.88677979]
[121.49253082 360.41619873]
[107.64659119 366.43222046]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 119]
[27 118]
[28 117]
[32 101]
[33 100]
[36 97]
[37 96]
[38 95]
[39 94]
[104 114]
[105 113]
[106 112]
[107 111]
[120 130]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
