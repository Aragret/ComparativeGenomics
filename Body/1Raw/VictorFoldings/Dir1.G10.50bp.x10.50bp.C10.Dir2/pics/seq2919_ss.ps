%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCCGAGCGGGGGGGGGGAGUACAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAUACUCAAUUGAxxxxxxxxxxCCGGCAGGUUUGAAGCUGCUUCUUCGAAUUUGCAAUUCAAUAUGAAAAUCCCCCCCCCCCACCUCGGAGC\
) } def
/len { sequence length } bind def

/coor [
[84.68979645 465.11749268]
[71.46959686 457.84503174]
[60.58279419 447.39804077]
[52.77166367 434.48876953]
[48.56878281 419.99746704]
[48.26070786 404.91213989]
[51.86845016 390.26129150]
[59.14602280 377.04391479]
[69.59722900 366.16113281]
[82.50949097 358.35501099]
[97.00242615 354.15771484]
[96.69037628 339.16094971]
[96.37831879 324.16421509]
[96.06626129 309.16744995]
[95.75420380 294.17071533]
[95.44214630 279.17395020]
[95.13008881 264.17718506]
[94.81803894 249.18043518]
[94.50598145 234.18368530]
[94.19392395 219.18693542]
[93.88186646 204.19018555]
[85.88146210 191.62663269]
[93.32999420 177.66847229]
[83.43591309 163.20794678]
[92.35769653 147.13368225]
[91.73371887 132.14666748]
[91.10974121 117.15965271]
[80.55844879 106.49803162]
[65.57873535 105.71818542]
[50.59902191 104.93833923]
[38.91455078 115.23934937]
[23.73409843 114.23508453]
[13.98566532 103.03224182]
[-0.99404866 102.25239563]
[-15.97376251 101.47255707]
[-30.95347786 100.69271088]
[-43.78659439 110.32030487]
[-59.27824402 106.15038300]
[-65.54456329 91.38173676]
[-57.77856445 77.34362030]
[-41.93765640 74.80486298]
[-30.17363167 85.71299744]
[-15.19391823 86.49283600]
[-0.21420352 87.27268219]
[14.76551056 88.05252838]
[25.62453461 77.92251587]
[40.82720566 78.50000000]
[51.37886810 89.95862579]
[66.35858154 90.73847198]
[81.33829498 91.51831055]
[92.42961121 81.41966248]
[93.05358887 66.43264771]
[93.67756653 51.44563293]
[85.13558197 63.77585983]
[74.39106750 74.24273682]
[61.84148788 82.45906067]
[47.95107269 88.12089539]
[33.23366165 91.01879120]
[18.23368645 91.04556274]
[3.50602722 88.20021057]
[-10.40450859 82.58798981]
[-22.98333740 74.41651917]
[-33.76514435 63.98806000]
[-42.35108185 51.68840027]
[-48.42353821 37.97252274]
[-51.75788498 23.34781456]
[-52.23077393 8.35526943]
[-49.82471085 -6.45050144]
[-44.62870026 -20.52180099]
[-36.83495712 -33.33810425]
[-26.73178673 -44.42530060]
[-14.69293022 -53.37325668]
[-1.16372943 -59.85096741]
[13.35534096 -63.61880493]
[28.32718849 -64.53739166]
[43.19797134 -62.57274628]
[57.41758347 -57.79754257]
[70.46001434 -50.38843155]
[81.84279633 -40.61948395]
[91.14485931 -28.85208511]
[98.02208710 -15.52152824]
[102.22008514 -1.12094450]
[103.58355713 13.81695843]
[102.06336212 28.73314095]
[111.32830811 16.93650055]
[120.59325409 5.13986063]
[129.85820007 -6.65677929]
[132.29711914 -22.28886986]
[146.24324036 -27.51909256]
[148.02995300 -43.82061768]
[163.14775085 -50.17546463]
[176.04473877 -40.04631424]
[173.45359802 -23.85316658]
[158.03987122 -18.25414467]
[156.26365662 -3.46582794]
[141.65484619 2.60817003]
[132.38989258 14.40480995]
[123.12494659 26.20145035]
[113.86000061 37.99808884]
[108.66458130 52.06961060]
[108.04060364 67.05662537]
[107.41662598 82.04364014]
[118.18743896 92.48345184]
[133.14768982 91.39214325]
[141.54209900 87.62576294]
[148.42994690 90.43704987]
[163.40965271 89.65720367]
[178.38937378 88.87735748]
[193.36907959 88.09751129]
[208.34880066 87.31766510]
[223.85215759 80.45603180]
[234.73739624 93.45403290]
[225.26071167 107.51207733]
[209.12864685 102.29738617]
[194.14892578 103.07722473]
[179.16921997 103.85707092]
[164.18949890 104.63691711]
[149.20979309 105.41676331]
[134.23899841 106.35239410]
[119.27874756 107.44370270]
[113.43393707 113.64019012]
[106.09675598 116.53567505]
[106.72073364 131.52268982]
[107.34471130 146.50970459]
[116.31378937 155.83760071]
[116.49022675 168.37506104]
[108.32675171 177.35641479]
[116.34947205 190.99264526]
[108.87862396 203.87812805]
[109.19067383 218.87487793]
[109.50273132 233.87162781]
[109.81478882 248.86837769]
[110.12684631 263.86514282]
[110.43890381 278.86187744]
[110.75096130 293.85864258]
[111.06301117 308.85540771]
[111.37506866 323.85214233]
[111.68712616 338.84890747]
[111.99918365 353.84567261]
[126.65417480 357.43643188]
[139.87998962 364.69869995]
[150.77485657 375.13726807]
[158.59594727 388.04049683]
[162.81001282 402.52856445]
[163.12974548 417.61364746]
[159.53330994 432.26727295]
[152.26594543 445.49026489]
[141.82315063 456.38110352]
[128.91691589 464.19720459]
[114.42723083 468.40570068]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[23 127]
[25 124]
[26 123]
[27 122]
[28 50]
[29 49]
[30 48]
[33 45]
[34 44]
[35 43]
[36 42]
[51 102]
[52 101]
[53 100]
[84 99]
[85 98]
[86 97]
[87 96]
[89 94]
[103 120]
[104 119]
[106 118]
[107 117]
[108 116]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
