%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCUAGGAGGGGGGGGGGUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCAAAxxxxxxxxxxACCCUCACACGAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCCCCCCCCCCCAGCCCUAGCA\
) } def
/len { sequence length } bind def

/coor [
[104.77941895 365.44479370]
[90.93347931 359.42877197]
[79.22481537 349.89935303]
[70.52229309 337.56369019]
[65.47169495 323.33715820]
[64.44779968 308.27548218]
[67.52659607 293.49633789]
[74.47962189 280.09640503]
[84.79090881 269.07006836]
[97.69528961 261.23556519]
[112.23517609 257.17425537]
[112.23517609 242.17424011]
[112.23517609 227.17424011]
[112.23517609 212.17424011]
[112.23517609 197.17424011]
[112.23517609 182.17424011]
[112.23517609 167.17424011]
[112.23517609 152.17424011]
[112.23517609 137.17424011]
[112.23517609 122.17424774]
[97.20833588 123.69467926]
[84.92232513 116.55401611]
[79.53801727 104.37319946]
[64.72026062 102.04209137]
[61.51504517 109.14500427]
[56.71332932 115.43447113]
[50.52090073 120.55166626]
[43.22407150 124.18971252]
[35.17662811 126.11168671]
[26.78271484 126.16535950]
[18.47656250 124.29376984]
[10.70001793 120.54092407]
[3.87907124 115.05223846]
[-1.59938848 108.06947327]
[-5.40932369 99.92038727]
[-20.34363174 98.51808929]
[-35.27793884 97.11578369]
[-50.21224594 95.71347809]
[-66.54726410 100.25258636]
[-75.43096924 85.81250000]
[-64.01445770 73.27855682]
[-48.80994415 80.77916718]
[-33.87563705 82.18147278]
[-18.94132805 83.58377838]
[-4.00702000 84.98608398]
[0.74679476 70.75930023]
[-12.03056240 62.90187836]
[-24.80792046 55.04445267]
[-40.68420410 57.35164261]
[-52.28770828 46.27291107]
[-50.71721649 30.30691338]
[-37.17747498 21.70139503]
[-22.05501366 27.05777359]
[-16.95049477 42.26709366]
[-4.17313671 50.12451935]
[8.60422039 57.98194504]
[35.40019989 51.60513306]
[58.46994781 63.96053314]
[67.05136108 87.22433472]
[81.86912537 89.55544281]
[87.18112946 82.54339600]
[95.14353180 78.14167023]
[104.50668335 77.31844330]
[113.68551636 80.45676422]
[121.02788544 87.24837494]
[125.11093903 96.70796967]
[137.19093323 87.81562042]
[149.27091980 78.92327118]
[161.35090637 70.03092194]
[153.78506470 57.06211090]
[147.64060974 43.36255646]
[142.98715210 29.08749199]
[139.87744141 14.39866066]
[138.34669495 -0.53750092]
[138.41226196 -15.55175400]
[140.07341003 -30.47397614]
[143.31129456 -45.13508606]
[148.08924866 -59.36896133]
[154.35313416 -73.01432800]
[162.03195190 -85.91656494]
[171.03872681 -97.92948151]
[181.27139282 -108.91696167]
[192.61398315 -118.75451660]
[204.93801880 -127.33067322]
[218.10383606 -134.54824829]
[231.96224976 -140.32548523]
[246.35624695 -144.59690857]
[261.12271118 -147.31410217]
[276.09436035 -148.44630432]
[291.10153198 -147.98068237]
[305.97421265 -145.92251587]
[320.54382324 -142.29510498]
[334.64532471 -137.13955688]
[348.11892700 -130.51429749]
[360.81198120 -122.49440765]
[372.58062744 -113.17073059]
[383.29156494 -102.64892578]
[392.82336426 -91.04821777]
[401.06808472 -78.50003815]
[407.93228149 -65.14658356]
[413.33819580 -51.13914108]
[417.22454834 -36.63644028]
[419.54730225 -21.80279922]
[420.28015137 -6.80629969]
[419.41482544 8.18313885]
[416.96105957 22.99567413]
[412.94671631 37.46347046]
[407.41723633 51.42259216]
[400.43533325 64.71487427]
[392.08004761 77.18970490]
[382.44607544 88.70574188]
[371.64260864 99.13248444]
[359.79202271 108.35179901]
[347.02862549 116.25922394]
[333.49697876 122.76515961]
[319.35049438 127.79589081]
[304.74935913 131.29441833]
[289.85910034 133.22109985]
[274.84838867 133.55409241]
[259.88732910 132.28962708]
[245.14544678 129.44204712]
[230.78976440 125.04360962]
[216.98294067 119.14414978]
[203.88142395 111.81050873]
[191.63365173 103.12578583]
[180.37841797 93.18838501]
[170.24325562 82.11091614]
[158.16326904 91.00326538]
[146.08328247 99.89561462]
[134.00329590 108.78796387]
[127.23517609 122.17424774]
[127.23517609 137.17424011]
[127.23517609 152.17424011]
[127.23517609 167.17424011]
[127.23517609 182.17424011]
[127.23517609 197.17424011]
[127.23517609 212.17424011]
[127.23517609 227.17424011]
[127.23517609 242.17424011]
[127.23517609 257.17425537]
[141.77505493 261.23556519]
[154.67944336 269.07006836]
[164.99072266 280.09640503]
[171.94374084 293.49633789]
[175.02255249 308.27548218]
[173.99865723 323.33715820]
[168.94805908 337.56369019]
[160.24552917 349.89935303]
[148.53686523 359.42877197]
[134.69093323 365.44479370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 60]
[24 59]
[35 45]
[36 44]
[37 43]
[38 42]
[46 56]
[47 55]
[48 54]
[66 130]
[67 129]
[68 128]
[69 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
