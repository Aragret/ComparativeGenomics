%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUCUUCUGGGGGGGGGGUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCxxxxxxxxxxUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACCCCCCCCCCCAUAAGCUUCU\
) } def
/len { sequence length } bind def

/coor [
[66.67252350 394.52923584]
[53.45232773 387.25677490]
[42.56552505 376.80978394]
[34.75439453 363.90054321]
[30.55151176 349.40921021]
[30.24344063 334.32388306]
[33.85118103 319.67303467]
[41.12875366 306.45565796]
[51.57995987 295.57290649]
[64.49222565 287.76675415]
[78.98516083 283.56945801]
[78.67310333 268.57269287]
[78.36104584 253.57595825]
[78.04898834 238.57919312]
[77.73693848 223.58244324]
[77.42488098 208.58569336]
[77.11282349 193.58894348]
[76.80076599 178.59217834]
[76.48870850 163.59542847]
[76.17665100 148.59867859]
[75.86460114 133.60192871]
[69.64487457 129.41085815]
[61.26254272 141.85015869]
[48.82336044 133.46763611]
[57.20543671 121.02870941]
[50.98571777 116.83763885]
[36.96900558 122.17915344]
[24.32127190 133.46946716]
[9.97094631 124.44148254]
[14.67354679 108.15277863]
[31.62749100 108.16243744]
[45.64420319 102.82092285]
[53.09911346 89.80461884]
[50.61399460 75.01190948]
[48.12887955 60.21920013]
[45.64376068 45.42649460]
[42.65487289 42.07566452]
[41.08713531 38.31890488]
[40.88991547 34.66609955]
[41.84804153 31.55547714]
[43.62076569 29.30496979]
[42.37389374 14.35688305]
[41.12701797 -0.59120363]
[39.88014221 -15.53929043]
[38.63326645 -30.48737717]
[29.77560616 -43.59662628]
[36.42817688 -56.92301559]
[35.18130112 -71.87110138]
[33.93442535 -86.81919098]
[30.87655830 -91.20883942]
[29.94702721 -95.86591339]
[30.88230515 -99.91893005]
[33.10591507 -102.73371887]
[25.08319283 -116.36994171]
[32.55404282 -129.25541687]
[28.09722900 -143.57801819]
[19.84493828 -156.10398865]
[11.59265041 -168.62994385]
[3.34036088 -181.15591431]
[-11.55460358 -188.01681519]
[-12.79072189 -204.36930847]
[0.90361822 -213.39134216]
[15.44085312 -205.80181885]
[15.86632252 -189.40820312]
[24.11861229 -176.88223267]
[32.37090302 -164.35627747]
[40.62319183 -151.83030701]
[40.17711639 -166.82366943]
[42.90422058 -181.57368469]
[48.68173981 -195.41638184]
[57.24959946 -207.72865295]
[68.22212982 -217.95623779]
[81.10540009 -225.63877869]
[95.31948090 -230.43041992]
[110.22453308 -232.11549377]
[125.14960480 -230.61813354]
[139.42286682 -226.00575256]
[152.40180969 -218.48597717]
[163.50218201 -208.39727783]
[172.22431946 -196.19383240]
[178.17559814 -182.42494202]
[181.08810425 -167.71041870]
[180.83076477 -152.71261597]
[177.41514587 -138.10667419]
[170.99501038 -124.55006409]
[161.85934448 -112.65302277]
[150.41938782 -102.95109558]
[137.19010925 -95.88100433]
[122.76700592 -91.76101685]
[107.79934692 -90.77658081]
[92.96088409 -92.97200775]
[78.91955566 -98.24848175]
[66.30743408 -106.36848450]
[55.69224548 -116.96649170]
[47.55079651 -129.56747437]
[55.55119705 -117.00392914]
[48.10266876 -103.04577637]
[48.88251495 -88.06606293]
[50.12938690 -73.11797333]
[51.37626266 -58.16988754]
[60.14473724 -46.12982559]
[53.58135605 -31.73425293]
[54.82822800 -16.78616524]
[56.07510376 -1.83807814]
[57.32197952 13.11000919]
[58.56885147 28.05809593]
[60.43646622 42.94137573]
[62.92158508 57.73408127]
[65.40670013 72.52678680]
[67.89182281 87.31949615]
[104.37101746 71.54577637]
[122.99599457 98.35807037]
[137.49159241 102.21522522]
[151.98718262 106.07238770]
[166.48278809 109.92954254]
[178.43948364 100.03929901]
[193.92807007 99.09950256]
[206.99287415 107.47151947]
[212.61019897 121.93614197]
[208.62007141 136.93142700]
[196.55679321 146.69137573]
[181.05891418 147.46310425]
[168.08570862 138.94984436]
[162.62562561 124.42514038]
[148.13002014 120.56798553]
[133.63442993 116.71082306]
[119.13883209 112.85366821]
[110.02623749 126.98561096]
[90.86135101 133.28987122]
[91.17340851 148.28662109]
[91.48546600 163.28337097]
[91.79752350 178.28013611]
[92.10957336 193.27688599]
[92.42163086 208.27363586]
[92.73368835 223.27038574]
[93.04574585 238.26715088]
[93.35780334 253.26390076]
[93.66986084 268.26065063]
[93.98191071 283.25741577]
[108.63690948 286.84817505]
[121.86271667 294.11044312]
[132.75758362 304.54901123]
[140.57867432 317.45223999]
[144.79275513 331.94030762]
[145.11247253 347.02539062]
[141.51605225 361.67901611]
[134.24868774 374.90200806]
[123.80587769 385.79284668]
[110.89965057 393.60894775]
[96.40995789 397.81744385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[26 32]
[27 31]
[33 110]
[34 109]
[35 108]
[36 107]
[41 106]
[42 105]
[43 104]
[44 103]
[45 102]
[47 100]
[48 99]
[49 98]
[53 97]
[55 95]
[56 67]
[57 66]
[58 65]
[59 64]
[112 127]
[113 126]
[114 125]
[115 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
