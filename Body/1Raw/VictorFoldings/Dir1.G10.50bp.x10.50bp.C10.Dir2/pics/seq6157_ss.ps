%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCGCCGGGGGGGGGGGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUCUUCGAAUUxxxxxxxxxxCCGCCAACUAAUAUUUCACUUUACAUCCAAACAUCACUUUGGCUUCGAAGCCCCCCCCCCCCGCCGCCUG\
) } def
/len { sequence length } bind def

/coor [
[81.68764496 346.84481812]
[70.19148254 337.03005981]
[62.10042191 324.26187134]
[58.13391495 309.67565918]
[58.64466095 294.56832886]
[63.58724594 280.28329468]
[72.52217865 268.09075928]
[84.65496063 259.07482910]
[98.90676880 254.03723145]
[98.28279114 239.05021667]
[97.65881348 224.06320190]
[97.03483582 209.07617188]
[96.41085815 194.08915710]
[95.78688049 179.10214233]
[95.16290283 164.11512756]
[94.53892517 149.12811279]
[93.91494751 134.14109802]
[93.29097748 119.15408325]
[87.74531555 114.10475922]
[81.10774994 127.55625153]
[80.83782196 142.55381775]
[71.49153137 154.28611755]
[56.93376541 157.90158081]
[43.18449020 151.90512085]
[35.92933655 138.77642822]
[38.16846466 123.94449615]
[48.97594833 113.54265594]
[63.88194275 111.87214661]
[76.65399933 104.00611115]
[71.10834503 98.95677948]
[56.12862778 99.73662567]
[41.14891434 100.51647186]
[26.16919899 101.29631805]
[15.77752304 113.20381927]
[0.00417697 114.19229889]
[-11.79279232 103.67530823]
[-12.61445236 87.89239502]
[-1.97332633 76.20727539]
[13.81739426 75.55252838]
[25.38935471 86.31660461]
[40.36906815 85.53675842]
[55.34878159 84.75691223]
[70.32849884 83.97706604]
[74.18565369 69.48147583]
[61.57452774 61.35993195]
[48.96340179 53.23838806]
[36.35227203 45.11684418]
[20.56063652 44.15000534]
[14.04953957 30.75392914]
[-2.34762669 30.49901581]
[-10.08795929 16.04151726]
[-1.20886838 2.25406694]
[15.15559864 3.32001281]
[22.17108154 18.14280128]
[37.06068802 18.52873421]
[44.47381592 32.50571823]
[57.08494186 40.62725830]
[69.69606781 48.74880219]
[82.30719757 56.87034607]
[97.81896973 66.37419891]
[105.33583069 79.92160797]
[104.33222961 93.44871521]
[115.63123322 83.58299255]
[126.93023682 73.71726990]
[138.22924805 63.85155106]
[149.52824402 53.98582840]
[160.82725525 44.12010193]
[172.12625122 34.25437927]
[157.25198364 36.19239044]
[142.74085999 32.39403534]
[130.72364807 23.41703796]
[122.96487427 10.57953644]
[120.60379791 -4.23347521]
[123.98711395 -18.84693336]
[132.61802673 -31.11507607]
[145.22921753 -39.23651123]
[159.96894836 -42.01873016]
[174.67288208 -39.05320740]
[187.18197632 -30.77538490]
[195.65948486 -18.40073204]
[198.86058044 -3.74628186]
[196.31526184 11.03618526]
[188.39770508 23.77560234]
[202.05393982 17.57019424]
[215.71018982 11.36478806]
[229.36642456 5.15938091]
[243.02267456 -1.04602635]
[239.49893188 -15.67407513]
[238.80752563 -30.70465851]
[240.97343445 -45.59443283]
[245.91836548 -59.80513763]
[253.46356201 -72.82306671]
[263.33627319 -84.17763519]
[275.17959595 -93.45837402]
[288.56539917 -100.32979584]
[303.00982666 -104.54350281]
[317.99069214 -105.94717407]
[332.96643066 -104.49005890]
[347.39572144 -100.22483826]
[360.75695801 -93.30569458]
[372.56707764 -83.98275757]
[382.39920044 -72.59303284]
[389.89788818 -59.54825974]
[394.79208374 -45.31999969]
[396.90484619 -30.42259407]
[396.15982056 -15.39457321]
[392.58392334 -0.77919096]
[386.30639648 12.89521503]
[377.55422974 25.13432503]
[366.64373779 35.49570084]
[353.96939087 43.60478592]
[339.98931885 49.16844177]
[325.20892334 51.98554611]
[310.16247559 51.95426178]
[295.39392090 49.07572174]
[281.43710327 43.45398331]
[268.79656982 35.29226685]
[257.92929077 24.88561058]
[249.22807312 12.61021519]
[235.57183838 18.81562233]
[221.91558838 25.02102852]
[208.25935364 31.22643661]
[194.60310364 37.43184280]
[181.99197388 45.55338669]
[170.69297791 55.41910934]
[159.39396667 65.28482819]
[148.09497070 75.15055084]
[136.79595947 85.01628113]
[125.49695587 94.88200378]
[114.19795227 104.74772644]
[108.27799225 118.53010559]
[108.90196991 133.51712036]
[109.52594757 148.50413513]
[110.14992523 163.49114990]
[110.77390289 178.47816467]
[111.39787292 193.46517944]
[112.02185059 208.45219421]
[112.64582825 223.43922424]
[113.26980591 238.42623901]
[113.89378357 253.41325378]
[128.51501465 257.24874878]
[141.35527039 265.22491455]
[151.27278137 276.63256836]
[157.38569641 290.45730591]
[159.15046692 305.46987915]
[156.41017151 320.33532715]
[149.40846252 333.73187256]
[138.76794434 344.46829224]
[125.43475342 351.58990479]
[110.59446716 354.46347046]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 140]
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[30 43]
[31 42]
[32 41]
[33 40]
[44 59]
[45 58]
[46 57]
[47 56]
[49 54]
[62 130]
[63 129]
[64 128]
[65 127]
[66 126]
[67 125]
[68 124]
[83 123]
[84 122]
[85 121]
[86 120]
[87 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
