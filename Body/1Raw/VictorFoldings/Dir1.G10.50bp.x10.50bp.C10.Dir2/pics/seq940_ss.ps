%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUUUGGUCGGGGGGGGGGCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUxxxxxxxxxxUGAUUAACCUUUAGCAAUAAACGAAAGUUUAACUAAGCUAUACUAACCCCCCCCCCCCCCAGGGUUGGUC\
) } def
/len { sequence length } bind def

/coor [
[81.09777832 366.66412354]
[74.96167755 352.83648682]
[73.40089417 337.78927612]
[76.56832886 322.99661255]
[84.15367889 309.90777588]
[95.41379547 299.80505371]
[109.24553680 293.67822266]
[107.68795776 278.75930786]
[98.46975708 270.86425781]
[97.08381653 258.40237427]
[104.82170868 248.03036499]
[103.57482910 233.08227539]
[102.32795715 218.13418579]
[101.08108521 203.18609619]
[99.83420563 188.23802185]
[98.58733368 173.28993225]
[97.34046173 158.34184265]
[96.09358215 143.39375305]
[94.84671021 128.44566345]
[93.59983826 113.49758148]
[87.38011932 109.30651093]
[74.94067383 100.92436218]
[68.72095490 96.73329163]
[54.39835739 101.19010925]
[40.07575989 105.64692688]
[36.77349854 120.64661407]
[26.40197182 131.97476196]
[11.75106525 136.58415222]
[-3.23819780 133.23489380]
[-14.53378201 122.82791138]
[-19.09723282 108.16262817]
[-15.70100307 93.18393707]
[-5.25866270 81.92102814]
[9.42085171 77.40357208]
[24.38882446 80.84673309]
[35.61894608 91.32432556]
[49.94154358 86.86751556]
[64.26413727 82.41069794]
[82.58281708 83.39855957]
[95.98515320 92.74324036]
[100.59071350 78.46778107]
[105.19628143 64.19231415]
[109.80184174 49.91685486]
[114.40740967 35.64139557]
[119.01297760 21.36593628]
[123.46978760 7.04333830]
[127.77737427 -7.32484579]
[124.32900238 -22.76567841]
[135.39532471 -32.73492432]
[139.70291138 -47.10311127]
[144.01049805 -61.47129440]
[133.44129944 -71.95185852]
[128.88973999 -86.03379822]
[131.29737854 -100.54940796]
[140.04946899 -112.27106476]
[153.12940979 -118.62890625]
[153.44146729 -133.62565613]
[153.75352478 -148.62242126]
[153.75352478 -163.62242126]
[153.44146729 -178.61917114]
[153.12940979 -193.61592102]
[138.35581970 -196.54077148]
[124.55654907 -202.57353210]
[112.37702942 -211.43206787]
[102.38692474 -222.70202637]
[95.05348969 -235.85629272]
[90.71971130 -250.27961731]
[89.58830261 -265.29739380]
[91.71217346 -280.20724487]
[96.99198151 -294.31176758]
[105.18079376 -306.95129395]
[115.89559174 -317.53463745]
[128.63523865 -325.56680298]
[142.80386353 -330.67208862]
[157.73878479 -332.61175537]
[172.74145508 -331.29504395]
[187.11019897 -326.78356934]
[200.17292786 -319.28829956]
[211.31871033 -309.15985107]
[220.02621460 -296.87188721]
[225.88818359 -282.99920654]
[228.63044739 -268.19064331]
[228.12472534 -253.13877869]
[224.39468384 -238.54765320]
[217.61479187 -225.09971619]
[208.10215759 -213.42393494]
[196.30168152 -204.06643677]
[182.76531982 -197.46485901]
[168.12617493 -193.92797852]
[168.43823242 -178.93122864]
[168.75027466 -163.93447876]
[171.56307983 -160.00207520]
[171.89137268 -154.24678040]
[168.75027466 -148.31036377]
[168.43823242 -133.31359863]
[168.12617493 -118.31684875]
[177.68571472 -113.80811310]
[185.14898682 -106.32389832]
[199.16569519 -111.66540527]
[213.18240356 -117.00691986]
[227.19911194 -122.34843445]
[241.21583557 -127.68994904]
[251.14173889 -140.74400330]
[267.37347412 -138.40679932]
[273.21322632 -123.08265686]
[262.65356445 -110.53573608]
[246.55734253 -113.67323303]
[232.54063416 -108.33171844]
[218.52392578 -102.99020386]
[204.50720215 -97.64869690]
[190.49049377 -92.30718231]
[187.74395752 -74.88423920]
[175.78231812 -61.68871307]
[158.37867737 -57.16371155]
[154.07109070 -42.79552460]
[149.76350403 -28.42734146]
[153.51998901 -14.01421738]
[142.14555359 -3.01726127]
[137.83796692 11.35092258]
[138.93685913 18.70878220]
[133.28843689 25.97150040]
[128.68287659 40.24695969]
[124.07730865 54.52242279]
[119.47174072 68.79788208]
[114.86618042 83.07334137]
[110.26061249 97.34880066]
[108.54792023 112.25070190]
[109.79479980 127.19879150]
[111.04167175 142.14688110]
[112.28854370 157.09497070]
[113.53542328 172.04306030]
[114.78229523 186.99113464]
[116.02916718 201.93922424]
[117.27604675 216.88731384]
[118.52291870 231.83540344]
[119.76979065 246.78349304]
[130.62351990 261.62182617]
[122.60687256 277.20172119]
[124.16445160 292.12063599]
[138.96343994 295.25833130]
[152.06750488 302.81735229]
[162.19282532 314.05715942]
[168.34745789 327.87655640]
[169.92840576 342.92166138]
[166.78079224 357.71856689]
[159.21299744 370.81753540]
[147.96643066 380.93533325]
[134.14291382 387.08071899]
[119.09672546 388.65158081]
[104.30195618 385.49404907]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 139]
[8 138]
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[23 38]
[24 37]
[25 36]
[40 126]
[41 125]
[42 124]
[43 123]
[44 122]
[45 121]
[46 119]
[47 118]
[49 116]
[50 115]
[51 114]
[56 96]
[57 95]
[58 94]
[59 91]
[60 90]
[61 89]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
