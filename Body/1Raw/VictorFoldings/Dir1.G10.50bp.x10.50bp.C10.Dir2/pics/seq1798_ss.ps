%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCACCCAGGGGGGGGGGACUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCUxxxxxxxxxxGAAAAAACCUUGUAGAGAGAGUAAAAAAUUUAACACCCAUAGUAGGCCUACCCCCCCCCCAAAGCAGCCA\
) } def
/len { sequence length } bind def

/coor [
[70.20167542 423.05322266]
[56.35573196 417.03720093]
[44.64707184 407.50778198]
[35.94454575 395.17211914]
[30.89394569 380.94558716]
[29.87005424 365.88391113]
[32.94885254 351.10473633]
[39.90187454 337.70480347]
[50.21315765 326.67849731]
[63.11753845 318.84396362]
[77.65742493 314.78265381]
[77.65742493 299.78265381]
[77.65742493 284.78265381]
[77.65742493 269.78265381]
[77.65742493 254.78266907]
[77.65742493 239.78266907]
[77.65742493 224.78266907]
[77.65742493 209.78266907]
[77.65742493 194.78266907]
[77.65742493 179.78266907]
[67.88801575 191.16505432]
[53.55883408 195.60063171]
[39.06731033 191.72819519]
[28.86071777 180.73612976]
[26.07132721 165.99777222]
[31.55516624 152.03611755]
[43.62931442 143.13584900]
[58.58837128 142.02832031]
[71.84159088 149.05342102]
[79.32192230 162.05603027]
[82.11425018 147.31822205]
[84.90657043 132.58041382]
[87.69889832 117.84261322]
[80.06558228 105.86416626]
[81.64518738 92.34766388]
[90.98275757 83.28385162]
[89.11514282 68.40057373]
[87.24752808 53.51729202]
[85.37992096 38.63401413]
[82.53301239 35.16175079]
[81.12290192 31.34302711]
[81.07780457 27.68517876]
[82.16449738 24.61710548]
[84.02930450 22.44228935]
[83.40532684 7.45527363]
[75.10066223 -6.01109362]
[82.30182648 -19.04920959]
[81.67784882 -34.03622437]
[81.05387115 -49.02323914]
[78.50544739 -52.72013474]
[77.41765594 -56.64285660]
[77.67677307 -60.29179382]
[79.01473999 -63.25891876]
[81.05387115 -65.27119446]
[73.89733887 -79.38127899]
[82.15737152 -91.77568054]
[82.78134918 -106.76269531]
[83.40532684 -121.74971008]
[84.02930450 -136.73672485]
[69.33956146 -139.95890808]
[55.43257904 -145.68315125]
[42.73098755 -153.73551941]
[31.62076569 -163.87130737]
[22.43954468 -175.78250122]
[15.46632957 -189.10711670]
[10.91302967 -203.44024658]
[8.91801453 -218.34631348]
[9.54190922 -233.37236023]
[12.76575565 -248.06173706]
[18.49158478 -261.96807861]
[26.54539299 -274.66873169]
[36.68243790 -285.77780151]
[48.59466171 -294.95767212]
[61.92006683 -301.92938232]
[76.25371552 -306.48107910]
[91.16001129 -308.47439575]
[106.18598175 -307.84878540]
[120.87500000 -304.62329102]
[134.78068542 -298.89587402]
[147.48045349 -290.84063721]
[158.58836365 -280.70233154]
[167.76689148 -268.78906250]
[174.73707581 -255.46286011]
[179.28712463 -241.12869263]
[181.27876282 -226.22216797]
[180.65145874 -211.19627380]
[177.42428589 -196.50761414]
[171.69529724 -182.60258484]
[163.63861084 -169.90373230]
[153.49905396 -158.79696655]
[141.58474731 -149.61979675]
[128.25775146 -142.65112305]
[113.92307281 -138.10269165]
[99.01631927 -136.11274719]
[98.39234924 -121.12573242]
[97.76837158 -106.13871765]
[97.14439392 -91.15170288]
[104.34555817 -78.11358643]
[96.04088593 -64.64721680]
[96.04088593 -49.64721680]
[96.66486359 -34.66020203]
[97.28884125 -19.67318535]
[105.54888153 -7.27879095]
[98.39234924 6.83129644]
[99.01631927 21.81831169]
[100.26319885 36.76639938]
[102.13081360 51.64968109]
[103.99842072 66.53295898]
[105.86603546 81.41623688]
[109.57784271 66.88274384]
[122.07712555 58.59010315]
[136.91047668 60.81982422]
[146.41940308 72.42070007]
[145.69442749 87.40316772]
[135.10986328 98.03175354]
[120.12857819 98.81825256]
[134.35534668 103.57206726]
[147.58978271 95.24237061]
[163.07505798 97.41959381]
[173.49951172 109.07570648]
[173.94100952 124.70706177]
[164.19111633 136.93299866]
[148.85342407 139.98080444]
[135.16992188 132.41140747]
[129.60153198 117.79884338]
[115.37476349 113.04502869]
[102.43670654 120.63494110]
[99.64437866 135.37274170]
[96.85205841 150.11054993]
[94.05973053 164.84835815]
[92.65742493 179.78266907]
[92.65742493 194.78266907]
[92.65742493 209.78266907]
[92.65742493 224.78266907]
[92.65742493 239.78266907]
[92.65742493 254.78266907]
[92.65742493 269.78265381]
[92.65742493 284.78265381]
[92.65742493 299.78265381]
[92.65742493 314.78265381]
[107.19731140 318.84396362]
[120.10169220 326.67849731]
[130.41297913 337.70480347]
[137.36599731 351.10473633]
[140.44479370 365.88391113]
[139.42091370 380.94558716]
[134.37030029 395.17211914]
[125.66778564 407.50778198]
[113.95912170 417.03720093]
[100.11318207 423.05322266]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[30 130]
[31 129]
[32 128]
[33 127]
[36 109]
[37 108]
[38 107]
[39 106]
[44 105]
[45 104]
[47 102]
[48 101]
[49 100]
[54 99]
[56 97]
[57 96]
[58 95]
[59 94]
[116 126]
[117 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
