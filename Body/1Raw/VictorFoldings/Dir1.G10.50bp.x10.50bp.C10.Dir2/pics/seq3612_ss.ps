%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCAUACCCAGGGGGGGGGGACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUxxxxxxxxxxCCUAUGAAAAAACUUCCUACCACUCACCCUAGCAUUACUUAUAUGAUAUGCCCCCCCCCCUCUCCAUACCCA\
) } def
/len { sequence length } bind def

/coor [
[50.04448700 319.69259644]
[36.14114761 316.06118774]
[22.49758530 311.55087280]
[9.16929722 306.17996216]
[-3.78949857 299.97033691]
[-16.32608604 292.94723511]
[-28.38946533 285.13925171]
[-39.93056488 276.57812500]
[-50.90243912 267.29867554]
[-61.26044846 257.33868408]
[-72.33955383 267.45074463]
[-83.41866302 277.56277466]
[-94.49777222 287.67480469]
[-105.57688141 297.78686523]
[-116.65599060 307.89889526]
[-127.73509216 318.01092529]
[-138.81420898 328.12298584]
[-139.28422546 343.92028809]
[-150.84408569 354.69732666]
[-166.63554382 354.06033325]
[-177.28977966 342.38714600]
[-176.48583984 326.60333252]
[-164.70068359 316.07308960]
[-148.92623901 317.04385376]
[-137.84713745 306.93182373]
[-126.76802826 296.81979370]
[-115.68891907 286.70773315]
[-104.60980988 276.59570312]
[-93.53070831 266.48367310]
[-82.45159912 256.37161255]
[-71.37248993 246.25958252]
[-84.01936340 229.98950195]
[-95.12673187 212.63192749]
[-104.60169220 194.33209229]
[-112.36495972 175.24307251]
[-118.35158539 155.52458191]
[-122.51150513 135.34156799]
[-124.80989838 114.86289215]
[-125.22754669 94.25987244]
[-123.76094818 73.70487213]
[-120.42237854 53.36985779]
[-115.23976898 33.42494583]
[-108.25646973 14.03700066]
[-99.53091431 -4.63178349]
[-89.13608551 -22.42522240]
[-77.15895844 -39.19446182]
[-88.63876343 -48.84920502]
[-100.11856842 -58.50395203]
[-113.41002655 -51.17582321]
[-128.45169067 -49.14785385]
[-143.20930481 -52.69430923]
[-155.68701172 -61.33555984]
[-164.19731140 -73.90294647]
[-167.58926392 -88.69683838]
[-165.40411377 -103.71647644]
[-157.93739319 -116.93058014]
[-146.19892883 -126.55205536]
[-131.77622986 -131.27966309]
[-116.61986542 -130.47406006]
[-102.77960205 -124.24417114]
[-92.12722015 -113.43254089]
[-86.10337067 -99.50136566]
[-85.52272797 -84.33471680]
[-90.46382141 -69.98375702]
[-78.98401642 -60.32901001]
[-67.50421143 -50.67426300]
[-58.86941910 -59.75263214]
[-49.74332047 -68.33696747]
[-40.15413666 -76.40071869]
[-30.13152885 -83.91895294]
[-19.70648956 -90.86841583]
[-8.91125870 -97.22761536]
[2.22078109 -102.97689819]
[13.65520287 -108.09846497]
[25.35664558 -112.57649231]
[37.28892517 -116.39712524]
[49.41513443 -119.54855347]
[61.69778061 -122.02102661]
[74.09887695 -123.80690002]
[86.58007050 -124.90065002]
[99.10276794 -125.29888916]
[111.62823486 -125.00039673]
[124.11774445 -124.00609589]
[136.53266907 -122.31904602]
[148.83462524 -119.94448090]
[160.98554993 -116.88973999]
[172.94787598 -113.16426086]
[184.68461609 -108.77957916]
[196.15946960 -103.74923706]
[207.33694458 -98.08880615]
[218.18247986 -91.81578827]
[228.66253662 -84.94957733]
[238.74470520 -77.51141357]
[248.39781189 -69.52429199]
[257.59197998 -61.01291275]
[266.29882812 -52.00360870]
[274.49136353 -42.52422714]
[282.14431763 -32.60409546]
[289.23397827 -22.27388191]
[295.73840332 -11.56553745]
[301.63754272 -0.51217633]
[306.91311646 10.85201836]
[311.54879761 22.49190331]
[315.53027344 34.37148285]
[318.84521484 46.45401764]
[321.48336792 58.70214081]
[323.43658447 71.07798004]
[324.69885254 83.54325867]
[325.26620483 96.05943298]
[325.13696289 108.58779144]
[324.31143188 121.08959198]
[322.79226685 133.52618408]
[320.58407593 145.85908508]
[317.69375610 158.05015564]
[332.05062866 162.39533997]
[346.40747070 166.74052429]
[360.76434326 171.08569336]
[371.04833984 159.80731201]
[385.21063232 154.11585999]
[400.43927002 155.14140320]
[413.71057129 162.68029785]
[422.38955688 175.23570251]
[424.75296021 190.31472778]
[420.33157349 204.92343140]
[410.00323486 216.16122437]
[395.81863403 221.79685974]
[380.59417725 220.71134949]
[367.35266113 213.12025452]
[358.72317505 200.53077698]
[356.41915894 185.44255066]
[342.06231689 181.09738159]
[327.70544434 176.75219727]
[313.34857178 172.40702820]
[308.29885864 185.86027527]
[302.40176392 198.96424866]
[295.68130493 211.66564941]
[288.16485596 223.91281128]
[279.88296509 235.65588379]
[270.86929321 246.84712219]
[261.16055298 257.44100952]
[250.79621887 267.39443970]
[239.81846619 276.66690063]
[228.27192688 285.22070312]
[216.20359802 293.02102661]
[203.66255188 300.03616333]
[190.69982910 306.23757935]
[177.36813354 311.60000610]
[163.72171021 316.10168457]
[149.81607056 319.72427368]
[135.70777893 322.45303345]
[121.45423126 324.27685547]
[107.11341858 325.18835449]
[92.74365997 325.18380737]
[78.40341949 324.26321411]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 31]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[46 66]
[47 65]
[48 64]
[114 133]
[115 132]
[116 131]
[117 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
