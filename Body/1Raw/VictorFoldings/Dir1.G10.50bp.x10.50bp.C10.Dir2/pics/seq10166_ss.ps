%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCUUAAAGGGGGGGGGGACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGAxxxxxxxxxxUAACAAGCUCCAUCUGCCUACGACAAACAGACCUAAAAUCGCUCAUUGCACCCCCCCCCCUACUCUUCAA\
) } def
/len { sequence length } bind def

/coor [
[80.13838196 365.77456665]
[66.29244232 359.75854492]
[54.58378220 350.22912598]
[45.88125992 337.89346313]
[40.83065796 323.66693115]
[39.80676651 308.60525513]
[42.88556290 293.82608032]
[49.83858490 280.42617798]
[60.14987183 269.39984131]
[73.05425262 261.56533813]
[87.59413910 257.50399780]
[87.59413910 242.50401306]
[87.59413910 227.50401306]
[87.59413910 212.50401306]
[87.59413910 197.50401306]
[87.59413910 182.50401306]
[87.59413910 167.50401306]
[87.59413910 152.50401306]
[87.59413910 137.50401306]
[87.59413910 122.50401306]
[81.37483215 110.08734894]
[83.38011932 98.76391602]
[90.28965759 92.69685364]
[82.03736877 80.17089081]
[73.78507996 67.64493561]
[65.53279114 55.11896896]
[57.28050232 42.59300613]
[49.02820969 30.06704521]
[40.77592087 17.54108429]
[34.95542526 14.19006538]
[32.16765213 9.14431190]
[32.45356369 4.31795025]
[24.72948074 -8.54045200]
[17.00539589 -21.39885521]
[9.28131104 -34.25725555]
[-4.37524843 -28.01398849]
[-18.64497185 -23.33905602]
[-33.34840393 -20.29125023]
[-48.30063248 -18.90890503]
[-63.31361771 -19.20940018]
[-78.19855499 -21.18896103]
[-92.76824951 -24.82268715]
[-106.83947754 -30.06488609]
[-120.23526764 -36.84962845]
[-132.78717041 -45.09159088]
[-144.33731079 -54.68711853]
[-154.74044800 -65.51554108]
[-163.86575317 -77.44067383]
[-171.59844971 -90.31255341]
[-177.84130859 -103.96929932]
[-182.51582336 -118.23916626]
[-185.56318665 -132.94268799]
[-186.94508362 -147.89495850]
[-186.64413452 -162.90792847]
[-184.66413879 -177.79281616]
[-181.02996826 -192.36239624]
[-175.78735352 -206.43347168]
[-169.00221252 -219.82905579]
[-160.75987244 -232.38070679]
[-151.16400146 -243.93055725]
[-140.33526611 -254.33337402]
[-128.40985107 -263.45831299]
[-115.53775024 -271.19064331]
[-101.88081360 -277.43310547]
[-87.61080933 -282.10717773]
[-72.90719604 -285.15411377]
[-57.95488739 -286.53555298]
[-42.94192123 -286.23416138]
[-28.05710030 -284.25372314]
[-13.48762226 -280.61911011]
[0.58328897 -275.37606812]
[13.97867680 -268.59051514]
[26.53007889 -260.34780884]
[38.07965088 -250.75160217]
[48.48214340 -239.92254639]
[57.60673141 -227.99687195]
[65.33866882 -215.12452698]
[71.58071136 -201.46740723]
[76.25436401 -187.19726562]
[79.30084991 -172.49356079]
[80.68185425 -157.54121399]
[80.38000488 -142.52824402]
[78.39911652 -127.64349365]
[74.76407623 -113.07411957]
[69.52061462 -99.00336456]
[62.73467636 -85.60818481]
[54.49158859 -73.05702209]
[44.89502335 -61.50774002]
[34.06566620 -51.10557556]
[22.13971329 -41.98134232]
[29.86379814 -29.12294006]
[37.58788300 -16.26453781]
[45.31196976 -3.40613484]
[53.30188370 9.28879452]
[61.55417252 21.81475639]
[69.80646515 34.34071732]
[78.05875397 46.86668015]
[86.31104279 59.39264297]
[94.56333160 71.91860199]
[102.81562042 84.44456482]
[116.33980560 90.93273163]
[131.27412415 89.53042603]
[146.20841980 88.12812805]
[150.31591797 73.51672363]
[159.42741394 61.37814713]
[172.31065369 53.35403061]
[187.22329712 50.52957153]
[202.14851379 53.28675461]
[215.06781006 61.25269699]
[224.23394775 73.35006714]
[228.40728760 87.94279480]
[227.02340698 103.05733490]
[220.26948547 116.64956665]
[209.05891418 126.88126373]
[194.90783691 132.36865234]
[179.73007202 132.36962891]
[165.57829285 126.88404846]
[154.36640930 116.65380096]
[147.61073303 103.06243134]
[132.67642212 104.46473694]
[117.74211121 105.86704254]
[131.52050781 111.79628754]
[146.29106140 114.40979767]
[156.90284729 125.01121521]
[159.53079224 139.77922058]
[153.22764587 153.39060974]
[140.26539612 160.93913269]
[125.31633759 159.70385742]
[113.76893616 150.13006592]
[109.78552246 135.66775513]
[102.59413910 122.50401306]
[102.59413910 137.50401306]
[102.59413910 152.50401306]
[102.59413910 167.50401306]
[102.59413910 182.50401306]
[102.59413910 197.50401306]
[102.59413910 212.50401306]
[102.59413910 227.50401306]
[102.59413910 242.50401306]
[102.59413910 257.50399780]
[117.13402557 261.56533813]
[130.03840637 269.39984131]
[140.34968567 280.42617798]
[147.30271912 293.82608032]
[150.38151550 308.60525513]
[149.35762024 323.66693115]
[144.30702209 337.89346313]
[135.60449219 350.22912598]
[123.89582825 359.75854492]
[110.04989624 365.77456665]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 100]
[24 99]
[25 98]
[26 97]
[27 96]
[28 95]
[29 94]
[32 93]
[33 92]
[34 91]
[35 90]
[101 121]
[102 120]
[103 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
