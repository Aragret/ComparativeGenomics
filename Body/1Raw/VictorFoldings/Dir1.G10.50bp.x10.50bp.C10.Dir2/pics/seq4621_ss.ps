%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAUAAGCUAGGGGGGGGGGUCGGGCCCAUACCCCGAAAAUGUUGGUUAUACCCUUCCCGUACUAAUUAAxxxxxxxxxxAAGGACUGCAAAACCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACUUCCCCCCCCCCUAAUUAAGCUA\
) } def
/len { sequence length } bind def

/coor [
[80.50720215 481.15573120]
[66.48526001 475.60272217]
[54.28530121 466.73638916]
[44.67422867 455.11407471]
[38.25620651 441.46636963]
[35.43466949 426.65118408]
[36.38698578 411.59982300]
[41.05328751 397.25839233]
[49.14025497 384.52844238]
[60.13953018 374.21014404]
[73.35968781 366.95217896]
[87.96970367 363.21075439]
[87.96970367 348.21075439]
[87.96970367 333.21075439]
[87.96970367 318.21075439]
[87.96970367 303.21075439]
[87.96970367 288.21075439]
[87.96970367 273.21075439]
[87.96970367 258.21075439]
[87.96970367 243.21073914]
[87.96970367 228.21073914]
[75.72674561 219.54414368]
[61.57943344 224.52946472]
[47.43211365 229.51478577]
[33.28479767 234.50010681]
[19.13748169 239.48542786]
[13.80827808 254.18690491]
[0.25010806 261.97857666]
[-15.13527489 259.18142700]
[-25.08336449 247.11621094]
[-24.89697456 231.47973633]
[-14.66411591 219.65507507]
[0.78357136 217.22547913]
[14.15215969 225.33810425]
[28.29947662 220.35278320]
[42.44679260 215.36746216]
[56.59410858 210.38214111]
[70.74142456 205.39682007]
[68.87694550 194.55737305]
[70.32734680 183.86743164]
[74.83354187 174.29821777]
[81.86472321 166.68080139]
[90.67781067 161.63426208]
[100.39463806 159.51609802]
[110.08884430 160.39916992]
[116.07714081 146.64634705]
[122.06543732 132.89352417]
[105.21755219 137.51889038]
[88.81662750 134.37767029]
[76.10689545 124.77885437]
[69.29925537 111.23812866]
[69.19625854 96.85375214]
[75.14507294 84.60783386]
[85.30466461 76.74857330]
[81.05181885 62.36409378]
[76.79897308 47.97961426]
[72.54612732 33.59513092]
[57.48706818 34.29384232]
[42.69852448 31.36768723]
[29.04027748 24.98679543]
[17.30640602 15.52214241]
[8.17909718 3.52398944]
[2.18900275 -10.31010628]
[-0.31562084 -25.17584801]
[0.81084138 -40.20896149]
[5.50289869 -54.53544235]
[13.48776054 -67.32236481]
[24.30119705 -77.82631683]
[37.31453323 -85.43661499]
[51.77118301 -89.71080017]
[66.83066559 -90.40037537]
[81.61743164 -87.46525574]
[95.27180481 -81.07608795]
[106.99993896 -71.60432434]
[116.11997223 -59.60063934]
[122.10167694 -45.76291275]
[124.59729004 -30.89565468]
[123.46170807 -15.86322594]
[118.76097107 -1.53959310]
[110.76835632 11.24248695]
[99.94855499 21.73988152]
[86.93061066 29.34228516]
[91.18345642 43.72676468]
[95.43630219 58.11124802]
[99.68914795 72.49572754]
[109.53962708 69.93693542]
[120.83891296 71.16783142]
[132.08932495 76.78055573]
[143.27761841 66.78945923]
[154.46591187 56.79836273]
[165.65422058 46.80726624]
[161.87088013 31.97672462]
[165.42428589 17.08941650]
[175.49786377 5.56633759]
[189.77680969 0.05540562]
[204.97990417 1.82299280]
[217.61360168 10.46292019]
[224.77476501 23.98979759]
[224.81781006 39.29524612]
[217.73283386 52.86218262]
[205.14793396 61.57303238]
[189.95501709 63.42609787]
[175.64530945 57.99556351]
[164.45701599 67.98666382]
[153.26872253 77.97776031]
[142.08041382 87.96885681]
[144.28057861 95.13888550]
[158.62069702 90.73880768]
[163.02055359 105.07900238]
[148.68087769 109.47894287]
[150.88102722 116.64897919]
[165.74761963 118.64503479]
[180.61421204 120.64109039]
[195.48081970 122.63714600]
[206.91445923 111.96916962]
[222.53302002 111.19805908]
[234.96188354 120.68791199]
[238.33253479 135.95791626]
[231.05343628 149.79801941]
[216.56156921 155.67338562]
[201.69953918 150.80981445]
[193.48475647 137.50375366]
[178.61816406 135.50769043]
[163.75155640 133.51162720]
[148.88496399 131.51557922]
[135.81826782 138.88182068]
[129.82997131 152.63464355]
[123.84167480 166.38746643]
[136.25512695 182.33184814]
[136.77555847 203.29266357]
[124.29764557 221.08023071]
[102.96970367 228.21073914]
[102.96970367 243.21073914]
[102.96970367 258.21075439]
[102.96970367 273.21075439]
[102.96970367 288.21075439]
[102.96970367 303.21075439]
[102.96970367 318.21075439]
[102.96970367 333.21075439]
[102.96970367 348.21075439]
[102.96970367 363.21075439]
[117.57971191 366.95217896]
[130.79988098 374.21014404]
[141.79914856 384.52844238]
[149.88610840 397.25839233]
[154.55241394 411.59982300]
[155.50473022 426.65118408]
[152.68319702 441.46636963]
[146.26516724 455.11407471]
[136.65409851 466.73638916]
[124.45414734 475.60272217]
[110.43219757 481.15573120]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[45 128]
[46 127]
[47 126]
[54 85]
[55 84]
[56 83]
[57 82]
[88 106]
[89 105]
[90 104]
[91 103]
[111 125]
[112 124]
[113 123]
[114 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
