%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCCUAACAGGGGGGGGGGCUCACAACAAAACUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAxxxxxxxxxxCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCCCCCCCCCCCUUUCCUCACA\
) } def
/len { sequence length } bind def

/coor [
[61.41006470 377.82064819]
[48.85184097 369.46948242]
[38.76562119 358.25704956]
[31.78542519 344.88812256]
[28.35004234 330.20312500]
[28.67541885 315.12518311]
[32.74110413 300.60205078]
[40.29152298 287.54672241]
[50.85205078 276.77981567]
[63.75884628 268.97817993]
[78.20057678 264.63223267]
[77.57659912 249.64521790]
[76.95262146 234.65820312]
[76.32864380 219.67118835]
[75.70466614 204.68415833]
[75.08068848 189.69714355]
[74.45671082 174.71012878]
[73.83273315 159.72311401]
[73.20875549 144.73609924]
[72.58477783 129.74908447]
[86.71664429 91.67149353]
[80.36951447 78.08054352]
[65.78746796 72.60317230]
[59.54418564 58.72959518]
[64.85588837 44.86159897]
[58.50875854 31.27064705]
[52.16162872 17.67969704]
[38.09077072 22.90116310]
[23.64113045 26.95833969]
[8.90886974 29.82422829]
[-6.00796700 31.47975731]
[-21.01011086 31.91390800]
[-35.99772263 31.12379074]
[-50.87106323 29.11466408]
[-65.53114319 25.89989853]
[-79.88041687 21.50088692]
[-93.82337189 15.94690800]
[-107.26723480 9.27492046]
[-120.12252808 1.52932584]
[-132.30369568 -7.23832893]
[-143.72969055 -16.96969604]
[-154.32446289 -27.60001183]
[-164.01750183 -39.05853653]
[-172.74430847 -51.26900864]
[-180.44680786 -64.15017700]
[-187.07373047 -77.61631012]
[-192.58096313 -91.57778931]
[-196.93190002 -105.94171143]
[-200.09753418 -120.61248779]
[-202.05683899 -135.49246216]
[-202.79673767 -150.48265076]
[-202.31234741 -165.48324585]
[-200.60687256 -180.39445496]
[-197.69165039 -195.11703491]
[-193.58609009 -209.55300903]
[-188.31752014 -223.60629272]
[-181.92100525 -237.18338013]
[-174.43910217 -250.19392395]
[-165.92161560 -262.55130005]
[-156.42521667 -274.17330933]
[-146.01310730 -284.98260498]
[-134.75457764 -294.90725708]
[-122.72455597 -303.88116455]
[-110.00310516 -311.84466553]
[-96.67487335 -318.74475098]
[-82.82856750 -324.53549194]
[-68.55633545 -329.17834473]
[-53.95315170 -332.64242554]
[-39.11620331 -334.90469360]
[-24.14422989 -335.95004272]
[-9.13686657 -335.77157593]
[5.80601215 -334.37045288]
[20.58496284 -331.75598145]
[35.10163498 -327.94558716]
[49.25941467 -322.96463013]
[62.96409225 -316.84625244]
[76.12445068 -309.63113403]
[88.65292358 -301.36737061]
[100.46612549 -292.10986328]
[111.48545074 -281.92028809]
[121.63755035 -270.86645508]
[130.85487366 -259.02188110]
[139.07608032 -246.46542358]
[146.24644470 -233.28063965]
[152.31826782 -219.55526733]
[157.25112915 -205.38066101]
[161.01220703 -190.85113525]
[163.57647705 -176.06338501]
[164.92686462 -161.11584473]
[165.05438232 -146.10795593]
[163.95819092 -131.13961792]
[161.64556885 -116.31044006]
[158.13192749 -101.71910095]
[153.44064331 -87.46271515]
[147.60292053 -73.63614655]
[140.65762329 -60.33142471]
[132.65098572 -47.63708115]
[123.63625336 -35.63759995]
[113.67345428 -24.41283417]
[102.82887268 -14.03748608]
[91.17468262 -4.58060122]
[78.78844452 3.89488411]
[65.75257874 11.33256626]
[72.09970856 24.92351723]
[78.44683838 38.51446915]
[92.49023438 43.34341812]
[99.12073517 57.03615570]
[93.96046448 71.73341370]
[100.30759430 85.32436371]
[112.29443359 94.34189606]
[127.11219025 96.67300415]
[141.92994690 99.00410461]
[150.95994568 97.24033356]
[157.03041077 101.54092407]
[171.79646301 104.17978668]
[187.02726746 98.10074615]
[199.73803711 108.46261597]
[196.85302734 124.60599518]
[181.34008789 129.92396545]
[169.15760803 118.94584656]
[154.39155579 116.30698395]
[139.59884644 113.82186127]
[124.78108215 111.49076080]
[109.96332550 109.15965271]
[104.36544037 114.15101624]
[114.34798431 125.34694672]
[103.15188599 135.32929993]
[93.16967773 124.13374329]
[87.57179260 129.12510681]
[88.19577026 144.11212158]
[88.81974792 159.09913635]
[89.44372559 174.08615112]
[90.06770325 189.07316589]
[90.69168091 204.06018066]
[91.31565857 219.04721069]
[91.93963623 234.03422546]
[92.56361389 249.02124023]
[93.18759155 264.00823975]
[107.94059753 267.13870239]
[121.45123291 273.84045410]
[132.87020874 283.69223022]
[141.47972107 296.07476807]
[146.73857117 310.20965576]
[148.31617737 325.20840454]
[146.11337280 340.12814331]
[140.26863098 354.03100586]
[131.14933777 366.04306030]
[119.32877350 375.40921021]
[105.54996490 381.54071045]
[90.67906189 384.05212402]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 109]
[22 108]
[25 105]
[26 104]
[27 103]
[110 124]
[111 123]
[112 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
