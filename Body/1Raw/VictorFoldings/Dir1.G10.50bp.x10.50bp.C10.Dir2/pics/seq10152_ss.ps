%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCACUUAGGGGGGGGGGUGACUCCCUAAAGCCCAUGUCGAAGCCCCCAUCGCUGGGUCAAUAGUACUxxxxxxxxxxCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUCCCCCCCCCCACUCCACUCA\
) } def
/len { sequence length } bind def

/coor [
[75.47904205 377.77667236]
[61.63310623 371.76065063]
[49.92444229 362.23123169]
[41.22192001 349.89556885]
[36.17131805 335.66903687]
[35.14742661 320.60736084]
[38.22622681 305.82821655]
[45.17924500 292.42828369]
[55.49053192 281.40194702]
[68.39491272 273.56744385]
[82.93479919 269.50613403]
[82.93479919 254.50613403]
[82.93479919 239.50613403]
[82.93479919 224.50613403]
[82.93479919 209.50613403]
[82.93479919 194.50613403]
[82.93479919 179.50613403]
[82.93479919 164.50613403]
[82.93479919 149.50613403]
[82.93479919 134.50613403]
[71.04241943 125.36439514]
[56.54682159 129.22155762]
[42.05122757 133.07872009]
[27.55562973 136.93586731]
[25.58007431 152.00788879]
[17.98275757 165.17410278]
[5.92221785 174.42677307]
[-8.76240253 178.35491943]
[-23.83180618 176.35954285]
[-36.98801422 168.74490356]
[-46.22480774 156.67221069]
[-50.13363647 141.98243713]
[-48.11843491 126.91566467]
[-40.48650742 113.76948547]
[-28.40166283 104.54858398]
[-13.70675945 100.65908051]
[1.35734165 102.69409943]
[14.49347305 110.34331512]
[23.69846916 122.44027710]
[38.19406509 118.58311462]
[52.68966293 114.72595978]
[67.18525696 110.86879730]
[64.44020844 91.54879761]
[72.78362274 72.72301483]
[59.69047165 65.40390778]
[46.59731674 58.08480072]
[32.04360199 63.80523682]
[17.23430252 58.78341293]
[9.16192055 45.39048004]
[11.63798523 29.95017242]
[23.49337387 19.75292969]
[39.13033676 19.61357880]
[51.16557693 29.59791756]
[53.91641998 44.99164581]
[67.00957489 52.31075287]
[80.10272980 59.62985611]
[92.27456665 50.86365128]
[89.48224640 36.12584305]
[86.68991852 21.38803864]
[83.89759064 6.65023184]
[68.85582733 5.36658096]
[54.71857452 0.07123085]
[42.53491974 -8.84286880]
[33.20897293 -20.71423149]
[27.43277550 -34.66192245]
[25.63496208 -49.65093613]
[27.94894409 -64.56897736]
[34.20300674 -78.30904388]
[43.93305588 -89.85151672]
[56.41706085 -98.33987427]
[70.72862244 -103.14421844]
[85.80573273 -103.90805054]
[100.52955627 -100.57466888]
[113.80751038 -93.39144897]
[124.65425873 -82.89142609]
[132.26492310 -69.85376740]
[136.07472229 -55.24596024]
[135.80094910 -40.15200043]
[131.46392822 -25.69195938]
[123.38548279 -12.93886662]
[112.16510010 -2.83908772]
[98.63539886 3.85790753]
[101.42772675 18.59571266]
[104.22004700 33.33351898]
[107.01237488 48.07132721]
[119.87077332 55.79541016]
[134.19337463 51.33859634]
[148.51597595 46.88177872]
[162.74275208 42.12796402]
[176.86755371 37.07920837]
[190.99235535 32.03045273]
[190.99427795 16.12819862]
[196.42126465 1.20912790]
[206.60267639 -10.93666649]
[220.29856873 -18.85851097]
[235.85073853 -21.61841011]
[251.38337708 -18.90207100]
[265.02944946 -11.05458641]
[275.15496826 0.96329665]
[289.17169189 -4.37821579]
[303.18838501 -9.71972847]
[309.42205811 -24.24270248]
[324.13003540 -30.02644730]
[338.58627319 -23.63957024]
[344.21420288 -8.87129116]
[337.67483521 5.51663065]
[322.84786987 10.98809719]
[308.52990723 4.29698467]
[294.51318359 9.63849735]
[280.49649048 14.98001003]
[281.13534546 29.15473938]
[277.35049438 42.85205460]
[269.50070190 54.72360992]
[258.34561157 63.59651566]
[244.97209167 68.58922577]
[230.68852234 69.19909668]
[216.89669800 65.35295105]
[204.95426941 57.41560364]
[196.04110718 46.15525436]
[181.91630554 51.20401001]
[167.79150391 56.25276566]
[164.95324707 60.16682434]
[159.59866333 62.30218124]
[152.97279358 61.20437622]
[138.65019226 65.66119385]
[124.32759094 70.11801147]
[134.99282837 85.86542511]
[136.68225098 104.41300201]
[129.35438538 121.10489655]
[115.18421173 131.93475342]
[97.93479919 134.50613403]
[97.93479919 149.50613403]
[97.93479919 164.50613403]
[97.93479919 179.50613403]
[97.93479919 194.50613403]
[97.93479919 209.50613403]
[97.93479919 224.50613403]
[97.93479919 239.50613403]
[97.93479919 254.50613403]
[97.93479919 269.50613403]
[112.47468567 273.56744385]
[125.37906647 281.40194702]
[135.69035339 292.42828369]
[142.64337158 305.82821655]
[145.72216797 320.60736084]
[144.69828796 335.66903687]
[139.64767456 349.89556885]
[130.94515991 362.23123169]
[119.23649597 371.76065063]
[105.39055634 377.77667236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 42]
[22 41]
[23 40]
[24 39]
[44 56]
[45 55]
[46 54]
[57 85]
[58 84]
[59 83]
[60 82]
[86 126]
[87 125]
[88 124]
[89 121]
[90 120]
[91 119]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
