%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGCAUCACGGGGGGGGGGCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCCGCGGUxxxxxxxxxxCGUCCUAAUCACAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCCCCCCCCCCCUGGCAUCAC\
) } def
/len { sequence length } bind def

/coor [
[81.99523163 455.52755737]
[68.14929199 449.51153564]
[56.44062805 439.98211670]
[47.73810577 427.64645386]
[42.68750381 413.41992188]
[41.66361237 398.35824585]
[44.74240875 383.57907104]
[51.69543076 370.17913818]
[62.00671768 359.15280151]
[74.91109467 351.31829834]
[89.45098114 347.25698853]
[89.45098114 332.25698853]
[89.45098114 317.25698853]
[89.45098114 302.25698853]
[89.45098114 287.25698853]
[89.45098114 272.25698853]
[89.45098114 257.25698853]
[89.45098114 242.25698853]
[89.45098114 227.25698853]
[89.45098114 212.25698853]
[89.45098114 197.25698853]
[89.45098114 182.25698853]
[89.45098114 167.25698853]
[89.45098114 152.25698853]
[86.72061157 148.26693726]
[86.51210785 142.50604248]
[89.77602386 136.63626099]
[90.40000153 121.64924622]
[91.02397919 106.66223145]
[88.23165131 91.92442322]
[82.16864014 78.20436859]
[76.10562897 64.48431396]
[69.90022278 50.82807541]
[60.15256882 39.42705536]
[47.71313095 31.04491043]
[35.27368927 22.66276741]
[22.83424759 14.28062439]
[10.39480782 5.89848089]
[-2.43432236 7.59178114]
[-12.63574219 0.30137652]
[-15.02922726 -11.59730148]
[-27.29159546 -20.23641777]
[-39.55396271 -28.87553406]
[-51.65100098 -19.79165268]
[-65.96369171 -14.89247608]
[-81.08983612 -14.65797520]
[-95.54752350 -19.11112404]
[-107.92033386 -27.81564903]
[-116.99610901 -39.91876984]
[-121.88568878 -54.23474503]
[-122.11005402 -69.36103821]
[-117.64722443 -83.81574249]
[-108.93441010 -96.18271637]
[-96.82521057 -105.25037384]
[-82.50595856 -110.13036346]
[-67.37951660 -110.34459686]
[-52.92781067 -105.87207794]
[-40.56667709 -97.15097809]
[-31.50713348 -85.03570557]
[-26.63673782 -70.71318817]
[-26.43264389 -55.58660507]
[-30.91484642 -41.13790131]
[-18.65247917 -32.49878693]
[-6.39011097 -23.85967064]
[11.12087154 -23.25515366]
[18.77695084 -6.54095936]
[31.21639252 1.84118402]
[43.65583038 10.22332764]
[56.09527206 18.60547066]
[68.53471375 26.98761368]
[62.31001282 13.34015656]
[59.21604919 -1.33728874]
[59.40219116 -16.33613396]
[62.85945511 -30.93227386]
[69.42093658 -44.42104721]
[78.76985168 -56.15125275]
[90.45487213 -65.55658722]
[103.91187286 -72.18298340]
[118.49118805 -75.71054077]
[133.48896790 -75.96894836]
[148.18113708 -72.94574738]
[161.85844421 -66.78688049]
[173.86053467 -57.78968048]
[183.60801697 -46.38850784]
[190.63027954 -33.13378525]
[194.58833313 -18.66541100]
[195.29107666 -3.68188095]
[192.70458984 11.09343910]
[186.95373535 24.94723701]
[178.31616211 37.21068954]
[167.20884705 47.29174423]
[154.16804504 54.70372391]
[139.82331848 59.08879089]
[124.86720276 60.23524857]
[110.02172089 58.08774948]
[96.00358582 52.74996948]
[83.49117279 44.48094559]
[89.20813751 49.24140549]
[89.82568359 58.42130280]
[95.88869476 72.14135742]
[101.95170593 85.86141205]
[114.72906494 93.71883392]
[129.70878601 92.93898773]
[144.68849182 92.15914917]
[149.40023804 77.73126221]
[159.00878906 65.98221588]
[172.21467590 58.50096512]
[187.23190308 56.29929352]
[202.02951050 59.67496109]
[214.60626221 68.17143250]
[223.26123047 80.63962555]
[226.82391357 95.39332581]
[224.81250000 110.43721771]
[217.49899292 123.73673248]
[205.87249756 133.49322510]
[191.50540161 138.38720703]
[176.34074402 137.75680542]
[162.42941284 131.68728638]
[151.65278625 120.99948883]
[145.46833801 107.13886261]
[130.48863220 107.91870880]
[115.50891113 108.69854736]
[110.44664764 108.72931671]
[106.01099396 107.28620911]
[105.38701630 122.27322388]
[104.76303864 137.26023865]
[104.45098114 152.25698853]
[104.45098114 167.25698853]
[104.45098114 182.25698853]
[104.45098114 197.25698853]
[104.45098114 212.25698853]
[104.45098114 227.25698853]
[104.45098114 242.25698853]
[104.45098114 257.25698853]
[104.45098114 272.25698853]
[104.45098114 287.25698853]
[104.45098114 302.25698853]
[104.45098114 317.25698853]
[104.45098114 332.25698853]
[104.45098114 347.25698853]
[118.99086761 351.31829834]
[131.89524841 359.15280151]
[142.20654297 370.17913818]
[149.15956116 383.57907104]
[152.23835754 398.35824585]
[151.21446228 413.41992188]
[146.16386414 427.64645386]
[137.46133423 439.98211670]
[125.75267792 449.51153564]
[111.90673828 455.52755737]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[24 127]
[27 126]
[28 125]
[29 124]
[30 101]
[31 100]
[32 99]
[33 97]
[34 70]
[35 69]
[36 68]
[37 67]
[38 66]
[41 64]
[42 63]
[43 62]
[102 122]
[103 121]
[104 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
