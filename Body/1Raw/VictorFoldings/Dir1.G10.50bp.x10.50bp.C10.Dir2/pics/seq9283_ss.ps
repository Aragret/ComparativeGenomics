%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUAAACUUGGGGGGGGGGCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUUACUACUAAUAAUUAxxxxxxxxxxUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCCCCCCCCCCCUAAUAAAAUU\
) } def
/len { sequence length } bind def

/coor [
[57.90019989 151.92178345]
[47.40277100 141.25282288]
[39.54237747 128.51560974]
[34.71310806 114.34872437]
[33.15708542 99.46244049]
[34.95232391 84.60311127]
[40.00881958 70.51572418]
[48.07305145 57.90657425]
[58.74071503 47.40783691]
[71.47696686 39.54587555]
[85.64326477 34.71487045]
[84.08568573 19.79595757]
[82.52809906 4.87704468]
[80.97052002 -10.04186821]
[79.41294098 -24.96077919]
[77.85536194 -39.87969208]
[76.29777527 -54.79860306]
[74.74019623 -69.71751404]
[73.18261719 -84.63642883]
[71.62503815 -99.55534363]
[56.63608932 -98.87567902]
[41.63309097 -99.07685089]
[26.66775513 -100.15818024]
[11.79167557 -102.11592102]
[-2.94386697 -104.94332886]
[-17.48807716 -108.63066101]
[-31.79081726 -113.16520691]
[-45.80278397 -118.53133392]
[-59.47566986 -124.71054077]
[-72.76235199 -131.68153381]
[-85.61701202 -139.42025757]
[-97.99535370 -147.90007019]
[-109.85469818 -157.09173584]
[-121.15415955 -166.96353149]
[-131.85479736 -177.48147583]
[-141.91970825 -188.60926819]
[-151.31420898 -200.30857849]
[-160.00590515 -212.53906250]
[-167.96485901 -225.25857544]
[-175.16360474 -238.42323303]
[-181.57733154 -251.98770142]
[-187.18394470 -265.90518188]
[-191.96409607 -280.12771606]
[-195.90132141 -294.60629272]
[-198.98205566 -309.29095459]
[-201.19566345 -324.13110352]
[-202.53451538 -339.07562256]
[-202.99401855 -354.07290649]
[-202.57255554 -369.07135010]
[-201.27159119 -384.01919556]
[-199.09562683 -398.86492920]
[-196.05213928 -413.55734253]
[-192.15162659 -428.04583740]
[-187.40756226 -442.28045654]
[-181.83625793 -456.21212769]
[-175.45693970 -469.79281616]
[-168.29159546 -482.97567749]
[-160.36494446 -495.71533203]
[-151.70426941 -507.96780396]
[-142.33946228 -519.69091797]
[-132.30279541 -530.84417725]
[-121.62887573 -541.38922119]
[-110.35447693 -551.28967285]
[-98.51847839 -560.51135254]
[-86.16168213 -569.02252197]
[-73.32668304 -576.79382324]
[-60.05772400 -583.79846191]
[-46.40055084 -590.01232910]
[-32.40223694 -595.41400146]
[-18.11104012 -599.98480225]
[-3.57622647 -603.70898438]
[11.15209961 -606.57373047]
[26.02316666 -608.56921387]
[40.98571014 -609.68847656]
[55.98815155 -609.92767334]
[70.97877502 -609.28601074]
[85.90589905 -607.76574707]
[100.71807861 -605.37200928]
[115.36423492 -602.11309814]
[129.79389954 -598.00024414]
[143.95730591 -593.04766846]
[157.80566406 -587.27239990]
[171.29119873 -580.69433594]
[184.36744690 -573.33618164]
[196.98931885 -565.22332764]
[209.11331177 -556.38366699]
[220.69761658 -546.84771729]
[231.70233154 -536.64837646]
[242.08947754 -525.82073975]
[251.82328796 -514.40216064]
[260.87017822 -502.43206787]
[269.19900513 -489.95159912]
[276.78100586 -477.00387573]
[283.59005737 -463.63348389]
[289.60269165 -449.88653564]
[294.79821777 -435.81042480]
[299.15866089 -421.45364380]
[302.66903687 -406.86572266]
[305.31719971 -392.09692383]
[307.09408569 -377.19815063]
[307.99349976 -362.22079468]
[308.01242065 -347.21643066]
[307.15069580 -332.23684692]
[305.41134644 -317.33367920]
[302.80038452 -302.55822754]
[299.32675171 -287.96151733]
[295.00250244 -273.59381104]
[289.84246826 -259.50463867]
[283.86444092 -245.74258423]
[277.08908081 -232.35510254]
[269.53973389 -219.38830566]
[261.24237061 -206.88693237]
[252.22566223 -194.89404297]
[242.52064514 -183.45100403]
[232.16078186 -172.59725952]
[221.18180847 -162.37020874]
[209.62155151 -152.80513000]
[197.51986694 -143.93496704]
[184.91845703 -135.79032898]
[171.86079407 -128.39927673]
[158.39186096 -121.78727722]
[144.55810547 -115.97714996]
[130.40721130 -110.98889923]
[115.98795319 -106.83973694]
[101.35004425 -103.54395294]
[86.54394531 -101.11292267]
[88.10153198 -86.19400787]
[89.65911102 -71.27510071]
[91.21669006 -56.35618591]
[92.77426910 -41.43727493]
[94.33185577 -26.51836014]
[95.88943481 -11.59944916]
[97.44701385 3.31946349]
[99.00459290 18.23837662]
[100.56217957 33.15728760]
[115.42084503 34.95800018]
[129.50636292 40.01968002]
[142.11254883 48.08855820]
[152.60736084 58.76008606]
[160.46463013 71.49923706]
[165.29042053 85.66731262]
[166.84277344 100.55397034]
[165.04389954 115.41285706]
[159.98393250 129.49900818]
[151.91661072 142.10617065]
[141.24636841 152.60229492]
[128.50819397 160.46112061]
[114.34070587 165.28865051]
[99.45423126 166.84284973]
[84.59512329 165.04579163]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 135]
[12 134]
[13 133]
[14 132]
[15 131]
[16 130]
[17 129]
[18 128]
[19 127]
[20 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
