%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCUUAACAGGGGGGGGGGAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCxxxxxxxxxxCUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCUACCCCCCCCCCCCCACCCUUAACA\
) } def
/len { sequence length } bind def

/coor [
[82.94898987 365.05993652]
[70.02983093 357.30160522]
[59.24853516 346.77258301]
[51.18651962 334.04071045]
[46.27856064 319.79257202]
[44.78933334 304.79663086]
[46.79916000 289.86151123]
[52.19964218 275.79269409]
[60.69954681 263.34890747]
[71.84048462 253.20117188]
[85.02162933 245.89678955]
[99.53215027 241.82965088]
[98.91632080 226.84230042]
[98.30049896 211.85494995]
[97.68466949 196.86759949]
[97.06884766 181.88023376]
[96.45301819 166.89288330]
[95.83719635 151.90553284]
[95.22136688 136.91818237]
[94.60554504 121.93082428]
[93.98971558 106.94347382]
[90.20175171 111.23332977]
[86.38126373 115.49453735]
[72.23394775 120.47985840]
[58.08663177 125.46517944]
[43.93931580 130.45050049]
[38.61011124 145.15199280]
[25.05194092 152.94364929]
[9.66655731 150.14651489]
[-0.28153113 138.08129883]
[-0.09514216 122.44481659]
[10.13771725 110.62015533]
[25.58540535 108.19055176]
[38.95399475 116.30319214]
[53.10131073 111.31786346]
[67.24862671 106.33254242]
[81.39594269 101.34722137]
[67.09053040 96.83555603]
[60.77287674 83.23088074]
[66.55612183 69.39057159]
[80.67506409 64.32543945]
[93.93749237 71.33315277]
[97.70891571 85.85086823]
[103.41357422 71.97798920]
[109.11824036 58.10510635]
[114.82290649 44.23222733]
[101.42688751 37.46650314]
[88.59545135 29.68302536]
[76.40576172 20.92860794]
[64.93112946 11.25590324]
[54.24057388 0.72308284]
[44.39838409 -10.60650730]
[35.46375275 -22.66472816]
[27.49041557 -35.37905884]
[20.52632523 -48.67303467]
[14.61336613 -62.46669769]
[9.78709888 -76.67710114]
[6.07654905 -91.21876526]
[3.50403380 -106.00424957]
[2.08502436 -120.94462585]
[1.82805467 -135.95002747]
[2.73467040 -150.93023682]
[4.79941940 -165.79512024]
[8.00988293 -180.45532227]
[12.34675312 -194.82263184]
[17.78394699 -208.81066895]
[24.28876495 -222.33531189]
[31.82208633 -235.31518555]
[40.33860016 -247.67227173]
[49.78709412 -259.33221436]
[60.11073685 -270.22491455]
[71.24743652 -280.28482056]
[83.13022614 -289.45147705]
[95.68763733 -297.66976929]
[108.84413910 -304.89019775]
[122.52060699 -311.06939697]
[136.63479614 -316.17016602]
[151.10182190 -320.16186523]
[165.83467102 -323.02044678]
[180.74472046 -324.72875977]
[195.74234009 -325.27651978]
[210.73728943 -324.66043091]
[225.63941956 -322.88415527]
[240.35908508 -319.95843506]
[254.80775452 -315.90084839]
[268.89855957 -310.73577881]
[282.54672241 -304.49432373]
[295.67016602 -297.21398926]
[308.18997192 -288.93856812]
[320.03085327 -279.71783447]
[331.12161255 -269.60726929]
[341.39547729 -258.66763306]
[350.79074097 -246.96473694]
[359.25082397 -234.56896973]
[366.72491455 -221.55487061]
[373.16802979 -208.00073242]
[378.54138184 -193.98806763]
[382.81274414 -179.60112000]
[385.95632935 -164.92645264]
[387.95330811 -150.05229187]
[388.79162598 -135.06811523]
[388.46627808 -120.06404114]
[386.97918701 -105.13028717]
[384.33929443 -90.35668945]
[380.56250000 -75.83208466]
[375.67150879 -61.64382935]
[369.69573975 -47.87725830]
[362.67114258 -34.61516571]
[354.63992310 -21.93730927]
[345.65042114 -9.91993809]
[335.75668335 1.36467254]
[325.01824951 11.84865570]
[313.49963379 21.46895790]
[301.27017212 30.16772079]
[288.40338135 37.89263153]
[274.97668457 44.59722519]
[261.07077026 50.24118423]
[246.76933289 54.79056168]
[232.15834045 58.21799850]
[217.32568359 60.50288010]
[202.36056519 61.63146591]
[187.35299683 61.59696579]
[172.39323425 60.39959335]
[157.57124329 58.04654312]
[142.97616577 54.55197144]
[128.69578552 49.93688965]
[122.99111938 63.80977249]
[117.28646088 77.68264771]
[111.58179474 91.55553436]
[108.97707367 106.32765198]
[109.59289551 121.31500244]
[110.20872498 136.30235291]
[110.82454681 151.28970337]
[111.44037628 166.27706909]
[112.05619812 181.26441956]
[112.67202759 196.25177002]
[113.28784943 211.23912048]
[113.90367126 226.22647095]
[114.51950073 241.21382141]
[129.31477356 244.07679749]
[143.05075073 250.27516174]
[154.98664856 259.47467041]
[164.47880554 271.17919922]
[171.01530457 284.75750732]
[174.24363708 299.47738647]
[173.98971558 314.54498291]
[170.26722717 329.14770508]
[163.27691650 342.49807739]
[153.39578247 353.87612915]
[141.15667725 362.66821289]
[127.21965027 368.40023804]
[112.33630371 370.76306152]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 37]
[24 36]
[25 35]
[26 34]
[43 129]
[44 128]
[45 127]
[46 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
