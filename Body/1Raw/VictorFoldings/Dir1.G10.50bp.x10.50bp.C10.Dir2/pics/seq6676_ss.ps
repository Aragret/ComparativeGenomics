%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGAUCCGUCCGGGGGGGGGGUAAUCACAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCxxxxxxxxxxCCCUCCCCACAUCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCCCCCCCCCCCUCCGAUCCGUCC\
) } def
/len { sequence length } bind def

/coor [
[89.79949188 433.74890137]
[76.09734344 427.48800659]
[64.13222504 418.33465576]
[54.50431061 406.74798584]
[47.69653320 393.30917358]
[44.05036545 378.69229126]
[43.74869919 363.63052368]
[46.80666351 348.87936401]
[53.07087326 335.17874146]
[62.22711563 323.21582031]
[73.81612396 313.59072876]
[87.25659180 306.78619385]
[101.87435913 303.14358521]
[101.57035065 288.14666748]
[101.26634979 273.14974976]
[100.96234131 258.15283203]
[100.65834045 243.15589905]
[100.35433960 228.15898132]
[100.05033112 213.16206360]
[99.74633026 198.16514587]
[99.44232178 183.16822815]
[99.13832092 168.17131042]
[95.83903503 161.50840759]
[98.98323059 152.86807251]
[98.98323059 137.86807251]
[98.98323059 122.86807251]
[89.49208069 119.74044037]
[82.44595337 112.98584747]
[79.08483124 104.07003021]
[79.87928009 94.80812836]
[66.28109741 88.47650909]
[52.68291092 82.14488983]
[39.08472824 75.81327057]
[25.48654556 69.48165131]
[11.88836098 63.15003586]
[-2.75726986 71.55554199]
[-19.36490822 69.61631012]
[-31.43805885 58.28955078]
[-34.37231827 42.16553497]
[-48.09603500 36.11080933]
[-61.81974792 30.05608559]
[-72.52807617 40.81229782]
[-86.40047455 46.97029877]
[-101.56081390 47.69726944]
[-115.95878601 42.89488983]
[-127.64718628 33.21264267]
[-135.04524231 19.95997810]
[-137.15243530 4.92920351]
[-133.68379211 -9.84688854]
[-125.10839844 -22.36995506]
[-112.58602905 -30.94635201]
[-97.81021118 -34.41619492]
[-82.77927399 -32.31021118]
[-69.52600861 -24.91322517]
[-59.84281921 -13.22561169]
[-55.03927612 1.17197251]
[-55.76502228 16.33237267]
[-42.04130936 22.38709831]
[-28.31759453 28.44182205]
[-17.42064285 20.67227745]
[-3.99842644 19.30559921]
[8.43922997 24.80706978]
[16.58648491 35.83181763]
[18.21998024 49.55184937]
[31.81816292 55.88346863]
[45.41634750 62.21508789]
[59.01453018 68.54670715]
[72.61271667 74.87832642]
[86.21089935 81.20994568]
[99.93460846 75.15522003]
[104.42505646 60.84313202]
[108.91550446 46.53104401]
[95.96099091 38.83187485]
[85.13162994 28.35228729]
[77.01145172 15.65743065]
[72.03835297 1.43192458]
[70.48053741 -13.55706882]
[72.42200470 -28.50121117]
[77.75807190 -42.59458542]
[86.20095062 -55.07715225]
[97.29534149 -65.27574158]
[110.44293213 -72.64035797]
[124.93469238 -76.77383423]
[139.98908997 -77.45326233]
[154.79428101 -74.64199829]
[168.55181885 -68.49165344]
[180.51979065 -59.33389664]
[190.05276489 -47.66260910]
[196.63665771 -34.10720062]
[199.91639709 -19.39869881]
[199.71511841 -4.33031416]
[196.04367065 10.28533363]
[189.10003662 23.66003990]
[179.25871277 35.07252884]
[167.05038452 43.90732956]
[153.13346863 49.68800354]
[138.25848389 52.10279846]
[123.22759247 51.02148819]
[118.73714447 65.33358002]
[114.24670410 79.64566803]
[124.47049713 90.62173462]
[139.06486511 87.15701294]
[153.65924072 83.69229889]
[168.25361633 80.22758484]
[182.84799194 76.76286316]
[187.17051697 62.02477264]
[198.29405212 51.43408966]
[213.22640991 47.83965302]
[227.95088196 52.20834732]
[238.50665283 63.36502075]
[242.05426025 78.30858612]
[237.63943481 93.01928711]
[226.44972229 103.54003143]
[211.49511719 107.04078674]
[196.79832458 102.57987213]
[186.31271362 91.35723877]
[171.71833801 94.82195282]
[157.12396240 98.28667450]
[142.52958679 101.75138855]
[127.93521118 105.21610260]
[142.77340698 103.01877594]
[156.28240967 109.53850555]
[163.79388428 122.52224731]
[162.71208191 137.48318481]
[153.41084290 149.25123596]
[139.10441589 153.75967407]
[124.73669434 149.45051575]
[115.27278900 137.81288147]
[113.98323059 122.86807251]
[113.98323059 137.86807251]
[113.98323059 152.86807251]
[114.13523865 167.86730957]
[114.43923950 182.86422729]
[114.74324799 197.86114502]
[115.04724884 212.85806274]
[115.35125732 227.85498047]
[115.65525818 242.85189819]
[115.95926666 257.84881592]
[116.26326752 272.84573364]
[116.56727600 287.84265137]
[116.87127686 302.83956909]
[131.62464905 305.88681030]
[145.32983398 312.14105225]
[157.29939270 321.28860474]
[166.93290710 332.87063599]
[173.74720764 346.30615234]
[177.40045166 360.92126465]
[177.70942688 375.98287964]
[174.65859985 390.73550415]
[168.40103149 404.43917847]
[159.25059509 416.40649414]
[147.66624451 426.03723145]
[134.22908020 432.84826660]
[119.61308289 436.49798584]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[24 131]
[25 130]
[26 129]
[30 69]
[31 68]
[32 67]
[33 66]
[34 65]
[35 64]
[39 59]
[40 58]
[41 57]
[70 100]
[71 99]
[72 98]
[101 120]
[102 119]
[103 118]
[104 117]
[105 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
