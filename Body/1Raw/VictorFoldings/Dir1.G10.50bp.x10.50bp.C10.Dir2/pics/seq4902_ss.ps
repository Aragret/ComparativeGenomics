%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUACCAAGGGGGGGGGGUCAAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCAAUAAAACUAGGAAxxxxxxxxxxCAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUCCCCCCCCCCAUACUACUAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 374.14581299]
[71.19830322 368.12979126]
[59.48964310 358.60037231]
[50.78712082 346.26470947]
[45.73651886 332.03817749]
[44.71262741 316.97650146]
[47.79142761 302.19732666]
[54.74444962 288.79739380]
[65.05573273 277.77108765]
[77.96011353 269.93655396]
[92.50000000 265.87524414]
[92.50000000 250.87525940]
[92.50000000 235.87525940]
[92.50000000 220.87525940]
[92.50000000 205.87525940]
[92.50000000 190.87525940]
[92.50000000 175.87525940]
[92.50000000 160.87525940]
[92.50000000 145.87525940]
[92.50000000 130.87525940]
[84.22222137 127.57884979]
[77.18518829 122.11369324]
[71.94226837 114.90955353]
[68.90576172 106.53295135]
[53.91306305 106.06491089]
[38.92036438 105.59687042]
[23.92361259 105.28481293]
[8.92442417 105.12877655]
[5.10003901 107.48155212]
[1.12606680 108.36393738]
[-2.50446415 107.91545868]
[-5.39801598 106.42504883]
[-7.30155706 104.28404999]
[-22.23586464 102.88174438]
[-37.17017365 101.47944641]
[-52.10448074 100.07714081]
[-63.10412598 111.19207764]
[-78.67957306 112.58469391]
[-91.47657776 103.59744263]
[-95.45278168 88.47382355]
[-88.73074341 74.35475159]
[-74.48440552 67.90681458]
[-59.44045258 72.17453766]
[-50.70217514 85.14282990]
[-35.76786804 86.54513550]
[-20.83356094 87.94744110]
[-5.89925337 89.34973907]
[9.08046055 90.12958527]
[24.07964897 90.28562164]
[30.84458160 87.19024658]
[39.38840866 90.60417175]
[54.38110352 91.07221222]
[69.37380219 91.54026031]
[85.36953735 71.79573059]
[110.72312164 70.09104156]
[118.97541046 57.56507492]
[105.41929626 63.98627472]
[90.73415375 67.04348755]
[75.74176788 66.56562805]
[61.28112030 62.57943726]
[48.16144180 55.30798721]
[37.11691284 45.15819168]
[28.76559067 32.69803619]
[23.57482338 18.62480354]
[21.83508873 3.72603369]
[23.64374161 -11.16452599]
[28.89957047 -25.21359253]
[37.30845642 -37.63497162]
[48.39982986 -47.73355484]
[61.55301666 -54.94422150]
[76.03195190 -58.86346054]
[91.02639008 -59.27194214]
[105.69722748 -56.14681625]
[119.22348785 -49.66296005]
[130.84822083 -40.18321609]
[139.92091370 -28.23807526]
[145.93383789 -14.49599648]
[148.55050659 0.27400675]
[147.62451172 15.24539661]
[143.20764160 29.58036613]
[135.54754639 42.47613144]
[148.79013062 35.43099594]
[162.03273010 28.38586044]
[175.27531433 21.34072495]
[188.51789856 14.29559040]
[201.76048279 7.25045538]
[215.00306702 0.20532046]
[217.10810852 -16.54642296]
[228.65124512 -28.63929558]
[244.96031189 -31.46423721]
[259.60192871 -24.10705566]
[272.69509888 -31.42616272]
[285.78823853 -38.74526596]
[283.63931274 -53.77013016]
[287.06689453 -68.55580139]
[295.60745239 -81.10263824]
[308.10595703 -89.71379089]
[322.87207031 -93.22466278]
[337.90881348 -91.16044617]
[351.18258667 -83.80030823]
[360.89819336 -72.13963318]
[365.74169922 -57.75545120]
[365.05807495 -42.59309387]
[358.93975830 -28.70314789]
[348.21420288 -17.96411324]
[334.33193970 -11.82835770]
[319.17047119 -11.12569141]
[304.78021240 -15.95114422]
[293.10736084 -25.65211296]
[280.01419067 -18.33300781]
[266.92105103 -11.01390171]
[266.57012939 2.36790776]
[259.58273315 13.91294289]
[247.70057678 20.53602600]
[233.98942566 20.40538025]
[222.04820251 13.44790649]
[208.80561829 20.49304008]
[195.56303406 27.53817558]
[182.32044983 34.58330917]
[169.07786560 41.62844467]
[155.83526611 48.67358017]
[142.59268188 55.71871567]
[131.50137329 65.81736755]
[123.24908447 78.34333038]
[128.57594299 86.10948181]
[131.39237976 95.09593201]
[131.45094299 104.51321411]
[128.74652100 113.53400421]
[123.51666260 121.36581421]
[116.22084045 127.32061005]
[107.50000000 130.87525940]
[107.50000000 145.87525940]
[107.50000000 160.87525940]
[107.50000000 175.87525940]
[107.50000000 190.87525940]
[107.50000000 205.87525940]
[107.50000000 220.87525940]
[107.50000000 235.87525940]
[107.50000000 250.87525940]
[107.50000000 265.87524414]
[122.03988647 269.93655396]
[134.94427490 277.77108765]
[145.25555420 288.79739380]
[152.20857239 302.19732666]
[155.28736877 316.97650146]
[154.26348877 332.03817749]
[149.21287537 346.26470947]
[140.51036072 358.60037231]
[128.80169678 368.12979126]
[114.95575714 374.14581299]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 53]
[25 52]
[26 51]
[27 49]
[28 48]
[33 47]
[34 46]
[35 45]
[36 44]
[55 124]
[56 123]
[81 122]
[82 121]
[83 120]
[84 119]
[85 118]
[86 117]
[87 116]
[91 111]
[92 110]
[93 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
