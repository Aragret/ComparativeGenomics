%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACUCACCCGGGGGGGGGGUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUxxxxxxxxxxGUACAGCAAUCAACCCUCAACUAUCACACAUCAACUGCAACUCCAAAGCCCCCCCCCCCCACCCCUCACCC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 367.38253784]
[71.01555634 361.82952881]
[58.81560135 352.96322632]
[49.20452881 341.34091187]
[42.78650284 327.69320679]
[39.96496582 312.87802124]
[40.91728210 297.82662964]
[45.58358765 283.48519897]
[53.67055511 270.75524902]
[64.66983032 260.43698120]
[77.88998413 253.17900085]
[92.50000000 249.43757629]
[92.50000000 234.43757629]
[92.50000000 219.43757629]
[92.50000000 204.43757629]
[92.50000000 189.43757629]
[92.50000000 174.43757629]
[92.50000000 159.43757629]
[92.50000000 144.43757629]
[92.50000000 129.43757629]
[92.50000000 114.43756866]
[84.75668335 105.68637085]
[84.87664795 94.00185394]
[92.79801178 85.41148376]
[93.10598755 70.41464233]
[78.14990234 69.21011353]
[63.29261398 67.11330414]
[48.58732224 64.13171387]
[34.08666229 60.27602005]
[19.84254265 55.56002426]
[5.90595579 50.00061417]
[-7.67320919 43.61768341]
[-20.84634209 36.43408203]
[-33.56628799 28.47553253]
[-45.78750610 19.77051926]
[-57.46625519 10.35020351]
[-68.56072998 0.24831016]
[-79.03120422 -10.49899960]
[-88.84020233 -21.85325241]
[-97.95261383 -33.77380371]
[-106.33580780 -46.21797943]
[-113.95978546 -59.14123154]
[-120.79724884 -72.49729919]
[-126.82373047 -86.23837280]
[-132.01763916 -100.31526184]
[-136.36039734 -114.67757416]
[-139.83645630 -129.27389526]
[-142.43336487 -144.05197144]
[-144.14184570 -158.95890808]
[-144.95574951 -173.94132996]
[-144.87219238 -188.94561768]
[-143.89146423 -203.91804504]
[-142.01707458 -218.80502319]
[-139.25573730 -233.55326843]
[-135.61734009 -248.10997009]
[-131.11488342 -262.42300415]
[-125.76451874 -276.44119263]
[-119.58538055 -290.11428833]
[-112.59958649 -303.39337158]
[-104.83215332 -316.23092651]
[-96.31088257 -328.58096313]
[-87.06626892 -340.39929199]
[-77.13142395 -351.64358521]
[-66.54190063 -362.27362061]
[-55.33561325 -372.25131226]
[-43.55267334 -381.54098511]
[-31.23525810 -390.10934448]
[-18.42746544 -397.92572021]
[-5.17514372 -404.96215820]
[8.47426701 -411.19348145]
[22.47190666 -416.59732056]
[36.76766586 -421.15438843]
[51.31036758 -424.84832764]
[66.04795837 -427.66595459]
[80.92767334 -429.59716797]
[95.89624786 -430.63507080]
[110.90010834 -430.77590942]
[125.88552856 -430.01919556]
[140.79887390 -428.36764526]
[155.58676147 -425.82717896]
[170.19624329 -422.40689087]
[184.57502747 -418.11898804]
[198.67164612 -412.97885132]
[212.43562317 -407.00488281]
[225.81770325 -400.21847534]
[238.76997375 -392.64389038]
[251.24606323 -384.30825806]
[263.20132446 -375.24142456]
[274.59292603 -365.47586060]
[285.38015747 -355.04647827]
[295.52432251 -343.99066162]
[304.98916626 -332.34796143]
[313.74078369 -320.16006470]
[321.74783325 -307.47061157]
[328.98165894 -294.32498169]
[335.41638184 -280.77029419]
[341.02899170 -266.85504150]
[345.79931641 -252.62902832]
[349.71035767 -238.14318848]
[352.74804688 -223.44938660]
[354.90158081 -208.60021973]
[356.16320801 -193.64883423]
[356.52841187 -178.64875793]
[355.99591064 -163.65370178]
[354.56756592 -148.71731567]
[352.24853516 -133.89309692]
[349.04708862 -119.23410034]
[344.97470093 -104.79279327]
[340.04595947 -90.62088776]
[334.27850342 -76.76910400]
[327.69296265 -63.28702927]
[320.31292725 -50.22293472]
[312.16482544 -37.62357712]
[303.27780151 -25.53406715]
[293.68368530 -13.99767590]
[283.41680908 -3.05570507]
[272.51391602 7.25267744]
[261.01406860 16.89056969]
[248.95841980 25.82347107]
[236.39010620 34.01940155]
[223.35415649 41.44902802]
[209.89720154 48.08574677]
[196.06744385 53.90579987]
[181.91436768 58.88835907]
[167.48863220 63.01558685]
[152.84190369 66.27270508]
[138.02659607 68.64805603]
[123.09575653 70.13313293]
[108.10282898 70.72262573]
[107.79484558 85.71945953]
[116.26854706 100.16703033]
[107.50000000 114.43756866]
[107.50000000 129.43757629]
[107.50000000 144.43757629]
[107.50000000 159.43757629]
[107.50000000 174.43757629]
[107.50000000 189.43757629]
[107.50000000 204.43757629]
[107.50000000 219.43757629]
[107.50000000 234.43757629]
[107.50000000 249.43757629]
[122.11001587 253.17900085]
[135.33016968 260.43698120]
[146.32945251 270.75524902]
[154.41641235 283.48519897]
[159.08271790 297.82662964]
[160.03503418 312.87802124]
[157.21350098 327.69320679]
[150.79547119 341.34091187]
[141.18440247 352.96322632]
[128.98443604 361.82952881]
[114.96250153 367.38253784]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 130]
[25 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
