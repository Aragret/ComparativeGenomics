%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCAAAUCAGCCGGGGGGGGGGACUUUAAUUAAGCUAAGCCCUUACUAGACCAAUGGGACUUAAACCCACAAxxxxxxxxxxAACGCUAAUCCAAGCCUCACCCCACUACUAGGCCUCCUCCUAGCAGCAGCCCCCCCCCCCAGGCAAAUCAGCC\
) } def
/len { sequence length } bind def

/coor [
[83.62052917 393.83245850]
[69.74639893 387.98419189]
[57.39159393 379.37881470]
[47.09622192 368.39251709]
[39.31034470 355.50555420]
[34.37432861 341.28131104]
[32.50395966 326.34158325]
[33.78100204 311.33947754]
[38.14962387 296.93084717]
[45.41885376 283.74554443]
[55.27090836 272.35998535]
[67.27509308 263.27191162]
[80.90664673 256.87860107]
[95.56965637 253.45954895]
[95.26952362 238.46255493]
[94.96939087 223.46556091]
[94.66925812 208.46856689]
[94.36912537 193.47155762]
[94.06899261 178.47456360]
[93.76885986 163.47756958]
[93.46873474 148.48057556]
[93.16860199 133.48358154]
[92.86846924 118.48657990]
[76.94602203 98.86169434]
[92.98423767 74.60147858]
[83.31690216 63.13227463]
[73.64956665 51.66307449]
[58.14426422 50.17195892]
[48.50359344 38.40284348]
[50.02069855 23.63010025]
[40.35335922 12.16089916]
[30.68601990 0.69169772]
[21.01868248 -10.77750301]
[13.04835129 -15.35591507]
[11.27544117 -22.57427216]
[1.83952308 -34.23460770]
[-9.91463566 -43.55339432]
[-23.41985321 -50.08095932]
[-36.92506790 -56.60852432]
[-50.43028641 -63.13608932]
[-64.00013733 -69.52821350]
[-77.63325500 -75.78424835]
[-91.26638031 -82.04028320]
[-102.67056274 -71.94748688]
[-117.19586182 -67.37195587]
[-132.32568359 -69.10641479]
[-145.43869019 -76.85037231]
[-154.26298523 -89.26213074]
[-157.26969910 -104.19128418]
[-153.93789673 -119.05126190]
[-144.84483337 -131.26748657]
[-131.56594849 -138.72341919]
[-116.40187073 -140.12728882]
[-101.97988129 -135.23583984]
[-90.79868317 -124.89656830]
[-84.79547119 -110.90080261]
[-85.01034546 -95.67340088]
[-71.37722015 -89.41736603]
[-57.74409866 -83.16133118]
[-50.31152725 -83.23033142]
[-43.90272141 -76.64130402]
[-30.39750481 -70.11373901]
[-16.89228630 -63.58617783]
[-3.38706994 -57.05860901]
[-11.69130898 -69.55019379]
[-16.54659843 -83.74266052]
[-17.63382339 -98.70320892]
[-14.88152122 -113.44853973]
[-8.47059250 -127.00951385]
[1.17760229 -138.49482727]
[13.42892933 -147.14958191]
[27.47816086 -152.40496826]
[42.40190506 -153.91555786]
[57.21928787 -151.58207703]
[70.95642853 -145.55786133]
[82.71044159 -136.23890686]
[91.70878601 -124.23766327]
[97.36004639 -110.34294128]
[99.29279327 -95.46797943]
[97.37998199 -80.59043884]
[91.74733734 -66.68816376]
[82.76507568 -54.67487717]
[71.02355957 -45.34016800]
[57.29450607 -39.29756927]
[42.48026276 -36.94422531]
[27.55450821 -38.43481827]
[13.49985981 -43.67052460]
[22.93577766 -32.01018906]
[32.48788452 -20.44484138]
[42.15522003 -8.97564030]
[51.82255936 2.49356079]
[61.48989868 13.96276188]
[76.30626678 14.96809292]
[86.27371216 26.46177864]
[85.11876678 41.99573898]
[94.78610229 53.46493912]
[104.45344543 64.93414307]
[97.42002869 51.68532181]
[97.62670135 36.68674850]
[105.02249146 23.63675308]
[117.78374481 15.75320721]
[132.76380920 14.98002720]
[146.26889038 21.50786591]
[154.96891785 33.72708893]
[156.71865845 48.62469101]
[151.08662415 62.52721786]
[139.46159363 72.00659943]
[124.71126556 74.72548676]
[139.70451355 75.17565155]
[153.73066711 67.85598755]
[166.22000122 75.97175598]
[181.21325684 76.42191315]
[196.20649719 76.87207794]
[211.19973755 77.32223511]
[226.19297791 77.77239990]
[237.52537537 66.75639343]
[253.32667542 67.06364441]
[264.22225952 78.51187134]
[263.74795532 94.30904388]
[252.18518066 105.08297729]
[236.39390564 104.44168854]
[225.74282837 92.76564026]
[210.74957275 92.31548309]
[195.75633240 91.86531830]
[180.76309204 91.41516113]
[165.76985168 90.96499634]
[152.81610107 98.31686401]
[139.25434875 90.16889191]
[124.26110840 89.71873474]
[124.71464539 99.75345612]
[121.42793274 108.58052826]
[115.37192535 114.95766449]
[107.86546326 118.18644714]
[108.16559601 133.18344116]
[108.46572876 148.18043518]
[108.76586151 163.17744446]
[109.06599426 178.17443848]
[109.36612701 193.17143250]
[109.66625977 208.16842651]
[109.96639252 223.16542053]
[110.26651764 238.16242981]
[110.56665039 253.15942383]
[125.35471344 255.98907471]
[139.23114014 261.83187866]
[151.58934021 270.43240356]
[161.88903809 281.41464233]
[169.67997742 294.29855347]
[174.62158203 308.52087402]
[176.49783325 323.45983887]
[175.22669983 338.46243286]
[170.86373901 352.87280273]
[163.59970093 366.06094360]
[153.75212097 377.45037842]
[141.75151062 386.54318237]
[128.12246704 392.94186401]
[113.46081543 396.36666870]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[25 97]
[26 96]
[27 95]
[30 92]
[31 91]
[32 90]
[33 89]
[35 88]
[36 87]
[37 64]
[38 63]
[39 62]
[40 61]
[41 59]
[42 58]
[43 57]
[108 129]
[109 128]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
