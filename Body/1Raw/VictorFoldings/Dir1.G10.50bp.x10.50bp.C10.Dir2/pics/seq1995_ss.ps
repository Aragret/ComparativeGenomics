%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAGUAUAGGCGGGGGGGGGGGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCGCAAGGGAAAGAUxxxxxxxxxxGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUCCCCCCCCCCUAAAUUAUAGGC\
) } def
/len { sequence length } bind def

/coor [
[86.29945374 417.73980713]
[71.68345642 414.09011841]
[58.24628830 407.27908325]
[46.66194534 397.64834595]
[37.51149750 385.68103027]
[31.25392914 371.97735596]
[28.20311356 357.22473145]
[28.51208115 342.16308594]
[32.16533279 327.54797363]
[38.97962189 314.11245728]
[48.61314774 302.53045654]
[60.58269882 293.38290405]
[74.28787994 287.12866211]
[89.04125977 284.08142090]
[89.34526062 269.08450317]
[89.64926910 254.08758545]
[89.95326996 239.09066772]
[90.25727844 224.09375000]
[90.56127930 209.09683228]
[90.86528778 194.09991455]
[91.16928864 179.10299683]
[91.47328949 164.10607910]
[91.77729797 149.10914612]
[92.08129883 134.11222839]
[92.38530731 119.11531830]
[87.53457642 114.78186035]
[84.56027222 109.43881226]
[83.57685852 103.79710388]
[84.45291138 98.52976227]
[86.84836578 94.19320679]
[90.27501678 91.16854095]
[81.45823669 79.03328705]
[72.64146423 66.89803314]
[63.82468414 54.76277542]
[55.00790405 42.62752151]
[33.84639359 52.88213730]
[21.56512833 36.07398605]
[8.37683296 28.92773819]
[-4.81146383 21.78149223]
[-20.63102531 22.00965118]
[-28.13491821 9.14338303]
[-41.32321548 1.99713647]
[-54.51150894 -5.14910984]
[-66.05575562 4.70456314]
[-80.38129425 9.71888638]
[-95.55071259 9.21571350]
[-109.51246643 3.26309514]
[-120.37835693 -7.33392668]
[-126.67885590 -21.14219093]
[-127.56186676 -36.29424667]
[-122.90797424 -50.74089813]
[-113.34658051 -62.52835464]
[-100.17078400 -70.06246185]
[-85.16249847 -72.32429504]
[-70.35147858 -69.00795746]
[-57.74079132 -60.56195450]
[-49.03592682 -48.12854004]
[-45.41414261 -33.38923645]
[-47.36526489 -18.33740616]
[-34.17696762 -11.19116020]
[-20.98867035 -4.04491377]
[-6.11242533 -4.78421974]
[2.33478236 8.59319592]
[15.52307892 15.73944283]
[28.71137619 22.88568878]
[36.99580002 18.44780922]
[47.50790405 19.54489517]
[47.50790405 4.54489470]
[47.50790405 -10.45510483]
[47.50790405 -25.45510483]
[33.45071793 -31.23990631]
[22.68084335 -41.96736145]
[16.84061241 -56.00160980]
[16.82061577 -71.20252991]
[22.62390518 -85.25209808]
[33.36551666 -96.00785065]
[47.40743637 -101.82961273]
[62.60837173 -101.82961273]
[76.65029144 -96.00785065]
[87.39190674 -85.25209808]
[93.19519043 -71.20252991]
[93.17519379 -56.00160980]
[87.33496094 -41.96736145]
[76.56509399 -31.23990631]
[62.50790405 -25.45510483]
[62.50790405 -10.45510483]
[62.50790405 4.54489470]
[62.50790405 19.54489517]
[67.14315796 33.81074142]
[75.95993805 45.94599915]
[84.77671814 58.08125305]
[93.59349823 70.21650696]
[102.41027069 82.35176086]
[116.62841797 87.13134766]
[130.98527527 82.78617096]
[145.34213257 78.44099426]
[159.69898987 74.09581757]
[170.66613770 62.69264603]
[185.08905029 66.41138458]
[199.44590759 62.06620789]
[213.80276489 57.72103119]
[218.66514587 53.10185623]
[224.28761292 51.86355591]
[228.83013916 53.50341797]
[243.35128784 49.74362946]
[257.87243652 45.98384094]
[272.39361572 42.22405624]
[281.73855591 29.18366623]
[297.76715088 28.50321388]
[308.18368530 40.70468140]
[304.99743652 56.42814636]
[290.65261841 63.61191559]
[276.15338135 56.74521255]
[261.63223267 60.50500107]
[247.11108398 64.26478577]
[232.58992004 68.02457428]
[218.14794922 72.07788849]
[203.79109192 76.42306519]
[189.43423462 80.76824951]
[179.49397278 91.86061859]
[164.04417419 88.45267487]
[149.68731689 92.79785156]
[135.33045959 97.14302826]
[120.97359467 101.48821259]
[135.97203064 101.70442963]
[146.95362854 111.92229462]
[148.24853516 126.86629486]
[139.18821716 138.82081604]
[124.45051575 141.61370850]
[111.64454651 133.80299377]
[107.38222504 119.41931915]
[107.07821655 134.41624451]
[106.77421570 149.41316223]
[106.47021484 164.41007996]
[106.16620636 179.40699768]
[105.86220551 194.40391541]
[105.55819702 209.40083313]
[105.25419617 224.39775085]
[104.95018768 239.39466858]
[104.64618683 254.39158630]
[104.34217834 269.38851929]
[104.03817749 284.38543701]
[118.65594482 288.02804565]
[132.09640503 294.83258057]
[143.68542480 304.45767212]
[152.84165955 316.42059326]
[159.10586548 330.12121582]
[162.16383362 344.87237549]
[161.86216736 359.93414307]
[158.21600342 374.55102539]
[151.40821838 387.98983765]
[141.78030396 399.57650757]
[129.81520081 408.72985840]
[116.11304474 414.99075317]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[24 132]
[25 131]
[31 93]
[32 92]
[33 91]
[34 90]
[35 89]
[37 65]
[38 64]
[39 63]
[41 61]
[42 60]
[43 59]
[67 88]
[68 87]
[69 86]
[70 85]
[94 124]
[95 123]
[96 122]
[97 121]
[99 119]
[100 118]
[101 117]
[104 116]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
