%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCAUUUUGGGGGGGGGGACCUCACCCCCACUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAACCAxxxxxxxxxxAAAAUCGCUCAUUGCAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACCCCCCCCCCCAGCCAUUCU\
) } def
/len { sequence length } bind def

/coor [
[83.65004730 566.11907959]
[69.80411530 560.10302734]
[58.09545135 550.57360840]
[49.39292526 538.23797607]
[44.34232330 524.01141357]
[43.31843185 508.94976807]
[46.39723206 494.17059326]
[53.35025406 480.77066040]
[63.66153717 469.74432373]
[76.56591797 461.90982056]
[91.10580444 457.84851074]
[91.10580444 442.84851074]
[91.10580444 427.84851074]
[91.10580444 412.84851074]
[91.10580444 397.84851074]
[91.10580444 382.84851074]
[91.10580444 367.84851074]
[91.10580444 352.84851074]
[91.10580444 337.84851074]
[91.10580444 322.84851074]
[76.50155640 319.54431152]
[62.99232864 313.06982422]
[51.25703430 303.74685669]
[41.88622665 292.04046631]
[35.35238647 278.53573608]
[31.98609734 263.90859985]
[31.95932198 248.89190674]
[35.27661896 234.23876953]
[41.77475357 220.68478394]
[51.13072968 208.91111755]
[62.87783432 199.51023865]
[76.42893219 192.95614624]
[91.10580444 189.58044434]
[91.10580444 174.58044434]
[87.94022369 167.84808350]
[91.26509094 159.26919556]
[91.57714081 144.27244568]
[91.88919830 129.27569580]
[92.20125580 114.27893829]
[84.64079285 105.36685944]
[85.00545502 93.68555450]
[93.10709381 85.26241302]
[93.73107147 70.27539825]
[86.57453918 56.16531372]
[94.83457184 43.77091599]
[95.45854950 28.78390121]
[92.97102356 24.04767990]
[92.62856293 19.31110954]
[94.06119537 15.40608120]
[96.61796570 12.89004898]
[98.17554474 -2.02886319]
[99.73313141 -16.94777489]
[101.29071045 -31.86668777]
[86.65721130 -35.24905777]
[72.55030060 -40.40411758]
[59.18383026 -47.25372314]
[46.76043320 -55.69403458]
[35.46844864 -65.59709930]
[25.47905159 -76.81278229]
[16.94368744 -89.17106628]
[9.99174500 -102.48459625]
[4.72861576 -116.55154419]
[1.23408759 -131.15866089]
[-0.43886378 -146.08450317]
[-0.26487672 -161.10281372]
[1.75341117 -175.98588562]
[5.58540297 -190.50813293]
[11.17300701 -204.44937134]
[18.43151665 -217.59828186]
[27.25089455 -229.75550842]
[37.49744034 -240.73675537]
[49.01581955 -250.37556458]
[61.63142014 -258.52578735]
[75.15298462 -265.06390381]
[89.37553406 -269.89077759]
[104.08346558 -272.93322754]
[119.05380249 -274.14514160]
[134.05958557 -273.50811768]
[148.87336731 -271.03186035]
[163.27053833 -266.75390625]
[177.03285217 -260.73907471]
[189.95169067 -253.07856750]
[201.83117676 -243.88850403]
[212.49125671 -233.30821228]
[221.77030945 -221.49809265]
[229.52764893 -208.63719177]
[235.64570618 -194.92044067]
[240.03172302 -180.55581665]
[242.61920166 -165.76106262]
[243.36891174 -150.76048279]
[242.26950073 -135.78146362]
[239.33763123 -121.05109406]
[234.61775208 -106.79267883]
[228.18141174 -93.22238159]
[220.12619019 -80.54590607]
[210.57418823 -68.95543671]
[199.67022705 -58.62668228]
[187.57960510 -49.71621704]
[174.48561096 -42.35913086]
[160.58673096 -36.66694641]
[146.09368896 -32.72595978]
[131.22619629 -30.59591675]
[116.20961761 -30.30910683]
[114.65203857 -15.39019394]
[113.09445953 -0.47128215]
[111.53688049 14.44762993]
[110.44556427 29.40787888]
[109.82158661 44.39489365]
[117.02275848 57.43301010]
[108.71808624 70.89937592]
[108.09410858 85.88639069]
[116.26194000 100.50766754]
[107.19801331 114.59099579]
[106.88595581 129.58775330]
[106.57389832 144.58450317]
[106.26184082 159.58125305]
[106.10580444 174.58044434]
[106.10580444 189.58044434]
[120.78267670 192.95614624]
[134.33377075 199.51023865]
[146.08088684 208.91111755]
[155.43685913 220.68478394]
[161.93499756 234.23876953]
[165.25228882 248.89190674]
[165.22550964 263.90859985]
[161.85922241 278.53573608]
[155.32537842 292.04046631]
[145.95457458 303.74685669]
[134.21928406 313.06982422]
[120.71005249 319.54431152]
[106.10580444 322.84851074]
[106.10580444 337.84851074]
[106.10580444 352.84851074]
[106.10580444 367.84851074]
[106.10580444 382.84851074]
[106.10580444 397.84851074]
[106.10580444 412.84851074]
[106.10580444 427.84851074]
[106.10580444 442.84851074]
[106.10580444 457.84851074]
[120.64569092 461.90982056]
[133.55007935 469.74432373]
[143.86135864 480.77066040]
[150.81437683 494.17059326]
[153.89317322 508.94976807]
[152.86929321 524.01141357]
[147.81867981 538.23797607]
[139.11616516 550.57360840]
[127.40750122 560.10302734]
[113.56156158 566.11907959]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[33 118]
[34 117]
[36 116]
[37 115]
[38 114]
[39 113]
[42 111]
[43 110]
[45 108]
[46 107]
[50 106]
[51 105]
[52 104]
[53 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
