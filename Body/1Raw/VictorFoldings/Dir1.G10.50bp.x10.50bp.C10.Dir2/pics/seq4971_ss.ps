%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUAAUAGCGGGGGGGGGGUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGxxxxxxxxxxAACAGCCAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCCCCCCCCCCCUCAUAAUCGC\
) } def
/len { sequence length } bind def

/coor [
[111.89707184 362.71987915]
[97.40737915 358.51141357]
[84.50115204 350.69528198]
[74.05834961 339.80444336]
[66.79098511 326.58145142]
[63.19456100 311.92785645]
[63.51428223 296.84274292]
[67.72835541 282.35467529]
[75.54944611 269.45147705]
[86.44432068 259.01287842]
[99.67012787 251.75062561]
[114.32511902 248.15985107]
[114.63717651 233.16310120]
[114.94923401 218.16633606]
[115.26128387 203.16958618]
[115.57334137 188.17283630]
[115.88539886 173.17608643]
[116.19745636 158.17932129]
[116.50951385 143.18257141]
[116.82157135 128.18582153]
[110.73564911 123.80271912]
[98.56381226 115.03651428]
[92.47789764 110.65340424]
[78.35308838 115.70216370]
[64.22828674 120.75092316]
[59.99446869 135.67922974]
[47.77382278 145.24140930]
[32.26543427 145.76062012]
[19.43260002 137.03720093]
[14.20980549 122.42549896]
[18.60531998 107.54399872]
[30.92897987 98.11494446]
[46.44208527 97.76399994]
[59.17953110 106.62611389]
[73.30433655 101.57736206]
[87.42913818 96.52860260]
[98.09076691 85.97731018]
[103.28617859 71.90579224]
[108.48159790 57.83427429]
[113.67700958 43.76275635]
[118.87242889 29.69123650]
[114.75903320 9.54138088]
[131.96946716 -1.77621293]
[135.67562866 -16.31114960]
[139.38179016 -30.84608459]
[127.33749390 -38.66751480]
[118.31844330 -49.81560135]
[113.19979095 -63.18745804]
[112.47166443 -77.46548462]
[116.19226074 -91.24718475]
[123.98345184 -103.18294525]
[135.06916809 -112.10817719]
[148.35266113 -117.15696716]
[162.52503967 -117.84605408]
[166.53277588 -132.30075073]
[170.54051208 -146.75543213]
[174.54824829 -161.21012878]
[176.72509766 -176.05133057]
[177.03715515 -191.04808044]
[177.34919739 -206.04483032]
[177.66125488 -221.04159546]
[162.98176575 -224.37287903]
[149.27349854 -230.59124756]
[137.09779358 -239.44206238]
[126.95322418 -250.56288147]
[119.25522614 -263.49832153]
[114.31901550 -277.71868896]
[112.34673309 -292.64166260]
[113.41914368 -307.65615845]
[117.49232483 -322.14730835]
[124.39948273 -335.52178955]
[133.85778809 -347.23184204]
[145.47990417 -356.79797363]
[158.78993225 -363.82849121]
[173.24284363 -368.03546143]
[188.24676514 -369.24661255]
[203.18733215 -367.41235352]
[217.45272827 -362.60781860]
[230.45877075 -355.02972412]
[241.67289734 -344.98840332]
[250.63589478 -332.89501953]
[256.98071289 -319.24481201]
[260.44757080 -304.59674072]
[260.89447021 -289.55065918]
[258.30310059 -274.72262573]
[252.77963257 -260.71990967]
[244.55020142 -248.11590576]
[233.95181274 -237.42669678]
[221.41845703 -229.09004211]
[207.46337891 -223.44729614]
[192.65802002 -220.72953796]
[192.34596252 -205.73277283]
[192.03390503 -190.73602295]
[191.72184753 -175.73927307]
[200.71083069 -187.74752808]
[213.96389771 -194.77293396]
[228.94757080 -195.47253418]
[242.79759216 -189.71258545]
[252.86637878 -178.59414673]
[257.22918701 -164.24264526]
[255.05203247 -149.40148926]
[246.75108337 -136.90771484]
[233.91316223 -129.14962769]
[218.99235535 -127.61028290]
[204.84092712 -132.58392334]
[194.16406250 -143.11979675]
[189.00294495 -157.20237732]
[184.99520874 -142.74769592]
[180.98745728 -128.29299927]
[176.97972107 -113.83831787]
[189.89157104 -104.88065338]
[198.98042297 -92.02799225]
[203.13696289 -76.81731415]
[201.84307861 -61.07524490]
[195.23631287 -46.69873428]
[184.09553528 -35.42644501]
[169.74916077 -28.62849045]
[153.91673279 -27.13992310]
[150.21057129 -12.60498810]
[146.50440979 1.92994833]
[152.99256897 15.45413780]
[169.25314331 13.32675552]
[179.00964355 26.50790596]
[172.22541809 41.43795395]
[155.87950134 42.75814438]
[146.78717041 29.11038017]
[132.94393921 34.88665009]
[127.74852753 48.95817184]
[122.55311584 63.02968979]
[117.35769653 77.10121155]
[112.16228485 91.17272949]
[131.81832886 128.49787903]
[131.50627136 143.49462891]
[131.19421387 158.49137878]
[130.88215637 173.48814392]
[130.57009888 188.48489380]
[130.25804138 203.48164368]
[129.94598389 218.47839355]
[129.63392639 233.47515869]
[129.32186890 248.47190857]
[143.81480408 252.66918945]
[156.72706604 260.47534180]
[167.17828369 271.35809326]
[174.45585632 284.57550049]
[178.06359863 299.22631836]
[177.75552368 314.31164551]
[173.55264282 328.80297852]
[165.74151611 341.71221924]
[154.85470581 352.15924072]
[141.63450623 359.43170166]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[23 36]
[24 35]
[25 34]
[37 131]
[38 130]
[39 129]
[40 128]
[41 127]
[43 120]
[44 119]
[45 118]
[54 110]
[55 109]
[56 108]
[57 107]
[58 94]
[59 93]
[60 92]
[61 91]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
