%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCAGCCAGGGGGGGGGGGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCxxxxxxxxxxGCCUUCUCCACUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCCCCCCCCCCCAACCAACCA\
) } def
/len { sequence length } bind def

/coor [
[85.60146332 429.32431030]
[71.11177063 425.11581421]
[58.20553970 417.29971313]
[47.76274109 406.40887451]
[40.49537659 393.18588257]
[36.89894867 378.53225708]
[37.21866989 363.44717407]
[41.43273926 348.95910645]
[49.25383759 336.05587769]
[60.14870453 325.61730957]
[73.37451172 318.35504150]
[88.02951050 314.76428223]
[88.34156036 299.76751709]
[88.65361786 284.77075195]
[88.96567535 269.77401733]
[89.27773285 254.77725220]
[89.58979034 239.78050232]
[89.90184784 224.78375244]
[90.21389771 209.78700256]
[90.52595520 194.79023743]
[90.83801270 179.79348755]
[91.15007019 164.79673767]
[69.27427673 157.73098755]
[51.19506836 143.53178406]
[39.14638901 123.95362091]
[24.65079308 127.81078339]
[10.15519619 131.66793823]
[-4.34040070 135.52510071]
[-18.83599663 139.38226318]
[-30.06376648 151.33505249]
[-45.96507263 147.32499695]
[-50.18201447 131.47731018]
[-38.37656403 120.09471893]
[-22.69315720 124.88666534]
[-8.19756031 121.02950287]
[6.29803658 117.17234802]
[20.79363251 113.31518555]
[35.28923035 109.45803070]
[34.66526794 97.11714935]
[36.37375641 84.87918854]
[40.35369873 73.18103790]
[46.46301270 62.44032669]
[54.48359680 53.04049301]
[64.12911987 45.31711578]
[75.05522919 39.54591370]
[86.87186432 35.93292236]
[99.15718079 34.60712814]
[111.47257996 35.61585617]
[115.78016663 21.24767113]
[120.08775330 6.87948799]
[124.39533234 -7.48869610]
[128.70291138 -21.85688019]
[116.98322296 -31.49660873]
[109.86622620 -44.85293198]
[108.40896606 -59.87591553]
[112.80251312 -74.27328491]
[122.34757996 -85.86020660]
[135.56559753 -92.89080048]
[150.42773438 -94.32121277]
[154.73532104 -108.68939972]
[159.04290771 -123.05757904]
[163.35049438 -137.42576599]
[167.65808105 -151.79394531]
[171.96566772 -166.16213989]
[173.83328247 -181.04541016]
[173.20930481 -196.03242493]
[172.58532715 -211.01943970]
[171.96134949 -226.00645447]
[157.92584229 -232.00375366]
[147.88890076 -243.50256348]
[143.84335327 -258.21975708]
[146.59243774 -273.23327637]
[155.59031677 -285.56213379]
[169.05049133 -292.75842285]
[184.30038452 -293.39337158]
[198.31216431 -287.34082031]
[208.30374146 -275.80258179]
[212.29132080 -261.06958008]
[209.48312378 -246.06701660]
[200.43675232 -233.77368164]
[186.94836426 -226.63043213]
[187.57234192 -211.64341736]
[188.19631958 -196.65640259]
[188.82029724 -181.66938782]
[196.34028625 -194.64820862]
[207.78387451 -204.34585571]
[221.82051086 -209.63479614]
[236.81816101 -209.90010071]
[251.03306580 -205.11091614]
[262.81246948 -195.82406616]
[270.78680420 -183.11933899]
[274.02890015 -168.47390747]
[272.16177368 -153.59056091]
[265.40252686 -140.19979858]
[254.53706360 -129.85853577]
[240.82870483 -123.76914215]
[225.87129211 -122.63964081]
[211.40391541 -126.60134888]
[199.10868835 -135.19363403]
[190.41517639 -147.41749573]
[186.33384705 -161.85455322]
[182.02626038 -147.48635864]
[177.71867371 -133.11817932]
[173.41108704 -118.74999237]
[169.10351562 -104.38181305]
[164.79592896 -90.01362610]
[176.41981506 -80.64269257]
[183.58981323 -67.49977112]
[185.18598938 -52.57270813]
[180.93412781 -38.13285828]
[171.45228577 -26.38941765]
[158.16111755 -19.15146255]
[143.07110596 -17.54929543]
[138.76351929 -3.18111157]
[134.45593262 11.18707275]
[130.14834595 25.55525589]
[125.84076691 39.92343903]
[137.43141174 46.37325668]
[147.48220825 55.02914810]
[155.57971191 65.53504181]
[161.39079285 77.45873260]
[164.67640686 90.30972290]
[165.30137634 103.55934906]
[163.24000549 116.66255188]
[158.57708740 129.08029175]
[151.50444031 140.30174255]
[142.31303406 149.86528015]
[131.38095093 157.37747192]
[119.15794373 162.52928162]
[106.14682007 165.10879517]
[105.83477020 180.10554504]
[105.52271271 195.10229492]
[105.21065521 210.09904480]
[104.89859772 225.09580994]
[104.58654022 240.09255981]
[104.27448273 255.08930969]
[103.96243286 270.08605957]
[103.65037537 285.08282471]
[103.33831787 300.07955933]
[103.02626038 315.07632446]
[117.51919556 319.27362061]
[130.43145752 327.07977295]
[140.88265991 337.96252441]
[148.16024780 351.17990112]
[151.76797485 365.83074951]
[151.45991516 380.91607666]
[147.25703430 395.40740967]
[139.44589233 408.31665039]
[128.55909729 418.76364136]
[115.33889771 426.03610229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[48 117]
[49 116]
[50 115]
[51 114]
[52 113]
[59 106]
[60 105]
[61 104]
[62 103]
[63 102]
[64 101]
[65 84]
[66 83]
[67 82]
[68 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
