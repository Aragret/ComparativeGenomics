%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUACUAAUGGGGGGGGGGAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACAACACAAGAACACCUCUxxxxxxxxxxAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCUCCCCCCCCCCCAUUACUAUU\
) } def
/len { sequence length } bind def

/coor [
[100.75129700 400.18106079]
[86.90535736 394.16503906]
[75.19670105 384.63562012]
[66.49417114 372.29995728]
[61.44357300 358.07342529]
[60.41968155 343.01174927]
[63.49847794 328.23260498]
[70.45149994 314.83267212]
[80.76278687 303.80633545]
[93.66716766 295.97183228]
[108.20705414 291.91052246]
[108.20705414 276.91052246]
[108.20705414 261.91052246]
[108.20705414 246.91050720]
[108.20705414 231.91050720]
[108.20705414 216.91050720]
[108.20705414 201.91050720]
[108.20705414 186.91050720]
[108.20705414 171.91050720]
[108.20705414 156.91050720]
[108.20705414 141.91050720]
[73.69345856 120.48004913]
[78.32431030 89.76457977]
[67.44548035 79.43737793]
[56.56665421 69.11016846]
[45.47534180 59.01152039]
[34.17633438 49.14579773]
[22.87733078 39.28007507]
[11.77628136 49.39266586]
[-0.40517682 58.17388535]
[-13.50823402 65.50925446]
[-27.36206436 71.30314636]
[-41.78605652 75.48001862]
[-56.59215927 77.98542023]
[-71.58734894 78.78668213]
[-86.57613373 77.87337494]
[-101.36309814 75.25738525]
[-115.75547028 70.97283173]
[-129.56561279 65.07556915]
[-142.61347961 57.64247131]
[-154.72897339 48.77045822]
[-165.75413513 38.57518768]
[-175.54522705 27.18957329]
[-183.97462463 14.76205444]
[-190.93240356 1.45464790]
[-196.32786560 -12.55915642]
[-200.09066772 -27.09666061]
[-202.17176819 -41.96833801]
[-202.54402161 -56.98030853]
[-201.20257568 -71.93685150]
[-198.16493225 -86.64299011]
[-193.47067261 -100.90699005]
[-187.18101501 -114.54290009]
[-179.37794495 -127.37293243]
[-170.16319275 -139.22984314]
[-159.65690613 -149.95903015]
[-147.99603271 -159.42063904]
[-135.33261108 -167.49128723]
[-121.83173370 -174.06579590]
[-107.66941071 -179.05842590]
[-93.03027344 -182.40409851]
[-78.10518646 -184.05918884]
[-63.08870697 -184.00212097]
[-48.17662430 -182.23364258]
[-33.56333923 -178.77682495]
[-19.43936729 -173.67669678]
[-5.98884583 -166.99978638]
[6.61287212 -158.83311462]
[18.20149612 -149.28317261]
[28.62594604 -138.47444153]
[37.75031662 -126.54784393]
[45.45565414 -113.65887451]
[51.64150238 -99.97556305]
[56.22721863 -85.67630005]
[59.15301514 -70.94750214]
[60.38074875 -55.98118973]
[59.89441681 -40.97248459]
[57.70035553 -26.11705208]
[53.82717133 -11.60856438]
[48.32535934 2.36383057]
[41.26664352 15.61797428]
[32.74305344 27.98107147]
[44.04206085 37.84679413]
[55.34106445 47.71251678]
[60.14245224 48.28013611]
[64.61907196 51.91210175]
[66.89385986 58.23134613]
[77.77268982 68.55854797]
[88.65151215 78.88575745]
[108.33424377 67.71987152]
[135.90197754 76.87221527]
[149.42617798 70.38404846]
[162.95036316 63.89588547]
[176.47454834 57.40772247]
[163.59240723 49.72328949]
[161.35739136 34.89073563]
[171.40310669 23.75145340]
[186.38694763 24.44735909]
[195.35694885 36.46979904]
[191.75717163 51.03083420]
[205.88198853 45.98207855]
[220.00679016 40.93332291]
[228.14277649 27.10635376]
[244.04551697 24.98910141]
[255.51576233 36.20574188]
[253.75453186 52.15182495]
[240.11289978 60.59488678]
[225.05554199 55.05812454]
[210.93074036 60.10688019]
[196.80593872 65.15563965]
[182.96272278 70.93190765]
[169.43852234 77.42007446]
[155.91433716 83.90824127]
[142.39015198 90.39640808]
[142.39015198 97.89640808]
[157.39015198 97.89663696]
[157.38967896 112.89663696]
[142.39015198 112.89640808]
[142.39015198 120.39640808]
[155.91433716 126.88457489]
[170.08290100 120.26747894]
[185.17660522 124.35579681]
[194.06864929 137.21913147]
[192.56050110 152.78381348]
[181.36424255 163.70068359]
[165.76643372 164.81512451]
[153.13185120 155.60093689]
[149.42617798 140.40876770]
[135.90197754 133.92059326]
[123.20705414 141.91050720]
[123.20705414 156.91050720]
[123.20705414 171.91050720]
[123.20705414 186.91050720]
[123.20705414 201.91050720]
[123.20705414 216.91050720]
[123.20705414 231.91050720]
[123.20705414 246.91050720]
[123.20705414 261.91052246]
[123.20705414 276.91052246]
[123.20705414 291.91052246]
[137.74693298 295.97183228]
[150.65132141 303.80633545]
[160.96260071 314.83267212]
[167.91563416 328.23260498]
[170.99443054 343.01174927]
[169.97053528 358.07342529]
[164.91993713 372.29995728]
[156.21740723 384.63562012]
[144.50874329 394.16503906]
[130.66281128 400.18106079]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 89]
[24 88]
[25 87]
[26 84]
[27 83]
[28 82]
[91 114]
[92 113]
[93 112]
[94 111]
[100 110]
[101 109]
[102 108]
[119 129]
[120 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
