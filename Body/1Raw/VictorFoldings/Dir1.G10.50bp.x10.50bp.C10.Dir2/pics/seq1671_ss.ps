%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAACUAAGAGGGGGGGGGGGUAGAGUGCUUAGUUGAACAGGGCCCUGAAGCGCGUACACACCGCCCGUCxxxxxxxxxxUGUAGCAUUGUUCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUGAUAUACCCCCCCCCCUAAACUCAGA\
) } def
/len { sequence length } bind def

/coor [
[86.12860107 403.99105835]
[71.63890839 399.78259277]
[58.73268127 391.96646118]
[48.28987885 381.07562256]
[41.02251434 367.85263062]
[37.42609024 353.19903564]
[37.74581146 338.11392212]
[41.95988083 323.62585449]
[49.78097916 310.72265625]
[60.67584610 300.28405762]
[73.90165710 293.02178955]
[88.55664825 289.43103027]
[88.86870575 274.43426514]
[89.18076324 259.43753052]
[89.49281311 244.44076538]
[89.80487061 229.44401550]
[90.11692810 214.44726562]
[90.42898560 199.45050049]
[90.74104309 184.45375061]
[91.05310059 169.45700073]
[91.36515045 154.46025085]
[91.67720795 139.46348572]
[91.98926544 124.46673584]
[71.24398804 110.41204834]
[69.98145294 81.19712067]
[95.81162262 59.95904160]
[85.37181091 49.18823624]
[74.93199921 38.41742706]
[64.49218750 27.64661789]
[54.05237579 16.87580872]
[53.42254639 31.86258125]
[43.43672562 43.05558777]
[28.61859131 45.38428879]
[15.68089962 37.79375839]
[10.48455334 23.72258186]
[15.38354778 9.54514122]
[28.15859032 1.68395352]
[43.02282333 3.70040035]
[34.25661469 -8.47143650]
[25.49040794 -20.64327240]
[15.16320229 -31.52209854]
[3.46357870 -40.90925980]
[-8.23604488 -50.29642105]
[-19.93566895 -59.68358231]
[-35.43715668 -58.15333557]
[-47.16851425 -67.83992004]
[-48.53184128 -82.62764740]
[-60.23146439 -92.01480865]
[-74.23487854 -85.83718872]
[-89.50437927 -86.88645172]
[-102.53114319 -94.92149353]
[-110.32172394 -108.09591675]
[-111.08589935 -123.38233948]
[-104.64806366 -137.26805115]
[-92.48759460 -146.56221008]
[-77.39886475 -149.12908936]
[-62.84916687 -144.37884521]
[-52.18190384 -133.40306091]
[-47.84834290 -118.72385406]
[-50.84430313 -103.71443176]
[-39.14468002 -94.32727051]
[-24.41294098 -96.20116425]
[-12.41413593 -86.84791565]
[-10.54850674 -71.38320923]
[1.15111685 -61.99604416]
[12.85074043 -52.60888290]
[24.55036354 -43.22172165]
[20.24035645 -57.58917999]
[22.03440857 -72.48150635]
[29.63323402 -85.41432953]
[41.76917648 -94.23015594]
[56.41769028 -97.45832062]
[71.13507843 -94.56027985]
[83.46614075 -86.01950836]
[91.35378265 -73.26078033]
[93.48217773 -58.41255188]
[89.49624634 -43.95183182]
[80.06094360 -32.29099655]
[66.75028229 -25.37533760]
[51.78479004 -24.35853577]
[37.66224289 -29.40948105]
[46.42845154 -17.23764420]
[55.19466019 -5.06580687]
[64.82318115 6.43599653]
[75.26300049 17.20680428]
[85.70281219 27.97761345]
[96.14262390 38.74842072]
[106.58243561 49.51922989]
[121.58243561 49.51922989]
[132.02224731 38.74842072]
[142.46206665 27.97761345]
[143.65043640 11.97863483]
[156.98059082 3.05190921]
[172.22677612 8.04525566]
[177.69342041 23.12820625]
[169.18698120 36.73041153]
[153.23286438 38.41742706]
[142.79306030 49.18823624]
[132.35324097 59.95904160]
[134.80401611 67.04732513]
[148.98057556 62.14577103]
[163.15721130 57.24443817]
[168.05831909 71.42115021]
[153.88212585 76.32232666]
[139.70556641 81.22387695]
[142.15634155 88.31215668]
[157.01939392 90.33449554]
[171.88243103 92.35682678]
[186.74548340 94.37916565]
[201.60853577 96.40149689]
[216.47157288 98.42382812]
[231.33462524 100.44616699]
[241.96687317 89.14418030]
[257.21792603 86.28324890]
[271.22344971 92.96345520]
[278.59802246 106.61611938]
[276.50598145 121.99152374]
[265.75173950 133.17750549]
[250.47055054 135.87281799]
[236.53833008 129.04107666]
[229.31228638 115.30921173]
[214.44924927 113.28688049]
[199.58619690 111.26454163]
[184.72314453 109.24221039]
[169.86010742 107.21987152]
[154.99705505 105.19754028]
[140.13400269 103.17520905]
[125.50575256 120.94264984]
[106.98602295 124.77879333]
[106.67396545 139.77554321]
[106.36190796 154.77230835]
[106.04985046 169.76905823]
[105.73779297 184.76580811]
[105.42573547 199.76255798]
[105.11368561 214.75930786]
[104.80162811 229.75607300]
[104.48957062 244.75282288]
[104.17751312 259.74957275]
[103.86545563 274.74633789]
[103.55339813 289.74307251]
[118.04634094 293.94036865]
[130.95860291 301.74652100]
[141.40980530 312.62927246]
[148.68737793 325.84667969]
[152.29512024 340.49749756]
[151.98704529 355.58282471]
[147.78416443 370.07415771]
[139.97303772 382.98339844]
[129.08622742 393.43038940]
[115.86603546 400.70288086]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[26 88]
[27 87]
[28 86]
[29 85]
[30 84]
[38 83]
[39 82]
[40 81]
[41 67]
[42 66]
[43 65]
[44 64]
[47 61]
[48 60]
[89 99]
[90 98]
[91 97]
[106 127]
[107 126]
[108 125]
[109 124]
[110 123]
[111 122]
[112 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
