%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCGGACUGGGGGGGGGGCCUGCCUCACUCAUUUACACCAACCACCCAACUAUCUAUAAACCUAGCCAxxxxxxxxxxCCAAACAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUCCCCCCCCCCUCCUAGGACU\
) } def
/len { sequence length } bind def

/coor [
[89.62509155 382.29635620]
[75.77915955 376.28033447]
[64.07049561 366.75091553]
[55.36796951 354.41522217]
[50.31736755 340.18872070]
[49.29347610 325.12704468]
[52.37227631 310.34786987]
[59.32529831 296.94793701]
[69.63658142 285.92160034]
[82.54096222 278.08709717]
[97.08084869 274.02578735]
[97.08084869 259.02578735]
[97.08084869 244.02578735]
[97.08084869 229.02578735]
[97.08084869 214.02578735]
[97.08084869 199.02578735]
[97.08084869 184.02578735]
[97.08084869 169.02578735]
[97.08084869 154.02578735]
[97.08084869 139.02578735]
[77.00486755 128.35101318]
[67.46940613 109.44342804]
[70.38539124 90.04532623]
[82.91933441 77.04537964]
[68.58929443 81.50096130]
[53.97223663 84.89862823]
[39.14616394 87.22024536]
[24.19017220 88.45343018]
[9.18406200 88.59160614]
[-5.79210043 87.63402557]
[-20.65841103 85.58580780]
[-35.33555222 82.45787811]
[-49.74521255 78.26692963]
[-63.81050873 73.03530884]
[-77.45639801 66.79094696]
[-90.61007690 59.56714630]
[-103.20134735 51.40245438]
[-115.16304779 42.34043884]
[-126.43135071 32.42944336]
[-136.94613647 21.72235298]
[-146.65129089 10.27628994]
[-155.49504089 -1.84767091]
[-163.43020630 -14.58484459]
[-170.41444397 -27.86727142]
[-176.41047668 -41.62408447]
[-181.38633728 -55.78187943]
[-185.31546021 -70.26512146]
[-188.17689514 -84.99654388]
[-189.95536804 -99.89752960]
[-190.64137268 -114.88858795]
[-190.23127747 -129.88972473]
[-188.72726440 -144.82090759]
[-186.13732910 -159.60247803]
[-182.47532654 -174.15556335]
[-177.76078796 -188.40251160]
[-172.01884460 -202.26730347]
[-165.28015137 -215.67597961]
[-157.58067322 -228.55697632]
[-148.96147156 -240.84159851]
[-139.46853638 -252.46426392]
[-129.15251160 -263.36300659]
[-118.06845856 -273.47961426]
[-106.27550507 -282.76016235]
[-93.83657074 -291.15512085]
[-80.81802368 -298.61968994]
[-67.28932953 -305.11407471]
[-53.32265854 -310.60354614]
[-38.99253845 -315.05889893]
[-24.37542915 -318.45632935]
[-9.54931736 -320.77770996]
[5.40669394 -322.01065063]
[20.41280556 -322.14859009]
[35.38895416 -321.19076538]
[50.25522995 -319.14230347]
[64.93231964 -316.01412964]
[79.34191132 -311.82293701]
[93.40711975 -306.59109497]
[107.05290985 -300.34649658]
[120.20646667 -293.12246704]
[132.79760742 -284.95758057]
[144.75915527 -275.89535522]
[156.02729797 -265.98419189]
[166.54190063 -255.27691650]
[176.24687195 -243.83070374]
[185.09042358 -231.70658875]
[193.02537537 -218.96928406]
[200.00939941 -205.68675232]
[206.00520325 -191.92984009]
[210.98083496 -177.77195740]
[214.90972900 -163.28865051]
[217.77091980 -148.55718994]
[219.54913330 -133.65617371]
[220.23490906 -118.66510010]
[219.82455444 -103.66397095]
[218.32029724 -88.73280334]
[215.73011780 -73.95127869]
[212.06788635 -59.39826202]
[207.35310364 -45.15139389]
[201.61093140 -31.28669357]
[194.87202454 -17.87813187]
[187.17233276 -4.99725199]
[178.55291748 7.28721952]
[169.05979919 18.90974045]
[158.74360657 29.80829620]
[147.65937805 39.92473984]
[135.86627197 49.20509720]
[123.42720032 57.59984970]
[110.40853119 65.06420898]
[96.87972260 71.55834961]
[115.36190796 71.79196167]
[131.85786438 84.05065918]
[138.73092651 105.60796356]
[153.37442017 108.85878754]
[168.01792908 112.10961151]
[182.66142273 115.36044312]
[197.30493164 118.61126709]
[212.77542114 113.17105865]
[225.04415894 124.05271149]
[221.49009705 140.06210327]
[205.76937866 144.73014832]
[194.05410767 133.25476074]
[179.41059875 130.00393677]
[164.76710510 126.75311279]
[150.12359619 123.50228882]
[135.48010254 120.25146484]
[129.63027954 124.94504547]
[142.17327881 133.17141724]
[138.22537231 147.64254761]
[123.24250793 148.35949707]
[117.93066406 134.33221436]
[112.08084869 139.02578735]
[112.08084869 154.02578735]
[112.08084869 169.02578735]
[112.08084869 184.02578735]
[112.08084869 199.02578735]
[112.08084869 214.02578735]
[112.08084869 229.02578735]
[112.08084869 244.02578735]
[112.08084869 259.02578735]
[112.08084869 274.02578735]
[126.62073517 278.08709717]
[139.52511597 285.92160034]
[149.83639526 296.94793701]
[156.78942871 310.34786987]
[159.86822510 325.12704468]
[158.84432983 340.18872070]
[153.79373169 354.41522217]
[145.09120178 366.75091553]
[133.38253784 376.28033447]
[119.53660583 382.29635620]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 109]
[112 125]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
