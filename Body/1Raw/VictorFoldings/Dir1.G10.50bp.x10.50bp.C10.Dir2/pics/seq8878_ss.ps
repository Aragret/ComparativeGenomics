%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCACUUCGGGGGGGGGGCACUCCAUAACGCUCCUCAUACUAGGCCUACUAACCAACACACUAACCAUxxxxxxxxxxAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCCCCCCCCCCCAUCUCACUUC\
) } def
/len { sequence length } bind def

/coor [
[56.46841431 484.25292969]
[43.91019058 475.90179443]
[33.82397079 464.68933105]
[26.84377480 451.32043457]
[23.40839195 436.63543701]
[23.73376846 421.55746460]
[27.79945374 407.03436279]
[35.34987259 393.97900391]
[45.91040039 383.21212769]
[58.81719589 375.41049194]
[73.25892639 371.06454468]
[72.63494873 356.07751465]
[72.01097107 341.09048462]
[71.38699341 326.10348511]
[70.76301575 311.11645508]
[70.13903809 296.12945557]
[69.51506042 281.14242554]
[68.89108276 266.15542603]
[68.26710510 251.16839600]
[67.64312744 236.18138123]
[57.19911194 246.94812012]
[42.29673767 248.65669250]
[29.68692589 240.53309631]
[25.08204651 226.25741577]
[30.56815529 212.29666138]
[43.65998840 204.97520447]
[58.42682266 207.60971069]
[68.17927551 219.00712585]
[69.73685455 204.08822632]
[71.29443359 189.16931152]
[63.27779007 173.58940125]
[74.13151550 158.75105286]
[75.37838745 143.80297852]
[76.62526703 128.85488892]
[67.11690521 117.25354767]
[52.21500397 115.54085541]
[37.31309891 113.82816315]
[25.09226227 123.84947205]
[9.37312889 122.21105194]
[-0.51841426 109.88494873]
[1.28610861 94.18401337]
[13.71610641 84.42333984]
[29.39708138 86.39376068]
[39.02579117 98.92626190]
[53.92769241 100.63895416]
[68.82959747 102.35163879]
[73.83097839 86.66180420]
[85.56938934 76.60761261]
[99.84452057 74.40188599]
[104.15210724 60.03370285]
[92.82843781 69.87110901]
[79.83092499 77.35874176]
[65.64036560 82.21960449]
[50.78170013 84.27388763]
[35.80458450 83.44561005]
[21.26305771 79.76538849]
[7.69503975 73.36938477]
[-4.39755726 64.49418640]
[-14.56740189 53.46811676]
[-22.43828964 40.69904709]
[-27.71905899 26.65933800]
[-30.21436310 11.86834526]
[-29.83189392 -3.12677813]
[-26.58580017 -17.77132988]
[-20.59616280 -31.52357483]
[-12.08455181 -43.87478638]
[-1.36582935 -54.36807251]
[11.16349506 -62.61525345]
[25.03993416 -68.31125641]
[39.75016785 -71.24536896]
[54.75003433 -71.30905151]
[69.48464966 -68.49995422]
[83.40895844 -62.92198563]
[96.00785828 -54.78149033]
[106.81529236 -44.37960052]
[115.43147278 -32.10110855]
[121.53767395 -18.40021706]
[124.90799713 -3.78375721]
[125.41777802 11.20757771]
[123.04815674 26.01922607]
[117.88964844 40.09733582]
[129.78202820 30.95560265]
[141.67440796 21.81386757]
[153.56678772 12.67213345]
[165.45916748 3.53039932]
[177.35154724 -5.61133480]
[189.24392700 -14.75306892]
[191.17276001 -32.10867310]
[204.76968384 -42.52058029]
[221.36189270 -39.96001053]
[233.06152344 -49.34717178]
[244.76113892 -58.73433685]
[256.46075439 -68.12149811]
[268.16040039 -77.50865936]
[271.33151245 -93.23518372]
[285.66940308 -100.43273926]
[300.17523193 -93.57998657]
[303.72137451 -77.93376160]
[293.58755493 -65.49651337]
[277.54754639 -65.80903625]
[265.84793091 -56.42187500]
[254.14830017 -47.03470993]
[242.44868469 -37.64754868]
[230.74905396 -28.26038742]
[231.14254761 -15.34365654]
[223.89981079 -4.40669680]
[211.49046326 0.41369021]
[198.38565063 -2.86068940]
[186.49327087 6.28104496]
[174.60089111 15.42277908]
[162.70851135 24.56451416]
[150.81613159 33.70624924]
[138.92375183 42.84798050]
[127.03137970 51.98971558]
[118.52028656 64.34128571]
[114.21270752 78.70947266]
[124.44016266 89.17378998]
[127.55735016 104.11399078]
[121.92459106 118.97399139]
[108.67929077 128.84962463]
[91.57334900 130.10176086]
[90.32647705 145.04985046]
[89.07960510 159.99794006]
[96.81749725 170.36996460]
[95.43155670 182.83181763]
[86.21334839 190.72688293]
[84.65576935 205.64579773]
[83.09819031 220.56471252]
[82.63014221 235.55740356]
[83.25411987 250.54441833]
[83.87809753 265.53143311]
[84.50207520 280.51846313]
[85.12605286 295.50546265]
[85.75003052 310.49249268]
[86.37400818 325.47949219]
[86.99798584 340.46652222]
[87.62196350 355.45355225]
[88.24594116 370.44055176]
[102.99894714 373.57098389]
[116.50958252 380.27276611]
[127.92855835 390.12454224]
[136.53807068 402.50708008]
[141.79692078 416.64196777]
[143.37452698 431.64071655]
[141.17172241 446.56042480]
[135.32698059 460.46331787]
[126.20769501 472.47537231]
[114.38712311 481.84152222]
[100.60831451 487.97302246]
[85.73741150 490.48440552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[28 128]
[29 127]
[30 126]
[32 123]
[33 122]
[34 121]
[35 46]
[36 45]
[37 44]
[49 116]
[50 115]
[81 114]
[82 113]
[83 112]
[84 111]
[85 110]
[86 109]
[87 108]
[90 104]
[91 103]
[92 102]
[93 101]
[94 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
