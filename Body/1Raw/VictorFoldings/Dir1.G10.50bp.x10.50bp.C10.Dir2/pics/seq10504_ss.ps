%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUCCCCCAUGGGGGGGGGGUCUCCUCCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAxxxxxxxxxxUCCCGUGAGGCCAAAUAUCAUUCUGAGGGGCCACAGUAAUUACAAACUUACCCCCCCCCCCUAUCCGCCAU\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 416.46307373]
[71.01555634 410.91006470]
[58.81560135 402.04373169]
[49.20452881 390.42141724]
[42.78650284 376.77371216]
[39.96496582 361.95852661]
[40.91728210 346.90716553]
[45.58358765 332.56573486]
[53.67055511 319.83578491]
[64.66983032 309.51748657]
[77.88998413 302.25952148]
[92.50000000 298.51809692]
[92.50000000 283.51809692]
[92.50000000 268.51809692]
[92.50000000 253.51808167]
[92.50000000 238.51808167]
[92.50000000 223.51808167]
[92.50000000 208.51808167]
[92.50000000 193.51808167]
[92.50000000 178.51808167]
[92.50000000 163.51808167]
[92.50000000 148.51808167]
[81.22528076 145.36259460]
[71.01831818 139.62722778]
[62.45960999 131.63816833]
[56.03590393 121.84978485]
[52.11253357 110.81875610]
[50.91262817 99.17243195]
[52.50443268 87.57318115]
[56.79740906 76.68067169]
[63.54741669 67.11437988]
[72.37055969 59.41836929]
[82.76505280 54.03032303]
[79.70665741 39.34542465]
[76.64826202 24.66052628]
[73.58986664 9.97562885]
[70.53147125 -4.70926905]
[67.47307587 -19.39416695]
[45.68489456 -25.97077370]
[32.28600693 -45.67948914]
[34.35688019 -70.49831390]
[20.92943192 -77.18439484]
[7.50198269 -83.87046814]
[-5.92546654 -90.55654144]
[-18.68418121 -82.00605774]
[-34.00985718 -80.99649048]
[-47.77996445 -87.79940796]
[-56.29041672 -100.58486176]
[-57.25193787 -115.91362762]
[-50.40589142 -129.66233826]
[-37.59382629 -138.13267517]
[-22.26212120 -139.04614258]
[-8.53493118 -132.15704346]
[-0.10480051 -119.31848145]
[0.76060855 -103.98399353]
[14.18805790 -97.29792023]
[27.61550713 -90.61183929]
[41.04295731 -83.92576599]
[53.95565414 -91.55873871]
[54.57147980 -106.54608917]
[55.18730545 -121.53343964]
[46.25722122 -137.60466003]
[56.14693451 -152.06973267]
[56.45491028 -167.06657410]
[56.76288986 -182.06340027]
[57.07086563 -197.06024170]
[42.61743164 -201.41923523]
[29.87662697 -209.51704407]
[19.79390717 -220.75276184]
[13.11747646 -234.29261780]
[10.34277058 -249.13188171]
[11.67568970 -264.16937256]
[17.01732445 -278.28918457]
[25.97128677 -290.44357300]
[37.87313843 -299.73059082]
[51.83967590 -305.46105957]
[66.83449554 -307.20974731]
[81.74488068 -304.84692383]
[95.46437836 -298.54788208]
[106.97492218 -288.78005981]
[115.42233276 -276.26834106]
[120.17977905 -261.94110107]
[120.89420319 -246.86157227]
[117.51261139 -232.14874268]
[110.28593445 -218.89439392]
[99.75042725 -208.08210754]
[86.68791199 -200.51419067]
[72.06770325 -196.75227356]
[71.75972748 -181.75543213]
[71.45175171 -166.75859070]
[71.14376831 -151.76174927]
[79.30883026 -142.78433228]
[79.13760376 -130.24870300]
[70.17465973 -120.91761780]
[69.55883026 -105.93026733]
[68.94300842 -90.94290924]
[79.98816681 -88.51541901]
[89.68571472 -83.01594543]
[97.21858215 -75.01639557]
[101.98455811 -65.29405212]
[103.64385986 -54.75657654]
[102.14192200 -44.35750580]
[97.70603180 -35.01000595]
[90.81683350 -27.50669670]
[82.15797424 -22.45256233]
[85.21636963 -7.76766443]
[88.27476501 6.91723299]
[91.33316040 21.60213089]
[94.39155579 36.28702927]
[97.44995117 50.97192764]
[111.95471954 52.38341141]
[125.40609741 57.99065781]
[136.61880493 67.29957581]
[144.60482788 79.48990631]
[148.66047668 93.48749542]
[148.42839050 108.05893707]
[162.67507935 112.75273895]
[176.92176819 117.44654083]
[189.43351746 108.26853180]
[204.95054626 108.23125458]
[217.50624084 117.34903717]
[222.27268982 132.11592102]
[217.41708374 146.85371399]
[204.80651855 155.89544678]
[189.28999329 155.76440430]
[176.83393860 146.51094055]
[172.22796631 131.69322205]
[157.98127747 126.99942780]
[143.73458862 122.30562592]
[128.77531433 139.77732849]
[107.50000000 148.51808167]
[107.50000000 163.51808167]
[107.50000000 178.51808167]
[107.50000000 193.51808167]
[107.50000000 208.51808167]
[107.50000000 223.51808167]
[107.50000000 238.51808167]
[107.50000000 253.51808167]
[107.50000000 268.51809692]
[107.50000000 283.51809692]
[107.50000000 298.51809692]
[122.11001587 302.25952148]
[135.33016968 309.51748657]
[146.32945251 319.83578491]
[154.41641235 332.56573486]
[159.08271790 346.90716553]
[160.03503418 361.95852661]
[157.21350098 376.77371216]
[150.79547119 390.42141724]
[141.18440247 402.04373169]
[128.98443604 410.91006470]
[114.96250153 416.46307373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[33 110]
[34 109]
[35 108]
[36 107]
[37 106]
[38 105]
[41 58]
[42 57]
[43 56]
[44 55]
[59 96]
[60 95]
[61 94]
[63 91]
[64 90]
[65 89]
[66 88]
[116 129]
[117 128]
[118 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
