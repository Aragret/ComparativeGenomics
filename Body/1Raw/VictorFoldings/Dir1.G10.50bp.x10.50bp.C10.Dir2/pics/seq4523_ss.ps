%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCCUUAUGGGGGGGGGGUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGxxxxxxxxxxAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUCCCCCCCCCCAACCCCCUAAU\
) } def
/len { sequence length } bind def

/coor [
[75.49379730 390.00277710]
[61.47185135 384.44976807]
[49.27189255 375.58343506]
[39.66082001 363.96112061]
[33.24279785 350.31341553]
[30.42125893 335.49822998]
[31.37357521 320.44686890]
[36.03987885 306.10543823]
[44.12684631 293.37548828]
[55.12612152 283.05718994]
[68.34628296 275.79922485]
[82.95629120 272.05780029]
[82.95629120 257.05780029]
[82.95629120 242.05778503]
[82.95629120 227.05778503]
[82.95629120 212.05778503]
[82.95629120 197.05778503]
[82.95629120 182.05778503]
[82.95629120 167.05778503]
[82.95629120 152.05778503]
[82.95629120 137.05778503]
[70.71334076 128.39118958]
[56.56602097 133.37651062]
[42.41870499 138.36183167]
[28.27138901 143.34715271]
[24.81840706 158.38311768]
[13.76855564 169.14900208]
[-1.35219848 172.20945740]
[-15.71887779 166.58787537]
[-24.74712753 154.07810974]
[-25.55606461 138.67196655]
[-17.88755989 125.28549957]
[-4.18860817 118.19027710]
[11.16950798 119.65035248]
[23.28606796 129.19982910]
[37.43338394 124.21450806]
[51.58069992 119.22918701]
[65.72801971 114.24386597]
[66.28607941 93.84767914]
[77.11011505 78.46571350]
[68.95344543 65.87727356]
[60.79678345 53.28883743]
[45.09014511 58.60402679]
[28.55671883 59.72396851]
[12.29697990 56.57940292]
[-2.60816622 49.38473129]
[-15.16923141 38.62342453]
[-24.55383873 25.01552582]
[-30.14188194 9.46948624]
[-31.56648827 -6.97849703]
[-28.73811531 -23.23353386]
[-21.85014725 -38.21493149]
[-11.36568356 -50.92804337]
[-20.28183556 -62.99047470]
[-29.19798660 -75.05290222]
[-38.11413574 -87.11533356]
[-47.03028870 -99.17776489]
[-55.94643784 -111.24019623]
[-71.53494263 -115.03205109]
[-78.15866089 -129.64389038]
[-70.73644257 -143.86677551]
[-54.96198273 -146.79011536]
[-42.93609238 -136.17137146]
[-43.88400650 -120.15634918]
[-34.96785736 -108.09391785]
[-26.05170441 -96.03148651]
[-17.13555527 -83.96905518]
[-8.21940327 -71.90662384]
[0.69674748 -59.84419250]
[13.06818008 -65.29647827]
[26.31650162 -68.02433777]
[39.84883499 -67.90283203]
[53.05898666 -64.93462372]
[65.35461426 -59.24993896]
[76.18377686 -51.10087967]
[85.05971527 -40.85024643]
[91.58273315 -28.95537567]
[95.45819092 -15.94773769]
[96.50981140 -2.40919781]
[94.68771362 11.05401707]
[90.07073975 23.83846474]
[82.86308289 35.37052917]
[73.38522339 45.13217163]
[81.54188538 57.72061157]
[89.69855499 70.30905151]
[109.52725983 70.05165100]
[125.56266022 81.71824646]
[139.49337769 76.15631104]
[153.42410278 70.59436798]
[167.35481262 65.03243256]
[181.28552246 59.47049713]
[195.21624756 53.90855789]
[208.90687561 47.77938461]
[222.33432007 41.09331131]
[235.76176453 34.40723419]
[234.02885437 19.34825706]
[237.55393982 4.60547638]
[245.91136169 -8.04084396]
[258.09188843 -17.06360054]
[272.62472534 -21.37324905]
[287.75488281 -20.44938087]
[301.65539551 -14.40355682]
[312.64764404 -3.96583962]
[319.40432739 9.60336590]
[321.10946655 24.66551208]
[317.55722046 39.40177155]
[309.17651367 52.03266907]
[296.97937012 61.03296280]
[282.43862915 65.31581879]
[267.31018066 64.36407471]
[253.42085266 58.29264069]
[242.44784546 47.83468246]
[229.02040100 54.52075958]
[215.59294128 61.20683289]
[214.58743286 63.88638306]
[212.42695618 66.31569672]
[209.20631409 68.04029846]
[205.18745422 68.65044403]
[200.77818298 67.83927917]
[186.84745789 73.40121460]
[172.91674805 78.96315002]
[158.98603821 84.52508545]
[145.05531311 90.08702087]
[131.12460327 95.64896393]
[132.03089905 102.62288666]
[131.35939026 109.77974701]
[129.07537842 116.75959015]
[125.22683716 123.19668579]
[119.94506836 128.73851013]
[113.44107056 133.06484985]
[105.99743652 135.90580750]
[97.95629120 137.05778503]
[97.95629120 152.05778503]
[97.95629120 167.05778503]
[97.95629120 182.05778503]
[97.95629120 197.05778503]
[97.95629120 212.05778503]
[97.95629120 227.05778503]
[97.95629120 242.05778503]
[97.95629120 257.05780029]
[97.95629120 272.05780029]
[112.56630707 275.79922485]
[125.78646088 283.05718994]
[136.78573608 293.37548828]
[144.87271118 306.10543823]
[149.53901672 320.44686890]
[150.49133301 335.49822998]
[147.66978455 350.31341553]
[141.25177002 363.96112061]
[131.64068604 375.58343506]
[119.44073486 384.44976807]
[105.41879272 390.00277710]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 38]
[23 37]
[24 36]
[25 35]
[40 85]
[41 84]
[42 83]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
[87 124]
[88 123]
[89 122]
[90 121]
[91 120]
[92 119]
[93 114]
[94 113]
[95 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
