%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCAACUAACAGGGGGGGGGGCAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUACAACCCxxxxxxxxxxACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCCCCCCCCCCCACCCAACUAAAA\
) } def
/len { sequence length } bind def

/coor [
[-25.73838234 345.72833252]
[-38.26952362 338.90182495]
[-50.43112564 331.43685913]
[-62.19068909 323.35336304]
[-73.51679230 314.67294312]
[-84.37915039 305.41879272]
[-94.74874878 295.61563110]
[-104.59786224 285.28967285]
[-113.90016937 274.46850586]
[-122.63081360 263.18109131]
[-130.76646423 251.45753479]
[-138.28536987 239.32920837]
[-145.16744995 226.82850647]
[-158.67265320 233.35607910]
[-167.73056030 246.32777405]
[-182.55657959 244.90005493]
[-196.06179810 251.42762756]
[-209.56701660 257.95520020]
[-223.07223511 264.48275757]
[-236.57745361 271.01031494]
[-250.08267212 277.53787231]
[-263.58789062 284.06546021]
[-277.09310913 290.59301758]
[-278.85269165 305.91970825]
[-288.63687134 317.84756470]
[-303.32351685 322.57043457]
[-318.22622681 318.58126831]
[-328.58953857 307.15301514]
[-331.10659790 291.93237305]
[-324.97421265 277.77618408]
[-312.14920044 269.20166016]
[-296.72396851 268.94488525]
[-283.62066650 277.08779907]
[-270.11544800 270.56024170]
[-256.61022949 264.03265381]
[-243.10502625 257.50509644]
[-229.59980774 250.97753906]
[-216.09458923 244.44996643]
[-202.58937073 237.92240906]
[-189.08415222 231.39483643]
[-180.99223328 218.89002991]
[-165.20022583 219.85086060]
[-151.69500732 213.32330322]
[-157.83427429 198.55979919]
[-163.10841370 183.46560669]
[-167.49975586 168.09133911]
[-170.99353027 152.48861694]
[-173.57803345 136.70977783]
[-175.24458313 120.80776978]
[-175.98760986 104.83593750]
[-175.80459595 88.84788513]
[-174.69616699 72.89724731]
[-172.66604614 57.03754807]
[-169.72103882 41.32200241]
[-165.87103271 25.80334091]
[-161.12892151 10.53363514]
[-155.51065063 -4.43588161]
[-149.03504944 -19.05498123]
[-141.72386169 -33.27461243]
[-133.60160828 -47.04706192]
[-124.69553375 -60.32611847]
[-115.03553772 -73.06723022]
[-104.65402222 -85.22763824]
[-93.58582306 -96.76654816]
[-81.86808014 -107.64524078]
[-69.54011536 -117.82721710]
[-56.64328003 -127.27831268]
[-43.22085571 -135.96681213]
[-29.31787682 -143.86355591]
[-14.98099422 -150.94206238]
[-0.25831228 -157.17857361]
[14.80076981 -162.55216980]
[30.14572525 -167.04479980]
[45.72506332 -170.64141846]
[61.48651123 -173.32994080]
[77.37718964 -175.10134888]
[93.34377289 -175.94970703]
[109.33268738 -175.87216187]
[125.29028320 -174.86897278]
[141.16302490 -172.94349670]
[156.89765930 -170.10220337]
[172.44137573 -166.35464478]
[187.74203491 -161.71336365]
[202.74827576 -156.19393921]
[217.40977478 -149.81491089]
[231.67732239 -142.59767151]
[245.50303650 -134.56643677]
[258.84054565 -125.74814606]
[267.80239868 -137.77667236]
[276.76422119 -149.80520630]
[285.72607422 -161.83372498]
[294.68789673 -173.86225891]
[296.05932617 -190.20396423]
[311.01055908 -196.94136047]
[324.16107178 -187.14358521]
[321.98272705 -170.88977051]
[306.71643066 -164.90042114]
[297.75457764 -152.87188721]
[288.79275513 -140.84336853]
[279.83093262 -128.81483459]
[270.86907959 -116.78630829]
[281.84420776 -107.66616058]
[292.33331299 -97.99100494]
[302.30844116 -87.78670502]
[311.74282837 -77.08053589]
[320.61135864 -65.90110016]
[328.89028931 -54.27828217]
[336.55746460 -42.24314499]
[343.59243774 -29.82785225]
[349.97637939 -17.06558609]
[355.69226074 -3.99045062]
[360.72479248 9.36260605]
[365.06048584 22.95789909]
[368.68780518 36.75909042]
[371.59701538 50.72930145]
[373.78039551 64.83119202]
[375.23205566 79.02706909]
[375.94815063 93.27899933]
[375.92672729 107.54889679]
[375.16787720 121.79861450]
[373.67364502 135.99008179]
[371.44796753 150.08535767]
[368.49685669 164.04676819]
[364.82815552 177.83702087]
[360.45166016 191.41923523]
[355.37911987 204.75714111]
[349.62402344 217.81506348]
[343.20181274 230.55812073]
[336.12963867 242.95225525]
[328.42636108 254.96432495]
[320.11260986 266.56225586]
[311.21060181 277.71502686]
[301.74411011 288.39285278]
[291.73843384 298.56716919]
[281.22030640 308.21081543]
[270.21789551 317.29800415]
[258.76052856 325.80441284]
[246.87889099 333.70736694]
[234.60469055 340.98574829]
[221.97074890 347.62002563]
[209.01083374 353.59255981]
[195.75958252 358.88732910]
[182.25241089 363.49020386]
[168.52540588 367.38888550]
[154.61526489 370.57293701]
[140.55915833 373.03387451]
[126.39464569 374.76510620]
[112.15960693 375.76202393]
[97.89205933 376.02191162]
[83.63014984 375.54415894]
[69.41198730 374.32995605]
[55.27558136 372.38259888]
[41.25869751 369.70727539]
[27.39880753 366.31112671]
[13.73294830 362.20324707]
[0.29764426 357.39462280]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 43]
[14 42]
[16 40]
[17 39]
[18 38]
[19 37]
[20 36]
[21 35]
[22 34]
[23 33]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
