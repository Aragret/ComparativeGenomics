%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUCCGCCAUCGGGGGGGGGGCCAUACAUUGGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCUACUCAGUxxxxxxxxxxACUCUCCUCGCUCCGGGCCCAUAACACUUGGGGGUAGCUAAAGUGAACUGCCCCCCCCCCUAUCCGACAUC\
) } def
/len { sequence length } bind def

/coor [
[103.89553833 396.68988037]
[89.87359619 391.13687134]
[77.67363739 382.27053833]
[68.06256866 370.64822388]
[61.64454269 357.00051880]
[58.82300568 342.18533325]
[59.77532196 327.13397217]
[64.44162750 312.79254150]
[72.52859497 300.06259155]
[83.52787018 289.74432373]
[96.74802399 282.48632812]
[111.35803986 278.74490356]
[111.35803986 263.74490356]
[111.35803986 248.74490356]
[111.35803986 233.74490356]
[111.35803986 218.74490356]
[111.35803986 203.74490356]
[111.35803986 188.74490356]
[111.35803986 173.74490356]
[111.35803986 158.74490356]
[111.35803986 143.74490356]
[111.35803986 128.74490356]
[105.81547546 123.69218445]
[98.62409210 136.85592651]
[92.86434174 150.70602417]
[78.22180176 153.96116638]
[67.13658905 143.85581970]
[69.02656555 128.97535706]
[82.28629303 121.96205139]
[94.73033905 113.58674622]
[89.18777466 108.53403473]
[74.25176239 109.91806030]
[59.31574631 111.30207825]
[48.00173950 122.67630005]
[32.07124710 120.77920532]
[23.74478149 107.06608582]
[29.40969467 92.05648041]
[44.72034836 87.26446533]
[57.93172073 96.36606598]
[72.86773682 94.98204041]
[87.80374908 93.59801483]
[99.86618042 84.68186951]
[105.57083893 70.80899048]
[111.27550507 56.93610764]
[116.98017120 43.06322479]
[122.68482971 29.19034576]
[128.38949585 15.31746483]
[126.48194122 -0.38832453]
[138.47816467 -9.21667290]
[130.03311157 -17.00789642]
[124.71730042 -27.45515823]
[123.33663940 -39.32888794]
[126.22279358 -51.16772842]
[133.17222595 -61.45839310]
[143.45230103 -68.82890320]
[155.87615967 -72.23060608]
[153.72758484 -87.07592773]
[151.57901001 -101.92125702]
[149.43043518 -116.76657867]
[147.28184509 -131.61189270]
[145.13327026 -146.45722961]
[130.13800049 -148.06735229]
[116.01454163 -153.35685730]
[103.65071106 -161.99320984]
[93.82371521 -173.43353271]
[87.15128326 -186.95867920]
[84.05284882 -201.71842957]
[84.72318268 -216.78500366]
[89.12014771 -231.21127319]
[96.96735382 -244.09042358]
[107.77149963 -254.61282349]
[120.85344696 -262.11706543]
[135.39085388 -266.13137817]
[150.46986389 -266.40347290]
[165.14262390 -262.91619873]
[178.48678589 -255.88880920]
[189.66351318 -245.76303101]
[197.97023010 -233.17536926]
[202.88478088 -218.91709900]
[204.09822083 -203.88452148]
[201.53427124 -189.02259827]
[195.35412598 -175.26553345]
[185.94624329 -163.47814941]
[173.90203857 -154.40136719]
[159.97859192 -148.60580444]
[162.12716675 -133.76048279]
[164.27575684 -118.91515350]
[166.42433167 -104.06983185]
[168.57290649 -89.22451019]
[170.72149658 -74.37918854]
[183.78817749 -67.01294708]
[197.60176086 -72.85973358]
[211.41534424 -78.70652771]
[225.16818237 -84.69482422]
[238.85881042 -90.82399750]
[241.98408508 -95.15848541]
[246.06507874 -97.57739258]
[250.19487000 -98.04047394]
[253.58612061 -96.88001251]
[267.62808228 -102.15474701]
[281.67007446 -107.42948914]
[295.71203613 -112.70423126]
[300.73828125 -127.51203918]
[314.13360596 -135.58042908]
[329.57318115 -133.09977722]
[339.76690674 -121.24134827]
[339.90158081 -105.60434723]
[329.91366577 -93.57207489]
[314.51913452 -90.82581329]
[300.98678589 -98.66225433]
[286.94482422 -93.38751221]
[272.90283203 -88.11277771]
[258.86087036 -82.83803558]
[244.98797607 -77.13336945]
[231.29734802 -71.00419617]
[226.44757080 -65.36576843]
[217.26214600 -64.89294434]
[203.44856262 -59.04615402]
[189.63497925 -53.19936371]
[193.01924133 -33.47604752]
[185.66088867 -15.55032635]
[170.42501831 -4.63399744]
[152.35105896 -3.51200986]
[154.66664124 11.20149803]
[142.26237488 21.02212715]
[136.55770874 34.89500809]
[130.85304260 48.76789093]
[125.14838409 62.64076996]
[119.44372559 76.51364899]
[113.73905945 90.38652802]
[126.35803986 128.74490356]
[126.35803986 143.74490356]
[126.35803986 158.74490356]
[126.35803986 173.74490356]
[126.35803986 188.74490356]
[126.35803986 203.74490356]
[126.35803986 218.74490356]
[126.35803986 233.74490356]
[126.35803986 248.74490356]
[126.35803986 263.74490356]
[126.35803986 278.74490356]
[140.96804810 282.48632812]
[154.18821716 289.74432373]
[165.18748474 300.06259155]
[173.27445984 312.79254150]
[177.94076538 327.13397217]
[178.89308167 342.18533325]
[176.07153320 357.00051880]
[169.65351868 370.64822388]
[160.04243469 382.27053833]
[147.84248352 391.13687134]
[133.82054138 396.68988037]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[31 41]
[32 40]
[33 39]
[42 130]
[43 129]
[44 128]
[45 127]
[46 126]
[47 125]
[49 123]
[56 90]
[57 89]
[58 88]
[59 87]
[60 86]
[61 85]
[91 119]
[92 118]
[93 117]
[94 115]
[95 114]
[99 113]
[100 112]
[101 111]
[102 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
