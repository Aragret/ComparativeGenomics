%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUCAAUUGGGGGGGGGGGAUCCAAUAACUUGACCAACGGAACAAGUUACCCUAGGGAUAACAGCGCAxxxxxxxxxxAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCAGUAAGUUGCACCCCCCCCCCAUACUUAAUU\
) } def
/len { sequence length } bind def

/coor [
[84.15660095 433.94128418]
[69.66690826 429.73281860]
[56.76068115 421.91671753]
[46.31788254 411.02587891]
[39.05051804 397.80285645]
[35.45409012 383.14926147]
[35.77381134 368.06414795]
[39.98788452 353.57608032]
[47.80897903 340.67288208]
[58.70384979 330.23428345]
[71.92965698 322.97204590]
[86.58464813 319.38125610]
[86.89670563 304.38452148]
[87.20876312 289.38775635]
[87.52082062 274.39099121]
[87.83287048 259.39425659]
[88.14492798 244.39749146]
[88.45698547 229.40074158]
[88.76904297 214.40399170]
[89.08110046 199.40722656]
[89.39315796 184.41047668]
[79.23619080 176.42092896]
[75.49900055 163.84684753]
[79.76837158 151.23730469]
[90.69112396 143.29054260]
[91.31510162 128.30352783]
[91.93907928 113.31650543]
[81.95635223 102.12074280]
[66.99610138 101.02943420]
[52.03585052 99.93811798]
[37.07560349 98.84680939]
[22.11535454 97.75550079]
[7.15510607 96.66419220]
[-7.80514288 95.57287598]
[-24.14995575 103.98875427]
[-38.29472733 93.64827728]
[-53.27444077 92.86843872]
[-69.40650177 98.08312988]
[-78.88319397 84.02508545]
[-67.99796295 71.02708435]
[-52.49459457 77.88871765]
[-37.51488113 78.66856384]
[-28.28316498 70.78930664]
[-15.75731850 71.35686493]
[-6.71383238 80.61263275]
[8.24641609 81.70394135]
[23.20666504 82.79524994]
[38.16691208 83.88655853]
[53.12716293 84.97787476]
[68.08740997 86.06918335]
[83.04766083 87.16049194]
[89.62906647 86.45581818]
[95.18083954 88.08606720]
[99.00569153 91.41273499]
[107.25798035 78.88677216]
[114.84789276 65.94871521]
[121.75489044 52.63356018]
[128.66189575 39.31840515]
[135.56889343 26.00325012]
[135.05517578 10.19038582]
[147.78388977 2.45544648]
[140.01222229 -12.53299332]
[142.65571594 -29.04037094]
[154.48233032 -40.62039948]
[170.71331787 -42.86996078]
[177.34181213 -56.32592773]
[178.34069824 -65.47218323]
[184.25073242 -69.99070740]
[191.15773010 -83.30587006]
[179.84928894 -93.26602173]
[171.25854492 -105.63580322]
[165.88133240 -119.69370270]
[164.02613831 -134.62101746]
[165.79649353 -149.54948425]
[171.08518982 -163.61186218]
[179.58074951 -175.99224854]
[190.78573608 -185.97343445]
[204.04592896 -192.97850037]
[218.58853149 -196.60406494]
[233.56712341 -196.64360046]
[248.11103821 -193.09915161]
[255.01803589 -206.41430664]
[261.92504883 -219.72946167]
[268.83203125 -233.04461670]
[275.73904419 -246.35978699]
[277.66522217 -263.20394897]
[294.38433838 -266.01596069]
[301.71478271 -250.72868347]
[289.05419922 -239.45277405]
[282.14718628 -226.13761902]
[275.24020386 -212.82246399]
[268.33319092 -199.50730896]
[261.42620850 -186.19215393]
[272.70019531 -176.34403992]
[281.29464722 -164.07638550]
[286.70645142 -150.09982300]
[288.61697388 -135.22523499]
[286.91085815 -120.31667328]
[281.68292236 -106.24126434]
[273.23303223 -93.81869507]
[262.04876709 -83.77352142]
[248.77734375 -76.69287872]
[234.18817139 -72.99218750]
[219.12821960 -72.89076996]
[204.47288513 -76.39886475]
[197.56588745 -63.08371353]
[190.79777527 -49.69742584]
[184.16928101 -36.24146271]
[191.47323608 -25.02325058]
[192.27026367 -11.55193996]
[186.24403381 0.64375728]
[174.87960815 8.31597519]
[161.09904480 9.36244488]
[162.10678101 24.22291946]
[148.88404846 32.91024780]
[141.97705078 46.22540283]
[135.07005310 59.54055786]
[128.16304016 72.85571289]
[143.07708740 71.25217438]
[153.78001404 81.76157379]
[152.44885254 96.70239258]
[140.05656433 105.15409851]
[125.66092682 100.93917847]
[119.78394318 87.13906097]
[111.53165436 99.66502380]
[106.92609406 113.94048309]
[106.30211639 128.92750549]
[105.67813873 143.91452026]
[117.74806213 156.53411865]
[117.00388336 173.64347839]
[104.38990784 184.72253418]
[104.07785034 199.71928406]
[103.76579285 214.71604919]
[103.45374298 229.71279907]
[103.14168549 244.70954895]
[102.82962799 259.70629883]
[102.51757050 274.70306396]
[102.20551300 289.69979858]
[101.89345551 304.69656372]
[101.58140564 319.69332886]
[116.07434082 323.89059448]
[128.98660278 331.69674683]
[139.43780518 342.57952881]
[146.71537781 355.79690552]
[150.32312012 370.44772339]
[150.01504517 385.53308105]
[145.81216431 400.02438354]
[138.00103760 412.93362427]
[127.11423492 423.38064575]
[113.89403534 430.65310669]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[25 128]
[26 127]
[27 126]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[36 42]
[37 41]
[54 125]
[55 124]
[56 118]
[57 117]
[58 116]
[59 115]
[61 113]
[65 108]
[66 107]
[68 106]
[69 105]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
