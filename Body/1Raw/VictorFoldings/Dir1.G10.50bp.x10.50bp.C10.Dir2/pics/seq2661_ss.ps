%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACACAGGCGGGGGGGGGGAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAAAGGAACUCGGCAAAUCUUAxxxxxxxxxxUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACAUCAGAUUGUGAAUCUGACCCCCCCCCCCAACAGAGGC\
) } def
/len { sequence length } bind def

/coor [
[95.98680878 383.25305176]
[82.14086914 377.23703003]
[70.43221283 367.70761108]
[61.72968674 355.37194824]
[56.67908478 341.14541626]
[55.65519333 326.08374023]
[58.73398972 311.30459595]
[65.68701172 297.90466309]
[75.99829865 286.87832642]
[88.90267944 279.04382324]
[103.44256592 274.98251343]
[103.44256592 259.98251343]
[103.44256592 244.98249817]
[103.44256592 229.98249817]
[103.44256592 214.98249817]
[103.44256592 199.98249817]
[103.44256592 184.98249817]
[103.44256592 169.98249817]
[103.44256592 154.98249817]
[103.44256592 139.98249817]
[84.67914581 134.23126221]
[72.09349060 120.91873169]
[62.73046112 133.67193604]
[47.94247437 131.89297485]
[34.28623581 138.09837341]
[25.19390106 151.74613953]
[8.84797955 150.42594910]
[2.06375408 135.49591064]
[11.82025337 122.31475830]
[28.08082771 124.44213867]
[41.73706818 118.23673248]
[50.12331009 105.92737579]
[65.88808441 107.26248932]
[66.26037598 91.16796875]
[73.82160950 76.95529175]
[86.96069336 67.65277100]
[84.47557068 52.86006546]
[81.99045563 38.06735611]
[79.50533295 23.27464867]
[77.02021790 8.48194218]
[74.53509521 -6.31076479]
[72.04998016 -21.10347176]
[68.34381866 -35.63840866]
[56.52178192 -46.15268707]
[59.67544174 -60.70959854]
[54.77389145 -74.88615417]
[49.87234116 -89.06271362]
[46.36961365 -91.87205505]
[44.20114136 -95.31716156]
[43.40147018 -98.88681793]
[43.83100128 -102.11318970]
[45.20637894 -104.62628937]
[41.50021744 -119.16122437]
[37.79405594 -133.69616699]
[34.08789444 -148.23109436]
[30.38173294 -162.76603699]
[15.32192898 -162.37870789]
[0.55361986 -165.35272217]
[-13.18242168 -171.53890991]
[-25.19720078 -180.62696838]
[-34.88806152 -192.16105652]
[-41.76891708 -205.56260681]
[-45.49462128 -220.15940857]
[-45.87829590 -235.21931458]
[-42.90069962 -249.98689270]
[-36.71118546 -263.72143555]
[-27.62021637 -275.73400879]
[-16.08378983 -285.42208862]
[-2.68057156 -292.29968262]
[11.91714096 -296.02185059]
[26.97713089 -296.40188599]
[41.74399948 -293.42071533]
[55.47703934 -287.22787476]
[67.48741150 -278.13397217]
[77.17268372 -266.59521484]
[84.04704285 -253.19032288]
[87.76567078 -238.59172058]
[88.14205170 -223.53163147]
[85.15730286 -208.76548767]
[78.96112823 -195.03395081]
[69.86434174 -183.02577209]
[58.32321930 -173.34330750]
[44.91667175 -166.47219849]
[48.62282944 -151.93725586]
[52.32899094 -137.40232849]
[56.03515244 -122.86738586]
[59.74131393 -108.33245087]
[64.04889679 -93.96426392]
[68.95044708 -79.78770447]
[73.85199738 -65.61115265]
[85.32344818 -56.11087418]
[82.52037811 -40.53995895]
[88.65695953 -54.22726440]
[101.58612823 -61.83230591]
[116.53079987 -60.54517746]
[127.96922302 -50.84144211]
[131.67512512 -36.30643845]
[126.27925873 -22.31056404]
[113.77526855 -14.02501202]
[98.78314972 -14.51113033]
[86.84268188 -23.58859062]
[89.32780457 -8.79588318]
[91.81291962 5.99682379]
[94.29804230 20.78953171]
[96.78315735 35.58223724]
[99.26828003 50.37494659]
[101.75339508 65.16765594]
[111.60511017 66.31608582]
[120.93754578 70.25192261]
[128.96279907 76.76950073]
[134.96907043 85.44106293]
[138.38287354 95.64366913]
[138.82225037 106.60354614]
[136.13565063 117.45469666]
[150.15235901 122.79621124]
[164.16908264 128.13772583]
[178.18579102 133.47923279]
[192.20249939 138.82075500]
[206.21922302 144.16226196]
[220.23593140 149.50376892]
[237.18988037 149.49411011]
[241.89247131 165.78282166]
[227.54214478 174.81080627]
[214.89440918 163.52049255]
[200.87770081 158.17897034]
[186.86099243 152.83746338]
[172.84428406 147.49595642]
[158.82756042 142.15443420]
[144.81085205 136.81292725]
[130.79414368 131.47140503]
[118.44256592 139.98249817]
[118.44256592 154.98249817]
[118.44256592 169.98249817]
[118.44256592 184.98249817]
[118.44256592 199.98249817]
[118.44256592 214.98249817]
[118.44256592 229.98249817]
[118.44256592 244.98249817]
[118.44256592 259.98251343]
[118.44256592 274.98251343]
[132.98245239 279.04382324]
[145.88684082 286.87832642]
[156.19812012 297.90466309]
[163.15113831 311.30459595]
[166.22993469 326.08374023]
[165.20603943 341.14541626]
[160.15544128 355.37194824]
[151.45292664 367.70761108]
[139.74426270 377.23703003]
[125.89832306 383.25305176]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 33]
[24 31]
[25 30]
[36 107]
[37 106]
[38 105]
[39 104]
[40 103]
[41 102]
[42 101]
[43 92]
[45 90]
[46 89]
[47 88]
[52 87]
[53 86]
[54 85]
[55 84]
[56 83]
[114 130]
[115 129]
[116 128]
[117 127]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
