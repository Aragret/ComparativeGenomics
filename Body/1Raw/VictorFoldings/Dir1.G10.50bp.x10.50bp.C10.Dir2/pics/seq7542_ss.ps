%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAGUCCUGGGGGGGGGGGUAUGCCCUUUUCCUAACACUCACAACAAAACUAACUAAUACUAACAUCUxxxxxxxxxxCCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAACCCCCCCCCCUCCUAAUCCU\
) } def
/len { sequence length } bind def

/coor [
[113.21081543 437.00781250]
[98.72112274 432.79931641]
[85.81489563 424.98321533]
[75.37209320 414.09237671]
[68.10472870 400.86938477]
[64.50830078 386.21575928]
[64.82802582 371.13067627]
[69.04209137 356.64260864]
[76.86318970 343.73941040]
[87.75805664 333.30081177]
[100.98387146 326.03854370]
[115.63886261 322.44778442]
[115.95092010 307.45101929]
[116.26296997 292.45425415]
[116.57502747 277.45751953]
[116.88708496 262.46075439]
[117.19914246 247.46400452]
[117.51119995 232.46725464]
[117.82325745 217.47050476]
[118.13530731 202.47373962]
[118.44736481 187.47698975]
[118.75942230 172.48023987]
[115.96710205 157.74243164]
[110.19082642 143.89921570]
[104.41455078 130.05599976]
[98.63828278 116.21278381]
[85.05083466 106.42113495]
[87.30408478 89.82540894]
[81.24107361 76.10536194]
[75.17805481 62.38530350]
[62.52293777 52.89012146]
[64.45564270 38.12144089]
[58.39262772 24.40138817]
[52.32961655 10.68133450]
[38.06991959 15.37472439]
[23.41885376 18.64780235]
[8.51751614 20.46904564]
[-6.49058104 20.82091331]
[-21.46089745 19.70001793]
[-36.24925995 17.11715317]
[-50.71323776 13.09719372]
[-64.71353912 7.67885733]
[-78.11532593 0.91432524]
[-90.78952789 -7.13125467]
[-102.61408997 -16.38039589]
[-113.47512054 -26.74402428]
[-123.26802826 -38.12232971]
[-131.89848328 -50.40572357]
[-139.28340149 -63.47591782]
[-145.35162354 -77.20703125]
[-150.04473877 -91.46681976]
[-153.31752014 -106.11795044]
[-155.13845825 -121.01932526]
[-155.49003601 -136.02742004]
[-154.36883545 -150.99772644]
[-151.78567505 -165.78602600]
[-147.76542664 -180.24992371]
[-142.34680176 -194.25012207]
[-135.58201599 -207.65177917]
[-127.53617859 -220.32582092]
[-118.28679657 -232.15019226]
[-107.92295074 -243.01101685]
[-96.54444885 -252.80369568]
[-84.26087952 -261.43389893]
[-71.19054413 -268.81857300]
[-57.45931244 -274.88650513]
[-43.19942856 -279.57934570]
[-28.54823112 -282.85183716]
[-13.64682102 -284.67248535]
[1.36129057 -285.02374268]
[16.33156204 -283.90225220]
[31.11981964 -281.31878662]
[45.58363724 -277.29824829]
[59.58372116 -271.87936401]
[72.98523712 -265.11428833]
[85.65911865 -257.06820679]
[97.48330688 -247.81858826]
[108.34392548 -237.45452881]
[118.13637543 -226.07582092]
[126.76634979 -213.79208374]
[134.15074158 -200.72160339]
[140.21841431 -186.99024963]
[144.91094971 -172.73027039]
[148.18315125 -158.07901001]
[150.00349426 -143.17755127]
[150.35446167 -128.16943359]
[149.23266602 -113.19918823]
[146.64892578 -98.41098785]
[142.62809753 -83.94724274]
[137.20892334 -69.94727325]
[130.44357300 -56.54588699]
[122.39723969 -43.87216568]
[113.14739227 -32.04816437]
[102.78311157 -21.18775558]
[91.40422058 -11.39553165]
[79.12030029 -2.76580286]
[66.04966736 4.61832094]
[72.11267853 18.33837509]
[78.17569733 32.05842972]
[90.39714813 40.57226181]
[88.89810944 56.32229233]
[94.96112061 70.04234314]
[101.02413940 83.76239777]
[111.64547729 88.63816071]
[116.25791168 99.37646484]
[112.48149872 110.43650818]
[118.25777435 124.27972412]
[124.03404236 138.12294006]
[129.81031799 151.96615601]
[132.07527161 137.13815308]
[138.35354614 123.51525879]
[148.15521240 112.16062927]
[160.71530151 103.96039581]
[175.05364990 99.55450439]
[190.05126953 99.28679657]
[204.53771973 103.17816925]
[217.38247681 110.92492676]
[227.58311462 121.92250824]
[234.34358215 135.31265259]
[237.13627625 150.05039978]
[235.74325562 164.98556519]
[230.27323914 178.95263672]
[221.15310669 190.86158752]
[209.09458923 199.78303528]
[195.03875732 205.02075195]
[180.08253479 206.16596985]
[165.39312744 203.12931824]
[152.11689758 196.14779663]
[141.28994751 185.76622009]
[133.75617981 172.79229736]
[133.44412231 187.78904724]
[133.13206482 202.78579712]
[132.82000732 217.78256226]
[132.50794983 232.77931213]
[132.19589233 247.77606201]
[131.88383484 262.77282715]
[131.57177734 277.76956177]
[131.25971985 292.76632690]
[130.94767761 307.76309204]
[130.63562012 322.75982666]
[145.12855530 326.95712280]
[158.04081726 334.76327515]
[168.49201965 345.64602661]
[175.76959229 358.86343384]
[179.37733459 373.51425171]
[179.06925964 388.59957886]
[174.86637878 403.09091187]
[167.05525208 416.00015259]
[156.16844177 426.44714355]
[142.94825745 433.71963501]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 109]
[24 108]
[25 107]
[26 106]
[28 103]
[29 102]
[30 101]
[32 99]
[33 98]
[34 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
