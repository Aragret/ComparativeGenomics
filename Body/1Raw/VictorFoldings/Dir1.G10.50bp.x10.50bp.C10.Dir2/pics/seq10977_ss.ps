%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCUGCACAUCGGGGGGGGGGUGUACCCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUxxxxxxxxxxUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCUCCCCCCCCCCCUUCCUACACAUC\
) } def
/len { sequence length } bind def

/coor [
[50.66564560 412.40478516]
[36.96349335 406.14392090]
[24.99837875 396.99057007]
[15.37046528 385.40390015]
[8.56268692 371.96505737]
[4.91651917 357.34817505]
[4.61485147 342.28640747]
[7.67281532 327.53527832]
[13.93702507 313.83462524]
[23.09327126 301.87173462]
[34.68227768 292.24664307]
[48.12274551 285.44210815]
[62.74050903 281.79946899]
[62.43650818 266.80255127]
[62.13250351 251.80564880]
[61.82849884 236.80871582]
[61.52449417 221.81179810]
[61.22048950 206.81488037]
[60.91648483 191.81796265]
[60.61248016 176.82104492]
[60.30847549 161.82412720]
[60.00447083 146.82720947]
[47.19505310 139.02215576]
[33.72798538 145.62806702]
[20.26091766 152.23397827]
[11.57550812 166.14425659]
[-4.80226564 165.30726624]
[-12.02435398 150.58403015]
[-2.66129160 137.12055969]
[13.65500641 138.76692200]
[27.12207413 132.16099548]
[40.58914185 125.55509186]
[40.96900940 118.06472015]
[25.98350334 117.40549469]
[10.99799633 116.74626923]
[-3.98751068 116.08704376]
[-18.94993782 115.02600861]
[-18.19027710 100.04525757]
[-3.19719315 100.50331879]
[11.77812099 101.36353302]
[26.75343513 102.22374725]
[41.72874832 103.08396912]
[42.10861588 95.59359741]
[29.37895393 87.65913391]
[16.64929008 79.72467804]
[3.83987141 71.91962433]
[-9.04798508 64.24478912]
[-21.93584251 56.56994629]
[-34.82369995 48.89510727]
[-50.66555023 51.42794800]
[-62.42550278 40.51542664]
[-61.08232880 24.52870178]
[-47.66639328 15.73141575]
[-32.46925354 20.87209511]
[-27.14885902 36.00725174]
[-14.26100254 43.68209076]
[-1.37314618 51.35692978]
[11.51471043 59.03176880]
[18.91435242 59.75628662]
[24.58374977 66.99501038]
[37.31341171 74.92947388]
[50.04307556 82.86392975]
[70.37252045 52.26522446]
[107.68414307 40.94842148]
[107.07626343 25.96074486]
[106.46837616 10.97306633]
[91.81083679 7.32159472]
[78.77646637 -0.31266367]
[68.42190552 -11.31083298]
[61.58655167 -24.78133965]
[58.82450867 -39.63219070]
[60.35969162 -54.65949631]
[66.06764984 -68.64505768]
[75.48565674 -80.45513153]
[87.85024261 -89.13232422]
[102.15907288 -93.97321320]
[117.25218201 -94.58537292]
[131.90603638 -90.91917419]
[144.93273926 -83.27182770]
[155.27624512 -72.26325989]
[162.09806824 -58.78589249]
[164.84518433 -43.93227386]
[163.29490662 -28.90651894]
[157.57290649 -14.92669868]
[148.14303589 -3.12609506]
[135.76972961 5.53867006]
[121.45605469 10.36518288]
[122.06394196 25.35286140]
[122.67182159 40.34053802]
[129.19219971 44.04656982]
[135.84420776 30.60221100]
[142.49621582 17.15785217]
[146.95605469 2.83619642]
[161.90998840 1.66144764]
[168.55146790 15.11100674]
[158.52841187 26.27018166]
[150.38067627 38.86440659]
[142.23295593 51.45863724]
[148.75332642 55.16466904]
[161.94163513 48.01842117]
[175.12992859 40.87217712]
[188.31822205 33.72592926]
[199.36372375 20.86384583]
[214.78085327 27.91710663]
[212.27111816 44.68426514]
[195.46446228 46.91422653]
[182.27616882 54.06047058]
[169.08787537 61.20671844]
[155.89958191 68.35296631]
[157.11035156 75.75458527]
[171.14123535 81.05879211]
[159.53192139 90.55783081]
[160.74269104 97.95945740]
[175.52062988 100.53090668]
[190.32388306 102.95246124]
[205.15090942 105.22387695]
[219.97793579 107.49529266]
[233.70808411 99.19696045]
[248.70605469 104.89263153]
[253.46665955 120.21307373]
[244.33799744 133.40576172]
[228.32278442 134.35038757]
[217.70651245 122.32231903]
[202.87948608 120.05090332]
[188.05245972 117.77948761]
[180.92259216 119.88771057]
[172.94918823 115.30884552]
[158.17124939 112.73739624]
[145.08056641 136.27909851]
[123.47584534 151.04194641]
[98.31121826 154.47183228]
[75.00138855 146.52320862]
[75.30539703 161.52012634]
[75.60939789 176.51704407]
[75.91340637 191.51396179]
[76.21740723 206.51087952]
[76.52141571 221.50779724]
[76.82541656 236.50471497]
[77.12942505 251.50163269]
[77.43342590 266.49856567]
[77.73742676 281.49548340]
[92.49080658 284.54272461]
[106.19599152 290.79696655]
[118.16554260 299.94451904]
[127.79906464 311.52651978]
[134.61335754 324.96203613]
[138.26660156 339.57714844]
[138.57557678 354.63876343]
[135.52476501 369.39141846]
[129.26719666 383.09506226]
[120.11674500 395.06240845]
[108.53240204 404.69311523]
[95.09523010 411.50415039]
[80.47923279 415.15386963]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 32]
[24 31]
[25 30]
[43 62]
[44 61]
[45 60]
[46 58]
[47 57]
[48 56]
[49 55]
[64 89]
[65 88]
[66 87]
[99 109]
[100 108]
[101 107]
[102 106]
[113 128]
[114 127]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
