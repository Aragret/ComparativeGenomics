%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCACCCCAGGGGGGGGGGCUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUxxxxxxxxxxGCUAUUACCUAAAACAAUUUCACAGCACCAAAUCUCCACCUCCAUCAUCACCCCCCCCCCCCUCAACCCA\
) } def
/len { sequence length } bind def

/coor [
[74.82287598 373.86373901]
[61.60268021 366.59124756]
[50.71587372 356.14425659]
[42.90474319 343.23501587]
[38.70186234 328.74368286]
[38.39379120 313.65835571]
[42.00153351 299.00753784]
[49.27910614 285.79013062]
[59.73031235 274.90737915]
[72.64257812 267.10122681]
[87.13551331 262.90393066]
[86.82345581 247.90718079]
[86.51139832 232.91043091]
[86.19934082 217.91368103]
[85.88728333 202.91693115]
[85.57523346 187.92016602]
[85.26317596 172.92341614]
[84.95111847 157.92666626]
[84.63906097 142.92991638]
[72.65222931 133.91238403]
[58.15663147 137.76954651]
[43.66103363 141.62669373]
[32.31452179 152.65245056]
[18.02562714 148.44807434]
[3.53003001 152.30523682]
[-10.96556664 156.16238403]
[-25.46116257 160.01954651]
[-39.95676041 163.87670898]
[-47.66478729 177.67387390]
[-62.89380646 181.89910889]
[-76.60871124 174.04563904]
[-80.67269135 158.77279663]
[-72.67465210 145.14169312]
[-57.35970306 141.23941040]
[-43.81391907 149.38111877]
[-29.31832314 145.52395630]
[-14.82272625 141.66679382]
[-0.32712936 137.80963135]
[14.16846752 133.95246887]
[24.47816086 123.20261383]
[39.80387497 127.13110352]
[54.29947281 123.27394104]
[68.79506683 119.41678619]
[70.26780701 112.06280518]
[55.55989456 109.11709595]
[58.50583267 94.40922546]
[73.21329498 97.35484314]
[74.68603516 90.00086212]
[62.79365540 80.85913086]
[50.90127563 71.71739197]
[35.26488113 74.01494598]
[22.63370705 64.51605225]
[20.50160408 48.85623932]
[30.13351059 36.32619858]
[45.81498718 34.35977936]
[58.24249268 44.12362289]
[60.04301071 59.82501221]
[71.93538666 68.96675110]
[83.82776642 78.10848236]
[90.68779755 75.07697296]
[92.29706573 60.16355133]
[104.40785217 69.01396179]
[111.26787567 65.98245239]
[112.51474762 51.03437042]
[113.76162720 36.08628082]
[115.00849915 21.13819504]
[116.25537109 6.19010782]
[117.50225067 -8.75797939]
[103.54603577 -14.59573269]
[92.07817841 -24.46200943]
[84.22217560 -37.39021301]
[80.74768066 -52.11376572]
[81.99509430 -67.19020844]
[87.84220123 -81.14250946]
[97.71615601 -92.60375214]
[110.64962006 -100.45108795]
[125.37550354 -103.91571808]
[140.45111084 -102.65820312]
[154.39947510 -96.80175018]
[165.85411072 -86.92011261]
[173.69277954 -73.98139954]
[177.14753723 -59.25319672]
[175.87991333 -44.17844009]
[170.01412964 -30.23399162]
[160.12481689 -18.78599167]
[147.18084717 -10.95599365]
[132.45033264 -7.51110458]
[131.20346069 7.43698263]
[129.95658875 22.38506889]
[128.70971680 37.33315659]
[127.46283722 52.28124237]
[126.21596527 67.22933197]
[132.16215515 71.80019379]
[141.30407715 59.90797043]
[153.19616699 69.05009460]
[144.05453491 80.94193268]
[150.00071716 85.51280212]
[164.12551880 80.46404266]
[178.25032043 75.41528320]
[192.37513733 70.36653137]
[195.76060486 55.31521225]
[206.76203918 44.49985123]
[221.86891174 41.37158203]
[236.26066589 46.92863083]
[245.34495544 59.39775848]
[246.22302246 74.80010986]
[238.61466980 88.22086334]
[224.94769287 95.37748718]
[209.58317566 93.98634338]
[197.42388916 84.49133301]
[183.29908752 89.54009247]
[169.17428589 94.58884430]
[155.04948425 99.63760376]
[169.86566162 101.97869110]
[184.11039734 106.67840576]
[196.48388672 115.15760803]
[206.00801086 126.74600220]
[211.92990112 140.52755737]
[213.78143311 155.41285706]
[211.41624451 170.22520447]
[205.02130127 183.79373169]
[195.10211182 195.04582214]
[182.44279480 203.09204102]
[168.04405212 207.29634094]
[153.04408264 207.32635498]
[138.62861633 203.17971802]
[125.93720245 195.18421936]
[115.97307587 183.97190857]
[109.52388000 170.42907715]
[107.09949493 155.62913513]
[99.63581848 142.61785889]
[99.94786835 157.61460876]
[100.25992584 172.61135864]
[100.57198334 187.60812378]
[100.88404083 202.60487366]
[101.19609833 217.60162354]
[101.50815582 232.59837341]
[101.82020569 247.59513855]
[102.13226318 262.59188843]
[116.78725433 266.18264771]
[130.01306152 273.44491577]
[140.90792847 283.88351440]
[148.72903442 296.78671265]
[152.94309998 311.27478027]
[153.26281738 326.35989380]
[149.66639709 341.01348877]
[142.39903259 354.23648071]
[131.95623779 365.12731934]
[119.05000305 372.94345093]
[104.56031036 377.15191650]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 43]
[21 42]
[22 41]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[48 59]
[49 58]
[50 57]
[63 92]
[64 91]
[65 90]
[66 89]
[67 88]
[68 87]
[97 113]
[98 112]
[99 111]
[100 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
