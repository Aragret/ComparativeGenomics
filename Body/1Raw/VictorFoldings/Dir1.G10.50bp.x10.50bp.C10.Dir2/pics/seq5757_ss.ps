%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAAAUAAAAUGGGGGGGGGGGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCACACUCAUCGCCxxxxxxxxxxUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCAACAAACCCCCCCCCCCUUAAAAUAAAAU\
) } def
/len { sequence length } bind def

/coor [
[85.26871490 382.50006104]
[71.10811615 377.34506226]
[58.51836777 369.06283569]
[48.17842865 358.10006714]
[40.64591980 345.04794312]
[36.32705307 330.61035156]
[35.45474625 315.56588745]
[38.07603455 300.72589111]
[44.04956055 286.89065552]
[53.05318069 274.80630493]
[64.60133362 265.12454224]
[78.07125092 258.36746216]
[92.73651123 254.89947510]
[92.73651123 239.89947510]
[92.73651123 224.89947510]
[92.73651123 209.89947510]
[92.73651123 194.89947510]
[92.73651123 179.89947510]
[92.73651123 164.89947510]
[92.73651123 149.89947510]
[92.73651123 134.89947510]
[92.73651123 119.89947510]
[92.73651123 104.89947510]
[90.71197510 102.53427887]
[89.52564240 99.36354065]
[89.48353577 95.70480347]
[90.76676941 91.98625183]
[93.39366913 88.69702911]
[94.60843658 73.74629974]
[95.82320404 58.79557037]
[97.03797150 43.84484100]
[82.19063568 41.67408371]
[67.51287842 38.55650711]
[53.06503296 34.50492859]
[38.90645218 29.53599548]
[25.09532547 23.67012405]
[11.68840504 16.93141937]
[-1.25921810 9.34757233]
[-13.69433784 0.94974738]
[-25.56585693 -8.22754669]
[-36.82498932 -18.14659882]
[-47.42547226 -28.76664734]
[-57.32374191 -40.04405594]
[-66.47912598 -51.93247604]
[-74.85400391 -64.38306427]
[-82.41396332 -77.34465027]
[-89.12792969 -90.76397705]
[-94.96832275 -104.58589935]
[-99.91113281 -118.75361633]
[-103.93606567 -133.20890808]
[-107.02656555 -147.89239502]
[-109.16993713 -162.74369812]
[-110.35737610 -177.70182800]
[-110.58400726 -192.70530701]
[-109.84888458 -207.69248962]
[-108.15503693 -222.60176086]
[-105.50942993 -237.37187195]
[-101.92293549 -251.94215393]
[-97.41027832 -266.25268555]
[-91.99001312 -280.24468994]
[-85.68441010 -293.86068726]
[-78.51937866 -307.04467773]
[-70.52436829 -319.74255371]
[-61.73222351 -331.90206909]
[-52.17907715 -343.47326660]
[-41.90418625 -354.40866089]
[-30.94977379 -364.66323853]
[-19.36085129 -374.19488525]
[-7.18504286 -382.96444702]
[5.52761936 -390.93591309]
[18.72489548 -398.07647705]
[32.35255432 -404.35678101]
[46.35459900 -409.75109863]
[60.67348862 -414.23718262]
[75.25038147 -417.79666138]
[90.02539062 -420.41485596]
[104.93778229 -422.08102417]
[119.92629242 -422.78833008]
[134.92932129 -422.53387451]
[149.88522339 -421.31869507]
[164.73252869 -419.14776611]
[179.41024780 -416.03002930]
[193.85806274 -411.97830200]
[208.01658630 -407.00921631]
[221.82763672 -401.14318848]
[235.23449707 -394.40432739]
[248.18202209 -386.82034302]
[260.61706543 -378.42236328]
[272.48846436 -369.24493408]
[283.74749756 -359.32577515]
[294.34786987 -348.70559692]
[304.24600220 -337.42810059]
[313.40124512 -325.53955078]
[321.77600098 -313.08889771]
[329.33581543 -300.12722778]
[336.04962158 -286.70782471]
[341.88986206 -272.88583374]
[346.83251953 -258.71804810]
[350.85729980 -244.26271057]
[353.94763184 -229.57920837]
[356.09085083 -214.72785950]
[357.27810669 -199.76971436]
[357.50457764 -184.76623535]
[356.76928711 -169.77908325]
[355.07528687 -154.86981201]
[352.42950439 -140.09973145]
[348.84283447 -125.52950287]
[344.33004761 -111.21900940]
[338.90960693 -97.22705841]
[332.60385132 -83.61114502]
[325.43869019 -70.42721558]
[317.44354248 -57.72945404]
[308.65124512 -45.57003021]
[299.09796143 -33.99892044]
[288.82296753 -23.06366539]
[277.86843872 -12.80920124]
[266.27941895 -3.27766919]
[254.10350037 5.49176550]
[241.39074707 13.46306705]
[228.19340515 20.60347748]
[214.56567383 26.88365746]
[200.56356812 32.27780151]
[186.24462891 36.76373672]
[171.66769409 40.32304001]
[156.89265442 42.94107437]
[141.98023987 44.60709000]
[126.99172974 45.31423569]
[111.98870087 45.05960846]
[110.77393341 60.01034164]
[109.55916595 74.96106720]
[108.34439850 89.91180420]
[107.73651123 104.89947510]
[107.73651123 119.89947510]
[107.73651123 134.89947510]
[107.73651123 149.89947510]
[107.73651123 164.89947510]
[107.73651123 179.89947510]
[107.73651123 194.89947510]
[107.73651123 209.89947510]
[107.73651123 224.89947510]
[107.73651123 239.89947510]
[107.73651123 254.89947510]
[122.40177155 258.36746216]
[135.87168884 265.12454224]
[147.41984558 274.80630493]
[156.42346191 286.89065552]
[162.39698792 300.72589111]
[165.01828003 315.56588745]
[164.14596558 330.61035156]
[159.82710266 345.04794312]
[152.29460144 358.10006714]
[141.95466614 369.06283569]
[129.36491394 377.34506226]
[115.20430756 382.50006104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[28 131]
[29 130]
[30 129]
[31 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
