%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUCCCAAGGGGGGGGGGACAUAUAACUGAACUCCUCACACCCAAUUGGACCAAUCUAUCACCCUAUAxxxxxxxxxxCACCAUGAAUAUUGUACGGUACCAUAAAUACUUGACCACCUGUAGUACAUCCCCCCCCCCAAAAACCCAA\
) } def
/len { sequence length } bind def

/coor [
[43.24340820 434.40270996]
[29.39746857 428.38668823]
[17.68880653 418.85726929]
[8.98628330 406.52160645]
[3.93568110 392.29510498]
[2.91178989 377.23339844]
[5.99058867 362.45425415]
[12.94361019 349.05432129]
[23.25489426 338.02798462]
[36.15927505 330.19348145]
[50.69916153 326.13217163]
[50.69916153 311.13217163]
[50.69916153 296.13217163]
[50.69916153 281.13217163]
[50.69916153 266.13217163]
[50.69916153 251.13217163]
[50.69916153 236.13217163]
[50.69916153 221.13217163]
[50.69916153 206.13217163]
[50.69916153 191.13217163]
[50.69916153 176.13217163]
[42.82302094 188.89799500]
[32.43095779 199.71488953]
[19.99076271 208.09590149]
[6.06242752 213.66380310]
[-8.72707367 216.16793823]
[-23.71199799 215.49557495]
[-38.21780396 211.67700195]
[-51.59152603 204.88409424]
[-63.23114777 195.42262268]
[-72.61271667 183.71852112]
[-79.31393433 170.29862976]
[-83.03314209 155.76701355]
[-83.60292053 140.77784729]
[-80.99762726 126.00582886]
[-75.33453369 112.11592865]
[-66.86856079 99.73338318]
[-55.98080444 89.41559601]
[-43.16136551 81.62701416]
[-28.98731041 76.71823883]
[-14.09667206 74.91022491]
[0.84025240 76.28437042]
[15.15108585 80.77881622]
[28.19163322 88.19124603]
[39.37488174 98.18799591]
[48.19742203 110.31906128]
[54.26211548 124.03837585]
[57.29595566 138.72836304]
[57.16212082 153.73004150]
[65.15203857 141.03511047]
[65.38305664 126.14229584]
[79.28217316 118.58416748]
[87.27208710 105.88924408]
[83.49146271 82.35757446]
[82.55583191 67.38678741]
[81.62020874 52.41599274]
[80.68457794 37.44520187]
[69.59886932 29.72738838]
[65.06809235 17.20939827]
[68.54289246 4.56028271]
[78.53144073 -3.63883758]
[77.90746307 -18.62585449]
[77.28348541 -33.61286926]
[62.55696487 -36.89798355]
[49.18293762 -43.88352203]
[38.07326508 -54.09320450]
[29.98542595 -66.83091736]
[25.47086143 -81.22817230]
[24.83738327 -96.30335999]
[28.12818146 -111.02861023]
[35.11888504 -124.39994049]
[45.33285522 -135.50567627]
[58.07368469 -143.58859253]
[72.47268677 -148.09759521]
[87.54811859 -148.72525024]
[102.27209473 -145.42877197]
[115.64072418 -138.43290710]
[126.74250793 -128.21464539]
[134.82051086 -115.47069550]
[139.32395935 -101.06995392]
[139.94580078 -85.99428558]
[136.64363098 -71.27157593]
[129.64259338 -57.90565109]
[119.42005920 -46.80781174]
[106.67298889 -38.73473358]
[92.27050781 -34.23684692]
[92.89448547 -19.24983025]
[93.51846313 -4.26281500]
[106.36019135 6.55142546]
[107.46014404 23.64160347]
[95.65537262 36.50957489]
[96.59099579 51.48036575]
[97.52662659 66.45115662]
[98.46225739 81.42195129]
[110.16188049 90.80911255]
[124.97963715 88.47800446]
[139.79739380 86.14690399]
[154.59010315 83.66178131]
[169.35615540 81.02291870]
[184.12220764 78.38405609]
[186.42166138 63.41771698]
[193.45828247 50.01008606]
[204.46881104 39.61551666]
[218.25889587 33.36153793]
[233.33270264 31.92653656]
[248.05513000 35.46616745]
[260.82919312 43.59647751]
[270.26925659 55.43555450]
[275.35134888 69.69918060]
[275.52420044 84.84014893]
[270.76904297 99.21607208]
[261.60171509 111.26756287]
[249.01657104 119.68737030]
[234.37878418 123.56217194]
[219.27615356 122.47165680]
[205.34689331 116.53411865]
[194.10194397 106.39361572]
[186.76107788 93.15010834]
[171.99502563 95.78897095]
[157.22895813 98.42784119]
[151.15850830 102.72843170]
[142.12849426 100.96466064]
[127.31073761 103.29576111]
[112.49298096 105.62686920]
[99.96701813 113.87915802]
[91.97710419 126.57408905]
[91.17459106 142.37492371]
[77.84696960 149.02502441]
[69.85704803 161.71995544]
[65.69916534 176.13217163]
[65.69916534 191.13217163]
[65.69916534 206.13217163]
[65.69916534 221.13217163]
[65.69916534 236.13217163]
[65.69916534 251.13217163]
[65.69916534 266.13217163]
[65.69916534 281.13217163]
[65.69916534 296.13217163]
[65.69916534 311.13217163]
[65.69916534 326.13217163]
[80.23905182 330.19348145]
[93.14343262 338.02798462]
[103.45471191 349.05432129]
[110.40773773 362.45425415]
[113.48653412 377.23339844]
[112.46264648 392.29510498]
[107.41204071 406.52160645]
[98.70951843 418.85726929]
[87.00085449 428.38668823]
[73.15491486 434.40270996]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[49 129]
[50 128]
[52 126]
[53 125]
[54 94]
[55 93]
[56 92]
[57 91]
[61 88]
[62 87]
[63 86]
[95 124]
[96 123]
[97 122]
[98 120]
[99 119]
[100 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
