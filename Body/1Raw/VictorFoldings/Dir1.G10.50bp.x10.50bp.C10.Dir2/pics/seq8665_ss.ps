%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCAUGCACCGGGGGGGGGGUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCUUCCCUCUACAxxxxxxxxxxACAGAGGCUUACGACCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUACCCCCCCCCCACUCAUGCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 414.35964966]
[71.01555634 408.80664062]
[58.81560135 399.94030762]
[49.20452881 388.31799316]
[42.78650284 374.67031860]
[39.96496582 359.85513306]
[40.91728210 344.80374146]
[45.58358765 330.46231079]
[53.67055511 317.73236084]
[64.66983032 307.41409302]
[77.88998413 300.15612793]
[92.50000000 296.41467285]
[92.50000000 281.41467285]
[92.50000000 266.41467285]
[92.50000000 251.41467285]
[92.50000000 236.41467285]
[92.50000000 221.41467285]
[92.50000000 206.41467285]
[92.50000000 191.41467285]
[92.50000000 176.41467285]
[92.50000000 161.41467285]
[92.50000000 146.41467285]
[92.50000000 131.41467285]
[71.28434753 120.90862274]
[61.37205124 96.99128723]
[70.30652618 70.34086609]
[96.43848419 54.94821930]
[82.09842682 50.54792023]
[67.75836182 46.14761734]
[53.41830444 41.74731827]
[39.07824326 37.34701920]
[31.77009583 50.51078033]
[21.88445091 61.86717987]
[9.85346699 70.91975403]
[-3.79691386 77.27276611]
[-18.46995544 80.64849091]
[-33.52421570 80.89936066]
[-48.30158615 78.01440430]
[-62.15606689 72.11973572]
[-74.48199463 63.47304916]
[-84.74053192 52.45233917]
[-92.48323059 39.53938675]
[-97.37159729 25.29868698]
[-99.19194794 10.35278416]
[-97.86469269 -4.64495182]
[-93.44786835 -19.03888512]
[-86.13453674 -32.19977188]
[-76.24443054 -43.55227661]
[-64.20988464 -52.60012054]
[-50.55700684 -58.94776154]
[-35.88263702 -62.31771851]
[-20.82827950 -62.56266022]
[-6.05204439 -59.67189026]
[7.80011463 -53.77177048]
[20.12264061 -45.12023926]
[30.37684441 -34.09549332]
[38.11445999 -21.17949486]
[42.99722672 -6.93687391]
[44.81169510 8.00974369]
[43.47854233 23.00695610]
[57.81860352 27.40725708]
[72.15866089 31.80755806]
[86.49872589 36.20785904]
[100.83878326 40.60815811]
[112.80904388 31.56863785]
[112.50106812 16.57180023]
[112.19309235 1.57496262]
[111.88510895 -13.42187500]
[97.61267853 -18.58539963]
[86.17187500 -28.55899048]
[79.10998535 -41.99380112]
[77.38206482 -57.07288361]
[81.22180939 -71.75691986]
[90.10991669 -84.06000519]
[102.84434509 -92.31825256]
[117.70287323 -95.41481018]
[132.67599487 -92.93088531]
[145.73873901 -85.20240784]
[155.12445068 -73.27459717]
[159.56381226 -58.76058197]
[158.45642090 -43.62327194]
[151.95205688 -29.90986443]
[140.93035889 -19.47497940]
[126.88195038 -13.72985268]
[127.18992615 1.26698506]
[127.49790192 16.26382256]
[127.80588531 31.26066017]
[140.87257385 38.62689972]
[153.86296082 31.12689972]
[166.85334778 23.62689972]
[179.84371948 16.12689972]
[176.09097290 1.50433242]
[176.42367554 -13.58844376]
[180.81710815 -28.03144455]
[188.94528198 -40.75290298]
[200.20500183 -50.80879974]
[213.76075745 -57.45292282]
[228.60658264 -60.19223785]
[243.64085388 -58.82346344]
[257.74789429 -53.44817352]
[269.88088989 -44.46525192]
[279.13949585 -32.54129028]
[284.83663940 -18.56112289]
[286.54959106 -3.56217647]
[284.15121460 11.34253120]
[277.81945801 25.04697227]
[268.02423096 36.53418350]
[255.49238586 44.95174026]
[241.15385437 49.67500305]
[226.07266235 50.35347366]
[211.36793518 46.93680191]
[198.13085938 39.67853546]
[187.34371948 29.11728096]
[174.35334778 36.61728287]
[161.36296082 44.11728287]
[148.37257385 51.61728287]
[148.91111755 59.09792328]
[162.40663147 65.64551544]
[149.98818970 74.05920410]
[150.52671814 81.53984070]
[164.45742798 87.10178375]
[179.70719910 82.11938477]
[193.03094482 91.05568695]
[194.20782471 107.05551147]
[182.33505249 117.84516907]
[166.52038574 115.14775848]
[158.89549255 101.03249359]
[144.96478271 95.47055817]
[131.57810974 122.44980621]
[107.50000000 131.41467285]
[107.50000000 146.41467285]
[107.50000000 161.41467285]
[107.50000000 176.41467285]
[107.50000000 191.41467285]
[107.50000000 206.41467285]
[107.50000000 221.41467285]
[107.50000000 236.41467285]
[107.50000000 251.41467285]
[107.50000000 266.41467285]
[107.50000000 281.41467285]
[107.50000000 296.41467285]
[122.11001587 300.15612793]
[135.33016968 307.41409302]
[146.32945251 317.73236084]
[154.41641235 330.46231079]
[159.08271790 344.80374146]
[160.03503418 359.85513306]
[157.21350098 374.67031860]
[150.79547119 388.31799316]
[141.18440247 399.94030762]
[128.98443604 408.80664062]
[114.96250153 414.35964966]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[27 64]
[28 63]
[29 62]
[30 61]
[31 60]
[65 87]
[66 86]
[67 85]
[68 84]
[88 116]
[89 115]
[90 114]
[91 113]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
