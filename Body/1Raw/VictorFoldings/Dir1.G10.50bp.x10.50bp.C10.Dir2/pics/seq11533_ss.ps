%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUACACAAGGGGGGGGGGUCAAAGACGCCCUCGGCUUACUUCUCUUCCUUCUCUCCUUAAUGACAUUAxxxxxxxxxxAACCAGUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUACCCCCCCCCCUACUUCACAA\
) } def
/len { sequence length } bind def

/coor [
[99.54305267 401.47088623]
[85.69711304 395.45486450]
[73.98845673 385.92544556]
[65.28592682 373.58978271]
[60.23532867 359.36325073]
[59.21143723 344.30157471]
[62.29023361 329.52243042]
[69.24325562 316.12249756]
[79.55454254 305.09616089]
[92.45892334 297.26165771]
[106.99880981 293.20034790]
[106.99880981 278.20034790]
[106.99880981 263.20034790]
[106.99880981 248.20034790]
[106.99880981 233.20034790]
[106.99880981 218.20034790]
[106.99880981 203.20034790]
[106.99880981 188.20034790]
[106.99880981 173.20034790]
[106.99880981 158.20034790]
[106.99880981 143.20034790]
[70.97635651 117.44355774]
[80.91188049 85.51673889]
[72.40078735 73.16516876]
[63.88969803 60.81359863]
[55.37860870 48.46202469]
[33.16214371 48.85024261]
[16.39188194 31.16367531]
[1.89628506 35.02083588]
[-9.33148479 46.97362518]
[-25.23279190 42.96357727]
[-29.44973373 27.11588097]
[-17.64428139 15.73329163]
[-1.96087432 20.52523804]
[12.53472233 16.66807938]
[18.45468521 2.88569760]
[11.27217674 -10.28288460]
[4.08966780 -23.45146751]
[-3.09284139 -36.62004852]
[-10.27535057 -49.78863144]
[-17.45785904 -62.95721436]
[-24.64036751 -76.12580109]
[-38.72084045 -70.87974548]
[-53.40460205 -67.69102478]
[-68.39270782 -66.62456512]
[-83.38002777 -67.70207977]
[-98.06143188 -70.90162659]
[-112.13803101 -76.15806580]
[-125.32324219 -83.36437988]
[-137.34863281 -92.37387085]
[-147.96936035 -103.00310516]
[-156.96923828 -115.03569031]
[-164.16500854 -128.22665405]
[-169.41020203 -142.30744934]
[-172.59800720 -156.99140930]
[-173.66354370 -171.97958374]
[-172.58509827 -186.96684265]
[-169.38464355 -201.64804077]
[-164.12733459 -215.72431946]
[-156.92019653 -228.90907288]
[-147.90997314 -240.93391418]
[-137.28007507 -251.55398560]
[-125.24693298 -260.55313110]
[-112.05552673 -267.74807739]
[-97.97440338 -272.99240112]
[-83.29024506 -276.17929077]
[-68.30200958 -277.24389648]
[-53.31481934 -276.16452026]
[-38.63381195 -272.96316528]
[-24.55786514 -267.70498657]
[-11.37354755 -260.49703979]
[0.65072262 -251.48605347]
[11.27014732 -240.85549927]
[20.26852989 -228.82180786]
[27.46267319 -215.62994385]
[32.70611572 -201.54850769]
[35.89210510 -186.86415100]
[36.95578003 -171.87583923]
[35.87548447 -156.88873291]
[32.67321396 -142.20791626]
[27.41416168 -128.13229370]
[20.20539474 -114.94842529]
[11.19367504 -102.92471313]
[0.56246918 -92.30594635]
[-11.47178555 -83.30830383]
[-4.28927660 -70.13972473]
[2.89323235 -56.97114182]
[10.07574081 -43.80255890]
[17.25824928 -30.63397598]
[24.44075966 -17.46539307]
[31.62326813 -4.29681110]
[48.43817520 -7.27428007]
[63.75017166 -1.16843629]
[73.19645691 11.61210060]
[74.44140625 26.86214638]
[67.73017883 39.95093536]
[76.24127197 52.30250549]
[84.75235748 64.65408325]
[93.26345062 77.00565338]
[104.34705353 69.74898529]
[120.06779480 68.72144318]
[136.78196716 76.28628540]
[151.19418335 72.12840271]
[165.60639954 67.97051239]
[176.58306885 55.78673172]
[192.56436157 59.46510315]
[197.11007690 75.22164154]
[185.54399109 86.84736633]
[169.76428223 82.38272858]
[155.35206604 86.54061890]
[140.93984985 90.69850159]
[140.62785339 98.19201660]
[153.29502869 106.22587585]
[140.00387573 113.17903137]
[139.69189453 120.67253876]
[153.70860291 126.01405334]
[167.72532654 131.35556030]
[181.74203491 136.69708252]
[195.31150818 128.92512512]
[210.69281006 131.74462891]
[220.62335205 143.82429504]
[220.41424561 159.46047974]
[210.16419983 171.27024841]
[194.71299744 173.67739868]
[181.35621643 165.54534912]
[176.40051270 150.71379089]
[162.38380432 145.37226868]
[148.36709595 140.03076172]
[134.35038757 134.68925476]
[121.99880981 143.20034790]
[121.99880981 158.20034790]
[121.99880981 173.20034790]
[121.99880981 188.20034790]
[121.99880981 203.20034790]
[121.99880981 218.20034790]
[121.99880981 233.20034790]
[121.99880981 248.20034790]
[121.99880981 263.20034790]
[121.99880981 278.20034790]
[121.99880981 293.20034790]
[136.53869629 297.26165771]
[149.44306946 305.09616089]
[159.75436401 316.12249756]
[166.70738220 329.52243042]
[169.78617859 344.30157471]
[168.76228333 359.36325073]
[163.71168518 373.58978271]
[155.00917053 385.92544556]
[143.30050659 395.45486450]
[129.45455933 401.47088623]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 99]
[24 98]
[25 97]
[26 96]
[28 35]
[29 34]
[36 91]
[37 90]
[38 89]
[39 88]
[40 87]
[41 86]
[42 85]
[102 111]
[103 110]
[104 109]
[115 129]
[116 128]
[117 127]
[118 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
