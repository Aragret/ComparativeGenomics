%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAACACCGGGGGGGGGGACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAUACCAACACCUxxxxxxxxxxAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCCCCCCCCCCCUCAUCACC\
) } def
/len { sequence length } bind def

/coor [
[93.12538147 377.80859375]
[79.27944183 371.79257202]
[67.57077789 362.26315308]
[58.86825180 349.92749023]
[53.81764984 335.70095825]
[52.79376221 320.63928223]
[55.87255859 305.86010742]
[62.82558060 292.46017456]
[73.13686371 281.43386841]
[86.04124451 273.59933472]
[100.58113098 269.53802490]
[100.58113098 254.53802490]
[100.58113098 239.53802490]
[100.58113098 224.53802490]
[100.58113098 209.53802490]
[100.58113098 194.53802490]
[100.58113098 179.53802490]
[100.58113098 164.53802490]
[100.58113098 149.53802490]
[100.58113098 134.53802490]
[100.58113098 119.53803253]
[88.88150787 110.15087128]
[74.23800659 113.40169525]
[59.59450531 116.65251923]
[44.95100403 119.90335083]
[30.30750465 123.15417480]
[21.80006218 136.20259094]
[6.90316010 139.29078674]
[-5.48408270 131.09982300]
[-20.12758446 134.35064697]
[-31.84285355 145.82603455]
[-47.56358337 141.15798950]
[-51.11763382 125.14859772]
[-38.84890366 114.26694489]
[-23.37841034 119.70715332]
[-8.73490810 116.45632935]
[-0.97721982 103.79323578]
[13.82706356 100.28783417]
[27.05667877 108.51067352]
[41.70018005 105.25984192]
[56.34368134 102.00901794]
[70.98718262 98.75819397]
[85.63068390 95.50737000]
[96.61634827 85.29389191]
[100.92393494 70.92570496]
[105.23152161 56.55752182]
[109.53910065 42.18933487]
[113.84668732 27.82115173]
[101.03152466 19.87087631]
[90.71903992 8.88278675]
[83.60782623 -4.38998508]
[80.17732239 -19.03984261]
[80.65553284 -34.06678391]
[85.00386047 -48.44666672]
[92.92014313 -61.20100021]
[103.85964966 -71.46353149]
[117.07256317 -78.53908539]
[131.65536499 -81.95062256]
[146.61264038 -81.47145844]
[150.92022705 -95.83964539]
[139.59655762 -86.00223541]
[126.59903717 -78.51461029]
[112.40847778 -73.65373993]
[97.54981232 -71.59945679]
[82.57270050 -72.42774200]
[68.03117371 -76.10795593]
[54.46315384 -82.50395966]
[42.37055969 -91.37915802]
[32.20071411 -102.40522766]
[24.32982445 -115.17430115]
[19.04905510 -129.21400452]
[16.55375290 -144.00500488]
[16.93622208 -159.00012207]
[20.18231392 -173.64468384]
[26.17195129 -187.39692688]
[34.68356323 -199.74813843]
[45.40228653 -210.24142456]
[57.93161011 -218.48860168]
[71.80805206 -224.18460083]
[86.51828003 -227.11871338]
[101.51815033 -227.18240356]
[116.25276947 -224.37330627]
[130.17707825 -218.79533386]
[142.77597046 -210.65483093]
[153.58340454 -200.25294495]
[162.19958496 -187.97445679]
[168.30578613 -174.27355957]
[171.67611694 -159.65710449]
[172.18589783 -144.66577148]
[169.81626892 -129.85412598]
[164.65776062 -115.77600861]
[176.55014038 -124.91774750]
[188.44252014 -134.05947876]
[200.33489990 -143.20121765]
[212.22727966 -152.34294128]
[217.98634338 -167.69760132]
[234.20556641 -170.12014771]
[244.20001221 -157.11848450]
[237.68824768 -142.06761169]
[221.36901855 -140.45056152]
[209.47663879 -131.30883789]
[197.58425903 -122.16709900]
[185.69187927 -113.02536774]
[173.79949951 -103.88362885]
[165.28840637 -91.53205872]
[160.98081970 -77.16387177]
[173.73471069 -69.33522797]
[184.03541565 -58.46360397]
[191.17642212 -45.28594589]
[194.66564941 -30.69767761]
[194.25941467 -15.69182777]
[189.97941589 -1.29145956]
[182.11164856 11.52009106]
[171.18730164 21.86636162]
[157.94692993 29.03771973]
[143.29022217 32.54003906]
[128.21487427 32.12873840]
[123.90728760 46.49692154]
[119.59970093 60.86510468]
[115.29211426 75.23329163]
[110.98453522 89.60147095]
[120.96900177 78.40726471]
[135.39620972 74.30168915]
[149.77854919 78.56179810]
[159.64234924 89.86248016]
[161.91947937 104.68862915]
[155.90162659 118.42854309]
[143.46064758 126.80841064]
[128.46633911 127.22164917]
[115.58113098 119.53803253]
[115.58113098 134.53802490]
[115.58113098 149.53802490]
[115.58113098 164.53802490]
[115.58113098 179.53802490]
[115.58113098 194.53802490]
[115.58113098 209.53802490]
[115.58113098 224.53802490]
[115.58113098 239.53802490]
[115.58113098 254.53802490]
[115.58113098 269.53802490]
[130.12101746 273.59933472]
[143.02540588 281.43386841]
[153.33668518 292.46017456]
[160.28970337 305.86010742]
[163.36849976 320.63928223]
[162.34461975 335.70095825]
[157.29400635 349.92749023]
[148.59149170 362.26315308]
[136.88282776 371.79257202]
[123.03688812 377.80859375]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[29 36]
[30 35]
[44 121]
[45 120]
[46 119]
[47 118]
[48 117]
[59 106]
[60 105]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
