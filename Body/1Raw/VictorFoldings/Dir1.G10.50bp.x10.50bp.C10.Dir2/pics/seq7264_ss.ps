%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUAUUAAUGGGGGGGGGGAAUUUUCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGxxxxxxxxxxAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCACCCCCCCCCCUAAUAUUCAU\
) } def
/len { sequence length } bind def

/coor [
[83.16679382 372.25033569]
[69.32085419 366.23431396]
[57.61219025 356.70489502]
[48.90966797 344.36923218]
[43.85906601 330.14270020]
[42.83517456 315.08102417]
[45.91397476 300.30187988]
[52.86699677 286.90194702]
[63.17827988 275.87561035]
[76.08265686 268.04110718]
[90.62255096 263.97979736]
[90.62255096 248.97979736]
[90.62255096 233.97979736]
[90.62255096 218.97979736]
[90.62255096 203.97979736]
[90.62255096 188.97979736]
[90.62255096 173.97979736]
[90.62255096 158.97979736]
[90.62255096 143.97979736]
[90.62255096 128.97979736]
[77.92761993 120.98987579]
[64.40342712 127.47804260]
[50.87923813 133.96620178]
[47.17356110 149.15837097]
[34.53898239 158.37257385]
[18.94116020 157.25813293]
[7.74491167 146.34126282]
[6.23676157 130.77658081]
[15.12881279 117.91323853]
[30.22251129 113.82492828]
[44.39107132 120.44201660]
[57.91526413 113.95384979]
[71.43945312 107.46568298]
[78.99765015 85.49240112]
[97.71931458 78.58961487]
[101.42547607 64.05467987]
[105.13163757 49.51974106]
[108.83779144 34.98480606]
[112.54395294 20.44987106]
[116.25011444 5.91493416]
[110.36622620 -0.47145519]
[107.38950348 -8.45580101]
[107.64681244 -16.81055450]
[94.70875549 -24.40046310]
[81.77070618 -31.99036980]
[68.83264923 -39.58028030]
[55.89459229 -47.17018890]
[42.95653534 -54.76009369]
[26.56295776 -54.33269119]
[18.22791481 -68.45568848]
[26.52578354 -82.60056305]
[42.92042923 -82.21627808]
[50.54644394 -67.69815063]
[63.48450089 -60.10824203]
[76.42255402 -52.51833344]
[89.36061096 -44.92842484]
[102.29866791 -37.33852005]
[115.23672485 -29.74860954]
[124.38932800 -34.12587357]
[134.53022766 -33.82160950]
[143.29643250 -45.99344635]
[152.06263733 -58.16528320]
[160.82885742 -70.33712006]
[149.70262146 -80.42111969]
[139.77542114 -91.68747711]
[131.17210388 -103.99450684]
[124.00086212 -117.18743134]
[118.35188293 -131.10034180]
[114.29619598 -145.55825806]
[111.88481903 -160.37936401]
[111.14807892 -175.37727356]
[112.09523010 -190.36335754]
[114.71437073 -205.14916992]
[118.97255707 -219.54875183]
[124.81623840 -233.38101196]
[132.17192078 -246.47198486]
[140.94711304 -258.65707397]
[151.03144836 -269.78298950]
[162.29809570 -279.70986938]
[174.60539246 -288.31280518]
[187.79852295 -295.48364258]
[201.71160889 -301.13223267]
[216.16964722 -305.18746948]
[230.99082947 -307.59841919]
[245.98875427 -308.33468628]
[260.97482300 -307.38708496]
[275.76055908 -304.76751709]
[290.16000366 -300.50891113]
[303.99209595 -294.66479492]
[317.08285522 -287.30871582]
[329.26766968 -278.53317261]
[340.39328003 -268.44851685]
[350.31979370 -257.18154907]
[358.92239380 -244.87400818]
[366.09283447 -231.68066406]
[371.74099731 -217.76741028]
[375.79580688 -203.30924988]
[378.20629883 -188.48800659]
[378.94213867 -173.49005127]
[377.99411011 -158.50401306]
[375.37408447 -143.71836853]
[371.11502075 -129.31904602]
[365.27050781 -115.48712921]
[357.91406250 -102.39658356]
[349.13812256 -90.21203613]
[339.05313110 -79.08670807]
[327.78588867 -69.16052246]
[315.47808838 -60.55831146]
[302.28451538 -53.38825226]
[288.37109375 -47.74051666]
[273.91281128 -43.68613052]
[259.09149170 -41.27608490]
[244.09352112 -40.54068375]
[229.10751343 -41.48918152]
[214.32194519 -44.10964966]
[199.92274475 -48.36912537]
[186.09101868 -54.21405029]
[173.00068665 -61.57091522]
[164.23448181 -49.39907837]
[155.46827698 -37.22724152]
[146.70207214 -25.05540276]
[148.80184937 -3.49917889]
[130.78504944 9.62109566]
[127.07889557 24.15603065]
[123.37273407 38.69096756]
[119.66657257 53.22590256]
[115.96041107 67.76084137]
[112.25424957 82.29577637]
[123.78668213 95.57699585]
[122.20173645 115.11281586]
[105.62255096 128.97979736]
[105.62255096 143.97979736]
[105.62255096 158.97979736]
[105.62255096 173.97979736]
[105.62255096 188.97979736]
[105.62255096 203.97979736]
[105.62255096 218.97979736]
[105.62255096 233.97979736]
[105.62255096 248.97979736]
[105.62255096 263.97979736]
[120.16243744 268.04110718]
[133.06681824 275.87561035]
[143.37809753 286.90194702]
[150.33111572 300.30187988]
[153.40992737 315.08102417]
[152.38603210 330.14270020]
[147.33543396 344.36923218]
[138.63290405 356.70489502]
[126.92424011 366.23431396]
[113.07830048 372.25033569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 33]
[22 32]
[23 31]
[35 128]
[36 127]
[37 126]
[38 125]
[39 124]
[40 123]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[60 121]
[61 120]
[62 119]
[63 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
