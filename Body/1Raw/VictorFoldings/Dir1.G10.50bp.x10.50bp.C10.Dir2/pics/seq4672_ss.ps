%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCAUCUUUGGGGGGGGGGGCAGGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAxxxxxxxxxxGACCUCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUAAGCUACCCUUUCCCCCCCCCCUACCAUCAUUG\
) } def
/len { sequence length } bind def

/coor [
[70.40929413 379.48718262]
[56.38734818 373.93417358]
[44.18739319 365.06784058]
[34.57632065 353.44555664]
[28.15829659 339.79785156]
[25.33675957 324.98266602]
[26.28907585 309.93127441]
[30.95537949 295.58984375]
[39.04234695 282.85989380]
[50.04162216 272.54162598]
[63.26177979 265.28366089]
[77.87179565 261.54220581]
[77.87179565 246.54222107]
[77.87179565 231.54222107]
[77.87179565 216.54222107]
[77.87179565 201.54222107]
[77.87179565 186.54222107]
[77.87179565 171.54222107]
[77.87179565 156.54222107]
[77.87179565 141.54222107]
[77.87179565 126.54221344]
[68.70985413 114.66539001]
[54.20123291 110.85752869]
[39.69260788 107.04967499]
[25.18398094 103.24181366]
[16.88502312 114.85578918]
[5.13907671 122.91411591]
[-8.62560749 126.46176147]
[-22.74377441 125.09066010]
[-35.51461792 118.98654938]
[-45.40668106 108.90412140]
[-51.24149704 96.07373047]
[-52.33396530 82.05132294]
[-66.76135254 77.94638062]
[-81.18873596 73.84143066]
[-95.61611938 69.73648834]
[-109.30567932 77.16842651]
[-123.87862396 72.79990387]
[-130.87947083 59.70319748]
[-145.30685425 55.59825134]
[-159.73423767 51.49330902]
[-172.57806396 60.41353989]
[-188.14601135 58.93951416]
[-199.08740234 47.76722717]
[-200.23603821 32.17188644]
[-191.04956055 19.51713562]
[-175.86555481 15.77816200]
[-161.85343933 22.72039413]
[-155.62930298 37.06592178]
[-141.20191956 41.17086792]
[-126.77452850 45.27581406]
[-113.92775726 37.82624435]
[-99.23786163 41.78371811]
[-91.51117706 55.30910110]
[-77.08379364 59.41404724]
[-62.65640640 63.51899338]
[-48.22902298 67.62393951]
[-38.60456085 55.07013702]
[-24.87245560 47.14073181]
[-9.11232281 45.07058334]
[6.27601480 49.20463181]
[18.93796349 58.94081497]
[26.92443466 72.81757355]
[28.99184036 88.73319244]
[43.50046539 92.54104614]
[58.00909042 96.34890747]
[72.51771545 100.15676880]
[87.48227692 78.74249268]
[110.71001434 80.94806671]
[122.10108185 71.18879700]
[133.49215698 61.42951965]
[126.23840332 47.72105408]
[122.20404053 32.75283813]
[121.58663940 17.26972580]
[124.41381836 2.04147553]
[130.54200745 -12.17550564]
[139.66375732 -24.67573357]
[151.32315063 -34.83966064]
[164.93858337 -42.16437912]
[179.83181763 -46.28850174]
[195.26171875 -47.00999451]
[210.46112061 -44.29607391]
[224.67504883 -38.28467178]
[237.19815063 -29.27744293]
[248.38644409 -39.26853943]
[259.57473755 -49.25963593]
[270.76303101 -59.25073624]
[281.95132446 -69.24182892]
[283.47009277 -82.09084320]
[293.04644775 -90.18186188]
[305.16632080 -89.57318115]
[316.55740356 -99.33245087]
[327.94848633 -109.09172821]
[339.33953857 -118.85100555]
[340.30523682 -134.62576294]
[352.19769287 -145.03463745]
[367.96136475 -143.90222168]
[378.24392700 -131.90037537]
[376.94491577 -116.14955902]
[364.83502197 -105.99446869]
[349.09881592 -107.45993042]
[337.70776367 -97.70065308]
[326.31668091 -87.94138336]
[314.92559814 -78.18210602]
[310.02871704 -61.35756683]
[291.94241333 -58.05353546]
[280.75411987 -48.06243896]
[269.56582642 -38.07134247]
[258.37753296 -28.08024406]
[247.18923950 -18.08914757]
[254.37194824 -5.45891905]
[258.76037598 8.39866352]
[260.15850830 22.87321854]
[258.50222778 37.32663345]
[253.86199951 51.12118912]
[246.44009399 63.64770889]
[236.56163025 74.35245514]
[224.66041565 82.76160431]
[211.25982666 88.50221252]
[196.94989014 91.31877899]
[182.36120605 91.08460236]
[168.13719177 87.80744934]
[154.90573120 81.62939453]
[143.25143433 72.82059479]
[131.86036682 82.57987213]
[120.46928406 92.33914185]
[122.79312897 100.16165924]
[122.10568237 108.63270569]
[118.25868225 116.58902740]
[111.55278778 122.85295868]
[102.72519684 126.40466309]
[92.87179565 126.54221344]
[92.87179565 141.54222107]
[92.87179565 156.54222107]
[92.87179565 171.54222107]
[92.87179565 186.54222107]
[92.87179565 201.54222107]
[92.87179565 216.54222107]
[92.87179565 231.54222107]
[92.87179565 246.54222107]
[92.87179565 261.54220581]
[107.48180389 265.28366089]
[120.70196533 272.54162598]
[131.70123291 282.85989380]
[139.78820801 295.58984375]
[144.45451355 309.93127441]
[145.40682983 324.98266602]
[142.58529663 339.79785156]
[136.16726685 353.44555664]
[126.55619049 365.06784058]
[114.35623932 373.93417358]
[100.33428955 379.48718262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 67]
[23 66]
[24 65]
[25 64]
[33 57]
[34 56]
[35 55]
[36 54]
[39 51]
[40 50]
[41 49]
[69 126]
[70 125]
[71 124]
[84 110]
[85 109]
[86 108]
[87 107]
[88 106]
[91 104]
[92 103]
[93 102]
[94 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
