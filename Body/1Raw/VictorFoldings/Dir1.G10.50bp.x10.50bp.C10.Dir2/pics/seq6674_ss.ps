%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGCCCCUCGGGGGGGGGGUUCGUCUGAUCCGUCCUAAUCACAGCAGUCCUACUUCUCCUAUCUCUCCCxxxxxxxxxxAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACCCCCCCCCCCAACCCCCCUC\
) } def
/len { sequence length } bind def

/coor [
[93.53905487 429.04092407]
[80.31885529 421.76846313]
[69.43205261 411.32147217]
[61.62092209 398.41223145]
[57.41804123 383.92089844]
[57.10996628 368.83557129]
[60.71770859 354.18475342]
[67.99528503 340.96734619]
[78.44648743 330.08459473]
[91.35874939 322.27844238]
[105.85168457 318.08114624]
[105.53963470 303.08441162]
[105.22757721 288.08764648]
[104.91551971 273.09088135]
[104.60346222 258.09414673]
[104.29140472 243.09738159]
[103.97934723 228.10063171]
[103.66729736 213.10388184]
[103.35523987 198.10711670]
[103.04318237 183.11036682]
[102.73112488 168.11361694]
[101.32881927 153.17930603]
[98.84370422 138.38659668]
[96.35858917 123.59389496]
[83.23181152 116.99292755]
[76.45667267 103.95519257]
[78.59954071 89.41926575]
[88.84870911 78.89122772]
[86.36358643 64.09851837]
[71.33027649 63.20104980]
[56.88059998 58.98260880]
[43.73834991 51.65784836]
[32.56107330 41.59693146]
[23.90718842 29.30683327]
[18.20808220 15.40578079]
[15.74660110 0.59216666]
[16.64302444 -14.39054012]
[20.84918213 -28.79111290]
[28.15103912 -41.88822556]
[38.17958069 -53.02659225]
[50.42945862 -61.64974976]
[64.28446198 -67.32785034]
[61.79933929 -82.12055969]
[59.31422043 -96.91326141]
[56.82910156 -111.70597076]
[54.34398270 -126.49868011]
[39.34108734 -125.81282043]
[24.36490822 -126.94039917]
[9.63384628 -129.86499023]
[-4.63727665 -134.54391479]
[-18.24034500 -140.90896606]
[-30.97698784 -148.86730957]
[-42.66146469 -158.30290222]
[-53.12338257 -169.07814026]
[-62.21017838 -181.03587341]
[-69.78933716 -194.00173950]
[-75.75033569 -207.78665161]
[-80.00623322 -222.18959045]
[-82.49498749 -237.00051880]
[-83.18028259 -252.00344849]
[-82.05213928 -266.97958374]
[-79.12700653 -281.71054077]
[-74.44754028 -295.98147583]
[-68.08198547 -309.58432007]
[-60.12315750 -322.32064819]
[-50.68712997 -334.00479126]
[-39.91151047 -344.46630859]
[-27.95343018 -353.55264282]
[-14.98727989 -361.13131714]
[-1.20214140 -367.09179688]
[13.20095634 -371.34716797]
[28.01197433 -373.83535767]
[43.01492310 -374.52011108]
[57.99101639 -373.39138794]
[72.72186279 -370.46569824]
[86.99263000 -365.78570557]
[100.59522247 -359.41964722]
[113.33127594 -351.46032715]
[125.01504517 -342.02386475]
[135.47615051 -331.24786377]
[144.56205750 -319.28945923]
[152.14024353 -306.32299805]
[158.10020447 -292.53765869]
[162.35504150 -278.13439941]
[164.84268188 -263.32327271]
[165.52685547 -248.32031250]
[164.39759827 -233.34425354]
[161.47135925 -218.61352539]
[156.79083252 -204.34292603]
[150.42425537 -190.74057007]
[142.46447754 -178.00482178]
[133.02757263 -166.32139587]
[122.25116730 -155.86068726]
[110.29241180 -146.77523804]
[97.32569122 -139.19754028]
[83.54010773 -133.23808289]
[69.13668823 -128.98379517]
[71.62181091 -114.19109344]
[74.10692596 -99.39838409]
[76.59204865 -84.60567474]
[79.07716370 -69.81297302]
[94.02701569 -68.97397614]
[108.42221069 -64.82708740]
[121.53990936 -57.57720184]
[132.72067261 -47.58509827]
[141.40159607 -35.34950638]
[147.14471436 -21.48221588]
[149.65899658 -6.67747402]
[148.81520081 8.32276249]
[144.65242004 22.76601410]
[137.37634277 35.92702103]
[127.34905243 47.14417648]
[115.07107544 55.85276413]
[101.15629578 61.61339951]
[103.64141083 76.40610504]
[116.76818848 83.00707245]
[123.54332733 96.04480743]
[121.40045929 110.58073425]
[111.15129089 121.10877228]
[113.63641357 135.90147400]
[116.12152863 150.69418335]
[125.14373779 138.71087646]
[139.71742249 135.16014099]
[153.24055481 141.65049744]
[159.58703613 155.24176025]
[155.88183594 169.77693176]
[143.80345154 178.67146301]
[128.82351685 177.89602661]
[117.72788239 167.80155945]
[118.03993225 182.79830933]
[118.35198975 197.79505920]
[118.66404724 212.79182434]
[118.97610474 227.78857422]
[119.28816223 242.78532410]
[119.60021973 257.78207397]
[119.91226959 272.77883911]
[120.22432709 287.77557373]
[120.53638458 302.77233887]
[120.84844208 317.76910400]
[135.50343323 321.35986328]
[148.72924805 328.62213135]
[159.62411499 339.06072998]
[167.44520569 351.96392822]
[171.65927124 366.45199585]
[171.97900391 381.53707886]
[168.38256836 396.19070435]
[161.11520386 409.41369629]
[150.67240906 420.30453491]
[137.76617432 428.12063599]
[123.27648926 432.32913208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 121]
[23 120]
[24 119]
[28 115]
[29 114]
[42 101]
[43 100]
[44 99]
[45 98]
[46 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
