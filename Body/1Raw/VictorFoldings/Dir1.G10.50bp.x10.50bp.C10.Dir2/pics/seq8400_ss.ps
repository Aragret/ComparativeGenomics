%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUACACAACGGGGGGGGGGACUAAAGGACGAACCUGAUCUCUUAUACUAGUAUCCUUAAUCAUUUUUAUxxxxxxxxxxUGUACCCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCCCCCCCCCCCAUCCACAAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 402.60711670]
[71.19830322 396.59109497]
[59.48964310 387.06167603]
[50.78712082 374.72601318]
[45.73651886 360.49948120]
[44.71262741 345.43780518]
[47.79142761 330.65863037]
[54.74444962 317.25872803]
[65.05573273 306.23239136]
[77.96011353 298.39788818]
[92.50000000 294.33654785]
[92.50000000 279.33654785]
[92.50000000 264.33654785]
[92.50000000 249.33656311]
[92.50000000 234.33656311]
[92.50000000 219.33656311]
[92.50000000 204.33656311]
[92.50000000 189.33656311]
[92.50000000 174.33656311]
[92.50000000 159.33656311]
[92.50000000 144.33656311]
[70.93758392 134.31263733]
[57.50204468 114.69368744]
[55.95042419 90.96586609]
[66.71661377 69.76431274]
[57.45166397 57.96767044]
[48.18671417 46.17103195]
[38.92176819 34.37439346]
[31.10744286 29.51762390]
[29.58983994 22.23459244]
[20.57230949 10.24776077]
[7.68290138 17.94810104]
[-5.95199299 24.23473358]
[-20.17787933 29.03642654]
[-34.83356857 32.29877090]
[-49.75299835 33.98480606]
[-64.76712036 34.07542419]
[-79.70581818 32.56959915]
[-94.39981079 29.48439407]
[-108.68262482 24.85476685]
[-122.39241028 18.73317337]
[-135.37382507 11.18897629]
[-147.47978210 2.30765748]
[-158.57312012 -7.81015062]
[-168.52813721 -19.04980469]
[-177.23202515 -31.28395271]
[-184.58616638 -44.37397385]
[-190.50724792 -58.17154312]
[-194.92816162 -72.52032471]
[-197.79882812 -87.25773621]
[-199.08671570 -102.21679688]
[-198.77722168 -117.22800446]
[-196.87387085 -132.12127686]
[-193.39822388 -146.72784424]
[-188.38964844 -160.88221741]
[-181.90490723 -174.42401123]
[-174.01748657 -187.19979858]
[-164.81674194 -199.06480408]
[-154.40692139 -209.88459778]
[-142.90599060 -219.53657532]
[-130.44425964 -227.91137695]
[-117.16292572 -234.91410828]
[-103.21247864 -240.46542358]
[-88.75099182 -244.50242615]
[-73.94231415 -246.97937012]
[-58.95425034 -247.86819458]
[-43.95662308 -247.15882874]
[-29.11936378 -244.85928345]
[-14.61059284 -240.99565125]
[-0.59470534 -235.61169434]
[12.76948833 -228.76841736]
[25.33056068 -220.54336548]
[36.94618607 -211.02972412]
[47.48474884 -200.33529663]
[56.82684326 -188.58126831]
[64.86660767 -175.90080261]
[71.51295471 -162.43757629]
[76.69057465 -148.34416199]
[80.34079742 -133.78024292]
[82.42226410 -118.91082001]
[82.91138458 -103.90438843]
[81.80262756 -88.93099213]
[79.10855103 -74.16027069]
[74.85968781 -59.75960541]
[69.10416412 -45.89215851]
[61.90721130 -32.71506119]
[53.35036469 -20.37761688]
[43.53058624 -9.01962185]
[32.55914307 1.23023057]
[41.57667160 13.21706295]
[50.71840668 25.10944366]
[59.98335648 36.90608215]
[69.24830627 48.70272446]
[78.51325226 60.49936295]
[89.18431091 56.35367966]
[100.55639648 55.03700256]
[111.89242554 56.63468170]
[122.45762634 61.04315567]
[131.56719971 67.97668457]
[138.63069153 76.98585510]
[143.19026184 87.48673248]
[158.09216309 85.77404022]
[172.99406433 84.06134796]
[187.87734985 82.19374084]
[202.74038696 80.17140198]
[217.60343933 78.14907074]
[232.46649170 76.12673187]
[243.28306580 64.27847290]
[259.28018188 65.49166107]
[268.18621826 78.83565521]
[263.16921997 94.07407379]
[248.07781982 99.51731110]
[234.48881531 90.98978424]
[219.62577820 93.01211548]
[204.76272583 95.03445435]
[189.89967346 97.05678558]
[183.65557861 101.10113525]
[174.70675659 98.96325684]
[159.80485535 100.67594147]
[144.90295410 102.38863373]
[144.17283630 108.41074371]
[142.63880920 114.27977753]
[140.32878113 119.88893127]
[137.28479004 125.13611603]
[133.56224060 129.92584229]
[129.22888184 134.17092896]
[124.36357117 137.79414368]
[119.05486298 140.72950745]
[113.39936066 142.92362976]
[107.50000000 144.33656311]
[107.50000000 159.33656311]
[107.50000000 174.33656311]
[107.50000000 189.33656311]
[107.50000000 204.33656311]
[107.50000000 219.33656311]
[107.50000000 234.33656311]
[107.50000000 249.33656311]
[107.50000000 264.33654785]
[107.50000000 279.33654785]
[107.50000000 294.33654785]
[122.03988647 298.39788818]
[134.94427490 306.23239136]
[145.25555420 317.25872803]
[152.20857239 330.65863037]
[155.28736877 345.43780518]
[154.26348877 360.49948120]
[149.21287537 374.72601318]
[140.51036072 387.06167603]
[128.80169678 396.59109497]
[114.95575714 402.60711670]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 94]
[26 93]
[27 92]
[28 91]
[30 90]
[31 89]
[101 120]
[102 119]
[103 118]
[104 116]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
