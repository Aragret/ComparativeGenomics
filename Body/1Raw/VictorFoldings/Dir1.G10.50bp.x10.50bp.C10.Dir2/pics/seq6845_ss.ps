%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAUCUCCCGGGGGGGGGGAUAUUGUAACUUACUACUCCGGAAAAAAAGAACCAUUUGGAUACAUAGGUxxxxxxxxxxCGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACUCUACCUCUCUAUCCCCCCCCCCACUAAUCUCCC\
) } def
/len { sequence length } bind def

/coor [
[89.41690063 441.99096680]
[75.39495850 436.43795776]
[63.19499969 427.57162476]
[53.58392715 415.94931030]
[47.16590118 402.30160522]
[44.34436417 387.48641968]
[45.29668045 372.43502808]
[49.96298599 358.09362793]
[58.04995346 345.36364746]
[69.04922485 335.04537964]
[82.26938629 327.78741455]
[96.87940216 324.04595947]
[96.87940216 309.04595947]
[96.87940216 294.04595947]
[96.87940216 279.04595947]
[96.87940216 264.04595947]
[96.87940216 249.04597473]
[96.87940216 234.04597473]
[96.87940216 219.04597473]
[96.87940216 204.04597473]
[96.87940216 189.04597473]
[96.87940216 174.04597473]
[96.87940216 159.04597473]
[96.87940216 144.04597473]
[94.57852173 129.22349548]
[90.03123474 114.92935944]
[78.34502411 105.52550507]
[63.40901184 104.14147949]
[52.96820450 111.78302002]
[40.52127457 110.28459930]
[32.71022415 100.99752808]
[17.80577850 99.30712891]
[2.90133047 97.61672974]
[-4.11551237 111.07512665]
[-15.52283669 121.08699036]
[-29.77789497 126.29830170]
[-44.95280838 126.00426483]
[-58.99529266 120.24466705]
[-70.00621796 109.79842377]
[-76.49645233 96.07831573]
[-77.58823395 80.93987274]
[-73.13391876 66.43044281]
[-63.73590851 54.51231384]
[-50.66521454 46.79730606]
[-35.68953323 44.32881546]
[-20.83420753 47.44068527]
[-8.10829639 55.71205902]
[0.76712441 68.02429962]
[4.59172773 82.71228790]
[19.49617577 84.40267944]
[34.40062332 86.09307861]
[50.05307388 78.21619415]
[64.79303741 89.20546722]
[79.72904968 90.58949280]
[85.27161407 85.53677368]
[75.16635132 74.45148468]
[86.25180054 64.34638977]
[96.35675049 75.43133545]
[101.89931488 70.37861633]
[101.89931488 55.37862015]
[101.89931488 40.37862015]
[101.89931488 25.37862015]
[101.89931488 10.37862015]
[101.89931488 -4.62138033]
[90.14975739 -11.89466095]
[83.59447479 -23.93607521]
[83.85898590 -37.53517151]
[90.76653290 -49.12623596]
[102.41264343 -55.72322464]
[102.72062683 -70.72006226]
[103.02860260 -85.71690369]
[89.59446716 -93.05056000]
[81.11690521 -105.79377747]
[79.54399872 -121.01824951]
[85.23719025 -135.22550964]
[96.88822937 -145.15081787]
[111.81978607 -148.51344299]
[126.60070038 -144.54064941]
[137.83442688 -134.14535522]
[142.93954468 -119.71634674]
[140.74291992 -104.56928253]
[131.74932861 -92.18486023]
[118.02543640 -85.40892029]
[117.71746063 -70.41208649]
[117.40948486 -55.41524506]
[130.78482056 -45.94686508]
[135.95388794 -30.22132492]
[130.70053101 -14.34899902]
[116.89931488 -4.62138033]
[116.89931488 10.37862015]
[116.89931488 25.37862015]
[116.89931488 40.37862015]
[116.89931488 55.37862015]
[116.89931488 70.37861633]
[129.88969421 77.87861633]
[142.88008118 70.37861633]
[155.87046814 62.87862015]
[168.86083984 55.37862015]
[171.39791870 39.94821930]
[183.29351807 29.79791451]
[198.93090820 29.72037125]
[210.92658997 39.75220108]
[213.61657715 55.15668488]
[205.73071289 68.66028595]
[190.99249268 73.88703156]
[176.36083984 68.36900330]
[163.37046814 75.86900330]
[150.38008118 83.36900330]
[137.38969421 90.86900330]
[128.61787415 106.77115631]
[115.49235535 113.16037750]
[104.32536316 110.38207245]
[108.87265015 124.67620087]
[112.80931854 110.20199585]
[121.62821960 98.06828308]
[134.18038940 89.85590363]
[148.83045959 86.63481140]
[163.66975403 88.82466125]
[176.76492310 96.14015198]
[186.40986633 107.62818909]
[191.34800720 121.79204559]
[190.93597412 136.78637695]
[185.22743225 150.65766907]
[174.96612549 161.59867859]
[161.48896790 168.18395996]
[146.55180359 169.55555725]
[132.10073853 165.53477478]
[120.01852417 156.64544678]
[111.87940216 144.04597473]
[111.87940216 159.04597473]
[111.87940216 174.04597473]
[111.87940216 189.04597473]
[111.87940216 204.04597473]
[111.87940216 219.04597473]
[111.87940216 234.04597473]
[111.87940216 249.04597473]
[111.87940216 264.04595947]
[111.87940216 279.04595947]
[111.87940216 294.04595947]
[111.87940216 309.04595947]
[111.87940216 324.04595947]
[126.48941040 327.78741455]
[139.70956421 335.04537964]
[150.70884705 345.36364746]
[158.79580688 358.09362793]
[163.46211243 372.43502808]
[164.41442871 387.48641968]
[161.59289551 402.30160522]
[155.17486572 415.94931030]
[145.56379700 427.57162476]
[133.36384583 436.43795776]
[119.34189606 441.99096680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 129]
[25 113]
[26 112]
[27 54]
[28 53]
[31 51]
[32 50]
[33 49]
[59 94]
[60 93]
[61 92]
[62 91]
[63 90]
[64 89]
[69 85]
[70 84]
[71 83]
[95 109]
[96 108]
[97 107]
[98 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
