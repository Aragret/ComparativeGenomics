%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAAGUAUGGGGGGGGGGACUUCAAAGGACAUUUAACUAAAACCCCUACGCAUUUAUAUAGAGGAGACxxxxxxxxxxUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCUCGUUCCACAGAAGCUGCCCCCCCCCCCCAUCAAGUAU\
) } def
/len { sequence length } bind def

/coor [
[90.16155243 542.04211426]
[77.60333252 533.69097900]
[67.51710510 522.47851562]
[60.53691483 509.10961914]
[57.10152817 494.42462158]
[57.42690659 479.34667969]
[61.49259186 464.82354736]
[69.04300690 451.76821899]
[79.60353851 441.00131226]
[92.51033020 433.19967651]
[106.95206451 428.85372925]
[106.32808685 413.86669922]
[105.70410919 398.87969971]
[105.08013153 383.89266968]
[104.45615387 368.90567017]
[103.83217621 353.91864014]
[103.20819855 338.93164062]
[102.58422089 323.94461060]
[101.96024323 308.95761108]
[93.70020294 296.56320190]
[100.85674286 282.45312500]
[100.07689667 267.47338867]
[99.14126587 252.50260925]
[98.20564270 237.53181458]
[97.27001190 222.56101990]
[84.61939240 214.74438477]
[78.93000793 200.81259155]
[82.57774353 186.02923584]
[94.36720276 176.11386108]
[93.43157959 161.14306641]
[92.49594879 146.17227173]
[81.48934174 156.36318970]
[66.49427032 155.97880554]
[56.02423859 145.23736572]
[56.02365875 130.23736572]
[66.49285126 119.49510956]
[81.48789978 119.10956573]
[92.49594879 129.30102539]
[93.43157959 114.33022308]
[85.97666931 101.31391907]
[72.59038544 94.54579926]
[59.20409775 87.77768707]
[45.81781387 81.00957489]
[33.39240265 89.94644928]
[18.23545647 92.07379913]
[3.82993364 86.90277100]
[-6.51388359 75.62163544]
[-10.41906166 60.82271194]
[-6.98821974 45.90668488]
[2.99026060 34.30114365]
[17.22339630 28.67296410]
[32.44051743 30.31545639]
[45.14484406 38.85118866]
[52.41701126 52.31871033]
[52.58592606 67.62329102]
[65.97221375 74.39140320]
[79.35849762 81.15951538]
[92.74478149 87.92763519]
[84.07470703 75.68713379]
[89.03202820 61.52997971]
[103.44423676 57.37205887]
[115.18076324 66.71302795]
[114.36310577 81.69080353]
[122.08718872 68.83239746]
[129.81127930 55.97399521]
[137.53535461 43.11559296]
[139.29107666 34.08401871]
[145.55625916 30.07240486]
[131.66714478 35.73741913]
[116.68860626 34.93527603]
[103.48394775 27.81931114]
[94.57736206 15.74981213]
[91.67144012 1.03398335]
[95.32167053 -13.51509953]
[104.83028412 -25.11623573]
[118.37960052 -31.55175209]
[133.37954712 -31.59143829]
[146.96273804 -25.22770691]
[156.53259277 -13.67704773]
[160.25976562 0.85251635]
[157.43234253 15.58215523]
[168.31117249 5.25495052]
[179.18998718 -5.07225466]
[190.06881714 -15.39945984]
[200.94764709 -25.72666359]
[211.82646179 -36.05386734]
[205.51287842 -49.81676865]
[204.01268005 -64.88421631]
[207.48857117 -79.62181854]
[215.56353760 -92.43094635]
[227.36166382 -101.92215729]
[241.60316467 -107.06591797]
[256.74322510 -107.30426788]
[271.13961792 -102.61136627]
[283.23065186 -93.49624634]
[291.70483398 -80.94766235]
[295.64291382 -66.32678223]
[294.61776733 -51.21957397]
[288.74053955 -37.26475143]
[278.64880371 -25.97603226]
[265.43716431 -18.57793045]
[250.53880310 -15.87293625]
[235.56971741 -18.15446854]
[222.15367126 -25.17504311]
[211.27484131 -14.84783936]
[200.39602661 -4.52063417]
[189.51719666 5.80657101]
[178.63836670 16.13377571]
[167.75955200 26.46098137]
[158.25119019 38.06232071]
[150.39376831 50.83967972]
[142.66967773 63.69808197]
[134.94558716 76.55648041]
[127.22151184 89.41488647]
[108.40236664 115.26585388]
[107.46674347 130.23664856]
[107.46674347 145.23664856]
[108.40236664 160.20744324]
[109.33799744 175.17822266]
[122.27025604 183.54858398]
[127.73025513 197.76272583]
[123.81974792 212.29447937]
[112.24079895 221.62539673]
[113.17642975 236.59619141]
[114.11206055 251.56698608]
[115.04769135 266.53778076]
[118.72653961 274.97091675]
[115.84375763 281.82913208]
[124.14842987 295.29550171]
[116.94725800 308.33361816]
[117.57123566 323.32064819]
[118.19521332 338.30764771]
[118.81919098 353.29467773]
[119.44316864 368.28167725]
[120.06714630 383.26870728]
[120.69112396 398.25570679]
[121.31510162 413.24273682]
[121.93907928 428.22973633]
[136.69207764 431.36019897]
[150.20271301 438.06195068]
[161.62170410 447.91372681]
[170.23121643 460.29626465]
[175.49005127 474.43115234]
[177.06765747 489.42990112]
[174.86485291 504.34963989]
[169.02011108 518.25250244]
[159.90083313 530.26458740]
[148.08026123 539.63073730]
[134.30145264 545.76220703]
[119.43054962 548.27362061]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[21 128]
[22 126]
[23 125]
[24 124]
[25 123]
[29 119]
[30 118]
[31 117]
[38 116]
[39 115]
[40 58]
[41 57]
[42 56]
[43 55]
[63 114]
[64 113]
[65 112]
[66 111]
[68 110]
[81 109]
[82 108]
[83 107]
[84 106]
[85 105]
[86 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
