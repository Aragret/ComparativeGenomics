%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAUCAAUAGGGGGGGGGGCUCAUCAUUAAUAAUCAUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCxxxxxxxxxxGACAUCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCCCCCCCCCCCUAUCAAUA\
) } def
/len { sequence length } bind def

/coor [
[124.31989288 425.36148071]
[110.47395325 419.34545898]
[98.76528931 409.81604004]
[90.06276703 397.48037720]
[85.01216125 383.25384521]
[83.98827362 368.19216919]
[87.06707001 353.41302490]
[94.02009583 340.01309204]
[104.33137512 328.98675537]
[117.23575592 321.15225220]
[131.77565002 317.09094238]
[131.77565002 302.09094238]
[131.77565002 287.09094238]
[131.77565002 272.09094238]
[131.77565002 257.09094238]
[131.77565002 242.09094238]
[131.77565002 227.09094238]
[131.77565002 212.09094238]
[131.77565002 197.09094238]
[131.77565002 182.09094238]
[123.42708588 173.28134155]
[123.34265900 160.74293518]
[132.11573792 151.23046875]
[132.42779541 136.23371887]
[132.73985291 121.23696136]
[97.14835358 134.33659363]
[72.58826447 111.90460968]
[57.77050400 114.23571014]
[42.95274734 116.56681824]
[28.13498878 118.89791870]
[20.22262955 132.38601685]
[5.47417021 137.58378601]
[-9.14661884 132.03703308]
[-16.73624802 118.36474609]
[-13.71112537 103.02256012]
[-1.49962282 93.25458527]
[14.13236237 93.67297363]
[25.80388451 104.08016205]
[40.62164307 101.74906158]
[55.43939972 99.41795349]
[70.25715637 97.08685303]
[87.79896545 67.77783203]
[126.57839203 71.42560577]
[115.48707581 61.32695770]
[104.39575958 51.22830963]
[93.30444336 41.12965775]
[82.21312714 31.03100967]
[68.80136871 38.09504318]
[53.78197861 40.14289474]
[38.96862030 36.92728043]
[26.15007591 28.83649635]
[16.87425232 16.84754753]
[12.26124573 2.40815806]
[12.86810207 -12.73804760]
[18.62153816 -26.76208878]
[28.82680130 -37.97049713]
[42.25155640 -45.00980377]
[57.27469635 -47.02997208]
[72.08209991 -43.78706360]
[84.88571167 -35.67267227]
[94.13942719 -23.66664886]
[98.72581482 -9.21878338]
[98.09104919 5.92627811]
[92.31177521 19.93969345]
[103.40309143 30.03834343]
[114.49440765 40.13699341]
[125.58572388 50.23564148]
[136.67703247 60.33429337]
[131.78504944 46.15443420]
[120.85338593 35.88317108]
[115.33430481 21.93542099]
[116.27795410 6.96513319]
[123.50478363 -6.17917824]
[135.63969421 -14.99644089]
[150.37365723 -17.80892563]
[164.90315247 -14.08147717]
[176.46351624 -4.52334738]
[182.85508728 9.04676247]
[182.86167908 24.04676056]
[176.48202515 37.62247849]
[164.93302917 47.18924713]
[159.16607666 61.03635406]
[170.86570740 51.64919281]
[182.56532288 42.26203156]
[168.98829651 -0.33309817]
[178.00581360 -12.31993103]
[187.02334595 -24.30676270]
[196.04087830 -36.29359436]
[195.22801208 -52.31604385]
[207.34300232 -62.83301163]
[223.09225464 -59.77678680]
[230.39430237 -45.49183655]
[223.64762878 -30.93635941]
[208.02770996 -27.27606583]
[199.01017761 -15.28923321]
[189.99266052 -3.30240083]
[180.97512817 8.68443203]
[185.54598999 14.63062191]
[199.25859070 32.46919250]
[213.16114807 26.83723450]
[227.06370544 21.20527840]
[240.96626282 15.57332134]
[253.37637329 4.02232885]
[267.91140747 12.74981785]
[263.54870605 29.13282776]
[246.59822083 29.47587776]
[232.69566345 35.10783386]
[218.79310608 40.73979187]
[204.89054871 46.37174606]
[191.95249939 53.96165466]
[180.25286865 63.34881592]
[168.55323792 72.73597717]
[172.56098938 87.19066620]
[187.42402649 89.21300507]
[202.38876343 82.50563812]
[215.51957703 92.32978821]
[213.30860901 108.57920837]
[198.03031921 114.53788757]
[185.40170288 104.07604980]
[170.53865051 102.05371094]
[164.83813477 106.92754364]
[178.98033142 111.92739105]
[181.72131348 126.67482758]
[170.32008362 136.42224121]
[156.17800903 131.42207336]
[153.43711853 116.67519379]
[147.73660278 121.54901886]
[147.42454529 136.54577637]
[147.11250305 151.54252625]
[156.36676025 167.42768860]
[146.77565002 182.09094238]
[146.77565002 197.09094238]
[146.77565002 212.09094238]
[146.77565002 227.09094238]
[146.77565002 242.09094238]
[146.77565002 257.09094238]
[146.77565002 272.09094238]
[146.77565002 287.09094238]
[146.77565002 302.09094238]
[146.77565002 317.09094238]
[161.31553650 321.15225220]
[174.21990967 328.98675537]
[184.53120422 340.01309204]
[191.48422241 353.41302490]
[194.56301880 368.19216919]
[193.53912354 383.25384521]
[188.48852539 397.48037720]
[179.78599548 409.81604004]
[168.07733154 419.34545898]
[154.23139954 425.36148071]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 129]
[24 128]
[25 127]
[27 41]
[28 40]
[29 39]
[30 38]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[82 112]
[83 111]
[84 110]
[85 97]
[86 96]
[87 95]
[88 94]
[99 109]
[100 108]
[101 107]
[102 106]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
