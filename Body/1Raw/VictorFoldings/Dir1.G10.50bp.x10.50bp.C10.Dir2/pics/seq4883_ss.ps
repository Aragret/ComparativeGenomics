%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAUAACCAGGGGGGGGGGAUACUACCAAUCAAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCAAUAxxxxxxxxxxCUGACCCCUCUCCUUCAUAAAUUAUUCAGCUUCCUACACUAUUAAAGUUUCCCCCCCCCCACCACAACCA\
) } def
/len { sequence length } bind def

/coor [
[84.54943848 425.11132812]
[70.70350647 419.09530640]
[58.99484253 409.56588745]
[50.29231644 397.23022461]
[45.24171448 383.00369263]
[44.21782303 367.94201660]
[47.29662323 353.16287231]
[54.24964523 339.76293945]
[64.56092834 328.73660278]
[77.46530914 320.90209961]
[92.00519562 316.84078979]
[92.00519562 301.84078979]
[92.00519562 286.84078979]
[92.00519562 271.84078979]
[92.00519562 256.84078979]
[92.00519562 241.84077454]
[92.00519562 226.84077454]
[92.00519562 211.84077454]
[92.00519562 196.84077454]
[92.00519562 181.84077454]
[92.00519562 166.84077454]
[84.26789856 154.11351013]
[92.00519562 140.31333923]
[92.00519562 125.31333160]
[92.00519562 110.31333160]
[84.11705017 123.07174683]
[72.72899628 132.83454895]
[58.91520691 138.68084717]
[43.97866821 140.05920410]
[29.32826996 136.83959961]
[16.34590912 129.32572937]
[6.25614452 118.22632599]
[0.01069223 104.58834839]
[-1.80134606 89.69820404]
[0.99095011 74.96038818]
[8.12419796 61.76506042]
[18.92555428 51.35685730]
[32.37618256 44.71753311]
[47.20735168 42.47334290]
[62.02011490 44.83597183]
[75.41725922 51.58256531]
[86.13510132 62.07674408]
[93.16268158 75.32865143]
[95.83713531 90.08849335]
[101.32416534 76.12810516]
[106.81119537 62.16771698]
[112.29822540 48.20732498]
[117.78525543 34.24693680]
[123.27229309 20.28654671]
[111.63109589 10.64600277]
[103.55060577 -2.10343575]
[99.81153870 -16.70643997]
[100.76787567 -31.72977066]
[106.31340790 -45.70294571]
[115.89334869 -57.26217270]
[128.55981445 -65.28344727]
[143.06559753 -68.99185181]
[157.98699951 -68.03640747]
[163.47402954 -81.99679565]
[168.96105957 -95.95719147]
[174.44808960 -109.91757965]
[161.30357361 -117.18922424]
[149.22070312 -126.11441803]
[138.40620422 -136.54042053]
[129.04513550 -148.28884888]
[121.29769135 -161.15866089]
[115.29642487 -174.92964172]
[111.14402771 -189.36614990]
[108.91156006 -204.22114563]
[108.63721466 -219.24046326]
[110.32569122 -234.16708374]
[113.94808960 -248.74560547]
[119.44243622 -262.72656250]
[126.71471405 -275.87072754]
[135.64047241 -287.95318604]
[146.06700134 -298.76718140]
[157.81587219 -308.12768555]
[170.68605042 -315.87451172]
[184.45732117 -321.87512207]
[198.89401245 -326.02682495]
[213.74913025 -328.25860596]
[228.76844788 -328.53222656]
[243.69499207 -326.84304810]
[258.27334595 -323.21994019]
[272.25402832 -317.72494507]
[285.39785767 -310.45202637]
[297.47988892 -301.52569580]
[308.29339600 -291.09866333]
[317.65332031 -279.34933472]
[325.39956665 -266.47879028]
[331.39950562 -252.70724487]
[335.55053711 -238.27033997]
[337.78158569 -223.41513062]
[338.05450439 -208.39579773]
[336.36462402 -193.46932983]
[332.74081421 -178.89115906]
[327.24514771 -164.91072083]
[319.97161865 -151.76724243]
[311.04470825 -139.68563843]
[300.61715698 -128.87263489]
[288.86737061 -119.51325226]
[275.99645996 -111.76763916]
[262.22463989 -105.76834106]
[247.78753662 -101.61800385]
[232.93222046 -99.38765717]
[217.91285706 -99.11545563]
[202.98648071 -100.80606079]
[188.40847778 -104.43054962]
[182.92144775 -90.47015381]
[177.43441772 -76.50976562]
[171.94738770 -62.54937744]
[183.52604675 -53.08916473]
[191.62471008 -40.49623871]
[195.43966675 -25.99706078]
[194.58514404 -11.00837326]
[189.13224792 3.00121427]
[179.60328674 14.65513611]
[166.92170715 22.80412292]
[152.32266235 26.63953209]
[137.23268127 25.77357864]
[131.74565125 39.73396683]
[126.25861359 53.69435883]
[120.77158356 67.65474701]
[115.28455353 81.61513519]
[109.79752350 95.57552338]
[107.00519562 110.31333160]
[107.00519562 125.31333160]
[107.00519562 140.31333923]
[114.74250031 154.11351013]
[107.00519562 166.84077454]
[107.00519562 181.84077454]
[107.00519562 196.84077454]
[107.00519562 211.84077454]
[107.00519562 226.84077454]
[107.00519562 241.84077454]
[107.00519562 256.84078979]
[107.00519562 271.84078979]
[107.00519562 286.84078979]
[107.00519562 301.84078979]
[107.00519562 316.84078979]
[121.54508209 320.90209961]
[134.44946289 328.73660278]
[144.76074219 339.76293945]
[151.71377563 353.16287231]
[154.79257202 367.94201660]
[153.76867676 383.00369263]
[148.71807861 397.23022461]
[140.01554871 409.56588745]
[128.30688477 419.09530640]
[114.46095276 425.11132812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[24 127]
[25 126]
[44 125]
[45 124]
[46 123]
[47 122]
[48 121]
[49 120]
[58 111]
[59 110]
[60 109]
[61 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
