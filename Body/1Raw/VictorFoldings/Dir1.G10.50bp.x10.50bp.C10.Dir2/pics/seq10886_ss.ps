%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCCCUCAGGGGGGGGGGGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACUCAAGCACUAUxxxxxxxxxxCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUCCCCCCCCCCACUCCACUCA\
) } def
/len { sequence length } bind def

/coor [
[-10.04724789 351.48684692]
[-23.76426125 345.02743530]
[-37.10372162 337.82052612]
[-50.02493286 329.88812256]
[-62.48847961 321.25442505]
[-74.45634460 311.94580078]
[-85.89200592 301.99057007]
[-96.76058960 291.41918945]
[-107.02893829 280.26382446]
[-116.66572571 268.55859375]
[-125.64154816 256.33911133]
[-133.92903137 243.64273071]
[-141.50289917 230.50816345]
[-154.88919067 237.27627563]
[-168.27546692 244.04438782]
[-181.66175842 250.81250000]
[-190.48616028 263.94415283]
[-205.33535767 262.78189087]
[-218.72163391 269.54998779]
[-232.10792542 276.31811523]
[-245.49420166 283.08624268]
[-258.88049316 289.85433960]
[-272.26678467 296.62246704]
[-276.95870972 311.71423340]
[-290.98657227 318.99395752]
[-306.02789307 314.14273071]
[-313.15890503 300.03866577]
[-308.14892578 285.04949951]
[-293.97027588 278.06799316]
[-279.03488159 283.23617554]
[-265.64862061 276.46804810]
[-252.26232910 269.69995117]
[-238.87603760 262.93182373]
[-225.48974609 256.16372681]
[-212.10346985 249.39559937]
[-204.23654175 236.74804688]
[-188.42987061 237.42622375]
[-175.04359436 230.65809631]
[-161.65730286 223.88998413]
[-148.27101135 217.12187195]
[-154.23934937 203.52961731]
[-159.46420288 189.63459778]
[-163.93026733 175.47746277]
[-167.62449646 161.09959412]
[-170.53608704 146.54304504]
[-172.65652466 131.85038757]
[-173.97961426 117.06458282]
[-174.50148010 102.22887421]
[-174.22059631 87.38665009]
[-173.13778687 72.58131409]
[-171.25621033 57.85616302]
[-168.58137512 43.25425339]
[-165.12109375 28.81829262]
[-160.88551331 14.59049320]
[-155.88697815 0.61246568]
[-150.14015198 -13.07491398]
[-143.66180420 -26.43161774]
[-136.47090149 -39.41858673]
[-128.58847046 -51.99784088]
[-120.03754425 -64.13259888]
[-110.84315491 -75.78736115]
[-101.03216553 -86.92805481]
[-90.63328552 -97.52210236]
[-79.67692566 -107.53851318]
[-68.19511414 -116.94800568]
[-56.22143173 -125.72305298]
[-43.79089737 -133.83799744]
[-30.93986702 -141.26910400]
[-17.70591354 -147.99465942]
[-4.12774372 -153.99496460]
[9.75493717 -159.25250244]
[23.90152931 -163.75187683]
[38.27066422 -167.47994995]
[52.82031631 -170.42579651]
[67.50794220 -172.58081055]
[82.29058838 -173.93869019]
[97.12502289 -174.49546814]
[111.96786499 -174.24952698]
[126.77571106 -173.20155334]
[141.50524902 -171.35464478]
[156.11341858 -168.71418762]
[170.55747986 -165.28790283]
[184.79521179 -161.08581543]
[198.78497314 -156.12020874]
[212.48583984 -150.40560913]
[225.85775757 -143.95872498]
[238.86160278 -136.79840088]
[251.45938110 -128.94560242]
[263.61422729 -120.42326355]
[275.29061890 -111.25632477]
[286.45434570 -101.47159576]
[297.07284546 -91.09767914]
[307.11502075 -80.16491699]
[316.55151367 -68.70528412]
[325.35470581 -56.75229263]
[333.49890137 -44.34089661]
[340.96023560 -31.50738907]
[347.71691895 -18.28930473]
[353.74917603 -4.72529459]
[367.76589966 -10.06680679]
[381.78259277 -15.40831947]
[388.01626587 -29.93129349]
[402.72424316 -35.71503830]
[417.18048096 -29.32816124]
[422.80841064 -14.55988312]
[416.26904297 -0.17196032]
[401.44210815 5.29950666]
[387.12411499 -1.39160657]
[373.10739136 3.94990611]
[359.09069824 9.29141808]
[363.70361328 23.73446083]
[367.51208496 38.41016006]
[370.50451660 53.27374268]
[372.67172241 68.27986908]
[374.00711060 83.38275909]
[374.50662231 98.53634644]
[374.16873169 113.69439697]
[372.99447632 128.81066895]
[370.98739624 143.83905029]
[368.15365601 158.73370361]
[364.50189209 173.44917297]
[360.04324341 187.94058228]
[354.79129028 202.16372681]
[348.76208496 216.07521057]
[341.97399902 229.63259888]
[334.44778442 242.79452515]
[326.20632935 255.52084351]
[317.27481079 267.77273560]
[307.68048096 279.51281738]
[297.45260620 290.70526123]
[286.62237549 301.31594849]
[275.22283936 311.31253052]
[263.28878784 320.66445923]
[250.85659790 329.34323120]
[237.96418762 337.32238770]
[224.65092468 344.57754517]
[210.95739746 351.08660889]
[196.92538452 356.82971191]
[182.59768677 361.78933716]
[168.01802063 365.95034790]
[153.23086548 369.30001831]
[138.28131104 371.82821655]
[123.21498108 373.52713013]
[108.07783508 374.39166260]
[92.91604614 374.41909790]
[77.77586365 373.60943604]
[62.70348358 371.96508789]
[47.74487686 369.49105835]
[32.94568253 366.19494629]
[18.35103989 362.08676147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 40]
[14 39]
[15 38]
[16 37]
[18 35]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
