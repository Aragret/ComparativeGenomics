%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAACUAAAAGGGGGGGGGGAUAUUAAACACAAACUACCACCUACCUCCCUCACCAAAGCCCAUAAAAAUxxxxxxxxxxAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCCCCCCCCCCCAAAUAAAA\
) } def
/len { sequence length } bind def

/coor [
[78.61117554 572.48681641]
[64.76524353 566.47082520]
[53.05657959 556.94140625]
[44.35405350 544.60571289]
[39.30345154 530.37921143]
[38.27956009 515.31750488]
[41.35836029 500.53836060]
[48.31138229 487.13842773]
[58.62266541 476.11209106]
[71.52704620 468.27758789]
[86.06693268 464.21627808]
[86.06693268 449.21627808]
[86.06693268 434.21627808]
[86.06693268 419.21627808]
[86.06693268 404.21627808]
[86.06693268 389.21627808]
[86.06693268 374.21627808]
[86.06693268 359.21627808]
[86.06693268 344.21627808]
[86.06693268 329.21627808]
[86.06693268 314.21627808]
[77.71837616 305.40667725]
[77.63394928 292.86825562]
[86.40702820 283.35580444]
[86.71908569 268.35903931]
[76.25517273 257.82141113]
[76.35800934 242.60810852]
[87.48181152 231.70404053]
[87.79386902 216.70729065]
[84.76903534 209.91052246]
[88.27165222 201.40267944]
[88.89562988 186.41566467]
[89.51960754 171.42864990]
[90.14358521 156.44163513]
[75.87482452 151.96905518]
[63.24929810 143.95671082]
[53.12697220 132.95034790]
[46.19730377 119.69964600]
[42.93228912 105.10714722]
[43.55432510 90.16677856]
[48.02103806 75.89617920]
[56.02819061 63.26736832]
[67.03038788 53.14051819]
[80.27824402 46.20540237]
[94.86940002 42.93439484]
[95.49337769 27.94737816]
[96.11735535 12.96036243]
[85.88291931 23.92650223]
[71.38161469 27.76217270]
[57.06372833 23.29025841]
[47.32322311 11.88313007]
[45.14934158 -2.95850801]
[51.20921707 -16.67994690]
[63.64315414 -25.07025337]
[78.63533020 -25.55454826]
[91.58484650 -17.98420715]
[98.51781464 -4.68168497]
[101.92079163 -19.29057693]
[105.32376862 -33.89947128]
[108.57460022 -48.54297256]
[111.67292023 -63.21949768]
[106.95296478 -78.32024384]
[117.15229034 -89.17488098]
[120.25061035 -103.85140228]
[109.83652496 -93.05571747]
[96.52325439 -86.14508820]
[81.70123291 -83.84124756]
[66.91846466 -86.38481140]
[53.71884537 -93.51013184]
[43.48094559 -104.47303772]
[37.27400208 -118.12858582]
[35.74626160 -133.05058289]
[39.05728149 -147.68058777]
[46.86126328 -160.49066162]
[58.34315872 -170.14291382]
[72.30381012 -175.62927246]
[87.28517914 -176.37675476]
[101.72261047 -172.30729675]
[114.10826874 -163.84588623]
[123.14861298 -151.87625122]
[127.89946747 -137.64848328]
[127.86416626 -122.64555359]
[135.85408020 -135.34048462]
[143.84399414 -148.03541565]
[151.83390808 -160.73034668]
[159.82382202 -173.42527771]
[157.68191528 -189.32469177]
[168.88075256 -200.81233215]
[184.82954407 -199.07583618]
[193.29374695 -185.44731140]
[187.78034973 -170.38139343]
[172.51875305 -165.43536377]
[164.52883911 -152.74043274]
[156.53892517 -140.04550171]
[148.54901123 -127.35057068]
[140.55909729 -114.65563965]
[134.92713928 -100.75308228]
[131.82881165 -86.07655334]
[136.77038574 -72.02557373]
[126.34944153 -60.12117386]
[123.25112152 -45.44464874]
[124.95783234 -38.20360184]
[119.93266296 -30.49649239]
[116.52968597 -15.88759995]
[113.12670898 -1.27870715]
[111.10437012 13.58434010]
[110.48039246 28.57135582]
[109.85641479 43.55837250]
[124.12517548 48.03094864]
[136.75070190 56.04328918]
[146.87303162 67.04965210]
[153.80270386 80.30035400]
[157.06770325 94.89285278]
[156.44567871 109.83322144]
[151.97895813 124.10382080]
[143.97181702 136.73263550]
[132.96960449 146.85948181]
[119.72175598 153.79460144]
[105.13059998 157.06561279]
[104.50662231 172.05262756]
[103.88264465 187.03964233]
[103.25866699 202.02665710]
[102.79062653 217.01934814]
[102.47856903 232.01609802]
[113.13915253 243.37345886]
[112.60904694 258.57785034]
[101.71584320 268.67111206]
[101.40378571 283.66787720]
[110.65804291 299.55303955]
[101.06693268 314.21627808]
[101.06693268 329.21627808]
[101.06693268 344.21627808]
[101.06693268 359.21627808]
[101.06693268 374.21627808]
[101.06693268 389.21627808]
[101.06693268 404.21627808]
[101.06693268 419.21627808]
[101.06693268 434.21627808]
[101.06693268 449.21627808]
[101.06693268 464.21627808]
[115.60681915 468.27758789]
[128.51119995 476.11209106]
[138.82247925 487.13842773]
[145.77551270 500.53836060]
[148.85430908 515.31750488]
[147.83041382 530.37921143]
[142.77981567 544.60571289]
[134.07728577 556.94140625]
[122.36862946 566.47082520]
[108.52268982 572.48681641]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 128]
[25 127]
[28 124]
[29 123]
[31 122]
[32 121]
[33 120]
[34 119]
[45 108]
[46 107]
[47 106]
[57 105]
[58 104]
[59 103]
[60 101]
[61 100]
[63 98]
[64 97]
[82 96]
[83 95]
[84 94]
[85 93]
[86 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
