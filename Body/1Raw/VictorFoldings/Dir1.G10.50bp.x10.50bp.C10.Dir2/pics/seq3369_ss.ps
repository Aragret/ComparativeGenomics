%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUUCUAGGCUAGGGGGGGGGGUAUACAACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUACUACxxxxxxxxxxACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUCCCCCCCCCCAAAUUAUAGGCUA\
) } def
/len { sequence length } bind def

/coor [
[100.73916626 414.98049927]
[86.46739960 410.17105103]
[73.56341553 402.40567017]
[62.63076019 392.04751587]
[54.18077469 379.58108521]
[48.60867691 365.58944702]
[46.17508698 350.72705078]
[46.99382782 335.68896484]
[51.02660370 321.17858887]
[58.08479691 307.87460327]
[67.83827972 296.39926147]
[79.83087158 287.28927612]
[93.50164795 280.97073364]
[108.21120453 277.73916626]
[108.21120453 262.73916626]
[108.21120453 247.73916626]
[108.21120453 232.73916626]
[108.21120453 217.73916626]
[108.21120453 202.73916626]
[108.21120453 187.73916626]
[108.21120453 172.73916626]
[108.21120453 157.73916626]
[108.21120453 142.73916626]
[71.51010895 118.04108429]
[80.69234467 85.87530518]
[71.97297668 73.66986847]
[63.25360870 61.46443558]
[54.53424072 49.25899887]
[54.04508972 70.37139893]
[41.40218353 85.70874023]
[23.19337654 89.67459869]
[7.55515337 82.05532074]
[0.54902387 67.49690247]
[-14.39020538 66.14804077]
[-29.32943535 64.79918671]
[-37.11735916 77.92591095]
[-49.83425903 86.36647797]
[-64.95518494 88.44500732]
[-79.47787476 83.74879456]
[-90.51882172 73.21028900]
[-95.88585663 58.92191315]
[-94.51333618 43.72063065]
[-86.67377472 30.62467194]
[-73.92373657 22.23424911]
[-58.79473877 20.21528435]
[-44.29066086 24.96864700]
[-33.29129410 35.55055237]
[-27.98057556 49.85995483]
[-13.04134560 51.20881653]
[1.89788413 52.55767441]
[3.81676197 41.52174377]
[11.35867405 31.03578568]
[1.69133580 19.56658363]
[-7.97600222 8.09738255]
[-17.64334106 -3.37181830]
[-32.45344543 -8.93700886]
[-34.73999023 -23.65505791]
[-44.40732956 -35.12425995]
[-60.20593643 -37.91415787]
[-67.74811554 -52.07378769]
[-61.24814224 -66.74109650]
[-45.69224548 -70.66458130]
[-33.01358032 -60.83447266]
[-32.93812943 -44.79159546]
[-23.27079010 -33.32239532]
[-9.15215778 -28.57756042]
[-6.17413902 -13.03915596]
[3.49319887 -1.56995523]
[13.16053677 9.89924622]
[22.82787514 21.36844635]
[30.29036903 20.61931801]
[27.30510902 5.91937828]
[24.31984901 -8.78056145]
[21.33459091 -23.48050117]
[18.34933090 -38.18043900]
[13.56284523 -52.39626312]
[21.69472504 -65.00072479]
[36.61965561 -66.49954987]
[47.09546661 -55.76375580]
[45.23057175 -40.87893677]
[45.22676849 -25.87893867]
[45.22296143 -10.87893963]
[45.21915817 4.12106037]
[45.21535492 19.12105942]
[52.67784882 18.37193108]
[59.87257004 5.21001625]
[67.06729126 -7.95189810]
[74.26200867 -21.11381149]
[81.45673370 -34.27572632]
[83.74851227 -51.07406235]
[100.52479553 -53.52208328]
[107.52128601 -38.07910919]
[94.61864471 -27.08100510]
[87.42392731 -13.91909122]
[80.22920227 -0.75717664]
[73.03448486 12.40473747]
[65.83975983 25.56665230]
[66.73967743 40.53963089]
[75.45904541 52.74506760]
[84.17841339 64.95050049]
[92.89777374 77.15593719]
[103.75978851 69.77760315]
[119.30049896 68.44672394]
[136.00167847 75.54720306]
[150.28596497 70.96907806]
[164.57025146 66.39095306]
[178.85453796 61.81282425]
[187.44406128 48.26293182]
[203.40820312 46.67359543]
[214.50061035 58.26401138]
[212.21217346 74.14300537]
[198.29835510 82.12957764]
[183.43266296 76.09710693]
[169.14837646 80.67523193]
[154.86408997 85.25335693]
[140.57980347 89.83148193]
[140.50477600 97.33110809]
[140.35469055 112.33036041]
[140.27966309 119.82998657]
[154.46948242 124.69300079]
[168.65930176 129.55603027]
[182.84912109 134.41905212]
[197.03894043 139.28205872]
[211.22877502 144.14508057]
[228.17263794 143.56039429]
[233.42500305 159.68022156]
[219.38914490 169.18974304]
[206.36575317 158.33489990]
[192.17593384 153.47189331]
[177.98609924 148.60887146]
[163.79627991 143.74584961]
[149.60646057 138.88282776]
[135.41664124 134.01980591]
[123.21120453 142.73916626]
[123.21120453 157.73916626]
[123.21120453 172.73916626]
[123.21120453 187.73916626]
[123.21120453 202.73916626]
[123.21120453 217.73916626]
[123.21120453 232.73916626]
[123.21120453 247.73916626]
[123.21120453 262.73916626]
[123.21120453 277.73916626]
[137.92076111 280.97073364]
[151.59153748 287.28927612]
[163.58412170 296.39926147]
[173.33761597 307.87460327]
[180.39579773 321.17858887]
[184.42858887 335.68896484]
[185.24732971 350.72705078]
[182.81373596 365.58944702]
[177.24163818 379.58108521]
[168.79165649 392.04751587]
[157.85899353 402.40567017]
[144.95501709 410.17105103]
[130.68324280 414.98049927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[25 101]
[26 100]
[27 99]
[28 98]
[33 50]
[34 49]
[35 48]
[52 70]
[53 69]
[54 68]
[55 67]
[57 65]
[58 64]
[85 97]
[86 96]
[87 95]
[88 94]
[89 93]
[104 116]
[105 115]
[106 114]
[107 113]
[119 133]
[120 132]
[121 131]
[122 130]
[123 129]
[124 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
