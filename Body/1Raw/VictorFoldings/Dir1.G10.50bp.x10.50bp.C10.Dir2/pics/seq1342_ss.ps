%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUAAGACCGGGGGGGGGGCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACCUCAACAGUUxxxxxxxxxxUGCAAAACCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACUUUAAUUACCCCCCCCCCAGCUAAGCCC\
) } def
/len { sequence length } bind def

/coor [
[99.07436371 384.77206421]
[85.22842407 378.75604248]
[73.51976013 369.22662354]
[64.81723785 356.89096069]
[59.76663208 342.66442871]
[58.74274063 327.60275269]
[61.82154083 312.82360840]
[68.77456665 299.42367554]
[79.08584595 288.39733887]
[91.99022675 280.56283569]
[106.53011322 276.50152588]
[106.53011322 261.50152588]
[106.53011322 246.50151062]
[106.53011322 231.50151062]
[106.53011322 216.50151062]
[106.53011322 201.50151062]
[106.53011322 186.50151062]
[106.53011322 171.50151062]
[106.53011322 156.50151062]
[106.53011322 141.50151062]
[83.94089508 130.52365112]
[75.67031860 111.63517761]
[80.91899109 96.24496460]
[66.90227509 90.90345764]
[52.88556290 85.56194305]
[38.86885071 80.22042847]
[24.85213661 74.87891388]
[10.62535667 70.12509918]
[-3.78685927 65.96721649]
[-19.19098473 69.57601929]
[-29.27480888 58.61400604]
[-43.68702698 54.45611954]
[-58.09924316 50.29822922]
[-72.51145935 46.14034271]
[-80.60629272 58.89378738]
[-91.96720123 68.84900665]
[-105.67320251 75.19898224]
[-120.61322021 77.42894745]
[-135.57611084 75.35813141]
[-149.34893799 69.15440369]
[-160.81515503 59.32066727]
[-169.04528809 46.65410995]
[-173.37213135 32.18154526]
[-173.44493103 17.07620430]
[-169.25779724 2.56260490]
[-161.15016174 -10.18269920]
[-149.77925110 -20.12650299]
[-136.06687927 -26.46270561]
[-121.12463379 -28.67766190]
[-106.16381836 -26.59181213]
[-92.39724731 -20.37425041]
[-80.94090271 -10.52900410]
[-72.72350311 2.14581609]
[-68.41120148 16.62271881]
[-68.35356903 31.72812653]
[-53.94135284 35.88601303]
[-39.52913666 40.04390335]
[-25.11692238 44.20178986]
[-10.74365425 40.29558563]
[0.37102824 51.55499649]
[14.78324413 55.71288681]
[17.33803749 54.41659546]
[20.57624054 54.08794403]
[24.11920357 54.99860764]
[27.49497223 57.27352142]
[30.19364929 60.86220169]
[44.21036148 66.20371246]
[58.22707367 71.54522705]
[72.24378967 76.88674164]
[86.26049805 82.22825623]
[76.52053833 70.82066345]
[64.51176453 61.83236694]
[58.96307755 47.89636993]
[61.50731659 33.11371613]
[71.39577484 21.83460236]
[85.71850586 17.37821198]
[100.26065826 21.05595970]
[110.74280548 31.78556633]
[114.08029938 46.40955734]
[109.29192352 60.62306976]
[107.74440002 75.54302979]
[116.25548553 63.19145584]
[124.76657867 50.83988571]
[133.27766418 38.48831177]
[126.09761047 24.97145653]
[126.03318024 9.66608429]
[133.09918213 -3.91074300]
[145.67189026 -12.63917065]
[160.86219788 -14.51346874]
[175.17948914 -9.10293770]
[185.33374023 2.34912276]
[188.99159241 17.21111107]
[185.31250000 32.06785202]
[175.14186096 43.50537872]
[160.81684875 48.89542389]
[145.62924194 46.99940109]
[137.11814880 59.35097504]
[128.60705566 71.70254517]
[120.09597015 84.05412292]
[123.89092255 90.52314758]
[136.82910156 82.93345642]
[144.41857910 95.87176514]
[131.48083496 103.46120453]
[135.27578735 109.93022919]
[150.21009827 108.52793121]
[165.14439392 107.12562561]
[180.07870483 105.72332001]
[188.81698608 92.75502777]
[203.86093140 88.48730469]
[218.10726929 94.93524170]
[224.82931519 109.05431366]
[220.85310364 124.17793274]
[208.05610657 133.16519165]
[192.48065186 131.77256775]
[181.48101807 120.65763092]
[166.54670715 122.05992889]
[151.61239624 123.46223450]
[136.67808533 124.86454010]
[150.45648193 130.79379272]
[165.42555237 129.83114624]
[179.17938232 135.81713867]
[188.67620850 147.42793274]
[191.81573486 162.09568787]
[187.90362549 176.57655334]
[177.80508423 187.66796875]
[163.75346375 192.91697693]
[148.85639954 191.16273499]
[136.40847778 182.79319763]
[129.16264343 169.65934753]
[128.72149658 154.66525269]
[121.53011322 141.50151062]
[121.53011322 156.50151062]
[121.53011322 171.50151062]
[121.53011322 186.50151062]
[121.53011322 201.50151062]
[121.53011322 216.50151062]
[121.53011322 231.50151062]
[121.53011322 246.50151062]
[121.53011322 261.50152588]
[121.53011322 276.50152588]
[136.07000732 280.56283569]
[148.97438049 288.39733887]
[159.28565979 299.42367554]
[166.23869324 312.82360840]
[169.31748962 327.60275269]
[168.29359436 342.66442871]
[163.24299622 356.89096069]
[154.54046631 369.22662354]
[142.83180237 378.75604248]
[128.98587036 384.77206421]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 70]
[24 69]
[25 68]
[26 67]
[27 66]
[28 61]
[29 60]
[31 58]
[32 57]
[33 56]
[34 55]
[81 99]
[82 98]
[83 97]
[84 96]
[104 118]
[105 117]
[106 116]
[107 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
