%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGACCAACGGGGGGGGGGGGAACAAGUUACCCUAGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCAUAxxxxxxxxxxAUUUCGUACAUUACUGCCAGCCACCAUGAAUAUUGUACGGUACCAUAAAUCCCCCCCCCCACUUGACCACC\
) } def
/len { sequence length } bind def

/coor [
[87.50644684 404.05587769]
[72.62310028 401.69305420]
[58.68607712 395.96102905]
[46.44697571 387.16894531]
[36.56583023 375.79089355]
[29.57552528 362.44052124]
[25.85303879 347.83779907]
[25.59911537 332.77020264]
[28.82745171 318.05035400]
[35.36394882 304.47201538]
[44.85609818 292.76748657]
[56.79200363 283.56799316]
[70.52797699 277.36962891]
[85.32324982 274.50665283]
[85.93907928 259.51928711]
[86.55490112 244.53195190]
[87.17072296 229.54458618]
[87.78655243 214.55723572]
[88.40237427 199.56988525]
[89.01820374 184.58253479]
[89.63402557 169.59518433]
[90.24985504 154.60783386]
[90.86567688 139.62046814]
[91.48150635 124.63311768]
[83.61390686 121.42456818]
[76.95602417 115.69400024]
[72.31594849 107.89804840]
[70.32957458 98.75096130]
[71.37930298 89.15991974]
[56.39905930 89.92958069]
[41.41881943 90.69924164]
[26.43857765 91.46890259]
[13.05358982 99.90410614]
[-0.05392259 92.83003998]
[-15.03416348 93.59970093]
[-30.54219055 100.45079041]
[-41.41858673 87.44539642]
[-31.93233299 73.39379883]
[-15.80382347 78.61946106]
[-0.82358265 77.84980011]
[11.48991776 69.46965027]
[25.66891861 76.48866272]
[40.64915848 75.71900177]
[55.62939835 74.94934082]
[70.60964203 74.17967987]
[82.48646545 65.01774597]
[79.29682922 49.52139664]
[90.52832794 39.73862839]
[95.07562256 25.44449806]
[99.32846832 11.06001759]
[103.28507996 -3.40875030]
[107.24169159 -17.87751770]
[111.19829559 -32.34628677]
[109.83366394 -37.51281357]
[110.55578613 -42.20154190]
[112.81996918 -45.68622971]
[115.86961365 -47.56955338]
[120.70942688 -61.76730347]
[125.54924774 -75.96505737]
[130.38906860 -90.16281128]
[116.89126587 -96.75164032]
[104.32572937 -104.98027802]
[92.89062500 -114.71894836]
[82.76631165 -125.81406403]
[74.11245728 -138.09062195]
[67.06555176 -151.35502625]
[61.73672485 -165.39805603]
[58.21002960 -179.99826050]
[56.54108047 -194.92533875]
[56.75620270 -209.94389343]
[58.85200119 -224.81704712]
[62.79542542 -239.31024170]
[68.52428436 -253.19490051]
[75.94821167 -266.25201416]
[84.95014191 -278.27569580]
[95.38808441 -289.07626343]
[107.09741974 -298.48342896]
[119.89348602 -306.34878540]
[133.57446289 -312.54830933]
[147.92457581 -316.98422241]
[162.71752930 -319.58657837]
[177.71997070 -320.31427002]
[192.69534302 -319.15591431]
[207.40742493 -316.12969971]
[221.62419128 -311.28341675]
[235.12142944 -304.69345093]
[247.68627930 -296.46374512]
[259.12057495 -286.72412109]
[269.24392700 -275.62814331]
[277.89675903 -263.35086060]
[284.94256592 -250.08586121]
[290.27020264 -236.04237366]
[293.79565430 -221.44187927]
[295.46334839 -206.51466370]
[295.24697876 -191.49612427]
[293.14990234 -176.62313843]
[289.20526123 -162.13027954]
[283.47525024 -148.24610901]
[276.05023193 -135.18962097]
[267.04727173 -123.16670227]
[256.60842896 -112.36700439]
[244.89830017 -102.96083069]
[232.10157776 -95.09654236]
[218.42007446 -88.89817047]
[204.06958008 -84.46346283]
[189.27642822 -81.86237335]
[174.27391052 -81.13591766]
[159.29864502 -82.29555511]
[144.58682251 -85.32299042]
[139.74699402 -71.12524414]
[134.90718079 -56.92749023]
[130.06736755 -42.72973633]
[125.66706848 -28.38967514]
[121.71045685 -13.92090797]
[117.75384521 0.54786003]
[113.79723358 15.01662731]
[115.37683105 19.58325577]
[114.06036377 25.19171333]
[109.36975098 29.99178886]
[104.82246399 44.28591919]
[108.33734894 58.75985336]
[96.78059387 69.56503296]
[106.78948975 70.67543793]
[115.73162079 74.93153381]
[122.66700745 81.76509094]
[126.90670776 90.34407043]
[128.08045959 99.67301178]
[126.16692352 108.70816040]
[121.48415375 116.47423553]
[114.64289856 122.16964722]
[106.46885681 125.24894714]
[105.85303497 140.23629761]
[105.23720551 155.22364807]
[104.62138367 170.21099854]
[104.00555420 185.19836426]
[103.38973236 200.18571472]
[102.77390289 215.17306519]
[102.15808105 230.16041565]
[101.54225159 245.14776611]
[100.92642975 260.13513184]
[100.31060028 275.12246704]
[114.82112122 279.18960571]
[128.00227356 286.49398804]
[139.14320374 296.64172363]
[147.64311218 309.08554077]
[153.04359436 323.15435791]
[155.05342102 338.08944702]
[153.56419373 353.08541870]
[148.65623474 367.33352661]
[140.59422302 380.06539917]
[129.81291199 390.59442139]
[116.89376068 398.35278320]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[29 45]
[30 44]
[31 43]
[32 42]
[34 40]
[35 39]
[46 122]
[48 120]
[49 119]
[50 116]
[51 115]
[52 114]
[53 113]
[57 112]
[58 111]
[59 110]
[60 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
