%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAUUCUAGGGGGGGGGGGGCUAUAUACAACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUxxxxxxxxxxCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAACCCCCCCCCCAAAAACUCUA\
) } def
/len { sequence length } bind def

/coor [
[80.02745056 338.88580322]
[67.46923065 330.53463745]
[57.38300323 319.32220459]
[50.40281296 305.95330811]
[46.96742630 291.26831055]
[47.29280472 276.19033813]
[51.35848999 261.66723633]
[58.90890884 248.61187744]
[69.46943665 237.84498596]
[82.37623596 230.04335022]
[96.81796265 225.69740295]
[96.19398499 210.71038818]
[95.57000732 195.72337341]
[94.94602966 180.73635864]
[94.32205200 165.74934387]
[93.69807434 150.76231384]
[93.07409668 135.77529907]
[92.45011902 120.78829193]
[80.65348053 111.52333832]
[65.94551849 114.46881866]
[51.23755646 117.41430664]
[36.52959442 120.35978699]
[21.82163239 123.30526733]
[7.11367130 126.25075531]
[5.12607861 141.26168823]
[-1.63009620 154.81280518]
[-12.42199326 165.43418884]
[-26.07898903 171.97369385]
[-41.11967468 173.72198486]
[-55.91254807 170.48939514]
[-68.85298920 162.62658691]
[-78.53732300 150.98646545]
[-83.91505432 136.83164978]
[-84.40284729 121.69756317]
[-79.94779968 107.22582245]
[-71.03315735 94.98622131]
[-58.62590790 86.30641937]
[-44.07190323 82.12793732]
[-28.94985390 82.90402985]
[-14.90008354 88.55049896]
[-3.44660687 98.45487213]
[4.16818857 111.54279327]
[18.87615013 108.59730530]
[33.58411026 105.65182495]
[48.29207230 102.70634460]
[63.00003433 99.76086426]
[77.70800018 96.81537628]
[81.57003784 90.38617706]
[68.71175385 82.66189575]
[76.43624115 69.80372620]
[89.29412079 77.52777100]
[93.15616608 71.09857178]
[88.84857941 56.73038864]
[84.54100037 42.36220551]
[80.23341370 27.99402046]
[74.31344604 14.21163940]
[66.85853577 1.19533026]
[53.28586197 -6.93443203]
[53.67455673 -21.82396507]
[46.21964645 -34.84027481]
[31.17700768 -40.41688156]
[26.29510117 -55.69911194]
[35.31890869 -68.96374512]
[51.32613373 -70.03528595]
[62.03741074 -58.09174728]
[59.23595810 -42.29518509]
[66.69086456 -29.27887535]
[79.73031616 -22.08012581]
[79.87484741 -6.25958014]
[87.32975769 6.75672960]
[89.19548798 -8.12678623]
[97.65844727 -20.51138878]
[110.84669495 -27.65771866]
[125.84312439 -27.98507309]
[139.33065796 -21.42104340]
[148.32597351 -9.41753483]
[150.83940125 5.37038946]
[146.31498718 19.67177582]
[135.75347900 30.32328987]
[121.49101257 34.96891403]
[106.68228912 32.58108139]
[94.60159302 23.68643570]
[98.90917969 38.05461884]
[103.21676636 52.42280579]
[107.52435303 66.79098511]
[120.54065704 74.24590302]
[135.11335754 70.69113922]
[129.68778992 52.40358353]
[141.99758911 30.30882645]
[153.49940491 20.68029976]
[165.00120544 11.05177307]
[176.50300598 1.42324698]
[175.30416870 -14.04744911]
[183.45640564 -27.25050354]
[197.82501221 -33.10907364]
[212.88496399 -29.37042046]
[222.84539795 -17.47212982]
[223.87634277 -1.98933959]
[215.58134460 11.12450218]
[201.15003967 16.82685661]
[186.13153076 12.92505074]
[174.62973022 22.55357742]
[163.12792969 32.18210220]
[151.62612915 41.81063080]
[153.17527771 49.14889145]
[167.85180664 46.05057144]
[182.52833557 42.95224762]
[197.20491028 39.85415268]
[200.30278015 54.53077316]
[185.62666321 57.62877274]
[170.95013428 60.72709656]
[156.27360535 63.82541656]
[157.82276917 71.16368103]
[172.23498535 75.32157135]
[186.64720154 79.47945404]
[201.05941772 83.63734436]
[213.93588257 74.76432800]
[229.49833679 76.29550171]
[240.39862061 87.50788116]
[241.48999023 103.10733795]
[232.25711060 115.72827148]
[217.05947876 119.41147614]
[203.07295227 112.41783905]
[196.90151978 98.04956055]
[182.48930359 93.89167023]
[168.07708740 89.73378754]
[153.66487122 85.57589722]
[138.66812134 85.26383972]
[124.09542084 88.81860352]
[122.20986176 109.16812134]
[107.43713379 120.16431427]
[108.06111145 135.15132141]
[108.68508911 150.13835144]
[109.30906677 165.12536621]
[109.93304443 180.11238098]
[110.55702209 195.09939575]
[111.18099976 210.08641052]
[111.80497742 225.07342529]
[126.55798340 228.20387268]
[140.06861877 234.90562439]
[151.48759460 244.75741577]
[160.09710693 257.13995361]
[165.35595703 271.27484131]
[166.93356323 286.27355957]
[164.73075867 301.19329834]
[158.88601685 315.09619141]
[149.76672363 327.10824585]
[137.94616699 336.47439575]
[124.16735077 342.60589600]
[109.29644775 345.11727905]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[24 42]
[52 85]
[53 84]
[54 83]
[55 82]
[56 70]
[57 69]
[59 67]
[60 66]
[86 129]
[87 128]
[89 104]
[90 103]
[91 102]
[92 101]
[113 127]
[114 126]
[115 125]
[116 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
