%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUCCGAGGGGGGGGGGGCAGUACAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAUACUCAAUUGxxxxxxxxxxGUCAACGAUCCCUCCCUUACCAUCAAAUCAAUUGGCCACCAAUGGUACUGCCCCCCCCCCAACCUACGAG\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 457.45742798]
[71.19830322 451.44140625]
[59.48964310 441.91198730]
[50.78712082 429.57632446]
[45.73651886 415.34979248]
[44.71262741 400.28811646]
[47.79142761 385.50894165]
[54.74444962 372.10903931]
[65.05573273 361.08270264]
[77.96011353 353.24819946]
[92.50000000 349.18688965]
[92.50000000 334.18688965]
[92.50000000 319.18688965]
[92.50000000 304.18688965]
[92.50000000 289.18688965]
[92.50000000 274.18688965]
[92.50000000 259.18688965]
[92.50000000 244.18687439]
[92.50000000 229.18687439]
[92.50000000 214.18687439]
[92.50000000 199.18687439]
[92.50000000 184.18687439]
[92.50000000 169.18687439]
[92.50000000 154.18687439]
[92.50000000 139.18687439]
[92.50000000 124.18687439]
[79.88690186 118.22093964]
[71.63349915 105.81056976]
[70.90851593 89.97072601]
[55.97421265 88.56842041]
[41.03990555 87.16611481]
[28.93703842 96.97215271]
[13.81150341 95.33727264]
[4.53752995 83.73860931]
[-10.39677811 82.33630371]
[-25.33108521 80.93400574]
[-40.26539230 79.53170013]
[-53.48789597 88.61712646]
[-68.79267120 83.80638123]
[-74.43921661 68.78984833]
[-66.09597015 55.08693695]
[-50.16316986 53.20933914]
[-38.86309052 64.59738922]
[-23.92878151 65.99969482]
[-8.99447441 67.40200043]
[5.93983364 68.80430603]
[17.21085167 59.13477325]
[32.37633896 60.34416580]
[42.44220734 72.23180389]
[57.37651443 73.63410950]
[72.31082153 75.03641510]
[84.39080811 66.14406586]
[87.48913574 51.46754074]
[73.23634338 46.74123764]
[59.60235977 40.44881821]
[46.75864792 32.66941452]
[34.86673355 23.50086212]
[24.07616615 13.05846405]
[14.52265072 1.47354519]
[6.32633114 -11.10820198]
[-0.40971398 -24.52854919]
[-5.60077190 -38.61872101]
[-9.18155956 -53.20151901]
[-11.10704517 -68.09354401]
[-11.35301399 -83.10752106]
[-9.91637135 -98.05463409]
[-6.81518602 -112.74689484]
[-2.08845782 -126.99954987]
[4.20436954 -140.63334656]
[11.98415661 -153.47682190]
[21.15306473 -165.36845398]
[31.59578514 -176.15872192]
[43.18098831 -185.71188354]
[55.76298141 -193.90782166]
[69.18353271 -200.64347839]
[83.27385712 -205.83410645]
[97.85675812 -209.41445923]
[112.74884796 -211.33950806]
[127.76283264 -211.58502197]
[142.70989990 -210.14793396]
[157.40206909 -207.04631042]
[171.65458679 -202.31915283]
[185.28819275 -196.02590942]
[198.13142395 -188.24574280]
[210.02279663 -179.07647705]
[220.81274414 -168.63343811]
[230.36557007 -157.04794312]
[238.56112671 -144.46571350]
[245.29637146 -131.04496765]
[250.48658752 -116.95447540]
[254.06649780 -102.37146759]
[255.99110413 -87.47932434]
[256.23617554 -72.46533203]
[254.79862976 -57.51831055]
[251.69656372 -42.82622910]
[246.96899414 -28.57386208]
[240.67533875 -14.94044399]
[232.89479065 -2.09743118]
[223.72517395 9.79366207]
[213.28179932 20.58329201]
[201.69602966 30.13576889]
[189.11354065 38.33095932]
[175.69259644 45.06579971]
[161.60195923 50.25559235]
[147.01884460 53.83507156]
[132.12663269 55.75922394]
[117.11264038 56.00384521]
[102.16565704 54.56586075]
[99.06733704 69.24238586]
[118.02394104 78.51062775]
[125.05857086 96.34992981]
[139.87632751 98.68103027]
[154.69409180 101.01213837]
[169.51184082 103.34323883]
[184.32960510 105.67434692]
[200.91593933 102.16297913]
[208.88163757 117.12906647]
[196.70555115 128.92649841]
[181.99850464 120.49210358]
[167.18074036 118.16099548]
[152.36297607 115.82989502]
[137.54522705 113.49879456]
[122.72746277 111.16768646]
[116.45599365 119.24721527]
[107.50000000 124.18687439]
[107.50000000 139.18687439]
[107.50000000 154.18687439]
[107.50000000 169.18687439]
[107.50000000 184.18687439]
[107.50000000 199.18687439]
[107.50000000 214.18687439]
[107.50000000 229.18687439]
[107.50000000 244.18687439]
[107.50000000 259.18688965]
[107.50000000 274.18688965]
[107.50000000 289.18688965]
[107.50000000 304.18688965]
[107.50000000 319.18688965]
[107.50000000 334.18688965]
[107.50000000 349.18688965]
[122.03988647 353.24819946]
[134.94427490 361.08270264]
[145.25555420 372.10903931]
[152.20857239 385.50894165]
[155.28736877 400.28811646]
[154.26348877 415.34979248]
[149.21287537 429.57632446]
[140.51036072 441.91198730]
[128.80169678 451.44140625]
[114.95575714 457.45742798]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[24 127]
[25 126]
[26 125]
[29 51]
[30 50]
[31 49]
[34 46]
[35 45]
[36 44]
[37 43]
[52 109]
[53 108]
[111 123]
[112 122]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
