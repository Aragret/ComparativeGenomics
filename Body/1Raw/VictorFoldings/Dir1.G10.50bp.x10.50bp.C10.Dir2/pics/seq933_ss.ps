%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAACAAAUAGGGGGGGGGGGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCAAGxxxxxxxxxxCUAUCUCCCUAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUCCCCCCCCCCAUAAACUAAUA\
) } def
/len { sequence length } bind def

/coor [
[88.57330322 378.09173584]
[73.68996429 375.72894287]
[59.75293732 369.99691772]
[47.51383209 361.20480347]
[37.63269043 349.82678223]
[30.64238358 336.47640991]
[26.91989517 321.87368774]
[26.66597366 306.80609131]
[29.89431000 292.08621216]
[36.43080521 278.50787354]
[45.92295837 266.80337524]
[57.85886383 257.60385132]
[71.59483337 251.40548706]
[86.39010620 248.54252625]
[87.00593567 233.55517578]
[87.62175751 218.56782532]
[88.23758698 203.58045959]
[88.85340881 188.59310913]
[89.46923828 173.60575867]
[90.08506012 158.61840820]
[90.70088196 143.63105774]
[91.31671143 128.64369202]
[91.93253326 113.65634155]
[88.42337036 99.07259369]
[81.05712891 86.00589752]
[73.69088745 72.93920898]
[66.32465363 59.87251282]
[52.80756378 51.65065384]
[53.29748535 36.76411057]
[49.74090195 51.33636856]
[38.40126801 61.15536880]
[23.47018623 62.59160233]
[10.46679688 55.11417770]
[4.19769096 41.48706055]
[6.98018932 26.74739647]
[17.78576469 16.34357452]
[32.62023163 14.12127495]
[45.99938583 20.90119362]
[40.86908340 6.80580425]
[35.73878098 -7.28958511]
[23.74815941 -17.61119270]
[26.66585922 -32.21722794]
[21.53555679 -46.31261826]
[16.40525436 -60.40800858]
[11.27495289 -74.50339508]
[6.14465094 -88.59878540]
[-8.55152512 -85.47332001]
[-23.53966522 -84.42366028]
[-38.52802277 -85.47023773]
[-53.22483826 -88.59268188]
[-67.34403992 -93.73021698]
[-80.61079407 -100.78282928]
[-92.76686096 -109.61324310]
[-103.57560730 -120.04957581]
[-112.82665253 -131.88868713]
[-120.33991241 -144.90010071]
[-125.96914673 -158.83056641]
[-129.60476685 -173.40892029]
[-131.17602539 -188.35137939]
[-130.65232849 -203.36711121]
[-128.04385376 -218.16378784]
[-123.40139771 -232.45343018]
[-116.81532288 -245.95787048]
[-108.41381836 -258.41421509]
[-98.36043549 -269.58004761]
[-86.85085297 -279.23797607]
[-74.10912323 -287.20004272]
[-60.38325119 -293.31121826]
[-45.94042587 -297.45260620]
[-31.06178093 -299.54354858]
[-16.03693199 -299.54333496]
[-1.15833902 -297.45202637]
[13.28437805 -293.31027222]
[27.01008987 -287.19873047]
[39.75162125 -279.23635864]
[51.26095200 -269.57812500]
[61.31404877 -258.41204834]
[69.71523285 -245.95545959]
[76.30096436 -232.45086670]
[80.94305420 -218.16110229]
[83.55113983 -203.36434937]
[84.07445526 -188.34861755]
[82.50282288 -173.40618896]
[78.86681366 -158.82792664]
[73.23722839 -144.89761353]
[65.72363281 -131.88638306]
[56.47228622 -120.04752350]
[45.66326523 -109.61146545]
[33.50697708 -100.78136444]
[20.24003983 -93.72908783]
[25.37034225 -79.63369751]
[30.50064468 -65.53830719]
[35.63094711 -51.44292068]
[40.76124954 -37.34753036]
[52.38491440 -28.03412056]
[49.83416748 -12.41988754]
[54.96446991 1.67550194]
[60.09477234 15.77089119]
[66.36418152 29.39787102]
[79.35438538 36.68510818]
[79.39134216 52.50627136]
[86.75758362 65.57296753]
[94.12382507 78.63966370]
[101.49006653 91.70635986]
[106.39291382 88.19981384]
[113.40384674 87.37289429]
[121.21082306 90.09619904]
[135.98294067 92.70092010]
[150.75505066 95.30564117]
[165.55313110 97.75856781]
[180.37561035 100.05944824]
[195.19808960 102.36032104]
[201.58573914 100.30103302]
[207.19302368 101.62248230]
[210.57681274 105.07200623]
[225.29232788 107.97947693]
[240.00785828 110.88694763]
[255.34689331 105.08642578]
[267.86676025 115.67816925]
[264.68807983 131.76631165]
[249.08082581 136.80073547]
[237.10038757 125.60247040]
[222.38485718 122.69499969]
[207.66934204 119.78752136]
[192.89721680 117.18280029]
[178.07473755 114.88192749]
[163.25225830 112.58105469]
[156.11613464 114.67578125]
[148.15032959 110.07775879]
[133.37821960 107.47303772]
[118.60610199 104.86831665]
[106.91989136 114.27217102]
[106.30406189 129.25952148]
[105.68824005 144.24687195]
[105.07241058 159.23423767]
[104.45658875 174.22158813]
[103.84075928 189.20893860]
[103.22493744 204.19628906]
[102.60911560 219.18363953]
[101.99328613 234.17098999]
[101.37746429 249.15835571]
[115.88797760 253.22547913]
[129.06912231 260.52987671]
[140.21006775 270.67758179]
[148.70996094 283.12139893]
[154.11044312 297.19021606]
[156.12026978 312.12530518]
[154.63104248 327.12127686]
[149.72308350 341.36938477]
[141.66107178 354.10125732]
[130.87977600 364.63027954]
[117.96061707 372.38864136]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 104]
[25 103]
[26 102]
[27 101]
[29 99]
[38 98]
[39 97]
[40 96]
[42 94]
[43 93]
[44 92]
[45 91]
[46 90]
[107 131]
[108 130]
[109 129]
[110 127]
[111 126]
[112 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
