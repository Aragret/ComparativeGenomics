%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCAUCAUUGGGGGGGGGGAAUAAUCAUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUxxxxxxxxxxUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGCCCCCCCCCCUACUGAUCAUU\
) } def
/len { sequence length } bind def

/coor [
[90.01245880 527.98327637]
[75.99051666 522.43023682]
[63.79055786 513.56390381]
[54.17948532 501.94158936]
[47.76145935 488.29388428]
[44.93992233 473.47869873]
[45.89223862 458.42733765]
[50.55854416 444.08590698]
[58.64551163 431.35595703]
[69.64478302 421.03768921]
[82.86494446 413.77969360]
[97.47496033 410.03826904]
[97.47496033 395.03826904]
[97.47496033 380.03826904]
[97.47496033 365.03826904]
[97.47496033 350.03826904]
[97.47496033 335.03826904]
[97.47496033 320.03826904]
[97.47496033 305.03826904]
[97.47496033 290.03826904]
[97.47496033 275.03826904]
[82.82057953 271.94876099]
[69.12351990 265.87741089]
[56.98345947 257.08734131]
[46.93248749 245.96083069]
[39.41173935 232.98257446]
[34.75205231 218.71862793]
[33.15942383 203.79176331]
[34.70587921 188.85415649]
[39.32624817 174.55899048]
[46.82088089 161.53189087]
[56.86428833 150.34346008]
[69.01927948 141.48440552]
[82.75598907 135.34390259]
[97.47496033 132.19259644]
[97.47496033 117.19259644]
[87.59925079 105.90232086]
[72.73265076 103.90626526]
[57.86605453 101.91020203]
[42.91319656 108.64401245]
[29.76504517 98.84308624]
[31.94728661 82.58978271]
[47.21501923 76.60410309]
[59.86211014 87.04360962]
[74.72870636 89.03966522]
[89.59530640 91.03572083]
[80.11211395 79.41380310]
[86.35020447 65.77246094]
[101.34407043 65.34372711]
[108.35136414 78.60750580]
[112.30797577 64.13874054]
[116.26457977 49.66997147]
[120.22119141 35.20120621]
[124.17780304 20.73243713]
[128.13441467 6.26366997]
[114.17407227 0.73447084]
[100.90673065 -6.29694891]
[88.49344635 -14.74523354]
[77.08489990 -24.50782967]
[66.81958008 -35.46622849]
[57.82210922 -47.48740005]
[50.20169449 -60.42542648]
[44.05084991 -74.12324524]
[39.44423676 -88.41458130]
[36.43777847 -103.12595367]
[35.06796646 -118.07877350]
[35.35143280 -133.09152222]
[37.28473282 -147.98197937]
[40.84440231 -162.56936646]
[45.98722839 -176.67662048]
[52.65077972 -190.13249207]
[60.75416946 -202.77362061]
[70.19902802 -214.44657898]
[80.87070465 -225.00964355]
[92.63965607 -234.33460999]
[105.36301422 -242.30827332]
[118.88633728 -248.83384705]
[133.04545593 -253.83210754]
[147.66848755 -257.24237061]
[162.57794189 -259.02325439]
[177.59280396 -259.15316772]
[192.53083801 -257.63046265]
[207.21067810 -254.47369385]
[221.45414734 -249.72113037]
[235.08833313 -243.43049622]
[247.94773865 -235.67814636]
[259.87625122 -226.55818176]
[270.72906494 -216.18132019]
[280.37448120 -204.67350769]
[288.69534302 -192.17445374]
[295.59069824 -178.83589172]
[300.97680664 -164.81971741]
[304.78829956 -150.29609680]
[306.97891235 -135.44131470]
[307.52206421 -120.43571472]
[306.41116333 -105.46143341]
[303.65966797 -90.70025635]
[299.30096436 -76.33135986]
[293.38803101 -62.52917862]
[285.99258423 -49.46125412]
[277.20443726 -37.28622055]
[267.13021851 -26.15187073]
[255.89228821 -16.19336510]
[243.62701416 -7.53159094]
[230.48330688 -0.27169520]
[216.62071228 5.49819422]
[202.20750427 9.70803642]
[187.41865540 12.30672741]
[172.43368530 13.26272106]
[157.43450928 12.56441307]
[142.60317993 10.22028065]
[138.64657593 24.68904877]
[134.68995667 39.15781403]
[130.73335266 53.62658310]
[126.77674103 68.09535217]
[122.82012939 82.56411743]
[112.47496033 117.19259644]
[112.47496033 132.19259644]
[127.19392395 135.34390259]
[140.93063354 141.48440552]
[153.08563232 150.34346008]
[163.12904358 161.53189087]
[170.62367249 174.55899048]
[175.24403381 188.85415649]
[176.79049683 203.79176331]
[175.19786072 218.71862793]
[170.53817749 232.98257446]
[163.01742554 245.96083069]
[152.96646118 257.08734131]
[140.82640076 265.87741089]
[127.12933350 271.94876099]
[112.47496033 275.03826904]
[112.47496033 290.03826904]
[112.47496033 305.03826904]
[112.47496033 320.03826904]
[112.47496033 335.03826904]
[112.47496033 350.03826904]
[112.47496033 365.03826904]
[112.47496033 380.03826904]
[112.47496033 395.03826904]
[112.47496033 410.03826904]
[127.08496857 413.77969360]
[140.30513000 421.03768921]
[151.30439758 431.35595703]
[159.39137268 444.08590698]
[164.05767822 458.42733765]
[165.00999451 473.47869873]
[162.18846130 488.29388428]
[155.77043152 501.94158936]
[146.15936279 513.56390381]
[133.95939636 522.43023682]
[119.93745422 527.98327637]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[35 118]
[36 117]
[37 46]
[38 45]
[39 44]
[50 116]
[51 115]
[52 114]
[53 113]
[54 112]
[55 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
