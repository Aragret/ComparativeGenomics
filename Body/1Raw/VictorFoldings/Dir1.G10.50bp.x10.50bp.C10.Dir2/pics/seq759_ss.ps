%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGAACCAACGGGGGGGGGGCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCxxxxxxxxxxGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCCCCCCCCCCCUAACCAAC\
) } def
/len { sequence length } bind def

/coor [
[105.02042389 269.98544312]
[96.06439972 257.95260620]
[88.61087799 244.93548584]
[82.76673126 231.12078857]
[78.61575317 216.70657349]
[76.21747589 201.89955139]
[75.60627747 186.91200256]
[76.79092407 171.95886230]
[79.75443268 157.25451660]
[84.45431519 143.00982666]
[90.82413483 129.42726135]
[77.58155060 136.47239685]
[64.33896637 143.51753235]
[51.09637833 150.56266785]
[37.85379410 157.60780334]
[24.61120796 164.65293884]
[11.91627789 172.64285278]
[-0.16371065 181.53520203]
[-12.24369907 190.42755127]
[-24.32368660 199.31990051]
[-30.40093422 214.55140686]
[-46.66704941 216.63601685]
[-56.38884354 203.42926025]
[-49.56537247 188.51710510]
[-33.21603775 187.23991394]
[-21.13604927 178.34756470]
[-9.05605984 169.45521545]
[3.02392793 160.56286621]
[-11.74109554 157.91822815]
[-21.48559761 146.51451111]
[-21.79522133 131.51771545]
[-12.52970505 119.72151947]
[2.11358094 116.46971893]
[15.50108528 123.23542023]
[21.56813812 136.95368958]
[17.56607246 151.41033936]
[30.80865860 144.36520386]
[44.05124283 137.32006836]
[57.29383087 130.27494812]
[70.53641510 123.22980499]
[83.77899933 116.18466949]
[82.99915314 101.20495605]
[69.09659576 95.57299805]
[55.19404221 89.94104004]
[39.91940308 94.84664917]
[26.64079094 85.84342194]
[25.54442215 69.83787537]
[37.47133636 59.10809326]
[53.27222443 61.88504028]
[60.82600021 76.03849030]
[74.72855377 81.67044067]
[88.63111115 87.30239868]
[93.44537354 81.55149841]
[107.88816833 64.29879761]
[99.89824677 51.60386276]
[91.90833282 38.90893555]
[83.91841888 26.21400452]
[68.49111176 26.17093849]
[55.54854584 17.77489853]
[49.22063828 3.70503235]
[51.52660370 -11.54901791]
[61.73062134 -23.11974144]
[76.57662201 -27.31495857]
[91.32730103 -22.79599571]
[101.27576447 -11.00483418]
[103.24750519 4.29600859]
[96.61334229 18.22408867]
[104.60326385 30.91901779]
[112.59317780 43.61394882]
[120.58309174 56.30887604]
[119.65755463 41.33745956]
[118.73201752 26.36603928]
[110.80480194 13.63186359]
[108.40628052 -1.17513120]
[111.90810394 -15.76064682]
[120.76766968 -27.86470032]
[133.61221313 -35.61180878]
[148.45150757 -37.80157852]
[162.98626709 -34.09471130]
[174.96437073 -25.06557465]
[182.52983093 -12.11320972]
[184.51040649 2.75545859]
[180.59922791 17.23657417]
[171.40231323 29.08633041]
[158.34822083 36.46749496]
[150.36685181 49.16780853]
[142.38549805 61.86811829]
[155.47865295 54.54901505]
[168.57180786 47.22990799]
[181.66496277 39.91080093]
[194.75811768 32.59169769]
[180.20471191 28.95874786]
[170.44372559 17.56913948]
[169.08164978 2.63110995]
[176.62173462 -10.33603954]
[190.27809143 -16.54120445]
[205.00494385 -13.69169903]
[215.36103821 -2.84036040]
[217.51997375 12.00345898]
[210.68470764 25.35464096]
[224.80950928 20.30588531]
[238.93431091 15.25712872]
[247.07031250 1.43015969]
[262.97305298 -0.68709254]
[274.44329834 10.52954674]
[272.68206787 26.47563171]
[259.04043579 34.91868973]
[243.98306274 29.38193130]
[229.85826111 34.43068695]
[215.73345947 39.47944260]
[202.07722473 45.68485260]
[188.98406982 53.00395584]
[175.89091492 60.32306290]
[162.79776001 67.64216614]
[149.70460510 74.96127319]
[163.73950195 69.66773987]
[178.30651855 66.08975983]
[193.19677734 64.27862549]
[208.19677734 64.26030731]
[223.09141541 66.03507996]
[237.66711426 69.57748413]
[251.71490479 74.83673859]
[265.03332520 81.73741150]
[277.43145752 90.18057251]
[288.73144531 100.04514313]
[298.77133179 111.18968964]
[307.40713501 123.45439911]
[314.51498413 136.66342163]
[319.99301147 150.62734985]
[323.76266479 165.14595032]
[325.76986694 180.01104736]
[325.98587036 195.00949097]
[324.40753174 209.92622375]
[321.05752563 224.54734802]
[315.98385620 238.66322327]
[309.25930786 252.07144165]
[300.98028564 264.57974243]
[291.26547241 276.00875854]
[280.25421143 286.19464111]
[268.10437012 294.99130249]
[254.99017334 302.27264404]
[241.09965515 307.93423462]
[226.63198853 311.89486694]
[211.79463196 314.09780884]
[196.80033875 314.51144409]
[181.86410522 313.12982178]
[167.20010376 309.97280884]
[153.01858521 305.08560181]
[139.52290344 298.53833008]
[126.90658569 290.42486572]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 41]
[12 40]
[13 39]
[14 38]
[15 37]
[16 36]
[17 28]
[18 27]
[19 26]
[20 25]
[42 52]
[43 51]
[44 50]
[54 70]
[55 69]
[56 68]
[57 67]
[87 115]
[88 114]
[89 113]
[90 112]
[91 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
