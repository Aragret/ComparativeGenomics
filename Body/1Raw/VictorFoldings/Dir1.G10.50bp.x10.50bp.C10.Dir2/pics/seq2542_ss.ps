%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAGCCUGGGGGGGGGGGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAAUAUCUACAAUCxxxxxxxxxxUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACCCUCCCCCCCCCCCCAUAAACCUG\
) } def
/len { sequence length } bind def

/coor [
[106.07869720 385.18368530]
[93.20542908 377.28079224]
[83.08113098 366.07028198]
[76.52655029 352.46096802]
[74.07302856 337.55603027]
[75.91946411 322.56378174]
[81.91617584 308.69958496]
[91.57704163 297.08731079]
[104.11888885 288.66836548]
[118.52500916 284.12521362]
[118.21295166 269.12844849]
[117.90089417 254.13169861]
[117.58883667 239.13494873]
[117.27677917 224.13819885]
[116.96472931 209.14144897]
[116.65267181 194.14468384]
[116.34061432 179.14793396]
[116.02855682 164.15118408]
[115.71649933 149.15443420]
[115.40444183 134.15766907]
[88.74770355 130.80816650]
[74.63368225 112.15207672]
[59.86762238 114.79094696]
[45.10157013 117.42980957]
[30.33551216 120.06867218]
[15.56945705 122.70753479]
[12.34787846 137.56317139]
[3.68241501 150.05229187]
[-9.10551357 158.27040100]
[-24.06583977 160.96429443]
[-38.91722488 157.72317505]
[-51.39493561 149.04129028]
[-59.59621811 136.24256897]
[-62.27043152 121.27870941]
[-59.00977707 106.43160248]
[-50.31148529 93.96532440]
[-37.50198364 85.78088379]
[-22.53462029 83.12635803]
[-7.69181490 86.40653992]
[4.76301289 95.12122345]
[12.93059349 107.94148254]
[27.69664955 105.30261993]
[42.46270370 102.66374969]
[57.22875977 100.02488708]
[71.99481201 97.38602448]
[72.67432404 93.33436584]
[73.93679047 89.42491150]
[62.04441071 80.28318024]
[50.15203094 71.14144897]
[35.30883408 75.66461945]
[20.65280533 70.56752777]
[11.81948376 57.81009293]
[12.20546436 42.29782104]
[21.66233063 29.99548912]
[36.55372238 25.63360023]
[51.15359497 30.88938713]
[59.84800339 43.74189377]
[59.29376602 59.24906540]
[71.18614960 68.39080048]
[83.07852936 77.53253937]
[110.14404297 68.80936432]
[135.83657837 89.05546570]
[145.10153198 77.25882721]
[154.36648560 65.46218872]
[163.63143921 53.66554642]
[172.89637756 41.86890793]
[175.33529663 26.23681641]
[189.28140259 21.00659370]
[198.54635620 9.20995331]
[188.21313477 -2.71365714]
[180.37915039 -16.40435791]
[175.33781433 -31.34591293]
[173.27726746 -46.97530365]
[174.27333069 -62.70395279]
[178.28681946 -77.93986511]
[185.16494751 -92.10995483]
[194.64724731 -104.68154144]
[206.37538147 -115.18241882]
[219.90670776 -123.21858978]
[234.73094177 -128.48902893]
[250.28947449 -130.79693604]
[265.99636841 -130.05718994]
[281.26040649 -126.29933167]
[295.50741577 -119.66651917]
[304.27362061 -131.83834839]
[313.03982544 -144.01019287]
[321.80603027 -156.18202209]
[330.57223511 -168.35386658]
[331.67929077 -184.71560669]
[346.51965332 -191.69383240]
[359.82684326 -182.10993958]
[357.91156006 -165.82301331]
[342.74407959 -159.58766174]
[333.97787476 -147.41581726]
[325.21166992 -135.24398804]
[316.44546509 -123.07214355]
[307.67926025 -110.90030670]
[317.58105469 -100.63018799]
[325.52941895 -88.77914429]
[331.27667236 -75.71411896]
[334.64343262 -61.83992004]
[335.52398682 -47.58665085]
[333.88977051 -33.39641190]
[329.79022217 -19.70955849]
[323.35131836 -6.95105314]
[314.77169800 4.48273659]
[304.31652832 14.23635197]
[292.30923462 22.00629044]
[279.12167358 27.55045509]
[265.16247559 30.69568634]
[250.86436462 31.34318733]
[236.67088318 29.47161102]
[223.02249146 25.13776588]
[210.34300232 18.47490311]
[201.07804871 30.27154160]
[199.30181885 45.05986023]
[184.69302368 51.13385773]
[175.42807007 62.93049622]
[166.16311646 74.72713470]
[156.89817810 86.52377319]
[147.63322449 98.32041931]
[150.57870483 113.02838135]
[163.67185974 120.34748077]
[180.05299377 119.57912445]
[188.68005371 133.52566528]
[180.67823792 147.84010315]
[164.27915955 147.79696655]
[156.35275269 133.44064331]
[143.25959778 126.12152863]
[130.40119934 133.84561157]
[130.71325684 148.84237671]
[131.02531433 163.83912659]
[131.33737183 178.83587646]
[131.64942932 193.83262634]
[131.96148682 208.82939148]
[132.27352905 223.82614136]
[132.58558655 238.82289124]
[132.89764404 253.81964111]
[133.20970154 268.81640625]
[133.52175903 283.81314087]
[148.10440063 287.75311279]
[160.98561096 295.64306641]
[171.12115479 306.84338379]
[177.68940735 320.44613647]
[180.15789795 335.34857178]
[178.32652283 350.34268188]
[172.34375000 364.21289062]
[162.69456482 375.83483887]
[150.16117859 384.26638794]
[135.75962830 388.82403564]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 45]
[23 44]
[24 43]
[25 42]
[26 41]
[47 60]
[48 59]
[49 58]
[62 121]
[63 120]
[64 119]
[65 118]
[66 117]
[68 115]
[69 114]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
