%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAUUGACCUGGGGGGGGGGGCCCGUGAAGAGGCGGGCAUAACACAGCAAGACGAGAAGACCCUAUGGAGxxxxxxxxxxUCUCCAUAAAAUUCUUCUUAGUAGCUAUUACCUUCUUAUUAUUUGAUCUACCCCCCCCCCGAAAUUGCCCU\
) } def
/len { sequence length } bind def

/coor [
[94.86229706 372.87155151]
[80.84035492 367.31854248]
[68.64039612 358.45220947]
[59.02932358 346.82989502]
[52.61129761 333.18222046]
[49.78976440 318.36703491]
[50.74207687 303.31564331]
[55.40838242 288.97421265]
[63.49534988 276.24426270]
[74.49462128 265.92599487]
[87.71478271 258.66802979]
[102.32479858 254.92657471]
[102.32479858 239.92657471]
[102.32479858 224.92657471]
[102.32479858 209.92657471]
[102.32479858 194.92657471]
[102.32479858 179.92657471]
[102.32479858 164.92657471]
[102.32479858 149.92657471]
[102.32479858 134.92657471]
[102.32479858 119.92658234]
[90.17146301 111.13473511]
[75.92477417 115.82853699]
[61.67807770 120.52233887]
[47.43138504 125.21614075]
[33.18469620 129.90994263]
[18.93800354 134.60374451]
[12.04557037 148.82591248]
[-2.91189289 153.92980957]
[-17.06039047 146.88739014]
[-22.00586891 131.87680054]
[-14.81426430 117.80355835]
[0.24777262 113.01705933]
[14.24420166 120.35704803]
[28.49089432 115.66324615]
[42.73758698 110.96945190]
[56.98427963 106.27565002]
[71.23097229 101.58184814]
[85.47766113 96.88804626]
[95.46875763 85.69975281]
[98.52715302 71.01485443]
[101.58554840 56.32995605]
[104.64394379 41.64505768]
[95.99593353 31.27097511]
[94.93721771 18.00220490]
[101.63187408 6.72345066]
[113.43086243 1.45692265]
[116.79011536 -13.16208458]
[115.66072845 -22.29007912]
[120.37133789 -28.04528046]
[124.03004456 -42.59223557]
[127.68875122 -57.13919067]
[110.63388062 -61.54539871]
[101.61106110 -75.63649750]
[104.43724060 -91.23247528]
[116.42254639 -100.19854736]
[117.03837585 -115.18590546]
[117.65419769 -130.17324829]
[118.27002716 -145.16061401]
[118.88584900 -160.14796448]
[119.50167847 -175.13531494]
[106.11145782 -185.42134094]
[101.51417542 -201.49595642]
[107.32449341 -216.99603271]
[121.07728577 -225.90730286]
[121.38526154 -240.90414429]
[121.69323730 -255.90097046]
[122.00121307 -270.89782715]
[122.30919647 -285.89465332]
[122.61717224 -300.89147949]
[122.92514801 -315.88833618]
[109.49101257 -323.22198486]
[101.01345062 -335.96520996]
[99.44054413 -351.18966675]
[105.13373566 -365.39694214]
[116.78477478 -375.32226562]
[131.71632385 -378.68487549]
[146.49725342 -374.71206665]
[157.73097229 -364.31680298]
[162.83609009 -349.88778687]
[160.63946533 -334.74072266]
[151.64587402 -322.35629272]
[137.92198181 -315.58035278]
[137.61401367 -300.58352661]
[137.30603027 -285.58666992]
[136.99804688 -270.58984375]
[136.69007874 -255.59300232]
[136.38209534 -240.59616089]
[136.07412720 -225.59931946]
[147.43957520 -218.52976990]
[153.86543274 -206.66488647]
[153.57139587 -193.06639099]
[146.52728271 -181.30426025]
[134.48902893 -174.51948547]
[133.87319946 -159.53213501]
[133.25738525 -144.54478455]
[132.64155579 -129.55743408]
[132.02572632 -114.57007599]
[131.40989685 -99.58272552]
[139.26774597 -95.74230957]
[145.21888733 -88.45476532]
[147.76060486 -78.70797729]
[162.00730896 -83.40177917]
[176.25399780 -88.09558105]
[184.73336792 -101.71467590]
[200.68409729 -103.43341064]
[211.87013245 -91.93331146]
[209.71051025 -76.03628540]
[195.86192322 -67.93715668]
[180.94779968 -73.84888458]
[166.70111084 -69.15509033]
[152.45440674 -64.46128845]
[142.23570251 -53.48048401]
[138.57699585 -38.93352890]
[134.91828918 -24.38657570]
[131.40911865 -9.80282593]
[128.04986572 4.81618118]
[137.57681274 18.64154053]
[134.11813354 35.41559982]
[119.32884216 44.70345306]
[116.27044678 59.38835144]
[113.21205139 74.07324982]
[110.15365601 88.75814819]
[119.60139465 77.10738373]
[133.78755188 72.23369598]
[148.40072632 75.61829376]
[158.99967957 86.23252106]
[162.36325073 100.85054016]
[157.46914673 115.02967834]
[145.80479431 124.46063995]
[130.91520691 126.27719116]
[117.32479858 119.92658234]
[117.32479858 134.92657471]
[117.32479858 149.92657471]
[117.32479858 164.92657471]
[117.32479858 179.92657471]
[117.32479858 194.92657471]
[117.32479858 209.92657471]
[117.32479858 224.92657471]
[117.32479858 239.92657471]
[117.32479858 254.92657471]
[131.93481445 258.66802979]
[145.15496826 265.92599487]
[156.15423584 276.24426270]
[164.24121094 288.97421265]
[168.90751648 303.31564331]
[169.85983276 318.36703491]
[167.03829956 333.18222046]
[160.62026978 346.82989502]
[151.00920105 358.45220947]
[138.80923462 367.31854248]
[124.78729248 372.87155151]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[40 123]
[41 122]
[42 121]
[43 120]
[47 117]
[48 116]
[50 115]
[51 114]
[52 113]
[56 99]
[57 98]
[58 97]
[59 96]
[60 95]
[61 94]
[65 89]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[71 83]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
