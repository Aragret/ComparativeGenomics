%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUACUUCGGGGGGGGGGCUCUCUUUCUUCUUCCCACUCAUCCUAACCCUACUCCUAAUCACAUAACCxxxxxxxxxxGGACAACCAGUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUCCCCCCCCCCACUAUACUUC\
) } def
/len { sequence length } bind def

/coor [
[56.52080154 398.56018066]
[42.67486572 392.54415894]
[30.96620369 383.01473999]
[22.26367760 370.67907715]
[17.21307564 356.45254517]
[16.18918610 341.39086914]
[19.26798439 326.61169434]
[26.22100639 313.21176147]
[36.53229141 302.18545532]
[49.43667221 294.35092163]
[63.97655869 290.28961182]
[63.97655869 275.28961182]
[63.97655869 260.28961182]
[63.97655869 245.28961182]
[63.97655869 230.28961182]
[63.97655869 215.28961182]
[63.97655869 200.28961182]
[63.97655869 185.28961182]
[63.97655869 170.28961182]
[63.97655869 155.28961182]
[56.10041809 168.05545044]
[45.70835495 178.87232971]
[33.26815796 187.25335693]
[19.33982277 192.82125854]
[4.55032206 195.32537842]
[-10.43460178 194.65303040]
[-24.94040871 190.83444214]
[-38.31412888 184.04153442]
[-49.95375061 174.58007812]
[-59.33532333 162.87597656]
[-66.03653717 149.45606995]
[-69.75574493 134.92446899]
[-70.32552338 119.93529510]
[-67.72023010 105.16328430]
[-62.05713654 91.27337646]
[-53.59116745 78.89083862]
[-42.70340729 68.57305145]
[-29.88397217 60.78446960]
[-15.70991516 55.87568665]
[-0.81927705 54.06767654]
[14.11764812 55.44182205]
[28.42848206 59.93626785]
[41.46902847 67.34870148]
[52.65227890 77.34544373]
[61.47481918 89.47650909]
[67.53951263 103.19582367]
[70.57334900 117.88581085]
[70.43951416 132.88748169]
[78.42943573 120.19255829]
[70.63840485 103.30538177]
[74.47986603 85.10868073]
[88.43189240 72.81163025]
[86.25505829 57.97042084]
[84.07821655 43.12921524]
[81.90138245 28.28800964]
[76.03308105 42.09246826]
[67.19250488 54.21039963]
[55.83853531 64.01280975]
[42.56050110 70.99090576]
[28.04760933 74.78247833]
[13.05316639 75.19071960]
[-1.64453220 72.19445038]
[-15.28259182 65.94918060]
[-27.15311813 56.77909088]
[-36.63996124 45.16014862]
[-43.25070190 31.69544983]
[-46.64220428 17.08388901]
[-46.63842773 2.08388972]
[-43.23957062 -12.52596188]
[-36.62205124 -25.98733139]
[-27.12935829 -37.60149384]
[-15.25421619 -46.76560974]
[-1.61301434 -53.00400925]
[13.08619118 -55.99287796]
[28.08042717 -55.57708359]
[42.59140778 -51.77820587]
[55.86592484 -44.79343033]
[67.21496582 -34.98530197]
[76.04943085 -22.86292076]
[81.91078186 -9.05550957]
[84.49488831 5.72223902]
[89.98191833 -8.23815060]
[87.01203156 -24.36613274]
[99.66812134 -34.79471970]
[114.93068695 -28.79587936]
[117.09890747 -12.54069996]
[103.94230652 -2.75111914]
[98.45527649 11.20927048]
[96.74258423 26.11117363]
[98.91942596 40.95237732]
[101.09626007 55.79358292]
[103.27310181 70.63478851]
[117.26770782 76.02386475]
[126.81417847 87.58917236]
[141.58023071 84.95030975]
[156.34628296 82.31144714]
[171.11235046 79.67257690]
[185.87840271 77.03371429]
[189.96295166 73.57886505]
[194.51274109 72.21802521]
[198.63543701 72.77030945]
[201.64578247 74.72103119]
[216.54768372 73.00833893]
[226.36405945 60.91386414]
[241.50111389 59.38923645]
[252.97085571 68.82218933]
[267.87274170 67.10950470]
[282.77465820 65.39681244]
[295.61819458 55.19995880]
[310.76919556 61.47519302]
[312.64166260 77.76708984]
[299.30929565 87.31594849]
[284.48733521 80.29871368]
[269.58544922 82.01140594]
[254.68354797 83.72409821]
[245.65287781 95.51318359]
[230.56462097 97.46237183]
[218.26037598 87.91024017]
[203.35847473 89.62293243]
[188.51725769 91.79976654]
[173.75120544 94.43863678]
[158.98515320 97.07749939]
[144.21910095 99.71636200]
[129.45304871 102.35522461]
[126.74512482 112.55895233]
[120.62297821 121.15943146]
[111.86815643 127.05873871]
[101.59827423 129.50379944]
[91.12435913 128.18247986]
[83.13444519 140.87739563]
[78.97655487 155.28961182]
[78.97655487 170.28961182]
[78.97655487 185.28961182]
[78.97655487 200.28961182]
[78.97655487 215.28961182]
[78.97655487 230.28961182]
[78.97655487 245.28961182]
[78.97655487 260.28961182]
[78.97655487 275.28961182]
[78.97655487 290.28961182]
[93.51644135 294.35092163]
[106.42082977 302.18545532]
[116.73210907 313.21176147]
[123.68513489 326.61169434]
[126.76393127 341.39086914]
[125.74003601 356.45254517]
[120.68943787 370.67907715]
[111.98691559 383.01473999]
[100.27825165 392.54415894]
[86.43231201 398.56018066]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[48 130]
[49 129]
[52 92]
[53 91]
[54 90]
[55 89]
[81 88]
[82 87]
[94 124]
[95 123]
[96 122]
[97 121]
[98 120]
[102 119]
[103 118]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
