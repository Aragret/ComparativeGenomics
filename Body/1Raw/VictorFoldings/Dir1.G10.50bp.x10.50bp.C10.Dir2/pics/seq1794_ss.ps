%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAAGCACCCGGGGGGGGGGAACUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCxxxxxxxxxxAACAAACAAUGUUCAACCAGUAACUACUACUAAUCAACGCCCAUAAUCAUCCCCCCCCCCACAAAGCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.11807251 593.04785156]
[93.09613037 587.49481201]
[80.89617157 578.62847900]
[71.28510284 567.00622559]
[64.86708069 553.35852051]
[62.04553986 538.54333496]
[62.99785614 523.49194336]
[67.66416168 509.15051270]
[75.75112915 496.42056274]
[86.75040436 486.10229492]
[99.97055817 478.84429932]
[114.58057404 475.10287476]
[114.58057404 460.10287476]
[114.58057404 445.10287476]
[114.58057404 430.10287476]
[114.58057404 415.10287476]
[114.58057404 400.10287476]
[114.58057404 385.10287476]
[114.58057404 370.10287476]
[114.58057404 355.10287476]
[114.58057404 340.10287476]
[114.58057404 325.10287476]
[99.88500977 322.20208740]
[86.03335571 316.48809814]
[73.55870056 308.17877197]
[62.94152451 297.59194946]
[54.59120560 285.13311768]
[48.83023834 271.28015137]
[45.88176346 256.56469727]
[45.86093903 241.55200195]
[48.77043915 226.81901550]
[54.50027847 212.93235779]
[62.83197021 200.42646790]
[73.44685364 189.78302002]
[85.93828583 181.41241455]
[99.82722473 175.63790894]
[114.58057404 172.68316650]
[114.58057404 157.68316650]
[114.58057404 142.68316650]
[114.58057404 127.68316650]
[62.88788986 111.72393799]
[48.95717239 106.16200256]
[35.02645493 100.60006714]
[21.09574127 95.03812408]
[6.67400074 101.50256348]
[-8.06480694 95.79791260]
[-14.37640953 81.30863190]
[-8.51624489 66.63095856]
[6.03895426 60.47290039]
[20.65384865 66.48791504]
[26.65767860 81.10741425]
[40.58839417 86.66934967]
[54.51911163 92.23128510]
[68.44982910 97.79322052]
[74.82645416 93.84497833]
[61.61132431 86.74848175]
[61.14961624 71.75559235]
[73.90304565 63.85938644]
[87.11801910 70.95616913]
[87.57971191 85.94850159]
[93.95633698 82.00025940]
[95.18695068 67.05081940]
[96.41756439 52.10138702]
[87.59822845 64.23478699]
[75.64389038 73.29534149]
[61.57839584 78.50705719]
[46.60642242 79.42356110]
[32.01026917 75.96635437]
[19.04005241 68.43153381]
[8.80663204 57.46444321]
[2.18647027 44.00437164]
[-0.25343585 29.20414162]
[1.69588399 14.33134174]
[7.86747646 0.65978587]
[17.73276329 -10.63959980]
[30.44681168 -18.59905624]
[44.92070389 -22.53688240]
[59.91479111 -22.11581230]
[74.14488220 -17.37191010]
[86.39220428 -8.71147823]
[95.60781097 3.12374425]
[101.00242615 17.12010765]
[102.11384583 32.08103943]
[108.93742371 18.72294235]
[115.76099396 5.36484241]
[112.20692444 -10.27958679]
[122.33446503 -22.72195435]
[138.37463379 -22.41754150]
[148.02278137 -9.59986687]
[143.87768555 5.89844561]
[129.11909485 12.18841743]
[122.29551697 25.54651642]
[115.47194672 38.90461731]
[111.36699677 53.33200073]
[110.13639069 68.28143311]
[108.90577698 83.23087311]
[114.89090729 87.75063324]
[128.70436096 81.90355682]
[126.86116028 96.79014587]
[132.84629822 101.30990601]
[146.88827515 96.03516388]
[160.93025208 90.76042938]
[174.97221375 85.48568726]
[182.88531494 71.52995300]
[198.75202942 69.15780640]
[210.40077209 80.18896484]
[208.89562988 96.16125488]
[195.39122009 104.82211304]
[180.24696350 99.52766418]
[166.20498657 104.80239868]
[152.16300964 110.07714081]
[138.12103271 115.35188293]
[129.58058167 127.68316650]
[129.58058167 142.68316650]
[129.58058167 157.68316650]
[129.58058167 172.68316650]
[144.33392334 175.63790894]
[158.22285461 181.41241455]
[170.71429443 189.78302002]
[181.32917786 200.42646790]
[189.66087341 212.93235779]
[195.39071655 226.81901550]
[198.30021667 241.55200195]
[198.27938843 256.56469727]
[195.33091736 271.28015137]
[189.56994629 285.13311768]
[181.21961975 297.59194946]
[170.60244751 308.17877197]
[158.12779236 316.48809814]
[144.27613831 322.20208740]
[129.58058167 325.10287476]
[129.58058167 340.10287476]
[129.58058167 355.10287476]
[129.58058167 370.10287476]
[129.58058167 385.10287476]
[129.58058167 400.10287476]
[129.58058167 415.10287476]
[129.58058167 430.10287476]
[129.58058167 445.10287476]
[129.58058167 460.10287476]
[129.58058167 475.10287476]
[144.19058228 478.84429932]
[157.41075134 486.10229492]
[168.41001892 496.42056274]
[176.49699402 509.15051270]
[181.16329956 523.49194336]
[182.11560059 538.54333496]
[179.29406738 553.35852051]
[172.87605286 567.00622559]
[163.26496887 578.62847900]
[151.06501770 587.49481201]
[137.04307556 593.04785156]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[37 116]
[38 115]
[39 114]
[40 113]
[41 54]
[42 53]
[43 52]
[44 51]
[61 96]
[62 95]
[63 94]
[83 93]
[84 92]
[85 91]
[100 112]
[101 111]
[102 110]
[103 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
