%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACCCCUAGGGGGGGGGGUACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAxxxxxxxxxxCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCCCCCCCCCCCUAGCCCCUA\
) } def
/len { sequence length } bind def

/coor [
[83.86997986 388.01647949]
[70.64978790 380.74401855]
[59.76298141 370.29699707]
[51.95185089 357.38775635]
[47.74897003 342.89645386]
[47.44089508 327.81109619]
[51.04863739 313.16027832]
[58.32621002 299.94290161]
[68.77742004 289.06011963]
[81.68968201 281.25396729]
[96.18261719 277.05670166]
[95.87055969 262.05993652]
[95.55850220 247.06318665]
[95.24644470 232.06642151]
[94.93439484 217.06967163]
[94.62233734 202.07292175]
[94.31027985 187.07617188]
[93.99822235 172.07940674]
[93.68616486 157.08265686]
[93.37410736 142.08590698]
[93.06205750 127.08914948]
[81.35975647 121.92614746]
[72.88687134 111.86082458]
[69.61699677 98.73917389]
[72.52831268 85.15858459]
[81.34149933 73.95397186]
[94.51351929 67.60652924]
[87.60652161 54.29137039]
[80.69951630 40.97621536]
[73.79251862 27.66105843]
[56.89474869 24.29469872]
[46.31070709 11.18641853]
[31.33099174 11.96626377]
[16.35127831 12.74610901]
[2.89672804 22.12198830]
[-11.83337212 14.91392517]
[-12.68595886 -1.46304440]
[1.21603692 -10.16169739]
[15.57143307 -2.23360538]
[30.55114746 -3.01345038]
[45.53086090 -3.79329562]
[47.17147827 -8.20733356]
[49.62720871 -12.22538757]
[52.80710220 -15.69865990]
[56.59340668 -18.49852753]
[53.19042969 -33.10742188]
[49.78744888 -47.71631241]
[46.38447189 -62.32520676]
[42.98149490 -76.93409729]
[30.08929253 -90.04024506]
[35.76007843 -106.61860657]
[32.05391693 -121.15354156]
[28.34775734 -135.68847656]
[24.64159584 -150.22341919]
[20.93543434 -164.75834656]
[17.22927284 -179.29328918]
[11.30930996 -193.07566833]
[3.31939411 -205.77059937]
[-12.19653130 -207.71740723]
[-22.79307556 -219.21728516]
[-23.46687508 -234.84034729]
[-13.89978027 -247.20985413]
[1.39091694 -250.48530579]
[15.18541813 -243.12013245]
[20.97038078 -228.59194946]
[16.01432419 -213.76051331]
[24.00424004 -201.06558228]
[24.22176743 -216.06401062]
[29.74873734 -230.00863647]
[39.86539841 -241.08352661]
[53.25430679 -247.84645081]
[68.17189026 -249.41670227]
[82.67550659 -245.58979797]
[94.87641144 -236.86408997]
[103.18575287 -224.37590027]
[106.52143097 -209.75149536]
[104.44907379 -194.89533997]
[97.23853302 -181.74208069]
[85.82881927 -172.00460815]
[71.70576477 -166.95097351]
[56.70853424 -167.23930359]
[42.79015350 -172.83203125]
[31.76420975 -182.99945068]
[35.47037125 -168.46450806]
[39.17653275 -153.92958069]
[42.88269424 -139.39463806]
[46.58885574 -124.85970306]
[50.29501724 -110.32476807]
[60.56138611 -103.85105133]
[63.74114990 -91.72223663]
[57.59038544 -80.33707428]
[60.99336624 -65.72817993]
[64.39633942 -51.11928940]
[67.79932404 -36.51039886]
[71.20230103 -21.90150642]
[87.74343109 -14.02990055]
[94.38737488 3.33951020]
[87.10767365 20.75406075]
[94.01467896 34.06921768]
[100.92167664 47.38437271]
[107.82867432 60.69952774]
[121.73123169 66.33148193]
[135.95800781 61.57767105]
[146.41835022 48.94781876]
[162.53883362 51.95820999]
[167.73605347 67.51201630]
[156.66358948 79.60881042]
[140.71182251 75.80445099]
[126.48504639 80.55826569]
[128.63627625 89.76867676]
[127.92411804 98.51650238]
[142.56762695 101.76733398]
[157.21112061 105.01815796]
[167.53143311 93.64332581]
[182.16137695 88.96786499]
[197.16560364 92.24945068]
[208.50804138 102.60536194]
[213.13761902 117.24990082]
[209.80900574 132.24377441]
[199.41760254 143.55368042]
[184.75862122 148.13732910]
[169.77526855 144.76174927]
[158.49797058 134.33493042]
[153.96029663 119.66165924]
[139.31678772 116.41083527]
[124.67329407 113.16000366]
[120.40692139 119.11843872]
[114.73900604 123.76381683]
[108.05880737 126.77709198]
[108.37086487 141.77384949]
[108.68292236 156.77059937]
[108.99497986 171.76734924]
[109.30702972 186.76411438]
[109.61908722 201.76086426]
[109.93114471 216.75761414]
[110.24320221 231.75436401]
[110.55525970 246.75112915]
[110.86731720 261.74786377]
[111.17936707 276.74462891]
[125.83436584 280.33538818]
[139.06016541 287.59765625]
[149.95503235 298.03625488]
[157.77613831 310.93945312]
[161.99020386 325.42752075]
[162.30992126 340.51263428]
[158.71350098 355.16622925]
[151.44613647 368.38922119]
[141.00334167 379.28005981]
[128.09710693 387.09619141]
[113.60741425 391.30465698]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[27 101]
[28 100]
[29 99]
[30 98]
[32 41]
[33 40]
[34 39]
[45 95]
[46 94]
[47 93]
[48 92]
[49 91]
[51 88]
[52 87]
[53 86]
[54 85]
[55 84]
[56 83]
[57 67]
[58 66]
[102 109]
[103 108]
[111 126]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
