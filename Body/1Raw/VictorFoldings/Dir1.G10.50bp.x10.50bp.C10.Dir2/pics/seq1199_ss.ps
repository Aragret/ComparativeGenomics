%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAAUAGAAGCGGGGGGGGGGCGGCGUAAAGAGUGUUUUAGAUCACCCCCUCCCCAAUAAAGCUAAAACUCxxxxxxxxxxUCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCUACCCCCCCCCCUCAAUAGGAGC\
) } def
/len { sequence length } bind def

/coor [
[96.23492432 530.52593994]
[82.21298218 524.97296143]
[70.01302338 516.10662842]
[60.40195084 504.48428345]
[53.98392487 490.83657837]
[51.16238785 476.02139282]
[52.11470413 460.97003174]
[56.78100967 446.62860107]
[64.86797333 433.89865112]
[75.86724854 423.58038330]
[89.08740997 416.32238770]
[103.69741821 412.58096313]
[103.69741821 397.58096313]
[103.69741821 382.58096313]
[103.69741821 367.58096313]
[103.69741821 352.58096313]
[103.69741821 337.58096313]
[103.69741821 322.58096313]
[103.69741821 307.58096313]
[103.69741821 292.58096313]
[103.69741821 277.58096313]
[94.10678864 262.91589355]
[103.36495972 247.03140259]
[103.05698395 232.03456116]
[102.59506226 217.04168701]
[101.97923279 202.05432129]
[101.36341095 187.06697083]
[100.74758148 172.07962036]
[99.51696777 157.13018799]
[97.67364502 142.24388123]
[95.83032227 127.35756683]
[80.41374207 121.73844910]
[70.15230560 107.79061890]
[69.28186798 89.58802032]
[79.09008789 73.16232300]
[66.41857147 65.13533020]
[53.74705887 57.10832977]
[41.07554245 49.08133316]
[28.40402603 41.05433655]
[15.73251057 33.02733994]
[3.06099415 25.00034142]
[-12.73743153 24.15163422]
[-19.34853554 10.80462742]
[-31.15255737 20.28849602]
[-45.39725876 25.42339516]
[-60.53747940 25.65233040]
[-74.93092346 20.95046806]
[-87.01629639 11.82783222]
[-95.48266602 -0.72602379]
[-99.41166687 -15.34934998]
[-98.37710571 -30.45591927]
[-92.49121094 -44.40708160]
[-82.39243317 -55.68952179]
[-69.17621613 -63.07940292]
[-54.27615738 -65.77512360]
[-39.30850220 -63.48427963]
[-25.89682579 -56.45536041]
[-15.49593353 -45.45080948]
[-9.23403263 -31.66431808]
[-7.79036808 -16.59134293]
[-11.32153797 -1.86688864]
[3.57053685 -1.59232521]
[11.08799171 12.32882595]
[23.75950813 20.35582352]
[36.43102264 28.38282013]
[49.10253906 36.40981674]
[61.77405548 44.43681335]
[74.44557190 52.46380997]
[87.11708832 60.49081039]
[79.84513092 47.37140656]
[72.57318115 34.25200653]
[61.77414703 23.84139061]
[55.32099533 10.30045891]
[54.03644943 -4.64443827]
[58.08427429 -19.08795357]
[66.94840240 -31.18866158]
[79.49874878 -39.40382767]
[94.13523102 -42.68608856]
[108.99184418 -40.61698532]
[122.17447662 -33.46030807]
[132.00247192 -22.12847328]
[137.22283936 -8.06619167]
[137.17002869 6.93371534]
[131.85076904 20.95888901]
[121.94034576 32.22352600]
[115.76923370 45.89529800]
[109.59811401 59.56707001]
[121.56837463 50.52754974]
[133.53863525 41.48803329]
[145.50889587 32.44851303]
[157.47915649 23.40899277]
[159.06770325 19.21660042]
[161.67019653 16.09400940]
[164.81297302 14.23129559]
[168.00987244 13.64043331]
[170.82295227 14.16727543]
[183.49447632 6.14027882]
[196.16598511 -1.88671839]
[208.83750916 -9.91371536]
[218.98229980 -23.49751282]
[234.84359741 -17.50955391]
[233.48048401 -0.61049157]
[216.86450195 2.75780058]
[204.19299316 10.78479767]
[191.52146912 18.81179428]
[178.84996033 26.83879089]
[166.51867676 35.37924957]
[154.54841614 44.41876984]
[142.57815552 53.45829010]
[130.60789490 62.49781036]
[118.63763428 71.53733063]
[127.78056335 82.65224457]
[131.23541260 96.06338501]
[128.79592896 109.14383698]
[121.36760712 119.52261353]
[110.71662903 125.51424408]
[112.55995178 140.40055847]
[114.40327454 155.28686523]
[117.23971558 158.75878906]
[118.64271545 162.57391357]
[118.68447876 166.22698975]
[117.59774017 169.29101562]
[115.73493195 171.46379089]
[116.35076141 186.45114136]
[116.96658325 201.43850708]
[117.58241272 216.42585754]
[121.07952881 224.93267822]
[118.05382538 231.72659302]
[118.36180115 246.72341919]
[127.13127136 256.23657227]
[127.04508209 268.77307129]
[118.69741821 277.58096313]
[118.69741821 292.58096313]
[118.69741821 307.58096313]
[118.69741821 322.58096313]
[118.69741821 337.58096313]
[118.69741821 352.58096313]
[118.69741821 367.58096313]
[118.69741821 382.58096313]
[118.69741821 397.58096313]
[118.69741821 412.58096313]
[133.30743408 416.32238770]
[146.52758789 423.58038330]
[157.52687073 433.89865112]
[165.61383057 446.62860107]
[170.28013611 460.97003174]
[171.23245239 476.02139282]
[168.41091919 490.83657837]
[161.99288940 504.48428345]
[152.38182068 516.10662842]
[140.18186951 524.97296143]
[126.15991974 530.52593994]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 129]
[24 128]
[25 126]
[26 125]
[27 124]
[28 123]
[29 118]
[30 117]
[31 116]
[35 69]
[36 68]
[37 67]
[38 66]
[39 65]
[40 64]
[41 63]
[43 61]
[87 111]
[88 110]
[89 109]
[90 108]
[91 107]
[96 106]
[97 105]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
