%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCCAUCAUGGGGGGGGGGAGAAUUCUCACUGUGAUAUAUAAACUCAGACCCAAACAUUAAUCAGUUCUxxxxxxxxxxGCACAUCUGUACCCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGCCCCCCCCCCGGUCCAUCAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 358.85073853]
[71.19830322 352.83471680]
[59.48964310 343.30529785]
[50.78712082 330.96963501]
[45.73651886 316.74310303]
[44.71262741 301.68142700]
[47.79142761 286.90225220]
[54.74444962 273.50231934]
[65.05573273 262.47598267]
[77.96011353 254.64147949]
[92.50000000 250.58016968]
[92.50000000 235.58016968]
[92.50000000 220.58016968]
[92.50000000 205.58016968]
[92.50000000 190.58016968]
[92.50000000 175.58016968]
[92.50000000 160.58016968]
[92.50000000 145.58016968]
[92.50000000 130.58016968]
[92.50000000 115.58016968]
[88.34210968 101.16795349]
[80.35219574 88.47303009]
[72.36228180 75.77809906]
[64.37236023 63.08316803]
[51.06110764 70.01593018]
[37.22905350 75.84062958]
[22.96825409 80.51849365]
[8.37361622 84.01840210]
[-6.45773602 86.31705475]
[-21.42709923 87.39915466]
[-36.43485641 87.25749969]
[-51.38112640 85.89304352]
[-66.16645050 83.31485748]
[-80.69242859 79.54010010]
[-94.86238861 74.59388733]
[-108.58203125 68.50914764]
[-121.76006317 61.32636261]
[-134.30877686 53.09334183]
[-146.14465332 43.86487198]
[-157.18894958 33.70236969]
[-167.36814880 22.67346001]
[-176.61450195 10.85154724]
[-184.86648560 -1.68469965]
[-192.06919861 -14.85185051]
[-198.17468262 -28.56228065]
[-203.14230347 -42.72474670]
[-206.93902588 -57.24499893]
[-209.53956604 -72.02640533]
[-210.92663574 -86.97059631]
[-211.09097290 -101.97811890]
[-210.03152466 -116.94910431]
[-207.75529480 -131.78392029]
[-204.27746582 -146.38383484]
[-199.62117004 -160.65168762]
[-193.81739807 -174.49252319]
[-186.90476990 -187.81425476]
[-178.92929077 -200.52821350]
[-169.94404602 -212.54977417]
[-160.00881958 -223.79895020]
[-149.18972778 -234.20088196]
[-137.55877686 -243.68634033]
[-125.19337463 -252.19218445]
[-112.17580414 -259.66183472]
[-98.59269714 -266.04556274]
[-84.53444672 -271.30090332]
[-70.09461975 -275.39285278]
[-55.36930466 -278.29421997]
[-40.45649719 -279.98565674]
[-25.45544243 -280.45593262]
[-10.46597195 -279.70190430]
[4.41216135 -277.72860718]
[19.07994461 -274.54913330]
[33.43976593 -270.18469238]
[47.39605713 -264.66430664]
[60.85594559 -258.02471924]
[73.72985077 -250.31010437]
[85.93210602 -241.57180786]
[97.38149261 -231.86798096]
[108.00183105 -221.26319885]
[117.72243500 -209.82804871]
[126.47862244 -197.63862610]
[134.21211243 -184.77604675]
[140.87142944 -171.32591248]
[146.41227722 -157.37773132]
[150.79777527 -143.02432251]
[153.99874878 -128.36122131]
[155.99386597 -113.48600006]
[156.76986694 -98.49765015]
[156.32159424 -83.49591827]
[154.65202332 -68.58065033]
[151.77226257 -53.85109329]
[147.70147705 -39.40528107]
[142.46676636 -25.33934212]
[136.10296631 -11.74688911]
[128.65242004 1.28162181]
[120.16470337 13.65948772]
[110.69631958 25.30433464]
[100.31026459 36.13866425]
[89.07566833 46.09038162]
[77.06729126 55.09325027]
[85.05721283 67.78818512]
[93.04712677 80.48310852]
[101.03704071 93.17803955]
[104.28762817 87.61524200]
[109.52362823 83.20008087]
[116.40232849 80.45286560]
[124.46149445 79.80168915]
[133.14247131 81.55706787]
[147.90852356 84.19593048]
[162.67457581 86.83479309]
[177.46728516 89.31991577]
[192.28504944 91.65101624]
[207.10279846 93.98211670]
[221.92056274 96.31322479]
[235.68402100 88.07024384]
[250.65893555 93.82626343]
[255.35781860 109.16575623]
[246.17610168 122.32157898]
[230.15721130 123.20170593]
[219.58946228 111.13098145]
[204.77169800 108.79988098]
[189.95394897 106.46877289]
[175.13618469 104.13767242]
[167.99366760 106.21852875]
[160.03572083 101.60084534]
[145.26966858 98.96198273]
[130.50360107 96.32312012]
[124.75270844 101.13738251]
[127.34066010 115.91244507]
[113.25090027 110.76590729]
[107.50000000 115.58016968]
[107.50000000 130.58016968]
[107.50000000 145.58016968]
[107.50000000 160.58016968]
[107.50000000 175.58016968]
[107.50000000 190.58016968]
[107.50000000 205.58016968]
[107.50000000 220.58016968]
[107.50000000 235.58016968]
[107.50000000 250.58016968]
[122.03988647 254.64147949]
[134.94427490 262.47598267]
[145.25555420 273.50231934]
[152.20857239 286.90225220]
[155.28736877 301.68142700]
[154.26348877 316.74310303]
[149.21287537 330.96963501]
[140.51036072 343.30529785]
[128.80169678 352.83471680]
[114.95575714 358.85073853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 103]
[22 102]
[23 101]
[24 100]
[108 127]
[109 126]
[110 125]
[111 123]
[112 122]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
