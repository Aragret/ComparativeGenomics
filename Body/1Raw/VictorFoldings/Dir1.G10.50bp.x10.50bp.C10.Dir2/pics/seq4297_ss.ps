%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGCUACGAGGGGGGGGGGCCAACUCAUACACCUCCUAUGAAAAAACUUCCUACCACUCACCCUAGCAUxxxxxxxxxxACCAUAUAUUUACAGUAGGAAUAGACGUAGACACACGAGCAUAUUUCACCCCCCCCCCCCUCCGCUACCA\
) } def
/len { sequence length } bind def

/coor [
[42.93220520 462.56082153]
[30.37398148 454.20968628]
[20.28775787 442.99722290]
[13.30756474 429.62832642]
[9.87217999 414.94332886]
[10.19755745 399.86535645]
[14.26324177 385.34225464]
[21.81366158 372.28689575]
[32.37419128 361.52001953]
[45.28098679 353.71838379]
[59.72271347 349.37243652]
[59.09873581 334.38540649]
[58.47475815 319.39837646]
[57.85078049 304.41137695]
[57.22680283 289.42434692]
[56.60282516 274.43734741]
[55.97884750 259.45031738]
[55.35487366 244.46330261]
[54.73089600 229.47628784]
[54.10691833 214.48927307]
[46.80992889 227.59477234]
[36.03206635 238.02729797]
[22.69597435 244.89378357]
[7.94329214 247.60643005]
[-6.96306992 245.93299866]
[-20.74704742 240.01675415]
[-32.22866058 230.36415100]
[-40.42501831 217.80151367]
[-44.63446808 203.40428162]
[-44.49666214 188.40490723]
[-40.02339554 174.08744812]
[-31.59760475 161.67753601]
[-19.94058037 152.23751831]
[-6.05022907 146.57553101]
[8.88436317 145.17625427]
[23.58471489 148.15950012]
[36.79239655 155.26985168]
[47.37675858 165.89865112]
[54.43172455 179.13600159]
[57.35351944 193.85212708]
[62.54893494 179.78060913]
[67.74434662 165.70909119]
[72.93976593 151.63757324]
[78.13517761 137.56605530]
[63.16497803 123.07508087]
[56.65827179 103.28221130]
[60.11009216 82.73519135]
[72.72732544 66.15506744]
[91.61093140 57.35141373]
[91.29888153 42.35466003]
[90.98682404 27.35790634]
[90.67476654 12.36115170]
[90.36270905 -2.63560200]
[90.05065155 -17.63235474]
[89.73859406 -32.62910843]
[74.83995056 -34.61174393]
[60.41859436 -38.84551620]
[46.81257629 -45.23118210]
[34.34084702 -53.61905289]
[23.29575920 -63.81250763]
[13.93622589 -75.57259369]
[6.48164845 -88.62363434]
[1.10677302 -102.65969849]
[-2.06240606 -117.35176086]
[-2.95159864 -132.35542297]
[-1.53996074 -147.31896973]
[2.13941693 -161.89163208]
[8.00028419 -175.73181152]
[15.90525436 -188.51509094]
[25.66902351 -199.94177246]
[37.06271362 -209.74403381]
[49.81924438 -217.69207764]
[63.63957977 -223.59959412]
[78.19975281 -227.32810974]
[93.15844727 -228.79020691]
[108.16502380 -227.95162964]
[122.86769104 -224.83203125]
[136.92181396 -219.50453186]
[149.99792480 -212.09400940]
[161.78950500 -202.77420044]
[172.02015686 -191.76356506]
[180.45005798 -179.32019043]
[186.88157654 -165.73579407]
[191.16397095 -151.32879639]
[193.19685364 -136.43693542]
[192.93255615 -121.40927124]
[190.37728882 -106.59809113]
[185.59094238 -92.35058594]
[178.68572998 -79.00074005]
[169.82348633 -66.86149597]
[159.21200562 -56.21740341]
[147.09999084 -47.31798935]
[133.77137756 -40.37186050]
[119.53862000 -35.54184341]
[104.73535156 -32.94116592]
[105.04740906 -17.94441223]
[105.35945892 -2.94765806]
[105.67151642 12.04909515]
[105.98357391 27.04584885]
[106.29563141 42.04260254]
[106.60768890 57.03935623]
[116.40459442 59.74869156]
[125.30437469 64.65927124]
[132.82032776 71.50254822]
[138.54141235 79.90428162]
[142.15476990 89.40499115]
[157.11502075 88.31368256]
[172.07525635 87.22237396]
[182.21696472 75.10125732]
[197.96633911 73.78485107]
[209.97955322 84.05413818]
[211.12937927 99.81655121]
[200.73364258 111.72051239]
[184.95996094 112.70362091]
[173.16658020 102.18261719]
[158.20632935 103.27393341]
[143.24607849 104.36524200]
[141.02981567 114.34687042]
[136.54313660 123.53459930]
[130.03431702 131.42002869]
[121.86352539 137.56680298]
[112.48290253 141.63479614]
[102.41152191 143.39888000]
[92.20670319 142.76145935]
[87.01128387 156.83297729]
[81.81586456 170.90451050]
[76.62045288 184.97602844]
[71.42503357 199.04754639]
[69.09393311 213.86529541]
[69.71791077 228.85231018]
[70.34188843 243.83934021]
[70.96586609 258.82635498]
[71.58984375 273.81335449]
[72.21382141 288.80038452]
[72.83779907 303.78738403]
[73.46177673 318.77441406]
[74.08575439 333.76144409]
[74.70973206 348.74844360]
[89.46273804 351.87887573]
[102.97337341 358.58065796]
[114.39234924 368.43243408]
[123.00186157 380.81497192]
[128.26071167 394.94985962]
[129.83831787 409.94860840]
[127.63551331 424.86831665]
[121.79076385 438.77120972]
[112.67148590 450.78326416]
[100.85091400 460.14941406]
[87.07210541 466.28091431]
[72.20120239 468.79229736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[40 128]
[41 127]
[42 126]
[43 125]
[44 124]
[49 101]
[50 100]
[51 99]
[52 98]
[53 97]
[54 96]
[55 95]
[106 117]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
