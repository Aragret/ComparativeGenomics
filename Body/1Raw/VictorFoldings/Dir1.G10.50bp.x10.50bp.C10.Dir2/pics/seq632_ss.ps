%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUAAUCUCAGGGGGGGGGGUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACxxxxxxxxxxCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCCCCCCCCCCCUACUAGUCUCA\
) } def
/len { sequence length } bind def

/coor [
[72.63336182 225.98338318]
[64.74050140 223.95314026]
[56.99478531 221.42915344]
[49.42705536 218.42189026]
[42.06741333 214.94375610]
[34.94511032 211.00901794]
[28.08842468 206.63377380]
[21.52454948 201.83584595]
[15.27948666 196.63475037]
[9.37794113 191.05160522]
[3.84322762 185.10900879]
[-1.30282426 178.83099365]
[-6.03995609 172.24293518]
[-10.34955978 165.37139893]
[-23.67997932 172.24888611]
[-37.01039886 179.12637329]
[-45.72699356 192.32984924]
[-60.58519745 191.28919983]
[-73.91561890 198.16668701]
[-87.24604034 205.04418945]
[-100.57646179 211.92167664]
[-113.90688324 218.79916382]
[-127.23729706 225.67666626]
[-130.50100708 240.96986389]
[-142.86317444 250.54644775]
[-158.48674011 249.88465881]
[-169.99475098 239.29693604]
[-171.95347595 223.78251648]
[-163.43806458 210.66680908]
[-148.46922302 206.14266968]
[-134.11479187 212.34623718]
[-120.78437042 205.46875000]
[-107.45394897 198.59124756]
[-94.12353516 191.71376038]
[-80.79311371 184.83627319]
[-67.46269226 177.95878601]
[-59.69958115 165.24723816]
[-43.88789368 165.79595947]
[-30.55747223 158.91847229]
[-17.22705078 152.04096985]
[-22.86057472 136.82015991]
[-26.52681541 121.00975800]
[-28.16706467 104.86294556]
[-27.75506210 88.63826752]
[-25.29740334 72.59552002]
[-20.83344078 56.99157715]
[-14.43465328 42.07630157]
[-6.20350075 28.08851814]
[3.72821760 15.25220490]
[-6.93199253 4.69948339]
[-17.59220314 -5.85323763]
[-28.25241280 -16.40595818]
[-42.82223129 -11.71778297]
[-57.89987946 -14.34896660]
[-70.02062225 -23.69488144]
[-76.39920807 -37.60790634]
[-75.56987762 -52.89093018]
[-67.72320557 -66.03202820]
[-54.66230392 -74.01145935]
[-39.38846970 -74.99562836]
[-25.41151810 -68.75836945]
[-15.94325161 -56.73295593]
[-13.15940666 -41.68274689]
[-17.69969177 -27.06616783]
[-7.03948116 -16.51344681]
[3.62072897 -5.96072626]
[14.28093910 4.59199476]
[20.50667953 -0.71904355]
[27.06097984 -5.62427473]
[33.91741943 -10.10340500]
[41.04832077 -14.13786125]
[48.42487335 -17.71086502]
[56.01723480 -20.80750275]
[63.79466629 -23.41479111]
[71.72565460 -25.52172470]
[79.77803040 -27.11933136]
[87.91909790 -28.20070267]
[96.11579895 -28.76102638]
[104.33479309 -28.79761124]
[112.54264069 -28.30989265]
[120.70591736 -27.29944038]
[128.79135132 -25.76995850]
[136.76596069 -23.72726250]
[144.59719849 -21.17926216]
[152.25305176 -18.13593292]
[159.70223999 -14.60927486]
[166.91424561 -10.61326504]
[173.85952759 -6.16380119]
[180.50961304 -1.27864158]
[186.83717346 4.02266836]
[192.81622314 9.71887302]
[198.42211914 15.78709316]
[203.63174438 22.20291519]
[208.42358398 28.94049263]
[212.77781677 35.97264862]
[216.67634583 43.27098083]
[220.10296631 50.80599213]
[223.04331970 58.54718399]
[225.48509216 66.46320343]
[227.41793823 74.52196503]
[228.83358765 82.69076538]
[229.72586060 90.93643951]
[230.09072876 99.22546387]
[244.91775513 96.95404816]
[259.74478149 94.68263245]
[274.57180786 92.41121674]
[289.39883423 90.13980103]
[297.46340942 85.72348022]
[304.54907227 87.97576904]
[319.41909790 86.00531769]
[334.28909302 84.03486633]
[349.19671631 75.96023560]
[361.08261108 88.04997253]
[352.75570679 102.81813812]
[336.25955200 98.90487671]
[321.38952637 100.87532806]
[306.51953125 102.84577942]
[291.67025757 104.96682739]
[276.84323120 107.23824310]
[262.01620483 109.50965881]
[247.18916321 111.78107452]
[232.36213684 114.05249023]
[229.94058228 128.85574341]
[243.27101135 135.73323059]
[256.60144043 142.61071777]
[269.93185425 149.48820496]
[286.78024292 151.37709045]
[289.62927246 168.08995056]
[274.35827637 175.45422363]
[263.05435181 162.81863403]
[249.72393799 155.94114685]
[236.39350891 149.06364441]
[223.06309509 142.18615723]
[220.10412598 149.85925293]
[216.66749573 157.32710266]
[212.76731873 164.55998230]
[208.41955566 171.52920532]
[203.64190674 178.20710754]
[198.45382690 184.56723022]
[192.87635803 190.58439636]
[186.93209839 196.23484802]
[180.64511108 201.49627686]
[174.04077148 206.34796143]
[167.14573669 210.77082825]
[159.98779297 214.74754333]
[152.59573364 218.26255798]
[144.99931335 221.30220032]
[137.22903442 223.85467529]
[129.31608582 225.91020203]
[121.29222870 227.46090698]
[113.18959808 228.50103760]
[105.04064178 229.02679443]
[96.87797546 229.03652954]
[88.73422241 228.53056335]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 40]
[15 39]
[16 38]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[49 67]
[50 66]
[51 65]
[52 64]
[103 122]
[104 121]
[105 120]
[106 119]
[107 118]
[109 117]
[110 116]
[111 115]
[123 133]
[124 132]
[125 131]
[126 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
