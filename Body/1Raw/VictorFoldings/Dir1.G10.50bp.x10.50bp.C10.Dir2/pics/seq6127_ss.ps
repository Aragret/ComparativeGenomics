%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAAUCAACGGGGGGGGGGUGGCUUCAAUCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCxxxxxxxxxxUACUAAUCAACGCCCAUAAUCAUACAAAGCCCCCGCACCAAUAGGAUCCUCCCCCCCCCCCCCGAAUCAAC\
) } def
/len { sequence length } bind def

/coor [
[85.01953125 411.60412598]
[70.99758911 406.05111694]
[58.79763412 397.18478394]
[49.18656158 385.56246948]
[42.76853561 371.91476440]
[39.94699860 357.09957886]
[40.89931488 342.04821777]
[45.56562042 327.70678711]
[53.65258789 314.97683716]
[64.65186310 304.65856934]
[77.87202454 297.40057373]
[92.48203278 293.65914917]
[92.48203278 278.65914917]
[92.48203278 263.65914917]
[92.48203278 248.65914917]
[92.48203278 233.65914917]
[92.48203278 218.65914917]
[92.48203278 203.65914917]
[92.48203278 188.65914917]
[92.48203278 173.65914917]
[92.48203278 158.65914917]
[84.74473572 145.93186951]
[92.48203278 132.13169861]
[92.48203278 117.13170624]
[90.69829559 132.02526855]
[81.97039032 144.22459412]
[68.45043945 150.72158813]
[53.47218323 149.91421509]
[40.72895813 142.00155640]
[33.36298370 128.93470764]
[33.19055557 113.93569946]
[40.25419617 100.70297241]
[52.81215286 92.49945068]
[67.76789093 91.34796143]
[81.43267822 97.53166199]
[68.59902191 89.76652527]
[55.76536560 82.00138855]
[42.93171310 74.23625946]
[30.09805870 66.47112274]
[17.26440620 58.70598602]
[4.43075180 50.94084930]
[-8.40290260 43.17571259]
[-21.23655510 35.41057968]
[-34.07020950 27.64544296]
[-46.90386200 19.88030815]
[-59.66050339 28.26069450]
[-74.79108429 30.26775360]
[-89.29141998 25.50297928]
[-100.28245544 14.91242218]
[-105.58190918 0.59884465]
[-104.13758087 -14.59578133]
[-96.23623657 -27.65455246]
[-83.44669342 -35.98464203]
[-68.30832672 -37.93209839]
[-53.82686996 -33.11026001]
[-42.87762451 -22.47650337]
[-37.63457489 -8.14216709]
[-39.13872910 7.04665375]
[-26.30507469 14.81178951]
[-13.47142029 22.57692528]
[-0.63776666 30.34206009]
[12.19588757 38.10719681]
[25.02954102 45.87232971]
[37.86319351 53.63746643]
[50.69684982 61.40260315]
[63.53050232 69.16773987]
[76.36415863 76.93286896]
[89.19780731 84.69800568]
[104.14724731 83.46739197]
[115.53831482 73.70812225]
[107.10610962 61.28323364]
[100.11809540 47.99234772]
[94.66215515 34.00261307]
[90.80690002 19.48995972]
[88.60082245 4.63690472]
[88.07167053 -10.36976051]
[89.22608185 -25.34131241]
[92.04955292 -40.08946609]
[96.50656891 -54.42874908]
[102.54107666 -68.17882538]
[110.07719421 -81.16677856]
[119.02014160 -93.22927856]
[129.25744629 -104.21460724]
[140.66036987 -113.98462677]
[153.08551025 -122.41646576]
[166.37660217 -129.40408325]
[180.36650085 -134.85960388]
[194.87927246 -138.71441650]
[209.73239136 -140.92005920]
[224.73907471 -141.44876099]
[239.71058655 -140.29389954]
[254.45866394 -137.46998596]
[268.79782104 -133.01254272]
[282.54769897 -126.97762299]
[295.53543091 -119.44112396]
[307.59765625 -110.49781799]
[318.58270264 -100.26017761]
[328.35238647 -88.85695648]
[336.78384399 -76.43156433]
[343.77105713 -63.14026260]
[349.22616577 -49.15019989]
[353.08053589 -34.63731766]
[355.28573608 -19.78413200]
[355.81399536 -4.77743530]
[354.65869141 10.19404602]
[351.83432007 24.94203186]
[347.37646484 39.28104782]
[341.34112549 53.03076553]
[333.80422974 66.01827240]
[324.86056519 78.08023071]
[314.62258911 89.06494904]
[303.21908569 98.83428955]
[290.79345703 107.26538086]
[277.50192261 114.25220490]
[263.51171875 119.70689392]
[248.99871826 123.56083679]
[234.14546204 125.76557922]
[219.13874817 126.29339600]
[204.16729736 125.13763428]
[189.41940308 122.31284332]
[175.08052063 117.85453796]
[161.33097839 111.81879425]
[148.34370422 104.28151703]
[136.28201294 95.33748627]
[125.29759216 85.09919739]
[113.90651703 94.85846710]
[115.93421936 102.41234589]
[113.80684662 110.59747314]
[107.48203278 117.13170624]
[107.48203278 132.13169861]
[115.21933746 145.93186951]
[107.48203278 158.65914917]
[107.48203278 173.65914917]
[107.48203278 188.65914917]
[107.48203278 203.65914917]
[107.48203278 218.65914917]
[107.48203278 233.65914917]
[107.48203278 248.65914917]
[107.48203278 263.65914917]
[107.48203278 278.65914917]
[107.48203278 293.65914917]
[122.09204865 297.40057373]
[135.31221008 304.65856934]
[146.31147766 314.97683716]
[154.39845276 327.70678711]
[159.06475830 342.04821777]
[160.01707458 357.09957886]
[157.19552612 371.91476440]
[150.77751160 385.56246948]
[141.16642761 397.18478394]
[128.96647644 406.05111694]
[114.94453430 411.60412598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 130]
[24 129]
[35 68]
[36 67]
[37 66]
[38 65]
[39 64]
[40 63]
[41 62]
[42 61]
[43 60]
[44 59]
[45 58]
[69 126]
[70 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
