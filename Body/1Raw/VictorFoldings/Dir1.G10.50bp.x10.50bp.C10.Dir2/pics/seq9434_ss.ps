%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUCUUAUUAGGGGGGGGGGUUUGAUCUAGAAAUUGCCCUCCUUUUACCCCUACCAUGAGCCCUACAAACxxxxxxxxxxCCUACCAUGAGCCCUACAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCCCCCCCCCCCUCUUAUUA\
) } def
/len { sequence length } bind def

/coor [
[72.31285858 364.43194580]
[58.82398224 357.70040894]
[47.33848190 347.93585205]
[38.52411270 335.70596313]
[32.89332962 321.72174072]
[30.77350044 306.79629517]
[32.28786850 291.79727173]
[37.34839249 277.59677124]
[45.66085815 265.02035522]
[56.74198914 254.79919434]
[69.94754028 247.52754211]
[84.50976562 243.62818909]
[84.20178986 228.63134766]
[83.89381409 213.63450623]
[83.58583832 198.63766479]
[83.27785492 183.64083862]
[82.96987915 168.64399719]
[82.66190338 153.64715576]
[82.35392761 138.65031433]
[82.04594421 123.65348053]
[85.86284637 94.01279449]
[77.19624329 81.76984406]
[68.52963257 69.52688599]
[59.86302567 57.28393173]
[51.19641876 45.04098129]
[38.25491333 52.64303589]
[24.71532631 59.12018204]
[10.67521095 64.42575073]
[-3.76427054 68.52150726]
[-18.49908066 71.37794495]
[-33.42304993 72.97447968]
[-48.42865372 73.29961395]
[-63.40777206 72.35099792]
[-78.25247955 70.13548279]
[-92.85581207 66.66900635]
[-107.11256409 61.97656631]
[-120.91999817 56.09196472]
[-134.17863464 49.05759811]
[-146.79295349 40.92415237]
[-158.67205811 31.75023460]
[-169.73034668 21.60193634]
[-179.88816833 10.55238342]
[-189.07231140 -1.31881380]
[-197.21661377 -13.92611980]
[-204.26239014 -27.17869949]
[-210.15887451 -40.98106384]
[-214.86360168 -55.23376465]
[-218.34263611 -69.83410645]
[-220.57093811 -84.67690277]
[-221.53245544 -99.65519714]
[-221.22024536 -114.66107941]
[-219.63655090 -129.58641052]
[-216.79280090 -144.32368469]
[-212.70948792 -158.76667786]
[-207.41601562 -172.81135559]
[-200.95053101 -186.35652161]
[-193.35961914 -199.30456543]
[-184.69796753 -211.56221008]
[-175.02799988 -223.04112244]
[-164.41937256 -233.65861511]
[-152.94854736 -243.33816528]
[-140.69813538 -252.01004028]
[-127.75643921 -259.61175537]
[-114.21668243 -266.08856201]
[-100.17642975 -271.39376831]
[-85.73683929 -275.48913574]
[-71.00196075 -278.34521484]
[-56.07794571 -279.94134521]
[-41.07233429 -280.26611328]
[-26.09324265 -279.31710815]
[-11.24859333 -277.10119629]
[3.35465336 -273.63433838]
[17.61127853 -268.94152832]
[31.41856194 -263.05657959]
[44.67702103 -256.02188110]
[57.29112625 -247.88810730]
[69.16999054 -238.71388245]
[80.22801971 -228.56529236]
[90.38555145 -217.51547241]
[99.56938934 -205.64404297]
[107.71337128 -193.03652954]
[114.75880432 -179.78376770]
[120.65493774 -165.98124695]
[125.35928345 -151.72842407]
[128.83795166 -137.12799072]
[131.06587219 -122.28514099]
[132.02699280 -107.30682373]
[131.71440125 -92.30094910]
[130.13032532 -77.37564850]
[127.28619385 -62.63846207]
[123.20249939 -48.19556427]
[117.90866089 -34.15102386]
[111.44282532 -20.60602951]
[103.85157776 -7.65818024]
[95.18962097 4.59923649]
[85.51935577 16.07790375]
[74.91046143 26.69511414]
[63.43937302 36.37437057]
[72.10597992 48.61732483]
[80.77259064 60.86027908]
[89.43919373 73.10323334]
[98.10580444 85.34618378]
[111.60118866 91.89405823]
[126.58142853 91.12439728]
[141.56166077 90.35473633]
[156.54191589 89.58507538]
[171.52215576 88.81541443]
[177.38270569 74.72227478]
[188.78338623 64.57400513]
[203.46055603 60.38555145]
[218.50007629 62.98853683]
[230.91583252 71.86613464]
[238.24267578 85.25569153]
[239.02583313 100.49871063]
[233.10981750 114.56866455]
[221.66926575 124.67195892]
[206.97570801 128.80258179]
[191.94656372 126.14038849]
[179.56585693 117.21396637]
[172.29180908 103.79566193]
[157.31156921 104.56531525]
[142.33132935 105.33497620]
[127.35108948 106.10463715]
[112.37084961 106.87429810]
[127.36924744 107.09343719]
[139.09521484 116.44766998]
[142.64161682 131.02239990]
[136.52435303 144.71835327]
[123.30339050 151.80398560]
[108.51148987 149.31407166]
[98.33882141 138.29060364]
[97.04278564 123.34550476]
[97.35076141 138.34234619]
[97.65873718 153.33917236]
[97.96672058 168.33601379]
[98.27469635 183.33285522]
[98.58267212 198.32969666]
[98.89064789 213.32653809]
[99.19863129 228.32336426]
[99.50660706 243.32020569]
[114.21664429 246.61843872]
[127.70960236 253.34178162]
[139.20101929 263.09939575]
[148.02279663 275.32394409]
[153.66206360 289.30471802]
[155.79093933 304.22891235]
[154.28565979 319.22882080]
[149.23374939 333.43240356]
[140.92890930 346.01385498]
[129.85397339 356.24172974]
[116.65283203 363.52136230]
[102.09297180 367.42956543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 102]
[22 101]
[23 100]
[24 99]
[25 98]
[103 124]
[104 123]
[105 122]
[106 121]
[107 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
