%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUAUUAAAGGUUGGGGGGGGGGCGUUUGUUCAACGAUUAAAGUCCUACGUGAUCUGAGUUCAGACCGGAGUAxxxxxxxxxxCUCCCGAAUCAACCCUGACCCCUCUCCUUCAUAAAUUAUUCAGCUUCCUACCCCCCCCCCCACUAUUAAAGUUU\
) } def
/len { sequence length } bind def

/coor [
[75.82514191 418.68109131]
[61.46289444 414.17437744]
[48.30200195 406.86849976]
[36.88140488 397.06265259]
[27.66876793 385.15835571]
[21.04133797 371.64309692]
[17.27050972 357.07031250]
[16.51069260 342.03677368]
[18.79300117 327.15805054]
[24.02397919 313.04345703]
[31.98941803 300.27096558]
[42.36314011 289.36358643]
[54.72034454 280.76800537]
[68.55501556 274.83615112]
[83.30063629 271.81097412]
[83.30063629 256.81097412]
[83.30063629 241.81097412]
[83.30063629 226.81097412]
[83.30063629 211.81097412]
[83.30063629 196.81097412]
[83.30063629 181.81097412]
[83.30063629 166.81097412]
[83.30063629 151.81097412]
[83.30063629 136.81097412]
[71.02753448 128.18711853]
[56.91532898 133.27096558]
[42.80311966 138.35482788]
[28.69091415 143.43869019]
[20.58931541 157.28584290]
[4.69189930 159.44262695]
[-6.80619812 148.25453186]
[-5.08462000 132.30412292]
[8.53598595 123.82717133]
[23.60705566 129.32647705]
[37.71926498 124.24262238]
[51.83147049 119.15876007]
[65.94367981 114.07490540]
[64.30084991 99.88256836]
[68.15834808 86.59445190]
[76.58061218 76.18957520]
[87.98137665 70.07659149]
[100.41261292 68.90674591]
[104.22328186 54.39886093]
[108.03395081 39.89097214]
[98.41651154 39.67666245]
[89.63408661 36.24946976]
[82.70259857 30.14693451]
[78.37496185 22.20702362]
[77.06025696 13.45485210]
[78.78790283 4.97093344]
[83.21965027 -2.24212313]
[89.70593262 -7.37806273]
[86.18264008 -21.95840645]
[82.65935516 -36.53874969]
[75.54759216 -49.74567795]
[65.31400299 -60.71261215]
[55.08041763 -71.67955017]
[44.84683228 -82.64648438]
[29.01318359 -86.91586304]
[25.05579376 -102.83036041]
[37.04568863 -114.01850128]
[52.64868927 -108.97088623]
[55.81376648 -92.88007355]
[66.04735565 -81.91313934]
[76.28094482 -70.94619751]
[86.51452637 -59.97926331]
[93.46469879 -62.79796982]
[114.31521606 -71.25408936]
[114.01885986 -86.25115967]
[113.72250366 -101.24823761]
[99.30017090 -105.86071777]
[87.15843964 -114.90820312]
[78.61434937 -127.40930176]
[74.59471130 -142.00796509]
[75.53553772 -157.12066650]
[81.33477783 -171.10807800]
[91.36336517 -182.45294189]
[104.53348541 -189.92466736]
[119.41653442 -192.71276855]
[134.39811707 -190.51483154]
[147.85313416 -183.56924438]
[158.32209778 -172.62942505]
[164.66940308 -158.88204956]
[166.20654297 -143.81831360]
[162.76678467 -129.07223511]
[154.72325134 -116.24335480]
[142.94842529 -106.72325134]
[128.71957397 -101.54459381]
[129.01593018 -86.54752350]
[129.31228638 -71.55044556]
[123.17150879 -52.32605743]
[110.60085297 -41.45039368]
[97.23969269 -40.06204224]
[100.76298523 -25.48169708]
[104.28627777 -10.90135384]
[114.32218170 -8.93185520]
[123.00097656 -2.68349028]
[128.51739502 7.01900387]
[129.53353882 18.60273552]
[144.07836914 14.93557739]
[158.62319946 11.26841831]
[173.16801453 7.60125971]
[173.55142212 -7.49031353]
[177.99336243 -21.91847038]
[186.16423035 -34.61254501]
[197.45767212 -44.63055801]
[211.03567505 -51.22909927]
[225.89062500 -53.91851425]
[240.92019653 -52.49923706]
[255.00910950 -47.07658005]
[267.11184692 -38.05294037]
[276.33035278 -26.09794044]
[281.98049927 -12.09871101]
[283.64303589 2.90590644]
[281.19458008 17.80247116]
[274.81683350 31.48556137]
[264.98306274 42.93979645]
[252.42298889 51.31520081]
[238.06867981 55.99026108]
[222.98529053 56.61805725]
[208.29212952 53.15200043]
[195.07951355 45.84930038]
[184.32792664 35.25186157]
[176.83517456 22.14608574]
[162.29034424 25.81324387]
[147.74552917 29.48040199]
[133.20069885 33.14756012]
[122.54183197 43.70164108]
[118.73116302 58.20952988]
[114.92049408 72.71741486]
[127.77554321 83.61778259]
[133.39732361 100.15241241]
[129.59663391 117.82241058]
[116.84268951 131.47645569]
[98.30063629 136.81097412]
[98.30063629 151.81097412]
[98.30063629 166.81097412]
[98.30063629 181.81097412]
[98.30063629 196.81097412]
[98.30063629 211.81097412]
[98.30063629 226.81097412]
[98.30063629 241.81097412]
[98.30063629 256.81097412]
[98.30063629 271.81097412]
[113.04624939 274.83615112]
[126.88092041 280.76800537]
[139.23812866 289.36358643]
[149.61184692 300.27096558]
[157.57728577 313.04345703]
[162.80825806 327.15805054]
[165.09057617 342.03677368]
[164.33076477 357.07031250]
[160.55992126 371.64309692]
[153.93249512 385.15835571]
[144.71986389 397.06265259]
[133.29927063 406.86849976]
[120.13837433 414.17437744]
[105.77612305 418.68109131]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 37]
[26 36]
[27 35]
[28 34]
[42 130]
[43 129]
[44 128]
[52 95]
[53 94]
[54 93]
[55 66]
[56 65]
[57 64]
[58 63]
[68 90]
[69 89]
[70 88]
[99 127]
[100 126]
[101 125]
[102 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
