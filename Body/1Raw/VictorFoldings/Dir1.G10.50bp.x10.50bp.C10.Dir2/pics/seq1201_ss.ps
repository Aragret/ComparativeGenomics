%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAGAAGCCGGGGGGGGGGGGCGUAAAGAGUGUUUUAGAUCACCCCCUCCCCAAUAAAGCUAAAACUCACxxxxxxxxxxCUAACACUCACAACAAAACUAACUAAUACUAACAUCUCAGACGCUCAGGACCCCCCCCCCAAUAGAAACCG\
) } def
/len { sequence length } bind def

/coor [
[93.87020111 441.01266479]
[80.65198517 433.73660278]
[69.76802063 423.28662109]
[61.96040344 410.37524414]
[57.76146317 395.88278198]
[57.45749283 380.79736328]
[61.06921768 366.14752197]
[68.35038757 352.93212891]
[78.80455017 342.05218506]
[91.71894073 334.24957275]
[106.21301270 330.05621338]
[105.90503693 315.05938721]
[105.59706116 300.06253052]
[105.28908539 285.06570435]
[104.98110199 270.06887817]
[104.67312622 255.07203674]
[104.36515045 240.07519531]
[104.05717468 225.07835388]
[103.74919128 210.08151245]
[103.44121552 195.08467102]
[102.36414337 180.12339783]
[100.52082062 165.23709106]
[98.67749786 150.35078430]
[96.83417511 135.46447754]
[94.99085236 120.57816315]
[84.11209106 114.00453186]
[78.95585632 102.38673401]
[81.37931824 89.90927887]
[90.50959015 81.06631470]
[88.97229767 66.14529419]
[87.43500519 51.22427750]
[85.74460602 36.31983185]
[83.90128326 21.43352318]
[82.05795288 6.54721594]
[80.21463013 -8.33909225]
[77.76170349 -23.13717079]
[74.70330811 -37.82206726]
[71.64491272 -52.50696564]
[68.58651733 -67.19186401]
[53.66603470 -65.54141235]
[38.65622711 -65.31674194]
[23.69303322 -66.51986694]
[8.91195869 -69.13990784]
[-5.55312967 -73.15312958]
[-19.57123184 -78.52319336]
[-33.01539612 -85.20145416]
[-45.76386642 -93.12744904]
[-57.70118332 -102.22937775]
[-68.71924591 -112.42481995]
[-78.71826935 -123.62144470]
[-87.60768890 -135.71783447]
[-95.30701447 -148.60447693]
[-101.74650574 -162.16462708]
[-106.86785126 -176.27548218]
[-110.62466431 -190.80928040]
[-112.98292542 -205.63436890]
[-113.92127991 -220.61650085]
[-113.43122101 -235.61999512]
[-111.51719666 -250.50895691]
[-108.19654083 -265.14855957]
[-103.49932098 -279.40621948]
[-97.46807098 -293.15280151]
[-90.15742493 -306.26385498]
[-81.63359070 -318.62057495]
[-71.97374725 -330.11111450]
[-61.26539612 -340.63137817]
[-49.60550690 -350.08609009]
[-37.09967804 -358.38964844]
[-23.86116219 -365.46682739]
[-10.00985909 -371.25354004]
[4.32879305 -375.69738770]
[19.02493668 -378.75814819]
[33.94548035 -380.40805054]
[48.95529175 -380.63217163]
[63.91844559 -379.42849731]
[78.69942474 -376.80792236]
[93.16436768 -372.79415894]
[107.18227386 -367.42358398]
[120.62619019 -360.74484253]
[133.37437439 -352.81838989]
[145.31135559 -343.71603394]
[156.32905579 -333.52017212]
[166.32766724 -322.32318115]
[175.21664429 -310.22647095]
[182.91549683 -297.33956909]
[189.35449219 -283.77917480]
[194.47532654 -269.66812134]
[198.23161316 -255.13418579]
[200.58934021 -240.30900574]
[201.52714539 -225.32684326]
[201.03654480 -210.32337952]
[199.12196350 -195.43447876]
[195.80078125 -180.79499817]
[191.10304260 -166.53750610]
[185.07128906 -152.79113770]
[177.76016235 -139.68037415]
[169.23587036 -127.32394409]
[159.57562256 -115.83376312]
[148.86688232 -105.31388855]
[137.20664978 -95.85959625]
[124.70051575 -87.55650330]
[111.46174622 -80.47980499]
[97.61022949 -74.69358826]
[83.27141571 -70.25025940]
[86.32981110 -55.56536102]
[89.38820648 -40.88046265]
[92.44660187 -26.19556618]
[94.78311157 -24.54277039]
[96.58438873 -21.83636475]
[97.43492126 -18.28343010]
[97.00485992 -14.24132633]
[95.10093689 -10.18241596]
[96.94425964 4.70389128]
[98.78759003 19.59019852]
[100.63091278 34.47650528]
[104.59857178 40.76696777]
[102.35601807 49.68698502]
[103.89331055 64.60800171]
[105.43060303 79.52902222]
[118.45851135 89.61560059]
[120.31526947 105.98684692]
[109.87715912 118.73484039]
[111.72048187 133.62115479]
[113.56380463 148.50746155]
[115.40712738 163.39376831]
[117.25045013 178.28007507]
[128.62617493 168.50291443]
[143.40072632 171.09381104]
[150.77088928 184.15829468]
[145.34756470 198.14355469]
[131.09632874 202.82351685]
[118.43805695 194.77670288]
[118.74603271 209.77354431]
[119.05400848 224.77037048]
[119.36198425 239.76721191]
[119.66996765 254.76405334]
[119.97794342 269.76089478]
[120.28591919 284.75772095]
[120.59389496 299.75457764]
[120.90187836 314.75140381]
[121.20985413 329.74822998]
[135.86386108 333.34298706]
[149.08770752 340.60885620]
[159.97973633 351.05041504]
[167.79731750 363.95574951]
[172.00744629 378.44494629]
[172.32307434 393.53015137]
[168.72265625 408.18276978]
[161.45169067 421.40377808]
[151.00593567 432.29177856]
[138.09757996 440.10440063]
[123.60674286 444.30892944]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 126]
[22 125]
[23 124]
[24 123]
[25 122]
[29 119]
[30 118]
[31 117]
[32 115]
[33 114]
[34 113]
[35 112]
[36 107]
[37 106]
[38 105]
[39 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
