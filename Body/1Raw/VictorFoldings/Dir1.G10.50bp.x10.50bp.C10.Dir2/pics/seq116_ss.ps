%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUCCUAUUGGGGGGGGGGAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGxxxxxxxxxxCGCUUCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGACCCCCCCCCCUCAUUCUAUU\
) } def
/len { sequence length } bind def

/coor [
[-5.01819324 476.19653320]
[-18.86413193 470.18051147]
[-30.57279396 460.65109253]
[-39.27531815 448.31542969]
[-44.32592010 434.08889771]
[-45.34981155 419.02722168]
[-42.27101135 404.24807739]
[-35.31798935 390.84814453]
[-25.00670624 379.82180786]
[-12.10232544 371.98730469]
[2.43756175 367.92599487]
[2.43756175 352.92599487]
[2.43756175 337.92599487]
[2.43756175 322.92599487]
[2.43756175 307.92599487]
[2.43756175 292.92599487]
[2.43756175 277.92599487]
[2.43756175 262.92599487]
[2.43756175 247.92597961]
[2.43756175 232.92597961]
[-2.22751570 247.18209839]
[-15.89927578 253.35324097]
[-29.67665672 247.42164612]
[-34.58982849 233.24911499]
[-27.44005203 220.06272888]
[-12.88265800 216.44747925]
[-27.84290695 215.35617065]
[-42.80315399 214.26486206]
[-57.76340485 213.17355347]
[-63.04939270 227.32398987]
[-72.10900116 239.41117859]
[-84.20781708 248.45526123]
[-98.36503601 253.72306824]
[-113.43300629 254.78756714]
[-128.19021606 251.56245422]
[-141.44038391 244.30920410]
[-152.10935974 233.61576843]
[-159.33227539 220.34902954]
[-162.52359009 205.58447266]
[-161.42460632 190.51898193]
[-156.12440491 176.37385559]
[-147.05265808 164.29577637]
[-134.94476318 155.26385498]
[-120.78225708 150.01028442]
[-105.71322632 148.96092224]
[-90.95925903 152.20085144]
[-77.71639252 159.46742249]
[-67.05815887 170.17156982]
[-59.84857559 183.44554138]
[-56.67209244 198.21330261]
[-41.71184540 199.30461121]
[-26.75159645 200.39591980]
[-11.79134750 201.48722839]
[3.49886870 182.20018005]
[24.62620354 183.06965637]
[34.13456345 171.46830750]
[43.52172470 159.76869202]
[52.78667450 147.97204590]
[62.05162430 136.17541504]
[71.31657410 124.37876892]
[61.00416946 113.28054047]
[55.30488968 97.85458374]
[55.98225784 80.12222290]
[63.89039230 62.79193497]
[78.72182465 48.84862518]
[98.93879700 41.05764389]
[98.93879700 26.05764198]
[98.93879700 11.05764198]
[98.93879700 -3.94235778]
[85.16493225 -10.51832104]
[75.61500549 -22.42469215]
[72.18516541 -37.29745102]
[75.55640411 -52.18360138]
[85.05937195 -64.12748718]
[98.80723572 -70.75763702]
[114.07035828 -70.75763702]
[127.81822205 -64.12748718]
[137.32118225 -52.18360138]
[140.69242859 -37.29745102]
[137.26258850 -22.42469215]
[127.71266937 -10.51832104]
[113.93879700 -3.94235778]
[113.93879700 11.05764198]
[113.93879700 26.05764198]
[113.93879700 41.05764389]
[120.66677856 44.37189102]
[122.81291962 29.52621651]
[137.59523010 26.97993469]
[144.58470154 40.25198364]
[134.12274170 51.00038910]
[140.85072327 54.31464005]
[152.74310303 45.17290497]
[164.63548279 36.03116989]
[176.52786255 26.88943672]
[178.32838440 11.18804550]
[190.75588989 1.42420137]
[206.43736267 3.39062023]
[216.06927490 15.92066097]
[213.93716431 31.58047104]
[201.30599976 41.07936478]
[185.66960144 38.78181839]
[173.77722168 47.92354965]
[161.88484192 57.06528473]
[149.99246216 66.20701599]
[152.22087097 73.36831665]
[166.54353333 68.91172028]
[170.99990845 83.23445892]
[156.67768860 87.69091797]
[158.90609741 94.85221100]
[173.88580322 95.63205719]
[188.86552429 96.41190338]
[200.43748474 85.64782715]
[216.22821045 86.30258179]
[226.86932373 97.98769379]
[226.04766846 113.77061462]
[214.25070190 124.28759766]
[198.47735596 123.29911804]
[188.08567810 111.39161682]
[173.10595703 110.61177063]
[158.12625122 109.83192444]
[136.48020935 136.84478760]
[107.02369690 144.19189453]
[83.11321259 133.64372253]
[73.84826660 145.44035339]
[64.58331299 157.23699951]
[55.31836319 169.03364563]
[52.45181656 177.77633667]
[45.73590469 180.97666931]
[36.22754669 192.57801819]
[39.70902634 216.21795654]
[17.43756104 232.92597961]
[17.43756104 247.92597961]
[17.43756104 262.92599487]
[17.43756104 277.92599487]
[17.43756104 292.92599487]
[17.43756104 307.92599487]
[17.43756104 322.92599487]
[17.43756104 337.92599487]
[17.43756104 352.92599487]
[17.43756104 367.92599487]
[31.97744942 371.98730469]
[44.88182831 379.82180786]
[55.19311523 390.84814453]
[62.14613724 404.24807739]
[65.22493744 419.02722168]
[64.20104218 434.08889771]
[59.15044022 448.31542969]
[50.44791794 460.65109253]
[38.73925400 470.18051147]
[24.89331627 476.19653320]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 53]
[27 52]
[28 51]
[29 50]
[55 129]
[56 128]
[57 126]
[58 125]
[59 124]
[60 123]
[66 85]
[67 84]
[68 83]
[69 82]
[91 104]
[92 103]
[93 102]
[94 101]
[109 120]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
