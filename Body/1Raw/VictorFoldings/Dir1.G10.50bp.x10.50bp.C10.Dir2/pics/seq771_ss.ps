%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCAAACCGGGGGGGGGGCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACAxxxxxxxxxxGCUUUAAUUUAUUAAUGCAAACAGUACCUAACAAACCCACAGGUCCUAAACCCCCCCCCCCUACCAAACC\
) } def
/len { sequence length } bind def

/coor [
[58.73789215 190.30801392]
[66.65581512 177.56806946]
[76.83997345 166.55520630]
[88.92082977 157.66804504]
[96.09446716 144.49462891]
[103.26809692 131.32121277]
[90.65696716 139.44274902]
[78.04583740 147.56430054]
[65.43471527 155.68583679]
[62.06986237 172.82104492]
[47.65451050 182.06666565]
[31.33257103 178.13574219]
[18.89312935 186.51788330]
[6.45369005 194.90002441]
[-5.98575020 203.28216553]
[-18.42518997 211.66430664]
[-30.86463165 220.04644775]
[-37.98538208 234.17463684]
[-52.86373520 234.87023926]
[-59.98448563 248.99842834]
[-74.86283875 249.69403076]
[-81.56843567 264.65954590]
[-97.90718079 266.06570435]
[-107.07118225 252.46597290]
[-99.63329315 237.85057068]
[-83.24497986 237.25459290]
[-77.01398468 223.72595215]
[-61.24587631 222.43080139]
[-55.01488113 208.90216064]
[-39.24677277 207.60700989]
[-26.80733299 199.22486877]
[-14.36789322 190.84272766]
[-1.92845321 182.46058655]
[10.51098728 174.07844543]
[22.95042801 165.69628906]
[23.63199806 152.79156494]
[31.75880241 142.49450684]
[44.52589417 138.72232056]
[57.31316757 143.07470703]
[69.92430115 134.95317078]
[82.53542328 126.83162689]
[95.14655304 118.71008301]
[76.07997131 113.73616791]
[65.50347900 90.28765869]
[55.06367111 79.51685333]
[44.62385559 68.74604797]
[34.18404388 57.97523499]
[23.52241898 47.42394638]
[12.64359283 37.09674072]
[1.76476765 26.76953697]
[-9.11405754 16.44233131]
[-24.07369041 20.21233940]
[-38.68945312 15.27442837]
[-48.29751587 3.20427036]
[-49.83197403 -12.14659214]
[-42.80319214 -25.87975502]
[-29.45402527 -33.61301422]
[-14.04414654 -32.87871933]
[-1.49079180 -23.91117477]
[4.20030928 -9.57189560]
[1.21314728 5.56350660]
[12.09197235 15.89071178]
[22.97079849 26.21791649]
[33.84962463 36.54512024]
[38.62324142 37.31198120]
[42.94490433 41.12702179]
[44.95485306 47.53542328]
[55.39466476 58.30623245]
[65.83448029 69.07704163]
[76.27429199 79.84784698]
[83.74144745 79.14669800]
[79.74344635 64.68930817]
[75.74545288 50.23192596]
[70.53159332 36.16722870]
[78.51316833 23.46704865]
[93.44746399 22.06468201]
[103.65381622 33.05697250]
[101.14935303 47.84654617]
[99.91255188 62.79547119]
[98.67575073 77.74439240]
[106.14290619 77.04324341]
[114.39519501 64.51728058]
[115.52625275 48.73655701]
[128.98933411 42.36516190]
[137.24162292 29.83920097]
[145.49391174 17.31324005]
[153.74620056 4.78727770]
[154.17167664 -11.60634995]
[168.70890808 -19.19587135]
[182.40324402 -10.17383671]
[181.16712952 6.17865705]
[166.27217102 13.03956699]
[158.01988220 25.56552887]
[149.76759338 38.09149170]
[141.51530457 50.61745453]
[140.97450256 65.50223541]
[126.92115784 72.76956940]
[118.66886902 85.29553223]
[121.33962250 92.30388641]
[134.58695984 85.26767731]
[147.83428955 78.23147583]
[161.08161926 71.19526672]
[174.32894897 64.15905762]
[184.16383362 52.83319473]
[198.95198059 50.32113647]
[211.97511292 57.76412201]
[217.31678772 71.78077698]
[212.55024719 86.00329590]
[199.84095764 93.97035217]
[184.96235657 92.06227112]
[170.39204407 95.62685394]
[155.82174683 99.19143677]
[141.25143433 102.75601959]
[126.68113708 106.32060242]
[129.35189819 113.32895660]
[143.84748840 117.18611908]
[158.34307861 121.04327393]
[174.02648926 116.25132751]
[185.83193970 127.63391876]
[181.61500549 143.48161316]
[165.71369934 147.49166870]
[154.48593140 135.53887939]
[139.99032593 131.68171692]
[125.49473572 127.82455444]
[136.36659241 138.15908813]
[147.23846436 148.49362183]
[161.46665955 153.24319458]
[174.54002380 160.59757996]
[185.98684692 170.29139709]
[195.39408875 181.97488403]
[202.42230225 195.22647095]
[206.81788635 209.56797791]
[208.42225647 224.48191833]
[207.17749023 239.43019104]
[203.12852478 253.87338257]
[196.42146301 267.29034424]
[187.29829407 279.19699097]
[176.08822632 289.16366577]
[163.19573975 296.83071899]
[149.08604431 301.92153931]
[134.26824951 304.25241089]
[119.27703094 303.73925781]
[104.65331268 300.40057373]
[90.92475891 294.35681152]
[78.58673859 285.82608032]
[68.08444977 275.11618042]
[59.79683304 262.61358643]
[54.02294159 248.76936340]
[50.97110367 234.08309937]
[50.75144577 219.08471680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 42]
[7 41]
[8 40]
[9 39]
[12 35]
[13 34]
[14 33]
[15 32]
[16 31]
[17 30]
[19 28]
[21 26]
[44 70]
[45 69]
[46 68]
[47 67]
[48 64]
[49 63]
[50 62]
[51 61]
[81 98]
[82 97]
[84 95]
[85 94]
[86 93]
[87 92]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
