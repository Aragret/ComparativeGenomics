%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAUCUCCCCGGGGGGGGGGUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCxxxxxxxxxxAACUCAACGGCUACAUAGAAAAAUCCACCCCUUACGAGUGCGGCUUCGACCCCCCCCCCCCCUAUAUCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.45105743 414.10534668]
[68.96217346 407.37380981]
[57.47667313 397.60925293]
[48.66230774 385.37933350]
[43.03152466 371.39514160]
[40.91169739 356.46966553]
[42.42606354 341.47067261]
[47.48658752 327.27017212]
[55.79905319 314.69372559]
[66.88018036 304.47259521]
[80.08573914 297.20092773]
[94.64796448 293.30157471]
[94.33998871 278.30474854]
[94.03200531 263.30789185]
[93.72402954 248.31106567]
[93.41605377 233.31422424]
[93.10807800 218.31738281]
[92.80009460 203.32055664]
[92.49211884 188.32371521]
[92.18414307 173.32687378]
[91.87616730 158.33003235]
[91.56818390 143.33319092]
[81.23728180 132.45788574]
[66.27600098 131.38081360]
[51.31472397 130.30374146]
[36.35344315 129.22666931]
[24.46677589 139.29370117]
[9.30925274 137.98826599]
[-0.21485995 126.59410095]
[-15.17614079 125.51703644]
[-30.13742065 124.43996429]
[-45.09870148 123.36289215]
[-55.12506104 135.05812073]
[-69.94222260 138.56597900]
[-83.81962585 132.74519348]
[-91.51636505 120.02126312]
[-106.47764587 118.94419861]
[-121.43892670 117.86712646]
[-137.67132568 122.76053619]
[-146.86708069 108.51712799]
[-135.72595215 95.73779297]
[-120.36185455 102.90584564]
[-105.40057373 103.98291779]
[-90.43929291 105.05998230]
[-80.99936676 93.56974030]
[-66.43129730 89.79674530]
[-52.26939392 95.39082336]
[-44.02163315 108.40161133]
[-29.06035233 109.47868347]
[-14.09907055 110.55575562]
[0.86220986 111.63282776]
[11.92019463 101.72038269]
[27.10840416 102.59955597]
[37.43051147 114.26539612]
[52.39179230 115.34246063]
[67.35307312 116.41953278]
[82.31435394 117.49660492]
[68.56166077 109.70890045]
[59.73954010 92.63385773]
[61.37024307 69.92918396]
[76.30644989 48.18022537]
[76.61442566 33.18338776]
[73.64762878 24.47741890]
[77.08583832 17.88265610]
[77.70166779 2.89530206]
[65.62449646 -9.71933842]
[66.36170197 -26.83038902]
[78.97309875 -37.91442871]
[79.28107452 -52.91126633]
[79.58905029 -67.90810394]
[65.78895569 -74.34838867]
[55.80633926 -85.84913635]
[51.37075424 -100.41778564]
[53.25069427 -115.53022003]
[61.12044144 -128.56813049]
[73.61652374 -137.27259827]
[88.57390594 -140.13554382]
[103.40114594 -136.66093445]
[115.52932739 -127.45077515]
[122.85717010 -114.10076904]
[124.11508179 -98.92389679]
[119.08512115 -84.54963684]
[108.63875580 -73.46841431]
[94.58589172 -67.60012817]
[94.27790833 -52.60329056]
[93.96993256 -37.60644913]
[104.12797546 -29.62105370]
[107.86938477 -17.05003548]
[103.60621643 -4.44025612]
[92.68901825 3.51112747]
[92.07318878 18.49847984]
[91.61126709 33.49136734]
[91.30329132 48.48820496]
[97.72011566 52.37077332]
[101.13956451 37.76572418]
[116.08647156 36.50479126]
[121.90436554 50.33057022]
[110.55377197 60.13590622]
[116.97059631 64.01847839]
[130.11222839 56.78677368]
[138.13410950 42.48357391]
[154.53312683 42.54970932]
[162.43937683 56.91714859]
[153.71958923 70.80589294]
[137.34393311 69.92840576]
[124.20230103 77.16011047]
[128.15890503 91.62887573]
[143.15179443 91.16694641]
[158.14468384 90.70502472]
[165.99336243 77.42339325]
[179.78694153 70.51392365]
[195.12393188 72.18138885]
[207.11035156 81.89372253]
[211.92137146 96.55174255]
[208.02183533 111.47812653]
[196.65605164 121.90993500]
[181.45080566 124.51839447]
[167.25804138 118.47117615]
[158.60661316 105.69790649]
[143.61372375 106.15983582]
[128.62083435 106.62175751]
[125.56243896 121.30665588]
[139.12432861 127.71563721]
[155.41491699 125.83170319]
[164.97315979 139.15731812]
[157.96638489 153.98422241]
[141.60253906 155.05976868]
[132.71536255 141.27752686]
[119.15346527 134.86856079]
[106.56502533 143.02522278]
[106.87300110 158.02206421]
[107.18097687 173.01889038]
[107.48896027 188.01573181]
[107.79693604 203.01257324]
[108.10491180 218.00941467]
[108.41288757 233.00624084]
[108.72087097 248.00308228]
[109.02884674 262.99993896]
[109.33682251 277.99676514]
[109.64479828 292.99359131]
[124.35483551 296.29183960]
[137.84779358 303.01516724]
[149.33921814 312.77276611]
[158.16099548 324.99731445]
[163.80024719 338.97811890]
[165.92913818 353.90228271]
[164.42385864 368.90222168]
[159.37194824 383.10580444]
[151.06710815 395.68725586]
[139.99217224 405.91513062]
[126.79103088 413.19476318]
[112.23117065 417.10296631]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 57]
[24 56]
[25 55]
[26 54]
[29 51]
[30 50]
[31 49]
[32 48]
[36 44]
[37 43]
[38 42]
[61 93]
[62 92]
[64 91]
[65 90]
[68 86]
[69 85]
[70 84]
[99 106]
[100 105]
[107 121]
[108 120]
[109 119]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
