%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAAUCAACGGGGGGGGGGUGGCUUCAAUCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCxxxxxxxxxxGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCCCCCCCCCCCUAACCAAC\
) } def
/len { sequence length } bind def

/coor [
[82.22589874 520.20654297]
[68.37995911 514.19055176]
[56.67129898 504.66113281]
[47.96877289 492.32546997]
[42.91817093 478.09893799]
[41.89427948 463.03726196]
[44.97307968 448.25808716]
[51.92610168 434.85815430]
[62.23738480 423.83181763]
[75.14176941 415.99731445]
[89.68165588 411.93600464]
[89.68165588 396.93600464]
[89.68165588 381.93600464]
[89.68165588 366.93600464]
[89.68165588 351.93600464]
[89.68165588 336.93600464]
[89.68165588 321.93600464]
[89.68165588 306.93600464]
[89.68165588 291.93600464]
[89.68165588 276.93600464]
[89.68165588 261.93600464]
[89.68165588 246.93600464]
[89.68165588 231.93600464]
[75.85630035 226.29785156]
[65.21401978 215.76754761]
[59.39844894 201.92759705]
[59.32448959 186.87495422]
[65.03455353 172.90324402]
[75.68733978 162.15330505]
[89.68165588 156.28518677]
[89.68165588 141.28518677]
[89.68165588 126.28518677]
[89.68165588 111.28518677]
[82.22674561 98.26887512]
[69.28868866 90.67897034]
[56.35063171 83.08905792]
[43.41257477 75.49915314]
[30.47451973 67.90924072]
[17.53646278 60.31933212]
[4.59840679 52.72942352]
[-8.33964920 45.13951874]
[-21.27770424 37.54961014]
[-34.21575928 29.95969963]
[-47.15381622 22.36979103]
[-59.79532242 30.92286682]
[-74.89720917 33.13548279]
[-89.46099854 28.56832123]
[-100.59502411 18.12819672]
[-106.08862305 3.88800311]
[-104.85104370 -11.32485771]
[-97.12799835 -24.48986244]
[-84.45291138 -32.99308777]
[-69.34242249 -35.14621735]
[-54.79673767 -30.52173805]
[-43.70391083 -20.03784943]
[-38.26642609 -5.77613354]
[-39.56390762 9.43173599]
[-26.62585258 17.02164459]
[-13.68779659 24.61155319]
[-0.74974084 32.20146179]
[12.18831539 39.79137039]
[25.12637138 47.38127899]
[38.06442642 54.97118759]
[51.00248337 62.56109238]
[63.94054031 70.15100098]
[76.87859344 77.74091339]
[89.81665039 85.33081818]
[82.10123444 72.46721649]
[69.39231873 64.49956512]
[59.66188431 53.08384323]
[53.80775070 39.27337265]
[52.37007141 24.34242821]
[55.48149872 9.66867542]
[62.85494614 -3.39395261]
[73.81007385 -13.64018154]
[87.33605957 -20.12459946]
[102.18487549 -22.24889755]
[116.98643494 -19.81706810]
[130.37501526 -13.05349445]
[141.11526489 -2.58224320]
[148.21618652 10.63051224]
[151.02258301 25.36564445]
[149.27552795 40.26355743]
[143.13619995 53.94963074]
[133.17108154 65.16107178]
[120.29679108 72.86456299]
[112.31543732 85.56487274]
[125.40858459 78.24576569]
[138.50173950 70.92666626]
[151.59489441 63.60755539]
[164.68804932 56.28845215]
[150.13464355 52.65550232]
[140.37365723 41.26589584]
[139.01158142 26.32786369]
[146.55168152 13.36071491]
[160.20802307 7.15555048]
[174.93489075 10.00505543]
[185.29096985 20.85639381]
[187.44990540 35.70021439]
[180.61463928 49.05139542]
[194.73944092 44.00263977]
[208.86424255 38.95388412]
[217.00024414 25.12691307]
[232.90296936 23.00966263]
[244.37322998 34.22629929]
[242.61199951 50.17238617]
[228.97035217 58.61544418]
[213.91300964 53.07868576]
[199.78820801 58.12744141]
[185.66339111 63.17619705]
[172.00715637 69.38160706]
[158.91400146 76.70071411]
[145.82084656 84.01981354]
[132.72769165 91.33892059]
[119.63453674 98.65802765]
[116.16793060 105.84729004]
[110.63569641 110.15515900]
[104.68165588 111.28518677]
[104.68165588 126.28518677]
[104.68165588 141.28518677]
[104.68165588 156.28518677]
[118.67597198 162.15330505]
[129.32875061 172.90324402]
[135.03881836 186.87495422]
[134.96485901 201.92759705]
[129.14927673 215.76754761]
[118.50701141 226.29785156]
[104.68165588 231.93600464]
[104.68165588 246.93600464]
[104.68165588 261.93600464]
[104.68165588 276.93600464]
[104.68165588 291.93600464]
[104.68165588 306.93600464]
[104.68165588 321.93600464]
[104.68165588 336.93600464]
[104.68165588 351.93600464]
[104.68165588 366.93600464]
[104.68165588 381.93600464]
[104.68165588 396.93600464]
[104.68165588 411.93600464]
[119.22154236 415.99731445]
[132.12591553 423.83181763]
[142.43721008 434.85815430]
[149.39022827 448.25808716]
[152.46902466 463.03726196]
[151.44512939 478.09893799]
[146.39453125 492.32546997]
[137.69200134 504.66113281]
[125.98334503 514.19055176]
[112.13740540 520.20654297]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[30 121]
[31 120]
[32 119]
[33 118]
[34 67]
[35 66]
[36 65]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[87 115]
[88 114]
[89 113]
[90 112]
[91 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
