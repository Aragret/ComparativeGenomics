%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUACUAGUGGGGGGGGGGUAUUAUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACxxxxxxxxxxGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCCCCCCCCCCCUACUAGU\
) } def
/len { sequence length } bind def

/coor [
[85.83939362 360.77285767]
[71.99345398 354.75683594]
[60.28479385 345.22741699]
[51.58227158 332.89172363]
[46.53166962 318.66522217]
[45.50777817 303.60354614]
[48.58657837 288.82437134]
[55.53959656 275.42443848]
[65.85088348 264.39810181]
[78.75526428 256.56359863]
[93.29515076 252.50228882]
[93.29515076 237.50228882]
[93.29515076 222.50228882]
[93.29515076 207.50228882]
[93.29515076 192.50228882]
[93.29515076 177.50228882]
[93.29515076 162.50228882]
[93.29515076 147.50228882]
[93.29515076 132.50228882]
[93.29515076 117.50228882]
[82.96794891 106.62346649]
[67.98822784 105.84362030]
[53.00851822 105.06377411]
[38.02880096 104.28392792]
[27.59817696 117.56000519]
[11.47599888 121.98233032]
[-3.95924354 116.00576782]
[-12.72193813 102.15945435]
[-27.71463394 101.69141388]
[-42.70732880 101.22337341]
[-48.31066513 115.30805969]
[-58.39563751 126.62481689]
[-71.74444580 133.80709839]
[-86.74515533 135.98759460]
[-101.58634949 132.90301514]
[-114.47589111 124.92582703]
[-123.85730743 113.01931763]
[-128.59773254 98.62126160]
[-128.12475586 83.47028351]
[-122.49546814 69.39594269]
[-112.38965607 58.09778976]
[-99.02763367 50.94012451]
[-84.02293396 48.78726959]
[-69.18744659 51.89919662]
[-56.31262589 59.90012360]
[-46.95317459 71.82389832]
[-42.23928833 86.23067474]
[-27.24659157 86.69871521]
[-12.25389576 87.16675568]
[-5.06225491 75.87622070]
[6.87251329 69.57758331]
[20.46868706 70.01867676]
[32.15499115 77.19108582]
[38.80864716 89.30421448]
[53.78836060 90.08406067]
[68.76807404 90.86390686]
[83.74778748 91.64375305]
[97.46784210 85.58074188]
[106.97620392 73.97940063]
[116.48455811 62.37805557]
[125.99291992 50.77671432]
[114.49258423 16.71665001]
[115.11656189 1.72963309]
[115.74053955 -13.25738335]
[116.36451721 -28.24440002]
[101.96203613 -32.74228287]
[89.21496582 -40.81536484]
[78.99242401 -51.91320038]
[71.99140167 -65.27912903]
[68.68923187 -80.00183868]
[69.31106567 -95.07750702]
[73.81451416 -109.47824860]
[81.89251709 -122.22219849]
[92.99430084 -132.44046021]
[106.36293030 -139.43632507]
[121.08690643 -142.73280334]
[136.16233826 -142.10514832]
[150.56134033 -137.59614563]
[163.30216980 -129.51321411]
[173.51614380 -118.40749359]
[180.50685120 -105.03616333]
[183.79763794 -90.31090546]
[183.16416931 -75.23572540]
[178.64959717 -60.83846664]
[170.56175232 -48.10075378]
[159.45208740 -37.89107513]
[146.07806396 -30.90553474]
[131.35153198 -27.62042236]
[130.72755432 -12.63340569]
[130.10357666 2.35361052]
[129.47959900 17.34062576]
[134.75524902 22.67144012]
[142.48800659 9.81824684]
[143.29498291 -5.16003036]
[153.10804749 -16.50480461]
[167.81390381 -19.46076775]
[181.24841309 -12.78889084]
[187.78033447 0.71422321]
[184.67170715 15.38857174]
[173.22557068 25.08321190]
[158.23947144 25.73443985]
[145.30653381 33.33306503]
[150.58218384 38.66387939]
[165.57487488 38.19583511]
[180.56758118 37.72779465]
[195.56027222 37.25975418]
[210.55296326 36.79170990]
[219.09680176 33.37778854]
[225.86172485 36.47316360]
[240.86091614 36.31712723]
[255.86010742 36.16108704]
[271.63549805 29.95031166]
[281.97061157 43.38986588]
[271.91732788 57.04152298]
[256.01614380 51.16027832]
[241.01695251 51.31631470]
[226.01776123 51.47235107]
[211.02101135 51.78440475]
[196.02832031 52.25244904]
[181.03561401 52.72048950]
[166.04292297 53.18853378]
[151.05023193 53.65657425]
[137.59425354 60.28507233]
[128.08590698 71.88641357]
[118.57754517 83.48775482]
[109.06918335 95.08909607]
[111.94682312 97.93215179]
[113.77159882 102.13084412]
[113.97860718 107.24917603]
[112.19069672 112.63539124]
[108.29515076 117.50228882]
[108.29515076 132.50228882]
[108.29515076 147.50228882]
[108.29515076 162.50228882]
[108.29515076 177.50228882]
[108.29515076 192.50228882]
[108.29515076 207.50228882]
[108.29515076 222.50228882]
[108.29515076 237.50228882]
[108.29515076 252.50228882]
[122.83503723 256.56359863]
[135.73942566 264.39810181]
[146.05070496 275.42443848]
[153.00372314 288.82437134]
[156.08251953 303.60354614]
[155.05863953 318.66522217]
[150.00802612 332.89172363]
[141.30551147 345.22741699]
[129.59684753 354.75683594]
[115.75090790 360.77285767]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 57]
[22 56]
[23 55]
[24 54]
[28 49]
[29 48]
[30 47]
[58 126]
[59 125]
[60 124]
[61 123]
[62 91]
[63 90]
[64 89]
[65 88]
[103 122]
[104 121]
[105 120]
[106 119]
[107 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
