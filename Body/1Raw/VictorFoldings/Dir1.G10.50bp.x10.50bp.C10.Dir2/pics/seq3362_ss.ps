%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAAAAAUUCGGGGGGGGGGUAGGCUAUAUACAACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGxxxxxxxxxxCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCCCCCCCCCCCGAAGAAUUC\
) } def
/len { sequence length } bind def

/coor [
[104.23702240 391.86471558]
[90.39108276 385.84869385]
[78.68242645 376.31927490]
[69.97989655 363.98361206]
[64.92929840 349.75708008]
[63.90540695 334.69540405]
[66.98420715 319.91622925]
[73.93722534 306.51629639]
[84.24851227 295.48999023]
[97.15289307 287.65545654]
[111.69277954 283.59414673]
[111.69277954 268.59414673]
[111.69277954 253.59414673]
[111.69277954 238.59414673]
[111.69277954 223.59414673]
[111.69277954 208.59414673]
[111.69277954 193.59414673]
[111.69277954 178.59414673]
[111.69277954 163.59414673]
[111.69277954 148.59414673]
[77.01467896 136.19683838]
[64.96040344 107.21731567]
[76.31578064 83.83977509]
[66.56813049 72.43875122]
[56.82048035 61.03773117]
[59.90890884 75.71633911]
[58.96388245 90.68654633]
[49.83732224 102.59057617]
[35.62572479 107.38957977]
[21.15085793 103.45533752]
[11.32381630 92.12268066]
[9.47875977 77.23658752]
[16.24253082 63.84679413]
[31.00680351 61.19797516]
[16.78002548 56.44416046]
[1.23911226 59.40905380]
[-8.37998104 48.03705978]
[-22.60676003 43.28324127]
[-36.83353806 38.52942657]
[-47.43575287 49.50922012]
[-61.75494385 54.79348755]
[-76.94802856 53.33303452]
[-89.99841309 45.41783905]
[-98.31491852 32.61946487]
[-100.24631500 17.47904015]
[-95.40911102 3.00270677]
[-84.76374817 -7.93524885]
[-70.42385101 -13.16308689]
[-55.23663712 -11.64281654]
[-42.21752930 -3.67628932]
[-33.95148087 9.15473557]
[-32.07972336 24.30264854]
[-17.85294533 29.05646324]
[-3.62616587 33.81027985]
[10.89715290 30.50536156]
[21.53384018 42.21738434]
[35.76062012 46.97119904]
[47.74745178 37.95366669]
[47.12347412 22.96665192]
[46.49949646 7.97963524]
[45.87551880 -7.00738049]
[45.25154114 -21.99439621]
[44.47169876 -36.97410965]
[43.53606796 -51.94490433]
[42.60044098 -66.91569519]
[41.66481018 -81.88648224]
[27.18869400 -86.44789124]
[15.34032917 -95.93370819]
[7.72211266 -109.06105042]
[5.36434603 -124.05456543]
[8.58589649 -138.88648987]
[16.95107841 -151.55093384]
[29.32856560 -160.33514404]
[44.04440689 -164.05110168]
[59.10840607 -162.19628906]
[72.48328400 -155.02153015]
[82.36019135 -143.49716187]
[87.40335846 -129.18174744]
[86.93074036 -114.01135254]
[81.00626373 -100.03762817]
[70.43115234 -89.15041351]
[56.63560486 -82.82211304]
[57.57123184 -67.85132599]
[58.50685883 -52.88053131]
[59.44248962 -37.90974045]
[63.02183533 -31.38793564]
[60.23855972 -22.61837387]
[60.86253738 -7.63135815]
[61.48651505 7.35565805]
[62.11048889 22.34267426]
[62.73446655 37.32968903]
[68.22149658 51.29008102]
[77.96915436 62.69110107]
[87.71680450 74.09212494]
[110.54804230 62.11431503]
[141.67007446 72.40076447]
[154.76322937 65.08165741]
[167.85638428 57.76255035]
[173.58917236 42.77873611]
[188.92135620 38.05606461]
[202.09140015 47.21736908]
[202.99636841 63.23487854]
[190.94204712 73.82132721]
[175.17549133 70.85570526]
[162.08233643 78.17481232]
[148.98918152 85.49391937]
[150.07759094 92.91452026]
[164.91880798 90.73768616]
[179.76004028 88.56108856]
[181.93638611 103.40236664]
[167.09564209 105.57888794]
[152.25442505 107.75572205]
[153.34284973 115.17633057]
[167.98635864 118.42715454]
[182.62985229 121.67797852]
[197.27336121 124.92880249]
[212.74385071 119.48860168]
[225.01257324 130.37025452]
[221.45852661 146.37963867]
[205.73779297 151.04769897]
[194.02252197 139.57231140]
[179.37902832 136.32148743]
[164.73551941 133.07064819]
[150.09202576 129.81982422]
[144.24221802 134.51341248]
[158.22151184 139.95210266]
[160.50100708 154.77789307]
[148.80117798 164.16479492]
[134.82199097 158.72579956]
[132.54258728 143.90057373]
[126.69277954 148.59414673]
[126.69277954 163.59414673]
[126.69277954 178.59414673]
[126.69277954 193.59414673]
[126.69277954 208.59414673]
[126.69277954 223.59414673]
[126.69277954 238.59414673]
[126.69277954 253.59414673]
[126.69277954 268.59414673]
[126.69277954 283.59414673]
[141.23266602 287.65545654]
[154.13703918 295.48999023]
[164.44833374 306.51629639]
[171.40135193 319.91622925]
[174.48014832 334.69540405]
[173.45625305 349.75708008]
[168.40565491 363.98361206]
[159.70314026 376.31927490]
[147.99447632 385.84869385]
[134.14852905 391.86471558]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 94]
[24 93]
[25 92]
[34 57]
[35 56]
[37 54]
[38 53]
[39 52]
[58 91]
[59 90]
[60 89]
[61 88]
[62 87]
[63 85]
[64 84]
[65 83]
[66 82]
[96 106]
[97 105]
[98 104]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
