%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUAGCAGGGGGGGGGGAUAUCAACCAUUAACCUUCCCUCUACACUUAUCAUCUUCACAAUUCUAAUxxxxxxxxxxCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCCCCCCCCCCCUAGCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 372.14590454]
[71.19830322 366.12988281]
[59.48964310 356.60046387]
[50.78712082 344.26480103]
[45.73651886 330.03826904]
[44.71262741 314.97659302]
[47.79142761 300.19744873]
[54.74444962 286.79751587]
[65.05573273 275.77117920]
[77.96011353 267.93667603]
[92.50000000 263.87536621]
[92.50000000 248.87535095]
[92.50000000 233.87535095]
[92.50000000 218.87535095]
[92.50000000 203.87535095]
[92.50000000 188.87535095]
[92.50000000 173.87535095]
[92.50000000 158.87535095]
[92.50000000 143.87535095]
[92.50000000 128.87535095]
[81.51025391 123.41294098]
[73.64936066 113.98856354]
[70.24753571 102.19703674]
[71.88043976 90.03372955]
[78.27175903 79.55691528]
[70.28183746 66.86198425]
[62.29192352 54.16705704]
[54.30200577 41.47212601]
[40.92396164 48.27970505]
[26.98229027 53.84253693]
[12.59252453 58.11452103]
[-2.12609816 61.06026077]
[-17.05161095 62.65534973]
[-32.06033325 62.88656235]
[-47.02790070 61.75199127]
[-61.83027649 59.26103210]
[-76.34480286 55.43432617]
[-90.45121765 50.30358505]
[-104.03260803 43.91132736]
[-116.97644806 36.31051636]
[-129.17547607 27.56414223]
[-140.52859497 17.74467659]
[-150.94172668 6.93349171]
[-160.32859802 -4.77982712]
[-168.61141968 -17.29821777]
[-175.72155762 -30.51794624]
[-181.60009766 -44.32946777]
[-186.19830322 -58.61833572]
[-189.47808838 -73.26614380]
[-191.41227722 -88.15150452]
[-191.98484802 -103.15108490]
[-191.19104004 -118.14058685]
[-189.03744507 -132.99580383]
[-185.54190063 -147.59361267]
[-180.73336792 -161.81309509]
[-174.65171814 -175.53637695]
[-167.34730530 -188.64976501]
[-158.88069153 -201.04458618]
[-149.32202148 -212.61813354]
[-138.75050354 -223.27452087]
[-127.25374603 -232.92541504]
[-114.92700958 -241.49084473]
[-101.87244415 -248.89985657]
[-88.19821167 -255.09104919]
[-74.01764679 -260.01309204]
[-59.44823456 -263.62524414]
[-44.61071777 -265.89755249]
[-29.62804222 -266.81115723]
[-14.62436485 -266.35852051]
[0.27599037 -264.54342651]
[14.94954967 -261.38082886]
[29.27472115 -256.89700317]
[43.13280106 -251.12908936]
[56.40895081 -244.12487793]
[68.99316406 -235.94239807]
[80.78115845 -226.64947510]
[91.67524719 -216.32310486]
[101.58516693 -205.04884338]
[110.42879486 -192.92015076]
[118.13284302 -180.03749084]
[124.63348389 -166.50762939]
[129.87684631 -152.44270325]
[133.81945801 -137.95922852]
[136.42869568 -123.17723846]
[137.68289185 -108.21922302]
[137.57168579 -93.20912933]
[136.09597778 -78.27133942]
[133.26800537 -63.52963638]
[129.11119080 -49.10617447]
[123.66000366 -35.12047577]
[116.95960236 -21.68843269]
[109.06550598 -8.92134666]
[100.04312897 3.07498646]
[89.96723938 14.20115852]
[78.92133331 24.36497498]
[66.99693298 33.48220825]
[74.98685455 46.17713928]
[82.97676849 58.87207031]
[90.96668243 71.56700134]
[114.55696106 73.95904541]
[128.95181274 92.80078125]
[143.95100403 92.95681763]
[158.95019531 93.11285400]
[167.62863159 90.05729675]
[174.25895691 93.43140411]
[189.25164795 93.89944458]
[204.24433899 94.36748505]
[210.83155823 80.63692474]
[222.43821716 70.77764130]
[237.05339050 66.49781799]
[252.14489746 68.53896332]
[265.09805298 76.54743958]
[273.66864014 89.13571930]
[276.37176514 104.12281036]
[272.73907471 118.91211700]
[263.39999390 130.94129944]
[249.97251892 138.12622070]
[234.78308105 139.22204590]
[220.46333313 134.03894043]
[209.49424744 123.47489166]
[203.77630615 109.36018372]
[188.78359985 108.89214325]
[173.79090881 108.42409515]
[158.79415894 108.11203766]
[143.79496765 107.95600128]
[128.79577637 107.79996490]
[126.53131866 113.64278412]
[123.09635162 118.88371277]
[118.64243317 123.29154205]
[113.36605835 126.67179871]
[107.50000000 128.87535095]
[107.50000000 143.87535095]
[107.50000000 158.87535095]
[107.50000000 173.87535095]
[107.50000000 188.87535095]
[107.50000000 203.87535095]
[107.50000000 218.87535095]
[107.50000000 233.87535095]
[107.50000000 248.87535095]
[107.50000000 263.87536621]
[122.03988647 267.93667603]
[134.94427490 275.77117920]
[145.25555420 286.79751587]
[152.20857239 300.19744873]
[155.28736877 314.97659302]
[154.26348877 330.03826904]
[149.21287537 344.26480103]
[140.51036072 356.60046387]
[128.80169678 366.12988281]
[114.95575714 372.14590454]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 99]
[26 98]
[27 97]
[28 96]
[101 126]
[102 125]
[103 124]
[105 123]
[106 122]
[107 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
