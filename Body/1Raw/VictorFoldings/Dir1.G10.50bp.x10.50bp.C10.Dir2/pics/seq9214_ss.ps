%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACAUCCAAAGGGGGGGGGGCAUCACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUxxxxxxxxxxAACCCCUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGCCCCCCCCCCUAUAUCCAAA\
) } def
/len { sequence length } bind def

/coor [
[85.56730652 442.64926147]
[71.72136688 436.63323975]
[60.01270676 427.10382080]
[51.31018448 414.76815796]
[46.25958252 400.54162598]
[45.23569107 385.47994995]
[48.31449127 370.70077515]
[55.26751328 357.30084229]
[65.57879639 346.27453613]
[78.48317719 338.44000244]
[93.02306366 334.37869263]
[93.02306366 319.37869263]
[93.02306366 304.37869263]
[93.02306366 289.37869263]
[93.02306366 274.37869263]
[93.02306366 259.37869263]
[93.02306366 244.37870789]
[93.02306366 229.37870789]
[93.02306366 214.37870789]
[93.02306366 199.37870789]
[93.02306366 184.37870789]
[82.34219360 174.06101990]
[82.12850952 158.84889221]
[93.02306366 147.71575928]
[93.02306366 132.71575928]
[92.86702728 117.71657562]
[82.48339081 107.61081696]
[82.18195343 93.12443542]
[92.13621521 82.59548187]
[91.82416534 67.59873199]
[91.51210785 52.60197449]
[91.20005035 37.60522079]
[90.88799286 22.60846901]
[76.14407349 19.53882790]
[62.45955658 13.26807308]
[50.51941681 4.11361837]
[40.92053223 -7.46286249]
[34.14183044 -20.87872887]
[30.52041245 -35.45969009]
[30.23477745 -50.47369766]
[33.29603577 -65.16770172]
[39.54751587 -78.80541992]
[48.67275620 -90.70421600]
[60.21155930 -100.26930237]
[73.58316803 -107.02343750]
[88.11551666 -110.63076019]
[87.80345917 -125.62751007]
[87.49140930 -140.62426758]
[87.17935181 -155.62101746]
[86.86729431 -170.61776733]
[84.39633179 -174.36688232]
[83.39038086 -178.31138611]
[83.72534943 -181.95414734]
[85.12475586 -184.89279175]
[87.20531464 -186.86221313]
[88.14093781 -201.83300781]
[89.07656860 -216.80380249]
[90.01219940 -231.77458191]
[90.94782257 -246.74537659]
[76.31391907 -250.20323181]
[62.47494888 -256.08462524]
[49.82909393 -264.22036743]
[38.74020004 -274.37637329]
[29.52732086 -286.26043701]
[22.45552444 -299.53063965]
[17.72828293 -313.80511475]
[15.48160553 -328.67321777]
[15.78013706 -343.70715332]
[18.61528587 -358.47433472]
[23.90548134 -372.54992676]
[31.49851227 -385.52890015]
[41.17591095 -397.03784180]
[52.65924072 -406.74563599]
[65.61810303 -414.37295532]
[79.67964935 -419.70031738]
[94.43929291 -422.57449341]
[109.47238159 -422.91275024]
[124.34636688 -420.70538330]
[138.63330078 -416.01589966]
[151.92213440 -408.97921753]
[163.83050537 -399.79776001]
[174.01577759 -388.73574829]
[182.18493652 -376.11145020]
[188.10289001 -362.28808594]
[191.59941101 -347.66336060]
[192.57386780 -332.65808105]
[190.99824524 -317.70397949]
[186.91786194 -303.23129272]
[180.45011902 -289.65646362]
[171.78111267 -277.37002563]
[161.16026306 -266.72549438]
[148.89315796 -258.02917480]
[135.33274841 -251.53125000]
[120.86918640 -247.41865540]
[105.91861725 -245.80975342]
[104.98298645 -230.83895874]
[104.04736328 -215.86816406]
[103.11173248 -200.89736938]
[102.17610168 -185.92658997]
[101.86404419 -170.92982483]
[102.17610168 -155.93307495]
[102.48815918 -140.93632507]
[102.80021667 -125.93956757]
[103.11227417 -110.94281769]
[117.78209686 -107.94314575]
[131.42309570 -101.75109100]
[143.34980774 -92.67427826]
[152.96212769 -81.16537476]
[159.77549744 -67.79952240]
[163.44535828 -53.24557877]
[163.78453064 -38.23268127]
[160.77279663 -23.51369667]
[154.55802917 -9.82746029]
[145.44902039 2.13829947]
[133.90003967 11.78152084]
[120.48821259 18.61610413]
[105.88475037 22.29641151]
[106.19680023 37.29316711]
[106.50885773 52.28992081]
[106.82091522 67.28667450]
[107.13297272 82.28342438]
[117.51660919 92.38918304]
[117.81804657 106.87556458]
[107.86378479 117.40451813]
[111.18864441 125.98339844]
[108.02306366 132.71575928]
[108.02306366 147.71575928]
[118.91761780 158.84889221]
[118.70393372 174.06101990]
[108.02306366 184.37870789]
[108.02306366 199.37870789]
[108.02306366 214.37870789]
[108.02306366 229.37870789]
[108.02306366 244.37870789]
[108.02306366 259.37869263]
[108.02306366 274.37869263]
[108.02306366 289.37869263]
[108.02306366 304.37869263]
[108.02306366 319.37869263]
[108.02306366 334.37869263]
[122.56295013 338.44000244]
[135.46733093 346.27453613]
[145.77861023 357.30084229]
[152.73164368 370.70077515]
[155.81044006 385.47994995]
[154.78654480 400.54162598]
[149.73594666 414.76815796]
[141.03341675 427.10382080]
[129.32475281 436.63323975]
[115.47882080 442.64926147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 127]
[25 126]
[26 124]
[29 121]
[30 120]
[31 119]
[32 118]
[33 117]
[46 104]
[47 103]
[48 102]
[49 101]
[50 100]
[55 99]
[56 98]
[57 97]
[58 96]
[59 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
