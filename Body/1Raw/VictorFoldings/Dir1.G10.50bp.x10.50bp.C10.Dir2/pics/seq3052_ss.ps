%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUAUCUACGGGGGGGGGGXUUCAAAUUCCUCCCUGUACGAAAGGACAAGAGAAAUAAGGCCUACUUCAxxxxxxxxxxCUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAUCAACUGGCCCCCCCCCCCUUCAAUCUAC\
) } def
/len { sequence length } bind def

/coor [
[87.25103760 350.04928589]
[72.76134491 345.84082031]
[59.85511398 338.02468872]
[49.41231537 327.13385010]
[42.14495087 313.91085815]
[38.54852295 299.25723267]
[38.86824417 284.17214966]
[43.08231735 269.68408203]
[50.90341187 256.78088379]
[61.79828262 246.34226990]
[75.02408600 239.08001709]
[89.67908478 235.48925781]
[89.99113464 220.49249268]
[90.30319214 205.49574280]
[90.61524963 190.49899292]
[90.92730713 175.50224304]
[91.23936462 160.50547791]
[91.55142212 145.50872803]
[91.86347198 130.51197815]
[92.17552948 115.51522064]
[88.46372223 130.04872131]
[75.96443939 138.34135437]
[61.13108826 136.11163330]
[51.62216187 124.51076508]
[52.34713745 109.52829742]
[62.93170929 98.89971161]
[77.91299438 98.11321259]
[63.14693832 95.47434235]
[48.38088226 92.83547974]
[33.43476486 98.02432251]
[22.26716805 88.16866302]
[7.50111341 85.52979279]
[-7.26494217 82.89093018]
[-18.31493378 89.62528992]
[-30.59265518 87.08039856]
[-37.59136200 77.16447449]
[-52.29932404 74.21899414]
[-67.00728607 71.27351379]
[-82.05812073 76.15029144]
[-93.01825714 66.06443787]
[-108.37223053 71.82530975]
[-120.86468506 61.20125198]
[-117.64445496 45.12138367]
[-102.02424622 40.12729263]
[-90.07277679 51.35647583]
[-76.07395935 46.26901245]
[-64.06180573 56.56555176]
[-49.35383987 59.51103210]
[-34.64587784 62.45651627]
[-18.38475800 55.93149185]
[-4.62607813 68.12487793]
[10.13997746 70.76374054]
[24.90603256 73.40260315]
[38.79598618 68.02501678]
[51.01974869 78.06942749]
[65.78580475 80.70829010]
[80.55185699 83.34715271]
[91.05760956 81.84587097]
[99.21644592 85.15019226]
[103.27904510 91.07971954]
[114.37036133 80.98107147]
[125.46167755 70.88242340]
[136.55299377 60.78377151]
[127.54705048 48.77386856]
[119.72351074 35.96226883]
[113.15324402 22.46500206]
[107.89572906 8.40429974]
[103.99859619 -6.09249640]
[101.49713135 -20.89409828]
[100.41400146 -35.86645889]
[100.75899506 -50.87398148]
[102.52899933 -65.78075409]
[105.70799255 -80.45177460]
[110.26716614 -94.75417328]
[116.16524506 -108.55842590]
[123.34880829 -121.73951721]
[131.75280762 -134.17807007]
[141.30111694 -145.76144409]
[151.90727234 -156.38473511]
[163.47521973 -165.95172119]
[175.90019226 -174.37577820]
[189.06967163 -181.58059692]
[202.86439514 -187.50094604]
[217.15942383 -192.08319092]
[231.82528687 -195.28585815]
[246.72918701 -197.07991028]
[261.73614502 -197.44912720]
[276.71023560 -196.39015198]
[291.51583862 -193.91258240]
[306.01892090 -190.03884888]
[320.08807373 -184.80403137]
[333.59591675 -178.25555420]
[346.42013550 -170.45269775]
[358.44454956 -161.46615601]
[369.56030273 -151.37728882]
[379.66668701 -140.27748108]
[388.67218018 -128.26724243]
[396.49523926 -115.45536804]
[403.06503296 -101.95785522]
[408.32202148 -87.89696503]
[412.21862793 -73.40002441]
[414.71954346 -58.59833145]
[415.80215454 -43.62593079]
[415.45660400 -28.61842155]
[413.68603516 -13.71171379]
[410.50653076 0.95918894]
[405.94683838 15.26142311]
[400.04824829 29.06546211]
[392.86419678 42.24629211]
[384.45974731 54.68453979]
[374.91101074 66.26756287]
[364.30447388 76.89046478]
[352.73617554 86.45703125]
[340.31088257 94.88063049]
[327.14114380 102.08497620]
[313.34622192 108.00482178]
[299.05102539 112.58655548]
[284.38504028 115.78867340]
[269.48107910 117.58219147]
[254.47412109 117.95085907]
[239.50007629 116.89134216]
[224.69453430 114.41323090]
[210.19161987 110.53896332]
[196.12263489 105.30363464]
[182.61502075 98.75466156]
[169.79110718 90.95134735]
[157.76701355 81.96435547]
[146.65164185 71.87509155]
[135.56031799 81.97373962]
[124.46900940 92.07238770]
[113.37769318 102.17103577]
[107.17228699 115.82727814]
[106.86022949 130.82403564]
[106.54817200 145.82078552]
[106.23611450 160.81753540]
[105.92405701 175.81428528]
[105.61200714 190.81105042]
[105.29994965 205.80780029]
[104.98789215 220.80455017]
[104.67583466 235.80130005]
[119.16876984 239.99859619]
[132.08103943 247.80473328]
[142.53224182 258.68750000]
[149.80981445 271.90490723]
[153.41755676 286.55572510]
[153.10948181 301.64105225]
[148.90660095 316.13238525]
[141.09547424 329.04162598]
[130.20866394 339.48861694]
[116.98847198 346.76110840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[27 57]
[28 56]
[29 55]
[31 53]
[32 52]
[33 51]
[36 49]
[37 48]
[38 47]
[40 45]
[60 131]
[61 130]
[62 129]
[63 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
