%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACAAACCCGGGGGGGGGGACAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCxxxxxxxxxxACAAACUACCACCUACCUCCCUCACCAAAGCCCAUAAAAAUAAAAAAUUACCCCCCCCCCUAACAAACCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 365.12161255]
[71.19830322 359.10559082]
[59.48964310 349.57617188]
[50.78712082 337.24050903]
[45.73651886 323.01397705]
[44.71262741 307.95230103]
[47.79142761 293.17315674]
[54.74444962 279.77322388]
[65.05573273 268.74688721]
[77.96011353 260.91238403]
[92.50000000 256.85107422]
[92.50000000 241.85105896]
[92.50000000 226.85105896]
[92.50000000 211.85105896]
[92.50000000 196.85105896]
[92.50000000 181.85105896]
[92.50000000 166.85105896]
[92.50000000 151.85105896]
[92.50000000 136.85105896]
[92.50000000 121.85105896]
[85.35563660 117.86788940]
[80.04710388 111.64477539]
[65.33914185 114.59025574]
[50.63117981 117.53574371]
[35.92321777 120.48122406]
[21.21525764 123.42670441]
[17.91477585 138.29367065]
[8.84747982 150.52903748]
[-4.41566896 158.01293945]
[-19.57674789 159.44874573]
[-34.00901031 154.58770752]
[-45.21197891 144.27201843]
[-51.24466705 130.28894043]
[-51.06188202 115.06111908]
[-44.69528961 101.22686768]
[-33.24794006 91.18306732]
[-18.70315552 86.66984558]
[-3.58090901 88.46916199]
[9.49878025 96.26926422]
[18.26977539 108.71874237]
[32.97773743 105.77326202]
[47.68569946 102.82778168]
[62.39366150 99.88229370]
[77.10162354 96.93681335]
[86.11158752 81.53839874]
[103.40410614 77.14981842]
[110.31110382 63.83465958]
[117.21810150 50.51950455]
[109.06800079 37.57643509]
[108.49447632 22.39197159]
[115.55148315 9.04787350]
[128.25526428 1.08105981]
[143.14080811 0.54629856]
[150.04780579 -12.76885700]
[156.95480347 -26.08401299]
[163.86180115 -39.39916992]
[163.61204529 -44.74306107]
[165.30598450 -49.17960358]
[168.25642395 -52.11159897]
[171.63766479 -53.30941010]
[179.36174011 -66.16780853]
[179.22616577 -84.55154419]
[194.83642578 -92.50890350]
[202.29133606 -105.52521515]
[209.74624634 -118.54151917]
[217.20115662 -131.55783081]
[205.32839966 -140.76562500]
[194.85270691 -151.53623962]
[185.97801208 -163.66001892]
[178.87704468 -176.90095520]
[173.68804932 -191.00132751]
[170.51202393 -205.68666077]
[169.41078186 -220.67109680]
[170.40576172 -235.66296387]
[173.47761536 -250.37045288]
[178.56651306 -264.50726318]
[185.57342529 -277.79818726]
[194.36195374 -289.98458862]
[204.76101685 -300.82919312]
[216.56820679 -310.12091064]
[229.55369568 -317.67892456]
[243.46470642 -323.35607910]
[258.03045654 -327.04183960]
[272.96743774 -328.66452026]
[287.98486328 -328.19250488]
[302.79043579 -325.63497925]
[317.09597778 -321.04174805]
[330.62298584 -314.50216675]
[343.10818481 -306.14358521]
[354.30856323 -296.12869263]
[364.00604248 -284.65243530]
[372.01190186 -271.93817139]
[378.17031860 -258.23342896]
[382.36135864 -243.80493164]
[384.50350952 -228.93357849]
[384.55502319 -213.90881348]
[382.51492310 -199.02311707]
[378.42291260 -184.56622314]
[372.35864258 -170.81956482]
[364.44015503 -158.05070496]
[354.82159424 -146.50819397]
[343.69018555 -136.41671753]
[331.26260376 -127.97271729]
[317.78076172 -121.34054565]
[303.50704956 -116.64929962]
[288.71936035 -113.99030304]
[273.70550537 -113.41530609]
[258.75778198 -114.93550873]
[244.16708374 -118.52130890]
[230.21746826 -124.10292053]
[222.76255798 -111.08660889]
[215.30764771 -98.07030487]
[207.85273743 -85.05399323]
[210.71891785 -73.26025391]
[204.56066895 -62.33803177]
[192.22015381 -58.44372559]
[184.49606323 -45.58532333]
[177.17695618 -32.49216843]
[170.26995850 -19.17701340]
[163.36296082 -5.86185837]
[156.45596313 7.45329714]
[164.59199524 19.93009567]
[165.39582825 34.90373230]
[158.55155945 48.35819244]
[145.80809021 56.63469315]
[130.53326416 57.42650223]
[123.62625885 70.74166107]
[116.71926117 84.05681610]
[122.99954987 97.82297516]
[119.41372681 112.52301788]
[107.50000000 121.85105896]
[107.50000000 136.85105896]
[107.50000000 151.85105896]
[107.50000000 166.85105896]
[107.50000000 181.85105896]
[107.50000000 196.85105896]
[107.50000000 211.85105896]
[107.50000000 226.85105896]
[107.50000000 241.85105896]
[107.50000000 256.85107422]
[122.03988647 260.91238403]
[134.94427490 268.74688721]
[145.25555420 279.77322388]
[152.20857239 293.17315674]
[155.28736877 307.95230103]
[154.26348877 323.01397705]
[149.21287537 337.24050903]
[140.51036072 349.57617188]
[128.80169678 359.10559082]
[114.95575714 365.12161255]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[46 128]
[47 127]
[48 126]
[53 121]
[54 120]
[55 119]
[56 118]
[60 117]
[61 116]
[63 113]
[64 112]
[65 111]
[66 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
