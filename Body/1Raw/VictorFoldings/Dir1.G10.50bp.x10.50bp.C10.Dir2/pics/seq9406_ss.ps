%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCGACCCUAGGGGGGGGGGUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAAAUUCUUCUUAGUAGCUAUUxxxxxxxxxxUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGACCCCCCCCCCUUCUACCCUA\
) } def
/len { sequence length } bind def

/coor [
[42.24774551 336.51626587]
[27.60359192 332.45220947]
[13.24153423 327.48239136]
[-0.78246766 321.62619019]
[-14.41376781 314.90640259]
[-27.59925079 307.34924316]
[-40.28754044 298.98413086]
[-52.42919540 289.84365845]
[-63.97690582 279.96347046]
[-74.88567352 269.38204956]
[-85.11299133 258.14062500]
[-96.81262207 267.52777100]
[-108.51224518 276.91494751]
[-114.43394470 291.58612061]
[-129.20298767 293.51608276]
[-140.90260315 302.90325928]
[-152.60223389 312.29040527]
[-164.30184937 321.67758179]
[-176.00148010 331.06475830]
[-181.43984985 346.53588867]
[-197.60517883 349.29531860]
[-207.86793518 336.50439453]
[-201.67070007 321.32131958]
[-185.38864136 319.36511230]
[-173.68901062 309.97796631]
[-161.98939514 300.59078979]
[-150.28976440 291.20364380]
[-138.59014893 281.81646729]
[-133.50527954 267.81671143]
[-117.89940643 265.21530151]
[-106.19978333 255.82815552]
[-94.50016022 246.44099426]
[-103.04301453 234.34585571]
[-110.83477020 221.75373840]
[-117.84659576 208.71124268]
[-124.05255890 195.26658630]
[-129.42970276 181.46952820]
[-133.95814514 167.37109375]
[-137.62110901 153.02343750]
[-140.40505981 138.47962952]
[-142.29969788 123.79347992]
[-143.29801941 109.01931000]
[-143.39631653 94.21177673]
[-142.59425354 79.42565918]
[-140.89476013 64.71564484]
[-138.30415344 50.13616180]
[-134.83201599 35.74113464]
[-130.49116516 21.58381462]
[-125.29767609 7.71657515]
[-119.27076721 -5.80928802]
[-112.43272400 -18.94373894]
[-104.80883789 -31.63818932]
[-96.42732239 -43.84568024]
[-87.31918335 -55.52105713]
[-77.51809692 -66.62112427]
[-67.06034088 -77.10482025]
[-55.98458481 -86.93336487]
[-44.33181000 -96.07040405]
[-32.14511871 -104.48213196]
[-19.46959114 -112.13743591]
[-6.35211849 -119.00799561]
[7.15877390 -125.06838989]
[21.01310730 -130.29620361]
[35.15962982 -134.67211914]
[49.54601288 -138.17991638]
[64.11903381 -140.80662537]
[78.82479095 -142.54254150]
[93.60887909 -143.38124084]
[108.41661072 -143.31961060]
[123.19320679 -142.35789490]
[137.88400269 -140.49963379]
[152.43466187 -137.75172424]
[166.79135132 -134.12429810]
[180.90095520 -129.63081360]
[194.71130371 -124.28785706]
[208.17127991 -118.11521912]
[221.23110962 -111.13571930]
[233.84248352 -103.37517548]
[245.95874023 -94.86231232]
[257.53506470 -85.62860107]
[268.52862549 -75.70820618]
[278.89877319 -65.13783264]
[288.60711670 -53.95657349]
[297.61776733 -42.20579529]
[310.05722046 -50.58794022]
[322.49664307 -58.97008133]
[334.93609619 -67.35222626]
[347.37554932 -75.73436737]
[359.81497192 -84.11650848]
[372.25442505 -92.49865723]
[384.69384766 -100.88079834]
[397.13330078 -109.26293945]
[394.45419312 -124.25434875]
[398.11059570 -139.03781128]
[407.46896362 -151.05200195]
[420.90792847 -158.21539307]
[436.09912109 -159.28686523]
[450.41052246 -154.08081055]
[461.36267090 -143.49919128]
[467.05798340 -129.37533569]
[466.50973511 -114.15628815]
[459.81289673 -100.47884369]
[448.12774658 -90.71269989]
[433.47882080 -86.54991150]
[418.40414429 -88.71168518]
[405.51544189 -96.82350159]
[393.07598877 -88.44136047]
[380.63656616 -80.05921173]
[368.19711304 -71.67707062]
[355.75769043 -63.29492950]
[343.31823730 -54.91278458]
[330.87881470 -46.53064346]
[318.43936157 -38.14849854]
[305.99990845 -29.76635551]
[313.69491577 -16.66083527]
[320.55728149 -3.10074472]
[326.56021118 10.86108208]
[331.68032837 25.17024040]
[335.89773560 39.77097702]
[339.19592285 54.60639572]
[341.56210327 69.61869049]
[342.98703003 84.74936676]
[343.46511841 99.93947601]
[342.99456787 115.12981415]
[341.57717896 130.26119995]
[339.21847534 145.27467346]
[335.92764282 160.11172485]
[331.71752930 174.71455383]
[326.60449219 189.02626038]
[320.60852051 202.99107361]
[313.75289917 216.55456543]
[306.06442261 229.66390991]
[297.57299805 242.26802063]
[288.31170654 254.31776428]
[278.31668091 265.76623535]
[267.62680054 276.56875610]
[256.28378296 286.68328857]
[244.33180237 296.07040405]
[231.81742859 304.69351196]
[218.78942871 312.51904297]
[205.29855347 319.51647949]
[191.39738464 325.65856934]
[177.14007568 330.92138672]
[162.58219910 335.28439331]
[147.78045654 338.73059082]
[132.79254150 341.24661255]
[117.67684937 342.82257080]
[102.49227905 343.45239258]
[87.29800415 343.13357544]
[72.15321350 341.86737061]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 32]
[12 31]
[13 30]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[84 114]
[85 113]
[86 112]
[87 111]
[88 110]
[89 109]
[90 108]
[91 107]
[92 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
