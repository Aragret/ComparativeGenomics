%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACAGCCCUGGGGGGGGGGCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAAxxxxxxxxxxUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCCCCCCCCCCCUAACAGCCCU\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 381.30227661]
[71.01555634 375.74926758]
[58.81560135 366.88296509]
[49.20452881 355.26065063]
[42.78650284 341.61294556]
[39.96496582 326.79776001]
[40.91728210 311.74636841]
[45.58358765 297.40493774]
[53.67055511 284.67498779]
[64.66983032 274.35671997]
[77.88998413 267.09875488]
[92.50000000 263.35729980]
[92.50000000 248.35731506]
[92.50000000 233.35731506]
[92.50000000 218.35731506]
[92.50000000 203.35731506]
[92.50000000 188.35731506]
[92.50000000 173.35731506]
[92.50000000 158.35731506]
[92.50000000 143.35731506]
[92.50000000 128.35731506]
[79.79801941 121.26657104]
[72.06487274 108.94515228]
[57.08463287 109.71481323]
[42.10439301 110.48447418]
[27.12415123 111.25413513]
[12.14391041 112.02379608]
[23.60315514 121.70293427]
[27.33825493 136.23045349]
[21.96856308 150.23640442]
[9.47893810 158.54357910]
[-5.51393747 158.08132935]
[-17.46807861 149.02050781]
[-21.96473885 134.71035767]
[-17.34176826 120.44052887]
[-5.30903292 111.48607635]
[-20.21348000 109.79567719]
[-35.11792755 108.10527802]
[-48.51338959 116.93370819]
[-63.72242737 111.82835388]
[-69.07797241 96.70559692]
[-60.47170639 83.16632843]
[-44.50562286 81.59671783]
[-33.42753220 93.20082855]
[-18.52308273 94.89122772]
[-3.61863565 96.58162689]
[11.37425041 97.04354858]
[26.35449219 96.27389526]
[41.33473206 95.50423431]
[56.31497192 94.73457336]
[71.29521179 93.96491241]
[75.70050049 80.60216522]
[86.28557587 70.14691162]
[101.23964691 65.40950012]
[98.78672028 50.61142349]
[96.33379364 35.81334686]
[93.88085938 21.01526642]
[78.83900452 20.53707886]
[64.17952728 17.13326073]
[50.46590424 10.93464756]
[38.22525406 2.17949557]
[27.92806816 -8.79566956]
[19.97014999 -21.56899071]
[14.65737629 -35.64949799]
[12.19395733 -50.49597168]
[12.67457962 -65.53775787]
[16.08077049 -80.19667816]
[22.28160286 -93.90930176]
[31.03873634 -106.14853668]
[42.01556778 -116.44393921]
[54.79017639 -124.39978790]
[68.87154388 -129.71028137]
[83.71841431 -132.17129517]
[98.76012421 -131.68824768]
[113.41849518 -128.27967834]
[127.13011169 -122.07662964]
[139.36791992 -113.31751251]
[149.66156006 -102.33901978]
[157.61534119 -89.56311798]
[162.92355347 -75.48089600]
[165.38217163 -60.63362503]
[164.89668274 -45.59199524]
[161.48574829 -30.93417549]
[155.28047180 -17.22356415]
[146.51937866 -4.98716593]
[135.53921509 5.30468702]
[122.76202393 13.25640297]
[108.67893982 18.56233788]
[111.13186646 33.36041641]
[113.58480072 48.15849686]
[116.03772736 62.95657730]
[128.45603943 71.36998749]
[143.10876465 68.16098785]
[157.76148987 64.95199585]
[172.41421509 61.74299622]
[186.99797058 58.23382950]
[201.50659180 54.42597198]
[216.01521301 50.61811066]
[221.73181152 36.31333542]
[234.62467957 28.21225929]
[249.63798523 29.24413681]
[261.02850342 38.80415726]
[275.53713989 34.99629974]
[290.04574585 31.18844032]
[304.55438232 27.38058090]
[319.06301880 23.57272339]
[330.33132935 11.65816975]
[346.21893311 15.72225380]
[350.38195801 31.58419228]
[338.53790283 42.92658615]
[322.87084961 38.08134842]
[308.36224365 41.88920593]
[293.85360718 45.69706726]
[279.34500122 49.50492477]
[264.83636475 53.31278229]
[259.60870361 67.23432922]
[247.03713989 75.50598145]
[231.82771301 74.78049469]
[219.82307434 65.12673950]
[205.31445312 68.93459320]
[190.80581665 72.74245453]
[187.64080811 76.39373779]
[182.12550354 78.05787659]
[175.62321472 76.39572144]
[160.97048950 79.60472107]
[146.31776428 82.81371307]
[131.66503906 86.02271271]
[133.47421265 97.64948273]
[131.27511597 108.84046936]
[125.57251740 118.29761505]
[117.26243591 125.00928497]
[107.50000000 128.35731506]
[107.50000000 143.35731506]
[107.50000000 158.35731506]
[107.50000000 173.35731506]
[107.50000000 188.35731506]
[107.50000000 203.35731506]
[107.50000000 218.35731506]
[107.50000000 233.35731506]
[107.50000000 248.35731506]
[107.50000000 263.35729980]
[122.11001587 267.09875488]
[135.33016968 274.35671997]
[146.32945251 284.67498779]
[154.41641235 297.40493774]
[159.08271790 311.74636841]
[160.03503418 326.79776001]
[157.21350098 341.61294556]
[150.79547119 355.26065063]
[141.18440247 366.88296509]
[128.98443604 375.74926758]
[114.96250153 381.30227661]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[36 46]
[37 45]
[38 44]
[54 91]
[55 90]
[56 89]
[57 88]
[92 127]
[93 126]
[94 125]
[95 124]
[96 121]
[97 120]
[98 119]
[102 115]
[103 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
