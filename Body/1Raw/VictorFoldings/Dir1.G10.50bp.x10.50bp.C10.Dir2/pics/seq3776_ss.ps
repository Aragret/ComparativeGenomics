%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCAAACAAUCGGGGGGGGGGUCAUAUGAAGUCACCCUAGCCAUCAUUCUACUAUCAACAUUACUAAUAAGxxxxxxxxxxUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACCCCCCCCCCCAACCCAAACAACC\
) } def
/len { sequence length } bind def

/coor [
[84.49719238 437.63726807]
[70.62305450 431.78900146]
[58.26825333 423.18362427]
[47.97287750 412.19732666]
[40.18700027 399.31036377]
[35.25098801 385.08609009]
[33.38061905 370.14636230]
[34.65765762 355.14428711]
[39.02628326 340.73562622]
[46.29550934 327.55035400]
[56.14756393 316.16479492]
[68.15175629 307.07672119]
[81.78330994 300.68341064]
[96.44631195 297.26434326]
[96.14617920 282.26736450]
[95.84604645 267.27035522]
[95.54591370 252.27336121]
[95.24578094 237.27636719]
[94.94565582 222.27937317]
[94.64552307 207.28236389]
[94.34539032 192.28536987]
[94.04525757 177.28837585]
[93.74512482 162.29138184]
[93.44499207 147.29438782]
[79.15728760 142.95704651]
[66.90793610 134.41862488]
[57.89490509 122.51416779]
[52.99963760 108.40787506]
[52.70087433 93.47932434]
[57.02783585 79.18846893]
[65.55735779 66.93292999]
[77.45527649 57.91125870]
[91.55801392 53.00575256]
[91.25788116 38.00875473]
[90.95774841 23.01175690]
[90.65761566 8.01476002]
[75.67250061 7.20638275]
[60.78800201 5.29351902]
[46.08542633 2.28661537]
[31.64506912 -1.79790533]
[17.54580116 -6.93773413]
[3.86462593 -13.10479927]
[-9.32373142 -20.26541710]
[-21.94724083 -28.38047981]
[-33.93695450 -37.40566635]
[-45.22739029 -47.29167938]
[-55.75688553 -57.98452759]
[-65.46792603 -69.42581177]
[-74.30747223 -81.55303192]
[-82.22724915 -94.29997253]
[-89.18400574 -107.59699249]
[-95.13973236 -121.37148285]
[-100.06191254 -135.54820251]
[-103.92366028 -150.04972839]
[-106.70388031 -164.79684448]
[-108.38738251 -179.70901489]
[-108.96498871 -194.70480347]
[-108.43353271 -209.70230103]
[-106.79592133 -224.61958313]
[-104.06109619 -239.37519836]
[-100.24398804 -253.88853455]
[-95.36545563 -268.08032227]
[-89.45214081 -281.87307739]
[-82.53633881 -295.19143677]
[-74.65582275 -307.96267700]
[-65.85363770 -320.11706543]
[-56.17784882 -331.58816528]
[-45.68131256 -342.31335449]
[-34.42134857 -352.23406982]
[-22.45946312 -361.29611206]
[-9.86098576 -369.44998169]
[3.30527472 -376.65115356]
[16.96740723 -382.86029053]
[31.05079269 -388.04348755]
[45.47851181 -392.17242432]
[60.17176819 -395.22454834]
[75.05030823 -397.18319702]
[90.03286743 -398.03768921]
[105.03761292 -397.78332520]
[119.98260498 -396.42153931]
[134.78620911 -393.95971680]
[149.36756897 -390.41131592]
[163.64706421 -385.79574585]
[177.54667664 -380.13821411]
[190.99050903 -373.46957397]
[203.90513611 -365.82629395]
[216.22001648 -357.25012207]
[227.86787415 -347.78784180]
[238.78512573 -337.49121094]
[248.91212463 -326.41641235]
[258.19354248 -314.62393188]
[266.57873535 -302.17822266]
[274.02185059 -289.14721680]
[280.48226929 -275.60211182]
[285.92471313 -261.61685181]
[290.31942749 -247.26785278]
[293.64242554 -232.63348389]
[295.87557983 -217.79365540]
[297.00665283 -202.82943726]
[297.02947998 -187.82255554]
[295.94393921 -172.85496521]
[293.75598145 -158.00840759]
[290.47753906 -143.36399841]
[286.12649536 -129.00169373]
[280.72665405 -114.99994659]
[274.30746460 -101.43523407]
[266.90405273 -88.38163757]
[258.55676270 -75.91045380]
[249.31126404 -64.08979797]
[239.21803284 -52.98423386]
[228.33216858 -42.65440750]
[216.71315002 -33.15674591]
[204.42442322 -24.54311943]
[191.53312683 -16.86057472]
[178.10963440 -10.15106869]
[164.22731018 -4.45124912]
[149.96192932 0.20775399]
[135.39143372 3.80049443]
[120.59539032 6.30734921]
[105.65460968 7.71462774]
[105.95474243 22.71162415]
[106.25487518 37.70862198]
[106.55500793 52.70561981]
[120.84271240 57.04295349]
[133.09205627 65.58136749]
[142.10508728 77.48583221]
[147.00036621 91.59212494]
[147.29913330 106.52067566]
[142.97216797 120.81153107]
[134.44264221 133.06707764]
[122.54472351 142.08874512]
[108.44198608 146.99424744]
[108.74211884 161.99124146]
[109.04225159 176.98825073]
[109.34238434 191.98524475]
[109.64251709 206.98223877]
[109.94264984 221.97923279]
[110.24278259 236.97622681]
[110.54291534 251.97323608]
[110.84304810 266.97021484]
[111.14318085 281.96722412]
[111.44331360 296.96423340]
[126.23136902 299.79388428]
[140.10780334 305.63668823]
[152.46598816 314.23718262]
[162.76568604 325.21945190]
[170.55664062 338.10333252]
[175.49824524 352.32565308]
[177.37448120 367.26464844]
[176.10334778 382.26724243]
[171.74040222 396.67761230]
[164.47634888 409.86575317]
[154.62878418 421.25518799]
[142.62817383 430.34796143]
[128.99913025 436.74664307]
[114.33747101 440.17147827]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[24 132]
[33 123]
[34 122]
[35 121]
[36 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
