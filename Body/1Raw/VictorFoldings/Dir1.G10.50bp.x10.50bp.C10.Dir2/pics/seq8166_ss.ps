%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUUAUAACGGGGGGGGGGAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCxxxxxxxxxxCAACCGACUAAUCACCACCCAACAAUGACUAAUCAAACUAACCUCAAAACCCCCCCCCCCAAAUGAUAAC\
) } def
/len { sequence length } bind def

/coor [
[83.93930054 472.25167847]
[70.09336853 466.23562622]
[58.38470459 456.70620728]
[49.68217850 444.37054443]
[44.63157654 430.14404297]
[43.60768509 415.08233643]
[46.68648529 400.30319214]
[53.63950729 386.90325928]
[63.95079041 375.87692261]
[76.85517120 368.04241943]
[91.39505768 363.98110962]
[91.39505768 348.98110962]
[91.39505768 333.98110962]
[91.39505768 318.98110962]
[91.39505768 303.98110962]
[91.39505768 288.98110962]
[91.39505768 273.98110962]
[91.39505768 258.98110962]
[91.39505768 243.98110962]
[91.39505768 228.98110962]
[79.77663422 223.84187317]
[70.94857025 214.64086914]
[66.25982666 202.73262024]
[66.44634247 189.88902283]
[71.51575470 178.03575134]
[80.74094391 168.96348572]
[92.76411438 164.05749512]
[93.38809204 149.07048035]
[94.01206970 134.08346558]
[94.63604736 119.09644318]
[89.82918549 133.30538940]
[77.33041382 141.59881592]
[62.37027359 140.50604248]
[51.20933151 130.48439026]
[48.51826859 115.72776031]
[55.42324448 102.41156006]
[69.03464508 96.10839844]
[83.65738678 99.45671844]
[70.56423187 92.13761139]
[57.47107697 84.81850433]
[44.37792206 77.49939728]
[31.28476906 70.18029022]
[18.11618614 62.99778366]
[4.87360048 55.95264816]
[-8.36898518 48.90751266]
[-21.61157036 41.86237717]
[-36.65122986 46.71873093]
[-50.68157578 39.44377136]
[-55.37864685 24.35360527]
[-47.95575714 10.40096283]
[-32.81677246 5.86369658]
[-18.94338989 13.43368721]
[-14.56643581 28.61979294]
[-1.32385004 35.66492844]
[11.91873550 42.71006393]
[25.16132164 49.75519943]
[32.59171295 50.12253189]
[38.60387421 57.08713913]
[51.69702911 64.40624237]
[64.79018402 71.72534943]
[77.88333893 79.04445648]
[90.97649384 86.36356354]
[105.20326996 81.60974884]
[111.26628113 67.88969421]
[117.32929993 54.16963959]
[123.39231110 40.44958496]
[129.45532227 26.72953033]
[135.51834106 13.00947762]
[123.02537537 4.63707781]
[112.17620087 -5.77764320]
[103.30049133 -17.91819382]
[96.66798401 -31.41563416]
[92.48022461 -45.85979462]
[90.86447144 -60.81173706]
[91.86984253 -75.81707764]
[95.46576691 -90.41983032]
[101.54297638 -104.17623901]
[109.91679382 -116.66824341]
[120.33274841 -127.51624298]
[132.47430420 -136.39057922]
[145.97250366 -143.02156067]
[160.41712952 -147.20767212]
[175.36924744 -148.82173157]
[190.37448120 -147.81466675]
[204.97683716 -144.21707153]
[218.73254395 -138.13830566]
[231.22360229 -129.76307678]
[242.07041931 -119.34589386]
[250.94337463 -107.20333099]
[257.57281494 -93.70438385]
[261.75729370 -79.25926971]
[263.36965942 -64.30696869]
[262.36090088 -49.30184937]
[258.76165771 -34.69991302]
[252.68132019 -20.94488716]
[244.30467224 -8.45477772]
[233.88626099 2.39085865]
[221.74269104 11.26243401]
[208.24299622 17.89035225]
[193.79740906 22.07319641]
[178.84492493 23.68385696]
[163.83992004 22.67338562]
[149.23838806 19.07249069]
[143.17538452 32.79254532]
[137.11236572 46.51259613]
[131.04934692 60.23265076]
[124.98633575 73.95270538]
[118.92332458 87.67276001]
[130.46818542 78.09590149]
[144.66455078 73.25200653]
[159.65544128 73.77468872]
[173.47994995 79.59557343]
[184.32975769 89.95326233]
[190.78564453 103.49289703]
[192.00311279 118.44340515]
[187.82293701 132.84916687]
[178.79190063 144.82582092]
[166.09130859 152.80674744]
[151.38250732 155.74800110]
[136.58946228 153.26481628]
[123.64723969 145.68202209]
[114.24872589 133.99151611]
[109.62306213 119.72042084]
[108.99908447 134.70744324]
[108.37510681 149.69445801]
[107.75112915 164.68147278]
[122.77297211 173.69480896]
[131.15289307 188.97801208]
[130.67993164 206.31280518]
[121.57265472 220.96582031]
[106.39505768 228.98110962]
[106.39505768 243.98110962]
[106.39505768 258.98110962]
[106.39505768 273.98110962]
[106.39505768 288.98110962]
[106.39505768 303.98110962]
[106.39505768 318.98110962]
[106.39505768 333.98110962]
[106.39505768 348.98110962]
[106.39505768 363.98110962]
[120.93494415 368.04241943]
[133.83932495 375.87692261]
[144.15060425 386.90325928]
[151.10363770 400.30319214]
[154.18243408 415.08233643]
[153.15853882 430.14404297]
[148.10794067 444.37054443]
[139.40541077 456.70620728]
[127.69675446 466.23562622]
[113.85081482 472.25167847]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 126]
[28 125]
[29 124]
[30 123]
[38 62]
[39 61]
[40 60]
[41 59]
[42 58]
[43 56]
[44 55]
[45 54]
[46 53]
[63 108]
[64 107]
[65 106]
[66 105]
[67 104]
[68 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
