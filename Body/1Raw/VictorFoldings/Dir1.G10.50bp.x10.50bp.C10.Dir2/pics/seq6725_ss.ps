%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCAGUCCGGGGGGGGGGUAGCUGCUGGCAUCACUAUACUACUAACAGACCGCAACCUCAACACCACCxxxxxxxxxxCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCCCCCCCCCCCUCCCAUUCC\
) } def
/len { sequence length } bind def

/coor [
[83.90863800 389.87417603]
[70.68843842 382.60171509]
[59.80163574 372.15472412]
[51.99050522 359.24545288]
[47.78762436 344.75415039]
[47.47955322 329.66882324]
[51.08729172 315.01797485]
[58.36486435 301.80059814]
[68.81607056 290.91781616]
[81.72833252 283.11169434]
[96.22127533 278.91439819]
[95.90921783 263.91763306]
[95.59716034 248.92089844]
[95.28510284 233.92413330]
[94.97304535 218.92738342]
[94.66098785 203.93063354]
[94.34893799 188.93388367]
[94.03688049 173.93711853]
[93.72482300 158.94036865]
[93.41276550 143.94361877]
[93.10070801 128.94686890]
[84.87712097 125.62849426]
[77.99652863 120.03417206]
[73.06995392 112.66072083]
[70.53491974 104.16292572]
[55.63301468 102.45023346]
[40.73111343 100.73754120]
[31.78229713 102.87541962]
[25.53818893 98.83107758]
[10.67514133 96.80873871]
[4.69060755 110.66831970]
[-4.81216860 122.39861298]
[-17.12801933 131.12916565]
[-31.34302521 136.21208191]
[-46.40233994 137.27021790]
[-61.18846130 134.22502136]
[-74.60415649 127.30248260]
[-85.65390778 117.01628876]
[-93.51773071 104.12975311]
[-97.61208344 89.59913635]
[-97.63314819 74.50270844]
[-93.57934570 59.96072388]
[-85.75151062 47.05229568]
[-74.73050690 36.73531723]
[-61.33417130 29.77536964]
[-46.55660629 26.68893433]
[-31.49439812 27.70504189]
[-17.26526451 32.74829102]
[-4.92510414 41.44443893]
[4.61036444 53.14817429]
[10.63354397 66.99100494]
[12.69747543 81.94569397]
[27.56052208 83.96802521]
[42.44380188 85.83563995]
[57.34570312 87.54833221]
[72.24760437 89.26101685]
[88.25569916 72.65786743]
[111.31847382 72.47885895]
[120.33600616 60.49202728]
[129.35353088 48.50519562]
[118.31443787 38.33087158]
[108.34323883 27.10795403]
[99.53905487 14.94798183]
[91.98937988 1.97181189]
[85.76924133 -11.69158936]
[80.94047546 -25.90642738]
[77.55105591 -40.53142166]
[75.63468933 -55.42122269]
[75.21040344 -70.42784119]
[76.28242493 -85.40213013]
[78.84009552 -100.19526672]
[82.85799408 -114.66023254]
[88.29619598 -128.65324402]
[95.10063934 -142.03524780]
[103.20371246 -154.67324829]
[112.52486420 -166.44161987]
[122.97147369 -177.22341919]
[134.43969727 -186.91146851]
[146.81556702 -195.40950012]
[159.97607422 -202.63304138]
[173.79042053 -208.51031494]
[188.12132263 -212.98289490]
[202.82633972 -216.00633240]
[217.75932312 -217.55058289]
[232.77185059 -217.60028076]
[247.71473694 -216.15496826]
[262.43945312 -213.22897339]
[276.79965210 -208.85139465]
[290.65261841 -203.06573486]
[303.86065674 -195.92948914]
[316.29254150 -187.51359558]
[327.82467651 -177.90170288]
[338.34243774 -167.18933105]
[347.74133301 -155.48294067]
[355.92791748 -142.89888000]
[362.82083130 -129.56222534]
[368.35156250 -115.60552216]
[372.46517944 -101.16748810]
[375.12075806 -86.39160919]
[376.29190063 -71.42474365]
[375.96701050 -56.41564560]
[374.14926147 -41.51348495]
[370.85678101 -26.86636543]
[366.12225342 -12.61986256]
[359.99273682 1.08442962]
[352.52914429 14.11030960]
[343.80569458 26.32831573]
[333.90902710 37.61701965]
[322.93753052 47.86422348]
[311.00027466 56.96808243]
[298.21585083 64.83811951]
[284.71136475 71.39611053]
[270.62100220 76.57688904]
[256.08483887 80.32894897]
[241.24729919 82.61501312]
[226.25585938 83.41235352]
[211.25955200 82.71304321]
[196.40737915 80.52404022]
[181.84696960 76.86710358]
[167.72303772 71.77856445]
[154.17596436 65.30900574]
[141.34036255 57.52272415]
[132.32284546 69.50955963]
[123.30531311 81.49639130]
[128.61683655 91.83926392]
[129.55960083 103.42798615]
[125.98966980 114.49337769]
[118.45204926 123.34615326]
[108.09746552 128.63481140]
[108.40952301 143.63156128]
[108.72157288 158.62831116]
[109.03363037 173.62506104]
[109.34568787 188.62182617]
[109.65774536 203.61857605]
[109.96980286 218.61532593]
[110.28186035 233.61207581]
[110.59391022 248.60884094]
[110.90596771 263.60559082]
[111.21802521 278.60235596]
[125.87301636 282.19311523]
[139.09883118 289.45538330]
[149.99369812 299.89395142]
[157.81478882 312.79718018]
[162.02886963 327.28524780]
[162.34858704 342.37033081]
[158.75215149 357.02395630]
[151.48478699 370.24694824]
[141.04199219 381.13778687]
[128.13575745 388.95388794]
[113.64607239 393.16238403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[25 56]
[26 55]
[27 54]
[29 53]
[30 52]
[58 124]
[59 123]
[60 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
