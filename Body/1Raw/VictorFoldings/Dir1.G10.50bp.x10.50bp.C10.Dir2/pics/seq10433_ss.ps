%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACAGCCCUAUACGGGGGGGGGGUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUxxxxxxxxxxCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCCCCCCCCCCCUAACAGCCCUAGAC\
) } def
/len { sequence length } bind def

/coor [
[61.26441193 438.25326538]
[47.24967575 432.76931763]
[34.57424927 424.65637207]
[23.72534943 414.22625732]
[15.11997414 401.87985229]
[9.08889198 388.09173584]
[5.86392212 373.39187622]
[5.56902313 358.34530640]
[8.21553040 343.53036499]
[13.70171928 329.51651001]
[21.81671524 316.84240723]
[32.24860001 305.99520874]
[44.59639740 297.39181519]
[58.38549423 291.36297607]
[73.08587646 288.14038086]
[72.78951263 273.14331055]
[72.49315643 258.14624023]
[72.19680023 243.14916992]
[71.90044403 228.15209961]
[71.60408783 213.15501404]
[71.30773163 198.15794373]
[71.01137543 183.16087341]
[70.71501160 168.16380310]
[70.41865540 153.16673279]
[63.06872177 166.24259949]
[52.94754028 177.31336975]
[40.58142853 185.80331421]
[26.61343765 191.27096558]
[11.76992226 193.43200684]
[-3.17723560 192.17404175]
[-17.45076561 187.56248474]
[-30.30842400 179.83717346]
[-41.08160019 169.39979553]
[-49.21006775 156.79313660]
[-54.27114487 142.67274475]
[-56.00164413 127.77289581]
[-54.31158066 112.86840820]
[-49.28883362 98.73433685]
[-41.19459915 86.10566711]
[-30.44978523 75.63909912]
[-17.61313438 67.87892151]
[-3.35216928 63.22866058]
[11.59152031 61.93014526]
[26.44084358 64.05089569]
[40.42361832 69.48062897]
[52.81272125 77.93699646]
[62.96390533 88.98025513]
[70.34928894 102.03613281]
[74.58483124 116.42572021]
[75.44995117 131.40649414]
[82.29939270 118.06163788]
[74.77143097 98.25254059]
[84.95855713 79.67047882]
[80.01435852 65.50873566]
[75.07016754 51.34699631]
[70.12596893 37.18525314]
[55.20726013 39.18947983]
[40.19051361 38.14921951]
[25.69065285 34.10706711]
[12.30144405 27.22855377]
[0.57116407 17.79534531]
[-9.01983833 6.19372606]
[-16.07881737 -7.10122395]
[-20.31671524 -21.54508400]
[-21.55998802 -36.54639053]
[-19.75772858 -51.49084473]
[-14.98373508 -65.76648712]
[-7.43350220 -78.78872681]
[2.58379459 -90.02433014]
[14.65795231 -99.01318359]
[28.29454231 -105.38722229]
[42.93515396 -108.88541412]
[57.98026276 -109.36452484]
[72.81378174 -106.80492401]
[86.82829285 -101.31143188]
[99.44990540 -93.10900116]
[110.16176605 -82.53352356]
[118.52524567 -70.01804352]
[124.19785309 -56.07507324]
[126.94729614 -41.27556610]
[126.66100311 -26.22555161]
[123.35067749 -11.54131889]
[117.15189362 2.17582059]
[108.31847382 14.36415958]
[97.21215057 24.52459526]
[84.28771210 32.24105835]
[89.23191071 46.40280151]
[94.17610168 60.56454468]
[99.12030029 74.72628784]
[104.15012360 75.05384064]
[109.01509094 76.37242126]
[113.52191162 78.62963867]
[117.49155426 81.73582458]
[120.76631927 85.56758881]
[135.06835938 81.04522705]
[149.37039185 76.52286530]
[163.67242432 72.00050354]
[177.88232422 67.19645691]
[191.99452209 62.11259842]
[206.10673523 57.02873993]
[210.52769470 42.27199936]
[222.64849854 33.05574417]
[237.69406128 32.74751282]
[249.89013672 41.25597382]
[264.00234985 36.17211914]
[278.11453247 31.08826065]
[292.22674561 26.00440407]
[306.33895874 20.92054558]
[316.50231934 8.05050659]
[332.68853760 10.68464851]
[338.24661255 26.11319351]
[327.45886230 38.46457672]
[311.42282104 35.03275299]
[297.31060791 40.11661148]
[283.19839478 45.20046997]
[269.08618164 50.28432465]
[254.97398376 55.36818314]
[251.00592041 69.69969940]
[239.22033691 79.05726624]
[224.00668335 79.68812561]
[211.19059753 71.14094543]
[197.07838440 76.22480774]
[182.96618652 81.30866241]
[180.14143372 85.21956635]
[174.80728149 87.36696625]
[168.19479370 86.30253601]
[153.89276123 90.82489777]
[139.59071350 95.34726715]
[125.28868103 99.86962891]
[121.18289185 113.81374359]
[110.07848358 123.19393158]
[95.64424896 124.91107941]
[88.79480743 138.25593567]
[85.41572571 152.87037659]
[85.71208954 167.86744690]
[86.00844574 182.86451721]
[86.30480194 197.86158752]
[86.60115814 212.85865784]
[86.89751434 227.85572815]
[87.19387054 242.85281372]
[87.49023438 257.84988403]
[87.78659058 272.84695435]
[88.08294678 287.84402466]
[102.89916229 290.48333740]
[116.91567230 295.96270752]
[129.59371948 304.07156372]
[140.44599915 314.49816895]
[149.05537415 326.84179688]
[155.09091187 340.62796021]
[158.32064819 355.32678223]
[158.62042236 370.37326050]
[155.97869873 385.18902588]
[150.49705505 399.20465088]
[142.38615417 411.88140869]
[131.95779419 422.73199463]
[119.61277008 431.33935547]
[105.82563019 437.37268066]
[91.12629700 440.60003662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[50 133]
[51 132]
[53 89]
[54 88]
[55 87]
[56 86]
[94 129]
[95 128]
[96 127]
[97 126]
[98 123]
[99 122]
[100 121]
[104 117]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
