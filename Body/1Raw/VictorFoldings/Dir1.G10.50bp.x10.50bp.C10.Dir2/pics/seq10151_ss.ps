%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGACUCCAGGGGGGGGGGCUUAUGACUCCCUAAAGCCCAUGUCGAAGCCCCCAUCGCUGGGUCAAUAGxxxxxxxxxxAUUACUAAACCCACACUCAACAGAAACAAAGCAUACAUCAUUAUUCUCGCCCCCCCCCCCACGGACUACA\
) } def
/len { sequence length } bind def

/coor [
[236.69783020 193.26997375]
[228.68640137 180.58247375]
[221.50433350 167.40773010]
[215.18113708 153.79991150]
[209.74278259 139.81492615]
[205.21163940 125.51022339]
[201.60630798 110.94460297]
[198.94160461 96.17791748]
[184.03970337 97.89060974]
[169.13780212 99.60330200]
[154.23590088 101.31598663]
[142.47529602 110.45587921]
[127.88193512 104.34487152]
[112.98003387 106.05756378]
[101.63549805 114.23027039]
[88.73265076 108.84433746]
[73.83074951 110.55702972]
[58.92884827 112.26971436]
[44.02694702 113.98240662]
[29.12504578 115.69509888]
[14.22314262 117.40778351]
[-0.67875969 119.12047577]
[-15.58066177 120.83316803]
[-24.23129463 130.45712280]
[-36.72269058 131.54524231]
[-46.27418137 124.05682373]
[-61.20848846 125.45912933]
[-76.14279175 126.86142731]
[-80.58809662 141.39785767]
[-90.26172638 153.12344360]
[-103.68852997 160.25010681]
[-118.82101440 161.69111633]
[-133.35157776 157.22668457]
[-145.06442261 147.53764343]
[-152.17343140 134.10147095]
[-153.59451294 118.96710968]
[-149.11099243 104.44242859]
[-139.40653992 92.74234009]
[-125.96103668 85.65101624]
[-110.82481384 84.24983978]
[-96.30604553 88.75247192]
[-84.61872864 98.47230530]
[-77.54509735 111.92712402]
[-62.61079025 110.52481842]
[-47.67648315 109.12251282]
[-33.97410583 98.20259094]
[-17.29335213 105.93126678]
[-2.39144945 104.21857452]
[12.51045322 102.50588226]
[27.41235542 100.79319763]
[42.31425858 99.08050537]
[57.21615982 97.36781311]
[72.11806488 95.65512848]
[87.01996613 93.94243622]
[98.36450195 85.76972961]
[111.26734924 91.15566254]
[126.16925049 89.44297028]
[138.99572754 80.18058014]
[152.52320862 86.41408539]
[167.42510986 84.70139313]
[182.32701111 82.98870850]
[197.22891235 81.27601624]
[196.47409058 66.28982544]
[196.68098450 51.28606415]
[197.84875488 36.32638550]
[199.97259521 21.47226334]
[203.04379272 6.78473663]
[207.04969788 -7.67584085]
[211.97387695 -21.85004616]
[217.79609680 -35.67963409]
[224.49241638 -49.10777664]
[232.03530884 -62.07929611]
[240.39381409 -74.54088593]
[249.53355408 -86.44133759]
[259.41699219 -97.73175049]
[270.00350952 -108.36572266]
[281.24957275 -118.29957581]
[293.10900879 -127.49246979]
[305.53308105 -135.90664673]
[318.47073364 -143.50750732]
[331.86877441 -150.26383972]
[345.67218018 -156.14785767]
[359.82421875 -161.13540649]
[374.26672363 -165.20597839]
[388.94036865 -168.34284973]
[403.78482056 -170.53314209]
[418.73913574 -171.76782227]
[433.74182129 -172.04185486]
[448.73123169 -171.35408020]
[463.64578247 -169.70733643]
[478.42419434 -167.10841370]
[493.00570679 -163.56796265]
[507.33044434 -159.10054016]
[521.33953857 -153.72450256]
[534.97534180 -147.46194458]
[548.18194580 -140.33859253]
[560.90496826 -132.38374329]
[573.09222412 -123.63005066]
[584.69354248 -114.11351013]
[595.66131592 -103.87321472]
[605.95043945 -92.95125580]
[615.51867676 -81.39250183]
[624.32666016 -69.24446106]
[632.33825684 -56.55704117]
[639.52044678 -43.38238907]
[645.84381104 -29.77463913]
[651.28228760 -15.78970623]
[655.81359863 -1.48506033]
[659.41912842 13.08051777]
[662.08398438 27.84717560]
[663.79724121 42.75423050]
[664.55194092 57.74043274]
[664.34484863 72.74418640]
[663.17694092 87.70385742]
[661.05291748 102.55795288]
[657.98156738 117.24544525]
[653.97546387 131.70597839]
[649.05114746 145.88012695]
[643.22875977 159.70965576]
[636.53228760 173.13772583]
[628.98925781 186.10916138]
[620.63061523 198.57064819]
[611.49072266 210.47100830]
[601.60717773 221.76130676]
[591.02056885 232.39517212]
[579.77435303 242.32888794]
[567.91485596 251.52165222]
[555.49066162 259.93569946]
[542.55297852 267.53640747]
[529.15484619 274.29260254]
[515.35137939 280.17645264]
[501.19927979 285.16384888]
[486.75671387 289.23428345]
[472.08303833 292.37097168]
[457.23855591 294.56109619]
[442.28424072 295.79562378]
[427.28155518 296.06948853]
[412.29214478 295.38153076]
[397.37759399 293.73464966]
[382.59921265 291.13552856]
[368.01773071 287.59494019]
[353.69305420 283.12734985]
[339.68405151 277.75115967]
[326.04827881 271.48843384]
[312.84179688 264.36495972]
[300.11883545 256.40994263]
[287.93170166 247.65612793]
[276.33047485 238.13946533]
[265.36279297 227.89904785]
[255.07377625 216.97697449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 62]
[9 61]
[10 60]
[11 59]
[13 57]
[14 56]
[16 54]
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[23 47]
[26 45]
[27 44]
[28 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
