%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUCCUAGGGGGGGGGGAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGUUGGxxxxxxxxxxAAAAAUGCCCUAGCCCACUUCUUACCACAAGGCACACCUACACCCCUUAUCCCCCCCCCCCCCCAUACUA\
) } def
/len { sequence length } bind def

/coor [
[80.51970673 474.60089111]
[66.67377472 468.58486938]
[54.96511078 459.05545044]
[46.26258469 446.71978760]
[41.21198273 432.49325562]
[40.18809128 417.43157959]
[43.26689148 402.65240479]
[50.21991348 389.25247192]
[60.53119659 378.22616577]
[73.43557739 370.39163208]
[87.97546387 366.33032227]
[87.97546387 351.33032227]
[87.97546387 336.33032227]
[87.97546387 321.33032227]
[87.97546387 306.33032227]
[87.97546387 291.33032227]
[87.97546387 276.33032227]
[87.97546387 261.33032227]
[87.97546387 246.33033752]
[87.97546387 231.33033752]
[87.97546387 216.33033752]
[85.24509430 212.34027100]
[85.03659058 206.57937622]
[88.30050659 200.70959473]
[88.92448425 185.72257996]
[89.54846191 170.73556519]
[90.17243958 155.74855042]
[90.79641724 140.76153564]
[76.36737823 134.46313477]
[65.29289246 123.27284241]
[59.14493179 108.77906799]
[44.15223312 109.24710846]
[29.15953827 109.71514893]
[14.16684246 110.18319702]
[2.17843366 120.84422302]
[-13.60622787 117.97647095]
[-21.07850075 103.77983093]
[-14.50629711 89.14474487]
[1.06875145 85.29800415]
[13.69880009 95.19049835]
[28.69149590 94.72245789]
[43.68419266 94.25441742]
[58.67688751 93.78636932]
[60.09947586 87.58400726]
[62.44732285 81.66955566]
[50.36733627 72.77720642]
[38.28734589 63.88485718]
[26.20735741 54.99250793]
[14.12736988 46.10015869]
[-1.02533567 49.96403503]
[-15.09414196 43.13741684]
[-21.43618965 28.84362793]
[-17.05695724 13.83175468]
[-4.02418518 5.18994570]
[11.50845051 6.99859953]
[22.20691490 18.40372467]
[23.01972008 34.02016830]
[35.09970856 42.91252136]
[47.17969513 51.80487061]
[59.25968552 60.69721985]
[71.33967590 69.58956909]
[82.63790894 60.73252487]
[96.61642456 56.04858017]
[111.74270630 56.32260895]
[126.26629639 61.78026962]
[133.17329407 48.46511459]
[140.08029175 35.14995956]
[145.71224976 21.24740410]
[150.01983643 6.87921906]
[154.32742310 -7.48896503]
[142.97915649 2.32005239]
[128.99487305 7.74591780]
[114.00053406 8.15777111]
[99.73950195 3.50772524]
[87.86989594 -5.66356182]
[79.77178955 -18.28975296]
[76.38674164 -32.90280914]
[78.10832977 -47.80368805]
[84.73638916 -61.25987244]
[95.50027466 -71.70682526]
[109.14848328 -77.92987823]
[124.09413910 -79.20549774]
[138.59953308 -75.38536835]
[150.97813416 -66.91363525]
[159.79069519 -54.77531433]
[164.01258850 -40.38171768]
[163.15226746 -25.40355301]
[171.91847229 -37.57538986]
[173.02552795 -53.93712616]
[187.86589050 -60.91535187]
[201.17308044 -51.33146286]
[199.25778198 -35.04454422]
[184.09031677 -28.80918312]
[175.32411194 -16.63734627]
[168.69560242 -3.18138051]
[164.38801575 11.18680382]
[160.08044434 25.55498695]
[172.70704651 17.45754433]
[187.70645142 17.32373810]
[200.47552490 25.19463158]
[207.09558105 38.65475082]
[205.53503418 53.57335281]
[196.27278137 65.37210846]
[182.15129089 70.43013763]
[167.50427246 67.19518280]
[156.82672119 56.66002274]
[153.39544678 42.05695724]
[146.48844910 55.37211227]
[139.58145142 68.68727112]
[147.03636169 81.70357513]
[162.01608276 82.48342133]
[176.99578857 83.26326752]
[191.35119629 75.33517456]
[205.25318909 84.03382874]
[204.40060425 100.41079712]
[189.67050171 107.61886597]
[176.21594238 98.24298096]
[161.23623657 97.46313477]
[146.25651550 96.68329620]
[144.88185120 108.12115479]
[140.77107239 118.67858124]
[134.27142334 127.72446442]
[125.86943054 134.74368286]
[116.15561676 139.36611938]
[105.78343201 141.38551331]
[105.15945435 156.37252808]
[104.53547668 171.35954285]
[103.91149902 186.34655762]
[103.28752136 201.33357239]
[102.97546387 216.33033752]
[102.97546387 231.33033752]
[102.97546387 246.33033752]
[102.97546387 261.33032227]
[102.97546387 276.33032227]
[102.97546387 291.33032227]
[102.97546387 306.33032227]
[102.97546387 321.33032227]
[102.97546387 336.33032227]
[102.97546387 351.33032227]
[102.97546387 366.33032227]
[117.51535034 370.39163208]
[130.41973877 378.22616577]
[140.73101807 389.25247192]
[147.68403625 402.65240479]
[150.76283264 417.43157959]
[149.73895264 432.49325562]
[144.68833923 446.71978760]
[135.98582458 459.05545044]
[124.27716064 468.58486938]
[110.43122101 474.60089111]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 129]
[25 128]
[26 127]
[27 126]
[28 125]
[31 43]
[32 42]
[33 41]
[34 40]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[65 109]
[66 108]
[67 107]
[68 97]
[69 96]
[70 95]
[87 94]
[88 93]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
