%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUAGCAGGGGGGGGGGUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCxxxxxxxxxxAAUAGUAGAAGAACCCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCCCCCCCCCCCACCCUACCA\
) } def
/len { sequence length } bind def

/coor [
[82.05540466 386.22619629]
[71.49190521 375.48562622]
[63.58369827 362.66345215]
[58.72746658 348.40283203]
[57.16679001 333.41912842]
[58.97994995 318.46383667]
[64.07600403 304.28717041]
[72.19933319 291.60021973]
[82.94248199 281.03930664]
[95.76656342 273.13421631]
[110.02834320 268.28143311]
[108.47076416 253.36251831]
[106.91317749 238.44360352]
[105.35559845 223.52468872]
[103.79801941 208.60578918]
[102.24044037 193.68687439]
[100.68285370 178.76795959]
[99.12527466 163.84904480]
[97.56769562 148.93013000]
[96.01011658 134.01121521]
[94.45252991 119.09230804]
[89.23521423 116.71556091]
[84.91300964 112.94887543]
[70.68622589 117.70269012]
[60.04954147 129.41470337]
[45.52622223 126.10979462]
[31.29944420 130.86360168]
[17.07266426 135.61741638]
[3.96622062 146.37184143]
[-9.99613380 136.75471497]
[-4.62001801 120.67573547]
[12.31884956 121.39064026]
[26.54562950 116.63682556]
[40.77240753 111.88301086]
[50.39150238 100.51101685]
[65.93241119 103.47590637]
[80.15919495 98.72209167]
[85.29888916 86.61463165]
[96.87283325 80.36555481]
[100.27581024 65.75666046]
[103.67879486 51.14776611]
[107.08177185 36.53887558]
[110.48474884 21.92998314]
[113.88772583 7.32109022]
[104.05152130 0.23010914]
[97.22544861 -9.74966621]
[94.20039368 -21.42017365]
[95.31262970 -33.39003754]
[100.40661621 -44.24044418]
[108.85627747 -52.69332123]
[119.64182281 -57.76187515]
[131.47280884 -58.86574554]
[135.78039551 -73.23392487]
[134.61372375 -79.84803009]
[136.69326782 -85.22454071]
[140.57759094 -88.10335541]
[145.47914124 -102.27991486]
[150.38069153 -116.45647430]
[155.28224182 -130.63302612]
[160.18379211 -144.80958557]
[165.08534241 -158.98614502]
[151.68634033 -165.78178406]
[139.33752441 -174.33868408]
[128.26895142 -184.49743652]
[118.68679047 -196.06878662]
[110.76957703 -208.83715820]
[104.66479492 -222.56469727]
[100.48617554 -236.99566650]
[98.31156158 -251.86122131]
[98.18146515 -266.88442993]
[100.09831238 -281.78543091]
[104.02639008 -296.28659058]
[109.89252472 -310.11779785]
[117.58743286 -323.02136230]
[126.96775818 -334.75692749]
[137.85876465 -345.10583496]
[150.05754089 -353.87530518]
[163.33683777 -360.90197754]
[177.44926453 -366.05493164]
[192.13194275 -369.23815918]
[207.11129761 -370.39239502]
[222.10832214 -369.49612427]
[236.84359741 -366.56604004]
[251.04261780 -361.65670776]
[264.44088745 -354.85961914]
[276.78875732 -346.30139160]
[287.85626221 -336.14144897]
[297.43716431 -324.56906128]
[305.35299683 -311.79983521]
[311.45626831 -298.07162476]
[315.63333130 -283.64019775]
[317.80633545 -268.77441406]
[317.93481445 -253.75119019]
[316.01635742 -238.85040283]
[312.08670044 -224.34965515]
[306.21908569 -210.51908875]
[298.52276611 -197.61634827]
[289.14117432 -185.88180542]
[278.24905396 -175.53408813]
[266.04931641 -166.76593018]
[252.76927185 -159.74070740]
[238.65628052 -154.58927917]
[223.97326660 -151.40762329]
[208.99377441 -150.25500488]
[193.99685669 -151.15290833]
[179.26190186 -154.08459473]
[174.36035156 -139.90803528]
[169.45880127 -125.73147583]
[164.55725098 -111.55492401]
[159.65570068 -97.37836456]
[154.75413513 -83.20180511]
[150.14857483 -68.92634583]
[145.84098816 -54.55815887]
[158.84051514 -42.03577042]
[163.76504517 -24.58293343]
[159.18592834 -6.94907713]
[146.27287292 6.02232409]
[128.49661255 10.72406864]
[125.09364319 25.33296013]
[121.69065857 39.94185257]
[118.28768158 54.55074692]
[114.88470459 69.15963745]
[111.48172760 83.76853180]
[119.84320068 101.24014282]
[109.37144470 117.53472900]
[110.92902374 132.45364380]
[112.48660278 147.37255859]
[114.04418945 162.29145813]
[115.60176849 177.21037292]
[117.15934753 192.12928772]
[118.71692657 207.04820251]
[120.27451324 221.96711731]
[121.83209229 236.88603210]
[123.38967133 251.80493164]
[124.94725037 266.72384644]
[139.90383911 268.52615356]
[154.08421326 273.61187744]
[166.77708435 281.72598267]
[177.34579468 292.46145630]
[185.26020813 305.27978516]
[190.12335205 319.53805542]
[191.69128418 334.52099609]
[189.88537598 349.47717285]
[184.79618835 363.65631104]
[176.67901611 376.34719849]
[165.94097900 386.91329956]
[153.12072754 394.82461548]
[138.86131287 399.68429565]
[123.87796021 401.24862671]
[108.92224884 399.43908691]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 135]
[12 134]
[13 133]
[14 132]
[15 131]
[16 130]
[17 129]
[18 128]
[19 127]
[20 126]
[21 125]
[23 37]
[24 36]
[26 34]
[27 33]
[28 32]
[39 123]
[40 122]
[41 121]
[42 120]
[43 119]
[44 118]
[52 113]
[53 112]
[56 111]
[57 110]
[58 109]
[59 108]
[60 107]
[61 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
