%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACACCCUGGGGGGGGGGAGGCUCACUAAACAUUCUACUACUCACUCUCACUGCCCAAGAACUAUCAAxxxxxxxxxxGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUUCACACGAGCCCCCCCCCCAAAACACCCU\
) } def
/len { sequence length } bind def

/coor [
[90.37631226 331.50268555]
[75.50540924 328.99127197]
[61.72660065 322.85977173]
[49.90602875 313.49362183]
[40.78674698 301.48156738]
[34.94200134 287.57870483]
[32.73919678 272.65896606]
[34.31680298 257.66024780]
[39.57564926 243.52534485]
[48.18516159 231.14280701]
[59.60414124 221.29101562]
[73.11477661 214.58926392]
[87.86778259 211.45881653]
[88.49176025 196.47180176]
[89.11573792 181.48478699]
[89.73971558 166.49777222]
[90.36369324 151.51075745]
[90.98767090 136.52374268]
[91.61164856 121.53672028]
[92.23562622 106.54970551]
[89.38317871 98.95052338]
[93.03169250 91.25833893]
[93.96732330 76.28755188]
[94.90295410 61.31675720]
[95.83857727 46.34596634]
[96.77420807 31.37517548]
[81.88362885 29.52816963]
[67.13333893 26.77680779]
[52.57822800 23.13132477]
[38.27243423 18.60528183]
[24.26917267 13.21551800]
[10.62054253 6.98208189]
[-2.62268543 -0.07183705]
[-15.41124439 -7.91999769]
[-27.69755936 -16.53320503]
[-39.43592453 -25.87941360]
[-50.58267212 -35.92385864]
[-61.09633255 -46.62917328]
[-70.93779755 -57.95553207]
[-80.07045746 -69.86080170]
[-88.46033478 -82.30068970]
[-96.07621765 -95.22891998]
[-102.88977814 -108.59740448]
[-108.87566376 -122.35639954]
[-114.01161194 -136.45472717]
[-118.27851868 -150.83993530]
[-121.66049957 -165.45852661]
[-124.14498138 -180.25610352]
[-125.72272491 -195.17761230]
[-126.38784790 -210.16755676]
[-126.13789368 -225.17018127]
[-124.97377777 -240.12963867]
[-122.89983368 -254.99031067]
[-119.92378235 -269.69689941]
[-116.05668640 -284.19473267]
[-111.31294250 -298.42980957]
[-105.71018982 -312.34921265]
[-99.26927185 -325.90118408]
[-92.01415253 -339.03524780]
[-83.97182465 -351.70260620]
[-75.17219543 -363.85610962]
[-65.64801025 -375.45053101]
[-55.43468857 -386.44274902]
[-44.57024002 -396.79187012]
[-33.09506989 -406.45941162]
[-21.05187035 -415.40942383]
[-8.48544598 -423.60855103]
[4.55745935 -431.02633667]
[18.02832222 -437.63516235]
[31.87703133 -443.41046143]
[46.05206680 -448.33074951]
[60.50069809 -452.37771606]
[75.16917419 -455.53628540]
[90.00292969 -457.79476929]
[104.94676971 -459.14468384]
[119.94512177 -459.58108521]
[134.94216919 -459.10229492]
[149.88214111 -457.71011353]
[164.70945740 -455.40969849]
[179.36894226 -452.20965576]
[193.80606079 -448.12185669]
[207.96713257 -443.16149902]
[221.79945374 -437.34707642]
[235.25158691 -430.70016479]
[248.27346802 -423.24554443]
[260.81665039 -415.01092529]
[272.83450317 -406.02691650]
[284.28228760 -396.32696533]
[295.11743164 -385.94714355]
[305.29962158 -374.92608643]
[314.79098511 -363.30477905]
[323.55621338 -351.12646484]
[331.56271362 -338.43643188]
[338.78067017 -325.28186035]
[345.18322754 -311.71176147]
[350.74661255 -297.77658081]
[355.45007324 -283.52810669]
[359.27615356 -269.01943970]
[362.21063232 -254.30448914]
[364.24252319 -239.43800354]
[365.36434937 -224.47531128]
[365.57189941 -209.47204590]
[364.86437988 -194.48403931]
[363.24444580 -179.56704712]
[360.71813965 -164.77656555]
[357.29483032 -150.16758728]
[352.98727417 -135.79449463]
[347.81149292 -121.71074677]
[341.78671265 -107.96873474]
[334.93539429 -94.61956787]
[327.28298950 -81.71292877]
[318.85797119 -69.29680634]
[309.69168091 -57.41741180]
[299.81820679 -46.11892700]
[289.27432251 -35.44338226]
[278.09921265 -25.43049431]
[266.33447266 -16.11751175]
[254.02386475 -7.53907967]
[241.21316528 0.27288944]
[227.95004272 7.28933477]
[214.28384399 13.48415375]
[200.26539612 18.83430290]
[185.94686890 23.31987762]
[171.38150024 26.92419052]
[156.62348938 29.63383484]
[141.72775269 31.43872833]
[126.74967957 32.33216095]
[111.74500275 32.31080246]
[110.80937195 47.28159332]
[109.87374115 62.25238800]
[108.93811035 77.22317505]
[108.00248718 92.19396973]
[107.22264099 107.17368317]
[106.59866333 122.16069794]
[105.97468567 137.14772034]
[105.35070801 152.13473511]
[104.72673035 167.12174988]
[104.10275269 182.10876465]
[103.47877502 197.09577942]
[102.85479736 212.08279419]
[117.29652405 216.42874146]
[130.20332336 224.23037720]
[140.76385498 234.99728394]
[148.31427002 248.05261230]
[152.37995911 262.57574463]
[152.70533752 277.65371704]
[149.26994324 292.33868408]
[142.28974915 305.70761108]
[132.20353699 316.92004395]
[119.64530945 325.27120972]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[22 132]
[23 131]
[24 130]
[25 129]
[26 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
