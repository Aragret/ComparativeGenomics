%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUAACCCCGGGGGGGGGGACCCUACUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGxxxxxxxxxxAUUGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCCCCCCCCCCCAAACAACCCC\
) } def
/len { sequence length } bind def

/coor [
[86.43253326 439.88281250]
[73.21233368 432.61032104]
[62.32553101 422.16333008]
[54.51440048 409.25408936]
[50.31151962 394.76275635]
[50.00344849 379.67742920]
[53.61118698 365.02661133]
[60.88875961 351.80920410]
[71.33996582 340.92645264]
[84.25222778 333.12030029]
[98.74517059 328.92300415]
[98.43311310 313.92626953]
[98.12105560 298.92950439]
[97.80899811 283.93273926]
[97.49694061 268.93600464]
[97.18488312 253.93923950]
[96.87283325 238.94248962]
[96.56077576 223.94573975]
[96.24871826 208.94897461]
[95.93666077 193.95222473]
[95.62460327 178.95547485]
[95.15656281 163.96278381]
[94.53258514 148.97576904]
[93.90860748 133.98873901]
[85.13089752 134.01834106]
[76.06234741 131.69856262]
[67.34314728 126.91259766]
[59.64717484 119.71879578]
[44.88111877 122.35765839]
[30.11506271 124.99652100]
[21.28682137 138.10520935]
[5.75928593 141.04989624]
[-7.25533152 132.08355713]
[-10.03568935 116.52575684]
[-0.93225133 103.60666656]
[14.65407562 100.99095154]
[27.47619820 110.23046875]
[42.24225616 107.59159851]
[57.00830841 104.95273590]
[58.78569031 97.66638947]
[44.21298981 94.11162567]
[29.25502777 95.23387146]
[23.56561661 81.35472870]
[35.00746155 71.65502930]
[47.76774979 79.53892517]
[62.34045410 83.09368134]
[64.11783600 75.80733490]
[52.22545242 66.66559601]
[40.33307266 57.52386475]
[25.48987770 62.04703903]
[10.83384609 56.94994354]
[2.00052571 44.19250870]
[2.38650680 28.68023682]
[11.84337234 16.37790680]
[26.73476410 12.01601696]
[41.33463669 17.27180481]
[50.02904510 30.12430954]
[49.47480774 45.63148499]
[61.36718750 54.77322006]
[73.25956726 63.91495132]
[89.24935150 59.96623993]
[104.28543091 62.25127792]
[116.20307159 69.50737000]
[125.95072174 58.10634995]
[135.69837952 46.70532990]
[145.44602966 35.30430984]
[131.10128784 39.68934631]
[116.11714935 38.99976730]
[102.23579407 33.31574631]
[91.07120514 23.29816818]
[83.92147827 10.11176014]
[81.61789703 -4.71030235]
[84.42830658 -19.44466972]
[92.02593994 -32.37819290]
[103.52742767 -42.00709534]
[117.59549713 -47.21183777]
[132.59446716 -47.38727188]
[146.78042603 -42.51299286]
[158.50398254 -33.15573120]
[166.40203857 -20.40345192]
[169.55630493 -5.73884821]
[167.60003662 9.13303852]
[160.75894165 22.48537827]
[173.69699097 14.89546967]
[186.63505554 7.30556154]
[199.57310486 -0.28434688]
[210.66442871 -10.38299656]
[219.43063354 -22.55483246]
[220.53768921 -38.91657257]
[235.37805176 -45.89479446]
[248.68522644 -36.31090927]
[246.76994324 -20.02398872]
[231.60246277 -13.78862572]
[222.83625793 -1.61678922]
[236.65356445 -7.45478725]
[251.54661560 -9.24285221]
[266.35314941 -6.84144068]
[279.91763306 -0.43796209]
[291.18148804 9.46785069]
[299.26571655 22.10294151]
[303.53936768 36.48125458]
[303.66894531 51.48069382]
[299.64431763 65.93069458]
[291.77960205 78.70355988]
[280.68853760 88.80249023]
[267.23669434 95.43935394]
[252.47387695 98.09619904]
[237.55215454 96.56569672]
[223.63606262 90.96727753]
[211.81161499 81.73784637]
[203.00158691 69.59768677]
[197.89355469 55.49421310]
[196.88610840 40.52808380]
[200.05790710 25.86726189]
[207.16302490 12.65370941]
[194.22496033 20.24361801]
[181.28691101 27.83352661]
[168.34884644 35.42343521]
[156.84704590 45.05195999]
[147.09939575 56.45298004]
[137.35174561 67.85400391]
[127.60408783 79.25502014]
[134.52940369 100.24511719]
[127.30679321 121.13477325]
[108.89562225 133.36476135]
[109.51959991 148.35179138]
[110.14357758 163.33880615]
[113.64619446 171.84664917]
[110.62136078 178.64341736]
[110.93341827 193.64016724]
[111.24546814 208.63693237]
[111.55752563 223.63368225]
[111.86958313 238.63043213]
[112.18164062 253.62718201]
[112.49369812 268.62393188]
[112.80575562 283.62069702]
[113.11780548 298.61746216]
[113.42986298 313.61419678]
[113.74192047 328.61096191]
[128.39691162 332.20172119]
[141.62272644 339.46398926]
[152.51759338 349.90258789]
[160.33868408 362.80578613]
[164.55276489 377.29385376]
[164.87248230 392.37893677]
[161.27604675 407.03256226]
[154.00868225 420.25555420]
[143.56588745 431.14639282]
[130.65965271 438.96252441]
[116.16996765 443.17098999]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 127]
[23 126]
[24 125]
[28 39]
[29 38]
[30 37]
[47 60]
[48 59]
[49 58]
[63 122]
[64 121]
[65 120]
[66 119]
[83 118]
[84 117]
[85 116]
[86 115]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
