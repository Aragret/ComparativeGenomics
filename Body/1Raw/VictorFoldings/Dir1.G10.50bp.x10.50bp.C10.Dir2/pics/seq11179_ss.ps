%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCCUAGGACGGGGGGGGGGUUCUAACAGCCCUAGACCUCAACUACCUAACCAACAAACUUAAAAUAAAAxxxxxxxxxxUUGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGAAAACCUUCCCCCCCCCCUUUCCAAGGAC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 387.95077515]
[71.01555634 382.39776611]
[58.81560135 373.53143311]
[49.20452881 361.90911865]
[42.78650284 348.26141357]
[39.96496582 333.44622803]
[40.91728210 318.39486694]
[45.58358765 304.05343628]
[53.67055511 291.32348633]
[64.66983032 281.00521851]
[77.88998413 273.74722290]
[92.50000000 270.00579834]
[92.50000000 255.00579834]
[92.50000000 240.00579834]
[92.50000000 225.00579834]
[92.50000000 210.00579834]
[92.50000000 195.00579834]
[92.50000000 180.00579834]
[92.50000000 165.00579834]
[92.50000000 150.00579834]
[92.50000000 135.00579834]
[79.31556702 129.22003174]
[69.47678375 118.70800018]
[55.32946777 123.69332886]
[41.18215179 128.67864990]
[27.03483582 133.66397095]
[21.70563316 148.36544800]
[8.14746189 156.15711975]
[-7.23792124 153.35997009]
[-17.18601036 141.29475403]
[-16.99962044 125.65828705]
[-6.76676130 113.83362579]
[8.68092537 111.40401459]
[22.04951477 119.51665497]
[36.19683075 114.53133392]
[50.34414673 109.54601288]
[64.49146271 104.56068420]
[67.66133118 84.64205933]
[81.09554291 69.59806824]
[100.53006744 64.20369720]
[103.88932800 49.58469391]
[107.24858093 34.96568680]
[102.79836273 19.78325844]
[113.18942261 9.11202526]
[116.54867554 -5.50698233]
[115.41928864 -14.63497639]
[120.12989807 -20.39017868]
[123.78860474 -34.93713379]
[112.57482910 -43.59263992]
[105.53836823 -55.83712387]
[103.71724701 -69.79774475]
[107.35469818 -83.35371399]
[115.86725616 -94.45846558]
[127.93805695 -101.44863129]
[141.72050476 -103.29314423]
[145.67710876 -117.76190948]
[149.63372803 -132.23068237]
[153.59033203 -146.69944763]
[157.39819336 -161.20806885]
[161.05690002 -175.75502014]
[150.42971802 -165.16903687]
[137.46113586 -157.63142395]
[123.00272369 -153.63711548]
[108.00391388 -153.44842529]
[93.44959259 -157.07772827]
[80.29549408 -164.28672791]
[69.40536499 -174.60202026]
[61.49432755 -187.34625244]
[57.08185196 -201.68257141]
[56.45768738 -216.66957092]
[59.66281891 -231.32315063]
[66.48678589 -244.68104553]
[76.48148346 -255.86611938]
[88.99060822 -264.14392090]
[103.19274902 -268.97082520]
[118.15531158 -270.02993774]
[132.89578247 -267.25167847]
[146.44621277 -260.81851196]
[157.91680908 -251.15283203]
[166.55435181 -238.88935852]
[171.79167175 -224.83337402]
[173.28483582 -209.90788269]
[170.93676758 -195.09623718]
[180.57858276 -206.58689880]
[179.38909912 -222.11825562]
[189.33096313 -233.63406372]
[204.14506531 -234.67234802]
[213.78688049 -246.16300964]
[223.42868042 -257.65368652]
[233.07049561 -269.14434814]
[231.44355774 -284.86465454]
[241.47380066 -297.07818604]
[257.21044922 -298.53881836]
[269.31723022 -288.38003540]
[270.61141968 -272.62881470]
[260.32519531 -260.63009644]
[244.56117249 -259.50253296]
[234.91935730 -248.01185608]
[225.27754211 -236.52119446]
[215.63572693 -225.03053284]
[217.18566895 -210.26118469]
[207.57118225 -198.47067261]
[192.06924438 -196.94508362]
[182.42742920 -185.45442200]
[175.60385132 -172.09631348]
[171.94514465 -157.54936218]
[173.37249756 -150.25039673]
[168.05909729 -142.74282837]
[164.10249329 -128.27406311]
[160.14587402 -113.80529785]
[156.18927002 -99.33653259]
[168.42996216 -89.10865784]
[175.02233887 -74.51961517]
[174.60580444 -58.45759201]
[167.21293640 -44.12662888]
[154.27290344 -34.40744781]
[138.33555603 -31.27842712]
[134.67684937 -16.73147202]
[131.16767883 -2.14772344]
[127.80842590 12.47128391]
[132.49891663 26.60806274]
[121.86759186 38.32494354]
[118.50833130 52.94395065]
[115.14907074 67.56295776]
[124.36682129 73.77188110]
[131.23625183 82.50849915]
[135.09533691 92.93083191]
[135.57217407 104.03443909]
[132.62078857 114.74923706]
[126.52563477 124.04260254]
[117.87411499 131.01890564]
[107.50000000 135.00579834]
[107.50000000 150.00579834]
[107.50000000 165.00579834]
[107.50000000 180.00579834]
[107.50000000 195.00579834]
[107.50000000 210.00579834]
[107.50000000 225.00579834]
[107.50000000 240.00579834]
[107.50000000 255.00579834]
[107.50000000 270.00579834]
[122.11001587 273.74722290]
[135.33016968 281.00521851]
[146.32945251 291.32348633]
[154.41641235 304.05343628]
[159.08271790 318.39486694]
[160.03503418 333.44622803]
[157.21350098 348.26141357]
[150.79547119 361.90911865]
[141.18440247 373.53143311]
[128.98443604 382.39776611]
[114.96250153 387.95077515]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 37]
[24 36]
[25 35]
[26 34]
[40 124]
[41 123]
[42 122]
[44 120]
[45 119]
[47 118]
[48 117]
[55 111]
[56 110]
[57 109]
[58 108]
[59 106]
[60 105]
[83 104]
[84 103]
[87 100]
[88 99]
[89 98]
[90 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
