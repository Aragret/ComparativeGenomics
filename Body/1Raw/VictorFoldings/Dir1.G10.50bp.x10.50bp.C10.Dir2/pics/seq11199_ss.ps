%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAACAAACGGGGGGGGGGUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAxxxxxxxxxxUCCUAAUCACAUAACCUAUUCCCCCGAGCAAUCUCAAUUACAAUAUAUACCCCCCCCCCCACCAACAAAC\
) } def
/len { sequence length } bind def

/coor [
[84.01824188 395.14141846]
[70.79804230 387.86895752]
[59.91123962 377.42193604]
[52.10010910 364.51269531]
[47.89722824 350.02139282]
[47.58915329 334.93603516]
[51.19689560 320.28521729]
[58.47446823 307.06784058]
[68.92567444 296.18505859]
[81.83793640 288.37893677]
[96.33087158 284.18164062]
[96.01882172 269.18487549]
[95.70676422 254.18812561]
[95.39470673 239.19137573]
[95.08264923 224.19462585]
[94.77059174 209.19787598]
[94.45853424 194.20111084]
[94.14648438 179.20436096]
[93.83442688 164.20761108]
[93.52236938 149.21086121]
[93.21031189 134.21409607]
[80.32463837 128.80250549]
[70.59758759 118.76705933]
[65.59069824 105.71880341]
[50.61098862 104.93895721]
[35.63127136 104.15911865]
[20.65155792 103.37927246]
[5.67184448 102.59942627]
[-9.30786991 101.81958008]
[-24.28758430 101.03973389]
[-39.26729965 100.25988770]
[-54.24701309 99.48004150]
[-61.11845779 113.07059479]
[-72.92771149 122.68628693]
[-87.62874603 126.66112518]
[-102.67452240 124.30646515]
[-115.45827484 116.03025055]
[-123.76512909 103.26639557]
[-126.15587616 88.22631073]
[-122.21630859 73.51577759]
[-112.62897491 61.68349075]
[-99.05494690 54.77946854]
[-83.84599304 53.99986649]
[-69.63717651 59.47975922]
[-58.89023972 70.26972198]
[-53.46716690 84.50032806]
[-38.48745346 85.28017426]
[-23.50774002 86.06002045]
[-8.52802467 86.83986664]
[6.45168972 87.61971283]
[21.43140411 88.39955902]
[36.41111755 89.17939758]
[51.39083099 89.95924377]
[66.37054443 90.73908997]
[69.39908600 83.25817108]
[74.06584930 76.67353058]
[80.12098694 71.33766937]
[87.24034882 67.53623962]
[95.04280090 65.47275543]
[103.11063385 65.25768280]
[111.01194000 66.90254211]
[118.32372284 70.31926727]
[128.76353455 59.54845810]
[139.20333862 48.77765274]
[143.05880737 3.50259137]
[149.68730164 -9.95337391]
[156.31579590 -23.40933990]
[162.94429016 -36.86530685]
[169.57279968 -50.32126999]
[157.43893433 -59.20611191]
[147.03237915 -70.06312561]
[138.66938782 -82.56238556]
[132.60408020 -96.32404327]
[129.02081299 -110.92990875]
[128.02844238 -125.93611908]
[129.65713501 -140.88665771]
[133.85739136 -155.32717896]
[140.50158691 -168.81887817]
[149.38781738 -180.95173645]
[160.24600220 -191.35705566]
[172.74621582 -199.71862793]
[186.50856018 -205.78236389]
[201.11483765 -209.36398315]
[216.12115479 -210.35466003]
[231.07150269 -208.72427368]
[245.51155090 -204.52236938]
[259.00250244 -197.87663269]
[271.13433838 -188.98904419]
[281.53842163 -178.12966919]
[289.89859009 -165.62850952]
[295.96075439 -151.86547852]
[299.54074097 -137.25880432]
[300.52969360 -122.25236511]
[298.89761353 -107.30220032]
[294.69406128 -92.86262512]
[288.04681396 -79.37244415]
[279.15783691 -67.24160004]
[268.29730225 -56.83874130]
[255.79519653 -48.47999954]
[242.03146362 -42.41938400]
[227.42439270 -38.84107590]
[212.41784668 -37.85380936]
[197.46786499 -39.48759079]
[183.02876282 -43.69277191]
[176.40026855 -30.23680687]
[169.77175903 -16.78084183]
[163.14326477 -3.32487535]
[156.51477051 10.13109016]
[164.10501099 23.06971741]
[171.69458008 36.00720215]
[186.67430115 36.78704834]
[201.65400696 37.56689072]
[216.00941467 29.63879967]
[229.91140747 38.33745193]
[229.05882263 54.71442413]
[214.32872009 61.92248535]
[200.87416077 52.54660797]
[185.89445496 51.76676178]
[170.91473389 50.98691559]
[180.69116211 62.36326981]
[177.07907104 76.92186737]
[163.11868286 82.40893555]
[150.56030273 74.20607758]
[149.97415161 59.21746445]
[139.53434753 69.98827362]
[129.09452820 80.75907898]
[134.82873535 101.91394806]
[126.81099701 122.31311035]
[108.20706940 133.90203857]
[108.51911926 148.89880371]
[108.83117676 163.89555359]
[109.14323425 178.89230347]
[109.45529175 193.88905334]
[109.76734924 208.88581848]
[110.07940674 223.88256836]
[110.39145660 238.87931824]
[110.70351410 253.87606812]
[111.01557159 268.87283325]
[111.32762909 283.86956787]
[125.98262024 287.46035767]
[139.20843506 294.72259521]
[150.10330200 305.16119385]
[157.92439270 318.06442261]
[162.13845825 332.55249023]
[162.45819092 347.63757324]
[158.86175537 362.29116821]
[151.59439087 375.51419067]
[141.15159607 386.40502930]
[128.24536133 394.22113037]
[113.75567627 398.42962646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[24 54]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[62 126]
[63 125]
[64 124]
[65 108]
[66 107]
[67 106]
[68 105]
[69 104]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
