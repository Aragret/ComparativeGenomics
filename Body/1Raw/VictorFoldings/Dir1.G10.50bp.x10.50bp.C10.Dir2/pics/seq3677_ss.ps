%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUAGGCCUCCGGGGGGGGGGUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAxxxxxxxxxxUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACACCCCCCCCCCAUCCUAGGCCUAC\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 423.90353394]
[70.75619507 419.09411621]
[57.85220718 411.32870483]
[46.91955185 400.97058105]
[38.46956635 388.50415039]
[32.89747238 374.51251221]
[30.46388245 359.65008545]
[31.28262329 344.61199951]
[35.31539917 330.10165405]
[42.37359238 316.79766846]
[52.12707901 305.32232666]
[64.11966705 296.21231079]
[77.79044342 289.89376831]
[92.50000000 286.66223145]
[92.50000000 271.66223145]
[92.50000000 256.66223145]
[92.50000000 241.66221619]
[92.50000000 226.66221619]
[92.50000000 211.66221619]
[92.50000000 196.66221619]
[92.50000000 181.66221619]
[92.50000000 166.66221619]
[92.50000000 151.66221619]
[92.50000000 136.66221619]
[86.94200897 135.06932068]
[81.69572449 132.63926697]
[76.88639069 129.43008423]
[72.62881470 125.51835632]
[69.02461243 120.99747467]
[66.15984344 115.97535706]
[64.10287476 110.57189178]
[62.90281677 104.91605377]
[47.93959045 103.86637878]
[32.97636414 102.81670380]
[18.01313591 101.76703644]
[10.02371025 114.82183075]
[-3.12338138 122.65844727]
[-18.40703392 123.47608948]
[-32.31517792 117.08686829]
[-41.65182114 104.95897675]
[-44.27147293 89.87931824]
[-39.57215500 75.31309509]
[-28.63373756 64.60750580]
[-13.96978855 60.22262192]
[1.05002356 63.16606140]
[12.97425652 72.76143646]
[19.06280899 86.80380249]
[34.02603531 87.85347748]
[48.98926544 88.90315247]
[63.95249176 89.95282745]
[70.27165985 74.92951965]
[82.75957489 63.51288605]
[99.47174072 58.18128967]
[95.32435608 43.76604843]
[91.17697144 29.35080528]
[86.62821198 24.42874527]
[85.46621704 18.79365349]
[87.16445923 14.27539539]
[83.59714508 -0.29423970]
[80.02983093 -14.86387539]
[76.46252441 -29.43350983]
[71.17584229 -43.47099686]
[64.24591827 -56.77423477]
[57.31599045 -70.07746887]
[43.19957733 -78.42366028]
[43.63992310 -94.81689453]
[58.18404007 -102.39321899]
[71.87018585 -93.35876465]
[70.61923218 -77.00740051]
[77.54915619 -63.70416260]
[84.47908020 -50.40092468]
[86.49718475 -65.26454926]
[94.66761017 -77.84405518]
[107.42642975 -85.73155975]
[122.33140564 -87.41727448]
[136.52952576 -82.57852173]
[147.30305481 -72.14152527]
[152.58979797 -58.10405731]
[151.37777710 -43.15310669]
[143.89901733 -30.15048790]
[131.58503723 -21.58509827]
[116.79291534 -19.09646988]
[102.35408020 -23.16096687]
[91.03215790 -33.00082397]
[94.59947205 -18.43118858]
[98.16678619 -3.86155272]
[101.73409271 10.70808315]
[105.59221649 25.20342445]
[109.73960114 39.61866760]
[113.88697815 54.03390884]
[127.39219666 60.56147385]
[141.26470947 54.85590363]
[155.13720703 49.15033340]
[168.89277649 43.16833496]
[182.52590942 36.91229630]
[196.15902710 30.65626144]
[209.79214478 24.40022659]
[223.42526245 18.14419174]
[237.05839539 11.88815498]
[250.62823486 5.49603462]
[264.13345337 -1.03153098]
[277.63867188 -7.55909681]
[291.14389038 -14.08666229]
[296.10504150 -29.09207726]
[310.26089478 -36.11970139]
[325.21301270 -31.00017357]
[332.09057617 -16.77081680]
[326.81326294 -1.87365711]
[312.51199341 4.85308599]
[297.67144775 -0.58144546]
[284.16622925 5.94612026]
[270.66101074 12.47368622]
[257.15579224 19.00125122]
[252.47589111 24.77587509]
[243.31442261 25.52127647]
[229.68130493 31.77731323]
[216.04818726 38.03334808]
[202.41505432 44.28938293]
[188.78193665 50.54542160]
[175.14881897 56.80145645]
[172.66329956 60.93919754]
[167.52569580 63.52946091]
[160.84278870 63.02284241]
[146.97027588 68.72840881]
[133.09776306 74.43398285]
[137.94343567 83.76202393]
[140.25836182 93.87317657]
[139.96177673 104.10285950]
[137.14224243 113.79632568]
[132.04762268 122.35057831]
[125.06484985 129.25183105]
[116.69136810 134.10627747]
[107.50000000 136.66221619]
[107.50000000 151.66221619]
[107.50000000 166.66221619]
[107.50000000 181.66221619]
[107.50000000 196.66221619]
[107.50000000 211.66221619]
[107.50000000 226.66221619]
[107.50000000 241.66221619]
[107.50000000 256.66223145]
[107.50000000 271.66223145]
[107.50000000 286.66223145]
[122.20955658 289.89376831]
[135.88034058 296.21231079]
[147.87292480 305.32232666]
[157.62640381 316.79766846]
[164.68460083 330.10165405]
[168.71737671 344.61199951]
[169.53611755 359.65008545]
[167.10252380 374.51251221]
[161.53042603 388.50415039]
[153.08044434 400.97058105]
[142.14779663 411.32870483]
[129.24380493 419.09411621]
[114.97203827 423.90353394]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[32 50]
[33 49]
[34 48]
[35 47]
[53 90]
[54 89]
[55 88]
[58 87]
[59 86]
[60 85]
[61 84]
[62 71]
[63 70]
[64 69]
[91 125]
[92 124]
[93 123]
[94 120]
[95 119]
[96 118]
[97 117]
[98 116]
[99 115]
[100 113]
[101 112]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
