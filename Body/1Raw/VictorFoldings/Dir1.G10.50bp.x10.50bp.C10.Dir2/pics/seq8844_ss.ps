%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCAGCCCUGGGGGGGGGGCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCxxxxxxxxxxGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGCCCCCCCCCCUCACAGCCCU\
) } def
/len { sequence length } bind def

/coor [
[87.23448944 488.45401001]
[73.38854980 482.43798828]
[61.67988968 472.90856934]
[52.97736359 460.57290649]
[47.92676163 446.34637451]
[46.90287018 431.28469849]
[49.98167038 416.50552368]
[56.93469238 403.10559082]
[67.24597931 392.07925415]
[80.15036011 384.24475098]
[94.69024658 380.18344116]
[94.69024658 365.18344116]
[94.69024658 350.18344116]
[94.69024658 335.18344116]
[94.69024658 320.18344116]
[94.69024658 305.18344116]
[94.69024658 290.18344116]
[94.69024658 275.18344116]
[94.69024658 260.18344116]
[94.69024658 245.18344116]
[94.69024658 230.18344116]
[81.12409210 220.99296570]
[75.63206482 205.37876892]
[80.55529022 189.40242004]
[94.15036774 179.39112854]
[93.83831024 164.39437866]
[93.52625275 149.39761353]
[84.51792145 147.35334778]
[76.04183960 143.68112183]
[68.38940430 138.50720215]
[61.82370758 132.00944519]
[56.57046127 124.41125488]
[52.81026840 115.97383118]
[50.67239761 106.98725128]
[35.67320633 106.83121490]
[20.67401886 106.67517853]
[4.77284765 112.55642700]
[-5.28044033 98.90476990]
[5.05467749 85.46520996]
[20.83005524 91.67598724]
[35.82924271 91.83202362]
[50.82843399 91.98806000]
[57.42935944 74.11999512]
[70.25354004 60.03523636]
[87.42625427 51.79278946]
[85.86867523 36.87387848]
[84.31108856 21.95496559]
[82.75350952 7.03605413]
[81.19593048 -7.88285828]
[66.17936707 -8.24507141]
[51.33241653 -10.52464008]
[36.89888382 -14.68413162]
[23.11577225 -20.65524483]
[10.20941734 -28.33992577]
[-1.60824764 -37.61198807]
[-12.14316559 -48.31917572]
[-21.22234344 -60.28566360]
[-28.69669342 -73.31495667]
[-34.44347763 -87.19309235]
[-38.36833191 -101.69219208]
[-40.40680695 -116.57415771]
[-40.52542877 -131.59461975]
[-38.72224426 -146.50692749]
[-35.02687073 -161.06620789]
[-29.49998283 -175.03337097]
[-22.23234367 -188.17909241]
[-13.34328938 -200.28747559]
[-2.97878838 -211.15969849]
[8.69096470 -220.61724854]
[21.47434235 -228.50480652]
[35.16143036 -234.69285583]
[49.52747345 -239.07978821]
[64.33657074 -241.59355164]
[79.34553528 -242.19288635]
[94.30791473 -240.86793518]
[108.97801208 -237.64047241]
[123.11492920 -232.56347656]
[136.48652649 -225.72032166]
[148.87322998 -217.22338867]
[160.07164001 -207.21218872]
[169.89785767 -195.85113525]
[178.19055176 -183.32676697]
[184.81352234 -169.84475708]
[189.65802002 -155.62649536]
[192.64451599 -140.90544128]
[193.72393799 -125.92334747]
[192.87858582 -110.92622375]
[190.12231445 -96.16033936]
[185.50041199 -81.86816406]
[179.08876038 -68.28438568]
[170.99266052 -55.63206100]
[161.34503174 -44.11895370]
[150.30430603 -33.93412399]
[138.05178833 -25.24481010]
[124.78867340 -18.19370270]
[110.73275757 -12.89658356]
[96.11483765 -9.44043922]
[97.67242432 5.47847319]
[99.23000336 20.39738464]
[100.78758240 35.31629562]
[102.34516144 50.23521042]
[122.40618134 55.50284195]
[138.58370972 68.48283386]
[148.07380676 86.92546082]
[162.97570801 85.21276855]
[177.87760925 83.50008392]
[192.77951050 81.78739166]
[202.40821838 69.25489044]
[218.08918762 67.28446960]
[230.51919556 77.04514313]
[232.32371521 92.74607086]
[222.43217468 105.07218170]
[206.71304321 106.71060181]
[194.49220276 96.68929291]
[179.59030151 98.40198517]
[164.68840027 100.11466980]
[149.78649902 101.82736206]
[148.09761047 112.98670959]
[143.94024658 123.47954559]
[137.52777100 132.76736450]
[129.18930054 140.37348938]
[119.35276794 145.90756226]
[108.52301025 149.08555603]
[108.83506775 164.08232117]
[109.14711761 179.07907104]
[121.04674530 186.10745239]
[127.85101318 198.01187134]
[127.86765289 211.61517334]
[121.19968414 223.34759521]
[109.69024658 230.18344116]
[109.69024658 245.18344116]
[109.69024658 260.18344116]
[109.69024658 275.18344116]
[109.69024658 290.18344116]
[109.69024658 305.18344116]
[109.69024658 320.18344116]
[109.69024658 335.18344116]
[109.69024658 350.18344116]
[109.69024658 365.18344116]
[109.69024658 380.18344116]
[124.23013306 384.24475098]
[137.13450623 392.07925415]
[147.44580078 403.10559082]
[154.39881897 416.50552368]
[157.47761536 431.28469849]
[156.45372009 446.34637451]
[151.40312195 460.57290649]
[142.70059204 472.90856934]
[130.99194336 482.43798828]
[117.14599609 488.45401001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 125]
[26 124]
[27 123]
[34 42]
[35 41]
[36 40]
[45 101]
[46 100]
[47 99]
[48 98]
[49 97]
[104 117]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
