%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAAGAUUAGGGGGGGGGGAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUxxxxxxxxxxGAAUCAACCCUGACCCCUCUCCUUCAUAAAUUAUUCAGCUUCCUACACUACCCCCCCCCCUUAAAGUUUA\
) } def
/len { sequence length } bind def

/coor [
[81.24720764 372.88323975]
[67.40126801 366.86721802]
[55.69260406 357.33779907]
[46.99008179 345.00213623]
[41.93947983 330.77560425]
[40.91558838 315.71392822]
[43.99438477 300.93475342]
[50.94740677 287.53482056]
[61.25869370 276.50851440]
[74.16307068 268.67398071]
[88.70295715 264.61267090]
[88.70295715 249.61268616]
[88.70295715 234.61268616]
[88.70295715 219.61268616]
[88.70295715 204.61268616]
[88.70295715 189.61268616]
[88.70295715 174.61268616]
[88.70295715 159.61268616]
[88.70295715 144.61268616]
[88.70295715 129.61268616]
[76.35138702 121.10159302]
[62.33467484 126.44310760]
[48.31796265 131.78462219]
[34.30125046 137.12612915]
[31.22963142 152.24461365]
[20.45558167 163.28651428]
[5.41706228 166.72837830]
[-9.08719158 161.47193909]
[-18.42892456 149.19450378]
[-19.62722397 133.81375122]
[-12.29971600 120.23761749]
[1.21541715 112.79821777]
[16.60554504 113.86942291]
[28.95973587 123.10941315]
[42.97644806 117.76790619]
[56.99316406 112.42639160]
[71.00987244 107.08487701]
[71.93408203 96.13155365]
[76.64138794 86.82249451]
[84.07717133 80.32977295]
[92.88086700 77.29476166]
[101.62133789 77.77593231]
[107.68434906 64.05587769]
[113.74736023 50.33582687]
[119.81037140 36.61577225]
[106.58802795 29.51702309]
[93.94788361 21.42693520]
[81.96411896 12.39298630]
[70.70706940 2.46819210]
[60.24279022 -8.28920460]
[50.63269043 -19.81607437]
[41.93316650 -32.04477310]
[34.19527054 -44.90353394]
[27.46441841 -58.31689835]
[21.78010368 -72.20614624]
[17.17568588 -86.48977661]
[13.67818546 -101.08396149]
[11.30812931 -115.90306091]
[10.07942390 -130.86009216]
[9.99928188 -145.86730957]
[11.06817245 -160.83662415]
[13.27982330 -175.68017578]
[16.62125397 -190.31088257]
[21.07285881 -204.64288330]
[26.60850906 -218.59204102]
[33.19572067 -232.07653809]
[40.79584122 -245.01721191]
[49.36426163 -257.33810425]
[58.85070419 -268.96697998]
[69.19950104 -279.83551025]
[80.34990692 -289.87997437]
[92.23650360 -299.04138184]
[104.78952026 -307.26602173]
[117.93530273 -314.50558472]
[131.59669495 -320.71759033]
[145.69352722 -325.86560059]
[160.14308167 -329.91940308]
[174.86054993 -332.85519409]
[189.75956726 -334.65576172]
[204.75270081 -335.31051636]
[219.75195312 -334.81564331]
[234.66932678 -333.17401123]
[249.41725159 -330.39529419]
[263.90921021 -326.49578857]
[278.06011963 -321.49835205]
[291.78695679 -315.43234253]
[305.00918579 -308.33334351]
[317.64916992 -300.24301147]
[329.63275146 -291.20883179]
[340.88961792 -281.28381348]
[351.35369873 -270.52624512]
[360.96359253 -258.99917603]
[369.66287231 -246.77032471]
[377.40051270 -233.91140747]
[384.13110352 -220.49792480]
[389.81518555 -206.60856628]
[394.41931152 -192.32484436]
[397.91653442 -177.73059082]
[400.28631592 -162.91145325]
[401.51473999 -147.95439148]
[401.59460449 -132.94717407]
[400.52542114 -117.97789001]
[398.31347656 -103.13436890]
[394.97177124 -88.50372314]
[390.51989746 -74.17181396]
[384.98397827 -60.22275162]
[378.39651489 -46.73839188]
[370.79614258 -33.79786301]
[362.22750854 -21.47711372]
[352.74084473 -9.84844398]
[342.39184570 1.01990390]
[331.24124146 11.06414795]
[319.35446167 20.22534561]
[306.80130005 28.44973183]
[293.65536499 35.68904495]
[279.99386597 41.90079880]
[265.89694214 47.04854202]
[251.44731140 51.10206604]
[236.72978210 54.03757858]
[221.83073425 55.83785629]
[206.83758545 56.49233627]
[191.83833313 55.99717331]
[176.92100525 54.35527420]
[162.17312622 51.57627487]
[147.68124390 47.67648315]
[133.53042603 42.67878342]
[127.46741486 56.39883804]
[121.40440369 70.11888885]
[115.34139252 83.83894348]
[124.76061249 108.13654327]
[103.70295715 129.61268616]
[103.70295715 144.61268616]
[103.70295715 159.61268616]
[103.70295715 174.61268616]
[103.70295715 189.61268616]
[103.70295715 204.61268616]
[103.70295715 219.61268616]
[103.70295715 234.61268616]
[103.70295715 249.61268616]
[103.70295715 264.61267090]
[118.24285126 268.67398071]
[131.14723206 276.50851440]
[141.45851135 287.53482056]
[148.41152954 300.93475342]
[151.49032593 315.71392822]
[150.46644592 330.77560425]
[145.41584778 345.00213623]
[136.71331787 357.33779907]
[125.00465393 366.86721802]
[111.15871429 372.88323975]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 37]
[22 36]
[23 35]
[24 34]
[42 129]
[43 128]
[44 127]
[45 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
