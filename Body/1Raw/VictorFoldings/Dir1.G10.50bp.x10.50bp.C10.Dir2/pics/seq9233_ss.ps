%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUCACUUUGGGGGGGGGGGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUGACUxxxxxxxxxxCUACUCCAAUGCUAAAACUAAUCGUCCCAACAAUUAUAUUACUACCACUGCCCCCCCCCCACAUGACUUU\
) } def
/len { sequence length } bind def

/coor [
[87.68669128 395.74755859]
[72.81578827 393.23614502]
[59.03697968 387.10467529]
[47.21640778 377.73849487]
[38.09712601 365.72644043]
[32.25238037 351.82357788]
[30.04957581 336.90383911]
[31.62718201 321.90512085]
[36.88602829 307.77020264]
[45.49554062 295.38769531]
[56.91452026 285.53588867]
[70.42515564 278.83413696]
[85.17816162 275.70370483]
[85.80213928 260.71667480]
[86.42611694 245.72966003]
[87.05009460 230.74264526]
[87.67407227 215.75563049]
[88.29804993 200.76861572]
[88.92202759 185.78160095]
[89.54600525 170.79458618]
[90.16998291 155.80757141]
[90.79396057 140.82055664]
[91.41793823 125.83353424]
[82.97669220 121.24218750]
[76.65663910 114.00395966]
[73.24527740 105.02077484]
[58.31097031 103.61846924]
[43.37666321 102.21616364]
[28.44235611 100.81385803]
[13.48210716 99.72254944]
[-1.49760723 98.94270325]
[-16.47732162 98.16285706]
[-23.34876633 111.75341034]
[-35.15802002 121.36910248]
[-49.85905457 125.34394836]
[-64.90483093 122.98928070]
[-77.68858337 114.71306610]
[-85.99543762 101.94921112]
[-88.38618469 86.90912628]
[-84.44661713 72.19859314]
[-74.85928345 60.36630630]
[-61.28525543 53.46228409]
[-46.07630539 52.68268204]
[-31.86748314 58.16257477]
[-21.12054825 68.95253754]
[-15.69747639 83.18314362]
[-0.71776211 83.96298981]
[14.26195240 84.74283600]
[18.38856697 82.22359467]
[24.15250397 82.31488037]
[29.84465981 85.87955475]
[44.77896881 87.28186035]
[59.71327591 88.68415833]
[74.64758301 90.08646393]
[78.39862061 83.43486023]
[83.84956360 78.08683777]
[90.57144928 74.46324921]
[98.03530121 72.84925079]
[105.65377045 73.37185669]
[112.82731628 75.98993683]
[123.26712799 65.21912384]
[133.70693970 54.44831848]
[144.14675903 43.67750931]
[154.58656311 32.90670013]
[144.93710327 21.40487289]
[136.52145386 8.97182846]
[129.42878723 -4.26063871]
[123.73431396 -18.15225410]
[119.49839020 -32.55576324]
[116.76593018 -47.31847382]
[115.56588745 -62.28389740]
[115.91098785 -77.29339600]
[117.79756927 -92.18785095]
[121.20564270 -106.80937958]
[126.09906769 -121.00298309]
[132.42597961 -134.61819458]
[140.11932373 -147.51071167]
[149.09751892 -159.54382324]
[159.26539612 -170.59001160]
[170.51518250 -180.53216553]
[182.72761536 -189.26487732]
[195.77323914 -196.69560242]
[209.51377869 -202.74555969]
[223.80354309 -207.35061646]
[238.49107361 -210.46194458]
[253.42066956 -212.04656982]
[268.43408203 -212.08770752]
[283.37213135 -210.58491516]
[298.07650757 -207.55410767]
[312.39129639 -203.02743530]
[326.16476440 -197.05287170]
[339.25091553 -189.69374084]
[351.51101685 -181.02807617]
[362.81512451 -171.14772034]
[373.04339600 -160.15742493]
[382.08737183 -148.17367554]
[389.85125732 -135.32353210]
[396.25268555 -121.74317932]
[401.22381592 -107.57660675]
[404.71194458 -92.97397614]
[406.68014526 -78.09008026]
[407.10748291 -63.08270264]
[405.98947144 -48.11092758]
[403.33792114 -33.33346176]
[399.18099976 -18.90695953]
[393.56274414 -4.98434734]
[386.54269409 8.28678703]
[378.19528198 20.76576233]
[368.60900879 32.32029343]
[357.88546753 42.82789993]
[346.13833618 52.17718887]
[333.49218750 60.26905441]
[320.08099365 67.01772308]
[306.04699707 72.35165405]
[291.53894043 76.21429443]
[276.71060181 78.56471252]
[261.71917725 79.37798309]
[246.72360229 78.64548492]
[231.88281250 76.37499237]
[217.35414124 72.59056091]
[203.29161072 67.33232117]
[189.84426880 60.65600204]
[177.15469360 52.63238144]
[165.35737610 43.34651184]
[154.91755676 54.11732101]
[144.47775269 64.88813019]
[134.03793335 75.65893555]
[123.59812164 86.42974854]
[125.01203156 110.74344635]
[106.40495300 126.45751190]
[105.78097534 141.44451904]
[105.15699768 156.43154907]
[104.53302002 171.41856384]
[103.90904236 186.40557861]
[103.28506470 201.39259338]
[102.66108704 216.37960815]
[102.03710938 231.36662292]
[101.41313171 246.35363770]
[100.78915405 261.34066772]
[100.16517639 276.32766724]
[114.60690308 280.67361450]
[127.51370239 288.47525024]
[138.07423401 299.24215698]
[145.62464905 312.29748535]
[149.69033813 326.82061768]
[150.01571655 341.89859009]
[146.58032227 356.58355713]
[139.60012817 369.95248413]
[129.51391602 381.16491699]
[116.95568848 389.51608276]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[26 54]
[27 53]
[28 52]
[29 51]
[30 48]
[31 47]
[32 46]
[60 128]
[61 127]
[62 126]
[63 125]
[64 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
