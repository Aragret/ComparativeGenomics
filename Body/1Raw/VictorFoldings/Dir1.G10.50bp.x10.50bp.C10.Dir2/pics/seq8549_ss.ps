%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACACCCCGGGGGGGGGGUUAUCCCCAUACUAGUUAUUAUCGAAACCAUCAGCCUACUCAUUCAACCAxxxxxxxxxxUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCUAGCCCCCCCCCCCCCCUACCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.86760712 374.60507202]
[96.30937958 366.25390625]
[86.22315979 355.04147339]
[79.24296570 341.67254639]
[75.80757904 326.98754883]
[76.13295746 311.90960693]
[80.19863892 297.38647461]
[87.74906158 284.33114624]
[98.30959320 273.56423950]
[111.21638489 265.76260376]
[125.65811157 261.41665649]
[125.03413391 246.42964172]
[124.41015625 231.44262695]
[123.78617859 216.45561218]
[123.16220093 201.46859741]
[122.53822327 186.48158264]
[121.91425323 171.49455261]
[121.29027557 156.50753784]
[120.66629791 141.52052307]
[120.04232025 126.53350830]
[107.10368347 118.94327545]
[94.16620636 111.35369110]
[80.77992249 118.12181091]
[67.39363861 124.88992310]
[58.87689972 138.90409851]
[42.49020767 138.26501465]
[35.09078598 123.63011169]
[44.29052734 110.05451202]
[60.62552261 111.50363922]
[74.01180267 104.73552704]
[87.39809418 97.96740723]
[96.41561890 85.98057556]
[99.20794678 71.24277496]
[102.00026703 56.50496674]
[104.79259491 41.76715851]
[100.64775848 36.94905472]
[98.20182037 31.46450233]
[97.48496246 25.85427856]
[98.36765289 20.62060165]
[100.58502960 16.18300438]
[103.77249908 12.84475136]
[107.50893402 10.77246666]
[106.57330322 -4.19832516]
[105.48199463 -19.15857315]
[104.23511505 -34.10666275]
[102.98824310 -49.05474854]
[101.74137115 -64.00283813]
[92.39202881 -72.94954681]
[91.69420624 -85.46881104]
[99.47700500 -94.78199768]
[98.54137421 -109.75278473]
[97.60575104 -124.72357941]
[87.06306458 -139.78451538]
[95.40209961 -155.19425964]
[94.15522766 -170.14234924]
[79.17071533 -171.37298584]
[64.59317780 -175.05335999]
[50.82028198 -181.08305359]
[38.22777176 -189.29759216]
[27.15917969 -199.47285461]
[17.91646194 -211.33126831]
[10.75176716 -224.54933167]
[5.86055422 -238.76643372]
[3.37625957 -253.59471130]
[3.36665583 -268.62966919]
[5.83200502 -283.46112061]
[10.70505047 -297.68444824]
[17.85285378 -310.91165161]
[27.08041382 -322.78186035]
[38.13599777 -332.97128296]
[50.71800613 -341.20187378]
[64.48318481 -347.24917603]
[79.05601501 -350.94815063]
[94.03893280 -352.19793701]
[109.02320099 -350.96441650]
[123.60003662 -347.28125000]
[137.37176514 -341.24890137]
[149.96269226 -333.03192139]
[161.02932739 -322.85452271]
[170.26976013 -310.99432373]
[177.43190002 -297.77490234]
[182.32037354 -283.55685425]
[184.80181885 -268.72808838]
[184.80853271 -253.69313049]
[182.34031677 -238.86215210]
[177.46453857 -224.63975525]
[170.31417847 -211.41394043]
[161.08433533 -199.54550171]
[150.02677917 -189.35823059]
[137.44319153 -181.13005066]
[123.67684937 -175.08540344]
[109.10330963 -171.38922119]
[110.35018921 -156.44113159]
[119.40214539 -148.35600281]
[120.52853394 -135.86801147]
[112.57653809 -125.65920258]
[113.51216888 -110.68841553]
[114.44779968 -95.71762085]
[124.93485260 -81.68118286]
[116.68945312 -65.24971008]
[117.93633270 -50.30162430]
[119.18320465 -35.35353470]
[120.43007660 -20.40544891]
[124.14433289 -13.95952034]
[121.54409790 -5.13395357]
[122.47972107 9.83683777]
[132.91954041 20.60764694]
[147.85385132 22.00995064]
[154.92747498 8.55512905]
[166.61479187 -1.16470063]
[181.13356018 -5.66733599]
[196.26977539 -4.26615715]
[209.71528625 2.82516551]
[219.41972351 14.52525711]
[223.90325928 29.04993820]
[222.48217773 44.18430328]
[215.37316895 57.62046432]
[203.66032410 67.30951691]
[189.12976074 71.77393341]
[173.99726868 70.33293915]
[160.57048035 63.20626831]
[150.89685059 51.48068619]
[146.45153809 36.94425583]
[131.51722717 35.54195404]
[119.53040314 44.55948257]
[116.73807526 59.29729080]
[113.94574738 74.03509521]
[111.15342712 88.77290344]
[135.02932739 125.90953064]
[135.65330505 140.89654541]
[136.27728271 155.88356018]
[136.90126038 170.87057495]
[137.52523804 185.85760498]
[138.14921570 200.84461975]
[138.77319336 215.83163452]
[139.39717102 230.81864929]
[140.02114868 245.80566406]
[140.64512634 260.79269409]
[155.39813232 263.92312622]
[168.90876770 270.62487793]
[180.32774353 280.47665405]
[188.93725586 292.85919189]
[194.19610596 306.99411011]
[195.77371216 321.99282837]
[193.57090759 336.91256714]
[187.72616577 350.81542969]
[178.60688782 362.82748413]
[166.78631592 372.19363403]
[153.00750732 378.32513428]
[138.13659668 380.83654785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[22 31]
[23 30]
[24 29]
[32 128]
[33 127]
[34 126]
[35 125]
[42 106]
[43 105]
[44 103]
[45 102]
[46 101]
[47 100]
[50 98]
[51 97]
[52 96]
[54 93]
[55 92]
[107 124]
[108 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
