%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCCCCGUGGGGGGGGGGAAAUGAUAUCAUCUCAACUUAGUAUUAUACCCACACCCACCCAAGAACAGxxxxxxxxxxGAACCUACGAGUACACCGACUACGGCGGACUAAUCUUCAACUCCUACAUACCCCCCCCCCCUUCCCCCAU\
) } def
/len { sequence length } bind def

/coor [
[97.50263977 631.29821777]
[83.65670776 625.28216553]
[71.94804382 615.75274658]
[63.24551773 603.41705322]
[58.19491577 589.19055176]
[57.17102432 574.12884521]
[60.24982452 559.34973145]
[67.20284271 545.94976807]
[77.51412964 534.92346191]
[90.41851044 527.08892822]
[104.95839691 523.02764893]
[104.95839691 508.02761841]
[104.95839691 493.02761841]
[104.95839691 478.02761841]
[104.95839691 463.02761841]
[104.95839691 448.02761841]
[104.95839691 433.02761841]
[104.95839691 418.02761841]
[104.95839691 403.02761841]
[104.95839691 388.02761841]
[96.60984039 379.21804810]
[96.52541351 366.67962646]
[105.29849243 357.16717529]
[105.61054993 342.17041016]
[105.92260742 327.17364502]
[91.33567810 323.77996826]
[77.76788330 317.42498779]
[65.81332397 308.38424683]
[55.99599457 297.05105591]
[48.74687195 283.91912842]
[44.38493729 269.56134033]
[43.10318756 254.60456848]
[44.96006775 239.70236206]
[49.87682724 225.50642395]
[57.64085007 212.63804626]
[67.91484833 201.66099548]
[80.25151062 193.05671692]
[94.11299133 187.20332336]
[108.89433289 184.35890198]
[109.20639038 169.36215210]
[109.51844788 154.36540222]
[109.83050537 139.36865234]
[110.14255524 124.37189484]
[94.94293976 124.92380524]
[82.53988647 117.13744354]
[76.88733673 104.24237061]
[79.36225128 90.95623779]
[88.48525238 81.76545715]
[85.38693237 67.08893585]
[82.28861237 52.41240692]
[67.28583527 53.29240417]
[52.31948090 51.92642212]
[37.72389984 48.34498215]
[23.82516861 42.62808609]
[10.93378258 34.90346146]
[-0.66225553 25.34367371]
[-10.70388699 14.16229153]
[-18.96677780 1.60911369]
[-25.26633453 -12.03541851]
[-29.46181870 -26.46648216]
[-31.45950317 -41.36167908]
[-31.21475983 -56.38824844]
[-28.73305511 -71.21048737]
[-24.06983185 -85.49726868]
[-17.32926941 -98.92940521]
[-8.66195202 -111.20684052]
[1.73848736 -122.05527496]
[13.63969994 -131.23234558]
[26.77580833 -138.53305054]
[40.85334778 -143.79429626]
[55.55781937 -146.89851379]
[70.56071472 -147.77636719]
[85.52687836 -146.40826416]
[100.12194824 -142.82473755]
[114.01986694 -137.10586548]
[126.91014862 -129.37940979]
[138.50482178 -119.81796265]
[148.54486084 -108.63515472]
[156.80596924 -96.08079529]
[163.10357666 -82.43536377]
[167.29701233 -68.00370789]
[169.29257202 -53.10822678]
[169.04568481 -38.08169174]
[166.56187439 -23.25980568]
[161.89662170 -8.97369194]
[155.15414429 4.45749044]
[146.48507690 16.73368454]
[136.08308411 27.58063698]
[124.18057251 36.75602341]
[111.04342651 44.05485916]
[96.96513367 49.31408691]
[100.06345367 63.99061203]
[103.16178131 78.66713715]
[113.16369629 80.92453003]
[121.63479614 87.90249634]
[126.36111450 98.60273743]
[139.74740601 91.83461761]
[153.13368225 85.06650543]
[161.95808411 71.93484497]
[176.80728149 73.09712219]
[188.21426392 60.55451202]
[203.42446899 68.04357147]
[200.43869019 84.73253632]
[183.57539368 86.48340607]
[175.70846558 99.13095856]
[159.90179443 98.45278931]
[146.51551819 105.22090149]
[133.12922668 111.98902130]
[125.13931274 124.68395233]
[124.82725525 139.68070984]
[124.51519775 154.67745972]
[124.20314026 169.67420959]
[123.89109039 184.67095947]
[138.54130554 188.12779236]
[152.14729309 194.55273438]
[164.11535645 203.66275024]
[173.92384338 215.05769348]
[181.14582825 228.23789978]
[185.46780396 242.62608337]
[186.70317078 257.59262085]
[184.80035400 272.48315430]
[179.84492493 286.64706421]
[172.05581665 299.46603394]
[161.77554321 310.38107300]
[149.45524597 318.91665649]
[135.63484192 324.70175171]
[120.91936493 327.48571777]
[120.60730743 342.48248291]
[120.29524994 357.47921753]
[129.54949951 373.36437988]
[119.95839691 388.02761841]
[119.95839691 403.02761841]
[119.95839691 418.02761841]
[119.95839691 433.02761841]
[119.95839691 448.02761841]
[119.95839691 463.02761841]
[119.95839691 478.02761841]
[119.95839691 493.02761841]
[119.95839691 508.02761841]
[119.95839691 523.02764893]
[134.49829102 527.08892822]
[147.40266418 534.92346191]
[157.71394348 545.94976807]
[164.66697693 559.34973145]
[167.74577332 574.12884521]
[166.72187805 589.19055176]
[161.67127991 603.41705322]
[152.96875000 615.75274658]
[141.26008606 625.28216553]
[127.41415405 631.29821777]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 129]
[24 128]
[25 127]
[39 113]
[40 112]
[41 111]
[42 110]
[43 109]
[48 93]
[49 92]
[50 91]
[96 108]
[97 107]
[98 106]
[100 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
