%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAUUCUUCGGGGGGGGGGAUAGCCGAAUACACAAACAUUAUUAUAAUAAACACCCUCACCACUACAAUxxxxxxxxxxGCCGACCGUUGACUAUUCUCUACAAACCACAAAGACAUUGGAACACUAUACCCCCCCCCCCCUAUUAUUC\
) } def
/len { sequence length } bind def

/coor [
[86.71054840 430.92794800]
[72.86460876 424.91192627]
[61.15594864 415.38250732]
[52.45342255 403.04684448]
[47.40282059 388.82031250]
[46.37892914 373.75863647]
[49.45772934 358.97946167]
[56.41075134 345.57952881]
[66.72203827 334.55322266]
[79.62641907 326.71868896]
[94.16630554 322.65737915]
[94.16630554 307.65737915]
[94.16630554 292.65737915]
[94.16630554 277.65737915]
[94.16630554 262.65737915]
[94.16630554 247.65739441]
[94.16630554 232.65739441]
[94.16630554 217.65739441]
[94.16630554 202.65739441]
[94.16630554 187.65739441]
[94.01026917 172.65820312]
[93.69821167 157.66145325]
[93.38615417 142.66468811]
[93.07409668 127.66793823]
[76.93838501 116.78227997]
[71.54302979 98.08070374]
[79.40077972 80.27298737]
[71.67668915 67.41458893]
[63.95260620 54.55618668]
[56.22852325 41.69778442]
[48.50443649 28.83938026]
[33.43245316 24.90579796]
[25.78230667 11.75551605]
[29.62525940 -2.58907485]
[21.90117455 -15.44747734]
[14.17708969 -28.30587959]
[0.49363771 -22.11882401]
[-13.81557655 -17.56218910]
[-28.55703735 -14.69760036]
[-43.53138351 -13.56379700]
[-58.53610229 -14.17611217]
[-73.36827087 -16.52626610]
[-87.82730865 -20.58247375]
[-101.71766663 -26.28988075]
[-114.85149384 -33.57130051]
[-127.05117035 -42.32826233]
[-138.15171814 -52.44233704]
[-148.00300598 -63.77673721]
[-156.47180176 -76.17819214]
[-163.44358826 -89.47896576]
[-168.82406616 -103.49920654]
[-172.54048157 -118.04927826]
[-174.54257202 -132.93243408]
[-174.80325317 -147.94737244]
[-173.31900024 -162.89105225]
[-170.10990906 -177.56137085]
[-165.21934509 -191.75993347]
[-158.71348572 -205.29470825]
[-150.68028259 -217.98265076]
[-141.22837830 -229.65219116]
[-130.48561096 -240.14550781]
[-118.59726715 -249.32067871]
[-105.72411346 -257.05361938]
[-92.04025269 -263.23977661]
[-77.73072815 -267.79544067]
[-62.98907852 -270.65905762]
[-48.01465988 -271.79183960]
[-33.00998306 -271.17852783]
[-18.17796707 -268.82739258]
[-3.71920276 -264.77023315]
[10.17077351 -259.06188965]
[23.30411530 -251.77958679]
[35.50320816 -243.02182007]
[46.60307693 -232.90699768]
[56.45360565 -221.57194519]
[64.92157745 -209.16992188]
[71.89247131 -195.86868286]
[77.27201843 -181.84808350]
[80.98746490 -167.29776001]
[82.98855591 -152.41447449]
[83.24823761 -137.39950562]
[81.76300049 -122.45593262]
[78.55291748 -107.78582764]
[73.66141510 -93.58760071]
[67.15464020 -80.05326080]
[59.12059021 -67.36584473]
[49.66791534 -55.69693375]
[38.92444992 -45.20434189]
[27.03549194 -36.02996445]
[34.75957870 -23.17156219]
[42.48366165 -10.31315994]
[56.95256805 -6.96856403]
[64.96906281 5.96165180]
[61.36283875 21.11529541]
[69.08692169 33.97369766]
[76.81101227 46.83209991]
[84.53509521 59.69050217]
[92.25917816 72.54890442]
[106.42999268 72.21262360]
[119.01263428 78.73964691]
[126.89928436 90.51783752]
[140.09996033 81.79702759]
[153.35643005 88.58786011]
[168.31668091 87.49655151]
[183.27693176 86.40524292]
[188.83335876 72.18944550]
[200.01338196 61.79859161]
[214.59719849 57.29578781]
[229.68916321 59.57506943]
[242.29277039 68.18388367]
[249.90557861 81.41294861]
[251.01602173 96.63562012]
[245.40365601 110.82942200]
[234.18280029 121.17617035]
[219.58137512 125.62150574]
[204.49848938 123.28280640]
[191.92887878 114.62442780]
[184.36824036 101.36548615]
[169.40798950 102.45680237]
[154.44773865 103.54811096]
[142.31712341 112.19086456]
[127.99059296 105.47808838]
[125.48136902 112.81338501]
[121.08948517 119.20198822]
[115.13944244 124.17189026]
[108.07085419 127.35588074]
[108.38290405 142.35263062]
[108.69496155 157.34939575]
[109.00701904 172.34614563]
[112.33187866 180.92501831]
[109.16630554 187.65739441]
[109.16630554 202.65739441]
[109.16630554 217.65739441]
[109.16630554 232.65739441]
[109.16630554 247.65739441]
[109.16630554 262.65737915]
[109.16630554 277.65737915]
[109.16630554 292.65737915]
[109.16630554 307.65737915]
[109.16630554 322.65737915]
[123.70619202 326.71868896]
[136.61056519 334.55322266]
[146.92185974 345.57952881]
[153.87487793 358.97946167]
[156.95367432 373.75863647]
[155.92977905 388.82031250]
[150.87918091 403.04684448]
[142.17665100 415.38250732]
[130.46800232 424.91192627]
[116.62205505 430.92794800]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 129]
[22 128]
[23 127]
[24 126]
[27 98]
[28 97]
[29 96]
[30 95]
[31 94]
[34 91]
[35 90]
[36 89]
[101 122]
[103 120]
[104 119]
[105 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
