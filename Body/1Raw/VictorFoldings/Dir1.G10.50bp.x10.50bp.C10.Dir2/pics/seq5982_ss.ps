%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCAAAGCCGGGGGGGGGGCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACxxxxxxxxxxUGCUUCAUCCGCCAACUAAUAUUUCACUUUACAUCCAAACAUCACUUUGGCCCCCCCCCCCUUCGAAGCC\
) } def
/len { sequence length } bind def

/coor [
[89.73596954 367.12921143]
[75.89002991 361.11318970]
[64.18136597 351.58377075]
[55.47884369 339.24810791]
[50.42824173 325.02157593]
[49.40435028 309.95989990]
[52.48314667 295.18072510]
[59.43616867 281.78082275]
[69.74745178 270.75448608]
[82.65183258 262.91998291]
[97.19171906 258.85864258]
[97.19171906 243.85865784]
[97.19171906 228.85865784]
[97.19171906 213.85865784]
[97.19171906 198.85865784]
[97.19171906 183.85865784]
[97.19171906 168.85865784]
[97.19171906 153.85865784]
[97.19171906 138.85865784]
[97.19171906 123.85865784]
[97.19171906 108.85865784]
[87.79907990 123.70849609]
[73.57711029 135.22578430]
[58.64280701 136.62808228]
[43.70849609 138.03039551]
[28.84545135 140.05271912]
[14.07939529 142.69158936]
[-0.68666017 145.33044434]
[-15.45271587 147.96931458]
[-30.21877098 150.60818481]
[-39.04701233 163.71687317]
[-54.57454681 166.66156006]
[-67.58916473 157.69522095]
[-70.36952209 142.13742065]
[-61.26608658 129.21832275]
[-45.67975998 126.60260773]
[-32.85763550 135.84211731]
[-18.09157944 133.20326233]
[-3.32552457 130.56439209]
[11.44053078 127.92552948]
[26.20658684 125.28666687]
[27.92556953 122.99485016]
[30.68521690 121.26906586]
[34.26590347 120.52035522]
[38.29946899 121.06934357]
[42.30619431 123.09607697]
[57.24050140 121.69377899]
[72.17481232 120.29147339]
[74.91832733 113.31127930]
[65.57154846 101.57936859]
[80.40535736 99.35089111]
[83.14887238 92.37069702]
[73.16614532 81.17492676]
[63.18341827 69.97916412]
[47.55937958 70.62985229]
[35.20403671 61.04447174]
[31.95120621 45.74894333]
[39.33677292 31.96535301]
[53.87350082 26.20188522]
[68.69759369 31.17987633]
[76.80956268 44.54887009]
[74.37918854 59.99643707]
[84.36191559 71.19219971]
[94.34463501 82.38796997]
[109.29272461 83.63484192]
[120.99234772 74.24768066]
[132.69197083 64.86051941]
[144.39160156 55.47335815]
[136.29281616 42.83049774]
[129.58380127 29.39840126]
[124.34056091 15.32926846]
[120.62250519 0.78251100]
[118.47176361 -14.07704544]
[117.91270447 -29.08102989]
[118.95166779 -44.05943680]
[121.57687378 -58.84254837]
[125.75858307 -73.26285553]
[131.44941711 -87.15698242]
[138.58488464 -100.36747742]
[147.08413696 -112.74465942]
[156.85087585 -124.14830017]
[167.77442932 -134.44917297]
[179.73103333 -143.53056335]
[192.58520508 -151.28958130]
[206.19131470 -157.63829041]
[220.39515686 -162.50477600]
[235.03582764 -165.83389282]
[249.94741821 -167.58792114]
[264.96096802 -167.74697876]
[279.90637207 -166.30926514]
[294.61428833 -163.29106140]
[308.91802979 -158.72659302]
[322.65557861 -152.66755676]
[335.67126465 -145.18260193]
[347.81756592 -136.35656738]
[358.95690918 -126.28942108]
[368.96304321 -115.09526062]
[377.72262573 -102.90091705]
[385.13635254 -89.84455109]
[391.12026978 -76.07411957]
[395.60653687 -61.74563599]
[398.54437256 -47.02145767]
[399.90042114 -32.06842422]
[399.65936279 -17.05596352]
[397.82391357 -2.15417790]
[394.41485596 12.46808434]
[389.47085571 26.64514160]
[383.04791260 40.21635818]
[375.21881104 53.02795792]
[366.07223511 64.93477631]
[355.71185303 75.80191040]
[344.25503540 85.50621033]
[331.83160400 93.93772888]
[318.58233643 101.00093079]
[304.65734863 106.61578369]
[290.21441650 110.71865845]
[275.41717529 113.26308441]
[260.43331909 114.22021484]
[245.43261719 113.57920837]
[230.58502197 111.34732819]
[216.05879211 107.54987335]
[202.01850891 102.22985840]
[188.62326050 95.44757080]
[176.02482605 87.27985382]
[164.36596680 77.81925964]
[153.77876282 67.17298126]
[142.07913208 76.56014252]
[130.37951660 85.94730377]
[118.67988586 95.33446503]
[112.19171906 108.85865784]
[112.19171906 123.85865784]
[112.19171906 138.85865784]
[112.19171906 153.85865784]
[112.19171906 168.85865784]
[112.19171906 183.85865784]
[112.19171906 198.85865784]
[112.19171906 213.85865784]
[112.19171906 228.85865784]
[112.19171906 243.85865784]
[112.19171906 258.85864258]
[126.73160553 262.91998291]
[139.63598633 270.75448608]
[149.94728088 281.78082275]
[156.90029907 295.18072510]
[159.97909546 309.95989990]
[158.95520020 325.02157593]
[153.90460205 339.24810791]
[145.20207214 351.58377075]
[133.49340820 361.11318970]
[119.64747620 367.12921143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 48]
[24 47]
[25 46]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[52 64]
[53 63]
[54 62]
[65 129]
[66 128]
[67 127]
[68 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
