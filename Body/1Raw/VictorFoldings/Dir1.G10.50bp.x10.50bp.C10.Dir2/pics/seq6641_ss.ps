%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCCUGCCAGGGGGGGGGGUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAxxxxxxxxxxUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCCCCCCCCCCCAACCCCCUGACA\
) } def
/len { sequence length } bind def

/coor [
[83.61833191 388.20584106]
[69.91618347 381.94494629]
[57.95106506 372.79159546]
[48.32315063 361.20492554]
[41.51537323 347.76611328]
[37.86920547 333.14923096]
[37.56753922 318.08746338]
[40.62550354 303.33630371]
[46.88971329 289.63568115]
[56.04595566 277.67276001]
[67.63496399 268.04766846]
[81.07543182 261.24313354]
[95.69319916 257.60052490]
[95.38919067 242.60359192]
[95.08518982 227.60667419]
[94.78118134 212.60975647]
[94.47718048 197.61283875]
[94.17317963 182.61592102]
[93.86917114 167.61900330]
[93.56517029 152.62208557]
[93.26116180 137.62516785]
[92.95716095 122.62824249]
[84.86609650 118.97589874]
[78.51459503 112.47533417]
[74.88550568 103.91308594]
[74.61876678 94.40602112]
[77.90431213 85.25598145]
[84.43522644 77.77150726]
[93.43034363 73.08111572]
[103.72580719 71.96466064]
[99.23535919 57.65257645]
[94.74491119 43.34048462]
[90.25446320 29.02839661]
[85.76402283 14.71630859]
[81.27357483 0.40421981]
[57.36507034 -4.81572390]
[44.13333130 -30.10812187]
[29.41053772 -32.97854614]
[14.68774414 -35.84897232]
[3.42553115 -25.17460060]
[-11.96436596 -23.19200325]
[-25.56421661 -30.66352654]
[-32.14460373 -44.71621704]
[-29.17523003 -59.94653320]
[-17.79788399 -70.49810028]
[-2.38738465 -72.31362915]
[11.13061523 -64.69501495]
[17.55816841 -50.57176590]
[32.28096390 -47.70133972]
[47.00375748 -44.83091736]
[52.88774872 -49.48157883]
[40.40525818 -57.79948044]
[44.45893478 -72.24135590]
[59.44663620 -72.84867859]
[64.65573120 -58.78290176]
[70.53971863 -63.43356323]
[71.14759827 -78.42124176]
[71.75548553 -93.40892029]
[68.96402740 -102.16957092]
[72.53062439 -108.69329834]
[73.44213104 -123.66557312]
[74.35364532 -138.63784790]
[75.26515961 -153.61013794]
[60.68989944 -157.34620667]
[47.08520508 -163.77340698]
[34.94287872 -172.65936279]
[24.70185852 -183.68289185]
[16.73234749 -196.44546509]
[11.32244110 -210.48574829]
[8.66770363 -225.29617310]
[8.86410236 -240.34136963]
[11.90453720 -255.07745361]
[17.67909813 -268.97174072]
[25.97904015 -281.52194214]
[36.50432205 -292.27438354]
[48.87446594 -300.84036255]
[62.64229584 -306.91021729]
[77.31011200 -310.26455688]
[92.34768677 -310.78213501]
[107.21141815 -308.44418335]
[121.36399078 -303.33523560]
[134.29380798 -295.64001465]
[145.53344727 -285.63665771]
[154.67660522 -273.68682861]
[161.39277649 -260.22244263]
[165.43917847 -245.73025513]
[166.66950989 -230.73416138]
[165.03932190 -215.77626038]
[160.60752869 -201.39726257]
[153.53434753 -188.11695862]
[144.07545471 -176.41542053]
[132.57279968 -166.71565247]
[119.44218445 -159.36830139]
[105.15827942 -154.63897705]
[90.23744202 -152.69862366]
[89.32592773 -137.72634888]
[88.41441345 -122.75406647]
[87.50289917 -107.78178406]
[86.74316406 -92.80103302]
[86.13527679 -77.81336212]
[85.52739716 -62.82567978]
[103.76659393 -51.74457550]
[111.68981934 -33.54396439]
[107.95103455 -15.56760216]
[95.58566284 -4.08622694]
[100.07611084 10.22586155]
[104.56655884 24.53795052]
[109.05699921 38.85004044]
[113.54744720 53.16212845]
[118.03789520 67.47422028]
[129.41926575 77.24480438]
[144.24629211 79.51622009]
[159.07331848 81.78763580]
[167.26721191 68.95097351]
[179.97743225 60.56227875]
[195.00184631 58.07493973]
[209.73739624 61.91990280]
[221.63102722 71.43100739]
[228.62213135 84.96039581]
[229.49945068 100.16402435]
[224.11096191 114.40776062]
[213.39027405 125.22380829]
[199.19480896 130.73820496]
[183.98400879 129.99555969]
[170.39324951 123.12453461]
[160.77719116 111.31557465]
[156.80189514 96.61466217]
[141.97486877 94.34324646]
[127.14785004 92.07183075]
[126.10885620 105.84075165]
[118.89372253 116.71546173]
[107.95407867 122.32424164]
[108.25807953 137.32116699]
[108.56208801 152.31808472]
[108.86608887 167.31500244]
[109.17009735 182.31192017]
[109.47409821 197.30883789]
[109.77810669 212.30575562]
[110.08210754 227.30267334]
[110.38611603 242.29959106]
[110.69011688 257.29650879]
[125.44348907 260.34375000]
[139.14868164 266.59799194]
[151.11822510 275.74554443]
[160.75175476 287.32754517]
[167.56604004 300.76309204]
[171.21929932 315.37820435]
[171.52825928 330.43981934]
[168.47744751 345.19244385]
[162.21987915 358.89611816]
[153.06942749 370.86343384]
[141.48509216 380.49417114]
[128.04791260 387.30520630]
[113.43192291 390.95489502]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[30 110]
[31 109]
[32 108]
[33 107]
[34 106]
[35 105]
[37 50]
[38 49]
[39 48]
[56 101]
[57 100]
[58 99]
[60 98]
[61 97]
[62 96]
[63 95]
[111 129]
[112 128]
[113 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
