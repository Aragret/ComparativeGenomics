%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAACCCUAACAGGGGGGGGGGCCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAAxxxxxxxxxxAGCAUACUCCUCAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUCCCCCCCCCCACAACCCUAACA\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 403.02743530]
[70.87159729 397.87243652]
[58.28185654 389.59024048]
[47.94191742 378.62744141]
[40.40940475 365.57531738]
[36.09054184 351.13772583]
[35.21823120 336.09326172]
[37.83952332 321.25326538]
[43.81304932 307.41802979]
[52.81666565 295.33367920]
[64.36482239 285.65191650]
[77.83473969 278.89483643]
[92.50000000 275.42684937]
[92.50000000 260.42684937]
[92.50000000 245.42686462]
[92.50000000 230.42686462]
[92.50000000 215.42686462]
[92.50000000 200.42686462]
[92.50000000 185.42686462]
[92.50000000 170.42686462]
[92.50000000 155.42686462]
[92.50000000 140.42686462]
[79.84581757 135.83839417]
[69.35158539 127.40904999]
[62.14200592 116.04224396]
[58.98972702 102.95615387]
[44.08283234 101.28747559]
[29.17593765 99.61880493]
[14.60068703 105.77287292]
[2.81314993 96.66775513]
[-12.09374523 94.99907684]
[-18.38365746 97.32640076]
[-24.03880692 96.24708557]
[-27.56649971 92.94875336]
[-42.39352417 90.67733765]
[-57.22055054 88.40592194]
[-72.04757690 86.13450623]
[-81.58988953 98.16944122]
[-95.87714386 103.80592346]
[-111.06613922 101.52776337]
[-123.07110596 91.94776917]
[-128.66278076 77.64291382]
[-126.33701324 62.46113586]
[-116.71943665 50.48625183]
[-102.39713287 44.93944931]
[-87.22271729 47.31278992]
[-75.27803802 56.96785355]
[-69.77615356 71.30747986]
[-54.94913101 73.57889557]
[-40.12210846 75.85031128]
[-25.29508209 78.12172699]
[-10.42506790 80.09217834]
[4.48182678 81.76085663]
[17.99083710 75.48742676]
[30.84461594 84.71190643]
[45.75151062 86.38058472]
[60.65840530 88.04926300]
[72.75852203 66.05735016]
[96.47934723 54.20697403]
[94.35830688 39.35768890]
[92.23726654 24.50840950]
[90.11621857 9.65912628]
[87.99517822 -5.19015551]
[85.87413788 -20.03943825]
[70.94240570 -22.39207268]
[57.36823654 -29.04288483]
[46.35863113 -39.40048981]
[38.89255524 -52.54389572]
[35.63388824 -67.30440521]
[36.87239075 -82.36951447]
[42.49793625 -96.39964294]
[52.01029968 -108.14725494]
[64.56365204 -116.56774902]
[79.04175568 -120.91238403]
[94.15723419 -120.79483795]
[108.56602478 -116.22556305]
[120.98690033 -107.61086273]
[130.31541443 -95.71673584]
[135.72207642 -81.60080719]
[136.72613525 -66.51825714]
[133.23831177 -51.81021881]
[125.56873322 -38.78451538]
[114.39937592 -28.59938240]
[100.72341919 -22.16048050]
[102.84445953 -7.31119823]
[104.96549988 7.53808355]
[107.08654785 22.38736534]
[109.20758820 37.23664856]
[111.32862854 52.08592987]
[125.23005676 57.72068405]
[137.09169006 48.53909683]
[148.95332336 39.35750580]
[160.81495667 30.17591667]
[157.15637207 15.39300156]
[159.83322144 0.40119186]
[168.38174438 -12.20209026]
[181.32084656 -20.23325157]
[196.40875244 -22.30084229]
[211.03138733 -18.04664040]
[222.65530396 -8.20771503]
[229.26658630 5.51128387]
[229.71977234 20.73345566]
[223.93635559 34.82146454]
[212.91836548 45.33448410]
[198.57470703 50.45106506]
[183.39051819 49.28472900]
[169.99655151 42.03755188]
[158.13491821 51.21914291]
[146.27328491 60.40073013]
[134.41163635 69.58232117]
[140.12207031 83.13523865]
[141.01026917 97.04384613]
[155.91716003 98.71252441]
[170.82406616 100.38119507]
[180.47673035 88.34667969]
[195.11067200 83.46289825]
[210.05624390 87.28825378]
[220.54437256 98.60207367]
[223.22834778 113.79417419]
[217.25169373 128.01679993]
[204.52156067 136.73158264]
[189.10008240 137.15763855]
[175.90820312 129.15904236]
[169.15538025 115.28809357]
[154.24848938 113.61941528]
[139.34159851 111.95073700]
[137.00593567 117.92042542]
[133.77079773 123.45452881]
[129.71478271 128.41853333]
[124.93650818 132.69177246]
[119.55210876 136.17037964]
[113.69246674 138.76980591]
[107.50000000 140.42686462]
[107.50000000 155.42686462]
[107.50000000 170.42686462]
[107.50000000 185.42686462]
[107.50000000 200.42686462]
[107.50000000 215.42686462]
[107.50000000 230.42686462]
[107.50000000 245.42686462]
[107.50000000 260.42684937]
[107.50000000 275.42684937]
[122.16526031 278.89483643]
[135.63517761 285.65191650]
[147.18333435 295.33367920]
[156.18695068 307.41802979]
[162.16047668 321.25326538]
[164.78176880 336.09326172]
[163.90945435 351.13772583]
[159.59059143 365.57531738]
[152.05809021 378.62744141]
[141.71813965 389.59024048]
[129.12840271 397.87243652]
[114.96779633 403.02743530]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[26 57]
[27 56]
[28 55]
[30 53]
[31 52]
[34 51]
[35 50]
[36 49]
[37 48]
[59 89]
[60 88]
[61 87]
[62 86]
[63 85]
[64 84]
[90 110]
[91 109]
[92 108]
[93 107]
[112 126]
[113 125]
[114 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
