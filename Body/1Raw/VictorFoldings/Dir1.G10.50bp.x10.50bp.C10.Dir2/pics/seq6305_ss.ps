%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAGCCUCCUGGGGGGGGGGUAUUCGAGCCGAGCUGGGCCAGCCAGGCAACCUUCUAGGUAACGACCACAxxxxxxxxxxACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACUACCCCCCCCCCCUAGGCCUCCU\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 419.19213867]
[71.01555634 413.63912964]
[58.81560135 404.77279663]
[49.20452881 393.15048218]
[42.78650284 379.50277710]
[39.96496582 364.68759155]
[40.91728210 349.63623047]
[45.58358765 335.29479980]
[53.67055511 322.56484985]
[64.66983032 312.24658203]
[77.88998413 304.98858643]
[92.50000000 301.24716187]
[92.50000000 286.24716187]
[92.50000000 271.24716187]
[92.50000000 256.24716187]
[92.50000000 241.24716187]
[92.50000000 226.24716187]
[92.50000000 211.24716187]
[92.50000000 196.24716187]
[92.50000000 181.24716187]
[92.50000000 166.24716187]
[92.50000000 151.24716187]
[92.50000000 136.24716187]
[79.72978210 134.58160400]
[67.39975739 128.27543640]
[53.46903992 133.83737183]
[39.53832626 139.39930725]
[27.07025146 150.88772583]
[12.57931042 142.08720398]
[17.02439880 125.72635651]
[33.97638702 125.46859741]
[47.90710449 119.90666199]
[61.83781815 114.34471893]
[59.23309708 99.57260895]
[44.24021149 99.11067963]
[29.24732590 98.64875031]
[14.25443935 98.18682861]
[-1.76337779 103.74253082]
[-11.53613663 89.88867188]
[-0.92905712 76.66270447]
[14.71636581 83.19393921]
[29.70925140 83.65586853]
[44.70213699 84.11779022]
[59.69502258 84.57971954]
[78.67445374 66.05902100]
[103.08466339 63.11380386]
[107.33751678 48.72932434]
[111.59036255 34.34484482]
[115.84320831 19.96036148]
[99.09783936 -1.53999710]
[102.57947540 -28.25791359]
[91.39118195 -38.24901199]
[80.20288849 -48.24010849]
[69.01458740 -58.23120499]
[53.17309189 -64.27133942]
[54.59181595 -81.16582489]
[71.21879578 -84.47940063]
[79.00568390 -69.41950226]
[90.19398499 -59.42840576]
[101.38227844 -49.43730545]
[112.57057953 -39.44620895]
[120.68790436 -43.79199600]
[129.66148376 -45.85400772]
[138.86161804 -45.48755264]
[144.56628418 -59.36043167]
[131.64746094 -67.03649139]
[119.98400879 -76.51181793]
[109.82453918 -87.58444214]
[101.38560486 -100.01835632]
[94.84706879 -113.54852295]
[90.34831238 -127.88655090]
[87.98522186 -142.72682190]
[87.80816650 -157.75302124]
[89.82092285 -172.64485168]
[93.98058319 -187.08489990]
[100.19849396 -200.76538086]
[108.34210968 -213.39468384]
[118.23786163 -224.70362854]
[129.67480469 -234.45114136]
[142.40916443 -242.42947388]
[156.16952515 -248.46856689]
[170.66255188 -252.43968201]
[185.57936096 -254.25817871]
[200.60195923 -253.88531494]
[215.41018677 -251.32901001]
[229.68835449 -246.64378357]
[243.13217163 -239.92947388]
[255.45503235 -231.32919312]
[266.39431763 -221.02629089]
[275.71682739 -209.24034119]
[283.22387695 -196.22257996]
[288.75543213 -182.25047302]
[292.19360352 -167.62184143]
[293.46508789 -152.64848328]
[292.54278564 -137.64958191]
[289.44635010 -122.94481659]
[284.24182129 -108.84763336]
[277.04010010 -95.65850067]
[267.99468994 -83.65856171]
[257.29843140 -73.10359192]
[245.17926025 -64.21855927]
[231.89553833 -57.19286728]
[217.73037720 -52.17625427]
[202.98574829 -49.27565384]
[187.97589111 -48.55289459]
[173.02078247 -50.02338028]
[158.43916321 -53.65576935]
[152.73449707 -39.78288651]
[159.48503113 -33.75019836]
[164.46231079 -26.16289902]
[167.32041931 -17.52868652]
[167.85572815 -8.42863941]
[166.02127075 0.52189177]
[161.93069458 8.71488857]
[155.85130310 15.59097195]
[148.18656921 20.67758942]
[139.44935608 23.62148285]
[130.22769165 24.21320915]
[125.97483826 38.59769058]
[121.72199249 52.98217010]
[117.46914673 67.36665344]
[125.58836365 73.25411987]
[131.82905579 81.10507965]
[135.73307800 90.34318542]
[137.01380920 100.29022217]
[135.57725525 110.21595764]
[131.52885437 119.39170074]
[125.16581726 127.14384460]
[116.95527649 132.90327454]
[107.50000000 136.24716187]
[107.50000000 151.24716187]
[107.50000000 166.24716187]
[107.50000000 181.24716187]
[107.50000000 196.24716187]
[107.50000000 211.24716187]
[107.50000000 226.24716187]
[107.50000000 241.24716187]
[107.50000000 256.24716187]
[107.50000000 271.24716187]
[107.50000000 286.24716187]
[107.50000000 301.24716187]
[122.11001587 304.98858643]
[135.33016968 312.24658203]
[146.32945251 322.56484985]
[154.41641235 335.29479980]
[159.08271790 349.63623047]
[160.03503418 364.68759155]
[157.21350098 379.50277710]
[150.79547119 393.15048218]
[141.18440247 404.77279663]
[128.98443604 413.63912964]
[114.96250153 419.19213867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[25 33]
[26 32]
[27 31]
[34 44]
[35 43]
[36 42]
[37 41]
[46 121]
[47 120]
[48 119]
[49 118]
[51 61]
[52 60]
[53 59]
[54 58]
[64 108]
[65 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
