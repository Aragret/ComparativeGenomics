%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUACCUAAGGGGGGGGGGGAACAGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUxxxxxxxxxxUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCCCCCCCCCCCAACUACCUAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 411.19857788]
[71.19830322 405.18255615]
[59.48964310 395.65313721]
[50.78712082 383.31747437]
[45.73651886 369.09094238]
[44.71262741 354.02926636]
[47.79142761 339.25009155]
[54.74444962 325.85015869]
[65.05573273 314.82382202]
[77.96011353 306.98931885]
[92.50000000 302.92800903]
[92.50000000 287.92800903]
[92.50000000 272.92800903]
[92.50000000 257.92800903]
[92.50000000 242.92800903]
[92.50000000 227.92800903]
[92.50000000 212.92800903]
[92.50000000 197.92800903]
[92.50000000 182.92800903]
[92.50000000 167.92800903]
[92.50000000 152.92800903]
[92.50000000 137.92800903]
[81.17597198 133.77040100]
[71.68449402 126.32520294]
[64.94956970 116.31720734]
[61.62684631 104.72071075]
[46.66659546 103.62939453]
[31.70634651 102.53808594]
[16.74609756 101.44677734]
[6.45512962 109.29214478]
[-6.02048063 108.03591156]
[-14.01100826 98.90033722]
[-28.47407913 105.31361389]
[-40.42227554 96.42036438]
[-55.35658264 95.01806641]
[-64.25898743 97.34165192]
[-70.58588409 93.42807770]
[-85.48778534 91.71538544]
[-100.30974579 98.73262024]
[-113.64208984 89.18376160]
[-111.76964569 72.89186859]
[-96.61862183 66.61663055]
[-83.77509308 76.81348419]
[-68.87319183 78.52617645]
[-53.95428085 80.08375549]
[-39.01997375 81.48606110]
[-25.62510300 74.97248077]
[-12.60870457 83.96602631]
[2.88696027 75.78774261]
[17.83740807 86.48652649]
[32.79765701 87.57783508]
[47.75790787 88.66915131]
[62.71815491 89.76045990]
[70.07778931 75.51642609]
[82.58311462 65.48281097]
[98.08360291 61.38508606]
[100.26044464 46.54388046]
[98.40283203 37.53271484]
[102.64004517 31.41784096]
[105.12516022 16.62513351]
[107.61028290 1.83242655]
[110.09539795 -12.96028042]
[100.28020477 -1.61735702]
[87.71032715 6.56788778]
[73.36673737 10.95666981]
[58.36881638 11.20648575]
[43.88702011 7.29783869]
[31.05151367 -0.46423694]
[20.86399651 -11.47398186]
[14.11950779 -24.87218666]
[11.34439468 -39.61324310]
[12.75522900 -54.54674530]
[18.24190903 -68.50727844]
[27.37624741 -80.40533447]
[39.44539261 -89.31239319]
[53.50746155 -94.53334045]
[68.46503448 -95.66071320]
[83.15081787 -92.60655212]
[96.41870880 -85.60918427]
[107.23326874 -75.21470642]
[114.75053406 -62.23431015]
[118.38384247 -47.68099213]
[117.84917450 -32.68783951]
[126.10146332 -45.21380234]
[134.35375977 -57.73976517]
[142.60604858 -70.26572418]
[150.85833740 -82.79168701]
[151.28379822 -99.18531799]
[165.82102966 -106.77483368]
[179.51538086 -97.75279999]
[178.27925110 -81.40030670]
[163.38429260 -74.53939819]
[155.13200378 -62.01343918]
[146.87971497 -49.48747635]
[138.62742615 -36.96151352]
[130.37513733 -24.43555260]
[124.88810730 -10.47516251]
[122.40298462 4.31754494]
[119.91786957 19.11025238]
[117.43274689 33.90295792]
[115.10164642 48.72071838]
[112.92481232 63.56192398]
[129.90240479 75.49224854]
[138.26664734 94.48200989]
[153.24635315 95.26185608]
[168.22607422 96.04169464]
[183.20578003 96.82154083]
[198.18550110 97.60138702]
[205.46867371 84.18802643]
[217.85543823 75.27002716]
[232.88639832 72.61805725]
[247.57714844 76.75866699]
[259.01083374 86.86973572]
[264.91726685 100.94371033]
[264.12374878 116.18618774]
[256.78781128 129.57075500]
[244.36601257 138.43991089]
[229.32472229 141.03268433]
[214.65039062 136.83424377]
[203.25662231 126.67822266]
[197.40565491 112.58110046]
[182.42593384 111.80125427]
[167.44622803 111.02141571]
[152.46650696 110.24156952]
[137.48680115 109.46172333]
[133.37149048 119.52249908]
[126.61833191 128.04013062]
[117.76113129 134.34132385]
[107.50000000 137.92800903]
[107.50000000 152.92800903]
[107.50000000 167.92800903]
[107.50000000 182.92800903]
[107.50000000 197.92800903]
[107.50000000 212.92800903]
[107.50000000 227.92800903]
[107.50000000 242.92800903]
[107.50000000 257.92800903]
[107.50000000 272.92800903]
[107.50000000 287.92800903]
[107.50000000 302.92800903]
[122.03988647 306.98931885]
[134.94427490 314.82382202]
[145.25555420 325.85015869]
[152.20857239 339.25009155]
[155.28736877 354.02926636]
[154.26348877 369.09094238]
[149.21287537 383.31747437]
[140.51036072 395.65313721]
[128.80169678 405.18255615]
[114.95575714 411.19857788]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[26 53]
[27 52]
[28 51]
[29 50]
[32 48]
[34 46]
[35 45]
[37 44]
[38 43]
[56 102]
[57 101]
[59 100]
[60 99]
[61 98]
[62 97]
[83 96]
[84 95]
[85 94]
[86 93]
[87 92]
[104 125]
[105 124]
[106 123]
[107 122]
[108 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
