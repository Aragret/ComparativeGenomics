%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGACUUCACGGGGGGGGGGCAGUCAAAGCGAACUACUAUACUCAAUUGAUCCAAUAACUUGACCAACGGxxxxxxxxxxAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGCCCCCCCCCCAAGAAUUCAC\
) } def
/len { sequence length } bind def

/coor [
[80.67964172 392.33499146]
[66.83370209 386.31896973]
[55.12504196 376.78955078]
[46.42251587 364.45388794]
[41.37191391 350.22735596]
[40.34802246 335.16567993]
[43.42682266 320.38653564]
[50.37984467 306.98660278]
[60.69112778 295.96026611]
[73.59551239 288.12576294]
[88.13539886 284.06445312]
[88.13539886 269.06445312]
[88.13539886 254.06443787]
[88.13539886 239.06443787]
[88.13539886 224.06443787]
[88.13539886 209.06443787]
[88.13539886 194.06443787]
[88.13539886 179.06443787]
[88.13539886 164.06443787]
[88.13539886 149.06443787]
[88.13539886 134.06443787]
[84.96981812 127.33207703]
[88.29467773 118.75319672]
[77.63305664 108.20190430]
[62.64035797 108.66994476]
[47.64766312 109.13799286]
[32.65496445 109.60603333]
[28.66759300 124.18657684]
[20.55827141 136.94316101]
[9.04807854 146.74147034]
[-4.83950853 152.71025085]
[-19.86961555 154.31875610]
[-34.70577621 151.42396545]
[-48.02876282 144.28327942]
[-58.65391541 133.53164673]
[-65.63644409 120.12509918]
[-68.35546875 105.25572205]
[-66.56922150 90.24570465]
[-60.43652344 76.42971802]
[-50.50269699 65.03627777]
[-37.65105438 57.07847214]
[-23.02434540 53.26391220]
[-7.92317533 53.93178558]
[6.30967331 59.02269745]
[18.40862465 68.08397675]
[27.29784966 80.30989838]
[32.18692398 94.61333466]
[47.17961884 94.14529419]
[62.17231369 93.67725372]
[77.16500854 93.20920563]
[85.67610168 80.85763550]
[80.77455139 66.68107605]
[75.87300110 52.50452042]
[60.93190384 54.36391449]
[45.93075180 53.07585144]
[31.52532768 48.69664383]
[18.34537697 41.41773224]
[6.96706820 31.55731583]
[-2.11218596 19.54645348]
[-8.49548054 5.91020632]
[-11.90376472 -8.75530720]
[-12.18804264 -23.80897331]
[-9.33588791 -38.59271240]
[-3.47198439 -52.46023941]
[5.14732409 -64.80532837]
[16.14523697 -75.08830261]
[29.04097557 -82.85963440]
[43.27079010 -87.77960205]
[58.21261597 -89.63311768]
[73.21326447 -88.33914948]
[87.61695862 -83.95427704]
[100.79404449 -76.67018127]
[112.16847992 -66.80529022]
[121.24300385 -54.79085541]
[127.62093353 -41.15209961]
[131.02345276 -26.48524666]
[131.30180359 -11.43146992]
[128.44383240 3.35114503]
[122.57447815 17.21636391]
[113.95030975 29.55806160]
[102.94834900 39.83670807]
[90.04956055 47.60297012]
[94.95111084 61.77952957]
[99.85266113 75.95608521]
[113.50890350 82.16149139]
[127.41146088 76.52953339]
[141.31401062 70.89758301]
[155.21656799 65.26562500]
[169.11912537 59.63366699]
[181.47070312 51.12257767]
[191.68417358 40.13690948]
[194.81977844 24.04032516]
[210.41349792 18.96413803]
[222.42387390 30.13029671]
[218.49563599 46.05201340]
[202.66984558 50.35039139]
[192.45635986 61.33605576]
[196.18382263 67.84420776]
[209.20013428 60.38930130]
[224.20004272 60.44100189]
[216.65504456 73.40560913]
[203.63873291 80.86051941]
[207.36618042 87.36867523]
[222.00968933 84.11785126]
[236.65318298 80.86701965]
[246.44743347 68.16063690]
[262.49005127 68.03987122]
[272.47448730 80.59736633]
[268.74154663 96.20008087]
[254.15483093 102.87895203]
[239.90400696 95.51052094]
[225.26051331 98.76135254]
[210.61700439 102.01217651]
[199.87120056 101.29305267]
[190.54530334 98.12535095]
[183.14256287 93.08314514]
[177.98742676 86.83280945]
[175.21128845 80.08348846]
[174.75108337 73.53622437]
[160.84852600 79.16818237]
[146.94596863 84.80013275]
[133.04341125 90.43209076]
[119.14086151 96.06404877]
[119.46868134 101.25363159]
[118.41681671 106.33726501]
[116.06433105 110.95529938]
[112.58213043 114.78224182]
[108.22056580 117.54970551]
[103.29143524 119.06525421]
[103.13539886 134.06443787]
[103.13539886 149.06443787]
[103.13539886 164.06443787]
[103.13539886 179.06443787]
[103.13539886 194.06443787]
[103.13539886 209.06443787]
[103.13539886 224.06443787]
[103.13539886 239.06443787]
[103.13539886 254.06443787]
[103.13539886 269.06445312]
[103.13539886 284.06445312]
[117.67528534 288.12576294]
[130.57966614 295.96026611]
[140.89094543 306.98660278]
[147.84396362 320.38653564]
[150.92277527 335.16567993]
[149.89888000 350.22735596]
[144.84828186 364.45388794]
[136.14575195 376.78955078]
[124.43708801 386.31896973]
[110.59114838 392.33499146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 129]
[24 50]
[25 49]
[26 48]
[27 47]
[51 84]
[52 83]
[53 82]
[85 123]
[86 122]
[87 121]
[88 120]
[89 119]
[90 97]
[91 96]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
