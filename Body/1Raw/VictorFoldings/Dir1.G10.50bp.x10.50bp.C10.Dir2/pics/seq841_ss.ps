%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUGUAGCUUGGGGGGGGGGACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACAUCACCCxxxxxxxxxxUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAGCAAGACGAGAAGACCCCCCCCCCCCCUAUGGAGCUU\
) } def
/len { sequence length } bind def

/coor [
[129.88887024 432.27621460]
[116.04293823 426.26019287]
[104.33427429 416.73077393]
[95.63175201 404.39511108]
[90.58114624 390.16857910]
[89.55725861 375.10690308]
[92.63605499 360.32772827]
[99.58908081 346.92779541]
[109.90036011 335.90148926]
[122.80474091 328.06695557]
[137.34463501 324.00564575]
[137.34463501 309.00564575]
[137.34463501 294.00564575]
[137.34463501 279.00564575]
[137.34463501 264.00564575]
[137.34463501 249.00566101]
[137.34463501 234.00566101]
[137.34463501 219.00566101]
[137.34463501 204.00566101]
[137.34463501 189.00566101]
[117.43733215 172.90270996]
[121.53760529 150.78857422]
[113.02651215 138.43701172]
[104.51542664 126.08543396]
[96.00433350 113.73386383]
[82.98802185 106.27895355]
[68.02777863 105.18763733]
[61.82370758 107.76000214]
[56.12430191 106.89508820]
[52.47208786 103.72698975]
[37.57018661 102.01429749]
[22.66828346 100.30161285]
[7.76638126 98.58892059]
[-7.13552094 96.87622833]
[-15.24116993 109.80918121]
[-28.16007805 117.93719482]
[-43.32719040 119.64643860]
[-57.73106003 114.59754944]
[-68.51179504 103.79299164]
[-73.52886200 89.37800598]
[-71.78613281 74.21470642]
[-63.62961578 61.31377792]
[-50.67879868 53.23670197]
[-35.50507736 51.58719635]
[-21.12119865 56.69276810]
[-10.38309860 67.53969574]
[-5.42283154 81.97432709]
[9.47907066 83.68701935]
[24.38097382 85.39970398]
[39.28287506 87.11239624]
[54.18477631 88.82508850]
[69.11908722 90.22739410]
[84.07933807 91.31870270]
[94.63062286 80.65707397]
[93.38375092 65.70898438]
[92.13687897 50.76090240]
[90.88999939 35.81281281]
[89.64312744 20.86472702]
[88.39625549 5.91664028]
[86.68356323 -8.98526192]
[84.50672913 -23.82646751]
[82.32988739 -38.66767502]
[67.38941956 -40.96417236]
[53.79035187 -47.56392288]
[42.74189758 -57.88007736]
[35.22647858 -70.99533081]
[31.91235924 -85.74348450]
[33.09423447 -100.81314087]
[38.66700745 -114.86431885]
[48.13515472 -126.64759827]
[60.65676880 -135.11521912]
[75.11844635 -139.51423645]
[90.23425293 -139.45349121]
[104.66011047 -134.93840027]
[117.11328125 -126.37044525]
[126.48643494 -114.51145935]
[131.94610596 -100.41595459]
[133.00685120 -85.33728790]
[129.57432556 -70.61624146]
[121.95375824 -57.56180573]
[110.82276154 -47.33476639]
[97.17109680 -40.84450912]
[99.34793091 -26.00330544]
[101.52476501 -11.16209888]
[104.18398285 -8.75460243]
[105.77782440 -4.91254997]
[105.63269806 -0.16583310]
[103.34433746 4.66976547]
[104.59121704 19.61785316]
[105.83808899 34.56594086]
[107.08496094 49.51402664]
[108.33184052 64.46211243]
[109.57871246 79.41020203]
[114.76062775 87.26490784]
[115.60908508 95.36980438]
[112.94847870 101.76045990]
[108.35590363 105.22277069]
[116.86699677 117.57434082]
[125.37808990 129.92591858]
[133.88917542 142.27748108]
[153.89035034 144.27291870]
[165.25308228 164.12101746]
[180.15498352 165.83370972]
[195.05688477 167.54640198]
[200.44201660 153.45913696]
[209.16200256 141.15414429]
[220.66868591 131.40493774]
[234.23875427 124.82435608]
[249.01918030 121.82605743]
[264.08084106 122.59852600]
[278.47698975 127.09320068]
[291.30264282 135.02754211]
[301.75155640 145.90278625]
[309.16693115 159.03530884]
[313.08258057 173.59957886]
[313.25244141 188.68009949]
[309.66577148 203.32887268]
[302.54806519 216.62507629]
[292.34674072 227.73291016]
[279.70306396 235.95408630]
[265.41180420 240.77186584]
[250.37133789 241.88336182]
[235.52713013 239.21870422]
[221.81228638 232.94543457]
[210.08895874 223.45785522]
[201.09405518 211.35237122]
[195.39300537 197.38996887]
[193.34420776 182.44830322]
[178.44229126 180.73561096]
[163.54039001 179.02293396]
[152.34463501 189.00566101]
[152.34463501 204.00566101]
[152.34463501 219.00566101]
[152.34463501 234.00566101]
[152.34463501 249.00566101]
[152.34463501 264.00564575]
[152.34463501 279.00564575]
[152.34463501 294.00564575]
[152.34463501 309.00564575]
[152.34463501 324.00564575]
[166.88452148 328.06695557]
[179.78889465 335.90148926]
[190.10018921 346.92779541]
[197.05320740 360.32772827]
[200.13200378 375.10690308]
[199.10810852 390.16857910]
[194.05751038 404.39511108]
[185.35498047 416.73077393]
[173.64631653 426.26019287]
[159.80038452 432.27621460]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 100]
[23 99]
[24 98]
[25 97]
[26 53]
[27 52]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[54 93]
[55 92]
[56 91]
[57 90]
[58 89]
[59 88]
[60 84]
[61 83]
[62 82]
[102 130]
[103 129]
[104 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
