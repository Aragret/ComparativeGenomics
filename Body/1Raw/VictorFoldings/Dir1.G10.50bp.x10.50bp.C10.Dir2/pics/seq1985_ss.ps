%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCAAAUAAGGGGGGGGGGAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCGCAAxxxxxxxxxxUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACACCCCCCCCCCACCCAAACAA\
) } def
/len { sequence length } bind def

/coor [
[75.20292664 523.57598877]
[61.35698700 517.55999756]
[49.64832306 508.03057861]
[40.94580078 495.69491577]
[35.89519882 481.46838379]
[34.87130737 466.40670776]
[37.95010376 451.62753296]
[44.90312576 438.22760010]
[55.21441269 427.20129395]
[68.11878967 419.36676025]
[82.65867615 415.30545044]
[82.65867615 400.30545044]
[82.65867615 385.30545044]
[82.65867615 370.30545044]
[82.65867615 355.30545044]
[82.65867615 340.30545044]
[82.65867615 325.30545044]
[82.65867615 310.30545044]
[82.65867615 295.30545044]
[82.65867615 280.30545044]
[74.92137909 267.57818604]
[82.65867615 253.77801514]
[82.65867615 238.77801514]
[80.37699127 236.01010132]
[79.35759735 231.97741699]
[80.19004822 227.30200195]
[83.15592957 222.84968567]
[84.09156036 207.87890625]
[85.02718353 192.90811157]
[77.24438477 183.59492493]
[77.94220734 171.07566833]
[87.29154968 162.12895203]
[88.53842163 147.18086243]
[89.78530121 132.23277283]
[74.01642609 121.63667297]
[66.45050812 104.20992279]
[69.47608948 85.45410919]
[82.13800812 71.29039764]
[77.23645782 57.11384201]
[72.33490753 42.93728256]
[60.76321411 39.89280319]
[52.20656204 31.70179558]
[48.73129272 20.50374603]
[51.09803772 9.14301491]
[58.59875488 0.44648030]
[54.29117203 -13.92170334]
[49.83435440 -28.24430084]
[45.22879028 -42.51976013]
[40.62322617 -56.79522324]
[36.01766205 -71.07068634]
[31.41209793 -85.34614563]
[26.80653191 -99.62160492]
[11.87181187 -97.79113770]
[-3.13941908 -98.82043457]
[-17.68451309 -102.67227936]
[-31.23767471 -109.20743561]
[-43.30896378 -118.18966675]
[-53.46201706 -129.29426575]
[-61.32979965 -142.11981201]
[-66.62789917 -156.20265198]
[-69.16479492 -171.03372192]
[-68.84877777 -186.07688904]
[-65.69126892 -200.78833008]
[-59.80641937 -214.63626099]
[-51.40695190 -227.12005615]
[-40.79650879 -237.78846741]
[-28.35865021 -246.25582886]
[-14.54299259 -252.21604919]
[0.15103202 -255.45365906]
[15.19224644 -255.85162354]
[30.03691864 -253.39556885]
[44.14842224 -248.17427063]
[57.01663971 -240.37649536]
[68.17639160 -230.28408813]
[77.22425079 -218.26191711]
[83.83315277 -204.74456787]
[87.76419067 -190.22067261]
[88.87525940 -175.21527100]
[87.12619019 -160.27079773]
[82.58020782 -145.92749023]
[75.40164948 -132.70384216]
[65.85002899 -121.07788086]
[54.27061081 -111.46987915]
[41.08199310 -104.22716522]
[45.68755722 -89.95170593]
[50.29312134 -75.67624664]
[54.89868546 -61.40078735]
[59.50424957 -47.12532806]
[64.10981750 -32.84986496]
[69.18957520 -27.41464233]
[68.65935516 -18.22928810]
[72.96694183 -3.86110425]
[89.55246735 3.77550125]
[95.45223236 21.39055634]
[86.51146698 38.03573227]
[91.41301727 52.21229172]
[96.31456757 66.38884735]
[110.10255432 67.73189545]
[122.19473267 74.49145508]
[130.56130981 85.53286743]
[145.20481873 82.28203583]
[159.84831238 79.03121185]
[174.49182129 75.78038788]
[179.72494507 61.26770782]
[191.98736572 51.90626526]
[207.36618042 50.68325806]
[220.95405579 57.98894501]
[228.41516113 71.49211121]
[227.36868286 86.88394165]
[218.14854431 99.25296021]
[203.69686890 104.65225983]
[188.62512207 101.35894012]
[177.74264526 90.42388916]
[163.09913635 93.67471313]
[148.45564270 96.92553711]
[133.81213379 100.17636871]
[132.39837646 109.67662811]
[128.37034607 118.39607239]
[122.05307007 125.63111115]
[113.95630646 130.79794312]
[104.73338318 133.47964478]
[103.48651123 148.42773438]
[102.23963928 163.37582397]
[110.48503113 179.80729675]
[99.99797821 193.84373474]
[99.06234741 208.81452942]
[98.12672424 223.78532410]
[97.65867615 238.77801514]
[97.65867615 253.77801514]
[105.39598083 267.57818604]
[97.65867615 280.30545044]
[97.65867615 295.30545044]
[97.65867615 310.30545044]
[97.65867615 325.30545044]
[97.65867615 340.30545044]
[97.65867615 355.30545044]
[97.65867615 370.30545044]
[97.65867615 385.30545044]
[97.65867615 400.30545044]
[97.65867615 415.30545044]
[112.19856262 419.36676025]
[125.10295105 427.20129395]
[135.41423035 438.22760010]
[142.36724854 451.62753296]
[145.44604492 466.40670776]
[144.42216492 481.46838379]
[139.37155151 495.69491577]
[130.66903687 508.03057861]
[118.96037292 517.55999756]
[105.11443329 523.57598877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[27 127]
[28 126]
[29 125]
[32 123]
[33 122]
[34 121]
[38 97]
[39 96]
[40 95]
[45 92]
[46 91]
[47 89]
[48 88]
[49 87]
[50 86]
[51 85]
[52 84]
[100 116]
[101 115]
[102 114]
[103 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
