%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAAAGCAGGGGGGGGGGGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCACUACCUAAAAAAUCCxxxxxxxxxxAUGCAUACACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCCCCCCCCCCCUAACAGCAG\
) } def
/len { sequence length } bind def

/coor [
[64.59196472 425.85833740]
[51.71869278 417.95544434]
[41.59439850 406.74496460]
[35.03981781 393.13562012]
[32.58629608 378.23068237]
[34.43273163 363.23843384]
[40.42944336 349.37423706]
[50.09030533 337.76199341]
[62.63215256 329.34304810]
[77.03827667 324.79986572]
[76.72621918 309.80313110]
[76.41416168 294.80636597]
[76.10210419 279.80960083]
[75.79005432 264.81286621]
[75.47799683 249.81610107]
[75.16593933 234.81935120]
[74.85388184 219.82260132]
[74.54182434 204.82585144]
[74.22976685 189.82908630]
[65.46510315 202.00202942]
[52.10525894 208.82218933]
[37.10531616 208.78102112]
[23.78311920 201.88760376]
[15.08542061 189.66671753]
[12.93606853 174.82150269]
[17.81048012 160.63558960]
[28.63047791 150.24678040]
[43.00278091 145.95295715]
[57.74837112 148.70388794]
[69.60565186 157.89109802]
[75.95230103 171.48440552]
[79.05062103 156.80787659]
[82.14894867 142.13134766]
[85.24726868 127.45482635]
[88.34558868 112.77830505]
[79.23378754 91.15322113]
[70.21625519 79.16638947]
[61.19872665 67.17955017]
[48.05260849 74.45456696]
[34.02191925 79.82911682]
[19.37976074 83.19859314]
[4.41115332 84.49740601]
[-10.59253693 83.70027924]
[-25.33925819 80.82272339]
[-39.54196167 75.92074585]
[-52.92418671 69.08977509]
[-65.22544861 60.46277618]
[-76.20629120 50.20766830]
[-85.65297699 38.52407837]
[-93.38162231 25.63942909]
[-99.24177551 11.80452156]
[-103.11938477 -2.71134138]
[-104.93896484 -17.62560463]
[-104.66509247 -32.64796066]
[-102.30310059 -47.48598862]
[-97.89897156 -61.85086823]
[-91.53842163 -75.46298218]
[-83.34526825 -88.05735779]
[-73.47899628 -99.38885498]
[-62.13165283 -109.23689270]
[-49.52411652 -117.40978241]
[-35.90179443 -123.74843597]
[-21.52985191 -128.12947083]
[-6.68804359 -130.46759033]
[8.33473110 -130.71731567]
[23.24604988 -128.87376404]
[37.75566101 -124.97281647]
[51.58112717 -119.09041595]
[64.45333099 -111.34106445]
[76.12171936 -101.87561035]
[86.35915375 -90.87828827]
[94.96636963 -78.56317139]
[101.77581024 -65.16998291]
[106.65494537 -50.95941544]
[109.50878143 -36.20808411]
[110.28179169 -21.20313263]
[108.95890808 -6.23663378]
[105.56589508 8.40008640]
[100.16878510 22.42211914]
[92.87265015 35.55651855]
[83.81949615 47.54762650]
[73.18555450 58.16202545]
[82.20308685 70.14885712]
[91.22061920 82.13568878]
[83.47044373 69.29299164]
[82.85336304 54.30569458]
[89.52154541 40.86934662]
[101.83074188 32.29708481]
[116.74575806 30.70265388]
[130.58886719 36.47920609]
[139.94662476 48.20236206]
[142.51159668 62.98143005]
[137.65133667 77.17219543]
[126.56425476 87.27550507]
[111.98544312 90.80009460]
[126.84848785 88.77776337]
[141.71153259 86.75543213]
[156.57458496 84.73309326]
[162.46145630 70.61601257]
[174.54429626 61.40180206]
[189.51741028 59.48543167]
[203.34683228 65.28224182]
[212.35719299 77.14305878]
[227.22024536 75.12071991]
[242.08328247 73.09838867]
[256.94631958 71.07604980]
[271.80938721 69.05371857]
[282.62594604 57.20545578]
[298.62307739 58.41864777]
[307.52911377 71.76263428]
[302.51211548 87.00105286]
[287.42071533 92.44429016]
[273.83172607 83.91676331]
[258.96865845 85.93910217]
[244.10562134 87.96143341]
[229.24256897 89.98377228]
[214.37953186 92.00610352]
[208.86573792 105.84313965]
[197.08787537 115.12419891]
[182.14707947 117.27804565]
[168.04161072 111.62714386]
[158.59692383 99.59613800]
[143.73387146 101.61847687]
[128.87081909 103.64080811]
[114.00778198 105.66314697]
[103.02211761 115.87662506]
[99.92378998 130.55314636]
[96.82546997 145.22967529]
[93.72714996 159.90620422]
[90.62882996 174.58273315]
[89.22652435 189.51702881]
[89.53858185 204.51379395]
[89.85063934 219.51054382]
[90.16268921 234.50729370]
[90.47474670 249.50404358]
[90.78680420 264.50079346]
[91.09886169 279.49755859]
[91.41091919 294.49432373]
[91.72297668 309.49105835]
[92.03502655 324.48782349]
[106.61766815 328.42776489]
[119.49887848 336.31771851]
[129.63442993 347.51803589]
[136.20268250 361.12078857]
[138.67117310 376.02325439]
[136.83979797 391.01733398]
[130.85700989 404.88754272]
[121.20782471 416.50952148]
[108.67444611 424.94107056]
[94.27289581 429.49868774]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[31 130]
[32 129]
[33 128]
[34 127]
[35 126]
[36 84]
[37 83]
[38 82]
[95 125]
[96 124]
[97 123]
[98 122]
[103 117]
[104 116]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
