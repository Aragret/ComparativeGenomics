%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCACUCAGCCAGGGGGGGGGGUUUUACCUCACCCCCACUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAxxxxxxxxxxAAGCUCCAUCUGCCUACGACAAACAGACCUAAAAUCGCUCAUUGCAUACUCCCCCCCCCCCUUCAAUCAGCCA\
) } def
/len { sequence length } bind def

/coor [
[18.62262917 282.74624634]
[8.39066219 277.83755493]
[-1.54648614 272.35656738]
[-11.15683460 266.32086182]
[-20.40945625 259.74990845]
[-29.27457237 252.66485596]
[-37.72365570 245.08847046]
[-45.72951126 237.04518127]
[-53.26637650 228.56083679]
[-60.30999756 219.66276550]
[-66.83770752 210.37957764]
[-72.82849121 200.74116516]
[-86.06172943 207.80384827]
[-99.29496765 214.86653137]
[-107.82662964 228.19024658]
[-122.69789886 227.35684204]
[-135.93113708 234.41952515]
[-149.16438293 241.48219299]
[-162.39761353 248.54487610]
[-175.63085938 255.60755920]
[-188.72012329 262.93359375]
[-201.66018677 270.52008057]
[-214.60026550 278.10656738]
[-227.54032898 285.69302368]
[-238.14625549 298.91992188]
[-253.79225159 292.39004517]
[-251.84880066 275.54785156]
[-235.12680054 272.75296021]
[-222.18673706 265.16650391]
[-209.24667358 257.58001709]
[-196.30661011 249.99353027]
[-194.24681091 245.62821960]
[-189.39361572 242.53775024]
[-182.69352722 242.37431335]
[-169.46029663 235.31164551]
[-156.22705078 228.24896240]
[-142.99382019 221.18627930]
[-129.76057434 214.12361145]
[-122.17544556 201.30506897]
[-106.35764313 201.63328552]
[-93.12440491 194.57061768]
[-79.89116669 187.50793457]
[-91.20003510 158.83042908]
[-97.96860504 128.75592041]
[-100.03616333 97.99855804]
[-97.35359955 67.28872681]
[-89.98462677 37.35566711]
[-78.10422516 8.91017723]
[-91.19349670 1.58413231]
[-106.96163940 4.54139805]
[-119.01033783 -6.05144262]
[-118.09687805 -22.06847000]
[-104.92198181 -31.22278976]
[-89.59230042 -26.49199295]
[-83.86745453 -11.50514030]
[-70.77818298 -4.17909575]
[-65.08856201 -12.97892284]
[-58.94595337 -21.46874046]
[-52.36720276 -29.62525558]
[-45.37036514 -37.42608643]
[-37.97463608 -44.84982300]
[-30.20031166 -51.87610245]
[-22.06872559 -58.48563766]
[-13.60218716 -64.66030121]
[-4.82393122 -70.38314056]
[4.24195671 -75.63845825]
[13.57059956 -80.41183472]
[23.13640022 -84.69017029]
[32.91311264 -88.46172333]
[42.87390518 -91.71614838]
[52.99145126 -94.44451141]
[63.23798370 -96.63932800]
[73.58539581 -98.29457855]
[84.00527954 -99.40571594]
[94.46905518 -99.96969604]
[104.94801331 -99.98497009]
[115.41338348 -99.45149231]
[125.83647156 -98.37073517]
[136.18865967 -96.74565125]
[146.44154358 -94.58071136]
[156.56700134 -91.88185120]
[166.53723145 -88.65647888]
[176.32490540 -84.91344452]
[185.90313721 -80.66300964]
[195.24565125 -75.91684723]
[204.32681274 -70.68798065]
[213.12171936 -64.99075317]
[221.60621643 -58.84079361]
[229.75703430 -52.25498962]
[237.55181885 -45.25140381]
[244.96914673 -37.84925461]
[251.98869324 -30.06885338]
[263.74285889 -39.38763809]
[275.49700928 -48.70642471]
[287.25115967 -58.02520752]
[284.34277344 -73.05184937]
[288.76187134 -87.70552826]
[299.49295044 -98.61894226]
[314.07009888 -103.28426361]
[329.14358521 -100.62944031]
[341.24966431 -91.26453400]
[347.60641479 -77.34152222]
[346.75314331 -62.05982208]
[338.88586426 -48.93104553]
[325.81246948 -40.97209549]
[310.53710938 -40.01188278]
[296.56994629 -46.27104950]
[284.81579590 -36.95226669]
[273.06164551 -27.63348007]
[261.30749512 -18.31469536]
[270.72250366 -4.27031946]
[278.91790771 10.51895142]
[285.83511353 25.94746399]
[291.42477417 41.90499878]
[295.64691162 58.27755356]
[298.47134399 74.94817352]
[299.87796021 91.79776001]
[299.85662842 108.70594025]
[298.40759277 125.55192566]
[295.54113770 142.21537781]
[310.07434082 145.92826843]
[324.55136108 139.01481628]
[338.91925049 146.15225220]
[342.15621948 161.86534119]
[331.77914429 174.10037231]
[315.74841309 173.47164917]
[306.36145020 160.46148682]
[291.82821655 156.74858093]
[288.30154419 167.53518677]
[284.16885376 178.10446167]
[279.44348145 188.42236328]
[274.14059448 198.45570374]
[268.27728271 208.17219543]
[261.87243652 217.54055786]
[254.94665527 226.53065491]
[247.52221680 235.11354065]
[239.62300110 243.26161194]
[231.27445984 250.94862366]
[222.50344849 258.14984131]
[213.33819580 264.84213257]
[203.80818176 271.00390625]
[193.94410706 276.61532593]
[183.77769470 281.65838623]
[173.34165955 286.11682129]
[162.66960144 289.97628784]
[151.79585266 293.22436523]
[140.75541687 295.85061646]
[129.58381653 297.84658813]
[118.31701660 299.20581055]
[106.99126434 299.92398071]
[95.64301300 299.99871826]
[84.30878448 299.42984009]
[73.02504730 298.21911621]
[61.82812881 296.37051392]
[50.75405502 293.88992310]
[39.83846283 290.78536987]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 42]
[13 41]
[14 40]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[21 31]
[22 30]
[23 29]
[24 28]
[48 56]
[49 55]
[92 110]
[93 109]
[94 108]
[95 107]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
