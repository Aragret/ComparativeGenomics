%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUAUAGAGGGGGGGGGGAGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAUAAGCxxxxxxxxxxGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAGCAAGACGAGAAGCCCCCCCCCCACCCUAUGGA\
) } def
/len { sequence length } bind def

/coor [
[96.70867157 372.19631958]
[82.86273193 366.18029785]
[71.15406799 356.65087891]
[62.45154572 344.31521606]
[57.40094376 330.08868408]
[56.37705231 315.02700806]
[59.45584869 300.24783325]
[66.40887451 286.84790039]
[76.72015381 275.82159424]
[89.62453461 267.98706055]
[104.16442108 263.92575073]
[104.16442108 248.92576599]
[104.16442108 233.92576599]
[104.16442108 218.92576599]
[104.16442108 203.92576599]
[104.16442108 188.92576599]
[104.16442108 173.92576599]
[104.16442108 158.92576599]
[104.16442108 143.92576599]
[104.16442108 128.92576599]
[98.77902222 123.70585632]
[97.33248901 138.63594055]
[84.75785828 146.81388855]
[70.52388763 142.08164978]
[65.34881592 128.00263977]
[73.12949371 115.17840576]
[88.00820923 113.26604462]
[82.62281036 108.04613495]
[67.63011169 108.51417542]
[52.63741302 108.98221588]
[37.64471817 109.45026398]
[22.65202332 109.91830444]
[7.65932655 110.38634491]
[-5.89270067 118.55048370]
[-18.85520172 111.21407318]
[-34.49795914 117.75169373]
[-45.11043167 104.53005981]
[-35.34332657 90.67221069]
[-19.32324219 96.22138214]
[-6.84359407 88.09072113]
[7.19128418 95.39364624]
[22.18398094 94.92560577]
[37.17667770 94.45756531]
[52.16937256 93.98952484]
[67.16207123 93.52148438]
[82.15476227 93.05343628]
[68.15808105 87.65966797]
[60.39176941 74.82672119]
[62.10590744 59.92498779]
[72.58316040 49.19059372]
[87.43896484 47.11571121]
[100.45640564 54.56864548]
[106.18789673 68.43046570]
[102.23419189 82.90126801]
[111.49913788 71.10462952]
[120.76409149 59.30798721]
[130.02903748 47.51134872]
[139.29399109 35.71470642]
[141.73291016 20.08261681]
[155.67901611 14.85239315]
[164.94396973 3.05575299]
[167.09835815 -15.20180702]
[183.57789612 -21.15365410]
[192.59542847 -33.14048767]
[178.66870117 -27.56856537]
[163.76351929 -25.88459396]
[148.94470215 -28.20886993]
[135.27082825 -34.37535095]
[123.71877289 -43.94351959]
[115.11376190 -56.22984695]
[110.07052612 -70.35662079]
[108.94934845 -85.31466675]
[111.83032227 -100.03540039]
[118.50762177 -113.46720886]
[128.50425720 -124.65055847]
[141.10607910 -132.78652954]
[155.41284180 -137.29391479]
[170.40251160 -137.85070801]
[185.00424194 -134.41714478]
[198.17492676 -127.23849487]
[208.97367859 -116.82759857]
[216.62907410 -103.92817688]
[220.59420776 -89.46173859]
[220.58583069 -74.46174622]
[216.60452271 -59.99974823]
[208.93814087 -47.11319351]
[222.18072510 -54.15832901]
[224.12725830 -72.13120270]
[236.32928467 -85.25724792]
[253.80482483 -88.45195770]
[269.58129883 -80.63082123]
[282.51937866 -88.22073364]
[295.45742798 -95.81063843]
[308.39547729 -103.40055084]
[321.33352661 -110.99045563]
[334.27160645 -118.58036804]
[347.20965576 -126.17027283]
[350.95111084 -141.52531433]
[364.49755859 -149.66586304]
[379.81219482 -145.76228333]
[387.80905151 -132.13049316]
[383.74377441 -116.85800171]
[370.02822876 -109.00569916]
[354.79956055 -113.23221588]
[341.86151123 -105.64231110]
[328.92343140 -98.05239868]
[315.98538208 -90.46249390]
[303.04733276 -82.87258148]
[290.10928345 -75.28267670]
[277.17123413 -67.69277191]
[277.78451538 -55.49586487]
[273.10266113 -44.13826370]
[263.96533203 -35.81911087]
[252.08110046 -32.17768478]
[239.70832825 -33.97063828]
[229.22586060 -40.91574478]
[215.98327637 -33.87060928]
[204.58226013 -24.12295723]
[195.56472778 -12.13612366]
[196.94020081 -0.07729299]
[189.46997070 9.99318600]
[176.74060059 12.32070255]
[167.47566223 24.11734200]
[165.69943237 38.90565872]
[151.09062195 44.97965622]
[141.82568359 56.77629471]
[132.56072998 68.57293701]
[123.29578400 80.36957550]
[114.03083038 92.16621399]
[124.66710663 105.98999023]
[119.16442108 128.92576599]
[119.16442108 143.92576599]
[119.16442108 158.92576599]
[119.16442108 173.92576599]
[119.16442108 188.92576599]
[119.16442108 203.92576599]
[119.16442108 218.92576599]
[119.16442108 233.92576599]
[119.16442108 248.92576599]
[119.16442108 263.92575073]
[133.70431519 267.98706055]
[146.60868835 275.82159424]
[156.91998291 286.84790039]
[163.87300110 300.24783325]
[166.95179749 315.02700806]
[165.92790222 330.08868408]
[160.87730408 344.31521606]
[152.17477417 356.65087891]
[140.46611023 366.18029785]
[126.62017822 372.19631958]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[35 39]
[54 129]
[55 128]
[56 127]
[57 126]
[58 125]
[60 123]
[61 122]
[63 119]
[64 118]
[86 117]
[87 116]
[91 110]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
