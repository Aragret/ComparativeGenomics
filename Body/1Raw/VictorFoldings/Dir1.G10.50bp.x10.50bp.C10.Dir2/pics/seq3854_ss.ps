%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUACUAAUAAGGGGGGGGGGGUGGCUCCUUUAACCUCUCCACCCUUAUCACAACACAAGAACACCUCUGAxxxxxxxxxxCUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCCCCCCCCCCCAUUACUAACAA\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 377.90618896]
[70.87159729 372.75119019]
[58.28185654 364.46899414]
[47.94191742 353.50622559]
[40.40940475 340.45410156]
[36.09054184 326.01651001]
[35.21823120 310.97204590]
[37.83952332 296.13204956]
[43.81304932 282.29681396]
[52.81666565 270.21246338]
[64.36482239 260.53067017]
[77.83473969 253.77359009]
[92.50000000 250.30561829]
[92.50000000 235.30561829]
[92.50000000 220.30561829]
[92.50000000 205.30561829]
[92.50000000 190.30561829]
[92.50000000 175.30561829]
[92.50000000 160.30561829]
[92.50000000 145.30561829]
[92.50000000 130.30561829]
[92.50000000 115.30561829]
[80.69582367 95.99610138]
[98.95706940 77.63867188]
[92.76358032 63.97702026]
[86.57009125 50.31536865]
[80.37660217 36.65371704]
[74.18311310 22.99206734]
[67.85149384 9.39388466]
[61.38239288 -4.13943624]
[54.23614502 -17.32773209]
[46.43109512 -30.13715172]
[38.62604523 -42.94656754]
[30.82099533 -55.75598526]
[23.01594543 -68.56540680]
[9.43676472 -62.15931702]
[-4.74642086 -57.23292542]
[-19.37290573 -53.84204483]
[-34.27695847 -52.02510452]
[-49.28970718 -51.80268478]
[-64.24104309 -53.17730713]
[-78.96156311 -56.13339996]
[-93.28446198 -60.63746262]
[-107.04746246 -66.63846588]
[-120.09460449 -74.06841278]
[-132.27806091 -82.84311676]
[-143.45979309 -92.86314392]
[-153.51309204 -104.01497650]
[-162.32405090 -116.17224121]
[-169.79283142 -129.19720459]
[-175.83480835 -142.94226074]
[-180.38151550 -157.25167847]
[-183.38143921 -171.96331787]
[-184.80059814 -186.91050720]
[-184.62290955 -201.92384338]
[-182.85037231 -216.83325195]
[-179.50306702 -231.46977234]
[-174.61895752 -245.66755676]
[-168.25334167 -259.26577759]
[-160.47837830 -272.11029053]
[-151.38214111 -284.05560303]
[-141.06771851 -294.96636963]
[-129.65196228 -304.71893311]
[-117.26422882 -313.20281982]
[-104.04488373 -320.32186890]
[-90.14370728 -325.99545288]
[-75.71821594 -330.15924072]
[-60.93185425 -332.76611328]
[-45.95217133 -333.78646851]
[-30.94889069 -333.20877075]
[-16.09201622 -331.03958130]
[-1.54988706 -327.30346680]
[12.51272488 -322.04275513]
[25.93647766 -315.31707764]
[38.56927109 -307.20260620]
[50.26796722 -297.79129028]
[60.90000916 -287.18978882]
[70.34492493 -275.51821899]
[78.49570465 -262.90884399]
[85.25998688 -249.50448608]
[90.56112671 -235.45706177]
[94.33905792 -220.92573547]
[96.55097961 -206.07516479]
[97.17182159 -191.07360840]
[96.19455719 -176.09104919]
[93.63024902 -161.29725647]
[89.50796509 -146.85984802]
[83.87440491 -132.94241333]
[76.79340363 -119.70263672]
[68.34519958 -107.29055023]
[58.62550735 -95.84678650]
[47.74446487 -85.50101471]
[35.82536316 -76.37045288]
[43.63041306 -63.56103897]
[51.43546295 -50.75161743]
[59.24051285 -37.94219971]
[67.04556274 -25.13278389]
[73.37580109 -38.73160934]
[87.90434265 -42.46276093]
[100.00384521 -33.59697342]
[100.82374573 -18.61939621]
[89.76431274 -8.48584080]
[74.91571045 -10.60853386]
[81.38481140 2.92478657]
[87.14083099 7.63093472]
[87.84475708 16.79857826]
[94.03824615 30.46022797]
[100.23174286 44.12187958]
[106.42523193 57.78352737]
[112.61872101 71.44517517]
[124.48035431 80.62677002]
[139.25830078 83.19821930]
[154.03623962 85.76966858]
[168.95852661 80.51266479]
[180.17098999 90.31726074]
[194.94892883 92.88871002]
[209.72686768 95.46015930]
[222.50669861 86.16222382]
[238.10479736 88.70677948]
[247.26710510 101.58419037]
[244.55776978 117.15451813]
[231.58421326 126.18016052]
[216.04339600 123.30636597]
[207.15542603 110.23810577]
[192.37748718 107.66665649]
[177.59953308 105.09520721]
[163.73426819 110.53613281]
[151.46479797 100.54760742]
[136.68684387 97.97615814]
[121.90890503 95.40471649]
[120.04419708 104.77555084]
[114.70220947 111.75666046]
[107.50000000 115.30561829]
[107.50000000 130.30561829]
[107.50000000 145.30561829]
[107.50000000 160.30561829]
[107.50000000 175.30561829]
[107.50000000 190.30561829]
[107.50000000 205.30561829]
[107.50000000 220.30561829]
[107.50000000 235.30561829]
[107.50000000 250.30561829]
[122.16526031 253.77359009]
[135.63517761 260.53067017]
[147.18333435 270.21246338]
[156.18695068 282.29681396]
[162.16047668 296.13204956]
[164.78176880 310.97204590]
[163.90945435 326.01651001]
[159.59059143 340.45410156]
[152.05809021 353.50622559]
[141.71813965 364.46899414]
[129.12840271 372.75119019]
[114.96779633 377.90618896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[24 110]
[25 109]
[26 108]
[27 107]
[28 106]
[29 104]
[30 103]
[31 97]
[32 96]
[33 95]
[34 94]
[35 93]
[111 130]
[112 129]
[113 128]
[115 126]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
