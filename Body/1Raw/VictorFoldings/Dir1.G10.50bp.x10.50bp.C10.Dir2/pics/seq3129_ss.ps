%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAACUUAGGGGGGGGGGGUAUUAUACCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCxxxxxxxxxxUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCCCCCCCCCCCUCAACCUAG\
) } def
/len { sequence length } bind def

/coor [
[83.79906464 381.13092041]
[70.92578888 373.22805786]
[60.80149460 362.01754761]
[54.24691010 348.40820312]
[51.79338837 333.50326538]
[53.63982773 318.51104736]
[59.63653946 304.64682007]
[69.29740143 293.03457642]
[81.83924866 284.61563110]
[96.24536896 280.07244873]
[95.93331146 265.07571411]
[95.62125397 250.07894897]
[95.30920410 235.08219910]
[94.99714661 220.08544922]
[94.68508911 205.08869934]
[94.37303162 190.09193420]
[94.06097412 175.09518433]
[93.74891663 160.09843445]
[93.43686676 145.10168457]
[93.12480927 130.10491943]
[92.81275177 115.10816956]
[82.80540466 108.99384308]
[78.21349335 96.41905975]
[63.56999207 99.66989136]
[61.62039566 114.70234680]
[54.64421082 128.16001892]
[43.48385239 138.41780090]
[29.48698235 144.23703003]
[14.34379387 144.91500854]
[-0.11709988 140.36985779]
[-12.14947605 131.15043640]
[-20.30036736 118.37003326]
[-23.58551216 103.57193756]
[-21.60821533 88.54309845]
[-14.60724354 75.09831238]
[-3.42799854 64.86111450]
[10.57957077 59.06768417]
[25.72398376 58.41761398]
[40.17647552 62.98940277]
[52.19184113 72.23097992]
[60.31916428 85.02639008]
[74.96266937 81.77555847]
[86.46446991 72.14703369]
[92.24074554 58.30381775]
[90.41436768 42.58838272]
[102.45606232 33.82213974]
[108.23233032 19.97892189]
[114.00860596 6.13570356]
[119.78487396 -7.70751429]
[125.56114960 -21.55073166]
[122.75910950 -39.72016907]
[137.04933167 -49.85869217]
[142.53636169 -63.81908035]
[148.02339172 -77.77947235]
[138.15608215 -90.60477448]
[136.42837524 -106.56465149]
[143.21286011 -120.97152710]
[156.40165710 -129.66403198]
[155.46601868 -144.63482666]
[154.53039551 -159.60562134]
[151.90560913 -163.24870300]
[150.73645020 -167.14793396]
[150.91960144 -170.80148315]
[152.19554138 -173.79579163]
[154.19238281 -175.85005188]
[154.50442505 -190.84681702]
[154.81648254 -205.84356689]
[155.12854004 -220.84031677]
[155.44059753 -235.83706665]
[141.64225769 -242.28111267]
[131.66276550 -253.78457642]
[127.23114777 -268.35443115]
[129.11518860 -283.46633911]
[136.98849487 -296.50210571]
[149.48693848 -305.20318604]
[164.44509888 -308.06207275]
[179.27139282 -304.58343506]
[191.39706421 -295.36996460]
[198.72128296 -282.01797485]
[199.97506714 -266.84075928]
[194.94119263 -252.46786499]
[184.49182129 -241.38948059]
[170.43734741 -235.52500916]
[170.12530518 -220.52825928]
[169.81324768 -205.53150940]
[169.50119019 -190.53475952]
[169.18913269 -175.53799438]
[169.50119019 -160.54124451]
[170.43681335 -145.57044983]
[171.37243652 -130.59967041]
[177.49087524 -128.64535522]
[183.03091431 -125.39537811]
[187.72221375 -121.00833130]
[201.24639893 -127.49649811]
[214.77058411 -133.98466492]
[228.29478455 -140.47282410]
[228.26594543 -155.73591614]
[234.87011719 -169.49627686]
[246.79602051 -179.02180481]
[261.67578125 -182.42115784]
[276.55499268 -179.01942444]
[288.47937012 -169.49201965]
[295.08135986 -155.73059082]
[295.05007935 -140.46751404]
[288.39178467 -126.73325348]
[276.42846680 -117.25477600]
[261.53543091 -113.91403198]
[246.66972351 -117.37433624]
[234.78294373 -126.94863129]
[221.25875854 -120.46047211]
[207.73455811 -113.97230530]
[194.21037292 -107.48413849]
[192.23165894 -89.57623291]
[179.99650574 -76.08583069]
[161.98377991 -72.29244232]
[156.49674988 -58.33205032]
[151.00971985 -44.37165833]
[155.55709839 -33.11871719]
[151.04908752 -21.41842461]
[139.40437317 -15.77445984]
[133.62809753 -1.93124175]
[127.85182190 11.91197586]
[122.07554626 25.75519371]
[116.29927826 39.59841156]
[118.53880310 54.32368851]
[106.08396149 64.08009338]
[100.30768585 77.92330933]
[118.86750793 95.46562195]
[107.80950165 114.79611206]
[108.12155914 129.79286194]
[108.43361664 144.78962708]
[108.74567413 159.78637695]
[109.05773163 174.78312683]
[109.36978912 189.77987671]
[109.68183899 204.77664185]
[109.99389648 219.77339172]
[110.30595398 234.77014160]
[110.61801147 249.76689148]
[110.93006897 264.76364136]
[111.24212646 279.76040649]
[125.82476807 283.70034790]
[138.70597839 291.59030151]
[148.84152222 302.79061890]
[155.40977478 316.39337158]
[157.87826538 331.29583740]
[156.04689026 346.28991699]
[150.06411743 360.16015625]
[140.41491699 371.78210449]
[127.88153839 380.21365356]
[113.47998810 384.77127075]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[23 42]
[24 41]
[43 127]
[44 126]
[46 124]
[47 123]
[48 122]
[49 121]
[50 120]
[52 117]
[53 116]
[54 115]
[58 90]
[59 89]
[60 88]
[65 87]
[66 86]
[67 85]
[68 84]
[69 83]
[93 112]
[94 111]
[95 110]
[96 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
