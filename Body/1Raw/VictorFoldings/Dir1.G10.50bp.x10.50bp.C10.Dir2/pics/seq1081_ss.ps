%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCACACCCCGGGGGGGGGGCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAACUAxxxxxxxxxxACUCCAACUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCACCCCCCCCCCAGCCUCACCCC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 395.62503052]
[71.01555634 390.07202148]
[58.81560135 381.20568848]
[49.20452881 369.58337402]
[42.78650284 355.93566895]
[39.96496582 341.12048340]
[40.91728210 326.06909180]
[45.58358765 311.72769165]
[53.67055511 298.99771118]
[64.66983032 288.67944336]
[77.88998413 281.42147827]
[92.50000000 277.68002319]
[92.50000000 262.68002319]
[92.50000000 247.68003845]
[92.50000000 232.68003845]
[92.50000000 217.68003845]
[92.50000000 202.68003845]
[92.50000000 187.68003845]
[92.50000000 172.68003845]
[92.50000000 157.68003845]
[92.50000000 142.68003845]
[71.14580536 132.33064270]
[58.44419479 112.28619385]
[58.20402908 88.55744171]
[70.49732971 68.25999451]
[62.34066391 55.67155838]
[54.18399811 43.08311844]
[38.80877304 42.12985992]
[27.08010292 32.41947174]
[23.36219597 17.83724976]
[28.87778473 4.02724457]
[20.72111893 -8.56119537]
[16.65361404 -10.44668388]
[13.72595501 -13.26667786]
[12.09371567 -16.53509140]
[11.73393059 -19.76615906]
[12.46140575 -22.53415489]
[5.36500216 -35.74934006]
[-1.73140097 -48.96451950]
[-11.49067593 -60.35559464]
[-23.46093369 -69.39511108]
[-35.43119049 -78.43463135]
[-47.40145111 -87.47415161]
[-63.07699203 -89.61611938]
[-68.57080841 -103.46051025]
[-80.54106903 -112.50003052]
[-92.51132202 -121.53955078]
[-104.48158264 -130.57907104]
[-120.15712738 -132.72103882]
[-125.65093994 -146.56542969]
[-140.84979248 -142.88728333]
[-154.83399963 -149.88555908]
[-161.00065613 -164.25588989]
[-156.43803406 -179.21304321]
[-143.30047607 -187.69471741]
[-127.79113770 -185.69610596]
[-117.23304749 -174.16090393]
[-116.61141968 -158.53569031]
[-101.79207611 -157.04028320]
[-95.44206238 -142.54933167]
[-83.47180176 -133.50981140]
[-71.50154877 -124.47029114]
[-59.53128815 -115.43077087]
[-44.71194077 -113.93537140]
[-38.36193085 -99.44441223]
[-26.39167213 -90.40489197]
[-14.42141438 -81.36537170]
[-2.45115590 -72.32585144]
[-8.04675865 -86.24308014]
[-9.75512981 -101.14547729]
[-7.45416880 -115.96794891]
[-1.30832922 -129.65109253]
[8.24313545 -141.21697998]
[20.51756477 -149.83894348]
[34.63768768 -154.90078735]
[49.59431076 -156.04071045]
[64.31845856 -153.17724609]
[77.75777435 -146.51506042]
[88.95172882 -136.53030396]
[97.10026550 -123.93659973]
[101.62100220 -109.63404846]
[102.19082642 -94.64487457]
[98.76901245 -80.04038239]
[91.60012817 -66.86437225]
[81.19654846 -56.05857086]
[68.30182648 -48.39527130]
[53.83757019 -44.42219162]
[38.83757019 -44.42329407]
[24.37389755 -48.39849472]
[11.48378181 -56.06092453]
[18.58018494 -42.84574127]
[25.67658806 -29.63055801]
[33.30955887 -16.71786118]
[41.46622467 -4.12942123]
[56.32446671 -3.52061725]
[68.11460114 5.83121204]
[72.18488312 20.50384521]
[66.77243805 34.92645264]
[74.92910004 47.51489258]
[83.08576965 60.10333252]
[91.87238312 57.43502426]
[101.02396393 56.67810059]
[110.12956238 57.86655426]
[118.78029633 60.94701385]
[126.58769989 65.78115082]
[133.20117188 72.15189362]
[138.32376099 79.77315521]
[141.72540283 88.30270386]
[143.25335693 97.35752106]
[158.15780640 99.04792023]
[173.06225586 100.73831940]
[187.96669006 102.42871857]
[197.03152466 90.03015137]
[211.08766174 83.83978271]
[226.35406494 85.52277374]
[238.72415161 94.62642670]
[244.87043762 108.70189667]
[243.13960266 123.96295166]
[233.99722290 136.30444336]
[219.90255737 142.40657043]
[204.64700317 140.62789917]
[192.33422852 131.44688416]
[186.27630615 117.33316803]
[171.37185669 115.64276886]
[156.46740723 113.95236969]
[141.56295776 112.26197052]
[138.59831238 119.69786072]
[134.31649780 126.46155548]
[128.86361694 132.32223511]
[122.42575836 137.07992554]
[115.22261810 140.57225037]
[107.50000000 142.68003845]
[107.50000000 157.68003845]
[107.50000000 172.68003845]
[107.50000000 187.68003845]
[107.50000000 202.68003845]
[107.50000000 217.68003845]
[107.50000000 232.68003845]
[107.50000000 247.68003845]
[107.50000000 262.68002319]
[107.50000000 277.68002319]
[122.11001587 281.42147827]
[135.33016968 288.67944336]
[146.32945251 298.99771118]
[154.41641235 311.72769165]
[159.08271790 326.06909180]
[160.03503418 341.12048340]
[157.21350098 355.93566895]
[150.79547119 369.58337402]
[141.18440247 381.20568848]
[128.98443604 390.07202148]
[114.96250153 395.62503052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[25 100]
[26 99]
[27 98]
[31 94]
[32 93]
[37 92]
[38 91]
[39 90]
[40 68]
[41 67]
[42 66]
[43 65]
[45 63]
[46 62]
[47 61]
[48 60]
[50 58]
[109 126]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
