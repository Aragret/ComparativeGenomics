%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACACUGAACGGGGGGGGGGUGACAAUUAACAGCCCAAUAUCUACAAUCAACCAACAAGUCAUUAUUACCxxxxxxxxxxUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCUUCCCCCCCCCCAACAAUGAAC\
) } def
/len { sequence length } bind def

/coor [
[65.57322693 364.91726685]
[51.72728729 358.90124512]
[40.01862335 349.37182617]
[31.31609917 337.03616333]
[26.26549721 322.80963135]
[25.24160576 307.74795532]
[28.32040596 292.96878052]
[35.27342606 279.56887817]
[45.58471298 268.54254150]
[58.48909378 260.70800781]
[73.02897644 256.64669800]
[73.02897644 241.64671326]
[73.02897644 226.64671326]
[73.02897644 211.64671326]
[73.02897644 196.64671326]
[73.02897644 181.64671326]
[73.02897644 166.64671326]
[73.02897644 151.64671326]
[73.02897644 136.64671326]
[73.02897644 121.64670563]
[66.40048218 108.19074249]
[54.50810242 99.04901123]
[42.61572266 89.90727234]
[32.30928040 100.82369995]
[20.95130539 110.64141083]
[8.65835285 119.25966644]
[-4.44343328 126.59002686]
[-18.21960831 132.55726624]
[-32.52880478 137.10017395]
[-47.22418594 140.17210388]
[-62.15495300 141.74154663]
[-77.16790009 141.79238892]
[-92.10895538 140.32412720]
[-106.82480621 137.35180664]
[-121.16444397 132.90594482]
[-134.98072815 127.03214264]
[-148.13186646 119.79070282]
[-160.48291016 111.25591278]
[-171.90713501 101.51536560]
[-182.28727722 90.66900635]
[-191.51684570 78.82814026]
[-199.50112915 66.11428070]
[-206.15818787 52.65787888]
[-211.41969299 38.59703064]
[-215.23168945 24.07602119]
[-217.55502319 9.24385738]
[-218.36589050 -5.74725723]
[-217.65592957 -20.74349022]
[-215.43246460 -35.59095383]
[-211.71827698 -50.13729095]
[-206.55151367 -64.23323059]
[-199.98516846 -77.73412323]
[-192.08663940 -90.50142670]
[-182.93696594 -102.40413666]
[-172.63003540 -113.32010651]
[-161.27163696 -123.13732147]
[-148.97830200 -131.75503540]
[-135.87619019 -139.08482361]
[-122.09975433 -145.05145264]
[-107.79035950 -149.59371948]
[-93.09484100 -152.66500854]
[-78.16400146 -154.23379517]
[-63.15105820 -154.28398132]
[-48.21006393 -152.81506348]
[-33.49434280 -149.84208679]
[-19.15489769 -145.39559937]
[-5.33887768 -139.52119446]
[7.81194353 -132.27917480]
[20.16261673 -123.74383545]
[31.58640289 -114.00278473]
[41.96607590 -103.15597534]
[51.19512558 -91.31470490]
[59.17884445 -78.60048676]
[65.83530426 -65.14379883]
[71.09619904 -51.08271408]
[74.90755463 -36.56153870]
[77.23023987 -21.72927094]
[78.04043579 -6.73812008]
[77.32982635 8.25808048]
[75.10569763 23.10544586]
[71.39088440 37.65161896]
[66.22348785 51.74732971]
[59.65655136 65.24793243]
[51.75745392 78.01489258]
[63.64983368 87.15663147]
[75.54221344 96.29836273]
[85.71054840 73.79611206]
[114.32137299 68.11095428]
[126.21375275 58.96922302]
[138.10612488 49.82748795]
[149.90277100 40.56253815]
[161.60240173 31.17537689]
[173.30201721 21.78821373]
[185.00164795 12.40105247]
[188.17277527 -3.32547021]
[202.51065063 -10.52302933]
[217.01647949 -3.67027283]
[220.56263733 11.97595024]
[210.42881775 24.41319656]
[194.38880920 24.10067558]
[182.68917847 33.48783875]
[170.98956299 42.87500000]
[159.28993225 52.26216125]
[156.01991272 58.94441986]
[147.24786377 61.71986771]
[135.35548401 70.86160278]
[123.46310425 80.00333405]
[124.93585205 87.35731506]
[139.14616394 92.16014099]
[127.88133240 102.06527710]
[129.35406494 109.41925812]
[143.84967041 113.27642059]
[158.34526062 117.13357544]
[168.24197388 105.51384735]
[182.20367432 99.34671021]
[197.45826721 99.85664368]
[210.97694397 106.94240570]
[220.07556152 119.19712067]
[222.94758606 134.18759155]
[219.02276611 148.93745422]
[209.08038330 160.51811218]
[195.09449768 166.63023376]
[179.84204102 166.06022644]
[166.35136414 158.92127991]
[157.30107117 146.63084412]
[154.48811340 131.62918091]
[139.99250793 127.77201843]
[125.49691010 123.91485596]
[111.60152435 129.33984375]
[98.19154358 128.08514404]
[88.02897644 121.64670563]
[88.02897644 136.64671326]
[88.02897644 151.64671326]
[88.02897644 166.64671326]
[88.02897644 181.64671326]
[88.02897644 196.64671326]
[88.02897644 211.64671326]
[88.02897644 226.64671326]
[88.02897644 241.64671326]
[88.02897644 256.64669800]
[102.56886292 260.70800781]
[115.47324371 268.54254150]
[125.78453064 279.56887817]
[132.73754883 292.96878052]
[135.81634521 307.74795532]
[134.79246521 322.80963135]
[129.74185181 337.03616333]
[121.03933716 349.37182617]
[109.33067322 358.90124512]
[95.48473358 364.91726685]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 86]
[22 85]
[23 84]
[88 107]
[89 106]
[90 105]
[91 103]
[92 102]
[93 101]
[94 100]
[111 128]
[112 127]
[113 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
