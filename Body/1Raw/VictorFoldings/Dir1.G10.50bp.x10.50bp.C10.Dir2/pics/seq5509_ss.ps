%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGGAGGCGGGGGGGGGGCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGAAUUxxxxxxxxxxGUUGUAGCCCACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCCCCCCCCCCCAUAGGAGGC\
) } def
/len { sequence length } bind def

/coor [
[5.58710051 255.99972534]
[-3.88869357 249.85609436]
[-12.96600533 243.13766479]
[-21.61001587 235.87020874]
[-29.78757286 228.08160400]
[-37.46730423 219.80171204]
[-44.61975861 211.06230164]
[-56.88212967 219.70141602]
[-63.70742035 233.97468567]
[-78.56807709 234.97967529]
[-90.83045197 243.61878967]
[-103.09281921 252.25790405]
[-115.07965088 261.27542114]
[-121.00135040 275.94662476]
[-135.77038574 277.87658691]
[-147.47001648 287.26376343]
[-159.16963196 296.65090942]
[-170.86926270 306.03808594]
[-182.56887817 315.42523193]
[-188.00726318 330.89636230]
[-204.17257690 333.65582275]
[-214.43534851 320.86489868]
[-208.23809814 305.68182373]
[-191.95603943 303.72561646]
[-180.25642395 294.33843994]
[-168.55679321 284.95129395]
[-156.85717773 275.56411743]
[-145.15754700 266.17697144]
[-140.07269287 252.17720032]
[-124.46681213 249.57580566]
[-123.73580170 246.06394958]
[-121.22836304 242.74516296]
[-117.06070709 240.46852112]
[-111.73193359 239.99552917]
[-99.46956635 231.35641479]
[-87.20719910 222.71730042]
[-81.25899506 209.06196594]
[-65.52124786 207.43905640]
[-53.25887680 198.79994202]
[-70.10176086 165.68943787]
[-79.88478088 129.85258484]
[-82.20191193 92.77672577]
[-76.95697021 56.00066376]
[-64.36765289 21.05074310]
[-77.61023712 14.00560760]
[-90.85282898 6.96047258]
[-104.09541321 -0.08466224]
[-120.45701599 1.02432132]
[-129.37234497 -12.73972702]
[-121.67005920 -27.21753502]
[-105.27362061 -27.51557350]
[-97.05027771 -13.32724762]
[-83.80769348 -6.28211308]
[-70.56510925 0.76302195]
[-57.32252121 7.80815697]
[-52.48836136 0.01494731]
[-47.26849365 -7.52535582]
[-41.67611694 -14.79368019]
[-35.72537994 -21.77164078]
[-29.43133354 -28.44158554]
[-22.80989838 -34.78664780]
[-15.87782192 -40.79077148]
[-8.65264034 -46.43877411]
[-1.15262735 -51.71636963]
[6.60324478 -56.61020660]
[14.59535885 -61.10791016]
[22.80349922 -65.19809723]
[31.20690346 -68.87042999]
[39.78431702 -72.11560822]
[48.51403809 -74.92543030]
[57.37399292 -77.29279327]
[66.34176636 -79.21170044]
[75.39468384 -80.67730713]
[84.50982666 -81.68589783]
[93.66416168 -82.23492432]
[102.83451843 -82.32299805]
[111.99770355 -81.94989777]
[121.13054657 -81.11656952]
[130.20993042 -79.82511139]
[139.21290588 -78.07879639]
[148.11669922 -75.88204956]
[156.89878845 -73.24040985]
[165.53694153 -70.16057587]
[174.00932312 -66.65032196]
[182.29450989 -62.71854019]
[190.37153625 -58.37517166]
[198.21998596 -53.63120270]
[205.81997681 -48.49863434]
[213.15229797 -42.99044418]
[220.19842529 -37.12057114]
[226.94050598 -30.90385628]
[233.36149597 -24.35602951]
[239.44515991 -17.49365234]
[245.17610168 -10.33408070]
[250.53984070 -2.89542508]
[255.52278137 4.80349779]
[260.11233521 12.74321556]
[264.29690552 20.90364265]
[268.06591797 29.26414108]
[271.40979004 37.80356216]
[274.32009888 46.50030136]
[276.78945923 55.33237076]
[278.81164551 64.27742004]
[293.62942505 61.94631577]
[308.44717407 59.61521149]
[323.26492310 57.28410721]
[338.08270264 54.95300293]
[350.49093628 44.23070526]
[365.88986206 49.87025070]
[368.43841553 66.07015228]
[355.51483154 76.16535187]
[340.41378784 69.77075958]
[325.59603882 72.10186768]
[310.77828979 74.43296814]
[295.96051025 76.76407623]
[281.14276123 79.09517670]
[282.08941650 90.34856415]
[282.33767700 101.63896942]
[281.88650513 112.92308807]
[280.73770142 124.15763855]
[278.89566040 135.29953003]
[276.36740112 146.30601501]
[273.16268921 157.13488770]
[269.29376221 167.74461365]
[264.77548218 178.09449768]
[259.62518311 188.14483643]
[253.86260986 197.85708618]
[247.50987244 207.19396973]
[240.59133911 216.11970520]
[233.13354492 224.60005188]
[225.16508484 232.60246277]
[216.71653748 240.09625244]
[207.82031250 247.05268860]
[198.51051331 253.44506836]
[188.82287598 259.24890137]
[178.79452515 264.44189453]
[168.46395874 269.00415039]
[157.87077332 272.91815186]
[147.05563354 276.16888428]
[136.05998230 278.74392700]
[124.92603302 280.63333130]
[113.69647217 281.82992554]
[102.41437531 282.32904053]
[91.12301636 282.12881470]
[79.86570740 281.23001099]
[68.68562317 279.63607788]
[57.62565613 277.35311890]
[46.72821808 274.38986206]
[36.03511810 270.75775146]
[25.58736229 266.47064209]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 39]
[8 38]
[10 36]
[11 35]
[12 34]
[13 30]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[44 55]
[45 54]
[46 53]
[47 52]
[103 116]
[104 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
