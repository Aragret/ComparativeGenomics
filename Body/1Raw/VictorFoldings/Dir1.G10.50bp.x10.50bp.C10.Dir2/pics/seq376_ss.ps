%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAAACCCCGGGGGGGGGGAAAAACAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUxxxxxxxxxxUUCGAAUUUGCAAUUCAAUAUGAAAAUCACCUCGGAGCUGGUAAAAAGAGCCCCCCCCCCGCCUAACCCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 393.04180908]
[71.19830322 387.02578735]
[59.48964310 377.49636841]
[50.78712082 365.16067505]
[45.73651886 350.93417358]
[44.71262741 335.87249756]
[47.79142761 321.09332275]
[54.74444962 307.69338989]
[65.05573273 296.66705322]
[77.96011353 288.83255005]
[92.50000000 284.77124023]
[92.50000000 269.77124023]
[92.50000000 254.77124023]
[92.50000000 239.77124023]
[92.50000000 224.77124023]
[92.50000000 209.77124023]
[92.50000000 194.77124023]
[92.50000000 179.77124023]
[92.50000000 164.77124023]
[92.50000000 149.77124023]
[86.74016571 148.55516052]
[81.16171265 146.67489624]
[75.84095001 144.15615845]
[70.85065460 141.03343201]
[66.25909424 137.34939575]
[62.12906647 133.15446472]
[58.51707458 128.50602722]
[55.47252274 123.46765137]
[53.03706360 118.10826111]
[38.39356232 121.35908508]
[26.67829132 132.83447266]
[10.95756054 128.16642761]
[7.40350962 112.15702820]
[19.67224121 101.27537537]
[35.14273453 106.71558380]
[49.78623581 103.46475983]
[52.90852356 82.22869110]
[64.59468079 64.22444916]
[82.71952057 52.72620392]
[103.98691559 49.82499313]
[107.38989258 35.21610260]
[110.79286957 20.60721016]
[114.19585419 5.99831724]
[117.59883118 -8.61057472]
[121.00180817 -23.21946716]
[107.63315582 -31.83113861]
[98.02843475 -44.47155380]
[93.32953644 -59.60766220]
[94.08477020 -75.41155243]
[100.18490601 -89.98121643]
[110.87858582 -101.56944275]
[124.86476898 -108.79334259]
[140.45103455 -110.79937744]
[143.54934692 -125.47590637]
[146.64767456 -140.15243530]
[149.74598694 -154.82894897]
[152.84431458 -169.50547791]
[155.78979492 -184.21343994]
[158.58212280 -198.95124817]
[153.54904175 -213.95053101]
[163.52033997 -225.01499939]
[166.31266785 -239.75280762]
[169.10498047 -254.49061584]
[159.05593872 -243.35433960]
[146.31849670 -235.43237305]
[131.88670349 -231.34294128]
[116.88684082 -231.40518188]
[102.48948669 -235.61425781]
[89.81824493 -243.64167786]
[79.86197662 -254.86099243]
[73.39767456 -268.39660645]
[70.92983246 -283.19219971]
[72.65103912 -298.09310913]
[78.42696381 -311.93649292]
[87.80684662 -323.64193726]
[100.05867767 -332.29598999]
[114.22631836 -337.22326660]
[129.20411682 -338.03921509]
[143.82316589 -334.68020630]
[156.94262695 -327.40832520]
[167.53860474 -316.79110718]
[174.78419495 -303.65713501]
[178.11395264 -289.03137207]
[177.26748657 -274.05261230]
[185.77857971 -286.40417480]
[194.28967285 -298.75573730]
[202.80076599 -311.10733032]
[211.31185913 -323.45889282]
[215.32028198 -339.93215942]
[232.25941467 -340.64062500]
[237.62942505 -324.55960083]
[223.66342163 -314.94778442]
[215.15232849 -302.59622192]
[206.64125061 -290.24465942]
[198.13015747 -277.89306641]
[189.61906433 -265.54150391]
[183.84278870 -251.69828796]
[181.05046082 -236.96047974]
[178.25814819 -222.22267151]
[183.49095154 -208.27754211]
[173.31993103 -196.15892029]
[170.52760315 -181.42111206]
[172.38458252 -174.21714783]
[167.52084351 -166.40716553]
[164.42251587 -151.73063660]
[161.32420349 -137.05410767]
[158.22587585 -122.37757874]
[155.12754822 -107.70105743]
[167.39074707 -100.56346130]
[176.85739136 -89.96515656]
[182.58815002 -76.93783569]
[184.00820923 -62.75515366]
[180.96487427 -48.80824661]
[173.74397278 -36.46924973]
[163.04298401 -26.95632744]
[149.90365601 -21.21339798]
[135.61070251 -19.81649017]
[132.20771790 -5.20759726]
[128.80474854 9.40129566]
[125.40176392 24.01018715]
[121.99878693 38.61907959]
[118.59580994 53.22797394]
[131.20971680 60.51100922]
[141.21006775 71.10091400]
[147.75941467 84.11087799]
[150.30932617 98.45141602]
[148.64625549 112.92163849]
[142.90945435 126.30978394]
[133.57936096 137.49470520]
[121.43727875 145.53976440]
[107.50000000 149.77124023]
[107.50000000 164.77124023]
[107.50000000 179.77124023]
[107.50000000 194.77124023]
[107.50000000 209.77124023]
[107.50000000 224.77124023]
[107.50000000 239.77124023]
[107.50000000 254.77124023]
[107.50000000 269.77124023]
[107.50000000 284.77124023]
[122.03988647 288.83255005]
[134.94427490 296.66705322]
[145.25555420 307.69338989]
[152.20857239 321.09332275]
[155.28736877 335.87249756]
[154.26348877 350.93417358]
[149.21287537 365.16067505]
[140.51036072 377.49636841]
[128.80169678 387.02578735]
[114.95575714 393.04180908]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 36]
[30 35]
[40 122]
[41 121]
[42 120]
[43 119]
[44 118]
[45 117]
[53 108]
[54 107]
[55 106]
[56 105]
[57 104]
[58 102]
[59 101]
[61 99]
[62 98]
[63 97]
[84 96]
[85 95]
[86 94]
[87 93]
[88 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
