%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCUACCUGGGGGGGGGGAUCUCCCCUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGAxxxxxxxxxxCUUAUACUAGUAUCCUUAAUCAUUUUUAUUGCCACAACUAACCUCCUCGGCCCCCCCCCCACUCCUGCCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 382.78692627]
[71.19830322 376.77090454]
[59.48964310 367.24148560]
[50.78712082 354.90582275]
[45.73651886 340.67929077]
[44.71262741 325.61761475]
[47.79142761 310.83847046]
[54.74444962 297.43853760]
[65.05573273 286.41220093]
[77.96011353 278.57769775]
[92.50000000 274.51638794]
[92.50000000 259.51638794]
[92.50000000 244.51637268]
[92.50000000 229.51637268]
[92.50000000 214.51637268]
[92.50000000 199.51637268]
[92.50000000 184.51637268]
[92.50000000 169.51637268]
[92.50000000 154.51637268]
[92.50000000 139.51637268]
[72.30807495 129.17106628]
[60.92698669 109.54430389]
[45.94727325 110.32414246]
[30.96755981 111.10398865]
[25.83493614 125.38446045]
[15.65337181 136.58172607]
[1.99741483 143.01045227]
[-13.03871918 143.71917725]
[-27.16229248 138.63099670]
[-38.23164749 128.55058289]
[-44.58095551 115.03705597]
[-59.56067276 115.81689453]
[-74.54038239 116.59674072]
[-89.52010345 117.37658691]
[-102.97464752 126.75246429]
[-117.70475006 119.54440308]
[-118.55733490 103.16743469]
[-104.65534210 94.46878052]
[-90.29994202 102.39687347]
[-75.32022858 101.61702728]
[-60.34051514 100.83718109]
[-45.36080170 100.05733490]
[-40.44904327 85.95755768]
[-30.48626518 74.78220367]
[-16.96739197 68.25495911]
[-1.93894851 67.39852142]
[12.31073666 72.37447357]
[23.59997177 82.45396423]
[30.18771362 96.12427521]
[45.16742706 95.34442902]
[60.14714432 94.56458282]
[63.73918152 82.59462738]
[70.83185577 72.30500031]
[80.74043274 64.68904877]
[92.50833893 60.48204422]
[104.99949646 60.09011459]
[117.00799561 63.55110550]
[125.77420807 51.37926865]
[134.54040527 39.20743179]
[143.30662537 27.03559494]
[152.07283020 14.86375809]
[160.83903503 2.69192076]
[149.67474365 -7.34828997]
[139.66145325 -18.53673553]
[130.91656494 -30.74223709]
[123.54262543 -43.82168961]
[117.62606049 -57.62174606]
[113.23625946 -71.98060608]
[110.42469025 -86.72991943]
[109.22430420 -101.69676208]
[109.64918518 -116.70565033]
[111.69435120 -131.58061218]
[115.33581543 -146.14724731]
[120.53089905 -160.23477173]
[127.21868134 -173.67802429]
[135.32075500 -186.31936646]
[144.74211121 -198.01062012]
[155.37231445 -208.61466980]
[167.08673096 -218.00721741]
[179.74798584 -226.07812500]
[193.20765686 -232.73278809]
[207.30793762 -237.89314270]
[221.88349915 -241.49873352]
[236.76345825 -243.50726318]
[251.77334595 -243.89517212]
[266.73718262 -242.65794373]
[281.47952271 -239.81004333]
[295.82754517 -235.38490295]
[309.61297607 -229.43437195]
[322.67422485 -222.02822876]
[334.85815430 -213.25331116]
[346.02191162 -203.21250916]
[356.03460693 -192.02352905]
[364.77883911 -179.81755066]
[372.15206909 -166.73770142]
[378.06790161 -152.93731689]
[382.45690918 -138.57823181]
[385.26770020 -123.82875824]
[386.46728516 -108.86185455]
[386.04159546 -93.85298920]
[383.99563599 -78.97813416]
[380.35336304 -64.41169739]
[375.15753174 -50.32444763]
[368.46902466 -36.88156509]
[360.36627197 -24.24065018]
[350.94427490 -12.54991817]
[340.31350708 -1.94643366]
[328.59860229 7.44548178]
[315.93688965 15.51571369]
[302.47686768 22.16964149]
[288.37631226 27.32925224]
[273.80056763 30.93405342]
[258.92050171 32.94177628]
[243.91058350 33.32888794]
[228.94680786 32.09084320]
[214.20462036 29.24215889]
[199.85684204 24.81623840]
[186.07173157 18.86496925]
[173.01086426 11.45812798]
[164.24465942 23.62996483]
[155.47845459 35.80179977]
[146.71224976 47.97363663]
[137.94604492 60.14547348]
[129.17984009 72.31731415]
[136.16441345 82.39520264]
[139.78808594 94.10917664]
[139.71409607 106.37061310]
[135.94931030 118.03999329]
[128.84359741 128.03285217]
[119.05733490 135.42050171]
[107.50000000 139.51637268]
[107.50000000 154.51637268]
[107.50000000 169.51637268]
[107.50000000 184.51637268]
[107.50000000 199.51637268]
[107.50000000 214.51637268]
[107.50000000 229.51637268]
[107.50000000 244.51637268]
[107.50000000 259.51638794]
[107.50000000 274.51638794]
[122.03988647 278.57769775]
[134.94427490 286.41220093]
[145.25555420 297.43853760]
[152.20857239 310.83847046]
[155.28736877 325.61761475]
[154.26348877 340.67929077]
[149.21287537 354.90582275]
[140.51036072 367.24148560]
[128.80169678 376.77090454]
[114.95575714 382.78692627]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 51]
[23 50]
[24 49]
[31 42]
[32 41]
[33 40]
[34 39]
[57 124]
[58 123]
[59 122]
[60 121]
[61 120]
[62 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
