%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUACUCAGGGGGGGGGGUUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCxxxxxxxxxxCUAUCCGCCAUCCCAUACAUUGGGACAGACCUAGUUCAAUGAAUCUGAGGCCCCCCCCCCAGGCUACUCA\
) } def
/len { sequence length } bind def

/coor [
[84.83387756 434.33935547]
[71.61368561 427.06689453]
[60.72687912 416.61987305]
[52.91574860 403.71063232]
[48.71286774 389.21929932]
[48.40479279 374.13397217]
[52.01253510 359.48315430]
[59.29010773 346.26574707]
[69.74131775 335.38299561]
[82.65357971 327.57684326]
[97.14651489 323.37954712]
[96.83445740 308.38281250]
[96.52239990 293.38604736]
[96.21034241 278.38931274]
[95.89829254 263.39254761]
[95.58623505 248.39579773]
[95.27417755 233.39903259]
[94.96212006 218.40228271]
[94.65006256 203.40553284]
[86.64966583 190.84197998]
[94.09819794 176.88383484]
[93.78614044 161.88706970]
[93.47408295 146.89031982]
[93.16202545 131.89356995]
[86.23823547 129.57315063]
[80.00415039 125.77059174]
[74.77221680 120.67647552]
[70.80464172 114.54608917]
[68.30027771 107.68669128]
[67.38463593 100.44204712]
[52.74113083 97.19122314]
[38.09762955 93.94039917]
[23.45413017 90.68956757]
[10.29507828 103.08523560]
[-7.50916290 105.13252258]
[-22.86782265 96.20435333]
[-29.77651787 80.00750732]
[-44.54257202 77.36864471]
[-59.30862808 74.72978210]
[-73.24059296 82.68464661]
[-88.09251404 76.61833954]
[-92.47126007 61.18441010]
[-83.01783752 48.22245407]
[-66.98410797 47.67576599]
[-56.66976547 59.96372604]
[-41.90370941 62.60258865]
[-27.13765335 65.24145508]
[-19.67772293 55.57242966]
[-8.73853874 49.98234558]
[3.61261630 49.59706879]
[15.01178837 54.55221939]
[23.25080299 63.95535660]
[26.70495415 76.04606628]
[41.34845734 79.29689789]
[55.99195862 82.54772186]
[70.63545990 85.79854584]
[87.75298309 69.76808929]
[111.20128632 69.36523438]
[119.45357513 56.83927536]
[127.70586395 44.31331253]
[135.95816040 31.78735161]
[132.10050964 6.22309875]
[157.97396851 -8.61508083]
[164.03698730 -22.33513451]
[170.09999084 -36.05518723]
[157.48258972 -39.51312256]
[146.98664856 -51.69712830]
[143.55546570 -70.81921387]
[145.42308044 -85.70249939]
[147.29069519 -100.58577728]
[133.79153442 -107.48130035]
[123.46714783 -118.58007812]
[117.56426239 -132.54188538]
[116.79567719 -147.68074036]
[121.25421143 -162.16856384]
[130.40145874 -174.25590515]
[143.13287354 -182.48312378]
[157.91104126 -185.85676575]
[172.95144653 -183.96943665]
[186.43788147 -177.04904175]
[196.74179077 -165.93125916]
[202.61894226 -151.95860291]
[203.35961914 -136.81834412]
[198.87440491 -122.33876038]
[189.70487976 -110.26831055]
[176.95834351 -102.06455994]
[162.17398071 -98.71816254]
[160.30636597 -83.83488464]
[158.43875122 -68.95160675]
[164.90777588 -65.15664673]
[184.31486511 -53.77178574]
[196.39485168 -62.66413498]
[208.47483826 -71.55648804]
[220.55482483 -80.44883728]
[232.63481140 -89.34118652]
[236.45739746 -104.92218018]
[251.08227539 -111.51707458]
[265.29049683 -104.06683350]
[268.18270874 -88.28663635]
[257.54028320 -76.28170776]
[241.52716064 -77.26119995]
[229.44717407 -68.36885071]
[217.36718750 -59.47649765]
[205.28720093 -50.58414841]
[193.20721436 -41.69179916]
[183.82005310 -29.99217415]
[177.75703430 -16.27212143]
[171.69403076 -2.55206752]
[180.20510864 9.79950523]
[195.18482971 9.01966000]
[210.68818665 2.15802574]
[221.57342529 15.15602398]
[212.09674072 29.21406555]
[195.96467590 23.99937439]
[180.98495483 24.77921867]
[172.57408142 36.59169388]
[160.37980652 41.80409622]
[148.48411560 40.03964233]
[140.23182678 52.56560135]
[131.97953796 65.09156799]
[123.72724915 77.61752319]
[130.73588562 89.07926178]
[132.53042603 102.39360809]
[128.80641174 115.30190277]
[120.19561005 125.61434937]
[108.15878296 131.58151245]
[108.47083282 146.57826233]
[108.78289032 161.57501221]
[109.09494781 176.57177734]
[117.11766815 190.20799255]
[109.64682007 203.09347534]
[109.95887756 218.09022522]
[110.27092743 233.08699036]
[110.58298492 248.08374023]
[110.89504242 263.08050537]
[111.20709991 278.07723999]
[111.51915741 293.07400513]
[111.83121490 308.07073975]
[112.14326477 323.06750488]
[126.79826355 326.65826416]
[140.02406311 333.92053223]
[150.91893005 344.35913086]
[158.74003601 357.26232910]
[162.95410156 371.75039673]
[163.27383423 386.83551025]
[159.67739868 401.48910522]
[152.41003418 414.71209717]
[141.96723938 425.60293579]
[129.06100464 433.41906738]
[114.57131195 437.62753296]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[21 129]
[22 128]
[23 127]
[24 126]
[30 56]
[31 55]
[32 54]
[33 53]
[37 47]
[38 46]
[39 45]
[58 121]
[59 120]
[60 119]
[61 118]
[63 108]
[64 107]
[65 106]
[68 89]
[69 88]
[70 87]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
