%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUAAACCCGGGGGGGGGGCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAxxxxxxxxxxAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUCCCCCCCCCCUACUAAACCC\
) } def
/len { sequence length } bind def

/coor [
[82.96578979 500.29315186]
[69.11985016 494.27709961]
[57.41118622 484.74768066]
[48.70866394 472.41201782]
[43.65806198 458.18551636]
[42.63417053 443.12380981]
[45.71296692 428.34466553]
[52.66598892 414.94473267]
[62.97727585 403.91839600]
[75.88165283 396.08389282]
[90.42153931 392.02258301]
[90.42153931 377.02258301]
[90.42153931 362.02258301]
[90.42153931 347.02258301]
[90.42153931 332.02258301]
[90.42153931 317.02258301]
[90.42153931 302.02258301]
[90.42153931 287.02258301]
[90.42153931 272.02258301]
[90.42153931 257.02258301]
[76.42152405 253.52592468]
[63.66303253 246.76412964]
[52.89538193 237.12916565]
[44.75219727 225.18190002]
[39.71411896 211.61943054]
[38.08046722 197.23442078]
[39.95143509 182.86880493]
[45.22196960 169.36444092]
[53.58765411 157.51385498]
[64.56228638 148.01365662]
[77.50614929 141.42366028]
[91.66326904 138.13386536]
[91.97532654 123.13711548]
[92.28738403 108.14035797]
[79.61713409 116.16934967]
[65.37181854 111.47136688]
[59.96361542 97.48024750]
[67.34548187 84.42237854]
[82.12187195 81.84199524]
[93.49216461 91.62454987]
[95.35977936 76.74127197]
[95.82781982 61.74857712]
[94.89219666 46.77778625]
[93.95656586 31.80699348]
[93.02093506 16.83620262]
[92.08531189 1.86541092]
[91.14968109 -13.10538101]
[83.18998718 -0.39147928]
[70.56678009 7.71127987]
[55.69311523 9.65397453]
[41.41223526 5.06523943]
[30.45407486 -5.17774343]
[24.91339302 -19.11692619]
[25.84934425 -34.08769989]
[33.08301544 -47.22824478]
[45.23161697 -56.02662659]
[59.97282410 -58.80094147]
[74.48870850 -55.02085114]
[86.00441742 -45.40896225]
[92.31829071 -31.80412483]
[95.11061859 -46.54193115]
[97.90294647 -61.27973557]
[100.69526672 -76.01753998]
[86.65311432 -81.40805817]
[73.79924774 -89.21945190]
[62.54686356 -99.20062256]
[53.25768661 -111.03070831]
[46.23032379 -124.32942963]
[41.69067001 -138.66928101]
[39.78466034 -153.58929443]
[40.57356644 -168.60986328]
[44.03202820 -183.24812317]
[50.04886627 -197.03353882]
[58.43066788 -209.52293396]
[68.90798950 -220.31484985]
[81.14403534 -229.06236267]
[94.74546051 -235.48428345]
[109.27503967 -239.37416077]
[124.26570129 -240.60696411]
[139.23556519 -239.14306641]
[153.70339966 -235.02949524]
[167.20414734 -228.39852905]
[179.30378723 -219.46328735]
[189.61337280 -208.51103210]
[197.80151367 -195.89381409]
[203.60498047 -182.01722717]
[206.83720398 -167.32734680]
[207.39430237 -152.29640198]
[205.25836182 -137.40756226]
[200.49803162 -123.13945007]
[193.26635742 -109.95072174]
[183.79579163 -98.26534271]
[172.39077759 -88.45894623]
[159.41792297 -80.84677124]
[145.29429626 -75.67352295]
[130.47386169 -73.10548401]
[115.43307495 -73.22521973]
[112.64074707 -58.48741150]
[109.84842682 -43.74960709]
[107.05609894 -29.01180077]
[106.12046814 -14.04100895]
[107.05609894 0.92978245]
[107.99172974 15.90057373]
[108.92735291 30.87136459]
[109.86298370 45.84215546]
[110.79861450 60.81295013]
[119.83901978 48.84336090]
[133.86363220 43.52262497]
[148.56848145 46.48361588]
[159.44082642 56.81763458]
[163.14410400 71.35330963]
[158.54179382 85.62982178]
[147.04631042 95.26589966]
[132.18547058 97.30434418]
[118.51986694 91.11958313]
[110.24305725 78.60888672]
[108.37545013 93.49216461]
[107.28413391 108.45241547]
[106.97207642 123.44916534]
[106.66002655 138.44592285]
[121.67800140 142.74990845]
[135.06828308 150.77592468]
[145.92778015 161.97598267]
[153.52581787 175.58822632]
[157.35325623 190.68881226]
[157.15667725 206.25454712]
[152.95512390 221.23225403]
[145.03842163 234.61003113]
[133.94715881 245.48558044]
[120.43584442 253.12712097]
[105.42153931 257.02258301]
[105.42153931 272.02258301]
[105.42153931 287.02258301]
[105.42153931 302.02258301]
[105.42153931 317.02258301]
[105.42153931 332.02258301]
[105.42153931 347.02258301]
[105.42153931 362.02258301]
[105.42153931 377.02258301]
[105.42153931 392.02258301]
[119.96143341 396.08389282]
[132.86581421 403.91839600]
[143.17709351 414.94473267]
[150.13011169 428.34466553]
[153.20890808 443.12380981]
[152.18502808 458.18551636]
[147.13442993 472.41201782]
[138.43190002 484.74768066]
[126.72323608 494.27709961]
[112.87729645 500.29315186]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[32 120]
[33 119]
[34 118]
[40 117]
[41 116]
[42 106]
[43 105]
[44 104]
[45 103]
[46 102]
[47 101]
[60 100]
[61 99]
[62 98]
[63 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
