%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUCAUCGCGGGGGGGGGGUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGAAxxxxxxxxxxUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGUAACUACUACCCCCCCCCCCUAAUCAACGC\
) } def
/len { sequence length } bind def

/coor [
[61.87595749 432.57116699]
[48.65576172 425.29870605]
[37.76895523 414.85168457]
[29.95782661 401.94244385]
[25.75494576 387.45114136]
[25.44687271 372.36578369]
[29.05461502 357.71496582]
[36.33218765 344.49758911]
[46.78339386 333.61480713]
[59.69565582 325.80865479]
[74.18859100 321.61138916]
[73.87653351 306.61462402]
[73.56448364 291.61785889]
[73.25242615 276.62112427]
[72.94036865 261.62435913]
[72.62831116 246.62760925]
[72.31625366 231.63085938]
[72.00419617 216.63409424]
[71.69214630 201.63734436]
[71.38008881 186.64059448]
[71.06803131 171.64384460]
[63.37464142 184.52062988]
[51.97628403 194.27139282]
[38.06338882 199.87776184]
[23.08901596 200.75422668]
[8.61707973 196.80921936]
[-3.84098172 188.45477295]
[-12.98405552 176.56343079]
[-17.85724258 162.37709045]
[-17.95159340 147.37739563]
[-13.25725174 133.13087463]
[-4.26449203 121.12545013]
[8.08748627 112.61494446]
[22.50865173 108.48820496]
[37.49286270 109.17621613]
[51.47518539 114.60712433]
[62.99530411 124.21372223]
[70.85006714 136.99272156]
[74.21932983 151.61247253]
[79.12088013 137.43591309]
[84.02243042 123.25935364]
[88.92398071 109.08280182]
[86.46238708 95.31936646]
[96.89945984 86.01564789]
[101.80101013 71.83908844]
[106.70256042 57.66253281]
[106.55489349 48.46307373]
[111.85635376 43.24386597]
[117.05177307 29.17234612]
[122.24718475 15.10082722]
[108.69673157 8.64324570]
[95.78964233 0.98019809]
[83.63287354 -7.82481575]
[72.32717133 -17.69883347]
[61.96620560 -28.56003380]
[52.63584137 -40.31841660]
[44.41339111 -52.87654495]
[37.36699677 -66.13035583]
[31.55503845 -79.97002411]
[27.02568436 -94.28086853]
[23.81646347 -108.94429779]
[21.95396805 -123.83880615]
[21.45363426 -138.84097290]
[22.31960678 -153.82647705]
[24.54471016 -168.67114258]
[28.11050606 -183.25195312]
[32.98744583 -197.44810486]
[39.13511658 -211.14195251]
[46.50257874 -224.22001648]
[55.02877808 -236.57392883]
[64.64306641 -248.10131836]
[75.26576996 -258.70666504]
[86.80886841 -268.30209351]
[99.17670441 -276.80807495]
[112.26679993 -284.15414429]
[125.97068024 -290.27941895]
[140.17478943 -295.13314819]
[154.76141357 -298.67507935]
[169.60971069 -300.87591553]
[184.59660339 -301.71737671]
[199.59793091 -301.19250488]
[214.48937988 -299.30566406]
[229.14753723 -296.07244873]
[243.45094299 -291.51971436]
[257.28109741 -285.68511963]
[270.52337646 -278.61706543]
[283.06802368 -270.37408447]
[294.81112671 -261.02450562]
[305.65539551 -250.64579773]
[315.51089478 -239.32395935]
[324.29602051 -227.15281677]
[331.93795776 -214.23321533]
[338.37338257 -200.67221069]
[343.54895020 -186.58219910]
[347.42178345 -172.07991028]
[349.95980835 -157.28552246]
[351.14196777 -142.32164001]
[350.95846558 -127.31226349]
[349.41085815 -112.38175201]
[346.51193237 -97.65383911]
[342.28573608 -83.25055695]
[336.76724243 -69.29126740]
[330.00225830 -55.89164352]
[322.04678345 -43.16271591]
[312.96673584 -31.20996666]
[302.83740234 -20.13244057]
[291.74267578 -10.02192974]
[279.77450562 -0.96221781]
[267.03207397 6.97162390]
[253.62098694 13.71385193]
[239.65234375 19.20859528]
[225.24189758 23.41032410]
[210.50907898 26.28421974]
[195.57595825 27.80646706]
[180.56628418 27.96445274]
[165.60444641 26.75686646]
[150.81439209 24.19371796]
[136.31871033 20.29624367]
[131.12329102 34.36776352]
[125.92787170 48.43928146]
[120.87911987 62.56408310]
[115.97756958 76.74064636]
[111.07601929 90.91719818]
[113.53761292 104.68063354]
[103.10054016 113.98435211]
[98.19898987 128.16090393]
[93.29743958 142.33746338]
[88.39588928 156.51402283]
[86.06478119 171.33178711]
[86.37683868 186.32853699]
[86.68889618 201.32528687]
[87.00095367 216.32203674]
[87.31301117 231.31880188]
[87.62506866 246.31555176]
[87.93711853 261.31231689]
[88.24917603 276.30905151]
[88.56123352 291.30581665]
[88.87329102 306.30255127]
[89.18534851 321.29931641]
[103.84033966 324.89007568]
[117.06614685 332.15234375]
[127.96101379 342.59094238]
[135.78211975 355.49414062]
[139.99618530 369.98220825]
[140.31590271 385.06732178]
[136.71948242 399.72091675]
[129.45211792 412.94390869]
[119.00931549 423.83474731]
[106.10308075 431.65087891]
[91.61339569 435.85934448]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[39 128]
[40 127]
[41 126]
[42 125]
[44 123]
[45 122]
[46 121]
[48 120]
[49 119]
[50 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
