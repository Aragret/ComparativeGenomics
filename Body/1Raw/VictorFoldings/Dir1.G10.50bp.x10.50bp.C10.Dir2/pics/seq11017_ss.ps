%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUCAAAAGGGGGGGGGGCCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAxxxxxxxxxxCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCCCCCCCCCCCUACUCCAAA\
) } def
/len { sequence length } bind def

/coor [
[45.67261887 471.21401978]
[32.45242310 463.94155884]
[21.56561852 453.49453735]
[13.75448799 440.58529663]
[9.55160618 426.09396362]
[9.24353409 411.00863647]
[12.85127544 396.35781860]
[20.12884903 383.14041138]
[30.58005524 372.25765991]
[43.49231720 364.45150757]
[57.98525620 360.25421143]
[57.67319870 345.25747681]
[57.36114120 330.26071167]
[57.04908371 315.26397705]
[56.73703003 300.26721191]
[56.42497253 285.27044678]
[56.11291504 270.27371216]
[55.80086136 255.27694702]
[55.48880386 240.28019714]
[55.17674637 225.28344727]
[47.38837051 238.10299683]
[35.74551392 247.56048584]
[21.60189056 252.55627441]
[6.60196352 252.50950623]
[-7.51023722 247.42562866]
[-19.09389877 237.89575195]
[-26.80219650 225.02787781]
[-29.73889542 210.31816101]
[-27.56254768 195.47688293]
[-20.52619362 182.22962952]
[-9.44794464 172.11663818]
[4.38413858 166.31375122]
[19.36181259 165.49566650]
[33.74363708 169.75749207]
[45.85744858 178.60371399]
[54.29478073 191.00578308]
[58.07487869 205.52461243]
[62.68044281 191.24916077]
[67.28601074 176.97369385]
[71.89157104 162.69824219]
[76.49713898 148.42277527]
[66.96063232 142.49176025]
[58.86243057 134.71095276]
[52.55507660 125.41906738]
[48.31314468 115.02061462]
[46.32130432 103.96826172]
[46.66625595 92.74316406]
[49.33299637 81.83397675]
[54.20542145 71.71561432]
[61.07143021 62.82855988]
[69.63211823 55.55968857]
[79.51480865 50.22544098]
[90.28929138 47.05803299]
[89.66531372 32.07101822]
[89.04133606 17.08400154]
[80.73666382 3.61763453]
[87.93783569 -9.42048073]
[87.31385803 -24.40749741]
[86.68988037 -39.39451218]
[78.38520813 -52.86088181]
[85.58637238 -65.89899445]
[82.18339539 -80.50788879]
[76.12038422 -94.22794342]
[62.56793976 -103.46175385]
[64.05809784 -119.79306030]
[79.05790710 -126.42160797]
[92.13685608 -116.52851868]
[89.84043884 -100.29095459]
[95.90345001 -86.57089996]
[97.96154022 -101.42903900]
[104.43172455 -114.96183777]
[114.70371246 -125.89282227]
[127.80857849 -133.19091797]
[142.51023865 -136.16775513]
[157.42192078 -134.54252625]
[171.13711548 -128.46852112]
[182.36213684 -118.51869202]
[190.03816223 -105.63153839]
[193.44116211 -91.02265930]
[192.25015259 -76.07001495]
[186.57748413 -62.18402100]
[176.95822144 -50.67447662]
[164.29968262 -42.62701035]
[149.79591370 -38.80070496]
[134.81497192 -39.55647278]
[120.76992035 -44.82302475]
[108.98556519 -54.10359955]
[100.57339478 -66.52297211]
[108.83342743 -54.12857819]
[101.67689514 -40.01848984]
[102.30087280 -25.03147507]
[102.92485046 -10.04445839]
[111.18488312 2.34993720]
[104.02835083 16.46002388]
[104.65232849 31.44704056]
[105.27630615 46.43405533]
[121.01406097 48.87509918]
[135.74684143 55.95557785]
[148.10520935 67.28544617]
[161.62940979 60.79727936]
[170.43585205 46.96331406]
[186.80569458 47.94316483]
[193.89904785 62.72884369]
[184.41888428 76.11011505]
[168.11756897 74.32147217]
[154.59338379 80.80963898]
[157.69169617 95.48616028]
[172.68440247 95.95420074]
[187.67709351 96.42224884]
[202.66978455 96.89028931]
[217.66249084 97.35832977]
[230.29254150 87.46583557]
[245.86758423 91.31257629]
[252.43978882 105.94766235]
[244.96751404 120.14430237]
[229.18286133 123.01206207]
[217.19444275 112.35102844]
[202.20175171 111.88298798]
[187.20906067 111.41493988]
[172.21635437 110.94689941]
[157.22366333 110.47885895]
[148.01264954 130.88348389]
[132.02095032 145.94213867]
[111.88750458 153.61053467]
[90.77259827 153.02833557]
[86.16703033 167.30380249]
[81.56147003 181.57925415]
[76.95590210 195.85472107]
[72.35034180 210.13018799]
[70.17350006 224.97138977]
[70.48555756 239.96813965]
[70.79761505 254.96488953]
[71.10967255 269.96163940]
[71.42173004 284.95840454]
[71.73377991 299.95516968]
[72.04583740 314.95190430]
[72.35789490 329.94866943]
[72.66995239 344.94540405]
[72.98200989 359.94216919]
[87.63700104 363.53292847]
[100.86280823 370.79519653]
[111.75767517 381.23379517]
[119.57877350 394.13699341]
[123.79284668 408.62506104]
[124.11256409 423.71017456]
[120.51614380 438.36376953]
[113.24877930 451.58676147]
[102.80597687 462.47760010]
[89.89974213 470.29373169]
[75.41005707 474.50219727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[37 129]
[38 128]
[39 127]
[40 126]
[41 125]
[53 96]
[54 95]
[55 94]
[57 92]
[58 91]
[59 90]
[61 88]
[62 69]
[63 68]
[99 106]
[100 105]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
