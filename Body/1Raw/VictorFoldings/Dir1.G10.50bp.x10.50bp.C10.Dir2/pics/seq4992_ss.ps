%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAAACUAGGGGGGGGGGGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCxxxxxxxxxxACCUCCAAAUAUCUCAUCAACAACCGACUAAUCACCACCCAACAAUGACUCCCCCCCCCCAAUCAAACUA\
) } def
/len { sequence length } bind def

/coor [
[69.94628143 387.28741455]
[55.07538223 384.77600098]
[41.29657364 378.64453125]
[29.47600174 369.27835083]
[20.35672188 357.26629639]
[14.51197529 343.36343384]
[12.30916977 328.44369507]
[13.88677597 313.44497681]
[19.14562416 299.31005859]
[27.75513649 286.92755127]
[39.17411423 277.07574463]
[52.68475342 270.37399292]
[67.43775940 267.24356079]
[68.06173706 252.25653076]
[68.68571472 237.26951599]
[69.30969238 222.28250122]
[69.93366241 207.29548645]
[70.55764008 192.30847168]
[71.18161774 177.32145691]
[71.80559540 162.33444214]
[72.42957306 147.34742737]
[73.05355072 132.36041260]
[73.67752838 117.37339020]
[68.62877655 103.24858856]
[58.64604568 92.05282593]
[48.66332245 80.85705566]
[36.22388077 72.47491455]
[22.09907722 67.42615509]
[7.97427464 62.37739944]
[-1.73228109 73.99670410]
[-14.80396938 81.57977295]
[-29.65343666 84.22808075]
[-44.48506165 81.64099121]
[-57.51207352 74.14977264]
[-67.17182159 62.67529297]
[-72.31320190 48.61487579]
[-72.33380890 33.67215729]
[-86.45861053 28.62339973]
[-100.58341217 23.57464218]
[-114.70821381 18.52588654]
[-128.83302307 13.47712994]
[-142.95782471 8.42837334]
[-157.08262634 3.37961721]
[-172.13998413 8.91637707]
[-185.78161621 0.47331762]
[-187.54284668 -15.47276783]
[-176.07260132 -26.68940735]
[-160.16987610 -24.57215500]
[-152.03387451 -10.74518585]
[-137.90907288 -5.69642925]
[-123.78426361 -0.64767295]
[-109.65946198 4.40108347]
[-95.53466034 9.44983959]
[-81.40985107 14.49859619]
[-67.28504944 19.54735184]
[-57.79706573 8.00337410]
[-44.90784073 0.38780001]
[-30.16320419 -2.36360192]
[-15.33920193 0.10021877]
[-2.22815800 7.50093460]
[7.57802010 18.96213341]
[12.88112450 33.11307526]
[13.02303123 48.25259781]
[27.14783478 53.30135345]
[41.27263641 58.35010910]
[31.82177162 46.70188522]
[25.37150192 33.15958023]
[22.28279114 18.48102951]
[22.72848511 3.48765326]
[26.68364143 -10.98151207]
[33.92692566 -24.11676216]
[44.05300522 -35.18304062]
[56.49521255 -43.56107712]
[70.55728149 -48.78202438]
[85.45228577 -50.55371857]
[100.34668732 -48.77701569]
[114.40699768 -43.55133820]
[126.84638977 -35.16912460]
[136.96875000 -24.09943962]
[144.20761108 -10.96175480]
[148.15791321 3.50873971]
[148.59855652 18.50226593]
[145.50491333 33.17977905]
[139.05009460 46.71991348]
[129.59530640 58.36495972]
[117.66966248 67.46324921]
[103.94051361 73.50564575]
[89.17616272 76.15400696]
[74.20281982 75.26012421]
[59.85908508 70.87432861]
[69.84181213 82.07009888]
[79.82453918 93.26586151]
[97.76047516 81.13177490]
[114.18993378 91.13459778]
[129.12423706 89.73229980]
[144.05854797 88.32999420]
[158.99285889 86.92768860]
[160.83511353 71.98044586]
[165.84794617 57.77883911]
[173.79689026 44.98710632]
[184.31015015 34.20354462]
[196.89602661 25.93251228]
[210.96583557 20.56086731]
[225.86151123 18.33984947]
[240.88635254 19.37333870]
[255.33763123 23.61299706]
[268.53942871 30.86052895]
[279.87426758 40.77695465]
[288.81201172 52.89846039]
[294.93460083 66.65811157]
[297.95568848 81.41233063]
[297.73397827 96.47104645]
[294.27981567 111.12992859]
[287.75479126 124.70336151]
[278.46408081 136.55648804]
[266.84219360 146.13491821]
[253.43276978 152.99064636]
[238.86294556 156.80302429]
[223.81417847 157.39372253]
[208.99035645 154.73513794]
[195.08477783 148.95161438]
[182.74786377 140.31362915]
[172.55662537 129.22523499]
[164.98771667 116.20502472]
[160.39515686 101.86199951]
[145.46084595 103.26430511]
[130.52655029 104.66660309]
[115.59223938 106.06890869]
[105.95478821 118.04344177]
[88.66454315 117.99736786]
[88.04056549 132.98439026]
[87.41658783 147.97140503]
[86.79261780 162.95841980]
[86.16864014 177.94543457]
[85.54466248 192.93244934]
[84.92068481 207.91946411]
[84.29670715 222.90647888]
[83.67272949 237.89349365]
[83.04875183 252.88050842]
[82.42477417 267.86752319]
[96.86650085 272.21347046]
[109.77329254 280.01510620]
[120.33382416 290.78201294]
[127.88424683 303.83734131]
[131.94993591 318.36047363]
[132.27529907 333.43844604]
[128.83992004 348.12341309]
[121.85972595 361.49234009]
[111.77350616 372.70477295]
[99.21527863 381.05593872]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 92]
[25 91]
[26 90]
[27 65]
[28 64]
[29 63]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
[94 128]
[95 127]
[96 126]
[97 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
