%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCAACCCGGGGGGGGGGAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACUCAUCxxxxxxxxxxACAGCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGCCCCCCCCCCACCUCAACCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 356.43228149]
[71.19830322 350.41625977]
[59.48964310 340.88684082]
[50.78712082 328.55114746]
[45.73651886 314.32464600]
[44.71262741 299.26296997]
[47.79142761 284.48379517]
[54.74444962 271.08386230]
[65.05573273 260.05752563]
[77.96011353 252.22302246]
[92.50000000 248.16171265]
[92.50000000 233.16171265]
[92.50000000 218.16171265]
[92.50000000 203.16171265]
[92.50000000 188.16171265]
[92.50000000 173.16171265]
[92.50000000 158.16171265]
[92.50000000 143.16171265]
[92.50000000 128.16171265]
[92.50000000 113.16171265]
[86.60167694 108.52923584]
[74.80503845 99.26428986]
[68.90672302 94.63181305]
[54.33401871 98.18657684]
[39.76131439 101.74134064]
[25.18861198 105.29610443]
[21.55202293 120.16330719]
[11.41415787 131.62988281]
[-2.89537716 137.06088257]
[-18.08835411 135.20831299]
[-30.67354012 126.49787903]
[-37.75894928 112.93116760]
[-37.71641159 97.62572479]
[-30.55569458 84.09860992]
[-17.92228317 75.45826721]
[-2.71924138 73.69018555]
[11.55988216 79.20064545]
[21.63385010 90.72339630]
[36.20655060 87.16863251]
[50.77925491 83.61387634]
[65.35195923 80.05911255]
[84.81811523 81.12492371]
[97.44701385 91.92432404]
[104.07550812 78.46836090]
[110.70401001 65.01239014]
[97.77479553 57.39349365]
[85.45109558 48.82969284]
[73.80183411 39.36888504]
[62.89215851 29.06397247]
[52.78308105 17.97259140]
[43.53113174 6.15676785]
[35.18806076 -6.31741858]
[27.80051804 -19.38020706]
[21.40982246 -32.95854187]
[16.05171204 -46.97649002]
[11.75615311 -61.35565567]
[8.54716778 -76.01562500]
[6.44270277 -90.87440491]
[5.45452690 -105.84890747]
[5.58816576 -120.85538483]
[6.84287310 -135.80992126]
[9.21163177 -150.62886047]
[12.68119335 -165.22935486]
[17.23215675 -179.52973938]
[22.83906937 -193.45004272]
[29.47057343 -206.91239929]
[37.08958435 -219.84155273]
[45.65349579 -232.16517639]
[55.11440659 -243.81434631]
[65.41941071 -254.72393799]
[76.51088715 -264.83291626]
[88.32678986 -274.08474731]
[100.80104828 -282.42773438]
[113.86390686 -289.81515503]
[127.44229889 -296.20571899]
[141.46029663 -301.56372070]
[155.83949280 -305.85916138]
[170.49949646 -309.06799316]
[185.35829163 -311.17233276]
[200.33280945 -312.16036987]
[215.33927917 -312.02661133]
[230.29379272 -310.77175903]
[245.11271667 -308.40289307]
[259.71319580 -304.93319702]
[274.01351929 -300.38211060]
[287.93377686 -294.77505493]
[301.39608765 -288.14343262]
[314.32516479 -280.52432251]
[326.64871216 -271.96029663]
[338.29782104 -262.49929810]
[349.20730591 -252.19418335]
[359.31619263 -241.10261536]
[368.56793213 -229.28663635]
[376.91076660 -216.81230164]
[384.29809570 -203.74937439]
[390.68853760 -190.17092896]
[396.04641724 -176.15289307]
[400.34170532 -161.77365112]
[403.55044556 -147.11363220]
[405.65463257 -132.25480652]
[406.64254761 -117.28028870]
[406.50866699 -102.27381134]
[405.25369263 -87.31930542]
[402.88467407 -72.50039673]
[399.41485596 -57.89997101]
[394.86361694 -43.59966660]
[389.25646973 -29.67946625]
[382.62472534 -16.21721458]
[375.00549316 -3.28820038]
[366.44137573 9.03527164]
[356.98025513 20.68428230]
[346.67504883 31.59368515]
[335.58340454 41.70247269]
[323.76733398 50.95410538]
[311.29290771 59.29684830]
[298.22994995 66.68404388]
[284.65142822 73.07437897]
[270.63333130 78.43212128]
[256.25405884 82.72730255]
[241.59400940 85.93589783]
[226.73516846 88.03997040]
[211.76063538 89.02774811]
[196.75416565 88.89371490]
[181.79966736 87.63861084]
[166.98078918 85.26946259]
[152.38038635 81.79951477]
[138.08012390 77.24816895]
[124.15997314 71.64089203]
[117.53147888 85.09685516]
[110.90297699 98.55281830]
[107.50000000 113.16171265]
[107.50000000 128.16171265]
[107.50000000 143.16171265]
[107.50000000 158.16171265]
[107.50000000 173.16171265]
[107.50000000 188.16171265]
[107.50000000 203.16171265]
[107.50000000 218.16171265]
[107.50000000 233.16171265]
[107.50000000 248.16171265]
[122.03988647 252.22302246]
[134.94427490 260.05752563]
[145.25555420 271.08386230]
[152.20857239 284.48379517]
[155.28736877 299.26296997]
[154.26348877 314.32464600]
[149.21287537 328.55114746]
[140.51036072 340.88684082]
[128.80169678 350.41625977]
[114.95575714 356.43228149]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 41]
[24 40]
[25 39]
[26 38]
[43 130]
[44 129]
[45 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
