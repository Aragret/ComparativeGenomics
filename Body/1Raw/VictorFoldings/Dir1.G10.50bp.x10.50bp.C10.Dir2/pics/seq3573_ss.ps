%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCCCUCCGGGGGGGGGGCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAxxxxxxxxxxAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACCCCCCCCCCCAACCCCCCUCC\
) } def
/len { sequence length } bind def

/coor [
[-30.97815704 318.04019165]
[-41.37619019 311.44641113]
[-51.44294739 304.35714722]
[-61.15485001 296.78903198]
[-70.48912811 288.75979614]
[-79.42391968 280.28826904]
[-87.93829346 271.39428711]
[-96.01228333 262.09872437]
[-103.62697601 252.42329407]
[-110.76453400 242.39071655]
[-123.43605042 250.41772461]
[-136.10757446 258.44470215]
[-148.77908325 266.47171021]
[-161.45060730 274.49871826]
[-174.12211609 282.52569580]
[-186.79362488 290.55270386]
[-199.46514893 298.57971191]
[-207.59260559 315.07138062]
[-225.11497498 315.17706299]
[-237.61900330 323.46255493]
[-250.12304688 331.74801636]
[-254.70974731 347.12142944]
[-269.64221191 352.98666382]
[-283.46551514 344.84445190]
[-285.57562256 328.94076538]
[-274.35379028 317.47558594]
[-258.40850830 319.24398804]
[-245.90447998 310.95849609]
[-233.40043640 302.67303467]
[-230.66912842 290.84924316]
[-220.26628113 283.85266113]
[-207.49214172 285.90817261]
[-194.82063293 277.88119507]
[-182.14910889 269.85418701]
[-169.47760010 261.82720947]
[-156.80607605 253.80020142]
[-144.13456726 245.77320862]
[-131.46304321 237.74620056]
[-118.79153442 229.71920776]
[-130.44781494 207.65969849]
[-139.88681030 184.56433105]
[-147.01768494 160.65531921]
[-151.77185059 136.16270447]
[-154.10356140 111.32212830]
[-153.99035645 86.37262726]
[-151.43334961 61.55424118]
[-146.45713806 37.10576630]
[-139.10960388 13.26243877]
[-129.46144104 -9.74633026]
[-117.60546875 -31.69915771]
[-103.65577698 -52.38481903]
[-87.74657440 -71.60428619]
[-98.51525116 -82.04629517]
[-109.28393555 -92.48830414]
[-120.05261230 -102.93031311]
[-135.63278198 -109.61573029]
[-133.52163696 -126.43772888]
[-116.77264404 -129.06588745]
[-109.61060333 -113.69898987]
[-98.84192657 -103.25698090]
[-88.07324219 -92.81497192]
[-77.30456543 -82.37296295]
[-68.27136993 -90.73948669]
[-58.84388733 -98.65907288]
[-49.04420090 -106.11315918]
[-38.89527130 -113.08428192]
[-28.42088509 -119.55610657]
[-17.64558411 -125.51346588]
[-6.59461641 -130.94241333]
[4.70612383 -135.83020020]
[16.23015594 -140.16540527]
[27.95047760 -143.93785095]
[39.83962631 -147.13870239]
[51.86973953 -149.76045227]
[64.01263428 -151.79698181]
[76.23985291 -153.24348450]
[88.52275085 -154.09660339]
[100.83253479 -154.35430908]
[113.14037323 -154.01602173]
[125.41741943 -153.08251953]
[137.63490295 -151.55599976]
[149.76420593 -149.44003296]
[161.77690125 -146.73957825]
[173.64483643 -143.46096802]
[185.34020996 -139.61187744]
[196.83561707 -135.20133972]
[208.10412598 -130.23966980]
[219.11932373 -124.73850250]
[229.85539246 -118.71073151]
[240.28718567 -112.17047882]
[250.39025879 -105.13307190]
[260.14093018 -97.61499023]
[269.51638794 -89.63386536]
[278.49462891 -81.20838928]
[287.05459595 -72.35830688]
[295.17626953 -63.10435104]
[302.84060669 -53.46821594]
[310.02966309 -43.47246933]
[316.72656250 -33.14054108]
[322.91564941 -22.49663925]
[328.58236694 -11.56570244]
[333.71350098 -0.37334585]
[338.29699707 11.05420494]
[342.32208252 22.69017410]
[345.77938843 34.50729370]
[348.66079712 46.47787857]
[350.95953369 58.57387161]
[352.67019653 70.76693726]
[353.78884888 83.02850342]
[354.31280518 95.32983398]
[354.24084473 107.64210510]
[353.57315063 119.93647766]
[352.31130981 132.18412781]
[350.45822144 144.35636902]
[348.01828003 156.42466736]
[344.99716187 168.36076355]
[341.40200806 180.13665771]
[337.24114990 191.72479248]
[332.52444458 203.09799194]
[327.26284790 214.22961426]
[321.46875000 225.09358215]
[315.15570068 235.66441345]
[308.33850098 245.91737366]
[301.03311157 255.82841492]
[293.25668335 265.37432861]
[285.02740479 274.53271484]
[276.36456299 283.28216553]
[267.28848267 291.60211182]
[257.82040405 299.47314453]
[247.98251343 306.87673950]
[237.79788208 313.79559326]
[227.29035950 320.21347046]
[216.48457336 326.11535645]
[205.40583801 331.48739624]
[194.08010864 336.31704712]
[182.53395081 340.59292603]
[170.79438782 344.30505371]
[158.88893127 347.44473267]
[146.84550476 350.00460815]
[134.69229126 351.97866821]
[122.45780182 353.36230469]
[110.17068481 354.15225220]
[97.85973358 354.34667969]
[85.55380249 353.94509888]
[73.28171539 352.94848633]
[61.07223892 351.35919189]
[48.95397568 349.18087769]
[36.95532227 346.41870117]
[25.10439682 343.07910156]
[13.42896557 339.16995239]
[1.95638764 334.70034790]
[-9.28645515 329.68081665]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 39]
[11 38]
[12 37]
[13 36]
[14 35]
[15 34]
[16 33]
[17 32]
[19 29]
[20 28]
[21 27]
[52 62]
[53 61]
[54 60]
[55 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
