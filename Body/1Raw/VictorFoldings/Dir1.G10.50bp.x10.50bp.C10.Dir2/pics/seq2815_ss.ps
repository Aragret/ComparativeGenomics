%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAGACCCGGGGGGGGGGUAUGGAGCUUUAAUUUAUUAAUGCAAACAGUACCUAACAAACCCACAGGUxxxxxxxxxxCUAAUCAACUGGCUUCAAUCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGCCCCCCCCCCGAGAAGCCCC\
) } def
/len { sequence length } bind def

/coor [
[140.76916504 435.30780029]
[126.27947998 431.09933472]
[113.37324524 423.28320312]
[102.93045044 412.39236450]
[95.66308594 399.16937256]
[92.06665802 384.51577759]
[92.38637543 369.43066406]
[96.60044861 354.94259644]
[104.42154694 342.03939819]
[115.31641388 331.60079956]
[128.54222107 324.33853149]
[143.19721985 320.74777222]
[143.50927734 305.75100708]
[143.82133484 290.75427246]
[144.13337708 275.75750732]
[144.44543457 260.76077271]
[144.75749207 245.76400757]
[145.06954956 230.76725769]
[145.38160706 215.77050781]
[145.69366455 200.77374268]
[142.32690430 191.25657654]
[143.12974548 181.81452942]
[147.46202087 174.08811951]
[138.44448853 162.10128784]
[129.42695618 150.11445618]
[120.40942383 138.12762451]
[111.39189148 126.14079285]
[102.37436676 114.15396118]
[88.98808289 107.38584900]
[73.98889160 107.22981262]
[58.98970413 107.07377625]
[43.20166016 116.49277496]
[28.43944359 107.05471802]
[13.44025421 107.21075439]
[-1.55893409 107.36679077]
[-15.39186001 116.17486572]
[-29.80936623 108.36029816]
[-29.97995758 91.96203613]
[-15.72814369 83.84921265]
[-1.71497071 92.36760712]
[13.28421783 92.21157074]
[28.28340530 92.05553436]
[37.00567627 83.61578369]
[49.54253387 83.40093231]
[59.14574051 92.07458496]
[74.14492798 92.23062134]
[89.14411926 92.38665771]
[98.40906525 80.59001923]
[94.70290375 66.05508423]
[90.99674225 51.52014923]
[87.29058075 36.98521042]
[81.08517456 23.32896996]
[72.57408142 10.97739792]
[64.06299591 -1.37417424]
[55.55190277 -13.72574711]
[40.36428833 -11.82972336]
[26.03927612 -17.21977043]
[15.86865044 -28.65729523]
[12.18954754 -43.51403809]
[15.84739685 -58.37602615]
[26.00165367 -69.82808685]
[40.31893921 -75.23861694]
[55.50925446 -73.36431885]
[68.08197021 -64.63589478]
[75.14796448 -51.05906296]
[75.08353424 -35.75369263]
[67.90348053 -22.23683739]
[76.41456604 -9.88526440]
[84.92565918 2.46630812]
[93.43674469 14.81788063]
[92.77702332 -0.16760431]
[96.93096924 -14.58095455]
[105.46476746 -26.91684914]
[117.48715210 -35.88693237]
[131.74249268 -40.55437851]
[146.74198914 -40.43172073]
[160.91911316 -35.53176498]
[172.79318237 -26.36626434]
[181.12409973 -13.89245701]
[185.04177856 0.58689988]
[184.13705444 15.55959129]
[178.50444031 29.46187782]
[168.73217773 40.84181595]
[155.84089661 48.51088715]
[141.17692566 51.66814041]
[126.27178955 49.98383331]
[112.68215942 43.63387680]
[101.82551575 33.27904892]
[105.53167725 47.81398773]
[109.23783875 62.34892273]
[112.94400024 76.88385773]
[114.36119843 105.13643646]
[123.37873077 117.12326813]
[132.39625549 129.11009216]
[141.41378784 141.09693909]
[150.43132019 153.08377075]
[159.44885254 165.07060242]
[153.09140015 151.48446655]
[152.60165405 136.49246216]
[158.05885315 122.52038574]
[168.57997131 111.82898712]
[182.46266174 106.14820862]
[197.46058655 106.39723206]
[211.14701843 112.53576660]
[221.30740356 123.57055664]
[226.29774475 137.71611023]
[225.31054688 152.68357849]
[218.50556946 166.05116272]
[206.98388672 175.65589905]
[192.60978699 179.94367981]
[177.70660400 178.21990967]
[191.93338013 182.97372437]
[206.16015625 187.72753906]
[220.38693237 192.48135376]
[234.61372375 197.23516846]
[248.84049988 201.98898315]
[260.79962158 192.24307251]
[276.13186646 190.53257751]
[289.94476318 197.40333557]
[297.83068848 210.66290283]
[297.27322388 226.08018494]
[288.45031738 238.73561096]
[274.17727661 244.59085083]
[259.00860596 241.77754211]
[247.78454590 231.19338989]
[244.08668518 216.21575928]
[229.85990906 211.46194458]
[215.63311768 206.70812988]
[201.40634155 201.95431519]
[187.17956543 197.20050049]
[172.95278931 192.44668579]
[160.69041443 201.08580017]
[160.37835693 216.08255005]
[160.06629944 231.07931519]
[159.75425720 246.07606506]
[159.44219971 261.07281494]
[159.13014221 276.06958008]
[158.81808472 291.06631470]
[158.50602722 306.06307983]
[158.19396973 321.05984497]
[172.68690491 325.25711060]
[185.59916687 333.06326294]
[196.05036926 343.94604492]
[203.32794189 357.16342163]
[206.93568420 371.81423950]
[206.62760925 386.89959717]
[202.42472839 401.39089966]
[194.61360168 414.30014038]
[183.72680664 424.74716187]
[170.50660706 432.01962280]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[23 97]
[24 96]
[25 95]
[26 94]
[27 93]
[28 92]
[29 47]
[30 46]
[31 45]
[33 42]
[34 41]
[35 40]
[48 91]
[49 90]
[50 89]
[51 88]
[52 70]
[53 69]
[54 68]
[55 67]
[111 131]
[112 130]
[113 129]
[114 128]
[115 127]
[116 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
