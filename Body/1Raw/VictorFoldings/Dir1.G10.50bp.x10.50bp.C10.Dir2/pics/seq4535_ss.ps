%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCUAGGACUAGGGGGGGGGGUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCxxxxxxxxxxUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCAUCUCCCCCCCCCCCACUUCUAGGAAUA\
) } def
/len { sequence length } bind def

/coor [
[83.13509369 474.39941406]
[68.86332703 469.58996582]
[55.95934296 461.82458496]
[45.02668762 451.46643066]
[36.57670212 439.00003052]
[31.00460625 425.00839233]
[28.57101631 410.14596558]
[29.38975716 395.10787964]
[33.42253494 380.59750366]
[40.48072815 367.29351807]
[50.23421097 355.81817627]
[62.22679901 346.70819092]
[75.89757538 340.38964844]
[90.60713196 337.15808105]
[90.60713196 322.15808105]
[90.60713196 307.15808105]
[90.60713196 292.15808105]
[90.60713196 277.15808105]
[90.60713196 262.15808105]
[90.60713196 247.15809631]
[90.60713196 232.15809631]
[90.60713196 217.15809631]
[90.60713196 202.15809631]
[87.44452667 195.43159485]
[90.76020813 186.85870361]
[91.06034088 171.86170959]
[91.36047363 156.86471558]
[91.66060638 141.86772156]
[80.95214081 140.71826172]
[70.36583710 136.75872803]
[60.65077591 129.99766541]
[52.55426407 120.64461517]
[37.68096161 122.59011078]
[26.80330086 134.38230896]
[10.81266785 133.08645630]
[1.97571003 119.69662476]
[7.07138443 104.48433685]
[22.19072533 99.11916351]
[35.73546982 107.71681213]
[50.60876846 105.77131653]
[52.02592087 98.40642548]
[40.68667984 88.58696747]
[54.86022568 83.67662811]
[56.27737427 76.31173706]
[43.18810272 68.98569489]
[30.09882927 61.65964508]
[17.00955772 54.33360291]
[3.92028403 47.00755692]
[-9.16898918 39.68151093]
[-24.93712616 42.63877869]
[-36.98582840 32.04593658]
[-36.07236862 16.02890968]
[-22.89746857 6.87458992]
[-7.56778717 11.60538673]
[-1.84294403 26.59223938]
[11.24632931 33.91828537]
[24.33560181 41.24432755]
[37.42487335 48.57037354]
[50.51414871 55.89641953]
[63.60342026 63.22246170]
[82.12091827 56.29958344]
[100.14900208 57.31008148]
[102.83579254 42.55267334]
[93.00812531 53.88479614]
[80.79206848 62.58927155]
[66.87220001 68.17829895]
[52.02859116 70.33867645]
[37.09307098 68.94933319]
[22.90262794 64.08813477]
[10.25249004 56.02748489]
[-0.14843045 45.21911621]
[-7.71726847 32.26872253]
[-12.02986717 17.90204239]
[-12.84454823 2.92418313]
[-10.11565876 -11.82550049]
[-3.99612451 -25.52043724]
[5.17111731 -37.39316559]
[16.87233543 -46.77833939]
[30.45179558 -53.15001678]
[45.14850616 -56.15112686]
[60.13887024 -55.61349106]
[74.58282471 -51.56723785]
[87.67093658 -44.23911667]
[98.66974640 -34.03979492]
[106.96288300 -21.54084206]
[112.08560944 -7.44269562]
[113.75083923 7.46458483]
[111.86572266 22.34371376]
[121.06644440 10.49690914]
[130.26716614 -1.34989512]
[139.46788025 -13.19669914]
[148.66859436 -25.04350281]
[148.10212708 -41.07655334]
[160.37733459 -51.40605545]
[176.07775879 -48.10810089]
[183.15934753 -33.71259689]
[176.18974304 -19.26254463]
[160.51541138 -15.84278393]
[151.31468201 -3.99598002]
[142.11396790 7.85082388]
[132.91325378 19.69762802]
[123.71252441 31.54443169]
[117.59320068 45.23946381]
[114.90641022 59.99687195]
[131.80108643 71.51943970]
[141.39833069 89.57746887]
[156.36155701 88.52779388]
[171.32478333 87.47811890]
[186.28802490 86.42844391]
[201.25125122 85.37876892]
[207.33979797 71.33640289]
[219.26403809 61.74102402]
[234.28384399 58.79758835]
[248.94778442 63.18246841]
[259.88619995 73.88806152]
[264.58554077 88.45428467]
[261.96588135 103.53394318]
[252.62922668 115.66182709]
[238.72108459 122.05104828]
[223.43743896 121.23340607]
[210.29034424 113.39678955]
[202.30091858 100.34199524]
[187.33769226 101.39167023]
[172.37446594 102.44134521]
[157.41123962 103.49102020]
[142.44801331 104.54069519]
[138.74182129 117.93104553]
[130.93203735 129.42210388]
[119.84587860 137.79672241]
[106.65760803 142.16784668]
[106.35747528 157.16484070]
[106.05734253 172.16184998]
[105.75720978 187.15884399]
[105.60713196 202.15809631]
[105.60713196 217.15809631]
[105.60713196 232.15809631]
[105.60713196 247.15809631]
[105.60713196 262.15808105]
[105.60713196 277.15808105]
[105.60713196 292.15808105]
[105.60713196 307.15808105]
[105.60713196 322.15808105]
[105.60713196 337.15808105]
[120.31668854 340.38964844]
[133.98747253 346.70819092]
[145.98005676 355.81817627]
[155.73353577 367.29351807]
[162.79173279 380.59750366]
[166.82450867 395.10787964]
[167.64324951 410.14596558]
[165.20965576 425.00839233]
[159.63757324 439.00003052]
[151.18757629 451.46643066]
[140.25492859 461.82458496]
[127.35094452 469.58996582]
[113.07917023 474.39941406]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[25 133]
[26 132]
[27 131]
[28 130]
[32 40]
[33 39]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
[62 104]
[63 103]
[88 102]
[89 101]
[90 100]
[91 99]
[92 98]
[106 126]
[107 125]
[108 124]
[109 123]
[110 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
