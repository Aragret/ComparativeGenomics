%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACUCACCGGGGGGGGGGCUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUxxxxxxxxxxCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGGCCCCCCCCCCCCACCACACACC\
) } def
/len { sequence length } bind def

/coor [
[81.20610046 407.37167358]
[68.64788055 399.02050781]
[58.56165695 387.80807495]
[51.58146286 374.43917847]
[48.14608002 359.75418091]
[48.47145462 344.67620850]
[52.53713989 330.15310669]
[60.08755875 317.09774780]
[70.64808655 306.33084106]
[83.55488586 298.52923584]
[97.99661255 294.18325806]
[97.37263489 279.19625854]
[96.74865723 264.20922852]
[96.12467957 249.22222900]
[95.50070190 234.23519897]
[94.87672424 219.24818420]
[94.25274658 204.26116943]
[93.62876892 189.27415466]
[93.00479126 174.28713989]
[92.38081360 159.30012512]
[91.75683594 144.31311035]
[91.13285828 129.32609558]
[78.27445984 121.60200500]
[64.75026703 128.09017944]
[58.09402847 142.68722534]
[42.49711990 146.44435120]
[29.92415619 136.47940063]
[30.02004242 120.43663788]
[42.71121979 110.62268829]
[58.26210403 114.56598663]
[71.78629303 108.07781982]
[72.28367615 98.29994202]
[75.89185333 89.76825714]
[81.85041046 83.37844849]
[89.17681122 79.66972351]
[96.81330872 78.78514099]
[99.91162872 64.10861969]
[95.19168091 49.00786591]
[105.39099884 38.15323639]
[108.48932648 23.47670937]
[111.58764648 8.80018425]
[114.68596649 -5.87634134]
[117.78428650 -20.55286598]
[104.22576904 -27.12950516]
[92.64234924 -36.75429916]
[83.70458221 -48.86444092]
[77.92851257 -62.75340271]
[75.64588928 -77.61216736]
[76.98509979 -92.57637024]
[81.86397552 -106.77654266]
[89.99481201 -119.38865662]
[100.90132141 -129.68194580]
[113.94654083 -137.06124878]
[128.37004089 -141.10136414]
[143.33224487 -141.57165527]
[146.43055725 -156.24818420]
[149.52888489 -170.92471313]
[152.62719727 -185.60122681]
[155.72552490 -200.27775574]
[143.32560730 -211.16906738]
[138.12193298 -226.73240662]
[141.43928528 -242.70816040]
[152.28381348 -254.77375793]
[167.63812256 -259.71307373]
[170.43045044 -274.45086670]
[173.22277832 -289.18865967]
[168.18969727 -304.18795776]
[178.16099548 -315.25241089]
[180.95330811 -329.99023438]
[183.74563599 -344.72802734]
[170.37577820 -351.78057861]
[159.67984009 -362.46179199]
[152.60891724 -375.82192993]
[149.79173279 -390.67300415]
[151.47880554 -405.69451904]
[157.52011108 -419.55068970]
[167.37846375 -431.00949097]
[180.17726135 -439.05203247]
[194.77845764 -442.96310425]
[209.88371277 -442.39498901]
[224.14987183 -437.39819336]
[236.30841064 -428.41702271]
[245.27819824 -416.25009155]
[250.26164246 -401.97924805]
[250.81561279 -386.87347412]
[246.89086914 -372.27597046]
[238.83638000 -359.48468018]
[227.36834717 -349.63705444]
[213.50651550 -343.60873413]
[198.48344421 -341.93569946]
[195.69111633 -327.19790649]
[192.89880371 -312.46011353]
[198.13160706 -298.51495361]
[187.96058655 -286.39633179]
[185.16825867 -271.65853882]
[182.37593079 -256.92074585]
[193.31407166 -248.68565369]
[199.65510559 -236.47621155]
[200.10523987 -222.65937805]
[194.51904297 -209.94169617]
[183.93913269 -200.83915710]
[170.40205383 -197.17944336]
[167.30372620 -182.50291443]
[164.20541382 -167.82638550]
[161.10708618 -153.14985657]
[158.00875854 -138.47332764]
[171.50415039 -131.99543762]
[183.06387329 -122.47006989]
[192.01324463 -110.44756317]
[197.82853699 -96.62416840]
[200.16773987 -81.80175018]
[198.89057922 -66.84123230]
[194.06697083 -52.61261368]
[185.97320557 -39.94437790]
[175.07606506 -29.57525253]
[162.00602722 -22.11112213]
[147.52067566 -17.98963547]
[132.46081543 -17.45454597]
[129.36248779 -2.77801943]
[126.26416779 11.89850616]
[123.16584778 26.57503128]
[120.06752777 41.25155640]
[125.00909424 55.30254364]
[114.58815765 67.20693970]
[111.48983765 81.88346100]
[125.00071716 104.48645020]
[106.11988068 128.70211792]
[106.74385834 143.68913269]
[107.36783600 158.67614746]
[107.99180603 173.66316223]
[108.61578369 188.65017700]
[109.23976135 203.63719177]
[109.86373901 218.62420654]
[110.48771667 233.61122131]
[111.11169434 248.59825134]
[111.73567200 263.58526611]
[112.35964966 278.57226562]
[112.98362732 293.55929565]
[127.73663330 296.68972778]
[141.24726868 303.39147949]
[152.66624451 313.24328613]
[161.27575684 325.62582397]
[166.53460693 339.76071167]
[168.11221313 354.75942993]
[165.90940857 369.67916870]
[160.06466675 383.58203125]
[150.94538879 395.59411621]
[139.12481689 404.96026611]
[125.34600067 411.09176636]
[110.47509766 413.60314941]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[23 31]
[24 30]
[36 125]
[37 124]
[39 122]
[40 121]
[41 120]
[42 119]
[43 118]
[55 106]
[56 105]
[57 104]
[58 103]
[59 102]
[64 96]
[65 95]
[66 94]
[68 92]
[69 91]
[70 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
