%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACACUAUACGGGGGGGGGGCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACAGCUCUAAGCCUCCUxxxxxxxxxxAUCAAAGACGCCCUCGGCUUACUUCUCUUCCUUCUCUCCUUAAUGACAUUCCCCCCCCCCAACACUAUUC\
) } def
/len { sequence length } bind def

/coor [
[85.27367401 407.95480347]
[71.42773438 401.93878174]
[59.71907425 392.40936279]
[51.01655197 380.07369995]
[45.96595001 365.84716797]
[44.94205856 350.78549194]
[48.02085876 336.00634766]
[54.97388077 322.60641479]
[65.28516388 311.58007812]
[78.18954468 303.74557495]
[92.72943115 299.68426514]
[92.72943115 284.68426514]
[92.72943115 269.68426514]
[92.72943115 254.68424988]
[92.72943115 239.68424988]
[92.72943115 224.68424988]
[92.72943115 209.68424988]
[92.72943115 194.68424988]
[92.72943115 179.68424988]
[92.72943115 164.68424988]
[84.38087463 155.87466431]
[84.29644775 143.33624268]
[93.06952667 133.82379150]
[93.38158417 118.82703400]
[86.14420319 131.96554565]
[71.56262970 135.48374939]
[59.13026810 127.09111023]
[56.94126511 112.25169373]
[66.42077637 100.62677002]
[81.39671326 99.78464508]
[67.74047089 93.57923126]
[54.08422852 87.37382507]
[42.60023499 95.06259155]
[28.92391968 96.04821777]
[16.65180016 90.17918396]
[8.95789051 79.09246826]
[7.77295208 65.75860596]
[-5.75123787 59.27043915]
[-19.27542877 52.78227615]
[-32.79961777 46.29410934]
[-46.32380676 39.80594635]
[-59.84799957 33.31777954]
[-72.29557800 36.85494995]
[-83.44700623 31.12217903]
[-87.54191589 19.69681168]
[-100.92819977 12.92869663]
[-116.55775452 16.54761887]
[-129.04202271 6.47177124]
[-128.80413818 -9.56951809]
[-116.02658844 -19.27074432]
[-100.51121521 -15.18995762]
[-94.16008759 -0.45758784]
[-80.77380371 6.31052685]
[-63.36046982 4.36740637]
[-53.35983276 19.79359055]
[-39.83564377 26.28175545]
[-26.31145287 32.76992035]
[-12.78726292 39.25808716]
[0.73692709 45.74625015]
[14.26111698 52.23441696]
[28.41532516 43.97828674]
[44.86883926 45.78044510]
[57.14379501 57.12976456]
[60.28963470 73.71758270]
[73.94587708 79.92299652]
[87.60211945 86.12840271]
[74.23678589 79.31899261]
[64.11403656 68.24967957]
[58.52331924 54.33048630]
[58.17680740 39.33448792]
[63.11863708 25.17191887]
[72.71929932 13.64685154]
[85.75584412 6.22737932]
[100.56762695 3.85861778]
[115.26789093 6.84230709]
[127.98405457 14.79837513]
[137.09631348 26.71335602]
[141.44390869 41.06948090]
[140.47305298 56.03802872]
[134.30738831 69.71225739]
[123.73232269 80.35031128]
[110.09724426 86.59648132]
[123.99980164 80.96453094]
[137.90235901 75.33257294]
[150.07420349 66.56636047]
[159.82185364 55.16534424]
[169.56950378 43.76432037]
[172.65657043 28.24721718]
[186.80818176 23.60165977]
[196.55583191 12.20063782]
[199.01913452 -4.01245070]
[214.38819885 -9.73291969]
[226.85266113 0.92395943]
[223.59016418 16.99530220]
[207.95686340 21.94828987]
[198.20921326 33.34931183]
[195.81935120 48.05093765]
[180.97052002 53.51197433]
[171.22286987 64.91299438]
[161.47521973 76.31401825]
[175.72053528 71.61605835]
[190.68173218 70.53776550]
[205.45352173 73.14438629]
[219.14205933 79.27819061]
[230.91911316 88.56803894]
[240.07203674 100.45181274]
[246.04699707 114.21043396]
[248.48248291 129.01139832]
[247.23110962 143.95910645]
[242.36860657 158.14909363]
[234.18917847 170.72276306]
[223.18777466 180.91928101]
[210.03005981 188.12167358]
[195.51219177 191.89413452]
[180.51261902 192.00839233]
[165.93896484 188.45755005]
[152.67304993 181.45643616]
[141.51757812 171.42871094]
[133.14755249 158.98110962]
[128.06942749 144.86683655]
[126.59047699 129.93992615]
[128.80020142 115.10358429]
[134.56486511 101.25553131]
[143.53431702 89.23513031]
[129.63175964 94.86708069]
[115.72920227 100.49903870]
[115.16802979 110.26476288]
[108.37834167 119.13909149]
[108.06628418 134.13584900]
[117.32054138 150.02101135]
[107.72943115 164.68424988]
[107.72943115 179.68424988]
[107.72943115 194.68424988]
[107.72943115 209.68424988]
[107.72943115 224.68424988]
[107.72943115 239.68424988]
[107.72943115 254.68424988]
[107.72943115 269.68426514]
[107.72943115 284.68426514]
[107.72943115 299.68426514]
[122.26931763 303.74557495]
[135.17370605 311.58007812]
[145.48498535 322.60641479]
[152.43800354 336.00634766]
[155.51679993 350.78549194]
[154.49291992 365.84716797]
[149.44230652 380.07369995]
[140.73979187 392.40936279]
[129.03112793 401.93878174]
[115.18518829 407.95480347]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 129]
[24 128]
[30 66]
[31 65]
[32 64]
[37 60]
[38 59]
[39 58]
[40 57]
[41 56]
[42 55]
[45 53]
[46 52]
[82 126]
[83 125]
[84 124]
[85 100]
[86 99]
[87 98]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
