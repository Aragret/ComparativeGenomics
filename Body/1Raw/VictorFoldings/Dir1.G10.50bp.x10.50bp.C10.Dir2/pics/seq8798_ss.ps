%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACCCACCAGGGGGGGGGGAUCACAUGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAACAGGGGxxxxxxxxxxCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACCCCCCCCCCCUCACCCACCA\
) } def
/len { sequence length } bind def

/coor [
[83.63649750 376.79574585]
[70.41629791 369.52325439]
[59.52949524 359.07626343]
[51.71836472 346.16702271]
[47.51548386 331.67568970]
[47.20741272 316.59036255]
[50.81515503 301.93954468]
[58.09272766 288.72213745]
[68.54393768 277.83938599]
[81.45619965 270.03323364]
[95.94913483 265.83593750]
[95.63707733 250.83918762]
[95.32501984 235.84243774]
[95.01296234 220.84568787]
[94.70090485 205.84892273]
[94.38885498 190.85217285]
[94.07679749 175.85542297]
[93.76473999 160.85867310]
[93.45268250 145.86190796]
[93.14062500 130.86515808]
[85.84730530 128.27384949]
[79.40208435 123.98822784]
[74.19119263 118.26512146]
[70.52688599 111.44747925]
[68.62875366 103.94384766]
[53.72684860 102.23115540]
[38.82494736 100.51846313]
[23.92304420 98.80577850]
[18.67553520 112.93825531]
[10.19780445 125.40386963]
[-1.01726615 135.47787476]
[-14.31764603 142.57458496]
[-28.93006897 146.28141785]
[-44.00498581 146.38284302]
[-58.66596222 142.87297058]
[-72.06063080 135.95587158]
[-83.41024017 126.03368378]
[-92.05493927 113.68327332]
[-97.49213409 99.62267303]
[-99.40571594 84.66936493]
[-97.68443298 69.69269562]
[-92.42835999 55.56339264]
[-83.94306946 43.10292053]
[-72.72189331 33.03571701]
[-59.41721344 25.94706726]
[-44.80254745 22.24910164]
[-29.72757149 22.15681458]
[-15.06872463 25.67557144]
[-1.67825365 32.60079575]
[9.66533756 42.52986145]
[18.30254555 54.88551331]
[23.73121643 68.94940186]
[25.63573456 83.90386963]
[40.53763580 85.61656189]
[55.43954086 87.32925415]
[70.34143829 89.04193878]
[77.34847260 73.59870911]
[92.41007996 62.81124496]
[85.50308228 49.49608994]
[78.59607697 36.18093109]
[71.68907928 22.86577606]
[64.78208160 9.55062103]
[52.12149429 -1.72527587]
[59.45192719 -17.01256180]
[76.17104340 -14.20054913]
[78.09723663 2.64362264]
[85.00423431 15.95877838]
[91.91123962 29.27393341]
[98.81823730 42.58908844]
[105.72523499 55.90424347]
[106.04740143 40.90770721]
[99.34996033 27.48591995]
[99.00345612 12.48992252]
[105.07382202 -1.22687972]
[116.40599823 -11.05448246]
[130.84371948 -15.12291050]
[145.63981628 -12.65803242]
[157.97891235 -4.12885809]
[165.51313782 8.84169769]
[166.80892944 23.78562355]
[161.61968994 37.85942459]
[150.93283081 48.38516235]
[136.78514099 53.35963440]
[126.57907104 64.35218048]
[140.80584717 59.59836578]
[155.03262329 54.84455109]
[169.25939941 50.09073639]
[183.48619080 45.33692169]
[197.71296692 40.58310699]
[211.93974304 35.82929230]
[226.16651917 31.07547569]
[224.46264648 16.11584663]
[225.90669250 1.12890470]
[230.43551636 -13.23018551]
[237.85113525 -26.33370590]
[247.82937622 -37.60882568]
[259.93405151 -46.56264496]
[273.63595581 -52.80374527]
[288.33612061 -56.05928802]
[303.39193726 -56.18695450]
[318.14520264 -53.18116760]
[331.95098877 -47.17332458]
[344.20574951 -38.42606354]
[354.37374878 -27.32177734]
[362.01052856 -14.34589767]
[366.78219604 -0.06567255]
[368.48016357 14.89462662]
[367.03024292 29.88099861]
[362.49575806 44.23830795]
[355.07498169 57.33890915]
[345.09231567 68.61009979]
[332.98413086 77.55915833]
[319.27975464 83.79486847]
[304.57830811 87.04462433]
[289.52246094 87.16637421]
[274.77038574 84.15477753]
[260.96694946 78.14151001]
[248.71563721 69.38942719]
[238.55200195 58.28113937]
[230.92033386 45.30225372]
[216.69355774 50.05607224]
[202.46678162 54.80988693]
[188.24000549 59.56370163]
[174.01321411 64.31751251]
[159.78643799 69.07132721]
[145.55966187 73.82514191]
[131.33288574 78.57895660]
[135.81837463 101.32771301]
[126.35945892 121.04592133]
[108.13738251 130.55310059]
[108.44944000 145.54985046]
[108.76148987 160.54661560]
[109.07354736 175.54336548]
[109.38560486 190.54011536]
[109.69766235 205.53686523]
[110.00971985 220.53363037]
[110.32177734 235.53038025]
[110.63382721 250.52713013]
[110.94588470 265.52389526]
[125.60087585 269.11465454]
[138.82669067 276.37692261]
[149.72155762 286.81552124]
[157.54264832 299.71871948]
[161.75672913 314.20678711]
[162.07644653 329.29187012]
[158.48001099 343.94549561]
[151.21266174 357.16848755]
[140.76985168 368.05932617]
[127.86362457 375.87542725]
[113.37393188 380.08392334]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[25 56]
[26 55]
[27 54]
[28 53]
[58 70]
[59 69]
[60 68]
[61 67]
[62 66]
[84 127]
[85 126]
[86 125]
[87 124]
[88 123]
[89 122]
[90 121]
[91 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
