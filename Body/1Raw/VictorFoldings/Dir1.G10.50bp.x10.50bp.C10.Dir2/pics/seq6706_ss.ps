%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACUUCUCGGGGGGGGGGCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACAGACCGxxxxxxxxxxUCCGAUAAAAUCACCUUCCACCCUUACUACACAAUCAAAGACGCCCUCGGCCCCCCCCCCCUUACUUCUC\
) } def
/len { sequence length } bind def

/coor [
[74.79342651 380.14743042]
[60.94748688 374.13140869]
[49.23882675 364.60198975]
[40.53630066 352.26632690]
[35.48569870 338.03979492]
[34.46180725 322.97811890]
[37.54060745 308.19894409]
[44.49362946 294.79904175]
[54.80491257 283.77270508]
[67.70929718 275.93820190]
[82.24918365 271.87686157]
[82.24918365 256.87686157]
[82.24918365 241.87687683]
[82.24918365 226.87687683]
[82.24918365 211.87687683]
[82.24918365 196.87687683]
[82.24918365 181.87687683]
[82.24918365 166.87687683]
[82.24918365 151.87687683]
[82.24918365 136.87687683]
[82.24918365 121.87687683]
[78.26316071 105.61380768]
[84.48849487 93.73848724]
[94.24092102 90.62198639]
[92.37330627 75.73870850]
[90.50569153 60.85542679]
[75.52528381 61.72528458]
[60.52022934 61.59261703]
[45.55754471 60.45801544]
[30.70405769 58.32654572]
[16.02610779 55.20772934]
[1.58924878 51.11549377]
[-12.54203796 46.06811905]
[-26.30463791 40.08814240]
[-39.63708496 33.20227814]
[-52.47983170 25.44128036]
[-64.77552032 16.83980751]
[-76.46923065 7.43627787]
[-87.50874329 -2.72730923]
[-97.84474182 -13.60556030]
[-107.43106842 -25.14989090]
[-116.22491455 -37.30873871]
[-124.18699646 -50.02780151]
[-131.28175354 -63.25027084]
[-137.47749329 -76.91709137]
[-142.74656677 -90.96722412]
[-147.06541443 -105.33792114]
[-150.41474915 -119.96498871]
[-152.77963257 -134.78311157]
[-154.14947510 -149.72608948]
[-154.51818848 -164.72720337]
[-153.88410950 -179.71943665]
[-152.25006104 -194.63584900]
[-149.62336731 -209.40979004]
[-146.01573181 -223.97531128]
[-141.44328308 -238.26733398]
[-135.92643738 -252.22204590]
[-129.48983765 -265.77709961]
[-122.16223145 -278.87194824]
[-113.97634125 -291.44815063]
[-104.96873474 -303.44949341]
[-95.17964172 -314.82238770]
[-84.65277863 -325.51605225]
[-73.43515778 -335.48272705]
[-61.57688904 -344.67785645]
[-49.13093185 -353.06042480]
[-36.15287018 -360.59295654]
[-22.70067215 -367.24185181]
[-8.83441639 -372.97735596]
[5.38396740 -377.77392578]
[19.89097404 -381.61004639]
[34.62181091 -384.46865845]
[49.51068878 -386.33697510]
[64.49110413 -387.20666504]
[79.49616241 -387.07379150]
[94.45883179 -385.93902588]
[109.31229401 -383.80737305]
[123.99020386 -380.68835449]
[138.42701721 -376.59594727]
[152.55822754 -371.54840088]
[166.32075500 -365.56823730]
[179.65312195 -358.68222046]
[192.49577332 -350.92105103]
[204.79135132 -342.31942749]
[216.48493958 -332.91574097]
[227.52432251 -322.75201416]
[237.86018372 -311.87362671]
[247.44638062 -300.32919312]
[256.24005127 -288.17022705]
[264.20199585 -275.45104980]
[271.29656982 -262.22851562]
[277.49215698 -248.56159973]
[282.76104736 -234.51141357]
[287.07971191 -220.14065552]
[290.42886353 -205.51354980]
[292.79354858 -190.69540405]
[294.16320801 -175.75239563]
[294.53173828 -160.75128174]
[293.89746094 -145.75904846]
[292.26324463 -130.84266663]
[289.63635254 -116.06874847]
[286.02853394 -101.50327301]
[281.45590210 -87.21131134]
[275.93887329 -73.25667572]
[269.50210571 -59.70170593]
[262.17434692 -46.60693359]
[253.98829651 -34.03084564]
[244.98054504 -22.02961540]
[235.19129944 -10.65683746]
[224.66430664 0.03669085]
[213.44656372 10.00321102]
[201.58818054 19.19820786]
[189.14212036 27.58061600]
[176.16395569 35.11299515]
[162.71166992 41.76170731]
[148.84535217 47.49705124]
[134.62690735 52.29341888]
[120.11985016 56.12938309]
[105.38897705 58.98781204]
[107.25658417 73.87109375]
[109.12419891 88.75437164]
[117.50634003 101.19380951]
[130.59950256 108.51291656]
[146.98063660 107.74456024]
[155.60768127 121.69110107]
[147.60588074 136.00553894]
[131.20678711 135.96240234]
[123.28038788 121.60607147]
[110.18724060 114.28696442]
[97.24918365 121.87687683]
[97.24918365 136.87687683]
[97.24918365 151.87687683]
[97.24918365 166.87687683]
[97.24918365 181.87687683]
[97.24918365 196.87687683]
[97.24918365 211.87687683]
[97.24918365 226.87687683]
[97.24918365 241.87687683]
[97.24918365 256.87686157]
[97.24918365 271.87686157]
[111.78907013 275.93820190]
[124.69345093 283.77270508]
[135.00473022 294.79904175]
[141.95774841 308.19894409]
[145.03656006 322.97811890]
[144.01266479 338.03979492]
[138.96206665 352.26632690]
[130.25953674 364.60198975]
[118.55087280 374.13140869]
[104.70493317 380.14743042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 121]
[25 120]
[26 119]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
