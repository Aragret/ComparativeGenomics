%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAACUCAAAGGGGGGGGGGCUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGxxxxxxxxxxGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCAACCCCCCCCCCCAAACUUAAA\
) } def
/len { sequence length } bind def

/coor [
[78.44937134 324.66964722]
[66.56510162 315.39456177]
[57.24639130 303.54443359]
[51.03502655 289.80825806]
[48.29212189 274.98464966]
[49.17715073 259.93539429]
[53.63866043 245.53544617]
[61.41725540 232.62200928]
[72.06070709 221.94584656]
[84.95021820 214.12765503]
[99.33640289 209.62199402]
[98.40077972 194.65119934]
[97.46514893 179.68040466]
[96.52951813 164.70960999]
[95.59388733 149.73883057]
[94.65826416 134.76803589]
[93.72263336 119.79724121]
[82.52687073 109.81451416]
[67.54715729 110.59436035]
[52.56744003 111.37420654]
[37.58772659 112.15405273]
[22.60801125 112.93389893]
[7.62829638 113.71373749]
[-7.35141802 114.49358368]
[-22.32221031 115.42921448]
[-37.28245926 116.52052307]
[-52.04851532 119.15938568]
[-66.46073151 123.31727600]
[-75.44334412 136.60983276]
[-91.44717407 137.73103333]
[-102.19544220 125.82077026]
[-99.44300842 110.01559448]
[-85.30129242 102.43988037]
[-70.61861420 108.90505981]
[-56.20640182 104.74716949]
[-57.60870361 89.81286621]
[-72.54301453 88.41056061]
[-87.47731781 87.00825500]
[-103.81233978 91.54736328]
[-112.69603729 77.10727692]
[-101.27952576 64.57334137]
[-86.07501984 72.07395172]
[-71.14070892 73.47625732]
[-56.20640182 74.87855530]
[-40.65451431 86.81449127]
[-38.37376785 101.56027985]
[-23.41352081 100.46896362]
[-16.92930412 96.82196808]
[-8.13126278 99.51387024]
[6.84845161 98.73402405]
[21.82816505 97.95417786]
[36.80788040 97.17433929]
[51.78759384 96.39449310]
[66.76731110 95.61464691]
[81.74702454 94.83480072]
[91.25537872 83.23345947]
[89.07854462 68.39225769]
[86.90171051 53.55104828]
[71.87889862 52.48838425]
[57.43588257 48.22067261]
[44.24818802 40.94751740]
[32.93262482 31.00910187]
[24.01844597 18.87026024]
[17.92258072 5.09875011]
[14.93014336 -9.66131115]
[15.18109798 -24.71956825]
[18.66370583 -39.37171936]
[25.21508026 -52.93245316]
[34.52879715 -64.76751709]
[46.16924286 -74.32335663]
[59.59197235 -81.15303040]
[74.16917419 -84.93711090]
[89.21905518 -85.49858856]
[104.03769684 -82.81122589]
[117.93200684 -77.00070190]
[130.25212097 -68.33878326]
[140.42181396 -57.23061371]
[147.96542358 -44.19573593]
[152.53012085 -29.84381676]
[153.90240479 -14.84611988]
[152.01809692 0.09588325]
[146.96533203 14.28332901]
[138.98043823 27.05264473]
[128.43687439 37.80658722]
[115.82778168 46.04217529]
[101.74291229 51.37421036]
[103.91974640 66.21541595]
[106.09658813 81.05662537]
[109.19863892 83.32873535]
[111.67121887 86.05967712]
[124.60927582 78.46977234]
[137.54733276 70.87985992]
[150.48538208 63.28995514]
[163.42344666 55.70004654]
[162.12596130 40.49217606]
[167.56344604 26.23045921]
[178.65626526 15.74657059]
[193.20195007 11.12209320]
[208.31243896 13.27521992]
[220.98753357 21.77844620]
[228.71057129 34.94345093]
[229.94816589 50.15631104]
[224.45455933 64.39650726]
[213.32052612 74.83663177]
[198.75674438 79.40379333]
[183.65486145 77.19117737]
[171.01335144 68.63809967]
[158.07530212 76.22801208]
[145.13723755 83.81791687]
[132.19918823 91.40782928]
[119.26113129 98.99773407]
[134.25413513 98.53979492]
[149.24714661 98.08186340]
[163.41355896 93.15106201]
[178.41171265 92.91616821]
[192.72558594 97.40091705]
[204.90830994 106.15200043]
[213.72842407 118.28482819]
[218.29438782 132.57299805]
[218.14465332 147.57225037]
[213.29437256 161.76643372]
[204.23382568 173.72077942]
[191.87882996 182.22691345]
[177.47828674 186.42503357]
[162.48780823 185.89079285]
[148.42265320 180.67817688]
[136.70454407 171.31408691]
[128.51797485 158.74507141]
[124.69036865 144.24069214]
[116.69189453 131.55114746]
[108.69342804 118.86161041]
[109.62905121 133.83239746]
[110.56468201 148.80319214]
[111.50031281 163.77398682]
[112.43593597 178.74478149]
[113.37156677 193.71557617]
[114.30719757 208.68635559]
[129.14242554 211.36578369]
[142.90505981 217.51829529]
[154.79495239 226.78617859]
[164.12084961 238.63064575]
[170.34054565 252.36303711]
[173.09242249 267.18499756]
[172.21652222 282.23480225]
[167.76374817 296.63745117]
[159.99298096 309.55560303]
[149.35600281 320.23818970]
[136.47123718 328.06420898]
[122.08778381 332.57858276]
[107.04187775 333.51892090]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 47]
[26 46]
[27 35]
[28 34]
[36 44]
[37 43]
[38 42]
[56 88]
[57 87]
[58 86]
[90 111]
[91 110]
[92 109]
[93 108]
[94 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
