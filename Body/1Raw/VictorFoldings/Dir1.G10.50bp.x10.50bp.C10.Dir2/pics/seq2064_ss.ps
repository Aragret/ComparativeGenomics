%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAAGCAUAAUAUGGGGGGGGGGAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAAxxxxxxxxxxACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCAUAUAUCCAAACCCCCCCCCCCAACAAAGCAUAAUAU\
) } def
/len { sequence length } bind def

/coor [
[83.84610748 415.63650513]
[69.71501923 410.47634888]
[56.77283096 402.80731201]
[45.46035767 392.89053345]
[36.16288757 381.06378174]
[29.19709587 367.72988892]
[24.80023193 353.34301758]
[23.12205124 338.39315796]
[24.21971321 323.38949585]
[28.05583000 308.84307861]
[34.49974823 295.24929810]
[43.33198547 283.07119751]
[54.25172424 272.72354126]
[66.88703918 264.55877686]
[80.80757904 258.85498047]
[95.53920746 255.80641174]
[95.24652863 240.80928040]
[94.95385742 225.81213379]
[94.66117859 210.81498718]
[94.36849976 195.81784058]
[94.07582855 180.82069397]
[93.78314972 165.82354736]
[93.49047089 150.82640076]
[93.19779968 135.82926941]
[92.90512085 120.83211517]
[77.76504517 110.22814941]
[74.98239136 90.00008392]
[59.98310852 90.14643097]
[44.98382187 90.29277802]
[29.99024582 90.73175812]
[15.00809097 91.46320343]
[0.02593550 92.19464874]
[-5.44308233 106.40766144]
[-16.22481728 117.16284943]
[-30.45127106 122.59680939]
[-45.65761948 121.76808167]
[-59.20927811 114.82023621]
[-68.75833130 102.95704651]
[-72.65036011 88.23386383]
[-70.21102905 73.20157623]
[-61.86298370 60.46462250]
[-49.05256653 52.22975159]
[-33.99925995 49.92370987]
[-19.31114197 53.94602585]
[-7.53301430 63.59981155]
[-0.70551175 77.21249390]
[14.27664375 76.48104858]
[29.25879860 75.74960327]
[33.10284805 72.83857727]
[38.82842255 72.34544373]
[44.83747482 75.29348755]
[59.83676147 75.14714813]
[74.83605194 75.00080109]
[87.41876221 66.83530426]
[93.66208649 53.19635773]
[99.90541077 39.55741119]
[106.01537323 25.85820007]
[111.99139404 12.10002995]
[117.96740723 -1.65813971]
[104.83960724 -8.93937302]
[92.47583771 -17.45364571]
[80.99155426 -27.12145805]
[70.49396515 -37.85254288]
[61.08110046 -49.54670715]
[52.84083939 -62.09476089]
[45.85012817 -75.37954712]
[40.17423248 -89.27701569]
[35.86615372 -103.65741730]
[32.96611023 -118.38648224]
[31.50118065 -133.32667542]
[31.48504639 -148.33851624]
[32.91785431 -163.28182983]
[35.78623199 -178.01708984]
[40.06339264 -192.40672302]
[45.70940018 -206.31636047]
[52.67153931 -219.61613464]
[60.88480759 -232.18186951]
[70.27251434 -243.89624023]
[80.74700928 -254.64987183]
[92.21048737 -264.34234619]
[104.55592346 -272.88317871]
[117.66804504 -280.19262695]
[131.42442322 -286.20242310]
[145.69660950 -290.85644531]
[160.35136414 -294.11126709]
[175.25183105 -295.93652344]
[190.25889587 -296.31509399]
[205.23245239 -295.24349976]
[220.03266907 -292.73175049]
[234.52137756 -288.80328369]
[248.56329346 -283.49475098]
[262.02728271 -276.85577393]
[274.78768921 -268.94830322]
[286.72528076 -259.84616089]
[297.72869873 -249.63438416]
[307.69512939 -238.40826416]
[316.53155518 -226.27264404]
[324.15545654 -213.34083557]
[330.49563599 -199.73358154]
[335.49291992 -185.57792664]
[339.10064697 -171.00602722]
[341.28509521 -156.15397644]
[342.02593994 -141.16041565]
[341.31619263 -126.16535950]
[339.16250610 -111.30880737]
[335.58502197 -96.72946930]
[330.61709595 -82.56348419]
[324.30511475 -68.94310760]
[316.70806885 -55.99552155]
[307.89682007 -43.84160995]
[297.95367432 -32.59485626]
[286.97146606 -22.36026955]
[275.05276489 -13.23341370]
[262.30877686 -5.29950190]
[248.85858154 1.36738551]
[234.82771301 6.70500088]
[220.34718323 10.66350651]
[205.55220032 13.20594215]
[190.58090210 14.30856991]
[175.57307434 13.96109390]
[160.66885376 12.16675854]
[146.00738525 8.94231701]
[131.72557068 4.31787682]
[125.74955750 18.07604599]
[119.77354431 31.83421516]
[119.99423218 39.25971985]
[113.54435730 45.80073547]
[107.30103302 59.43968201]
[101.05770874 73.07862854]
[112.41017151 77.01689148]
[120.59106445 85.30464172]
[124.14622498 96.00400543]
[122.65206909 106.80497742]
[116.74031067 115.52271271]
[107.90226746 120.53944397]
[108.19493866 135.53659058]
[108.48761749 150.53373718]
[108.78029633 165.53086853]
[109.07296753 180.52801514]
[109.36564636 195.52516174]
[109.65832520 210.52230835]
[109.95099640 225.51945496]
[110.24367523 240.51660156]
[110.53635406 255.51374817]
[125.37570953 257.98519897]
[139.50819397 263.14154053]
[152.45243835 270.80709839]
[163.76759338 280.72082520]
[173.06823730 292.54507446]
[180.03762817 305.87707520]
[184.43836975 320.26275635]
[186.12057495 335.21215820]
[185.02696228 350.21612549]
[181.19476318 364.76358032]
[174.75451660 378.35910034]
[165.92555237 390.53958130]
[155.00860596 400.89016724]
[142.37550354 409.05834961]
[128.45649719 414.76589966]
[113.72568512 417.81842041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 144]
[17 143]
[18 142]
[19 141]
[20 140]
[21 139]
[22 138]
[23 137]
[24 136]
[25 135]
[27 53]
[28 52]
[29 51]
[30 48]
[31 47]
[32 46]
[54 129]
[55 128]
[56 127]
[57 125]
[58 124]
[59 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
