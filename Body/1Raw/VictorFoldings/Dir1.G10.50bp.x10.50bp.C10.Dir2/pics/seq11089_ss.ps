%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUAACAGGGGGGGGGGGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACxxxxxxxxxxGGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCCCCCCCCCCCACCCUCACA\
) } def
/len { sequence length } bind def

/coor [
[70.12480164 429.62445068]
[56.27886200 423.60842896]
[44.57020187 414.07901001]
[35.86767578 401.74334717]
[30.81707573 387.51681519]
[29.79318428 372.45513916]
[32.87198257 357.67599487]
[39.82500458 344.27606201]
[50.13628769 333.24972534]
[63.04066849 325.41522217]
[77.58055878 321.35391235]
[77.58055878 306.35391235]
[77.58055878 291.35391235]
[77.58055878 276.35391235]
[77.58055878 261.35391235]
[77.58055878 246.35389709]
[77.58055878 231.35389709]
[77.58055878 216.35389709]
[77.58055878 201.35389709]
[77.58055878 186.35389709]
[77.58055878 171.35389709]
[77.58055878 156.35389709]
[69.84325409 143.62663269]
[77.58055878 129.82646179]
[72.12165070 108.09492493]
[80.59078979 92.67121887]
[93.31496429 89.48073578]
[89.60880280 74.94580078]
[85.90264130 60.41086197]
[82.19647980 45.87592697]
[77.01206207 38.27502823]
[78.56775665 31.00004196]
[75.16477966 16.39114952]
[57.57024765 -4.00869417]
[48.06188965 -15.61003494]
[38.55353165 -27.21137619]
[29.04517365 -38.81271744]
[16.21306610 -30.99714661]
[2.41809297 -25.04359055]
[-12.07122421 -21.06793785]
[-26.97284698 -19.14757538]
[-41.99670792 -19.31988335]
[-56.85036850 -21.58151054]
[-71.24468994 -25.88842964]
[-84.89949036 -32.15680695]
[-97.54897308 -40.26462936]
[-108.94690704 -50.05406952]
[-118.87143707 -61.33457947]
[-127.12937164 -73.88657379]
[-133.55996704 -87.46573639]
[-138.03805542 -101.80773163]
[-140.47647095 -116.63339233]
[-140.82774353 -131.65412903]
[-139.08503723 -146.57757568]
[-135.28227234 -161.11323547]
[-129.49348450 -174.97814941]
[-121.83132935 -187.90245056]
[-112.44496918 -199.63455200]
[-101.51711273 -209.94610596]
[-89.26046753 -218.63636780]
[-75.91361237 -225.53620911]
[-61.73635483 -230.51129150]
[-47.00465775 -233.46479797]
[-32.00527191 -234.33921814]
[-17.03017235 -233.11755371]
[-2.37084818 -229.82356262]
[11.68735027 -224.52137756]
[24.87077522 -217.31419373]
[36.92280960 -208.34231567]
[47.60885620 -197.78038025]
[56.72090912 -185.83396912]
[64.08159637 -172.73564148]
[69.54763794 -158.74034119]
[73.01264954 -144.12049866]
[74.40916443 -129.16069031]
[73.71001434 -114.15210724]
[70.92880249 -99.38691711]
[66.11965942 -85.15250397]
[59.37620926 -71.72596741]
[50.82970810 -59.36864471]
[40.64651489 -48.32107544]
[50.15487289 -36.71973419]
[59.66323090 -25.11839294]
[69.17159271 -13.51705265]
[84.13183594 -12.42574215]
[95.22315216 -22.52439117]
[106.31446838 -32.62303925]
[117.40578461 -42.72169113]
[102.85949707 -46.38304901]
[96.45912170 -59.94900513]
[102.88280487 -73.50393677]
[117.43536377 -77.14029694]
[129.48005676 -68.20018768]
[130.21342468 -53.21872330]
[142.29341125 -62.11107254]
[154.37339783 -71.00341797]
[163.54475403 -85.26254272]
[179.78550720 -80.39691925]
[179.60592651 -63.44392395]
[163.26574707 -58.92343140]
[151.18576050 -50.03108215]
[139.10577393 -41.13873291]
[127.50443268 -31.63037491]
[116.41311646 -21.53172493]
[105.32180786 -11.43307590]
[94.23049164 -1.33442664]
[89.77367401 12.98817062]
[93.17665100 27.59706306]
[96.73141479 42.16976547]
[100.43757629 56.70470047]
[104.14373779 71.23963928]
[107.84989929 85.77457428]
[118.72872162 96.10177612]
[133.43667603 99.04726410]
[148.14463806 101.99274445]
[162.85260010 104.93822479]
[179.57064819 102.11986542]
[186.90689087 117.40436554]
[174.25059509 128.68507385]
[159.90711975 119.64618683]
[145.19915771 116.70070648]
[130.49119568 113.75522614]
[115.78324127 110.80973816]
[109.98256683 115.56391907]
[112.41640472 130.36515808]
[98.38122559 125.07228088]
[92.58055878 129.82646179]
[100.31785583 143.62663269]
[92.58055878 156.35389709]
[92.58055878 171.35389709]
[92.58055878 186.35389709]
[92.58055878 201.35389709]
[92.58055878 216.35389709]
[92.58055878 231.35389709]
[92.58055878 246.35389709]
[92.58055878 261.35391235]
[92.58055878 276.35391235]
[92.58055878 291.35391235]
[92.58055878 306.35391235]
[92.58055878 321.35391235]
[107.12044525 325.41522217]
[120.02482605 333.24972534]
[130.33610535 344.27606201]
[137.28912354 357.67599487]
[140.36793518 372.45513916]
[139.34403992 387.51681519]
[134.29344177 401.74334717]
[125.59091187 414.07901001]
[113.88224792 423.60842896]
[100.03630829 429.62445068]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 127]
[27 112]
[28 111]
[29 110]
[30 109]
[32 108]
[33 107]
[34 84]
[35 83]
[36 82]
[37 81]
[85 106]
[86 105]
[87 104]
[88 103]
[94 102]
[95 101]
[96 100]
[113 123]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
