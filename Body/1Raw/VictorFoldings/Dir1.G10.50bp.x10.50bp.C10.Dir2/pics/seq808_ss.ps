%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAAGACACCCGGGGGGGGGGCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUxxxxxxxxxxCUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCCCCCCCCCCCAAAGACAACC\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 378.49197388]
[70.87159729 373.33694458]
[58.28185654 365.05474854]
[47.94191742 354.09197998]
[40.40940475 341.03985596]
[36.09054184 326.60226440]
[35.21823120 311.55780029]
[37.83952332 296.71780396]
[43.81304932 282.88256836]
[52.81666565 270.79821777]
[64.36482239 261.11642456]
[77.83473969 254.35935974]
[92.50000000 250.89138794]
[92.50000000 235.89138794]
[92.50000000 220.89138794]
[92.50000000 205.89138794]
[92.50000000 190.89138794]
[92.50000000 175.89138794]
[92.50000000 160.89138794]
[92.50000000 145.89138794]
[92.50000000 130.89138794]
[92.50000000 115.89138031]
[79.94857025 97.71479034]
[95.15995026 77.72973633]
[86.59092712 65.41828156]
[74.82294464 56.11695862]
[60.86513901 50.62337112]
[46.90732574 45.12977982]
[31.23227692 47.27533340]
[22.22299194 35.41438675]
[8.26518059 29.92079926]
[-5.69262981 24.42720985]
[-25.42437744 28.35955811]
[-36.89424896 12.83521271]
[-51.06322479 7.91178465]
[-65.23220062 2.98835659]
[-79.40117645 -1.93507159]
[-93.66702271 -6.57032633]
[-108.02388000 -10.91550446]
[-122.38074493 -15.26068211]
[-136.73760986 -19.60585976]
[-148.41323853 -9.52205849]
[-163.69032288 -7.37397814]
[-177.69400024 -13.84706211]
[-185.95571899 -26.87577248]
[-185.83923340 -42.30269623]
[-177.38169861 -55.20515823]
[-163.28186035 -61.46602631]
[-148.03897095 -59.08748627]
[-136.51693726 -48.82851791]
[-132.39242554 -33.96271896]
[-118.03556824 -29.61754227]
[-103.67870331 -25.27236366]
[-89.32184601 -20.92718697]
[-84.71660614 -22.38161469]
[-79.14892578 -20.91647720]
[-74.47774506 -16.10404587]
[-60.30877304 -11.18061829]
[-46.13979721 -6.25719070]
[-31.97082138 -1.33376241]
[-23.14533424 -6.62481880]
[-12.64605808 -6.14293289]
[-3.98657703 0.19427074]
[-0.19904049 10.46939850]
[13.75876999 15.96298790]
[27.71658134 21.45657730]
[42.39327240 18.91808701]
[52.40091705 31.17197037]
[66.35872650 36.66555786]
[80.31653595 42.15914917]
[71.29877472 30.17249298]
[64.82778168 16.64007568]
[61.15882874 2.09570432]
[60.43663025 -12.88689995]
[62.68968201 -27.71672630]
[67.82910919 -41.80879211]
[75.65217590 -54.60721588]
[85.85028839 -65.60714722]
[98.02117920 -74.37467194]
[111.68473816 -80.56394958]
[126.30198669 -83.93083191]
[141.29634094 -84.34250641]
[156.07630920 -81.78273773]
[170.05888367 -76.35250092]
[182.69250488 -68.26599121]
[193.47882080 -57.84220123]
[201.99235535 -45.49230576]
[207.89726257 -31.70346832]
[210.96061707 -17.01960564]
[211.06159973 -2.01994658]
[208.19621277 12.70382881]
[202.47749329 26.57091904]
[194.13101196 39.03431702]
[183.48602295 49.60239029]
[170.96241760 57.85826111]
[157.05422974 63.47626495]
[142.31005859 66.23479462]
[127.31152344 66.02503967]
[112.65026093 62.85526276]
[98.90238190 56.84925842]
[107.47140503 69.16071320]
[120.80182648 76.03820038]
[135.80105591 75.88619232]
[150.80027771 75.73418427]
[165.79951477 75.58217621]
[180.79873657 75.43016052]
[172.35366821 63.03336334]
[176.58151245 48.64151382]
[190.38969421 42.78197479]
[203.67779541 49.74088669]
[206.72581482 64.42794037]
[197.30464172 76.09962463]
[212.24229431 77.46584320]
[227.17994690 78.83206177]
[242.11759949 80.19827271]
[257.05526733 81.56449127]
[271.71029663 74.20499420]
[285.26074219 83.44171143]
[283.76708984 99.77269745]
[268.76586914 106.39803314]
[255.68904114 96.50214386]
[240.75138855 95.13592529]
[225.81373596 93.76971436]
[210.87608337 92.40349579]
[195.93843079 91.03727722]
[180.95075989 90.42938995]
[165.95152283 90.58140564]
[150.95230103 90.73341370]
[135.95306396 90.88542175]
[120.95383453 91.03742981]
[120.93012238 102.25147247]
[115.73412323 111.19708252]
[107.50000000 115.89138031]
[107.50000000 130.89138794]
[107.50000000 145.89138794]
[107.50000000 160.89138794]
[107.50000000 175.89138794]
[107.50000000 190.89138794]
[107.50000000 205.89138794]
[107.50000000 220.89138794]
[107.50000000 235.89138794]
[107.50000000 250.89138794]
[122.16526031 254.35935974]
[135.63517761 261.11642456]
[147.18333435 270.79821777]
[156.18695068 282.88256836]
[162.16047668 296.71780396]
[164.78176880 311.55780029]
[163.90945435 326.60226440]
[159.59059143 341.03985596]
[152.05809021 354.09197998]
[141.71813965 365.05474854]
[129.12840271 373.33694458]
[114.96779633 378.49197388]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[24 101]
[25 100]
[26 70]
[27 69]
[28 68]
[30 66]
[31 65]
[32 64]
[34 60]
[35 59]
[36 58]
[37 57]
[38 54]
[39 53]
[40 52]
[41 51]
[102 130]
[103 129]
[104 128]
[105 127]
[106 126]
[112 125]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
