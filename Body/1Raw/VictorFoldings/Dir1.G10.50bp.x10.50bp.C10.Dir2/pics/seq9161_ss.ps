%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCAUCUACGGGGGGGGGGGGCUCAACAUUUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUxxxxxxxxxxAUCGUAGCCUUCUCCACUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCCCCCCCCCCCGGCAUCAAC\
) } def
/len { sequence length } bind def

/coor [
[68.86251831 387.22592163]
[55.01657486 381.20989990]
[43.30791473 371.68048096]
[34.60539246 359.34481812]
[29.55478859 345.11828613]
[28.53089714 330.05661011]
[31.60969543 315.27746582]
[38.56271744 301.87753296]
[48.87400055 290.85119629]
[61.77838516 283.01669312]
[76.31826782 278.95538330]
[76.31826782 263.95538330]
[76.31826782 248.95538330]
[76.31826782 233.95538330]
[76.31826782 218.95538330]
[76.31826782 203.95538330]
[76.31826782 188.95538330]
[76.31826782 173.95538330]
[76.31826782 158.95538330]
[76.31826782 143.95538330]
[64.33143616 134.93785095]
[49.91921997 139.09573364]
[35.50700378 143.25361633]
[21.09478951 147.41151428]
[16.16571045 151.97349548]
[10.51951885 153.13616943]
[5.99606752 151.42915344]
[-8.57663536 154.98391724]
[-23.14933777 158.53868103]
[-32.67713165 171.44607544]
[-48.71374512 171.90055847]
[-58.95726395 159.55349731]
[-55.54973602 143.87649536]
[-41.10512543 136.89561462]
[-26.70409966 143.96597290]
[-12.13139725 140.41120911]
[2.44130540 136.85646057]
[16.93690300 132.99929810]
[31.34911728 128.84140015]
[45.76133347 124.68351746]
[60.17354965 120.52563477]
[56.69678116 98.86843872]
[63.86791611 78.92056274]
[79.23391724 65.40982056]
[74.03849792 51.33829880]
[68.84308624 37.26677704]
[63.64766693 23.19525909]
[58.45225143 9.12374020]
[54.33271408 5.71068048]
[52.19268417 1.47126389]
[52.01106644 -2.68429804]
[53.40177155 -5.99087000]
[49.09418869 -20.35905457]
[44.78660202 -34.72723770]
[38.01848984 -48.11352158]
[29.00095940 -60.10035706]
[19.98342896 -72.08718872]
[4.36351204 -75.74748230]
[-2.38316011 -90.30296326]
[4.91888189 -104.58790588]
[20.66813660 -107.64413452]
[32.78312302 -97.12716675]
[31.97026253 -81.10472107]
[40.98779297 -69.11788177]
[50.00532150 -57.13105392]
[48.72278976 -72.07612610]
[52.27357483 -86.64979553]
[60.28683090 -99.33000183]
[71.92565918 -108.79243469]
[85.97451019 -114.04884338]
[100.96613312 -114.55024719]
[115.33480072 -110.24427795]
[127.57986450 -101.58065796]
[136.42245483 -89.46420288]
[140.93907166 -75.16034698]
[140.65797424 -60.16297913]
[135.60855103 -46.03841782]
[126.31813812 -34.26182175]
[113.75702667 -26.06312943]
[99.23709869 -22.29861069]
[84.27479553 -23.36142731]
[70.43277740 -29.14057922]
[59.15478897 -39.03482437]
[63.46237183 -24.66663933]
[67.76995850 -10.29845428]
[72.52377319 3.92832470]
[77.71918488 17.99984360]
[82.91460419 32.07136154]
[88.11001587 46.14288330]
[93.30543518 60.21440125]
[99.99294281 59.65510178]
[106.68064117 60.21206284]
[113.18350220 61.86987686]
[119.32160187 64.58267975]
[124.92511749 68.27540588]
[129.83898926 72.84589386]
[142.61634827 64.98847198]
[155.39370728 57.13104630]
[165.71861267 43.68363953]
[181.49870300 49.88243484]
[179.91053772 66.76183319]
[163.25112915 69.90840149]
[150.47378540 77.76583099]
[137.69642639 85.62325287]
[139.29295349 90.84714508]
[140.16920471 96.23882294]
[155.10350037 97.64112854]
[170.03781128 99.04342651]
[184.97212219 100.44573212]
[199.90643311 101.84803772]
[208.73017883 89.27675629]
[222.66416931 82.81613922]
[237.96022034 84.20405579]
[250.50376892 93.06716156]
[256.92068481 107.02133179]
[255.48483276 122.31296539]
[246.58244324 134.82867432]
[232.60823059 141.20181274]
[217.32118225 139.71803284]
[204.83343506 130.77647400]
[198.50411987 116.78234100]
[183.56982422 115.38004303]
[168.63551331 113.97773743]
[153.70120239 112.57543182]
[138.76689148 111.17312622]
[135.48974609 120.70547485]
[129.86560059 129.29020691]
[122.16582489 136.34945679]
[112.80387115 141.38249207]
[102.31344604 144.00050354]
[91.31826782 143.95538330]
[91.31826782 158.95538330]
[91.31826782 173.95538330]
[91.31826782 188.95538330]
[91.31826782 203.95538330]
[91.31826782 218.95538330]
[91.31826782 233.95538330]
[91.31826782 248.95538330]
[91.31826782 263.95538330]
[91.31826782 278.95538330]
[105.85815430 283.01669312]
[118.76253510 290.85119629]
[129.07382202 301.87753296]
[136.02684021 315.27746582]
[139.10563660 330.05661011]
[138.08175659 345.11828613]
[133.03114319 359.34481812]
[124.32862854 371.68048096]
[112.61996460 381.20989990]
[98.77402496 387.22592163]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 41]
[22 40]
[23 39]
[24 38]
[27 37]
[28 36]
[29 35]
[44 90]
[45 89]
[46 88]
[47 87]
[48 86]
[52 85]
[53 84]
[54 83]
[55 65]
[56 64]
[57 63]
[96 104]
[97 103]
[98 102]
[106 125]
[107 124]
[108 123]
[109 122]
[110 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
