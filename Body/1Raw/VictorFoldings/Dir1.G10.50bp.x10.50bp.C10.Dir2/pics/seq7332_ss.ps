%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACCCUACCAGGGGGGGGGGCACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUxxxxxxxxxxCUAACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCCCCCCCCCCCACCCUACUA\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 402.16564941]
[70.75619507 397.35623169]
[57.85220718 389.59082031]
[46.91955185 379.23269653]
[38.46956635 366.76626587]
[32.89747238 352.77462769]
[30.46388245 337.91220093]
[31.28262329 322.87411499]
[35.31539917 308.36376953]
[42.37359238 295.05978394]
[52.12707901 283.58444214]
[64.11966705 274.47442627]
[77.79044342 268.15588379]
[92.50000000 264.92434692]
[92.50000000 249.92433167]
[92.50000000 234.92433167]
[92.50000000 219.92433167]
[92.50000000 204.92433167]
[92.50000000 189.92433167]
[92.50000000 174.92433167]
[92.50000000 159.92433167]
[92.50000000 144.92433167]
[92.50000000 129.92433167]
[78.48754883 122.11177826]
[70.29299164 108.31924438]
[70.13248444 92.27682495]
[78.04943085 78.32308960]
[91.90274811 70.23171997]
[91.60261536 55.23472214]
[91.30249023 40.23772430]
[91.00235748 25.24072838]
[76.01278687 24.54896736]
[61.10170746 22.86804581]
[46.33432770 20.20531464]
[31.77521515 16.57241631]
[17.48803520 11.98523712]
[3.53526449 6.46383476]
[-10.02208614 0.03235471]
[-23.12473297 -7.28108072]
[-35.71538162 -15.44449043]
[-47.73897552 -24.42217827]
[-59.14294052 -34.17488861]
[-69.87740326 -44.65997314]
[-79.89543152 -55.83158112]
[-89.15321350 -67.64086151]
[-97.61026764 -80.03617859]
[-105.22962189 -92.96333313]
[-111.97794342 -106.36579132]
[-117.82572937 -120.18494415]
[-122.74741364 -134.36036682]
[-126.72147369 -148.83007812]
[-129.73052979 -163.53080750]
[-131.76141357 -178.39825439]
[-132.80526733 -193.36743164]
[-132.85751343 -208.37286377]
[-131.91790771 -223.34893799]
[-129.99058533 -238.23017883]
[-127.08396912 -252.95149231]
[-123.21076202 -267.44851685]
[-118.38790131 -281.65786743]
[-112.63647461 -295.51742554]
[-105.98162842 -308.96652222]
[-98.45247650 -321.94641113]
[-90.08193207 -334.40032959]
[-80.90660095 -346.27377319]
[-70.96660614 -357.51489258]
[-60.30540466 -368.07446289]
[-48.96962738 -377.90634155]
[-37.00883484 -386.96752930]
[-24.47533226 -395.21838379]
[-11.42392445 -402.62289429]
[2.08831668 -409.14862061]
[16.00230408 -414.76702881]
[30.25719833 -419.45358276]
[44.79066086 -423.18777466]
[59.53914642 -425.95324707]
[74.43815613 -427.73794556]
[89.42254639 -428.53405762]
[104.42678833 -428.33810425]
[119.38527679 -427.15093994]
[134.23258972 -424.97775269]
[148.90382385 -421.82803345]
[163.33480835 -417.71557617]
[177.46244812 -412.65832520]
[191.22496033 -406.67846680]
[204.56216431 -399.80209351]
[217.41575623 -392.05926514]
[229.72950745 -383.48388672]
[241.44956970 -374.11340332]
[252.52471924 -363.98886108]
[262.90652466 -353.15444946]
[272.54956055 -341.65759277]
[281.41165161 -329.54858398]
[289.45410156 -316.88031006]
[296.64172363 -303.70822144]
[302.94305420 -290.08990479]
[308.33056641 -276.08486938]
[312.78070068 -261.75442505]
[316.27398682 -247.16117859]
[318.79516602 -232.36897278]
[320.33319092 -217.44248962]
[320.88134766 -202.44697571]
[320.43725586 -187.44802856]
[319.00280762 -172.51123047]
[316.58435059 -157.70187378]
[313.19238281 -143.08474731]
[308.84179688 -128.72375488]
[303.55160522 -114.68170166]
[297.34490967 -101.01998138]
[290.24887085 -87.79833221]
[282.29452515 -75.07457733]
[273.51663208 -62.90435028]
[263.95358276 -51.34086990]
[253.64723206 -40.43470001]
[242.64259338 -30.23353195]
[230.98782349 -20.78197289]
[218.73387146 -12.12135220]
[205.93432617 -4.28954124]
[192.64515686 2.67921376]
[178.92445374 8.75443935]
[164.83224487 13.90957069]
[150.43014526 18.12206459]
[135.78112793 21.37350082]
[120.94924164 23.64966202]
[105.99935150 24.94059563]
[106.29948425 39.93759155]
[106.59961700 54.93458939]
[106.89974976 69.93158722]
[119.17280579 75.83143616]
[127.71015930 86.44039154]
[130.84835815 99.69135284]
[127.97592163 113.00244904]
[119.65255737 123.78009796]
[107.50000000 129.92433167]
[107.50000000 144.92433167]
[107.50000000 159.92433167]
[107.50000000 174.92433167]
[107.50000000 189.92433167]
[107.50000000 204.92433167]
[107.50000000 219.92433167]
[107.50000000 234.92433167]
[107.50000000 249.92433167]
[107.50000000 264.92434692]
[122.20955658 268.15588379]
[135.88034058 274.47442627]
[147.87292480 283.58444214]
[157.62640381 295.05978394]
[164.68460083 308.36376953]
[168.71737671 322.87411499]
[169.53611755 337.91220093]
[167.10252380 352.77462769]
[161.53042603 366.76626587]
[153.08044434 379.23269653]
[142.14779663 389.59082031]
[129.24380493 397.35623169]
[114.97203827 402.16564941]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[28 128]
[29 127]
[30 126]
[31 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
