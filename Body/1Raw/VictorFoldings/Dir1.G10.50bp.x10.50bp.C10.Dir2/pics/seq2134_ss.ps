%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCAAAGCGGGGGGGGGGUAAGACCCCCGAAACCAGACGAGCUACCUAAGAACAGCUAAAAGAGCACAxxxxxxxxxxUUCUACCCUAGCAUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACCCCCCCCCCCGAGCCAAAAC\
) } def
/len { sequence length } bind def

/coor [
[85.57199097 469.81130981]
[72.35179138 462.53884888]
[61.46498871 452.09185791]
[53.65385818 439.18258667]
[49.45097733 424.69128418]
[49.14290237 409.60592651]
[52.75064468 394.95510864]
[60.02821732 381.73773193]
[70.47942352 370.85494995]
[83.39168549 363.04882812]
[97.88462067 358.85153198]
[97.57257080 343.85476685]
[97.26051331 328.85803223]
[96.94845581 313.86126709]
[96.63639832 298.86450195]
[96.32434082 283.86776733]
[96.01228333 268.87100220]
[95.70023346 253.87425232]
[95.38817596 238.87750244]
[95.07611847 223.88075256]
[94.76406097 208.88398743]
[94.45200348 193.88723755]
[94.13994598 178.89048767]
[93.82789612 163.89373779]
[93.51583862 148.89697266]
[81.35548401 146.65618896]
[69.91973877 141.38529968]
[59.96429062 133.30976868]
[52.17639160 122.84343719]
[47.12804031 110.56813049]
[32.19373322 111.97042847]
[24.40273094 125.38981628]
[10.19837475 131.63609314]
[-4.95747042 128.30741882]
[-15.23707294 116.68376923]
[-16.68771553 101.23464966]
[-8.75159836 87.90057373]
[5.51968145 81.80876160]
[20.63852501 85.30163574]
[30.79142761 97.03612518]
[45.72573471 95.63381958]
[48.97656250 80.99031830]
[36.03850555 73.40040588]
[23.10045052 65.81050110]
[10.16239357 58.22059250]
[-3.15191627 65.87727356]
[-18.51074982 65.83494568]
[-31.78265953 58.10500336]
[-39.39756393 44.76675797]
[-39.30709839 29.40813255]
[-31.53559303 16.16051865]
[-18.17354393 8.58745861]
[-2.81527805 8.72606754]
[10.40791130 16.53906059]
[17.93905067 29.92477989]
[17.75230217 45.28253555]
[30.69035721 52.87244415]
[43.62841415 60.46235275]
[56.56647110 68.05226135]
[63.59161377 61.80233765]
[71.44155121 56.99784088]
[79.83229065 53.73111343]
[88.47348785 52.04066086]
[87.22661591 37.09257126]
[85.97974396 22.14448547]
[71.34738159 18.18597603]
[58.95313263 9.45909500]
[50.29366684 -2.98234677]
[46.41465759 -17.63598442]
[47.78450775 -32.73231888]
[54.23780823 -46.44839478]
[64.99528503 -57.12792969]
[78.75792694 -63.48131561]
[93.86382294 -64.74135590]
[108.48886108 -60.75588608]
[120.86700439 -52.00617981]
[129.50352478 -39.54880142]
[133.35552979 -24.88804054]
[131.95785522 -9.79425526]
[125.47929382 3.90990472]
[114.70215607 14.56959629]
[100.92782593 20.89760971]
[102.17470551 35.84569931]
[103.42157745 50.79378510]
[118.78476715 54.39197922]
[132.22563171 62.65743256]
[142.36871338 74.74430084]
[156.27127075 69.11234283]
[170.17382812 63.48038483]
[184.07638550 57.84843063]
[197.97894287 52.21647263]
[195.68692017 37.32206726]
[196.89216614 22.30061150]
[201.52967834 7.96219587]
[209.34936523 -4.91992807]
[219.92953491 -15.65104294]
[232.69960022 -23.65243530]
[246.97087097 -28.49259567]
[261.97375488 -29.91050529]
[276.89913940 -27.82969475]
[290.94210815 -22.36238289]
[303.34536743 -13.80341053]
[313.44000244 -2.61435533]
[320.68164062 10.60137177]
[324.67974854 25.13106346]
[325.21868896 40.19115067]
[322.26940918 54.96946335]
[315.99096680 68.66902924]
[306.72198486 80.55104065]
[294.96224976 89.97471619]
[281.34600830 96.43185425]
[266.60754395 99.57422638]
[251.54170227 99.23236847]
[236.96093750 95.42472076]
[223.65159607 88.35662079]
[212.33142090 78.40924072]
[203.61090088 66.11902618]
[189.70834351 71.75098419]
[175.80578613 77.38294220]
[161.90322876 83.01490021]
[148.00067139 88.64685822]
[148.57040405 108.59504700]
[141.18955994 127.13629913]
[127.06634521 141.23556519]
[108.51258850 148.58491516]
[108.82464600 163.58168030]
[109.13670349 178.57843018]
[109.44876099 193.57518005]
[109.76081848 208.57192993]
[110.07286835 223.56869507]
[110.38492584 238.56544495]
[110.69698334 253.56219482]
[111.00904083 268.55895996]
[111.32109833 283.55569458]
[111.63315582 298.55245972]
[111.94520569 313.54922485]
[112.25726318 328.54595947]
[112.56932068 343.54272461]
[112.88137817 358.53945923]
[127.53636932 362.13024902]
[140.76217651 369.39248657]
[151.65704346 379.83108521]
[159.47814941 392.73431396]
[163.69221497 407.22238159]
[164.01193237 422.30746460]
[160.41551208 436.96105957]
[153.14814758 450.18408203]
[142.70535278 461.07492065]
[129.79911804 468.89102173]
[115.30942535 473.09951782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 127]
[24 126]
[25 125]
[30 41]
[31 40]
[42 59]
[43 58]
[44 57]
[45 56]
[63 84]
[64 83]
[65 82]
[87 121]
[88 120]
[89 119]
[90 118]
[91 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
