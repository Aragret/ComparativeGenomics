%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACCCCAUAGGGGGGGGGGAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACAxxxxxxxxxxAAAAAUCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACCAAUCUCCCCCCCCCCAUCACCCUAUA\
) } def
/len { sequence length } bind def

/coor [
[73.54549408 388.80838013]
[59.52355194 383.25537109]
[47.32359314 374.38903809]
[37.71252060 362.76672363]
[31.29449654 349.11901855]
[28.47295952 334.30383301]
[29.42527580 319.25247192]
[34.09158325 304.91104126]
[42.17854691 292.18109131]
[53.17782211 281.86279297]
[66.39797974 274.60482788]
[81.00799561 270.86340332]
[81.00799561 255.86338806]
[81.00799561 240.86338806]
[81.00799561 225.86338806]
[81.00799561 210.86338806]
[81.00799561 195.86338806]
[81.00799561 180.86338806]
[81.00799561 165.86338806]
[81.00799561 150.86338806]
[81.00799561 135.86338806]
[81.00799561 120.86339569]
[79.49033356 99.02358246]
[92.29007721 89.71654510]
[90.14149475 74.87121582]
[87.99291229 60.02589417]
[82.71817780 45.98392105]
[74.56150818 33.39548111]
[66.40484619 20.80704117]
[52.40724564 13.43290329]
[51.97980881 -1.45556724]
[43.82314301 -14.04400635]
[35.66647720 -26.63244629]
[27.50981331 -39.22088623]
[19.35314751 -51.80932617]
[11.19648075 -64.39776611]
[2.44973564 -56.28711319]
[-11.64282036 -53.32431412]
[-28.09559059 -58.12129974]
[-41.38293076 -65.08165741]
[-54.87831497 -71.62952423]
[-68.56893921 -77.75869751]
[-82.25956726 -83.88787079]
[-94.65648651 -74.82078552]
[-109.92778778 -73.18287659]
[-123.96558380 -79.41472626]
[-132.99375916 -91.84000397]
[-134.58380127 -107.11637115]
[-128.30798340 -121.13455963]
[-115.85446167 -130.12374878]
[-100.57318878 -131.66589355]
[-86.57473755 -125.34616089]
[-77.62463379 -112.86453247]
[-76.13039398 -97.57849884]
[-62.43976593 -91.44932556]
[-48.74914169 -85.32015228]
[-45.29288864 -86.26964569]
[-41.19944000 -85.55321503]
[-37.27509689 -82.88766479]
[-34.42257690 -78.36899567]
[-21.13523483 -71.40863800]
[-14.71840763 -75.29120636]
[-15.02641487 -90.28804779]
[-1.88475335 -83.05634308]
[4.53207350 -86.93891144]
[4.53207350 -101.93891144]
[4.53207350 -116.93891144]
[4.53207350 -131.93890381]
[-9.72059631 -137.10003662]
[-21.34652710 -146.82698059]
[-28.94182777 -159.94519043]
[-31.58933067 -174.87054443]
[-28.96933746 -189.80076599]
[-21.39822388 -202.93295288]
[-9.79024029 -212.68130493]
[4.45289469 -217.86868286]
[19.61125183 -217.86868286]
[33.85438919 -212.68130493]
[45.46237183 -202.93295288]
[53.03348541 -189.80076599]
[55.65347672 -174.87054443]
[53.00597382 -159.94519043]
[45.41067505 -146.82698059]
[33.78474426 -137.10003662]
[19.53207397 -131.93890381]
[19.53207397 -116.93891144]
[19.53207397 -101.93891144]
[19.53207397 -86.93891144]
[23.78491974 -72.55442810]
[31.94158554 -59.96599197]
[40.09825134 -47.37755203]
[48.25491714 -34.78911209]
[56.41158295 -22.20067215]
[64.56825256 -9.61223316]
[77.98242188 -3.13850498]
[78.99327850 12.65037537]
[87.14994812 25.23881531]
[95.30661011 37.82725525]
[94.80844116 22.83552933]
[98.30001831 8.24755764]
[105.53179169 -4.89403152]
[115.98690796 -15.64998817]
[128.91810608 -23.25156403]
[143.40118408 -27.15546417]
[158.40101624 -27.08266830]
[172.84552002 -23.03837967]
[185.70233154 -15.31165123]
[196.05255127 -4.45472383]
[203.15644836 8.75643826]
[206.50627136 23.37761116]
[205.86260986 38.36379623]
[201.27146912 52.64390182]
[193.06098938 65.19730377]
[181.81797791 75.12680054]
[168.34600830 81.72270203]
[153.60792542 84.51358795]
[138.65710449 83.29999542]
[124.56208801 78.16865540]
[112.33028412 69.48632050]
[102.83824158 57.87731552]
[104.98681641 72.72264099]
[107.13539886 87.56796265]
[115.80200195 99.81091309]
[129.08934021 106.77127075]
[145.44352722 105.55773926]
[154.44664001 119.26453400]
[146.83705139 133.79127502]
[130.44284058 134.19409180]
[122.12899017 120.05861664]
[108.84164429 113.09825897]
[96.00799561 120.86339569]
[96.00799561 135.86338806]
[96.00799561 150.86338806]
[96.00799561 165.86338806]
[96.00799561 180.86338806]
[96.00799561 195.86338806]
[96.00799561 210.86338806]
[96.00799561 225.86338806]
[96.00799561 240.86338806]
[96.00799561 255.86338806]
[96.00799561 270.86340332]
[110.61800385 274.60482788]
[123.83816528 281.86279297]
[134.83743286 292.18109131]
[142.92440796 304.91104126]
[147.59071350 319.25247192]
[148.54302979 334.30383301]
[145.72149658 349.11901855]
[139.30346680 362.76672363]
[129.69239807 374.38903809]
[117.49243927 383.25537109]
[103.47048950 388.80838013]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[24 122]
[25 121]
[26 120]
[27 98]
[28 97]
[29 96]
[31 94]
[32 93]
[33 92]
[34 91]
[35 90]
[36 89]
[39 61]
[40 60]
[41 56]
[42 55]
[43 54]
[65 88]
[66 87]
[67 86]
[68 85]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
