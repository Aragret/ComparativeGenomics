%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAAUAAACGGGGGGGGGGAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCUCGUUCCACxxxxxxxxxxAAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGCCCCCCCCCCAGUAAUAAAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 384.74389648]
[71.19830322 378.72784424]
[59.48964310 369.19842529]
[50.78712082 356.86276245]
[45.73651886 342.63626099]
[44.71262741 327.57458496]
[47.79142761 312.79541016]
[54.74444962 299.39547729]
[65.05573273 288.36914062]
[77.96011353 280.53463745]
[92.50000000 276.47332764]
[92.50000000 261.47332764]
[92.50000000 246.47332764]
[92.50000000 231.47332764]
[92.50000000 216.47332764]
[92.50000000 201.47332764]
[92.50000000 186.47332764]
[92.50000000 171.47332764]
[92.50000000 156.47332764]
[92.50000000 141.47332764]
[84.76270294 128.74606323]
[92.50000000 114.94588470]
[81.06198883 95.59985352]
[99.81147003 77.83798981]
[94.32444000 63.87759781]
[88.83740997 49.91720581]
[83.35037231 35.95681763]
[77.25993347 29.06056213]
[77.89773560 21.64848900]
[72.70231628 7.57696867]
[61.30245972 1.45348561]
[57.28506851 -10.42420578]
[62.29661560 -21.47824287]
[57.39506531 -35.65480042]
[52.49351501 -49.83135986]
[36.64384842 -57.16112518]
[31.07780457 -73.35690308]
[38.76479721 -88.28231812]
[33.56938171 -102.35383606]
[28.37396812 -116.42536163]
[23.17855263 -130.49687195]
[18.27004814 -135.08099365]
[16.69966888 -140.62762451]
[18.07306099 -145.26329041]
[13.46749592 -159.53874207]
[8.86193180 -173.81420898]
[-5.93976879 -171.23432922]
[-20.95647240 -170.73962402]
[-35.89587784 -172.33973694]
[-50.46717834 -176.00350952]
[-64.38674927 -181.65963745]
[-77.38362885 -189.19801331]
[-89.20484161 -198.47190857]
[-99.62027740 -209.30079651]
[-108.42720032 -221.47389221]
[-115.45417786 -234.75424194]
[-120.56443024 -248.88334656]
[-123.65848541 -263.58618164]
[-124.67610931 -278.57650757]
[-123.59750366 -293.56259155]
[-120.44365692 -308.25271606]
[-115.27596283 -322.36090088]
[-108.19501495 -335.61254883]
[-99.33863831 -347.74972534]
[-88.87922668 -358.53613281]
[-77.02038574 -367.76187134]
[-63.99293900 -375.24731445]
[-50.05047226 -380.84674072]
[-35.46438599 -384.45120239]
[-20.51859665 -385.99053955]
[-5.50402880 -385.43475342]
[9.28705311 -382.79464722]
[23.56673622 -378.12167358]
[37.05706406 -371.50674438]
[49.49544144 -363.07864380]
[60.63975143 -353.00143433]
[70.27306366 -341.47122192]
[78.20787811 -328.71252441]
[84.28971863 -314.97360229]
[88.40021515 -300.52197266]
[90.45935822 -285.63888550]
[90.42705536 -270.61407471]
[88.30393982 -255.73999023]
[84.13134003 -241.30615234]
[77.99047852 -227.59353638]
[70.00088501 -214.86904907]
[60.31807709 -203.38038635]
[49.13053894 -193.35116577]
[36.65603638 -184.97662354]
[23.13739204 -178.41976929]
[27.74295616 -164.14431763]
[32.34852219 -149.86885071]
[37.25007248 -135.69229126]
[42.44548798 -121.62077332]
[47.64090347 -107.54925537]
[52.83631897 -93.47773743]
[65.21192169 -89.75736237]
[73.28972626 -79.42182159]
[73.92885590 -66.12447357]
[66.67007446 -54.73291016]
[71.57162476 -40.55635071]
[76.47317505 -26.37979317]
[90.32927704 -15.65559578]
[86.77383423 2.38155317]
[91.96925354 16.45307159]
[97.31076813 30.46978569]
[102.79779816 44.43017578]
[108.28482819 58.39056396]
[113.77185822 72.35095215]
[125.17288208 82.09860992]
[139.81637573 85.34943390]
[154.45988464 88.60025787]
[169.10337830 91.85108185]
[183.74688721 95.10191345]
[198.39038086 98.35273743]
[211.58576965 89.65459442]
[227.04978943 92.91641998]
[235.60792542 106.20301819]
[232.18280029 121.63169098]
[218.80645752 130.04888916]
[203.41485596 126.46082306]
[195.13955688 112.99623871]
[180.49606323 109.74541473]
[165.85255432 106.49458313]
[151.20906067 103.24375916]
[136.56555176 99.99293518]
[121.92205811 96.74211121]
[117.25358582 108.96233368]
[107.50000000 114.94588470]
[115.23729706 128.74606323]
[107.50000000 141.47332764]
[107.50000000 156.47332764]
[107.50000000 171.47332764]
[107.50000000 186.47332764]
[107.50000000 201.47332764]
[107.50000000 216.47332764]
[107.50000000 231.47332764]
[107.50000000 246.47332764]
[107.50000000 261.47332764]
[107.50000000 276.47332764]
[122.03988647 280.53463745]
[134.94427490 288.36914062]
[145.25555420 299.39547729]
[152.20857239 312.79541016]
[155.28736877 327.57458496]
[154.26348877 342.63626099]
[149.21287537 356.86276245]
[140.51036072 369.19842529]
[128.80169678 378.72784424]
[114.95575714 384.74389648]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[24 109]
[25 108]
[26 107]
[27 106]
[29 105]
[30 104]
[33 102]
[34 101]
[35 100]
[38 96]
[39 95]
[40 94]
[41 93]
[44 92]
[45 91]
[46 90]
[110 127]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
