%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCGCUCUUGGGGGGGGGGCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUxxxxxxxxxxACCCCUACCAUGAGCCCUACAAACAACUAACCUGCCACUAAUAGUUAUGUCCCCCCCCCCCAUCCCUCUU\
) } def
/len { sequence length } bind def

/coor [
[24.69968224 275.75695801]
[12.44261646 269.98336792]
[0.62517250 263.35632324]
[-10.69331360 255.90904236]
[-21.45601082 247.67897034]
[-31.60888290 238.70739746]
[-41.10094833 229.03938293]
[-49.88455200 218.72346497]
[-57.91559219 207.81144714]
[-65.15373993 196.35809326]
[-78.39632416 203.40322876]
[-91.63890839 210.44836426]
[-104.88150024 217.49349976]
[-118.12408447 224.53863525]
[-131.29266357 231.72114563]
[-144.38581848 239.04025269]
[-157.47897339 246.35935974]
[-170.57212830 253.67846680]
[-183.66528320 260.99755859]
[-196.75843811 268.31668091]
[-196.89122009 283.67498779]
[-204.69920349 296.90115356]
[-218.08207703 304.43734741]
[-233.43991089 304.25640869]
[-246.64151001 296.40701294]
[-254.13574219 283.00057983]
[-253.90666199 267.64340210]
[-246.01591492 254.46647644]
[-232.58607483 247.01431274]
[-217.22969055 247.29151917]
[-204.07754517 255.22352600]
[-190.98439026 247.90441895]
[-177.89123535 240.58531189]
[-164.79808044 233.26620483]
[-151.70492554 225.94709778]
[-138.61177063 218.62799072]
[-134.27986145 212.57983398]
[-125.16921997 211.29605103]
[-111.92662811 204.25091553]
[-98.68404388 197.20578003]
[-85.44145966 190.16064453]
[-72.19887543 183.11550903]
[-82.81300354 156.03611755]
[-89.19713593 127.66014099]
[-91.20355988 98.64415741]
[-88.78585052 69.65953827]
[-81.99994659 41.37695312]
[-71.00285339 14.45080662]
[-56.04904175 -10.49587154]
[-67.94142151 -19.63760567]
[-79.83380127 -28.77933884]
[-96.15303040 -30.39638329]
[-102.66479492 -45.44726181]
[-92.67034912 -58.44892120]
[-76.45112610 -56.02637100]
[-70.69207001 -40.67171860]
[-58.79968643 -31.52998543]
[-46.90730667 -22.38825035]
[-40.18876266 -30.02980995]
[-33.07323456 -37.30315399]
[-25.58086586 -44.18767929]
[-17.73288155 -50.66389465]
[-9.55149937 -56.71346283]
[-1.05989087 -62.31925201]
[7.71789885 -67.46538544]
[16.75701332 -72.13729095]
[26.03185272 -76.32173157]
[35.51615524 -80.00687408]
[45.18306732 -83.18227386]
[55.00520325 -85.83893585]
[64.95475769 -87.96933746]
[75.00355530 -89.56745148]
[85.12313843 -90.62874603]
[95.28484344 -91.15022278]
[105.45990753 -91.13040161]
[115.61950684 -90.56933594]
[125.73487854 -89.46862030]
[135.77737427 -87.83135986]
[145.71855164 -85.66220856]
[155.53025818 -82.96729279]
[165.18472290 -79.75425720]
[174.65460205 -76.03218842]
[183.91307068 -71.81163788]
[192.93389893 -67.10454559]
[201.69157410 -61.92425537]
[210.16128540 -56.28542328]
[218.31903076 -50.20402527]
[226.14172363 -43.69727707]
[233.60720825 -36.78361130]
[240.69433594 -29.48259926]
[247.38305664 -21.81491852]
[253.65441895 -13.80228424]
[259.49066162 -5.46738529]
[264.87527466 3.16617584]
[269.79296875 12.07395077]
[274.22985840 21.23071480]
[278.17333984 30.61053658]
[281.61230469 40.18685532]
[284.53695679 49.93255234]
[286.93905640 59.82003021]
[288.81176758 69.82128906]
[290.14981079 79.90801239]
[290.94940186 90.05162811]
[291.20825195 100.22341156]
[290.92562866 110.39456940]
[305.85992432 111.79687500]
[320.79425049 113.19917297]
[335.72854614 114.60147858]
[350.66284180 116.00378418]
[358.49768066 102.90500641]
[371.24472046 94.50999451]
[386.37298584 92.48558044]
[400.87878418 97.23371887]
[411.88195801 107.81166840]
[417.19781494 122.11915588]
[415.77090454 137.31542969]
[407.88455200 150.38325500]
[395.10458374 158.72799683]
[379.96844482 160.69282532]
[365.48147583 155.88760376]
[354.52005005 145.26640320]
[349.26055908 130.93809509]
[334.32623291 129.53578186]
[319.39193726 128.13348389]
[304.45764160 126.73117828]
[289.52331543 125.32888031]
[287.25387573 138.68624878]
[284.04425049 151.84938049]
[279.91052246 164.75218201]
[274.87347412 177.32986450]
[268.95840454 189.51927185]
[262.19497681 201.25921631]
[254.61720276 212.49072266]
[246.26307678 223.15742493]
[237.17457581 233.20576477]
[227.39732361 242.58528137]
[216.98042297 251.24887085]
[205.97616577 259.15304565]
[194.43978882 266.25811768]
[182.42924500 272.52844238]
[170.00482178 277.93246460]
[157.22891235 282.44311523]
[144.16566467 286.03771973]
[130.88064575 288.69824219]
[117.44058990 290.41131592]
[103.91295624 291.16833496]
[90.36567688 290.96548462]
[76.86677551 289.80383301]
[63.48402405 287.68917847]
[50.28461838 284.63211060]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 42]
[11 41]
[12 40]
[13 39]
[14 38]
[15 36]
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[49 58]
[50 57]
[51 56]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
