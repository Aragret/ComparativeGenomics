%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUAUAUAGGGGGGGGGGCCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACxxxxxxxxxxGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAACCCCCCCCCCAUCCUAUAUA\
) } def
/len { sequence length } bind def

/coor [
[85.41808319 461.80139160]
[71.57214355 455.78536987]
[59.86348343 446.25595093]
[51.16096115 433.92025757]
[46.11035919 419.69375610]
[45.08646774 404.63208008]
[48.16526794 389.85290527]
[55.11828995 376.45297241]
[65.42957306 365.42663574]
[78.33395386 357.59213257]
[92.87384033 353.53082275]
[92.87384033 338.53082275]
[92.87384033 323.53082275]
[92.87384033 308.53082275]
[92.87384033 293.53082275]
[92.87384033 278.53082275]
[92.87384033 263.53082275]
[92.87384033 248.53082275]
[92.87384033 233.53082275]
[92.87384033 218.53082275]
[80.49308014 207.19174194]
[80.10500336 190.07060242]
[92.43485260 177.70483398]
[92.12279510 162.70808411]
[91.81073761 147.71133423]
[91.34269714 132.71862793]
[90.71871948 117.73161316]
[79.94790649 107.29180145]
[64.94872284 107.13576508]
[49.94953156 106.97972870]
[34.95034409 106.82369232]
[19.95115662 106.66765594]
[6.07124376 114.26098633]
[-6.57485247 106.39170837]
[-21.57404137 106.23567200]
[-33.99555588 116.38877869]
[-49.64725876 112.86688995]
[-56.52250671 98.37169647]
[-49.34719467 84.02267456]
[-33.62560654 80.82716370]
[-21.41800499 91.23648071]
[-6.41881609 91.39251709]
[6.38825417 83.78803253]
[20.10719299 91.66847229]
[35.10638046 91.82450867]
[50.10556793 91.98054504]
[65.10475922 92.13658142]
[80.10394287 92.29261780]
[92.09078217 83.27508545]
[96.09851837 68.82039642]
[100.10626221 54.36570740]
[103.66101837 39.79300690]
[106.75934601 25.11647987]
[109.85766602 10.43995476]
[112.95598602 -4.23657084]
[116.05430603 -18.91309547]
[119.15263367 -33.58962250]
[122.25095367 -48.26614761]
[111.99444580 -37.32064056]
[99.37625885 -29.21007729]
[85.15988922 -24.42521095]
[70.20555878 -23.25557137]
[55.41813660 -25.77193069]
[41.69238281 -31.82202721]
[29.85882568 -41.03977966]
[20.63349915 -52.86743164]
[14.57461357 -66.58930969]
[12.04878616 -81.37511444]
[13.20884991 -96.33019257]
[17.98460960 -110.54962158]
[26.08709335 -123.17300415]
[37.02602768 -133.43650818]
[50.13951874 -140.71913147]
[64.63407898 -144.58016968]
[79.63266754 -144.78604126]
[94.22773743 -141.32424927]
[107.53615570 -134.40429688]
[118.75266266 -124.44487762]
[127.19855499 -112.04862976]
[132.36277771 -97.96562958]
[133.93284607 -83.04802704]
[131.81430054 -68.20037079]
[141.32266235 -79.80171204]
[150.83102417 -91.40305328]
[152.30131531 -97.95635986]
[156.29089355 -102.11743164]
[160.98425293 -103.27844238]
[170.96697998 -114.47421265]
[180.94969177 -125.66997528]
[190.93241882 -136.86573792]
[191.45423889 -152.90031433]
[204.40151978 -162.37382507]
[219.84222412 -158.01901245]
[225.93156433 -143.17652893]
[217.99830627 -129.23223877]
[202.12818909 -126.88301849]
[192.14546204 -115.68724823]
[182.16273499 -104.49148560]
[172.18000793 -93.29571533]
[162.43235779 -81.89469910]
[152.92399597 -70.29335785]
[143.41564941 -58.69201660]
[136.92747498 -45.16782379]
[133.82916260 -30.49130058]
[130.73083496 -15.81477451]
[127.63251495 -1.13824892]
[124.53418732 13.53827667]
[121.43586731 28.21480179]
[118.33754730 42.89132690]
[119.99829865 46.07085419]
[120.16274261 50.22713089]
[118.38252258 54.62976456]
[114.56095123 58.37344742]
[110.55320740 72.82814026]
[106.54547119 87.28282928]
[110.74784851 89.77330780]
[113.99749756 93.65399170]
[115.83646393 98.55896759]
[115.94747925 103.97301483]
[114.20174408 109.28559875]
[110.68619537 113.85966492]
[105.70573425 117.10763550]
[106.32971191 132.09465027]
[109.83232880 140.60250854]
[106.80749512 147.39927673]
[107.11954498 162.39602661]
[107.43160248 177.39277649]
[118.18666840 185.56506348]
[122.19278717 198.26069641]
[118.19481659 210.75430298]
[107.87384033 218.53082275]
[107.87384033 233.53082275]
[107.87384033 248.53082275]
[107.87384033 263.53082275]
[107.87384033 278.53082275]
[107.87384033 293.53082275]
[107.87384033 308.53082275]
[107.87384033 323.53082275]
[107.87384033 338.53082275]
[107.87384033 353.53082275]
[122.41372681 357.59213257]
[135.31811523 365.42663574]
[145.62939453 376.45297241]
[152.58241272 389.85290527]
[155.66120911 404.63208008]
[154.63732910 419.69375610]
[149.58671570 433.92025757]
[140.88420105 446.25595093]
[129.17553711 455.78536987]
[115.32959747 461.80139160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 127]
[24 126]
[25 125]
[26 123]
[27 122]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[34 42]
[35 41]
[49 115]
[50 114]
[51 113]
[52 109]
[53 108]
[54 107]
[55 106]
[56 105]
[57 104]
[58 103]
[82 102]
[83 101]
[84 100]
[87 99]
[88 98]
[89 97]
[90 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
