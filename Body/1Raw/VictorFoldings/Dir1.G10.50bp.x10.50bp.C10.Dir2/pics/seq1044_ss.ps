%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUCAAGCGGGGGGGGGGACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGCCACACCCCCACGGGAAxxxxxxxxxxAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGCCCCCCCCCCAGCAUCAAAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 360.94625854]
[71.19830322 354.93020630]
[59.48964310 345.40078735]
[50.78712082 333.06512451]
[45.73651886 318.83862305]
[44.71262741 303.77691650]
[47.79142761 288.99777222]
[54.74444962 275.59783936]
[65.05573273 264.57150269]
[77.96011353 256.73699951]
[92.50000000 252.67568970]
[92.50000000 237.67568970]
[92.50000000 222.67568970]
[92.50000000 207.67568970]
[92.50000000 192.67568970]
[92.50000000 177.67568970]
[92.50000000 162.67568970]
[92.50000000 147.67568970]
[92.50000000 132.67568970]
[92.50000000 117.67568970]
[86.19443512 113.61492157]
[73.58330536 105.49337769]
[67.27774048 101.43260193]
[53.62150192 107.63800812]
[39.96525955 113.84342194]
[30.87292671 127.49118805]
[14.52700615 126.17098999]
[7.74278069 111.24094391]
[17.49927902 98.05979156]
[33.75985336 100.18717957]
[47.41609573 93.98177338]
[61.07233810 87.77636719]
[59.82539749 72.82761383]
[58.57858658 57.88018799]
[44.08299255 54.02302933]
[29.58739471 50.16587067]
[20.67333412 62.45016861]
[7.92149830 70.68151855]
[-6.94353151 73.74669647]
[-21.91138268 71.23117065]
[-34.95777512 63.47513199]
[-44.31829071 51.52753448]
[-48.72700119 37.00418091]
[-47.58765793 21.86924362]
[-41.05435181 8.16959667]
[-30.01066017 -2.24199748]
[-15.95014858 -7.95745420]
[-0.77438629 -8.20380592]
[13.46422863 -2.94773436]
[24.84004021 7.09991884]
[31.81456375 20.58029175]
[33.44455338 35.67027283]
[47.94015121 39.52743530]
[62.43574524 43.38459396]
[86.35623932 54.43651199]
[100.10630798 72.81929779]
[102.00136566 93.50181580]
[112.21484375 82.51615143]
[122.42832947 71.53048706]
[132.64179993 60.54482651]
[142.85528564 49.55916214]
[136.73179626 28.07119942]
[149.49244690 6.62443304]
[176.38542175 0.53943688]
[182.16169739 -13.30378056]
[187.93797302 -27.14699936]
[193.71423340 -40.99021530]
[181.40876770 -32.41261292]
[166.93667603 -28.46818924]
[151.98062134 -29.61555672]
[138.27952576 -35.72131348]
[127.42642212 -46.07554626]
[120.68318176 -59.47437668]
[118.83383942 -74.35993958]
[122.09340668 -89.00149536]
[130.08290100 -101.69668579]
[141.87339783 -110.96945953]
[156.09402466 -115.74166107]
[171.09135437 -115.45845032]
[185.12165833 -110.15274048]
[196.55364990 -100.44142914]
[204.05813599 -87.45364380]
[206.76258850 -72.69946289]
[204.35160828 -57.89160156]
[214.33433533 -69.08736420]
[224.31706238 -80.28313446]
[234.29978943 -91.47889709]
[228.85855103 -105.78454590]
[230.70025635 -120.97884369]
[239.40168762 -133.57025146]
[252.96331787 -140.66535950]
[268.26879883 -140.63377380]
[281.80102539 -133.48272705]
[290.45040894 -120.85549927]
[292.22937012 -105.65373230]
[286.72909546 -91.37066650]
[275.21356201 -81.28845978]
[260.32891846 -77.72393036]
[245.49555969 -81.49617004]
[235.51283264 -70.30040741]
[225.53010559 -59.10464096]
[215.54737854 -47.90887451]
[207.55746460 -35.21394348]
[201.78118896 -21.37072563]
[196.00491333 -7.52750826]
[190.22863770 6.31570911]
[193.68214417 12.97328758]
[199.78575134 -0.72875667]
[214.30392456 -4.50002003]
[226.30445862 4.49926662]
[226.75091553 19.49262047]
[215.30711365 29.19001389]
[200.58914185 26.28844261]
[204.04263306 32.94602203]
[218.68614197 36.19684601]
[233.32963562 39.44767380]
[248.80014038 34.00746536]
[261.06887817 44.88911438]
[257.51480103 60.89850998]
[241.79408264 65.56655884]
[230.07881165 54.09117508]
[215.43531799 50.84034729]
[200.79180908 47.58952332]
[186.79980469 61.99005508]
[169.00744629 65.82134247]
[153.84095764 59.77264023]
[143.62747192 70.75830841]
[133.41398621 81.74397278]
[123.20050812 92.72963715]
[112.98703003 103.71530151]
[107.50000000 117.67568970]
[107.50000000 132.67568970]
[107.50000000 147.67568970]
[107.50000000 162.67568970]
[107.50000000 177.67568970]
[107.50000000 192.67568970]
[107.50000000 207.67568970]
[107.50000000 222.67568970]
[107.50000000 237.67568970]
[107.50000000 252.67568970]
[122.03988647 256.73699951]
[134.94427490 264.57150269]
[145.25555420 275.59783936]
[152.20857239 288.99777222]
[155.28736877 303.77691650]
[154.26348877 318.83862305]
[149.21287537 333.06512451]
[140.51036072 345.40078735]
[128.80169678 354.93020630]
[114.95575714 360.94625854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 32]
[24 31]
[25 30]
[34 54]
[35 53]
[36 52]
[57 130]
[58 129]
[59 128]
[60 127]
[61 126]
[64 106]
[65 105]
[66 104]
[67 103]
[84 102]
[85 101]
[86 100]
[87 99]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
