%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUAAAACGGGGGGGGGGCCGCCACAUCUACCAUCACCCUCUACAUCACCGCCCCGACCUUAGCUCUCxxxxxxxxxxCUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCCCCCCCCCCCUUAAAC\
) } def
/len { sequence length } bind def

/coor [
[88.04650879 378.63665771]
[74.20057678 372.62063599]
[62.49191284 363.09121704]
[53.78938675 350.75555420]
[48.73878479 336.52902222]
[47.71489334 321.46734619]
[50.79369354 306.68820190]
[57.74671555 293.28826904]
[68.05799866 282.26193237]
[80.96237946 274.42742920]
[95.50226593 270.36611938]
[95.50226593 255.36611938]
[95.50226593 240.36611938]
[95.50226593 225.36611938]
[95.50226593 210.36611938]
[95.50226593 195.36611938]
[95.50226593 180.36611938]
[95.50226593 165.36611938]
[95.50226593 150.36611938]
[95.50226593 135.36611938]
[71.95802307 110.09701538]
[82.52050018 83.61571503]
[75.33798981 70.44713593]
[68.15547943 57.27855301]
[60.97297287 44.10997009]
[47.26177216 50.21319199]
[33.10392380 55.19331741]
[18.59124947 59.01805496]
[3.81787109 61.66259766]
[-11.12040043 63.10979080]
[-26.12668228 63.35025406]
[-41.10365295 62.38242340]
[-55.95417786 60.21257401]
[-70.58194733 56.85478592]
[-84.89208221 52.33083344]
[-98.79179382 46.67005157]
[-112.19091797 39.90915680]
[-125.00257111 32.09199524]
[-137.14364624 23.26926804]
[-148.53541565 13.49819374]
[-159.10400391 2.84213996]
[-168.78083801 -8.62978172]
[-177.50318909 -20.84317207]
[-185.21449280 -33.71881866]
[-191.86470032 -47.17321777]
[-197.41072083 -61.11911392]
[-201.81657410 -75.46605682]
[-205.05368042 -90.12100983]
[-207.10104370 -104.98891449]
[-207.94538879 -119.97335052]
[-207.58123779 -134.97714233]
[-206.01097107 -149.90296936]
[-203.24473572 -164.65405273]
[-199.30050659 -179.13470459]
[-194.20385742 -193.25102234]
[-187.98782349 -206.91145325]
[-180.69273376 -220.02740479]
[-172.36590576 -232.51379395]
[-163.06132507 -244.28967285]
[-152.83935547 -255.27864075]
[-141.76626587 -265.40945435]
[-129.91389465 -274.61639404]
[-117.35910797 -282.83975220]
[-104.18331909 -290.02618408]
[-90.47198486 -296.12908936]
[-76.31403351 -301.10891724]
[-61.80126953 -304.93331909]
[-47.02783585 -307.57754517]
[-32.08953094 -309.02441406]
[-17.08324432 -309.26452637]
[-2.10629535 -308.29638672]
[12.74418163 -306.12622070]
[27.37187576 -302.76809692]
[41.68191528 -298.24383545]
[55.58150101 -292.58273315]
[68.98047638 -285.82153320]
[81.79195404 -278.00411987]
[93.93283844 -269.18112183]
[105.32439423 -259.40979004]
[115.89273834 -248.75349426]
[125.56932831 -237.28135681]
[134.29141235 -225.06777954]
[142.00242615 -212.19197083]
[148.65234375 -198.73741150]
[154.19805908 -184.79139709]
[158.60359192 -170.44435120]
[161.84036255 -155.78933716]
[163.88740540 -140.92138672]
[164.73141479 -125.93692780]
[164.36694336 -110.93315125]
[162.79634094 -96.00734711]
[160.02978516 -81.25633240]
[156.08523560 -66.77576447]
[150.98828125 -52.65955734]
[144.77194214 -38.99926758]
[137.47656250 -25.88348198]
[129.14945984 -13.39726639]
[119.84461975 -1.62159944]
[109.62240601 9.36714840]
[98.54910278 19.49771118]
[86.69652557 28.70438385]
[74.14155579 36.92745972]
[81.32406616 50.09604263]
[88.50657654 63.26462555]
[95.68907928 76.43321228]
[104.58695221 74.10668945]
[114.51504517 75.31636810]
[124.02651215 80.45268250]
[131.55023193 89.30910492]
[135.63540649 101.05304718]
[150.45317078 103.38415527]
[159.53443909 91.06388855]
[173.30609131 84.38554382]
[188.60348511 84.88375092]
[201.91140747 92.44403839]
[210.17178345 105.32910156]
[211.48643494 120.57804108]
[205.55328369 134.68676758]
[193.73570251 144.41320801]
[178.74931335 147.52227783]
[164.03784180 143.29954529]
[152.98190308 132.71537781]
[148.12207031 118.20191193]
[133.30430603 115.87081146]
[127.60379791 120.74463654]
[141.74604797 125.74429321]
[144.48744202 140.49166870]
[133.08659363 150.23951721]
[118.94425201 145.24012756]
[116.20277405 130.49229431]
[110.50226593 135.36611938]
[110.50226593 150.36611938]
[110.50226593 165.36611938]
[110.50226593 180.36611938]
[110.50226593 195.36611938]
[110.50226593 210.36611938]
[110.50226593 225.36611938]
[110.50226593 240.36611938]
[110.50226593 255.36611938]
[110.50226593 270.36611938]
[125.04215240 274.42742920]
[137.94653320 282.26193237]
[148.25781250 293.28826904]
[155.21084595 306.68820190]
[158.28964233 321.46734619]
[157.26574707 336.52902222]
[152.21514893 350.75555420]
[143.51261902 363.09121704]
[131.80395508 372.62063599]
[117.95802307 378.63665771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 105]
[23 104]
[24 103]
[25 102]
[110 124]
[111 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
