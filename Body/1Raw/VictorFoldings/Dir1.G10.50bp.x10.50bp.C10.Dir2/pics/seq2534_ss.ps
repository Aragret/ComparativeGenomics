%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUCCUCCGGGGGGGGGGGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAAUxxxxxxxxxxUACUAUUUUUUAACCAAAUCAACAACAACCUAUUUAGCUGUUCCCCAACCCCCCCCCCCCUUUUCCUCCG\
) } def
/len { sequence length } bind def

/coor [
[57.46221542 386.80630493]
[46.15025330 376.82122803]
[37.80887985 364.24807739]
[33.00682068 349.94412231]
[32.07148743 334.88467407]
[35.06665039 320.09643555]
[41.78810120 306.58776855]
[51.77755737 295.27966309]
[64.35391998 286.94314575]
[78.65970612 282.14660645]
[77.72408295 267.17581177]
[76.78845215 252.20501709]
[75.85282135 237.23423767]
[74.91719818 222.26344299]
[73.98156738 207.29264832]
[73.04593658 192.32185364]
[72.11031342 177.35105896]
[71.17468262 162.38027954]
[70.23905182 147.40948486]
[57.07046890 140.22697449]
[43.97731400 147.54608154]
[30.88416100 154.86518860]
[26.82408333 170.13906860]
[13.11118507 177.99603271]
[-2.11891222 173.77468872]
[-9.83046246 159.97949219]
[-5.44834042 144.79487610]
[8.42761898 137.22961426]
[23.56505585 141.77203369]
[36.65821075 134.45292664]
[49.75136566 127.13381958]
[47.72903061 112.27077484]
[33.15632629 108.71601105]
[18.58362389 105.16124725]
[4.01092196 101.60648346]
[-10.56178093 98.05172729]
[-19.51312447 110.33756256]
[-32.48727798 118.25840759]
[-47.50578308 120.60637665]
[-62.27842331 117.02342224]
[-74.55248260 108.05593109]
[-82.45624542 95.07136536]
[-84.78446198 80.04978180]
[-81.18207550 65.28186798]
[-72.19844055 53.01961899]
[-59.20349121 45.13294220]
[-44.17886353 42.82449341]
[-29.41570091 46.44629669]
[-17.16527939 55.44605255]
[-9.29570103 68.45137024]
[-7.00701904 83.47901917]
[7.56568384 87.03378296]
[22.13838577 90.58854675]
[36.71109009 94.14331055]
[51.28379059 97.69806671]
[57.73870468 80.00617218]
[70.02796173 66.79161072]
[85.77350616 59.72315598]
[102.24298096 59.36465454]
[116.81777954 65.16873932]
[125.83531189 53.18190765]
[134.85284424 41.19507599]
[143.87037659 29.20824432]
[152.88789368 17.22141075]
[161.90542603 5.23457909]
[151.05564880 -5.14899635]
[141.51014709 -16.74295425]
[133.40293884 -29.38453102]
[126.84783173 -42.89626312]
[121.93684387 -57.08846283]
[118.73892212 -71.76189423]
[117.29895782 -86.71057129]
[117.63716888 -101.72463226]
[119.74880219 -116.59329987]
[123.60421753 -131.10784912]
[129.14929199 -145.06451416]
[136.30618286 -158.26736450]
[144.97442627 -170.53105164]
[155.03230286 -181.68342590]
[166.33865356 -191.56790161]
[178.73472595 -200.04573059]
[192.04650879 -206.99790955]
[206.08714294 -212.32681274]
[220.65948486 -215.95764160]
[235.55899048 -217.83944702]
[250.57647705 -217.94577026]
[265.50112915 -216.27516174]
[280.12344360 -212.85104370]
[294.23812866 -207.72149658]
[307.64703369 -200.95852661]
[320.16189575 -192.65707397]
[331.60708618 -182.93370056]
[341.82189941 -171.92488098]
[350.66293335 -159.78515625]
[358.00604248 -146.68498230]
[363.74819946 -132.80824280]
[367.80877686 -118.34973907]
[370.13076782 -103.51246643]
[370.68154907 -88.50469971]
[369.45339966 -73.53713226]
[366.46359253 -58.81988525]
[361.75405884 -44.55956650]
[355.39096069 -30.95636368]
[347.46356201 -18.20125008]
[338.08319092 -6.47328329]
[327.38156128 4.06289101]
[315.50885010 13.25936317]
[302.63174438 20.98702812]
[288.93103027 27.13740349]
[274.59906006 31.62414551]
[259.83700562 34.38426971]
[244.85212708 35.37902451]
[229.85476685 34.59444809]
[215.05548096 32.04154968]
[200.66200256 27.75617790]
[186.87643433 21.79848480]
[173.89225769 14.25210857]
[164.87472534 26.23894119]
[155.85720825 38.22577286]
[146.83967590 50.21260834]
[137.82214355 62.19944000]
[128.80461121 74.18627167]
[137.57836914 85.94571686]
[141.55758667 100.61955261]
[139.81205750 116.25834656]
[132.20018005 130.63583374]
[119.44084930 141.56549072]
[103.05949402 147.22990417]
[85.20984650 146.47384644]
[86.14546967 161.44464111]
[87.08110046 176.41543579]
[88.01673126 191.38623047]
[88.95235443 206.35702515]
[89.88798523 221.32780457]
[90.82361603 236.29859924]
[91.75924683 251.26939392]
[92.69487000 266.24017334]
[93.63050079 281.21096802]
[108.42218018 284.18902588]
[121.93863678 290.89480591]
[133.25830078 300.87115479]
[141.60939026 313.43786621]
[146.42248535 327.73806763]
[147.36944580 342.79681396]
[144.38571167 357.58734131]
[137.67469788 371.10122681]
[127.69396973 382.41702271]
[115.12405396 390.76327515]
[100.82196808 395.57083130]
[85.76286316 396.51199341]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 138]
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 31]
[21 30]
[22 29]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[60 122]
[61 121]
[62 120]
[63 119]
[64 118]
[65 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
