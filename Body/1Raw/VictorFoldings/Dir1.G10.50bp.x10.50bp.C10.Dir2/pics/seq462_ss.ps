%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAACACCGGGGGGGGGGAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACAxxxxxxxxxxCGGGCUACUACAACCCUUCGCUGACGCCAUAAAACUCUUCACCAAAGAGCCCCCCCCCCCCCCUAAAACC\
) } def
/len { sequence length } bind def

/coor [
[120.87573242 354.50119019]
[107.65554047 347.22872925]
[96.76873779 336.78173828]
[88.95760345 323.87246704]
[84.75472260 309.38116455]
[84.44664764 294.29583740]
[88.05438995 279.64498901]
[95.33196259 266.42761230]
[105.78317261 255.54484558]
[118.69543457 247.73869324]
[133.18836975 243.54141235]
[132.87631226 228.54466248]
[132.56425476 213.54789734]
[132.25219727 198.55114746]
[131.94013977 183.55439758]
[131.62808228 168.55764771]
[131.31604004 153.56088257]
[131.00398254 138.56413269]
[130.69192505 123.56738281]
[130.37986755 108.57062531]
[100.40242004 128.78405762]
[75.17617798 107.75865173]
[60.17698669 107.91468811]
[45.17779922 108.07072449]
[31.45886040 115.95115662]
[18.65179062 108.34667206]
[3.65260148 108.50270844]
[-2.31616759 111.58187866]
[-8.06774426 111.19372559]
[-11.97066593 108.34017944]
[-26.96336174 107.87213898]
[-41.95605850 107.40409851]
[-56.94875336 106.93605042]
[-64.97118378 120.03323364]
[-78.47505188 127.35041046]
[-93.82789612 126.91928864]
[-106.89986420 118.85585022]
[-114.17467499 105.32910919]
[-113.69543457 89.97769165]
[-105.59105682 76.93106079]
[-92.04158020 69.69868469]
[-76.69174194 70.22604370]
[-63.67057800 78.37127686]
[-56.48071289 91.94335938]
[-41.48801422 92.41139984]
[-26.49531937 92.87944031]
[-11.50262356 93.34748077]
[3.49656487 93.50351715]
[18.49575424 93.34748077]
[31.14184952 85.47820282]
[45.02176285 93.07153320]
[60.02095032 92.91549683]
[75.02014160 92.75946045]
[90.83729553 72.71028900]
[118.87143707 74.69662476]
[109.12378693 63.29560471]
[93.49048615 58.34261703]
[90.22798157 42.27127457]
[102.69245148 31.61439705]
[118.06151581 37.33486557]
[120.52480316 53.54795456]
[130.27246094 64.94897461]
[145.22055054 63.70209885]
[152.94462585 50.84369659]
[160.66871643 37.98529434]
[168.39280701 25.12689400]
[176.11688232 12.26849079]
[165.32855225 2.37055635]
[156.69288635 -9.44622803]
[150.54341125 -22.72212791]
[147.11701965 -36.94111252]
[146.54478455 -51.55092621]
[148.84696960 -65.98451233]
[153.93226624 -79.68204498]
[161.60153198 -92.11263275]
[171.55546570 -102.79490662]
[183.40635681 -111.31563568]
[196.69314575 -117.34574127]
[210.89939880 -120.65298462]
[225.47335815 -121.11091614]
[239.84939575 -118.70372772]
[253.46992493 -113.52676392]
[261.45983887 -126.22169495]
[269.44973755 -138.91662598]
[262.81558228 -152.84469604]
[264.78732300 -168.14553833]
[274.73580933 -179.93670654]
[289.48648071 -184.45567322]
[304.33248901 -180.26045227]
[314.53649902 -168.68972778]
[316.84246826 -153.43568420]
[310.51455688 -139.36581421]
[297.57199097 -130.96977234]
[282.14468384 -130.92671204]
[274.15475464 -118.23177338]
[266.16485596 -105.53684235]
[277.25827026 -94.86997986]
[285.90740967 -82.13374329]
[291.73596191 -67.87816620]
[294.48937988 -52.71949387]
[294.04626465 -37.31351852]
[290.42340088 -22.32721710]
[283.77536011 -8.40989399]
[274.38784790 3.83497167]
[262.66537476 13.87588692]
[249.11390686 21.27641106]
[234.31893921 25.71413422]
[218.92028809 26.99471283]
[203.58433533 25.06038666]
[188.97528076 19.99257660]
[181.25120544 32.85097885]
[173.52711487 45.70938110]
[165.80303955 58.56778336]
[158.07894897 71.42618561]
[162.98049927 85.60274506]
[176.99720764 90.94425964]
[191.01393127 96.28576660]
[205.03063965 101.62728119]
[219.04734802 106.96879578]
[234.21662903 101.74648285]
[247.67967224 110.47151184]
[249.10877991 126.45078278]
[237.40766907 137.42637634]
[221.55242920 134.97874451]
[213.70584106 120.98550415]
[199.68913269 115.64399719]
[185.67240906 110.30248260]
[171.65570068 104.96096802]
[157.63899231 99.61945343]
[145.37661743 108.25857544]
[145.68867493 123.25532532]
[146.00073242 138.25207520]
[146.31278992 153.24884033]
[146.62484741 168.24559021]
[146.93690491 183.24234009]
[147.24896240 198.23908997]
[147.56100464 213.23585510]
[147.87306213 228.23260498]
[148.18511963 243.22935486]
[162.84011841 246.82012939]
[176.06591797 254.08238220]
[186.96080017 264.52096558]
[194.78189087 277.42419434]
[198.99595642 291.91226196]
[199.31568909 306.99734497]
[195.71925354 321.65097046]
[188.45188904 334.87396240]
[178.00909424 345.76480103]
[165.10285950 353.58090210]
[150.61317444 357.78939819]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 53]
[23 52]
[24 51]
[26 49]
[27 48]
[30 47]
[31 46]
[32 45]
[33 44]
[55 62]
[56 61]
[63 114]
[64 113]
[65 112]
[66 111]
[67 110]
[82 96]
[83 95]
[84 94]
[115 129]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
