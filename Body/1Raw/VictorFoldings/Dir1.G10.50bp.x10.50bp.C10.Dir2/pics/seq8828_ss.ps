%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCUAACAGGGGGGGGGGGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCAxxxxxxxxxxAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUAGUUCCCCCCCCCCACCGCUAACA\
) } def
/len { sequence length } bind def

/coor [
[81.66841125 372.27197266]
[67.82247162 366.25595093]
[56.11381149 356.72653198]
[47.41128922 344.39086914]
[42.36068726 330.16433716]
[41.33679581 315.10266113]
[44.41559601 300.32348633]
[51.36861801 286.92355347]
[61.67990112 275.89724731]
[74.58428192 268.06271362]
[89.12416840 264.00140381]
[89.12416840 249.00140381]
[89.12416840 234.00140381]
[89.12416840 219.00140381]
[89.12416840 204.00140381]
[89.12416840 189.00140381]
[89.12416840 174.00140381]
[89.12416840 159.00140381]
[89.12416840 144.00140381]
[89.12416840 129.00140381]
[76.77259827 120.49031830]
[62.75588226 125.83183289]
[48.73917007 131.17333984]
[34.72245789 136.51486206]
[20.70574379 141.85636902]
[15.75004482 156.68792725]
[2.39326167 164.81997681]
[-13.05794048 162.41284180]
[-23.30797577 150.60305786]
[-23.51709366 134.96687317]
[-13.58655071 122.88720703]
[1.79475033 120.06771088]
[15.36423111 127.83966064]
[29.38094521 122.49814606]
[43.39765930 117.15663147]
[57.41437149 111.81511688]
[71.43108368 106.47360992]
[79.96153259 84.36404419]
[99.51017761 78.46478271]
[104.41172791 64.28822327]
[109.31327820 50.11166382]
[114.21482849 35.93510437]
[107.09123230 49.13565063]
[93.78127289 56.05266190]
[78.88451385 54.29581451]
[67.54885864 44.47222137]
[63.69159698 29.97665215]
[68.64569855 15.81837273]
[80.69915771 6.89009333]
[95.68663025 6.27718210]
[108.42909241 14.19171047]
[97.13008118 4.32598734]
[85.83107758 -5.53973579]
[69.92321777 -11.40286064]
[71.15347290 -28.31211281]
[87.74247742 -31.81088066]
[95.69680023 -16.83874130]
[106.99580383 -6.97301769]
[118.29481506 2.89270568]
[112.77252197 -11.05377483]
[120.94364929 -23.63283348]
[135.93066406 -24.25684929]
[145.11920166 -12.40059471]
[140.77532959 1.95673954]
[151.21514893 -8.81406879]
[161.65496826 -19.58487701]
[172.09477234 -30.35568619]
[162.57299805 -41.96747208]
[154.43696594 -54.58898926]
[147.79273987 -68.05568695]
[142.72694397 -82.19200897]
[139.30561829 -96.81364441]
[137.57336426 -111.72998047]
[137.55278015 -126.74655151]
[139.24412537 -141.66758728]
[142.62533569 -156.29853821]
[147.65235901 -170.44869995]
[154.25962830 -183.93356323]
[162.36102295 -196.57734680]
[171.85092163 -208.21519470]
[182.60560608 -218.69540405]
[194.48484802 -227.88133240]
[207.33380127 -235.65321350]
[220.98493958 -241.90972900]
[235.26029968 -246.56932068]
[249.97378540 -249.57124329]
[264.93353271 -250.87635803]
[279.94454956 -250.46763611]
[294.81112671 -248.35043335]
[309.33944702 -244.55232239]
[323.34011841 -239.12283325]
[336.63058472 -232.13275146]
[349.03759766 -223.67320251]
[360.39938354 -213.85447693]
[370.56784058 -202.80458069]
[379.41040039 -190.66757202]
[386.81179810 -177.60169983]
[392.67550659 -163.77726746]
[396.92507935 -149.37452698]
[399.50512695 -134.58125305]
[400.38204956 -119.59030151]
[399.54437256 -104.59709930]
[397.00299072 -89.79711914]
[392.79110718 -75.38332367]
[386.96359253 -61.54360199]
[379.59640503 -48.45840073]
[370.78561401 -36.29830933]
[360.64608765 -25.22185516]
[349.31002808 -15.37344551]
[336.92520142 -6.88147354]
[323.65304565 0.14334999]
[309.66665649 5.60944223]
[295.14831543 9.44554138]
[280.28732300 11.60163498]
[265.27740479 12.04961586]
[250.31430054 10.78364277]
[235.59301758 7.82021999]
[221.30552673 3.19798231]
[207.63806152 -3.02281022]
[194.76881409 -10.76105690]
[182.86558533 -19.91587448]
[172.42576599 -9.14506531]
[161.98596191 1.62574351]
[151.54614258 12.39655209]
[128.39138794 40.83665466]
[123.48983765 55.01321411]
[118.58828735 69.18977356]
[113.68673706 83.36633301]
[123.97463226 97.31135559]
[121.11746216 116.35317230]
[104.12416840 129.00140381]
[104.12416840 144.00140381]
[104.12416840 159.00140381]
[104.12416840 174.00140381]
[104.12416840 189.00140381]
[104.12416840 204.00140381]
[104.12416840 219.00140381]
[104.12416840 234.00140381]
[104.12416840 249.00140381]
[104.12416840 264.00140381]
[118.66405487 268.06271362]
[131.56843567 275.89724731]
[141.87971497 286.92355347]
[148.83274841 300.32348633]
[151.91154480 315.10266113]
[150.88764954 330.16433716]
[145.83705139 344.39086914]
[137.13452148 356.72653198]
[125.42586517 366.25595093]
[111.57992554 372.27197266]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[39 128]
[40 127]
[41 126]
[42 125]
[51 59]
[52 58]
[53 57]
[64 124]
[65 123]
[66 122]
[67 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
