%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUAUCAUAGGGGGGGGGGUUCAUCGGCGUAAAUCUAACUUUCUUCCCACAACACUUUCUCGGCCUAUCxxxxxxxxxxUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCUACUUCCCCCCCCCCCCCCUAUCAUA\
) } def
/len { sequence length } bind def

/coor [
[75.66430664 365.67611694]
[62.44411087 358.40365601]
[51.55730820 347.95663452]
[43.74617767 335.04739380]
[39.54329681 320.55609131]
[39.23522186 305.47073364]
[42.84296417 290.81991577]
[50.12053680 277.60253906]
[60.57174683 266.71975708]
[73.48400879 258.91360474]
[87.97694397 254.71633911]
[87.66488647 239.71957397]
[87.35282898 224.72282410]
[87.04077148 209.72607422]
[86.72872162 194.72932434]
[86.41666412 179.73255920]
[86.10460663 164.73580933]
[85.79254913 149.73905945]
[85.48049164 134.74230957]
[85.16843414 119.74555206]
[71.99988556 126.92811584]
[57.11951828 125.03747559]
[46.16556549 114.78998566]
[43.28854370 100.06848145]
[49.57856369 86.45100403]
[62.65230942 79.09728241]
[77.55607605 80.79367828]
[88.64334869 90.89846039]
[83.15631104 76.93807220]
[77.66928101 62.97768021]
[72.18225098 49.01728821]
[57.78762817 53.26983643]
[43.07714081 56.25161743]
[28.16275597 57.93993378]
[13.15797520 58.32194138]
[-1.82300091 57.39473343]
[-16.66615677 55.16535950]
[-31.25852394 51.65079498]
[-45.48904419 46.87778473]
[-59.24941254 40.88265228]
[-72.43490601 33.71102905]
[-84.94516754 25.41749382]
[-96.68498993 16.06516838]
[-107.56501770 5.72523069]
[-117.50244904 -5.52362537]
[-126.42166138 -17.59578705]
[-134.25476074 -30.39937782]
[-140.94213867 -43.83695221]
[-146.43289185 -57.80624008]
[-150.68522644 -72.20092010]
[-153.66680908 -86.91144562]
[-155.35491943 -101.82585907]
[-155.73670959 -116.83064270]
[-154.80929565 -131.81161499]
[-152.57971191 -146.65473938]
[-149.06494141 -161.24705505]
[-144.29173279 -175.47750854]
[-138.29640198 -189.23779297]
[-131.12460327 -202.42318726]
[-122.83088684 -214.93331909]
[-113.47840118 -226.67301941]
[-103.13830566 -237.55290222]
[-91.88931274 -247.49017334]
[-79.81702423 -256.40921021]
[-67.01332855 -264.24212646]
[-53.57565689 -270.92932129]
[-39.60629272 -276.41989136]
[-25.21154976 -280.67202759]
[-10.50098228 -283.65338135]
[4.41345215 -285.34127808]
[19.41824341 -285.72286987]
[34.39919281 -284.79525757]
[49.24228668 -282.56546021]
[63.83455658 -279.05047607]
[78.06494141 -274.27706909]
[91.82514191 -268.28155518]
[105.01043701 -261.10955811]
[117.52046204 -252.81567383]
[129.26002502 -243.46302795]
[140.13975525 -233.12277222]
[150.07687378 -221.87364197]
[158.99574280 -209.80123901]
[166.82849121 -196.99742126]
[173.51548767 -183.55966187]
[179.00584412 -169.59022522]
[183.25779724 -155.19541931]
[186.23895264 -140.48480225]
[187.92663574 -125.57035065]
[188.30801392 -110.56555176]
[187.38017273 -95.58461761]
[185.15017700 -80.74155426]
[181.63499451 -66.14933014]
[176.86138916 -51.91901398]
[170.86567688 -38.15889740]
[163.69349670 -24.97370720]
[155.39944458 -12.46379375]
[146.04663086 -0.72436720]
[135.70622253 10.15522766]
[124.45695496 20.09218788]
[112.38441467 29.01088715]
[99.58049774 36.84344864]
[86.14263916 43.53025818]
[91.62966919 57.49064636]
[97.11670685 71.45103455]
[102.60373688 85.41143036]
[114.20507812 94.91978455]
[128.97113037 97.55864716]
[143.73718262 100.19751740]
[158.50325012 102.83638000]
[173.26930237 105.47524261]
[188.03535461 108.11410522]
[202.82806396 110.59922791]
[217.64581299 112.93032837]
[232.46357727 115.26143646]
[247.28134155 117.59253693]
[263.86767578 114.08116913]
[271.83337402 129.04725647]
[259.65728760 140.84468079]
[244.95022583 132.41029358]
[230.13247681 130.07919312]
[215.31471252 127.74808502]
[200.49696350 125.41698456]
[193.35443115 127.49784851]
[185.39648438 122.88016510]
[170.63043213 120.24129486]
[155.86437988 117.60243225]
[141.09832764 114.96356964]
[126.33226776 112.32470703]
[111.56621552 109.68584442]
[100.16519165 119.43349457]
[100.47724915 134.43025208]
[100.78930664 149.42700195]
[101.10135651 164.42375183]
[101.41341400 179.42050171]
[101.72547150 194.41726685]
[102.03752899 209.41401672]
[102.34958649 224.41076660]
[102.66164398 239.40751648]
[102.97369385 254.40428162]
[117.62869263 257.99505615]
[130.85449219 265.25729370]
[141.74937439 275.69589233]
[149.57046509 288.59912109]
[153.78453064 303.08715820]
[154.10426331 318.17227173]
[150.50782776 332.82586670]
[143.24046326 346.04888916]
[132.79766846 356.93972778]
[119.89143372 364.75582886]
[105.40174103 368.96429443]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[28 105]
[29 104]
[30 103]
[31 102]
[106 129]
[107 128]
[108 127]
[109 126]
[110 125]
[111 124]
[112 122]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
