%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUCUUCUUCGGGGGGGGGGGAAACCACACUUAUCCCCACCUUGGCUAUCAUCACCCGAUGAGGCAACCAxxxxxxxxxxUCCAUCAUCACCUCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCCCCCCCCCCCUUUCUUCUUC\
) } def
/len { sequence length } bind def

/coor [
[107.34521484 478.50726318]
[93.49927521 472.49124146]
[81.79061127 462.96182251]
[73.08808899 450.62612915]
[68.03748322 436.39962769]
[67.01359558 421.33795166]
[70.09239197 406.55877686]
[77.04541779 393.15884399]
[87.35669708 382.13250732]
[100.26107788 374.29800415]
[114.80096436 370.23669434]
[114.80096436 355.23669434]
[114.80096436 340.23669434]
[114.80096436 325.23669434]
[114.80096436 310.23669434]
[114.80096436 295.23669434]
[114.80096436 280.23669434]
[114.80096436 265.23669434]
[114.80096436 250.23669434]
[114.80096436 235.23669434]
[114.80096436 220.23669434]
[114.80096436 205.23669434]
[112.46986389 190.41893005]
[107.86429596 176.14347839]
[99.71688843 188.73791504]
[85.09175110 192.07038879]
[72.29237366 184.24888611]
[68.58564758 169.71409607]
[76.07608795 156.71820068]
[90.51096344 152.63966370]
[103.69579315 159.79530334]
[100.90346527 145.05749512]
[98.11114502 130.31968689]
[95.31881714 115.58188629]
[86.08055878 108.42364502]
[84.02453613 96.91892242]
[90.21162415 87.00399017]
[87.72650146 72.21128845]
[73.99498749 65.22904968]
[67.08853149 51.65871048]
[69.46893311 36.79944611]
[80.01637268 26.31662941]
[77.53125763 11.52392197]
[75.04613495 -3.26878548]
[72.56101990 -18.06149292]
[65.96455383 -4.58979654]
[54.25096512 4.77993822]
[39.65943146 8.25659370]
[24.97926331 5.17557287]
[13.01672268 -3.87415671]
[6.05856514 -17.16264915]
[5.43491173 -32.14967728]
[11.26498032 -45.97032547]
[22.43429565 -55.98263931]
[36.80773163 -60.27266312]
[51.63766479 -58.02032089]
[64.08921051 -49.65616608]
[71.78166199 -36.78050232]
[65.21827698 -51.17607498]
[73.98675537 -63.21613693]
[75.23362732 -78.16422272]
[76.48050690 -93.11231232]
[77.72737885 -108.06040192]
[78.97425079 -123.00848389]
[64.61460876 -127.56351471]
[51.62884140 -135.20011902]
[40.66831589 -145.53523254]
[32.28280640 -158.05046082]
[26.89292717 -172.11804199]
[24.76903152 -187.03236389]
[26.01765442 -202.04530334]
[30.57616425 -216.40385437]
[38.21590805 -229.38777161]
[48.55368042 -240.34579468]
[61.07094193 -248.72827148]
[75.13983154 -254.11473083]
[90.05465698 -256.23501587]
[105.06730652 -254.98275757]
[119.42474365 -250.42077637]
[132.40681458 -242.77787781]
[143.36231995 -232.43745422]
[151.74176025 -219.91816711]
[157.12483215 -205.84796143]
[159.24150085 -190.93261719]
[157.98559570 -175.92027283]
[153.42013550 -161.56394958]
[145.77409363 -148.58374023]
[135.43101501 -137.63072205]
[122.90969849 -129.25431824]
[108.83819580 -123.87466431]
[93.92234039 -121.76161194]
[92.67546844 -106.81352234]
[91.42858887 -91.86544037]
[90.18171692 -76.91735077]
[88.93484497 -61.96926498]
[95.58740997 -48.64287567]
[86.72975159 -35.53362656]
[87.35372925 -20.54661179]
[89.83884430 -5.75390387]
[92.32396698 9.03880310]
[94.80908203 23.83151054]
[108.20298004 30.29227448]
[115.30827332 43.55797577]
[113.21533966 58.64018250]
[102.51921082 69.72616577]
[105.00432587 84.51887512]
[116.01611328 97.13773346]
[110.05662537 112.78955841]
[112.84895325 127.52736664]
[115.64127350 142.26516724]
[118.43360138 157.00297546]
[122.13976288 171.53791809]
[126.74532318 185.81336975]
[130.66188049 171.33370972]
[139.46289062 159.18701172]
[152.00224304 150.95509338]
[166.64700317 147.70994568]
[181.49005127 149.87417603]
[194.59844971 157.16593933]
[204.26516724 168.63568115]
[209.23132324 182.78973389]
[208.85023499 197.78489685]
[203.17149353 211.66841125]
[192.93464661 222.63229370]
[179.47277832 229.24879456]
[164.53895569 230.65625000]
[150.07794189 226.67138672]
[137.97293091 217.81312561]
[129.80096436 205.23669434]
[129.80096436 220.23669434]
[129.80096436 235.23669434]
[129.80096436 250.23669434]
[129.80096436 265.23669434]
[129.80096436 280.23669434]
[129.80096436 295.23669434]
[129.80096436 310.23669434]
[129.80096436 325.23669434]
[129.80096436 340.23669434]
[129.80096436 355.23669434]
[129.80096436 370.23669434]
[144.34085083 374.29800415]
[157.24523926 382.13250732]
[167.55651855 393.15884399]
[174.50953674 406.55877686]
[177.58834839 421.33795166]
[176.56445312 436.39962769]
[171.51385498 450.62612915]
[162.81132507 462.96182251]
[151.10266113 472.49124146]
[137.25672913 478.50726318]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 113]
[24 112]
[31 111]
[32 110]
[33 109]
[34 108]
[37 106]
[38 105]
[42 101]
[43 100]
[44 99]
[45 98]
[58 97]
[60 95]
[61 94]
[62 93]
[63 92]
[64 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
