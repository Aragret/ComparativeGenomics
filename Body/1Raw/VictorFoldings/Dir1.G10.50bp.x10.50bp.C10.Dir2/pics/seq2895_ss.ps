%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUUUCGGUUGGGGGGGGGGGGGGCGACCUCGGAGCAGAACCCAACCUCCGAGCAGUACAUGCUAAGACUxxxxxxxxxxUUACCACGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUAAUCUUAUAGCCCCCCCCCCAAAUUUAGGUU\
) } def
/len { sequence length } bind def

/coor [
[89.21123505 413.55645752]
[74.15605927 413.95120239]
[59.36810303 411.09982300]
[45.53901291 405.13574219]
[33.31560898 396.33789062]
[23.26959801 385.11773682]
[15.87085342 372.00009155]
[11.46542645 357.59848022]
[10.25936604 342.58648682]
[12.30908298 327.66629028]
[17.51870918 313.53567505]
[25.64457893 300.85562134]
[36.30662918 290.21911621]
[49.00618362 282.12371826]
[63.14925385 276.94805908]
[78.07434082 274.93417358]
[79.30495453 259.98474121]
[80.53556824 245.03529358]
[81.76618195 230.08586121]
[82.99679565 215.13642883]
[84.22740936 200.18699646]
[85.45801544 185.23756409]
[86.68862915 170.28813171]
[87.91924286 155.33869934]
[89.14985657 140.38925171]
[90.38047028 125.43982697]
[82.00540924 123.18161011]
[74.22425079 118.09712982]
[67.99768066 110.37689209]
[64.21307373 100.53617096]
[63.57622147 89.38426971]
[48.75373840 87.08339691]
[33.93125534 84.78252411]
[19.10877419 82.48165131]
[4.28629303 80.18077087]
[-10.53618908 77.87989807]
[-19.59231567 90.21866608]
[-33.35031128 96.92508698]
[-48.64869308 96.45807648]
[-61.97200394 88.92494965]
[-70.25864410 76.05676270]
[-71.60440063 60.81053543]
[-65.70003510 46.68973541]
[-53.90232468 36.93921661]
[-38.92229843 33.79958344]
[-24.20225143 37.99229431]
[-13.12474728 48.55389786]
[-8.23531437 63.05741501]
[6.58716774 65.35829163]
[21.40964890 67.65916443]
[36.23213196 69.96004486]
[51.05461502 72.26091766]
[65.87709808 74.56179047]
[73.10879517 61.42015839]
[63.23309326 50.12987900]
[53.35738754 38.83959961]
[37.51034546 36.33942413]
[29.71018791 22.32025528]
[35.94052887 7.53639841]
[51.42197800 3.32876325]
[64.27850342 12.92508793]
[64.64766693 28.96389198]
[74.52336884 40.25417328]
[84.39907837 51.54445267]
[99.37931824 52.31411362]
[110.36012268 42.09540558]
[121.34092712 31.87669945]
[132.32173157 21.65799141]
[143.30253601 11.43928432]
[134.36732483 -0.62894285]
[126.83953857 -13.62172985]
[120.81385040 -27.37567711]
[116.36603546 -41.71781540]
[113.55202484 -56.46777725]
[112.40721893 -71.44006348]
[112.94599915 -86.44638824]
[115.16160583 -101.29802704]
[119.02616119 -115.80820465]
[124.49107361 -129.79443359]
[131.48760986 -143.08084106]
[139.92779541 -155.50030518]
[149.70547485 -166.89668274]
[160.69767761 -177.12660217]
[172.76617432 -186.06144714]
[185.75918579 -193.58883667]
[199.51330566 -199.61412048]
[213.85557556 -204.06150818]
[228.60562134 -206.87507629]
[243.57794189 -208.01943970]
[258.58425903 -207.48020935]
[273.43582153 -205.26416016]
[287.94589233 -201.39916992]
[301.93194580 -195.93383789]
[315.21813965 -188.93690491]
[327.63735962 -180.49635315]
[339.03344727 -170.71833801]
[349.26303101 -159.72583008]
[358.19754028 -147.65705872]
[365.72451782 -134.66381836]
[371.74938965 -120.90951538]
[376.19635010 -106.56710815]
[379.00949097 -91.81697845]
[380.15341187 -76.84462738]
[379.61370850 -61.83833313]
[377.39721680 -46.98683167]
[373.53179932 -32.47688675]
[368.06604004 -18.49097824]
[361.06872559 -5.20499659]
[352.62777710 7.21397448]
[342.84942627 18.60975266]
[331.85662842 28.83902550]
[319.78759766 37.77314758]
[306.79412842 45.29976654]
[293.03964233 51.32422256]
[278.69711304 55.77075195]
[263.94689941 58.58343506]
[248.97450256 59.72690201]
[233.96823120 59.18677139]
[219.11679077 56.96983719]
[204.60696411 53.10397720]
[190.62121582 47.63780975]
[177.33544922 40.64007568]
[164.91671753 32.19878387]
[153.52124023 22.42008781]
[142.54043579 32.63879395]
[131.55963135 42.85750198]
[120.57882690 53.07621002]
[109.59803009 63.29491425]
[131.38885498 86.02632904]
[127.33764648 114.14055634]
[105.32990265 126.67043304]
[104.09928894 141.61987305]
[102.86867523 156.56930542]
[101.63806152 171.51873779]
[100.40745544 186.46817017]
[99.17684174 201.41760254]
[97.94622803 216.36705017]
[96.71561432 231.31648254]
[95.48500061 246.26591492]
[94.25438690 261.21533203]
[93.02378082 276.16479492]
[107.41863251 280.59222412]
[120.52494049 288.01104736]
[131.72970581 298.07418823]
[140.50886536 310.31103516]
[146.45179749 324.14923096]
[149.28054810 338.94155884]
[148.86279297 353.99609375]
[145.21807861 368.60876465]
[138.51687622 382.09609985]
[129.07261658 393.82723999]
[117.32702637 403.25357056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 132]
[26 131]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[54 64]
[55 63]
[56 62]
[65 128]
[66 127]
[67 126]
[68 125]
[69 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
