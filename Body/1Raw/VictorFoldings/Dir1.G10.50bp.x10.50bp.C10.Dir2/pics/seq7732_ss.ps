%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAAAUCAAGGGGGGGGGGUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCGGACUAxxxxxxxxxxCACAACCACCCACAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUUUUUACCCCCCCCCCACCAAAUCAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 378.98541260]
[71.19830322 372.96939087]
[59.48964310 363.43997192]
[50.78712082 351.10430908]
[45.73651886 336.87777710]
[44.71262741 321.81610107]
[47.79142761 307.03695679]
[54.74444962 293.63702393]
[65.05573273 282.61068726]
[77.96011353 274.77618408]
[92.50000000 270.71487427]
[92.50000000 255.71487427]
[92.50000000 240.71487427]
[92.50000000 225.71487427]
[92.50000000 210.71487427]
[92.50000000 195.71487427]
[92.50000000 180.71487427]
[92.50000000 165.71487427]
[92.50000000 150.71487427]
[92.50000000 135.71487427]
[92.50000000 120.71486664]
[79.10485077 106.98201752]
[81.55345154 87.95505524]
[72.53592682 75.96822357]
[63.51839447 63.98139191]
[48.80749893 67.70498657]
[33.83209610 65.51860046]
[20.86969948 57.78620148]
[11.87962532 45.71283340]
[8.20684052 31.15689087]
[10.38082600 16.34408569]
[18.03948975 3.52713871]
[9.02196026 -8.45969391]
[0.00443088 -20.44652748]
[-9.01309872 -32.43336105]
[-23.83304977 -25.61982346]
[-39.78040695 -22.22486115]
[-56.07758713 -22.41110229]
[-71.93058777 -26.16662979]
[-86.56767273 -33.30570221]
[-99.27693939 -43.47793198]
[-109.44094086 -56.18548584]
[-116.56667328 -70.80744934]
[-120.30953217 -86.63017273]
[-120.48989868 -102.88207245]
[-117.10184479 -118.77128601]
[-110.31321716 -133.52426147]
[-100.45735168 -146.42338562]
[-110.20500946 -157.82441711]
[-119.95265961 -169.22543335]
[-134.80148315 -174.68646240]
[-137.19134521 -189.38809204]
[-152.04017639 -194.84913635]
[-154.43003845 -209.55075073]
[-164.17768860 -220.95178223]
[-173.92533875 -232.35279846]
[-189.55862427 -237.30578613]
[-192.82113647 -253.37713623]
[-180.35667419 -264.03399658]
[-164.98760986 -258.31353760]
[-162.52430725 -242.10044861]
[-152.77665710 -230.69943237]
[-143.02900696 -219.29841614]
[-128.87739563 -214.65284729]
[-125.79032135 -199.13574219]
[-111.63871765 -194.49018860]
[-108.55163574 -178.97308350]
[-98.80398560 -167.57206726]
[-89.05633545 -156.17103577]
[-77.06027222 -162.93115234]
[-64.01007080 -167.33793640]
[-50.36271667 -169.23533630]
[-36.59642029 -168.55519104]
[-23.19388199 -165.31967163]
[-10.62535572 -159.64059448]
[0.66784602 -151.71554565]
[10.28885365 -141.82098389]
[17.89917946 -130.30264282]
[23.23063660 -117.56339264]
[26.09477806 -104.04923248]
[26.38956642 -90.23356628]
[24.10300064 -76.60072327]
[19.31360245 -63.62891388]
[12.18771648 -51.77347565]
[2.97373366 -41.45088959]
[11.99126339 -29.46405602]
[21.00879288 -17.47722435]
[30.02632332 -5.49039125]
[44.46395493 -9.29618454]
[59.29892349 -7.27898359]
[72.26641846 0.28467962]
[81.37469482 12.26911926]
[85.21102142 26.86693764]
[83.16066742 41.86157227]
[75.50522614 54.96385956]
[84.52275848 66.95069122]
[93.54029083 78.93752289]
[109.52929688 80.13675690]
[120.47075653 91.85729218]
[135.46345520 91.38924408]
[149.01548767 83.22511292]
[161.97798157 90.56151581]
[176.97067261 90.09347534]
[190.52270508 81.92933655]
[203.48519897 89.26574707]
[218.47790527 88.79769897]
[233.47059631 88.32965851]
[240.66046143 74.75757599]
[253.68162537 66.61234283]
[269.03146362 66.08499146]
[282.58093262 73.31735992]
[290.68533325 86.36399841]
[291.16455078 101.71540833]
[283.88973999 115.24214935]
[270.81777954 123.30559540]
[255.46493530 123.73670959]
[241.96107483 116.41954041]
[233.93864441 103.32235718]
[218.94593811 103.79039764]
[203.95324707 104.25843811]
[191.47360229 112.38909912]
[177.43872070 105.08617401]
[162.44602966 105.55421448]
[149.96636963 113.68487549]
[135.93150330 106.38194275]
[120.93880463 106.84998322]
[118.86214447 111.38311005]
[115.81929779 115.33315277]
[111.96612549 118.49777222]
[107.50000000 120.71486664]
[107.50000000 135.71487427]
[107.50000000 150.71487427]
[107.50000000 165.71487427]
[107.50000000 180.71487427]
[107.50000000 195.71487427]
[107.50000000 210.71487427]
[107.50000000 225.71487427]
[107.50000000 240.71487427]
[107.50000000 255.71487427]
[107.50000000 270.71487427]
[122.03988647 274.77618408]
[134.94427490 282.61068726]
[145.25555420 293.63702393]
[152.20857239 307.03695679]
[155.28736877 321.81610107]
[154.26348877 336.87777710]
[149.21287537 351.10430908]
[140.51036072 363.43997192]
[128.80169678 372.96939087]
[114.95575714 378.98541260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 97]
[24 96]
[25 95]
[32 88]
[33 87]
[34 86]
[35 85]
[48 69]
[49 68]
[50 67]
[52 65]
[54 63]
[55 62]
[56 61]
[99 126]
[100 125]
[102 123]
[103 122]
[105 120]
[106 119]
[107 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
