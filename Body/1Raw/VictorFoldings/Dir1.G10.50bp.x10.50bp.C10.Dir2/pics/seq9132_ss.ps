%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAUUUUACGGGGGGGGGGUGGGUCUCUAUUUUACCCUCCUACAAGCCUCAGAGUACUUCGAGUCUCCCxxxxxxxxxxUGCCCCUACUCCUCCUAGACCUAACCUGACUAGAAAAGCUAUUACCUAAACCCCCCCCCCACAAUUUCAC\
) } def
/len { sequence length } bind def

/coor [
[86.77810669 440.98611450]
[72.93216705 434.97009277]
[61.22350693 425.44067383]
[52.52098465 413.10501099]
[47.47038269 398.87847900]
[46.44649124 383.81680298]
[49.52528763 369.03762817]
[56.47830963 355.63769531]
[66.78959656 344.61138916]
[79.69397736 336.77685547]
[94.23386383 332.71554565]
[94.23386383 317.71554565]
[94.23386383 302.71554565]
[94.23386383 287.71554565]
[94.23386383 272.71554565]
[94.23386383 257.71554565]
[94.23386383 242.71554565]
[94.23386383 227.71554565]
[94.23386383 212.71554565]
[94.23386383 197.71554565]
[94.23386383 182.71554565]
[93.92180634 167.71879578]
[93.29782867 152.73178101]
[92.67385101 137.74476624]
[92.04987335 122.75775146]
[81.83639526 111.77208710]
[66.93449402 110.05939484]
[52.03258896 108.34670258]
[37.13068771 106.63401794]
[31.59688377 120.67108917]
[22.61779785 132.79702759]
[10.80563927 142.18507385]
[-3.03422141 148.19511414]
[-17.95815849 150.41740417]
[-32.94863129 148.70039368]
[-46.98356628 143.16117859]
[-59.10604095 134.17739868]
[-68.48951721 122.36161804]
[-74.49422455 108.51943970]
[-76.71073914 93.59465027]
[-74.98794556 78.60483551]
[-69.44330597 64.57204437]
[-60.45486069 52.45303726]
[-48.63545227 43.07412338]
[-34.79095840 37.07476425]
[-19.86530876 34.86400986]
[-4.87616491 36.59259033]
[9.15448952 42.14264679]
[21.27002144 51.13577271]
[30.64437294 62.95880127]
[36.63838577 76.80561066]
[38.84337616 91.73211670]
[53.74528122 93.44480133]
[68.64717865 95.15749359]
[83.54908752 96.87018585]
[84.66211700 90.18222046]
[88.56706238 83.98654175]
[95.00240326 79.45827484]
[103.21550751 77.62396240]
[110.12250519 64.30880737]
[117.02950287 50.99364853]
[116.51579285 35.18078613]
[129.24450684 27.44584656]
[136.15150452 14.13069153]
[143.05850220 0.81553560]
[149.96549988 -12.49962044]
[137.77470398 -21.28610229]
[126.99320221 -31.75401115]
[117.85080719 -43.68022156]
[110.54239655 -56.81052780]
[105.22373962 -70.86505890]
[102.00820923 -85.54423523]
[100.96434021 -100.53517151]
[102.11438751 -115.51833344]
[105.43383789 -130.17436218]
[110.85193634 -144.19085693]
[118.25318909 -157.26905823]
[127.47985077 -169.13018799]
[138.33523560 -179.52145386]
[150.58798218 -188.22134399]
[163.97691345 -195.04443359]
[178.21664429 -199.84527588]
[193.00364685 -202.52154541]
[208.02273560 -203.01618958]
[222.95378113 -201.31867981]
[237.47854614 -197.46519470]
[251.28739929 -191.53785706]
[264.08602905 -183.66304016]
[275.60162354 -174.00856018]
[285.58874512 -162.78021240]
[293.83447266 -150.21734619]
[300.16308594 -136.58773804]
[304.43969727 -122.18188477]
[306.57312012 -107.30686188]
[306.51788330 -92.27972412]
[304.27517700 -77.42078400]
[299.89282227 -63.04674911]
[293.46420288 -49.46401596]
[285.12634277 -36.96209717]
[275.05697632 -25.80746841]
[263.47073364 -16.23789406]
[250.61456299 -8.45734978]
[236.76249695 -2.63167691]
[222.20982361 1.11494839]
[207.26669312 2.70266724]
[192.25164795 2.09763694]
[177.48471069 -0.68724591]
[163.28065491 -5.59262133]
[156.37365723 7.72253418]
[149.46665955 21.03768921]
[142.55966187 34.35284424]
[143.56739807 49.21332169]
[130.34466553 57.90065002]
[123.43766022 71.21580505]
[116.53066254 84.53096008]
[122.59367371 98.25101471]
[137.08926392 102.10816956]
[152.77267456 97.31622314]
[164.57812500 108.69881439]
[160.36119080 124.54650879]
[144.45988464 128.55656433]
[133.23211670 116.60376740]
[118.73651123 112.74661255]
[107.03688812 122.13377380]
[107.66086578 137.12078857]
[108.28484344 152.10780334]
[108.90882111 167.09481812]
[112.17273712 172.96459961]
[111.96424103 178.72549438]
[109.23386383 182.71554565]
[109.23386383 197.71554565]
[109.23386383 212.71554565]
[109.23386383 227.71554565]
[109.23386383 242.71554565]
[109.23386383 257.71554565]
[109.23386383 272.71554565]
[109.23386383 287.71554565]
[109.23386383 302.71554565]
[109.23386383 317.71554565]
[109.23386383 332.71554565]
[123.77375031 336.77685547]
[136.67813110 344.61138916]
[146.98941040 355.63769531]
[153.94244385 369.03762817]
[157.02124023 383.81680298]
[155.99734497 398.87847900]
[150.94674683 413.10501099]
[142.24421692 425.44067383]
[130.53555298 434.97009277]
[116.68962097 440.98611450]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 127]
[23 126]
[24 125]
[25 124]
[26 55]
[27 54]
[28 53]
[29 52]
[59 115]
[60 114]
[61 113]
[63 111]
[64 110]
[65 109]
[66 108]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
