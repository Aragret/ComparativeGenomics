%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACAAACCCGGGGGGGGGGACAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCxxxxxxxxxxAAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCAAAAUUCAGAAUAACCCCCCCCCCUAACACACCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 365.12161255]
[71.19830322 359.10559082]
[59.48964310 349.57617188]
[50.78712082 337.24050903]
[45.73651886 323.01397705]
[44.71262741 307.95230103]
[47.79142761 293.17315674]
[54.74444962 279.77322388]
[65.05573273 268.74688721]
[77.96011353 260.91238403]
[92.50000000 256.85107422]
[92.50000000 241.85105896]
[92.50000000 226.85105896]
[92.50000000 211.85105896]
[92.50000000 196.85105896]
[92.50000000 181.85105896]
[92.50000000 166.85105896]
[92.50000000 151.85105896]
[92.50000000 136.85105896]
[92.50000000 121.85105896]
[85.35563660 117.86788940]
[80.04710388 111.64477539]
[65.33914185 114.59025574]
[50.63117981 117.53574371]
[35.92321777 120.48122406]
[21.21525764 123.42670441]
[17.91477585 138.29367065]
[8.84747982 150.52903748]
[-4.41566896 158.01293945]
[-19.57674789 159.44874573]
[-34.00901031 154.58770752]
[-45.21197891 144.27201843]
[-51.24466705 130.28894043]
[-51.06188202 115.06111908]
[-44.69528961 101.22686768]
[-33.24794006 91.18306732]
[-18.70315552 86.66984558]
[-3.58090901 88.46916199]
[9.49878025 96.26926422]
[18.26977539 108.71874237]
[32.97773743 105.77326202]
[47.68569946 102.82778168]
[62.39366150 99.88229370]
[77.10162354 96.93681335]
[86.11158752 81.53839874]
[103.40410614 77.14981842]
[110.31110382 63.83465958]
[117.21810150 50.51950455]
[110.44244385 36.68488693]
[113.08140564 21.68857956]
[123.91656494 11.24523926]
[138.64720154 9.20897865]
[145.55419922 -4.10617685]
[152.46119690 -17.42133331]
[159.36819458 -30.73648834]
[166.27519226 -44.05164337]
[165.90112305 -48.52618790]
[166.90675354 -52.47077560]
[168.94509888 -55.50837326]
[171.58076477 -57.41814804]
[174.35032654 -58.15087128]
[182.34024048 -70.84580231]
[190.33015442 -83.54073334]
[198.32008362 -96.23565674]
[206.30999756 -108.93058777]
[208.25321960 -117.92368317]
[214.60050964 -121.80409241]
[222.85279846 -134.33004761]
[212.83657837 -144.40164185]
[205.00270081 -156.24412537]
[199.65626526 -169.39260864]
[197.00474548 -183.33139038]
[197.14999390 -197.51417542]
[200.08427429 -211.38558960]
[205.69068909 -224.40277100]
[213.74777222 -236.05676270]
[223.93830872 -245.89230347]
[235.86181641 -253.52569580]
[249.05021667 -258.65966797]
[262.98626709 -261.09512329]
[277.12384033 -260.73864746]
[290.90936279 -257.60626221]
[303.80334473 -251.82260132]
[312.56954956 -263.99444580]
[321.33575439 -276.16629028]
[330.10195923 -288.33810425]
[325.11782837 -303.03295898]
[329.75512695 -317.84088135]
[342.23074341 -327.06796265]
[357.74749756 -327.16619873]
[370.33892822 -318.09780884]
[375.16333008 -303.34979248]
[370.36566162 -288.59301758]
[357.79071045 -279.50180054]
[342.27380371 -279.57189941]
[333.50756836 -267.40008545]
[324.74136353 -255.22824097]
[315.97515869 -243.05639648]
[326.56570435 -231.27307129]
[334.30081177 -217.43878174]
[338.79714966 -202.23304749]
[339.83059692 -186.40344238]
[337.34732056 -170.72892761]
[331.46664429 -155.98147583]
[322.47525024 -142.88804626]
[310.81329346 -132.09478760]
[297.05276489 -124.13512421]
[281.86944580 -119.40338135]
[266.00985718 -118.13528442]
[250.25430298 -120.39619446]
[235.37875366 -126.07776642]
[227.12646484 -113.55180359]
[219.00492859 -100.94067383]
[211.01499939 -88.24574280]
[203.02508545 -75.55081177]
[195.03517151 -62.85588455]
[187.04525757 -50.16095352]
[179.59034729 -37.14464569]
[172.68334961 -23.82949066]
[165.77635193 -10.51433372]
[158.86935425 2.80082154]
[151.96235657 16.11597824]
[158.78170776 29.33090973]
[156.48477173 44.20330429]
[145.74531555 54.99762344]
[130.53326416 57.42650223]
[123.62625885 70.74166107]
[116.71926117 84.05681610]
[122.99954987 97.82297516]
[119.41372681 112.52301788]
[107.50000000 121.85105896]
[107.50000000 136.85105896]
[107.50000000 151.85105896]
[107.50000000 166.85105896]
[107.50000000 181.85105896]
[107.50000000 196.85105896]
[107.50000000 211.85105896]
[107.50000000 226.85105896]
[107.50000000 241.85105896]
[107.50000000 256.85107422]
[122.03988647 260.91238403]
[134.94427490 268.74688721]
[145.25555420 279.77322388]
[152.20857239 293.17315674]
[155.28736877 307.95230103]
[154.26348877 323.01397705]
[149.21287537 337.24050903]
[140.51036072 349.57617188]
[128.80169678 359.10559082]
[114.95575714 365.12161255]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[46 128]
[47 127]
[48 126]
[52 122]
[53 121]
[54 120]
[55 119]
[56 118]
[61 117]
[62 116]
[63 115]
[64 114]
[65 113]
[67 112]
[68 111]
[83 98]
[84 97]
[85 96]
[86 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
