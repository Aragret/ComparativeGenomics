%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGCAAGCAGGGGGGGGGGUCCCCGUUCCAGUGAGUUCACCCUCUAAAUCACCACGAUCAAAAGGAACAxxxxxxxxxxACCAAAAAAAUAAACCCUCGUUCCACAGAAGCUGCCAUCAAGUAUUUCCUCCCCCCCCCCCACGCAAGCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 357.25100708]
[71.19830322 351.23498535]
[59.48964310 341.70556641]
[50.78712082 329.36990356]
[45.73651886 315.14337158]
[44.71262741 300.08169556]
[47.79142761 285.30252075]
[54.74444962 271.90258789]
[65.05573273 260.87628174]
[77.96011353 253.04176331]
[92.50000000 248.98045349]
[92.50000000 233.98045349]
[92.50000000 218.98045349]
[92.50000000 203.98045349]
[92.50000000 188.98045349]
[92.50000000 173.98045349]
[92.50000000 158.98045349]
[92.50000000 143.98045349]
[92.50000000 128.98045349]
[92.50000000 113.98044586]
[85.07800293 127.01554871]
[70.15307617 128.51438904]
[60.28732300 117.21540833]
[63.78461838 102.62880707]
[77.70141602 97.03193665]
[62.83836746 95.00960541]
[47.97532272 92.98727417]
[41.21358871 99.72290802]
[32.23105240 102.51298523]
[23.11505508 100.84330750]
[15.92239666 95.22085571]
[12.21533394 87.02944183]
[-2.49262738 84.08395386]
[-17.20058823 81.13847351]
[-31.90855026 78.19299316]
[-46.95938110 83.06977844]
[-57.91952515 72.98391724]
[-72.62748718 70.03843689]
[-83.94400024 80.65522003]
[-99.34381104 82.55929565]
[-112.90537262 75.01850128]
[-119.41399384 60.93243027]
[-116.36698151 45.71746063]
[-104.93595886 35.22406006]
[-89.51640320 33.48715591]
[-76.03743744 41.17462158]
[-69.68200684 55.33047104]
[-54.97404480 58.27595520]
[-40.97522354 53.18849182]
[-28.96306801 63.48503113]
[-14.25510597 66.43051147]
[0.45285517 69.37599182]
[15.16081715 72.32147980]
[33.98573303 63.94617844]
[49.99765778 78.12422180]
[64.86070251 80.14656067]
[79.72374725 82.16889191]
[75.11795807 67.89350128]
[80.98448944 54.08829117]
[94.45810699 47.49575043]
[108.95827484 51.33568954]
[117.40308380 63.73267365]
[115.66806793 78.63199615]
[104.60100555 88.75662994]
[116.30062866 79.36946869]
[128.00024414 69.98230743]
[139.69987488 60.59514618]
[151.39949036 51.20798492]
[143.30072021 38.56512451]
[136.59170532 25.13303185]
[131.34846497 11.06389809]
[127.63040161 -3.48285961]
[125.47966003 -18.34241486]
[124.92060852 -33.34640121]
[125.95957184 -48.32480621]
[128.58477783 -63.10791779]
[132.76649475 -77.52822876]
[138.45732117 -91.42234802]
[145.59278870 -104.63284302]
[154.09204102 -117.01003265]
[163.85877991 -128.41366577]
[174.78233337 -138.71453857]
[186.73893738 -147.79592896]
[199.59310913 -155.55494690]
[213.19920349 -161.90367126]
[227.40306091 -166.77015686]
[242.04373169 -170.09927368]
[256.95532227 -171.85328674]
[271.96887207 -172.01234436]
[286.91427612 -170.57463074]
[301.62219238 -167.55644226]
[315.92593384 -162.99195862]
[329.66348267 -156.93292236]
[342.67916870 -149.44798279]
[354.82546997 -140.62193298]
[365.96481323 -130.55479431]
[375.97094727 -119.36063385]
[384.73052979 -107.16628265]
[392.14425659 -94.10992432]
[398.12817383 -80.33948517]
[402.61444092 -66.01100159]
[405.55224609 -51.28682709]
[406.90832520 -36.33379364]
[406.66726685 -21.32133484]
[404.83181763 -6.41954851]
[401.42276001 8.20271397]
[396.47875977 22.37977219]
[390.05581665 35.95098877]
[382.22671509 48.76258850]
[373.08013916 60.66941071]
[362.71975708 71.53653717]
[351.26293945 81.24083710]
[338.83950806 89.67236328]
[325.59024048 96.73555756]
[311.66525269 102.35041046]
[297.22232056 106.45329285]
[282.42507935 108.99771118]
[267.44122314 109.95484161]
[252.44050598 109.31383514]
[237.59292603 107.08196259]
[223.06669617 103.28450012]
[209.02641296 97.96448517]
[195.63116455 91.18219757]
[183.03273010 83.01448059]
[171.37385559 73.55388641]
[160.78666687 62.90760803]
[149.08703613 72.29476929]
[137.38740540 81.68193054]
[125.68778992 91.06909180]
[113.98816681 100.45625305]
[107.50000000 113.98044586]
[107.50000000 128.98045349]
[107.50000000 143.98045349]
[107.50000000 158.98045349]
[107.50000000 173.98045349]
[107.50000000 188.98045349]
[107.50000000 203.98045349]
[107.50000000 218.98045349]
[107.50000000 233.98045349]
[107.50000000 248.98045349]
[122.03988647 253.04176331]
[134.94427490 260.87628174]
[145.25555420 271.90258789]
[152.20857239 285.30252075]
[155.28736877 300.08169556]
[154.26348877 315.14337158]
[149.21287537 329.36990356]
[140.51036072 341.70556641]
[128.80169678 351.23498535]
[114.95575714 357.25100708]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 57]
[26 56]
[27 55]
[32 53]
[33 52]
[34 51]
[35 50]
[37 48]
[38 47]
[64 130]
[65 129]
[66 128]
[67 127]
[68 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
