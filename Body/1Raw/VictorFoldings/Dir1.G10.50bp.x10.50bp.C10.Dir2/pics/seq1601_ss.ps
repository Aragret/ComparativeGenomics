%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUCAGCAAGGGGGGGGGGACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACCCACGUAAAGACGUUAxxxxxxxxxxGUAUUUCCUCACGCAAGCAACCGCAUCCAUAAUCCUUCUAAUAGCUAUCCCCCCCCCCCCUCUUCAACAA\
) } def
/len { sequence length } bind def

/coor [
[98.65106964 591.19940186]
[86.09284973 582.84826660]
[76.00662231 571.63580322]
[69.02642822 558.26690674]
[65.59104919 543.58190918]
[65.91642761 528.50396729]
[69.98210907 513.98083496]
[77.53253174 500.92547607]
[88.09305573 490.15859985]
[100.99985504 482.35696411]
[115.44158173 478.01101685]
[114.81760406 463.02398682]
[114.19362640 448.03698730]
[113.56964874 433.04995728]
[112.94567108 418.06295776]
[112.32169342 403.07592773]
[111.69771576 388.08889771]
[111.07373810 373.10189819]
[110.44976044 358.11486816]
[109.82578278 343.12786865]
[109.20180511 328.14083862]
[96.36006927 317.32659912]
[95.26012421 300.23641968]
[107.06489563 287.36846924]
[106.12926483 272.39767456]
[105.19364166 257.42687988]
[92.12970734 246.88212585]
[90.67445374 229.81854248]
[102.20897675 216.70776367]
[100.96209717 201.75967407]
[99.71522522 186.81159973]
[98.46835327 171.86351013]
[97.22147369 156.91542053]
[83.59381104 154.57034302]
[70.93226624 149.01174927]
[59.98244476 140.56698608]
[51.38915634 129.73333740]
[45.65843964 117.14875793]
[43.12775803 103.55433655]
[43.94614029 89.75061035]
[48.06539154 76.55044556]
[55.24293900 64.73116302]
[65.05612183 54.98877335]
[76.92705536 47.89698410]
[90.15670013 43.87340546]
[89.53272247 28.88638878]
[88.90874481 13.89937305]
[75.46360779 10.66151810]
[63.33570862 4.04217958]
[53.35773468 -5.49657965]
[46.21277237 -17.29251862]
[42.38756180 -30.52919388]
[42.13934708 -44.29246140]
[45.47856522 -57.63362122]
[52.16861725 -69.63479614]
[61.74258804 -79.47209167]
[73.53585815 -86.47215271]
[86.73220825 -90.15826416]
[86.73220825 -105.15826416]
[86.73220825 -120.15826416]
[86.10823059 -135.14527893]
[84.86135864 -150.09336853]
[83.61447906 -165.04145813]
[74.75682068 -178.15071106]
[81.40938568 -191.47709656]
[80.16251373 -206.42517090]
[65.67311859 -211.02145386]
[54.04879761 -220.81654358]
[47.06218338 -234.31674194]
[45.77867889 -249.46339417]
[50.39401245 -263.94674683]
[60.20437622 -275.55816650]
[73.71376801 -282.52700806]
[88.86209106 -283.79058838]
[103.33934784 -279.15621948]
[114.93785858 -269.33056641]
[121.88893127 -255.81202698]
[123.13258362 -240.66206360]
[118.47915649 -226.19090271]
[108.63827515 -214.60533142]
[95.11060333 -207.67205811]
[96.35747528 -192.72396851]
[105.12595367 -180.68389893]
[98.56256866 -166.28833008]
[99.80944061 -151.34024048]
[101.05632019 -136.39215088]
[103.17739868 -134.46644592]
[104.63763428 -131.55754089]
[105.04831696 -127.92254639]
[104.12464142 -123.95796967]
[101.73220825 -120.15826416]
[101.73220825 -105.15826416]
[101.73220825 -90.15826416]
[117.26877594 -85.40461731]
[130.60615540 -76.09336090]
[140.44549561 -63.11736298]
[145.82431030 -47.72704315]
[146.21066284 -31.40988922]
[141.55569458 -15.74668026]
[132.29953003 -2.25836062]
[119.32963562 7.74166107]
[103.89575958 13.27539539]
[104.51973724 28.26241112]
[105.14371490 43.24942780]
[120.81772614 46.95560837]
[134.82861328 54.89952087]
[146.05702209 66.44651794]
[153.60592651 80.67411804]
[156.87223816 96.44566345]
[155.59501648 112.50115967]
[149.87629700 127.55794525]
[140.17294312 140.41311646]
[127.26016235 150.03967285]
[112.16956329 155.66854858]
[113.41643524 170.61663818]
[114.66331482 185.56471252]
[115.91018677 200.51280212]
[117.15705872 215.46089172]
[128.40093994 222.94641113]
[133.19114685 235.36743164]
[129.98025513 248.08610535]
[120.16442871 256.49124146]
[121.10005951 271.46203613]
[122.03569031 286.43283081]
[133.12139893 294.15063477]
[137.65217590 306.66864014]
[134.17738342 319.31774902]
[124.18881989 327.51687622]
[124.81279755 342.50387573]
[125.43677521 357.49090576]
[126.06075287 372.47790527]
[126.68473053 387.46493530]
[127.30870819 402.45193481]
[127.93268585 417.43896484]
[128.55667114 432.42599487]
[129.18064880 447.41299438]
[129.80462646 462.40002441]
[130.42858887 477.38702393]
[145.18159485 480.51748657]
[158.69223022 487.21923828]
[170.11122131 497.07101440]
[178.72073364 509.45355225]
[183.97958374 523.58843994]
[185.55718994 538.58715820]
[183.35437012 553.50689697]
[177.50962830 567.40979004]
[168.39035034 579.42181396]
[156.56977844 588.78802490]
[142.79096985 594.91949463]
[127.92006683 597.43090820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[24 124]
[25 123]
[26 122]
[29 118]
[30 117]
[31 116]
[32 115]
[33 114]
[45 104]
[46 103]
[47 102]
[58 93]
[59 92]
[60 91]
[61 86]
[62 85]
[63 84]
[65 82]
[66 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
