%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUAAGCCUCGGGGGGGGGGCUUAUUCGAGCCGAGCUGGGCCAGCCAGGCAACCUUCUAGGUAACGACCAxxxxxxxxxxCUACACUCCAACUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAACCCCCCCCCCUCCAAGCCUC\
) } def
/len { sequence length } bind def

/coor [
[83.65354919 351.83566284]
[69.80760956 345.81961060]
[58.09894943 336.29019165]
[49.39642715 323.95452881]
[44.34582520 309.72802734]
[43.32193375 294.66632080]
[46.40073395 279.88717651]
[53.35375595 266.48724365]
[63.66503906 255.46090698]
[76.56941986 247.62640381]
[91.10930634 243.56509399]
[91.10930634 228.56509399]
[91.10930634 213.56509399]
[91.10930634 198.56509399]
[91.10930634 183.56509399]
[91.10930634 168.56509399]
[91.10930634 153.56509399]
[91.10930634 138.56509399]
[91.10930634 123.56509399]
[91.10930634 108.56509399]
[86.35549164 94.33831024]
[77.33795929 82.35147858]
[68.32043457 70.36464691]
[59.30290222 58.37781525]
[50.28537369 46.39098358]
[38.29853821 37.37345123]
[24.28182602 32.03194046]
[10.26511383 26.69042778]
[-8.34942913 40.64993286]
[-35.92973328 30.30525398]
[-50.86404037 28.90295029]
[-65.79834747 27.50064659]
[-77.90121460 37.30668640]
[-93.02674866 35.67180634]
[-102.30072021 24.07314110]
[-117.23503113 22.67083740]
[-132.16934204 21.26853371]
[-147.10365295 19.86623001]
[-163.43865967 24.40533829]
[-172.32237244 9.96524906]
[-160.90585327 -2.56868839]
[-145.70133972 4.93192291]
[-130.76702881 6.33422661]
[-115.83272552 7.73653030]
[-100.89842224 9.13883400]
[-89.62740326 -0.53069371]
[-74.46191406 0.67869663]
[-64.39604187 12.56633854]
[-49.46173859 13.96864223]
[-34.52743149 15.37094593]
[-31.28334808 8.60885048]
[-21.55109978 -11.67743397]
[-31.99091148 -22.44824219]
[-42.43072510 -33.21905136]
[-52.87053680 -43.98986053]
[-68.23596954 -51.15503311]
[-65.60439301 -67.90350342]
[-48.78196716 -70.01119995]
[-42.09972763 -54.42967224]
[-31.65991592 -43.65886307]
[-21.22010422 -32.88805389]
[-10.78029156 -22.11724663]
[7.01291609 -15.13773441]
[16.16106224 -1.34140813]
[15.60662651 12.67371368]
[29.62333870 18.01522636]
[43.64005280 23.35673904]
[34.51575470 11.45097637]
[28.10856438 -2.11176419]
[24.70690155 -16.72096252]
[24.46388817 -31.71899414]
[27.39046478 -46.43072891]
[33.35488892 -60.19392776]
[42.08868027 -72.38904572]
[53.19869232 -82.46712494]
[66.18480682 -89.97451019]
[80.46246338 -94.57324982]
[95.38896942 -96.05635071]
[110.29239655 -94.35704041]
[124.50189972 -89.55181122]
[137.37782288 -81.85697174]
[148.34057617 -71.61890411]
[156.89666748 -59.29846191]
[162.66096497 -45.45025253]
[165.37397766 -30.69763756]
[164.91357422 -15.70470524]
[161.30049133 -1.14635158]
[154.69737244 12.32208633]
[145.40145874 24.09433365]
[133.83117676 33.64046860]
[120.50737762 40.53077698]
[106.02981567 44.45509720]
[91.05020142 45.23677444]
[76.24282074 42.84062195]
[62.27220535 37.37345123]
[71.28973389 49.36028290]
[80.30726624 61.34711838]
[89.32479095 73.33394623]
[98.34232330 85.32078552]
[92.32698822 71.57975769]
[92.63053894 56.58283234]
[99.19699860 43.09648132]
[110.81503296 33.60853195]
[125.34147644 29.86922646]
[140.09663391 32.56835175]
[152.35862732 41.20800781]
[159.86547852 54.19442749]
[161.23240662 69.13201904]
[156.20724487 83.26523590]
[145.71701050 93.98692322]
[131.69679260 99.31926727]
[116.73587799 98.27945709]
[131.05847168 102.73627472]
[145.38107300 107.19308472]
[159.70367432 111.64990234]
[170.93379211 101.17230988]
[185.90176392 97.72914886]
[200.58128357 102.24660492]
[211.02362061 113.50951385]
[214.41984558 128.48820496]
[209.85639954 143.15348816]
[198.56080627 153.56047058]
[183.57154846 156.90972900]
[168.92063904 152.30033875]
[158.54911804 140.97218323]
[155.24685669 125.97250366]
[140.92425537 121.51568604]
[126.60166168 117.05886841]
[112.27906036 112.60205078]
[109.01325226 110.78819275]
[106.10930634 108.56509399]
[106.10930634 123.56509399]
[106.10930634 138.56509399]
[106.10930634 153.56509399]
[106.10930634 168.56509399]
[106.10930634 183.56509399]
[106.10930634 198.56509399]
[106.10930634 213.56509399]
[106.10930634 228.56509399]
[106.10930634 243.56509399]
[120.64919281 247.62640381]
[133.55357361 255.46090698]
[143.86485291 266.48724365]
[150.81788635 279.88717651]
[153.89668274 294.66632080]
[152.87278748 309.72802734]
[147.82218933 323.95452881]
[139.11965942 336.29019165]
[127.41100311 345.81961060]
[113.56506348 351.83566284]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 99]
[22 98]
[23 97]
[24 96]
[25 95]
[26 67]
[27 66]
[28 65]
[30 50]
[31 49]
[32 48]
[35 45]
[36 44]
[37 43]
[38 42]
[52 62]
[53 61]
[54 60]
[55 59]
[112 129]
[113 128]
[114 127]
[115 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
