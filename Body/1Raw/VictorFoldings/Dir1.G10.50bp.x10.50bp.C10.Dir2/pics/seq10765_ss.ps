%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAUACUAAGGGGGGGGGGUCUUAGUUACCGCUAACAACCUAUUCCAACUGUUCAUCGGCUGAGAGGGCxxxxxxxxxxCAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCCCCCCCCCCCACCCUACUAA\
) } def
/len { sequence length } bind def

/coor [
[116.62006378 478.80377197]
[105.40463257 468.73843384]
[96.81323242 456.35760498]
[91.30918884 442.32901001]
[89.18933105 427.40911865]
[90.56797028 412.40258789]
[95.37077332 398.11868286]
[103.33872223 385.32772827]
[114.04211426 374.71951294]
[126.90372467 366.86614990]
[141.22996521 362.19110107]
[139.98307800 347.24304199]
[138.73620605 332.29495239]
[137.48933411 317.34686279]
[136.24246216 302.39877319]
[134.99559021 287.45068359]
[133.74871826 272.50259399]
[132.50183105 257.55450439]
[131.25495911 242.60641479]
[130.00808716 227.65832520]
[128.76121521 212.71025085]
[114.88999176 198.19270325]
[120.91772461 178.30830383]
[115.72231293 164.23678589]
[110.52689362 150.16526794]
[105.33148193 136.09375000]
[100.13606262 122.02223206]
[85.03896332 119.87774658]
[73.30124664 107.51067352]
[71.55874634 88.73406982]
[57.23615265 84.27725220]
[42.91355515 79.82044220]
[27.61460495 88.23943329]
[11.27193642 83.12071228]
[3.80904245 68.08199310]
[-10.60317326 63.92410660]
[-25.01539040 59.76622009]
[-39.42760468 55.60833359]
[-49.56389999 67.01965332]
[-63.65087891 72.89500427]
[-78.89156342 72.06782532]
[-92.25991058 64.70236206]
[-101.10161591 52.26101685]
[-103.66115570 37.21404266]
[-99.43033600 22.54901695]
[-89.24918365 11.17769909]
[-75.13917542 5.35786819]
[-59.90186691 6.24505663]
[-46.56262970 13.66311359]
[-37.76998520 26.13917732]
[-35.26971817 41.19611740]
[-20.85750198 45.35400391]
[-6.44528627 49.51189041]
[7.96692991 53.66977692]
[18.29961395 45.90882492]
[31.41187286 45.53065491]
[42.49954605 52.89892578]
[47.37036896 65.49784088]
[61.69296646 69.95465851]
[76.01556396 74.41147614]
[63.97277832 65.46880341]
[62.45261765 50.54603577]
[72.44478607 39.35869980]
[87.44384003 39.19036102]
[97.68457794 50.15062332]
[96.49992371 65.10336304]
[102.56294250 51.38330841]
[108.62595367 37.66325378]
[114.68896484 23.94320107]
[103.52738953 15.41470242]
[94.56803894 4.60613537]
[88.26473236 -7.92950201]
[84.93547058 -21.55187798]
[84.74648285 -35.56603241]
[87.70385742 -49.25783920]
[93.65345764 -61.93038177]
[102.28891754 -72.93944550]
[113.16744995 -81.72624969]
[125.73252869 -87.84580994]
[139.34236145 -90.98949432]
[153.30265808 -91.00054932]
[166.90209961 -87.88195038]
[173.53059387 -101.33791351]
[180.15910339 -114.79388428]
[178.54013062 -131.11291504]
[192.01928711 -140.45338440]
[206.73037720 -133.20658875]
[207.53988647 -116.82743835]
[193.61506653 -108.16538239]
[186.98657227 -94.70941925]
[180.35806274 -81.25344849]
[192.53549194 -70.85578156]
[201.63961792 -57.67024231]
[207.05497742 -42.57853317]
[208.41300964 -26.59153557]
[205.61711121 -10.78159618]
[198.84950256 3.78939557]
[188.55937195 16.14133835]
[175.43299866 25.44183731]
[160.34806824 31.06230736]
[144.31495667 32.62043762]
[128.40902710 30.00621605]
[122.34600830 43.72626877]
[116.28299713 57.44632339]
[110.21997833 71.16637421]
[125.88059998 95.28290558]
[114.20758820 116.82681274]
[119.40299988 130.89833069]
[124.59841919 144.96984863]
[129.79383850 159.04138184]
[134.98924255 173.11289978]
[147.85203552 178.62487793]
[154.00639343 190.66741943]
[168.64990234 193.91824341]
[183.29339600 197.16906738]
[196.48876953 188.47093201]
[211.95280457 191.73275757]
[220.51094055 205.01934814]
[217.08581543 220.44802856]
[203.70947266 228.86521912]
[188.31787109 225.27716064]
[180.04257202 211.81257629]
[165.39907837 208.56175232]
[150.75556946 205.31092834]
[147.60539246 208.81430054]
[143.70930481 211.46336365]
[144.95617676 226.41145325]
[146.20304871 241.35954285]
[147.44992065 256.30761719]
[148.69679260 271.25570679]
[149.94367981 286.20379639]
[151.19055176 301.15188599]
[152.43742371 316.09997559]
[153.68429565 331.04806519]
[154.93116760 345.99615479]
[156.17803955 360.94424438]
[171.08082581 363.18115234]
[185.06581116 368.79516602]
[197.37879944 377.48348999]
[207.35575867 388.77758789]
[214.45866394 402.06838989]
[218.30445862 416.63916016]
[218.68574524 431.70404053]
[215.58195496 446.45068359]
[209.16046143 460.08377075]
[199.76759338 471.86813354]
[187.90988159 481.16818237]
[174.22679138 487.48245239]
[159.45625305 490.47036743]
[144.39480591 489.97085571]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[21 126]
[23 111]
[24 110]
[25 109]
[26 108]
[27 107]
[30 60]
[31 59]
[32 58]
[35 54]
[36 53]
[37 52]
[38 51]
[66 105]
[67 104]
[68 103]
[69 102]
[82 91]
[83 90]
[84 89]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
