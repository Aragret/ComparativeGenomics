%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUACUCCUCAGGGGGGGGGGUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAxxxxxxxxxxCAUAACCAUUCUUAAUUUAACUAUUUAUAUUAUCCUAACUACUACCGCAUCCCCCCCCCCUCCUACUACUCA\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 418.66525269]
[70.87159729 413.51025391]
[58.28185654 405.22805786]
[47.94191742 394.26528931]
[40.40940475 381.21316528]
[36.09054184 366.77554321]
[35.21823120 351.73110962]
[37.83952332 336.89111328]
[43.81304932 323.05587769]
[52.81666565 310.97152710]
[64.36482239 301.28973389]
[77.83473969 294.53265381]
[92.50000000 291.06469727]
[92.50000000 276.06469727]
[92.50000000 261.06469727]
[92.50000000 246.06468201]
[92.50000000 231.06468201]
[92.50000000 216.06468201]
[92.50000000 201.06468201]
[92.50000000 186.06468201]
[92.50000000 171.06468201]
[92.50000000 156.06468201]
[84.76270294 143.33741760]
[92.50000000 129.53724670]
[92.50000000 114.53723907]
[92.23853302 129.53495789]
[85.70996094 143.03968811]
[74.11859894 152.56021118]
[59.60270309 156.34027100]
[44.84002686 153.68257141]
[32.55383682 145.07736206]
[25.01056671 132.11206055]
[23.60171890 117.17836761]
[28.58718872 103.03110504]
[39.04730225 92.28001404]
[53.05248642 86.90834045]
[68.01920319 87.90701294]
[81.18424225 95.08978271]
[68.14348602 87.67771912]
[55.10272980 80.26565552]
[43.39027023 87.97117615]
[29.56468201 89.85681915]
[16.34272575 85.60980225]
[6.29766750 76.11678314]
[1.35847449 63.27944565]
[2.43955398 49.63374329]
[-10.44830227 41.95890427]
[-23.33615875 34.28406525]
[-36.22401428 26.60922623]
[-49.11187363 18.93438721]
[-65.81434631 16.02515793]
[-67.64251709 -0.82993442]
[-51.95221710 -7.25261307]
[-41.43703461 6.04652977]
[-28.54917717 13.72136879]
[-15.66132069 21.39620781]
[-2.77346373 29.07104683]
[10.11439323 36.74588394]
[23.99100113 28.51918030]
[40.21614456 28.39542961]
[54.37925339 36.50259018]
[62.58282471 50.71834946]
[62.51479721 67.22489929]
[75.55554962 74.63696289]
[88.59630585 82.04902649]
[98.06004333 84.07049561]
[103.44268036 89.73442078]
[114.52178955 79.62237549]
[105.59396362 67.55183411]
[97.95458221 54.62729263]
[91.68462372 40.98574829]
[86.85056305 26.77182007]
[83.50362396 12.13617516]
[81.67930603 -2.76603532]
[81.39694214 -17.77684212]
[82.65951538 -32.73712158]
[85.45365906 -47.48828125]
[89.74974060 -61.87396240]
[95.50222015 -75.74165344]
[102.65012360 -88.94436646]
[111.11767578 -101.34213257]
[120.81511688 -112.80352783]
[131.63964844 -123.20706177]
[143.47653198 -132.44244385]
[156.20027161 -140.41178894]
[169.67599487 -147.03060913]
[183.76086426 -152.22872925]
[198.30557251 -155.95104980]
[213.15591431 -158.15814209]
[228.15449524 -158.82656860]
[243.14230347 -157.94926453]
[257.96044922 -155.53552246]
[272.45190430 -151.61094666]
[286.46298218 -146.21711731]
[299.84521484 -139.41120911]
[312.45669556 -131.26539612]
[324.16375732 -121.86601257]
[334.84231567 -111.31269836]
[344.37915039 -99.71732330]
[352.67318726 -87.20279694]
[359.63647461 -73.90180206]
[365.19522095 -59.95531464]
[369.29046631 -45.51118469]
[371.87884521 -30.72252846]
[372.93289185 -15.74611473]
[372.44146729 -0.74069834]
[370.40969849 14.13465309]
[366.85922241 28.72225189]
[361.82760620 42.86746216]
[355.36822510 56.42033768]
[347.54956055 69.23720551]
[338.45443726 81.18220520]
[328.17932129 92.12871552]
[316.83312988 101.96068573]
[304.53610229 110.57390594]
[291.41864014 117.87705994]
[277.61978149 123.79273224]
[263.28576660 128.25822449]
[248.56860352 131.22618103]
[233.62425232 132.66516113]
[218.61116028 132.55989075]
[203.68846130 130.91148376]
[189.01435852 127.73744202]
[174.74438477 123.07138824]
[161.02983093 116.96279144]
[148.01606750 109.47640991]
[135.84104919 100.69160461]
[124.63383484 90.70148468]
[113.55472565 100.81352997]
[107.50000000 114.53723907]
[107.50000000 129.53724670]
[115.23729706 143.33741760]
[107.50000000 156.06468201]
[107.50000000 171.06468201]
[107.50000000 186.06468201]
[107.50000000 201.06468201]
[107.50000000 216.06468201]
[107.50000000 231.06468201]
[107.50000000 246.06468201]
[107.50000000 261.06469727]
[107.50000000 276.06469727]
[107.50000000 291.06469727]
[122.16526031 294.53265381]
[135.63517761 301.28973389]
[147.18333435 310.97152710]
[156.18695068 323.05587769]
[162.16047668 336.89111328]
[164.78176880 351.73110962]
[163.90945435 366.77554321]
[159.59059143 381.21316528]
[152.05809021 394.26528931]
[141.71813965 405.22805786]
[129.12840271 413.51025391]
[114.96779633 418.66525269]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[24 131]
[25 130]
[38 65]
[39 64]
[40 63]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
[67 129]
[68 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
