%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAGCCCCCAGGGGGGGGGGUCUCAAUCAUAUACCAAAUCUCUCCCUCACUAAACGUAAGCCUUCUCCUCxxxxxxxxxxCUGAGCCUUUUACCACUCCAGCCUAGCCCCUACCCCCCAAUUAGGAGGGCCCCCCCCCCCACUGGCCCCCA\
) } def
/len { sequence length } bind def

/coor [
[82.48757935 367.06253052]
[68.99869537 360.33099365]
[57.51319885 350.56643677]
[48.69882965 338.33654785]
[43.06804657 324.35235596]
[40.94821930 309.42687988]
[42.46258926 294.42788696]
[47.52310944 280.22735596]
[55.83557510 267.65093994]
[66.91670990 257.42977905]
[80.12226105 250.15814209]
[94.68448639 246.25878906]
[94.37651062 231.26194763]
[94.06853485 216.26510620]
[93.76055145 201.26826477]
[93.45257568 186.27143860]
[93.14459991 171.27459717]
[92.83662415 156.27775574]
[92.52864075 141.28091431]
[92.22066498 126.28408051]
[91.91268921 111.28723907]
[84.45284271 124.30072021]
[74.04125214 135.09881592]
[61.30819702 143.02783203]
[47.02449799 147.60777283]
[32.05484009 148.56140137]
[17.30544281 145.83097839]
[3.66918206 139.58178711]
[-8.02844524 130.19213867]
[-17.07930374 118.23044586]
[-22.93548393 104.42084503]
[-25.24247169 89.59931183]
[-23.86060715 74.66309357]
[-18.87354851 60.51639175]
[-10.58319378 48.01559067]
[0.50858730 37.91745377]
[13.73033333 30.83328438]
[28.28164291 27.19193840]
[43.28162766 27.21385002]
[57.82223511 30.89769363]
[71.02322388 38.02046204]
[82.08545685 48.15096283]
[90.33925629 60.67593002]
[95.28496552 74.83714294]
[96.62313843 89.77867126]
[103.17100525 76.28328705]
[109.71887970 62.78790283]
[116.26674652 49.29251862]
[122.81462097 35.79713440]
[123.75814056 26.64805794]
[129.63798523 22.09397888]
[136.46156311 8.73587894]
[143.28512573 -4.62222004]
[150.10870361 -17.98031998]
[137.41732788 -25.99555779]
[125.50739288 -35.13168716]
[114.47761536 -45.31299973]
[104.41938019 -56.45513535]
[95.41603088 -68.46575928]
[87.54219055 -81.24533844]
[80.86309052 -94.68799591]
[75.43407440 -108.68231964]
[71.30014801 -123.11235046]
[68.49555206 -137.85852051]
[67.04352570 -152.79862976]
[66.95610809 -167.80888367]
[68.23402405 -182.76487732]
[70.86668396 -197.54272461]
[74.83226776 -212.01992798]
[80.09791565 -226.07652283]
[86.61999512 -239.59605408]
[94.34445953 -252.46649170]
[103.20730591 -264.58114624]
[113.13508606 -275.83969116]
[124.04553223 -286.14877319]
[135.84825134 -295.42300415]
[148.44541931 -303.58551025]
[161.73265076 -310.56866455]
[175.59985352 -316.31460571]
[189.93212891 -320.77572632]
[204.61067200 -323.91503906]
[219.51388550 -325.70651245]
[234.51826477 -326.13534546]
[249.49948120 -325.19799805]
[264.33337402 -322.90216064]
[278.89703369 -319.26693726]
[293.06979370 -314.32238770]
[306.73419189 -308.10955811]
[319.77697754 -300.67984009]
[332.09011841 -292.09487915]
[343.57156372 -282.42575073]
[354.12619019 -271.75265503]
[363.66650391 -260.16394043]
[372.11343384 -247.75572205]
[379.39703369 -234.63076782]
[385.45693970 -220.89785767]
[390.24291992 -206.67077637]
[393.71533203 -192.06744385]
[395.84536743 -177.20883179]
[396.61541748 -162.21809387]
[396.01907349 -147.21943665]
[394.06127930 -132.33715820]
[390.75827026 -117.69456482]
[386.13739014 -103.41300964]
[380.23696899 -89.61082458]
[373.10589600 -76.40238190]
[364.80325317 -63.89714050]
[355.39779663 -52.19871902]
[344.96752930 -41.40405655]
[333.59887695 -31.60260391]
[321.38598633 -22.87557983]
[308.43011475 -15.29530144]
[294.83859253 -8.92458248]
[280.72409058 -3.81621337]
[266.20349121 -0.01252492]
[251.39720154 2.45496392]
[236.42785645 3.56580615]
[221.41950989 3.31079674]
[206.49655151 1.69204891]
[191.78260803 -1.27702343]
[177.39964294 -5.57181740]
[163.46681213 -11.15674400]
[156.64323425 2.20135522]
[149.81965637 15.55945492]
[142.99607849 28.91755486]
[136.30999756 42.34500504]
[129.76213074 55.84038925]
[123.21426392 69.33576965]
[116.66638947 82.83115387]
[110.11852264 96.32653809]
[106.90952301 110.97926331]
[107.21750641 125.97610474]
[107.52548218 140.97294617]
[107.83345795 155.96977234]
[108.14143372 170.96661377]
[108.44941711 185.96345520]
[108.75739288 200.96029663]
[109.06536865 215.95712280]
[109.37334442 230.95396423]
[109.68132782 245.95080566]
[124.39135742 249.24903870]
[137.88432312 255.97238159]
[149.37573242 265.72998047]
[158.19752502 277.95452881]
[163.83677673 291.93530273]
[165.96565247 306.85949707]
[164.46037292 321.85940552]
[159.40846252 336.06298828]
[151.10362244 348.64447021]
[140.02870178 358.87231445]
[126.82755280 366.15197754]
[112.26769257 370.06015015]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[45 130]
[46 129]
[47 128]
[48 127]
[49 126]
[51 125]
[52 124]
[53 123]
[54 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
