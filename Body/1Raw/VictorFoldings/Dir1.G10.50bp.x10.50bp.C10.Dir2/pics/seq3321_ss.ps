%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCCUCAUUGGGGGGGGGGGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAUxxxxxxxxxxCCACUAAAACACUCACCAAGACCUCAACCCCUGACCCCCAUGCCUCAGGACCCCCCCCCCUACUCCUCAAU\
) } def
/len { sequence length } bind def

/coor [
[86.36669922 390.84826660]
[71.80683899 386.94006348]
[58.60569763 379.66043091]
[47.53076553 369.43255615]
[39.22592545 356.85110474]
[34.17401505 342.64752197]
[32.66873932 327.64761353]
[34.79761505 312.72341919]
[40.43687439 298.74264526]
[49.25865555 286.51809692]
[60.75007629 276.76049805]
[74.24303436 270.03713989]
[88.95307159 266.73892212]
[89.26104736 251.74206543]
[89.56902313 236.74523926]
[89.87699890 221.74839783]
[90.18498230 206.75155640]
[90.49295807 191.75471497]
[90.80093384 176.75787354]
[91.10890961 161.76104736]
[91.41689301 146.76420593]
[91.72486877 131.76736450]
[92.03284454 116.77053070]
[87.19291687 120.56693268]
[81.42954254 123.42140198]
[74.90052032 125.17842865]
[60.07803726 127.47930908]
[45.25555420 129.78018188]
[30.43307304 132.08105469]
[15.61059189 134.38192749]
[8.64350224 148.24696350]
[-5.15807581 155.33894348]
[-20.48715401 152.93083191]
[-31.44939041 141.94862366]
[-33.82958221 126.61518860]
[-26.71249199 112.82654572]
[-12.83479214 105.88471222]
[2.46726131 108.45896149]
[13.30971622 119.55944824]
[28.13219833 117.25857544]
[42.95468140 114.95769501]
[57.77716446 112.65682220]
[72.59964752 110.35594940]
[74.74822235 95.51062775]
[61.18632889 89.10165405]
[47.62443161 82.69267273]
[34.06253433 76.28369904]
[17.15856743 74.98284912]
[13.72909832 58.37938309]
[28.73432159 50.48764038]
[40.47151184 62.72180176]
[54.03340530 69.13077545]
[67.59530640 75.53975677]
[81.15719604 81.94873047]
[94.06990051 74.31575775]
[94.99330902 59.34421158]
[95.91672516 44.37266159]
[81.21212769 41.27545547]
[67.11521912 36.07015991]
[53.92647934 28.86773109]
[41.92702484 19.82168579]
[31.37262726 9.12484074]
[22.48824883 -2.99480009]
[15.46326447 -16.27890587]
[10.44741154 -30.44432449]
[7.54760361 -45.18911743]
[6.82564926 -60.19900131]
[8.29693794 -75.15404510]
[11.93010807 -89.73546600]
[17.64771843 -103.63246918]
[25.32789993 -116.54884338]
[34.80694580 -128.20927429]
[45.88281250 -138.36520386]
[58.31941605 -146.80018616]
[71.85166931 -153.33439636]
[86.19113159 -157.82858276]
[101.03215790 -160.18693542]
[116.05840302 -160.35919189]
[130.94960022 -158.34169006]
[145.38832092 -154.17741394]
[159.06681824 -147.95515442]
[171.69351196 -139.80751038]
[182.99929810 -129.90815735]
[192.74316406 -118.46809387]
[200.71743774 -105.73118591]
[206.75213623 -91.96891022]
[210.71862793 -77.47460938]
[212.53237915 -62.55723190]
[212.15472412 -47.53474045]
[209.59370422 -32.72734070]
[204.90390015 -18.45065880]
[198.18530273 -5.00899553]
[189.58110046 7.31113434]
[179.27470398 18.24712944]
[167.48577881 27.56588554]
[154.46562195 35.06877518]
[140.49176025 40.59587097]
[125.86203003 44.02936554]
[110.88827515 45.29607391]
[109.96485901 60.26762390]
[109.04145050 75.23917389]
[117.02956390 62.54310989]
[122.73674774 48.67126846]
[135.31416321 40.49760818]
[150.30831909 40.91631317]
[162.40998840 49.77912140]
[167.33416748 63.94783783]
[163.33724976 78.40552521]
[151.83448792 88.03291321]
[136.89649963 89.42058563]
[122.41567230 93.33281708]
[136.99942017 96.84198761]
[151.58317566 100.35115814]
[166.16691589 103.86032104]
[180.75067139 107.36949158]
[191.27043152 96.17886353]
[205.98075867 91.76274109]
[220.92462158 95.30904388]
[232.08222961 105.86383820]
[236.45220947 120.58792114]
[232.85908508 135.52059937]
[222.26937866 146.64506531]
[207.53166199 150.96887207]
[192.61030579 147.32896423]
[181.51910400 136.70443726]
[177.24150085 121.95323944]
[162.65776062 118.44406891]
[148.07400513 114.93490601]
[133.49024963 111.42573547]
[118.90650940 107.91657257]
[107.02968597 117.07850647]
[106.72170258 132.07534790]
[106.41372681 147.07217407]
[106.10575104 162.06901550]
[105.79777527 177.06585693]
[105.48979187 192.06269836]
[105.18181610 207.05953979]
[104.87384033 222.05636597]
[104.56586456 237.05320740]
[104.25788116 252.05004883]
[103.94990540 267.04687500]
[118.51213074 270.94625854]
[131.71768188 278.21789551]
[142.79881287 288.43905640]
[151.11128235 301.01547241]
[156.17179871 315.21597290]
[157.68617249 330.21499634]
[155.56634521 345.14044189]
[149.93556213 359.12466431]
[141.12120056 371.35455322]
[129.63569641 381.11911011]
[116.14681244 387.85064697]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[44 54]
[45 53]
[46 52]
[47 51]
[55 101]
[56 100]
[57 99]
[111 130]
[112 129]
[113 128]
[114 127]
[115 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
