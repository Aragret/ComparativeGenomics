%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACUCUCCUAGGGGGGGGGGCUUACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCUCUACAUAUUxxxxxxxxxxCCCCUUCCAAACAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGCCCCCCCCCCUCACUUUCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 382.36471558]
[71.01555634 376.81170654]
[58.81560135 367.94537354]
[49.20452881 356.32305908]
[42.78650284 342.67535400]
[39.96496582 327.86016846]
[40.91728210 312.80877686]
[45.58358765 298.46737671]
[53.67055511 285.73739624]
[64.66983032 275.41912842]
[77.88998413 268.16116333]
[92.50000000 264.41970825]
[92.50000000 249.41972351]
[92.50000000 234.41972351]
[92.50000000 219.41972351]
[92.50000000 204.41972351]
[92.50000000 189.41972351]
[92.50000000 174.41972351]
[92.50000000 159.41972351]
[92.50000000 144.41972351]
[92.50000000 129.41972351]
[92.50000000 114.41972351]
[87.06233978 109.25427246]
[83.55307007 123.83799744]
[69.16852570 128.09063721]
[58.29343796 117.75949097]
[61.80302811 103.17584991]
[76.18702698 98.92337036]
[70.74937439 93.75791931]
[55.76913071 94.52758026]
[40.78889084 95.29724121]
[25.80864906 96.06689453]
[18.23431396 109.50687408]
[4.58550978 116.69809723]
[-10.78247738 115.34587860]
[-22.96578026 105.88169861]
[-28.07675171 91.32554626]
[-24.48449707 76.32224274]
[-13.33529377 65.65927887]
[1.81318903 62.73917007]
[16.12712479 68.49371338]
[25.03898811 81.08665466]
[40.01922989 80.31699371]
[54.99946976 79.54734039]
[69.97971344 78.77767944]
[82.27389526 79.55065155]
[92.09192657 84.54438782]
[98.24116516 92.54486084]
[105.60740662 79.47816467]
[112.97364044 66.41146851]
[100.52669525 58.02614975]
[88.78530884 48.67842102]
[77.82373047 38.42738342]
[67.71125031 27.33784294]
[58.51181412 15.47991562]
[50.28357697 2.92857218]
[43.07856750 -10.23683262]
[36.94233322 -23.93306351]
[31.91366959 -38.07352448]
[28.02437401 -52.56881714]
[25.29903412 -67.32729340]
[23.75488091 -82.25564575]
[23.40167618 -97.25948334]
[24.24165535 -112.24396515]
[26.26950645 -127.11433411]
[29.47240829 -141.77658081]
[33.83010864 -156.13800049]
[39.31506348 -170.10780334]
[45.89258575 -183.59767151]
[53.52109528 -196.52229309]
[62.15235901 -208.79997253]
[71.73181152 -220.35307312]
[82.19887543 -231.10856628]
[93.48738861 -240.99844360]
[105.52597809 -249.96015930]
[118.23851776 -257.93710327]
[131.54464722 -264.87878418]
[145.36022949 -270.74133301]
[159.59793091 -275.48770142]
[174.16772461 -279.08789062]
[188.97749329 -281.51910400]
[203.93360901 -282.76596069]
[218.94151306 -282.82064819]
[233.90631104 -281.68273926]
[248.73339844 -279.35946655]
[263.32904053 -275.86553955]
[277.60092163 -271.22299194]
[291.45886230 -265.46124268]
[304.81518555 -258.61666870]
[317.58551025 -250.73255920]
[329.68905640 -241.85876465]
[341.04931641 -232.05137634]
[351.59445190 -221.37242126]
[361.25781250 -209.88940430]
[369.97827148 -197.67492676]
[377.70074463 -184.80621338]
[384.37634277 -171.36462402]
[389.96292114 -157.43515015]
[394.42514038 -143.10585022]
[397.73474121 -128.46733093]
[399.87088013 -113.61212158]
[400.81997681 -98.63416290]
[400.57608032 -83.62814331]
[399.14071655 -68.68894196]
[396.52294922 -53.91100311]
[392.73934937 -39.38776398]
[387.81384277 -25.21104813]
[381.77752686 -11.47048187]
[374.66860962 1.74705911]
[366.53204346 14.35800838]
[357.41921997 26.28263474]
[347.38778687 37.44554520]
[336.50115967 47.77616119]
[324.82818604 57.20917511]
[312.44265747 65.68493652]
[299.42288208 73.14987183]
[285.85113525 79.55677795]
[271.81329346 84.86514282]
[257.39807129 89.04141235]
[242.69659424 92.05917358]
[227.80183411 93.89936066]
[212.80796814 94.55033112]
[197.80976868 94.00796509]
[182.90206909 92.27569580]
[168.17913818 89.36447906]
[153.73403931 85.29271698]
[139.65811157 80.08615112]
[126.04033661 73.77770996]
[118.67409515 86.84440613]
[111.30786133 99.91109467]
[107.50000000 114.41972351]
[107.50000000 129.41972351]
[107.50000000 144.41972351]
[107.50000000 159.41972351]
[107.50000000 174.41972351]
[107.50000000 189.41972351]
[107.50000000 204.41972351]
[107.50000000 219.41972351]
[107.50000000 234.41972351]
[107.50000000 249.41972351]
[107.50000000 264.41970825]
[122.11001587 268.16116333]
[135.33016968 275.41912842]
[146.32945251 285.73739624]
[154.41641235 298.46737671]
[159.08271790 312.80877686]
[160.03503418 327.86016846]
[157.21350098 342.67535400]
[150.79547119 356.32305908]
[141.18440247 367.94537354]
[128.98443604 376.81170654]
[114.96250153 382.36471558]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[29 45]
[30 44]
[31 43]
[32 42]
[48 130]
[49 129]
[50 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
