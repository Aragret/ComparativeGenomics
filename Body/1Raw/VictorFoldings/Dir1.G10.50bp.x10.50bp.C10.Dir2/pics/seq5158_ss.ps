%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUCCUCACGGGGGGGGGGUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAAxxxxxxxxxxCCCUUAGCAGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCCCCCCCCCCCUUCUCCUUAC\
) } def
/len { sequence length } bind def

/coor [
[94.80270386 375.91009521]
[80.78075409 370.35708618]
[68.58080292 361.49075317]
[58.96973038 349.86843872]
[52.55170441 336.22076416]
[49.73016739 321.40557861]
[50.68248367 306.35418701]
[55.34878922 292.01275635]
[63.43575287 279.28280640]
[74.43502808 268.96453857]
[87.65518951 261.70657349]
[102.26519775 257.96511841]
[102.26519775 242.96511841]
[102.26519775 227.96511841]
[102.26519775 212.96511841]
[102.26519775 197.96511841]
[102.26519775 182.96511841]
[102.26519775 167.96511841]
[102.26519775 152.96511841]
[102.26519775 137.96511841]
[102.26519775 122.96512604]
[92.23546600 134.11878967]
[77.79869080 130.04699707]
[75.07509613 115.29633331]
[87.10704803 106.33742523]
[72.17103577 104.95339966]
[57.23502350 103.56937408]
[42.29901123 102.18534851]
[27.36299706 100.80132294]
[18.46647072 103.13533020]
[12.13560963 99.23246002]
[-2.76883817 97.54206848]
[-9.24888420 111.22737885]
[-19.82322121 122.06536865]
[-33.34482574 128.88041687]
[-48.34697342 130.93328857]
[-63.20234680 128.00128174]
[-76.29954529 120.40245819]
[-86.21788025 108.96106720]
[-91.88148499 94.91819763]
[-92.67601013 79.79710388]
[-88.51528168 65.23801422]
[-79.85062408 52.82019043]
[-67.62190247 43.89062500]
[-53.15560913 39.41793060]
[-38.02093124 39.88726807]
[-23.85956955 45.24773026]
[-12.20764256 54.91785431]
[-4.32906294 67.84870148]
[-1.07844067 82.63761902]
[13.82600689 84.32801819]
[28.74702263 85.86531067]
[43.68303680 87.24933624]
[58.61904907 88.63336182]
[73.55506134 90.01738739]
[88.49107361 91.40141296]
[102.42179108 85.83946991]
[112.29749298 74.54919434]
[122.17320251 63.25891113]
[132.04890442 51.96863174]
[117.76483917 56.54743576]
[102.80483246 57.64198685]
[88.00643158 55.19100571]
[74.19814301 49.33171463]
[62.15305328 40.39215088]
[52.54551315 28.87281036]
[45.91341782 15.41861820]
[42.62807083 0.78282315]
[42.87340927 -14.21516991]
[46.63569260 -28.73567963]
[53.70428848 -41.96575928]
[63.68345261 -53.16469955]
[76.01448822 -61.70551682]
[90.00702667 -67.11004639]
[104.87767029 -69.07569885]
[119.79388428 -67.49243164]
[133.92054749 -62.44889069]
[146.46676636 -54.22743607]
[156.73013306 -43.28835678]
[164.13603210 -30.24409866]
[168.26982117 -15.82495499]
[168.90008545 -0.83820176]
[165.99154663 13.87710762]
[159.70701599 27.49711800]
[150.39573669 39.26190186]
[164.43771362 33.98716354]
[178.47969055 28.71241951]
[192.52166748 23.43767929]
[205.66329956 16.20597649]
[217.63354492 7.16645622]
[229.60380554 -1.87306309]
[241.57406616 -10.91258240]
[253.54432678 -19.95210266]
[250.99044800 -35.04303741]
[255.75325012 -49.58863449]
[266.73825073 -60.24642563]
[281.42117310 -64.56732178]
[296.42800903 -61.55841827]
[308.31027222 -51.91114044]
[314.33755493 -37.84235382]
[313.12475586 -22.58497047]
[304.95065308 -9.64502239]
[291.69351196 -1.99601483]
[276.39978027 -1.39563441]
[262.58383179 -7.98184395]
[250.61358643 1.05767572]
[238.64332581 10.09719563]
[226.67306519 19.13671494]
[214.70280457 28.17623520]
[229.67480469 27.25994873]
[243.89175415 32.04307175]
[255.26515198 41.82294083]
[262.12420654 55.16285706]
[263.46127319 70.10314941]
[259.07998657 84.44902039]
[249.62390137 96.09302521]
[236.48220825 103.32460785]
[221.58544922 105.08142853]
[207.12200928 101.10540009]
[195.21661377 91.98062134]
[187.61820984 79.04754639]
[185.44303894 64.20610046]
[189.01063538 49.63653564]
[197.79640198 37.47965622]
[183.75442505 42.75439835]
[169.71244812 48.02913666]
[155.67047119 53.30387878]
[143.33918762 61.84433746]
[133.46348572 73.13462067]
[123.58777618 84.42489624]
[113.71206665 95.71517944]
[117.26519775 122.96512604]
[117.26519775 137.96511841]
[117.26519775 152.96511841]
[117.26519775 167.96511841]
[117.26519775 182.96511841]
[117.26519775 197.96511841]
[117.26519775 212.96511841]
[117.26519775 227.96511841]
[117.26519775 242.96511841]
[117.26519775 257.96511841]
[131.87521362 261.70657349]
[145.09536743 268.96453857]
[156.09465027 279.28280640]
[164.18161011 292.01275635]
[168.84791565 306.35418701]
[169.80023193 321.40557861]
[166.97869873 336.22076416]
[160.56066895 349.86843872]
[150.94960022 361.49075317]
[138.74964905 370.35708618]
[124.72769928 375.91009521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[31 51]
[32 50]
[57 131]
[58 130]
[59 129]
[60 128]
[85 127]
[86 126]
[87 125]
[88 124]
[89 109]
[90 108]
[91 107]
[92 106]
[93 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
