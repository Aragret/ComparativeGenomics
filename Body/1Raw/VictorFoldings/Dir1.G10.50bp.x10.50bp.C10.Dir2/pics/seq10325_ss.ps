%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCAAACGGGGGGGGGGUCAAACUACGAACGCACUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUxxxxxxxxxxACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCCCCCCCCCCCUAGCCAAC\
) } def
/len { sequence length } bind def

/coor [
[93.28654480 383.73300171]
[80.06634521 376.46054077]
[69.17954254 366.01354980]
[61.36841202 353.10427856]
[57.16553116 338.61297607]
[56.85745621 323.52761841]
[60.46519852 308.87680054]
[67.74277496 295.65942383]
[78.19397736 284.77664185]
[91.10623932 276.97052002]
[105.59917450 272.77322388]
[105.28712463 257.77645874]
[104.97506714 242.77970886]
[104.66300964 227.78295898]
[104.35095215 212.78620911]
[104.03889465 197.78945923]
[103.72683716 182.79269409]
[103.41478729 167.79594421]
[103.10272980 152.79919434]
[102.79067230 137.80244446]
[102.47861481 122.80568695]
[102.38960266 137.80541992]
[93.88780212 150.16339111]
[79.91120911 155.60902405]
[65.28974915 152.26045227]
[55.07619476 141.27485657]
[52.80006790 126.44856262]
[59.24793625 112.90511322]
[72.19158936 105.32476044]
[87.15839386 106.32718658]
[72.22409058 104.92488098]
[61.77213287 112.55446625]
[49.32535934 111.03896332]
[41.52661133 101.73912811]
[26.62471008 100.02644348]
[11.70579815 98.46885681]
[-3.22850919 97.06655884]
[-18.16281700 95.66425323]
[-34.49783707 100.20336151]
[-43.38153839 85.76327515]
[-31.96502495 73.22933197]
[-16.76051331 80.72994232]
[-1.82620549 82.13224792]
[13.10810184 83.53455353]
[20.10692406 81.01222229]
[28.33740044 85.12454224]
[43.23930359 86.83722687]
[58.90175247 78.98308563]
[73.62638855 89.99057770]
[88.56069946 91.39288330]
[102.08489227 84.90471649]
[110.33718109 72.37875366]
[118.58946991 59.85279083]
[126.84175873 47.32682800]
[135.09403992 34.80086899]
[132.12130737 19.51032829]
[140.66874695 6.92477751]
[155.26425171 4.18496180]
[163.51654053 -8.34100056]
[171.76882935 -20.86696243]
[158.53227234 -28.55164909]
[152.48158264 -41.96909714]
[155.25712585 -55.82566071]
[165.15365601 -65.07377625]
[178.00323486 -66.75005341]
[184.91023254 -80.06520844]
[191.81723022 -93.38036346]
[198.72422791 -106.69551849]
[186.66133118 -115.66674042]
[176.19383240 -126.45690155]
[167.59286499 -138.78651428]
[161.08120728 -152.33621216]
[156.82751465 -166.75503540]
[154.94200134 -181.66949463]
[155.47348022 -196.69326782]
[158.40820312 -211.43719482]
[163.67013550 -225.51939392]
[171.12300110 -238.57508850]
[180.57373047 -250.26609802]
[191.77754211 -260.28961182]
[204.44422913 -268.38598633]
[218.24568176 -274.34552002]
[232.82441711 -278.01382446]
[247.80282593 -279.29589844]
[262.79290771 -278.15853882]
[277.40637207 -274.63119507]
[291.26473999 -268.80520630]
[304.00903320 -260.83154297]
[315.30911255 -250.91668701]
[324.87231445 -239.31748962]
[332.45089722 -226.33438110]
[337.84857178 -212.30364990]
[340.92553711 -197.58874512]
[341.60208130 -182.57081604]
[339.86068726 -167.63883972]
[335.74645996 -153.17961121]
[329.36593628 -139.56765747]
[320.88442993 -127.15555573]
[310.52163696 -116.26481628]
[298.54592896 -107.17752838]
[285.26754761 -100.12907410]
[271.03042603 -95.30202484]
[256.20333862 -92.82141876]
[241.17031860 -92.75151062]
[226.32080078 -95.09410095]
[212.03938293 -99.78852081]
[205.13238525 -86.47336578]
[198.22538757 -73.15821075]
[191.31838989 -59.84305573]
[198.74111938 -48.94944382]
[198.46092224 -34.36250305]
[213.44064331 -33.58265686]
[227.79603577 -41.51074982]
[241.69802856 -32.81209564]
[240.84544373 -16.43512726]
[226.11534119 -9.22706223]
[212.66079712 -18.60294342]
[197.68107605 -19.38278770]
[184.29479980 -12.61467266]
[176.04251099 -0.08871111]
[167.79022217 12.43725109]
[171.03312683 26.92928696]
[162.84257507 39.74995041]
[147.62001038 43.05315781]
[139.36772156 55.57911682]
[131.11543274 68.10507965]
[122.86314392 80.63104248]
[114.61084747 93.15700531]
[117.47537231 122.49362946]
[117.78742218 137.49038696]
[118.09947968 152.48713684]
[118.41153717 167.48388672]
[118.72359467 182.48063660]
[119.03565216 197.47740173]
[119.34770966 212.47415161]
[119.65975952 227.47090149]
[119.97181702 242.46765137]
[120.28387451 257.46441650]
[120.59593201 272.46115112]
[135.25093079 276.05194092]
[148.47673035 283.31417847]
[159.37159729 293.75277710]
[167.19270325 306.65600586]
[171.40676880 321.14407349]
[171.72648621 336.22915649]
[168.13006592 350.88275146]
[160.86270142 364.10577393]
[150.41989136 374.99661255]
[137.51367188 382.81271362]
[123.02397919 387.02120972]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[30 50]
[31 49]
[34 47]
[35 46]
[36 44]
[37 43]
[38 42]
[51 128]
[52 127]
[53 126]
[54 125]
[55 124]
[58 121]
[59 120]
[60 119]
[65 109]
[66 108]
[67 107]
[68 106]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
