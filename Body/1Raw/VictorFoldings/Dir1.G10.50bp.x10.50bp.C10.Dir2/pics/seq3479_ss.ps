%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCGCCACAGGGGGGGGGGUCUACCAUCACCCUCUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCxxxxxxxxxxUCCGCUACCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGCCCCCCCCCCACUCGCCACA\
) } def
/len { sequence length } bind def

/coor [
[87.94567108 457.97686768]
[74.09973145 451.96084595]
[62.39106750 442.43142700]
[53.68854523 430.09576416]
[48.63794327 415.86923218]
[47.61405182 400.80755615]
[50.69284821 386.02838135]
[57.64587021 372.62844849]
[67.95715332 361.60211182]
[80.86153412 353.76760864]
[95.40142059 349.70629883]
[95.40142059 334.70629883]
[95.40142059 319.70629883]
[95.40142059 304.70629883]
[95.40142059 289.70629883]
[95.40142059 274.70629883]
[95.40142059 259.70629883]
[95.40142059 244.70629883]
[95.40142059 229.70629883]
[95.40142059 214.70629883]
[95.40142059 199.70629883]
[95.08937073 184.70954895]
[94.46539307 169.72253418]
[93.84141541 154.73551941]
[85.13361359 146.28083801]
[84.52768707 133.75679016]
[92.89746857 123.88761902]
[92.58541107 108.89086151]
[82.54271698 120.03286743]
[67.90303040 123.30082703]
[54.07542038 117.48729706]
[46.16891479 104.74024963]
[47.10480881 89.76947784]
[56.53731155 78.10637665]
[70.98129272 74.06022644]
[85.09999847 79.12601471]
[93.67658997 91.43117523]
[95.85342407 76.58997345]
[83.28698730 67.99660492]
[75.72856903 54.85288620]
[74.63090515 39.79249573]
[80.15830231 25.80647087]
[91.16460419 15.64916992]
[105.43045044 11.29588223]
[107.60728455 -3.54532337]
[109.78411865 -18.38652802]
[111.96096039 -33.22773361]
[97.92272949 -40.69833374]
[87.30051422 -52.49660873]
[81.35969543 -67.18973541]
[80.79861450 -83.00171661]
[85.66654205 -98.02803040]
[95.35993195 -110.46505737]
[108.69722748 -118.82656097]
[124.06278992 -122.12126160]
[125.93040466 -137.00453186]
[127.79801941 -151.88781738]
[129.66563416 -166.77110291]
[115.19889069 -170.84187317]
[101.50049591 -177.02342224]
[88.87646484 -185.17765808]
[77.60882568 -195.12239075]
[67.94931030 -206.63549805]
[60.11369705 -219.45971680]
[54.27705383 -233.30859375]
[50.56976700 -247.87271118]
[49.07465744 -262.82672119]
[49.82512665 -277.83654785]
[52.80441284 -292.56683350]
[57.94595337 -306.68850708]
[65.13488770 -319.88613892]
[74.21060944 -331.86480713]
[84.97035980 -342.35696411]
[97.17377472 -351.12820435]
[110.54821014 -357.98254395]
[124.79489136 -362.76687622]
[139.59552002 -365.37432861]
[154.61947632 -365.74661255]
[169.53109741 -363.87542725]
[183.99725342 -359.80261230]
[197.69476318 -353.61911011]
[210.31764221 -345.46307373]
[221.58386230 -335.51672363]
[231.24174500 -324.00225830]
[239.07551575 -311.17691040]
[244.91020203 -297.32720947]
[248.61540222 -282.76257324]
[250.10838318 -267.80834961]
[249.35577393 -252.79862976]
[246.37438965 -238.06877136]
[241.23085022 -223.94779968]
[234.04003906 -210.75122070]
[224.96260071 -198.77381897]
[214.20135498 -188.28320312]
[201.99670410 -179.51371765]
[188.62127686 -172.66127014]
[174.37391663 -167.87896729]
[159.57290649 -165.27363586]
[144.54890442 -164.90348816]
[142.68130493 -150.02020264]
[140.81369019 -135.13693237]
[138.94607544 -120.25364685]
[151.76013184 -114.16012573]
[162.07501221 -104.38542175]
[168.86883545 -91.87955475]
[171.46289062 -77.86399841]
[169.58944702 -63.71237946]
[163.41920471 -50.81585312]
[153.54600525 -40.44633102]
[140.92953491 -33.63107300]
[126.80216217 -31.05089760]
[124.62532806 -16.20969200]
[122.44849396 -1.36848652]
[120.27165222 13.47271919]
[132.68646240 21.73939705]
[140.31227112 34.62956619]
[141.59043884 49.61380005]
[136.21409607 63.72461319]
[125.19953156 74.14413452]
[110.69462585 78.76680756]
[108.51779175 93.60801697]
[107.58216095 108.57880402]
[107.89421844 123.57556152]
[117.80126190 139.06201172]
[108.82843018 154.11154175]
[109.45240784 169.09855652]
[110.07638550 184.08557129]
[113.34030151 189.95535278]
[113.13179779 195.71624756]
[110.40142059 199.70629883]
[110.40142059 214.70629883]
[110.40142059 229.70629883]
[110.40142059 244.70629883]
[110.40142059 259.70629883]
[110.40142059 274.70629883]
[110.40142059 289.70629883]
[110.40142059 304.70629883]
[110.40142059 319.70629883]
[110.40142059 334.70629883]
[110.40142059 349.70629883]
[124.94130707 353.76760864]
[137.84568787 361.60211182]
[148.15698242 372.62844849]
[155.11000061 386.02838135]
[158.18879700 400.80755615]
[157.16490173 415.86923218]
[152.11430359 430.09576416]
[143.41177368 442.43142700]
[131.70310974 451.96084595]
[117.85717773 457.97686768]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 127]
[23 126]
[24 125]
[27 123]
[28 122]
[37 121]
[38 120]
[44 114]
[45 113]
[46 112]
[47 111]
[55 102]
[56 101]
[57 100]
[58 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
