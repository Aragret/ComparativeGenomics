%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCCCAGUGGGGGGGGGGCUCAGCCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACxxxxxxxxxxUUCUAAUUUAAACUAUUCUCUGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCCCCCCCCCCCACCCAAGU\
) } def
/len { sequence length } bind def

/coor [
[67.11448669 549.73822021]
[53.26854706 543.72222900]
[41.55988693 534.19281006]
[32.85736084 521.85711670]
[27.80675888 507.63061523]
[26.78286743 492.56893921]
[29.86166763 477.78976440]
[36.81468964 464.38983154]
[47.12597275 453.36349487]
[60.03035355 445.52899170]
[74.57024384 441.46768188]
[74.57024384 426.46768188]
[74.57024384 411.46768188]
[74.57024384 396.46768188]
[74.57024384 381.46768188]
[74.57024384 366.46768188]
[74.57024384 351.46768188]
[74.57024384 336.46768188]
[74.57024384 321.46768188]
[74.57024384 306.46768188]
[64.29792786 317.39834595]
[49.59342194 320.36105347]
[35.88974762 314.26110840]
[28.25013924 301.35232544]
[29.49728012 286.40426636]
[39.17037582 274.93991089]
[53.69540787 271.19512939]
[67.70567322 276.55355835]
[76.02440643 289.03448486]
[78.50952911 274.24176025]
[80.99464417 259.44906616]
[78.98819733 252.28527832]
[83.68840790 244.37580872]
[86.48073578 229.63800049]
[89.27306366 214.90019226]
[82.57923889 198.70782471]
[94.62883759 184.82304382]
[97.11395264 170.03034973]
[90.34029388 159.95935059]
[92.33432770 147.58023071]
[102.56214905 139.65269470]
[105.35446930 124.91489410]
[83.58908844 119.11508942]
[75.14151001 98.51301575]
[61.89892578 91.46788025]
[48.65634155 84.42274475]
[35.41375351 77.37760925]
[19.05214691 78.48659515]
[10.13682270 64.72254181]
[17.83910370 50.24473572]
[34.23554230 49.94669724]
[42.45888901 64.13502502]
[55.70147324 71.18016052]
[68.94406128 78.22529602]
[82.18664551 85.27043152]
[95.57292938 78.50231171]
[97.74977112 63.66110992]
[99.92660522 48.81990433]
[101.94893646 33.95685577]
[103.81655121 19.07357597]
[105.68416595 4.19029617]
[107.55178070 -10.69298363]
[93.22225189 -15.27329063]
[79.97844696 -22.40886307]
[68.27145386 -31.85666656]
[58.50001144 -43.29491425]
[50.99691772 -56.33401871]
[46.01773834 -70.52987671]
[43.73205185 -85.39897919]
[44.21771622 -100.43489838]
[47.45818710 -115.12551117]
[53.34309387 -128.97045898]
[61.67199707 -141.49818420]
[72.16122437 -152.28199768]
[84.45350647 -160.95462036]
[98.13018799 -167.22065735]
[112.72542572 -170.86668396]
[127.74212646 -171.76853943]
[142.66882324 -169.89547729]
[156.99711609 -165.31130981]
[170.23899841 -158.17216492]
[181.94343567 -148.72120667]
[191.71180725 -137.28031921]
[199.21138000 -124.23919678]
[204.18673706 -110.04199219]
[206.46841431 -95.17227173]
[205.97869873 -80.13648987]
[202.73426819 -65.44675446]
[196.84562683 -51.60339355]
[188.51335144 -39.07791138]
[178.02120972 -28.29691696]
[165.72659302 -19.62760925]
[152.04823303 -13.36526108]
[137.45199585 -9.72316551]
[122.43505859 -8.82537079]
[120.56744385 6.05790949]
[118.69982910 20.94118881]
[116.83222198 35.82447052]
[119.13493347 42.89858627]
[114.76780701 50.99673843]
[112.59097290 65.83794403]
[110.41413879 80.67915344]
[115.46346283 86.22480774]
[126.55493164 76.12632751]
[136.65324402 87.21795654]
[125.56211090 97.31612396]
[130.61143494 102.86177826]
[145.59115601 102.08193970]
[160.57086182 101.30209351]
[172.33488464 90.39395905]
[188.17579651 92.93271637]
[195.94178772 106.97083282]
[189.67547607 121.73947906]
[174.18382263 125.90940857]
[161.35070801 116.28180695]
[146.37100220 117.06165314]
[131.39128113 117.84149933]
[120.09227753 127.70722198]
[117.29994965 142.44502258]
[123.79454803 159.64385986]
[111.90666199 172.51545715]
[109.42153931 187.30816650]
[116.27048492 198.28750610]
[113.85344696 210.59103394]
[104.01086426 217.69252014]
[101.21854401 232.43032837]
[98.42621613 247.16813660]
[95.78735352 261.93417358]
[93.30223083 276.72689819]
[90.81711578 291.51959229]
[89.57024384 306.46768188]
[89.57024384 321.46768188]
[89.57024384 336.46768188]
[89.57024384 351.46768188]
[89.57024384 366.46768188]
[89.57024384 381.46768188]
[89.57024384 396.46768188]
[89.57024384 411.46768188]
[89.57024384 426.46768188]
[89.57024384 441.46768188]
[104.11013031 445.52899170]
[117.01451111 453.36349487]
[127.32579041 464.38983154]
[134.27880859 477.78976440]
[137.35762024 492.56893921]
[136.33372498 507.63061523]
[131.28312683 521.85711670]
[122.58059692 534.19281006]
[110.87193298 543.72222900]
[97.02599335 549.73822021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 130]
[30 129]
[31 128]
[33 127]
[34 126]
[35 125]
[37 122]
[38 121]
[41 119]
[42 118]
[44 55]
[45 54]
[46 53]
[47 52]
[56 102]
[57 101]
[58 100]
[59 98]
[60 97]
[61 96]
[62 95]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
