%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCGAAGCCGGGGGGGGGGGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUGACUAUUUCUGUAUGUxxxxxxxxxxGGCAUCAACCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCCCCCCCCCCCUUCAAAGCC\
) } def
/len { sequence length } bind def

/coor [
[88.74698639 550.81536865]
[74.90105438 544.79937744]
[63.19239044 535.26995850]
[54.48986435 522.93426514]
[49.43926239 508.70776367]
[48.41537094 493.64608765]
[51.49417114 478.86691284]
[58.44719315 465.46697998]
[68.75847626 454.44064331]
[81.66285706 446.60614014]
[96.20274353 442.54483032]
[96.20274353 427.54483032]
[96.20274353 412.54483032]
[96.20274353 397.54483032]
[96.20274353 382.54483032]
[96.20274353 367.54483032]
[96.20274353 352.54483032]
[96.20274353 337.54483032]
[96.20274353 322.54483032]
[96.20274353 307.54483032]
[96.20274353 292.54483032]
[85.52187347 282.22714233]
[85.30818939 267.01501465]
[96.20274353 255.88189697]
[96.20274353 240.88189697]
[88.46544647 228.15461731]
[96.20274353 214.35444641]
[96.20274353 199.35444641]
[86.61163330 184.69120789]
[95.86589050 168.80604553]
[95.55384064 153.80929565]
[95.24178314 138.81253052]
[94.46193695 123.83281708]
[93.21506500 108.88473511]
[91.81275940 93.95042419]
[90.25518036 79.03151703]
[88.69759369 64.11260223]
[73.96183014 55.87189484]
[67.08773804 40.63285446]
[70.59293365 24.45634270]
[82.90924835 13.64829636]
[81.04163361 -1.23498321]
[79.01929474 -16.09803009]
[76.84246063 -30.93923569]
[74.66562653 -45.78044128]
[65.00751495 -58.31166458]
[70.81589508 -72.02706146]
[68.63906097 -86.86826324]
[66.46221924 -101.70947266]
[64.28538513 -116.55067444]
[62.10854721 -131.39187622]
[59.93170929 -146.23307800]
[57.75487518 -161.07429504]
[55.11600876 -175.84034729]
[52.01768875 -190.51687622]
[48.91936493 -205.19340515]
[33.86302185 -205.20875549]
[19.13897324 -208.35455322]
[5.39088678 -214.49325562]
[-6.78022718 -223.35653687]
[-16.84230042 -234.55691528]
[-24.35546303 -247.60475159]
[-28.99127197 -261.92965698]
[-30.54706764 -276.90539551]
[-28.95483971 -291.87731934]
[-24.28419113 -306.19091797]
[-16.73930359 -319.22042847]
[-6.65000916 -330.39630127]
[5.54263401 -339.22991943]
[19.30561447 -345.33517456]
[34.03727722 -348.44512939]
[49.09361267 -348.42385864]
[63.81642151 -345.27227783]
[77.56209564 -339.12814331]
[89.72972107 -330.26010132]
[99.78738403 -319.05575562]
[107.29541779 -306.00497437]
[111.92559052 -291.67822266]
[113.47549438 -276.70187378]
[111.87737274 -261.73059082]
[107.20109558 -247.41882324]
[99.65108490 -234.39227295]
[89.55738831 -223.22038269]
[77.36127472 -214.39155579]
[63.59589005 -208.29171753]
[66.69421387 -193.61518860]
[69.79253387 -178.93867493]
[72.59674072 -176.70172119]
[74.42712402 -172.96656799]
[74.57835388 -168.22004700]
[72.59607697 -163.25112915]
[74.77291870 -148.40992737]
[76.94975281 -133.56871033]
[79.12658691 -118.72750854]
[81.30342865 -103.88630676]
[83.48026276 -89.04509735]
[85.65710449 -74.20389557]
[95.15950775 -62.73421478]
[89.50682831 -47.95727921]
[91.68366241 -33.11607361]
[93.86050415 -18.27486610]
[97.96958923 -12.07316780]
[95.92491150 -3.10259628]
[97.79252625 11.78068352]
[110.06352234 17.13032150]
[118.14037323 27.94123840]
[119.81758118 41.44077301]
[114.54844666 54.09973526]
[103.61650848 62.55501938]
[105.17408752 77.47393036]
[106.73166656 92.39284515]
[110.65673065 99.49762726]
[108.16314697 107.63785553]
[109.41002655 122.58594513]
[112.46788788 126.97559357]
[113.39742279 131.63267517]
[112.46214294 135.68568420]
[110.23853302 138.50047302]
[110.55059052 153.49723816]
[110.86264801 168.49398804]
[119.63572693 178.00643921]
[119.55130005 190.54486084]
[111.20274353 199.35444641]
[111.20274353 214.35444641]
[118.94004822 228.15461731]
[111.20274353 240.88189697]
[111.20274353 255.88189697]
[122.09729767 267.01501465]
[121.88361359 282.22714233]
[111.20274353 292.54483032]
[111.20274353 307.54483032]
[111.20274353 322.54483032]
[111.20274353 337.54483032]
[111.20274353 352.54483032]
[111.20274353 367.54483032]
[111.20274353 382.54483032]
[111.20274353 397.54483032]
[111.20274353 412.54483032]
[111.20274353 427.54483032]
[111.20274353 442.54483032]
[125.74263000 446.60614014]
[138.64701843 454.44064331]
[148.95829773 465.46697998]
[155.91131592 478.86691284]
[158.99011230 493.64608765]
[157.96623230 508.70776367]
[152.91561890 522.93426514]
[144.21310425 535.26995850]
[132.50444031 544.79937744]
[118.65850067 550.81536865]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 127]
[25 126]
[27 124]
[28 123]
[30 120]
[31 119]
[32 118]
[33 114]
[34 113]
[35 111]
[36 110]
[37 109]
[41 104]
[42 103]
[43 101]
[44 100]
[45 99]
[47 97]
[48 96]
[49 95]
[50 94]
[51 93]
[52 92]
[53 91]
[54 87]
[55 86]
[56 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
