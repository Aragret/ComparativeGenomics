%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAAUACAAGGGGGGGGGGCCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACCCCAUACCCxxxxxxxxxxUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUCCCCCCCCCCAUCAAUAUAA\
) } def
/len { sequence length } bind def

/coor [
[95.39761353 381.63378906]
[81.55167389 375.61776733]
[69.84300995 366.08834839]
[61.14048767 353.75268555]
[56.08988571 339.52618408]
[55.06599426 324.46447754]
[58.14479065 309.68533325]
[65.09781647 296.28540039]
[75.40909576 285.25906372]
[88.31347656 277.42456055]
[102.85336304 273.36325073]
[102.85336304 258.36325073]
[102.85336304 243.36325073]
[102.85336304 228.36325073]
[102.85336304 213.36325073]
[102.85336304 198.36325073]
[102.85336304 183.36325073]
[102.85336304 168.36325073]
[102.85336304 153.36325073]
[102.85336304 138.36325073]
[86.60838318 135.08996582]
[73.62397766 125.44341278]
[66.17484283 111.53252411]
[65.38497925 96.16880035]
[71.06919098 82.30020905]
[81.83165741 72.44567871]
[76.63624573 58.37415695]
[71.44082642 44.30263901]
[66.24541473 30.23111916]
[62.12587357 26.81805992]
[59.98584366 22.57864380]
[59.80422592 18.42308235]
[61.19493484 15.11650944]
[56.88734818 0.74832571]
[52.57976532 -13.61985874]
[38.03124237 -12.74066448]
[23.66157341 -15.13348675]
[10.19693661 -20.67399025]
[-1.68298995 -29.07885551]
[-11.37933254 -39.92026901]
[-18.40421486 -52.64769363]
[-22.40530968 -66.61582184]
[-23.18349838 -81.11730957]
[-20.70278549 -95.41857147]
[-15.09194851 -108.79691315]
[-6.63785172 -120.57703400]
[4.22921181 -130.16513062]
[16.95742416 -137.07882690]
[12.94968414 -151.53350830]
[8.94194412 -165.98820496]
[4.93420362 -180.44288635]
[0.92646354 -194.89756775]
[-3.58399916 -199.87384033]
[-4.68787909 -205.53182983]
[-2.93390179 -210.03727722]
[-6.33687973 -224.64616394]
[-9.73985767 -239.25506592]
[-13.14283562 -253.86395264]
[-16.54581451 -268.47283936]
[-31.62796021 -269.12966919]
[-45.97325134 -273.83233643]
[-58.51717377 -282.23190308]
[-68.32888031 -293.70504761]
[-74.68028259 -307.40039062]
[-77.10005951 -322.30163574]
[-75.40864563 -337.30303955]
[-69.73156738 -351.29135132]
[-60.49008560 -363.22860718]
[-48.36999130 -372.22891235]
[-34.27066803 -377.62445068]
[-19.23838806 -379.01480103]
[-4.38863897 -376.29678345]
[9.17662716 -369.67214966]
[20.45077705 -359.63241577]
[28.59719276 -346.92263794]
[33.01136017 -332.48596191]
[33.36571121 -317.39367676]
[29.63396072 -302.76571655]
[22.09302139 -289.68762207]
[11.30248451 -279.12982178]
[-1.93692112 -271.87582397]
[1.46605682 -257.26693726]
[4.86903477 -242.65803528]
[8.27201271 -228.04914856]
[11.67499065 -213.44024658]
[15.38115215 -198.90531921]
[19.38889313 -184.45062256]
[23.39663315 -169.99594116]
[27.40437317 -155.54124451]
[31.41211319 -141.08656311]
[46.86686707 -141.63885498]
[62.01634598 -138.48966980]
[75.98638916 -131.81648254]
[87.96990204 -122.00023651]
[97.27343750 -109.60356903]
[103.35738373 -95.33861542]
[105.86718750 -80.02605438]
[104.65408325 -64.54793549]
[99.78385925 -49.79682159]
[91.53332520 -36.62436295]
[80.37456512 -25.79209709]
[66.94794464 -17.92744255]
[71.25553131 -3.55925894]
[75.56311798 10.80892563]
[80.31693268 25.03570366]
[85.51234436 39.10722351]
[90.70776367 53.17874146]
[95.90317535 67.25025940]
[110.01488495 67.40606689]
[123.22166443 73.55877686]
[133.01696777 84.95426941]
[137.37590027 99.81211090]
[135.16448975 115.59932709]
[149.28929138 120.64808655]
[163.41409302 125.69683838]
[177.53889465 130.74559021]
[189.19514465 120.74423218]
[204.29339600 117.92668915]
[218.77229309 123.05088806]
[228.73707581 134.73843384]
[231.50726318 149.84542847]
[226.33770752 164.30819702]
[214.61898804 174.23628235]
[199.50337219 176.95912170]
[185.05690002 171.74426270]
[175.16558838 159.99447632]
[172.49014282 144.87040710]
[158.36534119 139.82164001]
[144.24053955 134.77288818]
[130.11573792 129.72413635]
[117.85336304 138.36325073]
[117.85336304 153.36325073]
[117.85336304 168.36325073]
[117.85336304 183.36325073]
[117.85336304 198.36325073]
[117.85336304 213.36325073]
[117.85336304 228.36325073]
[117.85336304 243.36325073]
[117.85336304 258.36325073]
[117.85336304 273.36325073]
[132.39324951 277.42456055]
[145.29763794 285.25906372]
[155.60891724 296.28540039]
[162.56193542 309.68533325]
[165.64073181 324.46447754]
[164.61685181 339.52618408]
[159.56623840 353.75268555]
[150.86372375 366.08834839]
[139.15505981 375.61776733]
[125.30912018 381.63378906]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 108]
[27 107]
[28 106]
[29 105]
[33 104]
[34 103]
[35 102]
[48 90]
[49 89]
[50 88]
[51 87]
[52 86]
[55 85]
[56 84]
[57 83]
[58 82]
[59 81]
[113 130]
[114 129]
[115 128]
[116 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
