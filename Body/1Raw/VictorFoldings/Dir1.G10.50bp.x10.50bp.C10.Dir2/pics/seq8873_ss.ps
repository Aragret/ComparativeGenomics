%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCCAUGGGGGGGGGGGUGAUUUCACUUCCACUCCAUAACGCUCCUCAUACUAGGCCUACUAACCAAxxxxxxxxxxGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCCCCCCCCCCCUAGCCAUG\
) } def
/len { sequence length } bind def

/coor [
[76.32472992 358.14227295]
[63.45145416 350.23941040]
[53.32715988 339.02890015]
[46.77257919 325.41955566]
[44.31905746 310.51461792]
[46.16549301 295.52239990]
[52.16220474 281.65817261]
[61.82306671 270.04592896]
[74.36491394 261.62698364]
[88.77103424 257.08383179]
[88.45897675 242.08706665]
[88.14692688 227.09031677]
[87.83486938 212.09355164]
[87.52281189 197.09680176]
[87.21075439 182.10005188]
[86.89869690 167.10330200]
[86.58663940 152.10653687]
[86.27458954 137.10978699]
[85.96253204 122.11303711]
[86.26038361 98.36883545]
[74.36800385 89.22710419]
[62.47562027 80.08536530]
[50.58324051 70.94363403]
[40.27679825 81.86005402]
[28.91882706 91.67776489]
[16.62587357 100.29602051]
[3.52408719 107.62638092]
[-10.25208664 113.59362793]
[-24.56128311 118.13652802]
[-39.25666428 121.20845795]
[-54.18743515 122.77790070]
[-69.20037842 122.82875061]
[-84.14143372 121.36048126]
[-98.85728455 118.38816071]
[-113.19692993 113.94229889]
[-127.01320648 108.06850433]
[-140.16435242 100.82705688]
[-152.51539612 92.29227448]
[-163.93960571 82.55171967]
[-174.31976318 71.70536804]
[-183.54933167 59.86450195]
[-191.53361511 47.15063858]
[-198.19065857 33.69423676]
[-203.45217896 19.63339043]
[-207.26416016 5.11237955]
[-209.58750916 -9.71978474]
[-210.39836121 -24.71089935]
[-209.68841553 -39.70713043]
[-207.46493530 -54.55459595]
[-203.75076294 -69.10092926]
[-198.58398438 -83.19686890]
[-192.01765442 -96.69776154]
[-184.11911011 -109.46507263]
[-174.96943665 -121.36778259]
[-164.66252136 -132.28375244]
[-153.30410767 -142.10096741]
[-141.01077271 -150.71867371]
[-127.90866852 -158.04846191]
[-114.13223267 -164.01510620]
[-99.82283783 -168.55737305]
[-85.12731934 -171.62864685]
[-70.19647980 -173.19743347]
[-55.18353653 -173.24761963]
[-40.24254608 -171.77870178]
[-25.52682304 -168.80574036]
[-11.18737793 -164.35923767]
[2.62864256 -158.48483276]
[15.77946377 -151.24281311]
[28.13013649 -142.70747375]
[39.55392456 -132.96643066]
[49.93359756 -122.11961365]
[59.16264725 -110.27834320]
[67.14636230 -97.56412506]
[73.80282593 -84.10743713]
[79.06372070 -70.04635620]
[82.87506866 -55.52518082]
[85.19776154 -40.69291306]
[86.00795746 -25.70176315]
[85.29734802 -10.70556164]
[83.07321930 4.14180470]
[79.35840607 18.68797684]
[74.19100952 32.78368759]
[67.62406921 46.28429413]
[59.72497559 59.05125427]
[71.61735535 68.19298553]
[83.50973511 77.33472443]
[95.40211487 86.47645569]
[110.13992310 89.26878357]
[124.55213928 85.11089325]
[138.96435547 80.95300293]
[153.37657166 76.79512024]
[162.23194885 54.59654999]
[189.10437012 48.89352798]
[200.99674988 39.75179291]
[212.88912964 30.61005974]
[218.64817810 15.25541019]
[234.86740112 12.83285713]
[244.86184692 25.83451653]
[238.35008240 40.88539505]
[222.03085327 42.50244141]
[210.13847351 51.64417267]
[198.24609375 60.78590775]
[204.02236938 74.62912750]
[218.88542175 72.60678864]
[233.74845886 70.58445740]
[248.61151123 68.56212616]
[256.80276489 55.24155807]
[271.65615845 50.35172272]
[286.15838623 56.20145035]
[293.46194458 70.02867126]
[290.11831665 85.30460358]
[277.70623779 94.81641388]
[262.08633423 94.07291412]
[250.63385010 83.42517090]
[235.77079773 85.44750214]
[220.90774536 87.46984100]
[206.04470825 89.49217224]
[197.42895508 99.45353699]
[186.00933838 104.56039429]
[174.16201782 104.35490417]
[164.11605835 99.42740631]
[157.53445435 91.20733643]
[143.12223816 95.36521912]
[128.71002197 99.52310944]
[114.29780579 103.68099976]
[129.17317200 105.61067963]
[137.78150940 117.89467621]
[134.51832581 132.53543091]
[121.50813293 140.00100708]
[107.22127533 135.43092346]
[100.95928192 121.80097961]
[101.27133942 136.79772949]
[101.58339691 151.79447937]
[101.89545441 166.79124451]
[102.20751190 181.78799438]
[102.51956177 196.78474426]
[102.83161926 211.78149414]
[103.14367676 226.77825928]
[103.45573425 241.77500916]
[103.76779175 256.77175903]
[118.35043335 260.71173096]
[131.23164368 268.60165405]
[141.36718750 279.80197144]
[147.93544006 293.40472412]
[150.40393066 308.30718994]
[148.57255554 323.30126953]
[142.58978271 337.17150879]
[132.94058228 348.79345703]
[120.40720367 357.22500610]
[106.00565338 361.78262329]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 87]
[21 86]
[22 85]
[23 84]
[88 125]
[89 124]
[90 123]
[91 122]
[93 102]
[94 101]
[95 100]
[103 117]
[104 116]
[105 115]
[106 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
