%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCAUUCAGGGGGGGGGGUUUCUCUAACAGCAGUAAUAUUAAUAAUUUUCAUGAUUUGAGAAGCCUUCxxxxxxxxxxUACUAGUCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGCCCCCCCCCCGGCUCACUCA\
) } def
/len { sequence length } bind def

/coor [
[87.99050140 345.94168091]
[73.50080872 341.73318481]
[60.59458160 333.91708374]
[50.15178299 323.02624512]
[42.88441849 309.80322266]
[39.28799057 295.14962769]
[39.60771179 280.06454468]
[43.82178116 265.57647705]
[51.64287949 252.67326355]
[62.53774643 242.23466492]
[75.76355743 234.97241211]
[90.41854858 231.38163757]
[90.73060608 216.38488770]
[91.04266357 201.38812256]
[91.35472107 186.39137268]
[91.66677094 171.39462280]
[91.97882843 156.39787292]
[92.29088593 141.40110779]
[92.60294342 126.40435791]
[92.91500092 111.40760803]
[89.77813721 108.11260986]
[87.99905396 104.06634521]
[73.35555267 100.81552124]
[58.71204758 97.56468964]
[44.06854630 94.31386566]
[29.42504501 91.06304169]
[20.30261040 92.26013184]
[14.51221657 87.58926392]
[-0.06048663 84.03450012]
[-9.20585155 85.04154968]
[-14.89782047 80.25123596]
[-30.22353554 84.17972565]
[-40.53322983 73.42986298]
[-55.02882385 69.57270050]
[-68.58905029 77.23809052]
[-83.23469543 73.11988831]
[-90.45890808 60.14505005]
[-104.95449829 56.28789139]
[-120.28022003 60.21637726]
[-130.58990479 49.46651840]
[-145.08551025 45.60935974]
[-159.58110046 41.75219727]
[-176.44239807 43.52228165]
[-182.81097412 27.80994415]
[-169.47567749 17.34064484]
[-155.72393799 27.25660133]
[-141.22834778 31.11376190]
[-126.73274994 34.97092056]
[-112.44385529 30.76654243]
[-101.09734344 41.79229355]
[-86.60174561 45.64945221]
[-73.88449097 37.98087311]
[-59.12894821 41.68608856]
[-51.17166519 55.07710648]
[-36.67607117 58.93426514]
[-22.38717651 54.72988892]
[-11.04066086 65.75563812]
[3.49427533 69.46179962]
[18.06697845 73.01656342]
[32.67586899 76.41954041]
[47.31937027 79.67036438]
[61.96287155 82.92118835]
[76.60637665 86.17201996]
[91.24987793 89.42284393]
[105.92639923 86.32452393]
[118.00639343 77.43216705]
[130.08638000 68.53981781]
[122.43404388 55.62392426]
[116.10575867 42.01027679]
[111.16442108 27.83417892]
[107.65913391 13.23652077]
[105.62475586 -1.63761449]
[105.08148193 -16.64039612]
[106.03472900 -31.62271690]
[108.47501373 -46.43567276]
[112.37808228 -60.93203735]
[117.70515442 -74.96774292]
[124.40326691 -88.40328217]
[132.40586853 -101.10513306]
[141.63340759 -112.94705200]
[151.99418640 -123.81134796]
[163.38523865 -133.59004211]
[175.69332886 -142.18594360]
[188.79614258 -149.51361084]
[202.56344604 -155.50024414]
[216.85842896 -160.08631897]
[231.53901672 -163.22627258]
[246.45927429 -164.88888550]
[261.47094727 -165.05763245]
[276.42480469 -163.73085022]
[291.17227173 -160.92170715]
[305.56674194 -156.65814209]
[319.46514893 -150.98251343]
[332.72937012 -143.95123291]
[345.22760010 -135.63418579]
[356.83557129 -126.11404419]
[367.43795776 -115.48540497]
[376.92938232 -103.85391235]
[385.21548462 -91.33516693]
[392.21395874 -78.05358887]
[397.85519409 -64.14118958]
[402.08316040 -49.73622513]
[404.85580444 -34.98186874]
[406.14559937 -20.02476501]
[405.93972778 -5.01356077]
[404.24023438 9.90254784]
[401.06399536 24.57531548]
[396.44259644 38.85891342]
[390.42193604 52.61138153]
[383.06188965 65.69603729]
[374.43557739 77.98283386]
[364.62875366 89.34965515]
[353.73886108 99.68354034]
[341.87414551 108.88177490]
[329.15255737 116.85293579]
[315.70050049 123.51781464]
[301.65167236 128.81015015]
[287.14569092 132.67736816]
[272.32675171 135.08100891]
[257.34210205 135.99720764]
[242.34071350 135.41683960]
[227.47164917 133.34568787]
[212.88270569 129.80432129]
[198.71887207 124.82793427]
[185.12091064 118.46600342]
[172.22398376 110.78175354]
[160.15625000 101.85154724]
[149.03767395 91.76415253]
[138.97872925 80.61981201]
[126.89874268 89.51216125]
[114.81874847 98.40451050]
[107.91175079 111.71966553]
[107.59969330 126.71641541]
[107.28764343 141.71316528]
[106.97558594 156.70993042]
[106.66352844 171.70668030]
[106.35147095 186.70343018]
[106.03941345 201.70018005]
[105.72735596 216.69694519]
[105.41530609 231.69369507]
[119.90824127 235.89097595]
[132.82049561 243.69712830]
[143.27171326 254.57989502]
[150.54928589 267.79727173]
[154.15702820 282.44812012]
[153.84895325 297.53344727]
[149.64607239 312.02474976]
[141.83494568 324.93402100]
[130.94813538 335.38101196]
[117.72793579 342.65347290]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[22 64]
[23 63]
[24 62]
[25 61]
[26 60]
[28 59]
[29 58]
[31 57]
[33 55]
[34 54]
[37 51]
[38 50]
[40 48]
[41 47]
[42 46]
[65 131]
[66 130]
[67 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
