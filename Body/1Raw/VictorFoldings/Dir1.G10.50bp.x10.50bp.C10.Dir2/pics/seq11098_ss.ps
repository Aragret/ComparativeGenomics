%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACCCUUACGGGGGGGGGGUAACAUUAACGAAAAUAACCCCACCCUACUAAACCCCAUUAAACGCCUGGxxxxxxxxxxUUGGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCCCCCCCCCCCACCCUCAC\
) } def
/len { sequence length } bind def

/coor [
[95.82594299 392.74508667]
[81.80400085 387.19207764]
[69.60404205 378.32574463]
[59.99296951 366.70343018]
[53.57494736 353.05575562]
[50.75341034 338.24057007]
[51.70572281 323.18917847]
[56.37202835 308.84774780]
[64.45899963 296.11779785]
[75.45826721 285.79953003]
[88.67842865 278.54156494]
[103.28844452 274.80010986]
[103.28844452 259.80010986]
[103.28844452 244.80010986]
[103.28844452 229.80010986]
[103.28844452 214.80010986]
[103.28844452 199.80010986]
[103.28844452 184.80010986]
[103.28844452 169.80010986]
[103.28844452 154.80010986]
[103.28844452 139.80010986]
[80.88296509 132.37963867]
[67.82154083 114.43542480]
[67.68411255 93.64830017]
[78.89770508 77.83981323]
[71.53146362 64.77311707]
[64.16522217 51.70642090]
[56.79898453 38.63972855]
[49.29898453 25.64934540]
[41.66601562 12.73664856]
[34.03304672 -0.17604986]
[19.39074707 3.49587440]
[4.32224703 2.89369249]
[-9.95160389 -1.92525268]
[-22.27675247 -10.56232357]
[-31.65924454 -22.31054878]
[-37.34537506 -36.21249390]
[-38.88224411 -51.13826752]
[-36.15379715 -65.87738037]
[-29.38955879 -79.23688507]
[-19.14534950 -90.13796234]
[-26.77832031 -103.05065918]
[-34.41128922 -115.96335602]
[-42.04425812 -128.87605286]
[-55.95417023 -124.52806091]
[-70.47641754 -123.39860535]
[-84.87641907 -125.54145813]
[-98.42655182 -130.84492493]
[-110.44287872 -139.03770447]
[-120.31968689 -149.70274353]
[-127.56003571 -162.29850769]
[-131.80073547 -176.18640137]
[-132.83058167 -190.66322327]
[-130.60084534 -204.99668884]
[-125.22760010 -218.46257019]
[-116.98566437 -230.38119507]
[-106.29456329 -240.15185547]
[-113.66080475 -253.21855164]
[-121.02704620 -266.28524780]
[-136.43418884 -267.07479858]
[-148.95530701 -276.08731079]
[-154.59495544 -290.44689941]
[-151.55352783 -305.57147217]
[-140.80155945 -316.63488770]
[-125.76993561 -320.10678101]
[-111.25521851 -314.87930298]
[-101.88898468 -302.62054443]
[-100.65997314 -287.24221802]
[-107.96035004 -273.65148926]
[-100.59410858 -260.58477783]
[-93.22787476 -247.51809692]
[-78.35812378 -251.77098083]
[-62.89453506 -252.35693359]
[-47.72852325 -249.23800659]
[-33.73534393 -242.58996582]
[-21.72358894 -232.79235840]
[-12.38843346 -220.40686035]
[-6.27143049 -206.14509583]
[-3.72908163 -190.82769775]
[-4.91206741 -175.33714294]
[-9.75632191 -160.56687927]
[-17.98648643 -147.36981201]
[-29.13156128 -136.50901794]
[-21.49859238 -123.59632874]
[-13.86562157 -110.68363190]
[-6.23265171 -97.77092743]
[8.25674915 -101.49041748]
[23.22225952 -100.97582245]
[37.45074463 -96.26031494]
[49.78640366 -87.71794128]
[59.22465515 -76.03395081]
[64.99394989 -62.14989090]
[66.61884308 -47.18767166]
[63.95914841 -32.35894775]
[57.22200012 -18.86698341]
[46.94574356 -7.80902004]
[54.57871628 5.10367823]
[62.21168518 18.01637650]
[68.36072540 22.19985008]
[69.86568451 31.27348709]
[77.23191833 44.34018326]
[84.59815979 57.40687561]
[91.96440125 70.47357178]
[107.07755280 67.83528137]
[122.69041443 73.00037384]
[134.78404236 85.71810913]
[139.76425171 103.69687653]
[154.76347351 103.85087585]
[169.76268005 104.00486755]
[184.76188660 104.15886688]
[199.76109314 104.31286621]
[209.79711914 92.32068634]
[225.20252991 89.63607788]
[238.70338440 97.52664185]
[243.92498779 112.26669312]
[238.40184021 126.89641571]
[224.74183655 134.50811768]
[209.39477539 131.50778198]
[199.60710144 119.31207275]
[184.60789490 119.15807343]
[169.60867310 119.00408173]
[154.60946655 118.85008240]
[139.61026001 118.69608307]
[134.27980042 123.97209167]
[147.36901855 131.29824829]
[160.70989990 138.15542603]
[162.99206543 152.98078918]
[152.33110046 163.53274536]
[137.52996826 161.09829712]
[130.81028748 147.68785095]
[123.61889648 134.52410889]
[118.28844452 139.80010986]
[118.28844452 154.80010986]
[118.28844452 169.80010986]
[118.28844452 184.80010986]
[118.28844452 199.80010986]
[118.28844452 214.80010986]
[118.28844452 229.80010986]
[118.28844452 244.80010986]
[118.28844452 259.80010986]
[118.28844452 274.80010986]
[132.89845276 278.54156494]
[146.11862183 285.79953003]
[157.11788940 296.11779785]
[165.20484924 308.84774780]
[169.87115479 323.18917847]
[170.82347107 338.24057007]
[168.00193787 353.05575562]
[161.58390808 366.70343018]
[151.97283936 378.32574463]
[139.77288818 387.19207764]
[125.75093842 392.74508667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[25 103]
[26 102]
[27 101]
[28 100]
[29 98]
[30 97]
[31 96]
[41 86]
[42 85]
[43 84]
[44 83]
[57 71]
[58 70]
[59 69]
[107 123]
[108 122]
[109 121]
[110 120]
[111 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
