%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGUCCCCGGGGGGGGGGACAUUAGGCUUAAAAACAGAUGCAAUUCCCGGACGUCUAAACCAAACCACxxxxxxxxxxUUAGCAUCAUCCCUCUACUAUUUUUUAACCAAAUCAACAACAACCUAUUUCCCCCCCCCCAGCUGUUCCC\
) } def
/len { sequence length } bind def

/coor [
[86.51406097 385.00350952]
[72.66812134 378.98748779]
[60.95946121 369.45806885]
[52.25693893 357.12240601]
[47.20633698 342.89587402]
[46.18244553 327.83419800]
[49.26124191 313.05505371]
[56.21426392 299.65512085]
[66.52555084 288.62878418]
[79.42993164 280.79428101]
[93.96981812 276.73297119]
[93.96981812 261.73297119]
[93.96981812 246.73295593]
[93.96981812 231.73295593]
[93.96981812 216.73295593]
[93.96981812 201.73295593]
[93.96981812 186.73295593]
[93.96981812 171.73295593]
[93.96981812 156.73295593]
[93.96981812 141.73295593]
[93.96981812 126.73296356]
[77.55931854 105.48895264]
[87.86534882 85.64092255]
[83.55776215 71.27273560]
[79.25017548 56.90455246]
[67.87575531 45.90759659]
[71.63222504 31.49447250]
[67.32464600 17.12628746]
[61.82852936 9.74763298]
[63.08025360 2.41422749]
[59.07251358 -12.04046059]
[55.06477356 -26.49514961]
[51.05703354 -40.94983673]
[47.04928970 -55.40452576]
[43.04154968 -69.85921478]
[39.03380966 -84.31390381]
[28.43505096 -87.69476318]
[20.89072418 -96.64159393]
[19.18269348 -108.80374908]
[12.00018501 -121.97233582]
[4.81767607 -135.14091492]
[-2.36483264 -148.30949402]
[-9.54734135 -161.47808838]
[-23.66547394 -156.32676697]
[-38.39369965 -153.33729553]
[-53.40298843 -152.57643127]
[-68.35802460 -154.06118774]
[-82.92471313 -157.75840759]
[-96.77761841 -163.58546448]
[-109.60726929 -171.41218567]
[-121.12704468 -181.06375122]
[-131.07958984 -192.32449341]
[-139.24255371 -204.94288635]
[-145.43357849 -218.63699341]
[-149.51435852 -233.10090637]
[-151.39372253 -248.01150513]
[-151.02969360 -263.03564453]
[-148.43038940 -277.83773804]
[-143.65388489 -292.08703613]
[-136.80690002 -305.46524048]
[-128.04237366 -317.67346191]
[-117.55613708 -328.43899536]
[-105.58243561 -337.52127075]
[-92.38877869 -344.71746826]
[-78.26991272 -349.86676025]
[-63.54126358 -352.85415649]
[-48.53186417 -353.61288452]
[-33.57703781 -352.12597656]
[-19.01088142 -348.42669678]
[-5.15880394 -342.59765625]
[7.66973209 -334.76910400]
[19.18813133 -325.11590576]
[29.13907051 -313.85375977]
[37.30023956 -301.23419189]
[43.48931885 -287.53921509]
[47.56803894 -273.07470703]
[49.44528198 -258.16384888]
[49.07910538 -243.13975525]
[46.47769165 -228.33804321]
[41.69916153 -214.08943176]
[34.85026169 -200.71220398]
[26.08400536 -188.50521851]
[15.59623146 -177.74119568]
[3.62124109 -168.66059875]
[10.80375004 -155.49200439]
[17.98625946 -142.32342529]
[25.16876793 -129.15484619]
[32.35127640 -115.98625946]
[47.16903305 -113.65515900]
[58.04785919 -123.98236084]
[55.06069946 -139.11776733]
[60.75180054 -153.45704651]
[73.30515289 -162.42459106]
[88.71503448 -163.15888977]
[102.06420135 -155.42562866]
[109.09297943 -141.69245911]
[107.55852509 -126.34159851]
[97.95046234 -114.27143860]
[83.33469391 -109.33352661]
[68.37506104 -113.10353851]
[57.49623871 -102.77632904]
[53.48849869 -88.32164001]
[57.49623871 -73.86695862]
[61.50397873 -59.41226578]
[65.51171875 -44.95757675]
[69.51946259 -30.50288963]
[73.52719879 -16.04820061]
[77.53494263 -1.59351289]
[81.69282532 12.81870365]
[86.00041199 27.18688774]
[97.06672668 37.15613556]
[93.61836243 52.59696579]
[97.92594147 66.96514893]
[102.23352814 81.33333588]
[118.47021484 86.12326050]
[127.04121399 104.44826508]
[140.94377136 110.08021545]
[153.00598145 100.57238770]
[168.20835876 98.38535309]
[182.46154785 104.10741425]
[191.93153381 116.19936371]
[194.07089233 131.40852356]
[188.30418396 145.64372253]
[176.18261719 155.07574463]
[160.96682739 157.16743469]
[146.74978638 151.35612488]
[137.35580444 139.20504761]
[135.31181335 123.98277283]
[121.40925598 118.35081482]
[108.96981812 126.73296356]
[108.96981812 141.73295593]
[108.96981812 156.73295593]
[108.96981812 171.73295593]
[108.96981812 186.73295593]
[108.96981812 201.73295593]
[108.96981812 216.73295593]
[108.96981812 231.73295593]
[108.96981812 246.73295593]
[108.96981812 261.73297119]
[108.96981812 276.73297119]
[123.50970459 280.79428101]
[136.41407776 288.62878418]
[146.72537231 299.65512085]
[153.67839050 313.05505371]
[156.75718689 327.83419800]
[155.73329163 342.89587402]
[150.68269348 357.12240601]
[141.98017883 369.45806885]
[130.27151489 378.98748779]
[116.42557526 385.00350952]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 114]
[24 113]
[25 112]
[27 110]
[28 109]
[30 108]
[31 107]
[32 106]
[33 105]
[34 104]
[35 103]
[36 102]
[39 88]
[40 87]
[41 86]
[42 85]
[43 84]
[89 101]
[90 100]
[116 129]
[117 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
