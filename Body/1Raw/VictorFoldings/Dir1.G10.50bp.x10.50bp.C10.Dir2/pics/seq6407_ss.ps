%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACUAGUUCGGGGGGGGGGCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAxxxxxxxxxxACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUCCCCCCCCCCUGACUAUUUC\
) } def
/len { sequence length } bind def

/coor [
[92.90126801 372.79415894]
[79.05532837 366.77813721]
[67.34666443 357.24871826]
[58.64414215 344.91305542]
[53.59354019 330.68652344]
[52.56964874 315.62484741]
[55.64844513 300.84567261]
[62.60146713 287.44573975]
[72.91275024 276.41940308]
[85.81713104 268.58489990]
[100.35701752 264.52359009]
[100.35701752 249.52359009]
[100.35701752 234.52359009]
[100.35701752 219.52359009]
[100.35701752 204.52359009]
[100.35701752 189.52359009]
[100.35701752 174.52359009]
[100.35701752 159.52359009]
[100.35701752 144.52359009]
[100.35701752 129.52359009]
[94.86418915 124.41685486]
[87.67280579 137.58059692]
[81.68061829 151.33172607]
[66.99595642 154.39126587]
[56.01066589 144.17738342]
[57.99482346 129.30918884]
[71.27287292 122.33341217]
[83.87852478 114.20337677]
[78.38568878 109.09663391]
[63.42544174 110.18794250]
[48.46519470 111.27925873]
[33.50494385 112.37056732]
[18.54469681 113.46187592]
[7.01014757 124.61238098]
[-8.88014507 122.40373230]
[-16.93651009 108.53021240]
[-10.97879219 93.63439941]
[4.42275667 89.14308929]
[17.45338631 98.50162506]
[32.41363525 97.41031647]
[47.37388229 96.31900787]
[62.33413315 95.22769928]
[77.29438019 94.13638306]
[78.91979218 86.81463623]
[82.17061615 72.17113495]
[83.79603577 64.84938049]
[70.70288086 57.53027725]
[54.93630981 60.49590302]
[42.88199234 49.90945053]
[43.78696442 33.89194107]
[56.95701218 24.73063850]
[72.28919983 29.45330811]
[78.02198029 44.43712234]
[91.11513519 51.75622940]
[105.82309723 48.81074524]
[115.08805084 37.01410675]
[124.35299683 25.21746635]
[133.61795044 13.42082691]
[142.88290405 1.62418687]
[152.14784241 -10.17245293]
[150.45642090 -25.65718269]
[160.02044678 -37.48867035]
[174.79319763 -39.00575256]
[184.05815125 -50.80239105]
[193.32308960 -62.59903336]
[202.58804321 -74.39567566]
[205.02696228 -90.02776337]
[218.97306824 -95.25798798]
[228.23802185 -107.05462646]
[214.45166016 -101.14395142]
[201.01690674 -94.47254181]
[186.14909363 -92.48562622]
[171.43397522 -95.39513397]
[158.44104004 -102.89073181]
[148.55613708 -114.17295074]
[142.83354187 -128.03843689]
[141.88363647 -143.00833130]
[145.80772400 -157.48594666]
[154.18728638 -169.92713928]
[166.12855530 -179.00491333]
[180.35787964 -183.75108337]
[195.35760498 -183.65939331]
[209.52786255 -178.73965454]
[221.35725403 -169.51657104]
[229.58261108 -156.97726440]
[227.10746765 -142.18289185]
[236.37240601 -153.97952271]
[245.63735962 -165.77616882]
[254.90231323 -177.57281494]
[256.68902588 -193.87432861]
[271.80682373 -200.22918701]
[284.70382690 -190.10003662]
[282.11267090 -173.90687561]
[266.69894409 -168.30786133]
[257.43399048 -156.51121521]
[248.16905212 -144.71458435]
[238.90409851 -132.91793823]
[247.54321289 -120.65557098]
[261.76998901 -125.40938568]
[275.99676514 -130.16320801]
[278.98626709 -145.22834778]
[289.11987305 -156.76980591]
[303.67172241 -161.68299866]
[318.72741699 -158.64630127]
[330.23706055 -148.47654724]
[335.10461426 -133.90937805]
[332.02075195 -118.86328125]
[321.81497192 -107.38556671]
[307.23260498 -102.56369781]
[292.19625854 -105.69472504]
[280.75057983 -115.93642426]
[266.52380371 -111.18260956]
[252.29702759 -106.42879486]
[240.03466797 -97.78968048]
[230.76971436 -85.99303436]
[228.99348450 -71.20471954]
[214.38468933 -65.13072205]
[205.11973572 -53.33408356]
[195.85478210 -41.53744507]
[186.58984375 -29.74080276]
[188.61688232 -15.02935600]
[179.38894653 -2.93390274]
[163.94448853 -0.90750378]
[154.67953491 10.88913631]
[145.41458130 22.68577576]
[136.14964294 34.48241425]
[126.88468933 46.27905655]
[117.61973572 58.07569504]
[137.84117126 83.18100739]
[135.25079346 112.32910156]
[115.35701752 129.52359009]
[115.35701752 144.52359009]
[115.35701752 159.52359009]
[115.35701752 174.52359009]
[115.35701752 189.52359009]
[115.35701752 204.52359009]
[115.35701752 219.52359009]
[115.35701752 234.52359009]
[115.35701752 249.52359009]
[115.35701752 264.52359009]
[129.89691162 268.58489990]
[142.80128479 276.41940308]
[153.11257935 287.44573975]
[160.06559753 300.84567261]
[163.14439392 315.62484741]
[162.12049866 330.68652344]
[157.06990051 344.91305542]
[148.36737061 357.24871826]
[136.65870667 366.77813721]
[122.81277466 372.79415894]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[46 54]
[47 53]
[55 128]
[56 127]
[57 126]
[58 125]
[59 124]
[60 123]
[63 120]
[64 119]
[65 118]
[66 117]
[68 115]
[69 114]
[86 97]
[87 96]
[88 95]
[89 94]
[98 113]
[99 112]
[100 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
