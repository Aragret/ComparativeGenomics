%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCUAAAAAGGGGGGGGGGAUCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACCAAUCUAUCAxxxxxxxxxxCCAGCCACCAUGAAUAUUGUACGGUACCAUAAAUACUUGACCACCUGUAGCCCCCCCCCCUACAUAAAAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 371.69476318]
[71.19830322 365.67874146]
[59.48964310 356.14932251]
[50.78712082 343.81365967]
[45.73651886 329.58712769]
[44.71262741 314.52545166]
[47.79142761 299.74627686]
[54.74444962 286.34634399]
[65.05573273 275.32003784]
[77.96011353 267.48550415]
[92.50000000 263.42419434]
[92.50000000 248.42420959]
[92.50000000 233.42420959]
[92.50000000 218.42420959]
[92.50000000 203.42420959]
[92.50000000 188.42420959]
[92.50000000 173.42420959]
[92.50000000 158.42420959]
[92.50000000 143.42420959]
[92.50000000 128.42420959]
[84.49700165 124.97683716]
[77.85618591 119.33486176]
[73.16105652 111.99401855]
[70.82415009 103.59930420]
[55.96110153 101.57697296]
[41.09805298 99.55463409]
[26.23500633 97.53230286]
[20.40580177 109.91508484]
[11.32399559 120.13136292]
[-0.26186603 127.35344696]
[-13.40089798 130.99983215]
[-27.01791191 130.78202820]
[-40.00140381 126.72737122]
[-51.29428101 119.17597198]
[-59.97992325 108.75223541]
[-65.35658264 96.31324005]
[-66.99409485 82.87825775]
[-81.76014709 80.23938751]
[-96.52620697 77.60052490]
[-110.45816803 85.55538940]
[-125.31008911 79.48908234]
[-129.68884277 64.05515289]
[-120.23542023 51.09319687]
[-104.20168304 50.54651260]
[-93.88734436 62.83447266]
[-79.12128448 65.47333527]
[-64.35523224 68.11219788]
[-56.41227722 53.76079178]
[-44.03234863 42.96126556]
[-28.68798637 37.02130508]
[-12.21224403 36.66918945]
[3.42028689 41.96455002]
[16.33012962 52.28913116]
[24.95888329 66.41892242]
[28.25734138 82.66925812]
[43.12038803 84.69158936]
[57.98343277 86.71392822]
[72.84648132 88.73625946]
[80.53298187 75.58061218]
[94.45626831 67.40644836]
[111.50762177 67.05819702]
[114.29994965 52.32038879]
[117.09226990 37.58258057]
[119.88459778 22.84477615]
[111.04948425 12.62721825]
[109.75209808 -0.62211132]
[116.24447632 -12.02050686]
[127.94915771 -17.49747276]
[131.04748535 -32.17399979]
[134.14579773 -46.85052490]
[120.83722687 -53.99604416]
[110.08183289 -64.60256195]
[102.75151825 -77.81025696]
[99.44051361 -92.54843903]
[100.41723633 -107.62234497]
[105.60249329 -121.81000519]
[114.57595062 -133.96128845]
[126.61016846 -143.09115601]
[140.72958374 -148.45947266]
[155.78959656 -149.63105774]
[170.56936646 -146.51094055]
[183.87075806 -139.35205078]
[194.61549377 -128.73472595]
[201.93252563 -115.51968384]
[205.22872925 -100.77818298]
[204.23686218 -85.70526123]
[199.03735352 -71.52281952]
[190.05169678 -59.38055420]
[178.00831604 -50.26278687]
[163.88351440 -44.90866089]
[148.82232666 -43.75220108]
[145.72399902 -29.07567787]
[142.62568665 -14.39915180]
[152.39730835 -0.74729639]
[149.24057007 16.08478546]
[134.62240601 25.63710022]
[131.83007812 40.37490845]
[129.03775024 55.11271286]
[126.24542999 69.85051727]
[135.51037598 81.64715576]
[150.49009705 82.42700195]
[165.46980286 83.20684814]
[180.45681763 83.83082581]
[195.44952393 84.29886627]
[210.44221497 84.76690674]
[215.78344727 70.59828186]
[225.43772888 58.93323517]
[238.35786438 51.03710175]
[253.14236450 47.76639938]
[268.18750000 49.47591019]
[281.86129761 55.98019409]
[292.68054199 66.57372284]
[299.47161865 80.10737610]
[301.49792480 95.11314392]
[298.53958130 109.96329498]
[290.91757202 123.04700470]
[279.45861816 132.94505310]
[265.40573120 138.58377075]
[250.28326416 139.35150146]
[235.73156738 135.16497803]
[223.32911682 126.47832489]
[214.42123413 114.23380280]
[209.97416687 99.75960541]
[194.98147583 99.29156494]
[179.98878479 98.82352448]
[173.16091919 101.77748871]
[164.68995667 98.18656158]
[149.71025085 97.40671539]
[134.73052979 96.62686920]
[126.38478851 118.36233521]
[107.50000000 128.42420959]
[107.50000000 143.42420959]
[107.50000000 158.42420959]
[107.50000000 173.42420959]
[107.50000000 188.42420959]
[107.50000000 203.42420959]
[107.50000000 218.42420959]
[107.50000000 233.42420959]
[107.50000000 248.42420959]
[107.50000000 263.42419434]
[122.03988647 267.48550415]
[134.94427490 275.32003784]
[145.25555420 286.34634399]
[152.20857239 299.74627686]
[155.28736877 314.52545166]
[154.26348877 329.58712769]
[149.21287537 343.81365967]
[140.51036072 356.14932251]
[128.80169678 365.67874146]
[114.95575714 371.69476318]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 58]
[25 57]
[26 56]
[27 55]
[37 47]
[38 46]
[39 45]
[61 99]
[62 98]
[63 97]
[64 96]
[68 93]
[69 92]
[70 91]
[100 129]
[101 128]
[102 127]
[103 125]
[104 124]
[105 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
