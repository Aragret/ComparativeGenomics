%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACAUAUUUGGGGGGGGGGUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACAGxxxxxxxxxxACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCUCCCCCCCCCCCUACAUAUUU\
) } def
/len { sequence length } bind def

/coor [
[98.52210236 397.10940552]
[84.67616272 391.09338379]
[72.96750641 381.56396484]
[64.26497650 369.22830200]
[59.21437836 355.00177002]
[58.19048691 339.94009399]
[61.26928329 325.16094971]
[68.22230530 311.76101685]
[78.53359222 300.73468018]
[91.43797302 292.90017700]
[105.97785950 288.83886719]
[105.97785950 273.83886719]
[105.97785950 258.83886719]
[105.97785950 243.83885193]
[105.97785950 228.83885193]
[105.97785950 213.83885193]
[105.97785950 198.83885193]
[105.97785950 183.83885193]
[105.97785950 168.83885193]
[105.97785950 153.83885193]
[103.80102539 138.99765015]
[99.49343872 124.62946320]
[95.18585205 110.26127625]
[86.77819061 122.68348694]
[72.08689117 125.71099091]
[59.45300293 117.62490082]
[56.04945755 103.01614380]
[63.80863571 90.17888641]
[78.32523346 86.40154266]
[91.35835266 93.82991791]
[88.87322998 79.03721619]
[86.38811493 64.24450684]
[71.79521942 63.53274918]
[57.67871857 59.79033279]
[44.66062927 53.18479156]
[33.31404114 44.00975800]
[24.13785362 32.67192459]
[17.53485870 19.67300606]
[13.79405022 5.58753347]
[13.07798004 -8.96252441]
[15.41569710 -23.33523750]
[20.70157623 -36.89702606]
[28.70009041 -49.05060577]
[39.05630112 -59.26127243]
[51.31160736 -67.08043671]
[64.92405701 -72.16534424]
[62.74722290 -87.00654602]
[60.57038498 -101.84775543]
[54.65042496 -115.63013458]
[45.38547516 -127.42677307]
[36.12052536 -139.22341919]
[26.85557556 -151.02005005]
[17.59062576 -162.81669617]
[8.32567692 -174.61332703]
[-6.86668253 -172.35772705]
[-21.14555359 -178.01541138]
[-30.66999245 -190.06449890]
[-32.87797165 -205.26385498]
[-27.17555809 -219.52491760]
[-15.09667015 -229.01155090]
[0.10953163 -231.17187500]
[14.35265446 -225.42478943]
[23.80137062 -213.31622314]
[25.91402245 -198.10331726]
[20.12231636 -183.87828064]
[29.38726616 -172.08164978]
[38.65221405 -160.28500366]
[47.91716385 -148.48835754]
[57.18211365 -136.69172668]
[66.44705963 -124.89508057]
[64.67857361 -139.79046631]
[66.32747650 -154.69955444]
[71.30818939 -168.84849548]
[79.36218262 -181.50286865]
[90.07141876 -192.00584412]
[102.88000488 -199.81225586]
[117.12312317 -204.51689148]
[132.06146240 -205.87556458]
[146.91964722 -203.81776428]
[160.92643738 -198.45028687]
[173.35479736 -190.05174255]
[183.55964661 -179.05805969]
[191.01127625 -166.03987122]
[195.32292175 -151.67289734]
[196.27076721 -136.70288086]
[193.80560303 -121.90682983]
[188.05541992 -108.05275726]
[179.31866455 -95.85977173]
[168.04881287 -85.96074677]
[154.83085632 -78.86950684]
[140.35087585 -74.95413208]
[125.36047363 -74.41783905]
[110.63771820 -77.28848267]
[96.94682312 -83.41704559]
[84.99841309 -92.48542786]
[75.41159058 -104.02458954]
[77.58843231 -89.18338776]
[79.76526642 -74.34217834]
[95.14907074 -73.22197723]
[109.90907288 -68.71940613]
[123.31081390 -61.05528641]
[134.68670654 -50.60784149]
[143.46931458 -37.89403534]
[149.21958923 -23.54397774]
[151.64891052 -8.26971054]
[150.63348389 7.17013502]
[146.22071838 22.00801086]
[138.62696838 35.50561142]
[128.22692871 46.99060822]
[115.53521729 55.89014053]
[101.18082428 61.75938797]
[103.66593933 76.55209351]
[106.15106201 91.34480286]
[109.55403900 105.95369720]
[113.86161804 120.32187653]
[118.16920471 134.69006348]
[122.55820465 120.34654236]
[132.01945496 108.70674133]
[145.16369629 101.47980499]
[160.06092834 99.72688293]
[174.52369690 103.70537567]
[186.42835999 112.83109283]
[194.02691650 125.76407623]
[196.20362854 140.60530090]
[192.63888550 155.17556763]
[183.85609436 167.33543396]
[171.14489746 175.29943848]
[156.37171936 177.89817810]
[141.70579529 174.75006104]
[129.30058289 166.31733704]
[120.97785950 153.83885193]
[120.97785950 168.83885193]
[120.97785950 183.83885193]
[120.97785950 198.83885193]
[120.97785950 213.83885193]
[120.97785950 228.83885193]
[120.97785950 243.83885193]
[120.97785950 258.83886719]
[120.97785950 273.83886719]
[120.97785950 288.83886719]
[135.51774597 292.90017700]
[148.42211914 300.73468018]
[158.73341370 311.76101685]
[165.68643188 325.16094971]
[168.76522827 339.94009399]
[167.74133301 355.00177002]
[162.69073486 369.22830200]
[153.98822021 381.56396484]
[142.27955627 391.09338379]
[128.43360901 397.10940552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 116]
[22 115]
[23 114]
[30 113]
[31 112]
[32 111]
[46 98]
[47 97]
[48 96]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
