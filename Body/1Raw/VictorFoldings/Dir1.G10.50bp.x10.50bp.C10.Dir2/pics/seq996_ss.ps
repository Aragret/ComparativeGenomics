%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCUAAAUCGGGGGGGGGGACCACGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAAxxxxxxxxxxCUAGCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCCCCCCCCCCCGCUAAAUC\
) } def
/len { sequence length } bind def

/coor [
[84.27078247 414.08569336]
[70.78189850 407.35415649]
[59.29640198 397.58959961]
[50.48203278 385.35968018]
[44.85124969 371.37548828]
[42.73142242 356.45001221]
[44.24579239 341.45101929]
[49.30631256 327.25051880]
[57.61877823 314.67407227]
[68.69991302 304.45294189]
[81.90546417 297.18127441]
[96.46768951 293.28192139]
[96.15971375 278.28509521]
[95.85173035 263.28823853]
[95.54375458 248.29141235]
[95.23577881 233.29457092]
[94.92780304 218.29772949]
[94.61982727 203.30090332]
[94.31184387 188.30406189]
[94.00386810 173.30722046]
[93.69589233 158.31037903]
[65.03518677 151.28723145]
[41.96063995 130.34536743]
[27.91866493 135.62011719]
[25.48623848 150.78517151]
[15.78472328 162.69213867]
[1.42377675 168.13813782]
[-13.73357868 165.65818787]
[-25.61009026 155.91938782]
[-31.01103592 141.54144287]
[-28.48358917 126.39193726]
[-18.70761871 114.54601288]
[-4.31281376 109.19016266]
[10.82869720 111.76508331]
[22.64392281 121.57813263]
[36.68589783 116.30339050]
[36.53190994 108.80496979]
[22.36423302 113.73213196]
[13.30019188 101.78043365]
[21.86601257 89.46675110]
[36.22393417 93.80813599]
[36.06994247 86.30971527]
[21.82325172 81.61591339]
[6.90913248 87.52764893]
[-6.93946552 79.42852020]
[-9.09908295 63.53148651]
[2.08695483 52.03139496]
[18.03767586 53.75012970]
[26.51705360 67.36922455]
[40.76374435 72.06302643]
[44.97294617 68.88993835]
[49.31658173 66.17966461]
[53.74977493 63.93395996]
[43.19776154 53.27304840]
[32.64574814 42.61214066]
[16.69327164 38.81074905]
[12.26908016 23.01965714]
[23.92440033 11.48338795]
[39.66923904 16.06946564]
[43.30665588 32.06012726]
[53.85866928 42.72103500]
[64.41068268 53.38194275]
[76.03485870 46.46949768]
[88.93331146 42.40337753]
[88.00989532 27.43182755]
[87.08647919 12.46027851]
[72.48383331 8.45510864]
[59.97428131 -0.07658341]
[50.91476059 -12.20934296]
[46.28799057 -26.62709999]
[46.59584045 -41.76592255]
[51.80492020 -55.98366547]
[61.35018539 -67.73809052]
[74.19624329 -75.75417328]
[88.94964600 -79.16238403]
[104.01004791 -77.59302521]
[117.74382019 -71.21633148]
[128.66122437 -60.72399902]
[135.57801819 -47.25415421]
[137.74391174 -32.26790619]
[134.92398071 -17.39085388]
[127.42410278 -4.23674631]
[116.05781555 5.76755762]
[102.05802917 11.53686428]
[102.98144531 26.50841522]
[103.90486145 41.47996521]
[121.18688202 45.31034470]
[136.53897095 54.12248611]
[147.30764771 43.68047714]
[158.07632446 33.23846817]
[168.84500122 22.79645729]
[165.69747925 7.69358921]
[171.23617554 -6.70524502]
[183.69371033 -15.80542946]
[199.09492493 -16.70312881]
[212.52536011 -9.11188984]
[219.69941711 4.54594994]
[218.32785034 19.91222382]
[208.84835815 32.08361053]
[194.28578186 37.17626190]
[179.28701782 33.56513596]
[168.51834106 44.00714493]
[157.74964905 54.44915390]
[146.98097229 64.89116669]
[154.21447754 72.74919891]
[160.09175110 82.08372498]
[174.95835876 80.08766937]
[189.82495117 78.09160614]
[204.69155884 76.09555054]
[217.33863831 65.65605164]
[232.60636902 71.64173126]
[234.78862000 87.89503479]
[221.64047241 97.69595337]
[206.68760681 90.96215057]
[191.82101440 92.95820618]
[176.95440674 94.95426178]
[162.08781433 96.95032501]
[161.01074219 111.91160583]
[175.43812561 116.01654816]
[191.20133972 111.49400330]
[202.81002808 123.07718658]
[198.32218933 138.85031128]
[182.35452271 142.58732605]
[171.33319092 130.44393921]
[156.90579224 126.33898926]
[151.25671387 134.93492126]
[144.34428406 142.40147400]
[136.38407898 148.55938721]
[127.61589813 153.26918030]
[118.29663086 156.43420410]
[108.69272614 158.00241089]
[109.00070953 172.99923706]
[109.30868530 187.99607849]
[109.61666107 202.99291992]
[109.92463684 217.98976135]
[110.23262024 232.98658752]
[110.54059601 247.98342896]
[110.84857178 262.98028564]
[111.15654755 277.97711182]
[111.46453094 292.97393799]
[126.17456055 296.27218628]
[139.66752625 302.99551392]
[151.15893555 312.75311279]
[159.98072815 324.97766113]
[165.61997986 338.95846558]
[167.74885559 353.88262939]
[166.24357605 368.88256836]
[161.19166565 383.08615112]
[152.88682556 395.66760254]
[141.81190491 405.89547729]
[128.61074829 413.17510986]
[114.05089569 417.08331299]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[23 36]
[24 35]
[42 50]
[43 49]
[53 62]
[54 61]
[55 60]
[64 86]
[65 85]
[66 84]
[88 104]
[89 103]
[90 102]
[91 101]
[106 117]
[107 116]
[108 115]
[109 114]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
