%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAAUCAAGGGGGGGGGGCUGGCUUCAAUCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCxxxxxxxxxxUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCCCCCCCCCCCUAAUAAA\
) } def
/len { sequence length } bind def

/coor [
[85.04339600 380.88842773]
[72.48517609 372.53726196]
[62.39895248 361.32482910]
[55.41875839 347.95590210]
[51.98337173 333.27090454]
[52.30875015 318.19296265]
[56.37443542 303.66983032]
[63.92485428 290.61450195]
[74.48538208 279.84759521]
[87.39218140 272.04595947]
[101.83390808 267.70001221]
[101.20993042 252.71299744]
[100.58595276 237.72598267]
[99.96197510 222.73896790]
[99.33799744 207.75195312]
[98.71401978 192.76492310]
[98.09004211 177.77790833]
[97.46606445 162.79089355]
[96.84208679 147.80387878]
[96.21810913 132.81686401]
[75.19640350 109.92335510]
[84.33369446 86.94007874]
[77.15119171 73.77149963]
[69.96868134 60.60291290]
[54.04342651 51.41780472]
[55.07860565 33.92699814]
[47.62369537 20.91068840]
[40.16878510 7.89437866]
[35.45664215 9.89991856]
[30.11883736 10.87847137]
[24.38900757 10.66161346]
[18.54244041 9.13555145]
[12.88312817 6.25083208]
[7.72865868 2.02897763]
[3.39367723 -3.43442178]
[-9.21745110 -11.55596352]
[-21.82857895 -19.67750549]
[-34.43970871 -27.79904747]
[-47.05083466 -35.92058945]
[-59.66196442 -44.04213333]
[-72.27309418 -52.16367340]
[-84.88421631 -60.28521729]
[-97.49534607 -68.40676117]
[-110.10647583 -76.52829742]
[-122.71760559 -84.64984131]
[-135.70396423 -76.63004303]
[-150.88482666 -75.04755402]
[-165.24601746 -80.21659851]
[-175.93611145 -91.11083984]
[-180.83258057 -105.56723022]
[-178.96324158 -120.71544647]
[-170.69923401 -133.54779053]
[-157.68139648 -141.51638794]
[-142.49443054 -143.03907776]
[-128.15370178 -137.81352234]
[-117.50659180 -126.87726593]
[-112.66707611 -112.40170288]
[-114.59606171 -97.26097107]
[-101.98493195 -89.13942719]
[-89.37380219 -81.01788330]
[-76.76268005 -72.89634705]
[-64.15155029 -64.77480316]
[-51.54042053 -56.65325928]
[-38.92929459 -48.53171921]
[-26.31816483 -40.41017532]
[-13.70703697 -32.28863525]
[-1.09590864 -24.16709137]
[11.51521969 -16.04554939]
[18.83696938 -17.67096329]
[11.66333866 -30.84438324]
[4.48970747 -44.01780319]
[-4.90902996 -55.70812988]
[-4.91915941 -70.70812988]
[4.46378088 -82.41113281]
[19.10713196 -85.66263580]
[32.56131744 -79.03053284]
[38.90052795 -65.43588257]
[35.33154678 -50.86462784]
[34.40600967 -35.89320755]
[33.48047256 -20.92178917]
[40.80222321 -22.54720116]
[48.79213715 -35.24213028]
[56.78205490 -47.93706131]
[64.77197266 -60.63198853]
[72.76188660 -73.32691956]
[67.80583191 -88.15835571]
[73.59078979 -102.68654633]
[87.38529205 -110.05171204]
[102.67599487 -106.77626038]
[112.24308777 -94.40675354]
[111.56929016 -78.78369141]
[100.97274017 -67.28381348]
[85.45681763 -65.33700562]
[77.46690369 -52.64207458]
[69.47698212 -39.94714355]
[61.48706818 -27.25221443]
[53.49715042 -14.55728531]
[53.18509674 0.43946853]
[60.64000702 13.45577812]
[68.09491730 26.47208786]
[79.71772766 29.96746063]
[86.02249908 40.80575943]
[83.13726044 53.42040634]
[90.31977081 66.58898926]
[97.50228119 79.75756836]
[116.40987396 78.91902924]
[132.77574158 95.87693787]
[147.76844788 96.34497833]
[155.24508667 82.98989105]
[168.07806396 74.64884186]
[183.31846619 73.23853302]
[197.46414185 79.08305359]
[207.26452637 90.83937836]
[210.46755981 105.80597687]
[206.33721924 120.54364777]
[195.82261658 131.66577148]
[181.33993530 136.61657715]
[166.21717834 134.25839233]
[153.92945862 125.13311768]
[147.30039978 111.33767700]
[132.30770874 110.86963654]
[127.03205872 116.20044708]
[141.94628906 117.80221558]
[149.99298096 130.46122742]
[145.11294556 144.64520264]
[130.98085022 149.67353821]
[118.23825073 141.75987244]
[116.48077393 126.86207581]
[111.20512390 132.19288635]
[111.82910156 147.17990112]
[112.45307922 162.16691589]
[113.07705688 177.15393066]
[113.70103455 192.14094543]
[114.32501221 207.12797546]
[114.94898987 222.11499023]
[115.57296753 237.10200500]
[116.19694519 252.08901978]
[116.82092285 267.07601929]
[131.57392883 270.20648193]
[145.08456421 276.90823364]
[156.50354004 286.76000977]
[165.11305237 299.14254761]
[170.37190247 313.27743530]
[171.94950867 328.27618408]
[169.74670410 343.19592285]
[163.90196228 357.09878540]
[154.78266907 369.11083984]
[142.96211243 378.47698975]
[129.18328857 384.60848999]
[114.31239319 387.11990356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[22 105]
[23 104]
[24 103]
[26 100]
[27 99]
[28 98]
[35 68]
[36 67]
[37 66]
[38 65]
[39 64]
[40 63]
[41 62]
[42 61]
[43 60]
[44 59]
[45 58]
[81 97]
[82 96]
[83 95]
[84 94]
[85 93]
[107 121]
[108 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
