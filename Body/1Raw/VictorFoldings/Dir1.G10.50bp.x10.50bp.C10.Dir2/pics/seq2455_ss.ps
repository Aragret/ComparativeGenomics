%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCACACGGGGGGGGGGCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUxxxxxxxxxxACAACGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCCCCCCCCCCCUCCCCACAC\
) } def
/len { sequence length } bind def

/coor [
[94.55145264 471.03302002]
[80.70551300 465.01699829]
[68.99684906 455.48757935]
[60.29432678 443.15191650]
[55.24372482 428.92538452]
[54.21983337 413.86370850]
[57.29862976 399.08453369]
[64.25165558 385.68460083]
[74.56293488 374.65826416]
[87.46731567 366.82376099]
[102.00720215 362.76245117]
[102.00720215 347.76245117]
[102.00720215 332.76245117]
[102.00720215 317.76245117]
[102.00720215 302.76245117]
[102.00720215 287.76245117]
[102.00720215 272.76245117]
[102.00720215 257.76245117]
[102.00720215 242.76245117]
[102.00720215 227.76245117]
[93.65864563 218.95286560]
[93.57421875 206.41444397]
[102.34730530 196.90199280]
[102.65935516 181.90522766]
[102.97141266 166.90847778]
[102.65935516 151.91172791]
[101.72373199 136.94093323]
[100.78810120 121.97014618]
[95.97497559 136.17697144]
[82.23976135 142.20555115]
[68.52483368 136.13096619]
[63.75934982 121.90808868]
[71.04591370 108.79679871]
[85.64012909 105.33316803]
[70.82237244 103.00206757]
[56.00461197 100.67096710]
[41.18685150 98.33985901]
[26.36909485 96.00875854]
[13.74196339 105.51302338]
[-1.89540708 103.22212982]
[-11.26564121 90.49521637]
[-8.80954456 74.88294220]
[4.01572275 65.64778900]
[19.60115814 68.26880646]
[28.70019913 81.19099426]
[43.51795578 83.52210236]
[58.33571625 85.85320282]
[73.15347290 88.18431091]
[87.97122955 90.51541138]
[73.48233795 86.63314056]
[63.10713577 75.80007935]
[59.85377121 61.15714264]
[64.66551208 46.94985199]
[76.14726257 37.29742050]
[90.97003937 34.99844742]
[104.83617401 40.71948624]
[113.72537231 52.80179596]
[115.06031799 67.74227905]
[108.45558929 81.20730591]
[116.44551086 68.51237488]
[124.43542480 55.81744385]
[124.68231964 37.43487167]
[140.45475769 29.80398560]
[148.17883301 16.94558334]
[155.90292358 4.08718061]
[163.62699890 -8.77122211]
[151.92063904 -18.18794060]
[141.60559082 -29.11101723]
[132.87403870 -41.33696365]
[125.88863373 -54.63801193]
[120.77952576 -68.76638031]
[117.64188385 -83.45886230]
[116.53415680 -98.44174194]
[117.47699738 -113.43589783]
[120.45281982 -128.16200256]
[125.40620422 -142.34571838]
[132.24485779 -155.72280884]
[140.84138489 -168.04406738]
[151.03565979 -179.07995605]
[162.63772583 -188.62487793]
[175.43147278 -196.50102234]
[189.17855835 -202.56167603]
[203.62287903 -206.69390869]
[218.49536133 -208.82073975]
[233.51890564 -208.90255737]
[248.41365051 -206.93785095]
[262.90213013 -202.96319580]
[276.71441650 -197.05264282]
[289.59320068 -189.31632996]
[301.29855347 -179.89833069]
[311.61242676 -168.97415161]
[320.34265137 -156.74725342]
[327.32659912 -143.44544983]
[332.43417358 -129.31652832]
[335.57025146 -114.62371063]
[336.67633057 -99.64070892]
[335.73187256 -84.64665222]
[332.75445557 -69.92086792]
[327.79953003 -55.73768616]
[320.95944214 -42.36133957]
[312.36157227 -30.04101181]
[302.16610718 -19.00622749]
[290.56301880 -9.46255779]
[277.76840210 -1.58779466]
[264.02066040 4.47135925]
[249.57589722 8.60202599]
[234.70320129 10.72725391]
[219.67964172 10.80745125]
[204.78509521 8.84112358]
[190.29705811 4.86490297]
[176.48541260 -1.04713678]
[168.76132202 11.81126595]
[161.03723145 24.66966820]
[153.31315613 37.52806854]
[155.93336487 49.37888718]
[149.54920959 60.17062378]
[137.13035583 63.80736160]
[129.14044189 76.50228882]
[121.15052032 89.19721985]
[115.75889587 121.03451538]
[116.69451904 136.00531006]
[117.63014984 150.97610474]
[120.25492859 154.61917114]
[121.42409515 158.51841736]
[121.24095154 162.17195129]
[119.96500397 165.16627502]
[117.96817017 167.22053528]
[117.65611267 182.21728516]
[117.34405518 197.21405029]
[126.59831238 213.09921265]
[117.00720215 227.76245117]
[117.00720215 242.76245117]
[117.00720215 257.76245117]
[117.00720215 272.76245117]
[117.00720215 287.76245117]
[117.00720215 302.76245117]
[117.00720215 317.76245117]
[117.00720215 332.76245117]
[117.00720215 347.76245117]
[117.00720215 362.76245117]
[131.54708862 366.82376099]
[144.45147705 374.65826416]
[154.76275635 385.68460083]
[161.71577454 399.08453369]
[164.79457092 413.86370850]
[163.77069092 428.92538452]
[158.72007751 443.15191650]
[150.01756287 455.48757935]
[138.30889893 465.01699829]
[124.46295929 471.03302002]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 129]
[24 128]
[25 127]
[26 122]
[27 121]
[28 120]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[59 119]
[60 118]
[61 117]
[63 114]
[64 113]
[65 112]
[66 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
