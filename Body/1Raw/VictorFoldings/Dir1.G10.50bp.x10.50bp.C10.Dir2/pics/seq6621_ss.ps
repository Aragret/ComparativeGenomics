%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAUUAUCAGGGGGGGGGGAUAUAAAACCCCCUGCCAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAxxxxxxxxxxACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCUUCCCUCUCCCCCCCCCCACACUUAUCA\
) } def
/len { sequence length } bind def

/coor [
[104.38705444 411.59265137]
[90.54111481 405.57662964]
[78.83245087 396.04721069]
[70.12992859 383.71154785]
[65.07933044 369.48504639]
[64.05543518 354.42333984]
[67.13423157 339.64419556]
[74.08725739 326.24426270]
[84.39854431 315.21792603]
[97.30292511 307.38342285]
[111.84281158 303.32211304]
[111.84281158 288.32211304]
[111.84281158 273.32211304]
[111.84281158 258.32211304]
[111.84281158 243.32211304]
[111.84281158 228.32211304]
[111.84281158 213.32211304]
[111.84281158 198.32211304]
[111.84281158 183.32211304]
[111.84281158 168.32211304]
[111.84281158 153.32211304]
[108.74448395 138.64558411]
[102.68147278 124.92552948]
[96.61846161 111.20547485]
[92.28344727 125.56540680]
[80.96983337 135.41436768]
[66.14962006 137.72985840]
[52.37095261 131.80125427]
[43.86232376 119.44799042]
[43.23491669 104.46111298]
[50.68128204 91.43991089]
[63.91622543 84.38043213]
[78.87810516 85.44911957]
[90.97580719 94.31866455]
[87.57283020 79.70977020]
[84.16985321 65.10087585]
[68.66228485 65.21192169]
[53.52227020 61.88609695]
[39.50157928 55.29170227]
[27.29572296 45.75926208]
[17.50942039 33.76495361]
[10.62665749 19.90683556]
[6.98674059 4.87500811]
[6.76757717 -10.58273411]
[9.97697926 -25.69811249]
[16.45242882 -39.72054672]
[25.86930656 -51.95442963]
[37.75716400 -61.79362106]
[51.52321625 -68.75150299]
[47.81705475 -83.28643799]
[44.11089325 -97.82137299]
[40.40473175 -112.35630798]
[33.77623367 -125.81227875]
[24.51128387 -137.60891724]
[15.24633503 -149.40556335]
[-0.25423479 -148.69003296]
[-13.19648838 -157.25027466]
[-18.60386467 -171.79469299]
[-14.39711857 -186.73065186]
[-2.19382858 -196.31497192]
[13.31359100 -196.86230469]
[26.16222000 -188.16217041]
[31.41150093 -173.55995178]
[27.04297447 -158.67050171]
[36.30792236 -146.87387085]
[45.57287216 -135.07722473]
[43.79369354 -149.97132874]
[46.20393372 -164.77642822]
[52.61550522 -178.33709717]
[62.52803421 -189.59506226]
[75.16794586 -197.67173767]
[89.54880524 -201.93681335]
[104.54831696 -202.05744934]
[118.99591064 -198.02420044]
[131.76408386 -190.15187073]
[141.85639954 -179.05477905]
[148.48522949 -165.59898376]
[151.13328552 -150.83457947]
[149.59387207 -135.91377258]
[143.98715210 -122.00102234]
[134.75067139 -110.18207550]
[122.60526276 -101.37930298]
[108.49874115 -96.27967072]
[93.53201294 -95.28116608]
[78.87308502 -98.46170807]
[65.66596222 -105.57308960]
[54.93966675 -116.06246948]
[58.64582825 -101.52753448]
[62.35198975 -86.99259949]
[66.05815125 -72.45766449]
[80.57894897 -73.00685120]
[94.90018463 -70.51002502]
[108.38970947 -65.07481384]
[120.45154572 -56.93861008]
[130.55221558 -46.45819855]
[138.24436951 -34.09411240]
[143.18652344 -20.39039040]
[145.15830994 -5.95064402]
[144.07022095 8.58852768]
[139.96771240 22.58560944]
[133.02932739 35.42247391]
[123.55886841 46.53167343]
[111.97216034 55.42153168]
[98.77873993 61.69789886]
[102.18172455 76.30679321]
[105.58470154 90.91568756]
[110.33851624 105.14246368]
[116.40152740 118.86251831]
[122.46453857 132.58256531]
[124.42051697 117.71064758]
[130.41403198 103.96009064]
[139.97735596 92.40401459]
[152.36415100 83.94425964]
[166.60772705 79.24102783]
[181.59652710 78.66137695]
[196.16079712 82.25052643]
[209.16392517 89.72838593]
[219.59115601 100.51138306]
[226.62872314 113.75798798]
[229.72741699 128.43443298]
[228.64541626 143.39535522]
[223.46714783 157.47320557]
[214.59672546 169.56930542]
[202.72642517 178.73968506]
[188.78259277 184.26867676]
[173.85343933 185.72479248]
[159.10403442 182.99440002]
[145.68544006 176.29058838]
[134.64485168 166.13650513]
[126.84281158 153.32211304]
[126.84281158 168.32211304]
[126.84281158 183.32211304]
[126.84281158 198.32211304]
[126.84281158 213.32211304]
[126.84281158 228.32211304]
[126.84281158 243.32211304]
[126.84281158 258.32211304]
[126.84281158 273.32211304]
[126.84281158 288.32211304]
[126.84281158 303.32211304]
[141.38269043 307.38342285]
[154.28707886 315.21792603]
[164.59835815 326.24426270]
[171.55137634 339.64419556]
[174.63018799 354.42333984]
[173.60629272 369.48504639]
[168.55569458 383.71154785]
[159.85316467 396.04721069]
[148.14450073 405.57662964]
[134.29856873 411.59265137]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 109]
[23 108]
[24 107]
[34 106]
[35 105]
[36 104]
[49 90]
[50 89]
[51 88]
[52 87]
[53 66]
[54 65]
[55 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
