%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGUUUAAACGGGGGGGGGGAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUxxxxxxxxxxCCAACUAUCUCCCUAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGCCCCCCCCCCUAGUAUAAAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 414.39624023]
[71.19830322 408.38021851]
[59.48964310 398.85079956]
[50.78712082 386.51513672]
[45.73651886 372.28860474]
[44.71262741 357.22692871]
[47.79142761 342.44775391]
[54.74444962 329.04782104]
[65.05573273 318.02151489]
[77.96011353 310.18698120]
[92.50000000 306.12567139]
[92.50000000 291.12567139]
[92.50000000 276.12567139]
[92.50000000 261.12567139]
[92.50000000 246.12568665]
[92.50000000 231.12568665]
[92.50000000 216.12568665]
[92.50000000 201.12568665]
[92.50000000 186.12568665]
[92.50000000 171.12568665]
[84.76270294 158.39840698]
[92.50000000 144.59823608]
[92.50000000 129.59823608]
[81.89892578 124.58976746]
[73.96683502 115.95555878]
[59.64423752 120.41237640]
[45.32164001 124.86918640]
[30.99904060 129.32600403]
[20.27820778 141.73550415]
[4.22385406 138.39039612]
[-0.64867800 122.73184204]
[10.67305565 110.86801147]
[26.54222488 115.00341034]
[40.86482239 110.54659271]
[55.18741989 106.08977509]
[69.51001740 101.63295746]
[71.40370941 89.29682922]
[78.07517242 78.74893951]
[88.40975189 71.75160217]
[100.68079376 69.47390747]
[104.68852997 55.01922226]
[91.74756622 37.80516815]
[97.55068207 14.84833813]
[85.65830231 5.70660400]
[73.76592255 -3.43513012]
[61.87353897 -12.57686424]
[49.98115921 -21.71859932]
[41.20911407 -24.49404526]
[37.93909073 -31.17630386]
[26.23946762 -40.56346512]
[14.53984451 -49.95062637]
[2.84022117 -59.33778763]
[-13.29776955 -64.53409576]
[-12.77197647 -81.47988892]
[3.65712166 -85.66570282]
[12.22738266 -71.03741455]
[23.92700577 -61.65024948]
[35.62662888 -52.26308823]
[47.32625198 -42.87592697]
[59.12289429 -33.61097717]
[71.01527405 -24.46924400]
[82.90765381 -15.32750988]
[94.80003357 -6.18577576]
[106.69241333 2.95595860]
[121.59431458 1.24326885]
[131.10267639 -10.35807228]
[140.61103821 -21.95941353]
[130.25193787 -32.83456421]
[121.30783844 -44.90032578]
[113.91430664 -57.97378540]
[108.18343353 -71.85675049]
[104.20209503 -86.33876038]
[102.03064728 -101.20026398]
[101.70201111 -116.21598053]
[103.22116852 -131.15826416]
[106.56508636 -145.80058289]
[111.68307495 -159.92098999]
[118.49755096 -173.30540466]
[126.90519714 -185.75093079]
[136.77856445 -197.06889343]
[147.96797180 -207.08772278]
[160.30378723 -215.65551758]
[173.59901428 -222.64241028]
[187.65208435 -227.94247437]
[202.24998474 -231.47535706]
[217.17137146 -233.18750000]
[232.19007874 -233.05296326]
[247.07841492 -231.07377625]
[261.61065674 -227.27995300]
[275.56655884 -221.72898865]
[288.73446655 -214.50503540]
[300.91482544 -205.71762085]
[311.92294312 -195.49996948]
[321.59197998 -184.00694275]
[329.77532959 -171.41279602]
[336.34893799 -157.90844727]
[341.21313477 -143.69862366]
[344.29421997 -128.99873352]
[345.54544067 -114.03163910]
[344.94784546 -99.02422333]
[342.51052856 -84.20400238]
[338.27038574 -69.79563904]
[332.29171753 -56.01757050]
[324.66516113 -43.07866287]
[315.50634766 -31.17506599]
[304.95410156 -20.48723602]
[293.16839600 -11.17720032]
[280.32791138 -3.38609481]
[266.62728882 2.76796937]
[252.27423096 7.19169807]
[237.48632812 9.81802845]
[222.48776245 10.60714531]
[207.50590515 9.54708767]
[192.76788330 6.65392447]
[178.49713135 1.97151518]
[164.90995789 -4.42915535]
[152.21237183 -12.45105553]
[142.70401001 -0.84971392]
[133.19566345 10.75162697]
[143.57128906 25.00285149]
[143.44306946 41.84664154]
[133.78953552 54.68222809]
[119.14321899 59.02696228]
[115.13548279 73.48165131]
[127.38059235 86.48672485]
[130.25489807 104.11662292]
[122.77468872 120.33763123]
[107.50000000 129.59823608]
[107.50000000 144.59823608]
[115.23729706 158.39840698]
[107.50000000 171.12568665]
[107.50000000 186.12568665]
[107.50000000 201.12568665]
[107.50000000 216.12568665]
[107.50000000 231.12568665]
[107.50000000 246.12568665]
[107.50000000 261.12567139]
[107.50000000 276.12567139]
[107.50000000 291.12567139]
[107.50000000 306.12567139]
[122.03988647 310.18698120]
[134.94427490 318.02151489]
[145.25555420 329.04782104]
[152.20857239 342.44775391]
[155.28736877 357.22692871]
[154.26348877 372.28860474]
[149.21287537 386.51513672]
[140.51036072 398.85079956]
[128.80169678 408.38021851]
[114.95575714 414.39624023]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[25 36]
[26 35]
[27 34]
[28 33]
[40 124]
[41 123]
[43 64]
[44 63]
[45 62]
[46 61]
[47 60]
[49 59]
[50 58]
[51 57]
[52 56]
[65 119]
[66 118]
[67 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
