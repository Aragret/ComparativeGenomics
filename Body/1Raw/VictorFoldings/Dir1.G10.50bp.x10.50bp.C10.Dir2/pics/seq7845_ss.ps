%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCACUUUCACGGGGGGGGGGCGCUACACGACCGGGGGUAUACUACGGUCAAUGCUCUGAAAUCUGUGGAGxxxxxxxxxxCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGCCCCCCCCCCAACCACUAUCAC\
) } def
/len { sequence length } bind def

/coor [
[117.36032867 447.24832153]
[103.19972992 442.09332275]
[90.60998535 433.81109619]
[80.27004242 422.84832764]
[72.73753357 409.79620361]
[68.41867065 395.35861206]
[67.54636383 380.31414795]
[70.16764832 365.47415161]
[76.14117432 351.63891602]
[85.14479828 339.55456543]
[96.69295502 329.87277222]
[110.16286469 323.11569214]
[124.82813263 319.64773560]
[124.82813263 304.64773560]
[124.82813263 289.64773560]
[124.82813263 274.64773560]
[124.82813263 259.64773560]
[124.82813263 244.64773560]
[124.82813263 229.64773560]
[124.82813263 214.64773560]
[124.82813263 199.64773560]
[124.82813263 184.64773560]
[124.82813263 169.64773560]
[124.82813263 154.64773560]
[124.82813263 139.64773560]
[124.82813263 124.64772797]
[90.79828644 129.37399292]
[73.82595062 104.61692047]
[58.91905594 102.94824219]
[42.25766754 110.72502136]
[28.52526093 99.83883667]
[13.58760929 98.47261810]
[-1.35004282 97.10640717]
[-16.28769493 95.74018860]
[-31.22534752 94.37397003]
[-45.67288208 100.82217407]
[-57.64252853 91.95782471]
[-72.58018494 90.59160614]
[-85.78069305 99.70895386]
[-101.09705353 94.93519592]
[-106.77985382 79.93235016]
[-98.46974945 66.20932007]
[-82.54152679 64.29323578]
[-71.21396637 75.65395355]
[-56.27631378 77.02017212]
[-42.89722061 70.47424316]
[-29.85913086 79.43631744]
[-14.92147827 80.80253601]
[0.01617404 82.16875458]
[14.95382595 83.53496552]
[29.89147758 84.90118408]
[39.42132568 77.39117432]
[51.91187286 78.44529724]
[60.58773041 88.04135132]
[75.49462891 89.71002960]
[82.74009705 77.09523010]
[96.36728668 69.43357086]
[113.08303070 69.83143616]
[128.18339539 79.27217102]
[130.90447998 64.52104950]
[133.62554932 49.76992035]
[131.74990845 43.33086777]
[133.22734070 37.76644516]
[136.76742554 34.48141098]
[135.61149597 25.35972786]
[140.30235291 19.59123611]
[143.91479492 5.03272438]
[147.52723694 -9.52578831]
[149.94879150 -24.32903290]
[151.16355896 -39.27976227]
[152.37832642 -54.23049545]
[153.59309387 -69.18122101]
[140.05056763 -76.08544159]
[130.18481445 -87.64984894]
[125.50032806 -102.11096954]
[126.71144104 -117.26358795]
[133.63346863 -130.79702759]
[145.21084595 -140.64753723]
[159.67811584 -145.31300354]
[174.82911682 -144.08197021]
[188.35343933 -137.14215088]
[198.18872070 -125.55181885]
[202.83515930 -111.07842255]
[201.58418274 -95.92904663]
[194.62657166 -82.41386414]
[183.02331543 -72.59384155]
[168.54382324 -67.96645355]
[167.32905579 -53.01572418]
[166.11428833 -38.06499481]
[164.89952087 -23.11426544]
[175.99066162 -33.21310425]
[190.88151550 -35.01935959]
[204.06546021 -27.86508369]
[210.66708374 -14.39591408]
[208.24511719 0.40726495]
[197.69520569 11.07025719]
[182.91870117 13.64990234]
[169.37991333 7.19225025]
[162.08573914 -5.91335106]
[158.47331238 8.64516163]
[154.86087036 23.20367432]
[151.39614868 37.79804993]
[148.37667847 52.49099731]
[145.65559387 67.24212646]
[142.93452454 81.99324799]
[153.15832520 92.96931458]
[168.06521606 91.30063629]
[182.97210693 89.63195801]
[197.87901306 87.96328735]
[205.42921448 74.40695953]
[219.51980591 67.90811157]
[234.73265076 70.96569061]
[245.21810913 82.40399170]
[246.94430542 97.82475281]
[239.24749756 111.29837799]
[225.08723450 117.64398193]
[209.90844727 114.42155457]
[199.54768372 102.87017822]
[184.64079285 104.53885651]
[169.73388672 106.20753479]
[154.82699585 107.87621307]
[169.82679749 107.79828644]
[181.73570251 116.91847229]
[185.57005310 131.42012024]
[179.72520447 145.23452759]
[166.64715576 152.58058167]
[151.80885315 150.38409424]
[141.41987610 139.56423950]
[139.82812500 124.64772797]
[139.82812500 139.64773560]
[139.82812500 154.64773560]
[139.82812500 169.64773560]
[139.82812500 184.64773560]
[139.82812500 199.64773560]
[139.82812500 214.64773560]
[139.82812500 229.64773560]
[139.82812500 244.64773560]
[139.82812500 259.64773560]
[139.82812500 274.64773560]
[139.82812500 289.64773560]
[139.82812500 304.64773560]
[139.82812500 319.64773560]
[154.49339294 323.11569214]
[167.96330261 329.87277222]
[179.51145935 339.55456543]
[188.51507568 351.63891602]
[194.48860168 365.47415161]
[197.10989380 380.31414795]
[196.23759460 395.35861206]
[191.91871643 409.79620361]
[184.38621521 422.84832764]
[174.04627991 433.81109619]
[161.45652771 442.09332275]
[147.29592896 447.24832153]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 130]
[26 129]
[28 55]
[29 54]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[37 45]
[38 44]
[59 105]
[60 104]
[61 103]
[64 102]
[66 101]
[67 100]
[68 99]
[69 90]
[70 89]
[71 88]
[72 87]
[106 121]
[107 120]
[108 119]
[109 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
