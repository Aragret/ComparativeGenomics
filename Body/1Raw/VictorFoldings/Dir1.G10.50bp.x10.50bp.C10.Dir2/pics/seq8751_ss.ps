%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGCCUUAAUGGGGGGGGGGCCAAGCCUACGUUUUCACACUUCUAGUAAGCCUCUACCUGCACGACAACAxxxxxxxxxxCCACCCUUACUACACAAUCAAAGACGCCCUCGGCUUACUUCUCUUCCUUCCCCCCCCCCCUCUCCUUAAU\
) } def
/len { sequence length } bind def

/coor [
[83.84570312 386.84973145]
[70.62550354 379.57727051]
[59.73870087 369.13027954]
[51.92757034 356.22100830]
[47.72468948 341.72970581]
[47.41661835 326.64434814]
[51.02436066 311.99353027]
[58.30193329 298.77615356]
[68.75314331 287.89337158]
[81.66540527 280.08724976]
[96.15834045 275.88995361]
[95.84628296 260.89318848]
[95.53422546 245.89643860]
[95.22216797 230.89968872]
[94.91011047 215.90293884]
[94.59806061 200.90618896]
[94.28600311 185.90942383]
[93.97394562 170.91267395]
[93.66188812 155.91592407]
[93.34983063 140.91917419]
[80.21414948 136.42970276]
[69.29698944 127.85548401]
[61.82246017 116.15792084]
[47.17895889 119.40874481]
[32.53545761 122.65956879]
[29.93463898 137.63636780]
[21.79620361 150.47514343]
[9.36120605 159.21809387]
[-5.47410870 162.53198242]
[-20.44746208 159.91146851]
[-33.27552795 151.75614929]
[-42.00211716 139.30966187]
[-45.29648972 124.47000885]
[-42.65627670 109.50011444]
[-34.48409271 96.68278503]
[-22.02613831 87.97257233]
[-7.18215561 84.69772339]
[7.78425217 87.35762787]
[20.59081650 95.54666901]
[29.28463173 108.01606750]
[43.92813110 104.76524353]
[58.57163239 101.51441956]
[64.20541382 79.08707428]
[80.97630310 63.16656494]
[103.66622162 58.70639420]
[107.67395782 44.25170517]
[111.68170166 29.79701805]
[115.68943787 15.34232903]
[119.69718170 0.88764101]
[123.70491791 -13.56704712]
[127.71266174 -28.02173615]
[131.72039795 -42.47642517]
[117.74162292 -47.95345688]
[104.40010071 -54.83878708]
[91.83726501 -63.05943680]
[80.18627167 -72.52825928]
[69.57064819 -83.14487457]
[60.10291672 -94.79673767]
[51.88344193 -107.36035156]
[44.99935150 -120.70251465]
[39.52362442 -134.68179321]
[35.51430511 -149.15002441]
[33.01389313 -163.95379639]
[32.04890060 -178.93621826]
[32.62954712 -193.93844604]
[34.74968719 -208.80145264]
[38.38684082 -223.36769104]
[43.50244904 -237.48274231]
[50.04229355 -250.99696350]
[57.93703842 -263.76712036]
[67.10299683 -275.65783691]
[77.44301605 -286.54309082]
[88.84746552 -296.30743408]
[101.19547272 -304.84738159]
[114.35612488 -312.07241821]
[128.18992615 -317.90594482]
[142.55021667 -322.28613281]
[157.28477478 -325.16656494]
[172.23741150 -326.51666260]
[187.24960327 -326.32214355]
[202.16223145 -324.58505249]
[216.81721497 -321.32382202]
[231.05918884 -316.57302856]
[244.73719788 -310.38299561]
[257.70620728 -302.81936646]
[269.82879639 -293.96234131]
[280.97640991 -283.90576172]
[291.03091431 -272.75628662]
[299.88571167 -260.63204956]
[307.44689941 -247.66162109]
[313.63439941 -233.98248291]
[318.38256836 -219.73962402]
[321.64105225 -205.08403015]
[323.37536621 -190.17108154]
[323.56710815 -175.15884399]
[322.21423340 -160.20646667]
[319.33108521 -145.47244263]
[314.94824219 -131.11296082]
[309.11212158 -117.28025055]
[301.88464355 -104.12094116]
[293.34240723 -91.77452087]
[283.57592773 -80.37187958]
[272.68878174 -70.03388977]
[260.79635620 -60.87013626]
[248.02473450 -52.97776031]
[234.50929260 -46.44042969]
[220.39329529 -41.32743835]
[205.82638550 -37.69298935]
[190.96298218 -35.57561111]
[175.96064758 -34.99774933]
[160.97840881 -35.96552658]
[146.17509460 -38.46868515]
[142.16734314 -24.01399612]
[138.15960693 -9.55930710]
[134.15187073 4.89538145]
[130.14413452 19.35006905]
[126.13639069 33.80475998]
[122.12864685 48.25944519]
[118.12091064 62.71413422]
[126.01658630 67.72399902]
[132.58857727 74.37602234]
[137.50248718 82.33177185]
[140.50833130 91.18645477]
[141.45314026 100.48955536]
[140.28887939 109.76775360]
[137.07476807 118.54898071]
[131.97433472 126.38645935]
[125.24707794 132.88142395]
[117.23529053 137.70341492]
[108.34658813 140.60711670]
[108.65864563 155.60386658]
[108.97069550 170.60061646]
[109.28275299 185.59736633]
[109.59481049 200.59413147]
[109.90686798 215.59088135]
[110.21892548 230.58763123]
[110.53098297 245.58438110]
[110.84303284 260.58114624]
[111.15509033 275.57788086]
[125.81008148 279.16867065]
[139.03588867 286.43090820]
[149.93075562 296.86950684]
[157.75186157 309.77273560]
[161.96592712 324.26080322]
[162.28564453 339.34588623]
[158.68922424 353.99948120]
[151.42185974 367.22250366]
[140.97906494 378.11334229]
[128.07283020 385.92944336]
[113.58313751 390.13793945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 42]
[24 41]
[25 40]
[45 119]
[46 118]
[47 117]
[48 116]
[49 115]
[50 114]
[51 113]
[52 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
