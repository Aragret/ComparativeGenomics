%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUGAUCUCGGGGGGGGGGUUAUACUAGUAUCCUUAAUCAUUUUUAUUGCCACAACUAACCUCCUCGGAxxxxxxxxxxAAGUCCCACUCCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCCCCCCCCCCCACCUGAGCUC\
) } def
/len { sequence length } bind def

/coor [
[35.58393097 430.51690674]
[22.36373520 423.24444580]
[11.47693062 412.79742432]
[3.66580057 399.88818359]
[-0.53708059 385.39688110]
[-0.84515303 370.31152344]
[2.76258802 355.66070557]
[10.04016113 342.44332886]
[20.49136925 331.56054688]
[33.40362930 323.75439453]
[47.89656830 319.55712891]
[47.58451080 304.56036377]
[47.27245331 289.56359863]
[46.96039963 274.56686401]
[46.64834213 259.57009888]
[46.33628464 244.57334900]
[46.02423096 229.57659912]
[45.71217346 214.57984924]
[45.40011597 199.58308411]
[45.08806229 184.58633423]
[37.51644516 197.53511047]
[27.29970360 208.51774597]
[14.93107224 217.00401306]
[1.00767481 222.58425903]
[-13.79830360 224.98904419]
[-28.77206993 224.10229492]
[-43.19073105 219.96679688]
[-56.35818863 212.78224182]
[-67.63876343 202.89544678]
[-76.48784637 190.78372192]
[-82.47823334 177.03181458]
[-85.32073212 162.30358887]
[-84.87809753 147.31013489]
[-81.17171478 132.77525330]
[-74.38050842 119.40066528]
[-64.83234406 107.83206177]
[-52.98817825 98.62794495]
[-39.41981888 92.23265839]
[-24.78231049 88.95496368]
[-9.78231049 88.95307922]
[4.85601950 92.22711182]
[18.42598152 98.61898804]
[30.27245331 107.82013702]
[39.82351685 119.38634491]
[46.61807632 132.75923157]
[50.32810593 147.29318237]
[50.77466583 162.28443909]
[58.22957611 149.26812744]
[65.68448639 136.25181580]
[73.13939667 123.23550415]
[58.79307938 127.61536407]
[44.56074524 122.87819672]
[35.70096588 110.77429962]
[35.48724747 95.77582550]
[43.99855423 83.42440796]
[58.09013367 78.28364563]
[72.55541992 82.25295258]
[82.04978943 93.86574554]
[83.06545258 108.83048248]
[81.74034119 94.40168762]
[90.92510986 83.19515991]
[105.33320618 81.66115570]
[114.84156036 70.05981445]
[124.34992218 58.45847321]
[133.85827637 46.85713196]
[143.36663818 35.25579071]
[151.22406006 22.47843361]
[157.28707886 8.75837994]
[163.35008240 -4.96167374]
[169.41310120 -18.68172836]
[157.97790527 -27.65296936]
[149.03845215 -39.10100555]
[143.11466980 -52.35261154]
[140.54930115 -66.62987518]
[141.48812866 -81.09586334]
[145.87161255 -94.90371704]
[153.43870544 -107.24617004]
[163.74237061 -117.40280914]
[176.17601013 -124.78206635]
[190.00914001 -128.95570374]
[204.43032837 -129.68367004]
[218.59481812 -126.92787170]
[224.94195557 -140.51881409]
[231.28907776 -154.10977173]
[232.51292419 -171.01948547]
[249.10058594 -174.52455139]
[257.06060791 -159.55543518]
[244.88003540 -147.76263428]
[238.53289795 -134.17169189]
[232.18577576 -120.58074188]
[244.14135742 -110.69802856]
[253.14999390 -98.05710602]
[258.59747314 -83.50997925]
[260.10983276 -68.03897095]
[257.57901001 -52.69036484]
[251.17059326 -38.50364685]
[241.31300354 -26.44111061]
[228.66879272 -17.32259750]
[214.09017944 -11.76975250]
[198.56158447 -10.16366577]
[183.13314819 -12.61871433]
[177.07014465 1.10133934]
[171.00712585 14.82139301]
[164.94412231 28.54144669]
[177.72015381 20.68186569]
[192.57302856 18.58611870]
[207.02494812 22.60382080]
[218.66500854 32.06473541]
[225.55139160 45.39056015]
[226.53529358 60.35825729]
[221.45257568 74.47087860]
[211.15115356 85.37411499]
[197.34951782 91.24906158]
[182.35011292 91.11566162]
[168.65516663 84.99614716]
[158.54930115 73.91140747]
[153.71841431 59.71061707]
[154.96797180 44.76414871]
[145.45962524 56.36548996]
[135.95126343 67.96683502]
[126.44290161 79.56817627]
[116.93454742 91.16951752]
[118.25965881 105.59831238]
[109.07489014 116.80484009]
[94.66679382 118.33884430]
[86.15570831 130.69041443]
[78.70079803 143.70672607]
[71.24588776 156.72303772]
[63.79097748 169.73934937]
[60.08481598 184.27427673]
[60.39686966 199.27104187]
[60.70892715 214.26779175]
[61.02098465 229.26454163]
[61.33303833 244.26129150]
[61.64509583 259.25805664]
[61.95715332 274.25479126]
[62.26920700 289.25155640]
[62.58126450 304.24832153]
[62.89332199 319.24505615]
[77.54830933 322.83584595]
[90.77412415 330.09808350]
[101.66899109 340.53668213]
[109.49008942 353.43991089]
[113.70415497 367.92794800]
[114.02388000 383.01306152]
[110.42745209 397.66665649]
[103.16008759 410.88967896]
[92.71728516 421.78051758]
[79.81105804 429.59661865]
[65.32136536 433.80508423]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[47 129]
[48 128]
[49 127]
[50 126]
[59 125]
[62 122]
[63 121]
[64 120]
[65 119]
[66 118]
[67 104]
[68 103]
[69 102]
[70 101]
[82 90]
[83 89]
[84 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
