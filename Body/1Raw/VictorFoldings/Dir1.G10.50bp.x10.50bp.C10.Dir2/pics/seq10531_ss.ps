%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAACCCCGACGGGGGGGGGGAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACAUCAGAxxxxxxxxxxUCAACGCCCAUAAUCAUACAAAGCCCCCGCACCAAUAGGAUCCUCCCGAACCCCCCCCCCUCAACCCUGAC\
) } def
/len { sequence length } bind def

/coor [
[77.87235260 563.29864502]
[63.85041046 557.74566650]
[51.65045166 548.87933350]
[42.03938293 537.25701904]
[35.62135696 523.60931396]
[32.79981995 508.79412842]
[33.75213623 493.74273682]
[38.41844177 479.40133667]
[46.50540543 466.67135620]
[57.50468063 456.35308838]
[70.72483826 449.09512329]
[85.33485413 445.35369873]
[85.33485413 430.35369873]
[85.33485413 415.35369873]
[85.33485413 400.35369873]
[85.33485413 385.35369873]
[85.33485413 370.35369873]
[85.33485413 355.35369873]
[85.33485413 340.35369873]
[85.33485413 325.35369873]
[85.33485413 310.35369873]
[77.59754944 297.62640381]
[85.33485413 283.82623291]
[73.72644806 293.32598877]
[58.78305817 292.02404785]
[48.99241638 280.65991211]
[49.91553497 265.68835449]
[61.02809143 255.61306763]
[76.01823425 256.15676880]
[86.37195587 267.01135254]
[88.21528625 252.12506104]
[90.05860901 237.23875427]
[91.90193176 222.35244751]
[79.56739807 211.56312561]
[76.03720093 195.39064026]
[82.88958740 180.14028931]
[97.61508179 171.87832642]
[99.15237427 156.95730591]
[100.68966675 142.03628540]
[102.22695923 127.11527252]
[78.22651672 107.62847900]
[89.43282318 84.28703308]
[86.67658234 69.54243469]
[83.92034149 54.79784012]
[81.16409302 40.05324554]
[78.40785217 25.30864716]
[66.10543060 11.64552307]
[72.50448608 -4.66694355]
[69.44609070 -19.35184097]
[62.62251663 -32.70994186]
[52.51708221 -43.79507446]
[44.37005615 -48.06377029]
[42.32083893 -55.21310043]
[32.44513321 -66.50337982]
[22.56942558 -77.79366302]
[12.69371986 -89.08393860]
[-3.15332031 -91.58411407]
[-10.95347786 -105.60328674]
[-4.72313881 -120.38713837]
[10.75831318 -124.59477234]
[23.61483383 -114.99845123]
[23.98399925 -98.95964813]
[33.85970688 -87.66936493]
[43.73541260 -76.37908936]
[53.61111832 -65.08880615]
[63.60221481 -53.90050888]
[73.70764923 -42.81537628]
[70.82316589 -57.53541946]
[71.22377777 -72.53006744]
[74.89014435 -87.07509613]
[81.64517975 -100.46798706]
[91.16262054 -112.06187439]
[102.98278809 -121.29679108]
[116.53477478 -127.72669220]
[131.16403198 -131.04103088]
[146.16398621 -131.07971191]
[160.81013489 -127.84087372]
[174.39511108 -121.48094940]
[186.26274109 -112.30712128]
[195.83985901 -100.76247406]
[202.66387939 -87.40460205]
[206.40521240 -72.87867737]
[206.88316345 -57.88629532]
[204.07463074 -43.15156937]
[198.11528015 -29.38617325]
[189.29293823 -17.25496483]
[178.03370667 -7.34387064]
[164.88140869 -0.13158663]
[150.47128296 4.03353977]
[135.49932861 4.95033741]
[120.68866730 2.57452488]
[106.75465393 -2.97914743]
[94.37028503 -11.44244289]
[84.13098907 -22.41023636]
[87.18938446 -7.72533894]
[97.15755463 -0.80451351]
[99.79804230 11.45106411]
[93.15245056 22.55240440]
[95.90869141 37.29700089]
[98.66493225 52.04159927]
[101.42118073 66.78619385]
[104.17742157 81.53079224]
[117.18067169 84.60185242]
[127.03267670 96.92893219]
[141.37274170 92.52863312]
[152.14242554 80.16149902]
[168.18347168 83.56989288]
[172.99421692 99.24754333]
[161.62577820 111.06663513]
[145.77304077 106.86869049]
[131.43298340 111.26898956]
[146.41136169 112.07400513]
[156.98324585 122.71521759]
[157.69033813 137.69853210]
[148.16757202 149.28805542]
[133.33157349 151.50007629]
[120.84218597 143.19252014]
[117.14797211 128.65255737]
[115.61067963 143.57357788]
[114.07338715 158.49459839]
[112.53609467 173.41561890]
[123.47837830 181.85476685]
[128.76506042 194.50459290]
[127.10823059 208.00497437]
[119.04912567 218.82708740]
[106.78823853 224.19577026]
[104.94491577 239.08207703]
[103.10159302 253.96838379]
[101.25827026 268.85470581]
[100.33485413 283.82623291]
[108.07215118 297.62640381]
[100.33485413 310.35369873]
[100.33485413 325.35369873]
[100.33485413 340.35369873]
[100.33485413 355.35369873]
[100.33485413 370.35369873]
[100.33485413 385.35369873]
[100.33485413 400.35369873]
[100.33485413 415.35369873]
[100.33485413 430.35369873]
[100.33485413 445.35369873]
[114.94486237 449.09512329]
[128.16502380 456.35308838]
[139.16430664 466.67135620]
[147.25126648 479.40133667]
[151.91757202 493.74273682]
[152.86988831 508.79412842]
[150.04835510 523.60931396]
[143.63032532 537.25701904]
[134.01925659 548.87933350]
[121.81929779 557.74566650]
[107.79735565 563.29864502]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 130]
[30 129]
[31 128]
[32 127]
[33 126]
[37 121]
[38 120]
[39 119]
[40 118]
[42 102]
[43 101]
[44 100]
[45 99]
[46 98]
[48 95]
[49 94]
[50 67]
[51 66]
[53 65]
[54 64]
[55 63]
[56 62]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
