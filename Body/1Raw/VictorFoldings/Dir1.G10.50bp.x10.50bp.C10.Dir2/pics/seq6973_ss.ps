%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAGCCCUAGGGGGGGGGGGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCxxxxxxxxxxUACUCCAAAGACCACAUCAUCGAAACCGCAAACAUAUCAUACACAAACGCCCCCCCCCCCCUGAGCCCUA\
) } def
/len { sequence length } bind def

/coor [
[55.00724411 410.13122559]
[41.16130447 404.11520386]
[29.45264244 394.58578491]
[20.75011826 382.25012207]
[15.69951630 368.02359009]
[14.67562485 352.96191406]
[17.75442314 338.18273926]
[24.70744514 324.78280640]
[35.01873016 313.75646973]
[47.92311096 305.92196655]
[62.46299744 301.86065674]
[62.46299744 286.86065674]
[62.46299744 271.86065674]
[62.46299744 256.86065674]
[62.46299744 241.86065674]
[62.46299744 226.86065674]
[62.46299744 211.86065674]
[62.46299744 196.86065674]
[62.46299744 181.86065674]
[62.46299744 166.86065674]
[62.46299744 151.86065674]
[49.85187149 143.73912048]
[36.19562912 149.94451904]
[33.21737671 165.17311096]
[21.83387947 175.71803284]
[6.42232418 177.52458191]
[-7.09123087 169.89808655]
[-13.51054859 155.77108765]
[-10.36727047 140.57571411]
[1.12994885 130.15489197]
[16.56019402 128.51564026]
[29.99022102 136.28828430]
[43.64646149 130.08287048]
[42.86767197 122.62342072]
[27.94873619 124.18077087]
[26.39161682 109.26181030]
[41.31009293 107.70450592]
[40.53129959 100.24505615]
[25.88780022 96.99422455]
[11.24429798 93.74340057]
[-3.39920330 90.49257660]
[-20.17226601 92.96253204]
[-27.18894196 77.52871704]
[-14.30069447 66.51375580]
[-0.14837758 75.84907532]
[14.49512386 79.09989929]
[29.13862419 82.35072327]
[43.78212738 85.60155487]
[50.27029037 72.07736206]
[38.57066727 62.69020081]
[26.87104416 53.30303955]
[10.83103561 53.61555862]
[0.69720864 41.17831421]
[4.24336863 25.53208923]
[18.74920464 18.67933273]
[33.08708191 25.87689209]
[36.25820541 41.60341644]
[47.95782852 50.99057770]
[59.65745163 60.37773895]
[93.78116608 56.15094757]
[115.70985413 72.08755493]
[125.92333221 61.10189056]
[136.13681030 50.11622620]
[146.35029602 39.13056183]
[136.48272705 27.81469154]
[127.85207367 15.52935600]
[120.55288696 2.40915895]
[114.66513824 -11.40214634]
[110.25334167 -25.75323677]
[107.36583710 -40.48687363]
[106.03426361 -55.44162369]
[106.27320099 -70.45363617]
[108.08003235 -85.35843658]
[111.43497467 -99.99272156]
[116.30125427 -114.19613647]
[122.62555695 -127.81306458]
[130.33859253 -140.69432068]
[139.35585022 -152.69876099]
[149.57855225 -163.69487000]
[160.89465332 -173.56216431]
[173.18020630 -182.19252014]
[186.30058289 -189.49139404]
[200.11203003 -195.37879944]
[214.46322632 -199.79025269]
[229.19692993 -202.67739868]
[244.15171814 -204.00860596]
[259.16372681 -203.76930237]
[274.06848145 -201.96211243]
[288.70266724 -198.60681152]
[302.90597534 -193.74018860]
[316.52276611 -187.41555786]
[329.40380859 -179.70220947]
[341.40805054 -170.68464661]
[352.40390015 -160.46170044]
[362.27090454 -149.14533997]
[370.90097046 -136.85958862]
[378.19952393 -123.73903656]
[384.08660889 -109.92744446]
[388.49771118 -95.57614136]
[391.38449097 -80.84236908]
[392.71533203 -65.88755035]
[392.47567749 -50.87554550]
[390.66812134 -35.97083282]
[387.31246948 -21.33671761]
[382.44549561 -7.13353825]
[376.12054443 6.48308754]
[368.40686035 19.36396790]
[359.38900757 31.36797523]
[349.16580200 42.36358261]
[337.84921265 52.23032379]
[325.56323242 60.86008453]
[312.44250488 68.15831757]
[298.63076782 74.04505157]
[284.27935791 78.45580292]
[269.54553223 81.34223938]
[254.59066772 82.67272186]
[239.57867432 82.43269348]
[224.67401123 80.62477112]
[210.03997803 77.26876831]
[195.83691406 72.40145111]
[182.22044373 66.07615662]
[169.33975220 58.36217880]
[157.33595276 49.34404373]
[147.12248230 60.32970810]
[136.90899658 71.31536865]
[126.69551849 82.30103302]
[138.09877014 102.13936615]
[133.94033813 128.45112610]
[111.57257843 149.07075500]
[77.46299744 151.86065674]
[77.46299744 166.86065674]
[77.46299744 181.86065674]
[77.46299744 196.86065674]
[77.46299744 211.86065674]
[77.46299744 226.86065674]
[77.46299744 241.86065674]
[77.46299744 256.86065674]
[77.46299744 271.86065674]
[77.46299744 286.86065674]
[77.46299744 301.86065674]
[92.00288391 305.92196655]
[104.90726471 313.75646973]
[115.21855164 324.78280640]
[122.17156982 338.18273926]
[125.25037384 352.96191406]
[124.22647858 368.02359009]
[119.17588043 382.25012207]
[110.47335052 394.58578491]
[98.76469421 404.11520386]
[84.91875458 410.13122559]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 33]
[23 32]
[38 48]
[39 47]
[40 46]
[41 45]
[49 59]
[50 58]
[51 57]
[61 126]
[62 125]
[63 124]
[64 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
