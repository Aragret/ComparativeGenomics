%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUCUGCUUCCUGGGGGGGGGGAGUCCUGUAUGCCCUUUUCCUAACACUCACAACAAAACUAACUAAUACUAxxxxxxxxxxGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAACUUUCCUCACCCCCCCCCCCUAUCUGCUUCAU\
) } def
/len { sequence length } bind def

/coor [
[129.07620239 436.06869507]
[114.91560364 430.91369629]
[102.32585907 422.63146973]
[91.98591614 411.66870117]
[84.45340729 398.61657715]
[80.13454437 384.17898560]
[79.26222992 369.13452148]
[81.88352203 354.29452515]
[87.85704803 340.45928955]
[96.86067200 328.37493896]
[108.40882111 318.69314575]
[121.87873840 311.93606567]
[136.54400635 308.46810913]
[136.54400635 293.46810913]
[136.54400635 278.46810913]
[136.54400635 263.46810913]
[136.54400635 248.46810913]
[136.54400635 233.46810913]
[136.54400635 218.46810913]
[136.54400635 203.46810913]
[136.54400635 188.46810913]
[136.54400635 173.46810913]
[132.05355835 159.15602112]
[123.48453522 146.84455872]
[114.91550446 134.53311157]
[106.34648132 122.22165680]
[97.77745819 109.91020966]
[90.91328430 105.58770752]
[89.16250610 97.26127625]
[80.84475708 84.77868652]
[72.27573395 72.46723175]
[57.90458679 65.85052490]
[56.68329239 51.00607681]
[47.86651230 38.87082291]
[39.04973602 26.73556900]
[25.97455406 34.12051392]
[12.14276600 39.96682739]
[-2.26530218 44.19829941]
[-17.06181145 46.75975800]
[-32.05385971 47.61781311]
[-47.04599380 46.76127243]
[-61.84276199 44.20130920]
[-76.25125885 39.97129440]
[-90.08363342 34.12637329]
[-103.15956116 26.74275208]
[-115.30857086 17.91668701]
[-126.37226868 7.76324368]
[-136.20642090 -3.58520508]
[-144.68280029 -15.98070908]
[-151.69093323 -29.26166916]
[-157.13943481 -43.25494003]
[-160.95727539 -57.77808762]
[-163.09468079 -72.64177704]
[-163.52378845 -87.65222931]
[-162.23899841 -102.61374664]
[-159.25708008 -117.33128357]
[-154.61688232 -131.61296082]
[-148.37890625 -145.27258301]
[-140.62448120 -158.13209534]
[-131.45471191 -170.02380371]
[-120.98912048 -180.79270935]
[-109.36417389 -190.29841614]
[-96.73140717 -198.41697693]
[-83.25552368 -205.04255676]
[-69.11221313 -210.08879089]
[-54.48585510 -213.48988342]
[-39.56713867 -215.20149231]
[-24.55055428 -215.20129395]
[-9.63187885 -213.48931885]
[4.99439383 -210.08786011]
[19.13757896 -205.04125977]
[32.61329269 -198.41534424]
[45.24584961 -190.29646301]
[56.87055969 -180.79046631]
[67.33587646 -170.02130127]
[76.50534821 -158.12934875]
[84.25944519 -145.26965332]
[90.49707031 -131.60986328]
[95.13690948 -117.32807159]
[98.11846924 -102.61045837]
[99.40287781 -87.64891052]
[98.97339630 -72.63846588]
[96.83560944 -57.77482986]
[93.01740265 -43.25177765]
[87.56855011 -29.25864792]
[80.56008148 -15.97786522]
[72.08337402 -3.58257437]
[62.24894333 7.76562595]
[51.18498993 17.91878891]
[60.00177002 30.05404472]
[68.81855011 42.18930054]
[82.55905914 47.93800735]
[84.41098785 63.65045166]
[88.95964050 65.27320862]
[92.51170349 69.80404663]
[93.32734680 76.46093750]
[101.64509583 88.94352722]
[110.08891296 101.34118652]
[118.65793610 113.65263367]
[127.22695923 125.96408844]
[135.79598999 138.27554321]
[144.36500549 150.58699036]
[143.56683350 135.60824585]
[145.65231323 120.75392151]
[150.54423523 106.57403564]
[158.06144714 93.59361267]
[167.92562866 82.29326630]
[179.77156067 73.09140778]
[193.16059875 66.32875061]
[207.59701538 62.25569534]
[222.54627991 61.02304459]
[237.45487976 62.67644119]
[251.77079773 67.15467072]
[264.96395874 74.29190826]
[276.54589844 83.82390594]
[286.08776855 95.39771271]
[293.23623657 108.58480072]
[297.72665405 122.89689636]
[299.39273071 137.80407715]
[298.17282104 152.75439453]
[294.11206055 167.19427490]
[287.36080933 180.58908081]
[278.16903687 192.44282532]
[266.87710571 202.31663513]
[253.90307617 209.84490967]
[239.72735596 214.74888611]
[224.87483215 216.84701538]
[209.89540100 216.06159973]
[195.34371948 212.42172241]
[181.75859070 206.06216431]
[169.64300537 197.21836853]
[159.44557190 186.21781921]
[151.54400635 173.46810913]
[151.54400635 188.46810913]
[151.54400635 203.46810913]
[151.54400635 218.46810913]
[151.54400635 233.46810913]
[151.54400635 248.46810913]
[151.54400635 263.46810913]
[151.54400635 278.46810913]
[151.54400635 293.46810913]
[151.54400635 308.46810913]
[166.20925903 311.93606567]
[179.67918396 318.69314575]
[191.22734070 328.37493896]
[200.23095703 340.45928955]
[206.20448303 354.29452515]
[208.82577515 369.13452148]
[207.95346069 384.17898560]
[203.63459778 398.61657715]
[196.10208130 411.66870117]
[185.76214600 422.63146973]
[173.17240906 430.91369629]
[159.01179504 436.06869507]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 102]
[24 101]
[25 100]
[26 99]
[27 98]
[29 97]
[30 96]
[31 93]
[33 91]
[34 90]
[35 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
