%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCAAGUCAGGGGGGGGGGAUAGAAGCCGGCGUAAAGAGUGUUUUAGAUCACCCCCUCCCCAAUAAAGCxxxxxxxxxxUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUCCCCCCCCCCACCCAAGGCA\
) } def
/len { sequence length } bind def

/coor [
[92.50144196 390.62857056]
[78.65550995 384.61254883]
[66.94684601 375.08312988]
[58.24431992 362.74746704]
[53.19371796 348.52093506]
[52.16982651 333.45925903]
[55.24862671 318.68011475]
[62.20164871 305.28018188]
[72.51293182 294.25384521]
[85.41731262 286.41934204]
[99.95719910 282.35803223]
[99.95719910 267.35803223]
[99.95719910 252.35803223]
[99.95719910 237.35803223]
[99.95719910 222.35803223]
[99.95719910 207.35803223]
[99.95719910 192.35803223]
[99.95719910 177.35803223]
[99.95719910 162.35803223]
[99.95719910 147.35803223]
[99.95719910 132.35803223]
[82.16870880 125.02338409]
[72.51146698 109.53465271]
[73.63583374 92.30668640]
[83.97733307 79.73719788]
[78.49030304 65.77680969]
[73.00327301 51.81641769]
[58.79127121 45.44014740]
[53.42551041 31.20416451]
[59.59189224 17.69448853]
[54.10486221 3.73409796]
[48.61782837 -10.22629166]
[34.23270798 -9.09145069]
[20.12831116 -12.06224823]
[7.45118761 -18.88798141]
[-2.77074409 -29.00495720]
[-9.71153545 -41.58303452]
[-12.81394386 -55.59373474]
[-11.83416271 -69.89433289]
[-6.86095381 -83.32107544]
[1.69230878 -94.78385925]
[13.12198448 -103.35475922]
[7.92656946 -117.42627716]
[2.73115373 -131.49780273]
[-2.46426177 -145.56932068]
[-7.65967751 -159.64083862]
[-12.85509300 -173.71235657]
[-27.58372498 -170.71771240]
[-42.59687805 -170.00660706]
[-57.54262161 -171.59568787]
[-72.07061005 -175.44770813]
[-85.84027863 -181.47238159]
[-98.52885437 -189.52845764]
[-109.83889008 -199.42712402]
[-119.50527191 -210.93630981]
[-127.30139923 -223.78623962]
[-133.04452515 -237.67570496]
[-136.60002136 -252.27908325]
[-137.88453674 -267.25408936]
[-136.86796570 -282.24963379]
[-133.57414246 -296.91427612]
[-128.08026123 -310.90417480]
[-120.51512909 -323.89144897]
[-111.05606079 -335.57162476]
[-99.92481232 -345.67092896]
[-87.38230133 -353.95257568]
[-73.72254944 -360.22247314]
[-59.26575470 -364.33361816]
[-44.35081482 -366.18966675]
[-29.32734680 -365.74710083]
[-14.54752731 -363.01626587]
[-0.35781631 -358.06121826]
[12.90915871 -350.99810791]
[24.94240189 -341.99246216]
[35.45983505 -331.25540161]
[44.21492004 -319.03866577]
[51.00241470 -305.62857056]
[55.66321945 -291.33950806]
[58.08807755 -276.50643921]
[58.22014236 -261.47702026]
[56.05632019 -246.60362244]
[51.64733505 -232.23486328]
[45.09653854 -218.70756531]
[36.55749130 -206.33885193]
[26.23036385 -195.41865540]
[14.35723400 -186.20294189]
[1.21642637 -178.90777588]
[6.41184187 -164.83624268]
[11.60725784 -150.76472473]
[16.80267334 -136.69320679]
[21.99808884 -122.62168884]
[27.19350433 -108.55017090]
[42.80692673 -109.33791351]
[57.92095947 -105.26702118]
[71.05906677 -96.72279358]
[80.93392181 -84.52817535]
[86.57357788 -69.86444092]
[87.41705322 -54.15684128]
[83.37019348 -38.93601227]
[74.81595612 -25.68886757]
[62.57822037 -15.71332359]
[68.06525421 -1.75293362]
[73.55228424 12.20745659]
[87.26712036 17.90296173]
[93.03062439 31.98261642]
[86.96366119 46.32938385]
[92.45069122 60.28977585]
[97.93772888 74.25016785]
[114.96024323 76.32272339]
[128.20658875 89.25806427]
[131.10191345 108.92827606]
[145.51412964 113.08616638]
[159.92634583 117.24405670]
[174.33856201 121.40193939]
[188.75077820 125.55982971]
[203.16299438 129.71771240]
[217.57521057 133.87561035]
[232.25788879 127.41042328]
[246.39961243 134.98614502]
[249.15203857 150.79132080]
[238.40377808 162.70156860]
[222.39994812 161.58038330]
[213.41732788 148.28782654]
[199.00511169 144.12992859]
[184.59289551 139.97204590]
[170.18067932 135.81416321]
[155.76846313 131.65626526]
[141.35624695 127.49838257]
[126.94403076 123.34049225]
[114.95719910 132.35803223]
[114.95719910 147.35803223]
[114.95719910 162.35803223]
[114.95719910 177.35803223]
[114.95719910 192.35803223]
[114.95719910 207.35803223]
[114.95719910 222.35803223]
[114.95719910 237.35803223]
[114.95719910 252.35803223]
[114.95719910 267.35803223]
[114.95719910 282.35803223]
[129.49708557 286.41934204]
[142.40147400 294.25384521]
[152.71275330 305.28018188]
[159.66577148 318.68011475]
[162.74456787 333.45925903]
[161.72068787 348.52093506]
[156.67007446 362.74746704]
[147.96755981 375.08312988]
[136.25889587 384.61254883]
[122.41295624 390.62857056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 108]
[26 107]
[27 106]
[30 103]
[31 102]
[32 101]
[42 92]
[43 91]
[44 90]
[45 89]
[46 88]
[47 87]
[111 129]
[112 128]
[113 127]
[114 126]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
