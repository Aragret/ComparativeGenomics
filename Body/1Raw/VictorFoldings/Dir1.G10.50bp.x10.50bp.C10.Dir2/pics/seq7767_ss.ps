%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUUCCCCCGGGGGGGGGGAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGxxxxxxxxxxAUUCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCCCCCCCCCCCUAUUUCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.94006348 592.16888428]
[71.71986389 584.89642334]
[60.83306122 574.44940186]
[53.02193069 561.54016113]
[48.81904984 547.04882812]
[48.51097488 531.96350098]
[52.11871719 517.31268311]
[59.39628983 504.09530640]
[69.84749603 493.21252441]
[82.75975800 485.40637207]
[97.25269318 481.20910645]
[96.94064331 466.21234131]
[96.62858582 451.21557617]
[96.31652832 436.21884155]
[96.00447083 421.22207642]
[95.69241333 406.22531128]
[95.38035583 391.22857666]
[95.06830597 376.23181152]
[94.75624847 361.23507690]
[94.44419098 346.23831177]
[94.13213348 331.24154663]
[79.72680664 328.82873535]
[66.01100922 323.79553223]
[53.45717239 316.31372070]
[42.49797821 306.63934326]
[33.51148987 295.10412598]
[26.80808067 282.10397339]
[22.61974335 268.08551025]
[21.09203720 253.53053284]
[22.27903748 238.93968201]
[26.14142990 224.81506348]
[32.54780197 211.64303589]
[41.27911377 199.87744141]
[52.03619385 189.92398071]
[64.44998932 182.12623596]
[78.09421539 176.75375366]
[92.50000000 173.99281311]
[92.50000000 158.99281311]
[92.50000000 143.99281311]
[92.50000000 128.99281311]
[82.10028839 125.20079041]
[73.49191284 117.70040894]
[67.98432922 107.30347443]
[66.52973938 95.27733612]
[69.56800079 83.19135284]
[76.93614960 72.71211243]
[66.49633789 61.94130325]
[56.05652618 51.17049408]
[51.69408417 50.10720825]
[48.27154160 47.90328979]
[46.03651810 45.00733566]
[45.06048965 41.90228271]
[45.24326706 39.04327774]
[35.73490906 27.44193459]
[26.22655106 15.84059334]
[10.58896732 15.84078217]
[-1.35694325 5.74973536]
[-3.97068787 -9.66786385]
[3.98186421 -23.13229561]
[18.74576187 -28.28606796]
[33.34994125 -22.69572639]
[40.89875793 -9.00085926]
[37.82789230 6.33223486]
[47.33625031 17.93357658]
[56.84460831 29.53491783]
[66.82733917 40.73068237]
[77.26715088 51.50149155]
[87.70696259 62.27230072]
[102.59024048 60.40468597]
[110.04515076 47.38837814]
[96.81941223 54.46508408]
[82.02738190 56.95423889]
[67.21393585 54.59587860]
[53.92618179 47.63631058]
[43.55188370 36.80238724]
[37.17453003 23.22559166]
[35.46015930 8.32388306]
[38.58782959 -6.34641695]
[46.23088074 -19.25314903]
[57.59108353 -29.04834366]
[71.48197937 -34.70899582]
[86.45281982 -35.64390945]
[100.94004822 -31.75544357]
[113.43063354 -23.44970703]
[122.62006378 -11.59414673]
[127.54860687 2.57305074]
[127.70152283 17.57227135]
[123.06146240 31.83968163]
[134.56326294 22.21115494]
[146.06506348 12.58262825]
[142.26596069 -2.20011592]
[145.26548767 -17.16559410]
[154.46810913 -29.34239960]
[168.04661560 -36.31282043]
[183.30500793 -36.69287109]
[197.21369934 -30.40709496]
[207.01112366 -18.70353699]
[210.75198364 -3.90594625]
[207.69354248 11.04760456]
[198.44303894 23.18807602]
[184.83718872 30.10497093]
[169.57742310 30.42493248]
[155.69358826 24.08443260]
[144.19178772 33.71295929]
[132.68998718 43.34148407]
[123.06146240 54.84328842]
[115.60655212 67.85959625]
[129.92668152 83.27393341]
[132.67588806 103.26045227]
[123.83650970 120.42840576]
[107.50000000 128.99281311]
[107.50000000 143.99281311]
[107.50000000 158.99281311]
[107.50000000 173.99281311]
[122.63439178 176.96919250]
[136.89883423 182.82508850]
[149.75131226 191.33605957]
[160.70384216 202.17681885]
[169.34101868 214.93362427]
[175.33572388 229.12016296]
[178.46156311 244.19599915]
[178.60133362 259.58721924]
[175.75157166 274.70822144]
[170.02241516 288.98410034]
[161.63352966 301.87237549]
[150.90557861 312.88372803]
[138.24797058 321.60043335]
[124.14330292 327.69241333]
[109.12889099 330.92950439]
[109.44094086 345.92623901]
[109.75299835 360.92300415]
[110.06505585 375.91976929]
[110.37711334 390.91650391]
[110.68917084 405.91326904]
[111.00122833 420.91003418]
[111.31327820 435.90676880]
[111.62533569 450.90353394]
[111.93739319 465.90026855]
[112.24945068 480.89703369]
[126.90444183 484.48779297]
[140.13024902 491.75006104]
[151.02511597 502.18865967]
[158.84622192 515.09185791]
[163.06028748 529.57995605]
[163.38000488 544.66503906]
[159.78358459 559.31866455]
[152.51622009 572.54162598]
[142.07341003 583.43249512]
[129.16719055 591.24859619]
[114.67749786 595.45709229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[37 114]
[38 113]
[39 112]
[40 111]
[46 68]
[47 67]
[48 66]
[53 65]
[54 64]
[55 63]
[69 107]
[70 106]
[88 105]
[89 104]
[90 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
