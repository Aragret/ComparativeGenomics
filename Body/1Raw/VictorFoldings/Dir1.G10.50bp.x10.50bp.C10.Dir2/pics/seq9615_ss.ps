%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAUAAUACGGGGGGGGGGUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCUCAACACCCACUCCCUCxxxxxxxxxxUCGCUGGGUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUCCCCCCCCCCGGUAUAAUAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 374.65112305]
[71.19830322 368.63510132]
[59.48964310 359.10568237]
[50.78712082 346.76998901]
[45.73651886 332.54348755]
[44.71262741 317.48181152]
[47.79142761 302.70263672]
[54.74444962 289.30270386]
[65.05573273 278.27636719]
[77.96011353 270.44186401]
[92.50000000 266.38055420]
[92.50000000 251.38055420]
[92.50000000 236.38055420]
[92.50000000 221.38055420]
[92.50000000 206.38055420]
[92.50000000 191.38055420]
[92.50000000 176.38055420]
[92.50000000 161.38055420]
[92.50000000 146.38055420]
[92.50000000 131.38055420]
[83.99765015 129.13211060]
[76.18391418 124.56032562]
[69.69710541 117.88034058]
[65.10736084 109.48300171]
[62.86830139 99.91310120]
[48.29560089 103.46786499]
[33.72289658 107.02262878]
[19.15019417 110.57738495]
[4.57749128 114.13214874]
[-4.95030069 127.03954315]
[-20.98691559 127.49402618]
[-31.23043251 115.14696503]
[-27.82290459 99.46997070]
[-13.37829494 92.48908234]
[1.02272952 99.55944824]
[15.59543228 96.00468445]
[30.16813469 92.44992065]
[44.74083710 88.89516449]
[59.31354141 85.34040070]
[66.76844788 72.32408905]
[62.46086502 57.95590591]
[58.15328217 43.58772278]
[53.84569550 29.21953773]
[49.94707108 25.55616570]
[48.07564163 21.19152069]
[48.15358353 17.03272057]
[49.74782944 13.81933403]
[46.34485245 -0.78955871]
[33.45264816 -13.89570236]
[39.12343597 -30.47406578]
[35.41727448 -45.00900269]
[31.71111488 -59.54393768]
[28.00495338 -74.07887268]
[12.99307823 -73.09996033]
[-1.94303656 -74.89637756]
[-16.29467392 -79.40693665]
[-29.57302284 -86.47801208]
[-41.32582474 -95.86876678]
[-51.15279007 -107.25935364]
[-58.71920776 -120.26181030]
[-63.76737213 -134.43328857]
[-66.12535095 -149.29109192]
[-65.71282196 -164.32919312]
[-62.54383850 -179.03538513]
[-56.72633743 -192.90879822]
[-48.45846176 -205.47688293]
[-38.02180862 -216.31159973]
[-25.77184868 -225.04389954]
[-12.12581062 -231.37637329]
[2.45152640 -235.09335327]
[17.46366310 -236.06822205]
[32.39929581 -234.26777649]
[46.74971390 -229.75334167]
[60.02615738 -222.67869568]
[71.77642822 -213.28477478]
[81.60031891 -201.89154053]
[89.16323853 -188.88703918]
[94.20758057 -174.71420288]
[96.56155396 -159.85575867]
[96.14496613 -144.81776428]
[92.97202301 -130.11242676]
[87.15077972 -116.24059296]
[78.87951660 -103.67473602]
[68.43994904 -92.84283447]
[56.18763351 -84.11383820]
[42.53989029 -77.78503418]
[46.24605179 -63.25009918]
[49.95221329 -48.71516418]
[53.65837097 -34.18022537]
[63.92473984 -27.70651054]
[67.10450745 -15.57770061]
[60.95374298 -4.19253683]
[64.35671997 10.41635609]
[68.21388245 24.91195297]
[72.52146912 39.28013611]
[76.82904816 53.64831924]
[81.13663483 68.01650238]
[97.92510223 64.14504242]
[114.06179047 68.27898407]
[126.06642914 78.98729706]
[131.59930420 93.48281097]
[146.59199524 93.95085907]
[161.58468628 94.41889954]
[176.57739258 94.88694000]
[191.57008362 95.35498047]
[206.56927490 95.51101685]
[221.56845093 95.35498047]
[236.56764221 95.19894409]
[244.68559265 82.08016205]
[258.61721802 75.45345306]
[273.91699219 77.43338776]
[285.70285034 87.38817596]
[290.21389771 102.14126587]
[286.01074219 116.98501587]
[274.43453979 127.18283844]
[259.17926025 129.48063660]
[245.11279297 123.14519501]
[236.72367859 110.19813538]
[221.72448730 110.35417175]
[206.72531128 110.51020813]
[202.76387024 113.28193665]
[197.00546265 113.55035400]
[191.10203552 110.34767914]
[176.10934448 109.87963867]
[161.11665344 109.41159058]
[146.12394714 108.94355011]
[131.13125610 108.47550964]
[127.78221893 116.40541077]
[122.45559692 123.16755676]
[115.53054047 128.28057861]
[107.50000000 131.38055420]
[107.50000000 146.38055420]
[107.50000000 161.38055420]
[107.50000000 176.38055420]
[107.50000000 191.38055420]
[107.50000000 206.38055420]
[107.50000000 221.38055420]
[107.50000000 236.38055420]
[107.50000000 251.38055420]
[107.50000000 266.38055420]
[122.03988647 270.44186401]
[134.94427490 278.27636719]
[145.25555420 289.30270386]
[152.20857239 302.70263672]
[155.28736877 317.48181152]
[154.26348877 332.54348755]
[149.21287537 346.76998901]
[140.51036072 359.10568237]
[128.80169678 368.63510132]
[114.95575714 374.65112305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[40 97]
[41 96]
[42 95]
[43 94]
[47 93]
[48 92]
[50 89]
[51 88]
[52 87]
[53 86]
[101 127]
[102 126]
[103 125]
[104 124]
[105 123]
[106 120]
[107 119]
[108 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
