%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAAUCACGGGGGGGGGGAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAxxxxxxxxxxAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUCCCCCCCCCCUCCUCAUCAC\
) } def
/len { sequence length } bind def

/coor [
[86.15882111 376.67605591]
[72.31288147 370.66003418]
[60.60422134 361.13061523]
[51.90169907 348.79495239]
[46.85109711 334.56842041]
[45.82720566 319.50674438]
[48.90600204 304.72760010]
[55.85902405 291.32766724]
[66.17031097 280.30133057]
[79.07469177 272.46682739]
[93.61457825 268.40551758]
[93.61457825 253.40550232]
[93.61457825 238.40550232]
[93.61457825 223.40550232]
[93.61457825 208.40550232]
[93.61457825 193.40550232]
[93.61457825 178.40550232]
[93.61457825 163.40550232]
[93.61457825 148.40550232]
[93.61457825 133.40550232]
[93.61457825 118.40550232]
[83.63185120 107.20973969]
[68.72994995 105.49704742]
[53.82804489 103.78435516]
[38.92614365 102.07167053]
[24.02424240 100.35897827]
[12.78582764 112.95858765]
[-3.58079958 116.36667633]
[-18.61319733 109.43898010]
[-26.49516106 95.07305145]
[-41.42947006 93.67074585]
[-56.36377716 92.26844025]
[-63.11945343 105.85980988]
[-74.33133698 116.09005737]
[-88.48311615 121.57563782]
[-103.66088104 121.57466888]
[-117.81195831 116.08727264]
[-129.02252197 105.85558319]
[-135.77645874 92.26334381]
[-137.16033936 77.14880371]
[-132.98699951 62.55607605]
[-123.82086182 50.45870590]
[-110.90156555 42.49276733]
[-95.97634125 39.73558044]
[-81.06369781 42.56003952]
[-68.18045807 50.58415604]
[-59.06896210 62.72273636]
[-54.96147156 77.33413696]
[-40.02716446 78.73643494]
[-25.09285736 80.13874054]
[-17.21096992 69.31877136]
[-4.90656328 63.77683258]
[8.63562202 65.06513214]
[19.85178947 72.95250702]
[25.73693085 85.45707703]
[40.63883209 87.16976929]
[55.54073715 88.88245392]
[70.44263458 90.59514618]
[85.34454346 92.30783844]
[85.34705353 85.04874420]
[88.68812561 77.35034180]
[88.68812561 62.35034180]
[73.99954224 59.00471878]
[60.42392731 52.47399521]
[48.64222717 43.08573914]
[39.24541092 31.31086922]
[32.70481873 17.74000359]
[29.34852028 3.05385303]
[29.34487152 -12.01093102]
[32.69404984 -26.69870567]
[39.22806549 -40.27273941]
[48.61917496 -52.05216217]
[60.39632416 -61.44612503]
[73.96877289 -67.98342896]
[88.65573883 -71.33616638]
[103.72052002 -71.33616638]
[118.40748596 -67.98342896]
[131.97993469 -61.44612503]
[143.75708008 -52.05216217]
[153.14819336 -40.27273941]
[159.68220520 -26.69870567]
[163.03138733 -12.01093102]
[163.02774048 3.05385303]
[159.67143250 17.74000359]
[153.13084412 31.31086922]
[143.73402405 43.08573914]
[131.95233154 52.47399521]
[118.37671661 59.00471878]
[103.68812561 62.35034180]
[103.68812561 77.35034180]
[116.03970337 85.86143494]
[130.05641174 80.51992035]
[144.07312012 75.17840576]
[158.08984375 69.83689117]
[172.10655212 64.49538422]
[186.12326050 59.15386963]
[185.87068176 43.99761581]
[190.81999207 29.67001915]
[200.37358093 17.90120697]
[213.37776184 10.11231804]
[228.26225281 7.24390078]
[243.22966003 9.64233017]
[256.47259521 17.01798439]
[266.39193726 28.48021507]
[271.78982544 42.64490509]
[272.01449585 57.80159760]
[267.03878784 72.12004852]
[257.46353149 83.87123871]
[244.44500732 91.63614655]
[229.55525208 94.47712708]
[214.59228516 92.05111694]
[201.36296082 84.65107727]
[191.46478271 73.17057800]
[177.44805908 78.51209259]
[163.43135071 83.85360718]
[149.41464233 89.19512177]
[135.39791870 94.53662872]
[121.38121033 99.87814331]
[136.24288940 101.91049957]
[151.19529724 100.71646118]
[164.88452148 106.84875488]
[173.94784546 118.80099487]
[176.15888977 133.63714600]
[170.97451782 147.71272278]
[159.66824341 157.57012939]
[145.01744080 160.78787231]
[130.62103271 156.57554626]
[120.01548767 145.96789551]
[115.80596161 131.56924438]
[108.61457825 118.40550232]
[108.61457825 133.40550232]
[108.61457825 148.40550232]
[108.61457825 163.40550232]
[108.61457825 178.40550232]
[108.61457825 193.40550232]
[108.61457825 208.40550232]
[108.61457825 223.40550232]
[108.61457825 238.40550232]
[108.61457825 253.40550232]
[108.61457825 268.40551758]
[123.15446472 272.46682739]
[136.05883789 280.30133057]
[146.37013245 291.32766724]
[153.32315063 304.72760010]
[156.40194702 319.50674438]
[155.37805176 334.56842041]
[150.32745361 348.79495239]
[141.62493896 361.13061523]
[129.91627502 370.66003418]
[116.07033539 376.67605591]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[30 50]
[31 49]
[32 48]
[61 90]
[62 89]
[91 118]
[92 117]
[93 116]
[94 115]
[95 114]
[96 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
