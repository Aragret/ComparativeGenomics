%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCUAAAUGGGGGGGGGGCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACxxxxxxxxxxUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCCCCCCCCCCCUCUACAU\
) } def
/len { sequence length } bind def

/coor [
[99.12644196 427.00393677]
[87.24216461 417.72885132]
[77.92345428 405.87872314]
[71.71208954 392.14254761]
[68.96919250 377.31893921]
[69.85421753 362.26968384]
[74.31572723 347.86972046]
[82.09432220 334.95629883]
[92.73777771 324.28012085]
[105.62728119 316.46194458]
[120.01347351 311.95626831]
[119.07784271 296.98550415]
[118.14221191 282.01470947]
[117.20658875 267.04391479]
[116.27095795 252.07312012]
[115.33532715 237.10232544]
[114.39970398 222.13153076]
[112.53208923 207.24824524]
[109.73976135 192.51045227]
[106.94744110 177.77264404]
[104.15511322 163.03483582]
[101.84553528 161.33978271]
[100.09114075 158.59823608]
[99.30522156 155.02552795]
[99.81222534 150.98648071]
[101.79717255 146.95889282]
[100.23959351 132.03997803]
[98.68200684 117.12106323]
[93.86847687 115.94655609]
[89.61434174 113.45592499]
[86.26842499 109.87007141]
[84.10026550 105.49897003]
[83.27845001 100.71490479]
[83.85759735 95.92077637]
[85.77491760 91.51615906]
[88.85672760 87.86400604]
[92.83404541 85.26074982]
[88.52645874 70.89257050]
[84.21887970 56.52438354]
[79.91129303 42.15619659]
[68.53686523 31.15924263]
[72.29334259 16.74611855]
[67.98576355 2.37793422]
[63.67817688 -11.99024963]
[55.68825912 -24.68517876]
[44.59694290 -34.78382874]
[33.50562668 -44.88247681]
[22.41431236 -54.98112869]
[11.32299805 -65.07978058]
[0.23168240 -75.17842865]
[-10.85963345 -85.27707672]
[-21.95094872 -95.37572479]
[-37.72420883 -94.38590240]
[-49.52207565 -104.90188599]
[-50.34507751 -120.68473816]
[-39.70494461 -132.37075806]
[-23.91428185 -133.02685547]
[-12.34140491 -122.26376343]
[-11.85229874 -106.46704102]
[-0.76098341 -96.36839294]
[10.33033180 -86.26974487]
[21.42164803 -76.17109680]
[32.51296234 -66.07244110]
[43.60427856 -55.97379303]
[54.69559479 -45.87514496]
[65.78691101 -35.77649307]
[61.60865784 -50.18281937]
[60.67747498 -65.15389252]
[63.03831863 -79.96693420]
[68.57720947 -93.90682983]
[77.02674866 -106.30059052]
[87.97901154 -116.54988098]
[100.90525818 -124.15988922]
[115.18144226 -128.76321411]
[130.11833191 -130.13764954]
[144.99484253 -128.21681213]
[159.09275818 -123.09344482]
[171.73146057 -115.01489258]
[182.30081177 -104.37117004]
[190.29052734 -91.67611694]
[195.31491089 -77.54261780]
[197.13136292 -62.65301132]
[195.65222168 -47.72611618]
[190.94888306 -33.48257065]
[183.24842834 -20.61001015]
[172.92257690 -9.72989082]
[160.46986389 -1.36747360]
[146.49147034 4.07352543]
[131.66223145 6.33042955]
[116.69806671 5.29428148]
[102.32139587 1.01510370]
[89.22629547 -6.30051661]
[78.04635620 -16.29783440]
[82.35394287 -1.92965043]
[86.66152954 12.43853378]
[97.72784424 22.40778160]
[94.27947998 37.84861374]
[98.58705902 52.21679688]
[102.89464569 66.58498383]
[107.20223236 80.95316315]
[119.97959137 88.81059265]
[134.74563599 86.17173004]
[149.51170349 83.53285980]
[164.27775574 80.89399719]
[170.11006165 66.61157227]
[182.75129700 57.76832962]
[198.16766357 57.18611526]
[211.43988037 65.05071259]
[218.33280945 78.85256195]
[216.64695740 94.18753815]
[206.92027283 106.16230774]
[192.25650024 110.95576477]
[177.33479309 107.03833008]
[166.91662598 95.66005707]
[152.15055847 98.29891968]
[137.38450623 100.93778229]
[122.61845398 103.57664490]
[113.60092163 115.56347656]
[115.15850067 130.48239136]
[116.71608734 145.40130615]
[118.89292145 160.24250793]
[121.68524170 174.98031616]
[124.47756958 189.71812439]
[127.26989746 204.45593262]
[136.92201233 192.97390747]
[151.84826660 191.48831177]
[163.57420349 200.84255981]
[165.44239807 215.72576904]
[156.39216614 227.68792725]
[141.56179810 229.93746948]
[129.37049866 221.19590759]
[130.30612183 236.16670227]
[131.24174500 251.13748169]
[132.17738342 266.10827637]
[133.11300659 281.07907104]
[134.04862976 296.04986572]
[134.98426819 311.02066040]
[149.81950378 313.70007324]
[163.58213806 319.85256958]
[175.47203064 329.12048340]
[184.79791260 340.96493530]
[191.01760864 354.69732666]
[193.76950073 369.51928711]
[192.89358521 384.56909180]
[188.44081116 398.97174072]
[180.67004395 411.88989258]
[170.03306580 422.57250977]
[157.14830017 430.39849854]
[142.76484680 434.91287231]
[127.71894836 435.85321045]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 124]
[19 123]
[20 122]
[21 121]
[26 120]
[27 119]
[28 118]
[37 100]
[38 99]
[39 98]
[40 97]
[42 95]
[43 94]
[44 93]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[101 117]
[102 116]
[103 115]
[104 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
