%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUACUAUGGGGGGGGGGGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCxxxxxxxxxxAACUCAUCACUAGACAUCGUACUACACGACACGUACUACGUUGUAGCCCACCCCCCCCCCCUUCCACUAUG\
) } def
/len { sequence length } bind def

/coor [
[32.25040054 265.83526611]
[20.71918297 260.64212036]
[9.58308411 254.64839172]
[-1.10239136 247.88389587]
[-11.28399086 240.38238525]
[-20.91096878 232.18124390]
[-29.93534851 223.32131958]
[-38.31215286 213.84678650]
[-50.28241348 222.88630676]
[-62.25267029 231.92582703]
[-74.22293091 240.96534729]
[-86.19319153 250.00486755]
[-98.16344452 259.04437256]
[-110.13370514 268.08389282]
[-122.01052856 277.24584961]
[-133.79266357 286.52923584]
[-145.57479858 295.81262207]
[-157.35693359 305.09597778]
[-169.13908386 314.37936401]
[-180.92121887 323.66275024]
[-189.62043762 338.21472168]
[-206.01190186 333.88388062]
[-206.38789368 316.93408203]
[-190.20460510 311.88061523]
[-178.42245483 302.59722900]
[-166.64031982 293.31384277]
[-154.85818481 284.03045654]
[-143.07604980 274.74707031]
[-131.29391479 265.46371460]
[-127.96590424 258.81265259]
[-119.17322540 256.11364746]
[-107.20296478 247.07412720]
[-95.23270416 238.03460693]
[-83.26245117 228.99508667]
[-71.29219055 219.95556641]
[-59.32193375 210.91604614]
[-47.35167313 201.87652588]
[-60.41046906 179.74850464]
[-70.16931152 155.97988892]
[-76.42743683 131.05966187]
[-79.05609894 105.50048828]
[-78.00122833 79.82814789]
[-73.28453064 54.57078171]
[-65.00302887 30.24798775]
[-53.32708740 7.36012697]
[-38.49691391 -13.62195015]
[-49.68520737 -23.61304665]
[-60.87350464 -33.60414505]
[-72.16378784 -43.47985077]
[-83.55486298 -53.23912430]
[-94.94593048 -62.99839783]
[-110.00802612 -59.26839447]
[-124.37326813 -65.13521576]
[-132.51791382 -78.34294891]
[-131.31021118 -93.81295013]
[-121.21450806 -105.59669495]
[-106.11283875 -109.16308594]
[-91.81208801 -103.14077759]
[-83.81119537 -89.84546661]
[-85.18666077 -74.38947296]
[-73.79558563 -64.63019562]
[-62.40451050 -54.87092590]
[-55.23451996 -52.89521408]
[-50.88240814 -44.79244232]
[-39.69411087 -34.80134201]
[-28.50581551 -24.81024742]
[-20.36374092 -32.67973709]
[-11.74074745 -40.01909637]
[-2.67128921 -46.79900742]
[6.80839586 -52.99237442]
[16.66043091 -58.57445908]
[26.84545326 -63.52294922]
[37.32276917 -67.81807709]
[48.05051041 -71.44268036]
[58.98582077 -74.38227844]
[70.08500671 -76.62512970]
[81.30371857 -78.16226196]
[92.59712982 -78.98754120]
[103.92012024 -79.09767151]
[115.22744751 -78.49220276]
[126.47393036 -77.17356873]
[137.61463928 -75.14702606]
[148.60505676 -72.42067719]
[159.40127563 -69.00541687]
[169.96014404 -64.91488647]
[180.23948669 -60.16543579]
[190.19824219 -54.77603531]
[199.79658508 -48.76821899]
[208.99620056 -42.16599655]
[217.76031494 -34.99574280]
[226.05390930 -27.28610611]
[233.84385681 -19.06789398]
[241.09902954 -10.37394238]
[247.79042053 -1.23898673]
[253.89132690 8.30047321]
[259.37734985 18.20632362]
[264.22656250 28.43898201]
[268.41961670 38.95756531]
[271.93972778 49.72004700]
[274.77285767 60.68342590]
[276.90765381 71.80389404]
[278.33563232 83.03701782]
[279.05105591 94.33792114]
[294.05026245 94.49192047]
[309.04946899 94.64591980]
[324.04870605 94.79991150]
[339.04791260 94.95391083]
[342.86639404 92.60470581]
[346.83428955 91.72187042]
[350.46044922 92.16658783]
[353.35260010 93.65139771]
[355.25817871 95.78676605]
[370.19418335 97.17079163]
[385.13018799 98.55481720]
[400.06622314 99.93884277]
[416.39566040 95.37974548]
[425.29702759 109.80895233]
[413.89587402 122.35685730]
[398.68218994 114.87485504]
[383.74618530 113.49082947]
[368.81015015 112.10680389]
[353.87414551 110.72277832]
[338.89389038 109.95311737]
[323.89468384 109.79912567]
[308.89547729 109.64512634]
[293.89627075 109.49112701]
[278.89706421 109.33713531]
[277.79251099 121.93544769]
[275.80187988 134.42443848]
[272.93505859 146.74186707]
[269.20639038 158.82635498]
[264.63439941 170.61764526]
[259.24191284 182.05699158]
[253.05580139 193.08738708]
[246.10688782 203.65385437]
[238.42979431 213.70372009]
[230.06278992 223.18690491]
[221.04757690 232.05615234]
[211.42907715 240.26725769]
[201.25523376 247.77929688]
[190.57676697 254.55482483]
[179.44686890 260.56008911]
[167.92102051 265.76513672]
[156.05667114 270.14404297]
[143.91294861 273.67495728]
[131.55036926 276.34033203]
[119.03054047 278.12686157]
[106.41587067 279.02563477]
[93.76922607 279.03216553]
[81.15364075 278.14645386]
[68.63197327 276.37286377]
[56.26664352 273.72027588]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 37]
[9 36]
[10 35]
[11 34]
[12 33]
[13 32]
[14 31]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[46 66]
[47 65]
[48 64]
[49 62]
[50 61]
[51 60]
[103 127]
[104 126]
[105 125]
[106 124]
[107 123]
[112 122]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
