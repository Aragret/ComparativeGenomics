%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUAAUCUUGGGGGGGGGGAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCAGUAAxxxxxxxxxxUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGCCCCCCCCCCUAAUAAACUU\
) } def
/len { sequence length } bind def

/coor [
[86.08874512 375.86260986]
[72.24280548 369.84658813]
[60.53414154 360.31716919]
[51.83161926 347.98150635]
[46.78101730 333.75500488]
[45.75712585 318.69329834]
[48.83592224 303.91415405]
[55.78894424 290.51422119]
[66.10022736 279.48788452]
[79.00460815 271.65338135]
[93.54449463 267.59207153]
[93.54449463 252.59207153]
[93.54449463 237.59207153]
[93.54449463 222.59207153]
[93.54449463 207.59207153]
[93.54449463 192.59207153]
[93.54449463 177.59207153]
[93.54449463 162.59207153]
[93.54449463 147.59207153]
[93.54449463 132.59207153]
[74.68494415 108.68965912]
[84.65400696 86.70416260]
[77.74700928 73.38900757]
[70.84001160 60.07385635]
[55.10928726 50.55942917]
[56.50811768 33.09394073]
[49.32560730 19.92535973]
[42.14310074 6.75677776]
[34.96059036 -6.41180515]
[19.03533936 -15.59691334]
[20.07051849 -33.08772278]
[12.61560726 -46.10403061]
[5.16069698 -59.12033844]
[-2.29421329 -72.13665009]
[-9.74912357 -85.15296173]
[-17.20403481 -98.16926575]
[-24.65894508 -111.18557739]
[-38.48165894 -105.31455231]
[-52.90174484 -101.11962128]
[-67.71677399 -98.65969086]
[-82.71876526 -97.96928406]
[-97.69711304 -99.05809784]
[-112.44154358 -101.91084290]
[-126.74506378 -106.48747253]
[-140.40689087 -112.72374725]
[-153.23521423 -120.53210449]
[-165.04994202 -129.80293274]
[-175.68524170 -140.40608215]
[-184.99179077 -152.19270325]
[-192.83894348 -164.99734497]
[-199.11653137 -178.64022827]
[-203.73643494 -192.92982483]
[-206.63378906 -207.66555786]
[-207.76794434 -222.64053345]
[-207.12294006 -237.64454651]
[-204.70785522 -252.46694946]
[-200.55659485 -266.89968872]
[-194.72743225 -280.74008179]
[-187.30220032 -293.79391479]
[-178.38513184 -305.87789917]
[-168.10142517 -316.82235718]
[-156.59541321 -326.47369385]
[-144.02865601 -334.69641113]
[-130.57756042 -341.37506104]
[-116.43096161 -346.41589355]
[-101.78745270 -349.74813843]
[-86.85260010 -351.32504272]
[-71.83607483 -351.12442017]
[-56.94867706 -349.14910889]
[-42.39941025 -345.42687988]
[-28.39251709 -340.00991821]
[-15.12463856 -332.97430420]
[-2.78203130 -324.41882324]
[8.46203327 -314.46356201]
[18.44970512 -303.24826050]
[27.04077339 -290.93038940]
[34.11463547 -277.68286133]
[39.57197952 -263.69168091]
[43.33619690 -249.15319824]
[45.35444641 -234.27156067]
[45.59838867 -219.25567627]
[44.06460571 -204.31634521]
[40.77462387 -189.66326904]
[35.77463150 -175.50218201]
[29.13482094 -162.03187561]
[20.94840622 -149.44143677]
[11.33030796 -137.90763855]
[0.41555268 -127.59238434]
[-11.64263439 -118.64048767]
[-4.18772459 -105.62417603]
[3.26718569 -92.60787201]
[10.72209644 -79.59156036]
[18.17700577 -66.57524872]
[25.63191605 -53.55894089]
[33.08682632 -40.54263306]
[44.70963669 -37.04725647]
[51.01441193 -26.20895767]
[48.12917328 -13.59431362]
[55.31168365 -0.42573136]
[62.49419022 12.74285126]
[69.67669678 25.91143417]
[81.22427368 29.64784813]
[87.30220795 40.61496735]
[84.15516663 53.16685486]
[91.06216431 66.48200989]
[97.96916199 79.79716492]
[117.34770203 79.61816406]
[133.16484070 97.99757385]
[148.02789307 100.01991272]
[162.89093018 102.04224396]
[177.75398254 104.06457520]
[192.61703491 106.08691406]
[207.48007202 108.10924530]
[219.90675354 98.34434509]
[235.58839417 100.30943298]
[245.22137451 112.83865356]
[243.09059143 128.49864197]
[230.46023560 137.99861145]
[214.82363892 135.70239258]
[205.45774841 122.97229767]
[190.59469604 120.94995880]
[175.73164368 118.92762756]
[160.86860657 116.90528870]
[146.00555420 114.88295746]
[131.14250183 112.86061859]
[125.49300385 117.79347992]
[138.36735535 125.49095917]
[135.02482605 140.11380005]
[120.08476257 141.45339966]
[114.19400024 127.65920258]
[108.54449463 132.59207153]
[108.54449463 147.59207153]
[108.54449463 162.59207153]
[108.54449463 177.59207153]
[108.54449463 192.59207153]
[108.54449463 207.59207153]
[108.54449463 222.59207153]
[108.54449463 237.59207153]
[108.54449463 252.59207153]
[108.54449463 267.59207153]
[123.08438110 271.65338135]
[135.98876953 279.48788452]
[146.30004883 290.51422119]
[153.25306702 303.91415405]
[156.33186340 318.69329834]
[155.30798340 333.75500488]
[150.25737000 347.98150635]
[141.55485535 360.31716919]
[129.84619141 369.84658813]
[116.00025177 375.86260986]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 106]
[23 105]
[24 104]
[26 101]
[27 100]
[28 99]
[29 98]
[31 95]
[32 94]
[33 93]
[34 92]
[35 91]
[36 90]
[37 89]
[108 125]
[109 124]
[110 123]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
