%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCCUUCGGGGGGGGGGGACCUUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUAxxxxxxxxxxACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAACCCCCCCCCCAACCCCCUCC\
) } def
/len { sequence length } bind def

/coor [
[86.82395172 370.57391357]
[72.33426666 366.36544800]
[59.42803192 358.54931641]
[48.98523331 347.65847778]
[41.71786880 334.43548584]
[38.12144089 319.78186035]
[38.44116211 304.69677734]
[42.65523529 290.20870972]
[50.47632980 277.30551147]
[61.37120056 266.86691284]
[74.59700775 259.60464478]
[89.25199890 256.01388550]
[89.56405640 241.01712036]
[89.87611389 226.02037048]
[90.18817139 211.02362061]
[90.50022888 196.02687073]
[90.81227875 181.03010559]
[91.12433624 166.03335571]
[91.43639374 151.03660583]
[91.74845123 136.03985596]
[92.06050873 121.04309845]
[79.10324097 113.26250458]
[73.07497406 97.86928558]
[59.17242050 103.50123596]
[45.26986694 109.13319397]
[31.36730957 114.76515198]
[21.71511841 128.02287292]
[5.43826485 126.02386475]
[-0.71902108 110.82452393]
[9.57734966 98.06063843]
[25.73535347 100.86259460]
[39.63790894 95.23063660]
[53.54046631 89.59868622]
[67.44302368 83.96672821]
[76.70796967 72.17008209]
[78.88480377 57.32888031]
[81.06164551 42.48767471]
[81.37370300 27.49092102]
[79.81611633 12.57200909]
[77.04206085 9.04127312]
[75.71170807 5.19403982]
[75.74271393 1.53604555]
[76.89299774 -1.50875747]
[78.80265045 -3.64430737]
[78.49059296 -18.64106178]
[78.17853546 -33.63781357]
[77.86647797 -48.63456726]
[75.39551544 -52.38367844]
[74.38956451 -56.32818222]
[74.72454071 -59.97093964]
[76.12393951 -62.90958786]
[78.20449829 -64.87900543]
[79.14012909 -79.84980011]
[80.07575226 -94.82058716]
[81.01138306 -109.79138184]
[69.20661163 -122.65934753]
[70.30655670 -139.74952698]
[83.14829254 -150.56376648]
[83.77227020 -165.55078125]
[84.39624786 -180.53779602]
[85.02022552 -195.52481079]
[70.39376831 -199.06784058]
[56.73970032 -205.39656067]
[44.58283615 -214.26768494]
[34.39045715 -225.34024048]
[26.55433083 -238.18864441]
[21.37565804 -252.31901550]
[19.05349350 -267.18823242]
[19.67709541 -282.22479248]
[23.22249222 -296.85064697]
[29.55340958 -310.50369263]
[38.42650223 -322.65914917]
[49.50071716 -332.84973145]
[62.35038376 -340.68377686]
[76.48159790 -345.86013794]
[91.35119629 -348.17990112]
[106.38763428 -347.55386353]
[121.01293945 -344.00610352]
[134.66496277 -337.67297363]
[146.81895447 -328.79791260]
[157.00775146 -317.72204590]
[164.83970642 -304.87112427]
[170.01380920 -290.73907471]
[172.33116150 -275.86911011]
[171.70269775 -260.83276367]
[168.15255737 -246.20803833]
[161.81723022 -232.55703735]
[152.94020081 -220.40447998]
[141.86268616 -210.21748352]
[129.01048279 -202.38758850]
[114.87759399 -197.21578979]
[100.00724030 -194.90083313]
[99.38326263 -179.91381836]
[98.75928497 -164.92680359]
[98.13530731 -149.93978882]
[108.12386322 -141.74067688]
[111.59865570 -129.09155273]
[107.06788635 -116.57357025]
[95.98217773 -108.85575104]
[95.04654694 -93.88496399]
[94.11091614 -78.91416931]
[93.17529297 -63.94337845]
[92.86323547 -48.94662476]
[93.17529297 -33.94987106]
[93.48735046 -18.95311737]
[93.79940033 -3.95636344]
[94.73503113 11.01442814]
[96.29261017 25.93334007]
[103.71653748 12.89933300]
[115.99175262 4.27848101]
[130.77172852 1.71874559]
[145.23112488 5.70944595]
[156.60589600 15.48771954]
[162.72163391 29.18435287]
[162.40925598 44.18109894]
[155.72846985 57.61118317]
[143.95639038 66.90731049]
[129.34335327 70.29243469]
[114.68278503 67.11946106]
[102.77719879 57.99492264]
[95.90284729 44.66451263]
[93.72601318 59.50571823]
[91.54917908 74.34692383]
[101.96434021 73.62863159]
[111.64969635 76.89066315]
[119.17665863 83.47428131]
[123.50378418 92.24494934]
[124.11938477 101.78518677]
[121.09709167 110.62284851]
[115.05920410 117.45827484]
[107.05725861 121.35515594]
[106.74520111 136.35191345]
[106.43315125 151.34866333]
[106.12109375 166.34541321]
[105.80903625 181.34216309]
[105.49697876 196.33892822]
[105.18492126 211.33567810]
[104.87286377 226.33242798]
[104.56081390 241.32917786]
[104.24875641 256.32592773]
[118.74169159 260.52322388]
[131.65394592 268.32937622]
[142.10516357 279.21212769]
[149.38273621 292.42953491]
[152.99047852 307.08035278]
[152.68240356 322.16567993]
[148.47952271 336.65701294]
[140.66839600 349.56625366]
[129.78158569 360.01324463]
[116.56138611 367.28573608]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[23 34]
[24 33]
[25 32]
[26 31]
[35 123]
[36 122]
[37 121]
[38 108]
[39 107]
[44 106]
[45 105]
[46 104]
[47 103]
[52 102]
[53 101]
[54 100]
[55 99]
[58 95]
[59 94]
[60 93]
[61 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
