%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACACUUCUAGUAAGGGGGGGGGGGCCUCUACCUGCACGACAACACAUAAUGACCCACCAAUCACAUGCCUAUCxxxxxxxxxxUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCACCCCCCCCCCUCUCACUUCUAGGAA\
) } def
/len { sequence length } bind def

/coor [
[83.46612549 610.77386475]
[68.73531342 607.72137451]
[54.81631088 602.01379395]
[42.18320084 593.84564209]
[31.26625061 583.49505615]
[22.43729591 571.31451416]
[15.99704266 557.71905518]
[12.16484642 543.17156982]
[11.07122898 528.16760254]
[12.75343895 513.21820068]
[17.15418053 498.83251953]
[24.12356758 485.50051880]
[33.42422104 473.67626953]
[44.73937225 463.76254272]
[57.68362427 456.09698486]
[71.81610107 450.94064331]
[86.65545654 448.46917725]
[86.94813538 433.47204590]
[87.24081421 418.47488403]
[87.53348541 403.47775269]
[87.82616425 388.48062134]
[88.11884308 373.48345947]
[88.41151428 358.48632812]
[88.70419312 343.48916626]
[88.99687195 328.49203491]
[89.28954315 313.49487305]
[75.91225433 308.78546143]
[64.63075256 300.15594482]
[56.55972290 288.44229126]
[52.50179672 274.78594971]
[52.86775970 260.52264404]
[57.63500214 247.05184937]
[66.34842682 235.69932556]
[78.16387939 227.58676147]
[91.92990112 223.52084351]
[92.51514435 208.53227234]
[93.10038757 193.54368591]
[78.86143494 186.34226990]
[69.14350891 173.61328125]
[65.92594147 157.86602783]
[69.90033722 142.23262024]
[80.32264709 129.84504700]
[95.15188599 123.20771790]
[95.44456482 108.21057892]
[88.18077850 109.14811707]
[80.15098572 105.13426971]
[74.24361420 96.04273224]
[62.70085907 86.46334076]
[51.15810013 76.88394928]
[38.23338318 77.29271698]
[28.81046486 69.03430176]
[27.60169601 56.96649933]
[16.24804497 47.16371155]
[4.89439487 37.36092758]
[-10.18185997 41.03327560]
[-24.52454567 35.11153793]
[-32.61860657 21.87273979]
[-31.35171127 6.40746832]
[-21.21100616 -5.33756208]
[-6.09580040 -8.84614754]
[8.18180180 -2.76916647]
[16.13177109 10.55665874]
[14.69718075 26.00727654]
[26.05083275 35.81006241]
[37.40448380 45.61285019]
[54.77631378 47.94333649]
[60.73748779 65.34119415]
[72.28025055 74.92058563]
[83.82300568 84.49996948]
[78.28588867 70.55937195]
[72.74876404 56.61877441]
[61.87065506 46.29081726]
[55.76530075 32.58955383]
[55.35958862 17.59504128]
[60.71511078 3.58367682]
[71.01882172 -7.31740379]
[84.70645905 -13.45324993]
[99.70002747 -13.89234638]
[113.72328949 -8.56803131]
[124.64727783 1.71138191]
[130.81358337 15.38532352]
[131.28607178 30.37788010]
[125.99298859 44.41295624]
[115.73743439 55.36015701]
[111.02540588 69.60083008]
[106.31336975 83.84150696]
[117.27590942 73.60320282]
[128.23844910 63.36491013]
[139.20098877 53.12661362]
[150.16352844 42.88831329]
[161.12606812 32.65001678]
[161.38850403 15.18275642]
[173.93836975 3.52040339]
[190.70487976 4.49853706]
[201.46557617 -5.95170927]
[212.22625732 -16.40195656]
[222.98693848 -26.85220146]
[233.74761963 -37.30244827]
[235.41917419 -53.25818253]
[249.01313782 -61.77780533]
[264.10137939 -56.32578659]
[269.10949707 -41.08444977]
[260.19567871 -27.74564743]
[244.19787598 -26.54176331]
[233.43717957 -16.09151649]
[222.67649841 -5.64127064]
[211.91581726 4.80897617]
[201.15513611 15.25922298]
[202.76779175 28.07268333]
[196.60002136 39.64057541]
[184.71388245 45.61763382]
[171.36436462 43.61255646]
[160.40182495 53.85085297]
[149.43928528 64.08914948]
[138.47674561 74.32744598]
[127.51420593 84.56574249]
[116.55166626 94.80404663]
[110.44170380 108.50325012]
[110.14903259 123.50039673]
[123.01745605 129.40835571]
[132.62611389 139.74989319]
[137.54360962 152.93583679]
[137.05603027 166.95704651]
[131.27035522 179.69056702]
[121.09319305 189.22105408]
[108.08896637 194.12892151]
[107.50372314 209.11750793]
[106.91847992 224.10607910]
[121.67755127 230.04418945]
[133.49719238 240.65245056]
[140.96520996 254.63880920]
[143.19772339 270.30905151]
[139.94383240 285.77209473]
[131.61360168 299.16815186]
[119.22650146 308.89248657]
[104.28668976 313.78756714]
[103.99401093 328.78469849]
[103.70133972 343.78186035]
[103.40866089 358.77899170]
[103.11598206 373.77615356]
[102.82331085 388.77328491]
[102.53063202 403.77041626]
[102.23795319 418.76757812]
[101.94528198 433.76470947]
[101.65260315 448.76187134]
[116.38423157 451.81042480]
[130.30477905 457.51422119]
[142.94007874 465.67898560]
[153.85981750 476.02664185]
[162.69206238 488.20474243]
[169.13598633 501.79849243]
[172.97209167 516.34497070]
[174.06976318 531.34863281]
[172.39157104 546.29846191]
[167.99472046 560.68536377]
[161.02891541 574.01922607]
[151.73146057 585.84594727]
[140.41897583 595.76275635]
[127.47679138 603.43182373]
[113.34570312 608.59191895]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 145]
[18 144]
[19 143]
[20 142]
[21 141]
[22 140]
[23 139]
[24 138]
[25 137]
[26 136]
[35 128]
[36 127]
[37 126]
[43 119]
[44 118]
[47 69]
[48 68]
[49 67]
[52 65]
[53 64]
[54 63]
[86 117]
[87 116]
[88 115]
[89 114]
[90 113]
[91 112]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
