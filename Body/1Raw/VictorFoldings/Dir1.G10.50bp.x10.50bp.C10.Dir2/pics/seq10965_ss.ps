%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACUUCAAGGGGGGGGGGGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCAACCACACCUAGxxxxxxxxxxCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCUCCCCCCCCCCCCCCACAUCAAG\
) } def
/len { sequence length } bind def

/coor [
[162.47035217 612.61712646]
[150.37541199 603.58300781]
[141.16728210 591.62005615]
[135.52925110 577.61590576]
[133.87969971 562.60986328]
[136.34104919 547.71545410]
[142.73063660 534.03784180]
[152.57431030 522.59216309]
[165.14161682 514.22760010]
[179.49996948 509.56497192]
[178.87599182 494.57797241]
[178.25201416 479.59094238]
[177.62803650 464.60394287]
[177.00405884 449.61691284]
[176.38008118 434.62991333]
[175.75610352 419.64288330]
[175.13212585 404.65585327]
[174.50814819 389.66885376]
[173.88417053 374.68182373]
[173.26019287 359.69482422]
[150.57627869 351.20379639]
[134.71139526 332.82681274]
[129.59794617 309.03573608]
[136.54328918 285.65438843]
[153.89610291 268.43304443]
[148.40907288 254.47264099]
[142.92204285 240.51225281]
[137.43501282 226.55186462]
[131.94798279 212.59147644]
[120.67755890 210.38507080]
[111.79914856 202.91235352]
[107.61562347 191.95918274]
[109.28565216 180.23229980]
[116.50566101 170.69058228]
[111.60411072 156.51402283]
[106.70256042 142.33746338]
[101.80101013 128.16090393]
[96.89945984 113.98435211]
[86.46238708 104.68063354]
[88.92398071 90.91719818]
[84.02243042 76.74064636]
[68.91053009 74.89893341]
[56.14885712 66.71195221]
[48.23968506 53.84862900]
[46.70612717 38.88837433]
[51.79907227 24.80393600]
[62.45799255 14.37067795]
[57.55643845 0.19411954]
[52.65488815 -13.98243809]
[40.83285522 -24.49671745]
[43.98651505 -39.05362701]
[29.10796738 -36.83024216]
[14.07421684 -37.37887573]
[-0.60269189 -40.68084335]
[-14.42286873 -46.62368774]
[-26.91560364 -55.00498962]
[-37.65539932 -65.53928375]
[-46.27645874 -77.86779022]
[-52.48515701 -91.57058716]
[-56.07002640 -106.18096924]
[-56.90896988 -121.20131683]
[-54.97340775 -136.12004089]
[-50.32926559 -150.42901611]
[-43.13472366 -163.64086914]
[-33.63482666 -175.30563354]
[-22.15313530 -185.02598572]
[-9.08071232 -192.47087097]
[5.13720179 -197.38673401]
[20.01634789 -199.60610962]
[35.04994965 -199.05342102]
[49.72596741 -195.74749756]
[63.54454422 -189.80093384]
[76.03501892 -181.41625977]
[86.77197266 -170.87905884]
[95.38970947 -158.54823303]
[101.59471893 -144.84376526]
[105.17564392 -130.23242188]
[106.01053619 -115.21184540]
[104.07095337 -100.29364777]
[99.42295837 -85.98592377]
[92.22485352 -72.77600861]
[82.72181702 -61.11381149]
[71.23750305 -51.39654541]
[58.16307449 -43.95518112]
[69.63451385 -34.45490265]
[66.83144379 -18.88398933]
[71.73300171 -4.70743132]
[76.63455200 9.46912670]
[91.46141815 11.09066296]
[104.16616821 19.02153969]
[112.20050812 31.73414612]
[113.92560577 46.73561859]
[108.94607544 61.05662537]
[98.19898987 71.83908844]
[103.10054016 86.01564789]
[113.53761292 95.31936646]
[111.07601929 109.08280182]
[115.97756958 123.25935364]
[120.87911987 137.43591309]
[125.78067017 151.61247253]
[130.68222046 165.78903198]
[147.99473572 173.35711670]
[154.23507690 190.85443115]
[145.90837097 207.10444641]
[151.39540100 221.06483459]
[156.88243103 235.02522278]
[162.36946106 248.98561096]
[167.85649109 262.94601440]
[175.22703552 261.88421631]
[182.66932678 261.94213867]
[190.01432800 263.11724854]
[197.09539795 265.38162231]
[203.75205994 268.68264771]
[209.83363342 272.94424438]
[215.20271301 278.06857300]
[219.73817444 283.93835449]
[223.33798218 290.41952515]
[225.92143250 297.36422729]
[227.43099976 304.61428833]
[227.83361816 312.00476074]
[227.12135315 319.36773682]
[225.31163025 326.53604126]
[222.44673157 333.34716797]
[218.59291077 339.64688110]
[213.83872986 345.29269409]
[208.29313660 350.15722656]
[202.08290100 354.13082886]
[195.34979248 357.12432861]
[188.24722290 359.07083130]
[188.87120056 374.05786133]
[189.49517822 389.04486084]
[190.11914062 404.03189087]
[190.74311829 419.01892090]
[191.36709595 434.00592041]
[191.99107361 448.99295044]
[192.61505127 463.97994995]
[193.23902893 478.96697998]
[193.86300659 493.95397949]
[194.48698425 508.94100952]
[209.18324280 512.39398193]
[222.40234375 519.68487549]
[233.16339111 530.27276611]
[240.66780090 543.37182617]
[244.35873413 558.01013184]
[243.96226501 573.10137939]
[239.50784302 587.52569580]
[231.32600403 600.21264648]
[220.02388000 610.22088623]
[206.44018555 616.80767822]
[191.58291626 619.48425293]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[25 108]
[26 107]
[27 106]
[28 105]
[29 104]
[34 101]
[35 100]
[36 99]
[37 98]
[38 97]
[40 95]
[41 94]
[47 88]
[48 87]
[49 86]
[51 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
