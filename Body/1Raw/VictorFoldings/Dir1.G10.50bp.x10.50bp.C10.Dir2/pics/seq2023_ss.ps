%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAUGAAAAGGGGGGGGGGAUUAUAACCAAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUxxxxxxxxxxGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUCUUCGAAUUUGCAAUUCCCCCCCCCCCAAUAUGAAAA\
) } def
/len { sequence length } bind def

/coor [
[72.72466278 495.41964722]
[59.50446320 488.14715576]
[48.61766052 477.70016479]
[40.80653000 464.79092407]
[36.60364914 450.29959106]
[36.29557800 435.21426392]
[39.90331650 420.56344604]
[47.18089294 407.34603882]
[57.63209915 396.46328735]
[70.54435730 388.65713501]
[85.03730011 384.45983887]
[84.72524261 369.46310425]
[84.41318512 354.46633911]
[84.10112762 339.46960449]
[83.78907013 324.47283936]
[83.47701263 309.47607422]
[83.16496277 294.47933960]
[82.85290527 279.48257446]
[82.54084778 264.48580933]
[82.22879028 249.48907471]
[81.91673279 234.49230957]
[79.10394287 230.55992126]
[78.77564240 224.80461121]
[81.91673279 218.86819458]
[82.22879028 203.87144470]
[72.07182312 195.88189697]
[68.33463287 183.30781555]
[72.60400391 170.69827271]
[83.52675629 162.75151062]
[84.15073395 147.76449585]
[84.77471161 132.77748108]
[74.33489990 122.00666809]
[59.33571243 122.16270447]
[50.45618820 134.88801575]
[35.78176880 139.93193054]
[20.95507240 135.35496521]
[11.67726135 122.91704559]
[11.51584625 107.40081024]
[20.53289413 94.77256775]
[35.26116562 89.88813782]
[50.03733826 94.62567902]
[59.17967606 107.16351318]
[74.17886353 107.00747681]
[79.08041382 92.83091736]
[67.38079071 83.44375610]
[55.68116760 74.05659485]
[43.98154449 64.66943359]
[30.46316147 71.68180084]
[15.26093578 72.58301544]
[1.00873971 67.21693420]
[-9.82414532 56.51326752]
[-15.36085796 42.32648849]
[-14.64212799 27.11454201]
[-7.79248095 13.51299095]
[4.00134134 3.87838411]
[18.69598770 -0.12002305]
[33.74552155 2.21051741]
[46.54251862 10.46622562]
[54.86982727 23.21674919]
[57.28468323 38.25298309]
[53.36870575 52.96981049]
[65.06832886 62.35697174]
[76.76795197 71.74413300]
[88.46757507 81.13129425]
[102.74303436 76.52573395]
[106.75077820 62.07104492]
[110.75851440 47.61635590]
[114.76625824 33.16166687]
[103.26607513 42.79213333]
[88.87458038 47.02117920]
[73.99259186 45.14330673]
[61.10276031 37.47178650]
[52.35540009 25.28639984]
[49.20976257 10.61994171]
[52.19061661 -4.08089209]
[60.80068588 -16.36367226]
[73.60362244 -24.17935753]
[88.46360016 -26.22411537]
[102.90164185 -22.15683174]
[114.50917053 -12.65602493]
[121.34977722 0.69336045]
[122.28250885 15.66294003]
[130.00659180 2.80453777]
[137.73068237 -10.05386448]
[145.45475769 -22.91226768]
[141.38688660 -38.18407059]
[149.38143921 -51.81721497]
[164.69538879 -55.72340012]
[178.24325562 -47.58515549]
[181.98731995 -32.23075485]
[173.70628357 -18.76969528]
[158.31315613 -15.18818188]
[150.58908081 -2.32977962]
[142.86499023 10.52862263]
[135.14091492 23.38702583]
[129.22094727 37.16940689]
[125.21320343 51.62409592]
[121.20546722 66.07878113]
[117.19772339 80.53347015]
[126.94537354 91.93449402]
[141.84727478 90.22180176]
[156.74917603 88.50911713]
[171.65107727 86.79642487]
[186.55297852 85.08373260]
[201.45489502 83.37104797]
[216.35679626 81.65835571]
[231.25869751 79.94566345]
[240.88740540 67.41316986]
[256.56838989 65.44274139]
[268.99838257 75.20341492]
[270.80288696 90.90435028]
[260.91134644 103.23045349]
[245.19221497 104.86887360]
[232.97138977 94.84756470]
[218.06947327 96.56025696]
[203.16757202 98.27294922]
[188.26567078 99.98563385]
[173.36376953 101.69832611]
[158.46186829 103.41101837]
[143.55996704 105.12370300]
[128.65806580 106.83639526]
[99.76172638 133.40145874]
[99.13774872 148.38847351]
[98.51377106 163.37548828]
[110.58369446 175.99508667]
[109.83952332 193.10444641]
[97.22554779 204.18350220]
[96.91349030 219.18025208]
[96.91349030 234.18025208]
[97.22554779 249.17701721]
[97.53759766 264.17376709]
[97.84965515 279.17053223]
[98.16171265 294.16726685]
[98.47377014 309.16403198]
[98.78582764 324.16076660]
[99.09788513 339.15753174]
[99.40993500 354.15429688]
[99.72199249 369.15103149]
[100.03404999 384.14779663]
[114.68904114 387.73855591]
[127.91484833 395.00082397]
[138.80972290 405.43942261]
[146.63081360 418.34262085]
[150.84489441 432.83068848]
[151.16461182 447.91580200]
[147.56817627 462.56939697]
[140.30081177 475.79238892]
[129.85801697 486.68322754]
[116.95178986 494.49935913]
[102.46209717 498.70782471]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[24 128]
[25 127]
[29 124]
[30 123]
[31 122]
[32 43]
[33 42]
[44 64]
[45 63]
[46 62]
[47 61]
[65 99]
[66 98]
[67 97]
[68 96]
[82 95]
[83 94]
[84 93]
[85 92]
[100 121]
[101 120]
[102 119]
[103 118]
[104 117]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
