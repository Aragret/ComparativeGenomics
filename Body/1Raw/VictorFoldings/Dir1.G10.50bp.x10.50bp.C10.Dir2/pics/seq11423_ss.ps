%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUACUAAACCCCCAGGGGGGGGGGUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACUAAACCxxxxxxxxxxACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCCCCCCCCCCCAUUACUAAACCCACA\
) } def
/len { sequence length } bind def

/coor [
[87.31209564 513.35412598]
[73.69801331 506.97393799]
[61.31983948 498.43984985]
[50.51525879 487.98468018]
[41.57902527 475.89361572]
[34.75492859 462.49655151]
[30.22913551 448.15893555]
[28.12511253 433.27191162]
[28.50025749 418.24163818]
[31.34433937 403.47814941]
[36.57976532 389.38415527]
[44.06371307 376.34420776]
[53.59201431 364.71401978]
[64.90472412 354.81088257]
[77.69322968 346.90493774]
[91.60865784 341.21188354]
[106.27136993 337.88702393]
[105.40454102 322.91207886]
[104.53771210 307.93716431]
[103.67088318 292.96221924]
[102.80406189 277.98727417]
[101.93723297 263.01235962]
[101.07040405 248.03741455]
[100.20357513 233.06248474]
[99.33674622 218.08755493]
[98.46991730 203.11262512]
[97.60309601 188.13769531]
[83.77401733 182.55001831]
[73.70095062 171.46656799]
[69.42147827 157.04966736]
[71.83575439 142.14356995]
[80.51779175 129.71339417]
[93.78947449 122.25526428]
[92.92264557 107.28032684]
[89.33510590 100.01557159]
[92.18624115 92.00897980]
[90.31198120 77.12653351]
[87.15560913 62.46237946]
[83.99923706 47.79822922]
[73.53128052 35.93516159]
[78.41721344 21.86473274]
[75.26084137 7.20058155]
[72.10446930 -7.46356964]
[57.19818115 -5.69242334]
[42.19153595 -5.32492256]
[27.21641541 -6.36429691]
[12.40442944 -8.80141163]
[-2.11425400 -12.61485004]
[-16.21203995 -17.77109718]
[-29.76503563 -24.22484016]
[-42.65413284 -31.91936111]
[-54.76605988 -40.78703690]
[-65.99436951 -50.74994278]
[-76.24039459 -61.72051620]
[-85.41408539 -73.60234833]
[-93.43482208 -86.29101562]
[-100.23210907 -99.67501068]
[-105.74622345 -113.63670349]
[-109.92869568 -128.05340576]
[-112.74277496 -142.79843140]
[-114.16373444 -157.74217224]
[-114.17906952 -172.75329590]
[-112.78866577 -187.69992065]
[-110.00472260 -202.45065308]
[-105.85172272 -216.87586975]
[-100.36615753 -230.84881592]
[-93.59623718 -244.24667358]
[-85.60145569 -256.95169067]
[-76.45206451 -268.85226440]
[-66.22848511 -279.84375000]
[-55.02055740 -289.82958984]
[-42.92678070 -298.72198486]
[-30.05343628 -306.44284058]
[-16.51366043 -312.92428589]
[-2.42644119 -318.10931396]
[12.08441734 -321.95242310]
[26.89139175 -324.41979980]
[41.86435699 -325.48977661]
[56.87171936 -325.15295410]
[71.78160095 -323.41229248]
[86.46296692 -320.28305054]
[100.78678894 -315.79278564]
[114.62718964 -309.98092651]
[127.86253357 -302.89852905]
[140.37651062 -294.60787964]
[152.05914307 -285.18182373]
[162.80776978 -274.70321655]
[172.52790833 -263.26409912]
[181.13415527 -250.96502686]
[188.55085754 -237.91409302]
[194.71286011 -224.22598267]
[199.56599426 -210.02099609]
[203.06761169 -195.42396545]
[205.18693542 -180.56318665]
[205.90534973 -165.56924438]
[205.21653748 -150.57391357]
[203.12655640 -135.70896912]
[199.65376282 -121.10506439]
[194.82867432 -106.89052582]
[188.69371033 -93.19028473]
[181.30278015 -80.12473297]
[172.72084045 -67.80870056]
[163.02328491 -56.35041809]
[152.29537964 -45.85058975]
[140.63137817 -36.40148544]
[128.13378906 -28.08615112]
[114.91245270 -20.97766113]
[101.08354950 -15.13848400]
[86.76862335 -10.61993980]
[89.92499542 4.04421186]
[93.08135986 18.70836258]
[103.32355499 29.52255440]
[98.66339111 44.64186096]
[101.81976318 59.30601120]
[104.97612762 73.97016144]
[111.99774170 60.71508789]
[125.00296021 53.24084091]
[139.99070740 53.84687042]
[152.35000610 62.34673309]
[158.27851868 76.12544250]
[155.95231628 90.94396973]
[146.08705139 102.24339294]
[131.71780396 106.54742432]
[117.26527405 102.53193665]
[107.17509460 91.43090820]
[107.89757538 106.41350555]
[108.76440430 121.38843536]
[122.80799103 127.26541901]
[132.86628723 138.61080933]
[136.98435974 153.13876343]
[134.39694214 167.95317078]
[125.67001343 180.12484741]
[112.57802582 187.27085876]
[113.44485474 202.24578857]
[114.31168365 217.22073364]
[115.17850494 232.19566345]
[116.04533386 247.17059326]
[116.91216278 262.14553833]
[117.77899170 277.12045288]
[118.64582062 292.09539795]
[119.51264954 307.07031250]
[120.37947083 322.04525757]
[121.24629974 337.02020264]
[136.19471741 338.63101196]
[150.67408752 342.68041992]
[164.28939819 349.05795288]
[176.66921997 357.58966064]
[187.47581482 368.04275513]
[196.41436768 380.13211060]
[203.24105835 393.52786255]
[207.76960754 407.86459351]
[209.87649536 422.75119019]
[209.50424194 437.78155518]
[206.66300964 452.54559326]
[201.43029785 466.64059448]
[193.94886780 479.68197632]
[184.42280579 491.31399536]
[173.11199951 501.21932983]
[160.32501221 509.12774658]
[146.41069031 514.82348633]
[131.74862671 518.15118408]
[116.73879242 519.02001953]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 143]
[18 142]
[19 141]
[20 140]
[21 139]
[22 138]
[23 137]
[24 136]
[25 135]
[26 134]
[27 133]
[33 127]
[34 126]
[36 125]
[37 115]
[38 114]
[39 113]
[41 111]
[42 110]
[43 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
