%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCACACCUGGGGGGGGGGCAUAUCCUCCCUACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAxxxxxxxxxxAUUCAUCGACCUCCCCACCCCAUCCAACAUCUCCGCAUGAUGAAACUUCGCCCCCCCCCCGCUCACUCCU\
) } def
/len { sequence length } bind def

/coor [
[74.79342651 380.14743042]
[60.94748688 374.13140869]
[49.23882675 364.60198975]
[40.53630066 352.26632690]
[35.48569870 338.03979492]
[34.46180725 322.97811890]
[37.54060745 308.19894409]
[44.49362946 294.79904175]
[54.80491257 283.77270508]
[67.70929718 275.93820190]
[82.24918365 271.87686157]
[82.24918365 256.87686157]
[82.24918365 241.87687683]
[82.24918365 226.87687683]
[82.24918365 211.87687683]
[82.24918365 196.87687683]
[82.24918365 181.87687683]
[82.24918365 166.87687683]
[82.24918365 151.87687683]
[82.24918365 136.87687683]
[82.24918365 121.87687683]
[78.26316071 105.61380768]
[84.48849487 93.73848724]
[94.24092102 90.62198639]
[92.37330627 75.73870850]
[90.50569153 60.85542679]
[82.22949982 73.36560822]
[68.56407166 79.55076599]
[53.70316696 77.51276398]
[42.20740128 67.87702942]
[37.60467911 53.60065079]
[41.30751419 39.06486893]
[52.17956161 28.73052406]
[66.88432312 25.76910019]
[80.90909576 31.08941841]
[89.95014191 43.05948639]
[90.88576508 28.08869553]
[91.82139587 13.11790466]
[92.75702667 -1.85288680]
[82.57811737 -13.64388275]
[83.74024200 -28.81306648]
[95.04388428 -38.44443512]
[95.97951508 -53.41522598]
[96.91513824 -68.38601685]
[95.20245361 -83.28791809]
[90.89486694 -97.65610504]
[86.58728027 -112.02429199]
[80.99243164 -98.10675812]
[69.27379608 -88.74333954]
[54.46471786 -86.35771942]
[40.39847946 -91.56740570]
[30.71607971 -103.02389526]
[27.92378235 -117.76170349]
[32.74436188 -131.96600342]
[43.93003082 -141.96003723]
[58.58540726 -145.15690613]
[72.91699219 -140.72908020]
[83.21505737 -129.82279968]
[81.96817780 -144.77088928]
[80.72130585 -159.71897888]
[71.86364746 -172.82823181]
[78.51621246 -186.15461731]
[77.26934052 -201.10270691]
[62.46933746 -204.12539673]
[49.12107468 -211.19650269]
[38.30663681 -221.74281311]
[30.90270233 -234.90937805]
[27.50947189 -249.62884521]
[28.40201950 -264.70797729]
[33.50799179 -278.92434692]
[42.41347122 -291.12554932]
[54.39653015 -300.32244873]
[68.48575592 -305.76950073]
[83.53899384 -307.02514648]
[98.33595276 -303.98760986]
[111.67710114 -296.90307617]
[122.48094177 -286.34591675]
[129.87164307 -273.17190552]
[133.25009155 -258.44903564]
[132.34239197 -243.37083435]
[127.22213745 -229.15957642]
[118.30440521 -216.96733093]
[106.31211090 -207.78247070]
[92.21742249 -202.34957886]
[93.46430206 -187.40148926]
[102.23277283 -175.36143494]
[95.66939545 -160.96585083]
[96.91626740 -146.01776123]
[98.16313934 -131.06968689]
[100.95546722 -116.33187103]
[105.26305389 -101.96369171]
[109.57063293 -87.59550476]
[113.54388428 -102.05971527]
[121.92263031 -114.50144196]
[133.83180237 -123.62128448]
[148.02761841 -128.46676636]
[163.02748108 -128.53182983]
[177.26480103 -123.80968475]
[189.25265503 -114.79351044]
[197.73902893 -102.42493439]
[201.83760071 -87.99574280]
[201.12034607 -73.01290131]
[195.66215515 -59.04121017]
[186.03308105 -47.53986740]
[173.23876953 -39.71006393]
[158.61547852 -36.36954117]
[143.69042969 -37.86717606]
[130.02238464 -44.04656601]
[119.03884888 -54.26232910]
[111.88593292 -67.45038605]
[110.95030212 -52.47959900]
[110.01467896 -37.50880814]
[120.03118134 -26.54499435]
[119.29558563 -11.34915447]
[107.72781372 -0.91725838]
[106.79219055 14.05353355]
[105.85655975 29.02432442]
[104.92092896 43.99511719]
[105.38897705 58.98781204]
[107.25658417 73.87109375]
[109.12419891 88.75437164]
[117.50634003 101.19380951]
[130.59950256 108.51291656]
[146.98063660 107.74456024]
[155.60768127 121.69110107]
[147.60588074 136.00553894]
[131.20678711 135.96240234]
[123.28038788 121.60607147]
[110.18724060 114.28696442]
[97.24918365 121.87687683]
[97.24918365 136.87687683]
[97.24918365 151.87687683]
[97.24918365 166.87687683]
[97.24918365 181.87687683]
[97.24918365 196.87687683]
[97.24918365 211.87687683]
[97.24918365 226.87687683]
[97.24918365 241.87687683]
[97.24918365 256.87686157]
[97.24918365 271.87686157]
[111.78907013 275.93820190]
[124.69345093 283.77270508]
[135.00473022 294.79904175]
[141.95774841 308.19894409]
[145.03656006 322.97811890]
[144.01266479 338.03979492]
[138.96206665 352.26632690]
[130.25953674 364.60198975]
[118.55087280 374.13140869]
[104.70493317 380.14743042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 121]
[25 120]
[26 119]
[36 118]
[37 117]
[38 116]
[39 115]
[42 112]
[43 111]
[44 110]
[45 92]
[46 91]
[47 90]
[58 89]
[59 88]
[60 87]
[62 85]
[63 84]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
