%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAACUUUAGGGGGGGGGGAAUUUGCCCACAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCxxxxxxxxxxACAGCACCAAAUCUCCACCUCCAUCAUCACCUCAACCCAAAAAGGCAUAACCCCCCCCCCUUAAACUUUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 357.70864868]
[71.19830322 351.69262695]
[59.48964310 342.16320801]
[50.78712082 329.82754517]
[45.73651886 315.60101318]
[44.71262741 300.53933716]
[47.79142761 285.76016235]
[54.74444962 272.36026001]
[65.05573273 261.33392334]
[77.96011353 253.49940491]
[92.50000000 249.43809509]
[92.50000000 234.43809509]
[92.50000000 219.43809509]
[92.50000000 204.43809509]
[92.50000000 189.43809509]
[92.50000000 174.43809509]
[92.50000000 159.43809509]
[92.50000000 144.43809509]
[92.50000000 129.43809509]
[92.50000000 114.43809509]
[84.75576782 105.68522644]
[84.87733459 93.99886322]
[92.80198669 85.40900421]
[85.35346222 71.45085144]
[93.35385895 58.88730240]
[93.66591644 43.89054871]
[93.97797394 28.89379311]
[94.29003143 13.89703941]
[79.33963776 12.61461544]
[64.50360107 10.36714077]
[49.84416962 7.16404247]
[35.42281342 3.01875591]
[21.30002594 -2.05133247]
[7.53504372 -8.02495670]
[-5.81439734 -14.87706089]
[-18.69230461 -22.57890511]
[-31.04466438 -31.09818459]
[-42.81966400 -40.39916611]
[-53.96791840 -50.44284058]
[-64.44266510 -61.18707657]
[-74.19996643 -72.58680725]
[-83.19890594 -84.59423065]
[-91.40172577 -97.15896606]
[-98.77402496 -110.22832489]
[-105.28488922 -123.74747467]
[-110.90699768 -137.65972900]
[-115.61678314 -151.90672302]
[-119.39447021 -166.42871094]
[-122.22423553 -181.16476440]
[-124.09420013 -196.05308533]
[-124.99651337 -211.03123474]
[-124.92740631 -226.03636169]
[-123.88716125 -241.00555420]
[-121.88013458 -255.87602234]
[-118.91475677 -270.58538818]
[-115.00345612 -285.07196045]
[-110.16264343 -299.27496338]
[-104.41262054 -313.13485718]
[-97.77750397 -326.59344482]
[-90.28513336 -339.59436035]
[-81.96691895 -352.08297729]
[-72.85776520 -364.00701904]
[-62.99586868 -375.31637573]
[-52.42259979 -385.96368408]
[-41.18230438 -395.90423584]
[-29.32213020 -405.09637451]
[-16.89182091 -413.50149536]
[-3.94351673 -421.08438110]
[9.46847439 -427.81323242]
[23.28789711 -433.65982056]
[37.45678711 -438.59960938]
[51.91571426 -442.61187744]
[66.60403442 -445.67980957]
[81.46013641 -447.79052734]
[96.42170715 -448.93518066]
[111.42599487 -449.10897827]
[126.41007233 -448.31118774]
[141.31108093 -446.54513550]
[156.06651306 -443.81823730]
[170.61450195 -440.14196777]
[184.89401245 -435.53170776]
[198.84513855 -430.00677490]
[212.40939331 -423.59039307]
[225.52986145 -416.30944824]
[238.15153503 -408.19448853]
[250.22143555 -399.27954102]
[261.68896484 -389.60202026]
[272.50601196 -379.20248413]
[282.62722778 -368.12457275]
[292.01013184 -356.41473389]
[300.61538696 -344.12213135]
[308.40689087 -331.29824829]
[315.35195923 -317.99694824]
[321.42147827 -304.27398682]
[326.58996582 -290.18692017]
[330.83575439 -275.79483032]
[334.14105225 -261.15808105]
[336.49197388 -246.33810425]
[337.87869263 -231.39701843]
[338.29531860 -216.39750671]
[337.74020386 -201.40248108]
[336.21557617 -186.47483826]
[333.72790527 -171.67720032]
[330.28759766 -157.07160950]
[325.90908813 -142.71934509]
[320.61071777 -128.68060303]
[314.41476440 -115.01425934]
[307.34713745 -101.77764893]
[299.43756104 -89.02628326]
[290.71917725 -76.81364441]
[281.22854614 -65.19096375]
[271.00546265 -54.20698547]
[260.09283447 -43.90778351]
[248.53643799 -34.33655548]
[236.38471985 -25.53344727]
[223.68865967 -17.53538132]
[210.50151062 -10.37590504]
[196.87860107 -4.08504868]
[182.87702942 1.31080258]
[168.55555725 5.78901577]
[153.97425842 9.33080769]
[139.19425964 11.92132282]
[124.27758026 13.54969597]
[109.28678131 14.20909595]
[108.97472382 29.20584869]
[108.66266632 44.20260239]
[108.35061646 59.19935608]
[115.82146454 72.08483887]
[107.79874420 85.72106171]
[116.26898193 100.16924286]
[107.50000000 114.43809509]
[107.50000000 129.43809509]
[107.50000000 144.43809509]
[107.50000000 159.43809509]
[107.50000000 174.43809509]
[107.50000000 189.43809509]
[107.50000000 204.43809509]
[107.50000000 219.43809509]
[107.50000000 234.43809509]
[107.50000000 249.43809509]
[122.03988647 253.49940491]
[134.94427490 261.33392334]
[145.25555420 272.36026001]
[152.20857239 285.76016235]
[155.28736877 300.53933716]
[154.26348877 315.60101318]
[149.21287537 329.82754517]
[140.51036072 342.16320801]
[128.80169678 351.69262695]
[114.95575714 357.70864868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 129]
[25 127]
[26 126]
[27 125]
[28 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
