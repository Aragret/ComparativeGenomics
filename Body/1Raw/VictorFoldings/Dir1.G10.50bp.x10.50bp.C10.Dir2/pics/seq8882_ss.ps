%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACUUCCACGGGGGGGGGGUCCAUAACGCUCCUCAUACUAGGCCUACUAACCAACACACUAACCAUAUAxxxxxxxxxxCAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCCCCCCCCCCCUCACUUCAAC\
) } def
/len { sequence length } bind def

/coor [
[84.64797974 370.57519531]
[70.15829468 366.36672974]
[57.25206375 358.55062866]
[46.80926132 347.65979004]
[39.54189682 334.43676758]
[35.94547272 319.78317261]
[36.26519394 304.69805908]
[40.47926331 290.21002197]
[48.30036163 277.30679321]
[59.19522858 266.86819458]
[72.42103577 259.60595703]
[87.07602692 256.01516724]
[87.38808441 241.01841736]
[87.70014191 226.02166748]
[88.01219940 211.02491760]
[88.32425690 196.02816772]
[88.63631439 181.03140259]
[88.94836426 166.03465271]
[89.26042175 151.03790283]
[89.57247925 136.04115295]
[82.95663452 94.52682495]
[72.29500580 83.97554016]
[60.82297897 93.65535736]
[48.52943802 102.26784515]
[35.51335907 109.74367523]
[21.87954712 116.02263641]
[7.73777390 121.05419159]
[-6.79809666 124.79781342]
[-21.61102676 127.22336578]
[-36.58175278 128.31132507]
[-51.58973312 128.05291748]
[-66.51412964 126.45024109]
[-81.23477936 123.51618958]
[-95.63316345 119.27438354]
[-109.59333801 113.75897980]
[-123.00291443 107.01439667]
[-135.75392151 99.09491730]
[-147.74369812 90.06432343]
[-158.87570190 79.99532318]
[-169.06028748 68.96897888]
[-178.21548462 57.07407379]
[-186.26756287 44.40638351]
[-193.15168762 31.06790352]
[-198.81242371 17.16602707]
[-203.20422363 2.81268477]
[-206.29168701 -11.87655449]
[-208.04998779 -26.78341866]
[-208.46495056 -41.78788757]
[-207.53324890 -56.76914597]
[-205.26237488 -71.60657501]
[-201.67059326 -86.18071747]
[-196.78686523 -100.37421417]
[-190.65048218 -114.07279205]
[-183.31085205 -127.16615295]
[-174.82708740 -139.54888916]
[-165.26748657 -151.12127686]
[-154.70903015 -161.79016113]
[-143.23669434 -171.46961975]
[-130.94290161 -180.08174133]
[-117.92658997 -187.55715942]
[-104.29258728 -193.83570862]
[-90.15065765 -198.86683655]
[-75.61466980 -202.61001587]
[-60.80166626 -205.03511047]
[-45.83090973 -206.12261963]
[-30.82293701 -205.86375427]
[-15.89858913 -204.26062012]
[-1.17802703 -201.32611084]
[13.22022343 -197.08387756]
[27.18023491 -191.56803894]
[40.58960342 -184.82304382]
[53.34037018 -176.90318298]
[65.32986450 -167.87222290]
[76.46155548 -157.80287170]
[86.64581299 -146.77622986]
[95.80064392 -134.88104248]
[103.85233307 -122.21310425]
[110.73604584 -108.87441254]
[116.39636993 -94.97236633]
[120.78771973 -80.61888885]
[123.87474823 -65.92955780]
[125.63259125 -51.02263641]
[126.04709625 -36.01815796]
[125.11493683 -21.03692627]
[122.84360504 -6.19956398]
[119.25138855 8.37446213]
[114.36721802 22.56781006]
[108.23041534 36.26620102]
[100.89039612 49.35934067]
[92.40625000 61.74180984]
[82.84629822 73.31391144]
[93.50792694 83.86520386]
[108.44223022 85.26750183]
[120.88166809 76.88536072]
[133.32110596 68.50321960]
[145.76055908 60.12107468]
[150.22796631 44.71257782]
[165.11451721 38.73176575]
[179.00051880 46.76660156]
[181.23381042 62.65345001]
[170.10121155 74.20528412]
[154.14270020 72.56051636]
[141.70326233 80.94265747]
[129.26380920 89.32479858]
[116.82437134 97.70694733]
[119.61669922 112.44474792]
[134.26019287 115.69557953]
[148.90370178 118.94640350]
[163.54719543 122.19722748]
[178.19070435 125.44805145]
[186.31802368 112.65264893]
[198.33338928 103.41107178]
[212.78588867 98.83927917]
[227.93029785 99.48934937]
[241.93786621 105.28277588]
[253.11711121 115.51998138]
[260.11807251 128.96476746]
[262.09536743 143.99360657]
[258.81024170 158.79170227]
[250.65934753 171.57211304]
[238.62696838 180.79153442]
[224.16607666 185.33666992]
[209.02288818 184.65869141]
[195.02601624 178.83946228]
[183.86566162 168.58168030]
[176.88948059 155.12402344]
[174.93988037 140.09155273]
[160.29637146 136.84072876]
[145.65287781 133.58990479]
[131.00936890 130.33908081]
[116.36587524 127.08824921]
[104.56923676 136.35319519]
[104.25717926 151.34996033]
[103.94512177 166.34671021]
[103.63306427 181.34346008]
[103.32100677 196.34020996]
[103.00894928 211.33697510]
[102.69689941 226.33372498]
[102.38484192 241.33047485]
[102.07278442 256.32723999]
[116.56571960 260.52450562]
[129.47798157 268.33065796]
[139.92918396 279.21343994]
[147.20675659 292.43081665]
[150.81449890 307.08163452]
[150.50642395 322.16699219]
[146.30354309 336.65829468]
[138.49241638 349.56753540]
[127.60561371 360.01455688]
[114.38542175 367.28701782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 92]
[22 91]
[93 105]
[94 104]
[95 103]
[96 102]
[106 131]
[107 130]
[108 129]
[109 128]
[110 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
