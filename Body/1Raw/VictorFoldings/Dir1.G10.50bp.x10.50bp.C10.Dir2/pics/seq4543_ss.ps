%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGAAUCGAAGGGGGGGGGGCCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCCxxxxxxxxxxAGGAGCUUAAACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCCCCCCCCCCCUGAGAAUCCAA\
) } def
/len { sequence length } bind def

/coor [
[125.75167847 483.79244995]
[113.41857147 475.14132690]
[103.32012177 463.96237183]
[95.96286774 450.81631470]
[91.71585083 436.36257935]
[90.79209137 421.32614136]
[93.23793030 406.46124268]
[98.93067932 392.51345825]
[107.58480072 380.18246460]
[118.76620483 370.08670044]
[131.91403198 362.73263550]
[146.36880493 358.48913574]
[145.44538879 343.51757812]
[144.52197266 328.54602051]
[143.59855652 313.57446289]
[142.67515564 298.60293579]
[141.75173950 283.63137817]
[140.82832336 268.65982056]
[139.90490723 253.68827820]
[138.98149109 238.71672058]
[138.05807495 223.74517822]
[121.39930725 219.91950989]
[109.25291443 208.66300964]
[104.49139404 193.35833740]
[107.87762451 178.23657227]
[117.99407959 167.20979309]
[112.57545471 153.22271729]
[107.15682983 139.23562622]
[86.30454254 137.45782471]
[69.22322845 125.36621857]
[60.61613846 106.29015350]
[45.62325287 105.82823181]
[30.63036537 105.36630249]
[15.63747978 104.90438080]
[0.64459378 104.44245148]
[-14.34829235 103.98052216]
[-26.97430420 113.87817383]
[-42.55092239 110.03778076]
[-49.12909317 95.40538025]
[-41.66261292 81.20568848]
[-25.87912369 78.33149719]
[-13.88636589 88.98764038]
[1.10651970 89.44956207]
[16.09940529 89.91149139]
[31.09229088 90.37342072]
[46.08517838 90.83534241]
[61.07806396 91.29727173]
[63.80423355 83.25122833]
[68.17266846 75.96511841]
[73.98516083 69.76950073]
[80.97799683 64.94549561]
[76.43070984 50.65136719]
[65.32388306 44.01493835]
[61.85215378 31.96842766]
[67.36003113 21.15521812]
[63.10718536 6.77073765]
[58.85433960 -7.61374331]
[43.79528046 -6.91503429]
[29.00673676 -9.84118748]
[15.34849072 -16.22207832]
[3.61461854 -25.68673325]
[-5.51268959 -37.68488693]
[-11.50278378 -51.51898193]
[-14.00740719 -66.38472748]
[-12.88094521 -81.41783905]
[-8.18888855 -95.74431610]
[-0.20402630 -108.53124237]
[10.60941124 -119.03519440]
[23.62274551 -126.64548492]
[38.07939529 -130.91967773]
[53.13887405 -131.60925293]
[67.92564392 -128.67413330]
[81.58001709 -122.28496552]
[93.30815125 -112.81319427]
[102.42818451 -100.80950928]
[108.40988922 -86.97178650]
[110.90550232 -72.10453033]
[109.76992035 -57.07210159]
[105.06918335 -42.74846649]
[97.07656860 -29.96638870]
[86.25676727 -19.46899414]
[73.23882294 -11.86658955]
[77.49166870 2.51789117]
[81.74451447 16.90237236]
[95.09948730 28.24650002]
[90.72483826 46.10407639]
[95.27212524 60.39820862]
[105.22963715 60.46134186]
[114.86114502 62.98917770]
[123.56626129 67.82414246]
[134.54707336 57.60543442]
[145.52786255 47.38672638]
[143.51901245 32.00023270]
[150.96733093 18.38765526]
[165.00877380 11.78330612]
[180.24412537 14.72669125]
[190.81509399 26.08602142]
[192.65692139 41.49340057]
[185.06137085 55.02437592]
[170.94911194 61.47601700]
[155.74658203 58.36753082]
[144.76577759 68.58623505]
[133.78497314 78.80494690]
[139.32675171 93.36214447]
[138.87001038 108.93182373]
[132.48439026 123.13912964]
[121.14391327 133.81700134]
[126.56253815 147.80409241]
[131.98115540 161.79116821]
[150.40788269 164.16567993]
[164.47694397 177.90274048]
[167.62969971 198.40975952]
[182.28242493 201.61875916]
[196.93515015 204.82775879]
[206.73368835 193.06990051]
[220.87844849 187.22314453]
[236.11906433 188.63105774]
[248.95335388 196.97009277]
[256.43209839 210.32400513]
[256.83673096 225.62416077]
[250.07427979 239.35470581]
[237.69868469 248.36044312]
[222.55380249 250.57194519]
[208.11978149 245.48100281]
[197.71347046 234.25749207]
[193.72615051 219.48048401]
[179.07342529 216.27148438]
[164.42070007 213.06248474]
[153.02963257 222.82176208]
[153.95304871 237.79331970]
[154.87646484 252.76486206]
[155.79986572 267.73641968]
[156.72328186 282.70797729]
[157.64669800 297.67950439]
[158.57011414 312.65106201]
[159.49353027 327.62261963]
[160.41694641 342.59417725]
[161.34034729 357.56570435]
[176.20704651 360.00073242]
[190.15895081 365.68334961]
[202.49624634 374.32852173]
[212.60011292 385.50256348]
[219.96372986 398.64505005]
[224.21775818 413.09674072]
[225.14880371 428.13272095]
[222.71017456 442.99880981]
[217.02416992 456.94934082]
[208.37603760 469.28454590]
[197.19952393 479.38571167]
[184.05525208 486.74615479]
[169.60255432 490.99667358]
[154.56632996 491.92407227]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[26 109]
[27 108]
[28 107]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[51 87]
[52 86]
[55 84]
[56 83]
[57 82]
[90 103]
[91 102]
[92 101]
[112 128]
[113 127]
[114 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
