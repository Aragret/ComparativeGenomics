%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAGCCCACGGGGGGGGGGUAAUCCAAACUCUAACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAxxxxxxxxxxCUAUUCCUAGCCAUGCACUACUCACCAGACGCCUCAACCGCCUUUUCAUCCCCCCCCCCCAAUCGCCCAC\
) } def
/len { sequence length } bind def

/coor [
[82.66026306 356.57788086]
[69.44006348 349.30541992]
[58.55326462 338.85839844]
[50.74213409 325.94915771]
[46.53925323 311.45785522]
[46.23117828 296.37249756]
[49.83892059 281.72167969]
[57.11649323 268.50430298]
[67.56770325 257.62152100]
[80.47996521 249.81536865]
[94.97290039 245.61808777]
[94.66084290 230.62133789]
[94.34878540 215.62458801]
[94.03672791 200.62782288]
[93.72467804 185.63107300]
[93.41262054 170.63432312]
[93.10056305 155.63757324]
[92.78850555 140.64080811]
[92.47644806 125.64405823]
[92.16439056 110.64730835]
[84.59633636 123.59815979]
[73.60377502 133.80421448]
[60.12771988 140.39176941]
[45.32179642 142.79690552]
[30.45347595 140.81373596]
[16.79556084 134.61199951]
[5.51724482 124.72264099]
[-2.41598940 111.99221039]
[-6.32501364 97.51051331]
[-5.87519455 82.51726532]
[-1.10503924 68.29595184]
[7.57710171 56.06401062]
[19.42798996 46.86855316]
[33.43312836 41.49676132]
[48.39359665 40.40848923]
[63.02870560 43.69689941]
[76.08560181 51.08048630]
[86.44655609 61.92717361]
[93.22460938 75.30843353]
[95.83962250 90.08216095]
[101.32665253 76.12177277]
[106.81368256 62.16138077]
[98.63808441 49.10512924]
[99.70558167 33.91586304]
[109.39774323 22.40386772]
[123.83730316 18.84900475]
[129.32434082 4.88861465]
[134.81137085 -9.07177544]
[140.29840088 -23.03216553]
[145.78543091 -36.99255371]
[132.36376953 -43.71306992]
[119.59857178 -51.60964584]
[107.59261322 -60.61870956]
[96.44256592 -70.66771698]
[86.23819733 -81.67576599]
[77.06166840 -93.55422211]
[68.98687744 -106.20743561]
[62.07882309 -119.53353882]
[56.39313889 -133.42523193]
[51.97559738 -147.77067566]
[48.86176682 -162.45434570]
[47.07671738 -177.35803223]
[46.63482285 -192.36174011]
[47.53964233 -207.34465027]
[49.78389359 -222.18612671]
[53.34949875 -236.76667786]
[58.20775604 -250.96891785]
[64.31954193 -264.67849731]
[71.63565826 -277.78500366]
[80.09718323 -290.18295288]
[89.63600159 -301.77246094]
[100.17530823 -312.46026611]
[111.63024139 -322.16030884]
[123.90856934 -330.79449463]
[136.91143799 -338.29327393]
[150.53414917 -344.59628296]
[164.66702271 -349.65277100]
[179.19627380 -353.42202759]
[194.00489807 -355.87371826]
[208.97367859 -356.98806763]
[223.98210144 -356.75613403]
[238.90930176 -355.17977905]
[253.63510132 -352.27169800]
[268.04095459 -348.05532837]
[282.01083374 -342.56454468]
[295.43228149 -335.84362793]
[308.19723511 -327.94665527]
[320.20294189 -318.93722534]
[331.35266113 -308.88787842]
[341.55670166 -297.87951660]
[350.73287964 -286.00079346]
[358.80728149 -273.34732056]
[365.71490479 -260.02099609]
[371.40017700 -246.12913513]
[375.81729126 -231.78356934]
[378.93066406 -217.09979248]
[380.71527100 -202.19606018]
[381.15670776 -187.19235229]
[380.25140381 -172.20945740]
[378.00671387 -157.36805725]
[374.44067383 -142.78759766]
[369.58197021 -128.58551025]
[363.46975708 -114.87612915]
[356.15325928 -101.76983643]
[347.69134521 -89.37216187]
[338.15216064 -77.78292084]
[327.61254883 -67.09543610]
[316.15731812 -57.39574432]
[303.87872314 -48.76195145]
[290.87561035 -41.26357269]
[277.25271606 -34.96098328]
[263.11968994 -29.90492249]
[248.59033203 -26.13610649]
[233.78163147 -23.68487549]
[218.81280518 -22.57096863]
[203.80439758 -22.80335236]
[188.87724304 -24.38015747]
[174.15153503 -27.28868675]
[159.74581909 -31.50552368]
[154.25878906 -17.54513359]
[148.77175903 -3.58474374]
[143.28472900 10.37564564]
[137.79769897 24.33603668]
[145.95240784 36.77141571]
[145.21221924 51.80192184]
[135.65168762 63.65306091]
[120.77407074 67.64841461]
[115.28704071 81.60880280]
[109.80001068 95.56919098]
[107.16114807 110.33525085]
[107.47320557 125.33200073]
[107.78526306 140.32875061]
[108.09731293 155.32551575]
[108.40937042 170.32226562]
[108.72142792 185.31901550]
[109.03348541 200.31576538]
[109.34554291 215.31253052]
[109.65760040 230.30928040]
[109.96965027 245.30603027]
[124.62464142 248.89680481]
[137.85044861 256.15905762]
[148.74531555 266.59765625]
[156.56642151 279.50085449]
[160.78048706 293.98892212]
[161.10020447 309.07403564]
[157.50378418 323.72763062]
[150.23641968 336.95062256]
[139.79362488 347.84146118]
[126.88739014 355.65759277]
[112.39769745 359.86605835]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[40 129]
[41 128]
[42 127]
[46 123]
[47 122]
[48 121]
[49 120]
[50 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
