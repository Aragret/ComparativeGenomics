%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUGCAUAAUGGGGGGGGGGGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAxxxxxxxxxxUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACCCCCCCCCCCUUCUCCAUAAU\
) } def
/len { sequence length } bind def

/coor [
[77.69926453 477.23486328]
[63.53866196 472.07983398]
[50.94891739 463.79763794]
[40.60897827 452.83486938]
[33.07646942 439.78274536]
[28.75760269 425.34515381]
[27.88529396 410.30068970]
[30.50658417 395.46069336]
[36.48011017 381.62545776]
[45.48373032 369.54110718]
[57.03188705 359.85931396]
[70.50180054 353.10223389]
[85.16706085 349.63427734]
[85.16706085 334.63427734]
[85.16706085 319.63427734]
[85.16706085 304.63427734]
[85.16706085 289.63427734]
[85.16706085 274.63427734]
[85.16706085 259.63427734]
[85.16706085 244.63426208]
[85.16706085 229.63426208]
[85.16706085 214.63426208]
[83.21976471 212.54066467]
[82.00984955 209.52714539]
[81.90049744 205.88014221]
[83.14096832 202.01509094]
[85.82421875 198.43182373]
[87.03898621 183.48109436]
[78.66809845 168.08575439]
[89.18601227 153.00419617]
[90.09752655 138.03192139]
[91.00904083 123.05963898]
[91.92055511 108.08735657]
[80.45870972 117.76341248]
[65.46025085 117.97872925]
[53.72537613 108.63567352]
[50.57457733 93.97032166]
[57.43640518 80.63183594]
[71.19976044 74.66777802]
[85.62444305 78.78220367]
[94.17033386 91.10937500]
[97.18981171 76.41642761]
[100.20928955 61.72348022]
[103.22876740 47.03053284]
[101.88822174 37.93415070]
[106.46120453 32.07177353]
[109.77783966 17.44303894]
[112.19940186 2.63979411]
[113.71692657 -12.28324604]
[115.23445129 -27.20628548]
[116.75197601 -42.12932587]
[118.26950073 -57.05236435]
[119.78702545 -71.97540283]
[121.30455017 -86.89844513]
[106.64807129 -90.17321777]
[92.48180389 -95.15850830]
[79.00460815 -101.78433228]
[66.40568542 -109.95767212]
[54.86190796 -119.56379700]
[44.53533173 -130.46783447]
[35.57092285 -142.51672363]
[28.09452820 -155.54132080]
[22.21110535 -169.35874939]
[18.00325203 -183.77507019]
[15.53003407 -198.58789062]
[14.82617569 -213.58926392]
[15.90155602 -228.56857300]
[18.74107933 -243.31555176]
[23.30488205 -257.62316895]
[29.52889633 -271.29058838]
[37.32574463 -284.12591553]
[46.58597565 -295.94894409]
[57.17958832 -306.59375000]
[68.95786285 -315.91085815]
[81.75545502 -323.76950073]
[95.39270020 -330.05932617]
[109.67816162 -334.69204712]
[124.41128540 -337.60260010]
[139.38523865 -338.75018311]
[154.38981628 -338.11865234]
[169.21438599 -335.71685791]
[183.65083313 -331.57852173]
[197.49647522 -325.76177979]
[210.55694580 -318.34826660]
[222.64889526 -309.44204712]
[233.60260010 -299.16815186]
[243.26425171 -287.67080688]
[251.49822998 -275.11141968]
[258.18893433 -261.66632080]
[263.24246216 -247.52424622]
[266.58782959 -232.88372803]
[268.17810059 -217.95028687]
[267.99096680 -202.93359375]
[266.02902222 -188.04443359]
[262.31982422 -173.49182129]
[256.91543579 -159.48008728]
[249.89172363 -146.20590210]
[241.34730530 -133.85562134]
[231.40211487 -122.60263824]
[220.19578552 -112.60491180]
[207.88563538 -104.00279999]
[194.64445496 -96.91706848]
[180.65815735 -91.44717407]
[166.12306213 -87.66992188]
[151.24325562 -85.63832855]
[136.22758484 -85.38092041]
[134.71006775 -70.45787811]
[133.19253540 -55.53483963]
[131.67501831 -40.61180115]
[130.15748596 -25.68876076]
[128.63996887 -10.76572132]
[127.12243652 4.15731907]
[139.62178040 -4.13523102]
[154.35989380 -1.34452617]
[162.96221924 10.94368458]
[160.54067993 25.74693489]
[148.47128296 34.65364838]
[133.61213684 32.60280609]
[124.40657806 20.75967789]
[121.08993530 35.38841248]
[117.92171478 50.05001068]
[114.90223694 64.74295807]
[111.88275909 79.43590546]
[108.86328125 94.12885284]
[106.89282990 108.99887085]
[105.98132324 123.97115326]
[105.06980896 138.94343567]
[104.15829468 153.91571045]
[112.12499237 164.10818481]
[111.02225494 176.59452820]
[101.98971558 184.69586182]
[100.77494812 199.64659119]
[100.16706085 214.63426208]
[100.16706085 229.63426208]
[100.16706085 244.63426208]
[100.16706085 259.63427734]
[100.16706085 274.63427734]
[100.16706085 289.63427734]
[100.16706085 304.63427734]
[100.16706085 319.63427734]
[100.16706085 334.63427734]
[100.16706085 349.63427734]
[114.83232117 353.10223389]
[128.30224609 359.85931396]
[139.85040283 369.54110718]
[148.85401917 381.62545776]
[154.82754517 395.46069336]
[157.44883728 410.30068970]
[156.57652283 425.34515381]
[152.25765991 439.78274536]
[144.72514343 452.83486938]
[134.38520813 463.79763794]
[121.79546356 472.07983398]
[107.63485718 477.23486328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[27 132]
[28 131]
[30 128]
[31 127]
[32 126]
[33 125]
[41 124]
[42 123]
[43 122]
[44 121]
[46 120]
[47 119]
[48 112]
[49 111]
[50 110]
[51 109]
[52 108]
[53 107]
[54 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
