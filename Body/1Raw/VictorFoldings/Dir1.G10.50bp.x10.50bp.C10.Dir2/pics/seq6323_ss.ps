%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACAUCUAGGGGGGGGGGCAACGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCUUCAUAGUAAxxxxxxxxxxUCCACUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCACCCCCCCCCCACCACACCUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 393.14089966]
[71.19830322 387.12487793]
[59.48964310 377.59545898]
[50.78712082 365.25979614]
[45.73651886 351.03326416]
[44.71262741 335.97158813]
[47.79142761 321.19244385]
[54.74444962 307.79251099]
[65.05573273 296.76617432]
[77.96011353 288.93167114]
[92.50000000 284.87036133]
[92.50000000 269.87036133]
[92.50000000 254.87034607]
[92.50000000 239.87034607]
[92.50000000 224.87034607]
[92.50000000 209.87034607]
[92.50000000 194.87034607]
[92.50000000 179.87034607]
[92.50000000 164.87034607]
[92.50000000 149.87034607]
[78.92234039 145.81521606]
[67.00878906 138.14291382]
[57.69993591 127.45917511]
[44.04369354 133.66458130]
[30.38745308 139.86999512]
[21.29511833 153.51776123]
[4.94919729 152.19757080]
[-1.83502829 137.26751709]
[7.92147112 124.08636475]
[24.18204498 126.21374512]
[37.83828735 120.00833893]
[51.49452591 113.80293274]
[49.64823914 102.82878113]
[50.25372696 91.71688080]
[53.28150558 81.00830841]
[58.58414841 71.22450256]
[65.90345001 62.84186172]
[74.88301849 56.26855850]
[85.08560181 51.82466888]
[96.01441193 49.72657776]
[107.13729095 50.07645035]
[111.44487762 35.70826721]
[115.75246429 21.34008026]
[120.06004333 6.97189713]
[111.48236084 -8.23864746]
[116.43079376 -24.63367844]
[131.39106750 -32.25260925]
[135.39881897 -46.70729828]
[139.40655518 -61.16198349]
[143.41429138 -75.61667633]
[147.42202759 -90.07136536]
[151.42977905 -104.52604675]
[155.43751526 -118.98073578]
[142.23008728 -127.63160706]
[132.34652710 -139.91886902]
[126.74102783 -154.63720703]
[125.94889069 -170.34747314]
[130.03538513 -185.51754761]
[138.59059143 -198.67164612]
[150.77046204 -208.53392029]
[165.38006592 -214.15223694]
[180.99089050 -214.99003601]
[184.69705200 -229.52496338]
[180.60934448 -244.80899048]
[191.25137329 -255.22994995]
[194.95753479 -269.76489258]
[198.66369629 -284.29980469]
[202.36985779 -298.83474731]
[188.96331787 -305.70587158]
[177.42219543 -315.38833618]
[168.32540894 -327.39651489]
[162.12922668 -341.12805176]
[159.14448547 -355.89419556]
[159.52085876 -370.95428467]
[163.23948669 -385.55288696]
[170.11384583 -398.95776367]
[179.79911804 -410.49655151]
[191.80949402 -419.59042358]
[205.54254150 -425.78326416]
[220.30940247 -428.76443481]
[235.36938477 -428.38442993]
[249.96710205 -424.66226196]
[263.37033081 -417.78463745]
[274.90673828 -408.09658813]
[283.99771118 -396.08401489]
[290.18722534 -382.34945679]
[293.16482544 -367.58187866]
[292.78115845 -352.52197266]
[289.05545044 -337.92517090]
[282.17459106 -324.52362061]
[272.48373413 -312.98953247]
[260.46896362 -303.90145874]
[246.73291016 -297.71527100]
[231.96459961 -294.74127197]
[216.90480042 -295.12860107]
[213.19863892 -280.59365845]
[209.49247742 -266.05871582]
[205.78631592 -251.52378845]
[210.13909912 -237.27940369]
[199.23197937 -225.81880188]
[195.52581787 -211.28387451]
[207.78370667 -203.94615173]
[217.48100281 -193.43348694]
[223.82154846 -180.59574890]
[226.28099060 -166.47418213]
[224.65020752 -152.21707153]
[219.05302429 -138.98626709]
[209.93688965 -127.86255646]
[198.03706360 -119.75734711]
[184.31739807 -115.33802795]
[169.89219666 -114.97299957]
[165.88446045 -100.51831055]
[161.87672424 -86.06362152]
[157.86898804 -71.60893250]
[153.86123657 -57.15424347]
[149.85350037 -42.69955444]
[145.84576416 -28.24486732]
[153.71377563 -17.99347496]
[154.22833252 -4.88585997]
[146.97579956 6.27786303]
[134.42822266 11.27948189]
[130.12065125 25.64766502]
[125.81305695 40.01585007]
[121.50547791 54.38403320]
[136.35527039 65.04866028]
[146.42710876 80.30673218]
[150.39732361 98.15296936]
[147.74412537 116.24195099]
[138.81619263 132.19635010]
[124.78689575 143.91937256]
[107.50000000 149.87034607]
[107.50000000 164.87034607]
[107.50000000 179.87034607]
[107.50000000 194.87034607]
[107.50000000 209.87034607]
[107.50000000 224.87034607]
[107.50000000 239.87034607]
[107.50000000 254.87034607]
[107.50000000 269.87036133]
[107.50000000 284.87036133]
[122.03988647 288.93167114]
[134.94427490 296.76617432]
[145.25555420 307.79251099]
[152.20857239 321.19244385]
[155.28736877 335.97158813]
[154.26348877 351.03326416]
[149.21287537 365.25979614]
[140.51036072 377.59545898]
[128.80169678 387.12487793]
[114.95575714 393.14089966]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 32]
[24 31]
[25 30]
[41 124]
[42 123]
[43 122]
[44 121]
[47 117]
[48 116]
[49 115]
[50 114]
[51 113]
[52 112]
[53 111]
[62 101]
[63 100]
[65 98]
[66 97]
[67 96]
[68 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
