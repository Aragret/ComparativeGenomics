%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAAAAAUCGGGGGGGGGGCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACCAAUCUAUCACCCxxxxxxxxxxGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUGACAUCCCCCCCCCCCAAAAAAAUC\
) } def
/len { sequence length } bind def

/coor [
[72.02928925 402.98776245]
[58.18334961 396.97174072]
[46.47468567 387.44232178]
[37.77216339 375.10665894]
[32.72156143 360.88012695]
[31.69766808 345.81845093]
[34.77646637 331.03927612]
[41.72948837 317.63937378]
[52.04077530 306.61303711]
[64.94515228 298.77853394]
[79.48503876 294.71719360]
[79.48503876 279.71719360]
[79.48503876 264.71719360]
[79.48503876 249.71720886]
[79.48503876 234.71720886]
[79.48503876 219.71720886]
[79.48503876 204.71720886]
[79.48503876 189.71720886]
[79.48503876 174.71720886]
[79.48503876 159.71720886]
[60.80870819 132.06915283]
[62.19333267 105.00716400]
[76.61955261 89.49060822]
[92.64816284 89.12022400]
[83.88195801 76.94838715]
[75.11575317 64.77655029]
[66.34954071 52.60471344]
[53.41170883 60.21635437]
[39.82674408 66.60176086]
[25.71055603 71.70644379]
[11.18357849 75.48686981]
[-3.63024497 77.91076660]
[-18.60452461 78.95746613]
[-33.61150360 78.61803436]
[-48.52314758 76.89536285]
[-63.21222687 73.80415344]
[-77.55342102 69.37078094]
[-91.42436981 63.63306808]
[-104.70673370 56.63996506]
[-117.28718567 48.45114136]
[-129.05839539 39.13646317]
[-139.91993713 28.77539635]
[-149.77912903 17.45634270]
[-158.55186462 5.27587414]
[-166.16328430 -7.66208792]
[-172.54846191 -21.24715805]
[-177.65290833 -35.36343384]
[-181.43309021 -49.89047241]
[-183.85675049 -64.70433807]
[-184.90319824 -79.67863464]
[-184.56350708 -94.68560791]
[-182.84059143 -109.59722137]
[-179.74914551 -124.28624725]
[-175.31552124 -138.62736511]
[-169.57757568 -152.49822998]
[-162.58425903 -165.78047180]
[-154.39523315 -178.36079407]
[-145.08035278 -190.13185120]
[-134.71910095 -200.99320984]
[-123.39988708 -210.85220337]
[-111.21926880 -219.62474060]
[-98.28118134 -227.23594666]
[-84.69600677 -233.62089539]
[-70.57965088 -238.72511292]
[-56.05254364 -242.50505066]
[-41.23863983 -244.92846680]
[-26.26432610 -245.97465515]
[-11.25735760 -245.63471985]
[3.65422654 -243.91156006]
[18.34320450 -240.81987000]
[32.68424988 -236.38601685]
[46.55501175 -230.64784241]
[59.83714294 -223.65429688]
[72.41732025 -215.46505737]
[84.18822479 -206.14997864]
[95.04940796 -195.78854370]
[104.90822601 -184.46916199]
[113.68054962 -172.28840637]
[121.29154968 -159.35018921]
[127.67626953 -145.76490784]
[132.78025818 -131.64846802]
[136.55995178 -117.12129974]
[138.98310852 -102.30735016]
[140.02905273 -87.33302307]
[139.68887329 -72.32605743]
[137.96545410 -57.41450500]
[134.87351990 -42.72557831]
[130.43942261 -28.38460541]
[124.70101929 -14.51394081]
[117.70726013 -1.23192644]
[109.51780701 11.34811783]
[100.20253754 23.11886215]
[89.84092712 33.97988129]
[78.52137756 43.83850479]
[87.28759003 56.01034164]
[96.05379486 68.18218231]
[104.81999969 80.35401917]
[119.18818665 84.66159821]
[133.20489502 79.32009125]
[147.22161865 73.97857666]
[161.23832703 68.63706207]
[175.25503540 63.29555130]
[185.18095398 50.24149704]
[201.41268921 52.57869720]
[207.25244141 67.90283966]
[196.69276428 80.44976044]
[180.59655762 77.31226349]
[166.57983398 82.65377808]
[152.56312561 87.99528503]
[138.54641724 93.33679962]
[124.52970123 98.67831421]
[124.52970123 106.17831421]
[139.52969360 106.17831421]
[154.52969360 106.17854309]
[154.52923584 121.17854309]
[139.52969360 121.17831421]
[124.52970123 121.17831421]
[124.52970123 128.67831421]
[138.54641724 134.01982117]
[153.71569824 128.79751587]
[167.17872620 137.52253723]
[168.60783386 153.50181580]
[156.90672302 164.47740173]
[141.05148315 162.02976990]
[133.20489502 148.03654480]
[119.18818665 142.69502258]
[113.01239777 146.95057678]
[121.52328491 159.30229187]
[109.17143250 167.81297302]
[100.66082764 155.46165466]
[94.48503876 159.71720886]
[94.48503876 174.71720886]
[94.48503876 189.71720886]
[94.48503876 204.71720886]
[94.48503876 219.71720886]
[94.48503876 234.71720886]
[94.48503876 249.71720886]
[94.48503876 264.71719360]
[94.48503876 279.71719360]
[94.48503876 294.71719360]
[109.02492523 298.77853394]
[121.92930603 306.61303711]
[132.24060059 317.63937378]
[139.19361877 331.03927612]
[142.27241516 345.81845093]
[141.24851990 360.88012695]
[136.19792175 375.10665894]
[127.49539948 387.44232178]
[115.78673553 396.97174072]
[101.94079590 402.98776245]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 97]
[25 96]
[26 95]
[27 94]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
