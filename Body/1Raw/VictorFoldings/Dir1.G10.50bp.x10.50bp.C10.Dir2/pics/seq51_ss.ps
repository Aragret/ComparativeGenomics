%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCUCUCCAUGGGGGGGGGGGCAUUUGGUAUUUUCGUCUGGGGGGUAUGCACGCGAUAGCAUUGCGAGACxxxxxxxxxxCCCACUCCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUCCCCCCCCCCGAGCUCACCAU\
) } def
/len { sequence length } bind def

/coor [
[96.05361938 395.63739014]
[81.49375916 391.72918701]
[68.29261780 384.44955444]
[57.21768188 374.22167969]
[48.91284561 361.64019775]
[43.86093140 347.43664551]
[42.35565567 332.43670654]
[44.48453140 317.51254272]
[50.12379074 303.53173828]
[58.94557190 291.30718994]
[70.43698883 281.54959106]
[83.92994690 274.82623291]
[98.63998413 271.52801514]
[98.94795990 256.53118896]
[99.25594330 241.53434753]
[99.56391907 226.53750610]
[99.87189484 211.54066467]
[100.17987061 196.54383850]
[100.48785400 181.54699707]
[100.79582977 166.55015564]
[101.10380554 151.55331421]
[101.41178131 136.55647278]
[90.01898956 134.00367737]
[80.36555481 128.11553955]
[73.35482025 119.71747589]
[69.55262756 109.85269928]
[69.14553833 99.65610504]
[54.63691711 95.84825134]
[39.32464600 99.82881165]
[28.97846603 89.11406708]
[14.46984100 85.30620575]
[-0.03878441 81.49834442]
[-14.54741001 77.69049072]
[-26.09728050 83.52179718]
[-38.13162231 80.00811768]
[-44.31882095 69.56873322]
[-58.74620819 65.46379089]
[-73.17359161 61.35884476]
[-82.90615845 73.07196045]
[-96.56432343 79.80801392]
[-111.78173065 80.39994049]
[-125.92187500 74.74517822]
[-136.53488159 63.82346725]
[-141.78199768 49.52704239]
[-140.75411987 34.33285522]
[-133.62933350 20.87338638]
[-121.64204407 11.48057175]
[-106.86914062 7.78177309]
[-91.87010193 10.41782951]
[-79.24361420 18.93202782]
[-71.17727661 31.84923172]
[-69.06864929 46.93145752]
[-54.64126205 51.03640366]
[-40.21387863 55.14134979]
[-23.48403549 49.93011856]
[-10.73955154 63.18186188]
[3.76907444 66.98972321]
[18.27770042 70.79757690]
[32.78632355 74.60543823]
[47.06084442 70.35250854]
[58.44477463 81.33962250]
[72.95339966 85.14748383]
[87.39173126 71.83712769]
[106.93672180 69.93344116]
[113.76029968 56.57534409]
[120.58386993 43.21724701]
[127.40744781 29.85914612]
[134.23101807 16.50104713]
[141.05459595 3.14294791]
[128.93582153 -5.75263739]
[118.40103149 -16.47711182]
[109.72309875 -28.75268555]
[103.12681580 -42.26139450]
[98.78302765 -56.65332413]
[96.80425262 -71.55569458]
[97.24175262 -86.58249664]
[100.08418274 -101.34449768]
[105.25793457 -115.45932770]
[112.62898254 -128.56138611]
[122.00640106 -140.31129456]
[133.14729309 -150.40467834]
[145.76307678 -158.58013916]
[159.52699280 -164.62588501]
[174.08250427 -168.38531494]
[189.05258179 -169.76104736]
[204.04948425 -168.71746826]
[218.68475342 -165.28160095]
[232.57928467 -159.54243469]
[245.37319946 -151.64862061]
[256.73507690 -141.80465698]
[266.37063599 -130.26550293]
[274.03030396 -117.33004761]
[279.51562500 -103.33335876]
[282.68457031 -88.63798523]
[283.45504761 -73.62457275]
[281.80709839 -58.68200684]
[277.78338623 -44.19732666]
[271.48812866 -30.54572868]
[263.08444214 -18.08081818]
[252.78994751 -7.12546682]
[240.87133789 2.03655505]
[227.63729858 9.16792870]
[213.43064880 14.08393478]
[198.61935425 16.65723801]
[183.58708191 16.82118034]
[168.72319031 14.57151890]
[154.41270447 9.96652317]
[147.58912659 23.32462311]
[140.76554871 36.68272018]
[133.94197083 50.04082108]
[127.11839294 63.39892197]
[120.29482269 76.75701904]
[129.69981384 86.16171265]
[134.66831970 99.33954620]
[133.72523499 114.17668152]
[147.87254333 119.16200256]
[162.01986694 124.14732361]
[173.18902588 113.68270874]
[187.94506836 109.61849976]
[202.89715576 112.88863373]
[214.60940552 122.74164581]
[220.39042664 136.91339111]
[218.91178894 152.14730835]
[210.51325989 164.94274902]
[197.12477112 172.35942078]
[181.82290649 172.69302368]
[168.12390137 165.86689758]
[159.17570496 153.44964600]
[157.03454590 138.29464722]
[142.88722229 133.30932617]
[128.73991394 128.32400513]
[116.40862274 136.86445618]
[116.10064697 151.86129761]
[115.79266357 166.85813904]
[115.48468781 181.85496521]
[115.17671204 196.85180664]
[114.86873627 211.84864807]
[114.56076050 226.84548950]
[114.25277710 241.84231567]
[113.94480133 256.83917236]
[113.63682556 271.83599854]
[128.19905090 275.73535156]
[141.40460205 283.00701904]
[152.48573303 293.22814941]
[160.79820251 305.80456543]
[165.85871887 320.00509644]
[167.37309265 335.00408936]
[165.25326538 349.92956543]
[159.62248230 363.91375732]
[150.80810547 376.14364624]
[139.32261658 385.90823364]
[125.83373260 392.63977051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[27 62]
[28 61]
[30 59]
[31 58]
[32 57]
[33 56]
[36 54]
[37 53]
[38 52]
[64 112]
[65 111]
[66 110]
[67 109]
[68 108]
[69 107]
[115 131]
[116 130]
[117 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
