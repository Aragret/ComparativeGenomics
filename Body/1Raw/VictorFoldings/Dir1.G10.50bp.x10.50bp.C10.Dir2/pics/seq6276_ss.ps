%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAACCACAAAGGGGGGGGGGGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCxxxxxxxxxxCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCAUAUAUCCCCCCCCCCCCAAACAACAAAG\
) } def
/len { sequence length } bind def

/coor [
[86.43557739 675.15893555]
[72.94847870 668.42382812]
[61.46556473 658.65625000]
[52.65443802 646.42401123]
[47.02735901 632.43829346]
[44.91148758 617.51226807]
[46.42982864 602.51367188]
[51.49411392 588.31451416]
[59.80990982 575.74029541]
[70.89375305 565.52209473]
[84.10122681 558.25390625]
[98.66448975 554.35839844]
[98.36048126 539.36151123]
[98.05648041 524.36456299]
[97.75247192 509.36767578]
[97.44847107 494.37075806]
[97.14446259 479.37384033]
[96.84046173 464.37692261]
[96.53646088 449.37997437]
[96.23245239 434.38305664]
[95.92845154 419.38613892]
[95.62444305 404.38922119]
[95.32044220 389.39230347]
[87.32678986 376.82446289]
[94.78281403 362.87033081]
[94.47880554 347.87338257]
[94.02284241 332.88034058]
[93.41495514 317.89263916]
[92.80706787 302.90496826]
[92.19918823 287.91729736]
[79.33267212 285.07958984]
[67.52239990 279.21499634]
[57.46924210 270.66595459]
[49.77117538 259.93426514]
[44.88769150 247.65187073]
[43.11236572 234.54344177]
[44.55523682 221.38371277]
[49.13597488 208.95172119]
[56.58835602 197.98461914]
[66.47571564 189.13400269]
[78.21654510 182.92720032]
[91.11868286 179.73585510]
[91.42269135 164.73893738]
[91.72669220 149.74201965]
[92.03070068 134.74510193]
[92.33470154 119.74818420]
[92.63871002 104.75126648]
[90.66251373 102.34552002]
[89.54069519 99.15138245]
[89.57274628 95.49254608]
[90.93108368 91.80077362]
[93.62409973 88.56546021]
[95.14162445 73.64242554]
[96.05313873 58.67014313]
[96.35713959 43.67322540]
[96.66114807 28.67630577]
[96.96514893 13.67938709]
[97.26915741 -1.31753159]
[88.00716400 -17.20134735]
[97.59733582 -31.86820030]
[97.59733582 -46.86819839]
[97.59733582 -61.86819839]
[97.59733582 -76.86820221]
[95.21309662 -80.65699768]
[94.28971100 -84.60980988]
[94.69405365 -88.23597717]
[96.14404297 -91.14161682]
[98.25449371 -93.07064819]
[99.46926117 -108.02137756]
[100.68402863 -122.97210693]
[86.71530914 -128.77987671]
[75.22628784 -138.62150574]
[67.34254456 -151.53280640]
[63.83643723 -166.24885559]
[65.05146027 -181.32794189]
[70.86859131 -195.29277039]
[80.71791077 -206.77519226]
[93.63449097 -214.65028381]
[108.35289764 -218.14653015]
[123.43116760 -216.92140198]
[137.39208984 -211.09492493]
[148.86790466 -201.23789978]
[156.73434448 -188.31605530]
[160.22073364 -173.59530640]
[158.98548889 -158.51786804]
[153.14965820 -144.56085205]
[143.28495789 -133.09162903]
[130.35783386 -125.23385620]
[115.63475800 -121.75733948]
[114.41999054 -106.80661011]
[113.20522308 -91.85588074]
[112.59733582 -76.86820221]
[112.59733582 -61.86819839]
[112.59733582 -46.86819839]
[112.59733582 -31.86820030]
[120.94412231 -23.06198502]
[121.03203583 -10.52734375]
[112.26607513 -1.01352739]
[111.96206665 13.98339176]
[111.65806580 28.98031044]
[111.35406494 43.97723007]
[111.05005646 58.97414780]
[112.95452118 61.10679626]
[114.10311127 64.14421082]
[114.13852692 67.79267883]
[112.81998444 71.63179779]
[110.06466675 75.15995026]
[108.54714203 90.08298492]
[107.63562775 105.05526733]
[107.33161926 120.05218506]
[107.02761841 135.04910278]
[106.72361755 150.04602051]
[106.41960907 165.04293823]
[106.11560822 180.03985596]
[122.22647095 185.32577515]
[135.92669678 195.28572083]
[145.90335083 208.95172119]
[151.20451355 225.00128174]
[151.33004761 241.88536072]
[146.27879333 257.97796631]
[136.54760742 271.73260498]
[123.08255005 281.83099365]
[107.18686676 287.30941772]
[107.79474640 302.29708862]
[108.40263367 317.28475952]
[109.01051331 332.27246094]
[112.50228119 340.77825928]
[109.47572327 347.56939697]
[109.77973175 362.56631470]
[117.79512787 376.20684814]
[110.31735992 389.08831787]
[110.62136078 404.08523560]
[110.92536926 419.08215332]
[111.22937012 434.07907104]
[111.53337860 449.07598877]
[111.83737946 464.07290649]
[112.14138794 479.06982422]
[112.44538879 494.06674194]
[112.74939728 509.06365967]
[113.05339813 524.06060791]
[113.35739899 539.05749512]
[113.66140747 554.05444336]
[128.37057495 557.35656738]
[141.86174011 564.08349609]
[153.35057068 573.84411621]
[162.16911316 586.07098389]
[167.80467224 600.05328369]
[169.92959595 614.97802734]
[168.42034912 629.97753906]
[163.36466980 644.17980957]
[155.05650330 656.75903320]
[143.97885132 666.98394775]
[130.77578735 674.26013184]
[116.21488953 678.16442871]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 142]
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[25 129]
[26 128]
[27 126]
[28 125]
[29 124]
[30 123]
[42 114]
[43 113]
[44 112]
[45 111]
[46 110]
[47 109]
[52 108]
[53 107]
[54 102]
[55 101]
[56 100]
[57 99]
[58 98]
[60 95]
[61 94]
[62 93]
[63 92]
[68 91]
[69 90]
[70 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
