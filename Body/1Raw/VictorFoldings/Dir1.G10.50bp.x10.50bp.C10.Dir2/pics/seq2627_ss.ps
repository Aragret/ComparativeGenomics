%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUUAUUACGGGGGGGGGGCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAxxxxxxxxxxAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUUACUACUAACCCCCCCCCCUAAUUAUUAC\
) } def
/len { sequence length } bind def

/coor [
[92.38524628 383.39141846]
[78.53930664 377.37539673]
[66.83064270 367.84597778]
[58.12812042 355.51031494]
[53.07751846 341.28378296]
[52.05362701 326.22210693]
[55.13242340 311.44293213]
[62.08544540 298.04302979]
[72.39672852 287.01669312]
[85.30110931 279.18218994]
[99.84099579 275.12084961]
[99.84099579 260.12084961]
[99.84099579 245.12086487]
[99.84099579 230.12086487]
[99.84099579 215.12086487]
[99.84099579 200.12086487]
[99.84099579 185.12086487]
[99.84099579 170.12086487]
[99.84099579 155.12086487]
[99.84099579 140.12086487]
[92.11464691 138.38700867]
[85.05895233 135.21757507]
[78.92969513 130.80690002]
[73.93287659 125.39250946]
[70.21804047 119.24316406]
[67.87418365 112.64621735]
[53.05642700 114.97732544]
[38.23867035 117.30842590]
[23.42091179 119.63953400]
[17.29273605 133.79753113]
[4.47027349 142.37586975]
[-10.95487595 142.63723755]
[-24.06060219 134.49822998]
[-30.66491699 120.55597687]
[-28.66040611 105.25939178]
[-18.68670273 93.48957062]
[-3.92637873 89.00221252]
[10.91059971 93.22921753]
[21.08980751 104.82176971]
[35.90756607 102.49066925]
[50.72532272 100.15956116]
[65.54308319 97.82846069]
[67.97783661 87.09356689]
[73.66764069 77.67060852]
[82.03412628 70.51742554]
[92.22683716 66.36114502]
[103.20968628 65.62424469]
[107.81525421 51.34878159]
[112.42081451 37.07332230]
[111.31059265 32.72258759]
[111.64881134 28.66590500]
[113.15573883 25.33258057]
[115.43858337 23.01253510]
[118.04847717 21.83109474]
[123.82474518 7.98787594]
[129.60101318 -5.85534143]
[135.37728882 -19.69855881]
[131.19775391 -31.94541168]
[136.34301758 -43.37980270]
[147.54003906 -48.06317520]
[153.60305786 -61.78322983]
[159.66606140 -75.50328064]
[164.41987610 -89.73006439]
[167.82286072 -104.33895874]
[171.22584534 -118.94784546]
[174.62881470 -133.55674744]
[178.03179932 -148.16563416]
[164.43890381 -154.65002441]
[152.55802917 -163.90524292]
[142.94487000 -175.49839783]
[136.04905701 -188.88726807]
[132.19311523 -203.44561768]
[131.55737305 -218.49253845]
[134.17160034 -233.32426453]
[139.91351318 -247.24707031]
[148.51452637 -259.60977173]
[159.57238770 -269.83413696]
[172.56990051 -277.44198608]
[186.89912415 -282.07742310]
[201.88986206 -283.52368164]
[216.84097290 -281.71313477]
[231.05317688 -276.73043823]
[243.86174011 -268.80862427]
[254.66757202 -258.31823730]
[262.96527100 -245.74993896]
[268.36672974 -231.69154358]
[270.61932373 -216.80061340]
[269.61770630 -201.77360535]
[265.40869141 -187.31338501]
[258.18914795 -174.09625244]
[248.29678345 -162.74040222]
[236.19425964 -153.77699280]
[222.44761658 -147.62524414]
[207.69984436 -144.57287598]
[192.64068604 -144.76264954]
[189.23771667 -130.15376282]
[185.83473206 -115.54486847]
[182.43174744 -100.93597412]
[179.02877808 -86.32708740]
[191.12571716 -95.19635010]
[206.08757019 -96.26548767]
[219.32272339 -89.20639038]
[226.76947021 -76.18540955]
[226.14251709 -61.19852066]
[217.63424683 -48.84500122]
[203.85575867 -42.91599655]
[189.03547668 -45.23103333]
[177.72157288 -55.07966614]
[173.38612366 -69.44026947]
[167.32310486 -55.72021866]
[161.26010132 -42.00016403]
[164.10589600 -24.71140099]
[149.22050476 -13.92228699]
[143.44424438 -0.07906916]
[137.66796875 13.76414871]
[131.89169312 27.60736656]
[126.69627380 41.67888641]
[122.09071350 55.95434570]
[117.48514557 70.22980499]
[136.00086975 90.15314484]
[135.09815979 119.43779755]
[148.19131470 126.75690460]
[161.28446960 134.07600403]
[177.66560364 133.30764771]
[186.29266357 147.25419617]
[178.29084778 161.56863403]
[161.89175415 161.52549744]
[153.96536255 147.16915894]
[140.87220764 139.85006714]
[127.77905273 132.53096008]
[114.84099579 140.12086487]
[114.84099579 155.12086487]
[114.84099579 170.12086487]
[114.84099579 185.12086487]
[114.84099579 200.12086487]
[114.84099579 215.12086487]
[114.84099579 230.12086487]
[114.84099579 245.12086487]
[114.84099579 260.12084961]
[114.84099579 275.12084961]
[129.38088989 279.18218994]
[142.28526306 287.01669312]
[152.59655762 298.04302979]
[159.54957581 311.44293213]
[162.62837219 326.22210693]
[161.60447693 341.28378296]
[156.55387878 355.51031494]
[147.85134888 367.84597778]
[136.14268494 377.37539673]
[122.29675293 383.39141846]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 42]
[27 41]
[28 40]
[29 39]
[47 119]
[48 118]
[49 117]
[54 116]
[55 115]
[56 114]
[57 113]
[60 111]
[61 110]
[62 109]
[63 99]
[64 98]
[65 97]
[66 96]
[67 95]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
