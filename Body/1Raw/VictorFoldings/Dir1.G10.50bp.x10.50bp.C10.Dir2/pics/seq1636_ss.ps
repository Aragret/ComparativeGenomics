%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUACCCCAGGGGGGGGGGGAAAACUACGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGAUUUAGCAxxxxxxxxxxUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGACCCCCCCCCCUUCUACCCUAG\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 375.95828247]
[71.01555634 370.40527344]
[58.81560135 361.53894043]
[49.20452881 349.91662598]
[42.78650284 336.26892090]
[39.96496582 321.45373535]
[40.91728210 306.40237427]
[45.58358765 292.06094360]
[53.67055511 279.33099365]
[64.66983032 269.01269531]
[77.88998413 261.75473022]
[92.50000000 258.01330566]
[92.50000000 243.01329041]
[92.50000000 228.01329041]
[92.50000000 213.01329041]
[92.50000000 198.01329041]
[92.50000000 183.01329041]
[92.50000000 168.01329041]
[92.50000000 153.01329041]
[92.50000000 138.01329041]
[92.50000000 123.01329803]
[76.86981964 113.39156342]
[71.36956024 94.01325226]
[81.18621826 74.39696503]
[66.25212860 79.62034607]
[55.06178284 69.79052734]
[40.28966904 67.18579865]
[25.35558319 72.40917969]
[14.16523457 62.57936096]
[-0.60688168 59.97463608]
[-15.37899780 57.36991501]
[-20.39757538 59.20543289]
[-25.13292885 58.91901016]
[-28.81166649 56.98601151]
[-30.96833992 54.12314987]
[-45.55208969 50.61398315]
[-60.13583755 47.10481644]
[-74.71958923 43.59564972]
[-89.30333710 40.08648300]
[-103.88708496 36.57731628]
[-116.35385132 46.01732635]
[-131.96919250 45.18368912]
[-143.36003113 34.47002029]
[-145.14796448 18.93498421]
[-136.48878479 5.91375256]
[-121.47107697 1.55455244]
[-107.18576050 7.91566420]
[-100.37792206 21.99356651]
[-85.79416656 25.50273323]
[-71.21041870 29.01189995]
[-56.62667084 32.52106857]
[-42.04292297 36.03023529]
[-27.45917320 39.53940201]
[-12.77427483 42.59779739]
[1.99784100 45.20251846]
[16.76995659 47.80724335]
[30.64744186 42.39755630]
[42.89439011 52.41368484]
[57.66650772 55.01840973]
[71.54399109 49.60872269]
[83.79093933 59.62485123]
[95.66776276 50.46291351]
[96.89837646 35.51348114]
[98.12899017 20.56404495]
[99.35960388 5.61461115]
[100.59020996 -9.33482361]
[101.82082367 -24.28425789]
[87.61238098 -29.36191750]
[75.20282745 -37.94477081]
[65.43827057 -49.44763184]
[58.98446655 -63.08620834]
[56.28144836 -77.93060303]
[57.51351166 -92.96870422]
[62.59665680 -107.17518616]
[71.18430328 -119.58142090]
[82.69093323 -129.34153748]
[96.33200073 -135.79008484]
[111.17744446 -138.48736572]
[126.21506500 -137.24949646]
[140.41958618 -132.16085815]
[152.82249451 -123.56842804]
[162.57817078 -112.05802917]
[169.02145386 -98.41447449]
[171.71299744 -83.56799316]
[170.46931458 -68.53085327]
[165.37521362 -54.32830048]
[156.77798462 -41.92869949]
[145.26382446 -32.17746735]
[131.61778259 -25.73946571]
[116.77025604 -23.05364609]
[115.53964996 -8.10421085]
[114.30903625 6.84522343]
[113.07842255 21.79465866]
[111.84780884 36.74409103]
[110.61719513 51.69352722]
[121.16921234 62.35443497]
[136.13049316 61.27736664]
[147.30375671 47.85554504]
[164.38888550 46.65975952]
[176.82354736 57.94171906]
[191.75955200 56.55769348]
[206.69557190 55.17366791]
[221.63157654 53.78964233]
[224.94111633 39.02813721]
[232.65197754 26.01284218]
[244.00872803 16.01887321]
[257.89874268 10.02533150]
[272.96124268 8.61940670]
[287.72052002 11.93883514]
[300.73065186 19.65841293]
[310.71701050 31.02185631]
[316.70123291 44.91588974]
[318.09707642 59.97931671]
[314.76776123 74.73637390]
[307.03945923 87.74132538]
[295.66931152 97.72006226]
[281.77127075 103.69498444]
[266.70690918 105.08072662]
[251.95210266 101.74151611]
[238.95233154 94.00450897]
[228.98121643 82.62770081]
[223.01560974 68.72565460]
[208.07958984 70.10968018]
[193.14358521 71.49370575]
[178.20756531 72.87773132]
[171.41778564 83.87096405]
[159.34846497 89.00521088]
[146.33859253 86.19023132]
[137.20756531 76.23864746]
[122.24628448 77.31571960]
[127.24942780 106.38897705]
[107.50000000 123.01329803]
[107.50000000 138.01329041]
[107.50000000 153.01329041]
[107.50000000 168.01329041]
[107.50000000 183.01329041]
[107.50000000 198.01329041]
[107.50000000 213.01329041]
[107.50000000 228.01329041]
[107.50000000 243.01329041]
[107.50000000 258.01330566]
[122.11001587 261.75473022]
[135.33016968 269.01269531]
[146.32945251 279.33099365]
[154.41641235 292.06094360]
[159.08271790 306.40237427]
[160.03503418 321.45373535]
[157.21350098 336.26892090]
[150.79547119 349.91662598]
[141.18440247 361.53894043]
[128.98443604 370.40527344]
[114.96250153 375.95828247]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 61]
[26 59]
[27 58]
[29 56]
[30 55]
[31 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[62 95]
[63 94]
[64 93]
[65 92]
[66 91]
[67 90]
[96 130]
[97 129]
[100 125]
[101 124]
[102 123]
[103 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
