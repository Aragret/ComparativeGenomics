%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUUCUAGCCGGGGGGGGGGACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAAxxxxxxxxxxCCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACAGCUCUAAGCCUCCCCCCCCCCCCUUAUUCGAGCC\
) } def
/len { sequence length } bind def

/coor [
[86.44118500 448.91302490]
[73.52202606 441.15466309]
[62.74073029 430.62564087]
[54.67871475 417.89376831]
[49.77075577 403.64562988]
[48.28153229 388.64968872]
[50.29135513 373.71456909]
[55.69184113 359.64575195]
[64.19174194 347.20196533]
[75.33267975 337.05422974]
[88.51382446 329.74984741]
[103.02434540 325.68270874]
[102.40851593 310.69537354]
[101.79269409 295.70800781]
[101.17686462 280.72064209]
[100.56104279 265.73330688]
[99.94521332 250.74594116]
[99.32939148 235.75859070]
[98.71356201 220.77124023]
[98.09774017 205.78388977]
[97.48191071 190.79653931]
[96.86608887 175.80917358]
[86.68146515 161.55021667]
[95.27969360 145.29902649]
[94.35628510 130.32748413]
[79.69961548 123.22718048]
[70.70107269 109.65299988]
[69.86872864 93.38833618]
[77.43457794 78.96646881]
[69.27790833 66.37802887]
[64.51531982 63.95460892]
[61.49905014 60.29294968]
[60.40797806 56.28306961]
[61.03451920 52.75395203]
[53.66828156 39.68725586]
[46.30204010 26.62056160]
[38.93580246 13.55386734]
[23.97813034 9.20578384]
[16.69385529 -4.15063810]
[20.93126869 -18.38369560]
[13.56502914 -31.45038986]
[3.45959449 -42.53552628]
[-8.87168980 -51.07598495]
[-21.20297241 -59.61644363]
[-33.53425598 -68.15689850]
[-46.38201141 -66.62754822]
[-56.48884583 -74.04531860]
[-58.73242950 -85.97127533]
[-70.88576508 -94.76312256]
[-83.03909302 -103.55496216]
[-98.60202026 -100.80342865]
[-111.50422668 -109.93078613]
[-114.09106445 -125.52192688]
[-104.82781219 -138.32691956]
[-89.21018982 -140.74876404]
[-76.50385284 -131.35064697]
[-74.24725342 -115.70829773]
[-62.09392166 -106.91645050]
[-49.94058609 -98.12461090]
[-32.43733215 -97.29962158]
[-24.99379730 -80.48818207]
[-12.66251469 -71.94772339]
[-0.33123046 -63.40726852]
[12.00005341 -54.86680984]
[5.82721806 -68.53780365]
[3.33140612 -83.32871246]
[4.67650557 -98.26828003]
[9.77418995 -112.37549591]
[18.28971863 -124.72400665]
[29.66391563 -134.50294495]
[43.14989090 -141.07017517]
[57.86208344 -143.99444580]
[72.83441162 -143.08375549]
[87.08371735 -138.39787292]
[99.67430115 -130.24452209]
[109.77941132 -119.15909576]
[116.73548889 -105.86951447]
[120.08576202 -91.24845123]
[119.61022949 -76.25598907]
[115.34011841 -61.87662125]
[107.55583191 -49.05457687]
[96.76852417 -38.63181686]
[83.68654633 -31.29275322]
[69.16893005 -27.51931190]
[54.16898346 -27.55927467]
[39.67168045 -31.41002083]
[26.63172340 -38.81663132]
[33.99796295 -25.74993515]
[48.36904526 -22.00725937]
[56.02560043 -8.86070728]
[52.00249481 6.18762779]
[59.36873627 19.25432205]
[66.73497772 32.32101822]
[74.10121155 45.38771057]
[81.86634827 58.22136688]
[90.02301788 70.80980682]
[105.03631592 69.56575775]
[118.84851837 75.57990265]
[128.16557312 87.41794586]
[142.93769836 84.81322479]
[157.70980835 82.20850372]
[172.48191833 79.60378265]
[187.25404358 76.99906158]
[202.02615356 74.39433289]
[210.08155823 64.26940918]
[222.48292542 62.43158340]
[232.46702576 69.32939911]
[247.28950500 67.02852631]
[257.88183594 54.97938156]
[273.89892578 55.89218140]
[283.05377197 69.06670380]
[278.32360840 84.39658356]
[263.33700562 90.12203979]
[249.59037781 81.85100555]
[234.76789856 84.15187836]
[221.74751282 95.87851715]
[204.63087463 89.16645050]
[189.85876465 91.77117157]
[175.08665466 94.37590027]
[160.31452942 96.98062134]
[145.54241943 99.58534241]
[130.77029419 102.19006348]
[127.52313232 113.93143463]
[119.98371887 123.50018311]
[109.32783508 129.40406799]
[110.25124359 144.37561035]
[119.40389252 153.52070618]
[119.83245850 166.05018616]
[111.85343933 175.19335938]
[112.46926880 190.18070984]
[113.08509064 205.16806030]
[113.70092010 220.15541077]
[114.31674194 235.14276123]
[114.93257141 250.13012695]
[115.54839325 265.11746216]
[116.16422272 280.10482788]
[116.78004456 295.09219360]
[117.39587402 310.07952881]
[118.01169586 325.06689453]
[132.80697632 327.92984009]
[146.54293823 334.12823486]
[158.47885132 343.32772827]
[167.97099304 355.03225708]
[174.50749207 368.61056519]
[177.73582458 383.33044434]
[177.48190308 398.39804077]
[173.75941467 413.00076294]
[166.76911926 426.35113525]
[156.88796997 437.72918701]
[144.64886475 446.52127075]
[130.71183777 452.25329590]
[115.82850647 454.61611938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 126]
[25 125]
[29 96]
[30 95]
[34 94]
[35 93]
[36 92]
[37 91]
[40 88]
[41 87]
[42 64]
[43 63]
[44 62]
[45 61]
[48 59]
[49 58]
[50 57]
[99 122]
[100 121]
[101 120]
[102 119]
[103 118]
[104 117]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
