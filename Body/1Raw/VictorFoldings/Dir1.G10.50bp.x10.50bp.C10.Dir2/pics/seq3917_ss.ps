%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUCACAACACAAGGGGGGGGGGGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAAUAUGAUUxxxxxxxxxxACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCUCUACAUAUCCCCCCCCCCUUACCACAACACAA\
) } def
/len { sequence length } bind def

/coor [
[127.87984467 493.20443726]
[113.18051147 489.97708130]
[99.39337158 483.94375610]
[87.04835510 475.33639526]
[76.61997986 464.48580933]
[68.50909424 451.80905151]
[63.02743912 437.79342651]
[60.38572693 422.97766113]
[60.68549728 407.93118286]
[63.91522598 393.23236084]
[69.95077515 379.44619751]
[78.56014252 367.10256958]
[89.41242218 356.67596436]
[102.09046936 348.56710815]
[116.10697937 343.08773804]
[130.92320251 340.44842529]
[131.21955872 325.45135498]
[131.51591492 310.45428467]
[131.81227112 295.45721436]
[132.10862732 280.46014404]
[132.40498352 265.46307373]
[132.70133972 250.46598816]
[132.99769592 235.46891785]
[133.29405212 220.47184753]
[133.59040833 205.47477722]
[133.88676453 190.47770691]
[130.50769043 175.86326599]
[123.65825653 162.51840210]
[109.15584564 166.21505737]
[94.19448090 166.59249878]
[79.52413177 163.63177490]
[65.88019562 157.48132324]
[53.94661713 148.44946289]
[44.32159805 136.98892212]
[37.48762512 123.67419434]
[33.78727341 109.17272949]
[33.40602875 94.21145630]
[36.36300659 79.54035187]
[42.50997543 65.89485168]
[51.53880310 53.95896912]
[62.99689102 44.33103180]
[56.14745331 30.98617554]
[49.29801178 17.64131927]
[42.44857407 4.29646206]
[32.21498871 -6.67047405]
[19.37532043 -14.42566299]
[6.53565407 -22.18085289]
[-6.30401278 -29.93604088]
[-19.71541023 -22.45072174]
[-35.07243729 -22.68998909]
[-48.24413300 -30.58948326]
[-55.68737793 -44.02427673]
[-55.39997482 -59.38048172]
[-47.45923615 -72.52735138]
[-34.00117493 -79.92844391]
[-18.64594841 -79.59291077]
[-5.52403307 -71.61100006]
[1.83484197 -58.12980652]
[1.45117617 -42.77570724]
[14.29084301 -35.02051926]
[27.13051033 -27.26532936]
[39.97017670 -19.51014137]
[32.92941284 -32.75505066]
[28.74188805 -47.15868378]
[27.58410454 -62.11393356]
[29.50486183 -76.99044800]
[34.42320251 -91.16119385]
[42.13182068 -104.02886963]
[52.30580139 -115.05112457]
[64.51631927 -123.76337433]
[78.24870300 -129.79840088]
[92.92414856 -132.90182495]
[107.92409515 -132.94285583]
[122.61629486 -129.91975403]
[136.38148499 -123.95993042]
[148.63948059 -115.31459808]
[158.87359619 -104.34815979]
[166.65249634 -91.52284241]
[171.64826965 -77.37921143]
[173.65037537 -62.51342773]
[172.57441711 -47.55206680]
[168.46574402 -33.12574387]
[161.49752808 -19.84251976]
[151.96348572 -8.26227283]
[140.26547241 1.12689459]
[126.89655304 7.92923546]
[112.42020416 11.85803604]
[97.44660950 12.74769783]
[82.60689545 10.56072426]
[68.52654266 5.38929319]
[55.79343033 -2.55297637]
[62.64286804 10.79187965]
[69.49230957 24.13673592]
[76.34174347 37.48159409]
[90.84415436 33.78493500]
[105.80551910 33.40750504]
[120.47586823 36.36822510]
[134.11981201 42.51867294]
[146.05339050 51.55054092]
[155.67840576 63.01108551]
[162.51237488 76.32580566]
[166.21272278 90.82727051]
[166.59396362 105.78854370]
[163.63699341 120.45964813]
[157.49002075 134.10514832]
[148.46119690 146.04103088]
[137.00311279 155.66897583]
[143.85255432 169.01382446]
[144.71667480 154.03874207]
[148.95095825 139.64877319]
[156.33520508 126.59224701]
[166.48541260 115.54810333]
[178.87377930 107.09065247]
[192.85607910 101.65969086]
[207.70521545 99.53763580]
[222.64901733 100.83483887]
[236.91038513 105.48384857]
[249.74771118 113.24289703]
[260.49343872 123.70851898]
[268.58880615 136.33648682]
[273.61279297 150.47010803]
[275.30413818 165.37445068]
[273.57495117 180.27444458]
[268.51513672 194.39527893]
[260.38775635 207.00265503]
[249.61549377 217.44097900]
[236.75851440 225.16743469]
[222.48539734 229.78022766]
[207.53834534 231.03950500]
[192.69464111 228.87977600]
[178.72616577 223.41334534]
[166.35931396 214.92448425]
[156.23716736 203.85461426]
[148.88385010 190.77406311]
[148.58747864 205.77113342]
[148.29112244 220.76820374]
[147.99476624 235.76527405]
[147.69841003 250.76234436]
[147.40205383 265.75942993]
[147.10569763 280.75650024]
[146.80934143 295.75357056]
[146.51298523 310.75064087]
[146.21662903 325.74771118]
[145.92027283 340.74478149]
[160.62065125 343.96737671]
[174.40974426 349.99621582]
[186.75753784 358.59960938]
[197.18942261 369.44680786]
[205.30442810 382.12091064]
[210.79061890 396.13476562]
[213.43711853 410.94970703]
[213.14222717 425.99627686]
[209.91725159 440.69613647]
[203.88616943 454.48425293]
[195.28079224 466.83065796]
[184.43188477 477.26077271]
[171.75646973 485.37371826]
[157.74172974 490.85766602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 144]
[17 143]
[18 142]
[19 141]
[20 140]
[21 139]
[22 138]
[23 137]
[24 136]
[25 135]
[26 134]
[27 108]
[28 107]
[41 94]
[42 93]
[43 92]
[44 91]
[45 62]
[46 61]
[47 60]
[48 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
