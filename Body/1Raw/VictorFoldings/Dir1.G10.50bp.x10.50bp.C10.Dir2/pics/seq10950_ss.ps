%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACACUAUGCUGGGGGGGGGGUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUxxxxxxxxxxAAUCAAAGACGCCCUCGGCUUACUUCUCUUCCUUCUCUCCUUAAUGACAUCCCCCCCCCCUAACACUAUUCU\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 392.12222290]
[70.87159729 386.96722412]
[58.28185654 378.68499756]
[47.94191742 367.72222900]
[40.40940475 354.67010498]
[36.09054184 340.23251343]
[35.21823120 325.18804932]
[37.83952332 310.34805298]
[43.81304932 296.51281738]
[52.81666565 284.42846680]
[64.36482239 274.74667358]
[77.83473969 267.98959351]
[92.50000000 264.52163696]
[92.50000000 249.52163696]
[92.50000000 234.52163696]
[92.50000000 219.52163696]
[92.50000000 204.52163696]
[92.50000000 189.52163696]
[92.50000000 174.52163696]
[92.50000000 159.52163696]
[92.50000000 144.52163696]
[92.50000000 129.52163696]
[81.39228821 124.11492920]
[73.34542847 114.74146271]
[69.68309021 102.94311523]
[54.85606766 100.67169952]
[40.02904129 98.40028381]
[25.20201874 96.12886810]
[10.37499332 93.85745239]
[6.26884651 95.64047241]
[2.22178721 95.95464325]
[-1.30133522 95.00585938]
[-3.95389342 93.13259888]
[-5.54110050 90.75437164]
[-16.94841766 96.85584259]
[-29.06088257 93.62889099]
[-35.49383545 83.34126282]
[-50.01499176 79.58147430]
[-64.53614807 75.82168579]
[-79.09465790 72.20924377]
[-93.68903351 68.74452972]
[-108.28340912 65.27981567]
[-123.83184052 70.49310303]
[-135.94004822 59.43312073]
[-132.15216064 43.47743607]
[-116.36482239 39.03988647]
[-104.81869507 50.68544006]
[-90.22431946 54.15015793]
[-75.62994385 57.61487198]
[-68.35276031 56.09098434]
[-60.77635956 61.30052948]
[-46.25520325 65.06031799]
[-31.73404694 68.82010651]
[-15.13160229 63.21236038]
[-2.07638407 76.16000366]
[12.64640999 79.03042603]
[27.47343445 81.30184174]
[42.30046082 83.57325745]
[57.12748337 85.84467316]
[71.95450592 88.11608887]
[80.94239044 72.81468964]
[98.10206604 64.10977173]
[95.38098907 49.35864258]
[80.36618042 47.61305618]
[66.53363800 41.51781082]
[55.11332703 31.61488342]
[47.12073898 18.78484154]
[43.26657486 4.16852093]
[43.89353561 -10.93440342]
[48.94588089 -25.18099022]
[57.97434998 -37.30444336]
[70.17614746 -46.22675323]
[84.46629333 -51.15455246]
[99.57411194 -51.64966965]
[114.15623474 -47.66807175]
[126.91602325 -39.56380463]
[136.71888733 -28.05749321]
[142.69317627 -14.17227173]
[144.30763245 0.85719615]
[141.41873169 15.69450092]
[134.28332520 29.02031898]
[123.53590393 39.64972687]
[110.13211060 46.63756561]
[112.85318756 61.38869476]
[125.96839142 68.66822052]
[139.92619324 63.17463303]
[153.88400269 57.68104553]
[166.19546509 49.11202240]
[176.19470215 37.93100739]
[186.19395447 26.74999237]
[189.62599182 11.30551910]
[203.87757874 6.97641039]
[213.87683105 -4.20460367]
[216.70072937 -20.35878563]
[232.19343567 -25.73541260]
[244.41737366 -14.80347252]
[240.79760742 1.19119275]
[225.05784607 5.79464245]
[215.05859375 16.97565651]
[212.34178162 31.62038803]
[197.37496948 36.74923706]
[187.37571716 47.93025208]
[177.37648010 59.11126709]
[191.68952942 54.62389374]
[206.66510010 53.76805878]
[221.39617920 56.59559631]
[234.99061584 62.93525696]
[246.62506104 72.40308380]
[255.59487915 84.42566681]
[261.35681152 98.27485657]
[263.56188965 113.11188507]
[262.07659912 128.03816223]
[256.99084473 142.14968872]
[248.61267090 154.59181213]
[237.44949341 164.61096191]
[224.17739868 171.60035706]
[209.60020447 175.13665771]
[194.60078430 175.00573730]
[180.08755493 171.21546936]
[166.93949890 163.99545288]
[155.95292664 153.78295898]
[147.79322815 141.19647217]
[142.95460510 126.99831390]
[141.73010254 112.04838562]
[144.19386292 97.25210571]
[150.19668579 83.50560760]
[159.37759399 71.63885498]
[145.41978455 77.13244629]
[131.46197510 82.62602997]
[134.53047180 98.34445190]
[130.46508789 113.19513702]
[120.63703918 124.23303986]
[107.50000000 129.52163696]
[107.50000000 144.52163696]
[107.50000000 159.52163696]
[107.50000000 174.52163696]
[107.50000000 189.52163696]
[107.50000000 204.52163696]
[107.50000000 219.52163696]
[107.50000000 234.52163696]
[107.50000000 249.52163696]
[107.50000000 264.52163696]
[122.16526031 267.98959351]
[135.63517761 274.74667358]
[147.18333435 284.42846680]
[156.18695068 296.51281738]
[162.16047668 310.34805298]
[164.78176880 325.18804932]
[163.90945435 340.23251343]
[159.59059143 354.67010498]
[152.05809021 367.72222900]
[141.71813965 378.68499756]
[129.12840271 386.96722412]
[114.96779633 392.12222290]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[25 60]
[26 59]
[27 58]
[28 57]
[29 56]
[34 55]
[37 53]
[38 52]
[39 51]
[40 49]
[41 48]
[42 47]
[62 84]
[63 83]
[85 129]
[86 128]
[87 127]
[88 103]
[89 102]
[90 101]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
