%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAACCCUCGGGGGGGGGGUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGxxxxxxxxxxCUACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCCCCCCCCCCCAUAACCCUC\
) } def
/len { sequence length } bind def

/coor [
[92.35213470 363.83639526]
[78.50619507 357.82034302]
[66.79753113 348.29092407]
[58.09500885 335.95526123]
[53.04440689 321.72875977]
[52.02051544 306.66705322]
[55.09931564 291.88790894]
[62.05233765 278.48797607]
[72.36362457 267.46163940]
[85.26800537 259.62713623]
[99.80789185 255.56582642]
[99.80789185 240.56582642]
[99.80789185 225.56582642]
[99.80789185 210.56582642]
[99.80789185 195.56582642]
[99.80789185 180.56582642]
[99.80789185 165.56582642]
[99.80789185 150.56582642]
[99.80789185 135.56582642]
[99.80789185 120.56582642]
[87.72789764 111.67347717]
[73.40530396 116.13028717]
[59.08270645 120.58710480]
[44.76010895 125.04392242]
[30.43751144 129.50073242]
[27.13525009 144.50042725]
[16.76372337 155.82858276]
[2.11281681 160.43797302]
[-12.87644672 157.08871460]
[-24.17203140 146.68173218]
[-28.73548126 132.01644897]
[-25.33925247 117.03775024]
[-14.89691162 105.77484131]
[-0.21739736 101.25738525]
[14.75057507 104.70054626]
[25.98069572 115.17813873]
[40.30329514 110.72132111]
[54.62589264 106.26451111]
[68.94848633 101.80769348]
[83.27108765 97.35087585]
[83.27108765 82.35087585]
[68.94848633 77.89406586]
[54.62589264 73.43724823]
[37.70556259 74.50439453]
[31.99610710 58.54073334]
[45.75536728 48.63522339]
[59.08270645 59.11465073]
[73.40530396 63.57146454]
[87.72789764 68.02828217]
[78.93096161 55.87863541]
[83.74074554 41.67067719]
[98.10892487 37.36305618]
[109.94198608 46.58143616]
[109.28017426 61.56690216]
[118.78853607 49.96556091]
[128.29689026 38.36421967]
[137.80525208 26.76288033]
[146.05754089 14.23691750]
[152.96453857 0.92176211]
[159.87153625 -12.39339352]
[166.77853394 -25.70854950]
[173.68553162 -39.02370453]
[180.59252930 -52.33885956]
[187.49952698 -65.65401459]
[175.20433044 -74.28601074]
[164.16940308 -84.47982788]
[154.59169006 -96.05353546]
[146.64210510 -108.80060577]
[140.46253967 -122.49353790]
[136.16325378 -136.88796997]
[133.82098389 -151.72700500]
[133.47753906 -166.74584961]
[135.13902283 -181.67645264]
[138.77581787 -196.25236511]
[144.32298279 -210.21345520]
[151.68154907 -223.31059265]
[160.72019958 -235.31002808]
[171.27760315 -245.99761963]
[183.16537476 -255.18263245]
[196.17134094 -262.70114136]
[210.06341553 -268.41900635]
[224.59365845 -272.23413086]
[239.50277710 -274.07849121]
[254.52470398 -273.91912842]
[269.39132690 -271.75888062]
[283.83737183 -267.63632202]
[297.60501099 -261.62503052]
[310.44851685 -253.83226013]
[322.13876343 -244.39709473]
[332.46704102 -233.48793030]
[341.24905396 -221.29942322]
[348.32809448 -208.04911804]
[353.57781982 -193.97348022]
[356.90454102 -179.32368469]
[358.24890137 -164.36119080]
[357.58688354 -149.35302734]
[354.93029785 -134.56701660]
[350.32659912 -120.26703644]
[343.85791016 -106.70829010]
[335.63967896 -94.13275909]
[325.81857300 -82.76484680]
[314.56985474 -72.80744934]
[302.09426880 -64.43825531]
[288.61447144 -57.80662155]
[274.37103271 -53.03090286]
[259.61810303 -50.19632339]
[244.61901855 -49.35347748]
[229.64140320 -50.51739502]
[214.95259094 -53.66731644]
[200.81468201 -58.74701691]
[193.90768433 -45.43186188]
[187.00068665 -32.11670685]
[180.09368896 -18.80154991]
[173.18669128 -5.48639488]
[166.27969360 7.82876062]
[159.37269592 21.14391708]
[173.07652283 15.04432774]
[188.00796509 16.47690773]
[200.30204773 25.07083702]
[206.77648926 38.60160065]
[205.75538635 53.56680679]
[197.50308228 66.09275818]
[184.15563965 72.93714142]
[169.16799927 72.32831573]
[156.41966248 64.42387390]
[149.21052551 51.26985550]
[149.40660095 36.27123642]
[139.89823914 47.87257767]
[130.38987732 59.47391891]
[120.88151550 71.07526398]
[114.80789185 120.56582642]
[114.80789185 135.56582642]
[114.80789185 150.56582642]
[114.80789185 165.56582642]
[114.80789185 180.56582642]
[114.80789185 195.56582642]
[114.80789185 210.56582642]
[114.80789185 225.56582642]
[114.80789185 240.56582642]
[114.80789185 255.56582642]
[129.34777832 259.62713623]
[142.25215149 267.46163940]
[152.56344604 278.48797607]
[159.51646423 291.88790894]
[162.59526062 306.66705322]
[161.57136536 321.72875977]
[156.52076721 335.95526123]
[147.81823730 348.29092407]
[136.10958862 357.82034302]
[122.26364136 363.83639526]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[41 49]
[42 48]
[43 47]
[54 130]
[55 129]
[56 128]
[57 127]
[58 116]
[59 115]
[60 114]
[61 113]
[62 112]
[63 111]
[64 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
