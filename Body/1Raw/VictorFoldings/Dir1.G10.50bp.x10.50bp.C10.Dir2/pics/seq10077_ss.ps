%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUAGUAGGGGGGGGGGGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCUAGGxxxxxxxxxxUCUAAUUUAAACUAUUCUCUGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCCCCCCCCCCCACCCAAGUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 378.07766724]
[71.19830322 372.06164551]
[59.48964310 362.53222656]
[50.78712082 350.19653320]
[45.73651886 335.97003174]
[44.71262741 320.90835571]
[47.79142761 306.12918091]
[54.74444962 292.72924805]
[65.05573273 281.70291138]
[77.96011353 273.86840820]
[92.50000000 269.80709839]
[92.50000000 254.80709839]
[92.50000000 239.80709839]
[92.50000000 224.80709839]
[92.50000000 209.80709839]
[92.50000000 194.80709839]
[92.50000000 179.80709839]
[92.50000000 164.80709839]
[92.50000000 149.80709839]
[92.50000000 134.80709839]
[92.50000000 119.80709839]
[82.51039124 111.94507599]
[78.82164764 99.77967834]
[82.76268005 87.69365692]
[92.91368866 80.04116058]
[93.22573853 65.04440308]
[93.53779602 50.04764938]
[92.60217285 35.07685852]
[90.42533112 20.23565483]
[88.24849701 5.39444876]
[86.07165527 -9.44675636]
[83.89482117 -24.28796196]
[81.71798706 -39.12916946]
[66.74278259 -38.13751221]
[51.73612976 -38.33877945]
[36.79290771 -39.73169708]
[22.00759506 -42.30746460]
[7.47366619 -46.04979324]
[-6.71698666 -50.93502045]
[-20.47464561 -56.93226242]
[-33.71232986 -64.00360107]
[-46.34634018 -72.10433197]
[-58.29680634 -81.18323517]
[-69.48816681 -91.18290710]
[-79.84967041 -102.04013062]
[-89.31580353 -113.68626404]
[-97.82672119 -126.04767609]
[-105.32861328 -139.04620361]
[-111.77404785 -152.59967041]
[-117.12226868 -166.62239075]
[-121.33946991 -181.02569580]
[-124.39899445 -195.71853638]
[-126.28147888 -210.60800171]
[-126.97504425 -225.59996033]
[-126.47528839 -240.59963989]
[-124.78537750 -255.51220703]
[-121.91600037 -270.24334717]
[-117.88529205 -284.69995117]
[-112.71873474 -298.79061890]
[-106.44899750 -312.42623901]
[-99.11572266 -325.52066040]
[-90.76526642 -337.99099731]
[-81.45043182 -349.75851440]
[-71.23011017 -360.74871826]
[-60.16891098 -370.89221191]
[-48.33677292 -380.12478638]
[-35.80850601 -388.38812256]
[-22.66331482 -395.62994385]
[-8.98431110 -401.80447388]
[5.14202261 -406.87268066]
[19.62637329 -410.80255127]
[34.37716293 -413.56915283]
[49.30113602 -415.15509033]
[64.30393219 -415.55029297]
[79.29070282 -414.75222778]
[94.16668701 -412.76602173]
[108.83784485 -409.60415649]
[123.21140289 -405.28665161]
[137.19650269 -399.84082031]
[150.70471191 -393.30105591]
[163.65063477 -385.70877075]
[175.95242310 -377.11187744]
[187.53228760 -367.56478882]
[198.31703186 -357.12786865]
[208.23844910 -345.86709595]
[217.23382568 -333.85363770]
[225.24630737 -321.16345215]
[232.22520447 -307.87680054]
[238.12640381 -294.07766724]
[242.91259766 -279.85330200]
[246.55352783 -265.29364014]
[249.02616882 -250.49073792]
[250.31489563 -235.53817749]
[250.41156006 -220.53048706]
[249.31555176 -205.56256104]
[247.03378296 -190.72903442]
[243.58070374 -176.12367249]
[238.97811890 -161.83885193]
[233.25515747 -147.96484375]
[226.44798279 -134.58940125]
[218.59963989 -121.79708099]
[209.75975037 -109.66874695]
[199.98420715 -98.28108978]
[189.33480835 -87.70610809]
[177.87887573 -78.01065826]
[165.68884277 -69.25603485]
[152.84179688 -61.49760056]
[139.41894531 -54.78439331]
[125.50515747 -49.15886688]
[111.18840027 -44.65658188]
[96.55918884 -41.30600357]
[98.73602295 -26.46479988]
[100.91286469 -11.62359333]
[103.08969879 3.21761179]
[105.26654053 18.05881691]
[107.44337463 32.90002441]
[116.02065277 20.59432411]
[130.13954163 15.52904224]
[144.58338928 19.57569885]
[154.01547241 31.23913574]
[154.95083618 46.20994186]
[147.04386902 58.95670700]
[133.21606445 64.76975250]
[118.57648468 61.50127411]
[108.53455353 50.35970688]
[108.22249603 65.35646057]
[107.91043854 80.35321808]
[119.59657288 91.96597290]
[119.42519379 108.43997192]
[107.50000000 119.80709839]
[107.50000000 134.80709839]
[107.50000000 149.80709839]
[107.50000000 164.80709839]
[107.50000000 179.80709839]
[107.50000000 194.80709839]
[107.50000000 209.80709839]
[107.50000000 224.80709839]
[107.50000000 239.80709839]
[107.50000000 254.80709839]
[107.50000000 269.80709839]
[122.03988647 273.86840820]
[134.94427490 281.70291138]
[145.25555420 292.72924805]
[152.20857239 306.12918091]
[155.28736877 320.90835571]
[154.26348877 335.97003174]
[149.21287537 350.19653320]
[140.51036072 362.53222656]
[128.80169678 372.06164551]
[114.95575714 378.07766724]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 127]
[26 126]
[27 125]
[28 116]
[29 115]
[30 114]
[31 113]
[32 112]
[33 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
