%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAACCCAAGGGGGGGGGGGUCAAUAGAAGCCGGCGUAAAGAGUGUUUUAGAUCACCCCCUCCCCAAUAAxxxxxxxxxxUCAUCUUCACAAUUCUAAUUCUACUGACUAUCCUAGAAAUCGCUGUCGCCCCCCCCCCCCUUAAUCCAAG\
) } def
/len { sequence length } bind def

/coor [
[68.62501526 503.38488770]
[56.53007889 494.35079956]
[47.32194138 482.38781738]
[41.68391037 468.38369751]
[40.03436279 453.37765503]
[42.49570465 438.48321533]
[48.88529205 424.80566406]
[58.72897339 413.35992432]
[71.29627991 404.99539185]
[85.65464020 400.33276367]
[85.03066254 385.34573364]
[84.40668488 370.35873413]
[83.78270721 355.37170410]
[83.15872955 340.38470459]
[82.53475189 325.39767456]
[81.91077423 310.41067505]
[81.28679657 295.42364502]
[80.66281891 280.43664551]
[80.03884125 265.44961548]
[79.41486359 250.46260071]
[78.79088593 235.47558594]
[66.64611816 244.27925110]
[52.13550568 240.47897339]
[45.86513519 226.85243225]
[52.41813660 213.35954285]
[67.00479889 209.86250305]
[78.96315002 218.91679382]
[79.89877319 203.94599915]
[77.79418182 201.04115295]
[77.02831268 196.95272827]
[78.15076447 192.33834839]
[81.38858795 188.07971191]
[83.25620270 173.19642639]
[85.12381744 158.31314087]
[86.99143219 143.42987061]
[88.85903931 128.54658508]
[73.58120728 115.52661133]
[69.63952637 95.84425354]
[78.72536469 77.94510651]
[71.27045441 64.92879486]
[63.81554031 51.91248703]
[56.36063004 38.89617538]
[45.58982468 28.45636368]
[32.34723663 21.41123009]
[19.10465240 14.36609459]
[5.21595573 21.28590202]
[-10.08199501 18.68737602]
[-20.90682602 7.56970263]
[-23.09616661 -7.79214621]
[-15.80817509 -21.49122620]
[-1.84522927 -28.25996208]
[13.42363167 -25.49563408]
[24.12722015 -14.26118660]
[26.14978600 1.12350893]
[39.39237213 8.16864395]
[52.63495636 15.21377850]
[45.06401825 2.26461506]
[40.39534760 -11.99033260]
[38.83911133 -26.90938568]
[40.46535492 -41.82096863]
[45.20088196 -56.05384445]
[52.83251572 -68.96733093]
[63.01673126 -79.98013306]
[75.29508972 -88.59651184]
[89.11487579 -94.42860413]
[103.85401917 -97.21389008]
[118.84902954 -96.82698822]
[133.42491150 -93.28530884]
[146.92555237 -86.74828339]
[158.74322510 -77.51016998]
[168.34594727 -65.98681641]
[175.30148315 -52.69695282]
[179.29670715 -38.23880005]
[180.15179443 -23.26319122]
[177.82824707 -8.44424725]
[172.43066406 5.55096769]
[164.20201111 18.09246635]
[153.51268005 28.61569595]
[140.84387207 36.64696503]
[126.76585388 41.82474136]
[111.91234589 43.91595840]
[96.95196533 42.82647705]
[82.55814362 38.60534286]
[69.37693787 31.44126701]
[76.83184814 44.45757675]
[84.28675842 57.47388458]
[91.74166870 70.49019623]
[98.14568329 69.41258240]
[104.63298035 69.70867920]
[110.91220093 71.36518860]
[116.70134735 74.30771637]
[121.74041748 78.40410614]
[125.80310822 83.47038269]
[140.02989197 78.71656799]
[154.25666809 73.96275330]
[168.48344421 69.20893860]
[182.71022034 64.45512390]
[183.08833313 49.30148315]
[188.62937927 35.19217300]
[198.66424561 23.83096123]
[211.98118591 16.58976936]
[226.97212219 14.34300804]
[241.82679749 17.36198235]
[254.75146484 25.28213882]
[264.18539429 37.14707947]
[268.98937988 51.52405167]
[268.58337402 66.67697144]
[263.01632690 80.77604675]
[252.96052551 92.11874390]
[239.63026428 99.33538055]
[224.63522339 101.55451202]
[209.78613281 98.50817108]
[196.87608337 90.56420898]
[187.46403503 78.68190002]
[173.23725891 83.43572235]
[159.01048279 88.18953705]
[144.78370667 92.94335175]
[130.55691528 97.69716644]
[127.82010651 112.84796143]
[118.06072998 124.75557709]
[103.74232483 130.41419983]
[101.87471008 145.29748535]
[100.00709534 160.18075562]
[98.13948059 175.06404114]
[96.27187347 189.94732666]
[94.86956787 204.88162231]
[93.93393707 219.85241699]
[93.77790070 234.85160828]
[94.40187836 249.83862305]
[95.02585602 264.82565308]
[95.64983368 279.81265259]
[96.27381134 294.79968262]
[96.89778900 309.78668213]
[97.52176666 324.77371216]
[98.14574432 339.76071167]
[98.76972198 354.74774170]
[99.39369965 369.73474121]
[100.01767731 384.72177124]
[100.64165497 399.70877075]
[115.33789825 403.16174316]
[128.55700684 410.45266724]
[139.31805420 421.04052734]
[146.82246399 434.13961792]
[150.51339722 448.77792358]
[150.11692810 463.86914062]
[145.66250610 478.29345703]
[137.48066711 490.98046875]
[126.17854309 500.98867798]
[112.59484863 507.57546997]
[97.73757172 510.25204468]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[27 127]
[28 126]
[32 125]
[33 124]
[34 123]
[35 122]
[36 121]
[39 87]
[40 86]
[41 85]
[42 84]
[43 56]
[44 55]
[45 54]
[93 118]
[94 117]
[95 116]
[96 115]
[97 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
