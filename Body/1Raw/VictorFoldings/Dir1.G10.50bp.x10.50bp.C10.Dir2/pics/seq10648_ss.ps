%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCUAACAAGGGGGGGGGGAAAAAACUCAUACCCCCAUUAUGUAAAAUCCAUUGUCGCAUCCACCUUUAxxxxxxxxxxACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACCCCCCCCCCCAACCUUAACAA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 551.98474121]
[71.01555634 546.43170166]
[58.81560135 537.56536865]
[49.20452881 525.94305420]
[42.78650284 512.29541016]
[39.96496582 497.48019409]
[40.91728210 482.42883301]
[45.58358765 468.08740234]
[53.67055511 455.35745239]
[64.66983032 445.03915405]
[77.88998413 437.78118896]
[92.50000000 434.03976440]
[92.50000000 419.03976440]
[92.50000000 404.03976440]
[92.50000000 389.03976440]
[92.50000000 374.03976440]
[92.50000000 359.03976440]
[92.50000000 344.03976440]
[92.50000000 329.03976440]
[92.50000000 314.03976440]
[92.50000000 299.03976440]
[77.95760345 295.48910522]
[64.67964935 288.55685425]
[53.43997574 278.64215088]
[44.89479446 266.31802368]
[39.54439163 252.29843140]
[37.70384216 237.39672852]
[39.48443985 222.47860718]
[44.78699112 208.41175842]
[53.30733109 196.01539612]
[64.55376434 186.01254272]
[77.87543488 178.98791504]
[92.50000000 175.35368347]
[92.50000000 160.35368347]
[92.50000000 145.35368347]
[92.50000000 130.35368347]
[80.10012054 124.11619568]
[71.62208557 113.12592316]
[68.73672485 99.54881287]
[54.22809982 95.74095154]
[39.71947479 91.93309021]
[26.20144844 100.12079620]
[10.87331772 96.27060699]
[2.82899141 82.66677094]
[6.84102488 67.38020325]
[20.52915001 59.48015594]
[35.77244568 63.65358353]
[43.52733231 77.42446899]
[58.03595734 81.23233032]
[72.54458618 85.04018402]
[76.25397491 77.54402924]
[82.03986359 71.01489258]
[89.63552856 66.03164673]
[98.61297607 63.09572601]
[97.07568359 48.17470932]
[95.53839111 33.25369263]
[80.53519440 32.24769592]
[65.91785431 28.72045135]
[52.10695267 22.77344704]
[39.49984360 14.57778740]
[28.45926476 4.36927795]
[19.30287743 -7.55836058]
[12.29412651 -20.86194801]
[7.63466835 -35.15871048]
[5.45856524 -50.03730774]
[5.82842827 -65.06964874]
[8.73361492 -79.82321930]
[14.09053707 -93.87353516]
[21.74506569 -106.81633759]
[31.47696686 -118.27924347]
[43.00622940 -127.93243408]
[56.00114059 -135.49816895]
[70.08779907 -140.75877380]
[84.86091614 -143.56288147]
[99.89543915 -143.82980347]
[114.75878906 -141.55189514]
[129.02331543 -136.79466248]
[142.27859497 -129.69499207]
[154.14326477 -120.45715332]
[164.27595520 -109.34693909]
[172.38510132 -96.68401337]
[178.23741150 -82.83271027]
[181.66448975 -68.19156647]
[182.56774902 -53.18183517]
[180.92117310 -38.23536682]
[176.77217102 -23.78221130]
[170.24009705 -10.23821163]
[161.51287842 2.00694585]
[150.84164429 12.60094261]
[138.53341675 21.23896790]
[124.94232178 27.67248726]
[110.45941162 31.71639824]
[111.99670410 46.63741684]
[113.53399658 61.55843353]
[126.52437592 69.05843353]
[140.21499634 62.92925644]
[153.90562439 56.80008316]
[167.53260803 50.53067780]
[181.09449768 44.12170410]
[194.65640259 37.71272659]
[208.21829224 31.30375099]
[214.95977783 16.74586678]
[230.57838440 13.08000374]
[243.09286499 23.11829758]
[242.90318298 39.16022873]
[230.15483093 48.89980316]
[214.62727356 44.86564636]
[201.06536865 51.27462387]
[187.50347900 57.68359756]
[173.94158936 64.09257507]
[169.20858765 69.82938385]
[160.03480530 70.49070740]
[146.34417725 76.61988068]
[132.65354919 82.74905396]
[134.79527283 104.15437317]
[124.84472656 121.95353699]
[107.50000000 130.35368347]
[107.50000000 145.35368347]
[107.50000000 160.35368347]
[107.50000000 175.35368347]
[122.12456512 178.98791504]
[135.44624329 186.01254272]
[146.69267273 196.01539612]
[155.21301270 208.41175842]
[160.51556396 222.47860718]
[162.29615784 237.39672852]
[160.45561218 252.29843140]
[155.10520935 266.31802368]
[146.56002808 278.64215088]
[135.32034302 288.55685425]
[122.04239655 295.48910522]
[107.50000000 299.03976440]
[107.50000000 314.03976440]
[107.50000000 329.03976440]
[107.50000000 344.03976440]
[107.50000000 359.03976440]
[107.50000000 374.03976440]
[107.50000000 389.03976440]
[107.50000000 404.03976440]
[107.50000000 419.03976440]
[107.50000000 434.03976440]
[122.11001587 437.78118896]
[135.33016968 445.03915405]
[146.32945251 455.35745239]
[154.41641235 468.08740234]
[159.08271790 482.42883301]
[160.03503418 497.48019409]
[157.21350098 512.29541016]
[150.79547119 525.94305420]
[141.18440247 537.56536865]
[128.98443604 546.43170166]
[114.96250153 551.98474121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[33 120]
[34 119]
[35 118]
[36 117]
[39 50]
[40 49]
[41 48]
[54 94]
[55 93]
[56 92]
[95 114]
[96 113]
[97 112]
[98 110]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
