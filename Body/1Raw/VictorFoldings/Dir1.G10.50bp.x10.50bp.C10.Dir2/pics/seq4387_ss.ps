%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCCUAGCGGGGGGGGGGAUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCxxxxxxxxxxACAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCACCCCCCCCCCUCAUCCUAGC\
) } def
/len { sequence length } bind def

/coor [
[93.43132019 509.23434448]
[80.21112823 501.96188354]
[69.32432556 491.51486206]
[61.51319122 478.60562134]
[57.31031036 464.11431885]
[57.00223923 449.02896118]
[60.60998154 434.37814331]
[67.88755035 421.16076660]
[78.33876038 410.27798462]
[91.25102234 402.47183228]
[105.74395752 398.27456665]
[105.43190002 383.27780151]
[105.11985016 368.28103638]
[104.80779266 353.28430176]
[104.49573517 338.28753662]
[104.18367767 323.29077148]
[103.87162018 308.29403687]
[103.55956268 293.29727173]
[103.24751282 278.30053711]
[102.77946472 263.30783081]
[102.15548706 248.32081604]
[101.53150940 233.33380127]
[100.90753174 218.34677124]
[100.28355408 203.35975647]
[97.88870239 200.68914795]
[96.70243835 196.70236206]
[97.33967590 191.99638367]
[100.11778259 187.42454529]
[100.42984009 172.42778015]
[99.64999390 157.44807434]
[97.78237915 142.56478882]
[95.91477203 127.68151093]
[94.04715729 112.79823303]
[83.16832733 102.47102356]
[68.20808411 101.37971497]
[53.24783325 100.28840637]
[38.28758240 99.19709778]
[23.77036095 106.82482910]
[10.05233860 97.83884430]
[11.24544334 81.48315430]
[26.12231064 74.58309174]
[39.37889481 84.23684692]
[54.33914185 85.32815552]
[69.29939270 86.41946411]
[84.25964355 87.51078033]
[87.95561981 89.08017731]
[91.36517334 91.07004547]
[94.44978333 93.44874573]
[96.93490601 78.65603638]
[99.42002106 63.86333084]
[94.07598114 48.97199631]
[103.81494141 37.70248413]
[106.30006409 22.90977669]
[92.91860962 15.88167572]
[82.37892151 5.07624245]
[75.70416260 -8.43952560]
[73.53673553 -23.33641624]
[76.07645416 -38.15371704]
[83.06218719 -51.44245148]
[93.79866791 -61.90706635]
[107.22564697 -68.53173828]
[122.02262115 -70.67898560]
[124.50773621 -85.47169495]
[126.99285889 -100.26439667]
[112.92134857 -105.60095978]
[100.16149139 -113.58045959]
[89.20375061 -123.89617920]
[80.46929932 -136.15161133]
[74.29386902 -149.87568665]
[70.91483307 -164.54089355]
[70.46207428 -179.58354187]
[72.95298004 -194.42543030]
[78.29182434 -208.49607849]
[86.27338409 -221.25463867]
[96.59087372 -232.21070862]
[108.84772491 -240.94317627]
[122.57279968 -247.11637878]
[137.23855591 -250.49304199]
[152.28128052 -250.94337463]
[167.12275696 -248.45005798]
[181.19253540 -243.10894775]
[193.94981384 -235.12532043]
[204.90420532 -224.80606079]
[213.63468933 -212.54779053]
[219.80567932 -198.82171631]
[223.17996216 -184.15541077]
[223.62786865 -169.11262512]
[221.13214111 -154.27154541]
[215.78875732 -140.20263672]
[207.80305481 -127.44665527]
[197.48202515 -116.49391937]
[185.22235107 -107.76541901]
[171.49526978 -101.59665680]
[156.82843018 -98.22473907]
[141.78556824 -97.77928162]
[139.30044556 -82.98657227]
[136.81532288 -68.19386292]
[150.09834290 -61.32929230]
[160.62348938 -50.68075180]
[167.35105896 -37.28224182]
[169.61094666 -22.44027901]
[167.16938782 -7.60648680]
[160.25308228 5.76437187]
[149.52819824 16.35706520]
[136.03620911 23.12526703]
[121.09277344 25.39489555]
[118.60765076 40.18760300]
[124.12944031 54.02086258]
[114.21273041 66.34844971]
[111.72760773 81.14115906]
[109.24249268 95.93386841]
[108.93043518 110.93061829]
[110.79804993 125.81389618]
[112.66566467 140.69717407]
[114.53327179 155.58045959]
[124.04616547 143.98283386]
[138.75494385 141.04141235]
[151.99638367 148.08869934]
[157.77198792 161.93218994]
[153.46534729 176.30065918]
[141.02742004 184.68504333]
[126.09270477 183.28713989]
[115.42658997 172.73983765]
[115.11454010 187.73660278]
[115.27057648 202.73577881]
[115.89455414 217.72279358]
[116.51853180 232.70982361]
[117.14250946 247.69683838]
[117.76648712 262.68383789]
[121.26909637 271.19171143]
[118.24426270 277.98846436]
[118.55632019 292.98522949]
[118.86837769 307.98196411]
[119.18043518 322.97872925]
[119.49248505 337.97549438]
[119.80454254 352.97222900]
[120.11660004 367.96899414]
[120.42865753 382.96572876]
[120.74071503 397.96249390]
[135.39570618 401.55325317]
[148.62152100 408.81552124]
[159.51638794 419.25411987]
[167.33747864 432.15731812]
[171.55154419 446.64538574]
[171.87127686 461.73049927]
[168.27484131 476.38409424]
[161.00747681 489.60708618]
[150.56468201 500.49792480]
[137.65844727 508.31405640]
[123.16876221 512.52252197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 129]
[21 128]
[22 127]
[23 126]
[24 125]
[28 124]
[29 123]
[30 115]
[31 114]
[32 113]
[33 112]
[34 45]
[35 44]
[36 43]
[37 42]
[48 111]
[49 110]
[50 109]
[52 107]
[53 106]
[62 97]
[63 96]
[64 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
