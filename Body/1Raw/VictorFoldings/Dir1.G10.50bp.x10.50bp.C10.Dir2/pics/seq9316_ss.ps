%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAACACCCUGGGGGGGGGGCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGxxxxxxxxxxAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCCCCCCCCCCCUCAACCCCCU\
) } def
/len { sequence length } bind def

/coor [
[72.52384186 356.48376465]
[59.96561813 348.13262939]
[49.87939835 336.92016602]
[42.89920425 323.55126953]
[39.46382141 308.86627197]
[39.78919601 293.78829956]
[43.85488129 279.26519775]
[51.40530014 266.20983887]
[61.96582794 255.44294739]
[74.87262726 247.64132690]
[89.31435394 243.29536438]
[88.69037628 228.30834961]
[88.06639862 213.32133484]
[87.44242096 198.33432007]
[86.81844330 183.34730530]
[86.19446564 168.36029053]
[85.57048798 153.37327576]
[84.94651031 138.38626099]
[84.32253265 123.39923859]
[84.93807220 94.38320923]
[75.67312622 82.58657074]
[66.40818024 70.78992462]
[57.14322662 58.99328613]
[47.87827682 47.19664764]
[38.61332703 35.40000916]
[26.02536011 43.57614899]
[12.75515556 50.59098434]
[-1.09043598 56.38803864]
[-15.39993763 60.92063141]
[-30.05813408 64.15227509]
[-44.94700623 66.05693817]
[-59.94667053 66.61930084]
[-74.93636322 65.83482361]
[-89.79538727 63.70982361]
[-104.40410614 60.26141357]
[-118.64490509 55.51736069]
[-132.40310669 49.51585770]
[-145.56794739 42.30522537]
[-158.03343201 33.94352341]
[-169.69918823 24.49807930]
[-180.47128296 14.04493713]
[-190.26298523 2.66826534]
[-198.99546814 -9.54033756]
[-206.59841919 -22.48257256]
[-213.01062012 -36.05423355]
[-218.18043518 -50.14604950]
[-222.06623840 -64.64455414]
[-224.63674927 -79.43302155]
[-225.87127686 -94.39237213]
[-225.75988770 -109.40216064]
[-224.30345154 -124.34154510]
[-221.51371765 -139.09022522]
[-217.41313171 -153.52946472]
[-212.03472900 -167.54298401]
[-205.42179871 -181.01797485]
[-197.62757874 -193.84593201]
[-188.71484375 -205.92358398]
[-178.75535583 -217.15365601]
[-167.82928467 -227.44575500]
[-156.02462769 -236.71701050]
[-143.43640137 -244.89276123]
[-130.16598511 -251.90719604]
[-116.32022095 -257.70382690]
[-102.01058197 -262.23599243]
[-87.35227966 -265.46719360]
[-72.46335602 -267.37139893]
[-57.46366882 -267.93328857]
[-42.47400284 -267.14834595]
[-27.61504364 -265.02291870]
[-13.00642776 -261.57406616]
[1.23422086 -256.82955933]
[14.99224281 -250.82763672]
[28.15686417 -243.61660767]
[40.62208939 -235.25453186]
[52.28755188 -225.80871582]
[63.05932999 -215.35525513]
[72.85069275 -203.97828674]
[81.58280182 -191.76940918]
[89.18535614 -178.82695007]
[95.59713745 -165.25509644]
[100.76652527 -151.16311646]
[104.65188599 -136.66448975]
[107.22195435 -121.87594604]
[108.45602417 -106.91655731]
[108.34416962 -91.90676880]
[106.88727570 -76.96743774]
[104.09709167 -62.21883774]
[99.99607086 -47.77973175]
[94.61723328 -33.76636505]
[88.00389099 -20.29157639]
[80.20928955 -7.46385622]
[71.29618835 4.61351395]
[61.33634949 15.84329128]
[50.40996933 26.13505745]
[59.67491913 37.93169785]
[68.93986511 49.72833633]
[78.20481873 61.52497864]
[87.46976471 73.32161713]
[96.73471832 85.11825562]
[110.75142670 90.45977020]
[125.51748657 87.82090759]
[140.28353882 85.18204498]
[155.02134705 82.38971710]
[169.72930908 79.44423676]
[184.43727112 76.49874878]
[192.99089050 63.20923996]
[208.45379639 59.94215775]
[221.65214539 68.63580322]
[224.75555420 84.13240051]
[215.92285156 97.23808289]
[200.39431763 100.17748260]
[187.38275146 91.20671082]
[172.67478943 94.15219879]
[157.96682739 97.09767914]
[151.98715210 101.52362823]
[142.92240906 99.94809723]
[128.15634155 102.58695984]
[113.39028931 105.22582245]
[127.61386108 109.98922729]
[142.59338379 109.20557404]
[156.04302979 115.84686279]
[164.52748108 128.21675110]
[165.87957764 143.15570068]
[159.75396729 156.84791565]
[147.71528625 165.79611206]
[132.83850098 167.71469116]
[118.92346954 162.11361694]
[109.52443695 150.42353821]
[107.04229736 135.62844849]
[99.30954742 122.77526093]
[99.93352509 137.76228333]
[100.55750275 152.74929810]
[101.18148041 167.73631287]
[101.80545807 182.72332764]
[102.42943573 197.71034241]
[103.05341339 212.69735718]
[103.67739105 227.68437195]
[104.30136871 242.67138672]
[119.05437469 245.80183411]
[132.56500244 252.50358582]
[143.98399353 262.35537720]
[152.59350586 274.73791504]
[157.85235596 288.87280273]
[159.42996216 303.87155151]
[157.22715759 318.79125977]
[151.38240051 332.69415283]
[142.26312256 344.70620728]
[130.44255066 354.07235718]
[116.66374207 360.20385742]
[101.79283905 362.71524048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 99]
[21 98]
[22 97]
[23 96]
[24 95]
[25 94]
[100 118]
[101 117]
[102 116]
[103 114]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
