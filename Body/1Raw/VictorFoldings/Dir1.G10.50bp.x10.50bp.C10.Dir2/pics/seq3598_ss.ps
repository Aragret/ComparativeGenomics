%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCCCCAUGGGGGGGGGGACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCAxxxxxxxxxxUCCCCAUAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCCCCCCCCCCCACCCCAU\
) } def
/len { sequence length } bind def

/coor [
[68.87396240 625.98699951]
[55.02801895 619.97094727]
[43.31935883 610.44152832]
[34.61683273 598.10589600]
[29.56623268 583.87933350]
[28.54234123 568.81768799]
[31.62113953 554.03851318]
[38.57416153 540.63854980]
[48.88544464 529.61224365]
[61.78982544 521.77770996]
[76.32971191 517.71643066]
[76.32971191 502.71643066]
[76.32971191 487.71643066]
[76.32971191 472.71643066]
[76.32971191 457.71643066]
[76.32971191 442.71643066]
[76.32971191 427.71643066]
[76.32971191 412.71643066]
[76.32971191 397.71643066]
[76.32971191 382.71643066]
[64.31048584 379.44366455]
[53.43013763 373.35534668]
[44.33750534 364.80834961]
[37.57631302 354.30636597]
[33.55265808 342.47027588]
[32.51060867 330.00131226]
[34.51741409 317.63958740]
[39.45919418 306.12017822]
[47.04738617 296.12939453]
[56.83559036 288.26382446]
[68.24582672 282.99484253]
[80.60264587 280.64028931]
[81.84952545 265.69223022]
[75.19695282 252.36582947]
[84.05461884 239.25657654]
[85.30149078 224.30848694]
[86.54836273 209.36041260]
[87.79524231 194.41232300]
[88.88655090 179.45207214]
[80.22874451 164.21913147]
[90.45581818 148.94213867]
[91.07979584 133.95512390]
[91.70377350 118.96810150]
[83.40995789 115.39875793]
[76.82159424 108.14331818]
[73.57009888 98.08171844]
[74.81777954 86.80117798]
[62.37834167 78.41903687]
[49.93889999 70.03689575]
[37.49946213 61.65475082]
[20.98538017 57.81789780]
[20.10073471 40.88704681]
[36.12502670 35.35004425]
[45.88160324 49.21530914]
[58.32104492 57.59745407]
[70.76048279 65.97959900]
[83.19992828 74.36174011]
[97.37648010 69.46018982]
[101.98204803 55.18472672]
[106.58761597 40.90926743]
[111.19317627 26.63380623]
[115.79874420 12.35834599]
[120.40430450 -1.91711450]
[106.97140503 -8.65933990]
[94.72518921 -17.37316322]
[83.95273590 -27.85432053]
[74.90656281 -39.85712051]
[67.79872131 -53.10019302]
[62.79583359 -67.27310944]
[60.01517487 -82.04363251]
[59.52192688 -97.06552124]
[61.32764816 -111.98664093]
[65.39001465 -126.45722198]
[71.61380005 -140.13804626]
[79.85310364 -152.70841980]
[89.91478729 -163.87367249]
[101.56299591 -173.37207031]
[114.52467346 -180.98097229]
[128.49597168 -186.52201843]
[143.14939880 -189.86529541]
[158.14146423 -190.93243408]
[173.12069702 -189.69844055]
[187.73599243 -186.19223022]
[201.64474487 -180.49598694]
[214.52090454 -172.74324036]
[226.06263733 -163.11573792]
[235.99938965 -151.83914185]
[244.09822083 -139.17782593]
[250.16931152 -125.42855072]
[254.07031250 -110.91364288]
[255.70979309 -95.97334290]
[255.04933167 -80.95787811]
[252.10438538 -66.21923065]
[246.94401550 -52.10289001]
[239.68916321 -38.93977356]
[230.50991821 -27.03843498]
[219.62144470 -16.67786407]
[207.27897644 -8.10092640]
[193.77183533 -1.50867665]
[179.41665649 2.94435334]
[164.54995728 5.15377808]
[149.52021790 5.06780529]
[134.67976379 2.68845010]
[130.07420349 16.96391106]
[125.46863556 31.23937035]
[120.86307526 45.51483154]
[116.25750732 59.79029083]
[111.65194702 74.06575012]
[124.54064178 101.14411163]
[106.69078827 119.59207916]
[106.06681061 134.57910156]
[105.44283295 149.56611633]
[113.60549164 159.60726929]
[112.73914337 172.11601257]
[103.85734558 180.38769531]
[106.45758057 189.21327209]
[102.74332428 195.65919495]
[101.49645233 210.60728455]
[100.24958038 225.55537415]
[99.00270081 240.50344849]
[105.56608582 254.89903259]
[96.79760742 266.93908691]
[95.55073547 281.88717651]
[111.85987091 288.89056396]
[124.81420135 300.98956299]
[132.89210510 316.74121094]
[135.15217590 334.27474976]
[131.34286499 351.51397705]
[121.93038177 366.42291260]
[108.04171753 377.24633789]
[91.32971191 382.71643066]
[91.32971191 397.71643066]
[91.32971191 412.71643066]
[91.32971191 427.71643066]
[91.32971191 442.71643066]
[91.32971191 457.71643066]
[91.32971191 472.71643066]
[91.32971191 487.71643066]
[91.32971191 502.71643066]
[91.32971191 517.71643066]
[105.86959839 521.77770996]
[118.77397919 529.61224365]
[129.08526611 540.63854980]
[136.03828430 554.03851318]
[139.11708069 568.81768799]
[138.09320068 583.87933350]
[133.04258728 598.10589600]
[124.34007263 610.44152832]
[112.63140869 619.97094727]
[98.78546906 625.98699951]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[32 123]
[33 122]
[35 120]
[36 119]
[37 118]
[38 117]
[39 115]
[41 112]
[42 111]
[43 110]
[47 57]
[48 56]
[49 55]
[50 54]
[58 108]
[59 107]
[60 106]
[61 105]
[62 104]
[63 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
