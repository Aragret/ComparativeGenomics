%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUAAAAAAUGGGGGGGGGGCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACCAAUCUAUCACCxxxxxxxxxxUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUACCCCCCCCCCACCAAAAAAAU\
) } def
/len { sequence length } bind def

/coor [
[74.40897369 346.87570190]
[61.48981857 339.11734009]
[50.70852280 328.58831787]
[42.64650726 315.85644531]
[37.73854828 301.60833740]
[36.24932098 286.61236572]
[38.25914764 271.67727661]
[43.65962982 257.60845947]
[52.15953445 245.16465759]
[63.30046844 235.01693726]
[76.48161316 227.71253967]
[90.99213409 223.64541626]
[90.37631226 208.65806580]
[89.76048279 193.67070007]
[89.14466095 178.68334961]
[88.52883148 163.69599915]
[87.91300964 148.70864868]
[87.29718018 133.72129822]
[86.68135834 118.73394012]
[86.67729950 96.77066803]
[76.34639740 85.89534760]
[66.01549530 75.02003479]
[55.68458939 64.14472198]
[43.93128586 73.48053741]
[31.39886665 81.74105835]
[18.18541908 88.86161804]
[4.39435768 94.78649902]
[-9.86638260 99.46932983]
[-24.48519135 102.87345886]
[-39.34765244 104.97224426]
[-54.33744431 105.74925232]
[-69.33724976 105.19841003]
[-84.22967529 103.32402802]
[-98.89816284 100.14077759]
[-113.22791290 95.67356873]
[-127.10676575 89.95735931]
[-140.42610168 83.03689575]
[-153.08168030 74.96633911]
[-164.97445679 65.80885315]
[-176.01133728 55.63610458]
[-186.10595703 44.52771759]
[-195.17930603 32.57062912]
[-203.16036987 19.85841942]
[-209.98669434 6.49058151]
[-215.60482788 -7.42825937]
[-219.97082520 -21.78916931]
[-223.05049133 -36.47975159]
[-224.81976318 -51.38502884]
[-225.26475525 -66.38835144]
[-224.38198853 -81.37228394]
[-222.17840576 -96.21956635]
[-218.67120361 -110.81399536]
[-213.88787842 -125.04134369]
[-207.86584473 -138.79025269]
[-200.65222168 -151.95314026]
[-192.30348206 -164.42695618]
[-182.88497925 -176.11408997]
[-172.47039795 -186.92308044]
[-161.14126587 -196.76931763]
[-148.98625183 -205.57575989]
[-136.10047913 -213.27345276]
[-122.58480835 -219.80216980]
[-108.54500580 -225.11080933]
[-94.09096527 -229.15783691]
[-79.33581543 -231.91154480]
[-64.39501953 -233.35041809]
[-49.38552475 -233.46318054]
[-34.42480087 -232.24893188]
[-19.62993813 -229.71720886]
[-5.11672831 -225.88780212]
[9.00124264 -220.79069519]
[22.61347771 -214.46577454]
[35.61344528 -206.96253967]
[47.89939499 -198.33972168]
[59.37517166 -188.66479492]
[69.95096588 -178.01348877]
[79.54399872 -166.46917725]
[88.07920074 -154.12219238]
[95.48976135 -141.06916809]
[101.71768188 -127.41228485]
[106.71422577 -113.25840759]
[110.44028473 -98.71832275]
[112.86669159 -83.90582275]
[113.97446442 -68.93684387]
[113.75493622 -53.92852783]
[112.20980835 -38.99835205]
[109.35118866 -24.26315689]
[105.20144653 -9.83827400]
[99.79305267 4.16340208]
[93.16835022 17.63228798]
[85.37917328 30.46296883]
[76.48649597 42.55502701]
[66.55990601 53.81381989]
[76.89080811 64.68913269]
[87.22171021 75.56444550]
[97.55261230 86.43976593]
[111.42549133 92.14442444]
[126.41838074 91.68250275]
[141.41127014 91.22057343]
[156.40414429 90.75865173]
[171.39703369 90.29672241]
[186.34646606 89.06610870]
[201.21307373 87.07005310]
[216.07966614 85.07399750]
[230.94625854 83.07794189]
[245.81286621 81.08187866]
[251.57972717 66.84675598]
[263.70141602 57.41486740]
[278.91723633 55.32334900]
[293.13421631 61.13480377]
[302.52804565 73.28598785]
[304.57186890 88.50828552]
[298.71588135 102.70697784]
[286.53530884 112.06269073]
[271.30667114 114.05878448]
[257.12640381 108.15830994]
[247.80891418 95.94847870]
[232.94232178 97.94453430]
[218.07572937 99.94059753]
[203.20912170 101.93665314]
[188.34252930 103.93270874]
[198.23596191 115.20745850]
[195.79687500 130.00782776]
[182.80874634 137.51171875]
[168.76853943 132.23226929]
[163.94252014 118.02982330]
[171.85896301 105.28960419]
[156.86607361 105.75153351]
[141.87318420 106.21346283]
[126.88030243 106.67538452]
[111.88742065 107.13731384]
[101.66870880 118.11811066]
[102.28453827 133.10546875]
[102.90036011 148.09281921]
[103.51618958 163.08016968]
[104.13201141 178.06752014]
[104.74784088 193.05488586]
[105.36366272 208.04223633]
[105.97948456 223.02958679]
[120.77476501 225.89254761]
[134.51072693 232.09092712]
[146.44664001 241.29043579]
[155.93879700 252.99494934]
[162.47528076 266.57327271]
[165.70362854 281.29315186]
[165.44970703 296.36074829]
[161.72721863 310.96347046]
[154.73690796 324.31384277]
[144.85575867 335.69186401]
[132.61665344 344.48397827]
[118.67963409 350.21600342]
[103.79629517 352.57882690]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 96]
[21 95]
[22 94]
[23 93]
[97 131]
[98 130]
[99 129]
[100 128]
[101 127]
[102 121]
[103 120]
[104 119]
[105 118]
[106 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
