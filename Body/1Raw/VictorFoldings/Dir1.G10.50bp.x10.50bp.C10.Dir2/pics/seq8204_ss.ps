%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACAAUCCUGGGGGGGGGGAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCxxxxxxxxxxAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCCCCCCCCCCCACCAUCCU\
) } def
/len { sequence length } bind def

/coor [
[57.17626953 226.16433716]
[48.24969101 222.77302551]
[39.58894730 218.75106812]
[31.23851776 214.11911011]
[23.24130249 208.90093994]
[15.63838005 203.12336731]
[8.46880531 196.81607056]
[1.76940763 190.01145935]
[-4.42540026 182.74447632]
[-16.68776894 191.38359070]
[-28.95013618 200.02270508]
[-35.77542877 214.29595947]
[-50.63608932 215.30094910]
[-62.89845657 223.94006348]
[-69.72374725 238.21331787]
[-84.58441162 239.21830750]
[-96.84677887 247.85742188]
[-109.10914612 256.49655151]
[-108.35009766 271.90521240]
[-116.06189728 285.26678467]
[-129.78375244 292.31762695]
[-145.13705444 290.80783081]
[-157.22264099 281.21917725]
[-162.18402100 266.61135864]
[-158.43804932 251.64569092]
[-147.18005371 241.09765625]
[-132.00241089 238.33309937]
[-117.74826050 244.23417664]
[-105.48589325 235.59506226]
[-93.22352600 226.95594788]
[-87.27532196 213.30061340]
[-71.53757477 211.67768860]
[-59.27520370 203.03857422]
[-53.32699966 189.38323975]
[-37.58925247 187.76033020]
[-25.32688522 179.12121582]
[-13.06451607 170.48210144]
[-26.90382195 140.57994080]
[-32.98172379 108.19591522]
[-30.92649460 75.31063080]
[-20.86383247 43.93534470]
[-3.40916991 15.98895741]
[-14.50048542 5.89030790]
[-25.59180069 -4.20834160]
[-36.68311691 -14.30699062]
[-47.77443314 -24.40563965]
[-60.90834808 -16.89861679]
[-75.71965790 -13.81960011]
[-90.75729370 -15.47024250]
[-104.54802704 -21.68883133]
[-115.74078369 -31.86613083]
[-123.23900604 -45.00507736]
[-126.30809784 -59.81844330]
[-124.64737701 -74.85497284]
[-118.41954803 -88.64153290]
[-108.23474884 -99.82746887]
[-95.09078217 -107.31688690]
[-80.27536774 -110.37605286]
[-65.23995209 -108.70525360]
[-51.45756531 -102.46819305]
[-40.27845764 -92.27590179]
[-32.79785156 -79.12691498]
[-29.74861526 -64.30944824]
[-31.42948341 -49.27516174]
[-37.67578125 -35.49695587]
[-26.58446693 -25.39830589]
[-15.49315071 -15.29965687]
[-4.40183544 -5.20100737]
[6.68947983 4.89764214]
[14.36905670 -2.07180381]
[22.56744194 -8.42283249]
[31.23496437 -14.11696339]
[40.31911087 -19.11969948]
[49.76484299 -23.40073204]
[59.51493073 -26.93412018]
[69.51030731 -29.69845772]
[79.69040680 -31.67699814]
[89.99355316 -32.85775375]
[100.35733032 -33.23357010]
[110.71894073 -32.80216980]
[121.01560974 -31.56616592]
[131.18495178 -29.53304863]
[141.16535950 -26.71513367]
[150.89634705 -23.12949753]
[160.31898499 -18.79786110]
[169.37615967 -13.74647045]
[178.01301575 -8.00592804]
[186.17721558 -1.61101580]
[193.81930542 5.39952278]
[200.89295959 12.98321342]
[212.78533936 3.84147906]
[224.67771912 -5.30025530]
[236.57009888 -14.44198895]
[248.46247864 -23.58372307]
[260.35485840 -32.72545624]
[266.11392212 -48.08010864]
[282.33316040 -50.50265884]
[292.32760620 -37.50099945]
[285.81582642 -22.45012283]
[269.49661255 -20.83307838]
[257.60421753 -11.69134426]
[245.71183777 -2.54960966]
[233.81945801 6.59212446]
[221.92707825 15.73385906]
[210.03469849 24.87559319]
[215.56367493 33.69502640]
[220.38725281 42.91917419]
[224.47601318 52.49173737]
[227.80497742 62.35428619]
[230.35383606 72.44661713]
[232.10704041 82.70713806]
[233.05386353 93.07320404]
[233.18855286 103.48155212]
[232.51026917 113.86865234]
[231.02316284 124.17109680]
[228.73631287 134.32600403]
[225.66366577 144.27139282]
[221.82397461 153.94654846]
[217.24069214 163.29243469]
[230.01805115 171.14985657]
[242.79541016 179.00727844]
[255.57276917 186.86471558]
[268.35012817 194.72213745]
[281.12747192 202.57955933]
[297.52639771 202.49330139]
[305.56582642 216.78663635]
[296.97549438 230.75582886]
[280.59237671 230.03054810]
[273.27005005 215.35691833]
[260.49270630 207.49949646]
[247.71533203 199.64205933]
[234.93797302 191.78463745]
[222.16062927 183.92721558]
[209.38327026 176.06979370]
[203.65379333 183.70903015]
[197.39189148 190.91827393]
[190.62969971 197.66049194]
[183.40194702 203.90104675]
[175.74578857 209.60787964]
[167.70054626 214.75167847]
[159.30754089 219.30603027]
[150.60987854 223.24752808]
[141.65223694 226.55592346]
[132.48063660 229.21423340]
[123.14220428 231.20880127]
[113.68489075 232.52937317]
[104.15727997 233.16917419]
[94.60830688 233.12490845]
[85.08703613 232.39680481]
[75.64237213 230.98861694]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 37]
[10 36]
[11 35]
[13 33]
[14 32]
[16 30]
[17 29]
[18 28]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[90 105]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
[119 134]
[120 133]
[121 132]
[122 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
