%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUGACCCCGGGGGGGGGGUAACAGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAxxxxxxxxxxCCACGACCAAUGAUAUGAAAAACCAUCGUUGUAUUUCAACUACAAGAACACCCCCCCCCCCCAAUGACCCC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 414.86517334]
[71.01555634 409.31216431]
[58.81560135 400.44583130]
[49.20452881 388.82351685]
[42.78650284 375.17581177]
[39.96496582 360.36062622]
[40.91728210 345.30926514]
[45.58358765 330.96783447]
[53.67055511 318.23788452]
[64.66983032 307.91961670]
[77.88998413 300.66162109]
[92.50000000 296.92019653]
[92.50000000 281.92019653]
[92.50000000 266.92019653]
[92.50000000 251.92019653]
[92.50000000 236.92019653]
[92.50000000 221.92019653]
[92.50000000 206.92019653]
[92.50000000 191.92019653]
[92.50000000 176.92019653]
[92.50000000 161.92019653]
[92.50000000 146.92019653]
[71.67038727 141.33341980]
[54.46232986 126.53420258]
[44.90224838 104.70806885]
[29.90936279 105.16999054]
[14.95992947 106.40060425]
[0.09333050 108.39665985]
[-14.77326775 110.39272308]
[-29.63986778 112.38877869]
[-44.50646591 114.38483429]
[-52.72124863 127.69089508]
[-67.58327484 132.55447388]
[-82.07514191 126.67911530]
[-89.35423279 112.83899689]
[-85.98359680 97.56900024]
[-73.55473328 88.07914734]
[-57.93616867 88.85025787]
[-46.50252151 99.51823425]
[-31.63592339 97.52217865]
[-16.76932526 95.52612305]
[-1.90272641 93.53006744]
[12.96387196 91.53400421]
[3.07043743 80.25926208]
[5.50951767 65.45889282]
[18.49764824 57.95499420]
[32.53785324 63.23444748]
[37.36388016 77.43688965]
[29.44743729 90.17710876]
[44.44032288 89.71517944]
[47.71426010 82.96749115]
[34.21887589 76.41961670]
[20.72359276 69.87154388]
[27.27187920 56.37635803]
[40.76674652 62.92423630]
[54.26213074 69.47210693]
[57.53606415 62.72441483]
[48.61991501 50.66198349]
[39.70376205 38.59955215]
[25.42658615 29.45632553]
[30.26017380 13.20601082]
[47.21349335 13.35216522]
[51.76619339 29.68339920]
[60.68234634 41.74583054]
[69.59849548 53.80826187]
[81.39612579 52.07720566]
[92.50000000 53.07980728]
[92.50000000 38.07980728]
[92.50000000 23.07980919]
[92.50000000 8.07980919]
[78.72612762 1.50384545]
[69.17620850 -10.40252495]
[65.74636841 -25.27528381]
[69.11760712 -40.16143417]
[78.62057495 -52.10531998]
[92.36843872 -58.73547363]
[107.63156128 -58.73547363]
[121.37942505 -52.10531998]
[130.88238525 -40.16143417]
[134.25363159 -25.27528381]
[130.82379150 -10.40252495]
[121.27387238 1.50384545]
[107.50000000 8.07980919]
[107.50000000 23.07980919]
[107.50000000 38.07980728]
[107.50000000 53.07980728]
[117.68492126 55.89786911]
[126.99510956 60.89733505]
[134.97004700 67.83090973]
[147.47407532 59.54543686]
[159.97811890 51.25996399]
[172.48214722 42.97448730]
[184.98619080 34.68901443]
[197.49021912 26.40353966]
[209.99426270 18.11806488]
[208.96867371 2.79345179]
[215.75720215 -10.98375702]
[228.53376770 -19.50756073]
[243.86151123 -20.48509979]
[257.61737061 -13.65342236]
[266.10110474 -0.85021293]
[267.03057861 14.48052788]
[260.15582275 28.21490860]
[247.32608032 36.65845108]
[231.99249268 37.53987885]
[218.27973938 30.62210083]
[205.77569580 38.90757370]
[193.27166748 47.19305038]
[180.76762390 55.47852325]
[168.26359558 63.76399994]
[155.75955200 72.04947662]
[143.25552368 80.33494568]
[145.66429138 86.86508179]
[147.09326172 93.67704773]
[147.51171875 100.62468719]
[146.91073608 107.55892181]
[161.15742493 112.25272369]
[175.40411377 116.94652557]
[187.91586304 107.76851654]
[203.43289185 107.73123932]
[215.98860168 116.84902954]
[220.75503540 131.61590576]
[215.89944458 146.35369873]
[203.28886414 155.39544678]
[187.77233887 155.26438904]
[175.31628418 146.01092529]
[170.71031189 131.19322205]
[156.46362305 126.49941254]
[142.21693420 121.80561066]
[127.85011292 138.49838257]
[107.50000000 146.92019653]
[107.50000000 161.92019653]
[107.50000000 176.92019653]
[107.50000000 191.92019653]
[107.50000000 206.92019653]
[107.50000000 221.92019653]
[107.50000000 236.92019653]
[107.50000000 251.92019653]
[107.50000000 266.92019653]
[107.50000000 281.92019653]
[107.50000000 296.92019653]
[122.11001587 300.66162109]
[135.33016968 307.91961670]
[146.32945251 318.23788452]
[154.41641235 330.96783447]
[159.08271790 345.30926514]
[160.03503418 360.36062622]
[157.21350098 375.17581177]
[150.79547119 388.82351685]
[141.18440247 400.44583130]
[128.98443604 409.31216431]
[114.96250153 414.86517334]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[25 50]
[26 49]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[57 65]
[58 64]
[59 63]
[67 86]
[68 85]
[69 84]
[70 83]
[89 112]
[90 111]
[91 110]
[92 109]
[93 108]
[94 107]
[95 106]
[116 129]
[117 128]
[118 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
