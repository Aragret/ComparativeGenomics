%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUGUCGAAGGGGGGGGGGGCCCCCAUCGCUGGGUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGxxxxxxxxxxUACGACCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCCCCCCCCCCCAUGUCUAA\
) } def
/len { sequence length } bind def

/coor [
[84.53929138 427.16055298]
[71.05040741 420.42901611]
[59.56490707 410.66442871]
[50.75053787 398.43453979]
[45.11975861 384.45034790]
[42.99992752 369.52487183]
[44.51429749 354.52587891]
[49.57482147 340.32534790]
[57.88728714 327.74893188]
[68.96841431 317.52777100]
[82.17397308 310.25613403]
[96.73619843 306.35678101]
[96.42822266 291.35995483]
[96.12023926 276.36309814]
[95.81226349 261.36627197]
[95.50428772 246.36943054]
[95.19631195 231.37258911]
[94.88832855 216.37574768]
[94.58035278 201.37892151]
[94.27237701 186.38208008]
[93.96440125 171.38523865]
[93.65641785 156.38839722]
[93.34844208 141.39155579]
[75.77821350 134.21710205]
[63.17204285 120.03012848]
[48.92535019 124.72393036]
[34.67865753 129.41772461]
[20.43196487 134.11152649]
[9.91846943 146.69717407]
[-6.18916798 143.61885071]
[-11.32078934 128.04327393]
[-0.19742377 115.99327087]
[15.73816490 119.86483765]
[29.98485756 115.17103577]
[44.23154831 110.47724152]
[58.47824097 105.78343964]
[58.08241272 99.35157776]
[58.67699051 92.93504333]
[60.24793243 86.68543243]
[47.10630035 79.45372772]
[31.28559113 79.57920074]
[23.86537361 66.66448975]
[10.72374249 59.43278885]
[-2.41788912 52.20108795]
[-15.55952072 44.96938324]
[-28.70115280 37.73768234]
[-41.84278488 30.50597954]
[-56.94961929 35.14915848]
[-70.87567902 27.67651367]
[-75.35887909 12.52143383]
[-67.73941803 -1.32484221]
[-52.53778458 -5.64756393]
[-38.77284241 2.11786222]
[-34.61108017 17.36434746]
[-21.46945000 24.59605026]
[-8.32781792 31.82775307]
[4.81381321 39.05945587]
[17.95544434 46.29115677]
[31.09707642 53.52286148]
[45.97780609 52.88013458]
[54.33800125 66.31209564]
[67.47963715 73.54380035]
[81.31349182 62.47242355]
[98.48539734 58.10476685]
[100.63397217 43.25944519]
[102.78255463 28.41412163]
[93.59503937 15.83527851]
[95.98548126 0.81061727]
[108.03410339 -7.87075710]
[110.18268585 -22.71607971]
[112.33126068 -37.56140137]
[98.85199738 -44.45981598]
[88.34477997 -55.36289215]
[81.94935608 -69.08795166]
[80.35945892 -84.14620972]
[83.74754333 -98.90424347]
[91.74609375 -111.76122284]
[103.48749542 -121.32250977]
[117.69811249 -126.55097961]
[132.83650208 -126.87947845]
[147.26055908 -122.27237701]
[159.40567017 -113.22941589]
[167.95440674 -100.73151398]
[171.97949219 -86.13433838]
[171.04431152 -71.02129364]
[165.25028992 -57.03172302]
[155.22592163 -45.68311691]
[142.05859375 -38.20647812]
[127.17658234 -35.41282272]
[125.02800751 -20.56750107]
[122.87942505 -5.72217798]
[131.97227478 6.01902294]
[130.00477600 21.10489845]
[117.62787628 30.56270027]
[115.47930145 45.40802383]
[113.33071899 60.25334549]
[122.70977783 64.76123810]
[130.68959045 71.44034576]
[136.77847290 79.87915039]
[140.60125732 89.55768585]
[155.56254578 88.48061371]
[170.52381897 87.40354919]
[180.84593201 75.73770142]
[196.03414917 74.85853577]
[207.09213257 84.77097321]
[222.05340576 83.69390869]
[237.01469421 82.61683655]
[243.07751465 68.56334686]
[254.98416138 58.94615173]
[269.99856567 55.97521591]
[284.67050171 60.33324051]
[295.62850952 71.01878357]
[300.35449219 85.57638550]
[297.76245117 100.66081238]
[288.44802856 112.80577087]
[274.55160522 119.22045135]
[259.26647949 118.43079376]
[246.10507202 110.61826324]
[238.09176636 97.57811737]
[223.13047791 98.65518951]
[208.16920471 99.73225403]
[198.64508057 111.12641907]
[183.48756409 112.43184662]
[171.60089111 102.36483002]
[156.63961792 103.44189453]
[141.67832947 104.51896667]
[136.19653320 121.14984894]
[124.39942169 134.09065247]
[108.34528351 141.08358765]
[108.65325928 156.08042908]
[108.96123505 171.07725525]
[109.26921082 186.07409668]
[109.57719421 201.07093811]
[109.88516998 216.06777954]
[110.19314575 231.06460571]
[110.50112152 246.06144714]
[110.80910492 261.05828857]
[111.11708069 276.05511475]
[111.42505646 291.05197144]
[111.73303223 306.04879761]
[126.44306946 309.34701538]
[139.93603516 316.07037354]
[151.42744446 325.82797241]
[160.24922180 338.05252075]
[165.88848877 352.03332520]
[168.01736450 366.95748901]
[166.51208496 381.95742798]
[161.46017456 396.16098022]
[153.15533447 408.74246216]
[142.08039856 418.97030640]
[128.87925720 426.24996948]
[114.31940460 430.15817261]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[25 36]
[26 35]
[27 34]
[28 33]
[39 62]
[40 61]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[64 96]
[65 95]
[66 94]
[69 91]
[70 90]
[71 89]
[100 126]
[101 125]
[102 124]
[105 121]
[106 120]
[107 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
