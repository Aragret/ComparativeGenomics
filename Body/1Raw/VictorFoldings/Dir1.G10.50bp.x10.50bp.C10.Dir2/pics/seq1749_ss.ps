%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAAACCCCUGGGGGGGGGGACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGGAAAxxxxxxxxxxUUGUCCAAGAUAGAAUCUUAGUUCAACUUUAAAUUUGCCCACAGAACCCUCCCCCCCCCCCUAAAUCCCCU\
) } def
/len { sequence length } bind def

/coor [
[84.96180725 428.49682617]
[70.93985748 422.94381714]
[58.73990250 414.07748413]
[49.12882996 402.45516968]
[42.71080780 388.80746460]
[39.88927078 373.99227905]
[40.84158707 358.94088745]
[45.50788879 344.59945679]
[53.59485626 331.86950684]
[64.59413147 321.55123901]
[77.81429291 314.29327393]
[92.42430115 310.55181885]
[92.42430115 295.55181885]
[92.42430115 280.55181885]
[92.42430115 265.55181885]
[92.42430115 250.55183411]
[92.42430115 235.55183411]
[92.42430115 220.55183411]
[92.42430115 205.55183411]
[92.42430115 190.55183411]
[92.42430115 175.55183411]
[92.42430115 160.55183411]
[84.13287354 173.05192566]
[71.74823761 181.51481628]
[57.08972931 184.69729614]
[42.31074142 182.13183594]
[29.58236313 174.19531250]
[20.77443504 162.05363464]
[17.18087387 147.49044800]
[19.32958603 132.64515686]
[26.90491867 119.69855499]
[38.79402924 110.55256653]
[53.25036240 106.55077362]
[68.15023804 108.28103638]
[81.30480194 115.48918915]
[90.78160858 127.11631775]
[95.18840027 141.45365906]
[99.44124603 127.06917572]
[78.11309052 110.45410919]
[83.05207825 86.87502289]
[75.15560150 74.12176514]
[67.25911713 61.36850739]
[59.36263275 48.61524963]
[49.48692703 37.32497025]
[37.89788055 27.80163383]
[26.30883217 18.27829552]
[21.86114502 17.71460915]
[18.21636581 15.91484642]
[15.67010784 13.29505444]
[14.34774780 10.32510662]
[14.20186329 7.46682978]
[3.43318439 -2.97517967]
[-7.33549452 -13.41718864]
[-18.10417366 -23.85919762]
[-34.10290909 -25.05084038]
[-43.02691650 -38.38282013]
[-38.03046036 -53.62797928]
[-22.94639397 -59.09154510]
[-9.34592247 -50.58232880]
[-7.66216421 -34.62787628]
[3.10651493 -24.18586731]
[13.87519360 -13.74385834]
[24.64387321 -3.30184937]
[35.83216858 6.68924761]
[47.42121887 16.21258545]
[59.01026535 25.73592186]
[54.30591965 11.49270916]
[54.66195679 -3.50306487]
[60.03696060 -17.50696945]
[69.80566406 -28.88995743]
[82.83169556 -36.32786942]
[97.59976196 -38.95546341]
[112.39192200 -36.46707916]
[125.48742676 -29.15218353]
[135.36291504 -17.86170769]
[140.86956787 -3.90904856]
[141.36683655 11.08270645]
[136.79684448 25.36959648]
[127.69123077 37.28965378]
[115.10922241 45.45624161]
[100.51447296 48.91935730]
[85.60475159 47.27614212]
[72.11589050 40.71876907]
[80.01237488 53.47202682]
[87.90885925 66.22528076]
[95.80533600 78.97853851]
[101.75861359 78.63638306]
[107.57580566 79.94746399]
[117.45150757 68.65718842]
[127.32721710 57.36690521]
[137.20292664 46.07662582]
[147.07862854 34.78634262]
[152.95581055 18.88366890]
[169.86396790 20.12887192]
[173.34806824 36.72095871]
[158.36891174 44.66205215]
[148.49320984 55.95233154]
[138.61749268 67.24260712]
[128.74179077 78.53289032]
[118.86608124 89.82317352]
[124.11199951 97.36628723]
[126.04216003 107.40666199]
[141.04136658 107.56066132]
[156.04057312 107.71466064]
[171.03977966 107.86865997]
[175.62828064 93.46598053]
[184.25955200 81.05660248]
[196.16610718 71.74396515]
[210.28923035 66.35613251]
[225.37310791 65.37219238]
[240.07647705 68.87963867]
[253.09194946 76.56658173]
[263.26217651 87.74951935]
[269.68283081 101.43405914]
[271.78298950 116.40338135]
[269.37591553 131.32643127]
[262.67565918 144.87626648]
[252.27795410 155.84802246]
[239.10742188 163.26611328]
[224.33512878 166.47093201]
[209.27462769 165.17750549]
[195.26510620 159.50083923]
[183.55226135 149.94569397]
[175.17759705 137.36172485]
[170.88578796 122.86786652]
[155.88658142 122.71386719]
[140.88737488 122.55987549]
[125.88816071 122.40587616]
[113.82572937 131.32202148]
[109.57288361 145.70651245]
[107.42430115 160.55183411]
[107.42430115 175.55183411]
[107.42430115 190.55183411]
[107.42430115 205.55183411]
[107.42430115 220.55183411]
[107.42430115 235.55183411]
[107.42430115 250.55183411]
[107.42430115 265.55181885]
[107.42430115 280.55181885]
[107.42430115 295.55181885]
[107.42430115 310.55181885]
[122.03431702 314.29327393]
[135.25447083 321.55123901]
[146.25375366 331.86950684]
[154.34071350 344.59945679]
[159.00701904 358.94088745]
[159.95933533 373.99227905]
[157.13780212 388.80746460]
[150.71977234 402.45516968]
[141.10870361 414.07748413]
[128.90875244 422.94381714]
[114.88680267 428.49682617]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[37 130]
[38 129]
[40 86]
[41 85]
[42 84]
[43 83]
[44 66]
[45 65]
[46 64]
[51 63]
[52 62]
[53 61]
[54 60]
[88 100]
[89 99]
[90 98]
[91 97]
[92 96]
[102 128]
[103 127]
[104 126]
[105 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
