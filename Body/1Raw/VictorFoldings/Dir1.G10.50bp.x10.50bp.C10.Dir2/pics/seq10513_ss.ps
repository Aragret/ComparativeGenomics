%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUCCUCCUAGGGGGGGGGGUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUxxxxxxxxxxACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCCCCCCCCCCCUACUCCUCCUA\
) } def
/len { sequence length } bind def

/coor [
[80.62575531 388.34680176]
[68.88016510 378.92050171]
[59.43590546 367.18936157]
[52.73470688 353.70202637]
[49.08999634 339.08935547]
[48.67224121 324.03479004]
[51.50098038 309.24249268]
[57.44391251 295.40429688]
[66.22306824 283.16744995]
[77.42784119 273.10430908]
[90.53414917 265.68548584]
[104.92900085 261.25805664]
[103.69839478 246.30860901]
[102.46778107 231.35917664]
[101.23716736 216.40974426]
[100.00655365 201.46029663]
[98.77593994 186.51086426]
[97.54532623 171.56143188]
[96.31472015 156.61199951]
[95.08410645 141.66256714]
[93.85349274 126.71312714]
[92.62287903 111.76369476]
[85.97830200 125.21173096]
[76.25119781 136.63029480]
[64.03041077 145.32812500]
[50.05575180 150.77870178]
[35.17319489 152.65206909]
[20.28368378 150.83479309]
[6.28858042 145.43692017]
[-5.96489573 136.78520203]
[-15.73495960 125.40337372]
[-22.43016434 111.98047638]
[-25.64520264 97.32907867]
[-25.18544769 82.33612061]
[-21.07873154 67.90924072]
[-13.57366085 54.92179108]
[-3.12456799 44.15998459]
[9.63599205 36.27531052]
[23.93553734 31.74507904]
[38.90842056 30.84353638]
[53.64823151 33.62525940]
[67.26267242 39.92185211]
[78.92755890 49.35213852]
[87.93675232 61.34523773]
[93.74485779 75.17513275]
[96.00030518 90.00593567]
[101.70497131 76.13305664]
[107.40963745 62.26017761]
[113.11429596 48.38729477]
[118.81896210 34.51441574]
[124.52362823 20.64153481]
[130.22828674 6.76865482]
[123.63375854 -5.01785660]
[125.03120422 -18.25523949]
[133.68432617 -28.11181068]
[146.25013733 -31.12060928]
[152.23843384 -44.87343979]
[158.22673035 -58.62626648]
[164.21502686 -72.37909698]
[170.20332336 -86.13192749]
[176.19161987 -99.88475037]
[182.17991638 -113.63758087]
[169.26817322 -121.31156921]
[157.42007446 -130.54336548]
[146.82249451 -141.18734741]
[137.64256287 -153.07566833]
[130.02505493 -166.02081299]
[124.09013367 -179.81863403]
[119.93137360 -194.25151062]
[117.61437225 -209.09181213]
[117.17568207 -224.10549927]
[118.62221527 -239.05578613]
[121.93115997 -253.70686340]
[127.05032349 -267.82766724]
[133.89897156 -281.19552612]
[142.36909485 -293.59954834]
[152.32710266 -304.84417725]
[163.61595154 -314.75201416]
[176.05758667 -323.16680908]
[189.45579529 -329.95587158]
[203.59927368 -335.01208496]
[218.26493835 -338.25573730]
[233.22151184 -339.63568115]
[248.23309326 -339.13012695]
[263.06292725 -336.74707031]
[277.47714233 -332.52407837]
[291.24841309 -326.52777100]
[304.15951538 -318.85269165]
[316.00683594 -309.61990356]
[326.60351562 -298.97503662]
[335.78244019 -287.08593750]
[343.39886475 -274.14013672]
[349.33261108 -260.34182739]
[353.49017334 -245.90859985]
[355.80590820 -231.06809998]
[356.24334717 -216.05436707]
[354.79556274 -201.10421753]
[351.48538208 -186.45341492]
[346.36502075 -172.33303833]
[339.51525879 -158.96577454]
[331.04406738 -146.56243896]
[321.08511353 -135.31866455]
[309.79544067 -125.41178131]
[297.35308838 -116.99803162]
[283.95431519 -110.21010590]
[269.81042480 -105.15506744]
[255.14447021 -101.91263580]
[240.18778992 -100.53395844]
[225.17625427 -101.04077148]
[210.34660339 -103.42507935]
[195.93273926 -107.64928436]
[189.94444275 -93.89645386]
[183.95614624 -80.14363098]
[177.96784973 -66.39080048]
[171.97955322 -52.63796997]
[165.99125671 -38.88514328]
[160.00296021 -25.13231277]
[166.82728577 -9.79178715]
[160.34527588 6.06113386]
[144.10116577 12.47331810]
[138.39649963 26.34619904]
[132.69184875 40.21907806]
[126.98718262 54.09196091]
[121.28251648 67.96484375]
[115.57785034 81.83772278]
[109.87319183 95.71060181]
[107.57231140 110.53308105]
[108.80292511 125.48252106]
[110.03353882 140.43194580]
[111.26415253 155.38139343]
[112.49476624 170.33082581]
[113.72537994 185.28025818]
[114.95598602 200.22969055]
[116.18659973 215.17912292]
[117.41721344 230.12855530]
[118.64782715 245.07798767]
[119.87844086 260.02743530]
[134.80352783 262.04132080]
[148.94659424 267.21697998]
[161.64614868 275.31237793]
[172.30819702 285.94885254]
[180.43406677 298.62893677]
[185.64369202 312.75955200]
[187.69342041 327.67974854]
[186.48735046 342.69174194]
[182.08192444 357.09335327]
[174.68318176 370.21099854]
[164.63717651 381.43112183]
[152.41377258 390.22900391]
[138.58468628 396.19308472]
[123.79672241 399.04446411]
[108.74154663 398.64971924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[46 126]
[47 125]
[48 124]
[49 123]
[50 122]
[51 121]
[52 120]
[56 117]
[57 116]
[58 115]
[59 114]
[60 113]
[61 112]
[62 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
