%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCUGUUCUUGGGGGGGGGGAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCAUACACCxxxxxxxxxxUCUUUAACUCCACCAUUAGCACCCAAAGCUAAGAUUCUAAUUUAAACUAUCCCCCCCCCCUCUCUGUUCUU\
) } def
/len { sequence length } bind def

/coor [
[93.24651337 470.51718140]
[79.22457123 464.96417236]
[67.02461243 456.09783936]
[57.41353989 444.47552490]
[50.99551392 430.82781982]
[48.17397690 416.01263428]
[49.12629318 400.96127319]
[53.79259872 386.61984253]
[61.87956619 373.88989258]
[72.87883759 363.57159424]
[86.09899902 356.31362915]
[100.70901489 352.57220459]
[100.70901489 337.57220459]
[100.70901489 322.57220459]
[100.70901489 307.57220459]
[100.70901489 292.57220459]
[100.70901489 277.57220459]
[100.70901489 262.57220459]
[100.70901489 247.57218933]
[100.70901489 232.57218933]
[100.70901489 217.57218933]
[100.70901489 202.57218933]
[100.70901489 187.57218933]
[99.93935394 172.59194946]
[98.40206146 157.67092896]
[96.86476898 142.74992371]
[95.32747650 127.82890320]
[93.79018402 112.90789032]
[85.75148010 101.46800995]
[91.28880310 88.62940216]
[89.75151062 73.70838928]
[88.21421814 58.78737259]
[86.52381897 43.88292313]
[84.37524414 29.03760147]
[81.92230988 14.23952293]
[79.46938324 -0.55855608]
[64.50752258 0.63166982]
[49.49863052 0.54874325]
[34.55083847 -0.80673832]
[19.77184868 -3.42500854]
[5.26814890 -7.28720236]
[-8.85576057 -12.36549187]
[-22.49811554 -18.62328720]
[-35.56061935 -26.01550102]
[-47.94915771 -34.48886871]
[-59.57446671 -43.98234558]
[-70.35278320 -54.42752075]
[-80.20645142 -65.74913788]
[-89.06447601 -77.86562347]
[-96.86302185 -90.68968201]
[-103.54592133 -104.12890625]
[-109.06500244 -118.08647156]
[-113.38050079 -132.46180725]
[-116.46133423 -147.15133667]
[-118.28530121 -162.04922485]
[-118.83925629 -177.04812622]
[-118.11920929 -192.03996277]
[-116.13034821 -206.91673279]
[-112.88700867 -221.57124329]
[-108.41255188 -235.89790344]
[-102.73921967 -249.79347229]
[-95.90788269 -263.15786743]
[-87.96777344 -275.89474487]
[-78.97609711 -287.91238403]
[-68.99763489 -299.12417603]
[-58.10429001 -309.44934082]
[-46.37454605 -318.81347656]
[-33.89291763 -327.14910889]
[-20.74934006 -334.39617920]
[-7.03851271 -340.50250244]
[7.14077616 -345.42404175]
[21.68636322 -349.12536621]
[36.49344635 -351.57977295]
[51.45533371 -352.76962280]
[66.46422577 -352.68630981]
[81.41198730 -351.33044434]
[96.19091034 -348.71179199]
[110.69450378 -344.84921265]
[124.81828308 -339.77056885]
[138.46047974 -333.51242065]
[151.52279663 -326.11987305]
[163.91110229 -317.64617920]
[175.53617859 -308.15240479]
[186.31422424 -297.70693970]
[196.16760254 -286.38507080]
[205.02529907 -274.26834106]
[212.82353210 -261.44409180]
[219.50607300 -248.00469971]
[225.02479553 -234.04699707]
[229.33992004 -219.67153931]
[232.42037964 -204.98193359]
[234.24395752 -190.08399963]
[234.79753113 -175.08508301]
[234.07710266 -160.09326172]
[232.08784485 -145.21655273]
[228.84413147 -130.56211853]
[224.36930847 -116.23558044]
[218.69560242 -102.34014893]
[211.86393738 -88.97594452]
[203.92349243 -76.23925018]
[194.93150330 -64.22184753]
[184.95275879 -53.01032257]
[174.05914307 -42.68544769]
[162.32914734 -33.32161713]
[149.84730530 -24.98630333]
[136.70355225 -17.73956108]
[122.99256134 -11.63360310]
[108.81314850 -6.71242523]
[94.26746368 -3.01148415]
[96.72039032 11.78659534]
[99.17331696 26.58467484]
[102.51699829 30.07308769]
[103.66514587 35.71840668]
[101.41012573 42.03960037]
[105.37778473 48.33005905]
[103.13523102 57.25008011]
[104.67252350 72.17109680]
[106.20981598 87.09210968]
[114.24851990 98.53199005]
[108.71119690 111.37059784]
[110.24848938 126.29161072]
[111.78578186 141.21263123]
[113.32307434 156.13365173]
[114.86036682 171.05465698]
[126.43444061 161.51312256]
[141.15267944 164.40682983]
[148.25303650 177.61987305]
[142.54373169 191.49084473]
[128.19940186 195.87721252]
[115.70901489 187.57218933]
[115.70901489 202.57218933]
[115.70901489 217.57218933]
[115.70901489 232.57218933]
[115.70901489 247.57218933]
[115.70901489 262.57220459]
[115.70901489 277.57220459]
[115.70901489 292.57220459]
[115.70901489 307.57220459]
[115.70901489 322.57220459]
[115.70901489 337.57220459]
[115.70901489 352.57220459]
[130.31903076 356.31362915]
[143.53918457 363.57159424]
[154.53845215 373.88989258]
[162.62542725 386.61984253]
[167.29173279 400.96127319]
[168.24404907 416.01263428]
[165.42251587 430.82781982]
[159.00448608 444.47552490]
[149.39341736 456.09783936]
[137.19345093 464.96417236]
[123.17150879 470.51718140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 124]
[25 123]
[26 122]
[27 121]
[28 120]
[30 118]
[31 117]
[32 116]
[33 114]
[34 111]
[35 110]
[36 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
