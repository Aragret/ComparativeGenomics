%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUUCUUCAGGGGGGGGGGUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAxxxxxxxxxxUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCUUCCCUCUACACUUCCCCCCCCCCAUCAUCUUCA\
) } def
/len { sequence length } bind def

/coor [
[92.75056458 620.91076660]
[78.90462494 614.89471436]
[67.19596100 605.36529541]
[58.49343491 593.02966309]
[53.44283295 578.80316162]
[52.41894150 563.74145508]
[55.49774170 548.96228027]
[62.45076370 535.56237793]
[72.76204681 524.53601074]
[85.66642761 516.70153809]
[100.20631409 512.64019775]
[100.20631409 497.64019775]
[100.20631409 482.64019775]
[100.20631409 467.64019775]
[100.20631409 452.64019775]
[100.20631409 437.64019775]
[100.20631409 422.64019775]
[100.20631409 407.64019775]
[100.20631409 392.64019775]
[100.20631409 377.64019775]
[92.46901703 364.91293335]
[100.20631409 351.11276245]
[100.20631409 336.11276245]
[100.20631409 321.11276245]
[84.70575714 317.47589111]
[70.50347900 310.26083374]
[58.41261292 299.87625122]
[49.12644958 286.91235352]
[43.17870331 272.10736084]
[40.91283798 256.30554199]
[42.46223068 240.40905762]
[47.74233627 225.32638550]
[56.45527267 211.92042542]
[68.10664368 200.95919800]
[82.03359222 193.07176208]
[97.44247437 188.71215820]
[96.81849670 173.72514343]
[96.19451904 158.73812866]
[95.57054138 143.75111389]
[92.12764740 137.15625000]
[95.09276581 128.44650269]
[94.78070831 113.44974518]
[84.64586639 110.27273560]
[77.48461151 99.51989746]
[78.56884766 84.29883575]
[73.08181763 70.33844757]
[67.59478760 56.37805557]
[62.10775375 42.41766739]
[48.77703476 45.65069962]
[33.06333923 37.51707077]
[23.08061409 26.32130241]
[14.97856522 21.96141243]
[13.00963593 14.78722382]
[3.26198339 3.38620305]
[-6.48566866 -8.01481819]
[-16.23332024 -19.41583824]
[-31.86661720 -24.36882591]
[-35.12912369 -40.44017029]
[-22.66465759 -51.09704971]
[-7.29558849 -45.37657928]
[-4.83229971 -29.16349030]
[4.91535234 -17.76247025]
[14.66300488 -6.36144876]
[24.41065598 5.03957224]
[34.27637863 16.33857727]
[44.25910568 27.53434181]
[58.27581787 22.19283104]
[58.27581787 7.19283009]
[44.21863174 1.40802908]
[33.44875717 -9.31942558]
[27.60852814 -23.35367393]
[27.58853149 -38.55459595]
[33.39181900 -52.60416031]
[44.13343048 -63.35991287]
[58.17535019 -69.18167877]
[73.37628937 -69.18167877]
[87.41820526 -63.35991287]
[98.15982056 -52.60416031]
[103.96310425 -38.55459595]
[103.94310760 -23.35367393]
[98.10288239 -9.31942558]
[87.33300781 1.40802908]
[73.27581787 7.19283009]
[73.27581787 22.19283104]
[76.06814575 36.93063736]
[81.55517578 50.89102554]
[87.04220581 64.85141754]
[92.52923584 78.81180573]
[107.23719788 81.75728607]
[117.67700958 70.98648071]
[115.89133453 55.45118332]
[124.55241394 42.43120956]
[139.57075500 38.07418823]
[153.85514832 44.43737030]
[160.66093445 58.51626205]
[156.77465820 73.66323090]
[144.03126526 82.72635651]
[128.44781494 81.42629242]
[118.00801086 92.19709778]
[131.57046509 85.78930664]
[146.38996887 88.10926819]
[157.34532166 98.35526276]
[160.65063477 112.98655701]
[155.16369629 126.94698334]
[142.78063965 135.41220093]
[127.78070831 135.45686340]
[115.34746552 127.06554413]
[109.77745819 113.13768768]
[110.08951569 128.13444519]
[110.55755615 143.12713623]
[111.18153381 158.11415100]
[111.80551147 173.10116577]
[112.42948914 188.08818054]
[126.33688354 190.59449768]
[139.40344238 195.95948792]
[151.04893494 203.94204712]
[160.75686646 214.18489075]
[168.09732056 226.23057556]
[172.74606323 239.54190063]
[174.49880981 253.52586365]
[173.28022766 267.56008911]
[169.14718628 281.02053833]
[162.28607178 293.30923462]
[153.00440979 303.88088989]
[141.71705627 312.26693726]
[128.92768860 318.09652710]
[115.20631409 321.11276245]
[115.20631409 336.11276245]
[115.20631409 351.11276245]
[122.94361877 364.91293335]
[115.20631409 377.64019775]
[115.20631409 392.64019775]
[115.20631409 407.64019775]
[115.20631409 422.64019775]
[115.20631409 437.64019775]
[115.20631409 452.64019775]
[115.20631409 467.64019775]
[115.20631409 482.64019775]
[115.20631409 497.64019775]
[115.20631409 512.64019775]
[129.74620056 516.70153809]
[142.65058899 524.53601074]
[152.96186829 535.56237793]
[159.91488647 548.96228027]
[162.99368286 563.74145508]
[161.96980286 578.80316162]
[156.91918945 593.02966309]
[148.21667480 605.36529541]
[136.50801086 614.89471436]
[122.66207123 620.91076660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[24 127]
[36 113]
[37 112]
[38 111]
[39 110]
[41 109]
[42 108]
[45 88]
[46 87]
[47 86]
[48 85]
[50 66]
[51 65]
[53 64]
[54 63]
[55 62]
[56 61]
[67 84]
[68 83]
[89 99]
[90 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
