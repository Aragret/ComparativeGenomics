%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUACUAAAGGGGGGGGGGCCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUAxxxxxxxxxxUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCCCCCCCCCCCUAAUAAA\
) } def
/len { sequence length } bind def

/coor [
[86.60070038 587.29339600]
[74.04248047 578.94226074]
[63.95625305 567.72979736]
[56.97605896 554.36090088]
[53.54067612 539.67590332]
[53.86605453 524.59796143]
[57.93173981 510.07482910]
[65.48215485 497.01947021]
[76.04268646 486.25259399]
[88.94947815 478.45095825]
[103.39121246 474.10501099]
[102.76723480 459.11798096]
[102.14325714 444.13095093]
[101.51927948 429.14395142]
[100.89530182 414.15692139]
[100.27132416 399.16992188]
[99.64734650 384.18289185]
[99.02336884 369.19589233]
[98.39939117 354.20886230]
[97.77541351 339.22186279]
[83.76844788 336.03454590]
[71.05871582 329.31396484]
[60.52097702 319.51553345]
[52.88235092 307.30676270]
[48.67215347 293.52169800]
[48.18521881 279.10412598]
[51.46125412 265.04272461]
[58.28169250 252.30351257]
[68.18426514 241.76325989]
[80.49430847 234.14930725]
[94.37075806 229.98930359]
[94.05870056 214.99253845]
[81.44471741 203.91348267]
[80.70054626 186.80412292]
[92.77046967 174.18452454]
[92.14649200 159.19750977]
[91.52251434 144.21049500]
[79.37774658 153.01416016]
[64.86713409 149.21388245]
[58.59676361 135.58734131]
[65.14976501 122.09445190]
[79.73642731 118.59741211]
[91.69477844 127.65169525]
[92.63040161 112.68090820]
[86.42499542 99.02466583]
[74.53261566 89.88292694]
[58.87600327 87.60675812]
[53.50098801 73.71580505]
[41.60860825 64.57407379]
[29.71622849 55.43233871]
[14.07983494 57.72988892]
[1.44866085 48.23099518]
[-0.68344212 32.57118225]
[8.94846535 20.04114342]
[24.62994194 18.07472420]
[37.05744934 27.83856773]
[38.85796356 43.53995895]
[50.75034332 52.68169403]
[62.64272308 61.82342911]
[77.44871521 63.44572067]
[83.67435455 77.99054718]
[95.56673431 87.13228607]
[102.88848114 85.50687408]
[117.53198242 82.25604248]
[124.85373688 80.63063049]
[131.76072693 67.31547546]
[138.66772461 54.00032043]
[145.57473755 40.68516541]
[152.48173523 27.37001038]
[143.27796936 18.79528809]
[136.42773438 8.25822258]
[132.33338928 -3.61242509]
[131.23298645 -16.10986519]
[133.18655396 -28.49136734]
[138.07275391 -40.02238846]
[145.59640503 -50.02017212]
[155.30635071 -57.89414978]
[166.62252808 -63.18083572]
[178.87054443 -65.57112122]
[191.32191467 -64.92830658]
[203.23739624 -61.29595566]
[211.22731018 -73.99088287]
[219.21722412 -86.68581390]
[227.20713806 -99.38074493]
[235.19706726 -112.07567596]
[230.24099731 -126.90711212]
[236.02597046 -141.43530273]
[249.82046509 -148.80047607]
[265.11117554 -145.52502441]
[274.67825317 -133.15551758]
[274.00445557 -117.53244781]
[263.40792847 -106.03256989]
[247.89199829 -104.08576202]
[239.90206909 -91.39083099]
[231.91215515 -78.69589996]
[223.92224121 -66.00096893]
[215.93232727 -53.30604172]
[227.16247559 -39.77471161]
[233.15162659 -23.21658897]
[233.17626953 -5.58506966]
[227.21754456 11.03405285]
[215.96534729 24.66935158]
[200.73849487 33.69761276]
[183.33021545 37.03707504]
[165.79689026 34.27700806]
[158.88989258 47.59216309]
[151.98289490 60.90732193]
[145.07588196 74.22247314]
[138.16888428 87.53762817]
[107.60119629 113.61653137]
[106.66556549 128.58732605]
[106.50952911 143.58651733]
[107.13350677 158.57353210]
[107.75748444 173.56054688]
[118.68023682 181.50730896]
[122.94960785 194.11685181]
[119.21241760 206.69093323]
[109.05545044 214.68048096]
[109.36750793 229.67724609]
[124.53407288 233.72404480]
[137.94059753 241.86109924]
[148.51148987 253.42607117]
[155.40133667 267.48196411]
[158.06253052 282.89309692]
[156.28872681 298.41680908]
[150.23091125 312.80368042]
[140.38449097 324.89810181]
[127.54884338 333.73107910]
[112.76242828 338.59786987]
[113.38640594 353.58489990]
[114.01038361 368.57189941]
[114.63436127 383.55892944]
[115.25833893 398.54592896]
[115.88231659 413.53295898]
[116.50629425 428.51995850]
[117.13027191 443.50698853]
[117.75424957 458.49401855]
[118.37822723 473.48101807]
[133.13122559 476.61145020]
[146.64186096 483.31323242]
[158.06085205 493.16500854]
[166.67036438 505.54754639]
[171.92919922 519.68243408]
[173.50680542 534.68115234]
[171.30400085 549.60089111]
[165.45925903 563.50378418]
[156.33998108 575.51580811]
[144.51940918 584.88195801]
[130.74060059 591.01348877]
[115.86969757 593.52490234]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[31 119]
[32 118]
[35 114]
[36 113]
[37 112]
[43 111]
[44 110]
[45 62]
[46 61]
[48 59]
[49 58]
[50 57]
[65 109]
[66 108]
[67 107]
[68 106]
[69 105]
[81 97]
[82 96]
[83 95]
[84 94]
[85 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
