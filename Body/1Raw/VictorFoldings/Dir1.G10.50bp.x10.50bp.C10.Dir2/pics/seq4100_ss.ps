%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAUAAUAAACGGGGGGGGGGACCCUCACCACUACAAUCUUCCUAGGAACAACAUAUGACGCACUCUCCCCxxxxxxxxxxAAACACAAACUACCACCUACCUCCCUCACCAAAGCCCAUAAAAAUAAAAACCCCCCCCCCAUUAUAACAAAC\
) } def
/len { sequence length } bind def

/coor [
[85.13629150 162.72058105]
[71.07375336 157.60272217]
[58.57036591 149.38003540]
[48.30007172 138.49569702]
[40.81644821 125.53642273]
[36.52287292 111.20071411]
[35.65076828 96.26126862]
[38.24714661 81.52334595]
[44.17205811 67.78133392]
[53.10614395 55.77593613]
[64.56784821 46.15425110]
[77.93938446 39.43490219]
[92.50000000 35.98006821]
[92.50000000 20.98006821]
[92.50000000 5.98006725]
[92.50000000 -9.01993275]
[92.50000000 -24.01993179]
[92.50000000 -39.01993179]
[92.50000000 -54.01993179]
[92.50000000 -69.01993561]
[92.50000000 -84.01993561]
[92.50000000 -99.01993561]
[77.51963043 -99.86109924]
[62.60999298 -101.54090881]
[47.81799698 -104.05406189]
[33.19018936 -107.39265442]
[18.77258873 -111.54618835]
[4.61056042 -116.50159454]
[-9.25133514 -122.24327087]
[-22.76948547 -128.75315857]
[-35.90135193 -136.01078796]
[-48.60562515 -143.99330139]
[-60.84232712 -152.67559814]
[-72.57295227 -162.03034973]
[-83.76060486 -172.02812195]
[-94.37007141 -182.63746643]
[-104.36797333 -193.82501221]
[-113.72285461 -205.55552673]
[-122.40528107 -217.79214478]
[-130.38793945 -230.49632263]
[-137.64570618 -243.62811279]
[-144.15574646 -257.14617920]
[-149.89758301 -271.00802612]
[-154.85314941 -285.16998291]
[-159.00683594 -299.58755493]
[-162.34559631 -314.21530151]
[-164.85891724 -329.00729370]
[-166.53887939 -343.91690063]
[-167.38021851 -358.89724731]
[-167.38027954 -373.90121460]
[-166.53904724 -388.88159180]
[-164.85919189 -403.79122925]
[-162.34597778 -418.58322144]
[-159.00732422 -433.21099854]
[-154.85374451 -447.62860107]
[-149.89828491 -461.79061890]
[-144.15655518 -475.65246582]
[-137.64662170 -489.17059326]
[-130.38894653 -502.30245972]
[-122.40638733 -515.00671387]
[-113.72404480 -527.24334717]
[-104.36925507 -538.97393799]
[-94.37142944 -550.16156006]
[-83.76204681 -560.77099609]
[-72.57447052 -570.76885986]
[-60.84391022 -580.12371826]
[-48.60727310 -588.80609131]
[-35.90306473 -596.78869629]
[-22.77124786 -604.04638672]
[-9.25314713 -610.55639648]
[4.60870600 -616.29815674]
[18.77069664 -621.25366211]
[33.18826675 -625.40734863]
[47.81605148 -628.74603271]
[62.60802841 -631.25927734]
[77.51765442 -632.93920898]
[92.49801636 -633.78045654]
[107.50198364 -633.78045654]
[122.48234558 -632.93920898]
[137.39196777 -631.25927734]
[152.18394470 -628.74603271]
[166.81173706 -625.40734863]
[181.22930908 -621.25366211]
[195.39129639 -616.29815674]
[209.25314331 -610.55639648]
[222.77124023 -604.04638672]
[235.90306091 -596.78869629]
[248.60726929 -588.80609131]
[260.84390259 -580.12371826]
[272.57446289 -570.76885986]
[283.76205444 -560.77099609]
[294.37142944 -550.16156006]
[304.36926270 -538.97393799]
[313.72406006 -527.24334717]
[322.40637207 -515.00671387]
[330.38894653 -502.30245972]
[337.64660645 -489.17059326]
[344.15655518 -475.65246582]
[349.89828491 -461.79061890]
[354.85375977 -447.62860107]
[359.00732422 -433.21099854]
[362.34597778 -418.58322144]
[364.85919189 -403.79122925]
[366.53906250 -388.88159180]
[367.38027954 -373.90121460]
[367.38021851 -358.89724731]
[366.53887939 -343.91690063]
[364.85891724 -329.00729370]
[362.34558105 -314.21530151]
[359.00683594 -299.58755493]
[354.85314941 -285.16998291]
[349.89758301 -271.00802612]
[344.15576172 -257.14617920]
[337.64569092 -243.62811279]
[330.38793945 -230.49632263]
[322.40527344 -217.79214478]
[313.72283936 -205.55552673]
[304.36798096 -193.82501221]
[294.37005615 -182.63746643]
[283.76058960 -172.02812195]
[272.57296753 -162.03034973]
[260.84231567 -152.67559814]
[248.60562134 -143.99330139]
[235.90135193 -136.01078796]
[222.76948547 -128.75315857]
[209.25134277 -122.24327087]
[195.38943481 -116.50159454]
[181.22741699 -111.54618835]
[166.80981445 -107.39265442]
[152.18200684 -104.05406189]
[137.39001465 -101.54090881]
[122.48036957 -99.86109924]
[107.50000000 -99.01993561]
[107.50000000 -84.01993561]
[107.50000000 -69.01993561]
[107.50000000 -54.01993179]
[107.50000000 -39.01993179]
[107.50000000 -24.01993179]
[107.50000000 -9.01993275]
[107.50000000 5.98006725]
[107.50000000 20.98006821]
[107.50000000 35.98006821]
[122.06061554 39.43490219]
[135.43214417 46.15425110]
[146.89385986 55.77593613]
[155.82794189 67.78133392]
[161.75285339 81.52334595]
[164.34922791 96.26126862]
[163.47712708 111.20071411]
[159.18354797 125.53642273]
[151.69993591 138.49569702]
[141.42964172 149.38003540]
[128.92623901 157.60272217]
[114.86370850 162.72058105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
