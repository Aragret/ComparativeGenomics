%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAUCUUUGGGGGGGGGGGCAGGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAxxxxxxxxxxAUACAUCAUUAUUCUCGCACGGACUACAACCACGACCAAUGAUAUGAAAACCCCCCCCCCACCAUCGUUG\
) } def
/len { sequence length } bind def

/coor [
[85.78510284 361.58993530]
[71.93916321 355.57391357]
[60.23049927 346.04449463]
[51.52797699 333.70883179]
[46.47737503 319.48229980]
[45.45348358 304.42062378]
[48.53227997 289.64144897]
[55.48530197 276.24151611]
[65.79658508 265.21517944]
[78.70096588 257.38067627]
[93.24085236 253.31936646]
[93.24085236 238.31936646]
[93.24085236 223.31936646]
[93.24085236 208.31936646]
[93.24085236 193.31936646]
[93.24085236 178.31936646]
[93.24085236 163.31936646]
[93.24085236 148.31936646]
[93.24085236 133.31936646]
[93.24085236 118.31937408]
[83.97590637 106.52272797]
[69.40320587 102.96797180]
[54.83050156 99.41320801]
[40.25779724 95.85844421]
[32.16119385 107.61624908]
[20.55563164 115.87809753]
[6.85299349 119.66403961]
[-7.28828096 118.53707886]
[-20.16391563 112.65357208]
[-30.22919083 102.74188995]
[-36.28426743 90.01229095]
[-37.61718750 76.00917816]
[-52.11278152 72.15201569]
[-66.60838318 68.29486084]
[-81.10397339 64.43769836]
[-94.66419983 72.10308838]
[-109.30984497 67.98488617]
[-116.53405762 55.01004791]
[-131.02964783 51.15288544]
[-145.52525330 47.29572678]
[-158.21434021 56.43470001]
[-173.80526733 55.22761917]
[-184.93646240 44.24442673]
[-186.35212708 28.67105293]
[-177.38380432 15.86077023]
[-162.26608276 11.86219978]
[-148.13708496 18.56334496]
[-141.66809082 32.80013275]
[-127.17249298 36.65729141]
[-112.67689514 40.51445007]
[-99.95964050 32.84587097]
[-85.20410156 36.55108643]
[-77.24681854 49.94210434]
[-62.75122070 53.79926300]
[-48.25562286 57.65642166]
[-33.76002502 61.51358032]
[-24.35315132 48.79762650]
[-10.76057911 40.63401031]
[4.96017981 38.29280853]
[20.41627502 42.16015625]
[33.24372482 51.67490768]
[41.46898651 65.40985107]
[43.81256104 81.28574371]
[58.38526154 84.84050751]
[72.95796204 88.39526367]
[87.53067017 91.95002747]
[86.18226624 84.91120911]
[87.83378601 76.93450928]
[88.14584351 61.93775558]
[88.45790100 46.94100189]
[75.02575684 39.60368729]
[66.55166626 26.85816765]
[64.98289490 11.63326740]
[70.67995453 -2.57244062]
[82.33368683 -12.49458981]
[97.26615906 -15.85314274]
[112.04599762 -11.87632847]
[123.27689362 -1.47799027]
[128.37808228 12.95241070]
[126.17734528 28.09887314]
[117.18038940 40.48085022]
[103.45465088 47.25305557]
[103.14260101 62.24980927]
[102.83054352 77.24656677]
[115.18211365 85.75765228]
[129.08467102 80.12569427]
[142.98722839 74.49374390]
[156.88978577 68.86178589]
[170.79234314 63.22982788]
[184.69490051 57.59786987]
[187.13365173 45.88354492]
[194.86872864 36.91261673]
[205.87095642 32.85986710]
[217.33935547 34.63276672]
[226.41409302 41.67121124]
[240.53889465 36.62245560]
[254.66369629 31.57369995]
[255.03369141 16.40044975]
[260.86352539 2.38697362]
[271.36474609 -8.57151985]
[285.11718750 -14.99298573]
[300.26089478 -16.00897217]
[314.74783325 -11.48207474]
[326.61877441 -2.02452064]
[334.26824951 11.08463383]
[336.66174316 26.07248306]
[333.47555542 40.91204453]
[325.14056396 53.59638977]
[312.78405762 62.41006470]
[298.07711792 66.16108704]
[283.00872803 64.34217072]
[269.61679077 57.19930649]
[259.71246338 45.69850159]
[245.58766174 50.74726105]
[231.46284485 55.79601669]
[224.69885254 72.75614166]
[207.41433716 79.56372833]
[190.32684326 71.50042725]
[176.42430115 77.13238525]
[162.52174377 82.76434326]
[148.61918640 88.39629364]
[134.71662903 94.02825165]
[120.81407166 99.66020966]
[135.66329956 97.53875732]
[148.70404053 104.95084381]
[154.47895813 118.79462433]
[150.57135010 133.27670288]
[138.61648560 142.33656311]
[123.61727905 142.18280029]
[111.85064697 132.87977600]
[108.24085236 118.31937408]
[108.24085236 133.31936646]
[108.24085236 148.31936646]
[108.24085236 163.31936646]
[108.24085236 178.31936646]
[108.24085236 193.31936646]
[108.24085236 208.31936646]
[108.24085236 223.31936646]
[108.24085236 238.31936646]
[108.24085236 253.31936646]
[122.78073883 257.38067627]
[135.68511963 265.21517944]
[145.99641418 276.24151611]
[152.94943237 289.64144897]
[156.02822876 304.42062378]
[155.00433350 319.48229980]
[149.95373535 333.70883179]
[141.25120544 346.04449463]
[129.54255676 355.57391357]
[115.69660950 361.58993530]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 66]
[22 65]
[23 64]
[24 63]
[32 56]
[33 55]
[34 54]
[35 53]
[38 50]
[39 49]
[40 48]
[68 84]
[69 83]
[70 82]
[85 123]
[86 122]
[87 121]
[88 120]
[89 119]
[90 118]
[95 115]
[96 114]
[97 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
