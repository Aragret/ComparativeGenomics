%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGAUAAACCGGGGGGGGGGCCGAUCAACCUCACCACCUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCxxxxxxxxxxUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACCCCCCCCCCCCCUCCAUAAACC\
) } def
/len { sequence length } bind def

/coor [
[92.79280090 578.18731689]
[80.90852356 568.91217041]
[71.58982086 557.06207275]
[65.37845612 543.32592773]
[62.63555145 528.50225830]
[63.52058029 513.45300293]
[67.98208618 499.05307007]
[75.76068878 486.13964844]
[86.40413666 475.46350098]
[99.29364777 467.64529419]
[113.67983246 463.13964844]
[112.74420166 448.16885376]
[111.80857849 433.19805908]
[110.87294769 418.22726440]
[109.93731689 403.25646973]
[109.00169373 388.28567505]
[108.06606293 373.31488037]
[107.13043213 358.34408569]
[106.19480896 343.37329102]
[105.25917816 328.40249634]
[91.85995483 321.89663696]
[83.46038818 309.47473145]
[82.39924622 294.41683960]
[89.06140900 280.75988770]
[101.74766541 272.21551514]
[100.81203461 257.24472046]
[92.29593658 245.02485657]
[99.15737915 230.76895142]
[98.22174835 215.79815674]
[83.72773743 212.12602234]
[71.06124115 204.14291382]
[61.46943283 192.62001038]
[55.90134811 178.67771912]
[54.91397095 163.67680359]
[58.61655045 149.08549500]
[66.65868378 136.33589172]
[78.26342773 126.68330383]
[92.30233002 121.08271027]
[91.36669922 106.11191559]
[87.50953674 91.61631775]
[80.88104248 78.16035461]
[74.25254059 64.70439148]
[67.60992432 58.33827209]
[67.62939453 50.89883041]
[61.28226089 37.30788040]
[54.93513107 23.71692848]
[48.58800125 10.12597752]
[34.08507919 14.09752846]
[19.11955452 15.56077671]
[4.12201834 14.47362328]
[-10.47602177 10.86734581]
[-24.25455093 4.84570551]
[-36.81713104 -3.41804361]
[-47.80231476 -13.68613625]
[-56.89403915 -25.66314125]
[-63.83070755 -39.00445175]
[-68.41275024 -53.32621765]
[-70.50831604 -68.21636963]
[-70.05712891 -83.24648285]
[-67.07216644 -97.98412323]
[-61.63930511 -112.00524902]
[-53.91485977 -124.90645599]
[-44.12108612 -136.31652832]
[-32.53976440 -145.90721130]
[-19.50411034 -153.40252686]
[-5.38919163 -158.58683777]
[9.39888096 -161.31097412]
[24.43462372 -161.49655151]
[39.28543091 -159.13825989]
[53.52400970 -154.30390930]
[66.74069214 -147.13262939]
[78.55520630 -137.83073425]
[88.62763214 -126.66587067]
[96.66815186 -113.95925903]
[102.44543457 -100.07649231]
[105.79325104 -85.41702271]
[106.61528015 -70.40261841]
[104.88787079 -55.46528244]
[100.66072845 -41.03478622]
[94.05546570 -27.52632523]
[85.26213837 -15.32856464]
[74.53373718 -4.79245806]
[62.17895508 3.77884817]
[68.52608490 17.36979866]
[74.87321472 30.96075058]
[81.22034454 44.55170059]
[87.70851135 58.07588959]
[94.33700562 71.53185272]
[100.96550751 84.98782349]
[108.19284821 86.99169159]
[122.64753723 90.99943542]
[129.87487793 93.00330353]
[142.48600769 84.88175964]
[155.09713745 76.76021576]
[167.70826721 68.63867950]
[180.31939697 60.51713562]
[192.93052673 52.39559174]
[199.94599915 37.57280350]
[216.31047058 36.50685883]
[225.18955994 50.29430771]
[217.44923401 64.75180817]
[201.05206299 65.00672150]
[188.44093323 73.12826538]
[175.82980347 81.24980164]
[163.21867371 89.37134552]
[150.60755920 97.49288940]
[137.99642944 105.61443329]
[121.31098938 109.40956116]
[106.33749390 105.17629242]
[107.27311707 120.14707947]
[121.90009308 123.95614624]
[134.61634827 132.08874512]
[144.18333435 143.73783875]
[149.67382812 157.75459290]
[150.56185913 172.76173401]
[146.77302551 187.28880310]
[138.69055176 199.91629028]
[127.11656189 209.41435242]
[113.19254303 214.86251831]
[114.12817383 229.83331299]
[122.71119690 243.12400818]
[115.78282928 256.30911255]
[116.71845245 271.27990723]
[130.36982727 278.17825317]
[138.68054199 290.89944458]
[139.50248718 305.97229004]
[132.71488953 319.34332275]
[120.22997284 327.46688843]
[121.16559601 342.43768311]
[122.10122681 357.40847778]
[123.03685760 372.37927246]
[123.97248077 387.35003662]
[124.90811157 402.32083130]
[125.84374237 417.29162598]
[126.77936554 432.26242065]
[127.71499634 447.23321533]
[128.65061951 462.20401001]
[143.48585510 464.88342285]
[157.24848938 471.03591919]
[169.13838196 480.30383301]
[178.46427917 492.14828491]
[184.68397522 505.88067627]
[187.43585205 520.70263672]
[186.55995178 535.75244141]
[182.10717773 550.15509033]
[174.33641052 563.07324219]
[163.69943237 573.75585938]
[150.81466675 581.58184814]
[136.43121338 586.09625244]
[121.38530731 587.03656006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[25 123]
[26 122]
[28 120]
[29 119]
[38 110]
[39 109]
[40 89]
[41 88]
[42 87]
[44 86]
[45 85]
[46 84]
[47 83]
[92 107]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
