%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCCUUACUAGGGGGGGGGGCUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGGCUACAUAGAAAAxxxxxxxxxxAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCCCCCCCCCCCUAGCCCUACUA\
) } def
/len { sequence length } bind def

/coor [
[72.27374268 429.28784180]
[58.00197220 424.47839355]
[45.09798813 416.71301270]
[34.16533279 406.35485840]
[25.71534729 393.88842773]
[20.14325142 379.89678955]
[17.70966148 365.03439331]
[18.52840233 349.99630737]
[22.56118011 335.48593140]
[29.61937332 322.18194580]
[39.37285614 310.70660400]
[51.36544418 301.59661865]
[65.03622437 295.27807617]
[79.74578094 292.04650879]
[79.74578094 277.04650879]
[79.74578094 262.04650879]
[79.74578094 247.04650879]
[79.74578094 232.04650879]
[79.74578094 217.04650879]
[79.74578094 202.04650879]
[79.74578094 187.04650879]
[79.74578094 172.04650879]
[79.74578094 157.04650879]
[79.74578094 142.04650879]
[67.45372009 133.44969177]
[53.36404037 138.59567261]
[39.27436447 143.74163818]
[25.18468666 148.88760376]
[15.07810307 161.80229187]
[-1.11955106 159.23947144]
[-6.74551725 143.83555603]
[3.98771548 131.43676758]
[20.03871727 134.79792786]
[34.12839508 129.65196228]
[48.21807098 124.50598907]
[62.30775070 119.36002350]
[59.43535233 109.54552460]
[59.03136444 99.49722290]
[61.03807449 89.81635284]
[65.25591278 81.06257629]
[71.36002350 73.72166443]
[78.92388153 68.17861176]
[87.44840240 64.69776154]
[85.35420227 49.84467316]
[83.26000214 34.99158096]
[81.16580200 20.13849068]
[79.07160187 5.28539848]
[65.83341217 2.64111972]
[54.08178329 -3.95619750]
[44.96186066 -13.84746361]
[39.35733032 -26.05340958]
[37.80479050 -39.37152863]
[40.44240952 -52.49454117]
[46.99775696 -64.13871765]
[56.81586075 -73.16944885]
[68.92463684 -78.71180725]
[67.42638397 -93.63679504]
[65.92812347 -108.56178284]
[54.82674408 -123.22083282]
[62.59053802 -138.93240356]
[60.79394913 -153.82443237]
[58.99736023 -168.71644592]
[54.84196854 -176.91528320]
[57.31688690 -183.92402649]
[55.81863022 -198.84901428]
[54.32036972 -213.77400208]
[39.50008011 -216.74896240]
[26.21588898 -223.96156311]
[15.64902020 -234.77047729]
[8.73907375 -248.21458435]
[6.10047579 -263.09844971]
[7.96784925 -278.09860229]
[14.17514896 -291.88122559]
[24.17042542 -303.22079468]
[37.06490707 -311.10900879]
[51.71202087 -314.84442139]
[66.80935669 -314.09490967]
[81.01448059 -308.92712402]
[93.06426239 -299.80056763]
[101.88726044 -287.52676392]
[106.69893646 -273.19711304]
[107.07143402 -258.08578491]
[102.97163391 -243.53643799]
[94.76408386 -230.84283447]
[83.17860413 -221.13366699]
[69.24536133 -215.27226257]
[70.74361420 -200.34727478]
[72.24187469 -185.42228699]
[73.88938141 -170.51304626]
[75.68596649 -155.62101746]
[77.48255920 -140.72900391]
[86.82295990 -132.98739624]
[88.41299438 -120.55552673]
[80.85311127 -110.06004333]
[82.35137177 -95.13505554]
[83.84962463 -80.21006775]
[99.85902405 -75.81009674]
[112.99392700 -65.59481049]
[121.23651123 -51.09800339]
[123.30696106 -34.51387787]
[118.86210632 -18.36492920]
[108.55193329 -5.11828756]
[93.92469025 3.19119740]
[96.01889038 18.04428864]
[98.11309052 32.89738083]
[100.20729065 47.75046921]
[102.30149841 62.60356140]
[115.13820648 65.72719574]
[126.09273529 73.11209106]
[133.80305481 83.84005737]
[137.31051636 96.57724762]
[152.21977234 98.22475433]
[167.12902832 99.87226105]
[182.03826904 101.51976776]
[196.94752502 103.16727448]
[205.87803650 100.99149323]
[212.13752747 104.99980927]
[227.01083374 106.94530487]
[241.88412476 108.89080048]
[258.37368774 104.94985962]
[266.72537231 119.70403290]
[254.85977173 131.81369019]
[239.93862915 123.76409912]
[225.06533813 121.81860352]
[210.19203186 119.87311554]
[195.30001831 118.07652283]
[180.39076233 116.42901611]
[165.48152161 114.78150940]
[150.57226562 113.13400269]
[135.66302490 111.48649597]
[127.99679565 127.29827881]
[113.46481323 138.44854736]
[94.74578094 142.04650879]
[94.74578094 157.04650879]
[94.74578094 172.04650879]
[94.74578094 187.04650879]
[94.74578094 202.04650879]
[94.74578094 217.04650879]
[94.74578094 232.04650879]
[94.74578094 247.04650879]
[94.74578094 262.04650879]
[94.74578094 277.04650879]
[94.74578094 292.04650879]
[109.45533752 295.27807617]
[123.12611389 301.59661865]
[135.11869812 310.70660400]
[144.87219238 322.18194580]
[151.93037415 335.48593140]
[155.96315002 349.99630737]
[156.78189087 365.03439331]
[154.34831238 379.89678955]
[148.77621460 393.88842773]
[140.32623291 406.35485840]
[129.39356995 416.71301270]
[116.48958588 424.47839355]
[102.21781921 429.28784180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 36]
[26 35]
[27 34]
[28 33]
[43 107]
[44 106]
[45 105]
[46 104]
[47 103]
[56 96]
[57 95]
[58 94]
[60 91]
[61 90]
[62 89]
[64 88]
[65 87]
[66 86]
[111 130]
[112 129]
[113 128]
[114 127]
[115 126]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
