%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUUCUACGGGGGGGGGGCUACGCCUAAUCUACUCCACCUCAAUCACACUACUCCCCAUAUCUAACAAxxxxxxxxxxCACUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACCCCCCCCCCCUACUUCUCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 351.56054688]
[71.19830322 345.54452515]
[59.48964310 336.01510620]
[50.78712082 323.67944336]
[45.73651886 309.45291138]
[44.71262741 294.39123535]
[47.79142761 279.61206055]
[54.74444962 266.21212769]
[65.05573273 255.18580627]
[77.96011353 247.35130310]
[92.50000000 243.28999329]
[92.50000000 228.28999329]
[92.50000000 213.28999329]
[92.50000000 198.28999329]
[92.50000000 183.28999329]
[92.50000000 168.28999329]
[92.50000000 153.28999329]
[92.50000000 138.28999329]
[92.50000000 123.28998566]
[92.50000000 108.28998566]
[92.34396362 93.29080200]
[92.03190613 78.29404449]
[91.71984863 63.29729080]
[76.72676086 62.71187592]
[61.79551315 61.23085785]
[46.97956467 58.85953903]
[32.33194733 55.60640335]
[17.90510178 51.48310089]
[3.75066876 46.50439453]
[-10.08068085 40.68809891]
[-23.53943443 34.05503845]
[-36.57741165 26.62896156]
[-49.14794540 18.43644905]
[-61.20602798 9.50682640]
[-72.70849609 -0.12793855]
[-83.61418152 -10.43335533]
[-93.88403320 -21.37253380]
[-103.48129272 -32.90631485]
[-112.37160492 -44.99340820]
[-120.52314758 -57.59054565]
[-127.90673828 -70.65263367]
[-134.49594116 -84.13291931]
[-140.26716614 -97.98313141]
[-145.19976807 -112.15370178]
[-149.27606201 -126.59389496]
[-152.48149109 -141.25202942]
[-154.80456543 -156.07562256]
[-156.23695374 -171.01161194]
[-156.77354431 -186.00653076]
[-156.41241455 -201.00669861]
[-155.15486145 -215.95841980]
[-153.00538635 -230.80818176]
[-149.97166443 -245.50280762]
[-146.06457520 -259.98968506]
[-141.29809570 -274.21701050]
[-135.68930054 -288.13378906]
[-129.25825500 -301.69024658]
[-122.02799988 -314.83779907]
[-114.02439117 -327.52944946]
[-105.27609253 -339.71972656]
[-95.81443024 -351.36499023]
[-85.67325592 -362.42358398]
[-74.88888550 -372.85589600]
[-63.49992371 -382.62457275]
[-51.54713440 -391.69464111]
[-39.07331085 -400.03366089]
[-26.12310219 -407.61175537]
[-12.74287224 -414.40182495]
[1.01948512 -420.37954712]
[15.11470222 -425.52349854]
[29.49232292 -429.81530762]
[44.10087585 -433.23959351]
[58.88806915 -435.78408813]
[73.80096436 -437.43966675]
[88.78618622 -438.20046997]
[103.79007721 -438.06369019]
[118.75893402 -437.02987671]
[133.63917542 -435.10272217]
[148.37753296 -432.28909302]
[162.92123413 -428.59909058]
[177.21823120 -424.04592896]
[191.21734619 -418.64587402]
[204.86845398 -412.41830444]
[218.12268066 -405.38546753]
[230.93260193 -397.57254028]
[243.25234985 -389.00753784]
[255.03781128 -379.72106934]
[266.24682617 -369.74642944]
[276.83923340 -359.11926270]
[286.77713013 -347.87768555]
[296.02496338 -336.06185913]
[304.54959106 -323.71414185]
[312.32049561 -310.87872314]
[319.30990601 -297.60153198]
[325.49276733 -283.93011475]
[330.84695435 -269.91339111]
[335.35330200 -255.60156250]
[338.99566650 -241.04585266]
[341.76101685 -226.29837036]
[343.63943481 -211.41189575]
[344.62423706 -196.43974304]
[344.71188354 -181.43547058]
[343.90203857 -166.45283508]
[342.19763184 -151.54542542]
[339.60473633 -136.76664734]
[336.13265991 -122.16938782]
[331.79379272 -107.80589294]
[326.60369873 -93.72759247]
[320.58096313 -79.98487854]
[313.74713135 -66.62695312]
[306.12667847 -53.70162582]
[297.74685669 -41.25517273]
[288.63769531 -29.33214188]
[278.83178711 -17.97522163]
[268.36422729 -7.22506571]
[257.27252197 2.87984467]
[245.59632874 12.30333519]
[233.37747192 21.01167297]
[220.65968323 28.97368240]
[207.48851013 36.16086578]
[193.91108704 42.54748535]
[179.97601318 48.11069107]
[165.73316956 52.83055878]
[151.23356628 56.69019318]
[136.52908325 59.67578506]
[121.67236328 61.77663803]
[106.71660614 62.98523331]
[107.02866364 77.98198700]
[107.34071350 92.97874451]
[110.66161346 100.38520813]
[107.50000000 108.28998566]
[107.50000000 123.28998566]
[107.50000000 138.28999329]
[107.50000000 153.28999329]
[107.50000000 168.28999329]
[107.50000000 183.28999329]
[107.50000000 198.28999329]
[107.50000000 213.28999329]
[107.50000000 228.28999329]
[107.50000000 243.28999329]
[122.03988647 247.35130310]
[134.94427490 255.18580627]
[145.25555420 266.21212769]
[152.20857239 279.61206055]
[155.28736877 294.39123535]
[154.26348877 309.45291138]
[149.21287537 323.67944336]
[140.51036072 336.01510620]
[128.80169678 345.54452515]
[114.95575714 351.56054688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 129]
[22 128]
[23 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
