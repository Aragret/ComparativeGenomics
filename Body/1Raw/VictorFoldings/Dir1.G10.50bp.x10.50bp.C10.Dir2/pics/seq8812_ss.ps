%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAGCCCAUGGGGGGGGGGGACCCCUAACAGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCxxxxxxxxxxGCAAAACUAACCCCCUAAUAAAAUUAAUUAACCACUCAUUCAUCGACCUCCCCCCCCCCCCCCACCCCAU\
) } def
/len { sequence length } bind def

/coor [
[82.04144287 398.51715088]
[68.19550323 392.50112915]
[56.48683929 382.97171021]
[47.78431702 370.63604736]
[42.73371506 356.40951538]
[41.70982361 341.34783936]
[44.78862000 326.56869507]
[51.74164200 313.16876221]
[62.05292892 302.14242554]
[74.95730591 294.30792236]
[89.49719238 290.24661255]
[89.49719238 275.24661255]
[89.49719238 260.24661255]
[89.49719238 245.24661255]
[89.49719238 230.24661255]
[89.49719238 215.24661255]
[89.49719238 200.24661255]
[89.49719238 185.24661255]
[89.49719238 170.24661255]
[89.49719238 155.24661255]
[89.49719238 140.24661255]
[89.49719238 125.24660492]
[77.14562225 116.73551941]
[63.12891006 122.07702637]
[49.11219788 127.41854095]
[35.09548569 132.76005554]
[21.07877159 138.10156250]
[8.43103886 149.39187622]
[-5.91928673 140.36390686]
[-1.21668649 124.07519531]
[15.73725796 124.08485413]
[29.75397110 118.74333954]
[43.77068329 113.40183258]
[57.78739548 108.06031799]
[71.80410767 102.71880341]
[71.88212585 95.21920776]
[56.88293839 95.06317139]
[42.56959152 99.54959869]
[33.87982941 87.32306671]
[42.82281876 75.28051758]
[57.03897858 80.06398773]
[72.03816223 80.22002411]
[72.11618042 72.72042847]
[58.21362686 67.08847046]
[42.93898773 71.99407196]
[29.66037560 62.99085236]
[28.56400490 46.98530579]
[40.49091721 36.25551987]
[56.29180908 39.03247070]
[63.84558487 53.18591309]
[77.74813843 58.81787109]
[91.70852661 53.33084106]
[98.05565643 39.73988724]
[104.40278625 26.14893723]
[110.74991608 12.55798721]
[117.09704590 -1.03296375]
[104.21885681 -8.75023270]
[92.20243073 -17.75076485]
[81.17515564 -27.93915176]
[71.25392151 -39.20738602]
[62.54390335 -51.43602753]
[55.13742828 -64.49543762]
[49.11301422 -78.24717712]
[44.53451538 -92.54547882]
[41.45047379 -107.23876953]
[39.89357758 -122.17128754]
[39.88032913 -137.18473816]
[41.41087723 -152.11997986]
[44.46899033 -166.81869507]
[49.02225113 -181.12504578]
[55.02239609 -194.88739014]
[62.40581512 -207.95985413]
[71.09424591 -220.20384216]
[80.99558258 -231.48956299]
[92.00485992 -241.69738770]
[104.00538635 -250.71911621]
[116.86994171 -258.45910645]
[130.46215820 -264.83529663]
[144.63793945 -269.78009033]
[159.24702454 -273.24108887]
[174.13455200 -275.18161011]
[189.14270020 -275.58108521]
[204.11236572 -274.43527222]
[218.88488770 -271.75628662]
[233.30363464 -267.57257080]
[247.21578979 -261.92843628]
[260.47384644 -254.88375854]
[272.93731689 -246.51318359]
[284.47399902 -236.90545654]
[294.96166992 -226.16241455]
[304.28912354 -214.39794922]
[312.35748291 -201.73677063]
[319.08123779 -188.31307983]
[324.38906860 -174.26919556]
[328.22476196 -159.75396729]
[330.54763794 -144.92129517]
[331.33303833 -129.92839050]
[330.57269287 -114.93419647]
[328.27462769 -100.09765625]
[324.46322632 -85.57604980]
[319.17886353 -71.52330017]
[312.47756958 -58.08839417]
[304.43038940 -45.41373825]
[295.12261963 -33.63368988]
[284.65295410 -22.87313080]
[273.13232422 -13.24612331]
[260.68289185 -4.85472155]
[247.43661499 2.21212196]
[233.53392029 7.87949419]
[219.12217712 12.08731747]
[204.35417175 14.79098701]
[189.38642883 15.96184254]
[174.37763977 15.58747196]
[159.48689270 13.67184448]
[144.87203979 10.23526573]
[130.68800354 5.31416559]
[124.34086609 18.90511703]
[117.99373627 32.49606705]
[111.64661407 46.08701706]
[105.29948425 59.67797089]
[116.81007385 64.80948639]
[125.73358154 72.95728302]
[131.37609863 83.05260468]
[133.44023132 93.90520477]
[132.02900696 104.33989716]
[127.60558319 113.32268524]
[120.91581726 120.06327057]
[112.88430023 124.08358002]
[104.49719238 125.24660492]
[104.49719238 140.24661255]
[104.49719238 155.24661255]
[104.49719238 170.24661255]
[104.49719238 185.24661255]
[104.49719238 200.24661255]
[104.49719238 215.24661255]
[104.49719238 230.24661255]
[104.49719238 245.24661255]
[104.49719238 260.24661255]
[104.49719238 275.24661255]
[104.49719238 290.24661255]
[119.03707886 294.30792236]
[131.94146729 302.14242554]
[142.25274658 313.16876221]
[149.20576477 326.56869507]
[152.28456116 341.34783936]
[151.26068115 356.40951538]
[146.21006775 370.63604736]
[137.50755310 382.97171021]
[125.79888916 392.50112915]
[111.95294952 398.51715088]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 35]
[24 34]
[25 33]
[26 32]
[27 31]
[43 51]
[44 50]
[52 120]
[53 119]
[54 118]
[55 117]
[56 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
