%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAAACUCUAGGGGGGGGGGCUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCxxxxxxxxxxAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAAAUAGCCCACUAACCCCCCCCCCUCCAAACUCUA\
) } def
/len { sequence length } bind def

/coor [
[61.69048691 371.17562866]
[48.20160675 364.44409180]
[36.71610641 354.67953491]
[27.90173912 342.44964600]
[22.27095604 328.46545410]
[20.15112877 313.53997803]
[21.66549683 298.54095459]
[26.72602081 284.34045410]
[35.03848648 271.76403809]
[46.11961746 261.54287720]
[59.32517242 254.27124023]
[73.88739777 250.37187195]
[73.57942200 235.37503052]
[73.27143860 220.37818909]
[72.96346283 205.38136292]
[72.65548706 190.38452148]
[72.34751129 175.38768005]
[72.03952789 160.39083862]
[71.73155212 145.39401245]
[71.42357635 130.39717102]
[58.75205994 122.37017059]
[45.06143188 128.49934387]
[31.37080765 134.62852478]
[29.16303062 149.89709473]
[19.03367043 161.53321838]
[4.21496916 165.82386780]
[-10.56447792 161.39990234]
[-20.58860397 149.67298889]
[-22.65874672 134.38514709]
[-16.11433220 120.41468048]
[-3.04365683 112.21949768]
[12.38247204 112.41465759]
[25.24163437 120.93788910]
[38.93225861 114.80871582]
[52.62288666 108.67954254]
[95.40174866 86.37785339]
[96.32515717 71.40630341]
[97.24857330 56.43474960]
[98.17198944 41.46319962]
[99.09539795 26.49164963]
[97.25207520 11.60534286]
[92.70478821 -2.68878722]
[88.15749359 -16.98291779]
[83.61020660 -31.27704811]
[79.06291962 -45.57117844]
[64.28428650 -42.88410187]
[49.28336716 -42.10899353]
[34.30649185 -43.25857544]
[19.59959412 -46.31397629]
[5.40417242 -51.22501755]
[-8.04666996 -57.91106033]
[-20.53205872 -66.26231384]
[-31.84697151 -76.14163971]
[-41.80560684 -87.38681030]
[-50.24443817 -99.81317139]
[-57.02489090 -113.21667480]
[-62.03562164 -127.37721252]
[-65.19435120 -142.06227112]
[-66.44921112 -157.03068542]
[-65.77958679 -172.03668213]
[-63.19649124 -186.83384705]
[-58.74232864 -201.17918396]
[-52.49024200 -214.83714294]
[-44.54290009 -227.58343506]
[-35.03080368 -239.20877075]
[-24.11014748 -249.52223206]
[-11.96026039 -258.35449219]
[1.21934485 -265.56048584]
[15.21224785 -271.02188110]
[29.78867149 -274.64901733]
[44.70925903 -276.38235474]
[59.72900009 -276.19338989]
[74.60125732 -274.08523560]
[89.08181000 -270.09252930]
[102.93288422 -264.28079224]
[115.92703247 -256.74551392]
[127.85086823 -247.61038208]
[138.50859070 -237.02543640]
[147.72520447 -225.16447449]
[155.34934998 -212.22227478]
[161.25584412 -198.41134644]
[165.34770203 -183.95848083]
[167.55770874 -169.10102844]
[167.84957886 -154.08293152]
[166.21853638 -139.15081787]
[162.69136047 -124.54988098]
[157.32595825 -110.51988220]
[150.21044922 -97.29121399]
[141.46165466 -85.08109283]
[131.22326660 -74.09001923]
[119.66338348 -64.49848938]
[106.97183990 -56.46399307]
[93.35704803 -50.11846924]
[97.90433502 -35.82433701]
[102.45162964 -21.53020668]
[106.99891663 -7.23607731]
[111.54620361 7.05805254]
[124.51067352 -0.88208318]
[137.44703674 4.00340652]
[151.59436035 -0.98191524]
[165.74166870 -5.96723747]
[168.48495483 -21.07915306]
[178.42889404 -32.78443146]
[192.89863586 -37.93441391]
[208.00187683 -35.14377975]
[219.67593384 -25.16319656]
[224.78053284 -10.67738914]
[221.94256592 4.41703176]
[211.92544556 16.05974388]
[197.42370605 21.11891365]
[182.33825684 18.23365211]
[170.72698975 8.18007946]
[156.57968140 13.16540146]
[142.43235779 18.15072250]
[132.09869385 31.38022041]
[114.06694794 27.41506386]
[113.14353943 42.38661575]
[112.22012329 57.35816574]
[111.29670715 72.32971191]
[110.37329865 87.30126190]
[118.00626373 100.21395874]
[131.56816101 106.62294006]
[145.13006592 113.03191376]
[161.42063904 111.14798737]
[170.97888184 124.47359467]
[163.97210693 139.30049133]
[147.60826111 140.37605286]
[138.72108459 126.59381104]
[125.15918732 120.18483734]
[111.59729004 113.77585602]
[105.30307007 117.85419464]
[86.42041016 130.08918762]
[86.72839355 145.08602905]
[87.03636932 160.08287048]
[87.34434509 175.07969666]
[87.65232086 190.07653809]
[87.96030426 205.07337952]
[88.26828003 220.07022095]
[88.57625580 235.06706238]
[88.88423157 250.06388855]
[103.59426880 253.36212158]
[117.08722687 260.08547974]
[128.57864380 269.84307861]
[137.40042114 282.06762695]
[143.03968811 296.04840088]
[145.16856384 310.97259521]
[143.66328430 325.97250366]
[138.61137390 340.17608643]
[130.30653381 352.75753784]
[119.23160553 362.98541260]
[106.03045654 370.26504517]
[91.47060394 374.17324829]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 35]
[22 34]
[23 33]
[36 120]
[37 119]
[38 118]
[39 117]
[40 116]
[41 97]
[42 96]
[43 95]
[44 94]
[45 93]
[99 114]
[100 113]
[101 112]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
