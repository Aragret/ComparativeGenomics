%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACAUCAUAGGGGGGGGGGACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUxxxxxxxxxxCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCAAACUCAUCACUCCCCCCCCCCAGACAUCGUA\
) } def
/len { sequence length } bind def

/coor [
[13.69115162 246.90264893]
[13.17087364 231.91168213]
[14.81368923 217.00190735]
[18.58538818 202.48384094]
[24.40742493 188.65980530]
[32.15855789 175.81768799]
[41.67737198 164.22492981]
[52.76564026 154.12292480]
[65.19245148 145.72207642]
[78.69901276 139.19729614]
[93.01383209 134.68217468]
[78.69123077 139.13899231]
[64.36863708 143.59580994]
[50.09317398 148.20137024]
[35.86639404 152.95518494]
[21.63961601 157.70899963]
[7.41283751 162.46281433]
[-6.81394148 167.21662903]
[-21.04071999 171.97044373]
[-35.26750183 176.72425842]
[-34.89979172 191.83570862]
[-39.00420380 206.38374329]
[-47.21577072 219.07475281]
[-58.80433273 228.78024292]
[-72.73943329 234.63723755]
[-87.78198242 236.12490845]
[-102.59439850 233.11099243]
[-115.85958099 225.86347961]
[-126.39798737 215.02682495]
[-133.27255249 201.56459045]
[-135.87200928 186.67384338]
[-133.96519470 171.67866516]
[-127.72167206 157.91239929]
[-117.69661713 146.59915161]
[-104.78143311 138.74488831]
[-90.12454987 135.04798889]
[-75.02923584 135.83718872]
[-60.83775330 141.04231262]
[-48.81200790 150.20051575]
[-40.02131653 162.49748230]
[-25.79453659 157.74366760]
[-11.56775665 152.98985291]
[2.65902257 148.23603821]
[16.88580132 143.48222351]
[31.11258125 138.72840881]
[45.33935928 133.97459412]
[50.72144699 128.83856201]
[59.91181946 129.27320862]
[74.23442078 124.81639099]
[88.55701447 120.35957336]
[78.88697815 105.54397583]
[82.64054871 89.47171021]
[95.83547211 81.69125366]
[98.62779236 66.95344543]
[101.42012024 52.21563721]
[103.90523529 37.42293167]
[106.08207703 22.58172607]
[100.42939758 7.80479050]
[109.93180084 -3.66489053]
[112.10864258 -18.50609589]
[114.28547668 -33.34730148]
[116.46231079 -48.18850708]
[118.63915253 -63.02971268]
[120.81598663 -77.87091827]
[106.66549683 -83.00399017]
[93.83812714 -90.88076019]
[82.85915375 -101.17867279]
[74.17815399 -113.47603607]
[68.15061188 -127.26927948]
[65.02336121 -141.99359131]
[64.92444611 -157.04600525]
[67.85792542 -171.81013489]
[73.70366669 -185.68139648]
[82.22230530 -198.09179688]
[93.06499481 -208.53309631]
[105.78774261 -216.57775879]
[119.86955261 -221.89636230]
[134.73379517 -224.27108765]
[149.77177429 -223.60472107]
[164.36769104 -219.92453003]
[177.92387390 -213.38122559]
[189.88519287 -204.24275208]
[199.76184082 -192.88331604]
[207.14936829 -179.76808167]
[211.74526978 -165.43411255]
[213.36134338 -150.46838379]
[211.93141174 -135.48371887]
[207.51403809 -121.09373474]
[200.29008484 -107.88769531]
[190.55538940 -96.40637970]
[178.70858765 -87.11993408]
[165.23478699 -80.40863800]
[150.68572998 -76.54731750]
[135.65719604 -75.69408417]
[133.48036194 -60.85287476]
[131.30351257 -46.01166916]
[129.12667847 -31.17046547]
[126.94984436 -16.32925987]
[124.77301025 -1.48805356]
[130.58139038 12.22733974]
[120.92327881 24.75856400]
[118.74644470 39.59976959]
[120.86886597 43.94382477]
[120.23912811 49.67398453]
[116.15792847 55.00796509]
[113.36560059 69.74576569]
[110.57327271 84.48357391]
[120.99528503 98.27921295]
[116.11859131 116.90103912]
[131.09831238 117.68088531]
[146.07801819 118.46072388]
[161.05773926 119.24057007]
[175.41313171 111.31247711]
[189.31512451 120.01113129]
[188.46253967 136.38810730]
[173.73243713 143.59616089]
[160.27789307 134.22029114]
[145.29817200 133.44044495]
[130.31846619 132.66059875]
[115.33875275 131.88075256]
[130.31538391 132.71774292]
[145.01559448 135.70162964]
[159.13327026 140.77027893]
[172.37442017 147.81813049]
[184.46327209 156.69842529]
[195.14810181 167.22622681]
[204.20639038 179.18228149]
[211.44950867 192.31762695]
[216.72660828 206.35871887]
[219.92781067 221.01313782]
[220.98643494 235.97573853]
[219.88044739 250.93490601]
[216.63287354 265.57913208]
[211.31135559 279.60345459]
[204.02670288 292.71578979]
[194.93060303 304.64312744]
[184.21250916 315.13705444]
[172.09559631 323.97903442]
[158.83221436 330.98492432]
[144.69856262 336.00885010]
[129.98898315 338.94619751]
[115.00977325 339.73577881]
[100.07289124 338.36117554]
[85.48938751 334.85095215]
[71.56296539 329.27828979]
[58.58364105 321.75918579]
[46.82169342 312.45022583]
[36.52207184 301.54528809]
[27.89926338 289.27142334]
[21.13283157 275.88430786]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 50]
[12 49]
[13 48]
[14 46]
[15 45]
[16 44]
[17 43]
[18 42]
[19 41]
[20 40]
[53 107]
[54 106]
[55 105]
[56 102]
[57 101]
[59 99]
[60 98]
[61 97]
[62 96]
[63 95]
[64 94]
[109 120]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
