%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAGAACCCGGGGGGGGGGUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUxxxxxxxxxxUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACACAUUCCCCCCCCCCCGAAGAACCC\
) } def
/len { sequence length } bind def

/coor [
[89.64128113 364.44885254]
[75.79534149 358.43280029]
[64.08667755 348.90338135]
[55.38415527 336.56771851]
[50.33355331 322.34121704]
[49.30966187 307.27951050]
[52.38846207 292.50036621]
[59.34148407 279.10043335]
[69.65277100 268.07409668]
[82.55715179 260.23959351]
[97.09703827 256.17828369]
[97.09703827 241.17828369]
[97.09703827 226.17828369]
[97.09703827 211.17828369]
[97.09703827 196.17828369]
[97.09703827 181.17828369]
[97.09703827 166.17828369]
[97.09703827 151.17828369]
[97.09703827 136.17828369]
[97.09703827 121.17828369]
[88.87642670 133.72505188]
[73.88706970 134.29002380]
[64.74530792 122.39767456]
[69.14562988 108.05761719]
[83.38443756 103.33971405]
[68.88883972 99.48255157]
[54.39324188 95.62539673]
[45.22890472 96.44197083]
[39.63782501 91.53427124]
[25.22560883 87.37638092]
[10.81339264 83.21849823]
[-4.59073305 86.82730103]
[-14.67455769 75.86528778]
[-29.08677292 71.70740509]
[-35.68838501 72.94281006]
[-41.08623123 70.91931152]
[-44.00529861 67.06514740]
[-58.23207855 62.31133270]
[-72.45885468 57.55751801]
[-86.68563843 52.80370331]
[-98.13130188 63.04540253]
[-113.16766357 66.17642975]
[-127.75002289 61.35456085]
[-137.95579529 49.87685013]
[-141.03967285 34.83074570]
[-136.17211914 20.26357269]
[-124.66247559 10.09383106]
[-109.60677338 7.05712652]
[-95.05493164 11.97031879]
[-84.92131805 23.51178360]
[-81.93182373 38.57692337]
[-67.70503998 43.33074188]
[-53.47826385 48.08455658]
[-39.25148392 52.83837128]
[-24.92888641 57.29518509]
[-10.51667023 61.45307159]
[3.85659742 57.54686737]
[14.97128010 68.80628204]
[29.38349724 72.96417236]
[43.79571152 77.12205505]
[58.25040054 81.12979889]
[72.74599457 84.98695374]
[87.24159241 88.84411621]
[101.88509369 85.59329224]
[113.38690186 75.96475983]
[124.88870239 66.33623505]
[133.01023865 53.72510910]
[137.01799011 39.27042007]
[141.02572632 24.81573105]
[145.03346252 10.36104393]
[133.14224243 19.50428009]
[118.38656616 22.20059204]
[104.03026581 17.85357857]
[93.24880981 7.42475843]
[88.42697144 -6.77910852]
[90.63127899 -21.61625862]
[99.37417603 -33.80484772]
[112.72180939 -40.64887619]
[127.72180176 -40.63451004]
[141.05630493 -33.76491928]
[149.77583313 -21.55960083]
[151.95152283 -6.71628094]
[159.13403320 -19.88486290]
[166.31654358 -33.05344772]
[161.61691284 -48.14281082]
[169.03742981 -62.09671783]
[184.17562866 -66.63655853]
[198.05030823 -59.06893158]
[202.42984009 -43.88356781]
[194.71594238 -30.08968163]
[179.48512268 -25.87093735]
[172.30261230 -12.70235443]
[165.12011719 0.46622774]
[159.48815918 14.36878395]
[155.48040771 28.82347298]
[151.47267151 43.27816010]
[147.46493530 57.73284912]
[151.91110229 63.77284241]
[157.92660522 50.03189087]
[172.83438110 48.37110138]
[181.72647095 60.45128250]
[175.71067810 74.19210052]
[160.80345154 75.85282898]
[165.24963379 81.89282227]
[180.24232483 82.36087036]
[195.23503113 82.82891083]
[201.12977600 68.84262085]
[211.68171692 57.93294525]
[225.46377563 51.57532883]
[240.61204529 50.62958527]
[255.07785034 55.22361755]
[266.90478516 64.73612213]
[274.49337769 77.88061523]
[276.81735229 92.87940216]
[273.56237793 107.70402527]
[265.16864014 120.34957886]
[252.77139282 129.10585022]
[238.04721069 132.78863525]
[222.98742676 130.89985657]
[209.62876892 123.69496155]
[199.77786255 112.14834595]
[194.76698303 97.82160950]
[179.77429199 97.35356140]
[164.78158569 96.88552094]
[150.02951050 94.58113861]
[139.51411438 87.37833405]
[134.51722717 77.83804321]
[123.01542664 87.46656799]
[111.51361847 97.09509277]
[116.68417358 107.10000610]
[112.09703827 121.17828369]
[112.09703827 136.17828369]
[112.09703827 151.17828369]
[112.09703827 166.17828369]
[112.09703827 181.17828369]
[112.09703827 196.17828369]
[112.09703827 211.17828369]
[112.09703827 226.17828369]
[112.09703827 241.17828369]
[112.09703827 256.17828369]
[126.63692474 260.23959351]
[139.54130554 268.07409668]
[149.85258484 279.10043335]
[156.80560303 292.50036621]
[159.88441467 307.27951050]
[158.86051941 322.34121704]
[153.80992126 336.56771851]
[145.10739136 348.90338135]
[133.39872742 358.43280029]
[119.55278778 364.44885254]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 63]
[26 62]
[27 61]
[29 60]
[30 59]
[31 58]
[33 56]
[34 55]
[37 54]
[38 53]
[39 52]
[40 51]
[64 129]
[65 128]
[66 127]
[67 97]
[68 96]
[69 95]
[70 94]
[82 93]
[83 92]
[84 91]
[104 124]
[105 123]
[106 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
