%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUCUAAAUCACCGGGGGGGGGGACGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCxxxxxxxxxxGCUGGUUGUCCAAGAUAGAAUCUUAGUUCAACUUUAAAUUUGCCCACAGACCCCCCCCCCACCCUCUAAAUCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.10038757 562.53729248]
[84.66350555 558.29779053]
[71.28997803 551.40252686]
[59.46322632 542.10064697]
[49.61079407 530.72851562]
[42.08883667 517.69714355]
[37.16926575 503.47763062]
[35.02992630 488.58401489]
[35.74814987 473.55468750]
[39.29797745 458.93292236]
[45.55107880 445.24734497]
[54.28141022 432.99264526]
[65.17337799 422.61181641]
[77.83324432 414.48013306]
[91.80335999 408.89154053]
[106.57872009 406.04806519]
[106.57872009 391.04806519]
[106.57872009 376.04806519]
[106.57872009 361.04806519]
[106.57872009 346.04806519]
[106.57872009 331.04806519]
[106.57872009 316.04806519]
[106.57872009 301.04806519]
[106.57872009 286.04806519]
[106.57872009 271.04806519]
[98.84141541 258.32080078]
[106.57872009 244.52062988]
[106.43237305 229.52134705]
[92.50371552 217.69902039]
[91.57259369 199.13482666]
[104.68952942 185.51992798]
[103.81194305 170.54560852]
[102.93436432 155.57130432]
[102.05677795 140.59700012]
[72.88560486 115.14234924]
[82.31951904 87.83175659]
[74.27717590 75.16997528]
[66.23483276 62.50819016]
[58.95436478 56.90635681]
[58.16189194 49.51996231]
[50.36813354 36.70367432]
[42.57437515 23.88738060]
[28.79312515 16.11642265]
[28.79113960 1.22181845]
[20.99737930 -11.59447289]
[14.14835548 -5.07619333]
[3.66794276 -1.64877093]
[-9.02721310 -2.83530641]
[-21.96744347 -9.53704453]
[-33.51020432 -19.11643410]
[-45.05296326 -28.69582558]
[-57.97768021 -28.28706360]
[-67.40059662 -36.54547501]
[-68.60936737 -48.61327744]
[-79.96301270 -58.41606522]
[-91.31666565 -68.21884918]
[-107.51762390 -70.76067352]
[-113.16355133 -86.15728760]
[-102.44639587 -98.56996918]
[-86.39105225 -95.22961426]
[-81.51387787 -79.57250214]
[-70.16022491 -69.76971436]
[-58.80657959 -59.96692657]
[-41.43474579 -57.63644028]
[-35.47357178 -40.23858261]
[-23.93081284 -30.65919304]
[-12.38805389 -21.07980347]
[-5.59936047 -24.26785088]
[-11.97545433 -37.84523773]
[-18.35132217 -51.42272949]
[-4.77372456 -57.79837418]
[1.60193241 -44.22133255]
[7.97802639 -30.64394379]
[14.76671982 -33.83199310]
[14.76671982 -48.83199310]
[1.42559147 -56.44184494]
[-6.30937767 -69.71082306]
[-6.35752058 -85.06964111]
[1.29411364 -98.38684845]
[14.58727360 -106.08019257]
[29.94616508 -106.08019257]
[43.23932648 -98.38684845]
[50.89096069 -85.06964111]
[50.84281540 -69.71082306]
[43.10784912 -56.44184494]
[29.76671982 -48.83199310]
[29.76671982 -33.83199310]
[33.81367111 -19.38823128]
[41.60742950 -6.57194090]
[54.83121490 0.28231022]
[55.39066315 16.09362221]
[63.18442535 28.90991402]
[70.97817993 41.72620392]
[78.89661407 54.46584702]
[86.93895721 67.12762451]
[94.98130035 79.78940582]
[109.79890442 82.12146759]
[121.34166718 72.54208374]
[132.88442993 62.96268845]
[144.42718506 53.38330078]
[155.96994019 43.80390930]
[164.29707336 29.03586578]
[180.79316711 32.94937134]
[181.59916687 49.88414764]
[165.54933167 55.34666824]
[154.00657654 64.92605591]
[142.46382141 74.50544739]
[130.92105103 84.08483887]
[119.37829590 93.66423035]
[126.27927399 106.98250580]
[140.76182556 103.07666779]
[155.24438477 99.17082977]
[168.96272278 89.20872498]
[182.33311462 99.63315582]
[176.01736450 115.36680603]
[159.15022278 113.65338135]
[144.66766357 117.55921936]
[130.18511963 121.46506500]
[145.07928467 123.24375153]
[153.81178284 135.43978882]
[150.69728088 150.11289978]
[137.76348877 157.71006775]
[123.43101501 153.28514099]
[117.03108215 139.71942139]
[117.90866852 154.69372559]
[118.78625488 169.66802979]
[119.66383362 184.64233398]
[129.96435547 190.69795227]
[135.98062134 200.88215637]
[136.30654907 212.58592224]
[130.97691345 222.87568665]
[121.42951965 229.22866821]
[124.73946381 237.79780579]
[121.57872009 244.52062988]
[129.31602478 258.32080078]
[121.57872009 271.04806519]
[121.57872009 286.04806519]
[121.57872009 301.04806519]
[121.57872009 316.04806519]
[121.57872009 331.04806519]
[121.57872009 346.04806519]
[121.57872009 361.04806519]
[121.57872009 376.04806519]
[121.57872009 391.04806519]
[121.57872009 406.04806519]
[136.35408020 408.89154053]
[150.32418823 414.48013306]
[162.98405457 422.61181641]
[173.87602234 432.99264526]
[182.60635376 445.24734497]
[188.85946655 458.93292236]
[192.40928650 473.55468750]
[193.12751770 488.58401489]
[190.98817444 503.47763062]
[186.06860352 517.69714355]
[178.54664612 530.72851562]
[168.69421387 542.10064697]
[156.86746216 551.40252686]
[143.49392700 558.29779053]
[129.05705261 562.53729248]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 145]
[17 144]
[18 143]
[19 142]
[20 141]
[21 140]
[22 139]
[23 138]
[24 137]
[25 136]
[27 134]
[28 132]
[31 127]
[32 126]
[33 125]
[34 124]
[36 96]
[37 95]
[38 94]
[40 93]
[41 92]
[42 91]
[44 89]
[45 88]
[49 67]
[50 66]
[51 65]
[54 63]
[55 62]
[56 61]
[74 87]
[75 86]
[97 109]
[98 108]
[99 107]
[100 106]
[101 105]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
