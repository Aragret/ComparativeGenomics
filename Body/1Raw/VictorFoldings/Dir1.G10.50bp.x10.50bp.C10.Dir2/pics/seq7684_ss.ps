%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCGCCCUCGGGGGGGGGGCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUCCCUCCCUxxxxxxxxxxCUACGACAAACAGACCUAAAAUCGCUCAUUGCAUACUCUUCAAUCAGCCACCCCCCCCCCCAUAGCCCUC\
) } def
/len { sequence length } bind def

/coor [
[84.21700287 364.93554688]
[70.37106323 358.91949463]
[58.66240311 349.39007568]
[49.95988083 337.05441284]
[44.90927887 322.82791138]
[43.88538742 307.76620483]
[46.96418381 292.98706055]
[53.91720581 279.58712769]
[64.22849274 268.56079102]
[77.13287354 260.72628784]
[91.67276001 256.66497803]
[91.67276001 241.66497803]
[91.67276001 226.66497803]
[91.67276001 211.66497803]
[91.67276001 196.66497803]
[91.67276001 181.66497803]
[91.67276001 166.66497803]
[91.67276001 151.66497803]
[91.67276001 136.66497803]
[91.67276001 121.66497803]
[84.48137665 134.82872009]
[80.27542114 149.22697449]
[68.59534454 158.63845825]
[53.63199234 159.68627930]
[40.75423813 151.99450684]
[34.58265305 138.32295227]
[37.33161545 123.57698822]
[48.01479340 113.04752350]
[62.79991150 110.51265717]
[76.69866943 104.87133026]
[61.79676819 103.15863800]
[55.52638245 116.92589569]
[45.30707932 128.08032227]
[32.14004517 135.52909851]
[17.31524467 138.54248047]
[2.28506422 136.82525635]
[-11.47799206 130.54563904]
[-22.62556076 120.31887054]
[-30.06551552 107.14685059]
[-33.06896591 92.32003021]
[-31.34166718 77.29100800]
[-25.05283928 63.53216171]
[-14.81859684 52.39144516]
[-1.64158940 44.96031952]
[13.18723583 41.96680450]
[28.21510124 43.70417404]
[41.96973038 50.00222015]
[53.10358047 60.24392319]
[60.52587891 73.42591095]
[63.50945663 88.25673676]
[78.41136169 89.96942902]
[89.39702606 79.75594330]
[88.77304840 64.76892853]
[88.14907074 49.78191376]
[87.52509308 34.79489899]
[86.90111542 19.80788040]
[71.98077393 17.95497513]
[57.56894684 13.67138767]
[44.05879974 7.07397652]
[31.81890297 -1.65727568]
[21.18316650 -12.28417397]
[12.44174099 -24.51680756]
[5.83309937 -38.02146149]
[1.53753030 -52.42972183]
[-0.32777977 -67.34851837]
[0.28805605 -82.37085724]
[3.36823726 -97.08691406]
[8.82873440 -111.09523010]
[16.52058029 -124.01364136]
[26.23393822 -135.48973083]
[37.70381546 -145.21040344]
[50.61731339 -152.91050720]
[64.62213135 -158.37994385]
[79.33621979 -161.46952820]
[94.35816193 -162.09495544]
[109.27814484 -160.23918152]
[123.68914795 -155.95281982]
[137.19802856 -149.35279846]
[149.43623352 -140.61920166]
[160.06993103 -129.99024963]
[168.80899048 -117.75592804]
[175.41503906 -104.25000000]
[179.70782471 -89.84091187]
[181.57026672 -74.92176056]
[180.95153809 -59.89953995]
[177.86851501 -45.18407822]
[172.40531921 -31.17681694]
[164.71098328 -18.25988770]
[154.99542236 -6.78567219]
[143.52366638 2.93280339]
[130.60868835 10.63041210]
[116.60281372 16.09715843]
[101.88813019 19.18390465]
[102.51210785 34.17092133]
[103.13608551 49.15793610]
[103.76006317 64.14495087]
[104.38404083 79.13196564]
[107.18209076 64.39524841]
[119.13977814 55.33910751]
[134.08332825 56.63925552]
[144.29734802 67.62442017]
[144.50831604 82.62293243]
[134.60731506 93.89103699]
[119.70426178 95.61046600]
[134.60615540 97.32315826]
[149.50807190 99.03584290]
[164.10142517 92.92484283]
[175.86203003 102.06472778]
[190.76393127 103.77742004]
[205.66583252 105.49011230]
[220.56773376 107.20279694]
[230.25588989 95.19683838]
[244.90419006 90.35629272]
[259.83840942 94.22576141]
[270.29309082 105.57051086]
[272.93218994 120.77046967]
[266.91354370 134.97538757]
[254.15774536 143.65252686]
[238.73507690 144.03305054]
[225.56686401 135.99552917]
[218.85504150 122.10469818]
[203.95314026 120.39201355]
[189.05123901 118.67932129]
[174.14933777 116.96662903]
[160.62185669 123.20014191]
[147.79537964 113.93774414]
[132.89347839 112.22505951]
[117.99156952 110.51236725]
[115.29999542 115.03111267]
[111.46430969 118.84561920]
[106.67276001 121.66497803]
[106.67276001 136.66497803]
[106.67276001 151.66497803]
[106.67276001 166.66497803]
[106.67276001 181.66497803]
[106.67276001 196.66497803]
[106.67276001 211.66497803]
[106.67276001 226.66497803]
[106.67276001 241.66497803]
[106.67276001 256.66497803]
[121.21264648 260.72628784]
[134.11701965 268.56079102]
[144.42831421 279.58712769]
[151.38133240 292.98706055]
[154.46012878 307.76620483]
[153.43623352 322.82791138]
[148.38563538 337.05441284]
[139.68312073 349.39007568]
[127.97444916 358.91949463]
[114.12851715 364.93554688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[30 51]
[31 50]
[52 97]
[53 96]
[54 95]
[55 94]
[56 93]
[104 128]
[105 127]
[106 126]
[108 124]
[109 123]
[110 122]
[111 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
