%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAUACUAGGGGGGGGGGGUCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCAxxxxxxxxxxAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUCCCCCCCCCCAACAAACUAG\
) } def
/len { sequence length } bind def

/coor [
[86.27048492 421.79840088]
[73.39721680 413.89553833]
[63.27291870 402.68502808]
[56.71833801 389.07568359]
[54.26481628 374.17077637]
[56.11125183 359.17852783]
[62.10796356 345.31433105]
[71.76882935 333.70205688]
[84.31067657 325.28311157]
[98.71679688 320.73995972]
[98.40473938 305.74319458]
[98.09268188 290.74642944]
[97.78062439 275.74969482]
[97.46857452 260.75292969]
[97.15651703 245.75617981]
[96.84445953 230.75942993]
[96.53240204 215.76268005]
[96.22034454 200.76591492]
[95.90828705 185.76916504]
[95.44024658 170.77647400]
[84.33942413 160.91203308]
[83.49312592 145.72195435]
[93.91512299 134.14526367]
[93.29114532 119.15824890]
[77.83624268 105.98069763]
[80.52249146 83.36550140]
[66.50577545 78.02398682]
[52.48906326 72.68247986]
[38.47235107 67.34096527]
[24.45563889 61.99945068]
[10.43892574 56.65793991]
[-3.57778716 51.31642532]
[-11.74274445 63.96660995]
[-22.35968018 74.64248657]
[-34.96446609 82.87735748]
[-49.00607300 88.31122589]
[-63.87066650 90.70654297]
[-78.90843201 89.95860291]
[-93.46197510 86.10009766]
[-106.89508057 79.29970551]
[-118.62051392 69.85471344]
[-128.12568665 58.17801285]
[-134.99507141 44.78005981]
[-138.92837524 30.24655151]
[-139.75364685 15.21283627]
[-137.43481445 0.33612025]
[-132.07322693 -13.73324966]
[-123.90329742 -26.38022041]
[-113.28215790 -37.05192184]
[-100.67414093 -45.28182983]
[-86.63039398 -50.71017456]
[-71.76485443 -53.09964371]
[-56.72739029 -52.34578705]
[-42.17536545 -48.48155975]
[-28.74493599 -41.67588425]
[-17.02322006 -32.22627640]
[-7.52264118 -20.54583740]
[-0.65852433 -7.14518118]
[3.26906061 7.38987207]
[4.08841705 22.42391205]
[1.76372540 37.29971313]
[15.78043842 42.64122772]
[29.79715157 47.98273849]
[43.81386566 53.32425308]
[57.83057785 58.66576385]
[71.84729004 64.00727844]
[85.86400604 69.34878540]
[100.54052734 66.25046539]
[111.20215607 55.69917679]
[102.78112793 43.23633575]
[96.79522705 29.44194412]
[93.44696808 14.78638172]
[92.84896851 -0.23090196]
[95.02011108 -15.09840679]
[99.88501740 -29.31000137]
[107.27660370 -42.38216019]
[116.94187164 -53.87040710]
[128.55052185 -63.38442612]
[141.70628357 -70.60134125]
[155.96038818 -75.27664185]
[170.82695007 -77.25250244]
[185.79943848 -76.46308136]
[200.36804199 -72.93672180]
[214.03692627 -66.79496002]
[226.34118652 -58.24828720]
[237.00280762 -68.79957581]
[247.66442871 -79.35086823]
[258.32604980 -89.90216064]
[268.98767090 -100.45344543]
[265.01217651 -115.28890991]
[269.00250244 -130.12039185]
[279.88531494 -140.95829773]
[294.73315430 -144.88728333]
[309.55206299 -140.85047913]
[320.35580444 -129.93376160]
[324.23822021 -115.07367706]
[320.15499878 -100.26750183]
[309.20446777 -89.49803162]
[294.33227539 -85.66220093]
[279.53897095 -89.79182434]
[268.87734985 -79.24053192]
[258.21572876 -68.68923950]
[247.55409241 -58.13795090]
[236.89247131 -47.58665848]
[245.31068420 -35.19416809]
[251.30993652 -21.46213150]
[254.68453979 -6.85763836]
[255.31817627 8.12226009]
[253.18777466 22.96745682]
[248.36444092 37.17215729]
[241.01107788 50.25212860]
[231.37680054 61.76118851]
[219.78863525 71.30642700]
[206.64030457 78.56163788]
[192.37886047 83.27844238]
[177.48957825 85.29480743]
[162.47932434 84.54061890]
[147.85939026 81.04009247]
[134.12802124 74.91101837]
[121.75344849 66.36080170]
[111.09181976 76.91209412]
[120.64623260 87.21297455]
[122.95428467 100.31910706]
[118.06323242 111.89445496]
[108.27816010 118.53427124]
[108.90213776 133.52128601]
[120.25038147 144.19157410]
[120.66969299 159.39942932]
[110.42726135 170.15249634]
[113.92987823 178.66033936]
[110.90504456 185.45710754]
[111.21710205 200.45387268]
[111.52915955 215.45062256]
[111.84120941 230.44737244]
[112.15326691 245.44412231]
[112.46532440 260.44088745]
[112.77738190 275.43762207]
[113.08943939 290.43438721]
[113.40149689 305.43115234]
[113.71354675 320.42788696]
[128.29618835 324.36785889]
[141.17739868 332.25778198]
[151.31294250 343.45812988]
[157.88119507 357.06085205]
[160.34970093 371.96331787]
[158.51832581 386.95742798]
[152.53553772 400.82763672]
[142.88635254 412.44958496]
[130.35296631 420.88113403]
[115.95141602 425.43878174]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 129]
[23 126]
[24 125]
[26 67]
[27 66]
[28 65]
[29 64]
[30 63]
[31 62]
[32 61]
[68 121]
[69 120]
[85 104]
[86 103]
[87 102]
[88 101]
[89 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
