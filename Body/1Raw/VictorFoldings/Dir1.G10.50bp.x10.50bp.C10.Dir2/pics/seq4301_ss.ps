%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAACUCAUACACCUGGGGGGGGGGCCUAUGAAAAAACUUCCUACCACUCACCCUAGCAUUACUUAUAUGAUAUGxxxxxxxxxxUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCCCCCCCCCCCACCUACUCAUGCACCU\
) } def
/len { sequence length } bind def

/coor [
[86.06600952 459.65274048]
[72.13561249 453.99127197]
[59.36247635 446.05685425]
[48.11410904 436.07775879]
[38.71414185 424.34112549]
[31.43303299 411.18463135]
[26.48027802 396.98681641]
[23.99837494 382.15615845]
[24.05873299 367.11938477]
[26.65961647 352.30914307]
[31.72619247 338.15155029]
[39.11268616 325.05392456]
[48.60657120 313.39312744]
[59.93468857 303.50466919]
[72.77111053 295.67303467]
[86.74650574 290.12359619]
[101.45877838 287.01599121]
[100.88071442 272.02713013]
[100.30264282 257.03826904]
[99.72457886 242.04940796]
[99.14651489 227.06056213]
[98.56845093 212.07170105]
[97.99038696 197.08283997]
[97.41232300 182.09397888]
[96.83425903 167.10513306]
[96.25619507 152.11627197]
[95.67813110 137.12741089]
[95.10006714 122.13855743]
[94.52200317 107.14969635]
[87.85666656 110.37861633]
[79.83833313 110.94609070]
[64.84459686 110.51249695]
[49.85086441 110.07890320]
[44.27990723 124.17642975]
[34.22095871 135.51632690]
[20.88868523 142.72926331]
[5.89302778 144.94421387]
[-8.95521736 141.89373779]
[-21.86305237 133.94618225]
[-31.27179337 122.06126404]
[-36.04529190 107.67413330]
[-35.60711670 92.52210999]
[-30.01018715 78.43487549]
[-19.93035889 67.11353302]
[-6.58481646 59.92518234]
[8.41489792 57.73786163]
[23.25749588 60.81569672]
[36.15066528 68.78702545]
[45.53748703 80.68926239]
[50.28446198 95.08516693]
[65.27819061 95.51876068]
[80.27192688 95.95236206]
[67.44387054 88.17797089]
[64.53152466 73.46341705]
[73.43098450 61.38866425]
[88.34821320 59.81504059]
[99.57128143 69.76706696]
[99.79353333 84.76500702]
[106.99956512 71.60928345]
[114.20558929 58.45355606]
[114.04923248 42.63312149]
[126.94942474 35.18770218]
[134.15545654 22.03197670]
[119.21746063 23.39447403]
[108.69662476 12.70279503]
[110.29955292 -2.21131349]
[122.85208130 -10.42313671]
[137.15937805 -5.91744375]
[142.74116516 8.00620556]
[151.17959595 -4.39512634]
[159.61801147 -16.79645729]
[155.37953186 -27.48005676]
[156.70162964 -38.74712753]
[163.12692261 -47.91478348]
[173.00001526 -52.86780548]
[174.44329834 -67.79821014]
[160.87052917 -74.59115601]
[150.67108154 -85.83107758]
[145.22436523 -99.99785614]
[145.26698303 -115.17555237]
[150.79319763 -129.31152344]
[161.05560303 -140.49397278]
[174.66632080 -147.21057129]
[189.78460693 -148.55297852]
[204.36582947 -144.33959961]
[216.43800354 -135.14030457]
[224.36845398 -122.19919586]
[227.08467102 -107.26646423]
[224.21929932 -92.36162567]
[216.15986633 -79.50045013]
[203.99632263 -70.42230225]
[189.37370300 -66.35492706]
[187.93041992 -51.42452240]
[190.32183838 -50.12370682]
[192.53797913 -48.54265594]
[205.33135986 -56.37397003]
[218.12474060 -64.20528412]
[230.91810608 -72.03659821]
[231.78523254 -90.10775757]
[243.19781494 -103.94352722]
[260.46984863 -108.15760040]
[276.68386841 -101.25522614]
[289.16592407 -109.57375336]
[301.64801025 -117.89227295]
[306.19403076 -133.27775574]
[321.11093140 -139.18249512]
[334.95571899 -131.07685852]
[337.10787964 -115.17882538]
[325.91644287 -103.68398285]
[309.96652222 -105.41020203]
[297.48446655 -97.09167480]
[285.00238037 -88.77315521]
[286.31375122 -76.65030670]
[282.30490112 -65.05797577]
[273.68356323 -56.23152924]
[262.05307007 -51.90074921]
[249.61431885 -52.95104599]
[238.74942017 -59.24322510]
[225.95605469 -51.41191101]
[213.16267395 -43.58059311]
[200.36929321 -35.74927902]
[194.16816711 -14.29612637]
[172.01934814 -8.35803509]
[163.58091736 4.04329634]
[155.14250183 16.44462776]
[147.31118774 29.23800468]
[140.10514832 42.39373016]
[140.77693176 57.27317810]
[127.36132050 65.65958405]
[120.15528870 78.81531525]
[112.94925690 91.97103882]
[109.51086426 106.57163239]
[110.08892822 121.56049347]
[110.66699219 136.54934692]
[111.24505615 151.53820801]
[111.82312012 166.52706909]
[112.40118408 181.51591492]
[112.97924805 196.50477600]
[113.55731201 211.49363708]
[114.13537598 226.48249817]
[114.71343994 241.47134399]
[115.29150391 256.46020508]
[115.86956787 271.44906616]
[116.44763184 286.43792725]
[131.35554504 288.40319824]
[145.71682739 292.85980225]
[159.11830139 299.67950439]
[171.17436218 308.66613770]
[181.53813171 319.56109619]
[189.91143799 332.05093384]
[196.05335999 345.77627563]
[199.78717041 360.34219360]
[201.00544739 375.32965088]
[199.67314148 390.30740356]
[195.82859802 404.84451294]
[189.58239746 418.52270508]
[181.11428833 430.94845581]
[170.66789246 441.76422119]
[158.54379272 450.65884399]
[145.09080505 457.37637329]
[130.69601440 461.72354126]
[115.77358246 463.57531738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 144]
[18 143]
[19 142]
[20 141]
[21 140]
[22 139]
[23 138]
[24 137]
[25 136]
[26 135]
[27 134]
[28 133]
[29 132]
[31 52]
[32 51]
[33 50]
[58 131]
[59 130]
[60 129]
[62 127]
[63 126]
[69 125]
[70 124]
[71 123]
[75 93]
[76 92]
[95 121]
[96 120]
[97 119]
[98 118]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
