%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAGGAAUAGGGGGGGGGGGACGUAGACACACGAGCAUAUUUCACCUCCGCUACCAUAAUCAUCGCUAUxxxxxxxxxxAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUCCCCCCCCCCAGCAGGAAUA\
) } def
/len { sequence length } bind def

/coor [
[66.47835541 406.44073486]
[51.98866272 402.23223877]
[39.08243179 394.41613770]
[28.63963127 383.52529907]
[21.37226868 370.30230713]
[17.77584267 355.64868164]
[18.09556389 340.56359863]
[22.30963326 326.07553101]
[30.13073158 313.17233276]
[41.02560043 302.73373413]
[54.25140762 295.47146606]
[68.90640259 291.88070679]
[69.21846008 276.88394165]
[69.53050995 261.88717651]
[69.84256744 246.89044189]
[70.15462494 231.89367676]
[70.46668243 216.89692688]
[70.77873993 201.90017700]
[71.09079742 186.90342712]
[71.40284729 171.90666199]
[71.71490479 156.90991211]
[72.02696228 141.91316223]
[59.67538834 133.40206909]
[45.77283478 139.03402710]
[31.87027740 144.66598511]
[25.94007874 159.31550598]
[11.35563469 165.40397644]
[-3.23036432 159.31922913]
[-9.16430187 144.67121887]
[-2.92567968 130.15037537]
[11.78423977 124.37162781]
[26.23832130 130.76342773]
[40.14087677 125.13146973]
[54.04343414 119.49951172]
[53.10780334 104.52872467]
[38.61220932 100.67156219]
[24.11661148 96.81440735]
[14.58615589 108.69255066]
[1.04540288 115.66161346]
[-14.15963078 116.51417542]
[-28.39457893 111.10250854]
[-39.19315338 100.36422729]
[-44.68443680 86.15979767]
[-43.91702652 70.95023346]
[-37.02388382 57.37067032]
[-25.19928932 47.77385712]
[-10.49192142 43.82249832]
[4.55007696 46.20119095]
[17.32058907 54.49781418]
[25.60704613 67.27491760]
[27.97377014 82.31880951]
[42.46936798 86.17596436]
[56.96496582 90.03312683]
[79.68907928 67.59265900]
[107.16355133 68.48570251]
[113.79204559 55.02973938]
[120.42054749 41.57377625]
[107.71900940 33.56823349]
[95.92388153 24.27885246]
[85.16438293 13.80741692]
[75.55841064 2.26865649]
[67.21121216 -10.21100521]
[60.21423721 -23.49483299]
[54.64415359 -37.43728256]
[50.56199265 -51.88559341]
[48.01247406 -66.68145752]
[47.02354050 -81.66277313]
[47.60601807 -96.66538239]
[49.75353241 -111.52492523]
[53.44254684 -126.07858276]
[58.63265228 -140.16688538]
[65.26697540 -153.63549805]
[73.27282715 -166.33683777]
[82.56249237 -178.13174438]
[93.03418732 -188.89099121]
[104.57318115 -198.49668884]
[117.05304718 -206.84358215]
[130.33703613 -213.84022522]
[144.27963257 -219.40997314]
[158.72804260 -223.49179077]
[173.52397156 -226.04093933]
[188.50529480 -227.02951050]
[203.50790405 -226.44667053]
[218.36738586 -224.29879761]
[232.92095947 -220.60942078]
[247.00914001 -215.41897583]
[260.47760010 -208.78433228]
[273.17874146 -200.77816772]
[284.97341919 -191.48822021]
[295.73239136 -181.01626587]
[305.33782959 -169.47703552]
[313.68441772 -156.99696350]
[320.68072510 -143.71279907]
[326.25015259 -129.77008057]
[330.33160400 -115.32157135]
[332.88040161 -100.52558136]
[333.86862183 -85.54421997]
[333.28540039 -70.54163361]
[331.13717651 -55.68220139]
[327.44744873 -41.12872696]
[322.25665283 -27.04066658]
[315.62167358 -13.57237720]
[307.61520386 -0.87142587]
[298.32498169 10.92302990]
[287.85275269 21.68176270]
[276.31329346 31.28689384]
[263.83300781 39.63318634]
[250.54869080 46.62918854]
[236.60583496 52.19825745]
[222.15722656 56.27936554]
[207.36117554 58.82780457]
[192.37979126 59.81564713]
[177.37721252 59.23207474]
[162.51783752 57.08348083]
[147.96444702 53.39340210]
[133.87651062 48.20227432]
[127.24800873 61.65823746]
[120.61951447 75.11420441]
[128.12818909 84.08546448]
[131.95103455 95.14212036]
[131.58711243 106.83533478]
[145.11129761 113.32350159]
[162.00737000 114.72316742]
[165.33969116 131.34640503]
[150.28858948 139.15026855]
[138.62313843 126.84768677]
[125.09894562 120.35952759]
[117.18064880 131.94294739]
[103.92184448 140.03050232]
[87.02371979 142.22521973]
[86.71166229 157.22196960]
[86.39960480 172.21871948]
[86.08754730 187.21548462]
[85.77548981 202.21223450]
[85.46343231 217.20898438]
[85.15138245 232.20573425]
[84.83932495 247.20249939]
[84.52726746 262.19924927]
[84.21520996 277.19601440]
[83.90315247 292.19274902]
[98.39608765 296.39004517]
[111.30834961 304.19619751]
[121.75955963 315.07894897]
[129.03713989 328.29635620]
[132.64486694 342.94717407]
[132.33680725 358.03250122]
[128.13392639 372.52383423]
[120.32279205 385.43307495]
[109.43598938 395.88006592]
[96.21578979 403.15252686]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 34]
[24 33]
[25 32]
[35 53]
[36 52]
[37 51]
[55 118]
[56 117]
[57 116]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
