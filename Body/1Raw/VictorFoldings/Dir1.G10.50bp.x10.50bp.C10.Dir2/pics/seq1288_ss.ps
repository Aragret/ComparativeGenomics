%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAAAAACUGGGGGGGGGGCCAGUUGACACAAAAUAGACUACGAAAGUGGCUUUAACAUAUCUGAACACxxxxxxxxxxAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGACCCCCCCCCCGUAAUAAACU\
) } def
/len { sequence length } bind def

/coor [
[82.83740997 379.19387817]
[68.99147034 373.17785645]
[57.28280640 363.64843750]
[48.58028412 351.31277466]
[43.52968216 337.08624268]
[42.50579071 322.02456665]
[45.58459091 307.24539185]
[52.53761292 293.84548950]
[62.84889603 282.81915283]
[75.75327301 274.98461914]
[90.29315948 270.92330933]
[90.29315948 255.92332458]
[90.29315948 240.92332458]
[90.29315948 225.92332458]
[90.29315948 210.92332458]
[90.29315948 195.92332458]
[90.29315948 180.92332458]
[90.29315948 165.92332458]
[90.29315948 150.92332458]
[90.29315948 135.92332458]
[74.11925507 122.27319336]
[69.12384796 103.54624176]
[75.17754364 87.01667786]
[88.20200348 78.01953888]
[85.40968323 63.28173447]
[82.61735535 48.54393005]
[79.82502747 33.80612564]
[69.65400696 21.68751144]
[74.88681793 7.74236965]
[72.09449005 -6.99543667]
[67.39427948 -14.90491390]
[69.40072632 -22.06869888]
[66.91560364 -36.86140442]
[64.43048859 -51.65411377]
[54.51377487 -63.98169708]
[60.03556442 -77.81495667]
[57.55044556 -92.60766602]
[55.06532669 -107.40037537]
[45.00465012 -115.53896332]
[43.26857376 -127.95689392]
[50.25028610 -137.88478088]
[47.33175659 -141.29707336]
[45.84251022 -145.08563232]
[45.72132874 -148.74174500]
[46.74395752 -151.83177185]
[48.56311798 -154.04490662]
[47.62749100 -169.01570129]
[39.04446793 -182.30638123]
[45.97283554 -195.49148560]
[45.03720474 -210.46228027]
[44.10157776 -225.43307495]
[30.78649902 -236.73112488]
[29.75003433 -253.82527161]
[41.14538956 -266.15426636]
[39.89851379 -281.10235596]
[38.65163803 -296.05041504]
[37.40476608 -310.99850464]
[36.15789032 -325.94659424]
[21.20411491 -327.64096069]
[6.86831760 -332.22039795]
[-6.29847193 -339.50885010]
[-17.79015732 -349.22622681]
[-27.16502953 -360.99899292]
[-34.06274414 -374.37463379]
[-38.21817017 -388.83905029]
[-39.47158051 -403.83621216]
[-37.77480698 -418.78970337]
[-33.19305801 -433.12475586]
[-25.90245247 -446.29037476]
[-16.18321800 -457.78048706]
[-4.40893459 -467.15344238]
[8.96782303 -474.04901123]
[23.43288803 -478.20208740]
[38.43026352 -479.45306396]
[53.38348770 -477.75387573]
[67.71780396 -473.16979980]
[80.88223267 -465.87707520]
[92.37077332 -456.15597534]
[101.74183655 -444.38018799]
[108.63521576 -431.00231934]
[112.78595734 -416.53656006]
[114.03451538 -401.53900146]
[112.33290100 -386.58602905]
[107.74651337 -372.25247192]
[100.45164490 -359.08920288]
[90.72869110 -347.60226440]
[78.95137787 -338.23309326]
[65.57238770 -331.34188843]
[51.10597610 -327.19348145]
[52.35285187 -312.24539185]
[53.59972763 -297.29730225]
[54.84659958 -282.34921265]
[56.09347534 -267.40112305]
[67.02515411 -260.50946045]
[72.04782104 -248.39140320]
[69.11089325 -235.40670776]
[59.07236862 -226.36869812]
[60.00799561 -211.39790344]
[60.94362640 -196.42710876]
[69.45972443 -184.20724487]
[62.59828186 -169.95132446]
[63.53390884 -154.98052979]
[65.09149170 -140.06163025]
[76.70903015 -126.94549561]
[69.85803223 -109.88549042]
[72.34315491 -95.09278870]
[74.82826996 -80.30007935]
[84.56723022 -69.03056335]
[79.22319794 -54.13923264]
[81.70831299 -39.34652328]
[84.19343567 -24.55381584]
[86.83229828 -9.78776073]
[89.62461853 4.95004511]
[99.59592438 16.01451302]
[94.56283569 31.01379967]
[97.35516357 45.75160599]
[100.14748383 60.48941040]
[102.93981171 75.22721863]
[124.83460236 81.31430817]
[136.72082520 106.02399445]
[150.37707520 112.22940063]
[166.63764954 110.10202026]
[176.39413452 123.28317261]
[169.60990906 138.21321106]
[153.26399231 139.53340149]
[144.17166138 125.88564301]
[130.51542664 119.68023682]
[124.20985413 123.74100494]
[124.93778229 138.72332764]
[111.59872437 131.86254883]
[105.29315948 135.92332458]
[105.29315948 150.92332458]
[105.29315948 165.92332458]
[105.29315948 180.92332458]
[105.29315948 195.92332458]
[105.29315948 210.92332458]
[105.29315948 225.92332458]
[105.29315948 240.92332458]
[105.29315948 255.92332458]
[105.29315948 270.92330933]
[119.83305359 274.98461914]
[132.73742676 282.81915283]
[143.04872131 293.84548950]
[150.00173950 307.24539185]
[153.08053589 322.02456665]
[152.05664062 337.08624268]
[147.00604248 351.31277466]
[138.30351257 363.64843750]
[126.59485626 373.17785645]
[112.74891663 379.19387817]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 118]
[25 117]
[26 116]
[27 115]
[29 113]
[30 112]
[32 111]
[33 110]
[34 109]
[36 107]
[37 106]
[38 105]
[41 103]
[46 102]
[47 101]
[49 99]
[50 98]
[51 97]
[54 93]
[55 92]
[56 91]
[57 90]
[58 89]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
