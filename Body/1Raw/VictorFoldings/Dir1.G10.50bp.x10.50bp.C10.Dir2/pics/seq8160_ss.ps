%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUAAAAAAGGGGGGGGGGUUAUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUxxxxxxxxxxAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUCCCCCCCCCCAAAUUAAAAA\
) } def
/len { sequence length } bind def

/coor [
[82.18267822 549.55712891]
[68.33673859 543.54107666]
[56.62807846 534.01165771]
[47.92555618 521.67602539]
[42.87495422 507.44949341]
[41.85106277 492.38781738]
[44.92986298 477.60864258]
[51.88288498 464.20874023]
[62.19416809 453.18240356]
[75.09854889 445.34790039]
[89.63843536 441.28656006]
[89.63843536 426.28656006]
[89.63843536 411.28656006]
[89.63843536 396.28656006]
[89.63843536 381.28656006]
[89.63843536 366.28656006]
[89.63843536 351.28656006]
[89.63843536 336.28656006]
[89.63843536 321.28656006]
[89.63843536 306.28656006]
[75.43215179 303.23098755]
[62.17184830 297.27310181]
[50.44347763 288.67346191]
[40.76588058 277.80929565]
[33.56783676 265.15817261]
[29.16906548 251.27687073]
[27.76601410 236.77693176]
[29.42310333 222.29769897]
[34.06976318 208.47813416]
[41.50343323 195.92866516]
[51.39839935 185.20411682]
[63.32006073 176.77928162]
[76.74401855 171.02786255]
[91.07913208 168.20588684]
[91.39118958 153.20913696]
[91.70324707 138.21237183]
[79.69048309 135.44209290]
[68.65706635 128.84324646]
[59.83249283 118.77960968]
[54.30682755 106.01034546]
[52.90417862 91.63587189]
[56.07702255 77.00370789]
[63.83404541 63.58214569]
[75.71092224 52.81363297]
[65.27111053 42.04282379]
[54.83129883 31.27201462]
[44.39148331 20.50120544]
[33.95167160 9.73039722]
[23.51185989 -1.04041147]
[12.96056938 -11.70203781]
[2.29894352 -22.25332832]
[-8.36268234 -32.80461884]
[-19.02430916 -43.35590744]
[-34.82509232 -43.02308655]
[-46.17529678 -54.02074432]
[-46.34104538 -69.82416534]
[-35.22400284 -81.05745697]
[-19.41971207 -81.05611420]
[-8.30458164 -69.82092285]
[-8.47301865 -54.01753616]
[2.18860769 -43.46624374]
[12.85023403 -32.91495514]
[23.51185989 -22.36366463]
[30.52378845 -19.87800217]
[34.28266907 -11.48022366]
[44.72248077 -0.70941544]
[55.16229248 10.06139278]
[65.60210419 20.83220100]
[76.04191589 31.60301018]
[86.48172760 42.37381744]
[93.93268585 41.51747513]
[89.93468475 27.06008720]
[85.93669128 12.60270119]
[81.93869019 -1.85468554]
[74.99577332 -15.15114689]
[79.33988190 -29.50833130]
[92.48962402 -36.72528076]
[106.93373871 -32.67960358]
[114.42161560 -19.68223381]
[110.67620850 -5.15751600]
[110.06233215 9.82991791]
[109.44846344 24.81735039]
[108.83458710 39.80478287]
[116.28553772 38.94844055]
[124.00962067 26.09003639]
[131.73370361 13.23163414]
[131.47685242 -3.16550136]
[145.68579102 -11.35317993]
[159.74359131 -2.90861940]
[159.18878174 13.48114014]
[144.59210205 20.95571899]
[136.86802673 33.81412125]
[129.14393616 46.67252350]
[139.00965881 57.97152710]
[152.79203796 52.05156708]
[162.41835022 39.49590302]
[177.16613770 41.58213425]
[190.94851685 35.66217041]
[192.67536926 20.40066528]
[201.81452942 8.05678749]
[215.90760803 1.95097756]
[231.16362000 3.72566772]
[243.47879028 12.90347481]
[249.54040527 27.01561546]
[247.71789551 42.26599503]
[238.50152588 54.55233765]
[224.37046814 60.56967926]
[209.12586975 58.69938278]
[196.86848450 49.44454956]
[183.08609009 55.36451340]
[174.44558716 67.49674225]
[158.71200562 65.83394623]
[144.92962646 71.75391388]
[148.20985413 104.44995880]
[132.15693665 129.67758179]
[106.69999695 138.52442932]
[106.38793945 153.52119446]
[106.07588196 168.51794434]
[121.13008118 172.24191284]
[134.97895813 179.20536804]
[146.93562317 189.05950928]
[156.40779114 201.31219482]
[162.92715454 215.35260010]
[166.17250061 230.48164368]
[165.98553467 245.94676208]
[162.37864685 260.97940063]
[155.53408813 274.83316040]
[145.79476929 286.82089233]
[133.64714050 296.34878540]
[119.69681549 302.94570923]
[104.63843536 306.28656006]
[104.63843536 321.28656006]
[104.63843536 336.28656006]
[104.63843536 351.28656006]
[104.63843536 366.28656006]
[104.63843536 381.28656006]
[104.63843536 396.28656006]
[104.63843536 411.28656006]
[104.63843536 426.28656006]
[104.63843536 441.28656006]
[119.17832184 445.34790039]
[132.08270264 453.18240356]
[142.39398193 464.20874023]
[149.34701538 477.60864258]
[152.42581177 492.38781738]
[151.40191650 507.44949341]
[146.35131836 521.67602539]
[137.64878845 534.01165771]
[125.94013214 543.54107666]
[112.09419250 549.55712891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[34 118]
[35 117]
[36 116]
[44 70]
[45 69]
[46 68]
[47 67]
[48 66]
[49 65]
[50 63]
[51 62]
[52 61]
[53 60]
[84 93]
[85 92]
[86 91]
[94 113]
[95 112]
[97 110]
[98 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
