%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUAAACCCGGGGGGGGGGUCGUUCCACAGAAGCUGCCAUCAAGUAUUUCCUCACGCAAGCAACCGCAUxxxxxxxxxxUCUCACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGCCCCCCCCCCAAAAUAACCCC\
) } def
/len { sequence length } bind def

/coor [
[85.05211639 359.81060791]
[71.03017426 354.25759888]
[58.83021545 345.39126587]
[49.21914673 333.76895142]
[42.80112076 320.12124634]
[39.97958374 305.30606079]
[40.93190002 290.25469971]
[45.59820557 275.91326904]
[53.68516922 263.18331909]
[64.68444824 252.86503601]
[77.90460205 245.60707092]
[92.51461792 241.86563110]
[92.51461792 226.86563110]
[92.51461792 211.86563110]
[92.51461792 196.86563110]
[92.51461792 181.86563110]
[92.51461792 166.86563110]
[92.51461792 151.86563110]
[92.51461792 136.86563110]
[92.51461792 121.86563110]
[92.51461792 106.86563110]
[89.34930420 99.39417267]
[92.67177582 91.55844116]
[92.97975159 76.56160736]
[93.28773499 61.56476593]
[93.59571075 46.56792831]
[78.64085388 45.34601212]
[63.78830338 43.21466064]
[49.09331512 40.18180084]
[34.61055756 36.25871658]
[20.39390755 31.45999718]
[6.49625111 25.80349922]
[-7.03071260 19.31026268]
[-20.13665962 12.00444412]
[-32.77283859 3.91322136]
[-44.89223480 -4.93330479]
[-56.44977188 -14.50222492]
[-67.40245056 -24.75794220]
[-77.70951843 -35.66230392]
[-87.33264923 -47.17474365]
[-96.23603058 -59.25243759]
[-104.38654327 -71.85045624]
[-111.75386810 -84.92192841]
[-118.31060028 -98.41822815]
[-124.03234100 -112.28914642]
[-128.89781189 -126.48309326]
[-132.88891602 -140.94725037]
[-135.99079895 -155.62782288]
[-138.19192505 -170.47019958]
[-139.48410034 -185.41914368]
[-139.86251831 -200.41906738]
[-139.32577515 -215.41415405]
[-137.87588501 -230.34863281]
[-135.51820374 -245.16694641]
[-132.26153564 -259.81396484]
[-128.11796570 -274.23516846]
[-123.10293579 -288.37698364]
[-117.23509216 -302.18673706]
[-110.53626251 -315.61306763]
[-103.03137207 -328.60604858]
[-94.74832916 -341.11730957]
[-85.71794891 -353.10034180]
[-75.97383881 -364.51058960]
[-65.55223846 -375.30554199]
[-54.49191284 -385.44506836]
[-42.83401108 -394.89144897]
[-30.62190628 -403.60955811]
[-17.90102386 -411.56692505]
[-4.71868610 -418.73400879]
[8.87606525 -425.08410645]
[22.83265686 -430.59356689]
[37.09917068 -435.24194336]
[51.62253189 -439.01193237]
[66.34871674 -441.88952637]
[81.22293091 -443.86398315]
[96.18985748 -444.92794800]
[111.19380188 -445.07751465]
[126.17896271 -444.31210327]
[141.08958435 -442.63455200]
[155.87020874 -440.05108643]
[170.46583557 -436.57135010]
[184.82217407 -432.20828247]
[198.88581848 -426.97811890]
[212.60444641 -420.90029907]
[225.92703247 -413.99743652]
[238.80401611 -406.29519653]
[251.18748474 -397.82226562]
[263.03137207 -388.61013794]
[274.29162598 -378.69311523]
[284.92633057 -368.10803223]
[294.89596558 -356.89431763]
[304.16342163 -345.09368896]
[312.69421387 -332.75000000]
[320.45663452 -319.90921021]
[327.42175293 -306.61907959]
[333.56372070 -292.92904663]
[338.85968018 -278.89004517]
[343.28988647 -264.55426025]
[346.83789062 -249.97508240]
[349.49047852 -235.20672607]
[351.23779297 -220.30412292]
[352.07333374 -205.32270813]
[351.99398804 -190.31822205]
[351.00006104 -175.34648132]
[349.09524536 -160.46318054]
[346.28665161 -145.72369385]
[342.58465576 -131.18284607]
[338.00308228 -116.89473724]
[332.55899048 -102.91251373]
[326.27261353 -89.28819275]
[319.16729736 -76.07245636]
[311.26953125 -63.31446838]
[302.60870361 -51.06169510]
[293.21697998 -39.35971451]
[283.12930298 -28.25205612]
[272.38323975 -17.78004456]
[261.01876831 -7.98263693]
[249.07810974 1.10372055]
[236.60574341 9.44522572]
[223.64802551 17.01084900]
[210.25318909 23.77244186]
[196.47105408 29.70485306]
[182.35289001 34.78601456]
[167.95121765 38.99702072]
[153.31959534 42.32221222]
[138.51249695 44.74921036]
[123.58496094 46.26899338]
[108.59254456 46.87590408]
[108.28456879 61.87274170]
[107.97659302 76.86958313]
[107.66861725 91.86641693]
[107.51461792 106.86563110]
[107.51461792 121.86563110]
[107.51461792 136.86563110]
[107.51461792 151.86563110]
[107.51461792 166.86563110]
[107.51461792 181.86563110]
[107.51461792 196.86563110]
[107.51461792 211.86563110]
[107.51461792 226.86563110]
[107.51461792 241.86563110]
[122.12462616 245.60707092]
[135.34478760 252.86503601]
[146.34407043 263.18331909]
[154.43103027 275.91326904]
[159.09733582 290.25469971]
[160.04965210 305.30606079]
[157.22811890 320.12124634]
[150.81008911 333.76895142]
[141.19902039 345.39126587]
[128.99905396 354.25759888]
[114.97711945 359.81060791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 131]
[24 130]
[25 129]
[26 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
