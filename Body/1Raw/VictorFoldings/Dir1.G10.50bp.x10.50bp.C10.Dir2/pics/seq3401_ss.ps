%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAACGUUGGGGGGGGGGGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAAAACUCUUxxxxxxxxxxCAUCCCUCUACUAUUUUUUAACCAAAUCAACAACAACCUAUUUAGCUGUUCCCCCCCCCCCCCCAACCUU\
) } def
/len { sequence length } bind def

/coor [
[82.42385101 370.15603638]
[68.57791138 364.14001465]
[56.86925125 354.61059570]
[48.16672516 342.27493286]
[43.11612320 328.04840088]
[42.09223175 312.98672485]
[45.17103195 298.20758057]
[52.12405396 284.80764771]
[62.43533707 273.78131104]
[75.33972168 265.94680786]
[89.87960815 261.88549805]
[89.87960815 246.88549805]
[89.87960815 231.88549805]
[89.87960815 216.88549805]
[89.87960815 201.88549805]
[89.87960815 186.88549805]
[89.87960815 171.88549805]
[89.87960815 156.88549805]
[89.87960815 141.88549805]
[89.87960815 126.88549042]
[77.70777130 118.11928558]
[63.48099136 122.87310028]
[49.25421143 127.62691498]
[35.02743149 132.38072205]
[24.39074516 144.09274292]
[9.86742592 140.78782654]
[-4.35935354 145.54164124]
[-12.78124428 159.19636536]
[-28.72457886 160.98231506]
[-39.95899582 149.52947998]
[-37.86640930 133.62348938]
[-24.05207634 125.46605682]
[-9.11316872 131.31486511]
[5.11361074 126.56105042]
[14.73270321 115.18905640]
[30.27361679 118.15394592]
[44.50039673 113.40013123]
[58.72717667 108.64631653]
[72.95395660 103.89250183]
[82.42212677 84.94358826]
[99.78604889 81.03652954]
[105.56231689 67.19331360]
[111.33859253 53.35009384]
[97.31979370 58.68613052]
[83.09432983 53.92838669]
[75.10646820 41.23216248]
[76.97480011 26.34897041]
[87.85294342 16.02104568]
[102.81298828 14.92703819]
[115.07790375 23.56254387]
[119.09152222 38.01599503]
[126.81560516 25.15759277]
[134.53968811 12.29919052]
[122.39537048 3.47847939]
[111.06605530 -6.36712265]
[100.63795471 -17.16268158]
[91.19044495 -28.82603836]
[82.79541779 -41.26842117]
[75.51677704 -54.39514160]
[69.40991211 -68.10628510]
[64.52129364 -82.29750824]
[60.88814545 -96.86080933]
[58.53810883 -111.68533325]
[57.48906326 -126.65827179]
[57.74900436 -141.66566467]
[59.31594467 -156.59329224]
[62.17796707 -171.32754517]
[66.31327820 -185.75628662]
[71.69041443 -199.76969910]
[78.26844788 -213.26113892]
[85.99732208 -226.12791443]
[94.81820679 -238.27210999]
[104.66396332 -249.60128784]
[115.45967102 -260.02923584]
[127.12316132 -269.47659302]
[139.56565857 -277.87142944]
[152.69247437 -285.14990234]
[166.40371704 -291.25656128]
[180.59500122 -296.14498901]
[195.15835571 -299.77792358]
[209.98291016 -302.12774658]
[224.95587158 -303.17657471]
[239.96325684 -302.91644287]
[254.89085388 -301.34927368]
[269.62506104 -298.48706055]
[284.05374146 -294.35153198]
[298.06710815 -288.97421265]
[311.55844116 -282.39599609]
[324.42510986 -274.66693115]
[336.56918335 -265.84588623]
[347.89822388 -255.99996948]
[358.32601929 -245.20411682]
[367.77319336 -233.54049683]
[376.16787720 -221.09786987]
[383.44613647 -207.97094727]
[389.55264282 -194.25962830]
[394.44085693 -180.06826782]
[398.07357788 -165.50486755]
[400.42321777 -150.68028259]
[401.47183228 -135.70730591]
[401.21145630 -120.69992828]
[399.64410400 -105.77233887]
[396.78167725 -91.03816986]
[392.64596558 -76.60954285]
[387.26843262 -62.59628296]
[380.69000244 -49.10503387]
[372.96078491 -36.23847198]
[364.13955688 -24.09452820]
[354.29348755 -12.76562214]
[343.49749756 -2.33797741]
[331.83374023 7.10904503]
[319.39099121 15.50354576]
[306.26397705 22.78163719]
[292.55258179 28.88792610]
[278.36114502 33.77593994]
[263.79769897 37.40847778]
[248.97306824 39.75789261]
[234.00007629 40.80630493]
[218.99269104 40.54573441]
[204.06513977 38.97816467]
[189.33100891 36.11552811]
[174.90243530 31.97960472]
[160.88925171 26.60187912]
[147.39808655 20.02327538]
[139.67401123 32.88167953]
[131.94992065 45.74008179]
[125.18180847 59.12636566]
[119.40553284 72.96958160]
[113.62926483 86.81279755]
[122.03319550 107.08627319]
[104.87960815 126.88549042]
[104.87960815 141.88549805]
[104.87960815 156.88549805]
[104.87960815 171.88549805]
[104.87960815 186.88549805]
[104.87960815 201.88549805]
[104.87960815 216.88549805]
[104.87960815 231.88549805]
[104.87960815 246.88549805]
[104.87960815 261.88549805]
[119.41949463 265.94680786]
[132.32386780 273.78131104]
[142.63516235 284.80764771]
[149.58818054 298.20758057]
[152.66697693 312.98672485]
[151.64308167 328.04840088]
[146.59248352 342.27493286]
[137.88995361 354.61059570]
[126.18129730 364.14001465]
[112.33535767 370.15603638]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 39]
[22 38]
[23 37]
[24 36]
[26 34]
[27 33]
[41 129]
[42 128]
[43 127]
[51 126]
[52 125]
[53 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
