%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUACCUAAAAAAGGGGGGGGGGUCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACCAAUCUAUCACxxxxxxxxxxAACACAGCAAGACGAGAAGACCCUAUGGAGCUUUAAUUUAUUAAUGCAAACCCCCCCCCCCAGUACCUAACAAA\
) } def
/len { sequence length } bind def

/coor [
[85.02451324 425.60467529]
[70.66226196 421.09796143]
[57.50136948 413.79208374]
[46.08077240 403.98620605]
[36.86813354 392.08190918]
[30.24070549 378.56668091]
[26.46987534 363.99389648]
[25.71005821 348.96035767]
[27.99236870 334.08163452]
[33.22334671 319.96704102]
[41.18878555 307.19454956]
[51.56250763 296.28717041]
[63.91971207 287.69158936]
[77.75438690 281.75973511]
[92.50000000 278.73455811]
[92.50000000 263.73455811]
[92.50000000 248.73455811]
[92.50000000 233.73455811]
[92.50000000 218.73455811]
[92.50000000 203.73455811]
[92.50000000 188.73455811]
[92.50000000 173.73455811]
[92.50000000 158.73455811]
[92.50000000 143.73455811]
[92.50000000 128.73455811]
[77.31359863 119.16381836]
[70.41604614 102.59125519]
[55.62709808 100.08387756]
[40.83814621 97.57649994]
[26.04919624 95.06912994]
[19.82447815 107.24467468]
[10.42441845 117.15271759]
[-1.37780869 123.99212646]
[-14.61534595 127.21363068]
[-28.20685768 126.56387329]
[-41.04486465 122.10534668]
[-52.08597565 114.21048737]
[-60.43569946 103.53061676]
[-65.42089844 90.94219208]
[-66.64405060 77.47488403]
[-81.32240295 74.38520050]
[-96.00074768 71.29552460]
[-110.16971588 78.82014465]
[-124.82895660 72.30200195]
[-128.73315430 56.74125290]
[-118.88734436 44.07477951]
[-102.84438324 44.01921082]
[-92.91106415 56.61717606]
[-78.23271942 59.70685577]
[-63.55437469 62.79653549]
[-55.16857529 48.68772507]
[-42.45186996 38.27111816]
[-26.91979218 32.81068802]
[-10.43111992 32.97841263]
[5.03456688 38.77159882]
[17.61454773 49.51115036]
[25.78731346 63.92108917]
[28.55657196 80.28017426]
[43.34552383 82.78755188]
[58.13447189 85.29492950]
[72.92342377 87.80229950]
[84.64616394 74.57984161]
[101.80511475 70.35769653]
[106.46854401 56.10103226]
[111.13198090 41.84437180]
[97.62105560 35.27408981]
[85.13066101 26.92521095]
[73.89348602 16.95326614]
[64.11887360 5.54402447]
[55.98892593 -7.08996391]
[49.65509033 -20.71333694]
[45.23536682 -35.07229996]
[42.81208801 -49.89935303]
[42.43040085 -64.91827393]
[44.09741592 -79.84927368]
[47.78207779 -94.41419983]
[53.41574478 -108.34171295]
[60.89345932 -121.37235260]
[70.07592010 -133.26336670]
[80.79206848 -143.79322815]
[92.84226227 -152.76576233]
[106.00201416 -160.01385498]
[120.02616882 -165.40243530]
[134.65345764 -168.83114624]
[149.61140442 -170.23608398]
[164.62132263 -169.59111023]
[179.40361023 -166.90821838]
[193.68286133 -162.23739624]
[207.19308472 -155.66564941]
[219.68257141 -147.31542969]
[230.91865540 -137.34225464]
[240.69203186 -125.93196106]
[248.82061768 -113.29709625]
[255.15298462 -99.67303467]
[259.57113647 -85.31359100]
[261.99282837 -70.48628235]
[262.37289429 -55.46731567]
[260.70425415 -40.53649139]
[257.01800537 -25.97196770]
[251.38284302 -12.04506588]
[243.90371704 0.98476171]
[234.71997070 12.87477779]
[224.00267029 23.40347862]
[211.95150757 32.37472153]
[198.79096985 39.62137985]
[184.76623535 45.00844574]
[170.13858032 48.43556595]
[155.18048096 49.83889771]
[140.17063904 49.19229507]
[125.38864136 46.50780487]
[120.72521210 60.76446533]
[116.06177521 75.02112579]
[125.11184692 84.14693451]
[129.45848083 96.24200439]
[144.33494568 98.16316223]
[159.01243591 92.25707245]
[170.64392090 101.56072235]
[185.52038574 103.48188019]
[200.39685059 105.40303802]
[215.27330017 107.32419586]
[230.19206238 100.51516724]
[243.38940430 110.24974060]
[241.28904724 126.51383209]
[226.05165100 132.57632446]
[213.35214233 122.20065308]
[198.47569275 120.27950287]
[183.59922791 118.35834503]
[168.72276306 116.43718719]
[155.10932922 122.48069000]
[142.41378784 113.03962708]
[127.53733063 111.11846924]
[122.82192230 119.00222778]
[115.92276001 125.06771851]
[107.50000000 128.73455811]
[107.50000000 143.73455811]
[107.50000000 158.73455811]
[107.50000000 173.73455811]
[107.50000000 188.73455811]
[107.50000000 203.73455811]
[107.50000000 218.73455811]
[107.50000000 233.73455811]
[107.50000000 248.73455811]
[107.50000000 263.73455811]
[107.50000000 278.73455811]
[122.24561310 281.75973511]
[136.08029175 287.69158936]
[148.43750000 296.28717041]
[158.81121826 307.19454956]
[166.77665710 319.96704102]
[172.00762939 334.08163452]
[174.28994751 348.96035767]
[173.53012085 363.99389648]
[169.75929260 378.56668091]
[163.13186646 392.08190918]
[153.91921997 403.98620605]
[142.49862671 413.79208374]
[129.33773804 421.09796143]
[114.97548676 425.60467529]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[27 61]
[28 60]
[29 59]
[30 58]
[40 50]
[41 49]
[42 48]
[63 112]
[64 111]
[65 110]
[114 131]
[115 130]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
