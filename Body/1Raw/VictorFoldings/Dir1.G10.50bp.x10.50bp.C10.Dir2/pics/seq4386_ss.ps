%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUAGCAUUAGGGGGGGGGGCUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCUCAxxxxxxxxxxACCGCUAACAUUACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCCCCCCCCCCCACCCUAGCAAUA\
) } def
/len { sequence length } bind def

/coor [
[84.41657257 443.91983032]
[71.42478943 436.32379150]
[60.16476059 426.33889771]
[51.06928253 414.34896851]
[44.48796463 400.81484985]
[40.67377472 386.25674438]
[39.77332306 371.23425293]
[41.82122040 356.32476807]
[46.73874664 342.10140991]
[54.33689117 329.11087036]
[64.32359314 317.85244751]
[76.31500244 308.75891113]
[89.85018921 302.17977905]
[104.40890503 298.36795044]
[103.50898743 283.39495850]
[102.60906982 268.42199707]
[101.70915985 253.44900513]
[100.80924225 238.47601318]
[99.90932465 223.50303650]
[99.00940704 208.53005981]
[98.10949707 193.55708313]
[89.62256622 181.31692505]
[96.51799774 167.07742310]
[95.61808014 152.10443115]
[94.71816254 137.13145447]
[93.81825256 122.15847778]
[87.18315125 119.10341644]
[81.84031677 114.12225342]
[78.32843018 107.71720886]
[63.32918549 107.86727905]
[48.32993698 108.01735687]
[32.73199463 117.75555420]
[17.78222084 108.61036682]
[2.78897619 109.06053162]
[-12.20426750 109.51068878]
[-27.19751167 109.96085358]
[-40.85503769 119.03851318]
[-55.42302704 111.50818634]
[-55.91517639 95.11643219]
[-41.82520676 86.72566986]
[-27.64767075 94.96760559]
[-12.65442848 94.51744843]
[2.33881569 94.06728363]
[17.33205986 93.61712646]
[25.88221931 85.01071930]
[38.40671158 84.54505157]
[48.17986298 93.01810455]
[63.17911148 92.86803436]
[78.17835999 92.71795654]
[83.44790649 84.02375793]
[91.95014954 78.44977570]
[102.02456665 77.08464813]
[108.14389038 63.38962173]
[114.26321411 49.69458771]
[120.38253784 35.99955750]
[110.61682892 24.32084274]
[106.90532684 9.62010479]
[109.93225098 -5.17374372]
[119.04474640 -17.13716507]
[132.39279175 -23.92973518]
[147.30459595 -24.25192070]
[153.42391968 -37.94695282]
[159.54324341 -51.64198303]
[165.66256714 -65.33701324]
[152.80621338 -73.10192108]
[141.00154114 -82.38790131]
[130.42752075 -93.05419159]
[121.24444580 -104.93908691]
[113.59152985 -117.86241913]
[107.58478546 -131.62826538]
[103.31527710 -146.02795410]
[100.84773254 -160.84317017]
[100.21954346 -175.84933472]
[101.44025421 -190.81895447]
[104.49134827 -205.52510071]
[109.32656860 -219.74481201]
[115.87261963 -233.26252747]
[124.03026581 -245.87333679]
[133.67584229 -257.38604736]
[144.66310120 -267.62615967]
[156.82551575 -276.43838501]
[169.97868347 -283.68914795]
[183.92320251 -289.26855469]
[198.44769287 -293.09204102]
[213.33197021 -295.10156250]
[228.35035706 -295.26672363]
[243.27522278 -293.58502197]
[257.88027954 -290.08190918]
[271.94415283 -284.81051636]
[285.25357056 -277.85073853]
[297.60684204 -269.30810547]
[308.81665039 -259.31213379]
[318.71307373 -248.01432800]
[327.14608765 -235.58596802]
[333.98785400 -222.21546936]
[339.13461304 -208.10554504]
[342.50839233 -193.47006226]
[344.05801392 -178.53089905]
[343.75997925 -163.51455688]
[341.61886597 -148.64865112]
[337.66705322 -134.15855408]
[331.96450806 -120.26393127]
[324.59765625 -107.17542267]
[315.67816162 -95.09144592]
[305.34127808 -84.19519806]
[293.74368286 -74.65184784]
[281.06118774 -66.60608673]
[267.48608398 -60.17987442]
[253.22416687 -55.47063828]
[238.49160767 -52.54976273]
[223.51177979 -51.46153259]
[208.51176453 -52.22244263]
[193.71894836 -54.82096100]
[179.35758972 -59.21768951]
[173.23826599 -45.52265930]
[167.11894226 -31.82762718]
[160.99961853 -18.13259697]
[170.70794678 -6.80944490]
[174.55307007 7.66551590]
[171.72055054 22.43500519]
[162.71960449 34.55949020]
[149.29251099 41.60222244]
[134.07756042 42.11888123]
[127.95824432 55.81391525]
[121.83892059 69.50894165]
[115.71959686 83.20397186]
[122.63256073 104.12057495]
[108.79122925 121.25856018]
[109.69114685 136.23153687]
[110.59106445 151.20451355]
[111.49097443 166.17750549]
[120.04227448 179.48861694]
[113.08247375 192.65716553]
[113.98239136 207.63014221]
[114.88230896 222.60311890]
[115.78221893 237.57611084]
[116.68213654 252.54908752]
[117.58205414 267.52206421]
[118.48197174 282.49505615]
[119.38188171 297.46801758]
[134.29234314 299.50869751]
[148.51809692 304.41931152]
[161.51234436 312.01113892]
[172.77560425 321.99237061]
[181.87496948 333.97937012]
[188.46066284 347.51135254]
[192.27957153 362.06820679]
[193.18487549 377.09042358]
[191.14181519 392.00054932]
[186.22888184 406.22552490]
[178.63494873 419.21853638]
[168.65188599 430.48016357]
[156.66342163 439.57760620]
[143.13037109 446.16110229]
[128.57289124 449.97763062]
[113.55053711 450.88052368]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[23 131]
[24 130]
[25 129]
[26 128]
[29 49]
[30 48]
[31 47]
[33 44]
[34 43]
[35 42]
[36 41]
[52 126]
[53 125]
[54 124]
[55 123]
[61 117]
[62 116]
[63 115]
[64 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
