%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACAAACCCGGGGGGGGGGUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAxxxxxxxxxxAAUCAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCCCCCCCCCCCUAACAACCCC\
) } def
/len { sequence length } bind def

/coor [
[113.45709229 479.68557739]
[102.89359283 468.94497681]
[94.98538971 456.12280273]
[90.12915039 441.86221313]
[88.56847382 426.87847900]
[90.38163757 411.92321777]
[95.47769165 397.74655151]
[103.60102081 385.05957031]
[114.34416962 374.49868774]
[127.16825104 366.59356689]
[141.43002319 361.74078369]
[139.87245178 346.82189941]
[138.31486511 331.90298462]
[136.75729370 316.98406982]
[135.19970703 302.06515503]
[133.64212036 287.14624023]
[132.08454895 272.22732544]
[130.52696228 257.30841064]
[128.96937561 242.38949585]
[127.41180420 227.47058105]
[125.85421753 212.55168152]
[123.98661041 197.66839600]
[121.80976868 182.82719421]
[119.63293457 167.98599243]
[115.47504425 153.57377625]
[109.41203308 139.85371399]
[103.34902191 126.13365936]
[92.46687317 125.24749756]
[82.87832642 120.02580261]
[76.22994232 111.36523438]
[73.66338348 100.75302124]
[59.16778946 96.89585876]
[44.67219543 93.03870392]
[30.17659760 89.18154144]
[15.68100071 85.32438660]
[1.18540418 81.46722412]
[-13.34953213 77.76106262]
[-27.92223549 74.20629883]
[-42.49493790 70.65153503]
[-57.06764221 67.09677887]
[-70.44111633 75.51851654]
[-85.83393097 71.93569946]
[-94.11381531 58.47393036]
[-90.36844635 43.11985016]
[-76.81989288 34.98275757]
[-61.50627136 38.89024734]
[-53.51287842 52.52407455]
[-38.94017410 56.07883453]
[-24.36747360 59.63359833]
[-9.79477024 63.18835831]
[-2.50399303 61.70841980]
[5.04256344 66.97162628]
[19.53816032 70.82878876]
[34.03375626 74.68594360]
[48.52935410 78.54310608]
[63.02495193 82.40026093]
[77.52054596 86.25742340]
[80.71286011 82.05033875]
[84.68007660 78.56442261]
[89.26280212 75.93972778]
[94.27692413 74.28170776]
[99.52098846 73.65698242]
[103.52872467 59.20228958]
[89.87291718 52.91618729]
[77.40238953 44.52082825]
[66.44015503 34.23367310]
[57.27016068 22.32118416]
[50.12993622 9.09192181]
[45.20442581 -5.11144161]
[42.62121582 -19.92100525]
[42.44721603 -34.95316696]
[44.68693542 -49.81855774]
[49.28235626 -64.13212585]
[56.11444855 -77.52311707]
[65.00624847 -89.64467621]
[75.72742462 -100.18282318]
[88.00028229 -108.86458588]
[101.50692749 -115.46510315]
[115.89749908 -119.81338501]
[130.79925537 -121.79682159]
[145.82618713 -121.36402130]
[160.58908081 -118.52619934]
[174.70553589 -113.35686493]
[187.80989075 -105.98992157]
[199.56272888 -96.61617279]
[209.65960693 -85.47843933]
[217.83900452 -72.86520386]
[223.88903809 -59.10318756]
[227.65303040 -44.54885483]
[229.03344727 -29.57919884]
[227.99455261 -14.58197117]
[224.56326294 0.05436662]
[218.82844543 13.95069599]
[210.93862915 26.74707031]
[201.09822083 38.11203003]
[189.56207275 47.75119781]
[176.62901306 55.41489410]
[162.63404846 60.90461349]
[147.93966675 64.07815552]
[132.92649841 64.85332489]
[117.98341370 63.21002960]
[113.97566986 77.66471863]
[126.27754974 98.08312225]
[117.06907654 120.07064819]
[123.13208771 133.79069519]
[129.19509888 147.51075745]
[131.98493958 132.77247620]
[140.43489075 120.37900543]
[153.13533020 112.39784241]
[167.96752930 110.16043091]
[182.45713806 114.04001617]
[194.18696594 123.38939667]
[201.20022583 136.64889526]
[202.32695007 151.60652161]
[197.37915039 165.76699829]
[187.18226624 176.76806641]
[173.43733215 182.77447510]
[158.43733215 182.78424072]
[144.68460083 176.79571533]
[134.47413635 165.80914307]
[136.65097046 180.65036011]
[138.82781982 195.49156189]
[142.68359375 200.99069214]
[143.07441711 206.74208069]
[140.77313232 210.99409485]
[142.33071899 225.91300964]
[143.88829041 240.83192444]
[145.44587708 255.75083923]
[147.00346375 270.66973877]
[148.56103516 285.58865356]
[150.11862183 300.50756836]
[151.67619324 315.42648315]
[153.23377991 330.34539795]
[154.79136658 345.26431274]
[156.34893799 360.18322754]
[171.30552673 361.98550415]
[185.48590088 367.07125854]
[198.17877197 375.18536377]
[208.74748230 385.92083740]
[216.66189575 398.73916626]
[221.52503967 412.99740601]
[223.09297180 427.98037720]
[221.28706360 442.93652344]
[216.19787598 457.11566162]
[208.08070374 469.80657959]
[197.34266663 480.37268066]
[184.52241516 488.28399658]
[170.26300049 493.14367676]
[155.27964783 494.70797729]
[140.32394409 492.89843750]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 135]
[12 134]
[13 133]
[14 132]
[15 131]
[16 130]
[17 129]
[18 128]
[19 127]
[20 126]
[21 125]
[22 122]
[23 121]
[24 120]
[25 106]
[26 105]
[27 104]
[31 57]
[32 56]
[33 55]
[34 54]
[35 53]
[36 52]
[37 50]
[38 49]
[39 48]
[40 47]
[62 102]
[63 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
