%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAACACCGGGGGGGGGGCACUCCCUCUUAGCCAAUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCxxxxxxxxxxCAGCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCCCCCCCCCCCUCAACCCC\
) } def
/len { sequence length } bind def

/coor [
[91.43223572 464.61160278]
[77.58629608 458.59558105]
[65.87763977 449.06616211]
[57.17511368 436.73049927]
[52.12451172 422.50396729]
[51.10062027 407.44229126]
[54.17941666 392.66314697]
[61.13243866 379.26321411]
[71.44372559 368.23687744]
[84.34810638 360.40237427]
[98.88799286 356.34106445]
[98.88799286 341.34106445]
[98.88799286 326.34106445]
[98.88799286 311.34106445]
[98.88799286 296.34106445]
[98.88799286 281.34106445]
[98.88799286 266.34106445]
[98.88799286 251.34104919]
[98.88799286 236.34104919]
[98.88799286 221.34104919]
[88.00513458 231.66401672]
[73.04458618 232.75119019]
[60.78361893 224.11007690]
[56.77657318 209.65519714]
[62.83867645 195.93475342]
[76.22373962 189.16421509]
[90.86820221 192.41073608]
[100.13809967 204.20396423]
[102.31493378 189.36276245]
[104.49176788 174.52156067]
[106.66860962 159.68035889]
[105.57730103 144.72010803]
[101.26971436 130.35192871]
[96.96212769 115.98373413]
[87.03050995 109.82347870]
[83.79096222 98.59445190]
[88.91504669 88.09066010]
[84.90731049 73.63597107]
[79.56579590 59.61925888]
[72.93729401 46.16329575]
[66.30879974 32.70732880]
[59.68029785 19.25136375]
[52.91218567 5.86507845]
[46.00518417 -7.45007706]
[39.09818649 -20.76523209]
[24.81678009 -16.07081413]
[9.96725368 -13.72821999]
[-5.06575298 -13.79813099]
[-19.89284897 -16.27873611]
[-34.12997437 -21.10578156]
[-47.40835953 -28.15423584]
[-59.38405609 -37.24152756]
[-69.74687195 -48.13227081]
[-78.22837067 -60.54436874]
[-84.60887909 -74.15632629]
[-88.72311401 -88.61555481]
[-90.46451569 -103.54752350]
[-89.78797150 -118.56546021]
[-86.71100616 -133.28036499]
[-81.31332397 -147.31108093]
[-73.73473358 -160.29418945]
[-64.17153931 -171.89340210]
[-52.87145615 -181.80824280]
[-40.12717819 -189.78192139]
[-26.26881218 -195.60789490]
[-11.65532684 -199.13523865]
[3.33475494 -200.27261353]
[18.31315422 -198.99053955]
[32.89189529 -195.32223511]
[46.69335175 -189.36270142]
[59.36003494 -181.26632690]
[70.56384277 -171.24281311]
[80.01457214 -159.55178833]
[87.46743011 -146.49610901]
[92.72937012 -132.41390991]
[95.66408539 -117.66997528]
[96.19557190 -102.64620209]
[94.31005096 -87.73175049]
[90.05637360 -73.31292725]
[83.54471588 -59.76322556]
[74.94374084 -47.43360901]
[64.47624207 -36.64344788]
[52.41334152 -27.67223167]
[59.32034302 -14.35707569]
[66.22734070 -1.04192007]
[72.13738251 3.47660422]
[73.13626099 12.62286472]
[79.76476288 26.07883072]
[86.39326477 39.53479385]
[93.02175903 52.99076080]
[96.75567627 38.46292877]
[107.64979553 28.15185928]
[122.36084747 25.22188568]
[136.37420654 30.57218170]
[145.38935852 42.56081009]
[146.63964844 57.50860977]
[139.74139404 70.82830048]
[126.81156921 78.43222809]
[111.81818390 77.98684692]
[99.36199188 69.62823486]
[103.36973572 84.08292389]
[115.63232422 95.49011230]
[111.33031464 111.67615509]
[115.63789368 126.04433441]
[119.94548035 140.41252136]
[123.71431732 125.89370728]
[131.19430542 112.89179230]
[141.85105896 102.33558655]
[154.92330933 94.97921753]
[169.47720337 91.34819794]
[184.47303772 91.70192719]
[198.83953857 96.01512909]
[211.55038452 103.97968292]
[221.69757080 115.02661133]
[228.55618286 128.36676025]
[231.63626099 143.04711914]
[230.71777344 158.01896667]
[225.86633301 172.21275330]
[217.42851257 184.61450195]
[206.00711060 194.33825684]
[192.41801453 200.68936157]
[177.63201904 203.21412659]
[162.70541382 201.73219299]
[148.70449829 196.34939575]
[136.62947083 187.45030212]
[127.34296417 175.67062378]
[121.50981140 161.85719299]
[119.33297729 176.69839478]
[117.15614319 191.53959656]
[114.97930145 206.38081360]
[113.88799286 221.34104919]
[113.88799286 236.34104919]
[113.88799286 251.34104919]
[113.88799286 266.34106445]
[113.88799286 281.34106445]
[113.88799286 296.34106445]
[113.88799286 311.34106445]
[113.88799286 326.34106445]
[113.88799286 341.34106445]
[113.88799286 356.34106445]
[128.42787170 360.40237427]
[141.33226013 368.23687744]
[151.64353943 379.26321411]
[158.59657288 392.66314697]
[161.67536926 407.44229126]
[160.65147400 422.50396729]
[155.60087585 436.73049927]
[146.89834595 449.06616211]
[135.18968201 458.59558105]
[121.34375000 464.61160278]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 130]
[29 129]
[30 128]
[31 127]
[32 105]
[33 104]
[34 103]
[37 101]
[38 100]
[39 90]
[40 89]
[41 88]
[42 87]
[43 85]
[44 84]
[45 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
