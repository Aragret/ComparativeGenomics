%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUCAUAUACGGGGGGGGGGCAAAUCUCUCCCUCACUAAACGUAAGCCUUCUCCUCACUCUCUCAAUCUUxxxxxxxxxxCAUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUCAAGCCCCCCCCCCCAAUCCUAUAC\
) } def
/len { sequence length } bind def

/coor [
[77.59249878 396.76889038]
[63.57055283 391.21588135]
[51.37059402 382.34954834]
[41.75952530 370.72723389]
[35.34149933 357.07952881]
[32.51996231 342.26434326]
[33.47227859 327.21295166]
[38.13858414 312.87155151]
[46.22555161 300.14160156]
[57.22482300 289.82330322]
[70.44498444 282.56533813]
[85.05499268 278.82391357]
[85.05499268 263.82391357]
[85.05499268 248.82389832]
[85.05499268 233.82389832]
[85.05499268 218.82389832]
[85.05499268 203.82389832]
[85.05499268 188.82389832]
[85.05499268 173.82389832]
[85.05499268 158.82389832]
[85.05499268 143.82389832]
[85.05499268 128.82389832]
[78.14305115 119.10433197]
[75.90977478 108.63379669]
[77.85800171 99.33483887]
[82.79462433 92.64041901]
[89.12346649 89.27545166]
[95.19246674 89.18435669]
[90.06216431 75.08896637]
[84.93186188 60.99357605]
[73.56195068 54.81873322]
[69.59857178 42.92491150]
[74.65787506 31.89469337]
[69.81805420 17.69694138]
[64.97824097 3.49918866]
[53.50088120 2.05132246]
[43.45249939 -3.57598209]
[36.28543472 -12.52503014]
[33.01885223 -23.46133804]
[34.09395599 -34.77257156]
[39.31480789 -44.80622482]
[47.88265228 -52.11106110]
[43.92604065 -66.57982635]
[39.96943283 -81.04859924]
[36.01282120 -95.51736450]
[30.10775375 -81.72859192]
[18.18131065 -72.63134003]
[3.32203364 -70.58148956]
[-10.62203217 -76.10987091]
[-20.03985214 -87.78482819]
[-22.49253082 -102.58295441]
[-17.34491158 -116.67202759]
[-5.93004894 -126.40346527]
[8.79599667 -129.25715637]
[23.01968384 -124.49410248]
[33.05710983 -113.34864044]
[32.13369751 -128.32019043]
[31.21028328 -143.29173279]
[19.25424385 -134.23341370]
[4.66721725 -137.72894287]
[-1.88470280 -151.22236633]
[4.38927412 -164.84722900]
[18.90159035 -168.64100647]
[31.04048347 -159.83018494]
[31.65630913 -174.81753540]
[32.27213287 -189.80490112]
[32.88795853 -204.79225159]
[30.10053635 -213.55729675]
[33.67342377 -220.08007812]
[34.59683609 -235.05162048]
[20.79613304 -241.36866760]
[10.21214104 -252.24725342]
[4.27625895 -266.21612549]
[3.79126644 -281.38613892]
[8.82275486 -295.70565796]
[18.69025612 -307.23809814]
[32.05927277 -314.42376709]
[47.12175369 -316.29086304]
[61.84062195 -312.58691406]
[74.22527313 -303.81280518]
[82.60078430 -291.15518188]
[85.83443451 -276.32589722]
[83.48889923 -261.33047485]
[75.88140106 -248.19691467]
[64.04077911 -238.70143127]
[49.56838608 -234.12821960]
[48.64497375 -219.15666199]
[47.87531281 -204.17642212]
[47.25948715 -189.18907166]
[46.64366150 -174.20172119]
[46.02783585 -159.21435547]
[46.18183517 -144.21514893]
[47.10524750 -129.24360657]
[48.02865982 -114.27204895]
[50.48159027 -99.47397614]
[54.43819809 -85.00520325]
[58.39480972 -70.53643799]
[62.35142136 -56.06766891]
[80.14206696 -50.54824829]
[91.15807343 -35.34334564]
[90.85524750 -16.42075348]
[79.17599487 -1.34062767]
[84.01580811 12.85712528]
[88.85562134 27.05487823]
[102.66506958 37.84115219]
[99.02725220 55.86327362]
[104.15755463 69.95866394]
[109.28785706 84.05405426]
[121.53080750 92.72066498]
[136.53001404 92.87465668]
[151.52923584 93.02865601]
[161.56524658 81.03647614]
[176.97065735 78.35187531]
[190.47151184 86.24243927]
[195.69311523 100.98248291]
[190.16998291 115.61221313]
[176.50996399 123.22391510]
[161.16291809 120.22357178]
[151.37522888 108.02786255]
[136.37602234 107.87387085]
[121.37681580 107.71987152]
[116.04635620 112.99588013]
[129.13557434 120.32202911]
[143.45492554 124.78923798]
[149.90933228 138.32957458]
[144.36282349 152.26644897]
[130.36958313 157.66914368]
[116.89642334 151.07565308]
[112.57683563 136.71163940]
[105.38545227 123.54789734]
[100.05499268 128.82389832]
[100.05499268 143.82389832]
[100.05499268 158.82389832]
[100.05499268 173.82389832]
[100.05499268 188.82389832]
[100.05499268 203.82389832]
[100.05499268 218.82389832]
[100.05499268 233.82389832]
[100.05499268 248.82389832]
[100.05499268 263.82391357]
[100.05499268 278.82391357]
[114.66500854 282.56533813]
[127.88516998 289.82330322]
[138.88444519 300.14160156]
[146.97140503 312.87155151]
[151.63771057 327.21295166]
[152.59002686 342.26434326]
[149.76849365 357.07952881]
[143.35046387 370.72723389]
[133.73939514 382.34954834]
[121.53943634 391.21588135]
[107.51749420 396.76889038]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[28 108]
[29 107]
[30 106]
[33 104]
[34 103]
[35 102]
[42 98]
[43 97]
[44 96]
[45 95]
[56 94]
[57 93]
[58 92]
[64 91]
[65 90]
[66 89]
[67 88]
[69 87]
[70 86]
[109 121]
[110 120]
[111 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
