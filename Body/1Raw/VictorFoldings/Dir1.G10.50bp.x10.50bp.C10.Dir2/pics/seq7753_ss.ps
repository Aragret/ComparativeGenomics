%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUCAACUCCGGGGGGGGGGUACAUACUUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGAxxxxxxxxxxUUGUAAACCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGCCCCCCCCCCUCUUUAACUCC\
) } def
/len { sequence length } bind def

/coor [
[36.15682602 544.12231445]
[22.13488197 538.56933594]
[9.93492413 529.70300293]
[0.32385251 518.08068848]
[-6.09417295 504.43298340]
[-8.91570950 489.61779785]
[-7.96339369 474.56640625]
[-3.29708862 460.22497559]
[4.78987789 447.49502563]
[15.78915215 437.17675781]
[29.00931168 429.91879272]
[43.61932373 426.17733765]
[43.61932373 411.17733765]
[43.61932373 396.17733765]
[43.61932373 381.17733765]
[43.61932373 366.17733765]
[43.61932373 351.17733765]
[43.61932373 336.17733765]
[43.61932373 321.17733765]
[43.61932373 306.17733765]
[43.61932373 291.17733765]
[43.61932373 276.17733765]
[35.32789612 288.67742920]
[22.94325638 297.14031982]
[8.28474903 300.32281494]
[-6.49423695 297.75735474]
[-19.22261620 289.82083130]
[-28.03054428 277.67913818]
[-31.62410545 263.11596680]
[-29.47539330 248.27066040]
[-21.90006065 235.32406616]
[-10.01095104 226.17808533]
[4.44538355 222.17628479]
[19.34525490 223.90655518]
[32.49982071 231.11470032]
[41.97662735 242.74183655]
[46.38342285 257.07916260]
[50.63626862 242.69468689]
[46.82493973 228.29597473]
[58.15741348 217.25579834]
[62.41025925 202.87130737]
[66.66310883 188.48683167]
[70.76805115 174.05944824]
[74.72466278 159.59068298]
[73.44747162 152.26394653]
[78.91389465 144.86705017]
[83.16674042 130.48257446]
[70.38497925 118.31657410]
[65.20843506 101.44682312]
[68.96646118 84.20552826]
[57.37741089 74.68218994]
[45.78836060 65.15885162]
[34.19931412 55.63551712]
[18.12319183 50.25084305]
[18.84711647 33.31235886]
[35.32403946 29.31895256]
[43.72264862 44.04646683]
[55.31169891 53.56980515]
[66.90074921 63.09314346]
[78.48979187 72.61647797]
[84.37850952 68.87902832]
[90.89392853 66.39009857]
[97.77466583 65.24954987]
[104.74468994 65.50312805]
[111.52436066 67.14067841]
[119.42083740 54.38741684]
[127.31732178 41.63415909]
[135.21380615 28.88090324]
[143.11029053 16.12764740]
[151.00677490 3.37438941]
[137.63803101 10.17709541]
[123.10615540 13.89525509]
[108.11302948 14.34928608]
[93.38280487 11.51725864]
[79.62693024 5.53595686]
[67.50981140 -3.30572748]
[57.61668777 -14.58074951]
[50.42539215 -27.74453545]
[46.28325272 -42.16128540]
[45.39033890 -57.13468552]
[47.78977203 -71.94153595]
[53.36566162 -85.86666870]
[61.84869766 -98.23752594]
[72.82916260 -108.45659637]
[85.77670288 -116.03031921]
[100.06596375 -120.59288025]
[115.00679016 -121.92391205]
[129.87756348 -119.95912933]
[143.96000671 -114.79343414]
[156.57398987 -106.67632294]
[167.11024475 -95.99983978]
[175.05989075 -83.27964783]
[180.03895569 -69.13013458]
[181.80697632 -54.23469162]
[180.27853394 -39.31276703]
[175.52746582 -25.08507156]
[167.78047180 -12.23517704]
[181.06781006 -19.19553375]
[194.35514832 -26.15588951]
[207.64250183 -33.11624527]
[220.92984009 -40.07660294]
[232.15486145 -52.78232193]
[247.47142029 -45.51327133]
[244.72650146 -28.78300858]
[227.89019775 -26.78926086]
[214.60285950 -19.82890320]
[201.31550598 -12.86854744]
[188.02816772 -5.90819168]
[174.74082947 1.05216467]
[163.76002502 11.27087212]
[155.86354065 24.02412796]
[147.96705627 36.77738571]
[140.07057190 49.53064346]
[132.17410278 62.28390121]
[124.27761078 75.03715515]
[133.14888000 89.33707428]
[134.27830505 106.12729645]
[127.40212250 121.48649597]
[114.12624359 131.82759094]
[97.55122375 134.73542786]
[93.29837036 149.11990356]
[89.19342804 163.54728699]
[85.23681641 178.01605225]
[85.99050140 187.18272400]
[81.04758453 192.73966980]
[76.79473877 207.12416077]
[72.54189301 221.50863647]
[76.04902649 236.93623352]
[65.02075195 246.94754028]
[60.76790237 261.33203125]
[58.61932373 276.17733765]
[58.61932373 291.17733765]
[58.61932373 306.17733765]
[58.61932373 321.17733765]
[58.61932373 336.17733765]
[58.61932373 351.17733765]
[58.61932373 366.17733765]
[58.61932373 381.17733765]
[58.61932373 396.17733765]
[58.61932373 411.17733765]
[58.61932373 426.17733765]
[73.22933960 429.91879272]
[86.44949341 437.17675781]
[97.44876862 447.49502563]
[105.53573608 460.22497559]
[110.20204163 474.56640625]
[111.15435791 489.61779785]
[108.33282471 504.43298340]
[101.91479492 518.08068848]
[92.30372620 529.70300293]
[80.10376740 538.56933594]
[66.08182526 544.12231445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[37 130]
[38 129]
[40 127]
[41 126]
[42 125]
[43 123]
[44 122]
[46 121]
[47 120]
[50 60]
[51 59]
[52 58]
[53 57]
[65 115]
[66 114]
[67 113]
[68 112]
[69 111]
[70 110]
[97 109]
[98 108]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
