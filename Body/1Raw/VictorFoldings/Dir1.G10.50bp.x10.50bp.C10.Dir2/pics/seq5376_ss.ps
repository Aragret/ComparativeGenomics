%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACUACUCGGGGGGGGGGAACUUAAACUCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAxxxxxxxxxxAGUUUAUAUUCUUAUCCUACCAGGCUUCGGAAUAAUCUCCCAUAUUGUAACCCCCCCCCCCUUACUACUC\
) } def
/len { sequence length } bind def

/coor [
[84.78133392 407.15939331]
[70.93539429 401.14334106]
[59.22673035 391.61392212]
[50.52420807 379.27825928]
[45.47360611 365.05175781]
[44.44971466 349.99005127]
[47.52851486 335.21090698]
[54.48153687 321.81097412]
[64.79281616 310.78463745]
[77.69719696 302.95013428]
[92.23708344 298.88882446]
[92.23708344 283.88882446]
[92.23708344 268.88882446]
[92.23708344 253.88882446]
[92.23708344 238.88882446]
[92.23708344 223.88882446]
[92.23708344 208.88882446]
[92.23708344 193.88882446]
[92.23708344 178.88882446]
[92.23708344 163.88882446]
[82.64598083 149.22558594]
[91.90023804 133.34040833]
[91.58818054 118.34365845]
[83.47189331 107.17596436]
[84.95612335 94.98754883]
[73.86480713 84.88890076]
[62.77349091 74.79025269]
[51.68217468 64.69160461]
[40.59086227 54.59295273]
[29.49954414 44.49430084]
[18.12425613 54.30043030]
[5.64988470 62.66388702]
[-7.74165773 69.46270752]
[-21.85508347 74.59774780]
[-36.48457336 77.99411011]
[-51.41679382 79.60228729]
[-66.43398285 79.39880371]
[-81.31714630 77.38665009]
[-95.84924316 73.59515381]
[-109.81835938 68.07960510]
[-123.02077484 60.92045212]
[-135.26396179 52.22208023]
[-146.36938477 42.11134720]
[-156.17509460 30.73569107]
[-164.53808594 18.26100731]
[-171.33641052 4.86921024]
[-176.47091675 -9.24440670]
[-179.86672974 -23.87402534]
[-181.47434998 -38.80630493]
[-181.27030945 -53.82348633]
[-179.25759888 -68.70657349]
[-175.46554565 -83.23853302]
[-169.94949341 -97.20744324]
[-162.78984070 -110.40959167]
[-154.09100342 -122.65245819]
[-143.97985840 -133.75749207]
[-132.60383606 -143.56277466]
[-120.12883759 -151.92530823]
[-106.73678589 -158.72311401]
[-92.62297821 -163.85710144]
[-77.99323273 -167.25238037]
[-63.06089401 -168.85943604]
[-48.04372025 -168.65483093]
[-33.16070557 -166.64155579]
[-18.62889099 -162.84896851]
[-4.66019011 -157.33238220]
[8.54169178 -150.17224121]
[20.78423119 -141.47296143]
[31.88889885 -131.36138916]
[41.69375229 -119.98500061]
[50.05580902 -107.50968933]
[56.85312653 -94.11738586]
[61.98657990 -80.00338745]
[65.38130951 -65.37351227]
[66.98780060 -50.44111633]
[66.78263855 -35.42395020]
[64.76881409 -20.54101181]
[60.97568512 -6.00933695]
[55.45857620 7.95915794]
[48.29793930 21.16077232]
[39.59819412 33.40298843]
[50.68951035 43.50163651]
[61.78082657 53.60028458]
[72.87213898 63.69893646]
[83.96345520 73.79758453]
[95.05477142 83.89623260]
[109.97368622 85.45381927]
[122.91174316 77.86390686]
[135.84979248 70.27400208]
[148.78785706 62.68408966]
[161.72590637 55.09418106]
[161.43101501 38.59291840]
[169.43551636 24.26729965]
[183.48173523 15.96465015]
[199.70428467 15.86024761]
[213.69369507 23.88819122]
[226.47105408 16.03076553]
[239.24841309 8.17333984]
[249.57331848 -5.27406406]
[265.35342407 0.92472917]
[263.76522827 17.80412483]
[247.10583496 20.95069695]
[234.32847595 28.80812263]
[221.55111694 36.66554642]
[222.82595825 50.29764938]
[218.06709290 63.20626831]
[208.15370178 72.84120941]
[194.98910522 77.27275085]
[181.13563538 75.57795715]
[169.31581116 68.03224182]
[156.37776184 75.62214661]
[143.43969727 83.21205139]
[130.50164795 90.80196381]
[117.56359100 98.39186859]
[130.60571289 90.98220062]
[145.55308533 89.72685242]
[159.64837646 94.85740662]
[170.29144287 105.42742157]
[175.51895142 119.48705292]
[174.36656189 134.44271851]
[167.04689026 147.53555298]
[154.91017151 156.35032654]
[140.19526672 159.26095581]
[125.61665344 155.73054504]
[113.86362457 146.41033936]
[107.10427094 133.01962280]
[106.58493042 118.03160095]
[106.89698792 133.02835083]
[115.67007446 142.54081726]
[115.58564758 155.07923889]
[107.23708344 163.88882446]
[107.23708344 178.88882446]
[107.23708344 193.88882446]
[107.23708344 208.88882446]
[107.23708344 223.88882446]
[107.23708344 238.88882446]
[107.23708344 253.88882446]
[107.23708344 268.88882446]
[107.23708344 283.88882446]
[107.23708344 298.88882446]
[121.77697754 302.95013428]
[134.68135071 310.78463745]
[144.99264526 321.81097412]
[151.94566345 335.21090698]
[155.02445984 349.99005127]
[154.00056458 365.05175781]
[148.94996643 379.27825928]
[140.24743652 391.61392212]
[128.53878784 401.14334106]
[114.69284058 407.15939331]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 128]
[23 127]
[25 86]
[26 85]
[27 84]
[28 83]
[29 82]
[30 81]
[87 114]
[88 113]
[89 112]
[90 111]
[91 110]
[96 104]
[97 103]
[98 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
