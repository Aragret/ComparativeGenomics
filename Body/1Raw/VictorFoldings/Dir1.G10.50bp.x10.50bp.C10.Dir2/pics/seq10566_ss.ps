%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACAACAUGGGGGGGGGGGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCxxxxxxxxxxCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUAGUUACCGCCCCCCCCCCCUAACAACCU\
) } def
/len { sequence length } bind def

/coor [
[84.30940247 409.13400269]
[71.08920288 401.86154175]
[60.20240021 391.41452026]
[52.39126968 378.50527954]
[48.18838882 364.01397705]
[47.88031387 348.92861938]
[51.48805618 334.27780151]
[58.76562881 321.06042480]
[69.21683502 310.17764282]
[82.12909698 302.37149048]
[96.62203217 298.17422485]
[96.30998230 283.17745972]
[95.99792480 268.18069458]
[95.68586731 253.18394470]
[95.37380981 238.18719482]
[95.06175232 223.19044495]
[94.74969482 208.19369507]
[94.43764496 193.19692993]
[94.12558746 178.20018005]
[86.12518311 165.63662720]
[93.57371521 151.67848206]
[93.26165771 136.68171692]
[75.85636139 132.17855835]
[61.42191315 119.35815430]
[46.92631531 123.21531677]
[32.43072128 127.07247925]
[28.50735283 141.92181396]
[17.67356873 152.80871582]
[2.84360003 156.80467224]
[-11.99336433 152.83477783]
[-22.84625626 141.96691895]
[-26.79570389 127.12449646]
[-22.77932358 112.30004883]
[-11.87750149 101.48127747]
[2.97722602 97.57836914]
[17.78901100 101.64119720]
[28.57356071 112.57688141]
[43.06915665 108.71971893]
[57.56475449 104.86255646]
[58.50038147 89.89176941]
[44.59782410 84.25981140]
[30.69527054 78.62785339]
[16.79271317 72.99589539]
[2.89015794 67.36394501]
[-12.38448143 72.26954651]
[-25.66309357 63.26632309]
[-26.75946426 47.26077652]
[-14.83255005 36.53099060]
[0.96833897 39.30794144]
[8.52211475 53.46138763]
[22.42467117 59.09334183]
[36.32722473 64.72529602]
[50.22978210 70.35725403]
[64.13233948 75.98921204]
[76.84915161 65.91122437]
[91.73005676 61.62990952]
[106.38387299 63.25492859]
[111.87090302 49.29454041]
[117.35793304 35.33414841]
[122.84497070 21.37375832]
[119.66554260 3.26654720]
[133.74174500 -7.16707087]
[138.93716431 -21.23859024]
[144.13258362 -35.31010818]
[149.32798767 -49.38162994]
[154.52340698 -63.45314789]
[141.49888611 -70.96779633]
[129.93180847 -80.57564545]
[120.15497589 -92.00024414]
[112.44968414 -104.91289520]
[107.03763580 -118.94206238]
[104.07453918 -133.68411255]
[103.64565277 -148.71488953]
[105.76331329 -163.60191345]
[110.36660004 -177.91687012]
[117.32305908 -191.24786377]
[126.43254089 -203.21136475]
[137.43295288 -213.46315002]
[150.00778198 -221.70825195]
[163.79522705 -227.70944214]
[178.39860535 -231.29405212]
[193.39773560 -232.35894775]
[208.36106873 -230.87350464]
[222.85807800 -226.88043213]
[236.47166443 -220.49464417]
[248.81013489 -211.89987183]
[259.51846313 -201.34338379]
[268.28860474 -189.12892151]
[274.86816406 -175.60792542]
[279.06787109 -161.16941833]
[280.76687622 -146.22882080]
[279.91629028 -131.21601868]
[276.54061890 -116.56293488]
[270.73693848 -102.69117737]
[262.67227173 -89.99987793]
[252.57864380 -78.85417938]
[240.74645996 -69.57476807]
[227.51615906 -62.42862701]
[213.26841736 -57.62136841]
[198.41316223 -55.29130554]
[183.37779236 -55.50548172]
[168.59492493 -58.25773239]
[163.39950562 -44.18621445]
[158.20410156 -30.11469460]
[153.00868225 -16.04317474]
[147.81326294 -1.97165549]
[152.59376526 9.18424797]
[148.33013916 20.97579193]
[136.80535889 26.86079025]
[131.31832886 40.82118225]
[125.83129120 54.78157043]
[120.34426117 68.74195862]
[133.28320312 83.17198944]
[137.23367310 102.14659882]
[151.72926331 106.00375366]
[166.22486877 109.86091614]
[180.72045898 113.71807861]
[196.40386963 108.92612457]
[208.20932007 120.30871582]
[203.99237061 136.15641785]
[188.09106445 140.16645813]
[176.86329651 128.21366882]
[162.36770630 124.35651398]
[147.87210083 120.49935150]
[133.37651062 116.64219666]
[127.09642029 125.62690735]
[118.47546387 132.39770508]
[108.25841522 136.36967468]
[108.57047272 151.36642456]
[116.59319305 165.00263977]
[109.12233734 177.88812256]
[109.43439484 192.88487244]
[109.74645233 207.88163757]
[110.05850983 222.87838745]
[110.37056732 237.87513733]
[110.68261719 252.87188721]
[110.99467468 267.86865234]
[111.30673218 282.86538696]
[111.61878967 297.86215210]
[126.27378082 301.45291138]
[139.49958801 308.71517944]
[150.39445496 319.15377808]
[158.21556091 332.05697632]
[162.42962646 346.54504395]
[162.74934387 361.63015747]
[159.15292358 376.28375244]
[151.88555908 389.50674438]
[141.44274902 400.39758301]
[128.53652954 408.21371460]
[114.04683685 412.42218018]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[21 129]
[22 128]
[24 39]
[25 38]
[26 37]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[57 112]
[58 111]
[59 110]
[60 109]
[62 106]
[63 105]
[64 104]
[65 103]
[66 102]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
