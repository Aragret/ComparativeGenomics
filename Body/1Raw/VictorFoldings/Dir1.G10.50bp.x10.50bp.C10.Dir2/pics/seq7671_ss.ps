%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGUCCUCAGGGGGGGGGGUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUxxxxxxxxxxUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCCCCCCCCCCCUAGACCUCA\
) } def
/len { sequence length } bind def

/coor [
[72.27374268 408.56549072]
[58.78486252 401.83395386]
[47.29936218 392.06939697]
[38.48499298 379.83950806]
[32.85420990 365.85531616]
[30.73438263 350.92984009]
[32.24875259 335.93084717]
[37.30927277 321.73031616]
[45.62173843 309.15390015]
[56.70286942 298.93273926]
[69.90842438 291.66110229]
[84.47064972 287.76174927]
[84.16267395 272.76489258]
[83.85469818 257.76806641]
[83.54671478 242.77122498]
[83.23873901 227.77438354]
[82.93076324 212.77755737]
[82.62278748 197.78071594]
[82.31480408 182.78387451]
[82.00682831 167.78703308]
[81.69885254 152.79019165]
[81.39087677 137.79336548]
[69.32844543 128.87721252]
[54.90105820 132.98216248]
[53.18402100 148.08580017]
[45.81339264 161.38024902]
[33.91314697 170.83819580]
[19.29798317 175.01734924]
[4.19660664 173.28044128]
[-9.08813286 165.89233398]
[-18.53040886 153.97966003]
[-22.69034195 139.35900879]
[-20.93357468 124.25993347]
[-13.52799797 110.98492432]
[-1.60291040 101.55832672]
[13.02319908 97.41763306]
[28.11995506 99.19425964]
[41.38521194 106.61729431]
[50.79611206 118.55477142]
[65.22349548 114.44982910]
[65.25749207 91.07785797]
[78.72319794 73.37687683]
[99.06151581 67.72213745]
[102.11991119 53.03723907]
[105.17830658 38.35234070]
[108.23670197 23.66744232]
[94.01952362 15.12857914]
[83.58315277 2.27263308]
[78.16554260 -13.34777069]
[78.39988708 -29.85377312]
[84.24064636 -45.26628113]
[94.97112274 -57.74325943]
[109.29133606 -65.79988098]
[125.47550964 -68.48520660]
[127.92843628 -83.28328705]
[130.38136292 -98.08136749]
[132.83428955 -112.87944794]
[131.14511108 -121.92060089]
[135.49249268 -127.95487213]
[138.24873352 -142.69947815]
[141.00498962 -157.44406128]
[143.76123047 -172.18865967]
[146.51747131 -186.93325806]
[132.41514587 -192.15173340]
[119.39767456 -199.67858887]
[107.83960724 -209.29727173]
[98.07348633 -220.73103333]
[90.38030243 -233.65089417]
[84.98140717 -247.68513489]
[82.03212738 -262.42996216]
[81.61733246 -277.46112061]
[83.74895477 -292.34616089]
[88.36565399 -306.65679932]
[95.33460236 -319.98126221]
[104.45529938 -331.93621826]
[115.46530914 -342.17767334]
[128.04786682 -350.41101074]
[141.84092712 -356.39926147]
[156.44766235 -359.97018433]
[171.44778442 -361.02102661]
[186.40972900 -359.52154541]
[200.90298462 -355.51489258]
[214.51057434 -349.11633301]
[226.84098816 -340.51000977]
[237.53942871 -329.94348145]
[246.29809570 -317.72079468]
[252.86497498 -304.19363403]
[257.05114746 -289.75122070]
[258.73614502 -274.80902100]
[257.87149048 -259.79702759]
[254.48207092 -245.14710999]
[248.66540527 -231.28080750]
[240.58883667 -218.59706116]
[230.48477173 -207.46083069]
[218.64389038 -198.19252014]
[205.40690613 -191.05877686]
[191.15466309 -186.26487732]
[176.29722595 -183.94874573]
[161.26206970 -184.17701721]
[158.50582886 -169.43241882]
[155.74957275 -154.68782043]
[152.99333191 -139.94322205]
[150.23709106 -125.19863129]
[147.63237000 -110.42651367]
[145.17944336 -95.62844086]
[142.72651672 -80.83036041]
[140.27359009 -66.03227997]
[152.38412476 -59.99629593]
[162.30625916 -50.77099609]
[169.22380066 -39.10223389]
[172.56401062 -25.93739319]
[172.04508972 -12.34845257]
[167.69982910 0.55528176]
[159.87380981 11.71774292]
[149.19784546 20.22253227]
[136.53726196 25.36814690]
[122.92160034 26.72583771]
[119.86320496 41.41073608]
[116.80480957 56.09563446]
[113.74641418 70.78053284]
[121.63473511 75.30925751]
[128.06340027 81.95367432]
[132.46977234 90.25098419]
[134.43608093 99.59046173]
[133.72766113 109.25821686]
[130.31759644 118.49179840]
[124.39523315 126.54028320]
[116.35727692 132.72521973]
[106.78195953 136.49751282]
[96.38771057 137.48538208]
[96.69568634 152.48222351]
[97.00366974 167.47906494]
[97.31164551 182.47589111]
[97.61962128 197.47273254]
[97.92759705 212.46957397]
[98.23558044 227.46641541]
[98.54355621 242.46325684]
[98.85153198 257.46008301]
[99.15950775 272.45693970]
[99.46749115 287.45376587]
[114.17752075 290.75198364]
[127.67047882 297.47534180]
[139.16189575 307.23294067]
[147.98368835 319.45748901]
[153.62294006 333.43826294]
[155.75181580 348.36245728]
[154.24653625 363.36236572]
[149.19462585 377.56594849]
[140.88978577 390.14739990]
[129.81486511 400.37527466]
[116.61371613 407.65493774]
[102.05385590 411.56311035]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 40]
[24 39]
[43 120]
[44 119]
[45 118]
[46 117]
[54 107]
[55 106]
[56 105]
[57 104]
[59 103]
[60 102]
[61 101]
[62 100]
[63 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
