%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUACCCCGGGGGGGGGGCGAUUCCGCUACGACCAACUCAUACACCUCCUAUGAAAAAACUUCCUACCxxxxxxxxxxAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUCCCCCCCCCCAGCAUACUCC\
) } def
/len { sequence length } bind def

/coor [
[123.41609955 580.35260010]
[109.57015991 574.33654785]
[97.86150360 564.80712891]
[89.15897369 552.47149658]
[84.10837555 538.24499512]
[83.08448029 523.18328857]
[86.16328430 508.40411377]
[93.11630249 495.00421143]
[103.42758942 483.97787476]
[116.33197021 476.14337158]
[130.87185669 472.08203125]
[130.87185669 457.08203125]
[130.87185669 442.08203125]
[130.87185669 427.08203125]
[130.87185669 412.08203125]
[130.87185669 397.08203125]
[130.87185669 382.08203125]
[130.87185669 367.08203125]
[130.87185669 352.08203125]
[130.87185669 337.08203125]
[121.28074646 322.41879272]
[130.53500366 306.53363037]
[130.22294617 291.53689575]
[129.91088867 276.54013062]
[129.59883118 261.54336548]
[118.70562744 251.45013428]
[118.17552185 236.24572754]
[128.83610535 224.88836670]
[128.52404785 209.89161682]
[125.73172760 195.15380859]
[120.53631592 181.08229065]
[108.16070557 177.36192322]
[100.08290100 167.02638245]
[99.44377899 153.72903442]
[106.70256042 142.33746338]
[101.80101013 128.16090393]
[96.89945984 113.98435211]
[86.46238708 104.68063354]
[88.92398071 90.91719818]
[84.02243042 76.74064636]
[79.12088013 62.56408310]
[74.21932983 48.38752747]
[68.42102814 41.24388885]
[69.36661530 33.86476135]
[64.76104736 19.58930016]
[50.82401657 7.60017920]
[55.09710312 -9.39219189]
[50.19555283 -23.56875038]
[45.29400253 -37.74530792]
[33.47196579 -48.25958633]
[36.62562561 -62.81649780]
[31.72407532 -76.99305725]
[26.82252502 -91.16961670]
[21.92097473 -105.34617615]
[14.87583923 -118.58876038]
[5.85830927 -130.57559204]
[-3.15922046 -142.56242371]
[-18.77913857 -146.22271729]
[-25.52581024 -160.77819824]
[-18.22376823 -175.06314087]
[-2.47451282 -178.11936951]
[9.64047432 -167.60240173]
[8.82761192 -151.57995605]
[17.84514236 -139.59312439]
[26.86267090 -127.60628510]
[25.83270264 -142.57089233]
[30.18139648 -156.92668152]
[39.34244537 -168.80418396]
[52.12284851 -176.65666199]
[66.85827637 -179.46150208]
[81.62980652 -176.85345459]
[94.51381683 -169.17214966]
[103.83247375 -157.41789246]
[108.37226868 -143.12138367]
[107.54199219 -128.14437866]
[101.44977570 -114.43727112]
[90.88897705 -103.78505707]
[77.23487854 -97.57494354]
[62.26559067 -96.61562347]
[47.93048096 -101.03203583]
[36.09753036 -110.24772644]
[40.99908447 -96.07116699]
[45.90063477 -81.89460754]
[50.80218506 -67.71804810]
[62.27362823 -58.21777344]
[59.47055817 -42.64685822]
[64.37210846 -28.47030067]
[69.27365875 -14.29374313]
[80.04262543 -8.69582367]
[84.21959686 3.12669253]
[79.03650665 14.98373604]
[83.64207458 29.25919724]
[88.39588928 43.48597717]
[93.29743958 57.66253281]
[98.19898987 71.83908844]
[103.10054016 86.01564789]
[113.53761292 95.31936646]
[111.07601929 109.08280182]
[115.97756958 123.25935364]
[120.87911987 137.43591309]
[136.72879028 144.76568604]
[142.29483032 160.96145630]
[134.60783386 175.88687134]
[139.80325317 189.95838928]
[142.97502136 175.29757690]
[150.88830566 162.55473328]
[162.62303162 153.21148682]
[176.81480408 148.35414124]
[191.81355286 148.54750061]
[205.87539673 153.76904297]
[217.36538696 163.41166687]
[224.94755554 176.35426331]
[227.74037170 191.09196472]
[225.41908264 205.91127014]
[218.25361633 219.08912659]
[207.07707214 229.09336853]
[193.18893433 234.76080322]
[178.20397949 235.43247986]
[163.86448669 231.03031921]
[151.83770752 222.06614685]
[143.52081299 209.57955933]
[143.83287048 224.57630920]
[154.95666504 235.48037720]
[155.05950928 250.69366455]
[144.59559631 261.23132324]
[144.90765381 276.22805786]
[145.21969604 291.22482300]
[145.53175354 306.22158813]
[154.30484009 315.73403931]
[154.22041321 328.27246094]
[145.87185669 337.08203125]
[145.87185669 352.08203125]
[145.87185669 367.08203125]
[145.87185669 382.08203125]
[145.87185669 397.08203125]
[145.87185669 412.08203125]
[145.87185669 427.08203125]
[145.87185669 442.08203125]
[145.87185669 457.08203125]
[145.87185669 472.08203125]
[160.41174316 476.14337158]
[173.31613159 483.97787476]
[183.62741089 495.00421143]
[190.58042908 508.40411377]
[193.65922546 523.18328857]
[192.63534546 538.24499512]
[187.58473206 552.47149658]
[178.88221741 564.80712891]
[167.17355347 574.33654785]
[153.32760620 580.35260010]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 128]
[23 127]
[24 126]
[25 125]
[28 122]
[29 121]
[30 104]
[31 103]
[35 100]
[36 99]
[37 98]
[39 96]
[40 95]
[41 94]
[42 93]
[44 92]
[45 91]
[47 88]
[48 87]
[49 86]
[51 84]
[52 83]
[53 82]
[54 81]
[55 65]
[56 64]
[57 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
