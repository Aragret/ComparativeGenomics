%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUUUUCGGGGGGGGGGGGUCACCCUGAAGUUUAUAUUCUUAUCCUACCAGGCUUCGGAAUAAUCUCCCxxxxxxxxxxUCGAUACGGGAUAAUCCUAUUUAUUACCUCAGAAGUUUUUUUCUUCGCAGCCCCCCCCCCGAUUUUUCUG\
) } def
/len { sequence length } bind def

/coor [
[106.70763397 378.17770386]
[95.21147156 368.36294556]
[87.12041473 355.59478760]
[83.15390778 341.00854492]
[83.66465759 325.90124512]
[88.60723877 311.61621094]
[97.54216766 299.42364502]
[109.67495728 290.40771484]
[123.92676544 285.37011719]
[123.30278778 270.38311768]
[122.67881012 255.39608765]
[122.05483246 240.40907288]
[121.43085480 225.42205811]
[120.80687714 210.43504333]
[120.18289948 195.44802856]
[119.55892181 180.46101379]
[118.93494415 165.47399902]
[118.31096649 150.48698425]
[114.30322266 136.03228760]
[107.12071991 122.86370850]
[99.93820953 109.69512939]
[96.21512604 111.45459747]
[91.47541809 111.64546967]
[86.38677216 109.84562683]
[81.76480103 105.90959930]
[66.99874878 103.27073669]
[57.93400574 104.84626770]
[51.95432281 100.42031860]
[37.24636078 97.47483826]
[22.53840065 94.52935791]
[7.83043909 91.58386993]
[6.87928295 98.74047852]
[2.60780835 105.89928436]
[-4.95841455 111.68569946]
[-15.26780224 114.77558136]
[-30.22805023 113.68427277]
[-45.18830109 112.59296417]
[-59.70552444 120.22068787]
[-73.42354584 111.23471069]
[-72.23043823 94.87902069]
[-57.35357285 87.97895813]
[-44.09698868 97.63271332]
[-29.13673973 98.72402191]
[-14.17649174 99.81533051]
[-10.16875172 85.36064148]
[-23.55503654 78.59252930]
[-36.94132233 71.82441711]
[-53.80461884 70.07354736]
[-56.79039764 53.38458252]
[-41.58019257 45.89552307]
[-30.17320633 58.43812943]
[-16.78692055 65.20624542]
[-3.40063667 71.97435760]
[10.77592182 76.87590790]
[25.48388290 79.82139587]
[40.19184494 82.76687622]
[54.89980698 85.71235657]
[69.63761139 88.50468445]
[84.40367126 91.14354706]
[97.18102264 83.28611755]
[101.48860931 68.91793823]
[105.79619598 54.54975128]
[110.10377502 40.18156815]
[114.41136169 25.81338501]
[117.66218567 11.16988373]
[112.00951385 -3.60705233]
[121.51191711 -15.07673359]
[123.68875122 -29.91793823]
[125.86559296 -44.75914383]
[128.04243469 -59.60034943]
[114.57631683 -66.52441406]
[104.08988190 -77.44747162]
[97.72059631 -91.18468475]
[96.15937042 -106.24593353]
[99.57553864 -120.99749756]
[107.59855652 -133.83921814]
[119.35813141 -143.37814331]
[133.57868958 -148.57954407]
[148.71766663 -148.87922668]
[163.13293457 -144.24467468]
[175.26080322 -135.17860413]
[183.78573608 -122.66445160]
[187.78302002 -108.05964661]
[186.81906128 -92.94840240]
[180.99842834 -78.96989441]
[170.95246887 -67.64038849]
[157.77093506 -60.18883133]
[142.88363647 -57.42351151]
[140.70680237 -42.58230591]
[138.52995300 -27.74110222]
[136.35311890 -12.89989662]
[142.16149902 0.81549686]
[132.50338745 13.34672070]
[144.76913452 4.71239328]
[159.72908020 5.80783749]
[170.60623169 16.13680649]
[172.47312927 31.02017593]
[164.48405457 43.71563339]
[150.25813293 48.47201538]
[136.23985291 43.13462830]
[128.77954102 30.12096977]
[124.47196198 44.48915482]
[120.16437531 58.85733795]
[115.85679626 73.22552490]
[111.54920959 87.59370422]
[113.10678864 102.51261902]
[120.28929901 115.68119812]
[127.47180939 128.84977722]
[132.31045532 122.63138580]
[139.72393799 117.95506287]
[149.21194458 115.62112427]
[160.05541992 116.27358246]
[174.62812805 119.82834625]
[189.20083618 123.38311005]
[203.77352905 126.93786621]
[216.26976013 117.53689575]
[231.88243103 118.41936493]
[243.23970032 129.16860962]
[244.97903442 144.70916748]
[236.27915955 157.70324707]
[221.24790955 162.01545715]
[206.98254395 155.60969543]
[200.21876526 141.51057434]
[185.64607239 137.95581055]
[171.07336426 134.40104675]
[156.50067139 130.84628296]
[150.69999695 135.60046387]
[160.20816040 147.20196533]
[148.60650635 156.70993042]
[139.09864807 145.10882568]
[133.29798889 149.86300659]
[133.92196655 164.85002136]
[134.54592896 179.83703613]
[135.16990662 194.82405090]
[135.79388428 209.81106567]
[136.41786194 224.79808044]
[137.04183960 239.78509521]
[137.66581726 254.77210999]
[138.28979492 269.75912476]
[138.91377258 284.74615479]
[153.53501892 288.58163452]
[166.37525940 296.55780029]
[176.29277039 307.96545410]
[182.40568542 321.79019165]
[184.17047119 336.80276489]
[181.43016052 351.66824341]
[174.42846680 365.06478882]
[163.78793335 375.80120850]
[150.45474243 382.92282104]
[135.61445618 385.79638672]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 140]
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 108]
[20 107]
[21 106]
[25 59]
[26 58]
[28 57]
[29 56]
[30 55]
[31 54]
[35 44]
[36 43]
[37 42]
[45 53]
[46 52]
[47 51]
[60 105]
[61 104]
[62 103]
[63 102]
[64 101]
[65 93]
[67 91]
[68 90]
[69 89]
[70 88]
[112 126]
[113 125]
[114 124]
[115 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
