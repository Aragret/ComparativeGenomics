%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUACUACACGGGGGGGGGGGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCUAUCAAUAGGAGCxxxxxxxxxxGGAGGACAACCAGUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCCCCCCCCCCCGUACUAUAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 398.95285034]
[71.19830322 392.93682861]
[59.48964310 383.40740967]
[50.78712082 371.07174683]
[45.73651886 356.84524536]
[44.71262741 341.78353882]
[47.79142761 327.00439453]
[54.74444962 313.60446167]
[65.05573273 302.57812500]
[77.96011353 294.74362183]
[92.50000000 290.68231201]
[92.50000000 275.68231201]
[92.50000000 260.68231201]
[92.50000000 245.68231201]
[92.50000000 230.68231201]
[92.50000000 215.68231201]
[92.50000000 200.68231201]
[92.50000000 185.68231201]
[92.50000000 170.68231201]
[92.50000000 155.68231201]
[92.50000000 140.68231201]
[92.50000000 125.68230438]
[83.21566010 120.83547211]
[76.50328064 112.79590607]
[73.39143372 102.79554749]
[74.35696411 92.36681366]
[79.25191498 83.10774994]
[70.74082947 70.75617981]
[62.22973633 58.40460587]
[53.71864700 46.05303574]
[41.15925598 42.93605423]
[34.33171463 32.41922760]
[36.45668030 20.46967316]
[28.20438957 7.94371080]
[19.95210075 -4.58225155]
[11.69981098 -17.10821342]
[3.44752169 -29.63417435]
[-2.37297511 -32.98519516]
[-5.16074753 -38.03094864]
[-4.87483501 -42.85730743]
[-12.59891987 -55.71570969]
[-27.55096054 -50.46899414]
[-43.25751495 -48.41392899]
[-59.04523849 -49.63635635]
[-74.23778534 -54.08166122]
[-88.18476105 -61.55720139]
[-100.28958130 -71.74066162]
[-110.03498077 -84.19395447]
[-117.00511932 -98.38205719]
[-120.90333557 -113.69600677]
[-121.56475067 -129.47901917]
[-118.96327209 -145.05468750]
[-113.21257782 -159.75593567]
[-104.56118774 -172.95359802]
[-93.38169098 -184.08340454]
[-101.63397980 -196.60935974]
[-109.88626862 -209.13533020]
[-118.13855743 -221.66128540]
[-126.39084625 -234.18725586]
[-141.28581238 -241.04815674]
[-142.52192688 -257.40066528]
[-128.82759094 -266.42269897]
[-114.29035950 -258.83316040]
[-113.86489105 -242.43954468]
[-105.61260223 -229.91357422]
[-97.36031342 -217.38761902]
[-89.10801697 -204.86164856]
[-80.85572815 -192.33569336]
[-67.73101044 -197.76504517]
[-53.82250977 -200.66537476]
[-39.61308289 -200.93432617]
[-25.59632874 -198.56100464]
[-12.25944901 -193.62626648]
[-0.06631014 -186.30004883]
[10.55868340 -176.83551025]
[19.24536514 -165.56022644]
[25.69070435 -152.86495972]
[29.66937447 -139.18998718]
[31.04162598 -125.00994873]
[29.75820541 -110.81728363]
[25.86211395 -97.10517883]
[19.48716545 -84.35043335]
[10.85340023 -72.99684906]
[0.25948256 -63.43979645]
[7.98356771 -50.58139420]
[15.97348404 -37.88646317]
[24.22577286 -25.36050224]
[32.47806168 -12.83454037]
[40.73035049 -0.30857858]
[48.98263931 12.21738338]
[65.05885315 19.18555641]
[66.07022095 37.54194641]
[74.58130646 49.89351654]
[83.09239960 62.24509048]
[91.60349274 74.59666443]
[111.82303619 75.99903107]
[125.25765228 91.17492676]
[140.23736572 90.39508057]
[155.21708679 89.61523438]
[170.19679260 88.83539581]
[185.17651367 88.05554962]
[189.65943909 85.13613892]
[194.34324646 84.35237122]
[198.36511230 85.41366577]
[201.10914612 87.72401428]
[216.10833740 87.88005066]
[227.35418701 77.10189819]
[242.56327820 77.47381592]
[252.76928711 88.26143646]
[267.76849365 88.41747284]
[282.76766968 88.57350922]
[296.78085327 80.05511475]
[311.03265381 88.16793823]
[310.86206055 104.56620026]
[296.44454956 112.38077545]
[282.61163330 103.57270050]
[267.61242676 103.41666412]
[252.61325073 103.26062775]
[242.18502808 113.83359528]
[226.97149658 113.88901520]
[215.95230103 102.87924194]
[200.95310974 102.72320557]
[185.95635986 103.03526306]
[170.97663879 103.81510925]
[155.99693298 104.59495544]
[141.01721191 105.37479401]
[126.03749847 106.15464020]
[119.40421295 118.42030334]
[107.50000000 125.68230438]
[107.50000000 140.68231201]
[107.50000000 155.68231201]
[107.50000000 170.68231201]
[107.50000000 185.68231201]
[107.50000000 200.68231201]
[107.50000000 215.68231201]
[107.50000000 230.68231201]
[107.50000000 245.68231201]
[107.50000000 260.68231201]
[107.50000000 275.68231201]
[107.50000000 290.68231201]
[122.03988647 294.74362183]
[134.94427490 302.57812500]
[145.25555420 313.60446167]
[152.20857239 327.00439453]
[155.28736877 341.78353882]
[154.26348877 356.84524536]
[149.21287537 371.07174683]
[140.51036072 383.40740967]
[128.80169678 392.93682861]
[114.95575714 398.95285034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[27 95]
[28 94]
[29 93]
[30 92]
[33 90]
[34 89]
[35 88]
[36 87]
[37 86]
[40 85]
[41 84]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[97 127]
[98 126]
[99 125]
[100 124]
[101 123]
[105 122]
[106 121]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
