%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAACACCUGGGGGGGGGGAUUCUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUACCAGGCUxxxxxxxxxxUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCCCCCCCCCCCACCAAGACCU\
) } def
/len { sequence length } bind def

/coor [
[89.30337524 384.07263184]
[76.08318329 376.80017090]
[65.19637299 366.35317993]
[57.38524628 353.44390869]
[53.18236542 338.95260620]
[52.87429047 323.86727905]
[56.48203278 309.21643066]
[63.75960541 295.99905396]
[74.21081543 285.11630249]
[87.12307739 277.31015015]
[101.61601257 273.11285400]
[101.30395508 258.11608887]
[100.99189758 243.11935425]
[100.67984009 228.12258911]
[100.36779022 213.12583923]
[100.05573273 198.12908936]
[99.74367523 183.13233948]
[99.43161774 168.13557434]
[99.11956024 153.13882446]
[98.80750275 138.14207458]
[98.49545288 123.14531708]
[91.57947540 136.45581055]
[88.57799530 151.15245056]
[77.65571594 161.43368530]
[62.80459976 163.54183960]
[49.45256042 156.70642090]
[42.47961426 143.42567444]
[44.43429565 128.55358887]
[54.60218811 117.52571106]
[69.26517487 114.37244415]
[82.50301361 107.31838226]
[67.50382233 107.16234589]
[52.50463486 107.00630951]
[37.50463486 107.00630951]
[22.50544548 107.16234589]
[8.67251873 115.97042084]
[-5.74498653 108.15584564]
[-5.91557741 91.75759125]
[8.33623505 83.64476776]
[22.34940910 92.16316223]
[37.34859848 92.00712585]
[44.04766846 88.77168274]
[52.66067123 92.00712585]
[67.65985870 92.16316223]
[82.65904999 92.31919861]
[95.35397339 84.32927704]
[101.70110321 70.73832703]
[108.04823303 57.14737701]
[114.39536285 43.55642700]
[101.37530518 36.09019089]
[89.02568054 27.56064415]
[77.43309784 18.02761269]
[66.67889404 7.55796432]
[56.83848190 -3.77485991]
[47.98089981 -15.89136887]
[40.16827393 -28.70657158]
[33.45540619 -42.13057709]
[27.88938332 -56.06922531]
[23.50924492 -70.42474365]
[20.34571838 -85.09644318]
[18.42098999 -99.98139954]
[17.74856567 -114.97521210]
[18.33315659 -129.97270203]
[20.17066765 -144.86868286]
[23.24820518 -159.55865479]
[27.54418564 -173.93957520]
[33.02847290 -187.91058350]
[39.66259766 -201.37368774]
[47.40003204 -214.23442078]
[56.18649292 -226.40260315]
[65.96035004 -237.79287720]
[76.65305328 -248.32533264]
[88.18959808 -257.92611694]
[100.48905945 -266.52783203]
[113.46515656 -274.07022095]
[127.02688599 -280.50030518]
[141.07910156 -285.77301025]
[155.52325439 -289.85137939]
[170.25802612 -292.70675659]
[185.18005371 -294.31915283]
[200.18466187 -294.67724609]
[215.16661072 -293.77850342]
[230.02081299 -291.62924194]
[244.64306641 -288.24456787]
[258.93081665 -283.64816284]
[272.78384399 -277.87231445]
[286.10494995 -270.95751953]
[298.80072021 -262.95230103]
[310.78213501 -253.91279602]
[321.96508789 -243.90238953]
[332.27114868 -232.99133301]
[341.62808228 -221.25613403]
[349.97018433 -208.77912903]
[357.23898315 -195.64782715]
[363.38348389 -181.95433044]
[368.36056519 -167.79470825]
[372.13534546 -153.26826477]
[374.68136597 -138.47689819]
[375.98068237 -123.52436829]
[376.02429199 -108.51554871]
[374.81179810 -93.55571747]
[372.35174561 -78.74981689]
[368.66137695 -64.20169830]
[363.76660156 -50.01340485]
[357.70175171 -36.28446198]
[350.50933838 -23.11116409]
[342.23980713 -10.58592033]
[332.95120239 1.20341468]
[322.70867920 12.17414665]
[311.58404541 22.24932098]
[299.65536499 31.35826874]
[287.00628662 39.43709183]
[273.72555542 46.42912674]
[259.90631104 52.28532791]
[245.64549255 56.96461868]
[231.04313660 60.43416977]
[216.20166016 62.66965485]
[201.22518921 63.65538406]
[186.21875000 63.38444519]
[171.28761292 61.85874557]
[156.53651428 59.08897781]
[142.06892395 55.09457779]
[127.98631287 49.90355682]
[121.63918304 63.49450684]
[115.29205322 77.08545685]
[108.94493103 90.67640686]
[117.13446808 96.67417908]
[120.05278015 109.01976013]
[113.49220276 122.83326721]
[113.80426025 137.83001709]
[114.11631775 152.82676697]
[114.42837524 167.82353210]
[114.74042511 182.82028198]
[115.05248260 197.81703186]
[115.36454010 212.81378174]
[115.67659760 227.81054688]
[115.98865509 242.80729675]
[116.30071259 257.80404663]
[116.61276245 272.80081177]
[131.26776123 276.39157104]
[144.49356079 283.65383911]
[155.38842773 294.09240723]
[163.20953369 306.99563599]
[167.42359924 321.48370361]
[167.74331665 336.56878662]
[164.14689636 351.22241211]
[156.87953186 364.44540405]
[146.43673706 375.33624268]
[133.53050232 383.15234375]
[119.04080963 387.36083984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[31 45]
[32 44]
[33 43]
[34 41]
[35 40]
[46 126]
[47 125]
[48 124]
[49 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
