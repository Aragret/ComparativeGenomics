%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCUAGUCGGGGGGGGGGCUGUAUGCCCUUUUCCUAACACUCACAACAAAACUAACUAAUACUAACAUxxxxxxxxxxAUCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACCCCCCCCCCCUUCCUAUUC\
) } def
/len { sequence length } bind def

/coor [
[60.15935516 348.00823975]
[47.60113144 339.65707397]
[37.51490784 328.44464111]
[30.53471375 315.07574463]
[27.09933090 300.39074707]
[27.42470741 285.31277466]
[31.49039268 270.78967285]
[39.04081345 257.73431396]
[49.60134125 246.96742249]
[62.50813675 239.16578674]
[76.94986725 234.81983948]
[76.32588959 219.83282471]
[75.70191193 204.84580994]
[75.07793427 189.85879517]
[74.45395660 174.87176514]
[73.82997894 159.88475037]
[73.20600128 144.89773560]
[72.58202362 129.91072083]
[82.70731354 89.96096802]
[74.98323059 77.10256195]
[67.25914001 64.24416351]
[59.53505707 51.38575745]
[51.81097412 38.52735519]
[36.73899078 34.59377289]
[29.08884239 21.44349289]
[32.93179703 7.09890127]
[25.20771217 -5.75950098]
[17.48362732 -18.61790276]
[9.75954151 -31.47630501]
[-3.76623487 -24.96646500]
[-17.83497047 -19.73241043]
[-32.32663345 -15.81879616]
[-47.11758041 -13.25901318]
[-62.08162308 -12.07490063]
[-77.09108734 -12.27656174]
[-92.01791382 -13.86227512]
[-106.73474884 -16.81851387]
[-121.11603546 -21.12005234]
[-135.03907776 -26.73019409]
[-148.38507080 -33.60107040]
[-161.04016113 -41.67406464]
[-172.89637756 -50.88029861]
[-183.85256958 -61.14122391]
[-193.81524658 -72.36929321]
[-202.69943237 -84.46871948]
[-210.42929077 -97.33626556]
[-216.93891907 -110.86215210]
[-222.17272949 -124.93097687]
[-226.08610535 -139.42269897]
[-228.64564514 -154.21369934]
[-229.82951355 -169.17774963]
[-229.62759399 -184.18721008]
[-228.04162598 -199.11401367]
[-225.08514404 -213.83079529]
[-220.78337097 -228.21202087]
[-215.17300415 -242.13496399]
[-208.30189514 -255.48085022]
[-200.22869873 -268.13580322]
[-191.02226257 -279.99188232]
[-180.76115417 -290.94787598]
[-169.53291321 -300.91036987]
[-157.43334961 -309.79434204]
[-144.56567383 -317.52401733]
[-131.03967285 -324.03338623]
[-116.97076416 -329.26699829]
[-102.47897339 -333.18011475]
[-87.68793488 -335.73941040]
[-72.72386169 -336.92303467]
[-57.71440125 -336.72085571]
[-42.78762817 -335.13464355]
[-28.07088852 -332.17791748]
[-13.68974590 -327.87591553]
[0.23310401 -322.26528931]
[13.57887363 -315.39398193]
[26.23369980 -307.32055664]
[38.08961105 -298.11392212]
[49.04545593 -287.85263062]
[59.00776672 -276.62423706]
[67.89153290 -264.52450562]
[75.62097931 -251.65670776]
[82.13014221 -238.13061523]
[87.36349487 -224.06161499]
[91.27638245 -209.56976318]
[93.83542633 -194.77868652]
[95.01879120 -179.81457520]
[94.81638336 -164.80513000]
[93.22991943 -149.87837219]
[90.27294922 -135.16168213]
[85.97068787 -120.78061676]
[80.35985565 -106.85786438]
[73.48830414 -93.51220703]
[65.41468048 -80.85751343]
[56.20785522 -69.00175476]
[45.94638443 -58.04608154]
[34.71781158 -48.08396149]
[22.61794472 -39.20038986]
[30.34202957 -26.34198761]
[38.06611252 -13.48358631]
[45.79019928 -0.62518364]
[60.25910568 2.71941209]
[68.27559662 15.64962769]
[64.66937256 30.80327225]
[72.39346313 43.66167450]
[80.11754608 56.52007675]
[87.84162903 69.37847900]
[95.56571198 82.23687744]
[97.34055328 67.34225464]
[109.53433990 58.60659790]
[124.20824432 61.71730423]
[131.80876160 74.64913177]
[127.38753510 88.98275757]
[113.82347107 95.38619232]
[128.46696472 98.63701630]
[143.11047363 101.88784027]
[157.75398254 105.13867188]
[172.39747620 108.38949585]
[187.86796570 102.94928741]
[200.13670349 113.83094025]
[196.58265686 129.84033203]
[180.86192322 134.50837708]
[169.14665222 123.03299713]
[154.50314331 119.78217316]
[139.85964966 116.53134155]
[125.21614838 113.28051758]
[110.57264709 110.02969360]
[104.82174683 114.84395599]
[117.53325653 122.80746460]
[113.88755798 137.35768127]
[98.92289734 138.38665771]
[93.31993866 124.47248077]
[87.56903839 129.28674316]
[88.19301605 144.27375793]
[88.81699371 159.26077271]
[89.44097137 174.24778748]
[90.06494904 189.23481750]
[90.68892670 204.22183228]
[91.31290436 219.20884705]
[91.93688202 234.19586182]
[106.68988800 237.32629395]
[120.20052338 244.02806091]
[131.61950684 253.87985229]
[140.22901917 266.26239014]
[145.48785400 280.39727783]
[147.06546021 295.39599609]
[144.86265564 310.31573486]
[139.01791382 324.21859741]
[129.89863586 336.23068237]
[118.07806396 345.59683228]
[104.29925537 351.72833252]
[89.42835236 354.23971558]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 106]
[20 105]
[21 104]
[22 103]
[23 102]
[26 99]
[27 98]
[28 97]
[29 96]
[112 125]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
