%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUACAUAAAGGGGGGGGGGAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAGCUGGUUUCAAGCCxxxxxxxxxxUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCACCCCCCCCCCUUUACAUAAA\
) } def
/len { sequence length } bind def

/coor [
[77.76073456 438.98464966]
[63.91479874 432.96862793]
[52.20613861 423.43920898]
[43.50361252 411.10354614]
[38.45301056 396.87701416]
[37.42911911 381.81533813]
[40.50791931 367.03616333]
[47.46094131 353.63623047]
[57.77222443 342.60989380]
[70.67660522 334.77539062]
[85.21649170 330.71408081]
[85.21649170 315.71408081]
[85.21649170 300.71408081]
[85.21649170 285.71408081]
[85.21649170 270.71408081]
[85.21649170 255.71408081]
[85.21649170 240.71408081]
[85.21649170 225.71408081]
[85.21649170 210.71408081]
[85.21649170 195.71408081]
[74.94245911 189.46327209]
[69.94181824 176.92713928]
[55.81701660 181.97589111]
[41.69221497 187.02465820]
[39.01677704 202.14872742]
[29.12545967 213.89851379]
[14.67897987 219.11337280]
[-0.43663365 216.39053345]
[-12.15535545 206.46244812]
[-17.32490921 191.99967957]
[-14.55471039 176.89268494]
[-4.58992910 165.20513916]
[9.88895893 160.08094788]
[24.98720551 162.89848328]
[36.64345932 172.89984131]
[50.76826096 167.85108948]
[64.89306641 162.80233765]
[75.33287811 152.03152466]
[79.93843842 137.75607300]
[84.54400635 123.48060608]
[73.66428375 109.83141327]
[72.93819427 92.39176178]
[82.64567566 77.88543701]
[76.86940002 64.04222107]
[71.09312439 50.19900131]
[65.31685638 36.35578537]
[59.54058075 22.51256561]
[50.07881165 24.01573753]
[39.86241531 21.51959801]
[30.62209702 14.74317169]
[24.15891457 4.15516949]
[22.02408028 -9.02714062]
[11.36245441 -19.57843018]
[0.70082808 -30.12972069]
[-15.29008007 -33.76604843]
[-19.87722778 -49.51057434]
[-8.34175014 -61.16667938]
[7.44964218 -56.74356461]
[11.25211811 -40.79134750]
[21.91374397 -30.24005699]
[32.57537079 -19.68876648]
[39.37084579 -22.86233139]
[52.96179581 -29.20946121]
[59.75727081 -32.38302612]
[58.51039886 -47.33111191]
[57.26352310 -62.27919769]
[42.77412415 -66.87547302]
[31.14980507 -76.67056274]
[24.16319084 -90.17076874]
[22.87968826 -105.31742096]
[27.49502182 -119.80075836]
[37.30538559 -131.41218567]
[50.81477356 -138.38102722]
[65.96310425 -139.64460754]
[80.44036102 -135.01022339]
[92.03886414 -125.18460083]
[98.98993683 -111.66605377]
[100.23358917 -96.51607513]
[95.58016968 -82.04492950]
[85.73928833 -70.45935822]
[72.21160889 -63.52607346]
[73.45848846 -48.57798767]
[74.70536041 -33.62990189]
[87.77570343 -4.66422129]
[73.38379669 16.73629379]
[79.16007233 30.57951164]
[84.93634796 44.42272949]
[90.71261597 58.26594543]
[96.48889160 72.10916138]
[107.50717926 72.90998840]
[117.36604309 77.89463806]
[124.54286194 86.29327393]
[139.11557007 82.73851013]
[153.68827820 79.18375397]
[168.26097107 75.62899017]
[182.67318726 71.47109985]
[196.89996338 66.71728516]
[211.12675476 61.96347046]
[225.35353088 57.20965576]
[232.55709839 51.48598099]
[239.92599487 52.50827408]
[254.24858093 48.05145645]
[268.57116699 43.59464264]
[282.89376831 39.13782501]
[296.22113037 28.65840149]
[309.98037720 38.56391144]
[304.27093506 54.52756882]
[287.35058594 53.46042252]
[273.02798462 57.91724014]
[258.70541382 62.37405396]
[244.38279724 66.83087158]
[230.10734558 71.43643188]
[215.88056946 76.19024658]
[201.65377808 80.94406891]
[187.42700195 85.69788361]
[186.05880737 88.21489716]
[183.57882690 90.32289886]
[180.14469910 91.58332062]
[176.07417297 91.62550354]
[171.81573486 90.20169067]
[157.24302673 93.75645447]
[142.67033386 97.31121826]
[128.09762573 100.86597443]
[123.84487152 114.88787842]
[113.11360931 124.86483002]
[98.81946564 128.08616638]
[94.21390533 142.36163330]
[89.60833740 156.63708496]
[108.17486572 164.70895386]
[112.00392151 183.07698059]
[100.21649170 195.71408081]
[100.21649170 210.71408081]
[100.21649170 225.71408081]
[100.21649170 240.71408081]
[100.21649170 255.71408081]
[100.21649170 270.71408081]
[100.21649170 285.71408081]
[100.21649170 300.71408081]
[100.21649170 315.71408081]
[100.21649170 330.71408081]
[114.75637817 334.77539062]
[127.66075897 342.60989380]
[137.97204590 353.63623047]
[144.92506409 367.03616333]
[148.00386047 381.81533813]
[146.97998047 396.87701416]
[141.92936707 411.10354614]
[133.22685242 423.43920898]
[121.51818848 432.96862793]
[107.67224884 438.98464966]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 37]
[23 36]
[24 35]
[38 128]
[39 127]
[40 126]
[43 89]
[44 88]
[45 87]
[46 86]
[47 85]
[52 61]
[53 60]
[54 59]
[64 83]
[65 82]
[66 81]
[92 123]
[93 122]
[94 121]
[95 120]
[96 115]
[97 114]
[98 113]
[99 112]
[101 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
