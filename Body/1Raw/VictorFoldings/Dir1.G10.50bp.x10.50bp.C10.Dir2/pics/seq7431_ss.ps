%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACCAUUUGGGGGGGGGGCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCUUAAUGxxxxxxxxxxCCCACUAGGAUACCAACAAACCUACCCACCCUUAACAGUACAUAGUACAUCCCCCCCCCCAAAGCCAUUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 378.89068604]
[71.19830322 372.87466431]
[59.48964310 363.34524536]
[50.78712082 351.00958252]
[45.73651886 336.78305054]
[44.71262741 321.72137451]
[47.79142761 306.94223022]
[54.74444962 293.54229736]
[65.05573273 282.51596069]
[77.96011353 274.68145752]
[92.50000000 270.62014771]
[92.50000000 255.62013245]
[92.50000000 240.62013245]
[92.50000000 225.62013245]
[92.50000000 210.62013245]
[92.50000000 195.62013245]
[92.50000000 180.62013245]
[92.50000000 165.62013245]
[92.50000000 150.62013245]
[92.50000000 135.62013245]
[82.57552338 131.95983887]
[74.12245178 125.60071564]
[67.85460663 117.07974243]
[53.44238663 121.23763275]
[39.03017044 125.39551544]
[24.61795616 129.55340576]
[10.20573902 133.71128845]
[-4.20647669 137.86918640]
[-18.61869240 142.02706909]
[-32.16115952 152.22695923]
[-45.71136856 142.03735352]
[-39.67104721 126.19593048]
[-22.77658081 127.61485291]
[-8.36436462 123.45696259]
[6.04785156 119.29907990]
[20.46006775 115.14118958]
[34.87228394 110.98329926]
[49.28450012 106.82541656]
[63.69671631 102.66752625]
[67.17748260 84.26067352]
[79.35105133 70.02226257]
[96.99333191 63.72322845]
[98.86094666 48.83995056]
[100.72856140 33.95666885]
[101.35253906 18.96965408]
[100.72856140 3.98263717]
[100.10458374 -11.00437927]
[99.48060608 -25.99139404]
[81.44999695 -34.20838165]
[70.05053711 -50.32044220]
[68.31678009 -69.90300751]
[76.64200592 -87.62648773]
[92.69250488 -98.70680237]
[90.51567078 -113.54800415]
[88.33883667 -128.38920593]
[86.16199493 -143.23042297]
[83.98516083 -158.07162476]
[81.80831909 -172.91282654]
[66.78551483 -173.97549438]
[52.34249496 -178.24320984]
[39.15480042 -185.51635742]
[27.83923912 -195.45477295]
[18.92506027 -207.59361267]
[12.82919407 -221.36512756]
[9.83675766 -236.12518311]
[10.08771324 -251.18344116]
[13.57032108 -265.83560181]
[20.12169456 -279.39633179]
[29.43541336 -291.23138428]
[41.07585907 -300.78723145]
[54.49858475 -307.61691284]
[69.07579041 -311.40097046]
[84.12566376 -311.96246338]
[98.94430542 -309.27511597]
[112.83861542 -303.46456909]
[125.15873718 -294.80267334]
[135.32843018 -283.69448853]
[142.87203979 -270.65960693]
[147.43673706 -256.30770874]
[148.80902100 -241.30999756]
[146.92471313 -226.36799622]
[141.87194824 -212.18054199]
[133.88705444 -199.41123962]
[123.34348297 -188.65728760]
[110.73439026 -180.42170715]
[96.64952850 -175.08966064]
[98.82636261 -160.24845886]
[101.00320435 -145.40725708]
[103.18003845 -130.56605530]
[105.35687256 -115.72484589]
[107.53371429 -100.88363647]
[117.93682098 -98.86234283]
[127.37308502 -93.99242401]
[135.07827759 -86.65493774]
[140.42462158 -77.43128967]
[142.97195435 -67.05720520]
[142.50392151 -56.36404419]
[139.04627991 -46.21216583]
[132.86582947 -37.42171478]
[124.44983673 -30.70635986]
[114.46762085 -26.61537170]
[115.09159851 -11.62835598]
[115.71557617 3.35865998]
[116.33955383 18.34567642]
[126.14827728 6.99715328]
[140.71681213 3.42534137]
[154.66236877 8.94995308]
[162.83235168 21.52975464]
[162.20811462 36.51675797]
[153.02029419 48.37356949]
[138.66360474 52.71932602]
[124.44256592 47.94836044]
[115.61183929 35.82428360]
[113.74423218 50.70756149]
[111.87661743 65.59084320]
[126.39570618 74.93386841]
[134.97653198 89.91603851]
[135.68867493 107.16680145]
[149.47105408 113.08676147]
[163.25343323 119.00672913]
[177.03581238 124.92668915]
[193.97547913 125.62229919]
[197.99642944 142.09252930]
[183.28297424 150.51574707]
[171.11584473 138.70907593]
[157.33346558 132.78910828]
[143.55108643 126.86914825]
[129.76870728 120.94918060]
[123.65992737 127.66318512]
[116.07991028 132.65701294]
[107.50000000 135.62013245]
[107.50000000 150.62013245]
[107.50000000 165.62013245]
[107.50000000 180.62013245]
[107.50000000 195.62013245]
[107.50000000 210.62013245]
[107.50000000 225.62013245]
[107.50000000 240.62013245]
[107.50000000 255.62013245]
[107.50000000 270.62014771]
[122.03988647 274.68145752]
[134.94427490 282.51596069]
[145.25555420 293.54229736]
[152.20857239 306.94223022]
[155.28736877 321.72137451]
[154.26348877 336.78305054]
[149.21287537 351.00958252]
[140.51036072 363.34524536]
[128.80169678 372.87466431]
[114.95575714 378.89068604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[29 33]
[42 115]
[43 114]
[44 113]
[45 104]
[46 103]
[47 102]
[48 101]
[53 91]
[54 90]
[55 89]
[56 88]
[57 87]
[58 86]
[118 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
