%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUUCUAAUCGGGGGGGGGGGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAUUCUAGGCUAUAUACAxxxxxxxxxxAGACCCAAACAUUAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCCCCCCCCCCCAUACUAAUC\
) } def
/len { sequence length } bind def

/coor [
[89.18209839 420.10656738]
[75.16014862 414.55355835]
[62.96019363 405.68722534]
[53.34912109 394.06491089]
[46.93109512 380.41720581]
[44.10956192 365.60202026]
[45.06187439 350.55062866]
[49.72817993 336.20922852]
[57.81514740 323.47924805]
[68.81442261 313.16098022]
[82.03458405 305.90301514]
[96.64459229 302.16156006]
[96.64459229 287.16156006]
[96.64459229 272.16156006]
[96.64459229 257.16156006]
[96.64459229 242.16157532]
[96.64459229 227.16157532]
[96.64459229 212.16157532]
[96.64459229 197.16157532]
[96.64459229 182.16157532]
[96.64459229 167.16157532]
[88.29693604 158.35369873]
[88.21073914 145.81718445]
[96.98021698 136.30404663]
[97.28819275 121.30720520]
[97.59616852 106.31036377]
[89.49653625 124.69644165]
[80.00180054 142.44670105]
[65.22969055 145.05142212]
[50.45757294 147.65614319]
[35.68545532 150.26086426]
[20.91333961 152.86558533]
[6.36477470 161.57051086]
[-6.02739620 150.00027466]
[1.66018009 134.88943481]
[18.30861664 138.09347534]
[33.08073425 135.48875427]
[47.85284805 132.88403320]
[62.62496567 130.27931213]
[77.39707947 127.67458344]
[78.85081482 120.31682587]
[63.95704269 122.09881592]
[57.66001129 108.48458099]
[68.66215515 98.28884888]
[81.75829315 105.60130310]
[83.21202850 98.24353790]
[70.54051208 90.21654510]
[57.86899567 82.18954468]
[43.02313232 87.10221863]
[28.51191902 81.27481079]
[21.18710899 67.45883179]
[24.50725174 52.17777634]
[36.90467834 42.64688492]
[52.52569962 43.36635971]
[63.99455261 53.99647903]
[65.89598846 69.51802826]
[78.56750488 77.54502869]
[91.23902130 85.57202148]
[106.03710175 83.11909485]
[115.44095612 71.43288422]
[124.84481812 59.74667740]
[134.24867249 48.06047058]
[123.54743958 37.53135681]
[113.94775391 25.98905754]
[105.54503632 13.54828072]
[98.42279053 0.33267584]
[92.65180206 -13.52641201]
[88.28943634 -27.89124298]
[85.37903595 -42.61904526]
[83.94953918 -57.56344604]
[84.01514435 -72.57592010]
[85.57520294 -87.50725555]
[88.61420441 -102.20906067]
[93.10195923 -116.53521729]
[98.99385071 -130.34333801]
[106.23133087 -143.49618530]
[114.74246216 -155.86305237]
[124.44265747 -167.32101440]
[135.23550415 -177.75619507]
[147.01374817 -187.06488037]
[159.66030884 -195.15455627]
[173.04951477 -201.94483948]
[187.04829407 -207.36820984]
[201.51750183 -211.37078857]
[216.31333923 -213.91279602]
[231.28875732 -214.96896362]
[246.29490662 -214.52877808]
[261.18267822 -212.59664917]
[275.80407715 -209.19174194]
[290.01379395 -204.34791565]
[303.67059326 -198.11332703]
[316.63876343 -190.54991150]
[328.78939819 -181.73284912]
[340.00177002 -171.74977112]
[350.16439819 -160.69990540]
[359.17630005 -148.69306946]
[366.94790649 -135.84858704]
[373.40197754 -122.29412079]
[378.47436523 -108.16438293]
[382.11465454 -93.59980774]
[384.28668213 -78.74514771]
[384.96884155 -63.74803925]
[384.15438843 -48.75753403]
[381.85134888 -33.92261887]
[378.08267212 -19.39073181]
[372.88580322 -5.30630302]
[366.31237793 8.19068623]
[358.42773438 20.96609497]
[349.31024170 32.89294815]
[339.05050659 43.85271454]
[327.75051880 53.73646164]
[315.52255249 62.44596481]
[302.48812866 69.89465332]
[288.77685547 76.00850677]
[274.52496338 80.72675323]
[259.87408447 84.00250244]
[244.96984863 85.80319977]
[229.96038818 86.11094666]
[214.99487305 84.92268372]
[200.22204590 82.25022888]
[185.78871155 78.12012482]
[171.83834839 72.57344055]
[158.50958252 65.66528320]
[145.93487549 57.46432495]
[136.53102112 69.15053558]
[127.12716675 80.83674622]
[117.72331238 92.52294922]
[112.59300995 106.61833954]
[112.28503418 121.61518097]
[111.97705078 136.61201477]
[121.23522949 152.49650574]
[111.64459229 167.16157532]
[111.64459229 182.16157532]
[111.64459229 197.16157532]
[111.64459229 212.16157532]
[111.64459229 227.16157532]
[111.64459229 242.16157532]
[111.64459229 257.16156006]
[111.64459229 272.16156006]
[111.64459229 287.16156006]
[111.64459229 302.16156006]
[126.25460815 305.90301514]
[139.47476196 313.16098022]
[150.47404480 323.47924805]
[158.56100464 336.20922852]
[163.22731018 350.55062866]
[164.17962646 365.60202026]
[161.35809326 380.41720581]
[154.94006348 394.06491089]
[145.32899475 405.68722534]
[133.12904358 414.55355835]
[119.10709381 420.10656738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 130]
[25 129]
[26 128]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[46 58]
[47 57]
[48 56]
[59 127]
[60 126]
[61 125]
[62 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
