%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAUCAUCUGGGGGGGGGGGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAUAUUAAUAAUUUUCAUGAUxxxxxxxxxxUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCUUCCCUCUACACCCCCCCCCCCUUAUCAUCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 351.56054688]
[71.19830322 345.54452515]
[59.48964310 336.01510620]
[50.78712082 323.67944336]
[45.73651886 309.45291138]
[44.71262741 294.39123535]
[47.79142761 279.61206055]
[54.74444962 266.21212769]
[65.05573273 255.18580627]
[77.96011353 247.35130310]
[92.50000000 243.28999329]
[92.50000000 228.28999329]
[92.50000000 213.28999329]
[92.50000000 198.28999329]
[92.50000000 183.28999329]
[92.50000000 168.28999329]
[92.50000000 153.28999329]
[92.50000000 138.28999329]
[92.50000000 123.28998566]
[92.50000000 108.28998566]
[92.34396362 93.29080200]
[92.03190613 78.29404449]
[91.71984863 63.29729080]
[91.40779114 48.30053711]
[76.41521454 47.69770432]
[61.48727417 46.18198013]
[46.67950439 43.75900650]
[32.04698944 40.43779755]
[17.64416885 36.23070908]
[3.52462053 31.15338707]
[-10.25913143 25.22472382]
[-23.65580750 18.46677208]
[-36.61557388 10.90467453]
[-49.09021759 2.56656146]
[-61.03333282 -6.51654863]
[-72.40048981 -16.31086540]
[-83.14939880 -26.77995300]
[-93.24007416 -37.88486481]
[-102.63497925 -49.58429337]
[-111.29916382 -61.83471298]
[-119.20039368 -74.59054565]
[-126.30928802 -87.80435181]
[-132.59938049 -101.42696381]
[-138.04728699 -115.40770721]
[-142.63273621 -129.69456482]
[-146.33866882 -144.23440552]
[-149.15129089 -158.97312927]
[-151.06016541 -173.85591125]
[-152.05816650 -188.82737732]
[-152.14157104 -203.83184814]
[-151.31010437 -218.81347656]
[-149.56683350 -233.71656799]
[-146.91825867 -248.48565674]
[-143.37422180 -263.06579590]
[-138.94790649 -277.40277100]
[-133.65579224 -291.44320679]
[-127.51755524 -305.13491821]
[-120.55602264 -318.42694092]
[-112.79711151 -331.26986694]
[-104.26966858 -343.61584473]
[-95.00543213 -355.41900635]
[-85.03884888 -366.63543701]
[-74.40701294 -377.22338867]
[-63.14945984 -387.14349365]
[-51.30807495 -396.35882568]
[-38.92691422 -404.83514404]
[-26.05203056 -412.54086304]
[-12.73132229 -419.44735718]
[0.98565727 -425.52890015]
[15.04788017 -430.76290894]
[29.40303230 -435.12988281]
[43.99771118 -438.61358643]
[58.77762604 -441.20104980]
[73.68778992 -442.88265991]
[88.67274475 -443.65216064]
[103.67673492 -443.50668335]
[118.64394379 -442.44677734]
[133.51870728 -440.47634888]
[148.24566650 -437.60278320]
[162.77005005 -433.83676147]
[177.03782654 -429.19226074]
[190.99591064 -423.68655396]
[204.59239197 -417.34017944]
[217.77668762 -410.17669678]
[230.49972534 -402.22277832]
[242.71420288 -393.50799561]
[254.37466431 -384.06475830]
[265.43774414 -373.92825317]
[275.86230469 -363.13613892]
[285.60949707 -351.72854614]
[294.64312744 -339.74798584]
[302.92959595 -327.23895264]
[310.43801880 -314.24801636]
[317.14050293 -300.82348633]
[323.01208496 -287.01535034]
[328.03097534 -272.87490845]
[332.17846680 -258.45480347]
[335.43911743 -243.80868530]
[337.80081177 -228.99102783]
[339.25479126 -214.05694580]
[339.79559326 -199.06199646]
[339.42126465 -184.06196594]
[338.13314819 -169.11267090]
[335.93606567 -154.26969910]
[332.83816528 -139.58828735]
[328.85101318 -125.12304688]
[323.98937988 -110.92778015]
[318.27142334 -97.05529785]
[311.71835327 -83.55721283]
[304.35458374 -70.48374176]
[296.20748901 -57.88350677]
[287.30740356 -45.80339432]
[277.68740845 -34.28833771]
[267.38330078 -23.38117218]
[256.43341064 -13.12247658]
[244.87847900 -3.55041337]
[232.76148987 5.29940891]
[220.12751770 13.39406776]
[207.02355957 20.70344925]
[193.49835205 27.20036507]
[179.60223389 32.86064148]
[165.38688660 37.66322708]
[150.90519714 41.59025192]
[136.21104431 44.62710953]
[121.35907745 46.76250076]
[106.40454865 47.98847961]
[106.71660614 62.98523331]
[107.02866364 77.98198700]
[107.34071350 92.97874451]
[110.66161346 100.38520813]
[107.50000000 108.28998566]
[107.50000000 123.28998566]
[107.50000000 138.28999329]
[107.50000000 153.28999329]
[107.50000000 168.28999329]
[107.50000000 183.28999329]
[107.50000000 198.28999329]
[107.50000000 213.28999329]
[107.50000000 228.28999329]
[107.50000000 243.28999329]
[122.03988647 247.35130310]
[134.94427490 255.18580627]
[145.25555420 266.21212769]
[152.20857239 279.61206055]
[155.28736877 294.39123535]
[154.26348877 309.45291138]
[149.21287537 323.67944336]
[140.51036072 336.01510620]
[128.80169678 345.54452515]
[114.95575714 351.56054688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 129]
[22 128]
[23 127]
[24 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
