%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCAAGCACUGGGGGGGGGGGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCCUCCUACAAGCCUCAGxxxxxxxxxxUCUUGCUCAUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCCCCCCCCCCCAUUCAAGCAAU\
) } def
/len { sequence length } bind def

/coor [
[108.37361908 602.05560303]
[94.88473511 595.32403564]
[83.39923859 585.55950928]
[74.58486938 573.32958984]
[68.95408630 559.34539795]
[66.83425903 544.41992188]
[68.34862518 529.42089844]
[73.40914917 515.22039795]
[81.72161865 502.64398193]
[92.80274963 492.42282104]
[106.00830078 485.15118408]
[120.57052612 481.25183105]
[120.26255035 466.25497437]
[119.95456696 451.25814819]
[119.64659119 436.26132202]
[119.33861542 421.26446533]
[119.03063965 406.26763916]
[118.72265625 391.27078247]
[118.41468048 376.27395630]
[118.10670471 361.27713013]
[117.79872894 346.28027344]
[117.49074554 331.28344727]
[117.18276978 316.28659058]
[116.87479401 301.28976440]
[102.16007233 298.50180054]
[88.34123993 292.71295166]
[76.02326965 284.17401123]
[65.74596405 273.25619507]
[57.96033096 260.43508911]
[53.00876617 246.26982117]
[51.10999298 231.37879944]
[52.34943008 216.41258240]
[56.67531586 202.02557373]
[63.90089798 188.84733582]
[73.71247101 177.45506287]
[85.68300629 168.34829712]
[99.29074097 161.92706299]
[113.94190979 158.47421265]
[113.63393402 143.47737122]
[33.86097336 104.71334076]
[20.04739189 98.86655426]
[6.23380852 93.01976776]
[-7.57977438 87.17298126]
[-20.26122856 95.95843506]
[-35.68009949 96.47029114]
[-48.91627884 88.54519653]
[-55.74615479 74.71203613]
[-53.99033737 59.38491440]
[-44.20909882 47.45466232]
[-29.52359772 42.72817993]
[-14.61992741 46.71366882]
[-4.25379086 58.13937378]
[-1.73298633 73.35939789]
[12.08059692 79.20618439]
[25.89417839 85.05297089]
[39.70776367 90.89975739]
[45.73897934 86.44168854]
[33.53182602 77.72472382]
[38.05011368 63.42139816]
[53.04961395 63.29875946]
[57.80141068 77.52553558]
[63.83262634 73.06745911]
[62.29533386 58.14644241]
[60.75804138 43.22542572]
[59.22074890 28.30440903]
[44.46598053 24.90212822]
[31.61670303 16.89121056]
[22.06671143 5.14061928]
[16.85191727 -9.07502842]
[16.53798294 -24.21372604]
[21.15896225 -38.63334274]
[30.21360397 -50.76974106]
[42.71972656 -59.30645752]
[57.32076645 -63.31749725]
[72.43290710 -62.36776733]
[86.41689301 -56.56029129]
[97.75585175 -46.52501678]
[105.21981812 -33.35049820]
[107.99915314 -18.46580696]
[105.79237366 -3.48552465]
[98.83886719 9.96540070]
[87.89288330 20.42791367]
[74.14176178 26.76711655]
[75.67905426 41.68813324]
[77.21634674 56.60914993]
[78.75363922 71.53016663]
[85.87698364 73.87706757]
[107.24702454 80.91777039]
[117.35246277 69.83263397]
[127.45789337 58.74750137]
[137.56332397 47.66236496]
[147.66876221 36.57723236]
[150.64662170 20.45071983]
[166.18989563 15.22210503]
[178.30902100 26.27013969]
[174.53684998 42.22955322]
[158.75389099 46.68266678]
[148.64846802 57.76780319]
[138.54302979 68.85293579]
[128.43759155 79.93807220]
[118.33216095 91.02320099]
[122.21472931 97.44003296]
[137.21156311 97.13201904]
[129.97985840 110.27368164]
[133.86242676 116.69051361]
[148.37106323 112.88265228]
[159.63938904 100.96810150]
[175.52697754 105.03218079]
[179.69001770 120.89411926]
[167.84594727 132.23651123]
[152.17890930 127.39127350]
[137.67028809 131.19914246]
[128.63076782 143.16938782]
[128.93875122 158.16622925]
[143.71931458 161.01466370]
[157.57920837 166.87182617]
[169.91352844 175.47946167]
[180.18453979 186.45932007]
[187.94505310 199.32980347]
[192.85795593 213.52708435]
[194.71078491 228.42977905]
[193.42497253 243.38621521]
[189.05912781 257.74279785]
[181.80642700 270.87274170]
[171.98602295 282.20330811]
[160.02900696 291.24075317]
[146.45948792 297.59207153]
[131.87162781 300.98178101]
[132.17961121 315.97863770]
[132.48759460 330.97546387]
[132.79556274 345.97229004]
[133.10354614 360.96914673]
[133.41151428 375.96597290]
[133.71949768 390.96282959]
[134.02748108 405.95965576]
[134.33544922 420.95648193]
[134.64343262 435.95333862]
[134.95140076 450.95016479]
[135.25938416 465.94699097]
[135.56736755 480.94384766]
[150.27740479 484.24206543]
[163.77035522 490.96542358]
[175.26177979 500.72302246]
[184.08355713 512.94757080]
[189.72282410 526.92834473]
[191.85169983 541.85253906]
[190.34642029 556.85247803]
[185.29450989 571.05603027]
[176.98966980 583.63751221]
[165.91473389 593.86535645]
[152.71359253 601.14501953]
[138.15373230 605.05322266]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[24 128]
[38 114]
[39 113]
[40 56]
[41 55]
[42 54]
[43 53]
[62 86]
[63 85]
[64 84]
[65 83]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
