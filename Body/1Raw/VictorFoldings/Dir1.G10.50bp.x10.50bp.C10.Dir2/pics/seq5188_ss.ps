%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUCAUAGCGGGGGGGGGGAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUxxxxxxxxxxAUGGGCCAUUAUCGAAGAAUUCACAAAAAACAAUAGCCUCAUCAUCCCCACCCCCCCCCCCCAUCAUAGC\
) } def
/len { sequence length } bind def

/coor [
[118.07576752 562.76434326]
[104.22982788 556.74829102]
[92.52116394 547.21887207]
[83.81864166 534.88323975]
[78.76804352 520.65673828]
[77.74414825 505.59503174]
[80.82295227 490.81585693]
[87.77597046 477.41595459]
[98.08725739 466.38961792]
[110.99163818 458.55511475]
[125.53152466 454.49377441]
[125.53152466 439.49377441]
[125.53152466 424.49377441]
[125.53152466 409.49377441]
[125.53152466 394.49377441]
[125.53152466 379.49377441]
[125.53152466 364.49377441]
[125.53152466 349.49377441]
[125.53152466 334.49377441]
[125.53152466 319.49377441]
[115.94041443 304.83053589]
[125.19467163 288.94537354]
[124.88261414 273.94860840]
[112.26863861 262.86956787]
[111.52446747 245.76020813]
[123.59439087 233.14060974]
[115.33435059 220.74621582]
[122.49088287 206.63612366]
[121.86690521 191.64910889]
[121.24292755 176.66209412]
[120.61894989 161.67507935]
[119.99497223 146.68806458]
[115.09342194 132.51150513]
[106.32721710 120.33966064]
[97.56101227 108.16782379]
[86.32099152 122.52202606]
[68.26472473 130.73254395]
[53.40167618 128.71020508]
[39.81267929 137.23773193]
[24.72126579 131.79449463]
[19.70427895 116.55607605]
[28.61031914 103.21208954]
[44.60743713 101.99890137]
[55.42400742 113.84716034]
[70.28705597 115.86949921]
[74.85792542 109.92330933]
[88.57052612 92.08473969]
[82.79425049 78.24151611]
[77.01798248 64.39830017]
[71.24170685 50.55508423]
[63.65179825 37.61702728]
[54.38684845 25.82038689]
[45.12189865 14.02374744]
[35.85695267 2.22710705]
[20.66459084 4.48271847]
[6.38571978 -1.17496657]
[-3.13871908 -13.22405910]
[-5.34669876 -28.42341423]
[0.35571587 -42.68448257]
[12.43460369 -52.17110443]
[27.64080620 -54.33143234]
[41.88393021 -48.58434296]
[51.33264542 -36.47578049]
[53.44529724 -21.26288033]
[47.65359116 -7.03784227]
[56.91854095 4.75879765]
[66.18348694 16.55543709]
[75.44844055 28.35207748]
[74.51028442 13.38144398]
[79.63610840 -0.71557385]
[89.97080994 -11.58727741]
[103.79032898 -17.42002296]
[118.78926086 -17.24077606]
[132.46543884 -11.07944107]
[142.53738403 0.03613472]
[147.32485962 14.25162220]
[146.02920532 29.19556046]
[138.86657715 42.37496567]
[127.03184509 51.59121323]
[112.49932098 55.30683136]
[97.69335938 52.90196991]
[85.08492279 44.77880859]
[90.86119843 58.62202835]
[96.63746643 72.46524811]
[102.41374207 86.30846405]
[109.73284912 99.40161896]
[118.49905396 111.57345581]
[127.26525879 123.74529266]
[126.24639130 108.77993774]
[128.30235291 93.92150116]
[133.34667969 79.79511261]
[141.16711426 66.99508667]
[151.43464661 56.05992889]
[163.71733093 47.44971085]
[177.49838257 41.52667236]
[192.19804382 38.54000092]
[207.19784546 38.61535645]
[221.86676025 41.74956894]
[235.58760071 47.81077194]
[247.78315735 56.54396439]
[257.94030762 67.58172607]
[265.63174438 80.45968628]
[270.53387451 94.63604736]
[272.44046021 109.51438141]
[271.27127075 124.46875000]
[267.07550049 138.86997986]
[260.02969360 152.11221313]
[250.43028259 163.63830566]
[238.68109131 172.96336365]
[225.27644348 179.69503784]
[210.78030396 183.55014038]
[195.80253601 184.36648560]
[180.97326660 182.10969543]
[166.91641235 176.87474060]
[154.22334290 168.88186646]
[143.42808533 158.46734619]
[134.98199463 146.06408691]
[135.60597229 161.05110168]
[136.22994995 176.03811646]
[136.85392761 191.02513123]
[137.47790527 206.01214600]
[145.78257751 219.47851562]
[138.58140564 232.51663208]
[149.50415039 240.46339417]
[153.77352905 253.07293701]
[150.03633118 265.64703369]
[139.87936401 273.63656616]
[140.19142151 288.63333130]
[148.96450806 298.14578247]
[148.88008118 310.68420410]
[140.53152466 319.49377441]
[140.53152466 334.49377441]
[140.53152466 349.49377441]
[140.53152466 364.49377441]
[140.53152466 379.49377441]
[140.53152466 394.49377441]
[140.53152466 409.49377441]
[140.53152466 424.49377441]
[140.53152466 439.49377441]
[140.53152466 454.49377441]
[155.07141113 458.55511475]
[167.97578430 466.38961792]
[178.28707886 477.41595459]
[185.24009705 490.81585693]
[188.31889343 505.59503174]
[187.29499817 520.65673828]
[182.24440002 534.88323975]
[173.54188538 547.21887207]
[161.83322144 556.74829102]
[147.98727417 562.76434326]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 128]
[23 127]
[26 123]
[28 121]
[29 120]
[30 119]
[31 118]
[32 117]
[33 88]
[34 87]
[35 86]
[37 45]
[38 44]
[47 85]
[48 84]
[49 83]
[50 82]
[51 68]
[52 67]
[53 66]
[54 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
