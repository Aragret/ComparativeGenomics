%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCAUAAUAGCUAGGGGGGGGGGUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUxxxxxxxxxxCAAAAUGACAUCAAAAAAAUCGUAGCCUUCUCCACUUCAAGUCAACUAGGCCCCCCCCCCACUCAUAAUAGUUA\
) } def
/len { sequence length } bind def

/coor [
[68.45804596 473.27380371]
[54.09579468 468.76708984]
[40.93490219 461.46121216]
[29.51430702 451.65536499]
[20.30166817 439.75106812]
[13.67423916 426.23580933]
[9.90340996 411.66302490]
[9.14359283 396.62948608]
[11.42590332 381.75076294]
[16.65687943 367.63616943]
[24.62231827 354.86367798]
[34.99604034 343.95629883]
[47.35324860 335.36071777]
[61.18791962 329.42886353]
[75.93353271 326.40368652]
[75.93353271 311.40368652]
[75.93353271 296.40368652]
[75.93353271 281.40368652]
[75.93353271 266.40368652]
[75.93353271 251.40368652]
[75.93353271 236.40368652]
[75.93353271 221.40368652]
[75.93353271 206.40368652]
[75.93353271 191.40368652]
[75.93353271 176.40368652]
[66.66596985 188.19827271]
[52.79192734 193.90011597]
[37.90886688 192.03074646]
[25.87587738 183.07490540]
[19.81304741 169.35476685]
[21.29242706 154.42790222]
[29.93042755 142.16474915]
[43.48726273 135.74507141]
[58.44772339 136.83346558]
[70.93265533 145.14770508]
[77.70485687 158.53231812]
[80.64937592 143.82415771]
[83.59389496 129.11599731]
[86.53841400 114.40785217]
[78.78322601 101.56818390]
[64.39463043 97.32926941]
[50.00603867 93.09035492]
[40.83510208 93.66491699]
[35.37657547 88.62294769]
[21.07453728 84.10058594]
[5.18659496 88.16326141]
[-6.08068657 76.24770355]
[-1.13649344 60.61162567]
[14.93301201 57.34007645]
[25.59690094 69.79855347]
[39.89893723 74.32091522]
[54.24495316 78.70176697]
[68.63354492 82.94067383]
[83.02214050 87.17958832]
[91.76683044 74.99228668]
[83.14296722 62.71918869]
[74.51909637 50.44609070]
[65.89523315 38.17299271]
[57.27136612 25.89989471]
[48.64749908 13.62679768]
[40.02363205 1.35369968]
[24.53069878 -2.81145787]
[18.25983429 -17.57817078]
[26.02151108 -31.61868095]
[41.86163330 -34.16231155]
[53.62901688 -23.25780487]
[52.29673004 -7.27016687]
[60.92059708 5.00293112]
[69.54446411 17.27602959]
[78.16832733 29.54912758]
[86.79219818 41.82222366]
[95.41606140 54.09532166]
[104.03992462 66.36842346]
[102.35581207 51.46326065]
[100.67169189 36.55810165]
[93.74935150 23.25091743]
[92.37387848 8.31411552]
[96.74958801 -6.03346729]
[106.22649384 -17.66052055]
[119.39679718 -24.83986473]
[134.30409241 -26.50502014]
[148.73390198 -22.40863419]
[160.54272461 -13.15921307]
[167.97636414 -0.13074549]
[169.93057251 14.74141216]
[166.11505127 29.24802589]
[157.09660339 41.23416138]
[144.21400452 48.91961288]
[134.94929504 60.71643829]
[125.68457794 72.51325989]
[139.47082520 66.60231781]
[153.25708008 60.69137192]
[167.04333496 54.78042603]
[163.83430481 40.08013535]
[163.46557617 25.03817368]
[165.95048523 10.19830513]
[171.19920349 -3.90302110]
[179.02200317 -16.75605011]
[189.13607788 -27.89615631]
[201.17582703 -36.92062759]
[214.70600891 -43.50323486]
[229.23751831 -47.40602493]
[244.24504089 -48.48791122]
[259.18609619 -46.70978546]
[273.52053833 -42.13592529]
[286.73019409 -34.93167496]
[298.33755493 -25.35746002]
[307.92303467 -13.75938511]
[315.14007568 -0.55671108]
[319.72784424 13.77329159]
[321.52044678 28.71260452]
[320.45312500 43.72117615]
[316.56442261 58.25646210]
[309.99493408 71.79302216]
[300.98214722 83.84150696]
[289.85183716 93.96638489]
[277.00640869 101.80163574]
[262.91018677 107.06402588]
[248.07272339 109.56333160]
[233.03041077 109.20919037]
[218.32702637 106.01441193]
[204.49404907 100.09448242]
[192.03157043 91.66340637]
[181.39009094 81.02595520]
[172.95428467 68.56668091]
[159.16802979 74.47762299]
[145.38177490 80.38856506]
[131.59552002 86.29951477]
[122.16329193 113.43537140]
[101.24656677 117.35237122]
[98.30204773 132.06053162]
[95.35752869 146.76867676]
[92.41300964 161.47683716]
[90.93353271 176.40368652]
[90.93353271 191.40368652]
[90.93353271 206.40368652]
[90.93353271 221.40368652]
[90.93353271 236.40368652]
[90.93353271 251.40368652]
[90.93353271 266.40368652]
[90.93353271 281.40368652]
[90.93353271 296.40368652]
[90.93353271 311.40368652]
[90.93353271 326.40368652]
[105.67915344 329.42886353]
[119.51382446 335.36071777]
[131.87103271 343.95629883]
[142.24475098 354.86367798]
[150.21018982 367.63616943]
[155.44116211 381.75076294]
[157.72348022 396.62948608]
[156.96365356 411.66302490]
[153.19282532 426.23580933]
[146.56539917 439.75106812]
[137.35276794 451.65536499]
[125.93216705 461.46121216]
[112.77127075 468.76708984]
[98.40901947 473.27380371]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[36 133]
[37 132]
[38 131]
[39 130]
[40 54]
[41 53]
[42 52]
[44 51]
[45 50]
[55 73]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
[90 128]
[91 127]
[92 126]
[93 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
