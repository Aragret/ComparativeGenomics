%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAUCCAAAGGGGGGGGGGCUCUAACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCxxxxxxxxxxCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCCCCCCCCCCCUAAUCCUAA\
) } def
/len { sequence length } bind def

/coor [
[83.89066315 389.01043701]
[70.67046356 381.73794556]
[59.78366089 371.29095459]
[51.97253418 358.38171387]
[47.76964951 343.89038086]
[47.46157837 328.80505371]
[51.06932068 314.15423584]
[58.34689331 300.93682861]
[68.79810333 290.05407715]
[81.71036530 282.24792480]
[96.20330048 278.05062866]
[95.89124298 263.05389404]
[95.57918549 248.05712891]
[95.26712799 233.06037903]
[94.95507050 218.06362915]
[94.64302063 203.06686401]
[94.33096313 188.07011414]
[94.01890564 173.07336426]
[93.70684814 158.07661438]
[93.39479065 143.07984924]
[83.68854523 140.41583252]
[74.85225677 135.59625244]
[67.35719299 128.87818909]
[61.60311127 120.61993408]
[57.89689255 111.26193237]
[56.43620682 101.30328369]
[57.29895782 91.27512360]
[60.43912888 81.71229553]
[65.68924713 73.12483215]
[72.76929474 65.97072601]
[81.30167389 60.63154602]
[77.29393005 46.17686081]
[73.28618622 31.72216988]
[69.27845001 17.26748276]
[65.27070618 2.81279397]
[60.44943619 5.86107731]
[54.36321259 7.48584127]
[47.41389084 7.32415438]
[32.84118652 3.76939249]
[21.09282684 13.90624046]
[5.62714100 15.16805744]
[-7.60899973 7.06965017]
[-13.52602959 -7.27497911]
[-9.84872818 -22.35002708]
[2.00890470 -32.35883331]
[17.48736954 -33.45280075]
[30.63487816 -25.21128464]
[36.39594650 -10.80331039]
[50.96865082 -7.24854851]
[62.86103058 -16.39028168]
[63.17308807 -31.38703537]
[63.48514175 -46.38378906]
[60.52002716 -55.09355164]
[63.96292114 -61.68840790]
[64.58689880 -76.67542267]
[65.21087646 -91.66243744]
[65.83485413 -106.64945221]
[66.45883179 -121.63647461]
[63.36051178 -136.31300354]
[56.73201370 -149.76896667]
[50.10351181 -163.22492981]
[43.47501373 -176.68089294]
[29.55018806 -185.34295654]
[30.35969734 -201.72210693]
[45.07078934 -208.96888733]
[58.54995346 -199.62843323]
[56.93098068 -183.30938721]
[63.55947876 -169.85342407]
[70.18798065 -156.39746094]
[76.81647491 -142.94149780]
[78.13726044 -157.88323975]
[82.93090057 -172.09664917]
[90.92912292 -184.78634644]
[101.68435669 -195.24220276]
[114.59473419 -202.87908936]
[128.93777466 -207.26968384]
[143.91084290 -208.16824341]
[158.67602539 -205.52449036]
[172.40705872 -199.48640442]
[184.33554077 -190.39183044]
[193.79397583 -178.74974060]
[200.25302124 -165.21162415]
[203.35125732 -150.53507996]
[202.91529846 -135.54142761]
[198.96952820 -121.06969452]
[191.73477173 -107.92974854]
[181.61587524 -96.85689545]
[169.17910767 -88.47078705]
[155.12043762 -83.24071503]
[140.22657776 -81.45935822]
[125.33102417 -83.22639465]
[111.26732635 -88.44294739]
[98.82250214 -96.81708527]
[88.69296265 -107.88020325]
[81.44584656 -121.01249695]
[80.82186890 -106.02547455]
[80.19789124 -91.03845978]
[79.57391357 -76.05144501]
[78.94993591 -61.06443024]
[78.48189545 -46.07173538]
[78.16983795 -31.07497978]
[77.85778809 -16.07822609]
[79.72539520 -1.19494641]
[83.73313904 13.25974178]
[87.74087524 27.71442986]
[91.74861908 42.16912079]
[95.75635529 56.62380600]
[119.61454010 61.07992172]
[137.38989258 77.60585022]
[143.56997681 101.07659912]
[158.27793884 104.02208710]
[167.04893494 91.57260895]
[180.12863159 83.77249908]
[195.25086975 81.97319031]
[209.79565430 86.48640442]
[221.24301147 96.53021240]
[227.60960388 110.36445618]
[227.79238892 125.59227753]
[221.75970459 139.57536316]
[210.55673218 149.89105225]
[196.12446594 154.75209045]
[180.96339417 153.31626892]
[167.70024109 145.83236694]
[158.63294983 133.59701538]
[155.33245850 118.73004913]
[140.62449646 115.78456116]
[135.41549683 125.40167236]
[127.97618866 133.41909790]
[118.77505493 139.33192444]
[108.39154816 142.76779175]
[108.70360565 157.76455688]
[109.01565552 172.76130676]
[109.32771301 187.75805664]
[109.63977051 202.75480652]
[109.95182800 217.75157166]
[110.26388550 232.74832153]
[110.57594299 247.74507141]
[110.88799286 262.74182129]
[111.20005035 277.73858643]
[125.85504150 281.32934570]
[139.08085632 288.59161377]
[149.97572327 299.03021240]
[157.79681396 311.93341064]
[162.01089478 326.42147827]
[162.33061218 341.50656128]
[158.73419189 356.16018677]
[151.46682739 369.38317871]
[141.02401733 380.27401733]
[128.11778259 388.09014893]
[113.62809753 392.29861450]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[31 107]
[32 106]
[33 105]
[34 104]
[35 103]
[38 49]
[39 48]
[50 102]
[51 101]
[52 100]
[54 99]
[55 98]
[56 97]
[57 96]
[58 95]
[59 70]
[60 69]
[61 68]
[62 67]
[110 126]
[111 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
