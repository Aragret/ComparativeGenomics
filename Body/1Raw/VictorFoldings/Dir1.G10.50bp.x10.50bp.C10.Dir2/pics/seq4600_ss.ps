%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCAUCCUGGGGGGGGGGAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGUUGxxxxxxxxxxUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAAAACACAUAGCCUCCCCCCCCCCACCCCUUCCU\
) } def
/len { sequence length } bind def

/coor [
[77.21064758 428.68096924]
[63.36471176 422.66494751]
[51.65605164 413.13552856]
[42.95352554 400.79986572]
[37.90292358 386.57333374]
[36.87903214 371.51165771]
[39.95783234 356.73248291]
[46.91085434 343.33255005]
[57.22213745 332.30624390]
[70.12651825 324.47171021]
[84.66640472 320.41040039]
[84.66640472 305.41040039]
[84.66640472 290.41040039]
[84.66640472 275.41040039]
[84.66640472 260.41040039]
[84.66640472 245.41041565]
[84.66640472 230.41041565]
[84.66640472 215.41041565]
[84.66640472 200.41041565]
[84.66640472 185.41041565]
[84.66640472 170.41041565]
[73.04557037 179.89492798]
[58.10367203 178.57597351]
[48.32403183 167.20237732]
[49.25907898 152.23155212]
[60.37793732 142.16323853]
[75.36783600 142.71376038]
[85.71875763 153.57200623]
[87.58636475 138.68872070]
[89.45397949 123.80544281]
[80.38729858 117.12482452]
[74.99006653 107.24022675]
[59.99087906 107.08419037]
[44.99169159 106.92815399]
[29.99250221 106.77211761]
[17.57098770 116.92522430]
[1.91928220 113.40333557]
[-4.95596409 98.90814209]
[2.21934867 84.55912018]
[17.94093513 81.36360931]
[30.14853859 91.77292633]
[45.14772797 91.92896271]
[60.14691544 92.08499908]
[75.14610291 92.24103546]
[75.48230743 91.23641968]
[75.85910034 90.24630737]
[64.15947723 80.85914612]
[52.45985031 71.47198486]
[40.76022720 62.08481979]
[29.06060410 52.69765854]
[13.76028347 55.92786026]
[-0.01236818 48.52191162]
[-5.75432634 33.97667313]
[-0.75441343 19.15996552]
[12.62656403 11.06778049]
[28.07051849 13.52100277]
[38.28528595 25.36129570]
[38.44776535 40.99803543]
[50.14738846 50.38519669]
[61.84701157 59.77235794]
[73.54663849 69.15952301]
[85.24626160 78.54668427]
[94.10092163 74.64022064]
[103.77062988 74.23762512]
[112.91937256 77.39452362]
[123.79819489 67.06732178]
[134.67701721 56.74011612]
[145.55584717 46.41291046]
[136.52534485 34.41508484]
[128.92138672 21.46604347]
[122.84310913 7.73461103]
[118.36975098 -6.60019970]
[115.55962372 -21.35150337]
[114.44937134 -36.32698822]
[115.05346680 -51.33141327]
[117.36403656 -66.16917419]
[121.35095215 -80.64682007]
[126.96224213 -94.57560730]
[134.12475586 -107.77394867]
[142.74508667 -120.06977844]
[152.71089172 -131.30279541]
[163.89222717 -141.32655334]
[176.14331055 -150.01036072]
[189.30444336 -157.24101257]
[203.20402527 -162.92425537]
[217.66087341 -166.98599243]
[232.48648071 -169.37324524]
[247.48757935 -170.05493164]
[262.46859741 -169.02212524]
[277.23425293 -166.28831482]
[291.59197998 -161.88914490]
[305.35467529 -155.88194275]
[318.34286499 -148.34504700]
[330.38723755 -139.37670898]
[341.33074951 -129.09385681]
[351.03073120 -117.63053894]
[359.36077881 -105.13619995]
[366.21221924 -91.77373505]
[371.49578857 -77.71736145]
[375.14254761 -63.15031052]
[377.10501099 -48.26251221]
[377.35754395 -33.24805450]
[375.89688110 -18.30267906]
[372.74206543 -3.62123084]
[367.93423462 10.60488701]
[361.53604126 24.19020844]
[353.63092041 36.95761871]
[344.32192993 48.74067307]
[333.73040771 59.38574982]
[321.99447632 68.75406647]
[309.26708984 76.72350311]
[295.71423340 83.19013977]
[281.51254272 88.06968689]
[266.84719849 91.29853058]
[251.90937805 92.83456421]
[236.89384460 92.65776825]
[221.99632263 90.77044678]
[207.41107178 87.19720459]
[193.32821655 81.98462677]
[179.93136597 75.20067596]
[167.39515686 66.93378448]
[155.88305664 57.29173660]
[145.00422668 67.61894226]
[134.12539673 77.94614410]
[123.24657440 88.27335358]
[123.23577881 111.74802399]
[104.33725739 125.67305756]
[102.46965027 140.55633545]
[100.60203552 155.43962097]
[99.66640472 170.41041565]
[99.66640472 185.41041565]
[99.66640472 200.41041565]
[99.66640472 215.41041565]
[99.66640472 230.41041565]
[99.66640472 245.41041565]
[99.66640472 260.41040039]
[99.66640472 275.41040039]
[99.66640472 290.41040039]
[99.66640472 305.41040039]
[99.66640472 320.41040039]
[114.20629120 324.47171021]
[127.11067200 332.30624390]
[137.42195129 343.33255005]
[144.37498474 356.73248291]
[147.45378113 371.51165771]
[146.42988586 386.57333374]
[141.37928772 400.79986572]
[132.67675781 413.13552856]
[120.96810150 422.66494751]
[107.12216187 428.68096924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[28 129]
[29 128]
[30 127]
[32 44]
[33 43]
[34 42]
[35 41]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[65 125]
[66 124]
[67 123]
[68 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
