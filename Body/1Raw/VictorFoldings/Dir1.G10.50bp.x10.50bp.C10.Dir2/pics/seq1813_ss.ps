%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAACUUACAGGGGGGGGGGCUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCUAGCCCCAxxxxxxxxxxGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCCCCCCCCCCCUACUUACA\
) } def
/len { sequence length } bind def

/coor [
[86.67459869 428.12808228]
[72.82865906 422.11206055]
[61.11999512 412.58264160]
[52.41746902 400.24697876]
[47.36686707 386.02044678]
[46.34297943 370.95877075]
[49.42177582 356.17962646]
[56.37479782 342.77969360]
[66.68608093 331.75335693]
[79.59046173 323.91885376]
[94.13034821 319.85754395]
[94.13034821 304.85754395]
[94.13034821 289.85754395]
[94.13034821 274.85754395]
[94.13034821 259.85754395]
[94.13034821 244.85752869]
[94.13034821 229.85752869]
[94.13034821 214.85752869]
[94.13034821 199.85752869]
[94.13034821 184.85752869]
[83.80937195 177.08102417]
[79.81140137 164.58740234]
[83.81752014 151.89176941]
[94.57258606 143.71949768]
[94.88464355 128.72273254]
[64.10209656 111.64133453]
[49.10939789 111.17329407]
[34.11670303 110.70525360]
[24.57401085 122.79836273]
[9.91168022 126.90560150]
[-4.19085455 121.65369415]
[-12.39842606 109.25314331]
[-27.39112282 108.78510284]
[-42.38381958 108.31705475]
[-57.37651443 107.84901428]
[-68.72203827 118.85150146]
[-84.52296448 118.52539825]
[-95.40487671 107.06418610]
[-94.91174316 91.26759338]
[-83.33612061 80.50746155]
[-67.54562378 81.16757965]
[-56.90847397 92.85632324]
[-41.91577530 93.32436371]
[-26.92308044 93.79240417]
[-11.93038368 94.26044464]
[-2.96530700 82.39598846]
[11.43735504 78.03395844]
[25.81494522 83.04776764]
[34.58474350 95.71255493]
[49.57743835 96.18059540]
[64.57013702 96.64864349]
[71.75264740 83.48005676]
[63.24155426 71.12848663]
[46.44862366 63.64668655]
[45.66198349 46.14294052]
[36.89577484 33.97110367]
[28.12956810 21.79926872]
[19.36335945 9.62743092]
[4.19588566 3.39206815]
[2.28059816 -12.89484978]
[15.58778095 -22.47873878]
[30.42814636 -15.50051403]
[31.53519630 0.86122411]
[40.30140305 13.03306103]
[49.06761169 25.20489693]
[57.83382034 37.37673569]
[69.75675201 39.64631271]
[77.15287781 49.77134323]
[75.59312439 62.61739349]
[84.10421753 74.96897125]
[91.52481842 76.05738831]
[89.97729492 61.13742828]
[82.90967560 47.90682602]
[86.54912567 33.35504150]
[99.01303864 25.00933647]
[113.85416412 27.18672752]
[123.39556122 38.76090622]
[122.70172119 53.74485016]
[112.13296509 64.38711548]
[106.36602783 78.23422241]
[113.78662872 79.32263947]
[125.48625183 69.93547821]
[137.18588257 60.54831696]
[148.88549805 51.16115570]
[160.58512878 41.77399445]
[172.28474426 32.38683319]
[183.98437500 22.99967194]
[169.69479370 18.43811226]
[164.15304565 4.49934864]
[171.40971375 -8.62851238]
[186.16075134 -11.35006714]
[197.62434387 -1.67607808]
[197.42182922 13.32195950]
[210.03295898 5.20041704]
[222.64408875 -2.92112494]
[223.38079834 -18.42070198]
[233.11347961 -30.50600433]
[248.09971619 -34.52998734]
[262.57699585 -28.94534874]
[270.97848511 -15.89949322]
[270.07366943 -0.40882018]
[260.21047974 11.57019043]
[245.18145752 15.43136501]
[230.76562500 9.69000340]
[218.15449524 17.81154442]
[205.54336548 25.93308830]
[193.37153625 34.69929504]
[181.67190552 44.08645630]
[169.97229004 53.47361755]
[158.27265930 62.86077881]
[146.57304382 72.24794006]
[134.87341309 81.63510132]
[123.17378998 91.02226257]
[126.11927032 105.73022461]
[140.53149414 109.88811493]
[154.94371033 114.04600525]
[169.35592651 118.20388794]
[184.03858948 111.73870850]
[198.18031311 119.31442261]
[200.93275452 135.11959839]
[190.18447876 147.02986145]
[174.18064880 145.90866089]
[165.19802856 132.61610413]
[150.78581238 128.45822144]
[136.37359619 124.30033112]
[121.96138763 120.14244080]
[109.88139343 129.03479004]
[109.56934357 144.03153992]
[121.89918518 156.39732361]
[121.51111603 173.51846313]
[109.13034821 184.85752869]
[109.13034821 199.85752869]
[109.13034821 214.85752869]
[109.13034821 229.85752869]
[109.13034821 244.85752869]
[109.13034821 259.85754395]
[109.13034821 274.85754395]
[109.13034821 289.85754395]
[109.13034821 304.85754395]
[109.13034821 319.85754395]
[123.67023468 323.91885376]
[136.57461548 331.75335693]
[146.88591003 342.77969360]
[153.83892822 356.17962646]
[156.91772461 370.95877075]
[155.89382935 386.02044678]
[150.84323120 400.24697876]
[142.14070129 412.58264160]
[130.43203735 422.11206055]
[116.58610535 428.12808228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 128]
[25 127]
[26 51]
[27 50]
[28 49]
[32 45]
[33 44]
[34 43]
[35 42]
[52 70]
[53 69]
[55 66]
[56 65]
[57 64]
[58 63]
[81 113]
[82 112]
[83 111]
[84 110]
[85 109]
[86 108]
[87 107]
[93 106]
[94 105]
[95 104]
[114 126]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
