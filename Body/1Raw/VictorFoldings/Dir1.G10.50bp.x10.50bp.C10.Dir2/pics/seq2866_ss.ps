%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAAACUACCAAACCGGGGGGGGGGUGCAUUAAAAAUUUCGGUUGGGGCGACCUCGGAGCAGAACCCAACCUCCGxxxxxxxxxxAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCCCCCCCCCCCUCAACUACCUAACC\
) } def
/len { sequence length } bind def

/coor [
[96.80267334 448.23120117]
[82.30353546 444.22937012]
[68.75205231 437.70272827]
[56.58384705 428.86108398]
[46.19007492 417.98867798]
[37.90486145 405.43499756]
[31.99453354 391.60357666]
[28.64908981 376.93905640]
[27.97606850 361.91287231]
[29.99710464 347.00799561]
[34.64723206 332.70358276]
[41.77696609 319.45947266]
[51.15711975 307.70138550]
[62.48615646 297.80731201]
[75.39989471 290.09530640]
[89.48320770 284.81326294]
[104.28338623 282.13098145]
[104.28338623 267.13098145]
[104.28338623 252.13098145]
[104.28338623 237.13098145]
[104.28338623 222.13098145]
[104.28338623 207.13098145]
[104.28338623 192.13098145]
[104.28338623 177.13098145]
[104.28338623 162.13098145]
[104.28338623 147.13098145]
[104.28338623 132.13098145]
[93.62958527 131.03862000]
[84.15377808 126.59268188]
[76.85139465 119.43645477]
[72.43049622 110.48719025]
[71.24456787 100.82059479]
[73.26856232 91.54229736]
[78.11911774 83.66143799]
[85.11478424 77.98101807]
[80.56208801 63.68860626]
[76.00939941 49.39619446]
[68.80336761 36.24046707]
[59.21085739 24.70861053]
[49.61834717 13.17675400]
[38.96076202 2.62138224]
[27.33700180 -6.85955524]
[15.71323967 -16.34049225]
[3.82027650 -25.48146820]
[-8.33194923 -34.27484131]
[-20.48417473 -43.06821442]
[-32.63639832 -51.86158752]
[-44.78862381 -60.65496063]
[-57.27069855 -68.97348785]
[-70.06407928 -76.80480194]
[-83.90851593 -69.99782562]
[-99.23271179 -71.77899933]
[-111.14676666 -81.57996368]
[-115.84894562 -96.27326202]
[-111.83880615 -111.17031860]
[-100.39595795 -121.51753998]
[-85.17179108 -124.01315308]
[-71.02426147 -117.86083221]
[-62.46781158 -105.02375031]
[-62.23276138 -89.59817505]
[-49.43938446 -81.76686096]
[-46.64603424 -82.32633972]
[-43.45804596 -81.78598022]
[-40.30335236 -79.98794556]
[-37.65956879 -76.93581390]
[-35.99525070 -72.80718994]
[-23.84302711 -64.01381683]
[-11.69080067 -55.22043991]
[0.46142444 -46.42706680]
[12.61365032 -37.63369370]
[16.17824554 -37.85124207]
[20.02337074 -36.32262421]
[23.31308556 -32.93620682]
[25.19417763 -27.96425438]
[36.81793976 -18.48331642]
[48.44169998 -9.00237942]
[45.10854721 -23.62736130]
[49.41225052 -37.99670792]
[60.23600769 -48.38161469]
[74.77108765 -52.08721924]
[89.24566650 -48.15193176]
[99.90364075 -37.59695053]
[103.97927856 -23.16126060]
[100.41497803 -8.59088898]
[90.13565826 2.33319283]
[75.80877686 6.77621317]
[61.15020370 3.58424306]
[70.74271393 15.11610031]
[80.33522797 26.64795685]
[87.83522797 26.64795685]
[95.33519745 13.65756130]
[102.83522797 26.64795685]
[110.33522797 26.64795685]
[119.92773438 15.11610031]
[129.52024841 3.58424306]
[139.11276245 -7.94761419]
[148.70527649 -19.47947121]
[150.94897461 -35.72440338]
[166.23924255 -41.65228271]
[178.84675598 -31.16501427]
[175.80198669 -15.05100346]
[160.23712158 -9.88696003]
[150.64462280 1.64489710]
[141.05210876 13.17675400]
[131.45959473 24.70861053]
[121.86708069 36.24046707]
[114.09905243 42.20770264]
[105.81014252 45.57628632]
[97.66810608 46.38962173]
[90.30181122 44.84350204]
[94.85449982 59.13591385]
[99.40719604 73.42832184]
[122.80695343 81.29434204]
[131.63916016 107.05054474]
[146.58277893 108.34988403]
[161.52639771 109.64921570]
[176.47001648 110.94855499]
[191.41363525 112.24788666]
[199.15800476 99.09542084]
[211.84686279 90.61274719]
[226.96081543 88.48411560]
[241.49899292 93.13215637]
[252.57481384 103.63401031]
[257.98916626 117.90452576]
[256.66705322 133.11027527]
[248.87094116 146.23214722]
[236.14877319 154.66477966]
[221.02656555 156.73388672]
[206.50680542 152.02861023]
[195.47242737 141.48323059]
[190.11430359 127.19150543]
[175.17068481 125.89217377]
[160.22706604 124.59283447]
[145.28344727 123.29350281]
[130.33982849 121.99416351]
[119.28338623 132.13098145]
[119.28338623 147.13098145]
[119.28338623 162.13098145]
[119.28338623 177.13098145]
[119.28338623 192.13098145]
[119.28338623 207.13098145]
[119.28338623 222.13098145]
[119.28338623 237.13098145]
[119.28338623 252.13098145]
[119.28338623 267.13098145]
[119.28338623 282.13098145]
[134.08355713 284.81326294]
[148.16687012 290.09530640]
[161.08061218 297.80731201]
[172.40965271 307.70138550]
[181.78979492 319.45947266]
[188.91954041 332.70358276]
[193.56965637 347.00799561]
[195.59069824 361.91287231]
[194.91767883 376.93905640]
[191.57223511 391.60357666]
[185.66191101 405.43499756]
[177.37669373 417.98867798]
[166.98292542 428.86108398]
[154.81471252 437.70272827]
[141.26322937 444.22937012]
[126.76409149 448.23120117]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 146]
[18 145]
[19 144]
[20 143]
[21 142]
[22 141]
[23 140]
[24 139]
[25 138]
[26 137]
[27 136]
[35 112]
[36 111]
[37 110]
[38 89]
[39 88]
[40 87]
[41 76]
[42 75]
[43 74]
[44 70]
[45 69]
[46 68]
[47 67]
[48 66]
[49 61]
[50 60]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
[114 135]
[115 134]
[116 133]
[117 132]
[118 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
