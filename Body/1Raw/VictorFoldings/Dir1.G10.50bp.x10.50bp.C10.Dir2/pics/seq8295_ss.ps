%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUCAACAACCGGGGGGGGGGGACUAAUCACCACCCAACAAUGACUAAUCAAACUAACCUCAAAACAAAUGxxxxxxxxxxCACCCACAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUUUUUAACCAAACCCCCCCCCCUCAACAACAACC\
) } def
/len { sequence length } bind def

/coor [
[91.17161560 166.25952148]
[76.64993286 162.63417053]
[63.29893494 155.86856079]
[51.78799438 146.30191040]
[42.69422913 134.41384888]
[36.47356796 120.80039978]
[33.43789291 106.14409637]
[33.73939896 91.17974854]
[37.36296844 76.65762329]
[44.12693405 63.30579376]
[53.69217300 51.79367828]
[65.57911682 42.69845581]
[79.19180298 36.47612381]
[93.84773254 33.43864822]
[94.15173340 18.44172668]
[94.45574188 3.44480824]
[94.75974274 -11.55211067]
[95.06375122 -26.54903030]
[95.36775208 -41.54594803]
[95.67176056 -56.54286957]
[95.97576141 -71.53978729]
[96.27976990 -86.53670502]
[96.58377075 -101.53362274]
[81.62403107 -102.68579102]
[66.75344086 -104.68246460]
[52.01963043 -107.51724243]
[37.46979523 -111.18105316]
[23.15054321 -115.66214752]
[9.10774517 -120.94618988]
[-4.61361551 -127.01623535]
[-17.96958542 -133.85284424]
[-30.91737938 -141.43412781]
[-43.41552353 -149.73579407]
[-55.42398453 -158.73124695]
[-66.90428925 -168.39166260]
[-77.81967163 -178.68611145]
[-88.13515472 -189.58161926]
[-97.81770325 -201.04327393]
[-106.83629608 -213.03434753]
[-115.16204834 -225.51646423]
[-122.76828766 -238.44961548]
[-129.63064575 -251.79237366]
[-135.72715759 -265.50198364]
[-141.03826904 -279.53457642]
[-145.54698181 -293.84515381]
[-149.23884583 -308.38790894]
[-152.10203552 -323.11621094]
[-154.12738037 -337.98294067]
[-155.30841064 -352.94042969]
[-155.64131165 -367.94076538]
[-155.12503052 -382.93591309]
[-153.76123047 -397.87783813]
[-151.55427551 -412.71868896]
[-148.51123047 -427.41088867]
[-144.64183044 -441.90740967]
[-139.95849609 -456.16180420]
[-134.47622681 -470.12838745]
[-128.21255493 -483.76245117]
[-121.18758392 -497.02032471]
[-113.42378998 -509.85952759]
[-104.94605255 -522.23889160]
[-95.78152466 -534.11883545]
[-85.95957184 -545.46124268]
[-75.51165009 -556.22979736]
[-64.47122192 -566.39001465]
[-52.87366867 -575.90936279]
[-40.75612640 -584.75732422]
[-28.15742111 -592.90557861]
[-15.11790466 -600.32800293]
[-1.67934859 -607.00079346]
[12.11519909 -612.90264893]
[26.22154999 -618.01458740]
[40.59451675 -622.32031250]
[55.18806076 -625.80596924]
[69.95542908 -628.46038818]
[84.84931946 -630.27508545]
[99.82202911 -631.24426270]
[114.82558441 -631.36480713]
[129.81192017 -630.63635254]
[144.73304749 -629.06115723]
[159.54116821 -626.64434814]
[174.18882751 -623.39367676]
[188.62913513 -619.31945801]
[202.81579590 -614.43481445]
[216.70339966 -608.75543213]
[230.24743652 -602.29937744]
[243.40452576 -595.08746338]
[256.13253784 -587.14270020]
[268.39068604 -578.49060059]
[280.13970947 -569.15881348]
[291.34194946 -559.17730713]
[301.96154785 -548.57800293]
[311.96450806 -537.39489746]
[321.31872559 -525.66375732]
[329.99429321 -513.42218018]
[337.96337891 -500.70938110]
[345.20046997 -487.56613159]
[351.68240356 -474.03445435]
[357.38839722 -460.15774536]
[362.30014038 -445.98046875]
[366.40197754 -431.54797363]
[369.68069458 -416.90655518]
[372.12585449 -402.10311890]
[373.72955322 -387.18502808]
[374.48669434 -372.20010376]
[374.39486694 -357.19635010]
[373.45434570 -342.22180176]
[371.66812134 -327.32446289]
[369.04196167 -312.55203247]
[365.58425903 -297.95187378]
[361.30606079 -283.57067871]
[356.22109985 -269.45455933]
[350.34567261 -255.64875793]
[343.69860840 -242.19746399]
[336.30114746 -229.14376831]
[328.17703247 -216.52947998]
[319.35229492 -204.39503479]
[309.85513306 -192.77928162]
[299.71606445 -181.71943665]
[288.96749878 -171.25093079]
[277.64392090 -161.40728760]
[265.78152466 -152.22004700]
[253.41839600 -143.71862793]
[240.59408569 -135.93028259]
[227.34970093 -128.87995911]
[213.72764587 -122.59021759]
[199.77156067 -117.08122253]
[185.52615356 -112.37061310]
[171.03707886 -108.47349548]
[156.35070801 -105.40233612]
[141.51411438 -103.16698456]
[126.57482910 -101.77458954]
[111.58068848 -101.22962189]
[111.27668762 -86.23270416]
[110.97267914 -71.23578644]
[110.66867828 -56.23886490]
[110.36466980 -41.24194336]
[110.06066895 -26.24502563]
[109.75666046 -11.24810696]
[109.45265961 3.74881244]
[109.14865875 18.74573135]
[108.84465027 33.74264908]
[123.36544800 37.37157059]
[136.71478271 44.14045334]
[148.22337341 53.70993042]
[157.31422424 65.60022736]
[163.53153992 79.21519470]
[166.56361389 93.87224579]
[166.25843811 108.83651733]
[162.63130188 123.35775757]
[155.86405945 136.70793152]
[146.29598999 148.21769714]
[134.40681458 157.30999756]
[120.79260254 163.52899170]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
