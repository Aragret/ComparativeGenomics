%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCACCAGUGGGGGGGGGGCAAAGCGAACUACUAUACUCAAUUGAUCCAAUAACUUGACCAACGGAACAxxxxxxxxxxCUGGGUCUCUAUUUUACCCUCCUACAAGCCUCAGAGUACUUCGAGUCUCCCCCCCCCCCCCUUCACCAUU\
) } def
/len { sequence length } bind def

/coor [
[91.60394287 595.10571289]
[79.04571533 586.75457764]
[68.95949554 575.54211426]
[61.97930145 562.17321777]
[58.54391861 547.48822021]
[58.86929321 532.41021729]
[62.93497849 517.88714600]
[70.48539734 504.83178711]
[81.04592896 494.06488037]
[93.95272064 486.26324463]
[108.39444733 481.91729736]
[107.77046967 466.93029785]
[107.14649200 451.94326782]
[106.52251434 436.95623779]
[105.89853668 421.96923828]
[105.27456665 406.98220825]
[104.65058899 391.99520874]
[104.02661133 377.00817871]
[103.40263367 362.02117920]
[102.77865601 347.03414917]
[89.04196930 341.22305298]
[79.14988708 329.97778320]
[75.10466003 315.49340820]
[77.76023865 300.62841797]
[86.64262390 288.34060669]
[100.03345490 281.09857178]
[99.40947723 266.11154175]
[98.78549957 251.12454224]
[98.16152191 236.13751221]
[89.90148926 223.74311829]
[97.05802155 209.63304138]
[96.43404388 194.64602661]
[95.81006622 179.65901184]
[95.18608856 164.67198181]
[86.92604828 152.27758789]
[94.08258820 138.16751099]
[84.19600677 135.24214172]
[75.43560791 129.80545044]
[68.42563629 122.24485779]
[63.66561890 113.09912109]
[61.49475098 103.01995087]
[62.06772995 92.72558594]
[48.16517258 87.09363556]
[34.26261520 81.46167755]
[20.36005974 75.82971954]
[3.40958357 75.48667145]
[-0.95313293 59.10366058]
[13.58190346 50.37617111]
[25.99201775 61.92716217]
[39.89457321 67.55912018]
[53.79713058 73.19107819]
[67.69968414 78.82303619]
[76.86497498 69.07193756]
[88.80760956 63.03373718]
[102.09387970 61.43330383]
[105.80004120 46.89836884]
[109.50620270 32.36343384]
[113.21236420 17.82849693]
[105.95138550 11.17639446]
[101.67108917 2.37249279]
[100.93292236 -7.33053827]
[103.79768372 -16.56946373]
[109.82295990 -24.06200790]
[118.13089752 -28.78480721]
[127.53586578 -30.11309814]
[132.43742371 -44.28965759]
[137.33897400 -58.46621704]
[125.50444794 -49.24970627]
[111.16915131 -44.83390427]
[96.19989777 -45.79386139]
[82.54606628 -52.00456619]
[71.98571777 -62.65722656]
[65.89408875 -76.36459351]
[65.06446075 -91.34163666]
[69.60485840 -105.63795471]
[78.92401886 -117.39181519]
[91.80835724 -125.07256317]
[106.57999420 -127.67997742]
[121.31530762 -124.87451172]
[134.09538269 -117.02149200]
[143.25592041 -105.14359283]
[147.60400391 -90.78761292]
[146.57382202 -75.82478333]
[155.59135437 -87.81161499]
[164.60888672 -99.79844666]
[173.62641907 -111.78527832]
[168.17298889 -126.21662140]
[171.40979004 -141.30061340]
[182.30397034 -152.22399902]
[197.37922668 -155.50117493]
[211.82511902 -150.08639526]
[221.03201294 -137.70750427]
[222.06199646 -122.31456757]
[214.58644104 -108.81940460]
[200.99073792 -101.52827454]
[185.61325073 -102.76774597]
[176.59571838 -90.78091431]
[167.57818604 -78.79408264]
[158.56066895 -66.80725098]
[151.51553345 -53.56466293]
[146.61398315 -39.38810730]
[141.71243286 -25.21154785]
[152.22245789 -7.74512768]
[146.47741699 12.11556530]
[127.74729919 21.53465843]
[124.04113770 36.06959534]
[120.33497620 50.60453033]
[116.62881470 65.13946533]
[131.12181091 77.12626648]
[138.23518372 94.53690338]
[136.28221130 113.24294281]
[125.72598267 128.80882263]
[109.06960297 137.54353333]
[117.37427521 151.00990295]
[110.17310333 164.04800415]
[110.79708099 179.03503418]
[111.42105865 194.02204895]
[112.04503632 209.00906372]
[120.34970856 222.47543335]
[113.14853668 235.51353455]
[113.77251434 250.50056458]
[114.39649200 265.48757935]
[115.02046967 280.47457886]
[128.96694946 286.57843018]
[138.84002686 298.08538818]
[142.72206116 312.67819214]
[139.89485168 327.44869995]
[130.97177124 339.47732544]
[117.76567078 346.41018677]
[118.38964844 361.39718628]
[119.01362610 376.38421631]
[119.63760376 391.37121582]
[120.26158142 406.35824585]
[120.88555908 421.34524536]
[121.50953674 436.33227539]
[122.13351440 451.31927490]
[122.75749207 466.30630493]
[123.38146973 481.29333496]
[138.13447571 484.42376709]
[151.64511108 491.12551880]
[163.06408691 500.97729492]
[171.67359924 513.35986328]
[176.93244934 527.49475098]
[178.51005554 542.49346924]
[176.30725098 557.41320801]
[170.46249390 571.31610107]
[161.34321594 583.32812500]
[149.52264404 592.69427490]
[135.74383545 598.82580566]
[120.87294006 601.33715820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[26 123]
[27 122]
[28 121]
[29 120]
[31 118]
[32 117]
[33 116]
[34 115]
[36 113]
[42 52]
[43 51]
[44 50]
[45 49]
[55 108]
[56 107]
[57 106]
[58 105]
[65 102]
[66 101]
[67 100]
[83 99]
[84 98]
[85 97]
[86 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
