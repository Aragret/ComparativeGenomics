%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCGUAAAGGGGGGGGGGGAGUGUUUUAGAUCACCCCCUCCCCAAUAAAGCUAAAACUCACCUGAGUUxxxxxxxxxxAGACACACGAGCAUAUUUCACCUCCGCUACCAUAAUCAUCGCUAUCCCCACCCCCCCCCCCCGGCGUCAA\
) } def
/len { sequence length } bind def

/coor [
[68.71500397 409.88153076]
[56.83073044 400.60641479]
[47.51202393 388.75631714]
[41.30065918 375.02014160]
[38.55775452 360.19653320]
[39.44278717 345.14724731]
[43.90429306 330.74731445]
[51.68289185 317.83389282]
[62.32634354 307.15771484]
[75.21585083 299.33953857]
[89.60203552 294.83386230]
[88.66641235 279.86306763]
[87.73078156 264.89227295]
[86.79515076 249.92149353]
[85.85952759 234.95069885]
[84.92389679 219.97990417]
[83.98826599 205.00912476]
[82.89695740 190.04887390]
[81.65008545 175.10078430]
[80.40320587 160.15269470]
[79.15633392 145.20460510]
[77.90946198 130.25651550]
[67.81080627 119.16520691]
[52.86468887 124.35404968]
[41.69709396 114.49838257]
[26.93103981 111.85951996]
[12.16498375 109.22065735]
[-2.60107183 106.58179474]
[-17.36712646 103.94293213]
[-32.13318253 101.30406189]
[-46.89923859 98.66519928]
[-61.84535980 103.85404205]
[-73.01295471 93.99837494]
[-80.35382080 107.24188232]
[-91.59877014 117.38238525]
[-105.52803802 123.31992340]
[-120.63066864 124.41043854]
[-135.26844788 120.53563690]
[-147.85357666 112.11583710]
[-157.02091980 100.06433868]
[-161.77607727 85.68841553]
[-161.60322571 70.54744720]
[-156.52113342 56.28382111]
[-147.08106995 44.44474792]
[-134.30699158 36.31443405]
[-119.58457184 32.77480316]
[-104.51077271 34.20980835]
[-90.72068787 40.46378326]
[-79.71015930 50.85835266]
[-72.67353821 64.26598358]
[-70.37408447 79.23232269]
[-56.48413467 73.85472870]
[-44.26037216 83.89914703]
[-29.49431801 86.53800964]
[-14.72826290 89.17687225]
[0.03779253 91.81573486]
[14.80384827 94.45460510]
[29.56990433 97.09346771]
[44.33596039 99.73233032]
[58.22591019 94.35473633]
[70.44967651 104.39915466]
[70.70370483 92.01606750]
[76.00743103 80.60173798]
[85.60917664 72.15691376]
[97.98983765 68.23260498]
[98.30189514 53.23584747]
[90.85336304 39.27769852]
[98.85375977 26.71414566]
[99.16581726 11.71739197]
[85.36747742 5.27335691]
[75.38798523 -6.23010969]
[70.95636749 -20.79996300]
[72.84041595 -35.91188812]
[80.71370697 -48.94765091]
[93.21215057 -57.64872742]
[108.17031860 -60.50760651]
[122.99661255 -57.02896500]
[135.12228394 -47.81550217]
[142.44650269 -34.46350479]
[143.70028687 -19.28628922]
[138.66641235 -4.91339588]
[128.21704102 6.16498137]
[114.16257477 12.02944851]
[113.85051727 27.02620125]
[121.32136536 39.91168594]
[113.29864502 53.54790497]
[112.98658752 68.54466248]
[125.24895477 77.18377686]
[139.26567078 71.84226227]
[153.28237915 66.50074768]
[166.59753418 59.59375000]
[179.03698730 51.21160889]
[176.35789490 36.22019958]
[180.01428223 21.43673706]
[189.37265015 9.42254829]
[202.81161499 2.25916243]
[218.00279236 1.18767977]
[232.31420898 6.39374113]
[243.26634216 16.97536469]
[248.96165466 31.09922028]
[248.41340637 46.31826401]
[241.71658325 59.99570465]
[230.03144836 69.76184845]
[215.38252258 73.92463684]
[200.30781555 71.76286316]
[187.41912842 63.65104675]
[174.97969055 72.03318787]
[189.95950317 72.81114197]
[202.92698669 80.35063934]
[211.01388550 92.98401642]
[212.43142700 107.91688538]
[206.86605835 121.84623718]
[195.54879761 131.69102478]
[180.98292542 135.27366638]
[166.39027405 131.80172729]
[154.99859619 122.04315186]
[149.32763672 108.15646362]
[150.63174438 93.21326447]
[158.62390137 80.51746368]
[144.60717773 85.85897827]
[130.59046936 91.20048523]
[130.42152405 107.54084778]
[122.23457336 121.39064026]
[108.44007874 129.16815186]
[92.85754395 129.00964355]
[94.10442352 143.95773315]
[95.35129547 158.90582275]
[96.59816742 173.85391235]
[97.84504700 188.80200195]
[101.69853973 197.15678406]
[98.95906067 204.07348633]
[99.89468384 219.04428101]
[100.83031464 234.01507568]
[101.76594543 248.98587036]
[102.70157623 263.95666504]
[103.63719940 278.92745972]
[104.57283020 293.89825439]
[119.40806580 296.57766724]
[133.17070007 302.73016357]
[145.06059265 311.99804688]
[154.38647461 323.84252930]
[160.60617065 337.57492065]
[163.35806274 352.39688110]
[162.48216248 367.44668579]
[158.02937317 381.84933472]
[150.25860596 394.76748657]
[139.62164307 405.45007324]
[126.73686981 413.27609253]
[112.35341644 417.79046631]
[97.30751038 418.73080444]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 129]
[19 128]
[20 127]
[21 126]
[22 125]
[23 61]
[25 59]
[26 58]
[27 57]
[28 56]
[29 55]
[30 54]
[31 53]
[33 51]
[65 87]
[66 86]
[68 84]
[69 83]
[88 121]
[89 120]
[90 119]
[91 107]
[92 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
