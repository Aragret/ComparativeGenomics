%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACAUACUCGGGGGGGGGGGGAUUCUACCCUAGCAUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUxxxxxxxxxxUACUUCACAACAAUCCUAAUCCUAAUACCAACUAUCUCCCUAAUUGAAAACCCCCCCCCCCAAAAUACUC\
) } def
/len { sequence length } bind def

/coor [
[88.79862213 369.04061890]
[73.92771912 366.52920532]
[60.14891052 360.39770508]
[48.32833862 351.03155518]
[39.20905685 339.01950073]
[33.36431122 325.11663818]
[31.16150665 310.19689941]
[32.73911285 295.19818115]
[37.99795914 281.06326294]
[46.60747147 268.68072510]
[58.02645111 258.82894897]
[71.53708649 252.12719727]
[86.29009247 248.99674988]
[86.91407013 234.00973511]
[87.53804779 219.02272034]
[88.16202545 204.03570557]
[88.78600311 189.04869080]
[89.40998077 174.06167603]
[90.03395844 159.07466125]
[90.65793610 144.08764648]
[91.28191376 129.10061646]
[91.90589142 114.11360931]
[83.73806000 99.49233246]
[92.80198669 85.40900421]
[93.11404419 70.41224670]
[93.42610168 55.41549683]
[78.47287750 54.17144394]
[63.62592697 52.00016022]
[48.94268036 48.91004181]
[34.47994995 44.91304779]
[20.29369164 40.02463913]
[6.43878412 34.26372910]
[-7.03116655 27.65260696]
[-20.06404877 20.21684837]
[-32.60943985 11.98522091]
[-44.61880112 2.98957229]
[-56.04567719 -6.73529530]
[-66.84585571 -17.15175819]
[-76.97754669 -28.21951675]
[-86.40156555 -39.89575195]
[-95.08144379 -52.13528824]
[-102.98359680 -64.89077759]
[-110.07746124 -78.11286163]
[-116.33558655 -91.75039673]
[-121.73376465 -105.75061798]
[-126.25110626 -120.05936432]
[-129.87013245 -134.62127686]
[-132.57685852 -149.38000488]
[-134.36079407 -164.27845764]
[-135.21504211 -179.25900269]
[-135.13630676 -194.26368713]
[-134.12487793 -209.23443604]
[-132.18467712 -224.11335754]
[-129.32321167 -238.84286499]
[-125.55154419 -253.36599731]
[-120.88427734 -267.62652588]
[-115.33946228 -281.56933594]
[-108.93855286 -295.14044189]
[-101.70631409 -308.28735352]
[-93.67072296 -320.95919800]
[-84.86286926 -333.10696411]
[-75.31682587 -344.68365479]
[-65.06953430 -355.64447021]
[-54.16062546 -365.94699097]
[-42.63231659 -375.55139160]
[-30.52920341 -384.42053223]
[-17.89810944 -392.52001953]
[-4.78790665 -399.81860352]
[8.75068760 -406.28799438]
[22.66529274 -411.90316772]
[36.90207672 -416.64242554]
[51.40596008 -420.48739624]
[66.12082672 -423.42324829]
[80.98975372 -425.43859863]
[95.95520782 -426.52563477]
[110.95929718 -426.68017578]
[125.94396210 -425.90161133]
[140.85124207 -424.19296265]
[155.62345886 -421.56085205]
[170.20347595 -418.01544189]
[184.53485107 -413.57043457]
[198.56216431 -408.24304199]
[212.23114014 -402.05389404]
[225.48890686 -395.02694702]
[238.28414917 -387.18933105]
[250.56738281 -378.57138062]
[262.29107666 -369.20648193]
[273.40988159 -359.13082886]
[283.88076782 -348.38342285]
[293.66323853 -337.00582886]
[302.71945190 -325.04205322]
[311.01434326 -312.53842163]
[318.51586914 -299.54324341]
[325.19494629 -286.10687256]
[331.02578735 -272.28125000]
[335.98577881 -258.11987305]
[340.05578613 -243.67752075]
[343.22006226 -229.01007080]
[345.46630859 -214.17427063]
[346.78588867 -199.22752380]
[347.17370605 -184.22766113]
[346.62820435 -169.23269653]
[345.15151978 -154.30064392]
[342.74935913 -139.48930359]
[339.43106079 -124.85593414]
[335.20941162 -110.45717621]
[330.10073853 -96.34873199]
[324.12484741 -82.58518982]
[317.30484009 -69.21978760]
[309.66711426 -56.30423355]
[301.24118042 -43.88850784]
[292.05966187 -32.02063370]
[282.15811157 -20.74653053]
[271.57476807 -10.10981655]
[260.35064697 -0.15164134]
[248.52911377 9.08946800]
[236.15592957 17.57775879]
[223.27897644 25.28039169]
[209.94805908 32.16756439]
[196.21475220 38.21263504]
[182.13220215 43.39221573]
[167.75486755 47.68626785]
[153.13839722 51.07817459]
[138.33930969 53.55481339]
[123.41488647 55.10660934]
[108.42285919 55.72755432]
[108.11080170 70.72430420]
[107.79874420 85.72106171]
[115.35920715 94.63314056]
[114.99454498 106.31444550]
[106.89290619 114.73758698]
[106.26892853 129.72459412]
[105.64495087 144.71160889]
[105.02097321 159.69863892]
[104.39699554 174.68565369]
[103.77301788 189.67266846]
[103.14904022 204.65968323]
[102.52506256 219.64669800]
[101.90108490 234.63371277]
[101.27710724 249.62072754]
[115.71883392 253.96667480]
[128.62562561 261.76831055]
[139.18615723 272.53521729]
[146.73658752 285.59054565]
[150.80226135 300.11367798]
[151.12763977 315.19161987]
[147.69226074 329.87661743]
[140.71206665 343.24554443]
[130.62583923 354.45797729]
[118.06761932 362.80914307]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[24 128]
[25 127]
[26 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
