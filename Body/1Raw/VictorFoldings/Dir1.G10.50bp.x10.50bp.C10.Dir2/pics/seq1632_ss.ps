%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACAUUUUCGGGGGGGGGGUACCCCAGAAAACUACGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGxxxxxxxxxxAUUCUAAUUCUACUGACUAUCCUAGAAAUCGCUGUCGCCUUAAUCCAAGCCCCCCCCCCCCUACGUUUUC\
) } def
/len { sequence length } bind def

/coor [
[95.33213806 390.89138794]
[82.11194611 383.61892700]
[71.22513580 373.17190552]
[63.41400909 360.26266479]
[59.21112823 345.77136230]
[58.90305328 330.68600464]
[62.51079559 316.03518677]
[69.78836823 302.81781006]
[80.23957825 291.93502808]
[93.15184021 284.12887573]
[107.64477539 279.93161011]
[107.33271790 264.93484497]
[107.02066040 249.93809509]
[106.70860291 234.94134521]
[106.39655304 219.94458008]
[106.08449554 204.94783020]
[105.77243805 189.95108032]
[105.46038055 174.95433044]
[105.14832306 159.95756531]
[104.83626556 144.96081543]
[90.52592468 143.51487732]
[77.61019135 137.70118713]
[67.36199951 128.24470520]
[60.74266052 116.22114563]
[58.31249237 102.93566895]
[60.18547440 89.78173828]
[66.03141785 78.09500885]
[55.15258789 67.76780701]
[44.27376556 57.44060135]
[33.39493942 47.11339569]
[21.22310257 38.34719086]
[5.40574980 38.69637680]
[-2.19636106 25.88789558]
[-15.43894672 18.84276009]
[-31.25629997 19.19194603]
[-38.85840988 6.38346481]
[-52.10099411 -0.66166991]
[-65.34358215 -7.70680475]
[-70.68978119 -7.51264334]
[-75.10846710 -9.25265598]
[-78.00961304 -12.23343277]
[-79.17218018 -15.62694359]
[-91.94953918 -23.48436928]
[-104.72689819 -31.34179497]
[-117.50425720 -39.19921875]
[-130.28161621 -47.05664825]
[-143.05897522 -54.91407394]
[-157.83804321 -49.80400085]
[-172.42562866 -55.43752289]
[-179.93389893 -69.15466309]
[-176.81768799 -84.47859955]
[-164.54837036 -94.17385101]
[-148.91914368 -93.66260529]
[-137.30964661 -83.18626404]
[-135.20153809 -67.69142914]
[-122.42418671 -59.83400345]
[-109.64682770 -51.97657776]
[-96.86946869 -44.11915207]
[-84.09210968 -36.26172638]
[-71.31475830 -28.40430069]
[-58.29844666 -20.94939041]
[-45.05586243 -13.90425587]
[-31.81327438 -6.85912085]
[-16.94312096 -7.71222162]
[-8.39381218 5.60017443]
[4.84877396 12.64530945]
[19.71892738 11.79220867]
[28.26823807 25.10460472]
[21.35899353 11.79061413]
[20.34940529 -3.17537212]
[25.40789795 -17.29669189]
[35.69059753 -28.21759033]
[49.48212433 -34.11621857]
[64.48173523 -34.00855255]
[78.18716431 -27.91255569]
[88.31204224 -16.84517288]
[93.16729736 -2.65269375]
[91.94297791 12.29725742]
[84.84332275 25.51069260]
[73.05271149 34.78331757]
[58.53808975 38.56824493]
[43.72214508 36.23457336]
[54.60097122 46.56177521]
[65.47979736 56.88898087]
[76.35861969 67.21618652]
[93.01924896 60.18841553]
[111.07699585 61.12850189]
[126.91780853 69.84830475]
[138.81018066 60.70656586]
[150.70256042 51.56483459]
[162.59494019 42.42309952]
[174.48731995 33.28136444]
[172.38987732 18.06636429]
[178.19578552 3.84711838]
[190.34330750 -5.55146503]
[205.56480408 -7.60121489]
[219.76577759 -1.75075912]
[229.12625122 10.42615986]
[231.12828064 25.65401077]
[225.23333740 39.83657837]
[213.02713013 49.15882492]
[197.79307556 51.11311340]
[183.62905884 45.17374420]
[171.73667908 54.31547928]
[159.84429932 63.45721436]
[147.95191956 72.59894562]
[136.05953979 81.74068451]
[137.66571045 85.33753967]
[138.91410828 89.07365417]
[139.79290771 92.91355896]
[154.79209900 93.06959534]
[168.80526733 84.55120087]
[183.05708313 92.66402435]
[182.88648987 109.06228638]
[168.46899414 116.87686157]
[154.63606262 108.06878662]
[139.63687134 107.91275024]
[139.99340820 115.29846954]
[138.93231201 123.00302887]
[152.45651245 129.49119568]
[165.98069763 135.97935486]
[181.53158569 132.03607178]
[194.22276306 141.85000610]
[194.31864929 157.89277649]
[181.74568176 167.85772705]
[166.14877319 164.10060120]
[159.49252319 149.50355530]
[145.96833801 143.01538086]
[132.44415283 136.52722168]
[119.83302307 144.64875793]
[120.14508057 159.64550781]
[120.45713806 174.64227295]
[120.76918793 189.63902283]
[121.08124542 204.63577271]
[121.39330292 219.63252258]
[121.70536041 234.62928772]
[122.01741791 249.62603760]
[122.32947540 264.62280273]
[122.64152527 279.61953735]
[137.29652405 283.21029663]
[150.52232361 290.47256470]
[161.41719055 300.91116333]
[169.23829651 313.81436157]
[173.45236206 328.30242920]
[173.77207947 343.38754272]
[170.17565918 358.04113770]
[162.90829468 371.26416016]
[152.46549988 382.15499878]
[139.55926514 389.97109985]
[125.06957245 394.17956543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[27 85]
[28 84]
[29 83]
[30 82]
[31 68]
[33 66]
[34 65]
[36 63]
[37 62]
[38 61]
[42 60]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
[88 107]
[89 106]
[90 105]
[91 104]
[92 103]
[110 117]
[111 116]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
