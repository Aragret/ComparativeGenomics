%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUCACCACCGGGGGGGGGGUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUAxxxxxxxxxxUCACCCUAGCCAUCAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUUCCCCCCCCCCAACCUCUCCACC\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 393.48303223]
[70.87159729 388.32803345]
[58.28185654 380.04580688]
[47.94191742 369.08303833]
[40.40940475 356.03091431]
[36.09054184 341.59332275]
[35.21823120 326.54885864]
[37.83952332 311.70886230]
[43.81304932 297.87362671]
[52.81666565 285.78927612]
[64.36482239 276.10751343]
[77.83473969 269.35043335]
[92.50000000 265.88244629]
[92.50000000 250.88244629]
[92.50000000 235.88244629]
[92.50000000 220.88244629]
[92.50000000 205.88244629]
[92.50000000 190.88244629]
[92.50000000 175.88244629]
[92.50000000 160.88244629]
[92.50000000 145.88244629]
[92.50000000 130.88244629]
[81.36278534 125.74160004]
[73.00214386 116.76577759]
[68.66362762 105.29219818]
[53.70135117 104.22900391]
[38.73907852 103.16580963]
[23.77680588 102.10260773]
[8.81453228 101.03941345]
[-7.51801014 109.48501587]
[-21.68030357 99.16429138]
[-36.66104889 98.40454865]
[-42.82688904 112.27346802]
[-53.58914948 122.97571564]
[-67.49233246 129.06390381]
[-82.65613556 129.71466064]
[-97.02978516 124.83996582]
[-108.66935730 115.09909058]
[-116.00070953 101.80940247]
[-118.03231812 86.76822662]
[-114.48944092 72.00975800]
[-105.85121155 59.52995682]
[-93.28588867 51.01661301]
[-78.49282074 47.62108994]
[-63.47265244 49.80260086]
[-50.25673676 57.26611710]
[-40.63241959 69.00225830]
[-35.90131378 83.42380524]
[-20.92056465 84.18354034]
[-11.70289516 76.29349518]
[0.82011122 76.84056091]
[9.87772751 86.07714081]
[24.84000015 87.14033508]
[39.80227280 88.20353699]
[54.76454544 89.26673126]
[69.72682190 90.32992554]
[85.71579742 71.61096191]
[110.27616119 69.92714691]
[118.33921051 57.27854538]
[126.27367401 44.54888153]
[134.07872009 31.73946571]
[139.00215149 17.57048988]
[140.82180786 2.68127084]
[142.64146423 -12.20794868]
[144.46112061 -27.09716797]
[146.28077698 -41.98638535]
[140.27473450 -56.62325668]
[149.49884033 -68.31791687]
[151.31849670 -83.20713806]
[153.13815308 -98.09635162]
[154.95780945 -112.98557281]
[156.77746582 -127.87479401]
[143.25616455 -134.72679138]
[132.89607239 -145.79225159]
[126.94824219 -159.73497009]
[126.13089752 -174.87127686]
[130.54273987 -189.37339783]
[139.65100098 -201.49012756]
[152.35583496 -209.75831604]
[167.12306213 -213.17955017]
[182.16946411 -211.34068298]
[195.67813110 -204.46376038]
[206.01780701 -193.37922668]
[211.93992615 -179.42558289]
[212.72938538 -164.28779602]
[208.29083252 -149.79383850]
[199.16024780 -137.69390869]
[186.44020081 -129.44914246]
[171.66668701 -126.05513763]
[169.84703064 -111.16591644]
[168.02737427 -96.27669525]
[166.20771790 -81.38747406]
[164.38806152 -66.49826050]
[170.52426147 -52.92636490]
[161.16999817 -40.16672897]
[159.35034180 -25.27750969]
[157.53068542 -10.38829041]
[155.71102905 4.50092840]
[153.89137268 19.39014816]
[163.08668518 7.53915024]
[175.09381104 -1.45135272]
[189.05415344 -6.93849373]
[203.96949768 -8.52991486]
[218.77330017 -6.11182070]
[232.40704346 0.14288220]
[243.89581299 9.78695107]
[252.41812134 22.13078499]
[257.36456299 36.29173660]
[258.38146973 51.25722885]
[255.39611816 65.95714569]
[248.62196350 79.34037781]
[238.54339600 90.44994354]
[225.88110352 98.49146271]
[211.54046631 102.88992310]
[196.54695129 103.33081055]
[181.97265625 99.78260040]
[168.85971069 92.49900055]
[158.14576721 82.00083923]
[150.59692383 69.03878021]
[146.75296021 54.53967667]
[146.88813782 39.54451370]
[139.08309937 52.35393524]
[138.28363037 59.74585342]
[130.98782349 65.34159851]
[122.92475891 77.99020386]
[127.84629059 84.68466187]
[130.86437988 92.42599487]
[131.77273560 100.68505859]
[130.50924683 108.89729309]
[127.16028595 116.50135040]
[121.95478058 122.97745514]
[115.24855042 127.88292694]
[107.50000000 130.88244629]
[107.50000000 145.88244629]
[107.50000000 160.88244629]
[107.50000000 175.88244629]
[107.50000000 190.88244629]
[107.50000000 205.88244629]
[107.50000000 220.88244629]
[107.50000000 235.88244629]
[107.50000000 250.88244629]
[107.50000000 265.88244629]
[122.16526031 269.35043335]
[135.63517761 276.10751343]
[147.18333435 285.78927612]
[156.18695068 297.87362671]
[162.16047668 311.70886230]
[164.78176880 326.54885864]
[163.90945435 341.59332275]
[159.59059143 356.03091431]
[152.05809021 369.08303833]
[141.71813965 380.04580688]
[129.12840271 388.32803345]
[114.96779633 393.48303223]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[31 49]
[32 48]
[58 125]
[59 124]
[60 122]
[61 121]
[62 99]
[63 98]
[64 97]
[65 96]
[66 95]
[68 93]
[69 92]
[70 91]
[71 90]
[72 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
