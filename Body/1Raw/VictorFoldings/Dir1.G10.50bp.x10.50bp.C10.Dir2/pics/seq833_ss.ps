%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCACAGUGGGGGGGGGGUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCxxxxxxxxxxACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCCCCCCCCCCCACAAU\
) } def
/len { sequence length } bind def

/coor [
[102.80534363 378.82208252]
[88.95940399 372.80606079]
[77.25074005 363.27664185]
[68.54821777 350.94097900]
[63.49761581 336.71444702]
[62.47372437 321.65277100]
[65.55252838 306.87362671]
[72.50554657 293.47369385]
[82.81683350 282.44735718]
[95.72121429 274.61285400]
[110.26110077 270.55154419]
[110.26110077 255.55152893]
[110.26110077 240.55152893]
[110.26110077 225.55152893]
[110.26110077 210.55152893]
[110.26110077 195.55152893]
[110.26110077 180.55152893]
[110.26110077 165.55152893]
[110.26110077 150.55152893]
[110.26110077 135.55152893]
[94.93537140 137.06076050]
[80.15395355 132.18006897]
[68.49332428 121.61824036]
[62.04309464 107.08608246]
[47.05039597 107.55412292]
[32.05770111 108.02216339]
[17.06500626 108.49021149]
[2.08529139 109.27005768]
[-12.87495708 110.36136627]
[-27.83520699 111.45267487]
[-42.79545593 112.54398346]
[-50.07930374 126.14358521]
[-63.57046509 133.62637329]
[-78.96395874 132.60462952]
[-91.34777069 123.40436554]
[-96.77027893 108.96138000]
[-93.50117493 93.88436127]
[-82.58362579 82.98432922]
[-67.50137329 79.73945618]
[-53.06711197 85.18515778]
[-43.88676453 97.58374023]
[-28.92651749 96.49242401]
[-13.96626759 95.40111542]
[0.99398077 94.30980682]
[4.77482033 91.29637146]
[10.50527191 90.66929626]
[16.59696388 93.49751282]
[31.58965874 93.02947235]
[46.58235550 92.56143188]
[61.57505035 92.09338379]
[67.35132599 78.25016785]
[57.13784409 67.26450348]
[46.92436600 56.27883911]
[36.71088409 45.29317474]
[26.49740410 34.30751038]
[10.67160416 30.00913239]
[6.74337578 14.08741474]
[18.75374413 2.92125750]
[34.34747314 7.99744463]
[37.48307037 24.09403038]
[47.69654846 35.07969666]
[57.91003036 46.06536102]
[68.12351227 57.05102539]
[78.33699036 68.03668976]
[87.41101837 66.85329437]
[95.80297089 67.97286224]
[97.20526886 53.03855133]
[98.45214844 38.09046555]
[99.69902039 23.14237785]
[85.92469788 16.81436539]
[75.14755249 6.15467310]
[68.66899109 -7.54948711]
[67.27131653 -22.64327049]
[71.12332153 -37.30403137]
[79.75984192 -49.76140976]
[92.13798523 -58.51111984]
[106.76302338 -62.49658585]
[121.86892700 -61.23654938]
[135.63156128 -54.88315964]
[146.38903809 -44.20362473]
[152.84234619 -30.48755074]
[154.21218872 -15.39121532]
[150.33317566 -0.73757851]
[141.67372131 11.70386314]
[129.27946472 20.43074417]
[114.64710999 24.38925362]
[113.40023041 39.33734131]
[112.15335846 54.28542709]
[114.74835205 61.25763321]
[110.72187805 69.53044128]
[118.37564087 72.48770905]
[125.20538330 77.37821198]
[130.72117615 83.97002411]
[134.49891663 91.90694427]
[136.21179199 100.72731781]
[135.65635681 109.89072418]
[150.65554810 109.73468781]
[165.65472412 109.57865143]
[180.64743042 109.11060333]
[195.62713623 108.33075714]
[210.60685730 107.55091858]
[225.58656311 106.77107239]
[240.56628418 105.99122620]
[255.54598999 105.21138000]
[270.51678467 104.27574921]
[285.47705078 103.18444061]
[300.43728638 102.09313202]
[315.39752197 101.00182343]
[325.53924561 88.88070679]
[341.28860474 87.56430054]
[353.30181885 97.83358765]
[354.45166016 113.59599304]
[344.05590820 125.49996185]
[328.28222656 126.48307037]
[316.48883057 115.96206665]
[301.52859497 117.05338287]
[286.56835938 118.14469147]
[271.60809326 119.23600006]
[265.12387085 122.88299561]
[256.32583618 120.19109344]
[241.34613037 120.97093964]
[226.36640930 121.75078583]
[211.38670349 122.53063202]
[196.40698242 123.31047821]
[181.42727661 124.09031677]
[177.58456421 127.02444458]
[171.84230042 127.53217316]
[165.81076050 124.57783508]
[150.81158447 124.73387146]
[135.81239319 124.88990784]
[125.26110077 135.55152893]
[125.26110077 150.55152893]
[125.26110077 165.55152893]
[125.26110077 180.55152893]
[125.26110077 195.55152893]
[125.26110077 210.55152893]
[125.26110077 225.55152893]
[125.26110077 240.55152893]
[125.26110077 255.55152893]
[125.26110077 270.55154419]
[139.80097961 274.61285400]
[152.70536804 282.44735718]
[163.01664734 293.47369385]
[169.96966553 306.87362671]
[173.04847717 321.65277100]
[172.02458191 336.71444702]
[166.97398376 350.94097900]
[158.27145386 363.27664185]
[146.56278992 372.80606079]
[132.71685791 378.82208252]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 50]
[25 49]
[26 48]
[27 47]
[28 44]
[29 43]
[30 42]
[31 41]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[66 90]
[67 88]
[68 87]
[69 86]
[96 130]
[97 129]
[98 128]
[99 125]
[100 124]
[101 123]
[102 122]
[103 121]
[104 120]
[105 118]
[106 117]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
