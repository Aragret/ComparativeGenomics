%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAUUGAAACCGGGGGGGGGGUGGCGCAAUAGAUAUAGUACCGCAAGGGAAAGAUGAAAAAUUAUAACCAAxxxxxxxxxxUCCUAACACUCACAACAAAACUAACUAAUACUAACAUCUCAGACGCUCAGCCCCCCCCCCGAAAUAGAAACC\
) } def
/len { sequence length } bind def

/coor [
[83.86833191 400.53854370]
[70.16617584 394.27764893]
[58.20106125 385.12429810]
[48.57315063 373.53762817]
[41.76537323 360.09881592]
[38.11920547 345.48193359]
[37.81753540 330.42016602]
[40.87549973 315.66900635]
[47.13970947 301.96838379]
[56.29595566 290.00549316]
[67.88496399 280.38037109]
[81.32543182 273.57586670]
[95.94319916 269.93322754]
[95.63919067 254.93630981]
[95.33518982 239.93939209]
[95.03118134 224.94247437]
[94.72718048 209.94555664]
[94.42317200 194.94863892]
[94.11917114 179.95172119]
[93.81516266 164.95480347]
[93.51116180 149.95788574]
[85.51750946 137.39002991]
[92.97353363 123.43588257]
[92.66952515 108.43896484]
[92.21356201 93.44589233]
[91.60567474 78.45822144]
[90.99779510 63.47053909]
[77.50059509 56.27519226]
[69.47017670 43.37522507]
[68.97819519 28.28800201]
[76.05667877 15.06866169]
[88.71633911 7.22018051]
[88.10845184 -7.76749659]
[87.50057220 -22.75517464]
[86.89268494 -37.74285126]
[76.68259430 -53.03448486]
[85.36377716 -68.25700378]
[84.45226288 -83.22928619]
[83.54074860 -98.20156097]
[82.62923431 -113.17384338]
[81.71772003 -128.14611816]
[66.71354675 -128.56127930]
[51.80477524 -130.30088806]
[37.10809708 -133.35133362]
[22.73853302 -137.68876648]
[8.80854702 -143.27920532]
[-4.57284021 -150.07891846]
[-17.30089760 -158.03468323]
[-29.27600861 -167.08422852]
[-40.40444946 -177.15673828]
[-50.59912872 -188.17337036]
[-59.78025055 -200.04791260]
[-67.87596130 -212.68742371]
[-74.82289886 -225.99296570]
[-80.56669617 -239.86042786]
[-85.06240082 -254.18125916]
[-88.27481842 -268.84338379]
[-90.17881775 -283.73205566]
[-90.75949097 -298.73074341]
[-90.01229095 -313.72204590]
[-87.94306946 -328.58865356]
[-84.56802368 -343.21420288]
[-79.91356659 -357.48422241]
[-74.01612854 -371.28704834]
[-66.92185211 -384.51461792]
[-58.68627930 -397.06344604]
[-49.37385559 -408.83529663]
[-39.05746841 -419.73803711]
[-27.81785774 -429.68634033]
[-15.74298859 -438.60235596]
[-2.92736650 -446.41625977]
[10.52870655 -453.06695557]
[24.51991653 -458.50238037]
[38.93676376 -462.67996216]
[53.66640854 -465.56701660]
[68.59357452 -467.14096069]
[83.60144043 -467.38946533]
[98.57253265 -466.31057739]
[113.38968658 -463.91278076]
[127.93694305 -460.21478271]
[142.10043335 -455.24557495]
[155.76931763 -449.04403687]
[168.83660889 -441.65869141]
[181.20005798 -433.14733887]
[192.76286316 -423.57659912]
[203.43455505 -413.02139282]
[213.13162231 -401.56430054]
[221.77813721 -389.29501343]
[229.30645752 -376.30957031]
[235.65763855 -362.70956421]
[240.78199768 -348.60144043]
[244.63940430 -334.09567261]
[247.19969177 -319.30572510]
[248.44281006 -304.34735107]
[248.35902405 -289.33767700]
[246.94898987 -274.39413452]
[244.22377014 -259.63369751]
[240.20465088 -245.17185974]
[234.92312622 -231.12184143]
[228.42050171 -217.59359741]
[220.74769592 -204.69299316]
[211.96475220 -192.52099609]
[202.14039612 -181.17288208]
[191.35153198 -170.73745728]
[179.68258667 -161.29640198]
[167.22491455 -152.92361450]
[154.07597351 -145.68460083]
[140.33871460 -139.63603210]
[126.12062836 -134.82524109]
[111.53299713 -131.28988647]
[96.69000244 -129.05763245]
[97.60150909 -114.08535767]
[98.51302338 -99.11307526]
[99.42453766 -84.14079285]
[100.33605194 -69.16851807]
[109.20254517 -60.88578796]
[110.05199432 -48.37965393]
[101.88036346 -38.35073471]
[102.48825073 -23.36305809]
[103.09613037 -8.37538052]
[103.70401764 6.61229706]
[116.95769501 13.40976143]
[125.08349609 26.01243210]
[125.81496429 41.08994293]
[118.85561371 54.59788132]
[105.98546600 62.86265564]
[106.59335327 77.85033417]
[107.20123291 92.83801270]
[110.66588593 100.17266083]
[107.66644287 108.13495636]
[107.97045135 123.13188171]
[115.98584747 136.77239990]
[108.50807953 149.65386963]
[108.81208801 164.65078735]
[109.11608887 179.64770508]
[109.42008972 194.64463806]
[109.72409821 209.64155579]
[110.02809906 224.63847351]
[110.33210754 239.63539124]
[110.63610840 254.63230896]
[110.94011688 269.62921143]
[125.69348907 272.67645264]
[139.39868164 278.93072510]
[151.36822510 288.07827759]
[161.00175476 299.66027832]
[167.81604004 313.09579468]
[171.46929932 327.71090698]
[171.77825928 342.77252197]
[168.72744751 357.52514648]
[162.46987915 371.22882080]
[153.31942749 383.19616699]
[141.73509216 392.82687378]
[128.29791260 399.63790894]
[113.68191528 403.28762817]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[23 131]
[24 130]
[25 128]
[26 127]
[27 126]
[32 121]
[33 120]
[34 119]
[35 118]
[37 115]
[38 114]
[39 113]
[40 112]
[41 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
