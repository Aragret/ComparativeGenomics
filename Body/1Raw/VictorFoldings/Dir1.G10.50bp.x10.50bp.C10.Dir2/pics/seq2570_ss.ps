%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAGCCCAAUGGGGGGGGGGAUCUACAAUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACxxxxxxxxxxAAUCCAAGCCUCACCCCACUACUAGGCCUCCUCCUAGCAGCAGCAGGCAACCCCCCCCCCAUCAGCCCAAU\
) } def
/len { sequence length } bind def

/coor [
[62.80204010 350.41864014]
[49.88288116 342.66027832]
[39.10158539 332.13125610]
[31.03956795 319.39938354]
[26.13160896 305.15127563]
[24.64238548 290.15530396]
[26.65220833 275.22021484]
[32.05269241 261.15139771]
[40.55259705 248.70758057]
[51.69353104 238.55986023]
[64.87467957 231.25547791]
[79.38520050 227.18833923]
[78.76937103 212.20098877]
[78.15354919 197.21363831]
[77.53771973 182.22628784]
[76.92189789 167.23892212]
[76.30606842 152.25157166]
[75.69024658 137.26422119]
[75.07441711 122.27687073]
[67.84272003 109.13523865]
[55.51143265 100.59477997]
[43.18014908 92.05432129]
[30.84886551 83.51386261]
[21.07750511 94.91230774]
[10.18591785 105.24562073]
[-1.71043694 114.40426636]
[-14.48545265 122.29115295]
[-28.00370789 128.82267761]
[-42.12189865 133.92959595]
[-56.69036484 137.55780029]
[-71.55467987 139.66879272]
[-86.55725861 140.24020386]
[-101.53907776 139.26599121]
[-116.34132385 136.75646973]
[-130.80706787 132.73825073]
[-144.78298950 127.25392914]
[-158.12091064 120.36163330]
[-170.67945862 112.13442993]
[-182.32550049 102.65953064]
[-192.93559265 92.03737640]
[-202.39723206 80.38056183]
[-210.61015320 67.81266785]
[-217.48727417 54.46691132]
[-222.95570374 40.48476791]
[-226.95747375 26.01445770]
[-229.45014954 11.20937252]
[-230.40733337 -3.77354598]
[-229.81884766 -18.77547073]
[-227.69094849 -33.63737106]
[-224.04620361 -48.20170212]
[-218.92321777 -62.31407928]
[-212.37632751 -75.82489777]
[-204.47491455 -88.59093475]
[-195.30274963 -100.47686768]
[-184.95704651 -111.35669708]
[-173.54750061 -121.11508179]
[-161.19503784 -129.64859009]
[-148.03062439 -136.86676025]
[-134.19378662 -142.69308472]
[-119.83120728 -147.06578064]
[-105.09514618 -149.93849182]
[-90.14180756 -151.28079224]
[-75.12971497 -151.07843018]
[-60.21799088 -149.33357239]
[-45.56471634 -146.06468201]
[-31.32522011 -141.30644226]
[-17.65045357 -135.10928345]
[-4.68537569 -127.53890228]
[7.43257856 -118.67553711]
[18.57495117 -108.61315155]
[28.62362671 -97.45841217]
[37.47208023 -85.32956696]
[45.02651978 -72.35519409]
[51.20685959 -58.67281723]
[55.94758606 -44.42748260]
[59.19844437 -29.77019882]
[60.92497635 -14.85634136]
[61.10887146 0.15599386]
[59.74819183 15.10766888]
[56.85734940 29.84018707]
[52.46699905 44.19737244]
[46.62367630 58.02703857]
[39.38932419 71.18257904]
[51.72060776 79.72303772]
[64.05189514 88.26349640]
[76.38317871 96.80395508]
[86.57890320 82.22669983]
[102.94613647 79.49988556]
[115.37673950 88.58596039]
[129.96047974 85.07678986]
[144.54423523 81.56761932]
[159.12799072 78.05845642]
[161.05427551 66.09169769]
[166.90972900 55.51880264]
[175.97903442 47.58272552]
[187.17066956 43.20726395]
[199.14822388 42.88956833]
[210.49008179 46.64374924]
[219.85800171 54.00201797]
[226.15513611 64.07283020]
[240.92726135 61.46810913]
[253.17420959 51.45198441]
[267.05169678 56.86166763]
[281.82379150 54.25694656]
[296.59591675 51.65222168]
[311.36804199 49.04750061]
[326.14016724 46.44277954]
[334.99868774 33.35453415]
[350.53298950 30.44574738]
[363.52682495 39.44215012]
[366.27120972 55.00633621]
[357.13793945 67.90435028]
[341.54559326 70.48403168]
[328.74487305 61.21489334]
[313.97274780 63.81961823]
[299.20065308 66.42433929]
[284.42852783 69.02906036]
[269.65640259 71.63378143]
[258.46606445 81.46360779]
[243.53198242 76.24022675]
[228.75985718 78.84494781]
[223.40754700 96.08647156]
[210.02037048 108.32399750]
[192.20368958 112.14628601]
[174.81443787 106.42413330]
[162.63714600 92.64220428]
[148.05340576 96.15137482]
[133.46965027 99.66053772]
[118.88590240 103.16970825]
[114.75497437 114.53359222]
[104.01795197 121.90598297]
[90.06177521 121.66104126]
[90.67759705 136.64839172]
[91.29342651 151.63574219]
[91.90924835 166.62310791]
[92.52507782 181.61045837]
[93.14089966 196.59780884]
[93.75672150 211.58515930]
[94.37255096 226.57250977]
[109.16782379 229.43548584]
[122.90379333 235.63385010]
[134.83970642 244.83335876]
[144.33184814 256.53787231]
[150.86834717 270.11621094]
[154.09667969 284.83605957]
[153.84275818 299.90365601]
[150.12026978 314.50640869]
[143.12997437 327.85675049]
[133.24882507 339.23480225]
[121.00971985 348.02691650]
[107.07270050 353.75891113]
[92.18935394 356.12173462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 86]
[21 85]
[22 84]
[23 83]
[89 129]
[90 128]
[91 127]
[92 126]
[100 121]
[101 120]
[103 118]
[104 117]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
