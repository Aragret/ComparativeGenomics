%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUCACAUGGGGGGGGGGGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAACAGGGGCCCUCUCAxxxxxxxxxxCCUAGAAGUCCCACUCCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCCCCCCCCCCCAAUCACCUG\
) } def
/len { sequence length } bind def

/coor [
[83.74791718 378.67312622]
[70.87464142 370.77023315]
[60.75035095 359.55972290]
[54.19576645 345.95040894]
[51.74224854 331.04547119]
[53.58868408 316.05322266]
[59.58539581 302.18902588]
[69.24625397 290.57678223]
[81.78810120 282.15780640]
[96.19422913 277.61465454]
[95.88217163 262.61788940]
[95.57011414 247.62113953]
[95.25805664 232.62438965]
[94.94599915 217.62763977]
[94.63394928 202.63088989]
[94.32189178 187.63412476]
[94.00983429 172.63737488]
[93.69777679 157.64062500]
[93.38571930 142.64387512]
[82.44882965 139.42340088]
[72.73703003 133.45114136]
[64.92821503 125.14395142]
[51.40402222 131.63211060]
[37.87983322 138.12028503]
[24.35564232 144.60844421]
[12.69019127 156.91102600]
[-2.36092138 149.10716248]
[0.97140580 132.48393250]
[17.86747742 131.08425903]
[31.39166832 124.59609222]
[44.91585922 118.10792542]
[58.44004822 111.61975861]
[56.88594055 101.85102081]
[57.59706879 91.98503113]
[60.53606415 82.54015350]
[65.54851532 74.01261902]
[72.37107086 66.85047913]
[64.91616058 53.83417130]
[52.52642059 52.93466568]
[42.32281876 46.11634064]
[36.88608932 35.28219604]
[37.50264359 23.32664299]
[25.24027443 14.68752766]
[12.97790623 6.04841137]
[0.71553767 -2.59070492]
[-15.02221107 -4.21361589]
[-20.97041512 -17.86894989]
[-33.23278427 -26.50806618]
[-47.87497330 -21.37135124]
[-62.73035049 -25.85436630]
[-72.08671570 -38.23330307]
[-72.34635925 -53.74820709]
[-63.40943527 -66.43328094]
[-48.71237946 -71.41085052]
[-33.90650940 -66.76694489]
[-24.68498421 -54.28723907]
[-24.59366608 -38.77043533]
[-12.33129883 -30.13131714]
[2.52936339 -29.12633514]
[9.35465336 -14.85307312]
[21.61702156 -6.21395683]
[33.87939072 2.42515922]
[46.14175797 11.06427479]
[48.23898315 9.70368290]
[50.46995544 8.57570267]
[52.80896759 7.69332886]
[53.12102509 -7.30342484]
[53.43308258 -22.30017853]
[39.38623047 -28.04912567]
[28.36737823 -38.48700714]
[21.86673927 -52.20218658]
[20.76346779 -67.33979797]
[25.20677185 -81.85260010]
[34.59573364 -93.77786255]
[47.66057205 -101.50278473]
[62.63437271 -103.98263550]
[77.49205780 -100.88204193]
[90.22424316 -92.62032318]
[99.10900116 -80.31481934]
[102.94474792 -65.62974548]
[101.21273041 -50.55113220]
[94.14718628 -37.11824417]
[82.70367432 -27.14776421]
[68.42983246 -21.98812294]
[68.11778259 -6.99136829]
[67.80572510 8.00538540]
[83.03592682 24.18426895]
[77.93247223 46.37926102]
[85.38738251 59.39556885]
[102.64520264 56.92737198]
[119.47131348 61.48875046]
[133.11965942 72.33527374]
[141.36277771 87.69676971]
[156.26467896 85.98407745]
[171.16658020 84.27138519]
[186.06848145 82.55870056]
[200.97038269 80.84600830]
[215.87228394 79.13331604]
[217.77679443 64.17884827]
[223.20547485 50.11495590]
[231.84268188 37.75930786]
[243.18626404 27.83024025]
[256.57675171 20.90501595]
[271.23559570 17.38625908]
[286.31057739 17.47854614]
[300.92523193 21.17651176]
[314.22991943 28.26515961]
[325.45108032 38.33236694]
[333.93637085 50.79283905]
[339.19244385 64.92213440]
[340.91372681 79.89880371]
[339.00015259 94.85211945]
[333.56295776 108.91271973]
[324.91824341 121.26312256]
[313.56863403 131.18531799]
[300.17398071 138.10241699]
[285.51300049 141.61228943]
[270.43807983 141.51086426]
[255.82566833 137.80403137]
[242.52528381 130.70732117]
[231.31021118 120.63331604]
[222.83248901 108.16770172]
[217.58497620 94.03521729]
[202.68307495 95.74790955]
[187.78117371 97.46060181]
[172.87927246 99.17328644]
[157.97735596 100.88597870]
[143.07545471 102.59867096]
[137.89981079 120.63619995]
[125.55753326 134.77156067]
[108.38247681 142.33181763]
[108.69453430 157.32856750]
[109.00658417 172.32531738]
[109.31864166 187.32208252]
[109.63069916 202.31883240]
[109.94275665 217.31558228]
[110.25481415 232.31233215]
[110.56687164 247.30909729]
[110.87892151 262.30584717]
[111.19097900 277.30261230]
[125.77362061 281.24255371]
[138.65483093 289.13250732]
[148.79037476 300.33282471]
[155.35862732 313.93557739]
[157.82711792 328.83801270]
[155.99574280 343.83212280]
[150.01296997 357.70233154]
[140.36378479 369.32427979]
[127.83039093 377.75582886]
[113.42884064 382.31347656]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[22 32]
[23 31]
[24 30]
[25 29]
[37 89]
[38 88]
[42 63]
[43 62]
[44 61]
[45 60]
[47 58]
[48 57]
[66 86]
[67 85]
[68 84]
[93 128]
[94 127]
[95 126]
[96 125]
[97 124]
[98 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
