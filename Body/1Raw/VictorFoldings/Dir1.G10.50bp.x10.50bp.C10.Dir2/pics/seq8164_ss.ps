%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAUUAUAGGGGGGGGGGACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGxxxxxxxxxxAGACUACGUACAUAACCUAAACCUACUCCAAUGCUAAAACUAAUCGUCCCCCCCCCCCCCAACAAUUAUA\
) } def
/len { sequence length } bind def

/coor [
[96.29246521 516.05596924]
[84.40819550 506.78088379]
[75.08948517 494.93075562]
[68.87812042 481.19458008]
[66.13521576 466.37097168]
[67.02024841 451.32171631]
[71.48175812 436.92175293]
[79.26035309 424.00833130]
[89.90380096 413.33215332]
[102.79331207 405.51397705]
[117.17949677 401.00830078]
[116.24387360 386.03750610]
[115.30824280 371.06674194]
[114.37261200 356.09594727]
[113.43698883 341.12515259]
[112.50135803 326.15435791]
[111.56572723 311.18356323]
[110.63010406 296.21276855]
[109.69447327 281.24197388]
[108.75884247 266.27117920]
[107.82321930 251.30039978]
[106.88758850 236.32960510]
[91.08476257 232.55430603]
[77.19256592 224.09310913]
[66.56300354 211.75610352]
[60.23468399 196.73126221]
[58.83130264 180.46997070]
[62.50020599 164.54692078]
[70.89701080 150.50750732]
[83.21789551 139.71795654]
[98.27655029 133.23229980]
[96.71897125 118.31339264]
[90.93732452 132.15435791]
[77.36691284 138.54528809]
[63.01417160 134.18652344]
[55.28945541 121.32849884]
[58.18104935 106.60984802]
[70.19601440 97.62984467]
[85.13284302 99.02578735]
[72.69340515 90.64364624]
[60.25396347 82.26150513]
[47.81452179 73.87935638]
[35.37508011 65.49721527]
[22.93564224 57.11507416]
[10.40967941 48.86278534]
[-2.20144868 40.74124146]
[-14.81257725 32.61969757]
[-27.42370415 24.49815750]
[-42.81499863 28.08753014]
[-56.19205475 19.67147636]
[-59.61849976 4.24309254]
[-51.06148529 -9.04423523]
[-35.59774017 -12.30737019]
[-22.40162468 -3.61035395]
[-19.30216217 11.88702965]
[-6.69103479 20.00857162]
[5.92009354 28.13011360]
[18.53122139 36.25165558]
[25.90536308 37.23536682]
[31.31778526 44.67563248]
[43.75722504 53.05777740]
[56.19666672 61.43991852]
[68.63610840 69.82205963]
[81.07554626 78.20420837]
[93.51498413 86.58634949]
[108.22294617 83.64086914]
[116.47523499 71.11490631]
[124.72752380 58.58894348]
[132.97981262 46.06298065]
[141.23210144 33.53701782]
[130.12643433 23.40733528]
[120.74221039 11.66497707]
[113.31054688 -1.40088964]
[108.01445007 -15.46850586]
[104.98433685 -30.19144249]
[104.29482269 -45.20713806]
[105.96289825 -60.14581299]
[109.94747925 -74.63958740]
[116.15044403 -88.33155060]
[124.41903687 -100.88451385]
[134.54963684 -111.98934937]
[146.29277039 -121.37259674]
[159.35925293 -128.80317688]
[173.42730713 -134.09812927]
[188.15048218 -137.12702942]
[203.16624451 -137.81529236]
[218.10478210 -136.14598083]
[232.59822083 -132.16021729]
[246.28967285 -125.95611572]
[258.84194946 -117.68649292]
[269.94595337 -107.55496979]
[279.32824707 -95.81106567]
[286.75775146 -82.74397278]
[292.05151367 -68.67548370]
[295.07919312 -53.95204544]
[295.76623535 -38.93624115]
[294.09570312 -23.99783897]
[290.10873413 -9.50471878]
[283.90350342 4.18621588]
[275.63284302 16.73781395]
[265.50039673 27.84098053]
[253.75572205 37.22229004]
[240.68801880 44.65071869]
[226.61909485 49.94333649]
[211.89540100 52.96980667]
[196.87954712 53.65560150]
[181.94128418 51.98382950]
[167.44848633 47.99565887]
[153.75807190 41.78930664]
[145.50578308 54.31526947]
[137.25349426 66.84123230]
[129.00120544 79.36719513]
[120.74890900 91.89315796]
[111.63788605 116.75581360]
[113.19546509 131.67472839]
[126.81638336 134.06762695]
[139.33354187 139.91760254]
[149.88706970 148.81539917]
[157.75389099 160.14270020]
[162.39729309 173.11500549]
[163.50352478 186.83599854]
[161.00296021 200.35945129]
[155.07450867 212.75456238]
[146.13278198 223.16987610]
[134.79911804 230.89192200]
[121.85837555 235.39398193]
[122.79400635 250.36476135]
[123.72963715 265.33557129]
[124.66526794 280.30633545]
[125.60089111 295.27713013]
[126.53652191 310.24792480]
[127.47215271 325.21871948]
[128.40777588 340.18951416]
[129.34341431 355.16030884]
[130.27903748 370.13110352]
[131.21466064 385.10189819]
[132.15029907 400.07269287]
[146.98551941 402.75210571]
[160.74815369 408.90460205]
[172.63804626 418.17251587]
[181.96394348 430.01696777]
[188.18363953 443.74935913]
[190.93553162 458.57131958]
[190.05961609 473.62112427]
[185.60684204 488.02377319]
[177.83607483 500.94192505]
[167.19909668 511.62451172]
[154.31433105 519.45050049]
[139.93087769 523.96490479]
[124.88497162 524.90521240]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[22 126]
[31 115]
[32 114]
[39 65]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[45 58]
[46 57]
[47 56]
[48 55]
[66 113]
[67 112]
[68 111]
[69 110]
[70 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
