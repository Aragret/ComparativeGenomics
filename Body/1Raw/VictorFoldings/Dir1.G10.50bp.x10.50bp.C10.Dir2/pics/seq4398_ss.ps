%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUAGCAUGGGGGGGGGGUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCUxxxxxxxxxxAUACUCCUCAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACACCCCCCCCCCACCCUAACAU\
) } def
/len { sequence length } bind def

/coor [
[84.10981750 410.21139526]
[70.88961792 402.93893433]
[60.00281525 392.49194336]
[52.19168472 379.58267212]
[47.98880386 365.09136963]
[47.68072891 350.00604248]
[51.28847122 335.35519409]
[58.56604385 322.13781738]
[69.01725006 311.25503540]
[81.92951202 303.44891357]
[96.42244720 299.25161743]
[96.11039734 284.25485229]
[95.79833984 269.25811768]
[95.48628235 254.26135254]
[95.17422485 239.26460266]
[94.86216736 224.26785278]
[94.55010986 209.27110291]
[94.23806000 194.27433777]
[93.92600250 179.27758789]
[93.45796204 164.28489685]
[92.83398438 149.29788208]
[92.21000671 134.31086731]
[91.58602905 119.32384491]
[85.31385040 111.73475647]
[83.77062225 103.09047699]
[86.38355255 95.82061005]
[91.52528381 91.55249786]
[84.89678192 78.09653473]
[78.26828766 64.64057159]
[71.63978577 51.18460464]
[57.63445282 56.58432388]
[43.20147324 60.70685959]
[28.45705223 63.51902771]
[13.51990604 64.99818420]
[-1.48969853 65.13240814]
[-16.45091057 63.92063522]
[-31.24326706 61.37261581]
[-45.74766922 57.50886154]
[-59.84733200 52.36048889]
[-73.42872620 45.96894073]
[-86.38251495 38.38568878]
[-98.60438538 29.67178345]
[-109.99593353 19.89738846]
[-120.46544647 9.14120388]
[-129.92863464 -2.51016927]
[-138.30928040 -14.96291733]
[-145.53991699 -28.11677551]
[-151.56234741 -41.86583710]
[-156.32806396 -56.09939957]
[-159.79867554 -70.70285797]
[-161.94627380 -85.55863190]
[-162.75355530 -100.54711151]
[-162.21400452 -115.54761505]
[-160.33198547 -130.43936157]
[-157.12265015 -145.10246277]
[-152.61181641 -159.41883850]
[-146.83583069 -173.27323914]
[-139.84118652 -186.55409241]
[-131.68420410 -199.15447998]
[-122.43055725 -210.97296143]
[-112.15475464 -221.91435242]
[-100.93952942 -231.89056396]
[-88.87518311 -240.82128906]
[-76.05885315 -248.63461304]
[-62.59373474 -255.26762390]
[-48.58823776 -260.66690063]
[-34.15513229 -264.78900146]
[-19.41062546 -267.60073853]
[-4.47343397 -269.07940674]
[10.53617477 -269.21319580]
[25.49734879 -268.00097656]
[40.28962708 -265.45248413]
[54.79391098 -261.58828735]
[68.89341736 -256.43948364]
[82.47461700 -250.04753113]
[95.42816925 -242.46388245]
[107.64978027 -233.74960327]
[119.04103088 -223.97485352]
[129.51020813 -213.21835327]
[138.97303772 -201.56669617]
[147.35330200 -189.11369324]
[154.58355713 -175.95960999]
[160.60556030 -162.21035767]
[165.37083435 -147.97665405]
[168.84100342 -133.37309265]
[170.98815918 -118.51725006]
[171.79496765 -103.52874756]
[171.25497437 -88.52825928]
[169.37249756 -73.63656616]
[166.16270447 -58.97356796]
[161.65144348 -44.65732574]
[155.87503052 -30.80311012]
[148.87997437 -17.52246475]
[140.72261047 -4.92232418]
[131.46859741 6.89586401]
[121.19246674 17.83694267]
[109.97693634 27.81282234]
[97.91231537 36.74317551]
[85.09574890 44.55610657]
[91.72425079 58.01207352]
[98.35274506 71.46804047]
[104.98124695 84.92400360]
[117.59237671 93.04554749]
[132.58506775 93.51358795]
[144.05271912 82.97172546]
[159.25077820 83.65996552]
[169.23016357 94.65757751]
[184.22285461 95.12561798]
[199.21554565 95.59365845]
[207.87219238 82.82392120]
[222.06742859 76.78248596]
[237.27160645 79.39715576]
[248.63313293 89.83359528]
[252.52658081 104.76157379]
[247.70957947 119.41763306]
[235.71919250 129.12507629]
[220.38153076 130.78628540]
[206.59077454 123.87118530]
[198.74751282 110.58635712]
[183.75480652 110.11830902]
[168.76211548 109.65026855]
[158.11618042 120.00399780]
[142.90478516 119.74291992]
[132.11703491 108.50628662]
[117.12433624 108.03823853]
[106.57304382 118.69986725]
[107.19702148 133.68688965]
[107.82099915 148.67390442]
[108.44497681 163.66091919]
[111.94758606 172.16876221]
[108.92275238 178.96553040]
[109.23480988 193.96228027]
[109.54686737 208.95904541]
[109.85892487 223.95579529]
[110.17098236 238.95254517]
[110.48303223 253.94929504]
[110.79508972 268.94604492]
[111.10714722 283.94281006]
[111.41920471 298.93957520]
[126.07419586 302.53033447]
[139.30000305 309.79260254]
[150.19487000 320.23117065]
[158.01597595 333.13439941]
[162.23004150 347.62246704]
[162.54975891 362.70755005]
[158.95333862 377.36117554]
[151.68597412 390.58416748]
[141.24316406 401.47500610]
[128.33694458 409.29110718]
[113.84725189 413.49960327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 129]
[21 128]
[22 127]
[23 126]
[27 102]
[28 101]
[29 100]
[30 99]
[103 125]
[104 124]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
