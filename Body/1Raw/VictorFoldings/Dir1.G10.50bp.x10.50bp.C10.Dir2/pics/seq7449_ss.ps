%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCCUAUAUAUGGGGGGGGGGCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCUACUUCCCCUAxxxxxxxxxxUACCAAGGCCACCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAUCCCCCCCCCCAAUCCUAUUUAU\
) } def
/len { sequence length } bind def

/coor [
[75.50009918 384.41256714]
[61.79794693 378.15170288]
[49.83282852 368.99835205]
[40.20491791 357.41168213]
[33.39714050 343.97283936]
[29.75097084 329.35595703]
[29.44930267 314.29421997]
[32.50726700 299.54306030]
[38.77147675 285.84240723]
[47.92772293 273.87951660]
[59.51672745 264.25442505]
[72.95719910 257.44989014]
[87.57495880 253.80726624]
[87.27095795 238.81034851]
[86.96695709 223.81343079]
[86.66294861 208.81651306]
[86.35894775 193.81959534]
[86.05493927 178.82266235]
[85.75093842 163.82574463]
[85.44692993 148.82882690]
[85.14292908 133.83190918]
[72.91894531 125.13856506]
[58.65309906 129.77381897]
[44.38725281 134.40907288]
[37.16562271 148.21073914]
[22.63199425 152.70831299]
[9.51872444 145.73854065]
[-4.74712372 150.37379456]
[-19.01297188 155.00904846]
[-32.20845795 165.65402222]
[-46.09029770 155.92105103]
[-40.58055878 139.88735962]
[-23.64822578 140.74320984]
[-9.38237858 136.10795593]
[4.88346910 131.47270203]
[11.39559650 118.12624359]
[25.79716301 113.22221375]
[39.75199509 120.14322662]
[54.01784515 115.50797272]
[68.28369141 110.87271881]
[68.72528076 103.14819336]
[70.90871429 96.20829773]
[74.49996185 90.41511536]
[62.45467758 81.47581482]
[50.40939331 72.53650665]
[38.36411285 63.59720230]
[26.31882858 54.65789795]
[14.27354622 45.71859360]
[2.13829160 36.90181351]
[-10.08568954 28.20846748]
[-22.30966949 19.51511955]
[-34.53365326 10.82177162]
[-50.94566345 6.56945610]
[-51.40282822 -10.37832642]
[-35.24392700 -15.50923729]
[-25.84030342 -1.40220916]
[-13.61632347 7.29113817]
[-1.39234209 15.98448563]
[10.83163929 24.67783356]
[18.14830017 25.99922943]
[23.21285057 33.67330933]
[35.25813293 42.61261368]
[47.30341721 51.55191803]
[59.34869766 60.49122620]
[71.39398193 69.43052673]
[83.43926239 78.36983490]
[99.17190552 72.77066803]
[115.21572113 77.40345001]
[126.69551849 67.74870300]
[138.17532349 58.09395981]
[133.66836548 49.21474838]
[130.83134460 39.67556000]
[129.75466919 29.78730583]
[130.47143555 19.87190819]
[132.95637512 10.25182629]
[137.12677002 1.23956060]
[142.84515381 -6.87249374]
[149.92387390 -13.82153511]
[158.13127136 -19.38286781]
[167.19923401 -23.37717056]
[176.83192444 -25.67627144]
[186.71551514 -26.20726776]
[196.52832031 -24.95483208]
[205.95132446 -21.96164513]
[214.67855835 -17.32695198]
[222.42700195 -11.20326328]
[228.94573975 -3.79134297]
[242.13403320 -10.93758965]
[255.32232666 -18.08383560]
[268.51062012 -25.23008156]
[281.69891357 -32.37632751]
[294.88720703 -39.52257538]
[293.73150635 -56.60494614]
[300.11077881 -72.43415833]
[312.70681763 -83.86750031]
[328.97229004 -88.65759277]
[345.64581299 -85.89404297]
[359.40606689 -76.17600250]
[372.29391479 -83.85083771]
[385.18176270 -91.52568054]
[390.50216675 -106.66083527]
[405.69931030 -111.80151367]
[419.11523438 -103.00422668]
[420.45840454 -87.01750183]
[408.69845581 -76.10498047]
[392.85659790 -78.63781738]
[379.96875000 -70.96298218]
[367.08090210 -63.28814316]
[369.28186035 -50.42252731]
[366.95620728 -37.54630661]
[360.36145020 -26.20813179]
[350.26989746 -17.77922249]
[337.87817383 -13.28756714]
[324.66546631 -13.29257584]
[312.21691895 -17.81550407]
[302.03347778 -26.33427811]
[288.84518433 -19.18803215]
[275.65686035 -12.04178524]
[262.46856689 -4.89553881]
[249.28027344 2.25070715]
[236.09197998 9.39695358]
[239.64093018 29.80853844]
[235.34490967 50.10432816]
[223.79908752 67.37329865]
[206.63996887 79.13077545]
[186.31346130 83.67588043]
[165.72622681 80.33760071]
[147.83006287 69.57376099]
[136.35026550 79.22850800]
[124.87046814 88.88325500]
[128.48262024 107.02993774]
[119.43281555 124.70596313]
[100.13984680 133.52790833]
[100.44385529 148.52482605]
[100.74785614 163.52174377]
[101.05185699 178.51866150]
[101.35586548 193.51557922]
[101.65986633 208.51249695]
[101.96387482 223.50941467]
[102.26787567 238.50634766]
[102.57188416 253.50326538]
[117.32525635 256.55050659]
[131.03044128 262.80474854]
[142.99998474 271.95230103]
[152.63351440 283.53430176]
[159.44781494 296.96981812]
[163.10105896 311.58493042]
[163.41001892 326.64654541]
[160.35920715 341.39920044]
[154.10163879 355.10284424]
[144.95118713 367.07019043]
[133.36685181 376.70089722]
[119.92967987 383.51193237]
[105.31368256 387.16165161]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 40]
[23 39]
[24 38]
[27 35]
[28 34]
[29 33]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 59]
[50 58]
[51 57]
[52 56]
[68 130]
[69 129]
[70 128]
[87 121]
[88 120]
[89 119]
[90 118]
[91 117]
[92 116]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
