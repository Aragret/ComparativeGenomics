%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCACAGCCACGGGGGGGGGGUUUCCACACAGACAUCAUAACAAAAAAUUUCCACCAAACCCCCCCUCCCCxxxxxxxxxxAACUCUACCUCUCUAUACUAAUCUCCCUACAAAUCUCCUUAAUUAUAACACCCCCCCCCCUUCACAGCCAC\
) } def
/len { sequence length } bind def

/coor [
[181.80657959 267.03326416]
[173.24732971 254.70841980]
[165.51248169 241.85017395]
[158.63519287 228.51356506]
[152.64486694 214.75572205]
[147.56718445 200.63554382]
[143.42387390 186.21350098]
[140.23269653 171.55136108]
[138.00729370 156.71188354]
[136.75721741 141.75863647]
[136.48779297 126.75565338]
[137.20021057 111.76716614]
[122.29576111 110.07676697]
[107.39131165 108.38637543]
[92.47029877 106.84908295]
[77.53428650 105.46505737]
[62.59827042 104.08103180]
[47.66225815 102.69700623]
[32.72624588 101.31298065]
[17.79023361 99.92895508]
[2.85422158 98.54492950]
[-12.08179092 97.16090393]
[-27.01780319 95.77687836]
[-41.95381546 94.39285278]
[-46.06706619 108.86336517]
[-52.76944351 122.33158112]
[-61.83266449 134.33877563]
[-72.94805145 144.47598267]
[-85.73699951 152.39793396]
[-99.76393890 157.83480835]
[-114.55110931 160.60144043]
[-129.59486389 160.60357666]
[-144.38282776 157.84117126]
[-158.41131592 152.40829468]
[-171.20252991 144.49000549]
[-182.32080078 134.35597229]
[-191.38745117 122.35136414]
[-198.09367371 108.88506317]
[-202.21105957 94.41571808]
[-203.59934998 79.43615723]
[-202.21128845 64.45657349]
[-198.09414673 49.98717117]
[-191.38813782 36.52076340]
[-182.32167053 24.51601601]
[-171.20356750 14.38180637]
[-158.41247559 6.46330309]
[-144.38406372 1.03020549]
[-129.59616089 -1.73243642]
[-114.55239868 -1.73052824]
[-99.76518250 1.03586519]
[-85.73815918 6.47252131]
[-72.94908142 14.39426994]
[-61.83353806 24.53129959]
[-52.77012253 36.53834534]
[-46.06753159 50.00645447]
[-41.95405197 64.47690582]
[-40.56978989 79.45684052]
[-25.63377762 80.84086609]
[-10.69776535 82.22489166]
[4.23824692 83.60891724]
[19.17425919 84.99294281]
[34.11027145 86.37696838]
[49.04628372 87.76099396]
[63.98229599 89.14501953]
[78.91831207 90.52904510]
[93.85432434 91.91307068]
[101.58596802 89.45063019]
[109.08171082 93.48192596]
[123.98616028 95.17232513]
[138.89060974 96.86272430]
[141.55297852 82.09539032]
[145.17547607 67.53380585]
[149.74258423 53.24032211]
[155.23477173 39.27614594]
[161.62849426 25.70107460]
[168.89639282 12.57324219]
[177.00732422 -0.05113765]
[185.92657471 -12.11800575]
[195.61593628 -23.57568741]
[206.03392029 -34.37512207]
[217.13592529 -44.47006226]
[228.87440491 -53.81727600]
[241.19908142 -62.37674332]
[254.05718994 -70.11180878]
[267.39367676 -76.98934937]
[281.15139771 -82.97991180]
[295.27148438 -88.05784607]
[309.69345093 -92.20140839]
[324.35556030 -95.39285278]
[339.19497681 -97.61851501]
[354.14822388 -98.86885834]
[369.15118408 -99.13853455]
[384.13970947 -98.42639160]
[399.04953003 -96.73547363]
[413.81683350 -94.07302094]
[428.37841797 -90.45043945]
[442.67187500 -85.88323212]
[456.63601685 -80.39096832]
[470.21102905 -73.99716187]
[483.33883667 -66.72919464]
[495.96316528 -58.61818314]
[508.02996826 -49.69886780]
[519.48760986 -40.00943375]
[530.28698730 -29.59138298]
[540.38183594 -18.48932076]
[549.72900391 -6.75079107]
[558.28839111 5.57394075]
[566.02337646 18.43209648]
[572.90081787 31.76861763]
[578.89129639 45.52639389]
[583.96917725 59.64651108]
[588.11267090 74.06850433]
[591.30401611 88.73061371]
[593.52960205 103.57005310]
[594.77984619 118.52328491]
[595.04943848 133.52627563]
[594.33721924 148.51477051]
[592.64617920 163.42459106]
[589.98364258 178.19189453]
[586.36096191 192.75343323]
[581.79370117 207.04685974]
[576.30133057 221.01097107]
[569.90747070 234.58596802]
[562.63940430 247.71371460]
[554.52832031 260.33798218]
[545.60894775 272.40475464]
[535.91943359 283.86233521]
[525.50134277 294.66165161]
[514.39916992 304.75643921]
[502.66061401 314.10351562]
[490.33584595 322.66284180]
[477.47763062 330.39776611]
[464.14105225 337.27514648]
[450.38327026 343.26553345]
[436.26312256 348.34332275]
[421.84109497 352.48669434]
[407.17895508 355.67797852]
[392.33950806 357.90347290]
[377.38626099 359.15362549]
[362.38327026 359.42312622]
[347.39480591 358.71081543]
[332.48498535 357.01971436]
[317.71771240 354.35708618]
[303.15618896 350.73434448]
[288.86276245 346.16696167]
[274.89868164 340.67453003]
[261.32373047 334.28057861]
[248.19602966 327.01245117]
[235.57179260 318.90127563]
[223.50508118 309.98181152]
[212.04757690 300.29226685]
[201.24832153 289.87408447]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 70]
[13 69]
[14 68]
[15 66]
[16 65]
[17 64]
[18 63]
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
