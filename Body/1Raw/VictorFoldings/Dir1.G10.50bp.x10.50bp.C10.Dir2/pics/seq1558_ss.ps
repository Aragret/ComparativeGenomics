%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCACCACCGGGGGGGGGGUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUAxxxxxxxxxxCCUAACCCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUCCCCCCCCCCACCUCACCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 393.14773560]
[71.01555634 387.59472656]
[58.81560135 378.72839355]
[49.20452881 367.10607910]
[42.78650284 353.45837402]
[39.96496582 338.64318848]
[40.91728210 323.59182739]
[45.58358765 309.25039673]
[53.67055511 296.52044678]
[64.66983032 286.20214844]
[77.88998413 278.94418335]
[92.50000000 275.20275879]
[92.50000000 260.20275879]
[92.50000000 245.20274353]
[92.50000000 230.20274353]
[92.50000000 215.20274353]
[92.50000000 200.20274353]
[92.50000000 185.20274353]
[92.50000000 170.20274353]
[92.50000000 155.20274353]
[92.50000000 140.20274353]
[76.83438873 133.70260620]
[65.15314484 121.40579224]
[59.46537781 105.42729187]
[44.48513412 104.65763092]
[29.50489426 103.88796997]
[14.52465343 103.11830902]
[-0.45558739 102.34864807]
[-16.61764526 111.11327362]
[-30.98041534 101.07556915]
[-45.97330093 100.61364746]
[-51.86235046 114.60234070]
[-62.40983963 125.51631927]
[-76.18930054 131.87956238]
[-91.33718109 132.83148193]
[-105.80485535 128.24334717]
[-117.63568115 118.73567200]
[-125.22964478 105.59427643]
[-127.55971527 90.59643555]
[-124.31078339 75.77048492]
[-115.92222595 63.12150955]
[-103.52854156 54.36017990]
[-88.80586243 50.67139053]
[-73.74530792 52.55402756]
[-60.38370895 59.75347519]
[-50.52809906 71.29606628]
[-45.51137543 85.62075806]
[-30.51848793 86.08268738]
[-21.45771790 78.01022339]
[-8.92450619 78.31013489]
[0.31407267 87.36840820]
[15.29431343 88.13806915]
[30.27455521 88.90773010]
[45.25479507 89.67739105]
[60.23503876 90.44705200]
[68.13376617 74.36692810]
[82.14773560 63.20587158]
[99.58760834 59.10573196]
[117.10662079 62.85333633]
[125.77323151 50.61038208]
[134.43983459 38.36742783]
[143.10644531 26.12447357]
[151.64689636 13.79319096]
[160.06031799 1.37487626]
[168.47372437 -11.04343796]
[176.88713074 -23.46175194]
[185.30053711 -35.88006592]
[174.62280273 -46.47356033]
[166.07580566 -58.84550476]
[159.94940186 -72.57370758]
[156.45092773 -87.19003296]
[155.69808960 -102.19635773]
[157.71505737 -117.08153534]
[162.43170166 -131.33882141]
[169.68598938 -144.48312378]
[179.22956848 -156.06747437]
[190.73631287 -165.69830322]
[203.81336975 -173.04872131]
[218.01466370 -177.86967468]
[232.85607910 -179.99838257]
[247.83193970 -179.36376953]
[262.43228149 -175.98893738]
[276.16021729 -169.99024963]
[284.57360840 -182.40855408]
[292.98703003 -194.82687378]
[301.40045166 -207.24519348]
[295.23965454 -221.38903809]
[297.72619629 -236.61470032]
[308.06655884 -248.06372070]
[322.96121216 -252.08276367]
[337.65731812 -247.38935852]
[347.46542358 -235.48117065]
[349.25573730 -220.15803528]
[342.45703125 -206.30953979]
[329.23873901 -198.35466003]
[313.81875610 -198.83177185]
[305.40533447 -186.41346741]
[296.99194336 -173.99514771]
[288.57852173 -161.57682800]
[299.23986816 -151.05180359]
[307.78787231 -138.74362183]
[313.93020630 -125.07063293]
[317.45639038 -110.49788666]
[318.24487305 -95.52134705]
[316.26736450 -80.65099335]
[311.58972168 -66.39344788]
[304.36990356 -53.23475266]
[294.85244751 -41.62374115]
[283.36041260 -31.95678329]
[270.28421021 -24.56422997]
[256.06848145 -19.69912148]
[241.19686890 -17.52853775]
[226.17564392 -18.12784958]
[211.51644897 -21.47811317]
[197.71885681 -27.46665573]
[189.30545044 -15.04834175]
[180.89202881 -2.63002777]
[172.47862244 9.78828621]
[164.06521606 22.20660019]
[162.91009521 29.55356598]
[155.34939575 34.79108047]
[146.68278503 47.03403473]
[138.01617432 59.27698898]
[129.34957886 71.51994324]
[135.87475586 80.36551666]
[139.80834961 90.62948608]
[140.86618042 101.57038879]
[138.97184753 112.39783478]
[134.26217651 122.32966614]
[127.07741547 130.64840698]
[117.93657684 136.75309753]
[107.50000000 140.20274353]
[107.50000000 155.20274353]
[107.50000000 170.20274353]
[107.50000000 185.20274353]
[107.50000000 200.20274353]
[107.50000000 215.20274353]
[107.50000000 230.20274353]
[107.50000000 245.20274353]
[107.50000000 260.20275879]
[107.50000000 275.20275879]
[122.11001587 278.94418335]
[135.33016968 286.20214844]
[146.32945251 296.52044678]
[154.41641235 309.25039673]
[159.08271790 323.59182739]
[160.03503418 338.64318848]
[157.21350098 353.45837402]
[150.79547119 367.10607910]
[141.18440247 378.72839355]
[128.98443604 387.59472656]
[114.96250153 393.14773560]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 55]
[25 54]
[26 53]
[27 52]
[28 51]
[30 48]
[31 47]
[59 124]
[60 123]
[61 122]
[62 121]
[63 119]
[64 118]
[65 117]
[66 116]
[67 115]
[83 99]
[84 98]
[85 97]
[86 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
