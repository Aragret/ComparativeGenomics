%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAAACACAGGGGGGGGGGUCUCUGCCAAACCCCAAAAACAAAGAACCCUAACACCAGCCUAACCAGAUxxxxxxxxxxAUAAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCACAUUAGGCCCCCCCCCCCUUAAAAACA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 357.44403076]
[71.19830322 351.42800903]
[59.48964310 341.89859009]
[50.78712082 329.56292725]
[45.73651886 315.33639526]
[44.71262741 300.27471924]
[47.79142761 285.49557495]
[54.74444962 272.09564209]
[65.05573273 261.06930542]
[77.96011353 253.23480225]
[92.50000000 249.17347717]
[92.50000000 234.17347717]
[92.50000000 219.17347717]
[92.50000000 204.17347717]
[92.50000000 189.17347717]
[92.50000000 174.17347717]
[92.50000000 159.17347717]
[92.50000000 144.17347717]
[92.50000000 129.17347717]
[92.50000000 114.17348480]
[80.99819946 104.54495239]
[66.23213959 107.18382263]
[51.46608734 109.82268524]
[39.24232483 119.86709595]
[25.35237122 114.48950958]
[10.58631611 117.12837219]
[7.36473703 131.98400879]
[-1.30072677 144.47312927]
[-14.08865452 152.69123840]
[-29.04898071 155.38513184]
[-43.90036392 152.14401245]
[-56.37807846 143.46212769]
[-64.57936096 130.66340637]
[-67.25357056 115.69954681]
[-63.99291992 100.85243988]
[-55.29462814 88.38615417]
[-42.48512268 80.20172119]
[-27.51776123 77.54719543]
[-12.67495728 80.82736969]
[-0.22012877 89.54205322]
[7.94745159 102.36231232]
[22.71350670 99.72344971]
[33.88109970 89.86779022]
[48.82722092 95.05662537]
[63.59327698 92.41776276]
[78.35932922 89.77890015]
[86.77410126 86.66553497]
[94.28025055 87.62894440]
[99.28162384 91.55300903]
[107.53391266 79.02704620]
[115.78620148 66.50108337]
[124.03849030 53.97512436]
[132.29078674 41.44916153]
[123.75130463 22.64972878]
[128.15037537 2.61614895]
[143.57295227 -10.69673538]
[163.76054382 -12.10367966]
[170.66754150 -25.41883469]
[177.57455444 -38.73398972]
[184.48155212 -52.04914474]
[171.55664062 -44.43685532]
[157.38270569 -39.52772903]
[142.51832581 -37.51523590]
[127.54930115 -38.47868729]
[113.06555176 -42.38011551]
[99.63789368 -49.06576157]
[87.79549408 -58.27214813]
[78.00506592 -69.63645935]
[70.65244293 -82.71082306]
[66.02739716 -96.97998047]
[64.31218719 -111.88159180]
[65.57442474 -126.82839203]
[69.76435852 -141.23132324]
[76.71686554 -154.52276611]
[86.15795135 -166.17892456]
[97.71553040 -175.74043274]
[110.93414307 -182.83044434]
[125.29283142 -187.16957092]
[140.22573853 -188.58680725]
[155.14433289 -187.02627563]
[169.46070862 -182.54951477]
[182.61064148 -175.33291626]
[194.07591248 -165.66091919]
[203.40466309 -153.91465759]
[210.22924805 -140.55708313]
[214.28071594 -126.11458588]
[215.39941406 -111.15635681]
[213.54122925 -96.27189636]
[208.77940369 -82.04779816]
[201.30285645 -69.04635620]
[214.54544067 -76.09149170]
[227.78802490 -83.13662720]
[240.56538391 -90.99405670]
[252.82775879 -99.63317108]
[265.09011841 -108.27228546]
[277.35247803 -116.91140747]
[283.74530029 -132.01319885]
[300.05126953 -133.75895691]
[309.49618530 -120.35279846]
[302.36398315 -105.58582306]
[285.99160767 -104.64903259]
[273.72924805 -96.00991821]
[261.46685791 -87.37080383]
[249.20449829 -78.73168945]
[263.65093994 -74.69428253]
[271.17834473 -61.71977234]
[267.51303101 -47.17448044]
[254.73597717 -39.31656265]
[240.10140991 -42.60737610]
[231.91816711 -55.17855072]
[234.83316040 -69.89404297]
[221.59057617 -62.84890747]
[208.34799194 -55.80377579]
[197.79670715 -45.14214706]
[190.88970947 -31.82699203]
[183.98271179 -18.51183701]
[177.07569885 -5.19668102]
[183.49000549 2.25694585]
[187.34826660 11.33428383]
[188.26919556 21.18428421]
[186.14775085 30.87748718]
[181.16688538 39.49372101]
[173.78181458 46.20944977]
[164.67855835 50.37648392]
[154.71014404 51.58451843]
[144.81674194 49.70145035]
[136.56445312 62.22741318]
[128.31216431 74.75337219]
[120.05987549 87.27933502]
[111.80758667 99.80529785]
[107.50000000 114.17348480]
[107.50000000 129.17347717]
[107.50000000 144.17347717]
[107.50000000 159.17347717]
[107.50000000 174.17347717]
[107.50000000 189.17347717]
[107.50000000 204.17347717]
[107.50000000 219.17347717]
[107.50000000 234.17347717]
[107.50000000 249.17347717]
[122.03988647 253.23480225]
[134.94427490 261.06930542]
[145.25555420 272.09564209]
[152.20857239 285.49557495]
[155.28736877 300.27471924]
[154.26348877 315.33639526]
[149.21287537 329.56292725]
[140.51036072 341.89859009]
[128.80169678 351.42800903]
[114.95575714 357.44403076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 46]
[22 45]
[23 44]
[25 42]
[26 41]
[49 130]
[50 129]
[51 128]
[52 127]
[53 126]
[57 117]
[58 116]
[59 115]
[60 114]
[90 113]
[91 112]
[92 111]
[93 104]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
