%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCUUAGCCGGGGGGGGGGUAGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGxxxxxxxxxxUAUCUGAACACACAAUAGCUAAGACCCAAACUGGGAUUAGAUACCCCACUCCCCCCCCCCAUGCUUAGCC\
) } def
/len { sequence length } bind def

/coor [
[105.10812378 371.96875000]
[91.26218414 365.95272827]
[79.55352020 356.42330933]
[70.85099792 344.08764648]
[65.80039978 329.86111450]
[64.77650452 314.79943848]
[67.85530090 300.02026367]
[74.80832672 286.62036133]
[85.11961365 275.59402466]
[98.02399445 267.75952148]
[112.56388092 263.69818115]
[112.56388092 248.69819641]
[112.56388092 233.69819641]
[112.56388092 218.69819641]
[112.56388092 203.69819641]
[112.56388092 188.69819641]
[112.56388092 173.69819641]
[112.56388092 158.69819641]
[112.56388092 143.69819641]
[112.56388092 128.69819641]
[106.86336517 123.82437134]
[95.46234894 114.07672119]
[89.76183319 109.20288849]
[74.94407654 111.53399658]
[69.18234253 126.99947357]
[56.49225998 137.40415955]
[40.38242722 139.99324036]
[25.24602890 134.15615845]
[15.16282082 121.56725311]
[0.39676565 124.20612335]
[-14.36928940 126.84498596]
[-26.55177689 137.82310486]
[-42.06471634 132.50514221]
[-44.94972610 116.36175537]
[-32.23895264 105.99988556]
[-17.00815392 112.07893372]
[-2.24209857 109.44006348]
[12.52395725 106.80120087]
[16.32412910 93.64756775]
[25.47516251 83.37441254]
[38.22597504 78.03358459]
[52.09922791 78.72481537]
[64.37259674 85.36977386]
[72.61297607 96.71623993]
[87.43073273 94.38513184]
[99.78230286 85.87404633]
[107.23721313 72.85773468]
[114.69212341 59.84142303]
[122.14703369 46.82511520]
[112.91983032 34.77793884]
[109.01848602 20.15526772]
[111.00742340 5.19338942]
[118.55267334 -7.83184481]
[130.47752380 -16.95120239]
[144.94590759 -20.79977417]
[159.74504089 -18.82118797]
[167.19995117 -31.83749771]
[172.39537048 -45.90901566]
[175.18769836 -60.64682388]
[177.98001099 -75.38462830]
[180.77233887 -90.12243652]
[183.56466675 -104.86023712]
[169.47515869 -110.11321259]
[156.47615051 -117.67191315]
[144.94166565 -127.31885529]
[135.20355225 -138.77648926]
[127.54202271 -151.71514893]
[122.17749023 -165.76255798]
[119.26431274 -180.51455688]
[118.88630676 -195.54669189]
[121.05435181 -210.42646790]
[125.70606995 -224.72573853]
[132.70761108 -238.03312683]
[141.85754395 -249.96572876]
[152.89259338 -260.18020630]
[165.49525452 -268.38269043]
[179.30294800 -274.33718872]
[193.91836548 -277.87234497]
[208.92102051 -278.88644409]
[223.87924194 -277.35037231]
[238.36265564 -273.30825806]
[251.95454407 -266.87640381]
[264.26385498 -258.23989868]
[274.93640137 -247.64723206]
[283.66513062 -235.40315247]
[290.19888306 -221.85997009]
[294.34967041 -207.40733337]
[295.99810791 -192.46105957]
[295.09671021 -177.45121765]
[291.67144775 -162.80964661]
[285.82086182 -148.95762634]
[277.71325684 -136.29370117]
[267.58197021 -125.18222809]
[255.71842957 -115.94291687]
[242.46403503 -108.84160614]
[228.20008850 -104.08260345]
[213.33702087 -101.80284882]
[198.30247498 -102.06791687]
[195.51014709 -87.33010864]
[192.71781921 -72.59230804]
[189.92550659 -57.85449982]
[187.13317871 -43.11669159]
[192.29678345 -37.67728043]
[202.62397766 -26.79845428]
[207.78758240 -21.35904121]
[222.65063477 -23.38137627]
[237.51367188 -25.40371132]
[252.37672424 -27.42604637]
[267.25607300 -35.55265045]
[279.18408203 -23.50447083]
[270.90875244 -8.70733166]
[254.39906311 -12.56299877]
[239.53601074 -10.54066372]
[224.67297363 -8.51832962]
[209.80992126 -6.49599504]
[199.47135925 -7.96213913]
[190.79098511 -11.83709526]
[184.26231384 -17.53598976]
[180.21626282 -24.38258743]
[172.76135254 -11.36627769]
[181.95622253 0.39737472]
[185.95761108 14.82423878]
[184.12571716 29.72420692]
[176.70883179 42.82295609]
[164.81004333 52.10910416]
[150.22338867 56.14303207]
[135.16334534 54.28002548]
[127.70843506 67.29633331]
[120.25352478 80.31264496]
[112.79861450 93.32895660]
[127.56388092 128.69819641]
[127.56388092 143.69819641]
[127.56388092 158.69819641]
[127.56388092 173.69819641]
[127.56388092 188.69819641]
[127.56388092 203.69819641]
[127.56388092 218.69819641]
[127.56388092 233.69819641]
[127.56388092 248.69819641]
[127.56388092 263.69818115]
[142.10375977 267.75952148]
[155.00814819 275.59402466]
[165.31942749 286.62036133]
[172.27244568 300.02026367]
[175.35125732 314.79943848]
[174.32736206 329.86111450]
[169.27676392 344.08764648]
[160.57423401 356.42330933]
[148.86557007 365.95272827]
[135.01963806 371.96875000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 45]
[24 44]
[29 38]
[30 37]
[31 36]
[46 130]
[47 129]
[48 128]
[49 127]
[56 120]
[57 119]
[58 102]
[59 101]
[60 100]
[61 99]
[62 98]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
