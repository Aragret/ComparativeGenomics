%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGACUAACAGGGGGGGGGGCCCUUAAUUCCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACxxxxxxxxxxCGACCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCCCCCCCCCCCAUGUCUAACA\
) } def
/len { sequence length } bind def

/coor [
[28.67413712 392.09155273]
[16.92854691 382.66525269]
[7.48428917 370.93408203]
[0.78309143 357.44677734]
[-2.86161995 342.83410645]
[-3.27937531 327.77954102]
[-0.45063531 312.98724365]
[5.49229479 299.14904785]
[14.27145290 286.91220093]
[25.47622299 276.84902954]
[38.58253479 269.43023682]
[52.97738647 265.00277710]
[51.74677658 250.05334473]
[50.51616287 235.10391235]
[49.28554916 220.15447998]
[48.05493927 205.20504761]
[46.82432556 190.25559998]
[45.59371185 175.30616760]
[44.36310196 160.35673523]
[43.13248825 145.40730286]
[41.90187454 130.45787048]
[40.67126465 115.50843811]
[34.58408737 129.21778870]
[34.57175827 144.21777344]
[29.30768204 158.26376343]
[19.45843124 169.57713318]
[6.27118587 176.72531128]
[-8.58420181 178.80316162]
[-23.22664452 175.54756165]
[-35.80201721 167.37077332]
[-44.71794510 155.30818176]
[-48.84543610 140.88722229]
[-47.66183853 125.93399048]
[-41.31702805 112.34195709]
[-30.61442566 101.83223724]
[-16.90926552 95.73563385]
[-1.93698502 94.82414246]
[12.40514851 99.21247101]
[27.29703712 97.41478729]
[13.36632061 91.85285187]
[-0.56439573 86.29091644]
[-14.49511147 80.72897339]
[-28.42582893 75.16703796]
[-42.35654449 69.60510254]
[-56.77828217 76.06954193]
[-71.51708984 70.36488342]
[-77.82869720 55.87560654]
[-71.96852875 41.19793320]
[-57.41333008 35.03987503]
[-42.79843521 41.05489349]
[-36.79460526 55.67438507]
[-22.86389160 61.23632050]
[-8.93317509 66.79825592]
[4.99754143 72.36019897]
[18.92825699 77.92213440]
[32.85897446 83.48406982]
[37.73860931 77.78853607]
[32.75299454 63.64132309]
[47.49788666 66.39746094]
[52.37752151 60.70192337]
[44.74455261 47.78922653]
[30.20110321 40.21162033]
[29.76219940 23.81834793]
[43.87934875 15.47340107]
[58.03003693 23.76134682]
[57.65724945 40.15625763]
[65.29022217 53.06895447]
[80.08830261 50.61602783]
[83.14669800 35.93112946]
[86.20509338 21.24623108]
[72.72832489 14.46100712]
[61.46756363 4.41821623]
[53.19058228 -8.19740772]
[48.46171570 -22.52570915]
[47.60338593 -37.58976364]
[50.67412186 -52.36247253]
[57.46454620 -65.83661652]
[67.51168823 -77.09349823]
[80.13050079 -85.36560822]
[94.46063232 -90.08894348]
[109.52501678 -90.94145966]
[124.29653931 -87.86502075]
[137.76805115 -81.06938934]
[149.02105713 -71.01790619]
[157.28829956 -58.39589691]
[162.00610352 -44.06394577]
[162.85279846 -28.99923515]
[159.77066040 -14.22889996]
[152.96981812 -0.76000506]
[142.91400146 10.48911667]
[130.28878784 18.75148201]
[115.95502472 23.46374893]
[100.88999176 24.30462646]
[97.83159637 38.98952484]
[94.77320099 53.67442322]
[112.55250549 61.05006790]
[123.64491272 73.88921356]
[127.07212830 88.20780945]
[141.89460754 85.90692902]
[156.71710205 83.60605621]
[166.04733276 71.13270569]
[181.11221313 69.01044464]
[192.94615173 77.98226929]
[207.76863098 75.68138885]
[222.59111023 73.38051605]
[227.48054504 58.87699890]
[238.55804443 48.31539536]
[253.27809143 44.12268448]
[268.25811768 47.26231766]
[280.05584717 57.01283646]
[285.96020508 71.13363647]
[284.61444092 86.37986755]
[276.32778931 99.24805450]
[263.00448608 106.78118134]
[247.70610046 107.24819183]
[233.94810486 100.54176331]
[224.89198303 88.20300293]
[210.06950378 90.50387573]
[195.24702454 92.80474854]
[186.68980408 104.94186401]
[171.69047546 107.48643494]
[159.01797485 98.42853546]
[144.19548035 100.72941589]
[129.37300110 103.03028870]
[118.67618561 129.86729431]
[85.95401764 138.43661499]
[55.62069702 114.27782440]
[56.85131073 129.22726440]
[58.08192062 144.17669678]
[59.31253433 159.12612915]
[60.54314804 174.07556152]
[61.77375793 189.02499390]
[63.00437164 203.97442627]
[64.23498535 218.92385864]
[65.46559906 233.87330627]
[66.69621277 248.82273865]
[67.92681885 263.77215576]
[82.85191345 265.78604126]
[96.99497986 270.96173096]
[109.69453430 279.05712891]
[120.35659027 289.69360352]
[128.48245239 302.37368774]
[133.69207764 316.50427246]
[135.74180603 331.42449951]
[134.53573608 346.43646240]
[130.13031006 360.83807373]
[122.73156738 373.95571899]
[112.68555450 385.17587280]
[100.46215057 393.97375488]
[86.63306427 399.93783569]
[71.84510040 402.78918457]
[56.78992844 402.39447021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[39 56]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[60 67]
[61 66]
[68 95]
[69 94]
[70 93]
[98 124]
[99 123]
[100 122]
[103 119]
[104 118]
[105 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
