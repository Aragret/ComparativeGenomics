%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGUAAUACCCAGGGGGGGGGGUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCxxxxxxxxxxCUCUACCUGCACGACAACACAUAAUGACCCACCAAUCACAUGCCUAUCAUCCCCCCCCCCAUAGUAAAACCCA\
) } def
/len { sequence length } bind def

/coor [
[101.27521515 502.40463257]
[87.00344849 497.59518433]
[74.09946442 489.82980347]
[63.16680908 479.47167969]
[54.71681976 467.00524902]
[49.14472580 453.01361084]
[46.71113586 438.15118408]
[47.52987671 423.11309814]
[51.56265259 408.60272217]
[58.62084579 395.29873657]
[68.37432861 383.82339478]
[80.36692047 374.71340942]
[94.03769684 368.39486694]
[108.74725342 365.16329956]
[108.74725342 350.16329956]
[108.74725342 335.16329956]
[108.74725342 320.16329956]
[108.74725342 305.16329956]
[108.74725342 290.16329956]
[108.74725342 275.16329956]
[108.74725342 260.16329956]
[108.74725342 245.16331482]
[108.74725342 230.16331482]
[96.36534119 218.81967163]
[95.98410797 201.69432068]
[108.32500458 189.33369446]
[108.02487183 174.33670044]
[107.72473907 159.33970642]
[105.39641571 156.62176514]
[104.29867554 152.62138367]
[105.02858734 147.94345093]
[107.88381958 143.44017029]
[108.48396301 128.45217896]
[64.98477936 110.83850861]
[50.70049667 106.26038361]
[36.41621399 101.68225861]
[32.08669281 102.79422760]
[28.04607964 102.46870422]
[24.71945763 100.98110962]
[22.39501762 98.71864319]
[21.19909096 96.12451172]
[7.32658434 90.41894531]
[-1.85736620 90.04068756]
[-6.76457548 84.45792389]
[-20.52014351 78.47592926]
[-34.27571106 72.49392700]
[-48.03128052 66.51192474]
[-64.25502014 68.90405273]
[-74.22506714 55.88367462]
[-67.68508148 40.84503555]
[-51.36285019 39.25859833]
[-42.04928207 52.75635529]
[-28.29371262 58.73835754]
[-14.53814316 64.72035980]
[-0.78257477 70.70236206]
[13.03215504 76.54644012]
[26.90466309 82.25200653]
[40.99433899 87.39797974]
[55.27862167 91.97610474]
[69.56290436 96.55422974]
[75.87599182 92.50516510]
[64.27252960 82.99939728]
[69.72740173 69.02641296]
[84.70214844 69.89643860]
[88.50216675 84.40702820]
[94.81525421 80.35796356]
[96.61184692 65.46594238]
[98.40843201 50.57392502]
[96.32211304 41.62209320]
[100.39285278 35.40301132]
[102.48706055 20.54992104]
[104.58126068 5.69682932]
[90.89368439 -0.71734530]
[79.70593262 -10.88227272]
[72.01282501 -23.89409447]
[68.49842072 -38.59580612]
[69.47521973 -53.68014526]
[74.85636139 -67.80582428]
[84.16336823 -79.71678925]
[96.56865692 -88.35392761]
[110.96916199 -92.94923401]
[126.08439636 -93.09410095]
[140.57032776 -88.77564240]
[153.13888550 -80.37784576]
[162.67247009 -68.64745331]
[168.32336426 -54.62750626]
[169.58908081 -39.56465912]
[166.35710144 -24.79828835]
[158.91479492 -11.64140987]
[147.92393494 -1.26392305]
[134.36180115 5.41141272]
[119.43434906 7.79103088]
[117.34014893 22.64412117]
[115.24594879 37.49721146]
[113.30045319 52.37051392]
[111.50386810 67.26253510]
[109.70727539 82.15455627]
[115.08956909 87.37767029]
[121.69810486 73.91189575]
[136.54696655 76.03585815]
[139.11549377 90.81431580]
[125.85414886 97.82390594]
[131.23643494 103.04701996]
[146.06784058 100.80432129]
[160.89923096 98.56162262]
[169.19683838 88.63907623]
[181.63542175 87.10240936]
[191.44810486 94.23589325]
[206.32141113 92.29039764]
[221.19470215 90.34490967]
[228.49160767 76.65057373]
[242.45895386 69.89092255]
[257.72601318 72.66518402]
[268.42230225 83.90659332]
[270.43484497 99.29260254]
[262.98980713 112.90697479]
[248.94996643 119.51470184]
[233.71389771 116.57498932]
[223.14019775 105.21820831]
[208.26689148 107.16369629]
[193.39360046 109.10919189]
[180.09269714 120.52042389]
[163.14192200 113.39301300]
[148.31053162 115.63571930]
[133.47914124 117.87841797]
[123.47195435 129.05232239]
[122.87181091 144.04031372]
[122.72174072 159.03956604]
[123.02187347 174.03656006]
[123.32199860 189.03355408]
[134.06704712 197.21044922]
[138.06512451 209.90321350]
[134.06494141 222.39079285]
[123.74725342 230.16331482]
[123.74725342 245.16331482]
[123.74725342 260.16329956]
[123.74725342 275.16329956]
[123.74725342 290.16329956]
[123.74725342 305.16329956]
[123.74725342 320.16329956]
[123.74725342 335.16329956]
[123.74725342 350.16329956]
[123.74725342 365.16329956]
[138.45681763 368.39486694]
[152.12759399 374.71340942]
[164.12017822 383.82339478]
[173.87365723 395.29873657]
[180.93185425 408.60272217]
[184.96463013 423.11309814]
[185.78337097 438.15118408]
[183.34977722 453.01361084]
[177.77767944 467.00524902]
[169.32769775 479.47167969]
[158.39505005 489.82980347]
[145.49105835 497.59518433]
[131.21929932 502.40463257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[26 130]
[27 129]
[28 128]
[32 127]
[33 126]
[34 60]
[35 59]
[36 58]
[41 57]
[42 56]
[44 55]
[45 54]
[46 53]
[47 52]
[66 97]
[67 96]
[68 95]
[70 94]
[71 93]
[72 92]
[103 125]
[104 124]
[105 123]
[108 121]
[109 120]
[110 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
