%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUCACCACGGGGGGGGGGGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUxxxxxxxxxxGACUUCUAACAGCCCUAGACCUCAACUACCUAACCAACAAACUUAAAAUACCCCCCCCCCAAAUCCCCAC\
) } def
/len { sequence length } bind def

/coor [
[108.70641327 498.66693115]
[94.86047363 492.65090942]
[83.15181732 483.12149048]
[74.44928741 470.78582764]
[69.39868927 456.55929565]
[68.37479401 441.49761963]
[71.45359802 426.71844482]
[78.40661621 413.31851196]
[88.71790314 402.29220581]
[101.62228394 394.45767212]
[116.16217041 390.39636230]
[116.16217041 375.39636230]
[116.16217041 360.39636230]
[116.16217041 345.39636230]
[116.16217041 330.39636230]
[116.16217041 315.39636230]
[116.16217041 300.39636230]
[116.16217041 285.39636230]
[116.16217041 270.39636230]
[116.16217041 255.39637756]
[108.42487335 242.66909790]
[116.16217041 228.86892700]
[116.16217041 213.86892700]
[103.78141022 202.52984619]
[103.39333344 185.40870667]
[115.72318268 173.04293823]
[115.41112518 158.04618835]
[112.00814819 143.43730164]
[105.66101837 129.84634399]
[99.31388855 116.25539398]
[88.59341431 111.60165405]
[83.75857544 100.96162415]
[87.30408478 89.82540894]
[77.67556000 78.32360840]
[65.23611450 69.94146729]
[52.79667664 61.55932236]
[40.35723495 53.17718124]
[24.81059837 61.25170135]
[7.40235949 60.38414764]
[-7.11607695 50.90081024]
[-14.82721901 35.46734619]
[-13.70437813 18.34007263]
[-26.48173523 10.48264599]
[-39.25909424 2.62522054]
[-52.00667953 4.85072708]
[-62.50254059 -2.00900316]
[-65.38891602 -13.79781723]
[-78.00004578 -21.91935921]
[-90.61117554 -30.04090118]
[-107.00833893 -30.29581451]
[-114.74867249 -44.75331116]
[-105.86958313 -58.54076385]
[-89.50511932 -57.47481537]
[-82.48963165 -42.65203094]
[-69.87850189 -34.53048706]
[-57.26737595 -26.40894508]
[-39.74640656 -26.53338242]
[-31.40166664 -10.15213680]
[-18.62430954 -2.29471111]
[-5.84695196 5.56271458]
[4.61683893 -1.64205706]
[17.07885361 -4.34226561]
[29.67867851 -2.09837103]
[40.52145767 4.78834295]
[47.96286392 15.31567383]
[50.85840988 27.92621994]
[48.73937988 40.73773956]
[61.17882156 49.11988068]
[73.61826324 57.50202560]
[86.05770111 65.88417053]
[79.87231445 52.21884918]
[76.70909882 37.55617523]
[76.71044922 22.55617332]
[79.87629700 7.89406681]
[86.06414795 -5.77013874]
[94.99545288 -17.82135773]
[106.26816559 -27.71710777]
[119.37486267 -35.01194000]
[133.72554016 -39.37747955]
[148.67422485 -40.61721039]
[163.54798889 -38.67533493]
[177.67732239 -33.63925934]
[190.42619324 -25.73568344]
[201.22070312 -15.32037926]
[209.57495117 -2.86218810]
[215.11286926 11.07809067]
[217.58518982 25.87294197]
[216.88059998 40.85638428]
[213.03083801 55.35394669]
[206.20918274 68.71302795]
[196.72271729 80.33227539]
[184.99845886 89.68865204]
[171.56417847 96.36099243]
[157.02461243 100.04893494]
[142.03424072 100.58647919]
[127.26786804 97.94941711]
[113.39017487 92.25646973]
[101.02413940 83.76239777]
[114.81234741 93.26925659]
[112.90483856 109.90826416]
[119.25196838 123.49921417]
[125.59909821 137.09016418]
[127.24526215 122.18076324]
[132.95141602 108.30850220]
[142.27226257 96.55596924]
[154.48037720 87.84035492]
[168.62303162 82.84181976]
[183.59651184 81.95046997]
[198.23229980 85.23585510]
[211.38819885 92.44158173]
[222.03749084 103.00531769]
[229.34912109 116.10265350]
[232.75247192 130.71145630]
[231.98193359 145.69165039]
[227.09765625 159.87417603]
[218.48080444 172.15219116]
[206.80384827 181.56753540]
[192.97807312 187.38542175]
[178.08242798 189.15180969]
[163.27941895 186.72885132]
[149.72425842 180.30563354]
[138.47482300 170.38343811]
[130.40788269 157.73413086]
[130.71994019 172.73088074]
[141.47500610 180.90316772]
[145.48112488 193.59880066]
[141.48315430 206.09240723]
[131.16217041 213.86892700]
[131.16217041 228.86892700]
[138.89947510 242.66909790]
[131.16217041 255.39637756]
[131.16217041 270.39636230]
[131.16217041 285.39636230]
[131.16217041 300.39636230]
[131.16217041 315.39636230]
[131.16217041 330.39636230]
[131.16217041 345.39636230]
[131.16217041 360.39636230]
[131.16217041 375.39636230]
[131.16217041 390.39636230]
[145.70205688 394.45767212]
[158.60644531 402.29220581]
[168.91772461 413.31851196]
[175.87074280 426.71844482]
[178.94953918 441.49761963]
[177.92565918 456.55929565]
[172.87504578 470.78582764]
[164.17253113 483.12149048]
[152.46386719 492.65090942]
[138.61791992 498.66693115]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[26 124]
[27 123]
[28 102]
[29 101]
[30 100]
[33 98]
[34 70]
[35 69]
[36 68]
[37 67]
[42 60]
[43 59]
[44 58]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
