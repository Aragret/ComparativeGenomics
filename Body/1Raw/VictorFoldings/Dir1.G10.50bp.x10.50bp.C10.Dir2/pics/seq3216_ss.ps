%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAAUUCCUGGGGGGGGGGCUUCUUAACAACAUACCCAUGGCCAACCUCCUACUCCUCAUUGUACCCAUxxxxxxxxxxGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCGGACUAAUCCCCCCCCCCCUUCAACUCCU\
) } def
/len { sequence length } bind def

/coor [
[84.52050018 419.27905273]
[71.30030060 412.00656128]
[60.41349792 401.55957031]
[52.60236740 388.65032959]
[48.39948654 374.15899658]
[48.09141541 359.07366943]
[51.69915771 344.42285156]
[58.97673035 331.20544434]
[69.42794037 320.32269287]
[82.34020233 312.51654053]
[96.83313751 308.31924438]
[96.52108002 293.32250977]
[96.20902252 278.32574463]
[95.89696503 263.32897949]
[95.58490753 248.33222961]
[95.27285767 233.33547974]
[94.96080017 218.33872986]
[94.64874268 203.34197998]
[94.33668518 188.34521484]
[94.02462769 173.34846497]
[86.02423096 160.78491211]
[93.47276306 146.82676697]
[93.16070557 131.83001709]
[84.01377106 128.94172668]
[75.97319031 123.44496918]
[69.77613831 115.74028015]
[66.02005005 106.43428040]
[65.10585785 96.29217529]
[67.19688416 86.17499542]
[72.19766998 76.96643829]
[79.75502014 69.49575806]
[89.28193665 64.46328735]
[80.77085114 52.11171341]
[72.25975800 39.76013947]
[59.75672913 41.09832764]
[47.94810104 36.99264145]
[39.07550812 28.28794670]
[34.79518509 16.69578171]
[35.86901855 4.45806599]
[42.02969360 -6.08644247]
[34.03977585 -18.78137207]
[26.04986000 -31.47630119]
[18.05994415 -44.17123032]
[7.96129417 -55.26254654]
[-3.93108582 -64.40428162]
[-15.82346535 -73.54601288]
[-28.97694016 -65.92665863]
[-44.04562378 -63.92586899]
[-58.73165512 -67.84874725]
[-70.79551697 -77.09707642]
[-78.39756012 -90.26056671]
[-80.37853241 -105.33187103]
[-76.43634033 -120.01272583]
[-67.17214203 -132.06440735]
[-53.99866867 -139.64913940]
[-38.92477417 -141.61027527]
[-24.24911499 -137.64877319]
[-12.20962524 -128.36872864]
[-4.64223957 -115.18529510]
[-2.70093012 -100.10883331]
[-6.68173122 -85.43839264]
[5.21064854 -76.29666138]
[17.10302734 -67.15492249]
[11.87405872 -81.21401215]
[11.40192413 -96.20658112]
[15.73593426 -110.56681824]
[24.42344666 -122.79494476]
[36.55714417 -131.61386108]
[50.86978531 -136.10253906]
[65.86657715 -135.79217529]
[79.98125458 -130.71517944]
[91.73969269 -121.40179443]
[99.91384125 -108.82470703]
[103.65000916 -94.29744720]
[102.55798340 -79.33725739]
[96.75182343 -65.50654602]
[86.83790588 -54.24980164]
[73.85165405 -46.74266434]
[59.14932632 -43.76917648]
[44.26643372 -45.63988495]
[30.75487328 -52.16114807]
[38.74478912 -39.46621704]
[46.73470688 -26.77128792]
[54.72462082 -14.07635880]
[72.33042145 -13.75445366]
[86.37200165 -2.87168074]
[91.15934753 14.39863205]
[84.61132812 31.24905014]
[93.12242126 43.60062408]
[101.63351440 55.95219421]
[116.31003571 59.05051804]
[129.08738708 51.19309235]
[141.86474609 43.33566666]
[154.64210510 35.47824097]
[167.41946411 27.62081528]
[167.62301636 12.19479370]
[176.15322876 -0.65973437]
[190.28816223 -6.84093714]
[205.51739502 -4.37641525]
[216.98135376 5.94741154]
[221.02191162 20.83624840]
[216.34974670 35.53911972]
[204.45573425 45.36439514]
[189.13520813 47.17686081]
[175.27688599 40.39817047]
[162.49952698 48.25559616]
[149.72218323 56.11302185]
[136.94482422 63.97044754]
[124.16746521 71.82787323]
[131.07406616 84.25099945]
[132.46148682 97.51454163]
[147.27925110 99.84564972]
[162.09700012 102.17675018]
[176.93194580 96.67809296]
[188.30215454 106.29930115]
[204.88848877 102.78793335]
[212.85418701 117.75402832]
[200.67810059 129.55145264]
[185.97105408 121.11705780]
[172.19598389 126.78244781]
[159.76589966 116.99450684]
[144.94813538 114.66340637]
[130.13038635 112.33229828]
[126.48273468 118.93648529]
[121.41289520 124.52373505]
[115.19313049 128.79400635]
[108.15745544 131.51795959]
[108.46951294 146.51470947]
[116.49223328 160.15092468]
[109.02138519 173.03640747]
[109.33344269 188.03317261]
[109.64549255 203.02992249]
[109.95755005 218.02667236]
[110.26960754 233.02342224]
[110.58166504 248.02018738]
[110.89372253 263.01693726]
[111.20578003 278.01370239]
[111.51782990 293.01043701]
[111.82988739 308.00720215]
[126.48487854 311.59796143]
[139.71069336 318.86022949]
[150.60556030 329.29882812]
[158.42665100 342.20202637]
[162.64073181 356.69009399]
[162.96044922 371.77517700]
[159.36402893 386.42880249]
[152.09666443 399.65179443]
[141.65385437 410.54263306]
[128.74761963 418.35876465]
[114.25793457 422.56723022]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 128]
[23 127]
[32 90]
[33 89]
[34 88]
[40 84]
[41 83]
[42 82]
[43 81]
[44 63]
[45 62]
[46 61]
[91 109]
[92 108]
[93 107]
[94 106]
[95 105]
[111 123]
[112 122]
[113 121]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
