%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAUUAACCUGGGGGGGGGGUCCCUCUACACUUAUCAUCUUCACAAUUCUAAUUCUACUGACUAUCCUAGxxxxxxxxxxUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCCCCCCCCCCCACUAUUAACCU\
) } def
/len { sequence length } bind def

/coor [
[53.03532410 157.19583130]
[42.48379898 146.57177734]
[34.28672791 134.04127502]
[28.77965546 120.11729431]
[26.18801880 105.36980438]
[26.61791039 90.40249634]
[30.05172920 75.82806396]
[36.34891129 62.24311829]
[45.25167847 50.20376968]
[56.39559174 40.20285034]
[69.32447052 32.64975739]
[83.50907135 27.85367393]
[81.66574097 12.96736622]
[79.82241821 -1.91894162]
[77.97909546 -16.80525017]
[76.13577271 -31.69155693]
[74.29244995 -46.57786560]
[72.44911957 -61.46417236]
[70.60579681 -76.35047913]
[68.76247406 -91.23678589]
[66.91915131 -106.12309265]
[65.07582855 -121.00939941]
[50.10079193 -120.06783295]
[35.09622955 -120.03214264]
[20.11688995 -120.90248108]
[5.21742725 -122.67566681]
[-9.54778862 -125.34522247]
[-24.12488174 -128.90141296]
[-38.46066284 -133.33126831]
[-52.50281906 -138.61860657]
[-66.20011139 -144.74414062]
[-79.50256348 -151.68553162]
[-92.36164093 -159.41744995]
[-104.73040771 -167.91166687]
[-116.56373596 -177.13719177]
[-127.81845093 -187.06037903]
[-138.45349121 -197.64500427]
[-148.43003845 -208.85243225]
[-157.71168518 -220.64179993]
[-166.26458740 -232.97006226]
[-174.05751038 -245.79225159]
[-181.06202698 -259.06158447]
[-187.25257874 -272.72961426]
[-192.60659790 -286.74649048]
[-197.10450745 -301.06103516]
[-200.72991943 -315.62109375]
[-203.46960449 -330.37344360]
[-205.31356812 -345.26431274]
[-206.25506592 -360.23934937]
[-206.29067993 -375.24389648]
[-205.42027283 -390.22323608]
[-203.64703369 -405.12271118]
[-200.97740173 -419.88790894]
[-197.42114258 -434.46499634]
[-192.99122620 -448.80075073]
[-187.70382690 -462.84286499]
[-181.57821655 -476.54013062]
[-174.63676453 -489.84255981]
[-166.90478516 -502.70159912]
[-158.41052246 -515.07031250]
[-149.18493652 -526.90362549]
[-139.26170349 -538.15826416]
[-128.67703247 -548.79327393]
[-117.46954346 -558.76977539]
[-105.68013763 -568.05139160]
[-93.35183716 -576.60418701]
[-80.52960968 -584.39709473]
[-67.26026154 -591.40155029]
[-53.59219742 -597.59204102]
[-39.57529831 -602.94598389]
[-25.26070786 -607.44378662]
[-10.70065880 -611.06915283]
[4.05171871 -613.80877686]
[18.94259644 -615.65264893]
[33.91763687 -616.59411621]
[48.92219925 -616.62963867]
[63.90153122 -615.75915527]
[78.80097961 -613.98583984]
[93.56616974 -611.31616211]
[108.14322662 -607.75982666]
[122.47896576 -603.32983398]
[136.52107239 -598.04235840]
[150.21830750 -591.91668701]
[163.52070618 -584.97521973]
[176.37969971 -577.24316406]
[188.74839783 -568.74884033]
[200.58163452 -559.52319336]
[211.83625793 -549.59991455]
[222.47119141 -539.01519775]
[232.44764709 -527.80767822]
[241.72918701 -516.01818848]
[250.28196716 -503.68984985]
[258.07476807 -490.86761475]
[265.07916260 -477.59820557]
[271.26959229 -463.93011475]
[276.62347412 -449.91320801]
[281.12124634 -435.59860229]
[284.74655151 -421.03851318]
[287.48608398 -406.28613281]
[289.32989502 -391.39526367]
[290.27127075 -376.42019653]
[290.30676270 -361.41564941]
[289.43618774 -346.43630981]
[287.66281128 -331.53686523]
[284.99304199 -316.77169800]
[281.43664551 -302.19464111]
[277.00662231 -287.85894775]
[271.71908569 -273.81686401]
[265.59335327 -260.11962891]
[258.65176392 -246.81729126]
[250.91967773 -233.95832825]
[242.42527771 -221.58967590]
[233.19958496 -209.75646973]
[223.27624512 -198.50189209]
[212.69148254 -187.86700439]
[201.48390198 -177.89060974]
[189.69441223 -168.60911560]
[177.36602783 -160.05639648]
[164.54373169 -152.26365662]
[151.27432251 -145.25932312]
[137.60620117 -139.06895447]
[123.58924866 -133.71513367]
[109.27462006 -129.21742249]
[94.71453857 -125.59220886]
[79.96213531 -122.85272980]
[81.80545807 -107.96642303]
[83.64878082 -93.08010864]
[85.49210358 -78.19380188]
[87.33542633 -63.30749512]
[89.17875671 -48.42118835]
[91.02207947 -33.53488159]
[92.86540222 -18.64857292]
[94.70872498 -3.76226592]
[96.55205536 11.12404156]
[98.39537811 26.01034927]
[113.32138062 27.20175934]
[127.70207214 31.37319565]
[140.94877625 38.35390091]
[152.51921082 47.85811615]
[161.93975830 59.49678421]
[168.82476807 72.79346466]
[172.89239502 87.20386505]
[173.97615051 102.13807678]
[172.03166199 116.98476410]
[167.13853455 131.13616943]
[159.49703979 144.01300049]
[149.42002869 155.08815002]
[137.31997681 163.90823364]
[123.69221497 170.11221313]
[109.09459686 173.44610596]
[94.12469482 173.77346802]
[79.39530182 171.08087158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[21 126]
[22 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
