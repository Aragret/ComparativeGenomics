%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUAAUAAGGGGGGGGGGCAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAxxxxxxxxxxUCCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUUCCCCCCCCCCAUACUAAUAA\
) } def
/len { sequence length } bind def

/coor [
[105.47260284 365.79528809]
[91.62666321 359.77926636]
[79.91800690 350.24984741]
[71.21547699 337.91415405]
[66.16487885 323.68765259]
[65.14098358 308.62597656]
[68.21978760 293.84680176]
[75.17280579 280.44686890]
[85.48409271 269.42053223]
[98.38847351 261.58602905]
[112.92835999 257.52471924]
[112.92835999 242.52471924]
[112.92835999 227.52471924]
[112.92835999 212.52471924]
[112.92835999 197.52471924]
[112.92835999 182.52471924]
[112.92835999 167.52471924]
[112.92835999 152.52471924]
[112.92835999 137.52471924]
[112.92835999 122.52471924]
[103.34896851 124.89289856]
[93.91284180 123.48709869]
[86.00310516 118.76348114]
[80.68420410 111.64579010]
[78.56011200 103.35527039]
[63.85215378 100.40979004]
[49.14419174 97.46430969]
[40.04863739 98.85091400]
[34.16232300 94.30152130]
[19.51882172 91.05069733]
[4.87532139 87.79987335]
[-9.76817989 84.54904938]
[-24.41168213 81.29821777]
[-39.05518341 78.04739380]
[-46.94060898 90.97406769]
[-58.59765244 100.63801575]
[-72.76184845 105.99098206]
[-87.89677429 106.45230865]
[-102.36070251 101.97195435]
[-114.58468628 93.03591156]
[-123.24277496 80.61350250]
[-127.39579773 66.05221558]
[-126.59325409 50.93154144]
[-120.92221832 36.89167023]
[-110.99782562 25.45553398]
[-97.89660645 17.86364365]
[-83.03968811 14.93950748]
[-68.03862762 17.00031471]
[-54.52062988 23.82252693]
[-43.95203400 34.66611862]
[-37.47923660 48.35485840]
[-35.80435562 63.40389252]
[-21.16085625 66.65471649]
[-6.51735449 69.90554810]
[8.12614727 73.15637207]
[22.76964760 76.40719604]
[37.41315079 79.65802002]
[52.08967590 82.75634766]
[66.79763794 85.70182800]
[81.50559998 88.64730835]
[87.20958710 81.59541321]
[95.53269196 77.31130981]
[105.16720581 76.73077393]
[114.49076080 80.18557739]
[121.83953094 87.30834961]
[125.80412292 97.05844879]
[137.88410950 88.16609955]
[149.96409607 79.27375031]
[162.04408264 70.38140106]
[154.47824097 57.41258621]
[148.33378601 43.71303177]
[143.68034363 29.43796730]
[140.57063293 14.74913597]
[139.03988647 -0.18702553]
[139.10545349 -15.20127869]
[140.76660156 -30.12350082]
[144.00448608 -44.78461075]
[148.78244019 -59.01848602]
[155.04631042 -72.66384888]
[162.72514343 -85.56608582]
[171.73191833 -97.57900238]
[181.96456909 -108.56649017]
[193.30717468 -118.40404510]
[205.63121033 -126.98019409]
[218.79701233 -134.19778442]
[232.65542603 -139.97500610]
[247.04942322 -144.24642944]
[261.81591797 -146.96362305]
[276.78756714 -148.09584045]
[291.79473877 -147.63020325]
[306.66738892 -145.57203674]
[321.23699951 -141.94462585]
[335.33853149 -136.78907776]
[348.81213379 -130.16383362]
[361.50515747 -122.14392853]
[373.27383423 -112.82025909]
[383.98474121 -102.29845428]
[393.51657104 -90.69773865]
[401.76129150 -78.14956665]
[408.62548828 -64.79610443]
[414.03137207 -50.78866577]
[417.91772461 -36.28596497]
[420.24047852 -21.45232391]
[420.97335815 -6.45582438]
[420.10800171 8.53361416]
[417.65426636 23.34614944]
[413.63989258 37.81394577]
[408.11044312 51.77306747]
[401.12850952 65.06535339]
[392.77322388 77.54018402]
[383.13928223 89.05621338]
[372.33581543 99.48296356]
[360.48522949 108.70227814]
[347.72180176 116.60970306]
[334.19018555 123.11563873]
[320.04367065 128.14636230]
[305.44256592 131.64489746]
[290.55227661 133.57156372]
[275.54159546 133.90457153]
[260.58053589 132.64010620]
[245.83863831 129.79252625]
[231.48294067 125.39408875]
[217.67611694 119.49462128]
[204.57460022 112.16098022]
[192.32684326 103.47625732]
[181.07160950 93.53886414]
[170.93643188 82.46138763]
[158.85644531 91.35373688]
[146.77645874 100.24608612]
[134.69647217 109.13843536]
[127.92835999 122.52471924]
[127.92835999 137.52471924]
[127.92835999 152.52471924]
[127.92835999 167.52471924]
[127.92835999 182.52471924]
[127.92835999 197.52471924]
[127.92835999 212.52471924]
[127.92835999 227.52471924]
[127.92835999 242.52471924]
[127.92835999 257.52471924]
[142.46824646 261.58602905]
[155.37263489 269.42053223]
[165.68391418 280.44686890]
[172.63693237 293.84680176]
[175.71572876 308.62597656]
[174.69184875 323.68765259]
[169.64123535 337.91415405]
[160.93872070 350.24984741]
[149.23005676 359.77926636]
[135.38410950 365.79528809]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 60]
[26 59]
[27 58]
[29 57]
[30 56]
[31 55]
[32 54]
[33 53]
[34 52]
[66 130]
[67 129]
[68 128]
[69 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
