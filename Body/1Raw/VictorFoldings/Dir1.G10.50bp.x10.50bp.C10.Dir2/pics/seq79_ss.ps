%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUCGCAGUAGGGGGGGGGGUCUGUCUUUGAUUCCUGCCUCAUCCUAUUAUUUAUCGCACCUACGUUCAAxxxxxxxxxxUGACUCCCUAAAGCCCAUGUCGAAGCCCCCAUCGCUGGGUCAAUAGUACUCCCCCCCCCCUGCCGCAGUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 379.48336792]
[71.19830322 373.46734619]
[59.48964310 363.93792725]
[50.78712082 351.60223389]
[45.73651886 337.37573242]
[44.71262741 322.31405640]
[47.79142761 307.53488159]
[54.74444962 294.13494873]
[65.05573273 283.10861206]
[77.96011353 275.27410889]
[92.50000000 271.21279907]
[92.50000000 256.21279907]
[92.50000000 241.21279907]
[92.50000000 226.21279907]
[92.50000000 211.21279907]
[92.50000000 196.21279907]
[92.50000000 181.21279907]
[92.50000000 166.21279907]
[92.50000000 151.21279907]
[92.50000000 136.21279907]
[77.21375275 129.12738037]
[66.65718842 115.99605560]
[63.02149963 99.54447937]
[67.06134033 83.18745422]
[55.36172104 73.80028534]
[43.66209793 64.41312408]
[33.03451157 75.02056122]
[21.30450439 84.39447021]
[8.61446857 92.42105865]
[-4.88155222 99.00289917]
[-19.01972771 104.06008911]
[-33.62843323 107.53124237]
[-48.53033447 109.37422180]
[-63.54453278 109.56665802]
[-78.48876953 108.10620117]
[-93.18164062 105.01059723]
[-107.44478607 100.31741333]
[-121.10505676 94.08362579]
[-133.99664307 86.38490295]
[-145.96304321 77.31470490]
[-156.85899353 66.98313141]
[-166.55223083 55.51560211]
[-174.92509460 43.05131912]
[-181.87593079 29.74158859]
[-187.32038879 15.74797726]
[-191.19235229 1.24035537]
[-193.44482422 -13.60516739]
[-194.05047607 -28.60837936]
[-193.00193787 -43.58715820]
[-190.31195068 -58.35966873]
[-186.01316833 -72.74659729]
[-180.15776062 -86.57328796]
[-172.81681824 -99.67190552]
[-164.07943726 -111.88343811]
[-154.05171204 -123.05965424]
[-142.85534668 -133.06488037]
[-130.62626648 -141.77766418]
[-117.51290894 -149.09225464]
[-103.67446899 -154.91983032]
[-89.27892303 -159.18968201]
[-74.50102997 -161.84994507]
[-59.52017212 -162.86834717]
[-44.51820755 -162.23252869]
[-29.67724800 -159.95019531]
[-15.17744350 -156.04904175]
[-1.19481218 -150.57646179]
[12.10091019 -143.59886169]
[24.54832649 -135.20094299]
[35.99633789 -125.48464966]
[46.30597305 -114.56793976]
[55.35208130 -102.58332062]
[63.02485657 -89.67627716]
[69.23115540 -76.00349426]
[73.89563751 -61.73094177]
[76.96167755 -47.03187180]
[78.39206696 -32.08472824]
[78.16943359 -17.07094574]
[76.29648590 -2.17278314]
[72.79595184 12.42891121]
[67.71033478 26.55688477]
[61.10136032 40.03963852]
[53.04925919 52.71350479]
[64.74887848 62.10066605]
[76.44850922 71.48782349]
[91.16722107 64.08901215]
[107.63866425 63.81619644]
[122.59432983 70.72351074]
[133.06649780 83.44029999]
[147.56208801 79.58313751]
[162.05769348 75.72598267]
[170.01496887 62.33496094]
[184.77052307 58.62974930]
[197.48776245 66.29832458]
[211.94245911 62.29058456]
[226.35467529 58.13269806]
[240.76689148 53.97481155]
[255.17910767 49.81692505]
[262.61453247 44.39786148]
[269.93450928 45.72580338]
[277.48107910 40.46259689]
[284.77185059 41.94253540]
[299.34454346 38.38777542]
[313.91726685 34.83301163]
[319.67834473 20.42503738]
[332.82583618 12.18352032]
[348.30429077 13.27749062]
[360.16192627 23.28629494]
[363.83923340 38.36134338]
[357.92221069 52.70597076]
[344.68606567 60.80437851]
[329.22036743 59.54256058]
[317.47201538 49.40571594]
[302.89932251 52.96047592]
[288.32662964 56.51523972]
[273.79168701 60.22140121]
[259.33700562 64.22914124]
[244.92477417 68.38702393]
[230.51255798 72.54491425]
[216.10034180 76.70280457]
[210.50926208 81.61049652]
[201.34492493 80.79392242]
[194.12071228 93.76876068]
[179.47506714 97.88696289]
[165.91485596 90.22157288]
[151.41925049 94.07873535]
[136.92366028 97.93589783]
[136.01889038 108.38191986]
[132.21868896 118.15415192]
[125.82852936 126.46703339]
[117.36210632 132.65232849]
[107.50000000 136.21279907]
[107.50000000 151.21279907]
[107.50000000 166.21279907]
[107.50000000 181.21279907]
[107.50000000 196.21279907]
[107.50000000 211.21279907]
[107.50000000 226.21279907]
[107.50000000 241.21279907]
[107.50000000 256.21279907]
[107.50000000 271.21279907]
[122.03988647 275.27410889]
[134.94427490 283.10861206]
[145.25555420 294.13494873]
[152.20857239 307.53488159]
[155.28736877 322.31405640]
[154.26348877 337.37573242]
[149.21287537 351.60223389]
[140.51036072 363.93792725]
[128.80169678 373.46734619]
[114.95575714 379.48336792]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 84]
[25 83]
[26 82]
[88 126]
[89 125]
[90 124]
[93 121]
[94 119]
[95 118]
[96 117]
[97 116]
[99 115]
[101 114]
[102 113]
[103 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
