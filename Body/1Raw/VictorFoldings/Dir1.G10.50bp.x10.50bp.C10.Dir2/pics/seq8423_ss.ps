%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAUCAUUUGGGGGGGGGGUUAUUGCCACAACUAACCUCCUCGGACUCCUGCCUCACUCAUUUACACCAxxxxxxxxxxAUGGUCCAUCAUAGAAUUCUCACUGUGAUAUAUAAACUCAGACCCAAACACCCCCCCCCCUUAAUCAGUU\
) } def
/len { sequence length } bind def

/coor [
[53.94916534 518.11212158]
[40.10322571 512.09606934]
[28.39456367 502.56665039]
[19.69203949 490.23098755]
[14.64143753 476.00448608]
[13.61754608 460.94277954]
[16.69634438 446.16363525]
[23.64936638 432.76370239]
[33.96065140 421.73736572]
[46.86503220 413.90286255]
[61.40491867 409.84155273]
[61.40491867 394.84155273]
[61.40491867 379.84155273]
[61.40491867 364.84155273]
[61.40491867 349.84155273]
[61.40491867 334.84155273]
[61.40491867 319.84155273]
[61.40491867 304.84155273]
[61.40491867 289.84155273]
[61.40491867 274.84155273]
[61.40491867 259.84155273]
[50.72404480 249.52386475]
[50.51036453 234.31173706]
[61.40491867 223.17860413]
[61.40491867 208.17860413]
[61.40491867 193.17860413]
[53.44530869 205.89256287]
[41.84656525 215.40408325]
[27.82004929 220.71980286]
[12.83068371 221.28454590]
[-1.55605090 217.03933716]
[-13.83761215 208.42752075]
[-22.73132324 196.34854126]
[-27.30832672 182.06388855]
[-27.09060669 167.06547546]
[-22.10090065 152.91970825]
[-12.86032867 141.10395813]
[-0.33397302 132.85226440]
[14.16992283 129.02642822]
[29.13657951 130.02601624]
[43.00288773 135.74662781]
[54.32066345 145.59082031]
[61.90787888 158.53045654]
[64.97226715 173.21713257]
[70.16767883 159.14561462]
[67.31753540 144.52624512]
[79.35575104 134.26019287]
[84.55117035 120.18867493]
[74.07212830 109.30479431]
[71.09888458 93.27841187]
[77.88213348 77.15464783]
[67.00331116 66.82744598]
[51.48743057 68.77462769]
[38.37806320 60.24945831]
[33.86504745 45.27725983]
[40.07929611 30.92744637]
[54.08662796 23.97556114]
[69.27320862 27.70407104]
[78.46839905 40.35248947]
[77.33051300 55.94861984]
[88.20933533 66.27582550]
[103.09262085 64.40821075]
[111.08253479 51.71327972]
[119.07244873 39.01834869]
[127.06237030 26.32342148]
[116.15930939 3.72489095]
[131.37606812 -22.73827934]
[131.68812561 -37.73503113]
[132.00018311 -52.73178482]
[132.31224060 -67.72853851]
[118.88010406 -75.06585693]
[110.40600586 -87.81137085]
[108.83724213 -103.03627014]
[114.53429413 -117.24198151]
[126.18803406 -127.16413116]
[141.12049866 -130.52268982]
[155.90034485 -126.54586792]
[167.13124084 -116.14752960]
[172.23242188 -101.71713257]
[170.03169250 -86.57067108]
[161.03472900 -74.18869019]
[147.30899048 -67.41648102]
[146.99694824 -52.41973114]
[146.68489075 -37.42297745]
[146.37283325 -22.42622375]
[152.99412537 -18.90365601]
[166.23670959 -11.85852051]
[172.85800171 -8.33595276]
[185.12036133 -16.97506905]
[197.38273621 -25.61418533]
[209.64511108 -34.25329971]
[221.90747070 -42.89241791]
[234.16984558 -51.53153229]
[246.43220520 -60.17065048]
[246.52352905 -75.68745422]
[255.74505615 -88.16716003]
[270.55093384 -92.81106567]
[285.24798584 -87.83349609]
[294.18490601 -75.14842224]
[293.92526245 -59.63351822]
[284.56887817 -47.25458145]
[269.71353149 -42.77156830]
[255.07131958 -47.90828323]
[242.80895996 -39.26916504]
[230.54658508 -30.63004875]
[218.28422546 -21.99093246]
[206.02185059 -13.35181713]
[193.75949097 -4.71270084]
[181.49711609 3.92641497]
[177.47648621 21.09425545]
[166.50682068 32.90954208]
[152.54592896 37.24208832]
[139.75729370 34.31333542]
[131.76737976 47.00826645]
[123.77746582 59.70319748]
[115.78754425 72.39812469]
[128.02474976 88.73569489]
[127.44044495 108.09546661]
[115.58364868 122.06785583]
[98.62268829 125.38408661]
[93.42726898 139.45561218]
[95.90579987 155.08146667]
[84.23919678 164.34103394]
[79.04378510 178.41255188]
[76.40492249 193.17860413]
[76.40492249 208.17860413]
[76.40492249 223.17860413]
[87.29946899 234.31173706]
[87.08579254 249.52386475]
[76.40492249 259.84155273]
[76.40492249 274.84155273]
[76.40492249 289.84155273]
[76.40492249 304.84155273]
[76.40492249 319.84155273]
[76.40492249 334.84155273]
[76.40492249 349.84155273]
[76.40492249 364.84155273]
[76.40492249 379.84155273]
[76.40492249 394.84155273]
[76.40492249 409.84155273]
[90.94480896 413.90286255]
[103.84918976 421.73736572]
[114.16046906 432.76370239]
[121.11349487 446.16363525]
[124.19229126 460.94277954]
[123.16840363 476.00448608]
[118.11779785 490.23098755]
[109.41527557 502.56665039]
[97.70661163 512.09606934]
[83.86067200 518.11212158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 127]
[25 126]
[26 125]
[44 124]
[45 123]
[47 121]
[48 120]
[51 61]
[52 60]
[62 116]
[63 115]
[64 114]
[65 113]
[67 85]
[68 84]
[69 83]
[70 82]
[88 109]
[89 108]
[90 107]
[91 106]
[92 105]
[93 104]
[94 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
