%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACUCCUCGGGGGGGGGGAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAxxxxxxxxxxCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCCCCCCCCCCCUACUCCAC\
) } def
/len { sequence length } bind def

/coor [
[72.13092804 382.12753296]
[58.91072845 374.85504150]
[48.02392578 364.40805054]
[40.21279526 351.49880981]
[36.00991440 337.00747681]
[35.70183945 321.92214966]
[39.30958176 307.27133179]
[46.58715439 294.05392456]
[57.03836441 283.17117310]
[69.95062256 275.36502075]
[84.44355774 271.16772461]
[84.13150787 256.17098999]
[83.81945038 241.17422485]
[83.50739288 226.17747498]
[83.19533539 211.18072510]
[82.88327789 196.18395996]
[82.57122040 181.18721008]
[82.25917053 166.19046021]
[81.94711304 151.19371033]
[81.63505554 136.19694519]
[69.74267578 127.05521393]
[55.16997147 130.60998535]
[40.59727097 134.16473389]
[26.02456665 137.71949768]
[11.45186424 141.27426147]
[8.77268314 156.26565552]
[0.22220694 168.86761475]
[-12.71814251 176.89675903]
[-27.80637169 178.96200562]
[-42.42835236 174.70553589]
[-54.05073929 164.86480713]
[-60.65988541 151.14477539]
[-61.11071014 135.92253113]
[-55.32511139 121.83542633]
[-44.30547714 111.32411957]
[-29.96102715 106.20977020]
[-14.77702045 107.37846375]
[-1.38418102 114.62771606]
[7.89710236 126.70156097]
[22.46980476 123.14679718]
[37.04250717 119.59203339]
[51.61521149 116.03727722]
[66.18791199 112.48251343]
[66.73780060 100.84398651]
[70.88559723 90.90075684]
[58.10823822 83.04333496]
[45.33087921 75.18590546]
[32.55352402 67.32848358]
[19.77616501 59.47105408]
[3.11677098 56.32448196]
[1.52859342 39.44508743]
[17.30868530 33.24629211]
[27.63359070 46.69369888]
[40.41094971 54.55112457]
[53.18830490 62.40855026]
[65.96566010 70.26597595]
[78.74301910 78.12339783]
[84.09024048 73.97454834]
[90.22069550 71.10691833]
[96.83258820 69.66170502]
[103.60041046 69.71003723]
[110.19098663 71.24954224]
[116.27985382 74.20443726]
[127.15868378 63.87723160]
[112.48654938 66.99629211]
[97.48741150 66.83580017]
[82.88537598 63.40350723]
[69.38539886 56.86510849]
[57.63922119 47.53626633]
[48.21392059 35.86734772]
[41.56451797 22.42169952]
[38.01203156 7.84844208]
[37.72796631 -7.14886761]
[40.72603607 -21.84619904]
[46.86150360 -35.53400421]
[55.83816528 -47.55147552]
[67.22264862 -57.31843567]
[80.46533966 -64.36336517]
[94.92692566 -68.34616089]
[109.90923309 -69.07452393]
[124.68895721 -66.51331329]
[138.55256653 -60.78616714]
[150.83078003 -52.16957474]
[160.93081665 -41.07952499]
[168.36508179 -28.05141640]
[172.77467346 -13.71421051]
[173.94671631 1.23993039]
[171.82461548 16.08905983]
[166.51081848 30.11630440]
[158.26185608 42.64446259]
[147.47764587 53.06742096]
[162.12115479 49.81659698]
[176.76464844 46.56576920]
[191.40815735 43.31494522]
[193.39001465 27.53667068]
[200.63229370 13.40939140]
[212.24671936 2.62577009]
[226.82238770 -3.52918983]
[242.59715271 -4.33125114]
[257.67074585 0.29788253]
[270.23355103 9.78334141]
[278.78396606 22.96841240]
[293.35665894 19.41365051]
[307.92935181 15.85888958]
[315.92276001 2.22506332]
[331.23638916 -1.68242550]
[344.78494263 6.45466614]
[348.53030396 21.80874634]
[340.25042725 35.27051163]
[324.85760498 38.85333633]
[311.48413086 30.43159294]
[296.91140747 33.98635483]
[282.33871460 37.54111481]
[281.20773315 51.68508911]
[275.74691772 64.80458069]
[266.48013306 75.60639954]
[254.30708313 83.02136993]
[240.41600037 86.31012726]
[226.16764832 85.13684082]
[212.96202087 79.60343933]
[202.10078430 70.24092865]
[194.65898132 57.95844650]
[180.01547241 61.20927048]
[165.37197876 64.46009827]
[150.72846985 67.71092224]
[137.48588562 74.75605774]
[126.60706329 85.08325958]
[131.61073303 106.87481689]
[120.18874359 127.60056305]
[96.63180542 135.88488770]
[96.94386292 150.88165283]
[97.25592041 165.87840271]
[97.56797791 180.87515259]
[97.88003540 195.87190247]
[98.19209290 210.86866760]
[98.50414276 225.86541748]
[98.81620026 240.86216736]
[99.12825775 255.85891724]
[99.44031525 270.85568237]
[114.09530640 274.44644165]
[127.32111359 281.70870972]
[138.21598816 292.14730835]
[146.03707886 305.05050659]
[150.25114441 319.53857422]
[150.57087708 334.62365723]
[146.97444153 349.27728271]
[139.70707703 362.50027466]
[129.26428223 373.39111328]
[116.35805511 381.20724487]
[101.86836243 385.41571045]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
[63 127]
[64 126]
[91 125]
[92 124]
[93 123]
[94 122]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
