%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUAUAACAGGGGGGGGGGAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCxxxxxxxxxxAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUUACUACUAAUCCCCCCCCCCAAUUAUUACA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 388.28634644]
[71.19830322 382.27032471]
[59.48964310 372.74090576]
[50.78712082 360.40524292]
[45.73651886 346.17871094]
[44.71262741 331.11703491]
[47.79142761 316.33789062]
[54.74444962 302.93795776]
[65.05573273 291.91162109]
[77.96011353 284.07711792]
[92.50000000 280.01580811]
[92.50000000 265.01580811]
[92.50000000 250.01579285]
[92.50000000 235.01579285]
[92.50000000 220.01579285]
[92.50000000 205.01579285]
[92.50000000 190.01579285]
[92.50000000 175.01579285]
[92.50000000 160.01579285]
[92.50000000 145.01579285]
[92.50000000 130.01579285]
[81.30859375 124.65419006]
[73.12426758 115.32621765]
[69.26371765 103.53254700]
[70.34803772 91.17056274]
[76.20277405 80.22906494]
[85.88601685 72.46832275]
[82.48303986 57.85942841]
[79.08005524 43.25053406]
[67.68208313 42.17136002]
[57.01951599 38.07360077]
[47.87424469 31.27278709]
[40.91285324 22.28210449]
[36.63801193 11.77368927]
[35.35222244 0.52838486]
[37.13643646 -10.62227058]
[23.75015259 -17.39038467]
[10.36386776 -24.15850067]
[-3.02241707 -30.92661476]
[-16.40870285 -37.69472885]
[-29.79498672 -44.46284485]
[-43.25095367 -51.09134293]
[-56.77514267 -57.57950974]
[-70.29933167 -64.06767273]
[-83.82352448 -70.55583954]
[-98.64814758 -65.07806396]
[-112.96897125 -71.76308441]
[-118.28970337 -86.64479828]
[-111.45365143 -100.89414215]
[-96.51651764 -106.05724335]
[-82.34024048 -99.07091522]
[-77.33535767 -84.08002472]
[-63.81116867 -77.59186554]
[-50.28697586 -71.10369873]
[-36.76278687 -64.61553192]
[-29.32354736 -64.55760956]
[-23.02687263 -57.84912872]
[-9.64058685 -51.08101654]
[3.74569774 -44.31290054]
[17.13198280 -37.54478455]
[30.51826668 -30.77667046]
[43.90455246 -24.00855637]
[55.76469803 -34.58958817]
[70.73139954 -39.93927383]
[86.61152649 -39.27369690]
[92.67453766 -52.99374771]
[98.73754883 -66.71380615]
[86.17184448 -74.96927643]
[75.13642120 -85.18051147]
[65.93235016 -97.06894684]
[58.81071091 -110.31025696]
[53.96579742 -124.54319763]
[51.52977371 -139.37948608]
[51.56910324 -154.41439819]
[54.08271027 -169.23774719]
[59.00202179 -183.44514465]
[66.19283295 -196.64900208]
[75.45898438 -208.48912048]
[86.54766846 -218.64248657]
[99.15639496 -226.83210754]
[112.94118500 -232.83456421]
[127.52597809 -236.48611450]
[142.51287842 -237.68711853]
[157.49305725 -236.40483093]
[172.05783081 -232.67424011]
[185.80984497 -226.59709167]
[198.37396240 -218.33920288]
[209.40742493 -208.12583923]
[218.60920715 -196.23562622]
[225.72828674 -182.99295044]
[230.57046509 -168.75907898]
[233.00363159 -153.92231750]
[232.96139526 -138.88742065]
[230.44493103 -124.06455231]
[225.52288818 -109.85810089]
[218.32952881 -96.65561676]
[209.06111145 -84.81728363]
[197.97045898 -74.66605377]
[185.36015320 -66.47886658]
[171.57421875 -60.47906494]
[156.98872375 -56.83033371]
[142.00158691 -55.63220978]
[127.02165222 -56.91738129]
[112.45760345 -60.65079117]
[106.39459229 -46.93073654]
[100.33158112 -33.21068192]
[112.56799316 -20.51247025]
[118.46113586 -3.83139968]
[116.90684509 13.84883881]
[108.13754272 29.34503174]
[93.68894958 39.84755707]
[97.09192657 54.45645142]
[100.49490356 69.06534576]
[122.43838501 78.69937134]
[130.91854858 101.11404419]
[145.33076477 105.27193451]
[159.74298096 109.42981720]
[174.42565918 102.96463776]
[188.56736755 110.54035187]
[191.31980896 126.34553528]
[180.57154846 138.25578308]
[164.56771851 137.13459778]
[155.58509827 123.84203339]
[141.17288208 119.68415070]
[126.76066589 115.52626038]
[123.94439697 119.59244537]
[120.51612854 123.15785980]
[116.56348419 126.13137817]
[112.18749237 128.43699646]
[107.50000000 130.01579285]
[107.50000000 145.01579285]
[107.50000000 160.01579285]
[107.50000000 175.01579285]
[107.50000000 190.01579285]
[107.50000000 205.01579285]
[107.50000000 220.01579285]
[107.50000000 235.01579285]
[107.50000000 250.01579285]
[107.50000000 265.01580811]
[107.50000000 280.01580811]
[122.03988647 284.07711792]
[134.94427490 291.91162109]
[145.25555420 302.93795776]
[152.20857239 316.33789062]
[155.28736877 331.11703491]
[154.26348877 346.17871094]
[149.21287537 360.40524292]
[140.51036072 372.74090576]
[128.80169678 382.27032471]
[114.95575714 388.28634644]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[27 113]
[28 112]
[29 111]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[41 57]
[42 55]
[43 54]
[44 53]
[45 52]
[65 106]
[66 105]
[67 104]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
