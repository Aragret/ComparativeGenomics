%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUCCCCCGGGGGGGGGGGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAAAACAAAxxxxxxxxxxAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCUAGCCCCCCCCCCCCCCUACCCC\
) } def
/len { sequence length } bind def

/coor [
[85.89202118 415.36053467]
[71.40232849 411.15206909]
[58.49610138 403.33593750]
[48.05330276 392.44509888]
[40.78593826 379.22210693]
[37.18951035 364.56848145]
[37.50923157 349.48339844]
[41.72330093 334.99533081]
[49.54439926 322.09213257]
[60.43926620 311.65353394]
[73.66507721 304.39126587]
[88.32006836 300.80050659]
[88.63212585 285.80374146]
[88.94418335 270.80700684]
[89.25624084 255.81024170]
[89.56829071 240.81349182]
[89.88034821 225.81672668]
[90.19240570 210.81997681]
[90.50446320 195.82322693]
[90.81652069 180.82647705]
[91.12857819 165.82971191]
[91.44062805 150.83296204]
[91.75268555 135.83621216]
[78.50936127 129.83964539]
[68.62482452 119.17942810]
[54.50002289 124.22817993]
[40.37521744 129.27693176]
[30.17988205 142.12167358]
[14.00027275 139.44729614]
[8.48058605 124.00498199]
[19.29900169 111.68045807]
[35.32646179 115.15213776]
[49.45126724 110.10337830]
[63.57606888 105.05462646]
[63.35952377 96.88109589]
[64.95442963 88.86177063]
[68.28194427 81.39309692]
[73.17755127 74.84432220]
[79.39921570 69.53920746]
[86.63935852 65.74003601]
[84.15423584 50.94732666]
[81.66912079 36.15462112]
[78.25694275 32.03434753]
[76.94351196 27.47065544]
[77.53865051 23.35392189]
[79.52058411 20.36403465]
[77.96299744 5.44512320]
[76.40541840 -9.47378922]
[72.37894440 -17.74659729]
[74.97393799 -24.71880341]
[73.72706604 -39.66688919]
[72.48019409 -54.61497498]
[71.23331451 -69.56306458]
[58.15818787 -72.95843506]
[46.79454422 -80.22052765]
[38.25007629 -90.62468719]
[33.35246277 -103.14080048]
[32.56922150 -116.53527832]
[35.96310425 -129.49269104]
[43.18732452 -140.74487305]
[53.52094650 -149.19509888]
[65.94080353 -154.02496338]
[65.31682587 -169.01197815]
[64.69284821 -183.99899292]
[64.06887054 -198.98600769]
[63.44489670 -213.97302246]
[62.82091904 -228.96005249]
[48.53525925 -234.15507507]
[37.32846451 -244.42524719]
[30.90948296 -258.20440674]
[30.25716972 -273.39132690]
[35.47099304 -287.67013550]
[45.75588608 -298.86340332]
[59.54347229 -305.26425171]
[74.73124695 -305.89660645]
[89.00318909 -300.66400146]
[100.18292999 -290.36437988]
[106.56563568 -276.56838989]
[107.17799377 -261.37979126]
[101.92662048 -247.11476135]
[91.61231232 -235.94857788]
[77.80792999 -229.58403015]
[78.43190765 -214.59700012]
[79.05588531 -199.60998535]
[79.67986298 -184.62297058]
[80.30384064 -169.63595581]
[80.92781830 -154.64894104]
[96.64650726 -149.32589722]
[109.16056824 -138.37026978]
[116.54763031 -123.42779541]
[117.65871429 -106.75947571]
[112.29684448 -90.89942169]
[101.25125885 -78.26958466]
[86.18140411 -70.80993652]
[87.42827606 -55.86185074]
[88.67515564 -40.91376495]
[89.92202759 -25.96567726]
[91.32433319 -11.03137016]
[92.88191223 3.88754249]
[94.43949127 18.80645561]
[96.46183014 33.66950226]
[98.94694519 48.46220779]
[101.43206787 63.25491714]
[124.75716400 72.80928802]
[136.45028687 95.13902283]
[151.41052246 96.23033142]
[166.37077332 97.32164764]
[181.34156799 98.25727081]
[196.32128906 99.03711700]
[204.61444092 86.10966492]
[218.26762390 79.07500458]
[233.60816956 79.82543182]
[246.50956726 88.15907288]
[253.50138855 101.83422852]
[252.70288086 117.17234802]
[244.32884216 130.04756165]
[230.63183594 136.99649048]
[215.29629517 136.14991760]
[202.44740295 127.73554993]
[195.54144287 114.01683044]
[180.56172180 113.23698425]
[173.67388916 116.04827118]
[165.27946472 112.28189087]
[150.31921387 111.19058228]
[135.35896301 110.09927368]
[131.24926758 119.38389587]
[124.75716400 127.19071198]
[116.37760162 132.92454529]
[106.74944305 136.14826965]
[106.43738556 151.14501953]
[106.12532806 166.14176941]
[105.81327057 181.13851929]
[105.50121307 196.13528442]
[105.18916321 211.13203430]
[104.87710571 226.12878418]
[104.56504822 241.12553406]
[104.25299072 256.12228394]
[103.94093323 271.11904907]
[103.62887573 286.11581421]
[103.31682587 301.11254883]
[117.80976105 305.30984497]
[130.72201538 313.11599731]
[141.17323303 323.99874878]
[148.45080566 337.21615601]
[152.05854797 351.86697388]
[151.75047302 366.95230103]
[147.54759216 381.44363403]
[139.73646545 394.35287476]
[128.84965515 404.79986572]
[115.62945557 412.07235718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[25 34]
[26 33]
[27 32]
[40 103]
[41 102]
[42 101]
[46 100]
[47 99]
[48 98]
[50 97]
[51 96]
[52 95]
[53 94]
[62 87]
[63 86]
[64 85]
[65 84]
[66 83]
[67 82]
[105 125]
[106 124]
[107 123]
[108 121]
[109 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
