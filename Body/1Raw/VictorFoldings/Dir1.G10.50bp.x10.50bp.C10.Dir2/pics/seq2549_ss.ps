%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAAAACACUGAGGGGGGGGGGACUGACAAUUAACAGCCCAAUAUCUACAAUCAACCAACAAGUCAUUAUUAxxxxxxxxxxCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCCCCCCCCCCCACUAAAACACUCA\
) } def
/len { sequence length } bind def

/coor [
[62.84469986 169.46969604]
[50.36946869 161.18305969]
[39.68784332 150.68530273]
[31.18585396 138.35581970]
[25.17075157 124.64019775]
[21.85991669 110.03408813]
[21.37299919 95.06536102]
[23.72760010 80.27497101]
[28.83862305 66.19742584]
[36.52136230 53.34147263]
[46.49816513 42.17172623]
[58.40848160 33.09184265]
[71.82188416 26.42996788]
[86.25361633 22.42685509]
[85.05429077 7.47487831]
[83.85496521 -7.47709846]
[82.65563965 -22.42907524]
[81.45630646 -37.38105392]
[80.25698090 -52.33303070]
[79.05765533 -67.28500366]
[77.85832977 -82.23698425]
[76.65900421 -97.18895721]
[75.45967102 -112.14093781]
[60.45899582 -111.81280518]
[45.46461487 -112.35743713]
[30.52727127 -113.77300262]
[15.69750690 -116.05470276]
[1.02550125 -119.19481659]
[-13.43909931 -123.18272400]
[-27.64735031 -128.00492859]
[-41.55117798 -133.64511108]
[-55.10353088 -140.08419800]
[-68.25856018 -147.30038452]
[-80.97174072 -155.26925659]
[-93.20007324 -163.96385193]
[-104.90216064 -173.35476685]
[-116.03841400 -183.41020203]
[-126.57115936 -194.09614563]
[-136.46475220 -205.37643433]
[-145.68571472 -217.21290588]
[-154.20283508 -229.56550598]
[-161.98730469 -242.39242554]
[-169.01280212 -255.65026855]
[-175.25552368 -269.29418945]
[-180.69435120 -283.27801514]
[-185.31089783 -297.55441284]
[-189.08952332 -312.07507324]
[-192.01745605 -326.79089355]
[-194.08479309 -341.65206909]
[-195.28451538 -356.60830688]
[-195.61259460 -371.60897827]
[-195.06790161 -386.60336304]
[-193.65226746 -401.54067993]
[-191.37051392 -416.37045288]
[-188.23033142 -431.04244995]
[-184.24237061 -445.50701904]
[-179.42010498 -459.71524048]
[-173.77986145 -473.61904907]
[-167.34072876 -487.17138672]
[-160.12448120 -500.32638550]
[-152.15556335 -513.03955078]
[-143.46090698 -525.26782227]
[-134.06994629 -536.96984863]
[-124.01446533 -548.10607910]
[-113.32847595 -558.63879395]
[-102.04814911 -568.53234863]
[-90.21163940 -577.75323486]
[-77.85900879 -586.27032471]
[-65.03205109 -594.05474854]
[-51.77417374 -601.08020020]
[-38.13022995 -607.32281494]
[-24.14638901 -612.76159668]
[-9.86996937 -617.37811279]
[4.65072107 -621.15667725]
[19.36655045 -624.08453369]
[34.22772217 -626.15179443]
[49.18395615 -627.35150146]
[64.18463898 -627.67950439]
[79.17901611 -627.13470459]
[94.11634827 -625.71905518]
[108.94609070 -623.43719482]
[123.61807251 -620.29699707]
[138.08264160 -616.30895996]
[152.29084778 -611.48663330]
[166.19462585 -605.84631348]
[179.74693298 -599.40716553]
[192.90190125 -592.19085693]
[205.61502075 -584.22186279]
[217.84327698 -575.52716064]
[229.54528809 -566.13616943]
[240.68145752 -556.08062744]
[251.21411133 -545.39459229]
[261.10760498 -534.11419678]
[270.32846069 -522.27770996]
[278.84548950 -509.92501831]
[286.62985229 -497.09802246]
[293.65524292 -483.84011841]
[299.89785767 -470.19613647]
[305.33657837 -456.21228027]
[309.95300293 -441.93585205]
[313.73150635 -427.41513062]
[316.65930176 -412.69931030]
[318.72653198 -397.83810425]
[319.92611694 -382.88186646]
[320.25408936 -367.88119507]
[319.70925903 -352.88681030]
[318.29351807 -337.94949341]
[316.01162720 -323.11975098]
[312.87130737 -308.44778442]
[308.88323975 -293.98324585]
[304.06085205 -279.77505493]
[298.42050171 -265.87130737]
[291.98126221 -252.31901550]
[284.76489258 -239.16407776]
[276.79586792 -226.45100403]
[268.10110474 -214.22277832]
[258.71005249 -202.52081299]
[248.65447998 -191.38467407]
[237.96841431 -180.85206604]
[226.68800354 -170.95861816]
[214.85140991 -161.73780823]
[202.49871826 -153.22082520]
[189.67169189 -145.43650818]
[176.41375732 -138.41119385]
[162.76976013 -132.16864014]
[148.78587341 -126.72998047]
[134.50941467 -122.11360931]
[119.98869324 -118.33515930]
[105.27284241 -115.40740967]
[90.41165161 -113.34026337]
[91.61097717 -98.38829041]
[92.81030273 -83.43630981]
[94.00963593 -68.48433685]
[95.20896149 -53.53235626]
[96.40828705 -38.58037949]
[97.60761261 -23.62840271]
[98.80693817 -8.67642593]
[100.00627136 6.27555132]
[101.20559692 21.22752762]
[116.09090424 22.87906456]
[130.39469910 27.31768990]
[143.60005188 34.38299561]
[155.22973633 43.81964493]
[164.86346436 55.28660583]
[172.15307617 68.36947632]
[176.83512878 82.59544373]
[178.74043274 97.45040131]
[177.80010986 112.39749908]
[174.04817200 126.89656067]
[167.62017822 140.42359924]
[158.74844360 152.48976135]
[147.75360107 162.65899658]
[135.03297424 170.56378174]
[121.04628754 175.91844177]
[106.29900360 178.52947998]
[91.32407379 178.30252075]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
