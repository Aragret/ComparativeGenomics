%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUACAUACUGGGGGGGGGGUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAxxxxxxxxxxUACCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCCCCCCCCCCCUCCAACAUACU\
) } def
/len { sequence length } bind def

/coor [
[80.25212860 413.12631226]
[66.09152222 407.97131348]
[53.50177765 399.68908691]
[43.16184235 388.72631836]
[35.62932968 375.67419434]
[31.31046486 361.23660278]
[30.43815613 346.19213867]
[33.05944824 331.35214233]
[39.03297424 317.51690674]
[48.03659058 305.43255615]
[59.58474731 295.75079346]
[73.05466461 288.99371338]
[87.71992493 285.52572632]
[87.71992493 270.52572632]
[87.71992493 255.52572632]
[87.71992493 240.52572632]
[87.71992493 225.52572632]
[87.71992493 210.52572632]
[87.71992493 195.52572632]
[87.71992493 180.52572632]
[87.71992493 165.52572632]
[87.71992493 150.52572632]
[75.67464447 141.58642578]
[61.31778336 145.93159485]
[59.85307312 161.06181335]
[52.70537186 174.47741699]
[40.96464539 184.13267517]
[26.42126846 188.55519104]
[11.29300499 187.07057190]
[-2.11319780 179.90522766]
[-11.75299072 168.15180969]
[-16.15637398 153.60263062]
[-14.65186691 138.47633362]
[-7.46889257 125.07957458]
[4.29719639 115.45524597]
[18.85215569 111.07100677]
[33.97646332 112.59541321]
[47.36376572 119.79600525]
[56.97260284 131.57473755]
[71.32946777 127.22956085]
[71.63340759 119.73572540]
[72.24128723 104.74804688]
[72.54523468 97.25421143]
[58.58742142 91.76062012]
[44.62961197 86.26702881]
[30.67180061 80.77343750]
[13.71875191 80.59877014]
[9.19352436 64.25990295]
[23.64115524 55.38847351]
[36.16539001 66.81562805]
[50.12319946 72.30921936]
[64.08100891 77.80281067]
[78.03881836 83.29640198]
[86.73217010 71.07241821]
[76.96157837 59.69104767]
[62.10178757 54.25991821]
[59.68233490 39.56313324]
[43.85915756 36.91611481]
[36.18933487 22.82522011]
[42.55649948 8.09977150]
[58.07630157 4.03587627]
[70.84328461 13.75100613]
[71.06370544 29.79254532]
[85.22463989 34.40960312]
[88.34295654 49.92045975]
[98.11354065 61.30183029]
[112.55551147 57.24851608]
[114.97707367 42.44527054]
[117.39862823 27.64202499]
[103.53253937 21.72637367]
[91.48549652 12.66368580]
[81.95791626 0.98085350]
[75.50370789 -12.64289761]
[72.49810791 -27.41550255]
[73.11586761 -42.47809982]
[77.32106781 -56.95496750]
[84.86921692 -70.00444031]
[95.32148743 -80.86784363]
[108.07019043 -88.91359711]
[122.37413025 -93.67391205]
[137.40170288 -94.87204742]
[152.27922058 -92.43834686]
[166.14172363 -86.51428986]
[178.18325806 -77.44429779]
[187.70376587 -65.75569153]
[194.14971924 -52.12802887]
[197.14634705 -37.35360718]
[196.51945496 -22.29138565]
[192.30548096 -7.81706905]
[184.74942017 5.22782850]
[174.29057312 16.08489227]
[161.53700256 24.12290955]
[147.23016357 28.87455750]
[132.20187378 30.06358337]
[129.78031921 44.86682892]
[127.35875702 59.67007065]
[132.12771606 65.45860291]
[140.19079590 52.81000900]
[154.71194458 56.56984711]
[155.62338257 71.54212952]
[141.66563416 77.03565216]
[146.43458557 82.82418060]
[161.42765808 83.28015137]
[176.42073059 83.73611450]
[191.41378784 84.19208527]
[206.40686035 84.64804840]
[221.39993286 85.10401917]
[236.39300537 85.55998230]
[251.38606262 86.01595306]
[266.37911987 86.47191620]
[272.95529175 72.73605347]
[284.55401611 62.86742783]
[299.16571045 58.57584000]
[314.25888062 60.60483170]
[327.21847534 68.60286713]
[335.79919434 81.18424225]
[338.51437378 96.16915894]
[334.89361572 110.96138000]
[325.56420898 122.99807739]
[312.14254761 130.19380188]
[296.95397949 131.30187988]
[282.63006592 126.13030243]
[271.65249634 115.57508850]
[265.92315674 101.46498871]
[250.93009949 101.00901794]
[235.93702698 100.55305481]
[220.94396973 100.09708405]
[205.95089722 99.64112091]
[190.95782471 99.18515015]
[175.96475220 98.72918701]
[160.97169495 98.27321625]
[145.97862244 97.81724548]
[102.71992493 150.52572632]
[102.71992493 165.52572632]
[102.71992493 180.52572632]
[102.71992493 195.52572632]
[102.71992493 210.52572632]
[102.71992493 225.52572632]
[102.71992493 240.52572632]
[102.71992493 255.52572632]
[102.71992493 270.52572632]
[102.71992493 285.52572632]
[117.38518524 288.99371338]
[130.85510254 295.75079346]
[142.40325928 305.43255615]
[151.40687561 317.51690674]
[157.38040161 331.35214233]
[160.00169373 346.19213867]
[159.12937927 361.23660278]
[154.81051636 375.67419434]
[147.27801514 388.72631836]
[136.93806458 399.68908691]
[124.34832764 407.97131348]
[110.18772125 413.12631226]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 40]
[24 39]
[43 53]
[44 52]
[45 51]
[46 50]
[54 66]
[55 65]
[57 63]
[67 96]
[68 95]
[69 94]
[102 132]
[103 131]
[104 130]
[105 129]
[106 128]
[107 127]
[108 126]
[109 125]
[110 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
