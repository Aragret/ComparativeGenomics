%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUACAACCGGGGGGGGGGCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACCCCAUACCCCGxxxxxxxxxxGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUCAAGCAAUCCCCCCCCCCCCUAUACAACC\
) } def
/len { sequence length } bind def

/coor [
[115.19778442 443.85723877]
[101.97759247 436.58474731]
[91.09078979 426.13775635]
[83.27965546 413.22851562]
[79.07677460 398.73718262]
[78.76869965 383.65185547]
[82.37644196 369.00103760]
[89.65401459 355.78363037]
[100.10522461 344.90087891]
[113.01748657 337.09472656]
[127.51042175 332.89743042]
[127.19836426 317.90069580]
[126.88630676 302.90393066]
[126.57425690 287.90716553]
[126.26219940 272.91043091]
[125.95014191 257.91366577]
[125.63808441 242.91691589]
[125.32602692 227.92016602]
[125.01396942 212.92341614]
[124.70191956 197.92665100]
[112.38741302 189.59053040]
[107.28249359 175.43412781]
[111.54203796 160.81532288]
[123.73375702 151.39894104]
[123.42169952 136.40219116]
[76.74434662 125.05377197]
[77.95729828 88.03448486]
[67.51748657 77.26367950]
[57.07767487 66.49286652]
[46.63785934 55.72206116]
[43.96364975 60.86407852]
[39.58447647 65.48400879]
[33.62901306 69.12445068]
[26.33657837 71.36289978]
[18.04768181 71.83679199]
[9.18912315 70.26619720]
[-5.13347435 65.80938721]
[-19.45607185 61.35256958]
[-33.77866745 56.89575577]
[-44.55175400 67.76770020]
[-59.14678955 72.37677002]
[-74.20994568 69.66383362]
[-86.27980804 60.25230789]
[-92.58282471 46.30488586]
[-91.67060089 31.02658653]
[-83.75276184 17.92824936]
[-70.64876556 10.01977921]
[-55.36981964 9.11848354]
[-41.42691040 15.43147182]
[-32.02401352 27.50806808]
[-29.32185364 42.57315826]
[-14.99925613 47.02997208]
[-0.67665857 51.48678970]
[13.64593887 55.94360352]
[19.13877106 50.83686447]
[30.12443542 40.62338257]
[35.61726761 35.51664352]
[32.21429062 20.90775108]
[28.81131172 6.29885864]
[13.72916508 5.64203405]
[-0.61612648 0.93935555]
[-13.16004658 -7.46020603]
[-22.97175407 -18.93334770]
[-29.32315445 -32.62868500]
[-31.74293137 -47.52993774]
[-30.05152130 -62.53132629]
[-24.37443733 -76.51965332]
[-15.13295937 -88.45689392]
[-3.01286387 -97.45722198]
[11.08645630 -102.85274506]
[26.11873817 -104.24309540]
[40.96848679 -101.52509308]
[54.53375244 -94.90043640]
[65.80789948 -84.86070251]
[73.95431519 -72.15092468]
[78.36848450 -57.71424866]
[78.72283936 -42.62196350]
[74.99108887 -27.99402618]
[67.45014954 -14.91592121]
[56.65961075 -4.35813284]
[43.42020416 2.89588094]
[46.82318115 17.50477409]
[50.22616196 32.11366653]
[57.40866852 45.28224945]
[67.84848022 56.05305862]
[78.28829193 66.82386780]
[88.72810364 77.59467316]
[93.17180634 72.10144806]
[99.54862213 67.64009857]
[107.58063507 64.80299377]
[116.82260132 64.10099792]
[126.68647766 65.91881561]
[137.77780151 55.82016754]
[142.24057007 40.03993607]
[158.20228577 36.27754593]
[169.24290466 48.40341949]
[164.00477600 63.94350052]
[147.87644958 66.91148376]
[136.78512573 77.01013184]
[143.41392517 90.46669006]
[150.04212952 103.92206573]
[162.26588440 93.87764740]
[176.15583801 99.25524139]
[190.92189026 96.61637878]
[205.68795776 93.97751617]
[213.31799316 80.32773590]
[227.95512390 74.82425690]
[242.68815613 80.06564331]
[250.56057739 93.57708740]
[247.85527039 108.97888184]
[235.84962463 118.99878693]
[220.21232605 118.90569305]
[208.32681274 108.74356842]
[193.56076050 111.38243103]
[178.79470825 114.02129364]
[167.62710571 123.87696075]
[152.68098450 118.68811798]
[167.66351318 117.96416473]
[179.95420837 126.56292725]
[184.40963745 140.88595581]
[179.16525269 154.93930054]
[166.41575623 162.84187317]
[151.49661255 161.28654480]
[140.65122986 150.92424011]
[138.41845703 136.09013367]
[138.73051453 151.08688354]
[151.30339050 159.98796082]
[156.16735840 174.41691589]
[151.65574646 188.77342224]
[139.69866943 197.61459351]
[140.01072693 212.61135864]
[140.32278442 227.60810852]
[140.63484192 242.60485840]
[140.94689941 257.60162354]
[141.25895691 272.59835815]
[141.57101440 287.59512329]
[141.88305664 302.59188843]
[142.19511414 317.58862305]
[142.50717163 332.58538818]
[157.16217041 336.17614746]
[170.38798523 343.43841553]
[181.28285217 353.87701416]
[189.10394287 366.78021240]
[193.31800842 381.26828003]
[193.63774109 396.35339355]
[190.04130554 411.00698853]
[182.77394104 424.22998047]
[172.33114624 435.12081909]
[159.42491150 442.93695068]
[144.93522644 447.14541626]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[24 126]
[25 125]
[27 87]
[28 86]
[29 85]
[30 84]
[36 54]
[37 53]
[38 52]
[39 51]
[57 83]
[58 82]
[59 81]
[92 99]
[93 98]
[101 117]
[103 115]
[104 114]
[105 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
