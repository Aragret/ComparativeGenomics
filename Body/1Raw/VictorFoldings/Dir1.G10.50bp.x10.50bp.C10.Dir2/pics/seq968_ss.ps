%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUUACACAGGGGGGGGGGUGCAAGCAUCCCCGUUCCAGUGAGUUCACCCUCUAAAUCACCACGAUCAAxxxxxxxxxxCUCACUGCCCAAGAACUAUCAAACUCCUGAGCCAACAACUUAAUAUGACUCCCCCCCCCCAGCUUACACA\
) } def
/len { sequence length } bind def

/coor [
[85.67443848 407.66235352]
[71.82850647 401.64630127]
[60.11984253 392.11688232]
[51.41731644 379.78121948]
[46.36671448 365.55471802]
[45.34282303 350.49301147]
[48.42162323 335.71386719]
[55.37464523 322.31393433]
[65.68592834 311.28759766]
[78.59030914 303.45309448]
[93.13019562 299.39178467]
[93.13019562 284.39178467]
[93.13019562 269.39178467]
[93.13019562 254.39178467]
[93.13019562 239.39178467]
[93.13019562 224.39178467]
[93.13019562 209.39178467]
[93.13019562 194.39178467]
[93.13019562 179.39178467]
[93.13019562 164.39178467]
[85.39289856 151.66450500]
[93.13019562 137.86433411]
[92.97415924 122.86515045]
[92.66210175 107.86839294]
[89.25912476 93.25950623]
[82.91199493 79.66854858]
[67.82550812 80.94261169]
[53.24077225 76.98566437]
[40.91301727 68.29389954]
[32.31900406 55.93214798]
[28.48012161 41.40340042]
[29.84104347 26.46611977]
[36.21829224 12.92138577]
[46.82471085 2.39574242]
[40.47758102 -11.19520855]
[34.13045120 -24.78615952]
[27.78332138 -38.37710953]
[20.73818779 -51.61969757]
[13.01410198 -64.47809601]
[5.29001760 -77.33650208]
[-2.43406749 -90.19490051]
[-10.15815258 -103.05330658]
[-17.88223648 -115.91170502]
[-25.60632324 -128.77011108]
[-40.33073425 -123.90302277]
[-55.76060104 -122.41964722]
[-71.12878418 -124.39063263]
[-85.67188263 -129.71498108]
[-98.66818237 -138.12516785]
[-109.47345734 -149.20063782]
[-117.55289459 -162.38879395]
[-122.50758362 -177.03259277]
[-124.09419250 -192.40327454]
[-122.23693848 -207.73658752]
[-117.03118134 -222.27087402]
[-108.73854065 -235.28483582]
[-97.77375793 -246.13333130]
[-105.76367188 -258.82824707]
[-113.75359344 -271.52319336]
[-129.01518250 -276.46920776]
[-134.52857971 -291.53512573]
[-126.06437683 -305.16366577]
[-110.11558533 -306.90014648]
[-98.91674805 -295.41253662]
[-101.05866241 -279.51309204]
[-93.06874084 -266.81817627]
[-85.07882690 -254.12324524]
[-71.42804718 -259.10433960]
[-57.03194427 -261.12527466]
[-42.52518463 -260.09439087]
[-28.54784584 -256.05462646]
[-15.71717644 -249.18171692]
[-4.60033894 -239.77662659]
[4.31065893 -228.25225830]
[10.62074089 -215.11540222]
[14.04927921 -200.94442749]
[14.44256878 -186.36381531]
[11.78072357 -172.01666260]
[6.17866039 -158.53628540]
[-2.11885929 -146.51828003]
[-12.74792004 -136.49420166]
[-5.02383518 -123.63579559]
[2.70024991 -110.77738953]
[10.42433453 -97.91899109]
[18.14842033 -85.06058502]
[25.87250519 -72.20218658]
[33.59658813 -59.34378052]
[40.04305267 -72.88789368]
[54.60170364 -76.49977875]
[66.63134766 -67.53943634]
[67.33927917 -52.55615234]
[56.20806885 -42.50149536]
[41.37427139 -44.72423935]
[47.72140121 -31.13328934]
[54.06853104 -17.54233742]
[60.41566086 -3.95138693]
[75.29486847 -5.32782125]
[89.77436066 -1.52342319]
[102.10164642 7.02130699]
[110.77791595 19.29093933]
[114.74023438 33.81575012]
[113.49175262 48.84776688]
[107.16392517 62.57112503]
[96.50294495 73.32141876]
[102.85007477 86.91237640]
[104.49623871 72.00297546]
[110.20240021 58.13071060]
[119.52323914 46.37817764]
[131.73135376 37.66256332]
[145.87400818 32.66403198]
[160.84750366 31.77267838]
[175.48329163 35.05806351]
[188.63917542 42.26379395]
[199.28846741 52.82752609]
[206.60009766 65.92485809]
[210.00344849 80.53366852]
[209.23291016 95.51386261]
[204.34863281 109.69638062]
[195.73178101 121.97440338]
[184.05482483 131.38975525]
[170.22904968 137.20762634]
[155.33341980 138.97401428]
[140.53039551 136.55105591]
[126.97524261 130.12783813]
[115.72579956 120.20565033]
[107.65885925 107.55633545]
[107.97091675 122.55309296]
[111.29577637 131.13197327]
[108.13019562 137.86433411]
[115.86750031 151.66450500]
[108.13019562 164.39178467]
[108.13019562 179.39178467]
[108.13019562 194.39178467]
[108.13019562 209.39178467]
[108.13019562 224.39178467]
[108.13019562 239.39178467]
[108.13019562 254.39178467]
[108.13019562 269.39178467]
[108.13019562 284.39178467]
[108.13019562 299.39178467]
[122.67008209 303.45309448]
[135.57446289 311.28759766]
[145.88574219 322.31393433]
[152.83877563 335.71386719]
[155.91757202 350.49301147]
[154.89367676 365.55471802]
[149.84307861 379.78121948]
[141.14054871 392.11688232]
[129.43188477 401.64630127]
[115.58595276 407.66235352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 127]
[24 126]
[25 105]
[26 104]
[34 96]
[35 95]
[36 94]
[37 93]
[38 87]
[39 86]
[40 85]
[41 84]
[42 83]
[43 82]
[44 81]
[57 67]
[58 66]
[59 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
