%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCUAUACCGGGGGGGGGGAACACCUAUUCUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUAxxxxxxxxxxACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUCCCCCCCCCCAUUCUACACC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 383.68130493]
[71.19830322 377.66528320]
[59.48964310 368.13586426]
[50.78712082 355.80020142]
[45.73651886 341.57366943]
[44.71262741 326.51199341]
[47.79142761 311.73284912]
[54.74444962 298.33291626]
[65.05573273 287.30657959]
[77.96011353 279.47207642]
[92.50000000 275.41076660]
[92.50000000 260.41076660]
[92.50000000 245.41075134]
[92.50000000 230.41075134]
[92.50000000 215.41075134]
[92.50000000 200.41075134]
[92.50000000 185.41075134]
[92.50000000 170.41075134]
[92.50000000 155.41075134]
[92.50000000 140.41075134]
[92.50000000 125.41075897]
[85.91937256 122.44309235]
[80.38405609 117.80931091]
[76.30498505 111.85339355]
[61.53893280 114.49226379]
[46.77287674 117.13112640]
[43.55129623 131.98675537]
[34.88583374 144.47587585]
[22.09790611 152.69398499]
[7.13757992 155.38789368]
[-7.71380329 152.14677429]
[-20.19151688 143.46488953]
[-28.39279747 130.66615295]
[-31.06701088 115.70230103]
[-27.80635834 100.85519409]
[-19.10806847 88.38890839]
[-6.29856253 80.20447540]
[8.66879940 77.54994965]
[23.51160431 80.83012390]
[35.96643066 89.54480743]
[44.13401413 102.36506653]
[58.90007019 99.72620392]
[73.66612244 97.08734131]
[75.18593597 90.71459198]
[78.22302246 84.90960693]
[82.59168243 80.02734375]
[88.02478790 76.36631775]
[94.19013214 74.15039825]
[100.71072388 73.51506805]
[107.18785858 74.49919128]
[115.17777252 61.80426025]
[123.16768646 49.10932922]
[131.15760803 36.41440201]
[139.14752197 23.71947098]
[130.27114868 10.78586864]
[127.28532410 -4.56321049]
[130.64454651 -19.78395462]
[139.75506592 -32.36985779]
[153.07939148 -40.26448059]
[168.39562988 -42.19741058]
[172.40338135 -56.65209961]
[176.41111755 -71.10678864]
[180.41885376 -85.56147766]
[169.44763184 -75.33248138]
[156.50732422 -67.74641418]
[142.22265625 -63.16951370]
[127.28323364 -61.82273865]
[112.41030884 -63.77111053]
[98.32190704 -68.92056274]
[85.69817352 -77.02249908]
[75.14854431 -87.68576813]
[67.18233490 -100.39559174]
[62.18413544 -114.53836060]
[60.39523697 -129.43130493]
[61.90200806 -144.35543823]
[66.63170624 -158.59025574]
[74.35598755 -171.44853210]
[84.70195007 -182.30952454]
[97.17012024 -190.64888000]
[111.15856171 -196.06399536]
[125.99195099 -198.29344177]
[140.95417786 -197.22959900]
[155.32290649 -192.92381287]
[168.40444946 -185.58396912]
[179.56724548 -175.56439209]
[188.27243042 -163.34883118]
[194.09970093 -149.52700806]
[196.76773071 -134.76618958]
[196.14775085 -119.77901459]
[192.27043152 -105.29096222]
[203.14924622 -115.61817169]
[214.02807617 -125.94537354]
[215.88095093 -141.88107300]
[229.57092285 -150.24555969]
[244.59619141 -144.62231445]
[249.43066406 -129.32501221]
[240.36575317 -116.08843231]
[224.35528564 -115.06655121]
[213.47645569 -104.73934174]
[202.59762573 -94.41213989]
[194.87355042 -81.55373383]
[190.86579895 -67.09904480]
[186.85806274 -52.64435959]
[182.85032654 -38.18967056]
[195.51222229 -27.79661942]
[202.60855103 -13.03242302]
[217.60124207 -13.50046539]
[232.59393311 -13.96850681]
[247.58663940 -14.43654919]
[262.57931519 -14.90459156]
[276.22601318 -23.99853706]
[290.80297852 -16.48559189]
[291.31466675 -0.09442972]
[277.23471069 8.31312752]
[263.04736328 0.08810478]
[248.05467224 0.55614692]
[233.06198120 1.02418900]
[218.06927490 1.49223113]
[203.07658386 1.96027327]
[198.69172668 14.59576702]
[190.16667175 24.96844673]
[178.53045654 31.76982880]
[165.20732117 34.12592316]
[151.84245300 31.70938683]
[143.85253906 44.40431595]
[135.86262512 57.09924698]
[127.87270355 69.79417419]
[119.88278961 82.48910522]
[125.45626068 107.34406281]
[107.50000000 125.41075897]
[107.50000000 140.41075134]
[107.50000000 155.41075134]
[107.50000000 170.41075134]
[107.50000000 185.41075134]
[107.50000000 200.41075134]
[107.50000000 215.41075134]
[107.50000000 230.41075134]
[107.50000000 245.41075134]
[107.50000000 260.41076660]
[107.50000000 275.41076660]
[122.03988647 279.47207642]
[134.94427490 287.30657959]
[145.25555420 298.33291626]
[152.20857239 311.73284912]
[155.28736877 326.51199341]
[154.26348877 341.57366943]
[149.21287537 355.80020142]
[140.51036072 368.13586426]
[128.80169678 377.66528320]
[114.95575714 383.68130493]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 43]
[25 42]
[26 41]
[50 128]
[51 127]
[52 126]
[53 125]
[54 124]
[60 104]
[61 103]
[62 102]
[63 101]
[90 100]
[91 99]
[92 98]
[106 119]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
